#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _869;
float _3282;
float _3283;
float _3284;
float _3285;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _224.x * cbMtdParam._m0[9u].x;
    float _231 = _224.y * cbMtdParam._m0[9u].y;
    float _232 = _224.z * cbMtdParam._m0[9u].z;
    vec4 _244 = texture(sampler2D(P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _248 = _244.z;
    float _252 = (_244.x * 2.0) + (-1.0);
    float _254 = (_244.y * 2.0) + (-1.0);
    float _255 = dot(vec2(_252, _254), vec2(_252, _254));
    float _3294 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _261 = sqrt(1.0 - (isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0))));
    vec4 _283 = texture(sampler2D(P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _290 = fma(_261, _194 * NORMAL.x, fma(_254, _201 * TANGENT.x, (_187 * _180) * _252));
    float _293 = fma(_261, _194 * NORMAL.y, fma(_254, _201 * TANGENT.y, (_187 * _181) * _252));
    float _296 = fma(_261, _194 * NORMAL.z, fma(_254, _201 * TANGENT.z, (_187 * _182) * _252));
    float _300 = inversesqrt(dot(vec3(_290, _293, _296), vec3(_290, _293, _296)));
    float _301 = _300 * _290;
    float _302 = _300 * _293;
    float _303 = _300 * _296;
    float _3305 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _304 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
    float _3316 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3327 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3338 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _323 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _364 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _374 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _364);
    float _375 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _364);
    float _376 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _364);
    float _380 = inversesqrt(dot(vec3(_374, _375, _376), vec3(_374, _375, _376)));
    float _381 = _374 * _380;
    float _382 = _375 * _380;
    float _383 = _376 * _380;
    vec4 _388 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _390 = _388.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _548 = sqrt(((_374 * _374) + (_375 * _375)) + (_376 * _376));
        float _554 = (cbMatDynParam._m0[5u].x * _548) + cbMatDynParam._m0[5u].y;
        float _3349 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
        float _555 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
        float _559 = (cbMatDynParam._m0[5u].z * _548) + cbMatDynParam._m0[5u].w;
        float _3360 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) - _555)) + _555) < ((_390 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _402 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _403 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _423 = fma(_303, cbSceneParam._m0[5u].z, fma(_302, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _301));
    float _426 = fma(_303, cbSceneParam._m0[6u].z, fma(_302, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _301));
    float _429 = fma(_303, cbSceneParam._m0[7u].z, fma(_302, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _301));
    uint _442 = uint(roundEven(NORMAL.w)) * 13u;
    uint _444 = _442 + 9u;
    uint _445 = _444 + uint(cbMatDynParam._m0[0u].w);
    float _451 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0)))) * cbInstanceData._m0[_445].x;
    float _452 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0)))) * cbInstanceData._m0[_445].y;
    float _453 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0)))) * cbInstanceData._m0[_445].z;
    float _3371 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
    float _3382 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _455 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    float _3393 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    vec4 _465 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _402, cbSceneParam._m0[86u].y * _403));
    float _468 = _465.x * TEXCOORD.z;
    float _469 = dot(vec3(_301, _302, _303), vec3(_381, _382, _383));
    float _472 = _469 * 2.0;
    float _476 = (_472 * _301) - _381;
    float _477 = (_472 * _302) - _382;
    float _478 = (_472 * _303) - _383;
    float _482 = abs(dot(vec3(_381, _382, _383), vec3(_301, _302, _303)));
    float _3404 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _484 = sqrt(_304);
    float _497 = exp2((_484 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_484 * 3.0));
    float _529 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _533 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _868;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _593 = fma(_537, cbModelParam._m0[26u].z, fma(_533, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _529));
        float _597 = fma(_537, cbModelParam._m0[27u].z, fma(_533, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _529));
        float _601 = fma(_537, cbModelParam._m0[28u].z, fma(_533, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _529));
        float _626 = _529 + _301;
        float _627 = _533 + _302;
        float _628 = _537 + _303;
        float _638 = fma(_628, cbModelParam._m0[26u].z, fma(_627, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _626)) - _593;
        float _639 = fma(_628, cbModelParam._m0[27u].z, fma(_627, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _626)) - _597;
        float _640 = fma(_628, cbModelParam._m0[28u].z, fma(_627, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _626)) - _601;
        float _644 = inversesqrt(dot(vec3(_638, _639, _640), vec3(_638, _639, _640)));
        float _657 = ((_644 * _638) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_593 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _658 = ((_644 * _639) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_597 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _659 = ((_644 * _640) / cbModelParam._m0[34u].z) + ((((((_601 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_657, _658, _659), 0.0);
        vec4 _669 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_657, _658, _659), 0.0);
        vec4 _676 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_657, _658, _659), 0.0);
        vec4 _683 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_657, _658, _659), 0.0);
        float _696 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _697 = _696 * (_662.x + (-0.5));
        float _698 = _696 * (_662.y + (-0.5));
        float _699 = _696 * (_662.z + (-0.5));
        float _706 = exp2((_669.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _706 * (_669.x + (-0.5));
        float _708 = _706 * (_669.y + (-0.5));
        float _709 = _706 * (_669.z + (-0.5));
        float _716 = exp2((_676.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_676.x + (-0.5));
        float _718 = _716 * (_676.y + (-0.5));
        float _719 = _716 * (_676.z + (-0.5));
        float _726 = exp2((_683.w + (-0.5)) * 20.0) * 2.0;
        float _727 = _726 * (_683.x + (-0.5));
        float _728 = _726 * (_683.y + (-0.5));
        float _729 = _726 * (_683.z + (-0.5));
        float _730 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _731 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _732 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _733 = _697 * 0.5;
        float _734 = _707 * 0.5;
        float _735 = _717 * 0.5;
        float _736 = dot(vec3(_733, _734, _735), vec3(_733, _734, _735));
        float _741 = (_736 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_736);
        float _750 = (dot(vec3(_301, _302, _303), vec3(_741 * _733, _741 * _734, _741 * _735)) + 1.0) * 0.5;
        float _3430 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _760 = sqrt(((_734 * _734) + (_733 * _733)) + (_735 * _735)) / (_730 + 9.9999997473787516355514526367188e-06);
        float _3441 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _762 = _761 * 2.0;
        float _766 = (1.0 - _761) / (_761 + 1.0);
        float _3452 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _776 = ((((1.0 - _767) * (_762 + 2.0)) * exp2(log2(isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))) * (_762 + 1.0))) + _767) * _730;
        float _777 = _698 * 0.5;
        float _778 = _708 * 0.5;
        float _779 = _718 * 0.5;
        float _780 = dot(vec3(_777, _778, _779), vec3(_777, _778, _779));
        float _785 = (_780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_780);
        float _793 = (dot(vec3(_301, _302, _303), vec3(_785 * _777, _785 * _778, _785 * _779)) + 1.0) * 0.5;
        float _3463 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _802 = sqrt(((_778 * _778) + (_777 * _777)) + (_779 * _779)) / (_731 + 9.9999997473787516355514526367188e-06);
        float _3474 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _804 = _803 * 2.0;
        float _808 = (1.0 - _803) / (_803 + 1.0);
        float _3485 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _818 = ((((1.0 - _809) * (_804 + 2.0)) * exp2(log2(isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))) * (_804 + 1.0))) + _809) * _731;
        float _819 = _699 * 0.5;
        float _820 = _709 * 0.5;
        float _821 = _719 * 0.5;
        float _822 = dot(vec3(_819, _820, _821), vec3(_819, _820, _821));
        float _827 = (_822 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_822);
        float _835 = (dot(vec3(_301, _302, _303), vec3(_827 * _819, _827 * _820, _827 * _821)) + 1.0) * 0.5;
        float _3496 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _844 = sqrt(((_820 * _820) + (_819 * _819)) + (_821 * _821)) / (_732 + 9.9999997473787516355514526367188e-06);
        float _3507 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _846 = _845 * 2.0;
        float _850 = (1.0 - _845) / (_845 + 1.0);
        float _3518 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _860 = ((((1.0 - _851) * (_846 + 2.0)) * exp2(log2(isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * (_846 + 1.0))) + _851) * _732;
        _868 = _699;
        _870 = _698;
        _871 = _697;
        _872 = _709;
        _873 = _708;
        _874 = _707;
        _875 = _719;
        _876 = _718;
        _877 = _717;
        _878 = _732;
        _879 = _731;
        _880 = _730;
        _881 = cbModelParam._m0[36u].z * (isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0)));
        _882 = cbModelParam._m0[36u].z * (isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0)));
        _883 = cbModelParam._m0[36u].z * (isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0)));
    }
    else
    {
        _868 = _869;
        _870 = _869;
        _871 = _869;
        _872 = _869;
        _873 = _869;
        _874 = _869;
        _875 = _869;
        _876 = _869;
        _877 = _869;
        _878 = _869;
        _879 = _869;
        _880 = _869;
        _881 = 0.0;
        _882 = 0.0;
        _883 = 0.0;
    }
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _912 = fma(_537, cbModelParam._m0[30u].z, fma(_533, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _529));
        float _916 = fma(_537, cbModelParam._m0[31u].z, fma(_533, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _529));
        float _920 = fma(_537, cbModelParam._m0[32u].z, fma(_533, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _529));
        float _943 = _529 + _301;
        float _944 = _533 + _302;
        float _945 = _537 + _303;
        float _955 = fma(_945, cbModelParam._m0[30u].z, fma(_944, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _943)) - _912;
        float _956 = fma(_945, cbModelParam._m0[31u].z, fma(_944, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _943)) - _916;
        float _957 = fma(_945, cbModelParam._m0[32u].z, fma(_944, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _943)) - _920;
        float _961 = inversesqrt(dot(vec3(_955, _956, _957), vec3(_955, _956, _957)));
        float _974 = ((_961 * _955) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_912 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _975 = ((_961 * _956) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_916 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _976 = ((_961 * _957) / cbModelParam._m0[35u].z) + ((((((_920 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        float _1011 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_978.x + (-0.5));
        float _1013 = _1011 * (_978.y + (-0.5));
        float _1014 = _1011 * (_978.z + (-0.5));
        float _1021 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_985.x + (-0.5));
        float _1023 = _1021 * (_985.y + (-0.5));
        float _1024 = _1021 * (_985.z + (-0.5));
        float _1031 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_992.x + (-0.5));
        float _1033 = _1031 * (_992.y + (-0.5));
        float _1034 = _1031 * (_992.z + (-0.5));
        float _1041 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_999.x + (-0.5));
        float _1043 = _1041 * (_999.y + (-0.5));
        float _1044 = _1041 * (_999.z + (-0.5));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1048 = _1012 * 0.5;
        float _1049 = _1022 * 0.5;
        float _1050 = _1032 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1064 = (dot(vec3(_301, _302, _303), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _3559 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1073 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3570 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3581 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * (_1075 + 1.0))) + _1080) * _1045;
        float _1090 = _1013 * 0.5;
        float _1091 = _1023 * 0.5;
        float _1092 = _1033 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1106 = (dot(vec3(_301, _302, _303), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3592 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1115 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _3603 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _3614 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) * (_1117 + 1.0))) + _1122) * _1046;
        float _1132 = _1014 * 0.5;
        float _1133 = _1024 * 0.5;
        float _1134 = _1034 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_301, _302, _303), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _3625 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1047 + 9.9999997473787516355514526367188e-06);
        float _3636 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _3647 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * (_1159 + 1.0))) + _1164) * _1047;
        _1181 = _1014;
        _1182 = _1013;
        _1183 = _1012;
        _1184 = _1024;
        _1185 = _1023;
        _1186 = _1022;
        _1187 = _1034;
        _1188 = _1033;
        _1189 = _1032;
        _1190 = _1047;
        _1191 = _1046;
        _1192 = _1045;
        _1193 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
        _1194 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
        _1195 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
    }
    else
    {
        _1181 = _869;
        _1182 = _869;
        _1183 = _869;
        _1184 = _869;
        _1185 = _869;
        _1186 = _869;
        _1187 = _869;
        _1188 = _869;
        _1189 = _869;
        _1190 = _869;
        _1191 = _869;
        _1192 = _869;
        _1193 = 0.0;
        _1194 = 0.0;
        _1195 = 0.0;
    }
    float _1205 = (cbModelParam._m0[1u].x * (_1193 - _881)) + _881;
    float _1206 = (cbModelParam._m0[1u].x * (_1194 - _882)) + _882;
    float _1207 = (cbModelParam._m0[1u].x * (_1195 - _883)) + _883;
    float _1228 = fma(_1207, cbSceneParam._m0[89u].z, fma(_1206, cbSceneParam._m0[89u].y, _1205 * cbSceneParam._m0[89u].x));
    float _1231 = fma(_1207, cbSceneParam._m0[90u].z, fma(_1206, cbSceneParam._m0[90u].y, _1205 * cbSceneParam._m0[90u].x));
    float _1234 = fma(_1207, cbSceneParam._m0[91u].z, fma(_1206, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1205));
    float _1249 = _476 * 0.5;
    float _1250 = _477 * 0.5;
    float _1251 = _478 * 0.5;
    float _1252 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_1183, _1186, _1189, _1192));
    float _1255 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_1182, _1185, _1188, _1191));
    float _1258 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_1181, _1184, _1187, _1190));
    float _1292;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1265 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_868, _872, _875, _878));
        float _1269 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_870, _873, _876, _879));
        float _1273 = dot(vec4(_1249, _1250, _1251, 1.0), vec4(_871, _874, _877, _880));
        float _1280 = dot(vec4(cbModelParam._m0[39u]), vec4(_1249, _1250, _1251, 1.0));
        _1292 = dot(vec3(isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)), isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)), isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1280) ? 0.0 : (isnan(0.0) ? _1280 : max(0.0, _1280))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1292 = 1.0;
    }
    float _1303;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1294 = dot(vec4(cbModelParam._m0[40u]), vec4(_1249, _1250, _1251, 1.0));
        _1303 = dot(vec3(isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)), isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)), isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1294) ? 0.0 : (isnan(0.0) ? _1294 : max(0.0, _1294))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1303 = 1.0;
    }
    float _1307 = (_1303 * cbModelParam._m0[1u].x) + (_1292 * (1.0 - cbModelParam._m0[1u].x));
    float _1317 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _304);
    float _1318 = isnan(_1317) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1317 : min(cbModelParam._m0[25u].z, _1317));
    float _1400;
    float _1402;
    float _1404;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1367 = fma(_537, cbModelParam._m0[13u].z, fma(_533, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _529)) + cbModelParam._m0[13u].w;
        float _1371 = fma(_537, cbModelParam._m0[14u].z, fma(_533, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _529)) + cbModelParam._m0[14u].w;
        float _1375 = fma(_537, cbModelParam._m0[15u].z, fma(_533, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _529)) + cbModelParam._m0[15u].w;
        float _1378 = fma(_478, cbModelParam._m0[13u].z, fma(_477, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _476));
        float _1381 = fma(_478, cbModelParam._m0[14u].z, fma(_477, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _476));
        float _1384 = fma(_478, cbModelParam._m0[15u].z, fma(_477, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _476));
        float _1412;
        if (_1378 > 0.0)
        {
            _1412 = abs((1.0 - _1367) / _1378);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1378 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1367 + 1.0) / _1378);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1412 = frontier_phi_17_15_ladder;
        }
        float _1617;
        if (_1381 > 0.0)
        {
            _1617 = abs((1.0 - _1371) / _1381);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1381 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1371 + 1.0) / _1381);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1617 = frontier_phi_26_22_ladder;
        }
        float _1860;
        if (_1384 > 0.0)
        {
            _1860 = abs((1.0 - _1375) / _1384);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1384 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1375 + 1.0) / _1384);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1860 = frontier_phi_38_33_ladder;
        }
        float _1862 = isnan(_1617) ? _1412 : (isnan(_1412) ? _1617 : min(_1412, _1617));
        float _1863 = isnan(_1860) ? _1862 : (isnan(_1862) ? _1860 : min(_1862, _1860));
        float _1867 = (_1863 * _1378) + _1367;
        float _1868 = (_1863 * _1381) + _1371;
        float _1869 = (_1863 * _1384) + _1375;
        float _1870 = _1863 * 9.9999997473787516355514526367188e-05;
        float _1872 = (-1.0) - _1870;
        float _1874 = _1870 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1869 > _1874) || ((_1869 < _1872) || ((_1868 > _1874) || ((_1868 < _1872) || ((_1867 < _1872) || (_1867 > _1874))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1993 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1869, cbModelParam._m0[9u].z, fma(_1868, cbModelParam._m0[9u].y, _1867 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1869, cbModelParam._m0[10u].z, fma(_1868, cbModelParam._m0[10u].y, _1867 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1869, cbModelParam._m0[11u].z, fma(_1868, cbModelParam._m0[11u].y, _1867 * cbModelParam._m0[11u].x))), _1318);
            frontier_phi_16_38_ladder = _1993.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1993.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1993.x * cbModelParam._m0[1u].y;
        }
        _1400 = frontier_phi_16_38_ladder_2;
        _1402 = frontier_phi_16_38_ladder_1;
        _1404 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1388 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_476, _477, _478), _1318);
        _1400 = _1388.x * cbModelParam._m0[1u].y;
        _1402 = _1388.y * cbModelParam._m0[1u].y;
        _1404 = _1388.z * cbModelParam._m0[1u].y;
    }
    float _1408 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _304);
    float _1409 = isnan(_1408) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1408 : min(cbModelParam._m0[25u].w, _1408));
    float _1502;
    float _1504;
    float _1506;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1466 = fma(_537, cbModelParam._m0[21u].z, fma(_533, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _529)) + cbModelParam._m0[21u].w;
        float _1470 = fma(_537, cbModelParam._m0[22u].z, fma(_533, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _529)) + cbModelParam._m0[22u].w;
        float _1474 = fma(_537, cbModelParam._m0[23u].z, fma(_533, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _529)) + cbModelParam._m0[23u].w;
        float _1477 = fma(_478, cbModelParam._m0[21u].z, fma(_477, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _476));
        float _1480 = fma(_478, cbModelParam._m0[22u].z, fma(_477, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _476));
        float _1483 = fma(_478, cbModelParam._m0[23u].z, fma(_477, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _476));
        float _1622;
        if (_1477 > 0.0)
        {
            _1622 = abs((1.0 - _1466) / _1477);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1477 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1466 + 1.0) / _1477);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1622 = frontier_phi_28_24_ladder;
        }
        float _1887;
        if (_1480 > 0.0)
        {
            _1887 = abs((1.0 - _1470) / _1480);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1470 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1887 = frontier_phi_40_35_ladder;
        }
        float _2092;
        if (_1483 > 0.0)
        {
            _2092 = abs((1.0 - _1474) / _1483);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1474 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2092 = frontier_phi_49_46_ladder;
        }
        float _2094 = isnan(_1887) ? _1622 : (isnan(_1622) ? _1887 : min(_1622, _1887));
        float _2095 = isnan(_2092) ? _2094 : (isnan(_2094) ? _2092 : min(_2094, _2092));
        float _2099 = (_2095 * _1477) + _1466;
        float _2100 = (_2095 * _1480) + _1470;
        float _2101 = (_2095 * _1483) + _1474;
        float _2102 = _2095 * 9.9999997473787516355514526367188e-05;
        float _2103 = (-1.0) - _2102;
        float _2105 = _2102 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2101 > _2105) || ((_2101 < _2103) || ((_2100 > _2105) || ((_2100 < _2103) || ((_2099 < _2103) || (_2099 > _2105))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2335 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2101, cbModelParam._m0[17u].z, fma(_2100, cbModelParam._m0[17u].y, _2099 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2101, cbModelParam._m0[18u].z, fma(_2100, cbModelParam._m0[18u].y, _2099 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2101, cbModelParam._m0[19u].z, fma(_2100, cbModelParam._m0[19u].y, _2099 * cbModelParam._m0[19u].x))), _1409);
            frontier_phi_25_49_ladder = _2335.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2335.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2335.x * cbModelParam._m0[1u].z;
        }
        _1502 = frontier_phi_25_49_ladder_2;
        _1504 = frontier_phi_25_49_ladder_1;
        _1506 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1486 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_476, _477, _478), _1409);
        _1502 = _1486.x * cbModelParam._m0[1u].z;
        _1504 = _1486.y * cbModelParam._m0[1u].z;
        _1506 = _1486.z * cbModelParam._m0[1u].z;
    }
    float _1518 = ((((1.0 - _497) * ((_484 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_497 * _484)) * _468;
    float _1519 = _1518 * ((cbModelParam._m0[1u].w * (_1502 - _1400)) + _1400);
    float _1520 = _1518 * ((cbModelParam._m0[1u].w * (_1504 - _1402)) + _1402);
    float _1521 = _1518 * ((cbModelParam._m0[1u].w * (_1506 - _1404)) + _1404);
    float _1524 = fma(_1521, cbSceneParam._m0[89u].z, fma(_1520, cbSceneParam._m0[89u].y, _1519 * cbSceneParam._m0[89u].x));
    float _1527 = fma(_1521, cbSceneParam._m0[90u].z, fma(_1520, cbSceneParam._m0[90u].y, _1519 * cbSceneParam._m0[90u].x));
    float _1530 = fma(_1521, cbSceneParam._m0[91u].z, fma(_1520, cbSceneParam._m0[91u].y, _1519 * cbSceneParam._m0[91u].x));
    uvec4 _1540 = floatBitsToUint(cbInstanceData._m0[_442 + 5u]);
    uint _1542 = _1540.x * 14u;
    uint _1543 = _1542 + 13u;
    float _1550 = _468 + (-1.0);
    float _1555 = (cbLight._m0[_1543].x * _1550) + 1.0;
    float _1556 = (cbLight._m0[_1543].y * _1550) + 1.0;
    float _1557 = (cbLight._m0[_1543].z * _1550) + 1.0;
    float _1558 = (cbLight._m0[_1543].w * _1550) + 1.0;
    uint _1559 = _1542 + 5u;
    float _1565 = isnan(1.0) ? _1556 : (isnan(_1556) ? 1.0 : min(_1556, 1.0));
    uint _1569 = _1542 + 4u;
    float _1576 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
    uint _1580 = _1542 | 1u;
    float _1591 = dot(vec3(cbLight._m0[_1542].xyz), vec3(_301, _302, _303));
    float _1594 = dot(vec3(cbLight._m0[_1580].xyz), vec3(_301, _302, _303));
    float _3783 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
    float _3794 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
    float _1599 = (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * 0.3183098733425140380859375;
    float _1601 = (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * 0.3183098733425140380859375;
    float _1608 = ((cbLight._m0[_1559].x * _1565) * _1601) + ((cbLight._m0[_1569].x * _1576) * _1599);
    float _1609 = ((_1565 * cbLight._m0[_1559].y) * _1601) + ((_1576 * cbLight._m0[_1569].y) * _1599);
    float _1610 = ((_1565 * cbLight._m0[_1559].z) * _1601) + ((_1576 * cbLight._m0[_1569].z) * _1599);
    uvec4 _1614 = floatBitsToUint(cbLight._m0[_1542 + 12u]);
    bool _1616 = _1614.x == 0u;
    float _1627;
    float _1629;
    float _1631;
    if (_1616)
    {
        _1627 = _1608;
        _1629 = _1609;
        _1631 = _1610;
    }
    else
    {
        uint _1635 = _1542 + 6u;
        float _1651 = (dot(vec3(cbLight._m0[_1542 + 2u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _1652 = _1651 * _1651;
        float _3805 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1654 = isnan(1.0) ? _1557 : (isnan(_1557) ? 1.0 : min(_1557, 1.0));
        _1627 = (((cbLight._m0[_1635].x * 0.3183098733425140380859375) * _1653) * _1654) + _1608;
        _1629 = (((cbLight._m0[_1635].y * 0.3183098733425140380859375) * _1653) * _1654) + _1609;
        _1631 = (((cbLight._m0[_1635].z * 0.3183098733425140380859375) * _1653) * _1654) + _1610;
    }
    bool _1634 = _1614.y == 0u;
    float _1672;
    float _1674;
    float _1676;
    if (_1634)
    {
        _1672 = _1627;
        _1674 = _1629;
        _1676 = _1631;
    }
    else
    {
        uint _1831 = _1542 + 7u;
        float _1847 = (dot(vec3(cbLight._m0[_1542 + 3u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _1848 = _1847 * _1847;
        float _3821 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
        float _1849 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1850 = isnan(1.0) ? _1558 : (isnan(_1558) ? 1.0 : min(_1558, 1.0));
        _1672 = (((cbLight._m0[_1831].x * 0.3183098733425140380859375) * _1849) * _1850) + _1627;
        _1674 = (((cbLight._m0[_1831].y * 0.3183098733425140380859375) * _1849) * _1850) + _1629;
        _1676 = (((cbLight._m0[_1831].z * 0.3183098733425140380859375) * _1849) * _1850) + _1631;
    }
    uint _1679 = _1542 + 8u;
    float _1692 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1542].w)) * _304) * 0.949999988079071044921875);
    float _1693 = _1692 * _1692;
    float _1694 = cbLight._m0[_1542].x + _381;
    float _1695 = cbLight._m0[_1542].y + _382;
    float _1696 = cbLight._m0[_1542].z + _383;
    float _1700 = inversesqrt(dot(vec3(_1694, _1695, _1696), vec3(_1694, _1695, _1696)));
    float _1701 = _1700 * _1694;
    float _1702 = _1700 * _1695;
    float _1703 = _1700 * _1696;
    float _1704 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1542].xyz));
    float _3837 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
    float _1707 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _3848 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _1708 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _1709 = dot(vec3(_301, _302, _303), vec3(_1701, _1702, _1703));
    float _3859 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1712 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _1713 = dot(vec3(cbLight._m0[_1542].xyz), vec3(_1701, _1702, _1703));
    float _3870 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1717 = _1693 * _1693;
    float _1721 = ((_1712 * _1712) * (_1717 + (-1.0))) + 1.0;
    float _1732 = (exp2(log2(1.0 - (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1733 = 1.0 - _1693;
    float _1744 = (0.5 / (((_1708 * ((_1707 * _1733) + _1693)) + 9.9999999392252902907785028219223e-09) + (((_1708 * _1733) + _1693) * _1707))) * _1707;
    float _3881 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1746 = (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_1717 / ((_1721 * _1721) * 3.141590118408203125));
    uint _1757 = _1542 + 9u;
    float _1768 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1580].w)) * _304) * 0.949999988079071044921875);
    float _1769 = _1768 * _1768;
    float _1770 = cbLight._m0[_1580].x + _381;
    float _1771 = cbLight._m0[_1580].y + _382;
    float _1772 = cbLight._m0[_1580].z + _383;
    float _1776 = inversesqrt(dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772)));
    float _1777 = _1776 * _1770;
    float _1778 = _1776 * _1771;
    float _1779 = _1776 * _1772;
    float _1780 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1580].xyz));
    float _3892 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1783 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _1784 = dot(vec3(_301, _302, _303), vec3(_1777, _1778, _1779));
    float _3903 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1787 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _1788 = dot(vec3(cbLight._m0[_1580].xyz), vec3(_1777, _1778, _1779));
    float _3914 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1792 = _1769 * _1769;
    float _1796 = ((_1787 * _1787) * (_1792 + (-1.0))) + 1.0;
    float _1805 = (exp2(log2(1.0 - (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1806 = 1.0 - _1769;
    float _1816 = (0.5 / (((_1708 * ((_1783 * _1806) + _1769)) + 9.9999999392252902907785028219223e-09) + (((_1708 * _1806) + _1769) * _1783))) * _1783;
    float _3925 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _1818 = (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1792 / ((_1796 * _1796) * 3.141590118408203125));
    float _1828 = (((_1805 * cbLight._m0[_1757].x) * _1818) * _1565) + (((_1732 * cbLight._m0[_1679].x) * _1746) * _1576);
    float _1829 = (((_1805 * cbLight._m0[_1757].y) * _1818) * _1565) + (((_1732 * cbLight._m0[_1679].y) * _1746) * _1576);
    float _1830 = (((_1805 * cbLight._m0[_1757].z) * _1818) * _1565) + (((_1732 * cbLight._m0[_1679].z) * _1746) * _1576);
    float _1892;
    float _1894;
    float _1896;
    if (_1616)
    {
        _1892 = _1828;
        _1894 = _1829;
        _1896 = _1830;
    }
    else
    {
        uint _1898 = _1542 + 2u;
        uint _1902 = _1542 + 10u;
        float _1916 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1898].w)) * _304) * 0.949999988079071044921875);
        float _1917 = _1916 * _1916;
        float _1918 = cbLight._m0[_1898].x + _381;
        float _1919 = cbLight._m0[_1898].y + _382;
        float _1920 = cbLight._m0[_1898].z + _383;
        float _1924 = inversesqrt(dot(vec3(_1918, _1919, _1920), vec3(_1918, _1919, _1920)));
        float _1925 = _1924 * _1918;
        float _1926 = _1924 * _1919;
        float _1927 = _1924 * _1920;
        float _1928 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1898].xyz));
        float _3936 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1931 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1932 = dot(vec3(_301, _302, _303), vec3(_1925, _1926, _1927));
        float _3947 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1935 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1936 = dot(vec3(cbLight._m0[_1898].xyz), vec3(_1925, _1926, _1927));
        float _3958 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1940 = _1917 * _1917;
        float _1944 = ((_1935 * _1935) * (_1940 + (-1.0))) + 1.0;
        float _1953 = (exp2(log2(1.0 - (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1954 = 1.0 - _1917;
        float _1964 = (0.5 / (((_1708 * ((_1931 * _1954) + _1917)) + 9.9999999392252902907785028219223e-09) + (((_1708 * _1954) + _1917) * _1931))) * _1931;
        float _3969 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1966 = (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1940 / ((_1944 * _1944) * 3.141590118408203125));
        float _1967 = isnan(1.0) ? _1557 : (isnan(_1557) ? 1.0 : min(_1557, 1.0));
        _1892 = (((_1953 * cbLight._m0[_1902].x) * _1966) * _1967) + _1828;
        _1894 = (((_1953 * cbLight._m0[_1902].y) * _1966) * _1967) + _1829;
        _1896 = (((_1953 * cbLight._m0[_1902].z) * _1966) * _1967) + _1830;
    }
    float _2002;
    float _2004;
    float _2006;
    if (_1634)
    {
        _2002 = _1892;
        _2004 = _1894;
        _2006 = _1896;
    }
    else
    {
        uint _2013 = _1542 + 3u;
        uint _2017 = _1542 + 11u;
        float _2031 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2013].w)) * _304) * 0.949999988079071044921875);
        float _2032 = _2031 * _2031;
        float _2033 = cbLight._m0[_2013].x + _381;
        float _2034 = cbLight._m0[_2013].y + _382;
        float _2035 = cbLight._m0[_2013].z + _383;
        float _2039 = inversesqrt(dot(vec3(_2033, _2034, _2035), vec3(_2033, _2034, _2035)));
        float _2040 = _2039 * _2033;
        float _2041 = _2039 * _2034;
        float _2042 = _2039 * _2035;
        float _2043 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_2013].xyz));
        float _3985 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2046 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _2047 = dot(vec3(_301, _302, _303), vec3(_2040, _2041, _2042));
        float _3996 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2050 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _2051 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_2040, _2041, _2042));
        float _4007 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2055 = _2032 * _2032;
        float _2059 = ((_2050 * _2050) * (_2055 + (-1.0))) + 1.0;
        float _2068 = (exp2(log2(1.0 - (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2069 = 1.0 - _2032;
        float _2079 = (0.5 / (((_1708 * ((_2046 * _2069) + _2032)) + 9.9999999392252902907785028219223e-09) + (((_1708 * _2069) + _2032) * _2046))) * _2046;
        float _4018 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2081 = (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_2055 / ((_2059 * _2059) * 3.141590118408203125));
        float _2082 = isnan(1.0) ? _1558 : (isnan(_1558) ? 1.0 : min(_1558, 1.0));
        _2002 = (((_2068 * cbLight._m0[_2017].x) * _2081) * _2082) + _1892;
        _2004 = (((_2068 * cbLight._m0[_2017].y) * _2081) * _2082) + _1894;
        _2006 = (((_2068 * cbLight._m0[_2017].z) * _2081) * _2082) + _1896;
    }
    float _2217;
    float _2219;
    float _2221;
    float _2223;
    float _2225;
    float _2227;
    if (_1540.y == 0u)
    {
        float _2157 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2158 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2157;
        float _2159 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2157;
        float _2160 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2157;
        uvec4 _2172 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2173 = _2172.x;
        uint _2184 = uint((float(_2172.y) * floor(float(uint(cbSceneParam._m0[85u].y * _403) / _2173))) + floor(float(uint(cbSceneParam._m0[85u].x * _402) / _2173)));
        float _2194 = (log2(_2160 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2195 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        uint _2198 = uint(isnan(14.0) ? _2195 : (isnan(_2195) ? 14.0 : min(_2195, 14.0)));
        uvec4 _2203 = texelFetch(g_lightClusterGridBuffer, int(((_2198 << 2u) + (_2184 << 6u)) >> 2u));
        uint _2204 = _2203.x;
        uint _2205 = _2172.z;
        float _2340;
        float _2342;
        float _2344;
        float _2346;
        float _2348;
        float _2350;
        if (((((1u << ((_2205 >> 4u) & 15u)) + 4294967295u) & _2204) == 0u) || ((_2205 & 240u) == 0u))
        {
            _2340 = 0.0;
            _2342 = 0.0;
            _2344 = 0.0;
            _2346 = 0.0;
            _2348 = 0.0;
            _2350 = 0.0;
        }
        else
        {
            float _2341;
            float _2343;
            float _2345;
            float _2347;
            float _2349;
            float _2351;
            float _2502 = 0.0;
            float _2503 = 0.0;
            float _2504 = 0.0;
            float _2505 = 0.0;
            float _2506 = 0.0;
            float _2507 = 0.0;
            uint _2508 = 0u;
            uint _2517;
            bool _2518;
            for (;;)
            {
                _2517 = texelFetch(g_lightClassification, int((((_2198 << 5u) + (_2184 << 9u)) + (_2508 << 2u)) >> 2u)).x;
                _2518 = _2517 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2518)
                {
                    frontier_phi_66_pred = _2502;
                    frontier_phi_66_pred_1 = _2507;
                    frontier_phi_66_pred_2 = _2506;
                    frontier_phi_66_pred_3 = _2505;
                    frontier_phi_66_pred_4 = _2504;
                    frontier_phi_66_pred_5 = _2503;
                }
                else
                {
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    uint _2653;
                    _2647 = _2502;
                    _2648 = _2503;
                    _2649 = _2504;
                    _2650 = _2505;
                    _2651 = _2506;
                    _2652 = _2507;
                    _2653 = _2517;
                    float _2574;
                    float _2575;
                    float _2576;
                    float _2577;
                    float _2578;
                    float _2579;
                    for (;;)
                    {
                        uint _2657 = uint(findLSB(_2653)) + (_2508 << 5u);
                        uint _2654 = (_2653 + 4294967295u) & _2653;
                        uint _2659 = _2657 * 48u;
                        vec4 _2673 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2659)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 3u)).x));
                        uint _2679 = (_2657 * 48u) + 4u;
                        vec4 _2692 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2679)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 3u)).x));
                        uint _2698 = (_2657 * 48u) + 8u;
                        vec3 _2709 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2698)).x, texelFetch(g_PointLightRenderingBuffer, int(_2698 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2698 + 2u)).x));
                        float _2713 = _2673.x - _2158;
                        float _2714 = _2673.y - _2159;
                        float _2715 = _2673.z - _2160;
                        float _2716 = dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715));
                        float _2719 = inversesqrt(_2716);
                        float _2720 = _2719 * _2713;
                        float _2721 = _2719 * _2714;
                        float _2722 = _2719 * _2715;
                        float _2723 = dot(vec3(_423, _426, _429), vec3(_2720, _2721, _2722));
                        float _2728 = 1.0 - (_2716 * _2673.w);
                        float _4044 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
                        float _2729 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
                        float _2730 = sqrt(_2716) * _2692.w;
                        float _2733 = 1.39999997615814208984375 / (_2730 + 1.39999997615814208984375);
                        float _2734 = _2733 * _2733;
                        float _2737 = ((1.0 - _2734) * _2723) + _2734;
                        float _2740 = _2730 * _2730;
                        float _2744 = ((isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0))) * _2729) / ((_2740 * 0.699999988079071044921875) + 1.0);
                        float _2748 = (-0.0) - _2158;
                        float _2749 = (-0.0) - _2159;
                        float _2750 = (-0.0) - _2160;
                        float _2754 = inversesqrt(dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750)));
                        float _2755 = _2754 * _2748;
                        float _2756 = _2754 * _2749;
                        float _2757 = _2754 * _2750;
                        float _2765 = exp2(log2(1.0 / ((_2740 * 3.5) + 5.0)) * 0.25);
                        float _2766 = 1.0 - _484;
                        float _2773 = sqrt(1.0 - ((1.0 - (_2766 * _2766)) * (1.0 - (_2765 * _2765))));
                        float _2774 = _2773 * _2773;
                        float _2775 = _2774 * _2774;
                        float _2776 = _2755 + _2720;
                        float _2777 = _2756 + _2721;
                        float _2778 = _2757 + _2722;
                        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
                        float _2786 = dot(vec3(_423, _426, _429), vec3(_2755, _2756, _2757));
                        float _4060 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
                        float _2789 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
                        float _2790 = dot(vec3(_423, _426, _429), vec3(_2782 * _2776, _2782 * _2777, _2782 * _2778));
                        float _4071 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                        float _2793 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                        float _2797 = ((_2793 * _2793) * (_2775 + (-1.0))) + 1.0;
                        float _2798 = _2733 * _2774;
                        float _2799 = _2798 * _2798;
                        float _2802 = ((1.0 - _2799) * _2723) + _2799;
                        float _4082 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                        float _2803 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                        float _2804 = 1.0 - _2774;
                        float _2814 = (0.5 / (((_2803 * ((_2789 * _2804) + _2774)) + 9.9999999392252902907785028219223e-09) + (((_2803 * _2804) + _2774) * _2789))) * _2803;
                        float _4093 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                        float _2825 = (((_2775 * 3.1415927410125732421875) * (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) / ((_2797 * _2797) * ((_2740 * 2.1991131305694580078125) + 3.141590118408203125))) * _2729;
                        _2577 = (_2744 * _2692.x) + _2650;
                        _2578 = (_2744 * _2692.y) + _2651;
                        _2579 = (_2744 * _2692.z) + _2652;
                        _2574 = (_2825 * _2709.x) + _2647;
                        _2575 = (_2825 * _2709.y) + _2648;
                        _2576 = (_2825 * _2709.z) + _2649;
                        if (_2654 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2647 = _2574;
                            _2648 = _2575;
                            _2649 = _2576;
                            _2650 = _2577;
                            _2651 = _2578;
                            _2652 = _2579;
                            _2653 = _2654;
                        }
                    }
                    frontier_phi_66_pred = _2574;
                    frontier_phi_66_pred_1 = _2579;
                    frontier_phi_66_pred_2 = _2578;
                    frontier_phi_66_pred_3 = _2577;
                    frontier_phi_66_pred_4 = _2576;
                    frontier_phi_66_pred_5 = _2575;
                }
                _2341 = frontier_phi_66_pred;
                _2351 = frontier_phi_66_pred_1;
                _2349 = frontier_phi_66_pred_2;
                _2347 = frontier_phi_66_pred_3;
                _2345 = frontier_phi_66_pred_4;
                _2343 = frontier_phi_66_pred_5;
                uint _2509 = _2508 + 1u;
                if (_2509 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2502 = _2341;
                    _2503 = _2343;
                    _2504 = _2345;
                    _2505 = _2347;
                    _2506 = _2349;
                    _2507 = _2351;
                    _2508 = _2509;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2340 = _2341;
            _2342 = _2343;
            _2344 = _2345;
            _2346 = _2347;
            _2348 = _2349;
            _2350 = _2351;
        }
        uvec4 _2354 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2355 = _2354.z;
        uint _2357 = (_2355 >> 8u) & 15u;
        float _2470;
        float _2472;
        float _2474;
        float _2476;
        float _2478;
        float _2480;
        if (((4294967295u << _2357) & _2204) == 0u)
        {
            _2470 = _2340;
            _2472 = _2342;
            _2474 = _2344;
            _2476 = _2346;
            _2478 = _2348;
            _2480 = _2350;
        }
        else
        {
            float _2495 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
            float _2496 = _2495 * _2158;
            float _2497 = _2495 * _2159;
            float _2498 = _2495 * _2160;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2357 < ((_2355 >> 12u) & 15u))
            {
                float _2471;
                float _2473;
                float _2475;
                float _2477;
                float _2479;
                float _2481;
                float _2630 = _2340;
                float _2631 = _2342;
                float _2632 = _2344;
                float _2633 = _2346;
                float _2634 = _2348;
                float _2635 = _2350;
                uint _2636 = _2357;
                uint _2645;
                bool _2646;
                for (;;)
                {
                    _2645 = texelFetch(g_lightClassification, int((((_2198 << 5u) + (_2184 << 9u)) + (_2636 << 2u)) >> 2u)).x;
                    _2646 = _2645 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2646)
                    {
                        frontier_phi_77_pred = _2635;
                        frontier_phi_77_pred_1 = _2634;
                        frontier_phi_77_pred_2 = _2633;
                        frontier_phi_77_pred_3 = _2632;
                        frontier_phi_77_pred_4 = _2631;
                        frontier_phi_77_pred_5 = _2630;
                    }
                    else
                    {
                        float _2839;
                        float _2840;
                        float _2841;
                        float _2842;
                        float _2843;
                        float _2844;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3140;
                        float _2852 = _2630;
                        float _2853 = _2631;
                        float _2854 = _2632;
                        float _2855 = _2633;
                        float _2856 = _2634;
                        float _2857 = _2635;
                        uint _2858 = _2645;
                        uint _2859;
                        vec4 _2884;
                        float _2885;
                        vec4 _2900;
                        vec3 _2912;
                        vec4 _2928;
                        vec4 _2944;
                        float _2991;
                        bool _2992;
                        for (;;)
                        {
                            uint _2869 = ((_2636 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2858));
                            _2859 = (_2858 + 4294967295u) & _2858;
                            uint _2871 = _2869 * 40u;
                            _2884 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 3u)).x));
                            _2885 = _2884.w;
                            uint _2887 = (_2869 * 40u) + 4u;
                            _2900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 3u)).x));
                            uint _2902 = (_2869 * 40u) + 8u;
                            _2912 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 2u)).x));
                            uint _2915 = (_2869 * 40u) + 16u;
                            _2928 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2915)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 3u)).x));
                            uint _2931 = (_2869 * 40u) + 20u;
                            _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            uint _2947 = (_2869 * 40u) + 24u;
                            vec4 _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            uint _2966 = (_2869 * 40u) + 28u;
                            vec4 _2979 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 3u)).x));
                            _2991 = fma(_2160, _2979.z, fma(_2159, _2979.y, _2979.x * _2158)) + _2979.w;
                            _2992 = !((fma(_2160, _2960.z, fma(_2159, _2960.y, _2960.x * _2158)) + _2960.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2992)
                            {
                                float _3019 = _2884.x - _2158;
                                float _3020 = _2884.y - _2159;
                                float _3021 = _2884.z - _2160;
                                float _3022 = dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021));
                                float _3025 = inversesqrt(_3022);
                                float _3026 = _3025 * _3019;
                                float _3027 = _3025 * _3020;
                                float _3028 = _3025 * _3021;
                                float _3032 = 1.0 - (_3022 / (_2885 * _2885));
                                float _4104 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                                float _3033 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                                float _3037 = sqrt(_3022) * _2900.w;
                                float _3039 = 1.39999997615814208984375 / (_3037 + 1.39999997615814208984375);
                                float _3040 = _3039 * _3039;
                                float _3043 = ((1.0 - _3040) * dot(vec3(_3026, _3027, _3028), vec3(_423, _426, _429))) + _3040;
                                float _3046 = _3037 * _3037;
                                float _3050 = (fma(_2160, _2928.z, fma(_2159, _2928.y, _2928.x * _2158)) + _2928.w) / _2991;
                                float _3051 = (fma(_2160, _2944.z, fma(_2159, _2944.y, _2944.x * _2158)) + _2944.w) / _2991;
                                float _3055 = 1.0 - dot(vec2(_3050, _3051), vec2(_3050, _3051));
                                float _4120 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                                float _3056 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
                                float _3057 = _3056 * (((isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0))) * _3033) / ((_3046 * 0.699999988079071044921875) + 1.0));
                                float _3069 = exp2(log2(1.0 / ((_3046 * 3.5) + 5.0)) * 0.25);
                                float _3070 = 1.0 - _484;
                                float _3077 = sqrt(1.0 - ((1.0 - (_3070 * _3070)) * (1.0 - (_3069 * _3069))));
                                float _3078 = _3077 * _3077;
                                float _3079 = _3078 * _3078;
                                float _3080 = _3026 - _2496;
                                float _3081 = _3027 - _2497;
                                float _3082 = _3028 - _2498;
                                float _3086 = inversesqrt(dot(vec3(_3080, _3081, _3082), vec3(_3080, _3081, _3082)));
                                float _3090 = dot(vec3(_423, _426, _429), vec3((-0.0) - _2496, (-0.0) - _2497, (-0.0) - _2498));
                                float _4131 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                                float _3093 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
                                float _3094 = dot(vec3(_423, _426, _429), vec3(_3086 * _3080, _3086 * _3081, _3086 * _3082));
                                float _4142 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                                float _3097 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                                float _3101 = ((_3097 * _3097) * (_3079 + (-1.0))) + 1.0;
                                float _3102 = _3039 * _3078;
                                float _3103 = _3102 * _3102;
                                float _3109 = ((1.0 - _3103) * dot(vec3(_423, _426, _429), vec3(_3026, _3027, _3028))) + _3103;
                                float _4153 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3110 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                                float _3111 = 1.0 - _3078;
                                float _3121 = (0.5 / (((_3110 * ((_3093 * _3111) + _3078)) + 9.9999999392252902907785028219223e-09) + (((_3110 * _3111) + _3078) * _3093))) * _3110;
                                float _4164 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                                float _3131 = (_3056 * _3033) * (((_3079 * 3.1415927410125732421875) * (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0)))) / ((_3101 * _3101) * ((_3046 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3057 * _2900.y;
                                frontier_phi_83_pred_1 = _3057 * _2900.x;
                                frontier_phi_83_pred_2 = _3131 * _2912.z;
                                frontier_phi_83_pred_3 = _3131 * _2912.y;
                                frontier_phi_83_pred_4 = _3131 * _2912.x;
                                frontier_phi_83_pred_5 = _3057 * _2900.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3139 = frontier_phi_83_pred;
                            _3138 = frontier_phi_83_pred_1;
                            _3137 = frontier_phi_83_pred_2;
                            _3136 = frontier_phi_83_pred_3;
                            _3135 = frontier_phi_83_pred_4;
                            _3140 = frontier_phi_83_pred_5;
                            _2842 = _3138 + _2855;
                            _2843 = _3139 + _2856;
                            _2844 = _3140 + _2857;
                            _2839 = _3135 + _2852;
                            _2840 = _3136 + _2853;
                            _2841 = _3137 + _2854;
                            if (_2859 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2852 = _2839;
                                _2853 = _2840;
                                _2854 = _2841;
                                _2855 = _2842;
                                _2856 = _2843;
                                _2857 = _2844;
                                _2858 = _2859;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2844;
                        frontier_phi_77_pred_1 = _2843;
                        frontier_phi_77_pred_2 = _2842;
                        frontier_phi_77_pred_3 = _2841;
                        frontier_phi_77_pred_4 = _2840;
                        frontier_phi_77_pred_5 = _2839;
                    }
                    _2481 = frontier_phi_77_pred;
                    _2479 = frontier_phi_77_pred_1;
                    _2477 = frontier_phi_77_pred_2;
                    _2475 = frontier_phi_77_pred_3;
                    _2473 = frontier_phi_77_pred_4;
                    _2471 = frontier_phi_77_pred_5;
                    uint _2637 = _2636 + 1u;
                    if (_2637 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2630 = _2471;
                        _2631 = _2473;
                        _2632 = _2475;
                        _2633 = _2477;
                        _2634 = _2479;
                        _2635 = _2481;
                        _2636 = _2637;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2475;
                frontier_phi_58_59_ladder_1 = _2481;
                frontier_phi_58_59_ladder_2 = _2479;
                frontier_phi_58_59_ladder_3 = _2477;
                frontier_phi_58_59_ladder_4 = _2473;
                frontier_phi_58_59_ladder_5 = _2471;
            }
            else
            {
                frontier_phi_58_59_ladder = _2344;
                frontier_phi_58_59_ladder_1 = _2350;
                frontier_phi_58_59_ladder_2 = _2348;
                frontier_phi_58_59_ladder_3 = _2346;
                frontier_phi_58_59_ladder_4 = _2342;
                frontier_phi_58_59_ladder_5 = _2340;
            }
            _2470 = frontier_phi_58_59_ladder_5;
            _2472 = frontier_phi_58_59_ladder_4;
            _2474 = frontier_phi_58_59_ladder;
            _2476 = frontier_phi_58_59_ladder_3;
            _2478 = frontier_phi_58_59_ladder_2;
            _2480 = frontier_phi_58_59_ladder_1;
        }
        float _2485 = isnan(1.0) ? _468 : (isnan(_468) ? 1.0 : min(_468, 1.0));
        _2217 = (_2485 * _2476) + _1672;
        _2219 = (_2485 * _2478) + _1674;
        _2221 = (_2485 * _2480) + _1676;
        _2223 = ((_2470 * 0.039999999105930328369140625) * _2485) + _2002;
        _2225 = ((_2472 * 0.039999999105930328369140625) * _2485) + _2004;
        _2227 = ((_2474 * 0.039999999105930328369140625) * _2485) + _2006;
    }
    else
    {
        _2217 = _1672;
        _2219 = _1674;
        _2221 = _1676;
        _2223 = _2002;
        _2225 = _2004;
        _2227 = _2006;
    }
    uint _2233 = _444 + uint(cbMatDynParam._m0[0u].w);
    float _2241 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _283.x) * cbInstanceData._m0[_2233].x;
    float _2244 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _283.y) * cbInstanceData._m0[_2233].y;
    float _2247 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _283.z) * cbInstanceData._m0[_2233].z;
    float _4180 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _4191 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _4202 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _2264 = (((isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_2217 + ((isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0))) * _468))) + ((_2223 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _1307)) * cbPerFrame._m0[3u].x)) + _2241;
    float _2266 = (_2244 + ((_2225 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _1307)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_2219 + ((isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0))) * _468)));
    float _2268 = (_2247 + ((_2227 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _1307)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2221 + ((isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0))) * _468)));
    float _2269 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2270 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2271 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2277 = cbMtdParam._m0[2u].x * _2241;
    float _2278 = cbMtdParam._m0[2u].y * _2244;
    float _2279 = cbMtdParam._m0[2u].z * _2247;
    float _4228 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2281 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    uint _2282 = _442 + 6u;
    float _2290 = _402 / cbSceneParam._m0[86u].x;
    float _2291 = _403 / cbSceneParam._m0[86u].y;
    vec4 _2305 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2290, _2291, (log2((isnan(cbSceneParam._m0[77u].w) ? _323 : (isnan(_323) ? cbSceneParam._m0[77u].w : min(_323, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2307 = _2305.x;
    float _2308 = _2305.y;
    float _2309 = _2305.z;
    float _2310 = _2305.w;
    float _2403;
    float _2405;
    float _2407;
    float _2409;
    if (_323 > cbSceneParam._m0[78u].w)
    {
        float _2365 = isnan(_323) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _323 : min(cbSceneParam._m0[80u].w, _323));
        float _2366 = _2365 / _323;
        float _2377 = _2366 * _374;
        float _2378 = _375 * _2366;
        float _2379 = (-0.0) - _2378;
        float _2381 = _2366 * _376;
        float _2383 = (cbSceneParam._m0[77u].w * _2379) / _2365;
        float _2384 = _2383 + cbSceneParam._m0[79u].w;
        float _2385 = cbSceneParam._m0[79u].w - _2378;
        float _2391 = sqrt(((_2377 * _2377) + (_2378 * _2378)) + (_2381 * _2381));
        float _2394 = (1.0 - (cbSceneParam._m0[77u].w / _2365)) * _2391;
        float _2399 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2401 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2587;
        if (abs((_2379 - _2383) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2587 = ((((_2384 > 0.0) ? exp2(_2399 * _2384) : (2.0 - exp2(_2401 * _2384))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2394;
        }
        else
        {
            float _2531 = 1.0 / cbSceneParam._m0[80u].x;
            float _2532 = isnan(_2385) ? _2384 : (isnan(_2384) ? _2385 : max(_2384, _2385));
            float _2533 = isnan(_2385) ? _2384 : (isnan(_2384) ? _2385 : min(_2384, _2385));
            float _2542 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : min(_2532, 0.0));
            float _2543 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : min(_2533, 0.0));
            _2587 = ((abs(_2391 / _2379) * cbSceneParam._m0[80u].y) * ((((_2542 - _2543) * 2.0) - ((exp2(_2399 * (isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0)))) - exp2(_2399 * (isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0))))) * _2531)) - ((exp2(_2401 * _2542) - exp2(_2401 * _2543)) * _2531))) + (_2394 * cbSceneParam._m0[80u].z);
        }
        vec4 _2589 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2290, _2291, 1.0), 0.0);
        float _2598 = exp2((_2587 * (-1.44269502162933349609375)) * (1.0 - _2589.w));
        float _2599 = log2(_2598);
        float _2615 = log2(_2310);
        _2403 = (exp2(_2615 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2599 * cbSceneParam._m0[78u].x)) * _2589.x) / cbSceneParam._m0[78u].x)) + _2307;
        _2405 = (exp2(_2615 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2599 * cbSceneParam._m0[78u].y)) * _2589.y) / cbSceneParam._m0[78u].y)) + _2308;
        _2407 = (exp2(_2615 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2599 * cbSceneParam._m0[78u].z)) * _2589.z) / cbSceneParam._m0[78u].z)) + _2309;
        _2409 = _2598 * _2310;
    }
    else
    {
        _2403 = _2307;
        _2405 = _2308;
        _2407 = _2309;
        _2409 = _2310;
    }
    bool _2625;
    vec4 _2419;
    vec4 _2441;
    float _2443;
    float _2447;
    float _2448;
    float _2449;
    float _2452;
    float _2455;
    float _2458;
    float _2459;
    bool _2469;
    for (;;)
    {
        _2419 = cbMatDynParam._m0[0u];
        float _2421 = roundEven(_2419.y);
        bool _2422 = _2421 == 3.0;
        float _2423 = log2(_2409);
        float _2427 = exp2(_2423 * cbSceneParam._m0[78u].x);
        float _2428 = exp2(_2423 * cbSceneParam._m0[78u].y);
        float _2429 = exp2(_2423 * cbSceneParam._m0[78u].z);
        float _2430 = _2427 * _2269;
        float _2431 = _2428 * _2270;
        float _2432 = _2429 * _2271;
        float _2439 = _390 + (-0.5);
        _2441 = cbMtdParam._m0[1u];
        _2443 = _2441.y * _2439;
        float _2446 = (_2421 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2447 = _2446 * (_2422 ? _2430 : (_2430 + (cbSceneParam._m0[72u].w * _2403)));
        _2448 = _2446 * (_2422 ? _2431 : (_2431 + (cbSceneParam._m0[72u].w * _2405)));
        _2449 = _2446 * (_2422 ? _2432 : (_2432 + (cbSceneParam._m0[72u].w * _2407)));
        _2452 = ((_2277 * _2281) * _2427) * _2446;
        _2455 = ((_2278 * _2281) * _2428) * _2446;
        _2458 = ((_2279 * _2281) * _2429) * _2446;
        _2459 = _2439 * 0.999000012874603271484375;
        _2469 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2469)
        {
            if ((cbInstanceData._m0[_442 + 7u].x + _2459) < 0.5)
            {
                _2625 = true;
                break;
            }
        }
        uint _2566 = _444 + uint(_2419.w);
        if ((cbInstanceData._m0[_2566].w < 1.0) && ((cbInstanceData._m0[_2566].w + _2459) < 0.5))
        {
            _2625 = true;
            break;
        }
        if ((_2443 + 1.0) < _2441.x)
        {
            _2625 = true;
            break;
        }
        _2625 = false;
        break;
    }
    float _2830;
    if (_2625)
    {
        discard_state = true;
        _2830 = 0.0;
    }
    else
    {
        _2830 = cbInstanceData._m0[_2282].w;
    }
    SV_Target.x = _2447;
    SV_Target.y = _2448;
    SV_Target.z = _2449;
    SV_Target.w = _2830;
    SV_Target_1.x = _2452;
    SV_Target_1.y = _2455;
    SV_Target_1.z = _2458;
    SV_Target_1.w = cbInstanceData._m0[_2282].w;
    discard_exit();
}


