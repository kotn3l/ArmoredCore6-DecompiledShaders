#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _873;
float _3569;
float _3570;
float _3571;
float _3572;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _228.x * cbMtdParam._m0[9u].x;
    float _235 = _228.y * cbMtdParam._m0[9u].y;
    float _236 = _228.z * cbMtdParam._m0[9u].z;
    vec4 _248 = texture(sampler2D(P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _252 = _248.z;
    float _256 = (_248.x * 2.0) + (-1.0);
    float _258 = (_248.y * 2.0) + (-1.0);
    float _259 = dot(vec2(_256, _258), vec2(_256, _258));
    float _3581 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _265 = sqrt(1.0 - (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))));
    vec4 _287 = texture(sampler2D(P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _294 = fma(_265, _198 * NORMAL.x, fma(_258, _205 * TANGENT.x, (_191 * _184) * _256));
    float _297 = fma(_265, _198 * NORMAL.y, fma(_258, _205 * TANGENT.y, (_191 * _185) * _256));
    float _300 = fma(_265, _198 * NORMAL.z, fma(_258, _205 * TANGENT.z, (_191 * _186) * _256));
    float _304 = inversesqrt(dot(vec3(_294, _297, _300), vec3(_294, _297, _300)));
    float _305 = _304 * _294;
    float _306 = _304 * _297;
    float _307 = _304 * _300;
    float _3592 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _308 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _3603 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3614 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3625 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _327 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _368 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _378 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _368);
    float _379 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _368);
    float _380 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _368);
    float _384 = inversesqrt(dot(vec3(_378, _379, _380), vec3(_378, _379, _380)));
    float _385 = _378 * _384;
    float _386 = _379 * _384;
    float _387 = _380 * _384;
    vec4 _392 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _394 = _392.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _552 = sqrt(((_378 * _378) + (_379 * _379)) + (_380 * _380));
        float _558 = (cbMatDynParam._m0[5u].x * _552) + cbMatDynParam._m0[5u].y;
        float _3636 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
        float _559 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _563 = (cbMatDynParam._m0[5u].z * _552) + cbMatDynParam._m0[5u].w;
        float _3647 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) - _559)) + _559) < ((_394 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _406 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _407 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _427 = fma(_307, cbSceneParam._m0[5u].z, fma(_306, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _305));
    float _430 = fma(_307, cbSceneParam._m0[6u].z, fma(_306, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _305));
    float _433 = fma(_307, cbSceneParam._m0[7u].z, fma(_306, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _305));
    uint _446 = uint(roundEven(NORMAL.w)) * 13u;
    uint _448 = _446 + 9u;
    uint _449 = _448 + uint(cbMatDynParam._m0[0u].w);
    float _455 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0)))) * cbInstanceData._m0[_449].x;
    float _456 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0)))) * cbInstanceData._m0[_449].y;
    float _457 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) * cbInstanceData._m0[_449].z;
    float _3658 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _3669 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _3680 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    vec4 _469 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _406, cbSceneParam._m0[86u].y * _407));
    float _472 = _469.x * TEXCOORD.z;
    float _473 = dot(vec3(_305, _306, _307), vec3(_385, _386, _387));
    float _476 = _473 * 2.0;
    float _480 = (_476 * _305) - _385;
    float _481 = (_476 * _306) - _386;
    float _482 = (_476 * _307) - _387;
    float _486 = abs(dot(vec3(_385, _386, _387), vec3(_305, _306, _307)));
    float _3691 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _488 = sqrt(_308);
    float _501 = exp2((_488 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_488 * 3.0));
    float _533 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _872;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _597 = fma(_541, cbModelParam._m0[26u].z, fma(_537, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _533));
        float _601 = fma(_541, cbModelParam._m0[27u].z, fma(_537, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _533));
        float _605 = fma(_541, cbModelParam._m0[28u].z, fma(_537, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _533));
        float _630 = _533 + _305;
        float _631 = _537 + _306;
        float _632 = _541 + _307;
        float _642 = fma(_632, cbModelParam._m0[26u].z, fma(_631, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _630)) - _597;
        float _643 = fma(_632, cbModelParam._m0[27u].z, fma(_631, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _630)) - _601;
        float _644 = fma(_632, cbModelParam._m0[28u].z, fma(_631, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _630)) - _605;
        float _648 = inversesqrt(dot(vec3(_642, _643, _644), vec3(_642, _643, _644)));
        float _661 = ((_648 * _642) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_597 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _662 = ((_648 * _643) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_601 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _663 = ((_648 * _644) / cbModelParam._m0[34u].z) + ((((((_605 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _666 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_661, _662, _663), 0.0);
        vec4 _673 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_661, _662, _663), 0.0);
        vec4 _680 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_661, _662, _663), 0.0);
        vec4 _687 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_661, _662, _663), 0.0);
        float _700 = exp2((_666.w + (-0.5)) * 20.0) * 2.0;
        float _701 = _700 * (_666.x + (-0.5));
        float _702 = _700 * (_666.y + (-0.5));
        float _703 = _700 * (_666.z + (-0.5));
        float _710 = exp2((_673.w + (-0.5)) * 20.0) * 2.0;
        float _711 = _710 * (_673.x + (-0.5));
        float _712 = _710 * (_673.y + (-0.5));
        float _713 = _710 * (_673.z + (-0.5));
        float _720 = exp2((_680.w + (-0.5)) * 20.0) * 2.0;
        float _721 = _720 * (_680.x + (-0.5));
        float _722 = _720 * (_680.y + (-0.5));
        float _723 = _720 * (_680.z + (-0.5));
        float _730 = exp2((_687.w + (-0.5)) * 20.0) * 2.0;
        float _731 = _730 * (_687.x + (-0.5));
        float _732 = _730 * (_687.y + (-0.5));
        float _733 = _730 * (_687.z + (-0.5));
        float _734 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _735 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _736 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _737 = _701 * 0.5;
        float _738 = _711 * 0.5;
        float _739 = _721 * 0.5;
        float _740 = dot(vec3(_737, _738, _739), vec3(_737, _738, _739));
        float _745 = (_740 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_740);
        float _754 = (dot(vec3(_305, _306, _307), vec3(_745 * _737, _745 * _738, _745 * _739)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _764 = sqrt(((_738 * _738) + (_737 * _737)) + (_739 * _739)) / (_734 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _766 = _765 * 2.0;
        float _770 = (1.0 - _765) / (_765 + 1.0);
        float _3739 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _780 = ((((1.0 - _771) * (_766 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_766 + 1.0))) + _771) * _734;
        float _781 = _702 * 0.5;
        float _782 = _712 * 0.5;
        float _783 = _722 * 0.5;
        float _784 = dot(vec3(_781, _782, _783), vec3(_781, _782, _783));
        float _789 = (_784 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_784);
        float _797 = (dot(vec3(_305, _306, _307), vec3(_789 * _781, _789 * _782, _789 * _783)) + 1.0) * 0.5;
        float _3750 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _806 = sqrt(((_782 * _782) + (_781 * _781)) + (_783 * _783)) / (_735 + 9.9999997473787516355514526367188e-06);
        float _3761 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _808 = _807 * 2.0;
        float _812 = (1.0 - _807) / (_807 + 1.0);
        float _3772 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _822 = ((((1.0 - _813) * (_808 + 2.0)) * exp2(log2(isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_808 + 1.0))) + _813) * _735;
        float _823 = _703 * 0.5;
        float _824 = _713 * 0.5;
        float _825 = _723 * 0.5;
        float _826 = dot(vec3(_823, _824, _825), vec3(_823, _824, _825));
        float _831 = (_826 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_826);
        float _839 = (dot(vec3(_305, _306, _307), vec3(_831 * _823, _831 * _824, _831 * _825)) + 1.0) * 0.5;
        float _3783 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _848 = sqrt(((_824 * _824) + (_823 * _823)) + (_825 * _825)) / (_736 + 9.9999997473787516355514526367188e-06);
        float _3794 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _850 = _849 * 2.0;
        float _854 = (1.0 - _849) / (_849 + 1.0);
        float _3805 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _864 = ((((1.0 - _855) * (_850 + 2.0)) * exp2(log2(isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_850 + 1.0))) + _855) * _736;
        _872 = _703;
        _874 = _702;
        _875 = _701;
        _876 = _713;
        _877 = _712;
        _878 = _711;
        _879 = _723;
        _880 = _722;
        _881 = _721;
        _882 = _736;
        _883 = _735;
        _884 = _734;
        _885 = cbModelParam._m0[36u].z * (isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0)));
        _886 = cbModelParam._m0[36u].z * (isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0)));
        _887 = cbModelParam._m0[36u].z * (isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0)));
    }
    else
    {
        _872 = _873;
        _874 = _873;
        _875 = _873;
        _876 = _873;
        _877 = _873;
        _878 = _873;
        _879 = _873;
        _880 = _873;
        _881 = _873;
        _882 = _873;
        _883 = _873;
        _884 = _873;
        _885 = 0.0;
        _886 = 0.0;
        _887 = 0.0;
    }
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _916 = fma(_541, cbModelParam._m0[30u].z, fma(_537, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _533));
        float _920 = fma(_541, cbModelParam._m0[31u].z, fma(_537, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _533));
        float _924 = fma(_541, cbModelParam._m0[32u].z, fma(_537, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _533));
        float _947 = _533 + _305;
        float _948 = _537 + _306;
        float _949 = _541 + _307;
        float _959 = fma(_949, cbModelParam._m0[30u].z, fma(_948, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _947)) - _916;
        float _960 = fma(_949, cbModelParam._m0[31u].z, fma(_948, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _947)) - _920;
        float _961 = fma(_949, cbModelParam._m0[32u].z, fma(_948, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _947)) - _924;
        float _965 = inversesqrt(dot(vec3(_959, _960, _961), vec3(_959, _960, _961)));
        float _978 = ((_965 * _959) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_916 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _979 = ((_965 * _960) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_920 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _980 = ((_965 * _961) / cbModelParam._m0[35u].z) + ((((((_924 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        float _1015 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_982.x + (-0.5));
        float _1017 = _1015 * (_982.y + (-0.5));
        float _1018 = _1015 * (_982.z + (-0.5));
        float _1025 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_989.x + (-0.5));
        float _1027 = _1025 * (_989.y + (-0.5));
        float _1028 = _1025 * (_989.z + (-0.5));
        float _1035 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_996.x + (-0.5));
        float _1037 = _1035 * (_996.y + (-0.5));
        float _1038 = _1035 * (_996.z + (-0.5));
        float _1045 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1003.x + (-0.5));
        float _1047 = _1045 * (_1003.y + (-0.5));
        float _1048 = _1045 * (_1003.z + (-0.5));
        float _1049 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1050 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1051 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1052 = _1016 * 0.5;
        float _1053 = _1026 * 0.5;
        float _1054 = _1036 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_305, _306, _307), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3846 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_1049 + 9.9999997473787516355514526367188e-06);
        float _3857 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3868 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_1079 + 1.0))) + _1084) * _1049;
        float _1094 = _1017 * 0.5;
        float _1095 = _1027 * 0.5;
        float _1096 = _1037 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1110 = (dot(vec3(_305, _306, _307), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _3879 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1119 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1050 + 9.9999997473787516355514526367188e-06);
        float _3890 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _3901 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_1121 + 1.0))) + _1126) * _1050;
        float _1136 = _1018 * 0.5;
        float _1137 = _1028 * 0.5;
        float _1138 = _1038 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1152 = (dot(vec3(_305, _306, _307), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3912 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1161 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1051 + 9.9999997473787516355514526367188e-06);
        float _3923 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _3934 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1163 + 1.0))) + _1168) * _1051;
        _1185 = _1018;
        _1186 = _1017;
        _1187 = _1016;
        _1188 = _1028;
        _1189 = _1027;
        _1190 = _1026;
        _1191 = _1038;
        _1192 = _1037;
        _1193 = _1036;
        _1194 = _1051;
        _1195 = _1050;
        _1196 = _1049;
        _1197 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
        _1198 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
        _1199 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
    }
    else
    {
        _1185 = _873;
        _1186 = _873;
        _1187 = _873;
        _1188 = _873;
        _1189 = _873;
        _1190 = _873;
        _1191 = _873;
        _1192 = _873;
        _1193 = _873;
        _1194 = _873;
        _1195 = _873;
        _1196 = _873;
        _1197 = 0.0;
        _1198 = 0.0;
        _1199 = 0.0;
    }
    float _1209 = (cbModelParam._m0[1u].x * (_1197 - _885)) + _885;
    float _1210 = (cbModelParam._m0[1u].x * (_1198 - _886)) + _886;
    float _1211 = (cbModelParam._m0[1u].x * (_1199 - _887)) + _887;
    float _1232 = fma(_1211, cbSceneParam._m0[89u].z, fma(_1210, cbSceneParam._m0[89u].y, _1209 * cbSceneParam._m0[89u].x));
    float _1235 = fma(_1211, cbSceneParam._m0[90u].z, fma(_1210, cbSceneParam._m0[90u].y, _1209 * cbSceneParam._m0[90u].x));
    float _1238 = fma(_1211, cbSceneParam._m0[91u].z, fma(_1210, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1209));
    float _1253 = _480 * 0.5;
    float _1254 = _481 * 0.5;
    float _1255 = _482 * 0.5;
    float _1256 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_1187, _1190, _1193, _1196));
    float _1259 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_1186, _1189, _1192, _1195));
    float _1262 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_1185, _1188, _1191, _1194));
    float _1296;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1269 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_872, _876, _879, _882));
        float _1273 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_874, _877, _880, _883));
        float _1277 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_875, _878, _881, _884));
        float _1284 = dot(vec4(cbModelParam._m0[39u]), vec4(_1253, _1254, _1255, 1.0));
        _1296 = dot(vec3(isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)), isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)), isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1284) ? 0.0 : (isnan(0.0) ? _1284 : max(0.0, _1284))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1296 = 1.0;
    }
    float _1307;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1298 = dot(vec4(cbModelParam._m0[40u]), vec4(_1253, _1254, _1255, 1.0));
        _1307 = dot(vec3(isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)), isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)), isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1298) ? 0.0 : (isnan(0.0) ? _1298 : max(0.0, _1298))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1307 = 1.0;
    }
    float _1311 = (_1307 * cbModelParam._m0[1u].x) + (_1296 * (1.0 - cbModelParam._m0[1u].x));
    float _1321 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _308);
    float _1322 = isnan(_1321) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1321 : min(cbModelParam._m0[25u].z, _1321));
    float _1404;
    float _1406;
    float _1408;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1371 = fma(_541, cbModelParam._m0[13u].z, fma(_537, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _533)) + cbModelParam._m0[13u].w;
        float _1375 = fma(_541, cbModelParam._m0[14u].z, fma(_537, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _533)) + cbModelParam._m0[14u].w;
        float _1379 = fma(_541, cbModelParam._m0[15u].z, fma(_537, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _533)) + cbModelParam._m0[15u].w;
        float _1382 = fma(_482, cbModelParam._m0[13u].z, fma(_481, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _480));
        float _1385 = fma(_482, cbModelParam._m0[14u].z, fma(_481, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _480));
        float _1388 = fma(_482, cbModelParam._m0[15u].z, fma(_481, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _480));
        float _1416;
        if (_1382 > 0.0)
        {
            _1416 = abs((1.0 - _1371) / _1382);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1382 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1371 + 1.0) / _1382);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1416 = frontier_phi_17_15_ladder;
        }
        float _1589;
        if (_1385 > 0.0)
        {
            _1589 = abs((1.0 - _1375) / _1385);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1385 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1375 + 1.0) / _1385);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1589 = frontier_phi_26_22_ladder;
        }
        float _1885;
        if (_1388 > 0.0)
        {
            _1885 = abs((1.0 - _1379) / _1388);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1388 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1379 + 1.0) / _1388);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1885 = frontier_phi_38_33_ladder;
        }
        float _1887 = isnan(_1589) ? _1416 : (isnan(_1416) ? _1589 : min(_1416, _1589));
        float _1888 = isnan(_1885) ? _1887 : (isnan(_1887) ? _1885 : min(_1887, _1885));
        float _1892 = (_1888 * _1382) + _1371;
        float _1893 = (_1888 * _1385) + _1375;
        float _1894 = (_1888 * _1388) + _1379;
        float _1895 = _1888 * 9.9999997473787516355514526367188e-05;
        float _1897 = (-1.0) - _1895;
        float _1899 = _1895 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1894 > _1899) || ((_1894 < _1897) || ((_1893 > _1899) || ((_1893 < _1897) || ((_1892 < _1897) || (_1892 > _1899))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2039 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1894, cbModelParam._m0[9u].z, fma(_1893, cbModelParam._m0[9u].y, _1892 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1894, cbModelParam._m0[10u].z, fma(_1893, cbModelParam._m0[10u].y, _1892 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1894, cbModelParam._m0[11u].z, fma(_1893, cbModelParam._m0[11u].y, _1892 * cbModelParam._m0[11u].x))), _1322);
            frontier_phi_16_38_ladder = _2039.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2039.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2039.x * cbModelParam._m0[1u].y;
        }
        _1404 = frontier_phi_16_38_ladder_2;
        _1406 = frontier_phi_16_38_ladder_1;
        _1408 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1392 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_480, _481, _482), _1322);
        _1404 = _1392.x * cbModelParam._m0[1u].y;
        _1406 = _1392.y * cbModelParam._m0[1u].y;
        _1408 = _1392.z * cbModelParam._m0[1u].y;
    }
    float _1412 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _308);
    float _1413 = isnan(_1412) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1412 : min(cbModelParam._m0[25u].w, _1412));
    float _1506;
    float _1508;
    float _1510;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1470 = fma(_541, cbModelParam._m0[21u].z, fma(_537, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _533)) + cbModelParam._m0[21u].w;
        float _1474 = fma(_541, cbModelParam._m0[22u].z, fma(_537, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _533)) + cbModelParam._m0[22u].w;
        float _1478 = fma(_541, cbModelParam._m0[23u].z, fma(_537, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _533)) + cbModelParam._m0[23u].w;
        float _1481 = fma(_482, cbModelParam._m0[21u].z, fma(_481, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _480));
        float _1484 = fma(_482, cbModelParam._m0[22u].z, fma(_481, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _480));
        float _1487 = fma(_482, cbModelParam._m0[23u].z, fma(_481, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _480));
        float _1594;
        if (_1481 > 0.0)
        {
            _1594 = abs((1.0 - _1470) / _1481);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1470 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1594 = frontier_phi_28_24_ladder;
        }
        float _1912;
        if (_1484 > 0.0)
        {
            _1912 = abs((1.0 - _1474) / _1484);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1474 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1912 = frontier_phi_40_35_ladder;
        }
        float _2239;
        if (_1487 > 0.0)
        {
            _2239 = abs((1.0 - _1478) / _1487);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1478 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2239 = frontier_phi_50_47_ladder;
        }
        float _2241 = isnan(_1912) ? _1594 : (isnan(_1594) ? _1912 : min(_1594, _1912));
        float _2242 = isnan(_2239) ? _2241 : (isnan(_2241) ? _2239 : min(_2241, _2239));
        float _2246 = (_2242 * _1481) + _1470;
        float _2247 = (_2242 * _1484) + _1474;
        float _2248 = (_2242 * _1487) + _1478;
        float _2249 = _2242 * 9.9999997473787516355514526367188e-05;
        float _2250 = (-1.0) - _2249;
        float _2252 = _2249 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2248 > _2252) || ((_2248 < _2250) || ((_2247 > _2252) || ((_2247 < _2250) || ((_2246 < _2250) || (_2246 > _2252))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2366 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2248, cbModelParam._m0[17u].z, fma(_2247, cbModelParam._m0[17u].y, _2246 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2248, cbModelParam._m0[18u].z, fma(_2247, cbModelParam._m0[18u].y, _2246 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2248, cbModelParam._m0[19u].z, fma(_2247, cbModelParam._m0[19u].y, _2246 * cbModelParam._m0[19u].x))), _1413);
            frontier_phi_25_50_ladder = _2366.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2366.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2366.x * cbModelParam._m0[1u].z;
        }
        _1506 = frontier_phi_25_50_ladder_2;
        _1508 = frontier_phi_25_50_ladder_1;
        _1510 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1490 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_480, _481, _482), _1413);
        _1506 = _1490.x * cbModelParam._m0[1u].z;
        _1508 = _1490.y * cbModelParam._m0[1u].z;
        _1510 = _1490.z * cbModelParam._m0[1u].z;
    }
    float _1522 = ((((1.0 - _501) * ((_488 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_501 * _488)) * _472;
    float _1523 = _1522 * ((cbModelParam._m0[1u].w * (_1506 - _1404)) + _1404);
    float _1524 = _1522 * ((cbModelParam._m0[1u].w * (_1508 - _1406)) + _1406);
    float _1525 = _1522 * ((cbModelParam._m0[1u].w * (_1510 - _1408)) + _1408);
    float _1528 = fma(_1525, cbSceneParam._m0[89u].z, fma(_1524, cbSceneParam._m0[89u].y, _1523 * cbSceneParam._m0[89u].x));
    float _1531 = fma(_1525, cbSceneParam._m0[90u].z, fma(_1524, cbSceneParam._m0[90u].y, _1523 * cbSceneParam._m0[90u].x));
    float _1534 = fma(_1525, cbSceneParam._m0[91u].z, fma(_1524, cbSceneParam._m0[91u].y, _1523 * cbSceneParam._m0[91u].x));
    float _1568 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1572 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1576 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1580 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1581 = _1568 / _1580;
    float _1582 = _1572 / _1580;
    float _1583 = _1576 / _1580;
    float _1730;
    float _1731;
    float _1732;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1610 = ((uint(_1583 > cbSceneParam._m0[59u].y) + uint(_1583 > cbSceneParam._m0[59u].x)) + uint(_1583 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1611 = _1610 + 43u;
        uint _1619 = _1610 + 44u;
        uint _1627 = _1610 + 45u;
        uint _1635 = _1610 + 46u;
        float _1646 = fma(_1580, cbSceneParam._m0[_1611].w, fma(_1576, cbSceneParam._m0[_1611].z, fma(_1572, cbSceneParam._m0[_1611].y, _1568 * cbSceneParam._m0[_1611].x)));
        float _1650 = fma(_1580, cbSceneParam._m0[_1619].w, fma(_1576, cbSceneParam._m0[_1619].z, fma(_1572, cbSceneParam._m0[_1619].y, _1568 * cbSceneParam._m0[_1619].x)));
        float _1658 = fma(_1580, cbSceneParam._m0[_1635].w, fma(_1576, cbSceneParam._m0[_1635].z, fma(_1572, cbSceneParam._m0[_1635].y, _1568 * cbSceneParam._m0[_1635].x)));
        float _1663 = cbSceneParam._m0[33u].z * _1658;
        float _1665 = cbSceneParam._m0[33u].w * _1658;
        float _1668 = fma(_1580, cbSceneParam._m0[_1627].w, fma(_1576, cbSceneParam._m0[_1627].z, fma(_1572, cbSceneParam._m0[_1627].y, _1568 * cbSceneParam._m0[_1627].x))) / _1658;
        float _1716 = (cbSceneParam._m0[33u].x - sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583))) * cbSceneParam._m0[33u].y;
        float _4060 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1723 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1663 + _1646) / _1658, (_1665 + _1650) / _1658), _1668), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1665 + _1646) / _1658, (_1650 - _1663) / _1658), _1668), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1646 - _1663) / _1658, (_1650 - _1665) / _1658), _1668), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1646 - _1665) / _1658, (_1663 + _1650) / _1658), _1668), 0.0)).x), vec4(0.25)));
        _1730 = 1.0 - (_1723 * cbSceneParam._m0[34u].x);
        _1731 = 1.0 - (_1723 * cbSceneParam._m0[34u].y);
        _1732 = 1.0 - (_1723 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1730 = 1.0;
        _1731 = 1.0;
        _1732 = 1.0;
    }
    float _1796;
    float _1798;
    float _1800;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1784 = fma(_1580, cbSceneParam._m0[63u].w, fma(_1576, cbSceneParam._m0[63u].z, fma(_1572, cbSceneParam._m0[63u].y, _1568 * cbSceneParam._m0[63u].x)));
        float _1785 = fma(_1580, cbSceneParam._m0[60u].w, fma(_1576, cbSceneParam._m0[60u].z, fma(_1572, cbSceneParam._m0[60u].y, _1568 * cbSceneParam._m0[60u].x))) / _1784;
        float _1786 = fma(_1580, cbSceneParam._m0[61u].w, fma(_1576, cbSceneParam._m0[61u].z, fma(_1572, cbSceneParam._m0[61u].y, _1568 * cbSceneParam._m0[61u].x))) / _1784;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1785 >= cbSceneParam._m0[64u].x) && (_1786 >= cbSceneParam._m0[64u].y)) && (_1785 <= cbSceneParam._m0[64u].z)) && (_1786 <= cbSceneParam._m0[64u].w))
        {
            float _1925 = fma(_1580, cbSceneParam._m0[62u].w, fma(_1576, cbSceneParam._m0[62u].z, fma(_1572, cbSceneParam._m0[62u].y, _1568 * cbSceneParam._m0[62u].x))) / _1784;
            float _1929 = isnan(cbSceneParam._m0[41u].w) ? _1925 : (isnan(_1925) ? cbSceneParam._m0[41u].w : max(_1925, cbSceneParam._m0[41u].w));
            float _1972 = (cbSceneParam._m0[33u].x - sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583))) * cbSceneParam._m0[33u].y;
            float _4076 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
            float _1979 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1785, cbSceneParam._m0[33u].w + _1786), _1929), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1785, _1786 - cbSceneParam._m0[33u].z), _1929), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1785 - cbSceneParam._m0[33u].z, _1786 - cbSceneParam._m0[33u].w), _1929), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1785 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1786), _1929), 0.0)).x), vec4(0.25)));
            float _1983 = 1.0 - (_1979 * cbSceneParam._m0[34u].x);
            float _1984 = 1.0 - (_1979 * cbSceneParam._m0[34u].y);
            float _1985 = 1.0 - (_1979 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1985) ? _1732 : (isnan(_1732) ? _1985 : min(_1732, _1985));
            frontier_phi_37_36_ladder_1 = isnan(_1984) ? _1731 : (isnan(_1731) ? _1984 : min(_1731, _1984));
            frontier_phi_37_36_ladder_2 = isnan(_1983) ? _1730 : (isnan(_1730) ? _1983 : min(_1730, _1983));
        }
        else
        {
            frontier_phi_37_36_ladder = _1732;
            frontier_phi_37_36_ladder_1 = _1731;
            frontier_phi_37_36_ladder_2 = _1730;
        }
        _1796 = frontier_phi_37_36_ladder_2;
        _1798 = frontier_phi_37_36_ladder_1;
        _1800 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1796 = _1730;
        _1798 = _1731;
        _1800 = _1732;
    }
    uvec4 _1805 = floatBitsToUint(cbInstanceData._m0[_446 + 5u]);
    uint _1807 = _1805.x * 14u;
    uint _1808 = _1807 + 13u;
    float _1815 = _472 + (-1.0);
    float _1820 = (cbLight._m0[_1808].x * _1815) + 1.0;
    float _1821 = (cbLight._m0[_1808].y * _1815) + 1.0;
    float _1822 = (cbLight._m0[_1808].z * _1815) + 1.0;
    float _1823 = (cbLight._m0[_1808].w * _1815) + 1.0;
    uint _1824 = _1807 + 5u;
    float _1830 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
    uint _1834 = _1807 + 4u;
    float _1844 = isnan(1.0) ? _1820 : (isnan(_1820) ? 1.0 : min(_1820, 1.0));
    uint _1848 = _1807 | 1u;
    float _1859 = dot(vec3(cbLight._m0[_1807].xyz), vec3(_305, _306, _307));
    float _1862 = dot(vec3(cbLight._m0[_1848].xyz), vec3(_305, _306, _307));
    float _4112 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _4123 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1867 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * 0.3183098733425140380859375;
    float _1869 = (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * 0.3183098733425140380859375;
    float _1876 = ((cbLight._m0[_1824].x * _1830) * _1869) + (((cbLight._m0[_1834].x * _1796) * _1844) * _1867);
    float _1877 = ((_1830 * cbLight._m0[_1824].y) * _1869) + (((cbLight._m0[_1834].y * _1798) * _1844) * _1867);
    float _1878 = ((_1830 * cbLight._m0[_1824].z) * _1869) + (((cbLight._m0[_1834].z * _1800) * _1844) * _1867);
    uvec4 _1882 = floatBitsToUint(cbLight._m0[_1807 + 12u]);
    bool _1884 = _1882.x == 0u;
    float _1986;
    float _1988;
    float _1990;
    if (_1884)
    {
        _1986 = _1876;
        _1988 = _1877;
        _1990 = _1878;
    }
    else
    {
        uint _1994 = _1807 + 6u;
        float _2010 = (dot(vec3(cbLight._m0[_1807 + 2u].xyz), vec3(_305, _306, _307)) * 0.5) + 0.5;
        float _2011 = _2010 * _2010;
        float _4134 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2012 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _2013 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
        _1986 = (((cbLight._m0[_1994].x * 0.3183098733425140380859375) * _2012) * _2013) + _1876;
        _1988 = (((cbLight._m0[_1994].y * 0.3183098733425140380859375) * _2012) * _2013) + _1877;
        _1990 = (((cbLight._m0[_1994].z * 0.3183098733425140380859375) * _2012) * _2013) + _1878;
    }
    bool _1993 = _1882.y == 0u;
    float _2048;
    float _2050;
    float _2052;
    if (_1993)
    {
        _2048 = _1986;
        _2050 = _1988;
        _2052 = _1990;
    }
    else
    {
        uint _2210 = _1807 + 7u;
        float _2226 = (dot(vec3(cbLight._m0[_1807 + 3u].xyz), vec3(_305, _306, _307)) * 0.5) + 0.5;
        float _2227 = _2226 * _2226;
        float _4150 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2228 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _2229 = isnan(1.0) ? _1823 : (isnan(_1823) ? 1.0 : min(_1823, 1.0));
        _2048 = (((cbLight._m0[_2210].x * 0.3183098733425140380859375) * _2228) * _2229) + _1986;
        _2050 = (((cbLight._m0[_2210].y * 0.3183098733425140380859375) * _2228) * _2229) + _1988;
        _2052 = (((cbLight._m0[_2210].z * 0.3183098733425140380859375) * _2228) * _2229) + _1990;
    }
    uint _2055 = _1807 + 8u;
    float _2068 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1807].w)) * _308) * 0.949999988079071044921875);
    float _2069 = _2068 * _2068;
    float _2070 = cbLight._m0[_1807].x + _385;
    float _2071 = cbLight._m0[_1807].y + _386;
    float _2072 = cbLight._m0[_1807].z + _387;
    float _2076 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
    float _2077 = _2076 * _2070;
    float _2078 = _2076 * _2071;
    float _2079 = _2076 * _2072;
    float _2080 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_1807].xyz));
    float _4166 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2083 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _4177 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _2084 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _2085 = dot(vec3(_305, _306, _307), vec3(_2077, _2078, _2079));
    float _4188 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _2089 = dot(vec3(cbLight._m0[_1807].xyz), vec3(_2077, _2078, _2079));
    float _4199 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2093 = _2069 * _2069;
    float _2097 = ((_2088 * _2088) * (_2093 + (-1.0))) + 1.0;
    float _2108 = (exp2(log2(1.0 - (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2109 = 1.0 - _2069;
    float _2120 = (0.5 / (((_2084 * ((_2083 * _2109) + _2069)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2109) + _2069) * _2083))) * _2083;
    float _4210 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2122 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_2093 / ((_2097 * _2097) * 3.141590118408203125));
    uint _2136 = _1807 + 9u;
    float _2147 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1848].w)) * _308) * 0.949999988079071044921875);
    float _2148 = _2147 * _2147;
    float _2149 = cbLight._m0[_1848].x + _385;
    float _2150 = cbLight._m0[_1848].y + _386;
    float _2151 = cbLight._m0[_1848].z + _387;
    float _2155 = inversesqrt(dot(vec3(_2149, _2150, _2151), vec3(_2149, _2150, _2151)));
    float _2156 = _2155 * _2149;
    float _2157 = _2155 * _2150;
    float _2158 = _2155 * _2151;
    float _2159 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_1848].xyz));
    float _4221 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2162 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _2163 = dot(vec3(_305, _306, _307), vec3(_2156, _2157, _2158));
    float _4232 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2166 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _2167 = dot(vec3(cbLight._m0[_1848].xyz), vec3(_2156, _2157, _2158));
    float _4243 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2171 = _2148 * _2148;
    float _2175 = ((_2166 * _2166) * (_2171 + (-1.0))) + 1.0;
    float _2184 = (exp2(log2(1.0 - (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2185 = 1.0 - _2148;
    float _2195 = (0.5 / (((_2084 * ((_2162 * _2185) + _2148)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2185) + _2148) * _2162))) * _2162;
    float _4254 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2197 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2171 / ((_2175 * _2175) * 3.141590118408203125));
    float _2207 = (((_2184 * cbLight._m0[_2136].x) * _2197) * _1830) + ((((cbLight._m0[_2055].x * _1796) * _2108) * _2122) * _1844);
    float _2208 = (((_2184 * cbLight._m0[_2136].y) * _2197) * _1830) + ((((cbLight._m0[_2055].y * _1798) * _2108) * _2122) * _1844);
    float _2209 = (((_2184 * cbLight._m0[_2136].z) * _2197) * _1830) + ((((cbLight._m0[_2055].z * _1800) * _2108) * _2122) * _1844);
    float _2265;
    float _2267;
    float _2269;
    if (_1884)
    {
        _2265 = _2207;
        _2267 = _2208;
        _2269 = _2209;
    }
    else
    {
        uint _2271 = _1807 + 2u;
        uint _2275 = _1807 + 10u;
        float _2289 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2271].w)) * _308) * 0.949999988079071044921875);
        float _2290 = _2289 * _2289;
        float _2291 = cbLight._m0[_2271].x + _385;
        float _2292 = cbLight._m0[_2271].y + _386;
        float _2293 = cbLight._m0[_2271].z + _387;
        float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
        float _2298 = _2297 * _2291;
        float _2299 = _2297 * _2292;
        float _2300 = _2297 * _2293;
        float _2301 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_2271].xyz));
        float _4265 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2304 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _2305 = dot(vec3(_305, _306, _307), vec3(_2298, _2299, _2300));
        float _4276 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2308 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _2309 = dot(vec3(cbLight._m0[_2271].xyz), vec3(_2298, _2299, _2300));
        float _4287 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2313 = _2290 * _2290;
        float _2317 = ((_2308 * _2308) * (_2313 + (-1.0))) + 1.0;
        float _2326 = (exp2(log2(1.0 - (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2327 = 1.0 - _2290;
        float _2337 = (0.5 / (((_2084 * ((_2304 * _2327) + _2290)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2327) + _2290) * _2304))) * _2304;
        float _4298 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2339 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2313 / ((_2317 * _2317) * 3.141590118408203125));
        float _2340 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
        _2265 = (((_2326 * cbLight._m0[_2275].x) * _2339) * _2340) + _2207;
        _2267 = (((_2326 * cbLight._m0[_2275].y) * _2339) * _2340) + _2208;
        _2269 = (((_2326 * cbLight._m0[_2275].z) * _2339) * _2340) + _2209;
    }
    float _2371;
    float _2373;
    float _2375;
    if (_1993)
    {
        _2371 = _2265;
        _2373 = _2267;
        _2375 = _2269;
    }
    else
    {
        uint _2382 = _1807 + 3u;
        uint _2386 = _1807 + 11u;
        float _2400 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2382].w)) * _308) * 0.949999988079071044921875);
        float _2401 = _2400 * _2400;
        float _2402 = cbLight._m0[_2382].x + _385;
        float _2403 = cbLight._m0[_2382].y + _386;
        float _2404 = cbLight._m0[_2382].z + _387;
        float _2408 = inversesqrt(dot(vec3(_2402, _2403, _2404), vec3(_2402, _2403, _2404)));
        float _2409 = _2408 * _2402;
        float _2410 = _2408 * _2403;
        float _2411 = _2408 * _2404;
        float _2412 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_2382].xyz));
        float _4314 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2415 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _2416 = dot(vec3(_305, _306, _307), vec3(_2409, _2410, _2411));
        float _4325 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2419 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _2420 = dot(vec3(cbLight._m0[_2382].xyz), vec3(_2409, _2410, _2411));
        float _4336 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2424 = _2401 * _2401;
        float _2428 = ((_2419 * _2419) * (_2424 + (-1.0))) + 1.0;
        float _2437 = (exp2(log2(1.0 - (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2438 = 1.0 - _2401;
        float _2448 = (0.5 / (((_2084 * ((_2415 * _2438) + _2401)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2438) + _2401) * _2415))) * _2415;
        float _4347 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2450 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_2424 / ((_2428 * _2428) * 3.141590118408203125));
        float _2451 = isnan(1.0) ? _1823 : (isnan(_1823) ? 1.0 : min(_1823, 1.0));
        _2371 = (((_2437 * cbLight._m0[_2386].x) * _2450) * _2451) + _2265;
        _2373 = (((_2437 * cbLight._m0[_2386].y) * _2450) * _2451) + _2267;
        _2375 = (((_2437 * cbLight._m0[_2386].z) * _2450) * _2451) + _2269;
    }
    float _2517;
    float _2519;
    float _2521;
    float _2523;
    float _2525;
    float _2527;
    if (_1805.y == 0u)
    {
        uvec4 _2472 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2473 = _2472.x;
        uint _2484 = uint((float(_2472.y) * floor(float(uint(cbSceneParam._m0[85u].y * _407) / _2473))) + floor(float(uint(cbSceneParam._m0[85u].x * _406) / _2473)));
        float _2494 = (log2(_1583 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2495 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        uint _2498 = uint(isnan(14.0) ? _2495 : (isnan(_2495) ? 14.0 : min(_2495, 14.0)));
        uvec4 _2503 = texelFetch(g_lightClusterGridBuffer, int(((_2498 << 2u) + (_2484 << 6u)) >> 2u));
        uint _2504 = _2503.x;
        uint _2505 = _2472.z;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        if (((((1u << ((_2505 >> 4u) & 15u)) + 4294967295u) & _2504) == 0u) || ((_2505 & 240u) == 0u))
        {
            _2619 = 0.0;
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
        }
        else
        {
            float _2620;
            float _2622;
            float _2624;
            float _2626;
            float _2628;
            float _2630;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            float _2786 = 0.0;
            uint _2787 = 0u;
            uint _2796;
            bool _2797;
            for (;;)
            {
                _2796 = texelFetch(g_lightClassification, int((((_2498 << 5u) + (_2484 << 9u)) + (_2787 << 2u)) >> 2u)).x;
                _2797 = _2796 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2797)
                {
                    frontier_phi_71_pred = _2786;
                    frontier_phi_71_pred_1 = _2785;
                    frontier_phi_71_pred_2 = _2784;
                    frontier_phi_71_pred_3 = _2783;
                    frontier_phi_71_pred_4 = _2782;
                    frontier_phi_71_pred_5 = _2781;
                }
                else
                {
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    uint _2932;
                    _2926 = _2781;
                    _2927 = _2782;
                    _2928 = _2783;
                    _2929 = _2784;
                    _2930 = _2785;
                    _2931 = _2786;
                    _2932 = _2796;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    for (;;)
                    {
                        uint _2936 = uint(findLSB(_2932)) + (_2787 << 5u);
                        uint _2933 = (_2932 + 4294967295u) & _2932;
                        uint _2938 = _2936 * 48u;
                        vec4 _2952 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2938)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 3u)).x));
                        uint _2958 = (_2936 * 48u) + 4u;
                        vec4 _2971 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2958)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 3u)).x));
                        uint _2977 = (_2936 * 48u) + 8u;
                        vec3 _2988 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2977)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 2u)).x));
                        float _2992 = _2952.x - _1581;
                        float _2993 = _2952.y - _1582;
                        float _2994 = _2952.z - _1583;
                        float _2995 = dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994));
                        float _2998 = inversesqrt(_2995);
                        float _2999 = _2998 * _2992;
                        float _3000 = _2998 * _2993;
                        float _3001 = _2998 * _2994;
                        float _3002 = dot(vec3(_427, _430, _433), vec3(_2999, _3000, _3001));
                        float _3007 = 1.0 - (_2995 * _2952.w);
                        float _4373 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3008 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                        float _3009 = sqrt(_2995) * _2971.w;
                        float _3012 = 1.39999997615814208984375 / (_3009 + 1.39999997615814208984375);
                        float _3013 = _3012 * _3012;
                        float _3016 = ((1.0 - _3013) * _3002) + _3013;
                        float _3019 = _3009 * _3009;
                        float _3023 = ((isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0))) * _3008) / ((_3019 * 0.699999988079071044921875) + 1.0);
                        float _3027 = (-0.0) - _1581;
                        float _3028 = (-0.0) - _1582;
                        float _3029 = (-0.0) - _1583;
                        float _3033 = inversesqrt(dot(vec3(_3027, _3028, _3029), vec3(_3027, _3028, _3029)));
                        float _3034 = _3033 * _3027;
                        float _3035 = _3033 * _3028;
                        float _3036 = _3033 * _3029;
                        float _3043 = exp2(log2(1.0 / ((_3019 * 3.5) + 5.0)) * 0.25);
                        float _3044 = 1.0 - _488;
                        float _3051 = sqrt(1.0 - ((1.0 - (_3044 * _3044)) * (1.0 - (_3043 * _3043))));
                        float _3052 = _3051 * _3051;
                        float _3053 = _3052 * _3052;
                        float _3054 = _3034 + _2999;
                        float _3055 = _3035 + _3000;
                        float _3056 = _3036 + _3001;
                        float _3060 = inversesqrt(dot(vec3(_3054, _3055, _3056), vec3(_3054, _3055, _3056)));
                        float _3064 = dot(vec3(_427, _430, _433), vec3(_3034, _3035, _3036));
                        float _4389 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3067 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                        float _3068 = dot(vec3(_427, _430, _433), vec3(_3060 * _3054, _3060 * _3055, _3060 * _3056));
                        float _4400 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3071 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                        float _3075 = ((_3071 * _3071) * (_3053 + (-1.0))) + 1.0;
                        float _3076 = _3012 * _3052;
                        float _3077 = _3076 * _3076;
                        float _3080 = ((1.0 - _3077) * _3002) + _3077;
                        float _4411 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3081 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                        float _3082 = 1.0 - _3052;
                        float _3092 = (0.5 / (((_3081 * ((_3067 * _3082) + _3052)) + 9.9999999392252902907785028219223e-09) + (((_3081 * _3082) + _3052) * _3067))) * _3081;
                        float _4422 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3103 = (((_3053 * 3.1415927410125732421875) * (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) / ((_3075 * _3075) * ((_3019 * 2.1991131305694580078125) + 3.141590118408203125))) * _3008;
                        _2856 = (_3023 * _2971.x) + _2929;
                        _2857 = (_3023 * _2971.y) + _2930;
                        _2858 = (_3023 * _2971.z) + _2931;
                        _2853 = (_3103 * _2988.x) + _2926;
                        _2854 = (_3103 * _2988.y) + _2927;
                        _2855 = (_3103 * _2988.z) + _2928;
                        if (_2933 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2926 = _2853;
                            _2927 = _2854;
                            _2928 = _2855;
                            _2929 = _2856;
                            _2930 = _2857;
                            _2931 = _2858;
                            _2932 = _2933;
                        }
                    }
                    frontier_phi_71_pred = _2858;
                    frontier_phi_71_pred_1 = _2857;
                    frontier_phi_71_pred_2 = _2856;
                    frontier_phi_71_pred_3 = _2855;
                    frontier_phi_71_pred_4 = _2854;
                    frontier_phi_71_pred_5 = _2853;
                }
                _2630 = frontier_phi_71_pred;
                _2628 = frontier_phi_71_pred_1;
                _2626 = frontier_phi_71_pred_2;
                _2624 = frontier_phi_71_pred_3;
                _2622 = frontier_phi_71_pred_4;
                _2620 = frontier_phi_71_pred_5;
                uint _2788 = _2787 + 1u;
                if (_2788 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2781 = _2620;
                    _2782 = _2622;
                    _2783 = _2624;
                    _2784 = _2626;
                    _2785 = _2628;
                    _2786 = _2630;
                    _2787 = _2788;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2619 = _2620;
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
        }
        uvec4 _2633 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2634 = _2633.z;
        uint _2636 = (_2634 >> 8u) & 15u;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        if (((4294967295u << _2636) & _2504) == 0u)
        {
            _2749 = _2619;
            _2751 = _2621;
            _2753 = _2623;
            _2755 = _2625;
            _2757 = _2627;
            _2759 = _2629;
        }
        else
        {
            float _2774 = inversesqrt(dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583)));
            float _2775 = _2774 * _1581;
            float _2776 = _2774 * _1582;
            float _2777 = _2774 * _1583;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2636 < ((_2634 >> 12u) & 15u))
            {
                float _2750;
                float _2752;
                float _2754;
                float _2756;
                float _2758;
                float _2760;
                float _2909 = _2619;
                float _2910 = _2621;
                float _2911 = _2623;
                float _2912 = _2625;
                float _2913 = _2627;
                float _2914 = _2629;
                uint _2915 = _2636;
                uint _2924;
                bool _2925;
                for (;;)
                {
                    _2924 = texelFetch(g_lightClassification, int((((_2498 << 5u) + (_2484 << 9u)) + (_2915 << 2u)) >> 2u)).x;
                    _2925 = _2924 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2925)
                    {
                        frontier_phi_82_pred = _2914;
                        frontier_phi_82_pred_1 = _2913;
                        frontier_phi_82_pred_2 = _2912;
                        frontier_phi_82_pred_3 = _2911;
                        frontier_phi_82_pred_4 = _2910;
                        frontier_phi_82_pred_5 = _2909;
                    }
                    else
                    {
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3130 = _2909;
                        float _3131 = _2910;
                        float _3132 = _2911;
                        float _3133 = _2912;
                        float _3134 = _2913;
                        float _3135 = _2914;
                        uint _3136 = _2924;
                        uint _3137;
                        vec4 _3162;
                        float _3163;
                        vec4 _3178;
                        vec3 _3190;
                        vec4 _3206;
                        vec4 _3222;
                        float _3269;
                        bool _3270;
                        for (;;)
                        {
                            uint _3147 = ((_2915 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3136));
                            _3137 = (_3136 + 4294967295u) & _3136;
                            uint _3149 = _3147 * 40u;
                            _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            _3163 = _3162.w;
                            uint _3165 = (_3147 * 40u) + 4u;
                            _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3180 = (_3147 * 40u) + 8u;
                            _3190 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x));
                            uint _3193 = (_3147 * 40u) + 16u;
                            _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            uint _3209 = (_3147 * 40u) + 20u;
                            _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            uint _3225 = (_3147 * 40u) + 24u;
                            vec4 _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            uint _3244 = (_3147 * 40u) + 28u;
                            vec4 _3257 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 3u)).x));
                            _3269 = fma(_1583, _3257.z, fma(_1582, _3257.y, _3257.x * _1581)) + _3257.w;
                            _3270 = !((fma(_1583, _3238.z, fma(_1582, _3238.y, _3238.x * _1581)) + _3238.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3270)
                            {
                                float _3297 = _3162.x - _1581;
                                float _3298 = _3162.y - _1582;
                                float _3299 = _3162.z - _1583;
                                float _3300 = dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299));
                                float _3303 = inversesqrt(_3300);
                                float _3304 = _3303 * _3297;
                                float _3305 = _3303 * _3298;
                                float _3306 = _3303 * _3299;
                                float _3310 = 1.0 - (_3300 / (_3163 * _3163));
                                float _4433 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3311 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                                float _3315 = sqrt(_3300) * _3178.w;
                                float _3317 = 1.39999997615814208984375 / (_3315 + 1.39999997615814208984375);
                                float _3318 = _3317 * _3317;
                                float _3321 = ((1.0 - _3318) * dot(vec3(_3304, _3305, _3306), vec3(_427, _430, _433))) + _3318;
                                float _3324 = _3315 * _3315;
                                float _3328 = (fma(_1583, _3206.z, fma(_1582, _3206.y, _3206.x * _1581)) + _3206.w) / _3269;
                                float _3329 = (fma(_1583, _3222.z, fma(_1582, _3222.y, _3222.x * _1581)) + _3222.w) / _3269;
                                float _3333 = 1.0 - dot(vec2(_3328, _3329), vec2(_3328, _3329));
                                float _4449 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3334 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                                float _3335 = _3334 * (((isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0))) * _3311) / ((_3324 * 0.699999988079071044921875) + 1.0));
                                float _3347 = exp2(log2(1.0 / ((_3324 * 3.5) + 5.0)) * 0.25);
                                float _3348 = 1.0 - _488;
                                float _3355 = sqrt(1.0 - ((1.0 - (_3348 * _3348)) * (1.0 - (_3347 * _3347))));
                                float _3356 = _3355 * _3355;
                                float _3357 = _3356 * _3356;
                                float _3358 = _3304 - _2775;
                                float _3359 = _3305 - _2776;
                                float _3360 = _3306 - _2777;
                                float _3364 = inversesqrt(dot(vec3(_3358, _3359, _3360), vec3(_3358, _3359, _3360)));
                                float _3368 = dot(vec3(_427, _430, _433), vec3((-0.0) - _2775, (-0.0) - _2776, (-0.0) - _2777));
                                float _4460 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3371 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                                float _3372 = dot(vec3(_427, _430, _433), vec3(_3364 * _3358, _3364 * _3359, _3364 * _3360));
                                float _4471 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3375 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                                float _3379 = ((_3375 * _3375) * (_3357 + (-1.0))) + 1.0;
                                float _3380 = _3317 * _3356;
                                float _3381 = _3380 * _3380;
                                float _3387 = ((1.0 - _3381) * dot(vec3(_427, _430, _433), vec3(_3304, _3305, _3306))) + _3381;
                                float _4482 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3388 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                                float _3389 = 1.0 - _3356;
                                float _3399 = (0.5 / (((_3388 * ((_3371 * _3389) + _3356)) + 9.9999999392252902907785028219223e-09) + (((_3388 * _3389) + _3356) * _3371))) * _3388;
                                float _4493 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                                float _3409 = (_3334 * _3311) * (((_3357 * 3.1415927410125732421875) * (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)))) / ((_3379 * _3379) * ((_3324 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3335 * _3178.z;
                                frontier_phi_88_pred_1 = _3335 * _3178.y;
                                frontier_phi_88_pred_2 = _3335 * _3178.x;
                                frontier_phi_88_pred_3 = _3409 * _3190.z;
                                frontier_phi_88_pred_4 = _3409 * _3190.y;
                                frontier_phi_88_pred_5 = _3409 * _3190.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3418 = frontier_phi_88_pred;
                            _3417 = frontier_phi_88_pred_1;
                            _3416 = frontier_phi_88_pred_2;
                            _3415 = frontier_phi_88_pred_3;
                            _3414 = frontier_phi_88_pred_4;
                            _3413 = frontier_phi_88_pred_5;
                            _3120 = _3416 + _3133;
                            _3121 = _3417 + _3134;
                            _3122 = _3418 + _3135;
                            _3117 = _3413 + _3130;
                            _3118 = _3414 + _3131;
                            _3119 = _3415 + _3132;
                            if (_3137 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3130 = _3117;
                                _3131 = _3118;
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3121;
                                _3135 = _3122;
                                _3136 = _3137;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3122;
                        frontier_phi_82_pred_1 = _3121;
                        frontier_phi_82_pred_2 = _3120;
                        frontier_phi_82_pred_3 = _3119;
                        frontier_phi_82_pred_4 = _3118;
                        frontier_phi_82_pred_5 = _3117;
                    }
                    _2760 = frontier_phi_82_pred;
                    _2758 = frontier_phi_82_pred_1;
                    _2756 = frontier_phi_82_pred_2;
                    _2754 = frontier_phi_82_pred_3;
                    _2752 = frontier_phi_82_pred_4;
                    _2750 = frontier_phi_82_pred_5;
                    uint _2916 = _2915 + 1u;
                    if (_2916 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2909 = _2750;
                        _2910 = _2752;
                        _2911 = _2754;
                        _2912 = _2756;
                        _2913 = _2758;
                        _2914 = _2760;
                        _2915 = _2916;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2756;
                frontier_phi_63_64_ladder_1 = _2760;
                frontier_phi_63_64_ladder_2 = _2758;
                frontier_phi_63_64_ladder_3 = _2754;
                frontier_phi_63_64_ladder_4 = _2752;
                frontier_phi_63_64_ladder_5 = _2750;
            }
            else
            {
                frontier_phi_63_64_ladder = _2625;
                frontier_phi_63_64_ladder_1 = _2629;
                frontier_phi_63_64_ladder_2 = _2627;
                frontier_phi_63_64_ladder_3 = _2623;
                frontier_phi_63_64_ladder_4 = _2621;
                frontier_phi_63_64_ladder_5 = _2619;
            }
            _2749 = frontier_phi_63_64_ladder_5;
            _2751 = frontier_phi_63_64_ladder_4;
            _2753 = frontier_phi_63_64_ladder_3;
            _2755 = frontier_phi_63_64_ladder;
            _2757 = frontier_phi_63_64_ladder_2;
            _2759 = frontier_phi_63_64_ladder_1;
        }
        float _2764 = isnan(1.0) ? _472 : (isnan(_472) ? 1.0 : min(_472, 1.0));
        _2517 = (_2764 * _2755) + _2048;
        _2519 = (_2764 * _2757) + _2050;
        _2521 = (_2764 * _2759) + _2052;
        _2523 = ((_2749 * 0.039999999105930328369140625) * _2764) + _2371;
        _2525 = ((_2751 * 0.039999999105930328369140625) * _2764) + _2373;
        _2527 = ((_2753 * 0.039999999105930328369140625) * _2764) + _2375;
    }
    else
    {
        _2517 = _2048;
        _2519 = _2050;
        _2521 = _2052;
        _2523 = _2371;
        _2525 = _2373;
        _2527 = _2375;
    }
    uint _2533 = _448 + uint(cbMatDynParam._m0[0u].w);
    float _2541 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _287.x) * cbInstanceData._m0[_2533].x;
    float _2544 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _287.y) * cbInstanceData._m0[_2533].y;
    float _2547 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _287.z) * cbInstanceData._m0[_2533].z;
    float _4509 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _4520 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _4531 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _2564 = (((isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2517 + ((isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0))) * _472))) + ((_2523 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _1311)) * cbPerFrame._m0[3u].x)) + _2541;
    float _2566 = (_2544 + ((_2525 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _1311)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2519 + ((isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0))) * _472)));
    float _2568 = (_2547 + ((_2527 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _1311)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2521 + ((isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))) * _472)));
    float _2569 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2570 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
    float _2571 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2577 = cbMtdParam._m0[2u].x * _2541;
    float _2578 = cbMtdParam._m0[2u].y * _2544;
    float _2579 = cbMtdParam._m0[2u].z * _2547;
    float _4557 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2581 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    uint _2582 = _446 + 6u;
    float _2590 = _406 / cbSceneParam._m0[86u].x;
    float _2591 = _407 / cbSceneParam._m0[86u].y;
    vec4 _2605 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2590, _2591, (log2((isnan(cbSceneParam._m0[77u].w) ? _327 : (isnan(_327) ? cbSceneParam._m0[77u].w : min(_327, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2607 = _2605.x;
    float _2608 = _2605.y;
    float _2609 = _2605.z;
    float _2610 = _2605.w;
    float _2682;
    float _2684;
    float _2686;
    float _2688;
    if (_327 > cbSceneParam._m0[78u].w)
    {
        float _2644 = isnan(_327) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _327 : min(cbSceneParam._m0[80u].w, _327));
        float _2645 = _2644 / _327;
        float _2656 = _2645 * _378;
        float _2657 = _379 * _2645;
        float _2658 = (-0.0) - _2657;
        float _2660 = _2645 * _380;
        float _2662 = (cbSceneParam._m0[77u].w * _2658) / _2644;
        float _2663 = _2662 + cbSceneParam._m0[79u].w;
        float _2664 = cbSceneParam._m0[79u].w - _2657;
        float _2670 = sqrt(((_2656 * _2656) + (_2657 * _2657)) + (_2660 * _2660));
        float _2673 = (1.0 - (cbSceneParam._m0[77u].w / _2644)) * _2670;
        float _2678 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2680 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2866;
        if (abs((_2658 - _2662) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2866 = ((((_2663 > 0.0) ? exp2(_2678 * _2663) : (2.0 - exp2(_2680 * _2663))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2673;
        }
        else
        {
            float _2810 = 1.0 / cbSceneParam._m0[80u].x;
            float _2811 = isnan(_2664) ? _2663 : (isnan(_2663) ? _2664 : max(_2663, _2664));
            float _2812 = isnan(_2664) ? _2663 : (isnan(_2663) ? _2664 : min(_2663, _2664));
            float _2821 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : min(_2811, 0.0));
            float _2822 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : min(_2812, 0.0));
            _2866 = ((abs(_2670 / _2658) * cbSceneParam._m0[80u].y) * ((((_2821 - _2822) * 2.0) - ((exp2(_2678 * (isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0)))) - exp2(_2678 * (isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0))))) * _2810)) - ((exp2(_2680 * _2821) - exp2(_2680 * _2822)) * _2810))) + (_2673 * cbSceneParam._m0[80u].z);
        }
        vec4 _2868 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2590, _2591, 1.0), 0.0);
        float _2877 = exp2((_2866 * (-1.44269502162933349609375)) * (1.0 - _2868.w));
        float _2878 = log2(_2877);
        float _2894 = log2(_2610);
        _2682 = (exp2(_2894 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].x)) * _2868.x) / cbSceneParam._m0[78u].x)) + _2607;
        _2684 = (exp2(_2894 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].y)) * _2868.y) / cbSceneParam._m0[78u].y)) + _2608;
        _2686 = (exp2(_2894 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].z)) * _2868.z) / cbSceneParam._m0[78u].z)) + _2609;
        _2688 = _2877 * _2610;
    }
    else
    {
        _2682 = _2607;
        _2684 = _2608;
        _2686 = _2609;
        _2688 = _2610;
    }
    bool _2904;
    vec4 _2698;
    vec4 _2720;
    float _2722;
    float _2726;
    float _2727;
    float _2728;
    float _2731;
    float _2734;
    float _2737;
    float _2738;
    bool _2748;
    for (;;)
    {
        _2698 = cbMatDynParam._m0[0u];
        float _2700 = roundEven(_2698.y);
        bool _2701 = _2700 == 3.0;
        float _2702 = log2(_2688);
        float _2706 = exp2(_2702 * cbSceneParam._m0[78u].x);
        float _2707 = exp2(_2702 * cbSceneParam._m0[78u].y);
        float _2708 = exp2(_2702 * cbSceneParam._m0[78u].z);
        float _2709 = _2706 * _2569;
        float _2710 = _2707 * _2570;
        float _2711 = _2708 * _2571;
        float _2718 = _394 + (-0.5);
        _2720 = cbMtdParam._m0[1u];
        _2722 = _2720.y * _2718;
        float _2725 = (_2700 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2726 = _2725 * (_2701 ? _2709 : (_2709 + (cbSceneParam._m0[72u].w * _2682)));
        _2727 = _2725 * (_2701 ? _2710 : (_2710 + (cbSceneParam._m0[72u].w * _2684)));
        _2728 = _2725 * (_2701 ? _2711 : (_2711 + (cbSceneParam._m0[72u].w * _2686)));
        _2731 = ((_2577 * _2581) * _2706) * _2725;
        _2734 = ((_2578 * _2581) * _2707) * _2725;
        _2737 = ((_2579 * _2581) * _2708) * _2725;
        _2738 = _2718 * 0.999000012874603271484375;
        _2748 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2748)
        {
            if ((cbInstanceData._m0[_446 + 7u].x + _2738) < 0.5)
            {
                _2904 = true;
                break;
            }
        }
        uint _2845 = _448 + uint(_2698.w);
        if ((cbInstanceData._m0[_2845].w < 1.0) && ((cbInstanceData._m0[_2845].w + _2738) < 0.5))
        {
            _2904 = true;
            break;
        }
        if ((_2722 + 1.0) < _2720.x)
        {
            _2904 = true;
            break;
        }
        _2904 = false;
        break;
    }
    float _3108;
    if (_2904)
    {
        discard_state = true;
        _3108 = 0.0;
    }
    else
    {
        _3108 = cbInstanceData._m0[_2582].w;
    }
    SV_Target.x = _2726;
    SV_Target.y = _2727;
    SV_Target.z = _2728;
    SV_Target.w = _3108;
    SV_Target_1.x = _2731;
    SV_Target_1.y = _2734;
    SV_Target_1.z = _2737;
    SV_Target_1.w = cbInstanceData._m0[_2582].w;
    discard_exit();
}


