#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _904;
float _3338;
float _3339;
float _3340;
float _3341;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _226 = texture(sampler2D(P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _226.x * cbMtdParam._m0[9u].x;
    float _233 = _226.y * cbMtdParam._m0[9u].y;
    float _234 = _226.z * cbMtdParam._m0[9u].z;
    vec4 _246 = texture(sampler2D(P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _248 = _246.x;
    vec4 _260 = texture(sampler2D(P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _264 = _260.z;
    float _268 = (_260.x * 2.0) + (-1.0);
    float _270 = (_260.y * 2.0) + (-1.0);
    float _271 = dot(vec2(_268, _270), vec2(_268, _270));
    float _3350 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _277 = sqrt(1.0 - (isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0))));
    vec4 _299 = texture(sampler2D(P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _306 = fma(_277, _196 * NORMAL.x, fma(_270, _203 * TANGENT.x, (_189 * _182) * _268));
    float _309 = fma(_277, _196 * NORMAL.y, fma(_270, _203 * TANGENT.y, (_189 * _183) * _268));
    float _312 = fma(_277, _196 * NORMAL.z, fma(_270, _203 * TANGENT.z, (_189 * _184) * _268));
    float _316 = inversesqrt(dot(vec3(_306, _309, _312), vec3(_306, _309, _312)));
    float _317 = _316 * _306;
    float _318 = _316 * _309;
    float _319 = _316 * _312;
    float _3361 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _320 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
    float _3372 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3383 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3394 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3405 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _324 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
    float _340 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _381 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _391 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _381);
    float _392 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _381);
    float _393 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _381);
    float _397 = inversesqrt(dot(vec3(_391, _392, _393), vec3(_391, _392, _393)));
    float _398 = _391 * _397;
    float _399 = _392 * _397;
    float _400 = _393 * _397;
    vec4 _405 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _407 = _405.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _583 = sqrt(((_391 * _391) + (_392 * _392)) + (_393 * _393));
        float _589 = (cbMatDynParam._m0[5u].x * _583) + cbMatDynParam._m0[5u].y;
        float _3416 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
        float _590 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _594 = (cbMatDynParam._m0[5u].z * _583) + cbMatDynParam._m0[5u].w;
        float _3427 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) - _590)) + _590) < ((_407 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _419 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _420 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _440 = fma(_319, cbSceneParam._m0[5u].z, fma(_318, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _317));
    float _443 = fma(_319, cbSceneParam._m0[6u].z, fma(_318, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _317));
    float _446 = fma(_319, cbSceneParam._m0[7u].z, fma(_318, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _317));
    uint _459 = uint(roundEven(NORMAL.w)) * 13u;
    uint _461 = _459 + 9u;
    uint _462 = _461 + uint(cbMatDynParam._m0[0u].w);
    float _468 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0)))) * cbInstanceData._m0[_462].x;
    float _469 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0)))) * cbInstanceData._m0[_462].y;
    float _470 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0)))) * cbInstanceData._m0[_462].z;
    float _3438 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _471 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
    float _3449 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _472 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    float _3460 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    float _474 = 1.0 - _324;
    float _475 = _471 * _474;
    float _476 = _472 * _474;
    float _477 = _473 * _474;
    float _482 = (_471 + (-0.039999999105930328369140625)) * _324;
    float _483 = (_472 + (-0.039999999105930328369140625)) * _324;
    float _484 = (_473 + (-0.039999999105930328369140625)) * _324;
    float _485 = _482 + 0.039999999105930328369140625;
    float _487 = _483 + 0.039999999105930328369140625;
    float _488 = _484 + 0.039999999105930328369140625;
    vec4 _497 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _419, cbSceneParam._m0[86u].y * _420));
    float _500 = _497.x * TEXCOORD.z;
    float _501 = dot(vec3(_317, _318, _319), vec3(_398, _399, _400));
    float _504 = _501 * 2.0;
    float _508 = (_504 * _317) - _398;
    float _509 = (_504 * _318) - _399;
    float _510 = (_504 * _319) - _400;
    float _514 = abs(dot(vec3(_398, _399, _400), vec3(_317, _318, _319)));
    float _3471 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _516 = sqrt(_320);
    float _529 = exp2((_516 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_516 * 3.0));
    float _535 = (1.0 - _529) * ((_516 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _536 = _529 * _516;
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _568 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _572 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _903;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _628 = fma(_572, cbModelParam._m0[26u].z, fma(_568, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _564));
        float _632 = fma(_572, cbModelParam._m0[27u].z, fma(_568, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _564));
        float _636 = fma(_572, cbModelParam._m0[28u].z, fma(_568, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _564));
        float _661 = _564 + _317;
        float _662 = _568 + _318;
        float _663 = _572 + _319;
        float _673 = fma(_663, cbModelParam._m0[26u].z, fma(_662, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _661)) - _628;
        float _674 = fma(_663, cbModelParam._m0[27u].z, fma(_662, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _661)) - _632;
        float _675 = fma(_663, cbModelParam._m0[28u].z, fma(_662, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _661)) - _636;
        float _679 = inversesqrt(dot(vec3(_673, _674, _675), vec3(_673, _674, _675)));
        float _692 = ((_679 * _673) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_628 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _693 = ((_679 * _674) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_632 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _694 = ((_679 * _675) / cbModelParam._m0[34u].z) + ((((((_636 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        vec4 _718 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        float _731 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _732 = _731 * (_697.x + (-0.5));
        float _733 = _731 * (_697.y + (-0.5));
        float _734 = _731 * (_697.z + (-0.5));
        float _741 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _742 = _741 * (_704.x + (-0.5));
        float _743 = _741 * (_704.y + (-0.5));
        float _744 = _741 * (_704.z + (-0.5));
        float _751 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _752 = _751 * (_711.x + (-0.5));
        float _753 = _751 * (_711.y + (-0.5));
        float _754 = _751 * (_711.z + (-0.5));
        float _761 = exp2((_718.w + (-0.5)) * 20.0) * 2.0;
        float _762 = _761 * (_718.x + (-0.5));
        float _763 = _761 * (_718.y + (-0.5));
        float _764 = _761 * (_718.z + (-0.5));
        float _765 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _766 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _767 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _768 = _732 * 0.5;
        float _769 = _742 * 0.5;
        float _770 = _752 * 0.5;
        float _771 = dot(vec3(_768, _769, _770), vec3(_768, _769, _770));
        float _776 = (_771 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_771);
        float _785 = (dot(vec3(_317, _318, _319), vec3(_776 * _768, _776 * _769, _776 * _770)) + 1.0) * 0.5;
        float _3497 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _795 = sqrt(((_769 * _769) + (_768 * _768)) + (_770 * _770)) / (_765 + 9.9999997473787516355514526367188e-06);
        float _3508 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _797 = _796 * 2.0;
        float _801 = (1.0 - _796) / (_796 + 1.0);
        float _3519 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _811 = ((((1.0 - _802) * (_797 + 2.0)) * exp2(log2(isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * (_797 + 1.0))) + _802) * _765;
        float _812 = _733 * 0.5;
        float _813 = _743 * 0.5;
        float _814 = _753 * 0.5;
        float _815 = dot(vec3(_812, _813, _814), vec3(_812, _813, _814));
        float _820 = (_815 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_815);
        float _828 = (dot(vec3(_317, _318, _319), vec3(_820 * _812, _820 * _813, _820 * _814)) + 1.0) * 0.5;
        float _3530 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _837 = sqrt(((_813 * _813) + (_812 * _812)) + (_814 * _814)) / (_766 + 9.9999997473787516355514526367188e-06);
        float _3541 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _839 = _838 * 2.0;
        float _843 = (1.0 - _838) / (_838 + 1.0);
        float _3552 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _853 = ((((1.0 - _844) * (_839 + 2.0)) * exp2(log2(isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * (_839 + 1.0))) + _844) * _766;
        float _854 = _734 * 0.5;
        float _855 = _744 * 0.5;
        float _856 = _754 * 0.5;
        float _857 = dot(vec3(_854, _855, _856), vec3(_854, _855, _856));
        float _862 = (_857 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_857);
        float _870 = (dot(vec3(_317, _318, _319), vec3(_862 * _854, _862 * _855, _862 * _856)) + 1.0) * 0.5;
        float _3563 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _879 = sqrt(((_855 * _855) + (_854 * _854)) + (_856 * _856)) / (_767 + 9.9999997473787516355514526367188e-06);
        float _3574 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _881 = _880 * 2.0;
        float _885 = (1.0 - _880) / (_880 + 1.0);
        float _3585 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _895 = ((((1.0 - _886) * (_881 + 2.0)) * exp2(log2(isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * (_881 + 1.0))) + _886) * _767;
        _903 = _734;
        _905 = _733;
        _906 = _732;
        _907 = _744;
        _908 = _743;
        _909 = _742;
        _910 = _754;
        _911 = _753;
        _912 = _752;
        _913 = _767;
        _914 = _766;
        _915 = _765;
        _916 = cbModelParam._m0[36u].z * (isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0)));
        _917 = cbModelParam._m0[36u].z * (isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0)));
        _918 = cbModelParam._m0[36u].z * (isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0)));
    }
    else
    {
        _903 = _904;
        _905 = _904;
        _906 = _904;
        _907 = _904;
        _908 = _904;
        _909 = _904;
        _910 = _904;
        _911 = _904;
        _912 = _904;
        _913 = _904;
        _914 = _904;
        _915 = _904;
        _916 = 0.0;
        _917 = 0.0;
        _918 = 0.0;
    }
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _947 = fma(_572, cbModelParam._m0[30u].z, fma(_568, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _564));
        float _951 = fma(_572, cbModelParam._m0[31u].z, fma(_568, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _564));
        float _955 = fma(_572, cbModelParam._m0[32u].z, fma(_568, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _564));
        float _978 = _564 + _317;
        float _979 = _568 + _318;
        float _980 = _572 + _319;
        float _990 = fma(_980, cbModelParam._m0[30u].z, fma(_979, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _978)) - _947;
        float _991 = fma(_980, cbModelParam._m0[31u].z, fma(_979, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _978)) - _951;
        float _992 = fma(_980, cbModelParam._m0[32u].z, fma(_979, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _978)) - _955;
        float _996 = inversesqrt(dot(vec3(_990, _991, _992), vec3(_990, _991, _992)));
        float _1009 = ((_996 * _990) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_947 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1010 = ((_996 * _991) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_951 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1011 = ((_996 * _992) / cbModelParam._m0[35u].z) + ((((((_955 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        float _1046 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1013.x + (-0.5));
        float _1048 = _1046 * (_1013.y + (-0.5));
        float _1049 = _1046 * (_1013.z + (-0.5));
        float _1056 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1020.x + (-0.5));
        float _1058 = _1056 * (_1020.y + (-0.5));
        float _1059 = _1056 * (_1020.z + (-0.5));
        float _1066 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1027.x + (-0.5));
        float _1068 = _1066 * (_1027.y + (-0.5));
        float _1069 = _1066 * (_1027.z + (-0.5));
        float _1076 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1034.x + (-0.5));
        float _1078 = _1076 * (_1034.y + (-0.5));
        float _1079 = _1076 * (_1034.z + (-0.5));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = _1047 * 0.5;
        float _1084 = _1057 * 0.5;
        float _1085 = _1067 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_317, _318, _319), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3648 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_1110 + 1.0))) + _1115) * _1080;
        float _1125 = _1048 * 0.5;
        float _1126 = _1058 * 0.5;
        float _1127 = _1068 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_317, _318, _319), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3659 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3670 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3681 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_1152 + 1.0))) + _1157) * _1081;
        float _1167 = _1049 * 0.5;
        float _1168 = _1059 * 0.5;
        float _1169 = _1069 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_317, _318, _319), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3692 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3703 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3714 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_1194 + 1.0))) + _1199) * _1082;
        _1216 = _1049;
        _1217 = _1048;
        _1218 = _1047;
        _1219 = _1059;
        _1220 = _1058;
        _1221 = _1057;
        _1222 = _1069;
        _1223 = _1068;
        _1224 = _1067;
        _1225 = _1082;
        _1226 = _1081;
        _1227 = _1080;
        _1228 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1229 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
        _1230 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
    }
    else
    {
        _1216 = _904;
        _1217 = _904;
        _1218 = _904;
        _1219 = _904;
        _1220 = _904;
        _1221 = _904;
        _1222 = _904;
        _1223 = _904;
        _1224 = _904;
        _1225 = _904;
        _1226 = _904;
        _1227 = _904;
        _1228 = 0.0;
        _1229 = 0.0;
        _1230 = 0.0;
    }
    float _1240 = (cbModelParam._m0[1u].x * (_1228 - _916)) + _916;
    float _1241 = (cbModelParam._m0[1u].x * (_1229 - _917)) + _917;
    float _1242 = (cbModelParam._m0[1u].x * (_1230 - _918)) + _918;
    float _1263 = fma(_1242, cbSceneParam._m0[89u].z, fma(_1241, cbSceneParam._m0[89u].y, _1240 * cbSceneParam._m0[89u].x));
    float _1266 = fma(_1242, cbSceneParam._m0[90u].z, fma(_1241, cbSceneParam._m0[90u].y, _1240 * cbSceneParam._m0[90u].x));
    float _1269 = fma(_1242, cbSceneParam._m0[91u].z, fma(_1241, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1240));
    float _1284 = _508 * 0.5;
    float _1285 = _509 * 0.5;
    float _1286 = _510 * 0.5;
    float _1287 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_1218, _1221, _1224, _1227));
    float _1290 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_1217, _1220, _1223, _1226));
    float _1293 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_1216, _1219, _1222, _1225));
    float _1327;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1300 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_903, _907, _910, _913));
        float _1304 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_905, _908, _911, _914));
        float _1308 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_906, _909, _912, _915));
        float _1315 = dot(vec4(cbModelParam._m0[39u]), vec4(_1284, _1285, _1286, 1.0));
        _1327 = dot(vec3(isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)), isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1315) ? 0.0 : (isnan(0.0) ? _1315 : max(0.0, _1315))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1327 = 1.0;
    }
    float _1338;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1329 = dot(vec4(cbModelParam._m0[40u]), vec4(_1284, _1285, _1286, 1.0));
        _1338 = dot(vec3(isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)), isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1329) ? 0.0 : (isnan(0.0) ? _1329 : max(0.0, _1329))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1338 = 1.0;
    }
    float _1342 = (_1338 * cbModelParam._m0[1u].x) + (_1327 * (1.0 - cbModelParam._m0[1u].x));
    float _1352 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _320);
    float _1353 = isnan(_1352) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1352 : min(cbModelParam._m0[25u].z, _1352));
    float _1435;
    float _1437;
    float _1439;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1402 = fma(_572, cbModelParam._m0[13u].z, fma(_568, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _564)) + cbModelParam._m0[13u].w;
        float _1406 = fma(_572, cbModelParam._m0[14u].z, fma(_568, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _564)) + cbModelParam._m0[14u].w;
        float _1410 = fma(_572, cbModelParam._m0[15u].z, fma(_568, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _564)) + cbModelParam._m0[15u].w;
        float _1413 = fma(_510, cbModelParam._m0[13u].z, fma(_509, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _508));
        float _1416 = fma(_510, cbModelParam._m0[14u].z, fma(_509, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _508));
        float _1419 = fma(_510, cbModelParam._m0[15u].z, fma(_509, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _508));
        float _1447;
        if (_1413 > 0.0)
        {
            _1447 = abs((1.0 - _1402) / _1413);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1413 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1402 + 1.0) / _1413);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1447 = frontier_phi_17_15_ladder;
        }
        float _1654;
        if (_1416 > 0.0)
        {
            _1654 = abs((1.0 - _1406) / _1416);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1406 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1654 = frontier_phi_26_22_ladder;
        }
        float _1908;
        if (_1419 > 0.0)
        {
            _1908 = abs((1.0 - _1410) / _1419);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1410 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1908 = frontier_phi_38_33_ladder;
        }
        float _1910 = isnan(_1654) ? _1447 : (isnan(_1447) ? _1654 : min(_1447, _1654));
        float _1911 = isnan(_1908) ? _1910 : (isnan(_1910) ? _1908 : min(_1910, _1908));
        float _1915 = (_1911 * _1413) + _1402;
        float _1916 = (_1911 * _1416) + _1406;
        float _1917 = (_1911 * _1419) + _1410;
        float _1918 = _1911 * 9.9999997473787516355514526367188e-05;
        float _1920 = (-1.0) - _1918;
        float _1922 = _1918 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1917 > _1922) || ((_1917 < _1920) || ((_1916 > _1922) || ((_1916 < _1920) || ((_1915 < _1920) || (_1915 > _1922))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2045 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1917, cbModelParam._m0[9u].z, fma(_1916, cbModelParam._m0[9u].y, _1915 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1917, cbModelParam._m0[10u].z, fma(_1916, cbModelParam._m0[10u].y, _1915 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1917, cbModelParam._m0[11u].z, fma(_1916, cbModelParam._m0[11u].y, _1915 * cbModelParam._m0[11u].x))), _1353);
            frontier_phi_16_38_ladder = _2045.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2045.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2045.x * cbModelParam._m0[1u].y;
        }
        _1435 = frontier_phi_16_38_ladder_2;
        _1437 = frontier_phi_16_38_ladder_1;
        _1439 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1423 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_508, _509, _510), _1353);
        _1435 = _1423.x * cbModelParam._m0[1u].y;
        _1437 = _1423.y * cbModelParam._m0[1u].y;
        _1439 = _1423.z * cbModelParam._m0[1u].y;
    }
    float _1443 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _320);
    float _1444 = isnan(_1443) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1443 : min(cbModelParam._m0[25u].w, _1443));
    float _1537;
    float _1539;
    float _1541;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1501 = fma(_572, cbModelParam._m0[21u].z, fma(_568, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _564)) + cbModelParam._m0[21u].w;
        float _1505 = fma(_572, cbModelParam._m0[22u].z, fma(_568, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _564)) + cbModelParam._m0[22u].w;
        float _1509 = fma(_572, cbModelParam._m0[23u].z, fma(_568, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _564)) + cbModelParam._m0[23u].w;
        float _1512 = fma(_510, cbModelParam._m0[21u].z, fma(_509, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _508));
        float _1515 = fma(_510, cbModelParam._m0[22u].z, fma(_509, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _508));
        float _1518 = fma(_510, cbModelParam._m0[23u].z, fma(_509, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _508));
        float _1659;
        if (_1512 > 0.0)
        {
            _1659 = abs((1.0 - _1501) / _1512);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1501 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1659 = frontier_phi_28_24_ladder;
        }
        float _1935;
        if (_1515 > 0.0)
        {
            _1935 = abs((1.0 - _1505) / _1515);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1505 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1935 = frontier_phi_40_35_ladder;
        }
        float _2148;
        if (_1518 > 0.0)
        {
            _2148 = abs((1.0 - _1509) / _1518);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1509 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2148 = frontier_phi_49_46_ladder;
        }
        float _2150 = isnan(_1935) ? _1659 : (isnan(_1659) ? _1935 : min(_1659, _1935));
        float _2151 = isnan(_2148) ? _2150 : (isnan(_2150) ? _2148 : min(_2150, _2148));
        float _2155 = (_2151 * _1512) + _1501;
        float _2156 = (_2151 * _1515) + _1505;
        float _2157 = (_2151 * _1518) + _1509;
        float _2158 = _2151 * 9.9999997473787516355514526367188e-05;
        float _2159 = (-1.0) - _2158;
        float _2161 = _2158 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2157 > _2161) || ((_2157 < _2159) || ((_2156 > _2161) || ((_2156 < _2159) || ((_2155 < _2159) || (_2155 > _2161))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2391 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2157, cbModelParam._m0[17u].z, fma(_2156, cbModelParam._m0[17u].y, _2155 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2157, cbModelParam._m0[18u].z, fma(_2156, cbModelParam._m0[18u].y, _2155 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2157, cbModelParam._m0[19u].z, fma(_2156, cbModelParam._m0[19u].y, _2155 * cbModelParam._m0[19u].x))), _1444);
            frontier_phi_25_49_ladder = _2391.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2391.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2391.x * cbModelParam._m0[1u].z;
        }
        _1537 = frontier_phi_25_49_ladder_2;
        _1539 = frontier_phi_25_49_ladder_1;
        _1541 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1521 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_508, _509, _510), _1444);
        _1537 = _1521.x * cbModelParam._m0[1u].z;
        _1539 = _1521.y * cbModelParam._m0[1u].z;
        _1541 = _1521.z * cbModelParam._m0[1u].z;
    }
    float _1554 = (((_535 * _485) + _536) * _500) * ((cbModelParam._m0[1u].w * (_1537 - _1435)) + _1435);
    float _1556 = (((_535 * _487) + _536) * _500) * ((cbModelParam._m0[1u].w * (_1539 - _1437)) + _1437);
    float _1558 = (((_535 * _488) + _536) * _500) * ((cbModelParam._m0[1u].w * (_1541 - _1439)) + _1439);
    float _1561 = fma(_1558, cbSceneParam._m0[89u].z, fma(_1556, cbSceneParam._m0[89u].y, _1554 * cbSceneParam._m0[89u].x));
    float _1564 = fma(_1558, cbSceneParam._m0[90u].z, fma(_1556, cbSceneParam._m0[90u].y, _1554 * cbSceneParam._m0[90u].x));
    float _1567 = fma(_1558, cbSceneParam._m0[91u].z, fma(_1556, cbSceneParam._m0[91u].y, _1554 * cbSceneParam._m0[91u].x));
    uvec4 _1577 = floatBitsToUint(cbInstanceData._m0[_459 + 5u]);
    uint _1579 = _1577.x * 14u;
    uint _1580 = _1579 + 13u;
    float _1587 = _500 + (-1.0);
    float _1592 = (cbLight._m0[_1580].x * _1587) + 1.0;
    float _1593 = (cbLight._m0[_1580].y * _1587) + 1.0;
    float _1594 = (cbLight._m0[_1580].z * _1587) + 1.0;
    float _1595 = (cbLight._m0[_1580].w * _1587) + 1.0;
    uint _1596 = _1579 + 5u;
    float _1602 = isnan(1.0) ? _1593 : (isnan(_1593) ? 1.0 : min(_1593, 1.0));
    uint _1606 = _1579 + 4u;
    float _1613 = isnan(1.0) ? _1592 : (isnan(_1592) ? 1.0 : min(_1592, 1.0));
    uint _1617 = _1579 | 1u;
    float _1628 = dot(vec3(cbLight._m0[_1579].xyz), vec3(_317, _318, _319));
    float _1631 = dot(vec3(cbLight._m0[_1617].xyz), vec3(_317, _318, _319));
    float _3850 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
    float _3861 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
    float _1636 = (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * 0.3183098733425140380859375;
    float _1638 = (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * 0.3183098733425140380859375;
    float _1645 = ((cbLight._m0[_1596].x * _1602) * _1638) + ((cbLight._m0[_1606].x * _1613) * _1636);
    float _1646 = ((_1602 * cbLight._m0[_1596].y) * _1638) + ((_1613 * cbLight._m0[_1606].y) * _1636);
    float _1647 = ((_1602 * cbLight._m0[_1596].z) * _1638) + ((_1613 * cbLight._m0[_1606].z) * _1636);
    uvec4 _1651 = floatBitsToUint(cbLight._m0[_1579 + 12u]);
    bool _1653 = _1651.x == 0u;
    float _1664;
    float _1666;
    float _1668;
    if (_1653)
    {
        _1664 = _1645;
        _1666 = _1646;
        _1668 = _1647;
    }
    else
    {
        uint _1672 = _1579 + 6u;
        float _1688 = (dot(vec3(cbLight._m0[_1579 + 2u].xyz), vec3(_317, _318, _319)) * 0.5) + 0.5;
        float _1689 = _1688 * _1688;
        float _3872 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1691 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
        _1664 = (((cbLight._m0[_1672].x * 0.3183098733425140380859375) * _1690) * _1691) + _1645;
        _1666 = (((cbLight._m0[_1672].y * 0.3183098733425140380859375) * _1690) * _1691) + _1646;
        _1668 = (((cbLight._m0[_1672].z * 0.3183098733425140380859375) * _1690) * _1691) + _1647;
    }
    bool _1671 = _1651.y == 0u;
    float _1709;
    float _1711;
    float _1713;
    if (_1671)
    {
        _1709 = _1664;
        _1711 = _1666;
        _1713 = _1668;
    }
    else
    {
        uint _1879 = _1579 + 7u;
        float _1895 = (dot(vec3(cbLight._m0[_1579 + 3u].xyz), vec3(_317, _318, _319)) * 0.5) + 0.5;
        float _1896 = _1895 * _1895;
        float _3888 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1897 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1898 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
        _1709 = (((cbLight._m0[_1879].x * 0.3183098733425140380859375) * _1897) * _1898) + _1664;
        _1711 = (((cbLight._m0[_1879].y * 0.3183098733425140380859375) * _1897) * _1898) + _1666;
        _1713 = (((cbLight._m0[_1879].z * 0.3183098733425140380859375) * _1897) * _1898) + _1668;
    }
    uint _1716 = _1579 + 8u;
    float _1729 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1579].w)) * _320) * 0.949999988079071044921875);
    float _1730 = _1729 * _1729;
    float _1731 = cbLight._m0[_1579].x + _398;
    float _1732 = cbLight._m0[_1579].y + _399;
    float _1733 = cbLight._m0[_1579].z + _400;
    float _1737 = inversesqrt(dot(vec3(_1731, _1732, _1733), vec3(_1731, _1732, _1733)));
    float _1738 = _1737 * _1731;
    float _1739 = _1737 * _1732;
    float _1740 = _1737 * _1733;
    float _1741 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_1579].xyz));
    float _3904 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _1744 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _3915 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _1745 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _1746 = dot(vec3(_317, _318, _319), vec3(_1738, _1739, _1740));
    float _3926 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1749 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _1750 = dot(vec3(cbLight._m0[_1579].xyz), vec3(_1738, _1739, _1740));
    float _3937 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1754 = _1730 * _1730;
    float _1758 = ((_1749 * _1749) * (_1754 + (-1.0))) + 1.0;
    float _1766 = exp2(log2(1.0 - (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) * 5.0);
    float _1767 = 0.959999978542327880859375 - _482;
    float _1769 = 0.959999978542327880859375 - _483;
    float _1770 = 0.959999978542327880859375 - _484;
    float _1777 = 1.0 - _1730;
    float _1788 = (0.5 / (((_1745 * ((_1744 * _1777) + _1730)) + 9.9999999392252902907785028219223e-09) + (((_1745 * _1777) + _1730) * _1744))) * _1744;
    float _3948 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1790 = (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1754 / ((_1758 * _1758) * 3.141590118408203125));
    uint _1801 = _1579 + 9u;
    float _1812 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1617].w)) * _320) * 0.949999988079071044921875);
    float _1813 = _1812 * _1812;
    float _1814 = cbLight._m0[_1617].x + _398;
    float _1815 = cbLight._m0[_1617].y + _399;
    float _1816 = cbLight._m0[_1617].z + _400;
    float _1820 = inversesqrt(dot(vec3(_1814, _1815, _1816), vec3(_1814, _1815, _1816)));
    float _1821 = _1820 * _1814;
    float _1822 = _1820 * _1815;
    float _1823 = _1820 * _1816;
    float _1824 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_1617].xyz));
    float _3959 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1827 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _1828 = dot(vec3(_317, _318, _319), vec3(_1821, _1822, _1823));
    float _3970 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1831 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _1832 = dot(vec3(cbLight._m0[_1617].xyz), vec3(_1821, _1822, _1823));
    float _3981 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1836 = _1813 * _1813;
    float _1840 = ((_1831 * _1831) * (_1836 + (-1.0))) + 1.0;
    float _1847 = exp2(log2(1.0 - (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) * 5.0);
    float _1854 = 1.0 - _1813;
    float _1864 = (0.5 / (((_1745 * ((_1827 * _1854) + _1813)) + 9.9999999392252902907785028219223e-09) + (((_1745 * _1854) + _1813) * _1827))) * _1827;
    float _3992 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1866 = (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1836 / ((_1840 * _1840) * 3.141590118408203125));
    float _1876 = (((((_1847 * _1767) + _485) * cbLight._m0[_1801].x) * _1866) * _1602) + (((((_1766 * _1767) + _485) * cbLight._m0[_1716].x) * _1790) * _1613);
    float _1877 = (((((_1847 * _1769) + _487) * cbLight._m0[_1801].y) * _1866) * _1602) + (((((_1766 * _1769) + _487) * cbLight._m0[_1716].y) * _1790) * _1613);
    float _1878 = (((((_1847 * _1770) + _488) * cbLight._m0[_1801].z) * _1866) * _1602) + (((((_1766 * _1770) + _488) * cbLight._m0[_1716].z) * _1790) * _1613);
    float _1940;
    float _1942;
    float _1944;
    if (_1653)
    {
        _1940 = _1876;
        _1942 = _1877;
        _1944 = _1878;
    }
    else
    {
        uint _1946 = _1579 + 2u;
        uint _1950 = _1579 + 10u;
        float _1964 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1946].w)) * _320) * 0.949999988079071044921875);
        float _1965 = _1964 * _1964;
        float _1966 = cbLight._m0[_1946].x + _398;
        float _1967 = cbLight._m0[_1946].y + _399;
        float _1968 = cbLight._m0[_1946].z + _400;
        float _1972 = inversesqrt(dot(vec3(_1966, _1967, _1968), vec3(_1966, _1967, _1968)));
        float _1973 = _1972 * _1966;
        float _1974 = _1972 * _1967;
        float _1975 = _1972 * _1968;
        float _1976 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_1946].xyz));
        float _4003 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1979 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1980 = dot(vec3(_317, _318, _319), vec3(_1973, _1974, _1975));
        float _4014 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1983 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1984 = dot(vec3(cbLight._m0[_1946].xyz), vec3(_1973, _1974, _1975));
        float _4025 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1988 = _1965 * _1965;
        float _1992 = ((_1983 * _1983) * (_1988 + (-1.0))) + 1.0;
        float _1999 = exp2(log2(1.0 - (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * 5.0);
        float _2006 = 1.0 - _1965;
        float _2016 = (0.5 / (((_1745 * ((_1979 * _2006) + _1965)) + 9.9999999392252902907785028219223e-09) + (((_1745 * _2006) + _1965) * _1979))) * _1979;
        float _4036 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2018 = (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1988 / ((_1992 * _1992) * 3.141590118408203125));
        float _2019 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
        _1940 = (((((_1999 * _1767) + _485) * cbLight._m0[_1950].x) * _2018) * _2019) + _1876;
        _1942 = (((((_1999 * _1769) + _487) * cbLight._m0[_1950].y) * _2018) * _2019) + _1877;
        _1944 = (((((_1999 * _1770) + _488) * cbLight._m0[_1950].z) * _2018) * _2019) + _1878;
    }
    float _2054;
    float _2056;
    float _2058;
    if (_1671)
    {
        _2054 = _1940;
        _2056 = _1942;
        _2058 = _1944;
    }
    else
    {
        uint _2065 = _1579 + 3u;
        uint _2069 = _1579 + 11u;
        float _2083 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2065].w)) * _320) * 0.949999988079071044921875);
        float _2084 = _2083 * _2083;
        float _2085 = cbLight._m0[_2065].x + _398;
        float _2086 = cbLight._m0[_2065].y + _399;
        float _2087 = cbLight._m0[_2065].z + _400;
        float _2091 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
        float _2092 = _2091 * _2085;
        float _2093 = _2091 * _2086;
        float _2094 = _2091 * _2087;
        float _2095 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_2065].xyz));
        float _4052 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2098 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _2099 = dot(vec3(_317, _318, _319), vec3(_2092, _2093, _2094));
        float _4063 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2102 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _2103 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_2092, _2093, _2094));
        float _4074 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2107 = _2084 * _2084;
        float _2111 = ((_2102 * _2102) * (_2107 + (-1.0))) + 1.0;
        float _2118 = exp2(log2(1.0 - (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) * 5.0);
        float _2125 = 1.0 - _2084;
        float _2135 = (0.5 / (((_1745 * ((_2098 * _2125) + _2084)) + 9.9999999392252902907785028219223e-09) + (((_1745 * _2125) + _2084) * _2098))) * _2098;
        float _4085 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2137 = (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_2107 / ((_2111 * _2111) * 3.141590118408203125));
        float _2138 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
        _2054 = (((((_2118 * _1767) + _485) * cbLight._m0[_2069].x) * _2137) * _2138) + _1940;
        _2056 = (((((_2118 * _1769) + _487) * cbLight._m0[_2069].y) * _2137) * _2138) + _1942;
        _2058 = (((((_2118 * _1770) + _488) * cbLight._m0[_2069].z) * _2137) * _2138) + _1944;
    }
    float _2273;
    float _2275;
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    if (_1577.y == 0u)
    {
        float _2213 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2214 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2213;
        float _2215 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2213;
        float _2216 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2213;
        uvec4 _2228 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2229 = _2228.x;
        uint _2240 = uint((float(_2228.y) * floor(float(uint(cbSceneParam._m0[85u].y * _420) / _2229))) + floor(float(uint(cbSceneParam._m0[85u].x * _419) / _2229)));
        float _2250 = (log2(_2216 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2251 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        uint _2254 = uint(isnan(14.0) ? _2251 : (isnan(_2251) ? 14.0 : min(_2251, 14.0)));
        uvec4 _2259 = texelFetch(g_lightClusterGridBuffer, int(((_2254 << 2u) + (_2240 << 6u)) >> 2u));
        uint _2260 = _2259.x;
        uint _2261 = _2228.z;
        float _2396;
        float _2398;
        float _2400;
        float _2402;
        float _2404;
        float _2406;
        if (((((1u << ((_2261 >> 4u) & 15u)) + 4294967295u) & _2260) == 0u) || ((_2261 & 240u) == 0u))
        {
            _2396 = 0.0;
            _2398 = 0.0;
            _2400 = 0.0;
            _2402 = 0.0;
            _2404 = 0.0;
            _2406 = 0.0;
        }
        else
        {
            float _2397;
            float _2399;
            float _2401;
            float _2403;
            float _2405;
            float _2407;
            float _2558 = 0.0;
            float _2559 = 0.0;
            float _2560 = 0.0;
            float _2561 = 0.0;
            float _2562 = 0.0;
            float _2563 = 0.0;
            uint _2564 = 0u;
            uint _2573;
            bool _2574;
            for (;;)
            {
                _2573 = texelFetch(g_lightClassification, int((((_2254 << 5u) + (_2240 << 9u)) + (_2564 << 2u)) >> 2u)).x;
                _2574 = _2573 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2574)
                {
                    frontier_phi_66_pred = _2558;
                    frontier_phi_66_pred_1 = _2563;
                    frontier_phi_66_pred_2 = _2562;
                    frontier_phi_66_pred_3 = _2561;
                    frontier_phi_66_pred_4 = _2560;
                    frontier_phi_66_pred_5 = _2559;
                }
                else
                {
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    float _2708;
                    uint _2709;
                    _2703 = _2558;
                    _2704 = _2559;
                    _2705 = _2560;
                    _2706 = _2561;
                    _2707 = _2562;
                    _2708 = _2563;
                    _2709 = _2573;
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    float _2634;
                    float _2635;
                    for (;;)
                    {
                        uint _2713 = uint(findLSB(_2709)) + (_2564 << 5u);
                        uint _2710 = (_2709 + 4294967295u) & _2709;
                        uint _2715 = _2713 * 48u;
                        vec4 _2729 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2715)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 3u)).x));
                        uint _2735 = (_2713 * 48u) + 4u;
                        vec4 _2748 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2735)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 3u)).x));
                        uint _2754 = (_2713 * 48u) + 8u;
                        vec3 _2765 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2754)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 2u)).x));
                        float _2769 = _2729.x - _2214;
                        float _2770 = _2729.y - _2215;
                        float _2771 = _2729.z - _2216;
                        float _2772 = dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771));
                        float _2775 = inversesqrt(_2772);
                        float _2776 = _2775 * _2769;
                        float _2777 = _2775 * _2770;
                        float _2778 = _2775 * _2771;
                        float _2779 = dot(vec3(_440, _443, _446), vec3(_2776, _2777, _2778));
                        float _2784 = 1.0 - (_2772 * _2729.w);
                        float _4111 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
                        float _2785 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                        float _2786 = sqrt(_2772) * _2748.w;
                        float _2789 = 1.39999997615814208984375 / (_2786 + 1.39999997615814208984375);
                        float _2790 = _2789 * _2789;
                        float _2793 = ((1.0 - _2790) * _2779) + _2790;
                        float _2796 = _2786 * _2786;
                        float _2800 = ((isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0))) * _2785) / ((_2796 * 0.699999988079071044921875) + 1.0);
                        float _2804 = (-0.0) - _2214;
                        float _2805 = (-0.0) - _2215;
                        float _2806 = (-0.0) - _2216;
                        float _2810 = inversesqrt(dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806)));
                        float _2811 = _2810 * _2804;
                        float _2812 = _2810 * _2805;
                        float _2813 = _2810 * _2806;
                        float _2821 = exp2(log2(1.0 / ((_2796 * 3.5) + 5.0)) * 0.25);
                        float _2822 = 1.0 - _516;
                        float _2829 = sqrt(1.0 - ((1.0 - (_2822 * _2822)) * (1.0 - (_2821 * _2821))));
                        float _2830 = _2829 * _2829;
                        float _2831 = _2830 * _2830;
                        float _2832 = _2811 + _2776;
                        float _2833 = _2812 + _2777;
                        float _2834 = _2813 + _2778;
                        float _2838 = inversesqrt(dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834)));
                        float _2842 = dot(vec3(_440, _443, _446), vec3(_2811, _2812, _2813));
                        float _4127 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                        float _2845 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                        float _2846 = dot(vec3(_440, _443, _446), vec3(_2838 * _2832, _2838 * _2833, _2838 * _2834));
                        float _4138 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
                        float _2849 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                        float _2853 = ((_2849 * _2849) * (_2831 + (-1.0))) + 1.0;
                        float _2854 = _2789 * _2830;
                        float _2855 = _2854 * _2854;
                        float _2858 = ((1.0 - _2855) * _2779) + _2855;
                        float _4149 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                        float _2859 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                        float _2860 = 1.0 - _2830;
                        float _2870 = (0.5 / (((_2859 * ((_2845 * _2860) + _2830)) + 9.9999999392252902907785028219223e-09) + (((_2859 * _2860) + _2830) * _2845))) * _2859;
                        float _4160 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                        float _2881 = (((_2831 * 3.1415927410125732421875) * (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) / ((_2853 * _2853) * ((_2796 * 2.1991131305694580078125) + 3.141590118408203125))) * _2785;
                        _2633 = (_2800 * _2748.x) + _2706;
                        _2634 = (_2800 * _2748.y) + _2707;
                        _2635 = (_2800 * _2748.z) + _2708;
                        _2630 = (_2881 * _2765.x) + _2703;
                        _2631 = (_2881 * _2765.y) + _2704;
                        _2632 = (_2881 * _2765.z) + _2705;
                        if (_2710 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2703 = _2630;
                            _2704 = _2631;
                            _2705 = _2632;
                            _2706 = _2633;
                            _2707 = _2634;
                            _2708 = _2635;
                            _2709 = _2710;
                        }
                    }
                    frontier_phi_66_pred = _2630;
                    frontier_phi_66_pred_1 = _2635;
                    frontier_phi_66_pred_2 = _2634;
                    frontier_phi_66_pred_3 = _2633;
                    frontier_phi_66_pred_4 = _2632;
                    frontier_phi_66_pred_5 = _2631;
                }
                _2397 = frontier_phi_66_pred;
                _2407 = frontier_phi_66_pred_1;
                _2405 = frontier_phi_66_pred_2;
                _2403 = frontier_phi_66_pred_3;
                _2401 = frontier_phi_66_pred_4;
                _2399 = frontier_phi_66_pred_5;
                uint _2565 = _2564 + 1u;
                if (_2565 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2558 = _2397;
                    _2559 = _2399;
                    _2560 = _2401;
                    _2561 = _2403;
                    _2562 = _2405;
                    _2563 = _2407;
                    _2564 = _2565;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2396 = _2397;
            _2398 = _2399;
            _2400 = _2401;
            _2402 = _2403;
            _2404 = _2405;
            _2406 = _2407;
        }
        uvec4 _2410 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2411 = _2410.z;
        uint _2413 = (_2411 >> 8u) & 15u;
        float _2526;
        float _2528;
        float _2530;
        float _2532;
        float _2534;
        float _2536;
        if (((4294967295u << _2413) & _2260) == 0u)
        {
            _2526 = _2396;
            _2528 = _2398;
            _2530 = _2400;
            _2532 = _2402;
            _2534 = _2404;
            _2536 = _2406;
        }
        else
        {
            float _2551 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
            float _2552 = _2551 * _2214;
            float _2553 = _2551 * _2215;
            float _2554 = _2551 * _2216;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2413 < ((_2411 >> 12u) & 15u))
            {
                float _2527;
                float _2529;
                float _2531;
                float _2533;
                float _2535;
                float _2537;
                float _2686 = _2396;
                float _2687 = _2398;
                float _2688 = _2400;
                float _2689 = _2402;
                float _2690 = _2404;
                float _2691 = _2406;
                uint _2692 = _2413;
                uint _2701;
                bool _2702;
                for (;;)
                {
                    _2701 = texelFetch(g_lightClassification, int((((_2254 << 5u) + (_2240 << 9u)) + (_2692 << 2u)) >> 2u)).x;
                    _2702 = _2701 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2702)
                    {
                        frontier_phi_77_pred = _2691;
                        frontier_phi_77_pred_1 = _2690;
                        frontier_phi_77_pred_2 = _2689;
                        frontier_phi_77_pred_3 = _2688;
                        frontier_phi_77_pred_4 = _2687;
                        frontier_phi_77_pred_5 = _2686;
                    }
                    else
                    {
                        float _2895;
                        float _2896;
                        float _2897;
                        float _2898;
                        float _2899;
                        float _2900;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _2908 = _2686;
                        float _2909 = _2687;
                        float _2910 = _2688;
                        float _2911 = _2689;
                        float _2912 = _2690;
                        float _2913 = _2691;
                        uint _2914 = _2701;
                        uint _2915;
                        vec4 _2940;
                        float _2941;
                        vec4 _2956;
                        vec3 _2968;
                        vec4 _2984;
                        vec4 _3000;
                        float _3047;
                        bool _3048;
                        for (;;)
                        {
                            uint _2925 = ((_2692 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2914));
                            _2915 = (_2914 + 4294967295u) & _2914;
                            uint _2927 = _2925 * 40u;
                            _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            _2941 = _2940.w;
                            uint _2943 = (_2925 * 40u) + 4u;
                            _2956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 3u)).x));
                            uint _2958 = (_2925 * 40u) + 8u;
                            _2968 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x));
                            uint _2971 = (_2925 * 40u) + 16u;
                            _2984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 3u)).x));
                            uint _2987 = (_2925 * 40u) + 20u;
                            _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            uint _3003 = (_2925 * 40u) + 24u;
                            vec4 _3016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 3u)).x));
                            uint _3022 = (_2925 * 40u) + 28u;
                            vec4 _3035 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 3u)).x));
                            _3047 = fma(_2216, _3035.z, fma(_2215, _3035.y, _3035.x * _2214)) + _3035.w;
                            _3048 = !((fma(_2216, _3016.z, fma(_2215, _3016.y, _3016.x * _2214)) + _3016.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3048)
                            {
                                float _3075 = _2940.x - _2214;
                                float _3076 = _2940.y - _2215;
                                float _3077 = _2940.z - _2216;
                                float _3078 = dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077));
                                float _3081 = inversesqrt(_3078);
                                float _3082 = _3081 * _3075;
                                float _3083 = _3081 * _3076;
                                float _3084 = _3081 * _3077;
                                float _3088 = 1.0 - (_3078 / (_2941 * _2941));
                                float _4171 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                                float _3089 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
                                float _3093 = sqrt(_3078) * _2956.w;
                                float _3095 = 1.39999997615814208984375 / (_3093 + 1.39999997615814208984375);
                                float _3096 = _3095 * _3095;
                                float _3099 = ((1.0 - _3096) * dot(vec3(_3082, _3083, _3084), vec3(_440, _443, _446))) + _3096;
                                float _3102 = _3093 * _3093;
                                float _3106 = (fma(_2216, _2984.z, fma(_2215, _2984.y, _2984.x * _2214)) + _2984.w) / _3047;
                                float _3107 = (fma(_2216, _3000.z, fma(_2215, _3000.y, _3000.x * _2214)) + _3000.w) / _3047;
                                float _3111 = 1.0 - dot(vec2(_3106, _3107), vec2(_3106, _3107));
                                float _4187 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3112 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                                float _3113 = _3112 * (((isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0))) * _3089) / ((_3102 * 0.699999988079071044921875) + 1.0));
                                float _3125 = exp2(log2(1.0 / ((_3102 * 3.5) + 5.0)) * 0.25);
                                float _3126 = 1.0 - _516;
                                float _3133 = sqrt(1.0 - ((1.0 - (_3126 * _3126)) * (1.0 - (_3125 * _3125))));
                                float _3134 = _3133 * _3133;
                                float _3135 = _3134 * _3134;
                                float _3136 = _3082 - _2552;
                                float _3137 = _3083 - _2553;
                                float _3138 = _3084 - _2554;
                                float _3142 = inversesqrt(dot(vec3(_3136, _3137, _3138), vec3(_3136, _3137, _3138)));
                                float _3146 = dot(vec3(_440, _443, _446), vec3((-0.0) - _2552, (-0.0) - _2553, (-0.0) - _2554));
                                float _4198 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                                float _3149 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                                float _3150 = dot(vec3(_440, _443, _446), vec3(_3142 * _3136, _3142 * _3137, _3142 * _3138));
                                float _4209 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3153 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                                float _3157 = ((_3153 * _3153) * (_3135 + (-1.0))) + 1.0;
                                float _3158 = _3095 * _3134;
                                float _3159 = _3158 * _3158;
                                float _3165 = ((1.0 - _3159) * dot(vec3(_440, _443, _446), vec3(_3082, _3083, _3084))) + _3159;
                                float _4220 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                                float _3166 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                                float _3167 = 1.0 - _3134;
                                float _3177 = (0.5 / (((_3166 * ((_3149 * _3167) + _3134)) + 9.9999999392252902907785028219223e-09) + (((_3166 * _3167) + _3134) * _3149))) * _3166;
                                float _4231 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                                float _3187 = (_3112 * _3089) * (((_3135 * 3.1415927410125732421875) * (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) / ((_3157 * _3157) * ((_3102 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3113 * _2956.y;
                                frontier_phi_83_pred_1 = _3113 * _2956.x;
                                frontier_phi_83_pred_2 = _3187 * _2968.z;
                                frontier_phi_83_pred_3 = _3187 * _2968.y;
                                frontier_phi_83_pred_4 = _3187 * _2968.x;
                                frontier_phi_83_pred_5 = _3113 * _2956.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3195 = frontier_phi_83_pred;
                            _3194 = frontier_phi_83_pred_1;
                            _3193 = frontier_phi_83_pred_2;
                            _3192 = frontier_phi_83_pred_3;
                            _3191 = frontier_phi_83_pred_4;
                            _3196 = frontier_phi_83_pred_5;
                            _2898 = _3194 + _2911;
                            _2899 = _3195 + _2912;
                            _2900 = _3196 + _2913;
                            _2895 = _3191 + _2908;
                            _2896 = _3192 + _2909;
                            _2897 = _3193 + _2910;
                            if (_2915 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2908 = _2895;
                                _2909 = _2896;
                                _2910 = _2897;
                                _2911 = _2898;
                                _2912 = _2899;
                                _2913 = _2900;
                                _2914 = _2915;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2900;
                        frontier_phi_77_pred_1 = _2899;
                        frontier_phi_77_pred_2 = _2898;
                        frontier_phi_77_pred_3 = _2897;
                        frontier_phi_77_pred_4 = _2896;
                        frontier_phi_77_pred_5 = _2895;
                    }
                    _2537 = frontier_phi_77_pred;
                    _2535 = frontier_phi_77_pred_1;
                    _2533 = frontier_phi_77_pred_2;
                    _2531 = frontier_phi_77_pred_3;
                    _2529 = frontier_phi_77_pred_4;
                    _2527 = frontier_phi_77_pred_5;
                    uint _2693 = _2692 + 1u;
                    if (_2693 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2686 = _2527;
                        _2687 = _2529;
                        _2688 = _2531;
                        _2689 = _2533;
                        _2690 = _2535;
                        _2691 = _2537;
                        _2692 = _2693;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2531;
                frontier_phi_58_59_ladder_1 = _2537;
                frontier_phi_58_59_ladder_2 = _2535;
                frontier_phi_58_59_ladder_3 = _2533;
                frontier_phi_58_59_ladder_4 = _2529;
                frontier_phi_58_59_ladder_5 = _2527;
            }
            else
            {
                frontier_phi_58_59_ladder = _2400;
                frontier_phi_58_59_ladder_1 = _2406;
                frontier_phi_58_59_ladder_2 = _2404;
                frontier_phi_58_59_ladder_3 = _2402;
                frontier_phi_58_59_ladder_4 = _2398;
                frontier_phi_58_59_ladder_5 = _2396;
            }
            _2526 = frontier_phi_58_59_ladder_5;
            _2528 = frontier_phi_58_59_ladder_4;
            _2530 = frontier_phi_58_59_ladder;
            _2532 = frontier_phi_58_59_ladder_3;
            _2534 = frontier_phi_58_59_ladder_2;
            _2536 = frontier_phi_58_59_ladder_1;
        }
        float _2541 = isnan(1.0) ? _500 : (isnan(_500) ? 1.0 : min(_500, 1.0));
        _2273 = (_2541 * _2532) + _1709;
        _2275 = (_2541 * _2534) + _1711;
        _2277 = (_2541 * _2536) + _1713;
        _2279 = ((_2526 * _485) * _2541) + _2054;
        _2281 = ((_2528 * _487) * _2541) + _2056;
        _2283 = ((_2530 * _488) * _2541) + _2058;
    }
    else
    {
        _2273 = _1709;
        _2275 = _1711;
        _2277 = _1713;
        _2279 = _2054;
        _2281 = _2056;
        _2283 = _2058;
    }
    uint _2289 = _461 + uint(cbMatDynParam._m0[0u].w);
    float _2297 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _299.x) * cbInstanceData._m0[_2289].x;
    float _2300 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _299.y) * cbInstanceData._m0[_2289].y;
    float _2303 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _299.z) * cbInstanceData._m0[_2289].z;
    float _4247 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _4258 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _4269 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _2320 = (((isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_2273 + ((isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0))) * _500))) + ((_2279 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _1342)) * cbPerFrame._m0[3u].x)) + _2297;
    float _2322 = (_2300 + ((_2281 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _1342)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_2275 + ((isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0))) * _500)));
    float _2324 = (_2303 + ((_2283 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1342)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2277 + ((isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))) * _500)));
    float _2325 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2326 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2327 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2333 = cbMtdParam._m0[2u].x * _2297;
    float _2334 = cbMtdParam._m0[2u].y * _2300;
    float _2335 = cbMtdParam._m0[2u].z * _2303;
    float _4295 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2337 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    uint _2338 = _459 + 6u;
    float _2346 = _419 / cbSceneParam._m0[86u].x;
    float _2347 = _420 / cbSceneParam._m0[86u].y;
    vec4 _2361 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2346, _2347, (log2((isnan(cbSceneParam._m0[77u].w) ? _340 : (isnan(_340) ? cbSceneParam._m0[77u].w : min(_340, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2363 = _2361.x;
    float _2364 = _2361.y;
    float _2365 = _2361.z;
    float _2366 = _2361.w;
    float _2459;
    float _2461;
    float _2463;
    float _2465;
    if (_340 > cbSceneParam._m0[78u].w)
    {
        float _2421 = isnan(_340) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _340 : min(cbSceneParam._m0[80u].w, _340));
        float _2422 = _2421 / _340;
        float _2433 = _2422 * _391;
        float _2434 = _392 * _2422;
        float _2435 = (-0.0) - _2434;
        float _2437 = _2422 * _393;
        float _2439 = (cbSceneParam._m0[77u].w * _2435) / _2421;
        float _2440 = _2439 + cbSceneParam._m0[79u].w;
        float _2441 = cbSceneParam._m0[79u].w - _2434;
        float _2447 = sqrt(((_2433 * _2433) + (_2434 * _2434)) + (_2437 * _2437));
        float _2450 = (1.0 - (cbSceneParam._m0[77u].w / _2421)) * _2447;
        float _2455 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2457 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2643;
        if (abs((_2435 - _2439) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2643 = ((((_2440 > 0.0) ? exp2(_2455 * _2440) : (2.0 - exp2(_2457 * _2440))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2450;
        }
        else
        {
            float _2587 = 1.0 / cbSceneParam._m0[80u].x;
            float _2588 = isnan(_2441) ? _2440 : (isnan(_2440) ? _2441 : max(_2440, _2441));
            float _2589 = isnan(_2441) ? _2440 : (isnan(_2440) ? _2441 : min(_2440, _2441));
            float _2598 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : min(_2588, 0.0));
            float _2599 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : min(_2589, 0.0));
            _2643 = ((abs(_2447 / _2435) * cbSceneParam._m0[80u].y) * ((((_2598 - _2599) * 2.0) - ((exp2(_2455 * (isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0)))) - exp2(_2455 * (isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0))))) * _2587)) - ((exp2(_2457 * _2598) - exp2(_2457 * _2599)) * _2587))) + (_2450 * cbSceneParam._m0[80u].z);
        }
        vec4 _2645 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2346, _2347, 1.0), 0.0);
        float _2654 = exp2((_2643 * (-1.44269502162933349609375)) * (1.0 - _2645.w));
        float _2655 = log2(_2654);
        float _2671 = log2(_2366);
        _2459 = (exp2(_2671 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2655 * cbSceneParam._m0[78u].x)) * _2645.x) / cbSceneParam._m0[78u].x)) + _2363;
        _2461 = (exp2(_2671 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2655 * cbSceneParam._m0[78u].y)) * _2645.y) / cbSceneParam._m0[78u].y)) + _2364;
        _2463 = (exp2(_2671 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2655 * cbSceneParam._m0[78u].z)) * _2645.z) / cbSceneParam._m0[78u].z)) + _2365;
        _2465 = _2654 * _2366;
    }
    else
    {
        _2459 = _2363;
        _2461 = _2364;
        _2463 = _2365;
        _2465 = _2366;
    }
    bool _2681;
    vec4 _2475;
    vec4 _2497;
    float _2499;
    float _2503;
    float _2504;
    float _2505;
    float _2508;
    float _2511;
    float _2514;
    float _2515;
    bool _2525;
    for (;;)
    {
        _2475 = cbMatDynParam._m0[0u];
        float _2477 = roundEven(_2475.y);
        bool _2478 = _2477 == 3.0;
        float _2479 = log2(_2465);
        float _2483 = exp2(_2479 * cbSceneParam._m0[78u].x);
        float _2484 = exp2(_2479 * cbSceneParam._m0[78u].y);
        float _2485 = exp2(_2479 * cbSceneParam._m0[78u].z);
        float _2486 = _2483 * _2325;
        float _2487 = _2484 * _2326;
        float _2488 = _2485 * _2327;
        float _2495 = _407 + (-0.5);
        _2497 = cbMtdParam._m0[1u];
        _2499 = _2497.y * _2495;
        float _2502 = (_2477 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2503 = _2502 * (_2478 ? _2486 : (_2486 + (cbSceneParam._m0[72u].w * _2459)));
        _2504 = _2502 * (_2478 ? _2487 : (_2487 + (cbSceneParam._m0[72u].w * _2461)));
        _2505 = _2502 * (_2478 ? _2488 : (_2488 + (cbSceneParam._m0[72u].w * _2463)));
        _2508 = ((_2333 * _2337) * _2483) * _2502;
        _2511 = ((_2334 * _2337) * _2484) * _2502;
        _2514 = ((_2335 * _2337) * _2485) * _2502;
        _2515 = _2495 * 0.999000012874603271484375;
        _2525 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2525)
        {
            if ((cbInstanceData._m0[_459 + 7u].x + _2515) < 0.5)
            {
                _2681 = true;
                break;
            }
        }
        uint _2622 = _461 + uint(_2475.w);
        if ((cbInstanceData._m0[_2622].w < 1.0) && ((cbInstanceData._m0[_2622].w + _2515) < 0.5))
        {
            _2681 = true;
            break;
        }
        if ((_2499 + 1.0) < _2497.x)
        {
            _2681 = true;
            break;
        }
        _2681 = false;
        break;
    }
    float _2886;
    if (_2681)
    {
        discard_state = true;
        _2886 = 0.0;
    }
    else
    {
        _2886 = cbInstanceData._m0[_2338].w;
    }
    SV_Target.x = _2503;
    SV_Target.y = _2504;
    SV_Target.z = _2505;
    SV_Target.w = _2886;
    SV_Target_1.x = _2508;
    SV_Target_1.y = _2511;
    SV_Target_1.z = _2514;
    SV_Target_1.w = cbInstanceData._m0[_2338].w;
    discard_exit();
}


