#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _859;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _222 = texture(sampler2D(P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _228 = _222.x * cbMtdParam._m0[9u].x;
    float _229 = _222.y * cbMtdParam._m0[9u].y;
    float _230 = _222.z * cbMtdParam._m0[9u].z;
    vec4 _242 = texture(sampler2D(P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _244 = _242.x;
    vec4 _256 = texture(sampler2D(P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _260 = _256.z;
    float _264 = (_256.x * 2.0) + (-1.0);
    float _266 = (_256.y * 2.0) + (-1.0);
    float _267 = dot(vec2(_264, _266), vec2(_264, _266));
    float _3239 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _273 = sqrt(1.0 - (isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0))));
    vec4 _295 = texture(sampler2D(P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _302 = fma(_273, _192 * NORMAL.x, fma(_266, _199 * TANGENT.x, (_185 * _178) * _264));
    float _305 = fma(_273, _192 * NORMAL.y, fma(_266, _199 * TANGENT.y, (_185 * _179) * _264));
    float _308 = fma(_273, _192 * NORMAL.z, fma(_266, _199 * TANGENT.z, (_185 * _180) * _264));
    float _312 = inversesqrt(dot(vec3(_302, _305, _308), vec3(_302, _305, _308)));
    float _313 = _312 * _302;
    float _314 = _312 * _305;
    float _315 = _312 * _308;
    float _3250 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _316 = isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0));
    float _3261 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3272 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3283 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3294 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _320 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
    float _336 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _377 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _387 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _377);
    float _388 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _377);
    float _389 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _377);
    float _393 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _394 = _387 * _393;
    float _395 = _388 * _393;
    float _396 = _389 * _393;
    float _402 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _403 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _424 = fma(_315, cbSceneParam._m0[5u].z, fma(_314, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _313));
    float _427 = fma(_315, cbSceneParam._m0[6u].z, fma(_314, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _313));
    float _430 = fma(_315, cbSceneParam._m0[7u].z, fma(_314, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _313));
    uint _443 = uint(roundEven(NORMAL.w)) * 13u;
    uint _445 = _443 + 9u;
    uint _446 = _445 + uint(cbMatDynParam._m0[0u].w);
    float _452 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0)))) * cbInstanceData._m0[_446].x;
    float _453 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0)))) * cbInstanceData._m0[_446].y;
    float _454 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0)))) * cbInstanceData._m0[_446].z;
    float _3305 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _455 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
    float _3316 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
    float _3327 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
    float _458 = 1.0 - _320;
    float _459 = _455 * _458;
    float _460 = _456 * _458;
    float _461 = _457 * _458;
    float _466 = (_455 + (-0.039999999105930328369140625)) * _320;
    float _467 = (_456 + (-0.039999999105930328369140625)) * _320;
    float _468 = (_457 + (-0.039999999105930328369140625)) * _320;
    float _469 = _466 + 0.039999999105930328369140625;
    float _471 = _467 + 0.039999999105930328369140625;
    float _472 = _468 + 0.039999999105930328369140625;
    vec4 _481 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _402, cbSceneParam._m0[86u].y * _403));
    float _484 = _481.x * TEXCOORD.z;
    float _485 = dot(vec3(_313, _314, _315), vec3(_394, _395, _396));
    float _488 = _485 * 2.0;
    float _492 = (_488 * _313) - _394;
    float _493 = (_488 * _314) - _395;
    float _494 = (_488 * _315) - _396;
    float _498 = abs(dot(vec3(_394, _395, _396), vec3(_313, _314, _315)));
    float _3338 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _500 = sqrt(_316);
    float _513 = exp2((_500 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_500 * 3.0));
    float _519 = (1.0 - _513) * ((_500 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _520 = _513 * _500;
    float _548 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _552 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _556 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _858;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _583 = fma(_556, cbModelParam._m0[26u].z, fma(_552, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _548));
        float _587 = fma(_556, cbModelParam._m0[27u].z, fma(_552, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _548));
        float _591 = fma(_556, cbModelParam._m0[28u].z, fma(_552, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _548));
        float _616 = _548 + _313;
        float _617 = _552 + _314;
        float _618 = _556 + _315;
        float _628 = fma(_618, cbModelParam._m0[26u].z, fma(_617, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _616)) - _583;
        float _629 = fma(_618, cbModelParam._m0[27u].z, fma(_617, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _616)) - _587;
        float _630 = fma(_618, cbModelParam._m0[28u].z, fma(_617, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _616)) - _591;
        float _634 = inversesqrt(dot(vec3(_628, _629, _630), vec3(_628, _629, _630)));
        float _647 = ((_634 * _628) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_583 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _648 = ((_634 * _629) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_587 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _649 = ((_634 * _630) / cbModelParam._m0[34u].z) + ((((((_591 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _652 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        vec4 _659 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        vec4 _666 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        vec4 _673 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        float _686 = exp2((_652.w + (-0.5)) * 20.0) * 2.0;
        float _687 = _686 * (_652.x + (-0.5));
        float _688 = _686 * (_652.y + (-0.5));
        float _689 = _686 * (_652.z + (-0.5));
        float _696 = exp2((_659.w + (-0.5)) * 20.0) * 2.0;
        float _697 = _696 * (_659.x + (-0.5));
        float _698 = _696 * (_659.y + (-0.5));
        float _699 = _696 * (_659.z + (-0.5));
        float _706 = exp2((_666.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _706 * (_666.x + (-0.5));
        float _708 = _706 * (_666.y + (-0.5));
        float _709 = _706 * (_666.z + (-0.5));
        float _716 = exp2((_673.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_673.x + (-0.5));
        float _718 = _716 * (_673.y + (-0.5));
        float _719 = _716 * (_673.z + (-0.5));
        float _720 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _721 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _722 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _723 = _687 * 0.5;
        float _724 = _697 * 0.5;
        float _725 = _707 * 0.5;
        float _726 = dot(vec3(_723, _724, _725), vec3(_723, _724, _725));
        float _731 = (_726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_726);
        float _740 = (dot(vec3(_313, _314, _315), vec3(_731 * _723, _731 * _724, _731 * _725)) + 1.0) * 0.5;
        float _3364 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _750 = sqrt(((_724 * _724) + (_723 * _723)) + (_725 * _725)) / (_720 + 9.9999997473787516355514526367188e-06);
        float _3375 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
        float _752 = _751 * 2.0;
        float _756 = (1.0 - _751) / (_751 + 1.0);
        float _3386 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _766 = ((((1.0 - _757) * (_752 + 2.0)) * exp2(log2(isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0))) * (_752 + 1.0))) + _757) * _720;
        float _767 = _688 * 0.5;
        float _768 = _698 * 0.5;
        float _769 = _708 * 0.5;
        float _770 = dot(vec3(_767, _768, _769), vec3(_767, _768, _769));
        float _775 = (_770 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_770);
        float _783 = (dot(vec3(_313, _314, _315), vec3(_775 * _767, _775 * _768, _775 * _769)) + 1.0) * 0.5;
        float _3397 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _792 = sqrt(((_768 * _768) + (_767 * _767)) + (_769 * _769)) / (_721 + 9.9999997473787516355514526367188e-06);
        float _3408 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
        float _794 = _793 * 2.0;
        float _798 = (1.0 - _793) / (_793 + 1.0);
        float _3419 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _808 = ((((1.0 - _799) * (_794 + 2.0)) * exp2(log2(isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0))) * (_794 + 1.0))) + _799) * _721;
        float _809 = _689 * 0.5;
        float _810 = _699 * 0.5;
        float _811 = _709 * 0.5;
        float _812 = dot(vec3(_809, _810, _811), vec3(_809, _810, _811));
        float _817 = (_812 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_812);
        float _825 = (dot(vec3(_313, _314, _315), vec3(_817 * _809, _817 * _810, _817 * _811)) + 1.0) * 0.5;
        float _3430 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _834 = sqrt(((_810 * _810) + (_809 * _809)) + (_811 * _811)) / (_722 + 9.9999997473787516355514526367188e-06);
        float _3441 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _836 = _835 * 2.0;
        float _840 = (1.0 - _835) / (_835 + 1.0);
        float _3452 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _850 = ((((1.0 - _841) * (_836 + 2.0)) * exp2(log2(isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))) * (_836 + 1.0))) + _841) * _722;
        _858 = _689;
        _860 = _688;
        _861 = _687;
        _862 = _699;
        _863 = _698;
        _864 = _697;
        _865 = _709;
        _866 = _708;
        _867 = _707;
        _868 = _722;
        _869 = _721;
        _870 = _720;
        _871 = cbModelParam._m0[36u].z * (isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0)));
        _872 = cbModelParam._m0[36u].z * (isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0)));
        _873 = cbModelParam._m0[36u].z * (isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0)));
    }
    else
    {
        _858 = _859;
        _860 = _859;
        _861 = _859;
        _862 = _859;
        _863 = _859;
        _864 = _859;
        _865 = _859;
        _866 = _859;
        _867 = _859;
        _868 = _859;
        _869 = _859;
        _870 = _859;
        _871 = 0.0;
        _872 = 0.0;
        _873 = 0.0;
    }
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _899 = fma(_556, cbModelParam._m0[30u].z, fma(_552, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _548));
        float _903 = fma(_556, cbModelParam._m0[31u].z, fma(_552, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _548));
        float _907 = fma(_556, cbModelParam._m0[32u].z, fma(_552, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _548));
        float _930 = _548 + _313;
        float _931 = _552 + _314;
        float _932 = _556 + _315;
        float _942 = fma(_932, cbModelParam._m0[30u].z, fma(_931, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _930)) - _899;
        float _943 = fma(_932, cbModelParam._m0[31u].z, fma(_931, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _930)) - _903;
        float _944 = fma(_932, cbModelParam._m0[32u].z, fma(_931, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _930)) - _907;
        float _948 = inversesqrt(dot(vec3(_942, _943, _944), vec3(_942, _943, _944)));
        float _961 = ((_948 * _942) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_899 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_948 * _943) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_903 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_948 * _944) / cbModelParam._m0[35u].z) + ((((((_907 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        float _998 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_965.x + (-0.5));
        float _1000 = _998 * (_965.y + (-0.5));
        float _1001 = _998 * (_965.z + (-0.5));
        float _1008 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_972.x + (-0.5));
        float _1010 = _1008 * (_972.y + (-0.5));
        float _1011 = _1008 * (_972.z + (-0.5));
        float _1018 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_979.x + (-0.5));
        float _1020 = _1018 * (_979.y + (-0.5));
        float _1021 = _1018 * (_979.z + (-0.5));
        float _1028 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_986.x + (-0.5));
        float _1030 = _1028 * (_986.y + (-0.5));
        float _1031 = _1028 * (_986.z + (-0.5));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = _999 * 0.5;
        float _1036 = _1009 * 0.5;
        float _1037 = _1019 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1051 = (dot(vec3(_313, _314, _315), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3493 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1060 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3504 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3515 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * (_1062 + 1.0))) + _1067) * _1032;
        float _1077 = _1000 * 0.5;
        float _1078 = _1010 * 0.5;
        float _1079 = _1020 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_313, _314, _315), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3526 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3537 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3548 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * (_1104 + 1.0))) + _1109) * _1033;
        float _1119 = _1001 * 0.5;
        float _1120 = _1011 * 0.5;
        float _1121 = _1021 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_313, _314, _315), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3559 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3570 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3581 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * (_1146 + 1.0))) + _1151) * _1034;
        _1168 = _1001;
        _1169 = _1000;
        _1170 = _999;
        _1171 = _1011;
        _1172 = _1010;
        _1173 = _1009;
        _1174 = _1021;
        _1175 = _1020;
        _1176 = _1019;
        _1177 = _1034;
        _1178 = _1033;
        _1179 = _1032;
        _1180 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
        _1181 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1182 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
    }
    else
    {
        _1168 = _859;
        _1169 = _859;
        _1170 = _859;
        _1171 = _859;
        _1172 = _859;
        _1173 = _859;
        _1174 = _859;
        _1175 = _859;
        _1176 = _859;
        _1177 = _859;
        _1178 = _859;
        _1179 = _859;
        _1180 = 0.0;
        _1181 = 0.0;
        _1182 = 0.0;
    }
    float _1192 = (cbModelParam._m0[1u].x * (_1180 - _871)) + _871;
    float _1193 = (cbModelParam._m0[1u].x * (_1181 - _872)) + _872;
    float _1194 = (cbModelParam._m0[1u].x * (_1182 - _873)) + _873;
    float _1215 = fma(_1194, cbSceneParam._m0[89u].z, fma(_1193, cbSceneParam._m0[89u].y, _1192 * cbSceneParam._m0[89u].x));
    float _1218 = fma(_1194, cbSceneParam._m0[90u].z, fma(_1193, cbSceneParam._m0[90u].y, _1192 * cbSceneParam._m0[90u].x));
    float _1221 = fma(_1194, cbSceneParam._m0[91u].z, fma(_1193, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1192));
    float _1236 = _492 * 0.5;
    float _1237 = _493 * 0.5;
    float _1238 = _494 * 0.5;
    float _1239 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_1170, _1173, _1176, _1179));
    float _1242 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_1169, _1172, _1175, _1178));
    float _1245 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_1168, _1171, _1174, _1177));
    float _1279;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1252 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_858, _862, _865, _868));
        float _1256 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_860, _863, _866, _869));
        float _1260 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_861, _864, _867, _870));
        float _1267 = dot(vec4(cbModelParam._m0[39u]), vec4(_1236, _1237, _1238, 1.0));
        _1279 = dot(vec3(isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)), isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)), isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1267) ? 0.0 : (isnan(0.0) ? _1267 : max(0.0, _1267))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1279 = 1.0;
    }
    float _1290;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1281 = dot(vec4(cbModelParam._m0[40u]), vec4(_1236, _1237, _1238, 1.0));
        _1290 = dot(vec3(isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)), isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1281) ? 0.0 : (isnan(0.0) ? _1281 : max(0.0, _1281))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1290 = 1.0;
    }
    float _1294 = (_1290 * cbModelParam._m0[1u].x) + (_1279 * (1.0 - cbModelParam._m0[1u].x));
    float _1304 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _316);
    float _1305 = isnan(_1304) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1304 : min(cbModelParam._m0[25u].z, _1304));
    float _1387;
    float _1389;
    float _1391;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1354 = fma(_556, cbModelParam._m0[13u].z, fma(_552, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _548)) + cbModelParam._m0[13u].w;
        float _1358 = fma(_556, cbModelParam._m0[14u].z, fma(_552, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _548)) + cbModelParam._m0[14u].w;
        float _1362 = fma(_556, cbModelParam._m0[15u].z, fma(_552, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _548)) + cbModelParam._m0[15u].w;
        float _1365 = fma(_494, cbModelParam._m0[13u].z, fma(_493, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _492));
        float _1368 = fma(_494, cbModelParam._m0[14u].z, fma(_493, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _492));
        float _1371 = fma(_494, cbModelParam._m0[15u].z, fma(_493, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _492));
        float _1399;
        if (_1365 > 0.0)
        {
            _1399 = abs((1.0 - _1354) / _1365);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1365 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1354 + 1.0) / _1365);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1399 = frontier_phi_14_12_ladder;
        }
        float _1606;
        if (_1368 > 0.0)
        {
            _1606 = abs((1.0 - _1358) / _1368);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1368 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1358 + 1.0) / _1368);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1606 = frontier_phi_23_19_ladder;
        }
        float _1860;
        if (_1371 > 0.0)
        {
            _1860 = abs((1.0 - _1362) / _1371);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1371 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1362 + 1.0) / _1371);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1860 = frontier_phi_35_30_ladder;
        }
        float _1862 = isnan(_1606) ? _1399 : (isnan(_1399) ? _1606 : min(_1399, _1606));
        float _1863 = isnan(_1860) ? _1862 : (isnan(_1862) ? _1860 : min(_1862, _1860));
        float _1867 = (_1863 * _1365) + _1354;
        float _1868 = (_1863 * _1368) + _1358;
        float _1869 = (_1863 * _1371) + _1362;
        float _1870 = _1863 * 9.9999997473787516355514526367188e-05;
        float _1872 = (-1.0) - _1870;
        float _1874 = _1870 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1869 > _1874) || ((_1869 < _1872) || ((_1868 > _1874) || ((_1868 < _1872) || ((_1867 < _1872) || (_1867 > _1874))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1997 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1869, cbModelParam._m0[9u].z, fma(_1868, cbModelParam._m0[9u].y, _1867 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1869, cbModelParam._m0[10u].z, fma(_1868, cbModelParam._m0[10u].y, _1867 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1869, cbModelParam._m0[11u].z, fma(_1868, cbModelParam._m0[11u].y, _1867 * cbModelParam._m0[11u].x))), _1305);
            frontier_phi_13_35_ladder = _1997.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1997.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1997.x * cbModelParam._m0[1u].y;
        }
        _1387 = frontier_phi_13_35_ladder_2;
        _1389 = frontier_phi_13_35_ladder_1;
        _1391 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1375 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_492, _493, _494), _1305);
        _1387 = _1375.x * cbModelParam._m0[1u].y;
        _1389 = _1375.y * cbModelParam._m0[1u].y;
        _1391 = _1375.z * cbModelParam._m0[1u].y;
    }
    float _1395 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _316);
    float _1396 = isnan(_1395) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1395 : min(cbModelParam._m0[25u].w, _1395));
    float _1489;
    float _1491;
    float _1493;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1453 = fma(_556, cbModelParam._m0[21u].z, fma(_552, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _548)) + cbModelParam._m0[21u].w;
        float _1457 = fma(_556, cbModelParam._m0[22u].z, fma(_552, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _548)) + cbModelParam._m0[22u].w;
        float _1461 = fma(_556, cbModelParam._m0[23u].z, fma(_552, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _548)) + cbModelParam._m0[23u].w;
        float _1464 = fma(_494, cbModelParam._m0[21u].z, fma(_493, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _492));
        float _1467 = fma(_494, cbModelParam._m0[22u].z, fma(_493, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _492));
        float _1470 = fma(_494, cbModelParam._m0[23u].z, fma(_493, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _492));
        float _1611;
        if (_1464 > 0.0)
        {
            _1611 = abs((1.0 - _1453) / _1464);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1453 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1611 = frontier_phi_25_21_ladder;
        }
        float _1887;
        if (_1467 > 0.0)
        {
            _1887 = abs((1.0 - _1457) / _1467);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1457 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1887 = frontier_phi_37_32_ladder;
        }
        float _2100;
        if (_1470 > 0.0)
        {
            _2100 = abs((1.0 - _1461) / _1470);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1461 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2100 = frontier_phi_46_43_ladder;
        }
        float _2102 = isnan(_1887) ? _1611 : (isnan(_1611) ? _1887 : min(_1611, _1887));
        float _2103 = isnan(_2100) ? _2102 : (isnan(_2102) ? _2100 : min(_2102, _2100));
        float _2107 = (_2103 * _1464) + _1453;
        float _2108 = (_2103 * _1467) + _1457;
        float _2109 = (_2103 * _1470) + _1461;
        float _2110 = _2103 * 9.9999997473787516355514526367188e-05;
        float _2111 = (-1.0) - _2110;
        float _2113 = _2110 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2109 > _2113) || ((_2109 < _2111) || ((_2108 > _2113) || ((_2108 < _2111) || ((_2107 < _2111) || (_2107 > _2113))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2343 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2109, cbModelParam._m0[17u].z, fma(_2108, cbModelParam._m0[17u].y, _2107 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2109, cbModelParam._m0[18u].z, fma(_2108, cbModelParam._m0[18u].y, _2107 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2109, cbModelParam._m0[19u].z, fma(_2108, cbModelParam._m0[19u].y, _2107 * cbModelParam._m0[19u].x))), _1396);
            frontier_phi_22_46_ladder = _2343.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2343.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2343.x * cbModelParam._m0[1u].z;
        }
        _1489 = frontier_phi_22_46_ladder_2;
        _1491 = frontier_phi_22_46_ladder_1;
        _1493 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1473 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_492, _493, _494), _1396);
        _1489 = _1473.x * cbModelParam._m0[1u].z;
        _1491 = _1473.y * cbModelParam._m0[1u].z;
        _1493 = _1473.z * cbModelParam._m0[1u].z;
    }
    float _1506 = (((_519 * _469) + _520) * _484) * ((cbModelParam._m0[1u].w * (_1489 - _1387)) + _1387);
    float _1508 = (((_519 * _471) + _520) * _484) * ((cbModelParam._m0[1u].w * (_1491 - _1389)) + _1389);
    float _1510 = (((_519 * _472) + _520) * _484) * ((cbModelParam._m0[1u].w * (_1493 - _1391)) + _1391);
    float _1513 = fma(_1510, cbSceneParam._m0[89u].z, fma(_1508, cbSceneParam._m0[89u].y, _1506 * cbSceneParam._m0[89u].x));
    float _1516 = fma(_1510, cbSceneParam._m0[90u].z, fma(_1508, cbSceneParam._m0[90u].y, _1506 * cbSceneParam._m0[90u].x));
    float _1519 = fma(_1510, cbSceneParam._m0[91u].z, fma(_1508, cbSceneParam._m0[91u].y, _1506 * cbSceneParam._m0[91u].x));
    uvec4 _1529 = floatBitsToUint(cbInstanceData._m0[_443 + 5u]);
    uint _1531 = _1529.x * 14u;
    uint _1532 = _1531 + 13u;
    float _1539 = _484 + (-1.0);
    float _1544 = (cbLight._m0[_1532].x * _1539) + 1.0;
    float _1545 = (cbLight._m0[_1532].y * _1539) + 1.0;
    float _1546 = (cbLight._m0[_1532].z * _1539) + 1.0;
    float _1547 = (cbLight._m0[_1532].w * _1539) + 1.0;
    uint _1548 = _1531 + 5u;
    float _1554 = isnan(1.0) ? _1545 : (isnan(_1545) ? 1.0 : min(_1545, 1.0));
    uint _1558 = _1531 + 4u;
    float _1565 = isnan(1.0) ? _1544 : (isnan(_1544) ? 1.0 : min(_1544, 1.0));
    uint _1569 = _1531 | 1u;
    float _1580 = dot(vec3(cbLight._m0[_1531].xyz), vec3(_313, _314, _315));
    float _1583 = dot(vec3(cbLight._m0[_1569].xyz), vec3(_313, _314, _315));
    float _3717 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
    float _3728 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
    float _1588 = (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * 0.3183098733425140380859375;
    float _1590 = (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * 0.3183098733425140380859375;
    float _1597 = ((cbLight._m0[_1548].x * _1554) * _1590) + ((cbLight._m0[_1558].x * _1565) * _1588);
    float _1598 = ((_1554 * cbLight._m0[_1548].y) * _1590) + ((_1565 * cbLight._m0[_1558].y) * _1588);
    float _1599 = ((_1554 * cbLight._m0[_1548].z) * _1590) + ((_1565 * cbLight._m0[_1558].z) * _1588);
    uvec4 _1603 = floatBitsToUint(cbLight._m0[_1531 + 12u]);
    bool _1605 = _1603.x == 0u;
    float _1616;
    float _1618;
    float _1620;
    if (_1605)
    {
        _1616 = _1597;
        _1618 = _1598;
        _1620 = _1599;
    }
    else
    {
        uint _1624 = _1531 + 6u;
        float _1640 = (dot(vec3(cbLight._m0[_1531 + 2u].xyz), vec3(_313, _314, _315)) * 0.5) + 0.5;
        float _1641 = _1640 * _1640;
        float _3739 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1643 = isnan(1.0) ? _1546 : (isnan(_1546) ? 1.0 : min(_1546, 1.0));
        _1616 = (((cbLight._m0[_1624].x * 0.3183098733425140380859375) * _1642) * _1643) + _1597;
        _1618 = (((cbLight._m0[_1624].y * 0.3183098733425140380859375) * _1642) * _1643) + _1598;
        _1620 = (((cbLight._m0[_1624].z * 0.3183098733425140380859375) * _1642) * _1643) + _1599;
    }
    bool _1623 = _1603.y == 0u;
    float _1661;
    float _1663;
    float _1665;
    if (_1623)
    {
        _1661 = _1616;
        _1663 = _1618;
        _1665 = _1620;
    }
    else
    {
        uint _1831 = _1531 + 7u;
        float _1847 = (dot(vec3(cbLight._m0[_1531 + 3u].xyz), vec3(_313, _314, _315)) * 0.5) + 0.5;
        float _1848 = _1847 * _1847;
        float _3755 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
        float _1849 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1850 = isnan(1.0) ? _1547 : (isnan(_1547) ? 1.0 : min(_1547, 1.0));
        _1661 = (((cbLight._m0[_1831].x * 0.3183098733425140380859375) * _1849) * _1850) + _1616;
        _1663 = (((cbLight._m0[_1831].y * 0.3183098733425140380859375) * _1849) * _1850) + _1618;
        _1665 = (((cbLight._m0[_1831].z * 0.3183098733425140380859375) * _1849) * _1850) + _1620;
    }
    uint _1668 = _1531 + 8u;
    float _1681 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1531].w)) * _316) * 0.949999988079071044921875);
    float _1682 = _1681 * _1681;
    float _1683 = cbLight._m0[_1531].x + _394;
    float _1684 = cbLight._m0[_1531].y + _395;
    float _1685 = cbLight._m0[_1531].z + _396;
    float _1689 = inversesqrt(dot(vec3(_1683, _1684, _1685), vec3(_1683, _1684, _1685)));
    float _1690 = _1689 * _1683;
    float _1691 = _1689 * _1684;
    float _1692 = _1689 * _1685;
    float _1693 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_1531].xyz));
    float _3771 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
    float _1696 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _3782 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _1697 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _1698 = dot(vec3(_313, _314, _315), vec3(_1690, _1691, _1692));
    float _3793 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
    float _1701 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _1702 = dot(vec3(cbLight._m0[_1531].xyz), vec3(_1690, _1691, _1692));
    float _3804 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
    float _1706 = _1682 * _1682;
    float _1710 = ((_1701 * _1701) * (_1706 + (-1.0))) + 1.0;
    float _1718 = exp2(log2(1.0 - (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) * 5.0);
    float _1719 = 0.959999978542327880859375 - _466;
    float _1721 = 0.959999978542327880859375 - _467;
    float _1722 = 0.959999978542327880859375 - _468;
    float _1729 = 1.0 - _1682;
    float _1740 = (0.5 / (((_1697 * ((_1696 * _1729) + _1682)) + 9.9999999392252902907785028219223e-09) + (((_1697 * _1729) + _1682) * _1696))) * _1696;
    float _3815 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1742 = (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_1706 / ((_1710 * _1710) * 3.141590118408203125));
    uint _1753 = _1531 + 9u;
    float _1764 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1569].w)) * _316) * 0.949999988079071044921875);
    float _1765 = _1764 * _1764;
    float _1766 = cbLight._m0[_1569].x + _394;
    float _1767 = cbLight._m0[_1569].y + _395;
    float _1768 = cbLight._m0[_1569].z + _396;
    float _1772 = inversesqrt(dot(vec3(_1766, _1767, _1768), vec3(_1766, _1767, _1768)));
    float _1773 = _1772 * _1766;
    float _1774 = _1772 * _1767;
    float _1775 = _1772 * _1768;
    float _1776 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_1569].xyz));
    float _3826 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1779 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _1780 = dot(vec3(_313, _314, _315), vec3(_1773, _1774, _1775));
    float _3837 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1783 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _1784 = dot(vec3(cbLight._m0[_1569].xyz), vec3(_1773, _1774, _1775));
    float _3848 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1788 = _1765 * _1765;
    float _1792 = ((_1783 * _1783) * (_1788 + (-1.0))) + 1.0;
    float _1799 = exp2(log2(1.0 - (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) * 5.0);
    float _1806 = 1.0 - _1765;
    float _1816 = (0.5 / (((_1697 * ((_1779 * _1806) + _1765)) + 9.9999999392252902907785028219223e-09) + (((_1697 * _1806) + _1765) * _1779))) * _1779;
    float _3859 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _1818 = (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1788 / ((_1792 * _1792) * 3.141590118408203125));
    float _1828 = (((((_1799 * _1719) + _469) * cbLight._m0[_1753].x) * _1818) * _1554) + (((((_1718 * _1719) + _469) * cbLight._m0[_1668].x) * _1742) * _1565);
    float _1829 = (((((_1799 * _1721) + _471) * cbLight._m0[_1753].y) * _1818) * _1554) + (((((_1718 * _1721) + _471) * cbLight._m0[_1668].y) * _1742) * _1565);
    float _1830 = (((((_1799 * _1722) + _472) * cbLight._m0[_1753].z) * _1818) * _1554) + (((((_1718 * _1722) + _472) * cbLight._m0[_1668].z) * _1742) * _1565);
    float _1892;
    float _1894;
    float _1896;
    if (_1605)
    {
        _1892 = _1828;
        _1894 = _1829;
        _1896 = _1830;
    }
    else
    {
        uint _1898 = _1531 + 2u;
        uint _1902 = _1531 + 10u;
        float _1916 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1898].w)) * _316) * 0.949999988079071044921875);
        float _1917 = _1916 * _1916;
        float _1918 = cbLight._m0[_1898].x + _394;
        float _1919 = cbLight._m0[_1898].y + _395;
        float _1920 = cbLight._m0[_1898].z + _396;
        float _1924 = inversesqrt(dot(vec3(_1918, _1919, _1920), vec3(_1918, _1919, _1920)));
        float _1925 = _1924 * _1918;
        float _1926 = _1924 * _1919;
        float _1927 = _1924 * _1920;
        float _1928 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_1898].xyz));
        float _3870 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1931 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1932 = dot(vec3(_313, _314, _315), vec3(_1925, _1926, _1927));
        float _3881 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1935 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1936 = dot(vec3(cbLight._m0[_1898].xyz), vec3(_1925, _1926, _1927));
        float _3892 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1940 = _1917 * _1917;
        float _1944 = ((_1935 * _1935) * (_1940 + (-1.0))) + 1.0;
        float _1951 = exp2(log2(1.0 - (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * 5.0);
        float _1958 = 1.0 - _1917;
        float _1968 = (0.5 / (((_1697 * ((_1931 * _1958) + _1917)) + 9.9999999392252902907785028219223e-09) + (((_1697 * _1958) + _1917) * _1931))) * _1931;
        float _3903 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        float _1970 = (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1940 / ((_1944 * _1944) * 3.141590118408203125));
        float _1971 = isnan(1.0) ? _1546 : (isnan(_1546) ? 1.0 : min(_1546, 1.0));
        _1892 = (((((_1951 * _1719) + _469) * cbLight._m0[_1902].x) * _1970) * _1971) + _1828;
        _1894 = (((((_1951 * _1721) + _471) * cbLight._m0[_1902].y) * _1970) * _1971) + _1829;
        _1896 = (((((_1951 * _1722) + _472) * cbLight._m0[_1902].z) * _1970) * _1971) + _1830;
    }
    float _2006;
    float _2008;
    float _2010;
    if (_1623)
    {
        _2006 = _1892;
        _2008 = _1894;
        _2010 = _1896;
    }
    else
    {
        uint _2017 = _1531 + 3u;
        uint _2021 = _1531 + 11u;
        float _2035 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2017].w)) * _316) * 0.949999988079071044921875);
        float _2036 = _2035 * _2035;
        float _2037 = cbLight._m0[_2017].x + _394;
        float _2038 = cbLight._m0[_2017].y + _395;
        float _2039 = cbLight._m0[_2017].z + _396;
        float _2043 = inversesqrt(dot(vec3(_2037, _2038, _2039), vec3(_2037, _2038, _2039)));
        float _2044 = _2043 * _2037;
        float _2045 = _2043 * _2038;
        float _2046 = _2043 * _2039;
        float _2047 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_2017].xyz));
        float _3919 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2050 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _2051 = dot(vec3(_313, _314, _315), vec3(_2044, _2045, _2046));
        float _3930 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2054 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _2055 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_2044, _2045, _2046));
        float _3941 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2059 = _2036 * _2036;
        float _2063 = ((_2054 * _2054) * (_2059 + (-1.0))) + 1.0;
        float _2070 = exp2(log2(1.0 - (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) * 5.0);
        float _2077 = 1.0 - _2036;
        float _2087 = (0.5 / (((_1697 * ((_2050 * _2077) + _2036)) + 9.9999999392252902907785028219223e-09) + (((_1697 * _2077) + _2036) * _2050))) * _2050;
        float _3952 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2089 = (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_2059 / ((_2063 * _2063) * 3.141590118408203125));
        float _2090 = isnan(1.0) ? _1547 : (isnan(_1547) ? 1.0 : min(_1547, 1.0));
        _2006 = (((((_2070 * _1719) + _469) * cbLight._m0[_2021].x) * _2089) * _2090) + _1892;
        _2008 = (((((_2070 * _1721) + _471) * cbLight._m0[_2021].y) * _2089) * _2090) + _1894;
        _2010 = (((((_2070 * _1722) + _472) * cbLight._m0[_2021].z) * _2089) * _2090) + _1896;
    }
    float _2225;
    float _2227;
    float _2229;
    float _2231;
    float _2233;
    float _2235;
    if (_1529.y == 0u)
    {
        float _2165 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2166 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2165;
        float _2167 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2165;
        float _2168 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2165;
        uvec4 _2180 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2181 = _2180.x;
        uint _2192 = uint((float(_2180.y) * floor(float(uint(cbSceneParam._m0[85u].y * _403) / _2181))) + floor(float(uint(cbSceneParam._m0[85u].x * _402) / _2181)));
        float _2202 = (log2(_2168 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2203 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        uint _2206 = uint(isnan(14.0) ? _2203 : (isnan(_2203) ? 14.0 : min(_2203, 14.0)));
        uvec4 _2211 = texelFetch(g_lightClusterGridBuffer, int(((_2206 << 2u) + (_2192 << 6u)) >> 2u));
        uint _2212 = _2211.x;
        uint _2213 = _2180.z;
        float _2348;
        float _2350;
        float _2352;
        float _2354;
        float _2356;
        float _2358;
        if (((((1u << ((_2213 >> 4u) & 15u)) + 4294967295u) & _2212) == 0u) || ((_2213 & 240u) == 0u))
        {
            _2348 = 0.0;
            _2350 = 0.0;
            _2352 = 0.0;
            _2354 = 0.0;
            _2356 = 0.0;
            _2358 = 0.0;
        }
        else
        {
            float _2349;
            float _2351;
            float _2353;
            float _2355;
            float _2357;
            float _2359;
            float _2502 = 0.0;
            float _2503 = 0.0;
            float _2504 = 0.0;
            float _2505 = 0.0;
            float _2506 = 0.0;
            float _2507 = 0.0;
            uint _2508 = 0u;
            uint _2517;
            bool _2518;
            for (;;)
            {
                _2517 = texelFetch(g_lightClassification, int((((_2206 << 5u) + (_2192 << 9u)) + (_2508 << 2u)) >> 2u)).x;
                _2518 = _2517 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2518)
                {
                    frontier_phi_61_pred = _2502;
                    frontier_phi_61_pred_1 = _2507;
                    frontier_phi_61_pred_2 = _2506;
                    frontier_phi_61_pred_3 = _2505;
                    frontier_phi_61_pred_4 = _2504;
                    frontier_phi_61_pred_5 = _2503;
                }
                else
                {
                    float _2626;
                    float _2627;
                    float _2628;
                    float _2629;
                    float _2630;
                    float _2631;
                    uint _2632;
                    _2626 = _2502;
                    _2627 = _2503;
                    _2628 = _2504;
                    _2629 = _2505;
                    _2630 = _2506;
                    _2631 = _2507;
                    _2632 = _2517;
                    float _2558;
                    float _2559;
                    float _2560;
                    float _2561;
                    float _2562;
                    float _2563;
                    for (;;)
                    {
                        uint _2636 = uint(findLSB(_2632)) + (_2508 << 5u);
                        uint _2633 = (_2632 + 4294967295u) & _2632;
                        uint _2638 = _2636 * 48u;
                        vec4 _2652 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2638)).x, texelFetch(g_PointLightRenderingBuffer, int(_2638 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2638 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2638 + 3u)).x));
                        uint _2658 = (_2636 * 48u) + 4u;
                        vec4 _2671 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2658)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 3u)).x));
                        uint _2677 = (_2636 * 48u) + 8u;
                        vec3 _2688 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2677)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 2u)).x));
                        float _2692 = _2652.x - _2166;
                        float _2693 = _2652.y - _2167;
                        float _2694 = _2652.z - _2168;
                        float _2695 = dot(vec3(_2692, _2693, _2694), vec3(_2692, _2693, _2694));
                        float _2698 = inversesqrt(_2695);
                        float _2699 = _2698 * _2692;
                        float _2700 = _2698 * _2693;
                        float _2701 = _2698 * _2694;
                        float _2702 = dot(vec3(_424, _427, _430), vec3(_2699, _2700, _2701));
                        float _2707 = 1.0 - (_2695 * _2652.w);
                        float _3978 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
                        float _2708 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
                        float _2709 = sqrt(_2695) * _2671.w;
                        float _2712 = 1.39999997615814208984375 / (_2709 + 1.39999997615814208984375);
                        float _2713 = _2712 * _2712;
                        float _2716 = ((1.0 - _2713) * _2702) + _2713;
                        float _2719 = _2709 * _2709;
                        float _2723 = ((isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0))) * _2708) / ((_2719 * 0.699999988079071044921875) + 1.0);
                        float _2727 = (-0.0) - _2166;
                        float _2728 = (-0.0) - _2167;
                        float _2729 = (-0.0) - _2168;
                        float _2733 = inversesqrt(dot(vec3(_2727, _2728, _2729), vec3(_2727, _2728, _2729)));
                        float _2734 = _2733 * _2727;
                        float _2735 = _2733 * _2728;
                        float _2736 = _2733 * _2729;
                        float _2744 = exp2(log2(1.0 / ((_2719 * 3.5) + 5.0)) * 0.25);
                        float _2745 = 1.0 - _500;
                        float _2752 = sqrt(1.0 - ((1.0 - (_2745 * _2745)) * (1.0 - (_2744 * _2744))));
                        float _2753 = _2752 * _2752;
                        float _2754 = _2753 * _2753;
                        float _2755 = _2734 + _2699;
                        float _2756 = _2735 + _2700;
                        float _2757 = _2736 + _2701;
                        float _2761 = inversesqrt(dot(vec3(_2755, _2756, _2757), vec3(_2755, _2756, _2757)));
                        float _2765 = dot(vec3(_424, _427, _430), vec3(_2734, _2735, _2736));
                        float _3994 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
                        float _2768 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
                        float _2769 = dot(vec3(_424, _427, _430), vec3(_2761 * _2755, _2761 * _2756, _2761 * _2757));
                        float _4005 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
                        float _2772 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
                        float _2776 = ((_2772 * _2772) * (_2754 + (-1.0))) + 1.0;
                        float _2777 = _2712 * _2753;
                        float _2778 = _2777 * _2777;
                        float _2781 = ((1.0 - _2778) * _2702) + _2778;
                        float _4016 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
                        float _2782 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
                        float _2783 = 1.0 - _2753;
                        float _2793 = (0.5 / (((_2782 * ((_2768 * _2783) + _2753)) + 9.9999999392252902907785028219223e-09) + (((_2782 * _2783) + _2753) * _2768))) * _2782;
                        float _4027 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
                        float _2804 = (((_2754 * 3.1415927410125732421875) * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) / ((_2776 * _2776) * ((_2719 * 2.1991131305694580078125) + 3.141590118408203125))) * _2708;
                        _2561 = (_2723 * _2671.x) + _2629;
                        _2562 = (_2723 * _2671.y) + _2630;
                        _2563 = (_2723 * _2671.z) + _2631;
                        _2558 = (_2804 * _2688.x) + _2626;
                        _2559 = (_2804 * _2688.y) + _2627;
                        _2560 = (_2804 * _2688.z) + _2628;
                        if (_2633 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2626 = _2558;
                            _2627 = _2559;
                            _2628 = _2560;
                            _2629 = _2561;
                            _2630 = _2562;
                            _2631 = _2563;
                            _2632 = _2633;
                        }
                    }
                    frontier_phi_61_pred = _2558;
                    frontier_phi_61_pred_1 = _2563;
                    frontier_phi_61_pred_2 = _2562;
                    frontier_phi_61_pred_3 = _2561;
                    frontier_phi_61_pred_4 = _2560;
                    frontier_phi_61_pred_5 = _2559;
                }
                _2349 = frontier_phi_61_pred;
                _2359 = frontier_phi_61_pred_1;
                _2357 = frontier_phi_61_pred_2;
                _2355 = frontier_phi_61_pred_3;
                _2353 = frontier_phi_61_pred_4;
                _2351 = frontier_phi_61_pred_5;
                uint _2509 = _2508 + 1u;
                if (_2509 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2502 = _2349;
                    _2503 = _2351;
                    _2504 = _2353;
                    _2505 = _2355;
                    _2506 = _2357;
                    _2507 = _2359;
                    _2508 = _2509;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2348 = _2349;
            _2350 = _2351;
            _2352 = _2353;
            _2354 = _2355;
            _2356 = _2357;
            _2358 = _2359;
        }
        uvec4 _2362 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2363 = _2362.z;
        uint _2365 = (_2363 >> 8u) & 15u;
        float _2470;
        float _2472;
        float _2474;
        float _2476;
        float _2478;
        float _2480;
        if (((4294967295u << _2365) & _2212) == 0u)
        {
            _2470 = _2348;
            _2472 = _2350;
            _2474 = _2352;
            _2476 = _2354;
            _2478 = _2356;
            _2480 = _2358;
        }
        else
        {
            float _2495 = inversesqrt(dot(vec3(_2166, _2167, _2168), vec3(_2166, _2167, _2168)));
            float _2496 = _2495 * _2166;
            float _2497 = _2495 * _2167;
            float _2498 = _2495 * _2168;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2365 < ((_2363 >> 12u) & 15u))
            {
                float _2471;
                float _2473;
                float _2475;
                float _2477;
                float _2479;
                float _2481;
                float _2609 = _2348;
                float _2610 = _2350;
                float _2611 = _2352;
                float _2612 = _2354;
                float _2613 = _2356;
                float _2614 = _2358;
                uint _2615 = _2365;
                uint _2624;
                bool _2625;
                for (;;)
                {
                    _2624 = texelFetch(g_lightClassification, int((((_2206 << 5u) + (_2192 << 9u)) + (_2615 << 2u)) >> 2u)).x;
                    _2625 = _2624 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2625)
                    {
                        frontier_phi_67_pred = _2612;
                        frontier_phi_67_pred_1 = _2613;
                        frontier_phi_67_pred_2 = _2614;
                        frontier_phi_67_pred_3 = _2611;
                        frontier_phi_67_pred_4 = _2610;
                        frontier_phi_67_pred_5 = _2609;
                    }
                    else
                    {
                        float _2809;
                        float _2810;
                        float _2811;
                        float _2812;
                        float _2813;
                        float _2814;
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _2822 = _2609;
                        float _2823 = _2610;
                        float _2824 = _2611;
                        float _2825 = _2612;
                        float _2826 = _2613;
                        float _2827 = _2614;
                        uint _2828 = _2624;
                        uint _2829;
                        vec4 _2854;
                        float _2855;
                        vec4 _2870;
                        vec3 _2882;
                        vec4 _2898;
                        vec4 _2914;
                        float _2961;
                        bool _2962;
                        for (;;)
                        {
                            uint _2839 = ((_2615 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2828));
                            _2829 = (_2828 + 4294967295u) & _2828;
                            uint _2841 = _2839 * 40u;
                            _2854 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2841)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 3u)).x));
                            _2855 = _2854.w;
                            uint _2857 = (_2839 * 40u) + 4u;
                            _2870 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2857)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 3u)).x));
                            uint _2872 = (_2839 * 40u) + 8u;
                            _2882 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2872)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 2u)).x));
                            uint _2885 = (_2839 * 40u) + 16u;
                            _2898 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 3u)).x));
                            uint _2901 = (_2839 * 40u) + 20u;
                            _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            uint _2917 = (_2839 * 40u) + 24u;
                            vec4 _2930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 3u)).x));
                            uint _2936 = (_2839 * 40u) + 28u;
                            vec4 _2949 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 3u)).x));
                            _2961 = fma(_2168, _2949.z, fma(_2167, _2949.y, _2949.x * _2166)) + _2949.w;
                            _2962 = !((fma(_2168, _2930.z, fma(_2167, _2930.y, _2930.x * _2166)) + _2930.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2962)
                            {
                                float _2989 = _2854.x - _2166;
                                float _2990 = _2854.y - _2167;
                                float _2991 = _2854.z - _2168;
                                float _2992 = dot(vec3(_2989, _2990, _2991), vec3(_2989, _2990, _2991));
                                float _2995 = inversesqrt(_2992);
                                float _2996 = _2995 * _2989;
                                float _2997 = _2995 * _2990;
                                float _2998 = _2995 * _2991;
                                float _3002 = 1.0 - (_2992 / (_2855 * _2855));
                                float _4038 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                                float _3003 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
                                float _3007 = sqrt(_2992) * _2870.w;
                                float _3009 = 1.39999997615814208984375 / (_3007 + 1.39999997615814208984375);
                                float _3010 = _3009 * _3009;
                                float _3013 = ((1.0 - _3010) * dot(vec3(_2996, _2997, _2998), vec3(_424, _427, _430))) + _3010;
                                float _3016 = _3007 * _3007;
                                float _3020 = (fma(_2168, _2898.z, fma(_2167, _2898.y, _2898.x * _2166)) + _2898.w) / _2961;
                                float _3021 = (fma(_2168, _2914.z, fma(_2167, _2914.y, _2914.x * _2166)) + _2914.w) / _2961;
                                float _3025 = 1.0 - dot(vec2(_3020, _3021), vec2(_3020, _3021));
                                float _4054 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                                float _3026 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
                                float _3027 = _3026 * (((isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0))) * _3003) / ((_3016 * 0.699999988079071044921875) + 1.0));
                                float _3039 = exp2(log2(1.0 / ((_3016 * 3.5) + 5.0)) * 0.25);
                                float _3040 = 1.0 - _500;
                                float _3047 = sqrt(1.0 - ((1.0 - (_3040 * _3040)) * (1.0 - (_3039 * _3039))));
                                float _3048 = _3047 * _3047;
                                float _3049 = _3048 * _3048;
                                float _3050 = _2996 - _2496;
                                float _3051 = _2997 - _2497;
                                float _3052 = _2998 - _2498;
                                float _3056 = inversesqrt(dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052)));
                                float _3060 = dot(vec3(_424, _427, _430), vec3((-0.0) - _2496, (-0.0) - _2497, (-0.0) - _2498));
                                float _4065 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                                float _3063 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                                float _3064 = dot(vec3(_424, _427, _430), vec3(_3056 * _3050, _3056 * _3051, _3056 * _3052));
                                float _4076 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                                float _3067 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
                                float _3071 = ((_3067 * _3067) * (_3049 + (-1.0))) + 1.0;
                                float _3072 = _3009 * _3048;
                                float _3073 = _3072 * _3072;
                                float _3079 = ((1.0 - _3073) * dot(vec3(_424, _427, _430), vec3(_2996, _2997, _2998))) + _3073;
                                float _4087 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                                float _3080 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                                float _3081 = 1.0 - _3048;
                                float _3091 = (0.5 / (((_3080 * ((_3063 * _3081) + _3048)) + 9.9999999392252902907785028219223e-09) + (((_3080 * _3081) + _3048) * _3063))) * _3080;
                                float _4098 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                                float _3101 = (_3026 * _3003) * (((_3049 * 3.1415927410125732421875) * (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) / ((_3071 * _3071) * ((_3016 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3101 * _2882.x;
                                frontier_phi_73_pred_1 = _3101 * _2882.y;
                                frontier_phi_73_pred_2 = _3027 * _2870.z;
                                frontier_phi_73_pred_3 = _3027 * _2870.y;
                                frontier_phi_73_pred_4 = _3027 * _2870.x;
                                frontier_phi_73_pred_5 = _3101 * _2882.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3105 = frontier_phi_73_pred;
                            _3106 = frontier_phi_73_pred_1;
                            _3110 = frontier_phi_73_pred_2;
                            _3109 = frontier_phi_73_pred_3;
                            _3108 = frontier_phi_73_pred_4;
                            _3107 = frontier_phi_73_pred_5;
                            _2812 = _3108 + _2825;
                            _2813 = _3109 + _2826;
                            _2814 = _3110 + _2827;
                            _2809 = _3105 + _2822;
                            _2810 = _3106 + _2823;
                            _2811 = _3107 + _2824;
                            if (_2829 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2822 = _2809;
                                _2823 = _2810;
                                _2824 = _2811;
                                _2825 = _2812;
                                _2826 = _2813;
                                _2827 = _2814;
                                _2828 = _2829;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2812;
                        frontier_phi_67_pred_1 = _2813;
                        frontier_phi_67_pred_2 = _2814;
                        frontier_phi_67_pred_3 = _2811;
                        frontier_phi_67_pred_4 = _2810;
                        frontier_phi_67_pred_5 = _2809;
                    }
                    _2477 = frontier_phi_67_pred;
                    _2479 = frontier_phi_67_pred_1;
                    _2481 = frontier_phi_67_pred_2;
                    _2475 = frontier_phi_67_pred_3;
                    _2473 = frontier_phi_67_pred_4;
                    _2471 = frontier_phi_67_pred_5;
                    uint _2616 = _2615 + 1u;
                    if (_2616 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2609 = _2471;
                        _2610 = _2473;
                        _2611 = _2475;
                        _2612 = _2477;
                        _2613 = _2479;
                        _2614 = _2481;
                        _2615 = _2616;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2479;
                frontier_phi_55_56_ladder_1 = _2481;
                frontier_phi_55_56_ladder_2 = _2477;
                frontier_phi_55_56_ladder_3 = _2475;
                frontier_phi_55_56_ladder_4 = _2473;
                frontier_phi_55_56_ladder_5 = _2471;
            }
            else
            {
                frontier_phi_55_56_ladder = _2356;
                frontier_phi_55_56_ladder_1 = _2358;
                frontier_phi_55_56_ladder_2 = _2354;
                frontier_phi_55_56_ladder_3 = _2352;
                frontier_phi_55_56_ladder_4 = _2350;
                frontier_phi_55_56_ladder_5 = _2348;
            }
            _2470 = frontier_phi_55_56_ladder_5;
            _2472 = frontier_phi_55_56_ladder_4;
            _2474 = frontier_phi_55_56_ladder_3;
            _2476 = frontier_phi_55_56_ladder_2;
            _2478 = frontier_phi_55_56_ladder;
            _2480 = frontier_phi_55_56_ladder_1;
        }
        float _2485 = isnan(1.0) ? _484 : (isnan(_484) ? 1.0 : min(_484, 1.0));
        _2225 = (_2485 * _2476) + _1661;
        _2227 = (_2485 * _2478) + _1663;
        _2229 = (_2485 * _2480) + _1665;
        _2231 = ((_2470 * _469) * _2485) + _2006;
        _2233 = ((_2472 * _471) * _2485) + _2008;
        _2235 = ((_2474 * _472) * _2485) + _2010;
    }
    else
    {
        _2225 = _1661;
        _2227 = _1663;
        _2229 = _1665;
        _2231 = _2006;
        _2233 = _2008;
        _2235 = _2010;
    }
    uint _2241 = _445 + uint(cbMatDynParam._m0[0u].w);
    float _2249 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _295.x) * cbInstanceData._m0[_2241].x;
    float _2252 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _295.y) * cbInstanceData._m0[_2241].y;
    float _2255 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _295.z) * cbInstanceData._m0[_2241].z;
    float _4114 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _4125 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _4136 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _2272 = (((isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_2225 + ((isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0))) * _484))) + ((_2231 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _1294)) * cbPerFrame._m0[3u].x)) + _2249;
    float _2274 = (_2252 + ((_2233 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _1294)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_2227 + ((isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))) * _484)));
    float _2276 = (_2255 + ((_2235 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _1294)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_2229 + ((isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))) * _484)));
    float _4162 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2289 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    uint _2290 = _443 + 6u;
    float _2298 = _402 / cbSceneParam._m0[86u].x;
    float _2299 = _403 / cbSceneParam._m0[86u].y;
    vec4 _2313 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2298, _2299, (log2((isnan(cbSceneParam._m0[77u].w) ? _336 : (isnan(_336) ? cbSceneParam._m0[77u].w : min(_336, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2315 = _2313.x;
    float _2316 = _2313.y;
    float _2317 = _2313.z;
    float _2318 = _2313.w;
    float _2411;
    float _2413;
    float _2415;
    float _2417;
    if (_336 > cbSceneParam._m0[78u].w)
    {
        float _2373 = isnan(_336) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _336 : min(cbSceneParam._m0[80u].w, _336));
        float _2374 = _2373 / _336;
        float _2385 = _2374 * _387;
        float _2386 = _388 * _2374;
        float _2387 = (-0.0) - _2386;
        float _2389 = _2374 * _389;
        float _2391 = (cbSceneParam._m0[77u].w * _2387) / _2373;
        float _2392 = _2391 + cbSceneParam._m0[79u].w;
        float _2393 = cbSceneParam._m0[79u].w - _2386;
        float _2399 = sqrt(((_2385 * _2385) + (_2386 * _2386)) + (_2389 * _2389));
        float _2402 = (1.0 - (cbSceneParam._m0[77u].w / _2373)) * _2399;
        float _2407 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2409 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2571;
        if (abs((_2387 - _2391) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2571 = ((((_2392 > 0.0) ? exp2(_2407 * _2392) : (2.0 - exp2(_2409 * _2392))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2402;
        }
        else
        {
            float _2531 = 1.0 / cbSceneParam._m0[80u].x;
            float _2532 = isnan(_2393) ? _2392 : (isnan(_2392) ? _2393 : max(_2392, _2393));
            float _2533 = isnan(_2393) ? _2392 : (isnan(_2392) ? _2393 : min(_2392, _2393));
            float _2542 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : min(_2532, 0.0));
            float _2543 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : min(_2533, 0.0));
            _2571 = ((abs(_2399 / _2387) * cbSceneParam._m0[80u].y) * ((((_2542 - _2543) * 2.0) - ((exp2(_2407 * (isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0)))) - exp2(_2407 * (isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0))))) * _2531)) - ((exp2(_2409 * _2542) - exp2(_2409 * _2543)) * _2531))) + (_2402 * cbSceneParam._m0[80u].z);
        }
        vec4 _2573 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2298, _2299, 1.0), 0.0);
        float _2582 = exp2((_2571 * (-1.44269502162933349609375)) * (1.0 - _2573.w));
        float _2583 = log2(_2582);
        float _2599 = log2(_2318);
        _2411 = (exp2(_2599 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2583 * cbSceneParam._m0[78u].x)) * _2573.x) / cbSceneParam._m0[78u].x)) + _2315;
        _2413 = (exp2(_2599 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2583 * cbSceneParam._m0[78u].y)) * _2573.y) / cbSceneParam._m0[78u].y)) + _2316;
        _2415 = (exp2(_2599 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2583 * cbSceneParam._m0[78u].z)) * _2573.z) / cbSceneParam._m0[78u].z)) + _2317;
        _2417 = _2582 * _2318;
    }
    else
    {
        _2411 = _2315;
        _2413 = _2316;
        _2415 = _2317;
        _2417 = _2318;
    }
    float _2429 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2430 = _2429 == 3.0;
    float _2431 = log2(_2417);
    float _2435 = exp2(_2431 * cbSceneParam._m0[78u].x);
    float _2436 = exp2(_2431 * cbSceneParam._m0[78u].y);
    float _2437 = exp2(_2431 * cbSceneParam._m0[78u].z);
    float _2438 = _2435 * (isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0)));
    float _2439 = _2436 * (isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0)));
    float _2440 = _2437 * (isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0)));
    float _2449 = (_2429 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2449 * (_2430 ? _2438 : (_2438 + (cbSceneParam._m0[72u].w * _2411)));
    SV_Target.y = _2449 * (_2430 ? _2439 : (_2439 + (cbSceneParam._m0[72u].w * _2413)));
    SV_Target.z = _2449 * (_2430 ? _2440 : (_2440 + (cbSceneParam._m0[72u].w * _2415)));
    SV_Target.w = cbInstanceData._m0[_2290].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2249) * _2289) * _2435) * _2449;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2252) * _2289) * _2436) * _2449;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2255) * _2289) * _2437) * _2449;
    SV_Target_1.w = cbInstanceData._m0[_2290].w;
}


