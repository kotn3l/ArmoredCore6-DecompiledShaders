#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _871;
float _3308;
float _3309;
float _3310;
float _3311;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _226 = texture(sampler2D(P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _226.x * cbMtdParam._m0[9u].x;
    float _233 = _226.y * cbMtdParam._m0[9u].y;
    float _234 = _226.z * cbMtdParam._m0[9u].z;
    vec4 _246 = texture(sampler2D(P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _250 = _246.z;
    float _254 = (_246.x * 2.0) + (-1.0);
    float _256 = (_246.y * 2.0) + (-1.0);
    float _257 = dot(vec2(_254, _256), vec2(_254, _256));
    float _3320 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _263 = sqrt(1.0 - (isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0))));
    vec4 _285 = texture(sampler2D(P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _292 = fma(_263, _196 * NORMAL.x, fma(_256, _203 * TANGENT.x, (_189 * _182) * _254));
    float _295 = fma(_263, _196 * NORMAL.y, fma(_256, _203 * TANGENT.y, (_189 * _183) * _254));
    float _298 = fma(_263, _196 * NORMAL.z, fma(_256, _203 * TANGENT.z, (_189 * _184) * _254));
    float _302 = inversesqrt(dot(vec3(_292, _295, _298), vec3(_292, _295, _298)));
    float _303 = _302 * _292;
    float _304 = _302 * _295;
    float _305 = _302 * _298;
    float _3331 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _306 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    float _3342 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3353 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3364 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _325 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _366 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _376 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _366);
    float _377 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _366);
    float _378 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _366);
    float _382 = inversesqrt(dot(vec3(_376, _377, _378), vec3(_376, _377, _378)));
    float _383 = _376 * _382;
    float _384 = _377 * _382;
    float _385 = _378 * _382;
    vec4 _390 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _392 = _390.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _550 = sqrt(((_376 * _376) + (_377 * _377)) + (_378 * _378));
        float _556 = (cbMatDynParam._m0[5u].x * _550) + cbMatDynParam._m0[5u].y;
        float _3375 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
        float _557 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
        float _561 = (cbMatDynParam._m0[5u].z * _550) + cbMatDynParam._m0[5u].w;
        float _3386 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0))) - _557)) + _557) < ((_392 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _404 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _405 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _425 = fma(_305, cbSceneParam._m0[5u].z, fma(_304, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _303));
    float _428 = fma(_305, cbSceneParam._m0[6u].z, fma(_304, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _303));
    float _431 = fma(_305, cbSceneParam._m0[7u].z, fma(_304, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _303));
    uint _444 = uint(roundEven(NORMAL.w)) * 13u;
    uint _446 = _444 + 9u;
    uint _447 = _446 + uint(cbMatDynParam._m0[0u].w);
    float _453 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0)))) * cbInstanceData._m0[_447].x;
    float _454 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0)))) * cbInstanceData._m0[_447].y;
    float _455 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0)))) * cbInstanceData._m0[_447].z;
    float _3397 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    float _3408 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _3419 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    vec4 _467 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _404, cbSceneParam._m0[86u].y * _405));
    float _470 = _467.x * TEXCOORD.z;
    float _471 = dot(vec3(_303, _304, _305), vec3(_383, _384, _385));
    float _474 = _471 * 2.0;
    float _478 = (_474 * _303) - _383;
    float _479 = (_474 * _304) - _384;
    float _480 = (_474 * _305) - _385;
    float _484 = abs(dot(vec3(_383, _384, _385), vec3(_303, _304, _305)));
    float _3430 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _486 = sqrt(_306);
    float _499 = exp2((_486 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_486 * 3.0));
    float _531 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _535 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _870;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _595 = fma(_539, cbModelParam._m0[26u].z, fma(_535, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _531));
        float _599 = fma(_539, cbModelParam._m0[27u].z, fma(_535, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _531));
        float _603 = fma(_539, cbModelParam._m0[28u].z, fma(_535, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _531));
        float _628 = _531 + _303;
        float _629 = _535 + _304;
        float _630 = _539 + _305;
        float _640 = fma(_630, cbModelParam._m0[26u].z, fma(_629, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _628)) - _595;
        float _641 = fma(_630, cbModelParam._m0[27u].z, fma(_629, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _628)) - _599;
        float _642 = fma(_630, cbModelParam._m0[28u].z, fma(_629, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _628)) - _603;
        float _646 = inversesqrt(dot(vec3(_640, _641, _642), vec3(_640, _641, _642)));
        float _659 = ((_646 * _640) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_595 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _660 = ((_646 * _641) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_599 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _661 = ((_646 * _642) / cbModelParam._m0[34u].z) + ((((((_603 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_659, _660, _661), 0.0);
        vec4 _671 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_659, _660, _661), 0.0);
        vec4 _678 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_659, _660, _661), 0.0);
        vec4 _685 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_659, _660, _661), 0.0);
        float _698 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _699 = _698 * (_664.x + (-0.5));
        float _700 = _698 * (_664.y + (-0.5));
        float _701 = _698 * (_664.z + (-0.5));
        float _708 = exp2((_671.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _708 * (_671.x + (-0.5));
        float _710 = _708 * (_671.y + (-0.5));
        float _711 = _708 * (_671.z + (-0.5));
        float _718 = exp2((_678.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_678.x + (-0.5));
        float _720 = _718 * (_678.y + (-0.5));
        float _721 = _718 * (_678.z + (-0.5));
        float _728 = exp2((_685.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_685.x + (-0.5));
        float _730 = _728 * (_685.y + (-0.5));
        float _731 = _728 * (_685.z + (-0.5));
        float _732 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _733 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _734 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _735 = _699 * 0.5;
        float _736 = _709 * 0.5;
        float _737 = _719 * 0.5;
        float _738 = dot(vec3(_735, _736, _737), vec3(_735, _736, _737));
        float _743 = (_738 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_738);
        float _752 = (dot(vec3(_303, _304, _305), vec3(_743 * _735, _743 * _736, _743 * _737)) + 1.0) * 0.5;
        float _3456 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _762 = sqrt(((_736 * _736) + (_735 * _735)) + (_737 * _737)) / (_732 + 9.9999997473787516355514526367188e-06);
        float _3467 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _764 = _763 * 2.0;
        float _768 = (1.0 - _763) / (_763 + 1.0);
        float _3478 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _778 = ((((1.0 - _769) * (_764 + 2.0)) * exp2(log2(isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * (_764 + 1.0))) + _769) * _732;
        float _779 = _700 * 0.5;
        float _780 = _710 * 0.5;
        float _781 = _720 * 0.5;
        float _782 = dot(vec3(_779, _780, _781), vec3(_779, _780, _781));
        float _787 = (_782 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_782);
        float _795 = (dot(vec3(_303, _304, _305), vec3(_787 * _779, _787 * _780, _787 * _781)) + 1.0) * 0.5;
        float _3489 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _804 = sqrt(((_780 * _780) + (_779 * _779)) + (_781 * _781)) / (_733 + 9.9999997473787516355514526367188e-06);
        float _3500 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _806 = _805 * 2.0;
        float _810 = (1.0 - _805) / (_805 + 1.0);
        float _3511 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _820 = ((((1.0 - _811) * (_806 + 2.0)) * exp2(log2(isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * (_806 + 1.0))) + _811) * _733;
        float _821 = _701 * 0.5;
        float _822 = _711 * 0.5;
        float _823 = _721 * 0.5;
        float _824 = dot(vec3(_821, _822, _823), vec3(_821, _822, _823));
        float _829 = (_824 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_824);
        float _837 = (dot(vec3(_303, _304, _305), vec3(_829 * _821, _829 * _822, _829 * _823)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _846 = sqrt(((_822 * _822) + (_821 * _821)) + (_823 * _823)) / (_734 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _848 = _847 * 2.0;
        float _852 = (1.0 - _847) / (_847 + 1.0);
        float _3544 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _862 = ((((1.0 - _853) * (_848 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_848 + 1.0))) + _853) * _734;
        _870 = _701;
        _872 = _700;
        _873 = _699;
        _874 = _711;
        _875 = _710;
        _876 = _709;
        _877 = _721;
        _878 = _720;
        _879 = _719;
        _880 = _734;
        _881 = _733;
        _882 = _732;
        _883 = cbModelParam._m0[36u].z * (isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0)));
        _884 = cbModelParam._m0[36u].z * (isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0)));
        _885 = cbModelParam._m0[36u].z * (isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0)));
    }
    else
    {
        _870 = _871;
        _872 = _871;
        _873 = _871;
        _874 = _871;
        _875 = _871;
        _876 = _871;
        _877 = _871;
        _878 = _871;
        _879 = _871;
        _880 = _871;
        _881 = _871;
        _882 = _871;
        _883 = 0.0;
        _884 = 0.0;
        _885 = 0.0;
    }
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _914 = fma(_539, cbModelParam._m0[30u].z, fma(_535, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _531));
        float _918 = fma(_539, cbModelParam._m0[31u].z, fma(_535, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _531));
        float _922 = fma(_539, cbModelParam._m0[32u].z, fma(_535, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _531));
        float _945 = _531 + _303;
        float _946 = _535 + _304;
        float _947 = _539 + _305;
        float _957 = fma(_947, cbModelParam._m0[30u].z, fma(_946, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _945)) - _914;
        float _958 = fma(_947, cbModelParam._m0[31u].z, fma(_946, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _945)) - _918;
        float _959 = fma(_947, cbModelParam._m0[32u].z, fma(_946, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _945)) - _922;
        float _963 = inversesqrt(dot(vec3(_957, _958, _959), vec3(_957, _958, _959)));
        float _976 = ((_963 * _957) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_914 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _977 = ((_963 * _958) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_918 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _978 = ((_963 * _959) / cbModelParam._m0[35u].z) + ((((((_922 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        float _1013 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_980.x + (-0.5));
        float _1015 = _1013 * (_980.y + (-0.5));
        float _1016 = _1013 * (_980.z + (-0.5));
        float _1023 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_987.x + (-0.5));
        float _1025 = _1023 * (_987.y + (-0.5));
        float _1026 = _1023 * (_987.z + (-0.5));
        float _1033 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_994.x + (-0.5));
        float _1035 = _1033 * (_994.y + (-0.5));
        float _1036 = _1033 * (_994.z + (-0.5));
        float _1043 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1001.x + (-0.5));
        float _1045 = _1043 * (_1001.y + (-0.5));
        float _1046 = _1043 * (_1001.z + (-0.5));
        float _1047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1048 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1049 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1050 = _1014 * 0.5;
        float _1051 = _1024 * 0.5;
        float _1052 = _1034 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1066 = (dot(vec3(_303, _304, _305), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _3585 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1075 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_1047 + 9.9999997473787516355514526367188e-06);
        float _3596 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3607 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * (_1077 + 1.0))) + _1082) * _1047;
        float _1092 = _1015 * 0.5;
        float _1093 = _1025 * 0.5;
        float _1094 = _1035 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1108 = (dot(vec3(_303, _304, _305), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3618 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1117 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1048 + 9.9999997473787516355514526367188e-06);
        float _3629 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _3640 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * (_1119 + 1.0))) + _1124) * _1048;
        float _1134 = _1016 * 0.5;
        float _1135 = _1026 * 0.5;
        float _1136 = _1036 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1150 = (dot(vec3(_303, _304, _305), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _3651 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1159 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1049 + 9.9999997473787516355514526367188e-06);
        float _3662 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _3673 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_1161 + 1.0))) + _1166) * _1049;
        _1183 = _1016;
        _1184 = _1015;
        _1185 = _1014;
        _1186 = _1026;
        _1187 = _1025;
        _1188 = _1024;
        _1189 = _1036;
        _1190 = _1035;
        _1191 = _1034;
        _1192 = _1049;
        _1193 = _1048;
        _1194 = _1047;
        _1195 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
        _1196 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
        _1197 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
    }
    else
    {
        _1183 = _871;
        _1184 = _871;
        _1185 = _871;
        _1186 = _871;
        _1187 = _871;
        _1188 = _871;
        _1189 = _871;
        _1190 = _871;
        _1191 = _871;
        _1192 = _871;
        _1193 = _871;
        _1194 = _871;
        _1195 = 0.0;
        _1196 = 0.0;
        _1197 = 0.0;
    }
    float _1207 = (cbModelParam._m0[1u].x * (_1195 - _883)) + _883;
    float _1208 = (cbModelParam._m0[1u].x * (_1196 - _884)) + _884;
    float _1209 = (cbModelParam._m0[1u].x * (_1197 - _885)) + _885;
    float _1230 = fma(_1209, cbSceneParam._m0[89u].z, fma(_1208, cbSceneParam._m0[89u].y, _1207 * cbSceneParam._m0[89u].x));
    float _1233 = fma(_1209, cbSceneParam._m0[90u].z, fma(_1208, cbSceneParam._m0[90u].y, _1207 * cbSceneParam._m0[90u].x));
    float _1236 = fma(_1209, cbSceneParam._m0[91u].z, fma(_1208, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1207));
    float _1251 = _478 * 0.5;
    float _1252 = _479 * 0.5;
    float _1253 = _480 * 0.5;
    float _1254 = dot(vec4(_1251, _1252, _1253, 1.0), vec4(_1185, _1188, _1191, _1194));
    float _1257 = dot(vec4(_1251, _1252, _1253, 1.0), vec4(_1184, _1187, _1190, _1193));
    float _1260 = dot(vec4(_1251, _1252, _1253, 1.0), vec4(_1183, _1186, _1189, _1192));
    float _1294;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1267 = dot(vec4(_1251, _1252, _1253, 1.0), vec4(_870, _874, _877, _880));
        float _1271 = dot(vec4(_1251, _1252, _1253, 1.0), vec4(_872, _875, _878, _881));
        float _1275 = dot(vec4(_1251, _1252, _1253, 1.0), vec4(_873, _876, _879, _882));
        float _1282 = dot(vec4(cbModelParam._m0[39u]), vec4(_1251, _1252, _1253, 1.0));
        _1294 = dot(vec3(isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)), isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)), isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1282) ? 0.0 : (isnan(0.0) ? _1282 : max(0.0, _1282))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1294 = 1.0;
    }
    float _1305;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1296 = dot(vec4(cbModelParam._m0[40u]), vec4(_1251, _1252, _1253, 1.0));
        _1305 = dot(vec3(isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)), isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)), isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1296) ? 0.0 : (isnan(0.0) ? _1296 : max(0.0, _1296))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1305 = 1.0;
    }
    float _1309 = (_1305 * cbModelParam._m0[1u].x) + (_1294 * (1.0 - cbModelParam._m0[1u].x));
    float _1319 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _306);
    float _1320 = isnan(_1319) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1319 : min(cbModelParam._m0[25u].z, _1319));
    float _1402;
    float _1404;
    float _1406;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1369 = fma(_539, cbModelParam._m0[13u].z, fma(_535, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _531)) + cbModelParam._m0[13u].w;
        float _1373 = fma(_539, cbModelParam._m0[14u].z, fma(_535, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _531)) + cbModelParam._m0[14u].w;
        float _1377 = fma(_539, cbModelParam._m0[15u].z, fma(_535, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _531)) + cbModelParam._m0[15u].w;
        float _1380 = fma(_480, cbModelParam._m0[13u].z, fma(_479, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _478));
        float _1383 = fma(_480, cbModelParam._m0[14u].z, fma(_479, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _478));
        float _1386 = fma(_480, cbModelParam._m0[15u].z, fma(_479, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _478));
        float _1414;
        if (_1380 > 0.0)
        {
            _1414 = abs((1.0 - _1369) / _1380);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1380 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1369 + 1.0) / _1380);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1414 = frontier_phi_17_15_ladder;
        }
        float _1640;
        if (_1383 > 0.0)
        {
            _1640 = abs((1.0 - _1373) / _1383);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1383 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1373 + 1.0) / _1383);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1640 = frontier_phi_26_22_ladder;
        }
        float _1886;
        if (_1386 > 0.0)
        {
            _1886 = abs((1.0 - _1377) / _1386);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1386 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1377 + 1.0) / _1386);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1886 = frontier_phi_38_33_ladder;
        }
        float _1888 = isnan(_1640) ? _1414 : (isnan(_1414) ? _1640 : min(_1414, _1640));
        float _1889 = isnan(_1886) ? _1888 : (isnan(_1888) ? _1886 : min(_1888, _1886));
        float _1893 = (_1889 * _1380) + _1369;
        float _1894 = (_1889 * _1383) + _1373;
        float _1895 = (_1889 * _1386) + _1377;
        float _1896 = _1889 * 9.9999997473787516355514526367188e-05;
        float _1898 = (-1.0) - _1896;
        float _1900 = _1896 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1895 > _1900) || ((_1895 < _1898) || ((_1894 > _1900) || ((_1894 < _1898) || ((_1893 < _1898) || (_1893 > _1900))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2019 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1895, cbModelParam._m0[9u].z, fma(_1894, cbModelParam._m0[9u].y, _1893 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1895, cbModelParam._m0[10u].z, fma(_1894, cbModelParam._m0[10u].y, _1893 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1895, cbModelParam._m0[11u].z, fma(_1894, cbModelParam._m0[11u].y, _1893 * cbModelParam._m0[11u].x))), _1320);
            frontier_phi_16_38_ladder = _2019.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2019.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2019.x * cbModelParam._m0[1u].y;
        }
        _1402 = frontier_phi_16_38_ladder_2;
        _1404 = frontier_phi_16_38_ladder_1;
        _1406 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1390 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_478, _479, _480), _1320);
        _1402 = _1390.x * cbModelParam._m0[1u].y;
        _1404 = _1390.y * cbModelParam._m0[1u].y;
        _1406 = _1390.z * cbModelParam._m0[1u].y;
    }
    float _1410 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _306);
    float _1411 = isnan(_1410) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1410 : min(cbModelParam._m0[25u].w, _1410));
    float _1504;
    float _1506;
    float _1508;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1468 = fma(_539, cbModelParam._m0[21u].z, fma(_535, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _531)) + cbModelParam._m0[21u].w;
        float _1472 = fma(_539, cbModelParam._m0[22u].z, fma(_535, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _531)) + cbModelParam._m0[22u].w;
        float _1476 = fma(_539, cbModelParam._m0[23u].z, fma(_535, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _531)) + cbModelParam._m0[23u].w;
        float _1479 = fma(_480, cbModelParam._m0[21u].z, fma(_479, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _478));
        float _1482 = fma(_480, cbModelParam._m0[22u].z, fma(_479, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _478));
        float _1485 = fma(_480, cbModelParam._m0[23u].z, fma(_479, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _478));
        float _1645;
        if (_1479 > 0.0)
        {
            _1645 = abs((1.0 - _1468) / _1479);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1468 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1645 = frontier_phi_28_24_ladder;
        }
        float _1913;
        if (_1482 > 0.0)
        {
            _1913 = abs((1.0 - _1472) / _1482);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1472 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1913 = frontier_phi_40_35_ladder;
        }
        float _2118;
        if (_1485 > 0.0)
        {
            _2118 = abs((1.0 - _1476) / _1485);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1476 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2118 = frontier_phi_49_46_ladder;
        }
        float _2120 = isnan(_1913) ? _1645 : (isnan(_1645) ? _1913 : min(_1645, _1913));
        float _2121 = isnan(_2118) ? _2120 : (isnan(_2120) ? _2118 : min(_2120, _2118));
        float _2125 = (_2121 * _1479) + _1468;
        float _2126 = (_2121 * _1482) + _1472;
        float _2127 = (_2121 * _1485) + _1476;
        float _2128 = _2121 * 9.9999997473787516355514526367188e-05;
        float _2129 = (-1.0) - _2128;
        float _2131 = _2128 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2127 > _2131) || ((_2127 < _2129) || ((_2126 > _2131) || ((_2126 < _2129) || ((_2125 < _2129) || (_2125 > _2131))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2361 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2127, cbModelParam._m0[17u].z, fma(_2126, cbModelParam._m0[17u].y, _2125 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2127, cbModelParam._m0[18u].z, fma(_2126, cbModelParam._m0[18u].y, _2125 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2127, cbModelParam._m0[19u].z, fma(_2126, cbModelParam._m0[19u].y, _2125 * cbModelParam._m0[19u].x))), _1411);
            frontier_phi_25_49_ladder = _2361.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2361.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2361.x * cbModelParam._m0[1u].z;
        }
        _1504 = frontier_phi_25_49_ladder_2;
        _1506 = frontier_phi_25_49_ladder_1;
        _1508 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1488 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_478, _479, _480), _1411);
        _1504 = _1488.x * cbModelParam._m0[1u].z;
        _1506 = _1488.y * cbModelParam._m0[1u].z;
        _1508 = _1488.z * cbModelParam._m0[1u].z;
    }
    float _1520 = ((((1.0 - _499) * ((_486 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_499 * _486)) * _470;
    float _1521 = _1520 * ((cbModelParam._m0[1u].w * (_1504 - _1402)) + _1402);
    float _1522 = _1520 * ((cbModelParam._m0[1u].w * (_1506 - _1404)) + _1404);
    float _1523 = _1520 * ((cbModelParam._m0[1u].w * (_1508 - _1406)) + _1406);
    float _1526 = fma(_1523, cbSceneParam._m0[89u].z, fma(_1522, cbSceneParam._m0[89u].y, _1521 * cbSceneParam._m0[89u].x));
    float _1529 = fma(_1523, cbSceneParam._m0[90u].z, fma(_1522, cbSceneParam._m0[90u].y, _1521 * cbSceneParam._m0[90u].x));
    float _1532 = fma(_1523, cbSceneParam._m0[91u].z, fma(_1522, cbSceneParam._m0[91u].y, _1521 * cbSceneParam._m0[91u].x));
    vec4 _1540 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_404, _405));
    float _1542 = _1540.w;
    float _1554 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1542);
    float _1555 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1542);
    float _1556 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1542);
    uvec4 _1560 = floatBitsToUint(cbInstanceData._m0[_444 + 5u]);
    uint _1562 = _1560.x * 14u;
    uint _1563 = _1562 + 13u;
    float _1570 = _470 + (-1.0);
    float _1575 = (cbLight._m0[_1563].x * _1570) + 1.0;
    float _1576 = (cbLight._m0[_1563].y * _1570) + 1.0;
    float _1577 = (cbLight._m0[_1563].z * _1570) + 1.0;
    float _1578 = (cbLight._m0[_1563].w * _1570) + 1.0;
    uint _1579 = _1562 + 5u;
    float _1585 = isnan(1.0) ? _1576 : (isnan(_1576) ? 1.0 : min(_1576, 1.0));
    uint _1589 = _1562 + 4u;
    float _1599 = isnan(1.0) ? _1575 : (isnan(_1575) ? 1.0 : min(_1575, 1.0));
    uint _1603 = _1562 | 1u;
    float _1614 = dot(vec3(cbLight._m0[_1562].xyz), vec3(_303, _304, _305));
    float _1617 = dot(vec3(cbLight._m0[_1603].xyz), vec3(_303, _304, _305));
    float _3809 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
    float _3820 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
    float _1622 = (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * 0.3183098733425140380859375;
    float _1624 = (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * 0.3183098733425140380859375;
    float _1631 = ((cbLight._m0[_1579].x * _1585) * _1624) + (((cbLight._m0[_1589].x * _1554) * _1599) * _1622);
    float _1632 = ((_1585 * cbLight._m0[_1579].y) * _1624) + (((cbLight._m0[_1589].y * _1555) * _1599) * _1622);
    float _1633 = ((_1585 * cbLight._m0[_1579].z) * _1624) + (((cbLight._m0[_1589].z * _1556) * _1599) * _1622);
    uvec4 _1637 = floatBitsToUint(cbLight._m0[_1562 + 12u]);
    bool _1639 = _1637.x == 0u;
    float _1650;
    float _1652;
    float _1654;
    if (_1639)
    {
        _1650 = _1631;
        _1652 = _1632;
        _1654 = _1633;
    }
    else
    {
        uint _1658 = _1562 + 6u;
        float _1674 = (dot(vec3(cbLight._m0[_1562 + 2u].xyz), vec3(_303, _304, _305)) * 0.5) + 0.5;
        float _1675 = _1674 * _1674;
        float _3831 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1677 = isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0));
        _1650 = (((cbLight._m0[_1658].x * 0.3183098733425140380859375) * _1676) * _1677) + _1631;
        _1652 = (((cbLight._m0[_1658].y * 0.3183098733425140380859375) * _1676) * _1677) + _1632;
        _1654 = (((cbLight._m0[_1658].z * 0.3183098733425140380859375) * _1676) * _1677) + _1633;
    }
    bool _1657 = _1637.y == 0u;
    float _1695;
    float _1697;
    float _1699;
    if (_1657)
    {
        _1695 = _1650;
        _1697 = _1652;
        _1699 = _1654;
    }
    else
    {
        uint _1857 = _1562 + 7u;
        float _1873 = (dot(vec3(cbLight._m0[_1562 + 3u].xyz), vec3(_303, _304, _305)) * 0.5) + 0.5;
        float _1874 = _1873 * _1873;
        float _3847 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
        float _1875 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1876 = isnan(1.0) ? _1578 : (isnan(_1578) ? 1.0 : min(_1578, 1.0));
        _1695 = (((cbLight._m0[_1857].x * 0.3183098733425140380859375) * _1875) * _1876) + _1650;
        _1697 = (((cbLight._m0[_1857].y * 0.3183098733425140380859375) * _1875) * _1876) + _1652;
        _1699 = (((cbLight._m0[_1857].z * 0.3183098733425140380859375) * _1875) * _1876) + _1654;
    }
    uint _1702 = _1562 + 8u;
    float _1715 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1562].w)) * _306) * 0.949999988079071044921875);
    float _1716 = _1715 * _1715;
    float _1717 = cbLight._m0[_1562].x + _383;
    float _1718 = cbLight._m0[_1562].y + _384;
    float _1719 = cbLight._m0[_1562].z + _385;
    float _1723 = inversesqrt(dot(vec3(_1717, _1718, _1719), vec3(_1717, _1718, _1719)));
    float _1724 = _1723 * _1717;
    float _1725 = _1723 * _1718;
    float _1726 = _1723 * _1719;
    float _1727 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1562].xyz));
    float _3863 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
    float _1730 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _3874 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _1731 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _1732 = dot(vec3(_303, _304, _305), vec3(_1724, _1725, _1726));
    float _3885 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1735 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _1736 = dot(vec3(cbLight._m0[_1562].xyz), vec3(_1724, _1725, _1726));
    float _3896 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1740 = _1716 * _1716;
    float _1744 = ((_1735 * _1735) * (_1740 + (-1.0))) + 1.0;
    float _1755 = (exp2(log2(1.0 - (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1756 = 1.0 - _1716;
    float _1767 = (0.5 / (((_1731 * ((_1730 * _1756) + _1716)) + 9.9999999392252902907785028219223e-09) + (((_1731 * _1756) + _1716) * _1730))) * _1730;
    float _3907 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1769 = (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1740 / ((_1744 * _1744) * 3.141590118408203125));
    uint _1783 = _1562 + 9u;
    float _1794 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1603].w)) * _306) * 0.949999988079071044921875);
    float _1795 = _1794 * _1794;
    float _1796 = cbLight._m0[_1603].x + _383;
    float _1797 = cbLight._m0[_1603].y + _384;
    float _1798 = cbLight._m0[_1603].z + _385;
    float _1802 = inversesqrt(dot(vec3(_1796, _1797, _1798), vec3(_1796, _1797, _1798)));
    float _1803 = _1802 * _1796;
    float _1804 = _1802 * _1797;
    float _1805 = _1802 * _1798;
    float _1806 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1603].xyz));
    float _3918 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1809 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _1810 = dot(vec3(_303, _304, _305), vec3(_1803, _1804, _1805));
    float _3929 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1813 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _1814 = dot(vec3(cbLight._m0[_1603].xyz), vec3(_1803, _1804, _1805));
    float _3940 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1818 = _1795 * _1795;
    float _1822 = ((_1813 * _1813) * (_1818 + (-1.0))) + 1.0;
    float _1831 = (exp2(log2(1.0 - (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1832 = 1.0 - _1795;
    float _1842 = (0.5 / (((_1731 * ((_1809 * _1832) + _1795)) + 9.9999999392252902907785028219223e-09) + (((_1731 * _1832) + _1795) * _1809))) * _1809;
    float _3951 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1844 = (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1818 / ((_1822 * _1822) * 3.141590118408203125));
    float _1854 = (((_1831 * cbLight._m0[_1783].x) * _1844) * _1585) + ((((cbLight._m0[_1702].x * _1554) * _1755) * _1769) * _1599);
    float _1855 = (((_1831 * cbLight._m0[_1783].y) * _1844) * _1585) + ((((cbLight._m0[_1702].y * _1555) * _1755) * _1769) * _1599);
    float _1856 = (((_1831 * cbLight._m0[_1783].z) * _1844) * _1585) + ((((cbLight._m0[_1702].z * _1556) * _1755) * _1769) * _1599);
    float _1918;
    float _1920;
    float _1922;
    if (_1639)
    {
        _1918 = _1854;
        _1920 = _1855;
        _1922 = _1856;
    }
    else
    {
        uint _1924 = _1562 + 2u;
        uint _1928 = _1562 + 10u;
        float _1942 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1924].w)) * _306) * 0.949999988079071044921875);
        float _1943 = _1942 * _1942;
        float _1944 = cbLight._m0[_1924].x + _383;
        float _1945 = cbLight._m0[_1924].y + _384;
        float _1946 = cbLight._m0[_1924].z + _385;
        float _1950 = inversesqrt(dot(vec3(_1944, _1945, _1946), vec3(_1944, _1945, _1946)));
        float _1951 = _1950 * _1944;
        float _1952 = _1950 * _1945;
        float _1953 = _1950 * _1946;
        float _1954 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1924].xyz));
        float _3962 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        float _1957 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1958 = dot(vec3(_303, _304, _305), vec3(_1951, _1952, _1953));
        float _3973 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        float _1961 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1962 = dot(vec3(cbLight._m0[_1924].xyz), vec3(_1951, _1952, _1953));
        float _3984 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        float _1966 = _1943 * _1943;
        float _1970 = ((_1961 * _1961) * (_1966 + (-1.0))) + 1.0;
        float _1979 = (exp2(log2(1.0 - (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1980 = 1.0 - _1943;
        float _1990 = (0.5 / (((_1731 * ((_1957 * _1980) + _1943)) + 9.9999999392252902907785028219223e-09) + (((_1731 * _1980) + _1943) * _1957))) * _1957;
        float _3995 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
        float _1992 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1966 / ((_1970 * _1970) * 3.141590118408203125));
        float _1993 = isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0));
        _1918 = (((_1979 * cbLight._m0[_1928].x) * _1992) * _1993) + _1854;
        _1920 = (((_1979 * cbLight._m0[_1928].y) * _1992) * _1993) + _1855;
        _1922 = (((_1979 * cbLight._m0[_1928].z) * _1992) * _1993) + _1856;
    }
    float _2028;
    float _2030;
    float _2032;
    if (_1657)
    {
        _2028 = _1918;
        _2030 = _1920;
        _2032 = _1922;
    }
    else
    {
        uint _2039 = _1562 + 3u;
        uint _2043 = _1562 + 11u;
        float _2057 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2039].w)) * _306) * 0.949999988079071044921875);
        float _2058 = _2057 * _2057;
        float _2059 = cbLight._m0[_2039].x + _383;
        float _2060 = cbLight._m0[_2039].y + _384;
        float _2061 = cbLight._m0[_2039].z + _385;
        float _2065 = inversesqrt(dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061)));
        float _2066 = _2065 * _2059;
        float _2067 = _2065 * _2060;
        float _2068 = _2065 * _2061;
        float _2069 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_2039].xyz));
        float _4011 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2072 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _2073 = dot(vec3(_303, _304, _305), vec3(_2066, _2067, _2068));
        float _4022 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2076 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _2077 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_2066, _2067, _2068));
        float _4033 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2081 = _2058 * _2058;
        float _2085 = ((_2076 * _2076) * (_2081 + (-1.0))) + 1.0;
        float _2094 = (exp2(log2(1.0 - (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2095 = 1.0 - _2058;
        float _2105 = (0.5 / (((_1731 * ((_2072 * _2095) + _2058)) + 9.9999999392252902907785028219223e-09) + (((_1731 * _2095) + _2058) * _2072))) * _2072;
        float _4044 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2107 = (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_2081 / ((_2085 * _2085) * 3.141590118408203125));
        float _2108 = isnan(1.0) ? _1578 : (isnan(_1578) ? 1.0 : min(_1578, 1.0));
        _2028 = (((_2094 * cbLight._m0[_2043].x) * _2107) * _2108) + _1918;
        _2030 = (((_2094 * cbLight._m0[_2043].y) * _2107) * _2108) + _1920;
        _2032 = (((_2094 * cbLight._m0[_2043].z) * _2107) * _2108) + _1922;
    }
    float _2243;
    float _2245;
    float _2247;
    float _2249;
    float _2251;
    float _2253;
    if (_1560.y == 0u)
    {
        float _2183 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2184 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2183;
        float _2185 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2183;
        float _2186 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2183;
        uvec4 _2198 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2199 = _2198.x;
        uint _2210 = uint((float(_2198.y) * floor(float(uint(cbSceneParam._m0[85u].y * _405) / _2199))) + floor(float(uint(cbSceneParam._m0[85u].x * _404) / _2199)));
        float _2220 = (log2(_2186 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2221 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        uint _2224 = uint(isnan(14.0) ? _2221 : (isnan(_2221) ? 14.0 : min(_2221, 14.0)));
        uvec4 _2229 = texelFetch(g_lightClusterGridBuffer, int(((_2224 << 2u) + (_2210 << 6u)) >> 2u));
        uint _2230 = _2229.x;
        uint _2231 = _2198.z;
        float _2366;
        float _2368;
        float _2370;
        float _2372;
        float _2374;
        float _2376;
        if (((((1u << ((_2231 >> 4u) & 15u)) + 4294967295u) & _2230) == 0u) || ((_2231 & 240u) == 0u))
        {
            _2366 = 0.0;
            _2368 = 0.0;
            _2370 = 0.0;
            _2372 = 0.0;
            _2374 = 0.0;
            _2376 = 0.0;
        }
        else
        {
            float _2367;
            float _2369;
            float _2371;
            float _2373;
            float _2375;
            float _2377;
            float _2528 = 0.0;
            float _2529 = 0.0;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            float _2533 = 0.0;
            uint _2534 = 0u;
            uint _2543;
            bool _2544;
            for (;;)
            {
                _2543 = texelFetch(g_lightClassification, int((((_2224 << 5u) + (_2210 << 9u)) + (_2534 << 2u)) >> 2u)).x;
                _2544 = _2543 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2544)
                {
                    frontier_phi_66_pred = _2528;
                    frontier_phi_66_pred_1 = _2533;
                    frontier_phi_66_pred_2 = _2532;
                    frontier_phi_66_pred_3 = _2531;
                    frontier_phi_66_pred_4 = _2530;
                    frontier_phi_66_pred_5 = _2529;
                }
                else
                {
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    uint _2679;
                    _2673 = _2528;
                    _2674 = _2529;
                    _2675 = _2530;
                    _2676 = _2531;
                    _2677 = _2532;
                    _2678 = _2533;
                    _2679 = _2543;
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    for (;;)
                    {
                        uint _2683 = uint(findLSB(_2679)) + (_2534 << 5u);
                        uint _2680 = (_2679 + 4294967295u) & _2679;
                        uint _2685 = _2683 * 48u;
                        vec4 _2699 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 3u)).x));
                        uint _2705 = (_2683 * 48u) + 4u;
                        vec4 _2718 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2705)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 3u)).x));
                        uint _2724 = (_2683 * 48u) + 8u;
                        vec3 _2735 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2724)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 2u)).x));
                        float _2739 = _2699.x - _2184;
                        float _2740 = _2699.y - _2185;
                        float _2741 = _2699.z - _2186;
                        float _2742 = dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741));
                        float _2745 = inversesqrt(_2742);
                        float _2746 = _2745 * _2739;
                        float _2747 = _2745 * _2740;
                        float _2748 = _2745 * _2741;
                        float _2749 = dot(vec3(_425, _428, _431), vec3(_2746, _2747, _2748));
                        float _2754 = 1.0 - (_2742 * _2699.w);
                        float _4070 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                        float _2755 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                        float _2756 = sqrt(_2742) * _2718.w;
                        float _2759 = 1.39999997615814208984375 / (_2756 + 1.39999997615814208984375);
                        float _2760 = _2759 * _2759;
                        float _2763 = ((1.0 - _2760) * _2749) + _2760;
                        float _2766 = _2756 * _2756;
                        float _2770 = ((isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0))) * _2755) / ((_2766 * 0.699999988079071044921875) + 1.0);
                        float _2774 = (-0.0) - _2184;
                        float _2775 = (-0.0) - _2185;
                        float _2776 = (-0.0) - _2186;
                        float _2780 = inversesqrt(dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776)));
                        float _2781 = _2780 * _2774;
                        float _2782 = _2780 * _2775;
                        float _2783 = _2780 * _2776;
                        float _2791 = exp2(log2(1.0 / ((_2766 * 3.5) + 5.0)) * 0.25);
                        float _2792 = 1.0 - _486;
                        float _2799 = sqrt(1.0 - ((1.0 - (_2792 * _2792)) * (1.0 - (_2791 * _2791))));
                        float _2800 = _2799 * _2799;
                        float _2801 = _2800 * _2800;
                        float _2802 = _2781 + _2746;
                        float _2803 = _2782 + _2747;
                        float _2804 = _2783 + _2748;
                        float _2808 = inversesqrt(dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804)));
                        float _2812 = dot(vec3(_425, _428, _431), vec3(_2781, _2782, _2783));
                        float _4086 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                        float _2815 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
                        float _2816 = dot(vec3(_425, _428, _431), vec3(_2808 * _2802, _2808 * _2803, _2808 * _2804));
                        float _4097 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _2819 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                        float _2823 = ((_2819 * _2819) * (_2801 + (-1.0))) + 1.0;
                        float _2824 = _2759 * _2800;
                        float _2825 = _2824 * _2824;
                        float _2828 = ((1.0 - _2825) * _2749) + _2825;
                        float _4108 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                        float _2829 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                        float _2830 = 1.0 - _2800;
                        float _2840 = (0.5 / (((_2829 * ((_2815 * _2830) + _2800)) + 9.9999999392252902907785028219223e-09) + (((_2829 * _2830) + _2800) * _2815))) * _2829;
                        float _4119 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                        float _2851 = (((_2801 * 3.1415927410125732421875) * (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) / ((_2823 * _2823) * ((_2766 * 2.1991131305694580078125) + 3.141590118408203125))) * _2755;
                        _2603 = (_2770 * _2718.x) + _2676;
                        _2604 = (_2770 * _2718.y) + _2677;
                        _2605 = (_2770 * _2718.z) + _2678;
                        _2600 = (_2851 * _2735.x) + _2673;
                        _2601 = (_2851 * _2735.y) + _2674;
                        _2602 = (_2851 * _2735.z) + _2675;
                        if (_2680 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2673 = _2600;
                            _2674 = _2601;
                            _2675 = _2602;
                            _2676 = _2603;
                            _2677 = _2604;
                            _2678 = _2605;
                            _2679 = _2680;
                        }
                    }
                    frontier_phi_66_pred = _2600;
                    frontier_phi_66_pred_1 = _2605;
                    frontier_phi_66_pred_2 = _2604;
                    frontier_phi_66_pred_3 = _2603;
                    frontier_phi_66_pred_4 = _2602;
                    frontier_phi_66_pred_5 = _2601;
                }
                _2367 = frontier_phi_66_pred;
                _2377 = frontier_phi_66_pred_1;
                _2375 = frontier_phi_66_pred_2;
                _2373 = frontier_phi_66_pred_3;
                _2371 = frontier_phi_66_pred_4;
                _2369 = frontier_phi_66_pred_5;
                uint _2535 = _2534 + 1u;
                if (_2535 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2528 = _2367;
                    _2529 = _2369;
                    _2530 = _2371;
                    _2531 = _2373;
                    _2532 = _2375;
                    _2533 = _2377;
                    _2534 = _2535;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2366 = _2367;
            _2368 = _2369;
            _2370 = _2371;
            _2372 = _2373;
            _2374 = _2375;
            _2376 = _2377;
        }
        uvec4 _2380 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2381 = _2380.z;
        uint _2383 = (_2381 >> 8u) & 15u;
        float _2496;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        if (((4294967295u << _2383) & _2230) == 0u)
        {
            _2496 = _2366;
            _2498 = _2368;
            _2500 = _2370;
            _2502 = _2372;
            _2504 = _2374;
            _2506 = _2376;
        }
        else
        {
            float _2521 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
            float _2522 = _2521 * _2184;
            float _2523 = _2521 * _2185;
            float _2524 = _2521 * _2186;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2383 < ((_2381 >> 12u) & 15u))
            {
                float _2497;
                float _2499;
                float _2501;
                float _2503;
                float _2505;
                float _2507;
                float _2656 = _2366;
                float _2657 = _2368;
                float _2658 = _2370;
                float _2659 = _2372;
                float _2660 = _2374;
                float _2661 = _2376;
                uint _2662 = _2383;
                uint _2671;
                bool _2672;
                for (;;)
                {
                    _2671 = texelFetch(g_lightClassification, int((((_2224 << 5u) + (_2210 << 9u)) + (_2662 << 2u)) >> 2u)).x;
                    _2672 = _2671 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2672)
                    {
                        frontier_phi_77_pred = _2661;
                        frontier_phi_77_pred_1 = _2660;
                        frontier_phi_77_pred_2 = _2659;
                        frontier_phi_77_pred_3 = _2658;
                        frontier_phi_77_pred_4 = _2657;
                        frontier_phi_77_pred_5 = _2656;
                    }
                    else
                    {
                        float _2865;
                        float _2866;
                        float _2867;
                        float _2868;
                        float _2869;
                        float _2870;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _2878 = _2656;
                        float _2879 = _2657;
                        float _2880 = _2658;
                        float _2881 = _2659;
                        float _2882 = _2660;
                        float _2883 = _2661;
                        uint _2884 = _2671;
                        uint _2885;
                        vec4 _2910;
                        float _2911;
                        vec4 _2926;
                        vec3 _2938;
                        vec4 _2954;
                        vec4 _2970;
                        float _3017;
                        bool _3018;
                        for (;;)
                        {
                            uint _2895 = ((_2662 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2884));
                            _2885 = (_2884 + 4294967295u) & _2884;
                            uint _2897 = _2895 * 40u;
                            _2910 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 3u)).x));
                            _2911 = _2910.w;
                            uint _2913 = (_2895 * 40u) + 4u;
                            _2926 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 3u)).x));
                            uint _2928 = (_2895 * 40u) + 8u;
                            _2938 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x));
                            uint _2941 = (_2895 * 40u) + 16u;
                            _2954 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 3u)).x));
                            uint _2957 = (_2895 * 40u) + 20u;
                            _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            uint _2973 = (_2895 * 40u) + 24u;
                            vec4 _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            uint _2992 = (_2895 * 40u) + 28u;
                            vec4 _3005 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 3u)).x));
                            _3017 = fma(_2186, _3005.z, fma(_2185, _3005.y, _3005.x * _2184)) + _3005.w;
                            _3018 = !((fma(_2186, _2986.z, fma(_2185, _2986.y, _2986.x * _2184)) + _2986.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3018)
                            {
                                float _3045 = _2910.x - _2184;
                                float _3046 = _2910.y - _2185;
                                float _3047 = _2910.z - _2186;
                                float _3048 = dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047));
                                float _3051 = inversesqrt(_3048);
                                float _3052 = _3051 * _3045;
                                float _3053 = _3051 * _3046;
                                float _3054 = _3051 * _3047;
                                float _3058 = 1.0 - (_3048 / (_2911 * _2911));
                                float _4130 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                                float _3059 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
                                float _3063 = sqrt(_3048) * _2926.w;
                                float _3065 = 1.39999997615814208984375 / (_3063 + 1.39999997615814208984375);
                                float _3066 = _3065 * _3065;
                                float _3069 = ((1.0 - _3066) * dot(vec3(_3052, _3053, _3054), vec3(_425, _428, _431))) + _3066;
                                float _3072 = _3063 * _3063;
                                float _3076 = (fma(_2186, _2954.z, fma(_2185, _2954.y, _2954.x * _2184)) + _2954.w) / _3017;
                                float _3077 = (fma(_2186, _2970.z, fma(_2185, _2970.y, _2970.x * _2184)) + _2970.w) / _3017;
                                float _3081 = 1.0 - dot(vec2(_3076, _3077), vec2(_3076, _3077));
                                float _4146 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                                float _3082 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
                                float _3083 = _3082 * (((isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0))) * _3059) / ((_3072 * 0.699999988079071044921875) + 1.0));
                                float _3095 = exp2(log2(1.0 / ((_3072 * 3.5) + 5.0)) * 0.25);
                                float _3096 = 1.0 - _486;
                                float _3103 = sqrt(1.0 - ((1.0 - (_3096 * _3096)) * (1.0 - (_3095 * _3095))));
                                float _3104 = _3103 * _3103;
                                float _3105 = _3104 * _3104;
                                float _3106 = _3052 - _2522;
                                float _3107 = _3053 - _2523;
                                float _3108 = _3054 - _2524;
                                float _3112 = inversesqrt(dot(vec3(_3106, _3107, _3108), vec3(_3106, _3107, _3108)));
                                float _3116 = dot(vec3(_425, _428, _431), vec3((-0.0) - _2522, (-0.0) - _2523, (-0.0) - _2524));
                                float _4157 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                                float _3119 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3120 = dot(vec3(_425, _428, _431), vec3(_3112 * _3106, _3112 * _3107, _3112 * _3108));
                                float _4168 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3123 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                                float _3127 = ((_3123 * _3123) * (_3105 + (-1.0))) + 1.0;
                                float _3128 = _3065 * _3104;
                                float _3129 = _3128 * _3128;
                                float _3135 = ((1.0 - _3129) * dot(vec3(_425, _428, _431), vec3(_3052, _3053, _3054))) + _3129;
                                float _4179 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                                float _3136 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                                float _3137 = 1.0 - _3104;
                                float _3147 = (0.5 / (((_3136 * ((_3119 * _3137) + _3104)) + 9.9999999392252902907785028219223e-09) + (((_3136 * _3137) + _3104) * _3119))) * _3136;
                                float _4190 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                                float _3157 = (_3082 * _3059) * (((_3105 * 3.1415927410125732421875) * (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) / ((_3127 * _3127) * ((_3072 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3083 * _2926.y;
                                frontier_phi_83_pred_1 = _3083 * _2926.x;
                                frontier_phi_83_pred_2 = _3157 * _2938.z;
                                frontier_phi_83_pred_3 = _3157 * _2938.y;
                                frontier_phi_83_pred_4 = _3157 * _2938.x;
                                frontier_phi_83_pred_5 = _3083 * _2926.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3165 = frontier_phi_83_pred;
                            _3164 = frontier_phi_83_pred_1;
                            _3163 = frontier_phi_83_pred_2;
                            _3162 = frontier_phi_83_pred_3;
                            _3161 = frontier_phi_83_pred_4;
                            _3166 = frontier_phi_83_pred_5;
                            _2868 = _3164 + _2881;
                            _2869 = _3165 + _2882;
                            _2870 = _3166 + _2883;
                            _2865 = _3161 + _2878;
                            _2866 = _3162 + _2879;
                            _2867 = _3163 + _2880;
                            if (_2885 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2878 = _2865;
                                _2879 = _2866;
                                _2880 = _2867;
                                _2881 = _2868;
                                _2882 = _2869;
                                _2883 = _2870;
                                _2884 = _2885;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2870;
                        frontier_phi_77_pred_1 = _2869;
                        frontier_phi_77_pred_2 = _2868;
                        frontier_phi_77_pred_3 = _2867;
                        frontier_phi_77_pred_4 = _2866;
                        frontier_phi_77_pred_5 = _2865;
                    }
                    _2507 = frontier_phi_77_pred;
                    _2505 = frontier_phi_77_pred_1;
                    _2503 = frontier_phi_77_pred_2;
                    _2501 = frontier_phi_77_pred_3;
                    _2499 = frontier_phi_77_pred_4;
                    _2497 = frontier_phi_77_pred_5;
                    uint _2663 = _2662 + 1u;
                    if (_2663 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2656 = _2497;
                        _2657 = _2499;
                        _2658 = _2501;
                        _2659 = _2503;
                        _2660 = _2505;
                        _2661 = _2507;
                        _2662 = _2663;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2501;
                frontier_phi_58_59_ladder_1 = _2507;
                frontier_phi_58_59_ladder_2 = _2505;
                frontier_phi_58_59_ladder_3 = _2503;
                frontier_phi_58_59_ladder_4 = _2499;
                frontier_phi_58_59_ladder_5 = _2497;
            }
            else
            {
                frontier_phi_58_59_ladder = _2370;
                frontier_phi_58_59_ladder_1 = _2376;
                frontier_phi_58_59_ladder_2 = _2374;
                frontier_phi_58_59_ladder_3 = _2372;
                frontier_phi_58_59_ladder_4 = _2368;
                frontier_phi_58_59_ladder_5 = _2366;
            }
            _2496 = frontier_phi_58_59_ladder_5;
            _2498 = frontier_phi_58_59_ladder_4;
            _2500 = frontier_phi_58_59_ladder;
            _2502 = frontier_phi_58_59_ladder_3;
            _2504 = frontier_phi_58_59_ladder_2;
            _2506 = frontier_phi_58_59_ladder_1;
        }
        float _2511 = isnan(1.0) ? _470 : (isnan(_470) ? 1.0 : min(_470, 1.0));
        _2243 = (_2511 * _2502) + _1695;
        _2245 = (_2511 * _2504) + _1697;
        _2247 = (_2511 * _2506) + _1699;
        _2249 = ((_2496 * 0.039999999105930328369140625) * _2511) + _2028;
        _2251 = ((_2498 * 0.039999999105930328369140625) * _2511) + _2030;
        _2253 = ((_2500 * 0.039999999105930328369140625) * _2511) + _2032;
    }
    else
    {
        _2243 = _1695;
        _2245 = _1697;
        _2247 = _1699;
        _2249 = _2028;
        _2251 = _2030;
        _2253 = _2032;
    }
    uint _2259 = _446 + uint(cbMatDynParam._m0[0u].w);
    float _2267 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _285.x) * cbInstanceData._m0[_2259].x;
    float _2270 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _285.y) * cbInstanceData._m0[_2259].y;
    float _2273 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _285.z) * cbInstanceData._m0[_2259].z;
    float _4206 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _4217 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _4228 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _2290 = (((isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2243 + ((isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0))) * _470))) + ((_2249 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _1309)) * cbPerFrame._m0[3u].x)) + _2267;
    float _2292 = (_2270 + ((_2251 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _1309)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2245 + ((isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0))) * _470)));
    float _2294 = (_2273 + ((_2253 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _1309)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2247 + ((isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0))) * _470)));
    float _2295 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2296 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2297 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2303 = cbMtdParam._m0[2u].x * _2267;
    float _2304 = cbMtdParam._m0[2u].y * _2270;
    float _2305 = cbMtdParam._m0[2u].z * _2273;
    float _4254 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2307 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    uint _2308 = _444 + 6u;
    float _2316 = _404 / cbSceneParam._m0[86u].x;
    float _2317 = _405 / cbSceneParam._m0[86u].y;
    vec4 _2331 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2316, _2317, (log2((isnan(cbSceneParam._m0[77u].w) ? _325 : (isnan(_325) ? cbSceneParam._m0[77u].w : min(_325, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2333 = _2331.x;
    float _2334 = _2331.y;
    float _2335 = _2331.z;
    float _2336 = _2331.w;
    float _2429;
    float _2431;
    float _2433;
    float _2435;
    if (_325 > cbSceneParam._m0[78u].w)
    {
        float _2391 = isnan(_325) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _325 : min(cbSceneParam._m0[80u].w, _325));
        float _2392 = _2391 / _325;
        float _2403 = _2392 * _376;
        float _2404 = _377 * _2392;
        float _2405 = (-0.0) - _2404;
        float _2407 = _2392 * _378;
        float _2409 = (cbSceneParam._m0[77u].w * _2405) / _2391;
        float _2410 = _2409 + cbSceneParam._m0[79u].w;
        float _2411 = cbSceneParam._m0[79u].w - _2404;
        float _2417 = sqrt(((_2403 * _2403) + (_2404 * _2404)) + (_2407 * _2407));
        float _2420 = (1.0 - (cbSceneParam._m0[77u].w / _2391)) * _2417;
        float _2425 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2427 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2613;
        if (abs((_2405 - _2409) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2613 = ((((_2410 > 0.0) ? exp2(_2425 * _2410) : (2.0 - exp2(_2427 * _2410))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2420;
        }
        else
        {
            float _2557 = 1.0 / cbSceneParam._m0[80u].x;
            float _2558 = isnan(_2411) ? _2410 : (isnan(_2410) ? _2411 : max(_2410, _2411));
            float _2559 = isnan(_2411) ? _2410 : (isnan(_2410) ? _2411 : min(_2410, _2411));
            float _2568 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : min(_2558, 0.0));
            float _2569 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : min(_2559, 0.0));
            _2613 = ((abs(_2417 / _2405) * cbSceneParam._m0[80u].y) * ((((_2568 - _2569) * 2.0) - ((exp2(_2425 * (isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0)))) - exp2(_2425 * (isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0))))) * _2557)) - ((exp2(_2427 * _2568) - exp2(_2427 * _2569)) * _2557))) + (_2420 * cbSceneParam._m0[80u].z);
        }
        vec4 _2615 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2316, _2317, 1.0), 0.0);
        float _2624 = exp2((_2613 * (-1.44269502162933349609375)) * (1.0 - _2615.w));
        float _2625 = log2(_2624);
        float _2641 = log2(_2336);
        _2429 = (exp2(_2641 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].x)) * _2615.x) / cbSceneParam._m0[78u].x)) + _2333;
        _2431 = (exp2(_2641 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].y)) * _2615.y) / cbSceneParam._m0[78u].y)) + _2334;
        _2433 = (exp2(_2641 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].z)) * _2615.z) / cbSceneParam._m0[78u].z)) + _2335;
        _2435 = _2624 * _2336;
    }
    else
    {
        _2429 = _2333;
        _2431 = _2334;
        _2433 = _2335;
        _2435 = _2336;
    }
    bool _2651;
    vec4 _2445;
    vec4 _2467;
    float _2469;
    float _2473;
    float _2474;
    float _2475;
    float _2478;
    float _2481;
    float _2484;
    float _2485;
    bool _2495;
    for (;;)
    {
        _2445 = cbMatDynParam._m0[0u];
        float _2447 = roundEven(_2445.y);
        bool _2448 = _2447 == 3.0;
        float _2449 = log2(_2435);
        float _2453 = exp2(_2449 * cbSceneParam._m0[78u].x);
        float _2454 = exp2(_2449 * cbSceneParam._m0[78u].y);
        float _2455 = exp2(_2449 * cbSceneParam._m0[78u].z);
        float _2456 = _2453 * _2295;
        float _2457 = _2454 * _2296;
        float _2458 = _2455 * _2297;
        float _2465 = _392 + (-0.5);
        _2467 = cbMtdParam._m0[1u];
        _2469 = _2467.y * _2465;
        float _2472 = (_2447 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2473 = _2472 * (_2448 ? _2456 : (_2456 + (cbSceneParam._m0[72u].w * _2429)));
        _2474 = _2472 * (_2448 ? _2457 : (_2457 + (cbSceneParam._m0[72u].w * _2431)));
        _2475 = _2472 * (_2448 ? _2458 : (_2458 + (cbSceneParam._m0[72u].w * _2433)));
        _2478 = ((_2303 * _2307) * _2453) * _2472;
        _2481 = ((_2304 * _2307) * _2454) * _2472;
        _2484 = ((_2305 * _2307) * _2455) * _2472;
        _2485 = _2465 * 0.999000012874603271484375;
        _2495 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2495)
        {
            if ((cbInstanceData._m0[_444 + 7u].x + _2485) < 0.5)
            {
                _2651 = true;
                break;
            }
        }
        uint _2592 = _446 + uint(_2445.w);
        if ((cbInstanceData._m0[_2592].w < 1.0) && ((cbInstanceData._m0[_2592].w + _2485) < 0.5))
        {
            _2651 = true;
            break;
        }
        if ((_2469 + 1.0) < _2467.x)
        {
            _2651 = true;
            break;
        }
        _2651 = false;
        break;
    }
    float _2856;
    if (_2651)
    {
        discard_state = true;
        _2856 = 0.0;
    }
    else
    {
        _2856 = cbInstanceData._m0[_2308].w;
    }
    SV_Target.x = _2473;
    SV_Target.y = _2474;
    SV_Target.z = _2475;
    SV_Target.w = _2856;
    SV_Target_1.x = _2478;
    SV_Target_1.y = _2481;
    SV_Target_1.z = _2484;
    SV_Target_1.w = cbInstanceData._m0[_2308].w;
    discard_exit();
}


