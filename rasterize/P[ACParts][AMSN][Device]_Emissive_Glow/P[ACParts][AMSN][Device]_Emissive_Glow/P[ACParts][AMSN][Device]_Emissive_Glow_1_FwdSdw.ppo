#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _828;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _224.x * cbMtdParam._m0[9u].x;
    float _231 = _224.y * cbMtdParam._m0[9u].y;
    float _232 = _224.z * cbMtdParam._m0[9u].z;
    vec4 _244 = texture(sampler2D(P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _248 = _244.z;
    float _252 = (_244.x * 2.0) + (-1.0);
    float _254 = (_244.y * 2.0) + (-1.0);
    float _255 = dot(vec2(_252, _254), vec2(_252, _254));
    float _3470 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _261 = sqrt(1.0 - (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))));
    vec4 _283 = texture(sampler2D(P_ACParts_AMSN_Device_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _290 = fma(_261, _194 * NORMAL.x, fma(_254, _201 * TANGENT.x, (_187 * _180) * _252));
    float _293 = fma(_261, _194 * NORMAL.y, fma(_254, _201 * TANGENT.y, (_187 * _181) * _252));
    float _296 = fma(_261, _194 * NORMAL.z, fma(_254, _201 * TANGENT.z, (_187 * _182) * _252));
    float _300 = inversesqrt(dot(vec3(_290, _293, _296), vec3(_290, _293, _296)));
    float _301 = _300 * _290;
    float _302 = _300 * _293;
    float _303 = _300 * _296;
    float _3481 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _304 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    float _3492 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3503 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3514 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _323 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _364 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _374 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _364);
    float _375 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _364);
    float _376 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _364);
    float _380 = inversesqrt(dot(vec3(_374, _375, _376), vec3(_374, _375, _376)));
    float _381 = _374 * _380;
    float _382 = _375 * _380;
    float _383 = _376 * _380;
    float _389 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _390 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _411 = fma(_303, cbSceneParam._m0[5u].z, fma(_302, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _301));
    float _414 = fma(_303, cbSceneParam._m0[6u].z, fma(_302, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _301));
    float _417 = fma(_303, cbSceneParam._m0[7u].z, fma(_302, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _301));
    uint _430 = uint(roundEven(NORMAL.w)) * 13u;
    uint _432 = _430 + 9u;
    uint _433 = _432 + uint(cbMatDynParam._m0[0u].w);
    float _439 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0)))) * cbInstanceData._m0[_433].x;
    float _440 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0)))) * cbInstanceData._m0[_433].y;
    float _441 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0)))) * cbInstanceData._m0[_433].z;
    float _3525 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    float _3536 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _3547 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    vec4 _453 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _389, cbSceneParam._m0[86u].y * _390));
    float _456 = _453.x * TEXCOORD.z;
    float _457 = dot(vec3(_301, _302, _303), vec3(_381, _382, _383));
    float _460 = _457 * 2.0;
    float _464 = (_460 * _301) - _381;
    float _465 = (_460 * _302) - _382;
    float _466 = (_460 * _303) - _383;
    float _470 = abs(dot(vec3(_381, _382, _383), vec3(_301, _302, _303)));
    float _3558 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _472 = sqrt(_304);
    float _485 = exp2((_472 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_472 * 3.0));
    float _517 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _521 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _525 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _827;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _552 = fma(_525, cbModelParam._m0[26u].z, fma(_521, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _517));
        float _556 = fma(_525, cbModelParam._m0[27u].z, fma(_521, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _517));
        float _560 = fma(_525, cbModelParam._m0[28u].z, fma(_521, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _517));
        float _585 = _517 + _301;
        float _586 = _521 + _302;
        float _587 = _525 + _303;
        float _597 = fma(_587, cbModelParam._m0[26u].z, fma(_586, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _585)) - _552;
        float _598 = fma(_587, cbModelParam._m0[27u].z, fma(_586, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _585)) - _556;
        float _599 = fma(_587, cbModelParam._m0[28u].z, fma(_586, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _585)) - _560;
        float _603 = inversesqrt(dot(vec3(_597, _598, _599), vec3(_597, _598, _599)));
        float _616 = ((_603 * _597) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_552 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _617 = ((_603 * _598) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_556 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _618 = ((_603 * _599) / cbModelParam._m0[34u].z) + ((((((_560 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _621 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_616, _617, _618), 0.0);
        vec4 _628 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_616, _617, _618), 0.0);
        vec4 _635 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_616, _617, _618), 0.0);
        vec4 _642 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_616, _617, _618), 0.0);
        float _655 = exp2((_621.w + (-0.5)) * 20.0) * 2.0;
        float _656 = _655 * (_621.x + (-0.5));
        float _657 = _655 * (_621.y + (-0.5));
        float _658 = _655 * (_621.z + (-0.5));
        float _665 = exp2((_628.w + (-0.5)) * 20.0) * 2.0;
        float _666 = _665 * (_628.x + (-0.5));
        float _667 = _665 * (_628.y + (-0.5));
        float _668 = _665 * (_628.z + (-0.5));
        float _675 = exp2((_635.w + (-0.5)) * 20.0) * 2.0;
        float _676 = _675 * (_635.x + (-0.5));
        float _677 = _675 * (_635.y + (-0.5));
        float _678 = _675 * (_635.z + (-0.5));
        float _685 = exp2((_642.w + (-0.5)) * 20.0) * 2.0;
        float _686 = _685 * (_642.x + (-0.5));
        float _687 = _685 * (_642.y + (-0.5));
        float _688 = _685 * (_642.z + (-0.5));
        float _689 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _690 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        float _691 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _692 = _656 * 0.5;
        float _693 = _666 * 0.5;
        float _694 = _676 * 0.5;
        float _695 = dot(vec3(_692, _693, _694), vec3(_692, _693, _694));
        float _700 = (_695 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_695);
        float _709 = (dot(vec3(_301, _302, _303), vec3(_700 * _692, _700 * _693, _700 * _694)) + 1.0) * 0.5;
        float _3584 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _719 = sqrt(((_693 * _693) + (_692 * _692)) + (_694 * _694)) / (_689 + 9.9999997473787516355514526367188e-06);
        float _3595 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _720 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _721 = _720 * 2.0;
        float _725 = (1.0 - _720) / (_720 + 1.0);
        float _3606 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _726 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _735 = ((((1.0 - _726) * (_721 + 2.0)) * exp2(log2(isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * (_721 + 1.0))) + _726) * _689;
        float _736 = _657 * 0.5;
        float _737 = _667 * 0.5;
        float _738 = _677 * 0.5;
        float _739 = dot(vec3(_736, _737, _738), vec3(_736, _737, _738));
        float _744 = (_739 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_739);
        float _752 = (dot(vec3(_301, _302, _303), vec3(_744 * _736, _744 * _737, _744 * _738)) + 1.0) * 0.5;
        float _3617 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _761 = sqrt(((_737 * _737) + (_736 * _736)) + (_738 * _738)) / (_690 + 9.9999997473787516355514526367188e-06);
        float _3628 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _762 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _763 = _762 * 2.0;
        float _767 = (1.0 - _762) / (_762 + 1.0);
        float _3639 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _768 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _777 = ((((1.0 - _768) * (_763 + 2.0)) * exp2(log2(isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * (_763 + 1.0))) + _768) * _690;
        float _778 = _658 * 0.5;
        float _779 = _668 * 0.5;
        float _780 = _678 * 0.5;
        float _781 = dot(vec3(_778, _779, _780), vec3(_778, _779, _780));
        float _786 = (_781 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_781);
        float _794 = (dot(vec3(_301, _302, _303), vec3(_786 * _778, _786 * _779, _786 * _780)) + 1.0) * 0.5;
        float _3650 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _803 = sqrt(((_779 * _779) + (_778 * _778)) + (_780 * _780)) / (_691 + 9.9999997473787516355514526367188e-06);
        float _3661 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _804 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _805 = _804 * 2.0;
        float _809 = (1.0 - _804) / (_804 + 1.0);
        float _3672 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _810 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _819 = ((((1.0 - _810) * (_805 + 2.0)) * exp2(log2(isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * (_805 + 1.0))) + _810) * _691;
        _827 = _658;
        _829 = _657;
        _830 = _656;
        _831 = _668;
        _832 = _667;
        _833 = _666;
        _834 = _678;
        _835 = _677;
        _836 = _676;
        _837 = _691;
        _838 = _690;
        _839 = _689;
        _840 = cbModelParam._m0[36u].z * (isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0)));
        _841 = cbModelParam._m0[36u].z * (isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0)));
        _842 = cbModelParam._m0[36u].z * (isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0)));
    }
    else
    {
        _827 = _828;
        _829 = _828;
        _830 = _828;
        _831 = _828;
        _832 = _828;
        _833 = _828;
        _834 = _828;
        _835 = _828;
        _836 = _828;
        _837 = _828;
        _838 = _828;
        _839 = _828;
        _840 = 0.0;
        _841 = 0.0;
        _842 = 0.0;
    }
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _868 = fma(_525, cbModelParam._m0[30u].z, fma(_521, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _517));
        float _872 = fma(_525, cbModelParam._m0[31u].z, fma(_521, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _517));
        float _876 = fma(_525, cbModelParam._m0[32u].z, fma(_521, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _517));
        float _899 = _517 + _301;
        float _900 = _521 + _302;
        float _901 = _525 + _303;
        float _911 = fma(_901, cbModelParam._m0[30u].z, fma(_900, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _899)) - _868;
        float _912 = fma(_901, cbModelParam._m0[31u].z, fma(_900, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _899)) - _872;
        float _913 = fma(_901, cbModelParam._m0[32u].z, fma(_900, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _899)) - _876;
        float _917 = inversesqrt(dot(vec3(_911, _912, _913), vec3(_911, _912, _913)));
        float _930 = ((_917 * _911) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_868 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _931 = ((_917 * _912) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_872 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _932 = ((_917 * _913) / cbModelParam._m0[35u].z) + ((((((_876 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        float _967 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_934.x + (-0.5));
        float _969 = _967 * (_934.y + (-0.5));
        float _970 = _967 * (_934.z + (-0.5));
        float _977 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_941.x + (-0.5));
        float _979 = _977 * (_941.y + (-0.5));
        float _980 = _977 * (_941.z + (-0.5));
        float _987 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_948.x + (-0.5));
        float _989 = _987 * (_948.y + (-0.5));
        float _990 = _987 * (_948.z + (-0.5));
        float _997 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_955.x + (-0.5));
        float _999 = _997 * (_955.y + (-0.5));
        float _1000 = _997 * (_955.z + (-0.5));
        float _1001 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1002 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1003 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1004 = _968 * 0.5;
        float _1005 = _978 * 0.5;
        float _1006 = _988 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1020 = (dot(vec3(_301, _302, _303), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1029 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_1001 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _3735 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1031 + 1.0))) + _1036) * _1001;
        float _1046 = _969 * 0.5;
        float _1047 = _979 * 0.5;
        float _1048 = _989 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1062 = (dot(vec3(_301, _302, _303), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3746 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1071 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_1002 + 9.9999997473787516355514526367188e-06);
        float _3757 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _3768 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_1073 + 1.0))) + _1078) * _1002;
        float _1088 = _970 * 0.5;
        float _1089 = _980 * 0.5;
        float _1090 = _990 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1104 = (dot(vec3(_301, _302, _303), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1113 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1003 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _3801 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1115 + 1.0))) + _1120) * _1003;
        _1137 = _970;
        _1138 = _969;
        _1139 = _968;
        _1140 = _980;
        _1141 = _979;
        _1142 = _978;
        _1143 = _990;
        _1144 = _989;
        _1145 = _988;
        _1146 = _1003;
        _1147 = _1002;
        _1148 = _1001;
        _1149 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
        _1150 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
        _1151 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
    }
    else
    {
        _1137 = _828;
        _1138 = _828;
        _1139 = _828;
        _1140 = _828;
        _1141 = _828;
        _1142 = _828;
        _1143 = _828;
        _1144 = _828;
        _1145 = _828;
        _1146 = _828;
        _1147 = _828;
        _1148 = _828;
        _1149 = 0.0;
        _1150 = 0.0;
        _1151 = 0.0;
    }
    float _1161 = (cbModelParam._m0[1u].x * (_1149 - _840)) + _840;
    float _1162 = (cbModelParam._m0[1u].x * (_1150 - _841)) + _841;
    float _1163 = (cbModelParam._m0[1u].x * (_1151 - _842)) + _842;
    float _1184 = fma(_1163, cbSceneParam._m0[89u].z, fma(_1162, cbSceneParam._m0[89u].y, _1161 * cbSceneParam._m0[89u].x));
    float _1187 = fma(_1163, cbSceneParam._m0[90u].z, fma(_1162, cbSceneParam._m0[90u].y, _1161 * cbSceneParam._m0[90u].x));
    float _1190 = fma(_1163, cbSceneParam._m0[91u].z, fma(_1162, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1161));
    float _1205 = _464 * 0.5;
    float _1206 = _465 * 0.5;
    float _1207 = _466 * 0.5;
    float _1208 = dot(vec4(_1205, _1206, _1207, 1.0), vec4(_1139, _1142, _1145, _1148));
    float _1211 = dot(vec4(_1205, _1206, _1207, 1.0), vec4(_1138, _1141, _1144, _1147));
    float _1214 = dot(vec4(_1205, _1206, _1207, 1.0), vec4(_1137, _1140, _1143, _1146));
    float _1248;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1221 = dot(vec4(_1205, _1206, _1207, 1.0), vec4(_827, _831, _834, _837));
        float _1225 = dot(vec4(_1205, _1206, _1207, 1.0), vec4(_829, _832, _835, _838));
        float _1229 = dot(vec4(_1205, _1206, _1207, 1.0), vec4(_830, _833, _836, _839));
        float _1236 = dot(vec4(cbModelParam._m0[39u]), vec4(_1205, _1206, _1207, 1.0));
        _1248 = dot(vec3(isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)), isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)), isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1236) ? 0.0 : (isnan(0.0) ? _1236 : max(0.0, _1236))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1248 = 1.0;
    }
    float _1259;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1250 = dot(vec4(cbModelParam._m0[40u]), vec4(_1205, _1206, _1207, 1.0));
        _1259 = dot(vec3(isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)), isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)), isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1250) ? 0.0 : (isnan(0.0) ? _1250 : max(0.0, _1250))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1259 = 1.0;
    }
    float _1263 = (_1259 * cbModelParam._m0[1u].x) + (_1248 * (1.0 - cbModelParam._m0[1u].x));
    float _1273 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _304);
    float _1274 = isnan(_1273) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1273 : min(cbModelParam._m0[25u].z, _1273));
    float _1356;
    float _1358;
    float _1360;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1323 = fma(_525, cbModelParam._m0[13u].z, fma(_521, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _517)) + cbModelParam._m0[13u].w;
        float _1327 = fma(_525, cbModelParam._m0[14u].z, fma(_521, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _517)) + cbModelParam._m0[14u].w;
        float _1331 = fma(_525, cbModelParam._m0[15u].z, fma(_521, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _517)) + cbModelParam._m0[15u].w;
        float _1334 = fma(_466, cbModelParam._m0[13u].z, fma(_465, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _464));
        float _1337 = fma(_466, cbModelParam._m0[14u].z, fma(_465, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _464));
        float _1340 = fma(_466, cbModelParam._m0[15u].z, fma(_465, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _464));
        float _1368;
        if (_1334 > 0.0)
        {
            _1368 = abs((1.0 - _1323) / _1334);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1334 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1323 + 1.0) / _1334);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1368 = frontier_phi_14_12_ladder;
        }
        float _1541;
        if (_1337 > 0.0)
        {
            _1541 = abs((1.0 - _1327) / _1337);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1337 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1327 + 1.0) / _1337);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1541 = frontier_phi_23_19_ladder;
        }
        float _1837;
        if (_1340 > 0.0)
        {
            _1837 = abs((1.0 - _1331) / _1340);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1340 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1331 + 1.0) / _1340);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1837 = frontier_phi_35_30_ladder;
        }
        float _1839 = isnan(_1541) ? _1368 : (isnan(_1368) ? _1541 : min(_1368, _1541));
        float _1840 = isnan(_1837) ? _1839 : (isnan(_1839) ? _1837 : min(_1839, _1837));
        float _1844 = (_1840 * _1334) + _1323;
        float _1845 = (_1840 * _1337) + _1327;
        float _1846 = (_1840 * _1340) + _1331;
        float _1847 = _1840 * 9.9999997473787516355514526367188e-05;
        float _1849 = (-1.0) - _1847;
        float _1851 = _1847 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1846 > _1851) || ((_1846 < _1849) || ((_1845 > _1851) || ((_1845 < _1849) || ((_1844 < _1849) || (_1844 > _1851))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1991 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1846, cbModelParam._m0[9u].z, fma(_1845, cbModelParam._m0[9u].y, _1844 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1846, cbModelParam._m0[10u].z, fma(_1845, cbModelParam._m0[10u].y, _1844 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1846, cbModelParam._m0[11u].z, fma(_1845, cbModelParam._m0[11u].y, _1844 * cbModelParam._m0[11u].x))), _1274);
            frontier_phi_13_35_ladder = _1991.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1991.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1991.x * cbModelParam._m0[1u].y;
        }
        _1356 = frontier_phi_13_35_ladder_2;
        _1358 = frontier_phi_13_35_ladder_1;
        _1360 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1344 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_464, _465, _466), _1274);
        _1356 = _1344.x * cbModelParam._m0[1u].y;
        _1358 = _1344.y * cbModelParam._m0[1u].y;
        _1360 = _1344.z * cbModelParam._m0[1u].y;
    }
    float _1364 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _304);
    float _1365 = isnan(_1364) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1364 : min(cbModelParam._m0[25u].w, _1364));
    float _1458;
    float _1460;
    float _1462;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1422 = fma(_525, cbModelParam._m0[21u].z, fma(_521, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _517)) + cbModelParam._m0[21u].w;
        float _1426 = fma(_525, cbModelParam._m0[22u].z, fma(_521, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _517)) + cbModelParam._m0[22u].w;
        float _1430 = fma(_525, cbModelParam._m0[23u].z, fma(_521, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _517)) + cbModelParam._m0[23u].w;
        float _1433 = fma(_466, cbModelParam._m0[21u].z, fma(_465, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _464));
        float _1436 = fma(_466, cbModelParam._m0[22u].z, fma(_465, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _464));
        float _1439 = fma(_466, cbModelParam._m0[23u].z, fma(_465, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _464));
        float _1546;
        if (_1433 > 0.0)
        {
            _1546 = abs((1.0 - _1422) / _1433);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1433 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1422 + 1.0) / _1433);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1546 = frontier_phi_25_21_ladder;
        }
        float _1864;
        if (_1436 > 0.0)
        {
            _1864 = abs((1.0 - _1426) / _1436);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1436 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1426 + 1.0) / _1436);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1864 = frontier_phi_37_32_ladder;
        }
        float _2191;
        if (_1439 > 0.0)
        {
            _2191 = abs((1.0 - _1430) / _1439);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1430 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2191 = frontier_phi_47_44_ladder;
        }
        float _2193 = isnan(_1864) ? _1546 : (isnan(_1546) ? _1864 : min(_1546, _1864));
        float _2194 = isnan(_2191) ? _2193 : (isnan(_2193) ? _2191 : min(_2193, _2191));
        float _2198 = (_2194 * _1433) + _1422;
        float _2199 = (_2194 * _1436) + _1426;
        float _2200 = (_2194 * _1439) + _1430;
        float _2201 = _2194 * 9.9999997473787516355514526367188e-05;
        float _2202 = (-1.0) - _2201;
        float _2204 = _2201 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2200 > _2204) || ((_2200 < _2202) || ((_2199 > _2204) || ((_2199 < _2202) || ((_2198 < _2202) || (_2198 > _2204))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2318 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2200, cbModelParam._m0[17u].z, fma(_2199, cbModelParam._m0[17u].y, _2198 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2200, cbModelParam._m0[18u].z, fma(_2199, cbModelParam._m0[18u].y, _2198 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2200, cbModelParam._m0[19u].z, fma(_2199, cbModelParam._m0[19u].y, _2198 * cbModelParam._m0[19u].x))), _1365);
            frontier_phi_22_47_ladder = _2318.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2318.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2318.x * cbModelParam._m0[1u].z;
        }
        _1458 = frontier_phi_22_47_ladder_2;
        _1460 = frontier_phi_22_47_ladder_1;
        _1462 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1442 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_464, _465, _466), _1365);
        _1458 = _1442.x * cbModelParam._m0[1u].z;
        _1460 = _1442.y * cbModelParam._m0[1u].z;
        _1462 = _1442.z * cbModelParam._m0[1u].z;
    }
    float _1474 = ((((1.0 - _485) * ((_472 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_485 * _472)) * _456;
    float _1475 = _1474 * ((cbModelParam._m0[1u].w * (_1458 - _1356)) + _1356);
    float _1476 = _1474 * ((cbModelParam._m0[1u].w * (_1460 - _1358)) + _1358);
    float _1477 = _1474 * ((cbModelParam._m0[1u].w * (_1462 - _1360)) + _1360);
    float _1480 = fma(_1477, cbSceneParam._m0[89u].z, fma(_1476, cbSceneParam._m0[89u].y, _1475 * cbSceneParam._m0[89u].x));
    float _1483 = fma(_1477, cbSceneParam._m0[90u].z, fma(_1476, cbSceneParam._m0[90u].y, _1475 * cbSceneParam._m0[90u].x));
    float _1486 = fma(_1477, cbSceneParam._m0[91u].z, fma(_1476, cbSceneParam._m0[91u].y, _1475 * cbSceneParam._m0[91u].x));
    float _1520 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1524 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1528 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1532 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1533 = _1520 / _1532;
    float _1534 = _1524 / _1532;
    float _1535 = _1528 / _1532;
    float _1682;
    float _1683;
    float _1684;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1562 = ((uint(_1535 > cbSceneParam._m0[59u].y) + uint(_1535 > cbSceneParam._m0[59u].x)) + uint(_1535 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1563 = _1562 + 43u;
        uint _1571 = _1562 + 44u;
        uint _1579 = _1562 + 45u;
        uint _1587 = _1562 + 46u;
        float _1598 = fma(_1532, cbSceneParam._m0[_1563].w, fma(_1528, cbSceneParam._m0[_1563].z, fma(_1524, cbSceneParam._m0[_1563].y, _1520 * cbSceneParam._m0[_1563].x)));
        float _1602 = fma(_1532, cbSceneParam._m0[_1571].w, fma(_1528, cbSceneParam._m0[_1571].z, fma(_1524, cbSceneParam._m0[_1571].y, _1520 * cbSceneParam._m0[_1571].x)));
        float _1610 = fma(_1532, cbSceneParam._m0[_1587].w, fma(_1528, cbSceneParam._m0[_1587].z, fma(_1524, cbSceneParam._m0[_1587].y, _1520 * cbSceneParam._m0[_1587].x)));
        float _1615 = cbSceneParam._m0[33u].z * _1610;
        float _1617 = cbSceneParam._m0[33u].w * _1610;
        float _1620 = fma(_1532, cbSceneParam._m0[_1579].w, fma(_1528, cbSceneParam._m0[_1579].z, fma(_1524, cbSceneParam._m0[_1579].y, _1520 * cbSceneParam._m0[_1579].x))) / _1610;
        float _1668 = (cbSceneParam._m0[33u].x - sqrt(((_1534 * _1534) + (_1533 * _1533)) + (_1535 * _1535))) * cbSceneParam._m0[33u].y;
        float _3927 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1675 = (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1615 + _1598) / _1610, (_1617 + _1602) / _1610), _1620), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1617 + _1598) / _1610, (_1602 - _1615) / _1610), _1620), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1598 - _1615) / _1610, (_1602 - _1617) / _1610), _1620), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1598 - _1617) / _1610, (_1615 + _1602) / _1610), _1620), 0.0)).x), vec4(0.25)));
        _1682 = 1.0 - (_1675 * cbSceneParam._m0[34u].x);
        _1683 = 1.0 - (_1675 * cbSceneParam._m0[34u].y);
        _1684 = 1.0 - (_1675 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1682 = 1.0;
        _1683 = 1.0;
        _1684 = 1.0;
    }
    float _1748;
    float _1750;
    float _1752;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1736 = fma(_1532, cbSceneParam._m0[63u].w, fma(_1528, cbSceneParam._m0[63u].z, fma(_1524, cbSceneParam._m0[63u].y, _1520 * cbSceneParam._m0[63u].x)));
        float _1737 = fma(_1532, cbSceneParam._m0[60u].w, fma(_1528, cbSceneParam._m0[60u].z, fma(_1524, cbSceneParam._m0[60u].y, _1520 * cbSceneParam._m0[60u].x))) / _1736;
        float _1738 = fma(_1532, cbSceneParam._m0[61u].w, fma(_1528, cbSceneParam._m0[61u].z, fma(_1524, cbSceneParam._m0[61u].y, _1520 * cbSceneParam._m0[61u].x))) / _1736;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1737 >= cbSceneParam._m0[64u].x) && (_1738 >= cbSceneParam._m0[64u].y)) && (_1737 <= cbSceneParam._m0[64u].z)) && (_1738 <= cbSceneParam._m0[64u].w))
        {
            float _1877 = fma(_1532, cbSceneParam._m0[62u].w, fma(_1528, cbSceneParam._m0[62u].z, fma(_1524, cbSceneParam._m0[62u].y, _1520 * cbSceneParam._m0[62u].x))) / _1736;
            float _1881 = isnan(cbSceneParam._m0[41u].w) ? _1877 : (isnan(_1877) ? cbSceneParam._m0[41u].w : max(_1877, cbSceneParam._m0[41u].w));
            float _1924 = (cbSceneParam._m0[33u].x - sqrt(((_1534 * _1534) + (_1533 * _1533)) + (_1535 * _1535))) * cbSceneParam._m0[33u].y;
            float _3943 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
            float _1931 = (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1737, cbSceneParam._m0[33u].w + _1738), _1881), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1737, _1738 - cbSceneParam._m0[33u].z), _1881), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1737 - cbSceneParam._m0[33u].z, _1738 - cbSceneParam._m0[33u].w), _1881), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1737 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1738), _1881), 0.0)).x), vec4(0.25)));
            float _1935 = 1.0 - (_1931 * cbSceneParam._m0[34u].x);
            float _1936 = 1.0 - (_1931 * cbSceneParam._m0[34u].y);
            float _1937 = 1.0 - (_1931 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1937) ? _1684 : (isnan(_1684) ? _1937 : min(_1684, _1937));
            frontier_phi_34_33_ladder_1 = isnan(_1936) ? _1683 : (isnan(_1683) ? _1936 : min(_1683, _1936));
            frontier_phi_34_33_ladder_2 = isnan(_1935) ? _1682 : (isnan(_1682) ? _1935 : min(_1682, _1935));
        }
        else
        {
            frontier_phi_34_33_ladder = _1684;
            frontier_phi_34_33_ladder_1 = _1683;
            frontier_phi_34_33_ladder_2 = _1682;
        }
        _1748 = frontier_phi_34_33_ladder_2;
        _1750 = frontier_phi_34_33_ladder_1;
        _1752 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1748 = _1682;
        _1750 = _1683;
        _1752 = _1684;
    }
    uvec4 _1757 = floatBitsToUint(cbInstanceData._m0[_430 + 5u]);
    uint _1759 = _1757.x * 14u;
    uint _1760 = _1759 + 13u;
    float _1767 = _456 + (-1.0);
    float _1772 = (cbLight._m0[_1760].x * _1767) + 1.0;
    float _1773 = (cbLight._m0[_1760].y * _1767) + 1.0;
    float _1774 = (cbLight._m0[_1760].z * _1767) + 1.0;
    float _1775 = (cbLight._m0[_1760].w * _1767) + 1.0;
    uint _1776 = _1759 + 5u;
    float _1782 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
    uint _1786 = _1759 + 4u;
    float _1796 = isnan(1.0) ? _1772 : (isnan(_1772) ? 1.0 : min(_1772, 1.0));
    uint _1800 = _1759 | 1u;
    float _1811 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_301, _302, _303));
    float _1814 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_301, _302, _303));
    float _3979 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _3990 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1819 = (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * 0.3183098733425140380859375;
    float _1821 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * 0.3183098733425140380859375;
    float _1828 = ((cbLight._m0[_1776].x * _1782) * _1821) + (((cbLight._m0[_1786].x * _1748) * _1796) * _1819);
    float _1829 = ((_1782 * cbLight._m0[_1776].y) * _1821) + (((cbLight._m0[_1786].y * _1750) * _1796) * _1819);
    float _1830 = ((_1782 * cbLight._m0[_1776].z) * _1821) + (((cbLight._m0[_1786].z * _1752) * _1796) * _1819);
    uvec4 _1834 = floatBitsToUint(cbLight._m0[_1759 + 12u]);
    bool _1836 = _1834.x == 0u;
    float _1938;
    float _1940;
    float _1942;
    if (_1836)
    {
        _1938 = _1828;
        _1940 = _1829;
        _1942 = _1830;
    }
    else
    {
        uint _1946 = _1759 + 6u;
        float _1962 = (dot(vec3(cbLight._m0[_1759 + 2u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _1963 = _1962 * _1962;
        float _4001 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        float _1964 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1965 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
        _1938 = (((cbLight._m0[_1946].x * 0.3183098733425140380859375) * _1964) * _1965) + _1828;
        _1940 = (((cbLight._m0[_1946].y * 0.3183098733425140380859375) * _1964) * _1965) + _1829;
        _1942 = (((cbLight._m0[_1946].z * 0.3183098733425140380859375) * _1964) * _1965) + _1830;
    }
    bool _1945 = _1834.y == 0u;
    float _2000;
    float _2002;
    float _2004;
    if (_1945)
    {
        _2000 = _1938;
        _2002 = _1940;
        _2004 = _1942;
    }
    else
    {
        uint _2162 = _1759 + 7u;
        float _2178 = (dot(vec3(cbLight._m0[_1759 + 3u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _2179 = _2178 * _2178;
        float _4017 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2180 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _2181 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _2000 = (((cbLight._m0[_2162].x * 0.3183098733425140380859375) * _2180) * _2181) + _1938;
        _2002 = (((cbLight._m0[_2162].y * 0.3183098733425140380859375) * _2180) * _2181) + _1940;
        _2004 = (((cbLight._m0[_2162].z * 0.3183098733425140380859375) * _2180) * _2181) + _1942;
    }
    uint _2007 = _1759 + 8u;
    float _2020 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1759].w)) * _304) * 0.949999988079071044921875);
    float _2021 = _2020 * _2020;
    float _2022 = cbLight._m0[_1759].x + _381;
    float _2023 = cbLight._m0[_1759].y + _382;
    float _2024 = cbLight._m0[_1759].z + _383;
    float _2028 = inversesqrt(dot(vec3(_2022, _2023, _2024), vec3(_2022, _2023, _2024)));
    float _2029 = _2028 * _2022;
    float _2030 = _2028 * _2023;
    float _2031 = _2028 * _2024;
    float _2032 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1759].xyz));
    float _4033 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2035 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _4044 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _2036 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _2037 = dot(vec3(_301, _302, _303), vec3(_2029, _2030, _2031));
    float _4055 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2040 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _2041 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_2029, _2030, _2031));
    float _4066 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2045 = _2021 * _2021;
    float _2049 = ((_2040 * _2040) * (_2045 + (-1.0))) + 1.0;
    float _2060 = (exp2(log2(1.0 - (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2061 = 1.0 - _2021;
    float _2072 = (0.5 / (((_2036 * ((_2035 * _2061) + _2021)) + 9.9999999392252902907785028219223e-09) + (((_2036 * _2061) + _2021) * _2035))) * _2035;
    float _4077 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2074 = (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_2045 / ((_2049 * _2049) * 3.141590118408203125));
    uint _2088 = _1759 + 9u;
    float _2099 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1800].w)) * _304) * 0.949999988079071044921875);
    float _2100 = _2099 * _2099;
    float _2101 = cbLight._m0[_1800].x + _381;
    float _2102 = cbLight._m0[_1800].y + _382;
    float _2103 = cbLight._m0[_1800].z + _383;
    float _2107 = inversesqrt(dot(vec3(_2101, _2102, _2103), vec3(_2101, _2102, _2103)));
    float _2108 = _2107 * _2101;
    float _2109 = _2107 * _2102;
    float _2110 = _2107 * _2103;
    float _2111 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1800].xyz));
    float _4088 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2114 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _2115 = dot(vec3(_301, _302, _303), vec3(_2108, _2109, _2110));
    float _4099 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2118 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _2119 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_2108, _2109, _2110));
    float _4110 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2123 = _2100 * _2100;
    float _2127 = ((_2118 * _2118) * (_2123 + (-1.0))) + 1.0;
    float _2136 = (exp2(log2(1.0 - (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2137 = 1.0 - _2100;
    float _2147 = (0.5 / (((_2036 * ((_2114 * _2137) + _2100)) + 9.9999999392252902907785028219223e-09) + (((_2036 * _2137) + _2100) * _2114))) * _2114;
    float _4121 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2149 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_2123 / ((_2127 * _2127) * 3.141590118408203125));
    float _2159 = (((_2136 * cbLight._m0[_2088].x) * _2149) * _1782) + ((((cbLight._m0[_2007].x * _1748) * _2060) * _2074) * _1796);
    float _2160 = (((_2136 * cbLight._m0[_2088].y) * _2149) * _1782) + ((((cbLight._m0[_2007].y * _1750) * _2060) * _2074) * _1796);
    float _2161 = (((_2136 * cbLight._m0[_2088].z) * _2149) * _1782) + ((((cbLight._m0[_2007].z * _1752) * _2060) * _2074) * _1796);
    float _2217;
    float _2219;
    float _2221;
    if (_1836)
    {
        _2217 = _2159;
        _2219 = _2160;
        _2221 = _2161;
    }
    else
    {
        uint _2223 = _1759 + 2u;
        uint _2227 = _1759 + 10u;
        float _2241 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2223].w)) * _304) * 0.949999988079071044921875);
        float _2242 = _2241 * _2241;
        float _2243 = cbLight._m0[_2223].x + _381;
        float _2244 = cbLight._m0[_2223].y + _382;
        float _2245 = cbLight._m0[_2223].z + _383;
        float _2249 = inversesqrt(dot(vec3(_2243, _2244, _2245), vec3(_2243, _2244, _2245)));
        float _2250 = _2249 * _2243;
        float _2251 = _2249 * _2244;
        float _2252 = _2249 * _2245;
        float _2253 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_2223].xyz));
        float _4132 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2256 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _2257 = dot(vec3(_301, _302, _303), vec3(_2250, _2251, _2252));
        float _4143 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2260 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _2261 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_2250, _2251, _2252));
        float _4154 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2265 = _2242 * _2242;
        float _2269 = ((_2260 * _2260) * (_2265 + (-1.0))) + 1.0;
        float _2278 = (exp2(log2(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2279 = 1.0 - _2242;
        float _2289 = (0.5 / (((_2036 * ((_2256 * _2279) + _2242)) + 9.9999999392252902907785028219223e-09) + (((_2036 * _2279) + _2242) * _2256))) * _2256;
        float _4165 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2291 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2265 / ((_2269 * _2269) * 3.141590118408203125));
        float _2292 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
        _2217 = (((_2278 * cbLight._m0[_2227].x) * _2291) * _2292) + _2159;
        _2219 = (((_2278 * cbLight._m0[_2227].y) * _2291) * _2292) + _2160;
        _2221 = (((_2278 * cbLight._m0[_2227].z) * _2291) * _2292) + _2161;
    }
    float _2323;
    float _2325;
    float _2327;
    if (_1945)
    {
        _2323 = _2217;
        _2325 = _2219;
        _2327 = _2221;
    }
    else
    {
        uint _2334 = _1759 + 3u;
        uint _2338 = _1759 + 11u;
        float _2352 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2334].w)) * _304) * 0.949999988079071044921875);
        float _2353 = _2352 * _2352;
        float _2354 = cbLight._m0[_2334].x + _381;
        float _2355 = cbLight._m0[_2334].y + _382;
        float _2356 = cbLight._m0[_2334].z + _383;
        float _2360 = inversesqrt(dot(vec3(_2354, _2355, _2356), vec3(_2354, _2355, _2356)));
        float _2361 = _2360 * _2354;
        float _2362 = _2360 * _2355;
        float _2363 = _2360 * _2356;
        float _2364 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_2334].xyz));
        float _4181 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2367 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _2368 = dot(vec3(_301, _302, _303), vec3(_2361, _2362, _2363));
        float _4192 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2371 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _2372 = dot(vec3(cbLight._m0[_2334].xyz), vec3(_2361, _2362, _2363));
        float _4203 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2376 = _2353 * _2353;
        float _2380 = ((_2371 * _2371) * (_2376 + (-1.0))) + 1.0;
        float _2389 = (exp2(log2(1.0 - (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2390 = 1.0 - _2353;
        float _2400 = (0.5 / (((_2036 * ((_2367 * _2390) + _2353)) + 9.9999999392252902907785028219223e-09) + (((_2036 * _2390) + _2353) * _2367))) * _2367;
        float _4214 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2402 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_2376 / ((_2380 * _2380) * 3.141590118408203125));
        float _2403 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _2323 = (((_2389 * cbLight._m0[_2338].x) * _2402) * _2403) + _2217;
        _2325 = (((_2389 * cbLight._m0[_2338].y) * _2402) * _2403) + _2219;
        _2327 = (((_2389 * cbLight._m0[_2338].z) * _2402) * _2403) + _2221;
    }
    float _2469;
    float _2471;
    float _2473;
    float _2475;
    float _2477;
    float _2479;
    if (_1757.y == 0u)
    {
        uvec4 _2424 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2425 = _2424.x;
        uint _2436 = uint((float(_2424.y) * floor(float(uint(cbSceneParam._m0[85u].y * _390) / _2425))) + floor(float(uint(cbSceneParam._m0[85u].x * _389) / _2425)));
        float _2446 = (log2(_1535 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2447 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        uint _2450 = uint(isnan(14.0) ? _2447 : (isnan(_2447) ? 14.0 : min(_2447, 14.0)));
        uvec4 _2455 = texelFetch(g_lightClusterGridBuffer, int(((_2450 << 2u) + (_2436 << 6u)) >> 2u));
        uint _2456 = _2455.x;
        uint _2457 = _2424.z;
        float _2571;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        float _2581;
        if (((((1u << ((_2457 >> 4u) & 15u)) + 4294967295u) & _2456) == 0u) || ((_2457 & 240u) == 0u))
        {
            _2571 = 0.0;
            _2573 = 0.0;
            _2575 = 0.0;
            _2577 = 0.0;
            _2579 = 0.0;
            _2581 = 0.0;
        }
        else
        {
            float _2572;
            float _2574;
            float _2576;
            float _2578;
            float _2580;
            float _2582;
            float _2725 = 0.0;
            float _2726 = 0.0;
            float _2727 = 0.0;
            float _2728 = 0.0;
            float _2729 = 0.0;
            float _2730 = 0.0;
            uint _2731 = 0u;
            uint _2740;
            bool _2741;
            for (;;)
            {
                _2740 = texelFetch(g_lightClassification, int((((_2450 << 5u) + (_2436 << 9u)) + (_2731 << 2u)) >> 2u)).x;
                _2741 = _2740 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2741)
                {
                    frontier_phi_66_pred = _2730;
                    frontier_phi_66_pred_1 = _2729;
                    frontier_phi_66_pred_2 = _2728;
                    frontier_phi_66_pred_3 = _2727;
                    frontier_phi_66_pred_4 = _2726;
                    frontier_phi_66_pred_5 = _2725;
                }
                else
                {
                    float _2849;
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    uint _2855;
                    _2849 = _2725;
                    _2850 = _2726;
                    _2851 = _2727;
                    _2852 = _2728;
                    _2853 = _2729;
                    _2854 = _2730;
                    _2855 = _2740;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    for (;;)
                    {
                        uint _2859 = uint(findLSB(_2855)) + (_2731 << 5u);
                        uint _2856 = (_2855 + 4294967295u) & _2855;
                        uint _2861 = _2859 * 48u;
                        vec4 _2875 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2861)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 3u)).x));
                        uint _2881 = (_2859 * 48u) + 4u;
                        vec4 _2894 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2881)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 3u)).x));
                        uint _2900 = (_2859 * 48u) + 8u;
                        vec3 _2911 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2900)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 2u)).x));
                        float _2915 = _2875.x - _1533;
                        float _2916 = _2875.y - _1534;
                        float _2917 = _2875.z - _1535;
                        float _2918 = dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917));
                        float _2921 = inversesqrt(_2918);
                        float _2922 = _2921 * _2915;
                        float _2923 = _2921 * _2916;
                        float _2924 = _2921 * _2917;
                        float _2925 = dot(vec3(_411, _414, _417), vec3(_2922, _2923, _2924));
                        float _2930 = 1.0 - (_2918 * _2875.w);
                        float _4240 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2931 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                        float _2932 = sqrt(_2918) * _2894.w;
                        float _2935 = 1.39999997615814208984375 / (_2932 + 1.39999997615814208984375);
                        float _2936 = _2935 * _2935;
                        float _2939 = ((1.0 - _2936) * _2925) + _2936;
                        float _2942 = _2932 * _2932;
                        float _2946 = ((isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0))) * _2931) / ((_2942 * 0.699999988079071044921875) + 1.0);
                        float _2950 = (-0.0) - _1533;
                        float _2951 = (-0.0) - _1534;
                        float _2952 = (-0.0) - _1535;
                        float _2956 = inversesqrt(dot(vec3(_2950, _2951, _2952), vec3(_2950, _2951, _2952)));
                        float _2957 = _2956 * _2950;
                        float _2958 = _2956 * _2951;
                        float _2959 = _2956 * _2952;
                        float _2966 = exp2(log2(1.0 / ((_2942 * 3.5) + 5.0)) * 0.25);
                        float _2967 = 1.0 - _472;
                        float _2974 = sqrt(1.0 - ((1.0 - (_2967 * _2967)) * (1.0 - (_2966 * _2966))));
                        float _2975 = _2974 * _2974;
                        float _2976 = _2975 * _2975;
                        float _2977 = _2957 + _2922;
                        float _2978 = _2958 + _2923;
                        float _2979 = _2959 + _2924;
                        float _2983 = inversesqrt(dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979)));
                        float _2987 = dot(vec3(_411, _414, _417), vec3(_2957, _2958, _2959));
                        float _4256 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                        float _2990 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                        float _2991 = dot(vec3(_411, _414, _417), vec3(_2983 * _2977, _2983 * _2978, _2983 * _2979));
                        float _4267 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                        float _2994 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                        float _2998 = ((_2994 * _2994) * (_2976 + (-1.0))) + 1.0;
                        float _2999 = _2935 * _2975;
                        float _3000 = _2999 * _2999;
                        float _3003 = ((1.0 - _3000) * _2925) + _3000;
                        float _4278 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                        float _3004 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                        float _3005 = 1.0 - _2975;
                        float _3015 = (0.5 / (((_3004 * ((_2990 * _3005) + _2975)) + 9.9999999392252902907785028219223e-09) + (((_3004 * _3005) + _2975) * _2990))) * _3004;
                        float _4289 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3026 = (((_2976 * 3.1415927410125732421875) * (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) / ((_2998 * _2998) * ((_2942 * 2.1991131305694580078125) + 3.141590118408203125))) * _2931;
                        _2784 = (_2946 * _2894.x) + _2852;
                        _2785 = (_2946 * _2894.y) + _2853;
                        _2786 = (_2946 * _2894.z) + _2854;
                        _2781 = (_3026 * _2911.x) + _2849;
                        _2782 = (_3026 * _2911.y) + _2850;
                        _2783 = (_3026 * _2911.z) + _2851;
                        if (_2856 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2849 = _2781;
                            _2850 = _2782;
                            _2851 = _2783;
                            _2852 = _2784;
                            _2853 = _2785;
                            _2854 = _2786;
                            _2855 = _2856;
                        }
                    }
                    frontier_phi_66_pred = _2786;
                    frontier_phi_66_pred_1 = _2785;
                    frontier_phi_66_pred_2 = _2784;
                    frontier_phi_66_pred_3 = _2783;
                    frontier_phi_66_pred_4 = _2782;
                    frontier_phi_66_pred_5 = _2781;
                }
                _2582 = frontier_phi_66_pred;
                _2580 = frontier_phi_66_pred_1;
                _2578 = frontier_phi_66_pred_2;
                _2576 = frontier_phi_66_pred_3;
                _2574 = frontier_phi_66_pred_4;
                _2572 = frontier_phi_66_pred_5;
                uint _2732 = _2731 + 1u;
                if (_2732 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2725 = _2572;
                    _2726 = _2574;
                    _2727 = _2576;
                    _2728 = _2578;
                    _2729 = _2580;
                    _2730 = _2582;
                    _2731 = _2732;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2571 = _2572;
            _2573 = _2574;
            _2575 = _2576;
            _2577 = _2578;
            _2579 = _2580;
            _2581 = _2582;
        }
        uvec4 _2585 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2586 = _2585.z;
        uint _2588 = (_2586 >> 8u) & 15u;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        if (((4294967295u << _2588) & _2456) == 0u)
        {
            _2693 = _2571;
            _2695 = _2573;
            _2697 = _2575;
            _2699 = _2577;
            _2701 = _2579;
            _2703 = _2581;
        }
        else
        {
            float _2718 = inversesqrt(dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535)));
            float _2719 = _2718 * _1533;
            float _2720 = _2718 * _1534;
            float _2721 = _2718 * _1535;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2588 < ((_2586 >> 12u) & 15u))
            {
                float _2694;
                float _2696;
                float _2698;
                float _2700;
                float _2702;
                float _2704;
                float _2832 = _2571;
                float _2833 = _2573;
                float _2834 = _2575;
                float _2835 = _2577;
                float _2836 = _2579;
                float _2837 = _2581;
                uint _2838 = _2588;
                uint _2847;
                bool _2848;
                for (;;)
                {
                    _2847 = texelFetch(g_lightClassification, int((((_2450 << 5u) + (_2436 << 9u)) + (_2838 << 2u)) >> 2u)).x;
                    _2848 = _2847 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2848)
                    {
                        frontier_phi_72_pred = _2837;
                        frontier_phi_72_pred_1 = _2836;
                        frontier_phi_72_pred_2 = _2835;
                        frontier_phi_72_pred_3 = _2834;
                        frontier_phi_72_pred_4 = _2833;
                        frontier_phi_72_pred_5 = _2832;
                    }
                    else
                    {
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3044 = _2832;
                        float _3045 = _2833;
                        float _3046 = _2834;
                        float _3047 = _2835;
                        float _3048 = _2836;
                        float _3049 = _2837;
                        uint _3050 = _2847;
                        uint _3051;
                        vec4 _3076;
                        float _3077;
                        vec4 _3092;
                        vec3 _3104;
                        vec4 _3120;
                        vec4 _3136;
                        float _3183;
                        bool _3184;
                        for (;;)
                        {
                            uint _3061 = ((_2838 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3050));
                            _3051 = (_3050 + 4294967295u) & _3050;
                            uint _3063 = _3061 * 40u;
                            _3076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 3u)).x));
                            _3077 = _3076.w;
                            uint _3079 = (_3061 * 40u) + 4u;
                            _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            uint _3094 = (_3061 * 40u) + 8u;
                            _3104 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x));
                            uint _3107 = (_3061 * 40u) + 16u;
                            _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            uint _3123 = (_3061 * 40u) + 20u;
                            _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            uint _3139 = (_3061 * 40u) + 24u;
                            vec4 _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3158 = (_3061 * 40u) + 28u;
                            vec4 _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            _3183 = fma(_1535, _3171.z, fma(_1534, _3171.y, _3171.x * _1533)) + _3171.w;
                            _3184 = !((fma(_1535, _3152.z, fma(_1534, _3152.y, _3152.x * _1533)) + _3152.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3184)
                            {
                                float _3211 = _3076.x - _1533;
                                float _3212 = _3076.y - _1534;
                                float _3213 = _3076.z - _1535;
                                float _3214 = dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213));
                                float _3217 = inversesqrt(_3214);
                                float _3218 = _3217 * _3211;
                                float _3219 = _3217 * _3212;
                                float _3220 = _3217 * _3213;
                                float _3224 = 1.0 - (_3214 / (_3077 * _3077));
                                float _4300 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3225 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                                float _3229 = sqrt(_3214) * _3092.w;
                                float _3231 = 1.39999997615814208984375 / (_3229 + 1.39999997615814208984375);
                                float _3232 = _3231 * _3231;
                                float _3235 = ((1.0 - _3232) * dot(vec3(_3218, _3219, _3220), vec3(_411, _414, _417))) + _3232;
                                float _3238 = _3229 * _3229;
                                float _3242 = (fma(_1535, _3120.z, fma(_1534, _3120.y, _3120.x * _1533)) + _3120.w) / _3183;
                                float _3243 = (fma(_1535, _3136.z, fma(_1534, _3136.y, _3136.x * _1533)) + _3136.w) / _3183;
                                float _3247 = 1.0 - dot(vec2(_3242, _3243), vec2(_3242, _3243));
                                float _4316 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3248 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                                float _3249 = _3248 * (((isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0))) * _3225) / ((_3238 * 0.699999988079071044921875) + 1.0));
                                float _3261 = exp2(log2(1.0 / ((_3238 * 3.5) + 5.0)) * 0.25);
                                float _3262 = 1.0 - _472;
                                float _3269 = sqrt(1.0 - ((1.0 - (_3262 * _3262)) * (1.0 - (_3261 * _3261))));
                                float _3270 = _3269 * _3269;
                                float _3271 = _3270 * _3270;
                                float _3272 = _3218 - _2719;
                                float _3273 = _3219 - _2720;
                                float _3274 = _3220 - _2721;
                                float _3278 = inversesqrt(dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274)));
                                float _3282 = dot(vec3(_411, _414, _417), vec3((-0.0) - _2719, (-0.0) - _2720, (-0.0) - _2721));
                                float _4327 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3285 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                                float _3286 = dot(vec3(_411, _414, _417), vec3(_3278 * _3272, _3278 * _3273, _3278 * _3274));
                                float _4338 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3289 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                                float _3293 = ((_3289 * _3289) * (_3271 + (-1.0))) + 1.0;
                                float _3294 = _3231 * _3270;
                                float _3295 = _3294 * _3294;
                                float _3301 = ((1.0 - _3295) * dot(vec3(_411, _414, _417), vec3(_3218, _3219, _3220))) + _3295;
                                float _4349 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3302 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                                float _3303 = 1.0 - _3270;
                                float _3313 = (0.5 / (((_3302 * ((_3285 * _3303) + _3270)) + 9.9999999392252902907785028219223e-09) + (((_3302 * _3303) + _3270) * _3285))) * _3302;
                                float _4360 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3323 = (_3248 * _3225) * (((_3271 * 3.1415927410125732421875) * (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) / ((_3293 * _3293) * ((_3238 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3249 * _3092.y;
                                frontier_phi_78_pred_1 = _3249 * _3092.x;
                                frontier_phi_78_pred_2 = _3323 * _3104.z;
                                frontier_phi_78_pred_3 = _3323 * _3104.y;
                                frontier_phi_78_pred_4 = _3323 * _3104.x;
                                frontier_phi_78_pred_5 = _3249 * _3092.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3331 = frontier_phi_78_pred;
                            _3330 = frontier_phi_78_pred_1;
                            _3329 = frontier_phi_78_pred_2;
                            _3328 = frontier_phi_78_pred_3;
                            _3327 = frontier_phi_78_pred_4;
                            _3332 = frontier_phi_78_pred_5;
                            _3034 = _3330 + _3047;
                            _3035 = _3331 + _3048;
                            _3036 = _3332 + _3049;
                            _3031 = _3327 + _3044;
                            _3032 = _3328 + _3045;
                            _3033 = _3329 + _3046;
                            if (_3051 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3036;
                                _3050 = _3051;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3036;
                        frontier_phi_72_pred_1 = _3035;
                        frontier_phi_72_pred_2 = _3034;
                        frontier_phi_72_pred_3 = _3033;
                        frontier_phi_72_pred_4 = _3032;
                        frontier_phi_72_pred_5 = _3031;
                    }
                    _2704 = frontier_phi_72_pred;
                    _2702 = frontier_phi_72_pred_1;
                    _2700 = frontier_phi_72_pred_2;
                    _2698 = frontier_phi_72_pred_3;
                    _2696 = frontier_phi_72_pred_4;
                    _2694 = frontier_phi_72_pred_5;
                    uint _2839 = _2838 + 1u;
                    if (_2839 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2832 = _2694;
                        _2833 = _2696;
                        _2834 = _2698;
                        _2835 = _2700;
                        _2836 = _2702;
                        _2837 = _2704;
                        _2838 = _2839;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2704;
                frontier_phi_60_61_ladder_1 = _2702;
                frontier_phi_60_61_ladder_2 = _2698;
                frontier_phi_60_61_ladder_3 = _2696;
                frontier_phi_60_61_ladder_4 = _2694;
                frontier_phi_60_61_ladder_5 = _2700;
            }
            else
            {
                frontier_phi_60_61_ladder = _2581;
                frontier_phi_60_61_ladder_1 = _2579;
                frontier_phi_60_61_ladder_2 = _2575;
                frontier_phi_60_61_ladder_3 = _2573;
                frontier_phi_60_61_ladder_4 = _2571;
                frontier_phi_60_61_ladder_5 = _2577;
            }
            _2693 = frontier_phi_60_61_ladder_4;
            _2695 = frontier_phi_60_61_ladder_3;
            _2697 = frontier_phi_60_61_ladder_2;
            _2699 = frontier_phi_60_61_ladder_5;
            _2701 = frontier_phi_60_61_ladder_1;
            _2703 = frontier_phi_60_61_ladder;
        }
        float _2708 = isnan(1.0) ? _456 : (isnan(_456) ? 1.0 : min(_456, 1.0));
        _2469 = (_2708 * _2699) + _2000;
        _2471 = (_2708 * _2701) + _2002;
        _2473 = (_2708 * _2703) + _2004;
        _2475 = ((_2693 * 0.039999999105930328369140625) * _2708) + _2323;
        _2477 = ((_2695 * 0.039999999105930328369140625) * _2708) + _2325;
        _2479 = ((_2697 * 0.039999999105930328369140625) * _2708) + _2327;
    }
    else
    {
        _2469 = _2000;
        _2471 = _2002;
        _2473 = _2004;
        _2475 = _2323;
        _2477 = _2325;
        _2479 = _2327;
    }
    uint _2485 = _432 + uint(cbMatDynParam._m0[0u].w);
    float _2493 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _283.x) * cbInstanceData._m0[_2485].x;
    float _2496 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _283.y) * cbInstanceData._m0[_2485].y;
    float _2499 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _283.z) * cbInstanceData._m0[_2485].z;
    float _4376 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _4387 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _4398 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _2516 = (((isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2469 + ((isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0))) * _456))) + ((_2475 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _1263)) * cbPerFrame._m0[3u].x)) + _2493;
    float _2518 = (_2496 + ((_2477 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _1263)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2471 + ((isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0))) * _456)));
    float _2520 = (_2499 + ((_2479 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _1263)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2473 + ((isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0))) * _456)));
    float _4424 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2533 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    uint _2534 = _430 + 6u;
    float _2542 = _389 / cbSceneParam._m0[86u].x;
    float _2543 = _390 / cbSceneParam._m0[86u].y;
    vec4 _2557 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2542, _2543, (log2((isnan(cbSceneParam._m0[77u].w) ? _323 : (isnan(_323) ? cbSceneParam._m0[77u].w : min(_323, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2559 = _2557.x;
    float _2560 = _2557.y;
    float _2561 = _2557.z;
    float _2562 = _2557.w;
    float _2634;
    float _2636;
    float _2638;
    float _2640;
    if (_323 > cbSceneParam._m0[78u].w)
    {
        float _2596 = isnan(_323) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _323 : min(cbSceneParam._m0[80u].w, _323));
        float _2597 = _2596 / _323;
        float _2608 = _2597 * _374;
        float _2609 = _375 * _2597;
        float _2610 = (-0.0) - _2609;
        float _2612 = _2597 * _376;
        float _2614 = (cbSceneParam._m0[77u].w * _2610) / _2596;
        float _2615 = _2614 + cbSceneParam._m0[79u].w;
        float _2616 = cbSceneParam._m0[79u].w - _2609;
        float _2622 = sqrt(((_2608 * _2608) + (_2609 * _2609)) + (_2612 * _2612));
        float _2625 = (1.0 - (cbSceneParam._m0[77u].w / _2596)) * _2622;
        float _2630 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2632 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2794;
        if (abs((_2610 - _2614) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2794 = ((((_2615 > 0.0) ? exp2(_2630 * _2615) : (2.0 - exp2(_2632 * _2615))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2625;
        }
        else
        {
            float _2754 = 1.0 / cbSceneParam._m0[80u].x;
            float _2755 = isnan(_2616) ? _2615 : (isnan(_2615) ? _2616 : max(_2615, _2616));
            float _2756 = isnan(_2616) ? _2615 : (isnan(_2615) ? _2616 : min(_2615, _2616));
            float _2765 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : min(_2755, 0.0));
            float _2766 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : min(_2756, 0.0));
            _2794 = ((abs(_2622 / _2610) * cbSceneParam._m0[80u].y) * ((((_2765 - _2766) * 2.0) - ((exp2(_2630 * (isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0)))) - exp2(_2630 * (isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0))))) * _2754)) - ((exp2(_2632 * _2765) - exp2(_2632 * _2766)) * _2754))) + (_2625 * cbSceneParam._m0[80u].z);
        }
        vec4 _2796 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2542, _2543, 1.0), 0.0);
        float _2805 = exp2((_2794 * (-1.44269502162933349609375)) * (1.0 - _2796.w));
        float _2806 = log2(_2805);
        float _2822 = log2(_2562);
        _2634 = (exp2(_2822 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2806 * cbSceneParam._m0[78u].x)) * _2796.x) / cbSceneParam._m0[78u].x)) + _2559;
        _2636 = (exp2(_2822 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2806 * cbSceneParam._m0[78u].y)) * _2796.y) / cbSceneParam._m0[78u].y)) + _2560;
        _2638 = (exp2(_2822 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2806 * cbSceneParam._m0[78u].z)) * _2796.z) / cbSceneParam._m0[78u].z)) + _2561;
        _2640 = _2805 * _2562;
    }
    else
    {
        _2634 = _2559;
        _2636 = _2560;
        _2638 = _2561;
        _2640 = _2562;
    }
    float _2652 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2653 = _2652 == 3.0;
    float _2654 = log2(_2640);
    float _2658 = exp2(_2654 * cbSceneParam._m0[78u].x);
    float _2659 = exp2(_2654 * cbSceneParam._m0[78u].y);
    float _2660 = exp2(_2654 * cbSceneParam._m0[78u].z);
    float _2661 = _2658 * (isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0)));
    float _2662 = _2659 * (isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0)));
    float _2663 = _2660 * (isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0)));
    float _2672 = (_2652 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2672 * (_2653 ? _2661 : (_2661 + (cbSceneParam._m0[72u].w * _2634)));
    SV_Target.y = _2672 * (_2653 ? _2662 : (_2662 + (cbSceneParam._m0[72u].w * _2636)));
    SV_Target.z = _2672 * (_2653 ? _2663 : (_2663 + (cbSceneParam._m0[72u].w * _2638)));
    SV_Target.w = cbInstanceData._m0[_2534].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2493) * _2533) * _2658) * _2672;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2496) * _2533) * _2659) * _2672;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2499) * _2533) * _2660) * _2672;
    SV_Target_1.w = cbInstanceData._m0[_2534].w;
}


