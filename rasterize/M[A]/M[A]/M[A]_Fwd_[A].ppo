#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _745;
float _2912;
float _2913;
float _2914;
float _2915;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _166 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _167 = _166 * NORMAL.x;
    float _168 = _166 * NORMAL.y;
    float _169 = _166 * NORMAL.z;
    float _174;
    float _175;
    float _176;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _174 = (-0.0) - _167;
        _175 = (-0.0) - _168;
        _176 = (-0.0) - _169;
    }
    else
    {
        _174 = _167;
        _175 = _168;
        _176 = _169;
    }
    vec4 _190 = texture(sampler2D(M_A_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _193 = _190.x;
    float _194 = _190.y;
    float _195 = _190.z;
    float _196 = _190.w;
    float _197 = _196 * TEXCOORD_1.z;
    float _201 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _202 = _201 * _174;
    float _203 = _201 * _175;
    float _204 = _201 * _176;
    float _2924 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _206 = isnan(1.0) ? _2924 : (isnan(_2924) ? 1.0 : min(_2924, 1.0));
    float _2935 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _2946 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _2957 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _225 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _268 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _278 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _268);
    float _279 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _268);
    float _280 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _268);
    float _284 = inversesqrt(dot(vec3(_278, _279, _280), vec3(_278, _279, _280)));
    float _285 = _278 * _284;
    float _286 = _279 * _284;
    float _287 = _280 * _284;
    vec4 _292 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _294 = _292.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _424 = sqrt(((_278 * _278) + (_279 * _279)) + (_280 * _280));
        float _430 = (cbMatDynParam._m0[5u].x * _424) + cbMatDynParam._m0[5u].y;
        float _2968 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
        float _431 = isnan(1.0) ? _2968 : (isnan(_2968) ? 1.0 : min(_2968, 1.0));
        float _435 = (cbMatDynParam._m0[5u].z * _424) + cbMatDynParam._m0[5u].w;
        float _2979 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2979 : (isnan(_2979) ? 1.0 : min(_2979, 1.0))) - _431)) + _431) < ((_294 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _306 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _307 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _327 = fma(_204, cbSceneParam._m0[5u].z, fma(_203, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _202));
    float _330 = fma(_204, cbSceneParam._m0[6u].z, fma(_203, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _202));
    float _333 = fma(_204, cbSceneParam._m0[7u].z, fma(_203, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _202));
    uint _346 = uint(roundEven(NORMAL.w)) * 13u;
    uint _348 = _346 + 9u;
    uint _349 = _348 + uint(cbMatDynParam._m0[0u].w);
    float _355 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2935 : (isnan(_2935) ? 1.0 : min(_2935, 1.0)))) * cbInstanceData._m0[_349].x;
    float _356 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2946 : (isnan(_2946) ? 1.0 : min(_2946, 1.0)))) * cbInstanceData._m0[_349].y;
    float _357 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2957 : (isnan(_2957) ? 1.0 : min(_2957, 1.0)))) * cbInstanceData._m0[_349].z;
    float _2990 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _358 = isnan(1.0) ? _2990 : (isnan(_2990) ? 1.0 : min(_2990, 1.0));
    float _3001 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _359 = isnan(1.0) ? _3001 : (isnan(_3001) ? 1.0 : min(_3001, 1.0));
    float _3012 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _360 = isnan(1.0) ? _3012 : (isnan(_3012) ? 1.0 : min(_3012, 1.0));
    vec4 _369 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _306, cbSceneParam._m0[86u].y * _307));
    float _372 = _369.x * TEXCOORD_1.w;
    float _373 = dot(vec3(_202, _203, _204), vec3(_285, _286, _287));
    float _376 = _373 * 2.0;
    float _381 = (_376 * _202) - _285;
    float _382 = (_376 * _203) - _286;
    float _383 = (_376 * _204) - _287;
    float _405 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _409 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _413 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _744;
    float _746;
    float _747;
    float _748;
    float _749;
    float _750;
    float _751;
    float _752;
    float _753;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _469 = fma(_413, cbModelParam._m0[26u].z, fma(_409, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _405));
        float _473 = fma(_413, cbModelParam._m0[27u].z, fma(_409, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _405));
        float _477 = fma(_413, cbModelParam._m0[28u].z, fma(_409, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _405));
        float _502 = _405 + _202;
        float _503 = _409 + _203;
        float _504 = _413 + _204;
        float _514 = fma(_504, cbModelParam._m0[26u].z, fma(_503, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _502)) - _469;
        float _515 = fma(_504, cbModelParam._m0[27u].z, fma(_503, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _502)) - _473;
        float _516 = fma(_504, cbModelParam._m0[28u].z, fma(_503, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _502)) - _477;
        float _520 = inversesqrt(dot(vec3(_514, _515, _516), vec3(_514, _515, _516)));
        float _533 = ((_520 * _514) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_469 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _534 = ((_520 * _515) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_473 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _535 = ((_520 * _516) / cbModelParam._m0[34u].z) + ((((((_477 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _538 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_533, _534, _535), 0.0);
        vec4 _545 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_533, _534, _535), 0.0);
        vec4 _552 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_533, _534, _535), 0.0);
        vec4 _559 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_533, _534, _535), 0.0);
        float _572 = exp2((_538.w + (-0.5)) * 20.0) * 2.0;
        float _573 = _572 * (_538.x + (-0.5));
        float _574 = _572 * (_538.y + (-0.5));
        float _575 = _572 * (_538.z + (-0.5));
        float _582 = exp2((_545.w + (-0.5)) * 20.0) * 2.0;
        float _583 = _582 * (_545.x + (-0.5));
        float _584 = _582 * (_545.y + (-0.5));
        float _585 = _582 * (_545.z + (-0.5));
        float _592 = exp2((_552.w + (-0.5)) * 20.0) * 2.0;
        float _593 = _592 * (_552.x + (-0.5));
        float _594 = _592 * (_552.y + (-0.5));
        float _595 = _592 * (_552.z + (-0.5));
        float _602 = exp2((_559.w + (-0.5)) * 20.0) * 2.0;
        float _603 = _602 * (_559.x + (-0.5));
        float _604 = _602 * (_559.y + (-0.5));
        float _605 = _602 * (_559.z + (-0.5));
        float _606 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
        float _607 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
        float _608 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
        float _609 = _573 * 0.5;
        float _610 = _583 * 0.5;
        float _611 = _593 * 0.5;
        float _612 = dot(vec3(_609, _610, _611), vec3(_609, _610, _611));
        float _617 = (_612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_612);
        float _626 = (dot(vec3(_202, _203, _204), vec3(_617 * _609, _617 * _610, _617 * _611)) + 1.0) * 0.5;
        float _3038 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
        float _636 = sqrt(((_610 * _610) + (_609 * _609)) + (_611 * _611)) / (_606 + 9.9999997473787516355514526367188e-06);
        float _3049 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
        float _637 = isnan(1.0) ? _3049 : (isnan(_3049) ? 1.0 : min(_3049, 1.0));
        float _638 = _637 * 2.0;
        float _642 = (1.0 - _637) / (_637 + 1.0);
        float _3060 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
        float _643 = isnan(1.0) ? _3060 : (isnan(_3060) ? 1.0 : min(_3060, 1.0));
        float _652 = ((((1.0 - _643) * (_638 + 2.0)) * exp2(log2(isnan(1.0) ? _3038 : (isnan(_3038) ? 1.0 : min(_3038, 1.0))) * (_638 + 1.0))) + _643) * _606;
        float _653 = _574 * 0.5;
        float _654 = _584 * 0.5;
        float _655 = _594 * 0.5;
        float _656 = dot(vec3(_653, _654, _655), vec3(_653, _654, _655));
        float _661 = (_656 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_656);
        float _669 = (dot(vec3(_202, _203, _204), vec3(_661 * _653, _661 * _654, _661 * _655)) + 1.0) * 0.5;
        float _3071 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
        float _678 = sqrt(((_654 * _654) + (_653 * _653)) + (_655 * _655)) / (_607 + 9.9999997473787516355514526367188e-06);
        float _3082 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _679 = isnan(1.0) ? _3082 : (isnan(_3082) ? 1.0 : min(_3082, 1.0));
        float _680 = _679 * 2.0;
        float _684 = (1.0 - _679) / (_679 + 1.0);
        float _3093 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
        float _685 = isnan(1.0) ? _3093 : (isnan(_3093) ? 1.0 : min(_3093, 1.0));
        float _694 = ((((1.0 - _685) * (_680 + 2.0)) * exp2(log2(isnan(1.0) ? _3071 : (isnan(_3071) ? 1.0 : min(_3071, 1.0))) * (_680 + 1.0))) + _685) * _607;
        float _695 = _575 * 0.5;
        float _696 = _585 * 0.5;
        float _697 = _595 * 0.5;
        float _698 = dot(vec3(_695, _696, _697), vec3(_695, _696, _697));
        float _703 = (_698 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_698);
        float _711 = (dot(vec3(_202, _203, _204), vec3(_703 * _695, _703 * _696, _703 * _697)) + 1.0) * 0.5;
        float _3104 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _720 = sqrt(((_696 * _696) + (_695 * _695)) + (_697 * _697)) / (_608 + 9.9999997473787516355514526367188e-06);
        float _3115 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _721 = isnan(1.0) ? _3115 : (isnan(_3115) ? 1.0 : min(_3115, 1.0));
        float _722 = _721 * 2.0;
        float _726 = (1.0 - _721) / (_721 + 1.0);
        float _3126 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _727 = isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0));
        float _736 = ((((1.0 - _727) * (_722 + 2.0)) * exp2(log2(isnan(1.0) ? _3104 : (isnan(_3104) ? 1.0 : min(_3104, 1.0))) * (_722 + 1.0))) + _727) * _608;
        _744 = _575;
        _746 = _574;
        _747 = _573;
        _748 = _585;
        _749 = _584;
        _750 = _583;
        _751 = _595;
        _752 = _594;
        _753 = _593;
        _754 = _608;
        _755 = _607;
        _756 = _606;
        _757 = cbModelParam._m0[36u].z * (isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0)));
        _758 = cbModelParam._m0[36u].z * (isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0)));
        _759 = cbModelParam._m0[36u].z * (isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0)));
    }
    else
    {
        _744 = _745;
        _746 = _745;
        _747 = _745;
        _748 = _745;
        _749 = _745;
        _750 = _745;
        _751 = _745;
        _752 = _745;
        _753 = _745;
        _754 = _745;
        _755 = _745;
        _756 = _745;
        _757 = 0.0;
        _758 = 0.0;
        _759 = 0.0;
    }
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _788 = fma(_413, cbModelParam._m0[30u].z, fma(_409, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _405));
        float _792 = fma(_413, cbModelParam._m0[31u].z, fma(_409, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _405));
        float _796 = fma(_413, cbModelParam._m0[32u].z, fma(_409, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _405));
        float _819 = _405 + _202;
        float _820 = _409 + _203;
        float _821 = _413 + _204;
        float _831 = fma(_821, cbModelParam._m0[30u].z, fma(_820, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _819)) - _788;
        float _832 = fma(_821, cbModelParam._m0[31u].z, fma(_820, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _819)) - _792;
        float _833 = fma(_821, cbModelParam._m0[32u].z, fma(_820, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _819)) - _796;
        float _837 = inversesqrt(dot(vec3(_831, _832, _833), vec3(_831, _832, _833)));
        float _850 = ((_837 * _831) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_788 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _851 = ((_837 * _832) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_792 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _852 = ((_837 * _833) / cbModelParam._m0[35u].z) + ((((((_796 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        float _887 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_854.x + (-0.5));
        float _889 = _887 * (_854.y + (-0.5));
        float _890 = _887 * (_854.z + (-0.5));
        float _897 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_861.x + (-0.5));
        float _899 = _897 * (_861.y + (-0.5));
        float _900 = _897 * (_861.z + (-0.5));
        float _907 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_868.x + (-0.5));
        float _909 = _907 * (_868.y + (-0.5));
        float _910 = _907 * (_868.z + (-0.5));
        float _917 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_875.x + (-0.5));
        float _919 = _917 * (_875.y + (-0.5));
        float _920 = _917 * (_875.z + (-0.5));
        float _921 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = _888 * 0.5;
        float _925 = _898 * 0.5;
        float _926 = _908 * 0.5;
        float _927 = dot(vec3(_924, _925, _926), vec3(_924, _925, _926));
        float _932 = (_927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_927);
        float _940 = (dot(vec3(_202, _203, _204), vec3(_932 * _924, _932 * _925, _932 * _926)) + 1.0) * 0.5;
        float _3167 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _949 = sqrt(((_925 * _925) + (_924 * _924)) + (_926 * _926)) / (_921 + 9.9999997473787516355514526367188e-06);
        float _3178 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3178 : (isnan(_3178) ? 1.0 : min(_3178, 1.0));
        float _951 = _950 * 2.0;
        float _955 = (1.0 - _950) / (_950 + 1.0);
        float _3189 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3189 : (isnan(_3189) ? 1.0 : min(_3189, 1.0));
        float _965 = ((((1.0 - _956) * (_951 + 2.0)) * exp2(log2(isnan(1.0) ? _3167 : (isnan(_3167) ? 1.0 : min(_3167, 1.0))) * (_951 + 1.0))) + _956) * _921;
        float _966 = _889 * 0.5;
        float _967 = _899 * 0.5;
        float _968 = _909 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _982 = (dot(vec3(_202, _203, _204), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3200 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _991 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3211 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3222 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3200 : (isnan(_3200) ? 1.0 : min(_3200, 1.0))) * (_993 + 1.0))) + _998) * _922;
        float _1008 = _890 * 0.5;
        float _1009 = _900 * 0.5;
        float _1010 = _910 * 0.5;
        float _1011 = dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010));
        float _1016 = (_1011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1011);
        float _1024 = (dot(vec3(_202, _203, _204), vec3(_1016 * _1008, _1016 * _1009, _1016 * _1010)) + 1.0) * 0.5;
        float _3233 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1033 = sqrt(((_1009 * _1009) + (_1008 * _1008)) + (_1010 * _1010)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3244 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _3255 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0))) * (_1035 + 1.0))) + _1040) * _923;
        _1057 = _890;
        _1058 = _889;
        _1059 = _888;
        _1060 = _900;
        _1061 = _899;
        _1062 = _898;
        _1063 = _910;
        _1064 = _909;
        _1065 = _908;
        _1066 = _923;
        _1067 = _922;
        _1068 = _921;
        _1069 = cbModelParam._m0[36u].w * (isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0)));
        _1070 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
        _1071 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
    }
    else
    {
        _1057 = _745;
        _1058 = _745;
        _1059 = _745;
        _1060 = _745;
        _1061 = _745;
        _1062 = _745;
        _1063 = _745;
        _1064 = _745;
        _1065 = _745;
        _1066 = _745;
        _1067 = _745;
        _1068 = _745;
        _1069 = 0.0;
        _1070 = 0.0;
        _1071 = 0.0;
    }
    float _1081 = (cbModelParam._m0[1u].x * (_1069 - _757)) + _757;
    float _1082 = (cbModelParam._m0[1u].x * (_1070 - _758)) + _758;
    float _1083 = (cbModelParam._m0[1u].x * (_1071 - _759)) + _759;
    float _1104 = fma(_1083, cbSceneParam._m0[89u].z, fma(_1082, cbSceneParam._m0[89u].y, _1081 * cbSceneParam._m0[89u].x));
    float _1107 = fma(_1083, cbSceneParam._m0[90u].z, fma(_1082, cbSceneParam._m0[90u].y, _1081 * cbSceneParam._m0[90u].x));
    float _1110 = fma(_1083, cbSceneParam._m0[91u].z, fma(_1082, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1081));
    float _1125 = _381 * 0.5;
    float _1126 = _382 * 0.5;
    float _1127 = _383 * 0.5;
    float _1128 = dot(vec4(_1125, _1126, _1127, 1.0), vec4(_1059, _1062, _1065, _1068));
    float _1131 = dot(vec4(_1125, _1126, _1127, 1.0), vec4(_1058, _1061, _1064, _1067));
    float _1134 = dot(vec4(_1125, _1126, _1127, 1.0), vec4(_1057, _1060, _1063, _1066));
    float _1168;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1141 = dot(vec4(_1125, _1126, _1127, 1.0), vec4(_744, _748, _751, _754));
        float _1145 = dot(vec4(_1125, _1126, _1127, 1.0), vec4(_746, _749, _752, _755));
        float _1149 = dot(vec4(_1125, _1126, _1127, 1.0), vec4(_747, _750, _753, _756));
        float _1156 = dot(vec4(cbModelParam._m0[39u]), vec4(_1125, _1126, _1127, 1.0));
        _1168 = dot(vec3(isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)), isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)), isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1156) ? 0.0 : (isnan(0.0) ? _1156 : max(0.0, _1156))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1168 = 1.0;
    }
    float _1179;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1170 = dot(vec4(cbModelParam._m0[40u]), vec4(_1125, _1126, _1127, 1.0));
        _1179 = dot(vec3(isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)), isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)), isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1170) ? 0.0 : (isnan(0.0) ? _1170 : max(0.0, _1170))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1179 = 1.0;
    }
    float _1183 = (_1179 * cbModelParam._m0[1u].x) + (_1168 * (1.0 - cbModelParam._m0[1u].x));
    float _1192 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1274;
    float _1276;
    float _1278;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1241 = fma(_413, cbModelParam._m0[13u].z, fma(_409, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _405)) + cbModelParam._m0[13u].w;
        float _1245 = fma(_413, cbModelParam._m0[14u].z, fma(_409, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _405)) + cbModelParam._m0[14u].w;
        float _1249 = fma(_413, cbModelParam._m0[15u].z, fma(_409, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _405)) + cbModelParam._m0[15u].w;
        float _1252 = fma(_383, cbModelParam._m0[13u].z, fma(_382, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _381));
        float _1255 = fma(_383, cbModelParam._m0[14u].z, fma(_382, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _381));
        float _1258 = fma(_383, cbModelParam._m0[15u].z, fma(_382, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _381));
        float _1284;
        if (_1252 > 0.0)
        {
            _1284 = abs((1.0 - _1241) / _1252);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1252 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1241 + 1.0) / _1252);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1284 = frontier_phi_19_17_ladder;
        }
        float _1492;
        if (_1255 > 0.0)
        {
            _1492 = abs((1.0 - _1245) / _1255);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1255 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1245 + 1.0) / _1255);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1492 = frontier_phi_28_24_ladder;
        }
        float _1681;
        if (_1258 > 0.0)
        {
            _1681 = abs((1.0 - _1249) / _1258);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1258 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1249 + 1.0) / _1258);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1681 = frontier_phi_40_35_ladder;
        }
        float _1683 = isnan(_1492) ? _1284 : (isnan(_1284) ? _1492 : min(_1284, _1492));
        float _1684 = isnan(_1681) ? _1683 : (isnan(_1683) ? _1681 : min(_1683, _1681));
        float _1688 = (_1684 * _1252) + _1241;
        float _1689 = (_1684 * _1255) + _1245;
        float _1690 = (_1684 * _1258) + _1249;
        float _1691 = _1684 * 9.9999997473787516355514526367188e-05;
        float _1693 = (-1.0) - _1691;
        float _1695 = _1691 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1690 > _1695) || ((_1690 < _1693) || ((_1689 > _1695) || ((_1689 < _1693) || ((_1688 < _1693) || (_1688 > _1695))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1787 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1690, cbModelParam._m0[9u].z, fma(_1689, cbModelParam._m0[9u].y, _1688 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1690, cbModelParam._m0[10u].z, fma(_1689, cbModelParam._m0[10u].y, _1688 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1690, cbModelParam._m0[11u].z, fma(_1689, cbModelParam._m0[11u].y, _1688 * cbModelParam._m0[11u].x))), _1192);
            frontier_phi_18_40_ladder = _1787.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1787.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1787.x * cbModelParam._m0[1u].y;
        }
        _1274 = frontier_phi_18_40_ladder_2;
        _1276 = frontier_phi_18_40_ladder_1;
        _1278 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1262 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_381, _382, _383), _1192);
        _1274 = _1262.x * cbModelParam._m0[1u].y;
        _1276 = _1262.y * cbModelParam._m0[1u].y;
        _1278 = _1262.z * cbModelParam._m0[1u].y;
    }
    float _1281 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1374;
    float _1376;
    float _1378;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1338 = fma(_413, cbModelParam._m0[21u].z, fma(_409, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _405)) + cbModelParam._m0[21u].w;
        float _1342 = fma(_413, cbModelParam._m0[22u].z, fma(_409, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _405)) + cbModelParam._m0[22u].w;
        float _1346 = fma(_413, cbModelParam._m0[23u].z, fma(_409, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _405)) + cbModelParam._m0[23u].w;
        float _1349 = fma(_383, cbModelParam._m0[21u].z, fma(_382, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _381));
        float _1352 = fma(_383, cbModelParam._m0[22u].z, fma(_382, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _381));
        float _1355 = fma(_383, cbModelParam._m0[23u].z, fma(_382, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _381));
        float _1497;
        if (_1349 > 0.0)
        {
            _1497 = abs((1.0 - _1338) / _1349);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1349 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1338 + 1.0) / _1349);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1497 = frontier_phi_30_26_ladder;
        }
        float _1708;
        if (_1352 > 0.0)
        {
            _1708 = abs((1.0 - _1342) / _1352);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1352 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1342 + 1.0) / _1352);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1708 = frontier_phi_42_37_ladder;
        }
        float _1859;
        if (_1355 > 0.0)
        {
            _1859 = abs((1.0 - _1346) / _1355);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1355 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1346 + 1.0) / _1355);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1859 = frontier_phi_51_48_ladder;
        }
        float _1861 = isnan(_1708) ? _1497 : (isnan(_1497) ? _1708 : min(_1497, _1708));
        float _1862 = isnan(_1859) ? _1861 : (isnan(_1861) ? _1859 : min(_1861, _1859));
        float _1866 = (_1862 * _1349) + _1338;
        float _1867 = (_1862 * _1352) + _1342;
        float _1868 = (_1862 * _1355) + _1346;
        float _1869 = _1862 * 9.9999997473787516355514526367188e-05;
        float _1870 = (-1.0) - _1869;
        float _1872 = _1869 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1868 > _1872) || ((_1868 < _1870) || ((_1867 > _1872) || ((_1867 < _1870) || ((_1866 < _1870) || (_1866 > _1872))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2068 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1868, cbModelParam._m0[17u].z, fma(_1867, cbModelParam._m0[17u].y, _1866 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1868, cbModelParam._m0[18u].z, fma(_1867, cbModelParam._m0[18u].y, _1866 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1868, cbModelParam._m0[19u].z, fma(_1867, cbModelParam._m0[19u].y, _1866 * cbModelParam._m0[19u].x))), _1281);
            frontier_phi_27_51_ladder = _2068.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2068.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2068.x * cbModelParam._m0[1u].z;
        }
        _1374 = frontier_phi_27_51_ladder_2;
        _1376 = frontier_phi_27_51_ladder_1;
        _1378 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1358 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_381, _382, _383), _1281);
        _1374 = _1358.x * cbModelParam._m0[1u].z;
        _1376 = _1358.y * cbModelParam._m0[1u].z;
        _1378 = _1358.z * cbModelParam._m0[1u].z;
    }
    float _1390 = _372 * 0.01200000010430812835693359375;
    float _1392 = _1390 * ((cbModelParam._m0[1u].w * (_1374 - _1274)) + _1274);
    float _1393 = _1390 * ((cbModelParam._m0[1u].w * (_1376 - _1276)) + _1276);
    float _1394 = _1390 * ((cbModelParam._m0[1u].w * (_1378 - _1278)) + _1278);
    float _1397 = fma(_1394, cbSceneParam._m0[89u].z, fma(_1393, cbSceneParam._m0[89u].y, _1392 * cbSceneParam._m0[89u].x));
    float _1400 = fma(_1394, cbSceneParam._m0[90u].z, fma(_1393, cbSceneParam._m0[90u].y, _1392 * cbSceneParam._m0[90u].x));
    float _1403 = fma(_1394, cbSceneParam._m0[91u].z, fma(_1393, cbSceneParam._m0[91u].y, _1392 * cbSceneParam._m0[91u].x));
    uvec4 _1413 = floatBitsToUint(cbInstanceData._m0[_346 + 5u]);
    uint _1415 = _1413.x * 14u;
    uint _1416 = _1415 + 13u;
    float _1423 = _372 + (-1.0);
    float _1429 = (cbLight._m0[_1416].x * _1423) + 1.0;
    float _1430 = (cbLight._m0[_1416].y * _1423) + 1.0;
    float _1431 = (cbLight._m0[_1416].z * _1423) + 1.0;
    float _1432 = (cbLight._m0[_1416].w * _1423) + 1.0;
    uint _1433 = _1415 + 5u;
    float _1439 = isnan(1.0) ? _1430 : (isnan(_1430) ? 1.0 : min(_1430, 1.0));
    uint _1443 = _1415 + 4u;
    float _1450 = isnan(1.0) ? _1429 : (isnan(_1429) ? 1.0 : min(_1429, 1.0));
    uint _1454 = _1415 | 1u;
    float _1465 = dot(vec3(cbLight._m0[_1415].xyz), vec3(_202, _203, _204));
    float _1468 = dot(vec3(cbLight._m0[_1454].xyz), vec3(_202, _203, _204));
    float _3391 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
    float _3402 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
    float _1473 = (isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0))) * 0.3183098733425140380859375;
    float _1475 = (isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0))) * 0.3183098733425140380859375;
    float _1482 = ((cbLight._m0[_1433].x * _1439) * _1475) + ((cbLight._m0[_1443].x * _1450) * _1473);
    float _1483 = ((_1439 * cbLight._m0[_1433].y) * _1475) + ((_1450 * cbLight._m0[_1443].y) * _1473);
    float _1484 = ((_1439 * cbLight._m0[_1433].z) * _1475) + ((_1450 * cbLight._m0[_1443].z) * _1473);
    uvec4 _1489 = floatBitsToUint(cbLight._m0[_1415 + 12u]);
    bool _1491 = _1489.x == 0u;
    float _1502;
    float _1504;
    float _1506;
    if (_1491)
    {
        _1502 = _1482;
        _1504 = _1483;
        _1506 = _1484;
    }
    else
    {
        uint _1510 = _1415 + 6u;
        float _1526 = (dot(vec3(cbLight._m0[_1415 + 2u].xyz), vec3(_202, _203, _204)) * 0.5) + 0.5;
        float _1527 = _1526 * _1526;
        float _3413 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
        float _1529 = isnan(1.0) ? _1431 : (isnan(_1431) ? 1.0 : min(_1431, 1.0));
        _1502 = (((cbLight._m0[_1510].x * 0.3183098733425140380859375) * _1528) * _1529) + _1482;
        _1504 = (((cbLight._m0[_1510].y * 0.3183098733425140380859375) * _1528) * _1529) + _1483;
        _1506 = (((cbLight._m0[_1510].z * 0.3183098733425140380859375) * _1528) * _1529) + _1484;
    }
    bool _1509 = _1489.y == 0u;
    float _1547;
    float _1549;
    float _1551;
    if (_1509)
    {
        _1547 = _1502;
        _1549 = _1504;
        _1551 = _1506;
    }
    else
    {
        uint _1652 = _1415 + 7u;
        float _1668 = (dot(vec3(cbLight._m0[_1415 + 3u].xyz), vec3(_202, _203, _204)) * 0.5) + 0.5;
        float _1669 = _1668 * _1668;
        float _3429 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _1671 = isnan(1.0) ? _1432 : (isnan(_1432) ? 1.0 : min(_1432, 1.0));
        _1547 = (((cbLight._m0[_1652].x * 0.3183098733425140380859375) * _1670) * _1671) + _1502;
        _1549 = (((cbLight._m0[_1652].y * 0.3183098733425140380859375) * _1670) * _1671) + _1504;
        _1551 = (((cbLight._m0[_1652].z * 0.3183098733425140380859375) * _1670) * _1671) + _1506;
    }
    uint _1553 = _1415 + 8u;
    float _1559 = cbLight._m0[_1415].x + _285;
    float _1560 = cbLight._m0[_1415].y + _286;
    float _1561 = cbLight._m0[_1415].z + _287;
    float _1565 = inversesqrt(dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561)));
    float _1569 = dot(vec3(_202, _203, _204), vec3(cbLight._m0[_1415].xyz));
    float _3445 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
    float _1572 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    float _3456 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _1573 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    float _1574 = dot(vec3(cbLight._m0[_1415].xyz), vec3(_1559 * _1565, _1560 * _1565, _1561 * _1565));
    float _3467 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
    float _1585 = (exp2(log2(1.0 - (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1591 = (0.5 / ((_1572 + 9.9999999392252902907785028219223e-09) + _1573)) * _1572;
    float _3478 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
    float _1593 = (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) * 0.31831014156341552734375;
    uint _1604 = _1415 + 9u;
    float _1610 = cbLight._m0[_1454].x + _285;
    float _1611 = cbLight._m0[_1454].y + _286;
    float _1612 = cbLight._m0[_1454].z + _287;
    float _1616 = inversesqrt(dot(vec3(_1610, _1611, _1612), vec3(_1610, _1611, _1612)));
    float _1620 = dot(vec3(_202, _203, _204), vec3(cbLight._m0[_1454].xyz));
    float _3489 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
    float _1623 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    float _1624 = dot(vec3(cbLight._m0[_1454].xyz), vec3(_1610 * _1616, _1611 * _1616, _1612 * _1616));
    float _3500 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
    float _1633 = (exp2(log2(1.0 - (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1637 = (0.5 / ((_1623 + 9.9999999392252902907785028219223e-09) + _1573)) * _1623;
    float _3511 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
    float _1639 = (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * 0.31831014156341552734375;
    float _1649 = (((_1633 * cbLight._m0[_1604].x) * _1639) * _1439) + (((_1585 * cbLight._m0[_1553].x) * _1593) * _1450);
    float _1650 = (((_1633 * cbLight._m0[_1604].y) * _1639) * _1439) + (((_1585 * cbLight._m0[_1553].y) * _1593) * _1450);
    float _1651 = (((_1633 * cbLight._m0[_1604].z) * _1639) * _1439) + (((_1585 * cbLight._m0[_1553].z) * _1593) * _1450);
    float _1713;
    float _1715;
    float _1717;
    if (_1491)
    {
        _1713 = _1649;
        _1715 = _1650;
        _1717 = _1651;
    }
    else
    {
        uint _1719 = _1415 + 10u;
        uint _1725 = _1415 + 2u;
        float _1731 = cbLight._m0[_1725].x + _285;
        float _1732 = cbLight._m0[_1725].y + _286;
        float _1733 = cbLight._m0[_1725].z + _287;
        float _1737 = inversesqrt(dot(vec3(_1731, _1732, _1733), vec3(_1731, _1732, _1733)));
        float _1741 = dot(vec3(_202, _203, _204), vec3(cbLight._m0[_1725].xyz));
        float _3522 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1744 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _1745 = dot(vec3(cbLight._m0[_1725].xyz), vec3(_1731 * _1737, _1732 * _1737, _1733 * _1737));
        float _3533 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1754 = (exp2(log2(1.0 - (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1758 = (0.5 / ((_1744 + 9.9999999392252902907785028219223e-09) + _1573)) * _1744;
        float _3544 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1760 = (isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * 0.31831014156341552734375;
        float _1761 = isnan(1.0) ? _1431 : (isnan(_1431) ? 1.0 : min(_1431, 1.0));
        _1713 = (((_1754 * cbLight._m0[_1719].x) * _1760) * _1761) + _1649;
        _1715 = (((_1754 * cbLight._m0[_1719].y) * _1760) * _1761) + _1650;
        _1717 = (((_1754 * cbLight._m0[_1719].z) * _1760) * _1761) + _1651;
    }
    float _1796;
    float _1798;
    float _1800;
    if (_1509)
    {
        _1796 = _1713;
        _1798 = _1715;
        _1800 = _1717;
    }
    else
    {
        uint _1807 = _1415 + 11u;
        uint _1813 = _1415 + 3u;
        float _1819 = cbLight._m0[_1813].x + _285;
        float _1820 = cbLight._m0[_1813].y + _286;
        float _1821 = cbLight._m0[_1813].z + _287;
        float _1825 = inversesqrt(dot(vec3(_1819, _1820, _1821), vec3(_1819, _1820, _1821)));
        float _1829 = dot(vec3(_202, _203, _204), vec3(cbLight._m0[_1813].xyz));
        float _3560 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1832 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _1833 = dot(vec3(cbLight._m0[_1813].xyz), vec3(_1819 * _1825, _1820 * _1825, _1821 * _1825));
        float _3571 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1842 = (exp2(log2(1.0 - (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1846 = (0.5 / ((_1832 + 9.9999999392252902907785028219223e-09) + _1573)) * _1832;
        float _3582 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1848 = (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * 0.31831014156341552734375;
        float _1849 = isnan(1.0) ? _1432 : (isnan(_1432) ? 1.0 : min(_1432, 1.0));
        _1796 = (((_1842 * cbLight._m0[_1807].x) * _1848) * _1849) + _1713;
        _1798 = (((_1842 * cbLight._m0[_1807].y) * _1848) * _1849) + _1715;
        _1800 = (((_1842 * cbLight._m0[_1807].z) * _1848) * _1849) + _1717;
    }
    float _1983;
    float _1985;
    float _1987;
    float _1989;
    float _1991;
    float _1993;
    if (_1413.y == 0u)
    {
        float _1924 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1925 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1924;
        float _1926 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1924;
        float _1927 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1924;
        uvec4 _1939 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1940 = _1939.x;
        uint _1951 = uint((float(_1939.y) * floor(float(uint(cbSceneParam._m0[85u].y * _307) / _1940))) + floor(float(uint(cbSceneParam._m0[85u].x * _306) / _1940)));
        float _1961 = (log2(_1927 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1962 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
        uint _1965 = uint(isnan(14.0) ? _1962 : (isnan(_1962) ? 14.0 : min(_1962, 14.0)));
        uvec4 _1970 = texelFetch(g_lightClusterGridBuffer, int(((_1965 << 2u) + (_1951 << 6u)) >> 2u));
        uint _1971 = _1970.x;
        uint _1972 = _1939.z;
        float _2073;
        float _2075;
        float _2077;
        float _2079;
        float _2081;
        float _2083;
        if (((((1u << ((_1972 >> 4u) & 15u)) + 4294967295u) & _1971) == 0u) || ((_1972 & 240u) == 0u))
        {
            _2073 = 0.0;
            _2075 = 0.0;
            _2077 = 0.0;
            _2079 = 0.0;
            _2081 = 0.0;
            _2083 = 0.0;
        }
        else
        {
            float _2074;
            float _2076;
            float _2078;
            float _2080;
            float _2082;
            float _2084;
            float _2224 = 0.0;
            float _2225 = 0.0;
            float _2226 = 0.0;
            float _2227 = 0.0;
            float _2228 = 0.0;
            float _2229 = 0.0;
            uint _2230 = 0u;
            uint _2239;
            bool _2240;
            for (;;)
            {
                _2239 = texelFetch(g_lightClassification, int((((_1965 << 5u) + (_1951 << 9u)) + (_2230 << 2u)) >> 2u)).x;
                _2240 = _2239 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2240)
                {
                    frontier_phi_68_pred = _2226;
                    frontier_phi_68_pred_1 = _2229;
                    frontier_phi_68_pred_2 = _2228;
                    frontier_phi_68_pred_3 = _2227;
                    frontier_phi_68_pred_4 = _2225;
                    frontier_phi_68_pred_5 = _2224;
                }
                else
                {
                    float _2369;
                    float _2370;
                    float _2371;
                    float _2372;
                    float _2373;
                    float _2374;
                    uint _2375;
                    _2369 = _2224;
                    _2370 = _2225;
                    _2371 = _2226;
                    _2372 = _2227;
                    _2373 = _2228;
                    _2374 = _2229;
                    _2375 = _2239;
                    float _2296;
                    float _2297;
                    float _2298;
                    float _2299;
                    float _2300;
                    float _2301;
                    for (;;)
                    {
                        uint _2379 = uint(findLSB(_2375)) + (_2230 << 5u);
                        uint _2376 = (_2375 + 4294967295u) & _2375;
                        uint _2381 = _2379 * 48u;
                        vec4 _2395 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2381)).x, texelFetch(g_PointLightRenderingBuffer, int(_2381 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2381 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2381 + 3u)).x));
                        uint _2401 = (_2379 * 48u) + 4u;
                        vec4 _2414 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2401)).x, texelFetch(g_PointLightRenderingBuffer, int(_2401 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2401 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2401 + 3u)).x));
                        uint _2420 = (_2379 * 48u) + 8u;
                        vec3 _2431 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2420)).x, texelFetch(g_PointLightRenderingBuffer, int(_2420 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2420 + 2u)).x));
                        float _2435 = _2395.x - _1925;
                        float _2436 = _2395.y - _1926;
                        float _2437 = _2395.z - _1927;
                        float _2438 = dot(vec3(_2435, _2436, _2437), vec3(_2435, _2436, _2437));
                        float _2441 = inversesqrt(_2438);
                        float _2450 = 1.0 - (_2438 * _2395.w);
                        float _3608 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
                        float _2451 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
                        float _2452 = sqrt(_2438) * _2414.w;
                        float _2455 = 1.39999997615814208984375 / (_2452 + 1.39999997615814208984375);
                        float _2456 = _2455 * _2455;
                        float _2459 = ((1.0 - _2456) * dot(vec3(_327, _330, _333), vec3(_2441 * _2435, _2441 * _2436, _2441 * _2437))) + _2456;
                        float _2462 = _2452 * _2452;
                        float _2466 = ((isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0))) * _2451) / ((_2462 * 0.699999988079071044921875) + 1.0);
                        float _2470 = (-0.0) - _1925;
                        float _2471 = (-0.0) - _1926;
                        float _2472 = (-0.0) - _1927;
                        float _2476 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
                        float _2480 = dot(vec3(_327, _330, _333), vec3(_2476 * _2470, _2476 * _2471, _2476 * _2472));
                        float _3624 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
                        float _3635 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
                        float _2484 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
                        float _2488 = (0.5 / (((isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) + 9.9999999392252902907785028219223e-09) + _2484)) * _2484;
                        float _3646 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
                        float _2497 = (((isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * 3.1415927410125732421875) / ((_2462 * 2.1991131305694580078125) + 3.141590118408203125)) * _2451;
                        _2299 = (_2466 * _2414.x) + _2372;
                        _2300 = (_2466 * _2414.y) + _2373;
                        _2301 = (_2466 * _2414.z) + _2374;
                        _2296 = (_2497 * _2431.x) + _2369;
                        _2297 = (_2497 * _2431.y) + _2370;
                        _2298 = (_2497 * _2431.z) + _2371;
                        if (_2376 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2369 = _2296;
                            _2370 = _2297;
                            _2371 = _2298;
                            _2372 = _2299;
                            _2373 = _2300;
                            _2374 = _2301;
                            _2375 = _2376;
                        }
                    }
                    frontier_phi_68_pred = _2298;
                    frontier_phi_68_pred_1 = _2301;
                    frontier_phi_68_pred_2 = _2300;
                    frontier_phi_68_pred_3 = _2299;
                    frontier_phi_68_pred_4 = _2297;
                    frontier_phi_68_pred_5 = _2296;
                }
                _2078 = frontier_phi_68_pred;
                _2084 = frontier_phi_68_pred_1;
                _2082 = frontier_phi_68_pred_2;
                _2080 = frontier_phi_68_pred_3;
                _2076 = frontier_phi_68_pred_4;
                _2074 = frontier_phi_68_pred_5;
                uint _2231 = _2230 + 1u;
                if (_2231 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2224 = _2074;
                    _2225 = _2076;
                    _2226 = _2078;
                    _2227 = _2080;
                    _2228 = _2082;
                    _2229 = _2084;
                    _2230 = _2231;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2073 = _2074;
            _2075 = _2076;
            _2077 = _2078;
            _2079 = _2080;
            _2081 = _2082;
            _2083 = _2084;
        }
        uvec4 _2087 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2088 = _2087.z;
        uint _2090 = (_2088 >> 8u) & 15u;
        float _2195;
        float _2197;
        float _2199;
        float _2201;
        float _2203;
        float _2205;
        if (((4294967295u << _2090) & _1971) == 0u)
        {
            _2195 = _2073;
            _2197 = _2075;
            _2199 = _2077;
            _2201 = _2079;
            _2203 = _2081;
            _2205 = _2083;
        }
        else
        {
            float _2220 = inversesqrt(dot(vec3(_1925, _1926, _1927), vec3(_1925, _1926, _1927)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2090 < ((_2088 >> 12u) & 15u))
            {
                float _2196;
                float _2198;
                float _2200;
                float _2202;
                float _2204;
                float _2206;
                float _2352 = _2073;
                float _2353 = _2075;
                float _2354 = _2077;
                float _2355 = _2079;
                float _2356 = _2081;
                float _2357 = _2083;
                uint _2358 = _2090;
                uint _2367;
                bool _2368;
                for (;;)
                {
                    _2367 = texelFetch(g_lightClassification, int((((_1965 << 5u) + (_1951 << 9u)) + (_2358 << 2u)) >> 2u)).x;
                    _2368 = _2367 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2368)
                    {
                        frontier_phi_79_pred = _2357;
                        frontier_phi_79_pred_1 = _2356;
                        frontier_phi_79_pred_2 = _2355;
                        frontier_phi_79_pred_3 = _2354;
                        frontier_phi_79_pred_4 = _2353;
                        frontier_phi_79_pred_5 = _2352;
                    }
                    else
                    {
                        float _2511;
                        float _2512;
                        float _2513;
                        float _2514;
                        float _2515;
                        float _2516;
                        float _2763;
                        float _2764;
                        float _2765;
                        float _2766;
                        float _2767;
                        float _2768;
                        float _2524 = _2352;
                        float _2525 = _2353;
                        float _2526 = _2354;
                        float _2527 = _2355;
                        float _2528 = _2356;
                        float _2529 = _2357;
                        uint _2530 = _2367;
                        uint _2531;
                        vec4 _2556;
                        float _2557;
                        vec4 _2572;
                        vec3 _2584;
                        vec4 _2600;
                        vec4 _2616;
                        float _2663;
                        bool _2664;
                        for (;;)
                        {
                            uint _2541 = ((_2358 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2530));
                            _2531 = (_2530 + 4294967295u) & _2530;
                            uint _2543 = _2541 * 40u;
                            _2556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2543 + 3u)).x));
                            _2557 = _2556.w;
                            uint _2559 = (_2541 * 40u) + 4u;
                            _2572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2559 + 3u)).x));
                            uint _2574 = (_2541 * 40u) + 8u;
                            _2584 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2574 + 2u)).x));
                            uint _2587 = (_2541 * 40u) + 16u;
                            _2600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2587 + 3u)).x));
                            uint _2603 = (_2541 * 40u) + 20u;
                            _2616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2603 + 3u)).x));
                            uint _2619 = (_2541 * 40u) + 24u;
                            vec4 _2632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2619 + 3u)).x));
                            uint _2638 = (_2541 * 40u) + 28u;
                            vec4 _2651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 3u)).x));
                            _2663 = fma(_1927, _2651.z, fma(_1926, _2651.y, _2651.x * _1925)) + _2651.w;
                            _2664 = !((fma(_1927, _2632.z, fma(_1926, _2632.y, _2632.x * _1925)) + _2632.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2664)
                            {
                                float _2691 = _2556.x - _1925;
                                float _2692 = _2556.y - _1926;
                                float _2693 = _2556.z - _1927;
                                float _2694 = dot(vec3(_2691, _2692, _2693), vec3(_2691, _2692, _2693));
                                float _2697 = inversesqrt(_2694);
                                float _2698 = _2697 * _2691;
                                float _2699 = _2697 * _2692;
                                float _2700 = _2697 * _2693;
                                float _2704 = 1.0 - (_2694 / (_2557 * _2557));
                                float _3657 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
                                float _2705 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
                                float _2709 = sqrt(_2694) * _2572.w;
                                float _2711 = 1.39999997615814208984375 / (_2709 + 1.39999997615814208984375);
                                float _2712 = _2711 * _2711;
                                float _2713 = 1.0 - _2712;
                                float _2715 = (_2713 * dot(vec3(_2698, _2699, _2700), vec3(_327, _330, _333))) + _2712;
                                float _2718 = _2709 * _2709;
                                float _2722 = (fma(_1927, _2600.z, fma(_1926, _2600.y, _2600.x * _1925)) + _2600.w) / _2663;
                                float _2723 = (fma(_1927, _2616.z, fma(_1926, _2616.y, _2616.x * _1925)) + _2616.w) / _2663;
                                float _2727 = 1.0 - dot(vec2(_2722, _2723), vec2(_2722, _2723));
                                float _3673 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
                                float _2728 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
                                float _2729 = _2728 * (((isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0))) * _2705) / ((_2718 * 0.699999988079071044921875) + 1.0));
                                float _2739 = dot(vec3(_327, _330, _333), vec3((-0.0) - (_1925 * _2220), (-0.0) - (_1926 * _2220), (-0.0) - (_1927 * _2220)));
                                float _3684 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                                float _2747 = (_2713 * dot(vec3(_327, _330, _333), vec3(_2698, _2699, _2700))) + _2712;
                                float _3695 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
                                float _2748 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
                                float _2752 = (0.5 / (((isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) + 9.9999999392252902907785028219223e-09) + _2748)) * _2748;
                                float _3706 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
                                float _2759 = (_2728 * _2705) * (((isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * 3.1415927410125732421875) / ((_2718 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2729 * _2572.z;
                                frontier_phi_85_pred_1 = _2729 * _2572.y;
                                frontier_phi_85_pred_2 = _2729 * _2572.x;
                                frontier_phi_85_pred_3 = _2759 * _2584.z;
                                frontier_phi_85_pred_4 = _2759 * _2584.y;
                                frontier_phi_85_pred_5 = _2759 * _2584.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2768 = frontier_phi_85_pred;
                            _2767 = frontier_phi_85_pred_1;
                            _2766 = frontier_phi_85_pred_2;
                            _2765 = frontier_phi_85_pred_3;
                            _2764 = frontier_phi_85_pred_4;
                            _2763 = frontier_phi_85_pred_5;
                            _2514 = _2766 + _2527;
                            _2515 = _2767 + _2528;
                            _2516 = _2768 + _2529;
                            _2511 = _2763 + _2524;
                            _2512 = _2764 + _2525;
                            _2513 = _2765 + _2526;
                            if (_2531 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2524 = _2511;
                                _2525 = _2512;
                                _2526 = _2513;
                                _2527 = _2514;
                                _2528 = _2515;
                                _2529 = _2516;
                                _2530 = _2531;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2516;
                        frontier_phi_79_pred_1 = _2515;
                        frontier_phi_79_pred_2 = _2514;
                        frontier_phi_79_pred_3 = _2513;
                        frontier_phi_79_pred_4 = _2512;
                        frontier_phi_79_pred_5 = _2511;
                    }
                    _2206 = frontier_phi_79_pred;
                    _2204 = frontier_phi_79_pred_1;
                    _2202 = frontier_phi_79_pred_2;
                    _2200 = frontier_phi_79_pred_3;
                    _2198 = frontier_phi_79_pred_4;
                    _2196 = frontier_phi_79_pred_5;
                    uint _2359 = _2358 + 1u;
                    if (_2359 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2352 = _2196;
                        _2353 = _2198;
                        _2354 = _2200;
                        _2355 = _2202;
                        _2356 = _2204;
                        _2357 = _2206;
                        _2358 = _2359;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2202;
                frontier_phi_60_61_ladder_1 = _2206;
                frontier_phi_60_61_ladder_2 = _2204;
                frontier_phi_60_61_ladder_3 = _2200;
                frontier_phi_60_61_ladder_4 = _2198;
                frontier_phi_60_61_ladder_5 = _2196;
            }
            else
            {
                frontier_phi_60_61_ladder = _2079;
                frontier_phi_60_61_ladder_1 = _2083;
                frontier_phi_60_61_ladder_2 = _2081;
                frontier_phi_60_61_ladder_3 = _2077;
                frontier_phi_60_61_ladder_4 = _2075;
                frontier_phi_60_61_ladder_5 = _2073;
            }
            _2195 = frontier_phi_60_61_ladder_5;
            _2197 = frontier_phi_60_61_ladder_4;
            _2199 = frontier_phi_60_61_ladder_3;
            _2201 = frontier_phi_60_61_ladder;
            _2203 = frontier_phi_60_61_ladder_2;
            _2205 = frontier_phi_60_61_ladder_1;
        }
        float _2210 = isnan(1.0) ? _372 : (isnan(_372) ? 1.0 : min(_372, 1.0));
        _1983 = (_2210 * _2201) + _1547;
        _1985 = (_2210 * _2203) + _1549;
        _1987 = (_2210 * _2205) + _1551;
        _1989 = ((_2195 * 0.039999999105930328369140625) * _2210) + _1796;
        _1991 = ((_2197 * 0.039999999105930328369140625) * _2210) + _1798;
        _1993 = ((_2199 * 0.039999999105930328369140625) * _2210) + _1800;
    }
    else
    {
        _1983 = _1547;
        _1985 = _1549;
        _1987 = _1551;
        _1989 = _1796;
        _1991 = _1798;
        _1993 = _1800;
    }
    float _3722 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _3733 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _3744 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _3755 = isnan(0.0) ? _206 : (isnan(_206) ? 0.0 : max(_206, 0.0));
    float _2011 = ((isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1983 + ((isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0))) * _372))) + ((_1989 + ((isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))) * _1183)) * cbPerFrame._m0[3u].x);
    float _2012 = ((isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1985 + ((isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0))) * _372))) + ((_1991 + ((isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))) * _1183)) * cbPerFrame._m0[3u].x);
    float _2013 = ((isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * (_1987 + ((isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0))) * _372))) + ((_1993 + ((isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))) * _1183)) * cbPerFrame._m0[3u].x);
    float _2018 = cbInstanceData._m0[_346 + 6u].w * (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0)));
    float _2023 = _306 / cbSceneParam._m0[86u].x;
    float _2024 = _307 / cbSceneParam._m0[86u].y;
    vec4 _2038 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2023, _2024, (log2((isnan(cbSceneParam._m0[77u].w) ? _225 : (isnan(_225) ? cbSceneParam._m0[77u].w : min(_225, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2040 = _2038.x;
    float _2041 = _2038.y;
    float _2042 = _2038.z;
    float _2043 = _2038.w;
    float _2135;
    float _2137;
    float _2139;
    float _2141;
    if (_225 > cbSceneParam._m0[78u].w)
    {
        float _2098 = isnan(_225) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _225 : min(cbSceneParam._m0[80u].w, _225));
        float _2099 = _2098 / _225;
        float _2110 = _2099 * _278;
        float _2111 = _279 * _2099;
        float _2112 = (-0.0) - _2111;
        float _2113 = _2099 * _280;
        float _2115 = (cbSceneParam._m0[77u].w * _2112) / _2098;
        float _2116 = _2115 + cbSceneParam._m0[79u].w;
        float _2117 = cbSceneParam._m0[79u].w - _2111;
        float _2123 = sqrt(((_2110 * _2110) + (_2111 * _2111)) + (_2113 * _2113));
        float _2126 = (1.0 - (cbSceneParam._m0[77u].w / _2098)) * _2123;
        float _2131 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2133 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2309;
        if (abs((_2112 - _2115) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2309 = ((((_2116 > 0.0) ? exp2(_2131 * _2116) : (2.0 - exp2(_2133 * _2116))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2126;
        }
        else
        {
            float _2253 = 1.0 / cbSceneParam._m0[80u].x;
            float _2254 = isnan(_2117) ? _2116 : (isnan(_2116) ? _2117 : max(_2116, _2117));
            float _2255 = isnan(_2117) ? _2116 : (isnan(_2116) ? _2117 : min(_2116, _2117));
            float _2264 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : min(_2254, 0.0));
            float _2265 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : min(_2255, 0.0));
            _2309 = ((abs(_2123 / _2112) * cbSceneParam._m0[80u].y) * ((((_2264 - _2265) * 2.0) - ((exp2(_2131 * (isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0)))) - exp2(_2131 * (isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0))))) * _2253)) - ((exp2(_2133 * _2264) - exp2(_2133 * _2265)) * _2253))) + (_2126 * cbSceneParam._m0[80u].z);
        }
        vec4 _2311 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2023, _2024, 1.0), 0.0);
        float _2320 = exp2((_2309 * (-1.44269502162933349609375)) * (1.0 - _2311.w));
        float _2321 = log2(_2320);
        float _2337 = log2(_2043);
        _2135 = (exp2(_2337 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2321 * cbSceneParam._m0[78u].x)) * _2311.x) / cbSceneParam._m0[78u].x)) + _2040;
        _2137 = (exp2(_2337 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2321 * cbSceneParam._m0[78u].y)) * _2311.y) / cbSceneParam._m0[78u].y)) + _2041;
        _2139 = (exp2(_2337 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2321 * cbSceneParam._m0[78u].z)) * _2311.z) / cbSceneParam._m0[78u].z)) + _2042;
        _2141 = _2320 * _2043;
    }
    else
    {
        _2135 = _2040;
        _2137 = _2041;
        _2139 = _2042;
        _2141 = _2043;
    }
    bool _2347;
    vec4 _2151;
    vec4 _2174;
    float _2176;
    float _2180;
    float _2181;
    float _2182;
    float _2183;
    bool _2194;
    for (;;)
    {
        _2151 = cbMatDynParam._m0[0u];
        float _2153 = roundEven(_2151.y);
        bool _2154 = _2153 == 3.0;
        float _2156 = log2(_2141);
        float _2163 = exp2(_2156 * cbSceneParam._m0[78u].x) * _2011;
        float _2164 = exp2(_2156 * cbSceneParam._m0[78u].y) * _2012;
        float _2165 = exp2(_2156 * cbSceneParam._m0[78u].z) * _2013;
        float _2172 = _294 + (-0.5);
        _2174 = cbMtdParam._m0[1u];
        _2176 = _2174.y * _2172;
        float _2179 = (_2153 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2180 = _2179 * (_2154 ? _2163 : (_2163 + (cbSceneParam._m0[72u].w * _2135)));
        _2181 = _2179 * (_2154 ? _2164 : (_2164 + (cbSceneParam._m0[72u].w * _2137)));
        _2182 = _2179 * (_2154 ? _2165 : (_2165 + (cbSceneParam._m0[72u].w * _2139)));
        _2183 = _2172 * 0.999000012874603271484375;
        _2194 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2194)
        {
            if ((cbInstanceData._m0[_346 + 7u].x + _2183) < 0.5)
            {
                _2347 = true;
                break;
            }
        }
        uint _2288 = _348 + uint(_2151.w);
        if ((cbInstanceData._m0[_2288].w < 1.0) && ((cbInstanceData._m0[_2288].w + _2183) < 0.5))
        {
            _2347 = true;
            break;
        }
        if ((_2176 + _196) < _2174.x)
        {
            _2347 = true;
            break;
        }
        _2347 = false;
        break;
    }
    float _2502;
    if (_2347)
    {
        discard_state = true;
        _2502 = 0.0;
    }
    else
    {
        _2502 = _2018;
    }
    SV_Target.x = _2180;
    SV_Target.y = _2181;
    SV_Target.z = _2182;
    SV_Target.w = _2502;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2018;
    discard_exit();
}


