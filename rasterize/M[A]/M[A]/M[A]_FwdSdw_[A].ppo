#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _749;
float _3200;
float _3201;
float _3202;
float _3203;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _170 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _171 = _170 * NORMAL.x;
    float _172 = _170 * NORMAL.y;
    float _173 = _170 * NORMAL.z;
    float _178;
    float _179;
    float _180;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _178 = (-0.0) - _171;
        _179 = (-0.0) - _172;
        _180 = (-0.0) - _173;
    }
    else
    {
        _178 = _171;
        _179 = _172;
        _180 = _173;
    }
    vec4 _194 = texture(sampler2D(M_A_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _197 = _194.x;
    float _198 = _194.y;
    float _199 = _194.z;
    float _200 = _194.w;
    float _201 = _200 * TEXCOORD_1.z;
    float _205 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _206 = _205 * _178;
    float _207 = _205 * _179;
    float _208 = _205 * _180;
    float _3212 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _210 = isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0));
    float _3223 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _3234 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _3245 = isnan(0.0) ? _199 : (isnan(_199) ? 0.0 : max(_199, 0.0));
    float _229 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _272 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _282 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _272);
    float _283 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _272);
    float _284 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _272);
    float _288 = inversesqrt(dot(vec3(_282, _283, _284), vec3(_282, _283, _284)));
    float _289 = _282 * _288;
    float _290 = _283 * _288;
    float _291 = _284 * _288;
    vec4 _296 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _298 = _296.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _428 = sqrt(((_282 * _282) + (_283 * _283)) + (_284 * _284));
        float _434 = (cbMatDynParam._m0[5u].x * _428) + cbMatDynParam._m0[5u].y;
        float _3256 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
        float _435 = isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0));
        float _439 = (cbMatDynParam._m0[5u].z * _428) + cbMatDynParam._m0[5u].w;
        float _3267 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0))) - _435)) + _435) < ((_298 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _310 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _311 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _331 = fma(_208, cbSceneParam._m0[5u].z, fma(_207, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _206));
    float _334 = fma(_208, cbSceneParam._m0[6u].z, fma(_207, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _206));
    float _337 = fma(_208, cbSceneParam._m0[7u].z, fma(_207, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _206));
    uint _350 = uint(roundEven(NORMAL.w)) * 13u;
    uint _352 = _350 + 9u;
    uint _353 = _352 + uint(cbMatDynParam._m0[0u].w);
    float _359 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0)))) * cbInstanceData._m0[_353].x;
    float _360 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0)))) * cbInstanceData._m0[_353].y;
    float _361 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0)))) * cbInstanceData._m0[_353].z;
    float _3278 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _362 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
    float _3289 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _363 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
    float _3300 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _364 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
    vec4 _373 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _310, cbSceneParam._m0[86u].y * _311));
    float _376 = _373.x * TEXCOORD_1.w;
    float _377 = dot(vec3(_206, _207, _208), vec3(_289, _290, _291));
    float _380 = _377 * 2.0;
    float _385 = (_380 * _206) - _289;
    float _386 = (_380 * _207) - _290;
    float _387 = (_380 * _208) - _291;
    float _409 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _413 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _417 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _748;
    float _750;
    float _751;
    float _752;
    float _753;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _473 = fma(_417, cbModelParam._m0[26u].z, fma(_413, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _409));
        float _477 = fma(_417, cbModelParam._m0[27u].z, fma(_413, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _409));
        float _481 = fma(_417, cbModelParam._m0[28u].z, fma(_413, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _409));
        float _506 = _409 + _206;
        float _507 = _413 + _207;
        float _508 = _417 + _208;
        float _518 = fma(_508, cbModelParam._m0[26u].z, fma(_507, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _506)) - _473;
        float _519 = fma(_508, cbModelParam._m0[27u].z, fma(_507, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _506)) - _477;
        float _520 = fma(_508, cbModelParam._m0[28u].z, fma(_507, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _506)) - _481;
        float _524 = inversesqrt(dot(vec3(_518, _519, _520), vec3(_518, _519, _520)));
        float _537 = ((_524 * _518) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_473 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _538 = ((_524 * _519) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_477 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _539 = ((_524 * _520) / cbModelParam._m0[34u].z) + ((((((_481 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _542 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_537, _538, _539), 0.0);
        vec4 _549 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_537, _538, _539), 0.0);
        vec4 _556 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_537, _538, _539), 0.0);
        vec4 _563 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_537, _538, _539), 0.0);
        float _576 = exp2((_542.w + (-0.5)) * 20.0) * 2.0;
        float _577 = _576 * (_542.x + (-0.5));
        float _578 = _576 * (_542.y + (-0.5));
        float _579 = _576 * (_542.z + (-0.5));
        float _586 = exp2((_549.w + (-0.5)) * 20.0) * 2.0;
        float _587 = _586 * (_549.x + (-0.5));
        float _588 = _586 * (_549.y + (-0.5));
        float _589 = _586 * (_549.z + (-0.5));
        float _596 = exp2((_556.w + (-0.5)) * 20.0) * 2.0;
        float _597 = _596 * (_556.x + (-0.5));
        float _598 = _596 * (_556.y + (-0.5));
        float _599 = _596 * (_556.z + (-0.5));
        float _606 = exp2((_563.w + (-0.5)) * 20.0) * 2.0;
        float _607 = _606 * (_563.x + (-0.5));
        float _608 = _606 * (_563.y + (-0.5));
        float _609 = _606 * (_563.z + (-0.5));
        float _610 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
        float _611 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
        float _612 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
        float _613 = _577 * 0.5;
        float _614 = _587 * 0.5;
        float _615 = _597 * 0.5;
        float _616 = dot(vec3(_613, _614, _615), vec3(_613, _614, _615));
        float _621 = (_616 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_616);
        float _630 = (dot(vec3(_206, _207, _208), vec3(_621 * _613, _621 * _614, _621 * _615)) + 1.0) * 0.5;
        float _3326 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
        float _640 = sqrt(((_614 * _614) + (_613 * _613)) + (_615 * _615)) / (_610 + 9.9999997473787516355514526367188e-06);
        float _3337 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
        float _641 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
        float _642 = _641 * 2.0;
        float _646 = (1.0 - _641) / (_641 + 1.0);
        float _3348 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        float _647 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
        float _656 = ((((1.0 - _647) * (_642 + 2.0)) * exp2(log2(isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0))) * (_642 + 1.0))) + _647) * _610;
        float _657 = _578 * 0.5;
        float _658 = _588 * 0.5;
        float _659 = _598 * 0.5;
        float _660 = dot(vec3(_657, _658, _659), vec3(_657, _658, _659));
        float _665 = (_660 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_660);
        float _673 = (dot(vec3(_206, _207, _208), vec3(_665 * _657, _665 * _658, _665 * _659)) + 1.0) * 0.5;
        float _3359 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
        float _682 = sqrt(((_658 * _658) + (_657 * _657)) + (_659 * _659)) / (_611 + 9.9999997473787516355514526367188e-06);
        float _3370 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _683 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
        float _684 = _683 * 2.0;
        float _688 = (1.0 - _683) / (_683 + 1.0);
        float _3381 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _689 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
        float _698 = ((((1.0 - _689) * (_684 + 2.0)) * exp2(log2(isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0))) * (_684 + 1.0))) + _689) * _611;
        float _699 = _579 * 0.5;
        float _700 = _589 * 0.5;
        float _701 = _599 * 0.5;
        float _702 = dot(vec3(_699, _700, _701), vec3(_699, _700, _701));
        float _707 = (_702 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_702);
        float _715 = (dot(vec3(_206, _207, _208), vec3(_707 * _699, _707 * _700, _707 * _701)) + 1.0) * 0.5;
        float _3392 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _724 = sqrt(((_700 * _700) + (_699 * _699)) + (_701 * _701)) / (_612 + 9.9999997473787516355514526367188e-06);
        float _3403 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _725 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
        float _726 = _725 * 2.0;
        float _730 = (1.0 - _725) / (_725 + 1.0);
        float _3414 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _731 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
        float _740 = ((((1.0 - _731) * (_726 + 2.0)) * exp2(log2(isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))) * (_726 + 1.0))) + _731) * _612;
        _748 = _579;
        _750 = _578;
        _751 = _577;
        _752 = _589;
        _753 = _588;
        _754 = _587;
        _755 = _599;
        _756 = _598;
        _757 = _597;
        _758 = _612;
        _759 = _611;
        _760 = _610;
        _761 = cbModelParam._m0[36u].z * (isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0)));
        _762 = cbModelParam._m0[36u].z * (isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0)));
        _763 = cbModelParam._m0[36u].z * (isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0)));
    }
    else
    {
        _748 = _749;
        _750 = _749;
        _751 = _749;
        _752 = _749;
        _753 = _749;
        _754 = _749;
        _755 = _749;
        _756 = _749;
        _757 = _749;
        _758 = _749;
        _759 = _749;
        _760 = _749;
        _761 = 0.0;
        _762 = 0.0;
        _763 = 0.0;
    }
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _792 = fma(_417, cbModelParam._m0[30u].z, fma(_413, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _409));
        float _796 = fma(_417, cbModelParam._m0[31u].z, fma(_413, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _409));
        float _800 = fma(_417, cbModelParam._m0[32u].z, fma(_413, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _409));
        float _823 = _409 + _206;
        float _824 = _413 + _207;
        float _825 = _417 + _208;
        float _835 = fma(_825, cbModelParam._m0[30u].z, fma(_824, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _823)) - _792;
        float _836 = fma(_825, cbModelParam._m0[31u].z, fma(_824, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _823)) - _796;
        float _837 = fma(_825, cbModelParam._m0[32u].z, fma(_824, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _823)) - _800;
        float _841 = inversesqrt(dot(vec3(_835, _836, _837), vec3(_835, _836, _837)));
        float _854 = ((_841 * _835) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_792 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _855 = ((_841 * _836) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_796 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _856 = ((_841 * _837) / cbModelParam._m0[35u].z) + ((((((_800 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        float _891 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_858.x + (-0.5));
        float _893 = _891 * (_858.y + (-0.5));
        float _894 = _891 * (_858.z + (-0.5));
        float _901 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_865.x + (-0.5));
        float _903 = _901 * (_865.y + (-0.5));
        float _904 = _901 * (_865.z + (-0.5));
        float _911 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_872.x + (-0.5));
        float _913 = _911 * (_872.y + (-0.5));
        float _914 = _911 * (_872.z + (-0.5));
        float _921 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_879.x + (-0.5));
        float _923 = _921 * (_879.y + (-0.5));
        float _924 = _921 * (_879.z + (-0.5));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = _892 * 0.5;
        float _929 = _902 * 0.5;
        float _930 = _912 * 0.5;
        float _931 = dot(vec3(_928, _929, _930), vec3(_928, _929, _930));
        float _936 = (_931 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_931);
        float _944 = (dot(vec3(_206, _207, _208), vec3(_936 * _928, _936 * _929, _936 * _930)) + 1.0) * 0.5;
        float _3455 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _953 = sqrt(((_929 * _929) + (_928 * _928)) + (_930 * _930)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3466 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _955 = _954 * 2.0;
        float _959 = (1.0 - _954) / (_954 + 1.0);
        float _3477 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
        float _969 = ((((1.0 - _960) * (_955 + 2.0)) * exp2(log2(isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))) * (_955 + 1.0))) + _960) * _925;
        float _970 = _893 * 0.5;
        float _971 = _903 * 0.5;
        float _972 = _913 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _986 = (dot(vec3(_206, _207, _208), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3488 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _995 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _3499 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _3510 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * (_997 + 1.0))) + _1002) * _926;
        float _1012 = _894 * 0.5;
        float _1013 = _904 * 0.5;
        float _1014 = _914 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1028 = (dot(vec3(_206, _207, _208), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3521 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1037 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3532 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _3543 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * (_1039 + 1.0))) + _1044) * _927;
        _1061 = _894;
        _1062 = _893;
        _1063 = _892;
        _1064 = _904;
        _1065 = _903;
        _1066 = _902;
        _1067 = _914;
        _1068 = _913;
        _1069 = _912;
        _1070 = _927;
        _1071 = _926;
        _1072 = _925;
        _1073 = cbModelParam._m0[36u].w * (isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0)));
        _1074 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
        _1075 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
    }
    else
    {
        _1061 = _749;
        _1062 = _749;
        _1063 = _749;
        _1064 = _749;
        _1065 = _749;
        _1066 = _749;
        _1067 = _749;
        _1068 = _749;
        _1069 = _749;
        _1070 = _749;
        _1071 = _749;
        _1072 = _749;
        _1073 = 0.0;
        _1074 = 0.0;
        _1075 = 0.0;
    }
    float _1085 = (cbModelParam._m0[1u].x * (_1073 - _761)) + _761;
    float _1086 = (cbModelParam._m0[1u].x * (_1074 - _762)) + _762;
    float _1087 = (cbModelParam._m0[1u].x * (_1075 - _763)) + _763;
    float _1108 = fma(_1087, cbSceneParam._m0[89u].z, fma(_1086, cbSceneParam._m0[89u].y, _1085 * cbSceneParam._m0[89u].x));
    float _1111 = fma(_1087, cbSceneParam._m0[90u].z, fma(_1086, cbSceneParam._m0[90u].y, _1085 * cbSceneParam._m0[90u].x));
    float _1114 = fma(_1087, cbSceneParam._m0[91u].z, fma(_1086, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1085));
    float _1129 = _385 * 0.5;
    float _1130 = _386 * 0.5;
    float _1131 = _387 * 0.5;
    float _1132 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_1063, _1066, _1069, _1072));
    float _1135 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_1062, _1065, _1068, _1071));
    float _1138 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_1061, _1064, _1067, _1070));
    float _1172;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1145 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_748, _752, _755, _758));
        float _1149 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_750, _753, _756, _759));
        float _1153 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_751, _754, _757, _760));
        float _1160 = dot(vec4(cbModelParam._m0[39u]), vec4(_1129, _1130, _1131, 1.0));
        _1172 = dot(vec3(isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)), isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)), isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1160) ? 0.0 : (isnan(0.0) ? _1160 : max(0.0, _1160))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1172 = 1.0;
    }
    float _1183;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1174 = dot(vec4(cbModelParam._m0[40u]), vec4(_1129, _1130, _1131, 1.0));
        _1183 = dot(vec3(isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)), isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)), isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1174) ? 0.0 : (isnan(0.0) ? _1174 : max(0.0, _1174))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1183 = 1.0;
    }
    float _1187 = (_1183 * cbModelParam._m0[1u].x) + (_1172 * (1.0 - cbModelParam._m0[1u].x));
    float _1196 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1278;
    float _1280;
    float _1282;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1245 = fma(_417, cbModelParam._m0[13u].z, fma(_413, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _409)) + cbModelParam._m0[13u].w;
        float _1249 = fma(_417, cbModelParam._m0[14u].z, fma(_413, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _409)) + cbModelParam._m0[14u].w;
        float _1253 = fma(_417, cbModelParam._m0[15u].z, fma(_413, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _409)) + cbModelParam._m0[15u].w;
        float _1256 = fma(_387, cbModelParam._m0[13u].z, fma(_386, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _385));
        float _1259 = fma(_387, cbModelParam._m0[14u].z, fma(_386, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _385));
        float _1262 = fma(_387, cbModelParam._m0[15u].z, fma(_386, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _385));
        float _1288;
        if (_1256 > 0.0)
        {
            _1288 = abs((1.0 - _1245) / _1256);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1256 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1245 + 1.0) / _1256);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1288 = frontier_phi_19_17_ladder;
        }
        float _1463;
        if (_1259 > 0.0)
        {
            _1463 = abs((1.0 - _1249) / _1259);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1259 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1249 + 1.0) / _1259);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1463 = frontier_phi_28_24_ladder;
        }
        float _1760;
        if (_1262 > 0.0)
        {
            _1760 = abs((1.0 - _1253) / _1262);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1262 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1253 + 1.0) / _1262);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1760 = frontier_phi_40_35_ladder;
        }
        float _1762 = isnan(_1463) ? _1288 : (isnan(_1288) ? _1463 : min(_1288, _1463));
        float _1763 = isnan(_1760) ? _1762 : (isnan(_1762) ? _1760 : min(_1762, _1760));
        float _1767 = (_1763 * _1256) + _1245;
        float _1768 = (_1763 * _1259) + _1249;
        float _1769 = (_1763 * _1262) + _1253;
        float _1770 = _1763 * 9.9999997473787516355514526367188e-05;
        float _1772 = (-1.0) - _1770;
        float _1774 = _1770 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1769 > _1774) || ((_1769 < _1772) || ((_1768 > _1774) || ((_1768 < _1772) || ((_1767 < _1772) || (_1767 > _1774))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1914 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1769, cbModelParam._m0[9u].z, fma(_1768, cbModelParam._m0[9u].y, _1767 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1769, cbModelParam._m0[10u].z, fma(_1768, cbModelParam._m0[10u].y, _1767 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1769, cbModelParam._m0[11u].z, fma(_1768, cbModelParam._m0[11u].y, _1767 * cbModelParam._m0[11u].x))), _1196);
            frontier_phi_18_40_ladder = _1914.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1914.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1914.x * cbModelParam._m0[1u].y;
        }
        _1278 = frontier_phi_18_40_ladder_2;
        _1280 = frontier_phi_18_40_ladder_1;
        _1282 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1266 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_385, _386, _387), _1196);
        _1278 = _1266.x * cbModelParam._m0[1u].y;
        _1280 = _1266.y * cbModelParam._m0[1u].y;
        _1282 = _1266.z * cbModelParam._m0[1u].y;
    }
    float _1285 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1378;
    float _1380;
    float _1382;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1342 = fma(_417, cbModelParam._m0[21u].z, fma(_413, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _409)) + cbModelParam._m0[21u].w;
        float _1346 = fma(_417, cbModelParam._m0[22u].z, fma(_413, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _409)) + cbModelParam._m0[22u].w;
        float _1350 = fma(_417, cbModelParam._m0[23u].z, fma(_413, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _409)) + cbModelParam._m0[23u].w;
        float _1353 = fma(_387, cbModelParam._m0[21u].z, fma(_386, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _385));
        float _1356 = fma(_387, cbModelParam._m0[22u].z, fma(_386, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _385));
        float _1359 = fma(_387, cbModelParam._m0[23u].z, fma(_386, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _385));
        float _1468;
        if (_1353 > 0.0)
        {
            _1468 = abs((1.0 - _1342) / _1353);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1353 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1342 + 1.0) / _1353);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1468 = frontier_phi_30_26_ladder;
        }
        float _1787;
        if (_1356 > 0.0)
        {
            _1787 = abs((1.0 - _1346) / _1356);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1346 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1787 = frontier_phi_42_37_ladder;
        }
        float _2060;
        if (_1359 > 0.0)
        {
            _2060 = abs((1.0 - _1350) / _1359);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1359 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1350 + 1.0) / _1359);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2060 = frontier_phi_52_49_ladder;
        }
        float _2062 = isnan(_1787) ? _1468 : (isnan(_1468) ? _1787 : min(_1468, _1787));
        float _2063 = isnan(_2060) ? _2062 : (isnan(_2062) ? _2060 : min(_2062, _2060));
        float _2067 = (_2063 * _1353) + _1342;
        float _2068 = (_2063 * _1356) + _1346;
        float _2069 = (_2063 * _1359) + _1350;
        float _2070 = _2063 * 9.9999997473787516355514526367188e-05;
        float _2071 = (-1.0) - _2070;
        float _2073 = _2070 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2069 > _2073) || ((_2069 < _2071) || ((_2068 > _2073) || ((_2068 < _2071) || ((_2067 < _2071) || (_2067 > _2073))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2160 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2069, cbModelParam._m0[17u].z, fma(_2068, cbModelParam._m0[17u].y, _2067 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2069, cbModelParam._m0[18u].z, fma(_2068, cbModelParam._m0[18u].y, _2067 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2069, cbModelParam._m0[19u].z, fma(_2068, cbModelParam._m0[19u].y, _2067 * cbModelParam._m0[19u].x))), _1285);
            frontier_phi_27_52_ladder = _2160.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2160.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2160.x * cbModelParam._m0[1u].z;
        }
        _1378 = frontier_phi_27_52_ladder_2;
        _1380 = frontier_phi_27_52_ladder_1;
        _1382 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1362 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_385, _386, _387), _1285);
        _1378 = _1362.x * cbModelParam._m0[1u].z;
        _1380 = _1362.y * cbModelParam._m0[1u].z;
        _1382 = _1362.z * cbModelParam._m0[1u].z;
    }
    float _1394 = _376 * 0.01200000010430812835693359375;
    float _1396 = _1394 * ((cbModelParam._m0[1u].w * (_1378 - _1278)) + _1278);
    float _1397 = _1394 * ((cbModelParam._m0[1u].w * (_1380 - _1280)) + _1280);
    float _1398 = _1394 * ((cbModelParam._m0[1u].w * (_1382 - _1282)) + _1282);
    float _1401 = fma(_1398, cbSceneParam._m0[89u].z, fma(_1397, cbSceneParam._m0[89u].y, _1396 * cbSceneParam._m0[89u].x));
    float _1404 = fma(_1398, cbSceneParam._m0[90u].z, fma(_1397, cbSceneParam._m0[90u].y, _1396 * cbSceneParam._m0[90u].x));
    float _1407 = fma(_1398, cbSceneParam._m0[91u].z, fma(_1397, cbSceneParam._m0[91u].y, _1396 * cbSceneParam._m0[91u].x));
    float _1442 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1446 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1450 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1454 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1455 = _1442 / _1454;
    float _1456 = _1446 / _1454;
    float _1457 = _1450 / _1454;
    float _1604;
    float _1605;
    float _1606;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1484 = ((uint(_1457 > cbSceneParam._m0[59u].y) + uint(_1457 > cbSceneParam._m0[59u].x)) + uint(_1457 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1485 = _1484 + 43u;
        uint _1493 = _1484 + 44u;
        uint _1501 = _1484 + 45u;
        uint _1509 = _1484 + 46u;
        float _1520 = fma(_1454, cbSceneParam._m0[_1485].w, fma(_1450, cbSceneParam._m0[_1485].z, fma(_1446, cbSceneParam._m0[_1485].y, _1442 * cbSceneParam._m0[_1485].x)));
        float _1524 = fma(_1454, cbSceneParam._m0[_1493].w, fma(_1450, cbSceneParam._m0[_1493].z, fma(_1446, cbSceneParam._m0[_1493].y, _1442 * cbSceneParam._m0[_1493].x)));
        float _1532 = fma(_1454, cbSceneParam._m0[_1509].w, fma(_1450, cbSceneParam._m0[_1509].z, fma(_1446, cbSceneParam._m0[_1509].y, _1442 * cbSceneParam._m0[_1509].x)));
        float _1537 = cbSceneParam._m0[33u].z * _1532;
        float _1539 = cbSceneParam._m0[33u].w * _1532;
        float _1542 = fma(_1454, cbSceneParam._m0[_1501].w, fma(_1450, cbSceneParam._m0[_1501].z, fma(_1446, cbSceneParam._m0[_1501].y, _1442 * cbSceneParam._m0[_1501].x))) / _1532;
        float _1590 = (cbSceneParam._m0[33u].x - sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457))) * cbSceneParam._m0[33u].y;
        float _3669 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1597 = (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1537 + _1520) / _1532, (_1539 + _1524) / _1532), _1542), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1539 + _1520) / _1532, (_1524 - _1537) / _1532), _1542), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1520 - _1537) / _1532, (_1524 - _1539) / _1532), _1542), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1520 - _1539) / _1532, (_1537 + _1524) / _1532), _1542), 0.0)).x), vec4(0.25)));
        _1604 = 1.0 - (_1597 * cbSceneParam._m0[34u].x);
        _1605 = 1.0 - (_1597 * cbSceneParam._m0[34u].y);
        _1606 = 1.0 - (_1597 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1604 = 1.0;
        _1605 = 1.0;
        _1606 = 1.0;
    }
    float _1670;
    float _1672;
    float _1674;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1658 = fma(_1454, cbSceneParam._m0[63u].w, fma(_1450, cbSceneParam._m0[63u].z, fma(_1446, cbSceneParam._m0[63u].y, _1442 * cbSceneParam._m0[63u].x)));
        float _1659 = fma(_1454, cbSceneParam._m0[60u].w, fma(_1450, cbSceneParam._m0[60u].z, fma(_1446, cbSceneParam._m0[60u].y, _1442 * cbSceneParam._m0[60u].x))) / _1658;
        float _1660 = fma(_1454, cbSceneParam._m0[61u].w, fma(_1450, cbSceneParam._m0[61u].z, fma(_1446, cbSceneParam._m0[61u].y, _1442 * cbSceneParam._m0[61u].x))) / _1658;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1659 >= cbSceneParam._m0[64u].x) && (_1660 >= cbSceneParam._m0[64u].y)) && (_1659 <= cbSceneParam._m0[64u].z)) && (_1660 <= cbSceneParam._m0[64u].w))
        {
            float _1800 = fma(_1454, cbSceneParam._m0[62u].w, fma(_1450, cbSceneParam._m0[62u].z, fma(_1446, cbSceneParam._m0[62u].y, _1442 * cbSceneParam._m0[62u].x))) / _1658;
            float _1804 = isnan(cbSceneParam._m0[41u].w) ? _1800 : (isnan(_1800) ? cbSceneParam._m0[41u].w : max(_1800, cbSceneParam._m0[41u].w));
            float _1847 = (cbSceneParam._m0[33u].x - sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457))) * cbSceneParam._m0[33u].y;
            float _3685 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
            float _1854 = (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1659, cbSceneParam._m0[33u].w + _1660), _1804), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1659, _1660 - cbSceneParam._m0[33u].z), _1804), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1659 - cbSceneParam._m0[33u].z, _1660 - cbSceneParam._m0[33u].w), _1804), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1659 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1660), _1804), 0.0)).x), vec4(0.25)));
            float _1858 = 1.0 - (_1854 * cbSceneParam._m0[34u].x);
            float _1859 = 1.0 - (_1854 * cbSceneParam._m0[34u].y);
            float _1860 = 1.0 - (_1854 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1859) ? _1605 : (isnan(_1605) ? _1859 : min(_1605, _1859));
            frontier_phi_39_38_ladder_1 = isnan(_1858) ? _1604 : (isnan(_1604) ? _1858 : min(_1604, _1858));
            frontier_phi_39_38_ladder_2 = isnan(_1860) ? _1606 : (isnan(_1606) ? _1860 : min(_1606, _1860));
        }
        else
        {
            frontier_phi_39_38_ladder = _1605;
            frontier_phi_39_38_ladder_1 = _1604;
            frontier_phi_39_38_ladder_2 = _1606;
        }
        _1670 = frontier_phi_39_38_ladder_1;
        _1672 = frontier_phi_39_38_ladder;
        _1674 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1670 = _1604;
        _1672 = _1605;
        _1674 = _1606;
    }
    uvec4 _1679 = floatBitsToUint(cbInstanceData._m0[_350 + 5u]);
    uint _1681 = _1679.x * 14u;
    uint _1682 = _1681 + 13u;
    float _1689 = _376 + (-1.0);
    float _1695 = (cbLight._m0[_1682].x * _1689) + 1.0;
    float _1696 = (cbLight._m0[_1682].y * _1689) + 1.0;
    float _1697 = (cbLight._m0[_1682].z * _1689) + 1.0;
    float _1698 = (cbLight._m0[_1682].w * _1689) + 1.0;
    uint _1699 = _1681 + 5u;
    float _1705 = isnan(1.0) ? _1696 : (isnan(_1696) ? 1.0 : min(_1696, 1.0));
    uint _1709 = _1681 + 4u;
    float _1719 = isnan(1.0) ? _1695 : (isnan(_1695) ? 1.0 : min(_1695, 1.0));
    uint _1723 = _1681 | 1u;
    float _1734 = dot(vec3(cbLight._m0[_1681].xyz), vec3(_206, _207, _208));
    float _1737 = dot(vec3(cbLight._m0[_1723].xyz), vec3(_206, _207, _208));
    float _3721 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
    float _3732 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _1742 = (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * 0.3183098733425140380859375;
    float _1744 = (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * 0.3183098733425140380859375;
    float _1751 = ((cbLight._m0[_1699].x * _1705) * _1744) + (((cbLight._m0[_1709].x * _1670) * _1719) * _1742);
    float _1752 = ((_1705 * cbLight._m0[_1699].y) * _1744) + (((cbLight._m0[_1709].y * _1672) * _1719) * _1742);
    float _1753 = ((_1705 * cbLight._m0[_1699].z) * _1744) + (((cbLight._m0[_1709].z * _1674) * _1719) * _1742);
    uvec4 _1757 = floatBitsToUint(cbLight._m0[_1681 + 12u]);
    bool _1759 = _1757.x == 0u;
    float _1861;
    float _1863;
    float _1865;
    if (_1759)
    {
        _1861 = _1751;
        _1863 = _1752;
        _1865 = _1753;
    }
    else
    {
        uint _1869 = _1681 + 6u;
        float _1885 = (dot(vec3(cbLight._m0[_1681 + 2u].xyz), vec3(_206, _207, _208)) * 0.5) + 0.5;
        float _1886 = _1885 * _1885;
        float _3743 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1887 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1888 = isnan(1.0) ? _1697 : (isnan(_1697) ? 1.0 : min(_1697, 1.0));
        _1861 = (((cbLight._m0[_1869].x * 0.3183098733425140380859375) * _1887) * _1888) + _1751;
        _1863 = (((cbLight._m0[_1869].y * 0.3183098733425140380859375) * _1887) * _1888) + _1752;
        _1865 = (((cbLight._m0[_1869].z * 0.3183098733425140380859375) * _1887) * _1888) + _1753;
    }
    bool _1868 = _1757.y == 0u;
    float _1923;
    float _1925;
    float _1927;
    if (_1868)
    {
        _1923 = _1861;
        _1925 = _1863;
        _1927 = _1865;
    }
    else
    {
        uint _2031 = _1681 + 7u;
        float _2047 = (dot(vec3(cbLight._m0[_1681 + 3u].xyz), vec3(_206, _207, _208)) * 0.5) + 0.5;
        float _2048 = _2047 * _2047;
        float _3759 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2049 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _2050 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _1923 = (((cbLight._m0[_2031].x * 0.3183098733425140380859375) * _2049) * _2050) + _1861;
        _1925 = (((cbLight._m0[_2031].y * 0.3183098733425140380859375) * _2049) * _2050) + _1863;
        _1927 = (((cbLight._m0[_2031].z * 0.3183098733425140380859375) * _2049) * _2050) + _1865;
    }
    uint _1929 = _1681 + 8u;
    float _1935 = cbLight._m0[_1681].x + _289;
    float _1936 = cbLight._m0[_1681].y + _290;
    float _1937 = cbLight._m0[_1681].z + _291;
    float _1941 = inversesqrt(dot(vec3(_1935, _1936, _1937), vec3(_1935, _1936, _1937)));
    float _1945 = dot(vec3(_206, _207, _208), vec3(cbLight._m0[_1681].xyz));
    float _3775 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1948 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _1949 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _1950 = dot(vec3(cbLight._m0[_1681].xyz), vec3(_1935 * _1941, _1936 * _1941, _1937 * _1941));
    float _3797 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1961 = (exp2(log2(1.0 - (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1967 = (0.5 / ((_1948 + 9.9999999392252902907785028219223e-09) + _1949)) * _1948;
    float _3808 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1969 = (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * 0.31831014156341552734375;
    uint _1983 = _1681 + 9u;
    float _1989 = cbLight._m0[_1723].x + _289;
    float _1990 = cbLight._m0[_1723].y + _290;
    float _1991 = cbLight._m0[_1723].z + _291;
    float _1995 = inversesqrt(dot(vec3(_1989, _1990, _1991), vec3(_1989, _1990, _1991)));
    float _1999 = dot(vec3(_206, _207, _208), vec3(cbLight._m0[_1723].xyz));
    float _3819 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2002 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _2003 = dot(vec3(cbLight._m0[_1723].xyz), vec3(_1989 * _1995, _1990 * _1995, _1991 * _1995));
    float _3830 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2012 = (exp2(log2(1.0 - (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2016 = (0.5 / ((_2002 + 9.9999999392252902907785028219223e-09) + _1949)) * _2002;
    float _3841 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2018 = (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * 0.31831014156341552734375;
    float _2028 = (((_2012 * cbLight._m0[_1983].x) * _2018) * _1705) + ((((cbLight._m0[_1929].x * _1670) * _1961) * _1969) * _1719);
    float _2029 = (((_2012 * cbLight._m0[_1983].y) * _2018) * _1705) + ((((cbLight._m0[_1929].y * _1672) * _1961) * _1969) * _1719);
    float _2030 = (((_2012 * cbLight._m0[_1983].z) * _2018) * _1705) + ((((cbLight._m0[_1929].z * _1674) * _1961) * _1969) * _1719);
    float _2086;
    float _2088;
    float _2090;
    if (_1759)
    {
        _2086 = _2028;
        _2088 = _2029;
        _2090 = _2030;
    }
    else
    {
        uint _2092 = _1681 + 10u;
        uint _2098 = _1681 + 2u;
        float _2104 = cbLight._m0[_2098].x + _289;
        float _2105 = cbLight._m0[_2098].y + _290;
        float _2106 = cbLight._m0[_2098].z + _291;
        float _2110 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
        float _2114 = dot(vec3(_206, _207, _208), vec3(cbLight._m0[_2098].xyz));
        float _3852 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2117 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _2118 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2104 * _2110, _2105 * _2110, _2106 * _2110));
        float _3863 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2127 = (exp2(log2(1.0 - (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2131 = (0.5 / ((_2117 + 9.9999999392252902907785028219223e-09) + _1949)) * _2117;
        float _3874 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2133 = (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * 0.31831014156341552734375;
        float _2134 = isnan(1.0) ? _1697 : (isnan(_1697) ? 1.0 : min(_1697, 1.0));
        _2086 = (((_2127 * cbLight._m0[_2092].x) * _2133) * _2134) + _2028;
        _2088 = (((_2127 * cbLight._m0[_2092].y) * _2133) * _2134) + _2029;
        _2090 = (((_2127 * cbLight._m0[_2092].z) * _2133) * _2134) + _2030;
    }
    float _2165;
    float _2167;
    float _2169;
    if (_1868)
    {
        _2165 = _2086;
        _2167 = _2088;
        _2169 = _2090;
    }
    else
    {
        uint _2176 = _1681 + 11u;
        uint _2182 = _1681 + 3u;
        float _2188 = cbLight._m0[_2182].x + _289;
        float _2189 = cbLight._m0[_2182].y + _290;
        float _2190 = cbLight._m0[_2182].z + _291;
        float _2194 = inversesqrt(dot(vec3(_2188, _2189, _2190), vec3(_2188, _2189, _2190)));
        float _2198 = dot(vec3(_206, _207, _208), vec3(cbLight._m0[_2182].xyz));
        float _3890 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2201 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _2202 = dot(vec3(cbLight._m0[_2182].xyz), vec3(_2188 * _2194, _2189 * _2194, _2190 * _2194));
        float _3901 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2211 = (exp2(log2(1.0 - (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2215 = (0.5 / ((_2201 + 9.9999999392252902907785028219223e-09) + _1949)) * _2201;
        float _3912 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2217 = (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * 0.31831014156341552734375;
        float _2218 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _2165 = (((_2211 * cbLight._m0[_2176].x) * _2217) * _2218) + _2086;
        _2167 = (((_2211 * cbLight._m0[_2176].y) * _2217) * _2218) + _2088;
        _2169 = (((_2211 * cbLight._m0[_2176].z) * _2217) * _2218) + _2090;
    }
    float _2283;
    float _2285;
    float _2287;
    float _2289;
    float _2291;
    float _2293;
    if (_1679.y == 0u)
    {
        uvec4 _2239 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2240 = _2239.x;
        uint _2251 = uint((float(_2239.y) * floor(float(uint(cbSceneParam._m0[85u].y * _311) / _2240))) + floor(float(uint(cbSceneParam._m0[85u].x * _310) / _2240)));
        float _2261 = (log2(_1457 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2262 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        uint _2265 = uint(isnan(14.0) ? _2262 : (isnan(_2262) ? 14.0 : min(_2262, 14.0)));
        uvec4 _2270 = texelFetch(g_lightClusterGridBuffer, int(((_2265 << 2u) + (_2251 << 6u)) >> 2u));
        uint _2271 = _2270.x;
        uint _2272 = _2239.z;
        float _2352;
        float _2354;
        float _2356;
        float _2358;
        float _2360;
        float _2362;
        if (((((1u << ((_2272 >> 4u) & 15u)) + 4294967295u) & _2271) == 0u) || ((_2272 & 240u) == 0u))
        {
            _2352 = 0.0;
            _2354 = 0.0;
            _2356 = 0.0;
            _2358 = 0.0;
            _2360 = 0.0;
            _2362 = 0.0;
        }
        else
        {
            float _2353;
            float _2355;
            float _2357;
            float _2359;
            float _2361;
            float _2363;
            float _2503 = 0.0;
            float _2504 = 0.0;
            float _2505 = 0.0;
            float _2506 = 0.0;
            float _2507 = 0.0;
            float _2508 = 0.0;
            uint _2509 = 0u;
            uint _2518;
            bool _2519;
            for (;;)
            {
                _2518 = texelFetch(g_lightClassification, int((((_2265 << 5u) + (_2251 << 9u)) + (_2509 << 2u)) >> 2u)).x;
                _2519 = _2518 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2519)
                {
                    frontier_phi_73_pred = _2508;
                    frontier_phi_73_pred_1 = _2507;
                    frontier_phi_73_pred_2 = _2506;
                    frontier_phi_73_pred_3 = _2505;
                    frontier_phi_73_pred_4 = _2504;
                    frontier_phi_73_pred_5 = _2503;
                }
                else
                {
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    float _2653;
                    uint _2654;
                    _2648 = _2503;
                    _2649 = _2504;
                    _2650 = _2505;
                    _2651 = _2506;
                    _2652 = _2507;
                    _2653 = _2508;
                    _2654 = _2518;
                    float _2575;
                    float _2576;
                    float _2577;
                    float _2578;
                    float _2579;
                    float _2580;
                    for (;;)
                    {
                        uint _2658 = uint(findLSB(_2654)) + (_2509 << 5u);
                        uint _2655 = (_2654 + 4294967295u) & _2654;
                        uint _2660 = _2658 * 48u;
                        vec4 _2674 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2660)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 3u)).x));
                        uint _2680 = (_2658 * 48u) + 4u;
                        vec4 _2693 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2680)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 3u)).x));
                        uint _2699 = (_2658 * 48u) + 8u;
                        vec3 _2710 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2699)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 2u)).x));
                        float _2714 = _2674.x - _1455;
                        float _2715 = _2674.y - _1456;
                        float _2716 = _2674.z - _1457;
                        float _2717 = dot(vec3(_2714, _2715, _2716), vec3(_2714, _2715, _2716));
                        float _2720 = inversesqrt(_2717);
                        float _2729 = 1.0 - (_2717 * _2674.w);
                        float _3938 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
                        float _2730 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
                        float _2731 = sqrt(_2717) * _2693.w;
                        float _2734 = 1.39999997615814208984375 / (_2731 + 1.39999997615814208984375);
                        float _2735 = _2734 * _2734;
                        float _2738 = ((1.0 - _2735) * dot(vec3(_331, _334, _337), vec3(_2720 * _2714, _2720 * _2715, _2720 * _2716))) + _2735;
                        float _2741 = _2731 * _2731;
                        float _2745 = ((isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0))) * _2730) / ((_2741 * 0.699999988079071044921875) + 1.0);
                        float _2749 = (-0.0) - _1455;
                        float _2750 = (-0.0) - _1456;
                        float _2751 = (-0.0) - _1457;
                        float _2755 = inversesqrt(dot(vec3(_2749, _2750, _2751), vec3(_2749, _2750, _2751)));
                        float _2759 = dot(vec3(_331, _334, _337), vec3(_2755 * _2749, _2755 * _2750, _2755 * _2751));
                        float _3954 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                        float _3965 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
                        float _2763 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
                        float _2767 = (0.5 / (((isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) + 9.9999999392252902907785028219223e-09) + _2763)) * _2763;
                        float _3976 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
                        float _2776 = (((isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * 3.1415927410125732421875) / ((_2741 * 2.1991131305694580078125) + 3.141590118408203125)) * _2730;
                        _2578 = (_2745 * _2693.x) + _2651;
                        _2579 = (_2745 * _2693.y) + _2652;
                        _2580 = (_2745 * _2693.z) + _2653;
                        _2575 = (_2776 * _2710.x) + _2648;
                        _2576 = (_2776 * _2710.y) + _2649;
                        _2577 = (_2776 * _2710.z) + _2650;
                        if (_2655 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2648 = _2575;
                            _2649 = _2576;
                            _2650 = _2577;
                            _2651 = _2578;
                            _2652 = _2579;
                            _2653 = _2580;
                            _2654 = _2655;
                        }
                    }
                    frontier_phi_73_pred = _2580;
                    frontier_phi_73_pred_1 = _2579;
                    frontier_phi_73_pred_2 = _2578;
                    frontier_phi_73_pred_3 = _2577;
                    frontier_phi_73_pred_4 = _2576;
                    frontier_phi_73_pred_5 = _2575;
                }
                _2363 = frontier_phi_73_pred;
                _2361 = frontier_phi_73_pred_1;
                _2359 = frontier_phi_73_pred_2;
                _2357 = frontier_phi_73_pred_3;
                _2355 = frontier_phi_73_pred_4;
                _2353 = frontier_phi_73_pred_5;
                uint _2510 = _2509 + 1u;
                if (_2510 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2503 = _2353;
                    _2504 = _2355;
                    _2505 = _2357;
                    _2506 = _2359;
                    _2507 = _2361;
                    _2508 = _2363;
                    _2509 = _2510;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2352 = _2353;
            _2354 = _2355;
            _2356 = _2357;
            _2358 = _2359;
            _2360 = _2361;
            _2362 = _2363;
        }
        uvec4 _2366 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2367 = _2366.z;
        uint _2369 = (_2367 >> 8u) & 15u;
        float _2474;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        if (((4294967295u << _2369) & _2271) == 0u)
        {
            _2474 = _2352;
            _2476 = _2354;
            _2478 = _2356;
            _2480 = _2358;
            _2482 = _2360;
            _2484 = _2362;
        }
        else
        {
            float _2499 = inversesqrt(dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2369 < ((_2367 >> 12u) & 15u))
            {
                float _2475;
                float _2477;
                float _2479;
                float _2481;
                float _2483;
                float _2485;
                float _2631 = _2352;
                float _2632 = _2354;
                float _2633 = _2356;
                float _2634 = _2358;
                float _2635 = _2360;
                float _2636 = _2362;
                uint _2637 = _2369;
                uint _2646;
                bool _2647;
                for (;;)
                {
                    _2646 = texelFetch(g_lightClassification, int((((_2265 << 5u) + (_2251 << 9u)) + (_2637 << 2u)) >> 2u)).x;
                    _2647 = _2646 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2647)
                    {
                        frontier_phi_84_pred = _2635;
                        frontier_phi_84_pred_1 = _2634;
                        frontier_phi_84_pred_2 = _2633;
                        frontier_phi_84_pred_3 = _2632;
                        frontier_phi_84_pred_4 = _2631;
                        frontier_phi_84_pred_5 = _2636;
                    }
                    else
                    {
                        float _2790;
                        float _2791;
                        float _2792;
                        float _2793;
                        float _2794;
                        float _2795;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3047;
                        float _2803 = _2631;
                        float _2804 = _2632;
                        float _2805 = _2633;
                        float _2806 = _2634;
                        float _2807 = _2635;
                        float _2808 = _2636;
                        uint _2809 = _2646;
                        uint _2810;
                        vec4 _2835;
                        float _2836;
                        vec4 _2851;
                        vec3 _2863;
                        vec4 _2879;
                        vec4 _2895;
                        float _2942;
                        bool _2943;
                        for (;;)
                        {
                            uint _2820 = ((_2637 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2809));
                            _2810 = (_2809 + 4294967295u) & _2809;
                            uint _2822 = _2820 * 40u;
                            _2835 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2822)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 3u)).x));
                            _2836 = _2835.w;
                            uint _2838 = (_2820 * 40u) + 4u;
                            _2851 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2838)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 3u)).x));
                            uint _2853 = (_2820 * 40u) + 8u;
                            _2863 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2853)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 2u)).x));
                            uint _2866 = (_2820 * 40u) + 16u;
                            _2879 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2866)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 3u)).x));
                            uint _2882 = (_2820 * 40u) + 20u;
                            _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            uint _2898 = (_2820 * 40u) + 24u;
                            vec4 _2911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 3u)).x));
                            uint _2917 = (_2820 * 40u) + 28u;
                            vec4 _2930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 3u)).x));
                            _2942 = fma(_1457, _2930.z, fma(_1456, _2930.y, _2930.x * _1455)) + _2930.w;
                            _2943 = !((fma(_1457, _2911.z, fma(_1456, _2911.y, _2911.x * _1455)) + _2911.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_2943)
                            {
                                float _2970 = _2835.x - _1455;
                                float _2971 = _2835.y - _1456;
                                float _2972 = _2835.z - _1457;
                                float _2973 = dot(vec3(_2970, _2971, _2972), vec3(_2970, _2971, _2972));
                                float _2976 = inversesqrt(_2973);
                                float _2977 = _2976 * _2970;
                                float _2978 = _2976 * _2971;
                                float _2979 = _2976 * _2972;
                                float _2983 = 1.0 - (_2973 / (_2836 * _2836));
                                float _3987 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                                float _2984 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
                                float _2988 = sqrt(_2973) * _2851.w;
                                float _2990 = 1.39999997615814208984375 / (_2988 + 1.39999997615814208984375);
                                float _2991 = _2990 * _2990;
                                float _2992 = 1.0 - _2991;
                                float _2994 = (_2992 * dot(vec3(_2977, _2978, _2979), vec3(_331, _334, _337))) + _2991;
                                float _2997 = _2988 * _2988;
                                float _3001 = (fma(_1457, _2879.z, fma(_1456, _2879.y, _2879.x * _1455)) + _2879.w) / _2942;
                                float _3002 = (fma(_1457, _2895.z, fma(_1456, _2895.y, _2895.x * _1455)) + _2895.w) / _2942;
                                float _3006 = 1.0 - dot(vec2(_3001, _3002), vec2(_3001, _3002));
                                float _4003 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                                float _3007 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
                                float _3008 = _3007 * (((isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0))) * _2984) / ((_2997 * 0.699999988079071044921875) + 1.0));
                                float _3018 = dot(vec3(_331, _334, _337), vec3((-0.0) - (_1455 * _2499), (-0.0) - (_1456 * _2499), (-0.0) - (_1457 * _2499)));
                                float _4014 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                                float _3026 = (_2992 * dot(vec3(_331, _334, _337), vec3(_2977, _2978, _2979))) + _2991;
                                float _4025 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                                float _3027 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
                                float _3031 = (0.5 / (((isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) + 9.9999999392252902907785028219223e-09) + _3027)) * _3027;
                                float _4036 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                                float _3038 = (_3007 * _2984) * (((isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * 3.1415927410125732421875) / ((_2997 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_90_pred = _3008 * _2851.y;
                                frontier_phi_90_pred_1 = _3008 * _2851.x;
                                frontier_phi_90_pred_2 = _3038 * _2863.z;
                                frontier_phi_90_pred_3 = _3038 * _2863.y;
                                frontier_phi_90_pred_4 = _3038 * _2863.x;
                                frontier_phi_90_pred_5 = _3008 * _2851.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3046 = frontier_phi_90_pred;
                            _3045 = frontier_phi_90_pred_1;
                            _3044 = frontier_phi_90_pred_2;
                            _3043 = frontier_phi_90_pred_3;
                            _3042 = frontier_phi_90_pred_4;
                            _3047 = frontier_phi_90_pred_5;
                            _2793 = _3045 + _2806;
                            _2794 = _3046 + _2807;
                            _2795 = _3047 + _2808;
                            _2790 = _3042 + _2803;
                            _2791 = _3043 + _2804;
                            _2792 = _3044 + _2805;
                            if (_2810 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2803 = _2790;
                                _2804 = _2791;
                                _2805 = _2792;
                                _2806 = _2793;
                                _2807 = _2794;
                                _2808 = _2795;
                                _2809 = _2810;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _2794;
                        frontier_phi_84_pred_1 = _2793;
                        frontier_phi_84_pred_2 = _2792;
                        frontier_phi_84_pred_3 = _2791;
                        frontier_phi_84_pred_4 = _2790;
                        frontier_phi_84_pred_5 = _2795;
                    }
                    _2483 = frontier_phi_84_pred;
                    _2481 = frontier_phi_84_pred_1;
                    _2479 = frontier_phi_84_pred_2;
                    _2477 = frontier_phi_84_pred_3;
                    _2475 = frontier_phi_84_pred_4;
                    _2485 = frontier_phi_84_pred_5;
                    uint _2638 = _2637 + 1u;
                    if (_2638 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2631 = _2475;
                        _2632 = _2477;
                        _2633 = _2479;
                        _2634 = _2481;
                        _2635 = _2483;
                        _2636 = _2485;
                        _2637 = _2638;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2485;
                frontier_phi_65_66_ladder_1 = _2481;
                frontier_phi_65_66_ladder_2 = _2483;
                frontier_phi_65_66_ladder_3 = _2477;
                frontier_phi_65_66_ladder_4 = _2475;
                frontier_phi_65_66_ladder_5 = _2479;
            }
            else
            {
                frontier_phi_65_66_ladder = _2362;
                frontier_phi_65_66_ladder_1 = _2358;
                frontier_phi_65_66_ladder_2 = _2360;
                frontier_phi_65_66_ladder_3 = _2354;
                frontier_phi_65_66_ladder_4 = _2352;
                frontier_phi_65_66_ladder_5 = _2356;
            }
            _2474 = frontier_phi_65_66_ladder_4;
            _2476 = frontier_phi_65_66_ladder_3;
            _2478 = frontier_phi_65_66_ladder_5;
            _2480 = frontier_phi_65_66_ladder_1;
            _2482 = frontier_phi_65_66_ladder_2;
            _2484 = frontier_phi_65_66_ladder;
        }
        float _2489 = isnan(1.0) ? _376 : (isnan(_376) ? 1.0 : min(_376, 1.0));
        _2283 = (_2489 * _2480) + _1923;
        _2285 = (_2489 * _2482) + _1925;
        _2287 = (_2489 * _2484) + _1927;
        _2289 = ((_2474 * 0.039999999105930328369140625) * _2489) + _2165;
        _2291 = ((_2476 * 0.039999999105930328369140625) * _2489) + _2167;
        _2293 = ((_2478 * 0.039999999105930328369140625) * _2489) + _2169;
    }
    else
    {
        _2283 = _1923;
        _2285 = _1925;
        _2287 = _1927;
        _2289 = _2165;
        _2291 = _2167;
        _2293 = _2169;
    }
    float _4052 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _4063 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _4074 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _4085 = isnan(0.0) ? _210 : (isnan(_210) ? 0.0 : max(_210, 0.0));
    float _2311 = ((isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_2283 + ((isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0))) * _376))) + ((_2289 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _1187)) * cbPerFrame._m0[3u].x);
    float _2312 = ((isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_2285 + ((isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0))) * _376))) + ((_2291 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _1187)) * cbPerFrame._m0[3u].x);
    float _2313 = ((isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_2287 + ((isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0))) * _376))) + ((_2293 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _1187)) * cbPerFrame._m0[3u].x);
    float _2318 = cbInstanceData._m0[_350 + 6u].w * (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)));
    float _2323 = _310 / cbSceneParam._m0[86u].x;
    float _2324 = _311 / cbSceneParam._m0[86u].y;
    vec4 _2338 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2323, _2324, (log2((isnan(cbSceneParam._m0[77u].w) ? _229 : (isnan(_229) ? cbSceneParam._m0[77u].w : min(_229, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2340 = _2338.x;
    float _2341 = _2338.y;
    float _2342 = _2338.z;
    float _2343 = _2338.w;
    float _2414;
    float _2416;
    float _2418;
    float _2420;
    if (_229 > cbSceneParam._m0[78u].w)
    {
        float _2377 = isnan(_229) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _229 : min(cbSceneParam._m0[80u].w, _229));
        float _2378 = _2377 / _229;
        float _2389 = _2378 * _282;
        float _2390 = _283 * _2378;
        float _2391 = (-0.0) - _2390;
        float _2392 = _2378 * _284;
        float _2394 = (cbSceneParam._m0[77u].w * _2391) / _2377;
        float _2395 = _2394 + cbSceneParam._m0[79u].w;
        float _2396 = cbSceneParam._m0[79u].w - _2390;
        float _2402 = sqrt(((_2389 * _2389) + (_2390 * _2390)) + (_2392 * _2392));
        float _2405 = (1.0 - (cbSceneParam._m0[77u].w / _2377)) * _2402;
        float _2410 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2412 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2588;
        if (abs((_2391 - _2394) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2588 = ((((_2395 > 0.0) ? exp2(_2410 * _2395) : (2.0 - exp2(_2412 * _2395))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2405;
        }
        else
        {
            float _2532 = 1.0 / cbSceneParam._m0[80u].x;
            float _2533 = isnan(_2396) ? _2395 : (isnan(_2395) ? _2396 : max(_2395, _2396));
            float _2534 = isnan(_2396) ? _2395 : (isnan(_2395) ? _2396 : min(_2395, _2396));
            float _2543 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : min(_2533, 0.0));
            float _2544 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : min(_2534, 0.0));
            _2588 = ((abs(_2402 / _2391) * cbSceneParam._m0[80u].y) * ((((_2543 - _2544) * 2.0) - ((exp2(_2410 * (isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0)))) - exp2(_2410 * (isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0))))) * _2532)) - ((exp2(_2412 * _2543) - exp2(_2412 * _2544)) * _2532))) + (_2405 * cbSceneParam._m0[80u].z);
        }
        vec4 _2590 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2323, _2324, 1.0), 0.0);
        float _2599 = exp2((_2588 * (-1.44269502162933349609375)) * (1.0 - _2590.w));
        float _2600 = log2(_2599);
        float _2616 = log2(_2343);
        _2414 = (exp2(_2616 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2600 * cbSceneParam._m0[78u].x)) * _2590.x) / cbSceneParam._m0[78u].x)) + _2340;
        _2416 = (exp2(_2616 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2600 * cbSceneParam._m0[78u].y)) * _2590.y) / cbSceneParam._m0[78u].y)) + _2341;
        _2418 = (exp2(_2616 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2600 * cbSceneParam._m0[78u].z)) * _2590.z) / cbSceneParam._m0[78u].z)) + _2342;
        _2420 = _2599 * _2343;
    }
    else
    {
        _2414 = _2340;
        _2416 = _2341;
        _2418 = _2342;
        _2420 = _2343;
    }
    bool _2626;
    vec4 _2430;
    vec4 _2453;
    float _2455;
    float _2459;
    float _2460;
    float _2461;
    float _2462;
    bool _2473;
    for (;;)
    {
        _2430 = cbMatDynParam._m0[0u];
        float _2432 = roundEven(_2430.y);
        bool _2433 = _2432 == 3.0;
        float _2435 = log2(_2420);
        float _2442 = exp2(_2435 * cbSceneParam._m0[78u].x) * _2311;
        float _2443 = exp2(_2435 * cbSceneParam._m0[78u].y) * _2312;
        float _2444 = exp2(_2435 * cbSceneParam._m0[78u].z) * _2313;
        float _2451 = _298 + (-0.5);
        _2453 = cbMtdParam._m0[1u];
        _2455 = _2453.y * _2451;
        float _2458 = (_2432 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2459 = _2458 * (_2433 ? _2442 : (_2442 + (cbSceneParam._m0[72u].w * _2414)));
        _2460 = _2458 * (_2433 ? _2443 : (_2443 + (cbSceneParam._m0[72u].w * _2416)));
        _2461 = _2458 * (_2433 ? _2444 : (_2444 + (cbSceneParam._m0[72u].w * _2418)));
        _2462 = _2451 * 0.999000012874603271484375;
        _2473 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2473)
        {
            if ((cbInstanceData._m0[_350 + 7u].x + _2462) < 0.5)
            {
                _2626 = true;
                break;
            }
        }
        uint _2567 = _352 + uint(_2430.w);
        if ((cbInstanceData._m0[_2567].w < 1.0) && ((cbInstanceData._m0[_2567].w + _2462) < 0.5))
        {
            _2626 = true;
            break;
        }
        if ((_2455 + _200) < _2453.x)
        {
            _2626 = true;
            break;
        }
        _2626 = false;
        break;
    }
    float _2781;
    if (_2626)
    {
        discard_state = true;
        _2781 = 0.0;
    }
    else
    {
        _2781 = _2318;
    }
    SV_Target.x = _2459;
    SV_Target.y = _2460;
    SV_Target.z = _2461;
    SV_Target.w = _2781;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2318;
    discard_exit();
}


