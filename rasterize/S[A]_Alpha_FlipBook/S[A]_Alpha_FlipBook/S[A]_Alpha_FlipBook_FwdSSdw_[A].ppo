#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A_Alpha_FlipBook_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _824;
float _3018;
float _3019;
float _3020;
float _3021;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _172 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _173 = _172 * NORMAL.x;
    float _174 = _172 * NORMAL.y;
    float _175 = _172 * NORMAL.z;
    float _180;
    float _181;
    float _182;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _180 = (-0.0) - _173;
        _181 = (-0.0) - _174;
        _182 = (-0.0) - _175;
    }
    else
    {
        _180 = _173;
        _181 = _174;
        _182 = _175;
    }
    uint _199 = uint(int(floor(cbMtdParam._m0[10u].x)));
    uint _200 = uint(int(cbMtdParam._m0[10u].w * cbMtdParam._m0[10u].z));
    float _202 = float(int(_199 - _200 * (_199 / _200)));
    vec4 _227 = texture(sampler2D(S_A_Alpha_FlipBook_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((fract(TEXCOORD_1.x) + (_202 - cbMtdParam._m0[10u].z * trunc(_202 / cbMtdParam._m0[10u].z))) * (1.0 / cbMtdParam._m0[10u].z)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((fract(TEXCOORD_1.y) + floor(_202 / cbMtdParam._m0[10u].z)) * (1.0 / cbMtdParam._m0[10u].w)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _227.x * cbMtdParam._m0[9u].x;
    float _235 = _227.y * cbMtdParam._m0[9u].y;
    float _236 = _227.z * cbMtdParam._m0[9u].z;
    vec4 _246 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _248 = _246.x;
    float _271 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _248)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _248))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3030 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _274 = (cbMtdParam._m0[9u].w * TEXCOORD_1.z) * _227.w;
    float _275 = (isnan(1.0) ? _3030 : (isnan(_3030) ? 1.0 : min(_3030, 1.0))) * _274;
    float _276 = gl_FragCoord.x * 0.125;
    float _278 = gl_FragCoord.y * 0.125;
    vec4 _280 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_276, _278));
    float _288 = float(_274 >= ((_280.w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    float _292 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _293 = _292 * _180;
    float _294 = _292 * _181;
    float _295 = _292 * _182;
    float _3041 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _296 = isnan(1.0) ? _3041 : (isnan(_3041) ? 1.0 : min(_3041, 1.0));
    float _3052 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3063 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3074 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _313 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _354 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _364 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _354);
    float _365 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _354);
    float _366 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _354);
    float _370 = inversesqrt(dot(vec3(_364, _365, _366), vec3(_364, _365, _366)));
    float _371 = _364 * _370;
    float _372 = _365 * _370;
    float _373 = _366 * _370;
    vec4 _374 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_276, _278));
    float _376 = _374.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _505 = sqrt(((_364 * _364) + (_365 * _365)) + (_366 * _366));
        float _511 = (cbMatDynParam._m0[5u].x * _505) + cbMatDynParam._m0[5u].y;
        float _3085 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
        float _512 = isnan(1.0) ? _3085 : (isnan(_3085) ? 1.0 : min(_3085, 1.0));
        float _516 = (cbMatDynParam._m0[5u].z * _505) + cbMatDynParam._m0[5u].w;
        float _3096 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3096 : (isnan(_3096) ? 1.0 : min(_3096, 1.0))) - _512)) + _512) < ((_376 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _387 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _388 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _408 = fma(_295, cbSceneParam._m0[5u].z, fma(_294, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _293));
    float _411 = fma(_295, cbSceneParam._m0[6u].z, fma(_294, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _293));
    float _414 = fma(_295, cbSceneParam._m0[7u].z, fma(_294, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _293));
    uint _427 = uint(roundEven(NORMAL.w)) * 13u;
    uint _429 = _427 + 9u;
    uint _430 = _429 + uint(cbMatDynParam._m0[0u].w);
    float _436 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3052 : (isnan(_3052) ? 1.0 : min(_3052, 1.0)))) * cbInstanceData._m0[_430].x;
    float _437 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3063 : (isnan(_3063) ? 1.0 : min(_3063, 1.0)))) * cbInstanceData._m0[_430].y;
    float _438 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3074 : (isnan(_3074) ? 1.0 : min(_3074, 1.0)))) * cbInstanceData._m0[_430].z;
    float _3107 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _439 = isnan(1.0) ? _3107 : (isnan(_3107) ? 1.0 : min(_3107, 1.0));
    float _3118 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _3118 : (isnan(_3118) ? 1.0 : min(_3118, 1.0));
    float _3129 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _441 = isnan(1.0) ? _3129 : (isnan(_3129) ? 1.0 : min(_3129, 1.0));
    vec4 _450 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _387, cbSceneParam._m0[86u].y * _388));
    float _453 = _450.x * TEXCOORD_1.w;
    float _454 = dot(vec3(_293, _294, _295), vec3(_371, _372, _373));
    float _457 = _454 * 2.0;
    float _462 = (_457 * _293) - _371;
    float _463 = (_457 * _294) - _372;
    float _464 = (_457 * _295) - _373;
    float _486 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _490 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _494 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _823;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _548 = fma(_494, cbModelParam._m0[26u].z, fma(_490, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _486));
        float _552 = fma(_494, cbModelParam._m0[27u].z, fma(_490, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _486));
        float _556 = fma(_494, cbModelParam._m0[28u].z, fma(_490, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _486));
        float _581 = _486 + _293;
        float _582 = _490 + _294;
        float _583 = _494 + _295;
        float _593 = fma(_583, cbModelParam._m0[26u].z, fma(_582, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _581)) - _548;
        float _594 = fma(_583, cbModelParam._m0[27u].z, fma(_582, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _581)) - _552;
        float _595 = fma(_583, cbModelParam._m0[28u].z, fma(_582, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _581)) - _556;
        float _599 = inversesqrt(dot(vec3(_593, _594, _595), vec3(_593, _594, _595)));
        float _612 = ((_599 * _593) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_548 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _613 = ((_599 * _594) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_552 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _614 = ((_599 * _595) / cbModelParam._m0[34u].z) + ((((((_556 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _617 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_612, _613, _614), 0.0);
        vec4 _624 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_612, _613, _614), 0.0);
        vec4 _631 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_612, _613, _614), 0.0);
        vec4 _638 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_612, _613, _614), 0.0);
        float _651 = exp2((_617.w + (-0.5)) * 20.0) * 2.0;
        float _652 = _651 * (_617.x + (-0.5));
        float _653 = _651 * (_617.y + (-0.5));
        float _654 = _651 * (_617.z + (-0.5));
        float _661 = exp2((_624.w + (-0.5)) * 20.0) * 2.0;
        float _662 = _661 * (_624.x + (-0.5));
        float _663 = _661 * (_624.y + (-0.5));
        float _664 = _661 * (_624.z + (-0.5));
        float _671 = exp2((_631.w + (-0.5)) * 20.0) * 2.0;
        float _672 = _671 * (_631.x + (-0.5));
        float _673 = _671 * (_631.y + (-0.5));
        float _674 = _671 * (_631.z + (-0.5));
        float _681 = exp2((_638.w + (-0.5)) * 20.0) * 2.0;
        float _682 = _681 * (_638.x + (-0.5));
        float _683 = _681 * (_638.y + (-0.5));
        float _684 = _681 * (_638.z + (-0.5));
        float _685 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _686 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _687 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
        float _688 = _652 * 0.5;
        float _689 = _662 * 0.5;
        float _690 = _672 * 0.5;
        float _691 = dot(vec3(_688, _689, _690), vec3(_688, _689, _690));
        float _696 = (_691 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_691);
        float _705 = (dot(vec3(_293, _294, _295), vec3(_696 * _688, _696 * _689, _696 * _690)) + 1.0) * 0.5;
        float _3155 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _715 = sqrt(((_689 * _689) + (_688 * _688)) + (_690 * _690)) / (_685 + 9.9999997473787516355514526367188e-06);
        float _3166 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _716 = isnan(1.0) ? _3166 : (isnan(_3166) ? 1.0 : min(_3166, 1.0));
        float _717 = _716 * 2.0;
        float _721 = (1.0 - _716) / (_716 + 1.0);
        float _3177 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _722 = isnan(1.0) ? _3177 : (isnan(_3177) ? 1.0 : min(_3177, 1.0));
        float _731 = ((((1.0 - _722) * (_717 + 2.0)) * exp2(log2(isnan(1.0) ? _3155 : (isnan(_3155) ? 1.0 : min(_3155, 1.0))) * (_717 + 1.0))) + _722) * _685;
        float _732 = _653 * 0.5;
        float _733 = _663 * 0.5;
        float _734 = _673 * 0.5;
        float _735 = dot(vec3(_732, _733, _734), vec3(_732, _733, _734));
        float _740 = (_735 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_735);
        float _748 = (dot(vec3(_293, _294, _295), vec3(_740 * _732, _740 * _733, _740 * _734)) + 1.0) * 0.5;
        float _3188 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _757 = sqrt(((_733 * _733) + (_732 * _732)) + (_734 * _734)) / (_686 + 9.9999997473787516355514526367188e-06);
        float _3199 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _758 = isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0));
        float _759 = _758 * 2.0;
        float _763 = (1.0 - _758) / (_758 + 1.0);
        float _3210 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _764 = isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0));
        float _773 = ((((1.0 - _764) * (_759 + 2.0)) * exp2(log2(isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0))) * (_759 + 1.0))) + _764) * _686;
        float _774 = _654 * 0.5;
        float _775 = _664 * 0.5;
        float _776 = _674 * 0.5;
        float _777 = dot(vec3(_774, _775, _776), vec3(_774, _775, _776));
        float _782 = (_777 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_777);
        float _790 = (dot(vec3(_293, _294, _295), vec3(_782 * _774, _782 * _775, _782 * _776)) + 1.0) * 0.5;
        float _3221 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _799 = sqrt(((_775 * _775) + (_774 * _774)) + (_776 * _776)) / (_687 + 9.9999997473787516355514526367188e-06);
        float _3232 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0));
        float _801 = _800 * 2.0;
        float _805 = (1.0 - _800) / (_800 + 1.0);
        float _3243 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _806 = isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0));
        float _815 = ((((1.0 - _806) * (_801 + 2.0)) * exp2(log2(isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0))) * (_801 + 1.0))) + _806) * _687;
        _823 = _654;
        _825 = _653;
        _826 = _652;
        _827 = _664;
        _828 = _663;
        _829 = _662;
        _830 = _674;
        _831 = _673;
        _832 = _672;
        _833 = _687;
        _834 = _686;
        _835 = _685;
        _836 = cbModelParam._m0[36u].z * (isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0)));
        _837 = cbModelParam._m0[36u].z * (isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0)));
        _838 = cbModelParam._m0[36u].z * (isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0)));
    }
    else
    {
        _823 = _824;
        _825 = _824;
        _826 = _824;
        _827 = _824;
        _828 = _824;
        _829 = _824;
        _830 = _824;
        _831 = _824;
        _832 = _824;
        _833 = _824;
        _834 = _824;
        _835 = _824;
        _836 = 0.0;
        _837 = 0.0;
        _838 = 0.0;
    }
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _867 = fma(_494, cbModelParam._m0[30u].z, fma(_490, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _486));
        float _871 = fma(_494, cbModelParam._m0[31u].z, fma(_490, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _486));
        float _875 = fma(_494, cbModelParam._m0[32u].z, fma(_490, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _486));
        float _898 = _486 + _293;
        float _899 = _490 + _294;
        float _900 = _494 + _295;
        float _910 = fma(_900, cbModelParam._m0[30u].z, fma(_899, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _898)) - _867;
        float _911 = fma(_900, cbModelParam._m0[31u].z, fma(_899, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _898)) - _871;
        float _912 = fma(_900, cbModelParam._m0[32u].z, fma(_899, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _898)) - _875;
        float _916 = inversesqrt(dot(vec3(_910, _911, _912), vec3(_910, _911, _912)));
        float _929 = ((_916 * _910) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_867 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _930 = ((_916 * _911) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_871 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _931 = ((_916 * _912) / cbModelParam._m0[35u].z) + ((((((_875 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        float _966 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_933.x + (-0.5));
        float _968 = _966 * (_933.y + (-0.5));
        float _969 = _966 * (_933.z + (-0.5));
        float _976 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_940.x + (-0.5));
        float _978 = _976 * (_940.y + (-0.5));
        float _979 = _976 * (_940.z + (-0.5));
        float _986 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_947.x + (-0.5));
        float _988 = _986 * (_947.y + (-0.5));
        float _989 = _986 * (_947.z + (-0.5));
        float _996 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_954.x + (-0.5));
        float _998 = _996 * (_954.y + (-0.5));
        float _999 = _996 * (_954.z + (-0.5));
        float _1000 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1001 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1002 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1003 = _967 * 0.5;
        float _1004 = _977 * 0.5;
        float _1005 = _987 * 0.5;
        float _1006 = dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005));
        float _1011 = (_1006 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1006);
        float _1019 = (dot(vec3(_293, _294, _295), vec3(_1011 * _1003, _1011 * _1004, _1011 * _1005)) + 1.0) * 0.5;
        float _3284 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1028 = sqrt(((_1004 * _1004) + (_1003 * _1003)) + (_1005 * _1005)) / (_1000 + 9.9999997473787516355514526367188e-06);
        float _3295 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0));
        float _1030 = _1029 * 2.0;
        float _1034 = (1.0 - _1029) / (_1029 + 1.0);
        float _3306 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
        float _1044 = ((((1.0 - _1035) * (_1030 + 2.0)) * exp2(log2(isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0))) * (_1030 + 1.0))) + _1035) * _1000;
        float _1045 = _968 * 0.5;
        float _1046 = _978 * 0.5;
        float _1047 = _988 * 0.5;
        float _1048 = dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047));
        float _1053 = (_1048 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1048);
        float _1061 = (dot(vec3(_293, _294, _295), vec3(_1053 * _1045, _1053 * _1046, _1053 * _1047)) + 1.0) * 0.5;
        float _3317 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1070 = sqrt(((_1046 * _1046) + (_1045 * _1045)) + (_1047 * _1047)) / (_1001 + 9.9999997473787516355514526367188e-06);
        float _3328 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
        float _1072 = _1071 * 2.0;
        float _1076 = (1.0 - _1071) / (_1071 + 1.0);
        float _3339 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
        float _1086 = ((((1.0 - _1077) * (_1072 + 2.0)) * exp2(log2(isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0))) * (_1072 + 1.0))) + _1077) * _1001;
        float _1087 = _969 * 0.5;
        float _1088 = _979 * 0.5;
        float _1089 = _989 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_293, _294, _295), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3350 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1002 + 9.9999997473787516355514526367188e-06);
        float _3361 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3372 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0))) * (_1114 + 1.0))) + _1119) * _1002;
        _1136 = _969;
        _1137 = _968;
        _1138 = _967;
        _1139 = _979;
        _1140 = _978;
        _1141 = _977;
        _1142 = _989;
        _1143 = _988;
        _1144 = _987;
        _1145 = _1002;
        _1146 = _1001;
        _1147 = _1000;
        _1148 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0)));
        _1149 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0)));
        _1150 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
    }
    else
    {
        _1136 = _824;
        _1137 = _824;
        _1138 = _824;
        _1139 = _824;
        _1140 = _824;
        _1141 = _824;
        _1142 = _824;
        _1143 = _824;
        _1144 = _824;
        _1145 = _824;
        _1146 = _824;
        _1147 = _824;
        _1148 = 0.0;
        _1149 = 0.0;
        _1150 = 0.0;
    }
    float _1160 = (cbModelParam._m0[1u].x * (_1148 - _836)) + _836;
    float _1161 = (cbModelParam._m0[1u].x * (_1149 - _837)) + _837;
    float _1162 = (cbModelParam._m0[1u].x * (_1150 - _838)) + _838;
    float _1183 = fma(_1162, cbSceneParam._m0[89u].z, fma(_1161, cbSceneParam._m0[89u].y, _1160 * cbSceneParam._m0[89u].x));
    float _1186 = fma(_1162, cbSceneParam._m0[90u].z, fma(_1161, cbSceneParam._m0[90u].y, _1160 * cbSceneParam._m0[90u].x));
    float _1189 = fma(_1162, cbSceneParam._m0[91u].z, fma(_1161, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1160));
    float _1204 = _462 * 0.5;
    float _1205 = _463 * 0.5;
    float _1206 = _464 * 0.5;
    float _1207 = dot(vec4(_1204, _1205, _1206, 1.0), vec4(_1138, _1141, _1144, _1147));
    float _1210 = dot(vec4(_1204, _1205, _1206, 1.0), vec4(_1137, _1140, _1143, _1146));
    float _1213 = dot(vec4(_1204, _1205, _1206, 1.0), vec4(_1136, _1139, _1142, _1145));
    float _1247;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1220 = dot(vec4(_1204, _1205, _1206, 1.0), vec4(_823, _827, _830, _833));
        float _1224 = dot(vec4(_1204, _1205, _1206, 1.0), vec4(_825, _828, _831, _834));
        float _1228 = dot(vec4(_1204, _1205, _1206, 1.0), vec4(_826, _829, _832, _835));
        float _1235 = dot(vec4(cbModelParam._m0[39u]), vec4(_1204, _1205, _1206, 1.0));
        _1247 = dot(vec3(isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)), isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)), isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1235) ? 0.0 : (isnan(0.0) ? _1235 : max(0.0, _1235))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1247 = 1.0;
    }
    float _1258;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1249 = dot(vec4(cbModelParam._m0[40u]), vec4(_1204, _1205, _1206, 1.0));
        _1258 = dot(vec3(isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)), isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)), isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1249) ? 0.0 : (isnan(0.0) ? _1249 : max(0.0, _1249))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1258 = 1.0;
    }
    float _1262 = (_1258 * cbModelParam._m0[1u].x) + (_1247 * (1.0 - cbModelParam._m0[1u].x));
    float _1271 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1353;
    float _1355;
    float _1357;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1320 = fma(_494, cbModelParam._m0[13u].z, fma(_490, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _486)) + cbModelParam._m0[13u].w;
        float _1324 = fma(_494, cbModelParam._m0[14u].z, fma(_490, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _486)) + cbModelParam._m0[14u].w;
        float _1328 = fma(_494, cbModelParam._m0[15u].z, fma(_490, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _486)) + cbModelParam._m0[15u].w;
        float _1331 = fma(_464, cbModelParam._m0[13u].z, fma(_463, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _462));
        float _1334 = fma(_464, cbModelParam._m0[14u].z, fma(_463, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _462));
        float _1337 = fma(_464, cbModelParam._m0[15u].z, fma(_463, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _462));
        float _1363;
        if (_1331 > 0.0)
        {
            _1363 = abs((1.0 - _1320) / _1331);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1331 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1320 + 1.0) / _1331);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1363 = frontier_phi_19_17_ladder;
        }
        float _1592;
        if (_1334 > 0.0)
        {
            _1592 = abs((1.0 - _1324) / _1334);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1334 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1324 + 1.0) / _1334);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1592 = frontier_phi_28_24_ladder;
        }
        float _1784;
        if (_1337 > 0.0)
        {
            _1784 = abs((1.0 - _1328) / _1337);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1337 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1328 + 1.0) / _1337);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1784 = frontier_phi_40_35_ladder;
        }
        float _1786 = isnan(_1592) ? _1363 : (isnan(_1363) ? _1592 : min(_1363, _1592));
        float _1787 = isnan(_1784) ? _1786 : (isnan(_1786) ? _1784 : min(_1786, _1784));
        float _1791 = (_1787 * _1331) + _1320;
        float _1792 = (_1787 * _1334) + _1324;
        float _1793 = (_1787 * _1337) + _1328;
        float _1794 = _1787 * 9.9999997473787516355514526367188e-05;
        float _1796 = (-1.0) - _1794;
        float _1798 = _1794 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1793 > _1798) || ((_1793 < _1796) || ((_1792 > _1798) || ((_1792 < _1796) || ((_1791 < _1796) || (_1791 > _1798))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1890 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1793, cbModelParam._m0[9u].z, fma(_1792, cbModelParam._m0[9u].y, _1791 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1793, cbModelParam._m0[10u].z, fma(_1792, cbModelParam._m0[10u].y, _1791 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1793, cbModelParam._m0[11u].z, fma(_1792, cbModelParam._m0[11u].y, _1791 * cbModelParam._m0[11u].x))), _1271);
            frontier_phi_18_40_ladder = _1890.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1890.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1890.x * cbModelParam._m0[1u].y;
        }
        _1353 = frontier_phi_18_40_ladder_2;
        _1355 = frontier_phi_18_40_ladder_1;
        _1357 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1341 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_462, _463, _464), _1271);
        _1353 = _1341.x * cbModelParam._m0[1u].y;
        _1355 = _1341.y * cbModelParam._m0[1u].y;
        _1357 = _1341.z * cbModelParam._m0[1u].y;
    }
    float _1360 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1453;
    float _1455;
    float _1457;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1417 = fma(_494, cbModelParam._m0[21u].z, fma(_490, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _486)) + cbModelParam._m0[21u].w;
        float _1421 = fma(_494, cbModelParam._m0[22u].z, fma(_490, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _486)) + cbModelParam._m0[22u].w;
        float _1425 = fma(_494, cbModelParam._m0[23u].z, fma(_490, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _486)) + cbModelParam._m0[23u].w;
        float _1428 = fma(_464, cbModelParam._m0[21u].z, fma(_463, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _462));
        float _1431 = fma(_464, cbModelParam._m0[22u].z, fma(_463, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _462));
        float _1434 = fma(_464, cbModelParam._m0[23u].z, fma(_463, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _462));
        float _1597;
        if (_1428 > 0.0)
        {
            _1597 = abs((1.0 - _1417) / _1428);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1428 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1417 + 1.0) / _1428);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1597 = frontier_phi_30_26_ladder;
        }
        float _1811;
        if (_1431 > 0.0)
        {
            _1811 = abs((1.0 - _1421) / _1431);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1431 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1421 + 1.0) / _1431);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1811 = frontier_phi_42_37_ladder;
        }
        float _1962;
        if (_1434 > 0.0)
        {
            _1962 = abs((1.0 - _1425) / _1434);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1434 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1425 + 1.0) / _1434);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1962 = frontier_phi_51_48_ladder;
        }
        float _1964 = isnan(_1811) ? _1597 : (isnan(_1597) ? _1811 : min(_1597, _1811));
        float _1965 = isnan(_1962) ? _1964 : (isnan(_1964) ? _1962 : min(_1964, _1962));
        float _1969 = (_1965 * _1428) + _1417;
        float _1970 = (_1965 * _1431) + _1421;
        float _1971 = (_1965 * _1434) + _1425;
        float _1972 = _1965 * 9.9999997473787516355514526367188e-05;
        float _1973 = (-1.0) - _1972;
        float _1975 = _1972 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1971 > _1975) || ((_1971 < _1973) || ((_1970 > _1975) || ((_1970 < _1973) || ((_1969 < _1973) || (_1969 > _1975))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2174 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1971, cbModelParam._m0[17u].z, fma(_1970, cbModelParam._m0[17u].y, _1969 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1971, cbModelParam._m0[18u].z, fma(_1970, cbModelParam._m0[18u].y, _1969 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1971, cbModelParam._m0[19u].z, fma(_1970, cbModelParam._m0[19u].y, _1969 * cbModelParam._m0[19u].x))), _1360);
            frontier_phi_27_51_ladder = _2174.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2174.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2174.x * cbModelParam._m0[1u].z;
        }
        _1453 = frontier_phi_27_51_ladder_2;
        _1455 = frontier_phi_27_51_ladder_1;
        _1457 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1437 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_462, _463, _464), _1360);
        _1453 = _1437.x * cbModelParam._m0[1u].z;
        _1455 = _1437.y * cbModelParam._m0[1u].z;
        _1457 = _1437.z * cbModelParam._m0[1u].z;
    }
    float _1469 = _453 * 0.01200000010430812835693359375;
    float _1471 = _1469 * ((cbModelParam._m0[1u].w * (_1453 - _1353)) + _1353);
    float _1472 = _1469 * ((cbModelParam._m0[1u].w * (_1455 - _1355)) + _1355);
    float _1473 = _1469 * ((cbModelParam._m0[1u].w * (_1457 - _1357)) + _1357);
    float _1476 = fma(_1473, cbSceneParam._m0[89u].z, fma(_1472, cbSceneParam._m0[89u].y, _1471 * cbSceneParam._m0[89u].x));
    float _1479 = fma(_1473, cbSceneParam._m0[90u].z, fma(_1472, cbSceneParam._m0[90u].y, _1471 * cbSceneParam._m0[90u].x));
    float _1482 = fma(_1473, cbSceneParam._m0[91u].z, fma(_1472, cbSceneParam._m0[91u].y, _1471 * cbSceneParam._m0[91u].x));
    vec4 _1490 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_387, _388));
    float _1492 = _1490.w;
    float _1504 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1492);
    float _1505 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1492);
    float _1506 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1492);
    uvec4 _1510 = floatBitsToUint(cbInstanceData._m0[_427 + 5u]);
    uint _1512 = _1510.x * 14u;
    uint _1513 = _1512 + 13u;
    float _1520 = _453 + (-1.0);
    float _1526 = (cbLight._m0[_1513].x * _1520) + 1.0;
    float _1527 = (cbLight._m0[_1513].y * _1520) + 1.0;
    float _1528 = (cbLight._m0[_1513].z * _1520) + 1.0;
    float _1529 = (cbLight._m0[_1513].w * _1520) + 1.0;
    uint _1530 = _1512 + 5u;
    float _1536 = isnan(1.0) ? _1527 : (isnan(_1527) ? 1.0 : min(_1527, 1.0));
    uint _1540 = _1512 + 4u;
    float _1550 = isnan(1.0) ? _1526 : (isnan(_1526) ? 1.0 : min(_1526, 1.0));
    uint _1554 = _1512 | 1u;
    float _1565 = dot(vec3(cbLight._m0[_1512].xyz), vec3(_293, _294, _295));
    float _1568 = dot(vec3(cbLight._m0[_1554].xyz), vec3(_293, _294, _295));
    float _3508 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
    float _3519 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
    float _1573 = (isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * 0.3183098733425140380859375;
    float _1575 = (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))) * 0.3183098733425140380859375;
    float _1582 = ((cbLight._m0[_1530].x * _1536) * _1575) + (((cbLight._m0[_1540].x * _1504) * _1550) * _1573);
    float _1583 = ((_1536 * cbLight._m0[_1530].y) * _1575) + (((cbLight._m0[_1540].y * _1505) * _1550) * _1573);
    float _1584 = ((_1536 * cbLight._m0[_1530].z) * _1575) + (((cbLight._m0[_1540].z * _1506) * _1550) * _1573);
    uvec4 _1589 = floatBitsToUint(cbLight._m0[_1512 + 12u]);
    bool _1591 = _1589.x == 0u;
    float _1602;
    float _1604;
    float _1606;
    if (_1591)
    {
        _1602 = _1582;
        _1604 = _1583;
        _1606 = _1584;
    }
    else
    {
        uint _1610 = _1512 + 6u;
        float _1626 = (dot(vec3(cbLight._m0[_1512 + 2u].xyz), vec3(_293, _294, _295)) * 0.5) + 0.5;
        float _1627 = _1626 * _1626;
        float _3530 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _1629 = isnan(1.0) ? _1528 : (isnan(_1528) ? 1.0 : min(_1528, 1.0));
        _1602 = (((cbLight._m0[_1610].x * 0.3183098733425140380859375) * _1628) * _1629) + _1582;
        _1604 = (((cbLight._m0[_1610].y * 0.3183098733425140380859375) * _1628) * _1629) + _1583;
        _1606 = (((cbLight._m0[_1610].z * 0.3183098733425140380859375) * _1628) * _1629) + _1584;
    }
    bool _1609 = _1589.y == 0u;
    float _1647;
    float _1649;
    float _1651;
    if (_1609)
    {
        _1647 = _1602;
        _1649 = _1604;
        _1651 = _1606;
    }
    else
    {
        uint _1755 = _1512 + 7u;
        float _1771 = (dot(vec3(cbLight._m0[_1512 + 3u].xyz), vec3(_293, _294, _295)) * 0.5) + 0.5;
        float _1772 = _1771 * _1771;
        float _3546 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1773 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _1774 = isnan(1.0) ? _1529 : (isnan(_1529) ? 1.0 : min(_1529, 1.0));
        _1647 = (((cbLight._m0[_1755].x * 0.3183098733425140380859375) * _1773) * _1774) + _1602;
        _1649 = (((cbLight._m0[_1755].y * 0.3183098733425140380859375) * _1773) * _1774) + _1604;
        _1651 = (((cbLight._m0[_1755].z * 0.3183098733425140380859375) * _1773) * _1774) + _1606;
    }
    uint _1653 = _1512 + 8u;
    float _1659 = cbLight._m0[_1512].x + _371;
    float _1660 = cbLight._m0[_1512].y + _372;
    float _1661 = cbLight._m0[_1512].z + _373;
    float _1665 = inversesqrt(dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661)));
    float _1669 = dot(vec3(_293, _294, _295), vec3(cbLight._m0[_1512].xyz));
    float _3562 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
    float _1672 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    float _3573 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _1673 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    float _1674 = dot(vec3(cbLight._m0[_1512].xyz), vec3(_1659 * _1665, _1660 * _1665, _1661 * _1665));
    float _3584 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
    float _1685 = (exp2(log2(1.0 - (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1691 = (0.5 / ((_1672 + 9.9999999392252902907785028219223e-09) + _1673)) * _1672;
    float _3595 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
    float _1693 = (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * 0.31831014156341552734375;
    uint _1707 = _1512 + 9u;
    float _1713 = cbLight._m0[_1554].x + _371;
    float _1714 = cbLight._m0[_1554].y + _372;
    float _1715 = cbLight._m0[_1554].z + _373;
    float _1719 = inversesqrt(dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715)));
    float _1723 = dot(vec3(_293, _294, _295), vec3(cbLight._m0[_1554].xyz));
    float _3606 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
    float _1726 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _1727 = dot(vec3(cbLight._m0[_1554].xyz), vec3(_1713 * _1719, _1714 * _1719, _1715 * _1719));
    float _3617 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
    float _1736 = (exp2(log2(1.0 - (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1740 = (0.5 / ((_1726 + 9.9999999392252902907785028219223e-09) + _1673)) * _1726;
    float _3628 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1742 = (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * 0.31831014156341552734375;
    float _1752 = (((_1736 * cbLight._m0[_1707].x) * _1742) * _1536) + ((((cbLight._m0[_1653].x * _1504) * _1685) * _1693) * _1550);
    float _1753 = (((_1736 * cbLight._m0[_1707].y) * _1742) * _1536) + ((((cbLight._m0[_1653].y * _1505) * _1685) * _1693) * _1550);
    float _1754 = (((_1736 * cbLight._m0[_1707].z) * _1742) * _1536) + ((((cbLight._m0[_1653].z * _1506) * _1685) * _1693) * _1550);
    float _1816;
    float _1818;
    float _1820;
    if (_1591)
    {
        _1816 = _1752;
        _1818 = _1753;
        _1820 = _1754;
    }
    else
    {
        uint _1822 = _1512 + 10u;
        uint _1828 = _1512 + 2u;
        float _1834 = cbLight._m0[_1828].x + _371;
        float _1835 = cbLight._m0[_1828].y + _372;
        float _1836 = cbLight._m0[_1828].z + _373;
        float _1840 = inversesqrt(dot(vec3(_1834, _1835, _1836), vec3(_1834, _1835, _1836)));
        float _1844 = dot(vec3(_293, _294, _295), vec3(cbLight._m0[_1828].xyz));
        float _3639 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1847 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1848 = dot(vec3(cbLight._m0[_1828].xyz), vec3(_1834 * _1840, _1835 * _1840, _1836 * _1840));
        float _3650 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
        float _1857 = (exp2(log2(1.0 - (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1861 = (0.5 / ((_1847 + 9.9999999392252902907785028219223e-09) + _1673)) * _1847;
        float _3661 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1863 = (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * 0.31831014156341552734375;
        float _1864 = isnan(1.0) ? _1528 : (isnan(_1528) ? 1.0 : min(_1528, 1.0));
        _1816 = (((_1857 * cbLight._m0[_1822].x) * _1863) * _1864) + _1752;
        _1818 = (((_1857 * cbLight._m0[_1822].y) * _1863) * _1864) + _1753;
        _1820 = (((_1857 * cbLight._m0[_1822].z) * _1863) * _1864) + _1754;
    }
    float _1899;
    float _1901;
    float _1903;
    if (_1609)
    {
        _1899 = _1816;
        _1901 = _1818;
        _1903 = _1820;
    }
    else
    {
        uint _1910 = _1512 + 11u;
        uint _1916 = _1512 + 3u;
        float _1922 = cbLight._m0[_1916].x + _371;
        float _1923 = cbLight._m0[_1916].y + _372;
        float _1924 = cbLight._m0[_1916].z + _373;
        float _1928 = inversesqrt(dot(vec3(_1922, _1923, _1924), vec3(_1922, _1923, _1924)));
        float _1932 = dot(vec3(_293, _294, _295), vec3(cbLight._m0[_1916].xyz));
        float _3677 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1935 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1936 = dot(vec3(cbLight._m0[_1916].xyz), vec3(_1922 * _1928, _1923 * _1928, _1924 * _1928));
        float _3688 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1945 = (exp2(log2(1.0 - (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1949 = (0.5 / ((_1935 + 9.9999999392252902907785028219223e-09) + _1673)) * _1935;
        float _3699 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1951 = (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * 0.31831014156341552734375;
        float _1952 = isnan(1.0) ? _1529 : (isnan(_1529) ? 1.0 : min(_1529, 1.0));
        _1899 = (((_1945 * cbLight._m0[_1910].x) * _1951) * _1952) + _1816;
        _1901 = (((_1945 * cbLight._m0[_1910].y) * _1951) * _1952) + _1818;
        _1903 = (((_1945 * cbLight._m0[_1910].z) * _1951) * _1952) + _1820;
    }
    float _2086;
    float _2088;
    float _2090;
    float _2092;
    float _2094;
    float _2096;
    if (_1510.y == 0u)
    {
        float _2027 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2028 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2027;
        float _2029 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2027;
        float _2030 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2027;
        uvec4 _2042 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2043 = _2042.x;
        uint _2054 = uint((float(_2042.y) * floor(float(uint(cbSceneParam._m0[85u].y * _388) / _2043))) + floor(float(uint(cbSceneParam._m0[85u].x * _387) / _2043)));
        float _2064 = (log2(_2030 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2065 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        uint _2068 = uint(isnan(14.0) ? _2065 : (isnan(_2065) ? 14.0 : min(_2065, 14.0)));
        uvec4 _2073 = texelFetch(g_lightClusterGridBuffer, int(((_2068 << 2u) + (_2054 << 6u)) >> 2u));
        uint _2074 = _2073.x;
        uint _2075 = _2042.z;
        float _2179;
        float _2181;
        float _2183;
        float _2185;
        float _2187;
        float _2189;
        if (((((1u << ((_2075 >> 4u) & 15u)) + 4294967295u) & _2074) == 0u) || ((_2075 & 240u) == 0u))
        {
            _2179 = 0.0;
            _2181 = 0.0;
            _2183 = 0.0;
            _2185 = 0.0;
            _2187 = 0.0;
            _2189 = 0.0;
        }
        else
        {
            float _2180;
            float _2182;
            float _2184;
            float _2186;
            float _2188;
            float _2190;
            float _2330 = 0.0;
            float _2331 = 0.0;
            float _2332 = 0.0;
            float _2333 = 0.0;
            float _2334 = 0.0;
            float _2335 = 0.0;
            uint _2336 = 0u;
            uint _2345;
            bool _2346;
            for (;;)
            {
                _2345 = texelFetch(g_lightClassification, int((((_2068 << 5u) + (_2054 << 9u)) + (_2336 << 2u)) >> 2u)).x;
                _2346 = _2345 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2346)
                {
                    frontier_phi_68_pred = _2332;
                    frontier_phi_68_pred_1 = _2335;
                    frontier_phi_68_pred_2 = _2334;
                    frontier_phi_68_pred_3 = _2333;
                    frontier_phi_68_pred_4 = _2331;
                    frontier_phi_68_pred_5 = _2330;
                }
                else
                {
                    float _2475;
                    float _2476;
                    float _2477;
                    float _2478;
                    float _2479;
                    float _2480;
                    uint _2481;
                    _2475 = _2330;
                    _2476 = _2331;
                    _2477 = _2332;
                    _2478 = _2333;
                    _2479 = _2334;
                    _2480 = _2335;
                    _2481 = _2345;
                    float _2402;
                    float _2403;
                    float _2404;
                    float _2405;
                    float _2406;
                    float _2407;
                    for (;;)
                    {
                        uint _2485 = uint(findLSB(_2481)) + (_2336 << 5u);
                        uint _2482 = (_2481 + 4294967295u) & _2481;
                        uint _2487 = _2485 * 48u;
                        vec4 _2501 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2487)).x, texelFetch(g_PointLightRenderingBuffer, int(_2487 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2487 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2487 + 3u)).x));
                        uint _2507 = (_2485 * 48u) + 4u;
                        vec4 _2520 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2507)).x, texelFetch(g_PointLightRenderingBuffer, int(_2507 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2507 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2507 + 3u)).x));
                        uint _2526 = (_2485 * 48u) + 8u;
                        vec3 _2537 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2526)).x, texelFetch(g_PointLightRenderingBuffer, int(_2526 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2526 + 2u)).x));
                        float _2541 = _2501.x - _2028;
                        float _2542 = _2501.y - _2029;
                        float _2543 = _2501.z - _2030;
                        float _2544 = dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543));
                        float _2547 = inversesqrt(_2544);
                        float _2556 = 1.0 - (_2544 * _2501.w);
                        float _3725 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
                        float _2557 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
                        float _2558 = sqrt(_2544) * _2520.w;
                        float _2561 = 1.39999997615814208984375 / (_2558 + 1.39999997615814208984375);
                        float _2562 = _2561 * _2561;
                        float _2565 = ((1.0 - _2562) * dot(vec3(_408, _411, _414), vec3(_2547 * _2541, _2547 * _2542, _2547 * _2543))) + _2562;
                        float _2568 = _2558 * _2558;
                        float _2572 = ((isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0))) * _2557) / ((_2568 * 0.699999988079071044921875) + 1.0);
                        float _2576 = (-0.0) - _2028;
                        float _2577 = (-0.0) - _2029;
                        float _2578 = (-0.0) - _2030;
                        float _2582 = inversesqrt(dot(vec3(_2576, _2577, _2578), vec3(_2576, _2577, _2578)));
                        float _2586 = dot(vec3(_408, _411, _414), vec3(_2582 * _2576, _2582 * _2577, _2582 * _2578));
                        float _3741 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
                        float _3752 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
                        float _2590 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
                        float _2594 = (0.5 / (((isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) + 9.9999999392252902907785028219223e-09) + _2590)) * _2590;
                        float _3763 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
                        float _2603 = (((isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * 3.1415927410125732421875) / ((_2568 * 2.1991131305694580078125) + 3.141590118408203125)) * _2557;
                        _2405 = (_2572 * _2520.x) + _2478;
                        _2406 = (_2572 * _2520.y) + _2479;
                        _2407 = (_2572 * _2520.z) + _2480;
                        _2402 = (_2603 * _2537.x) + _2475;
                        _2403 = (_2603 * _2537.y) + _2476;
                        _2404 = (_2603 * _2537.z) + _2477;
                        if (_2482 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2475 = _2402;
                            _2476 = _2403;
                            _2477 = _2404;
                            _2478 = _2405;
                            _2479 = _2406;
                            _2480 = _2407;
                            _2481 = _2482;
                        }
                    }
                    frontier_phi_68_pred = _2404;
                    frontier_phi_68_pred_1 = _2407;
                    frontier_phi_68_pred_2 = _2406;
                    frontier_phi_68_pred_3 = _2405;
                    frontier_phi_68_pred_4 = _2403;
                    frontier_phi_68_pred_5 = _2402;
                }
                _2184 = frontier_phi_68_pred;
                _2190 = frontier_phi_68_pred_1;
                _2188 = frontier_phi_68_pred_2;
                _2186 = frontier_phi_68_pred_3;
                _2182 = frontier_phi_68_pred_4;
                _2180 = frontier_phi_68_pred_5;
                uint _2337 = _2336 + 1u;
                if (_2337 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2330 = _2180;
                    _2331 = _2182;
                    _2332 = _2184;
                    _2333 = _2186;
                    _2334 = _2188;
                    _2335 = _2190;
                    _2336 = _2337;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2179 = _2180;
            _2181 = _2182;
            _2183 = _2184;
            _2185 = _2186;
            _2187 = _2188;
            _2189 = _2190;
        }
        uvec4 _2193 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2194 = _2193.z;
        uint _2196 = (_2194 >> 8u) & 15u;
        float _2301;
        float _2303;
        float _2305;
        float _2307;
        float _2309;
        float _2311;
        if (((4294967295u << _2196) & _2074) == 0u)
        {
            _2301 = _2179;
            _2303 = _2181;
            _2305 = _2183;
            _2307 = _2185;
            _2309 = _2187;
            _2311 = _2189;
        }
        else
        {
            float _2326 = inversesqrt(dot(vec3(_2028, _2029, _2030), vec3(_2028, _2029, _2030)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2196 < ((_2194 >> 12u) & 15u))
            {
                float _2302;
                float _2304;
                float _2306;
                float _2308;
                float _2310;
                float _2312;
                float _2458 = _2179;
                float _2459 = _2181;
                float _2460 = _2183;
                float _2461 = _2185;
                float _2462 = _2187;
                float _2463 = _2189;
                uint _2464 = _2196;
                uint _2473;
                bool _2474;
                for (;;)
                {
                    _2473 = texelFetch(g_lightClassification, int((((_2068 << 5u) + (_2054 << 9u)) + (_2464 << 2u)) >> 2u)).x;
                    _2474 = _2473 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2474)
                    {
                        frontier_phi_79_pred = _2463;
                        frontier_phi_79_pred_1 = _2462;
                        frontier_phi_79_pred_2 = _2461;
                        frontier_phi_79_pred_3 = _2460;
                        frontier_phi_79_pred_4 = _2459;
                        frontier_phi_79_pred_5 = _2458;
                    }
                    else
                    {
                        float _2617;
                        float _2618;
                        float _2619;
                        float _2620;
                        float _2621;
                        float _2622;
                        float _2869;
                        float _2870;
                        float _2871;
                        float _2872;
                        float _2873;
                        float _2874;
                        float _2630 = _2458;
                        float _2631 = _2459;
                        float _2632 = _2460;
                        float _2633 = _2461;
                        float _2634 = _2462;
                        float _2635 = _2463;
                        uint _2636 = _2473;
                        uint _2637;
                        vec4 _2662;
                        float _2663;
                        vec4 _2678;
                        vec3 _2690;
                        vec4 _2706;
                        vec4 _2722;
                        float _2769;
                        bool _2770;
                        for (;;)
                        {
                            uint _2647 = ((_2464 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2636));
                            _2637 = (_2636 + 4294967295u) & _2636;
                            uint _2649 = _2647 * 40u;
                            _2662 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2649)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2649 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2649 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2649 + 3u)).x));
                            _2663 = _2662.w;
                            uint _2665 = (_2647 * 40u) + 4u;
                            _2678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2665 + 3u)).x));
                            uint _2680 = (_2647 * 40u) + 8u;
                            _2690 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2680 + 2u)).x));
                            uint _2693 = (_2647 * 40u) + 16u;
                            _2706 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 3u)).x));
                            uint _2709 = (_2647 * 40u) + 20u;
                            _2722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 3u)).x));
                            uint _2725 = (_2647 * 40u) + 24u;
                            vec4 _2738 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2725)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2725 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2725 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2725 + 3u)).x));
                            uint _2744 = (_2647 * 40u) + 28u;
                            vec4 _2757 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2744)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2744 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2744 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2744 + 3u)).x));
                            _2769 = fma(_2030, _2757.z, fma(_2029, _2757.y, _2757.x * _2028)) + _2757.w;
                            _2770 = !((fma(_2030, _2738.z, fma(_2029, _2738.y, _2738.x * _2028)) + _2738.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2770)
                            {
                                float _2797 = _2662.x - _2028;
                                float _2798 = _2662.y - _2029;
                                float _2799 = _2662.z - _2030;
                                float _2800 = dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799));
                                float _2803 = inversesqrt(_2800);
                                float _2804 = _2803 * _2797;
                                float _2805 = _2803 * _2798;
                                float _2806 = _2803 * _2799;
                                float _2810 = 1.0 - (_2800 / (_2663 * _2663));
                                float _3774 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                                float _2811 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
                                float _2815 = sqrt(_2800) * _2678.w;
                                float _2817 = 1.39999997615814208984375 / (_2815 + 1.39999997615814208984375);
                                float _2818 = _2817 * _2817;
                                float _2819 = 1.0 - _2818;
                                float _2821 = (_2819 * dot(vec3(_2804, _2805, _2806), vec3(_408, _411, _414))) + _2818;
                                float _2824 = _2815 * _2815;
                                float _2828 = (fma(_2030, _2706.z, fma(_2029, _2706.y, _2706.x * _2028)) + _2706.w) / _2769;
                                float _2829 = (fma(_2030, _2722.z, fma(_2029, _2722.y, _2722.x * _2028)) + _2722.w) / _2769;
                                float _2833 = 1.0 - dot(vec2(_2828, _2829), vec2(_2828, _2829));
                                float _3790 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
                                float _2834 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
                                float _2835 = _2834 * (((isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0))) * _2811) / ((_2824 * 0.699999988079071044921875) + 1.0));
                                float _2845 = dot(vec3(_408, _411, _414), vec3((-0.0) - (_2028 * _2326), (-0.0) - (_2029 * _2326), (-0.0) - (_2030 * _2326)));
                                float _3801 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
                                float _2853 = (_2819 * dot(vec3(_408, _411, _414), vec3(_2804, _2805, _2806))) + _2818;
                                float _3812 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
                                float _2854 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
                                float _2858 = (0.5 / (((isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) + 9.9999999392252902907785028219223e-09) + _2854)) * _2854;
                                float _3823 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                                float _2865 = (_2834 * _2811) * (((isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * 3.1415927410125732421875) / ((_2824 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2835 * _2678.z;
                                frontier_phi_85_pred_1 = _2835 * _2678.y;
                                frontier_phi_85_pred_2 = _2835 * _2678.x;
                                frontier_phi_85_pred_3 = _2865 * _2690.z;
                                frontier_phi_85_pred_4 = _2865 * _2690.y;
                                frontier_phi_85_pred_5 = _2865 * _2690.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2874 = frontier_phi_85_pred;
                            _2873 = frontier_phi_85_pred_1;
                            _2872 = frontier_phi_85_pred_2;
                            _2871 = frontier_phi_85_pred_3;
                            _2870 = frontier_phi_85_pred_4;
                            _2869 = frontier_phi_85_pred_5;
                            _2620 = _2872 + _2633;
                            _2621 = _2873 + _2634;
                            _2622 = _2874 + _2635;
                            _2617 = _2869 + _2630;
                            _2618 = _2870 + _2631;
                            _2619 = _2871 + _2632;
                            if (_2637 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2630 = _2617;
                                _2631 = _2618;
                                _2632 = _2619;
                                _2633 = _2620;
                                _2634 = _2621;
                                _2635 = _2622;
                                _2636 = _2637;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2622;
                        frontier_phi_79_pred_1 = _2621;
                        frontier_phi_79_pred_2 = _2620;
                        frontier_phi_79_pred_3 = _2619;
                        frontier_phi_79_pred_4 = _2618;
                        frontier_phi_79_pred_5 = _2617;
                    }
                    _2312 = frontier_phi_79_pred;
                    _2310 = frontier_phi_79_pred_1;
                    _2308 = frontier_phi_79_pred_2;
                    _2306 = frontier_phi_79_pred_3;
                    _2304 = frontier_phi_79_pred_4;
                    _2302 = frontier_phi_79_pred_5;
                    uint _2465 = _2464 + 1u;
                    if (_2465 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2458 = _2302;
                        _2459 = _2304;
                        _2460 = _2306;
                        _2461 = _2308;
                        _2462 = _2310;
                        _2463 = _2312;
                        _2464 = _2465;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2308;
                frontier_phi_60_61_ladder_1 = _2312;
                frontier_phi_60_61_ladder_2 = _2310;
                frontier_phi_60_61_ladder_3 = _2306;
                frontier_phi_60_61_ladder_4 = _2304;
                frontier_phi_60_61_ladder_5 = _2302;
            }
            else
            {
                frontier_phi_60_61_ladder = _2185;
                frontier_phi_60_61_ladder_1 = _2189;
                frontier_phi_60_61_ladder_2 = _2187;
                frontier_phi_60_61_ladder_3 = _2183;
                frontier_phi_60_61_ladder_4 = _2181;
                frontier_phi_60_61_ladder_5 = _2179;
            }
            _2301 = frontier_phi_60_61_ladder_5;
            _2303 = frontier_phi_60_61_ladder_4;
            _2305 = frontier_phi_60_61_ladder_3;
            _2307 = frontier_phi_60_61_ladder;
            _2309 = frontier_phi_60_61_ladder_2;
            _2311 = frontier_phi_60_61_ladder_1;
        }
        float _2316 = isnan(1.0) ? _453 : (isnan(_453) ? 1.0 : min(_453, 1.0));
        _2086 = (_2316 * _2307) + _1647;
        _2088 = (_2316 * _2309) + _1649;
        _2090 = (_2316 * _2311) + _1651;
        _2092 = ((_2301 * 0.039999999105930328369140625) * _2316) + _1899;
        _2094 = ((_2303 * 0.039999999105930328369140625) * _2316) + _1901;
        _2096 = ((_2305 * 0.039999999105930328369140625) * _2316) + _1903;
    }
    else
    {
        _2086 = _1647;
        _2088 = _1649;
        _2090 = _1651;
        _2092 = _1899;
        _2094 = _1901;
        _2096 = _1903;
    }
    float _3839 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _3850 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _3861 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3872 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _2114 = ((isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_2086 + ((isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0))) * _453))) + ((_2092 + ((isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))) * _1262)) * cbPerFrame._m0[3u].x);
    float _2115 = ((isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_2088 + ((isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0))) * _453))) + ((_2094 + ((isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))) * _1262)) * cbPerFrame._m0[3u].x);
    float _2116 = ((isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_2090 + ((isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0))) * _453))) + ((_2096 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _1262)) * cbPerFrame._m0[3u].x);
    float _2117 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2118 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2119 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2124 = cbInstanceData._m0[_427 + 6u].w * (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)));
    float _2129 = _387 / cbSceneParam._m0[86u].x;
    float _2130 = _388 / cbSceneParam._m0[86u].y;
    vec4 _2144 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2129, _2130, (log2((isnan(cbSceneParam._m0[77u].w) ? _313 : (isnan(_313) ? cbSceneParam._m0[77u].w : min(_313, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2146 = _2144.x;
    float _2147 = _2144.y;
    float _2148 = _2144.z;
    float _2149 = _2144.w;
    float _2241;
    float _2243;
    float _2245;
    float _2247;
    if (_313 > cbSceneParam._m0[78u].w)
    {
        float _2204 = isnan(_313) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _313 : min(cbSceneParam._m0[80u].w, _313));
        float _2205 = _2204 / _313;
        float _2216 = _2205 * _364;
        float _2217 = _365 * _2205;
        float _2218 = (-0.0) - _2217;
        float _2219 = _2205 * _366;
        float _2221 = (cbSceneParam._m0[77u].w * _2218) / _2204;
        float _2222 = _2221 + cbSceneParam._m0[79u].w;
        float _2223 = cbSceneParam._m0[79u].w - _2217;
        float _2229 = sqrt(((_2216 * _2216) + (_2217 * _2217)) + (_2219 * _2219));
        float _2232 = (1.0 - (cbSceneParam._m0[77u].w / _2204)) * _2229;
        float _2237 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2239 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2415;
        if (abs((_2218 - _2221) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2415 = ((((_2222 > 0.0) ? exp2(_2237 * _2222) : (2.0 - exp2(_2239 * _2222))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2232;
        }
        else
        {
            float _2359 = 1.0 / cbSceneParam._m0[80u].x;
            float _2360 = isnan(_2223) ? _2222 : (isnan(_2222) ? _2223 : max(_2222, _2223));
            float _2361 = isnan(_2223) ? _2222 : (isnan(_2222) ? _2223 : min(_2222, _2223));
            float _2370 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : min(_2360, 0.0));
            float _2371 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : min(_2361, 0.0));
            _2415 = ((abs(_2229 / _2218) * cbSceneParam._m0[80u].y) * ((((_2370 - _2371) * 2.0) - ((exp2(_2237 * (isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0)))) - exp2(_2237 * (isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0))))) * _2359)) - ((exp2(_2239 * _2370) - exp2(_2239 * _2371)) * _2359))) + (_2232 * cbSceneParam._m0[80u].z);
        }
        vec4 _2417 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2129, _2130, 1.0), 0.0);
        float _2426 = exp2((_2415 * (-1.44269502162933349609375)) * (1.0 - _2417.w));
        float _2427 = log2(_2426);
        float _2443 = log2(_2149);
        _2241 = (exp2(_2443 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2427 * cbSceneParam._m0[78u].x)) * _2417.x) / cbSceneParam._m0[78u].x)) + _2146;
        _2243 = (exp2(_2443 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2427 * cbSceneParam._m0[78u].y)) * _2417.y) / cbSceneParam._m0[78u].y)) + _2147;
        _2245 = (exp2(_2443 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2427 * cbSceneParam._m0[78u].z)) * _2417.z) / cbSceneParam._m0[78u].z)) + _2148;
        _2247 = _2426 * _2149;
    }
    else
    {
        _2241 = _2146;
        _2243 = _2147;
        _2245 = _2148;
        _2247 = _2149;
    }
    bool _2453;
    vec4 _2257;
    vec4 _2280;
    float _2282;
    float _2286;
    float _2287;
    float _2288;
    float _2289;
    bool _2300;
    for (;;)
    {
        _2257 = cbMatDynParam._m0[0u];
        float _2259 = roundEven(_2257.y);
        bool _2260 = _2259 == 3.0;
        float _2262 = log2(_2247);
        float _2269 = exp2(_2262 * cbSceneParam._m0[78u].x) * _2117;
        float _2270 = exp2(_2262 * cbSceneParam._m0[78u].y) * _2118;
        float _2271 = exp2(_2262 * cbSceneParam._m0[78u].z) * _2119;
        float _2278 = _376 + (-0.5);
        _2280 = cbMtdParam._m0[1u];
        _2282 = _2280.y * _2278;
        float _2285 = (_2259 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2286 = _2285 * (_2260 ? _2269 : (_2269 + (cbSceneParam._m0[72u].w * _2241)));
        _2287 = _2285 * (_2260 ? _2270 : (_2270 + (cbSceneParam._m0[72u].w * _2243)));
        _2288 = _2285 * (_2260 ? _2271 : (_2271 + (cbSceneParam._m0[72u].w * _2245)));
        _2289 = _2278 * 0.999000012874603271484375;
        _2300 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2300)
        {
            if ((cbInstanceData._m0[_427 + 7u].x + _2289) < 0.5)
            {
                _2453 = true;
                break;
            }
        }
        uint _2394 = _429 + uint(_2257.w);
        if ((cbInstanceData._m0[_2394].w < 1.0) && ((cbInstanceData._m0[_2394].w + _2289) < 0.5))
        {
            _2453 = true;
            break;
        }
        if ((_2282 + _288) < _2280.x)
        {
            _2453 = true;
            break;
        }
        _2453 = false;
        break;
    }
    float _2608;
    if (_2453)
    {
        discard_state = true;
        _2608 = 0.0;
    }
    else
    {
        _2608 = _2124;
    }
    SV_Target.x = _2286;
    SV_Target.y = _2287;
    SV_Target.z = _2288;
    SV_Target.w = _2608;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2124;
    discard_exit();
}


