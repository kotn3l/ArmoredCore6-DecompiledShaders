#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A_Alpha_FlipBook_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _763;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _168 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _169 = _168 * NORMAL.x;
    float _170 = _168 * NORMAL.y;
    float _171 = _168 * NORMAL.z;
    float _176;
    float _177;
    float _178;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _176 = (-0.0) - _169;
        _177 = (-0.0) - _170;
        _178 = (-0.0) - _171;
    }
    else
    {
        _176 = _169;
        _177 = _170;
        _178 = _171;
    }
    uint _195 = uint(int(floor(cbMtdParam._m0[10u].x)));
    uint _196 = uint(int(cbMtdParam._m0[10u].w * cbMtdParam._m0[10u].z));
    float _198 = float(int(_195 - _196 * (_195 / _196)));
    vec4 _223 = texture(sampler2D(S_A_Alpha_FlipBook_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((fract(TEXCOORD_1.x) + (_198 - cbMtdParam._m0[10u].z * trunc(_198 / cbMtdParam._m0[10u].z))) * (1.0 / cbMtdParam._m0[10u].z)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((fract(TEXCOORD_1.y) + floor(_198 / cbMtdParam._m0[10u].z)) * (1.0 / cbMtdParam._m0[10u].w)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _223.x * cbMtdParam._m0[9u].x;
    float _231 = _223.y * cbMtdParam._m0[9u].y;
    float _232 = _223.z * cbMtdParam._m0[9u].z;
    vec4 _242 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _244 = _242.x;
    bool _251 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _267 = ((_251 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _244)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _244))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _2902 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _271 = ((cbMtdParam._m0[9u].w * TEXCOORD_1.z) * _223.w) * (isnan(1.0) ? _2902 : (isnan(_2902) ? 1.0 : min(_2902, 1.0)));
    float _275 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _276 = _275 * _176;
    float _277 = _275 * _177;
    float _278 = _275 * _178;
    float _2913 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _279 = isnan(1.0) ? _2913 : (isnan(_2913) ? 1.0 : min(_2913, 1.0));
    float _2924 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _2935 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _2946 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _287 = _251 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _328 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _338 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _328);
    float _339 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _328);
    float _340 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _328);
    float _344 = inversesqrt(dot(vec3(_338, _339, _340), vec3(_338, _339, _340)));
    float _345 = _338 * _344;
    float _346 = _339 * _344;
    float _347 = _340 * _344;
    float _352 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _353 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _374 = fma(_278, cbSceneParam._m0[5u].z, fma(_277, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _276));
    float _377 = fma(_278, cbSceneParam._m0[6u].z, fma(_277, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _276));
    float _380 = fma(_278, cbSceneParam._m0[7u].z, fma(_277, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _276));
    uint _393 = uint(roundEven(NORMAL.w)) * 13u;
    uint _396 = (_393 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _402 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2924 : (isnan(_2924) ? 1.0 : min(_2924, 1.0)))) * cbInstanceData._m0[_396].x;
    float _403 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2935 : (isnan(_2935) ? 1.0 : min(_2935, 1.0)))) * cbInstanceData._m0[_396].y;
    float _404 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2946 : (isnan(_2946) ? 1.0 : min(_2946, 1.0)))) * cbInstanceData._m0[_396].z;
    float _2957 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _405 = isnan(1.0) ? _2957 : (isnan(_2957) ? 1.0 : min(_2957, 1.0));
    float _2968 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _406 = isnan(1.0) ? _2968 : (isnan(_2968) ? 1.0 : min(_2968, 1.0));
    float _2979 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _407 = isnan(1.0) ? _2979 : (isnan(_2979) ? 1.0 : min(_2979, 1.0));
    vec4 _416 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _352, cbSceneParam._m0[86u].y * _353));
    float _419 = _416.x * TEXCOORD_1.w;
    float _420 = dot(vec3(_276, _277, _278), vec3(_345, _346, _347));
    float _423 = _420 * 2.0;
    float _428 = (_423 * _276) - _345;
    float _429 = (_423 * _277) - _346;
    float _430 = (_423 * _278) - _347;
    float _452 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _456 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _460 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _762;
    float _764;
    float _765;
    float _766;
    float _767;
    float _768;
    float _769;
    float _770;
    float _771;
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    float _777;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _487 = fma(_460, cbModelParam._m0[26u].z, fma(_456, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _452));
        float _491 = fma(_460, cbModelParam._m0[27u].z, fma(_456, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _452));
        float _495 = fma(_460, cbModelParam._m0[28u].z, fma(_456, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _452));
        float _520 = _452 + _276;
        float _521 = _456 + _277;
        float _522 = _460 + _278;
        float _532 = fma(_522, cbModelParam._m0[26u].z, fma(_521, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _520)) - _487;
        float _533 = fma(_522, cbModelParam._m0[27u].z, fma(_521, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _520)) - _491;
        float _534 = fma(_522, cbModelParam._m0[28u].z, fma(_521, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _520)) - _495;
        float _538 = inversesqrt(dot(vec3(_532, _533, _534), vec3(_532, _533, _534)));
        float _551 = ((_538 * _532) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_487 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _552 = ((_538 * _533) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_491 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _553 = ((_538 * _534) / cbModelParam._m0[34u].z) + ((((((_495 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _556 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_551, _552, _553), 0.0);
        vec4 _563 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_551, _552, _553), 0.0);
        vec4 _570 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_551, _552, _553), 0.0);
        vec4 _577 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_551, _552, _553), 0.0);
        float _590 = exp2((_556.w + (-0.5)) * 20.0) * 2.0;
        float _591 = _590 * (_556.x + (-0.5));
        float _592 = _590 * (_556.y + (-0.5));
        float _593 = _590 * (_556.z + (-0.5));
        float _600 = exp2((_563.w + (-0.5)) * 20.0) * 2.0;
        float _601 = _600 * (_563.x + (-0.5));
        float _602 = _600 * (_563.y + (-0.5));
        float _603 = _600 * (_563.z + (-0.5));
        float _610 = exp2((_570.w + (-0.5)) * 20.0) * 2.0;
        float _611 = _610 * (_570.x + (-0.5));
        float _612 = _610 * (_570.y + (-0.5));
        float _613 = _610 * (_570.z + (-0.5));
        float _620 = exp2((_577.w + (-0.5)) * 20.0) * 2.0;
        float _621 = _620 * (_577.x + (-0.5));
        float _622 = _620 * (_577.y + (-0.5));
        float _623 = _620 * (_577.z + (-0.5));
        float _624 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
        float _625 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
        float _626 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
        float _627 = _591 * 0.5;
        float _628 = _601 * 0.5;
        float _629 = _611 * 0.5;
        float _630 = dot(vec3(_627, _628, _629), vec3(_627, _628, _629));
        float _635 = (_630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_630);
        float _644 = (dot(vec3(_276, _277, _278), vec3(_635 * _627, _635 * _628, _635 * _629)) + 1.0) * 0.5;
        float _3005 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
        float _654 = sqrt(((_628 * _628) + (_627 * _627)) + (_629 * _629)) / (_624 + 9.9999997473787516355514526367188e-06);
        float _3016 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
        float _655 = isnan(1.0) ? _3016 : (isnan(_3016) ? 1.0 : min(_3016, 1.0));
        float _656 = _655 * 2.0;
        float _660 = (1.0 - _655) / (_655 + 1.0);
        float _3027 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        float _661 = isnan(1.0) ? _3027 : (isnan(_3027) ? 1.0 : min(_3027, 1.0));
        float _670 = ((((1.0 - _661) * (_656 + 2.0)) * exp2(log2(isnan(1.0) ? _3005 : (isnan(_3005) ? 1.0 : min(_3005, 1.0))) * (_656 + 1.0))) + _661) * _624;
        float _671 = _592 * 0.5;
        float _672 = _602 * 0.5;
        float _673 = _612 * 0.5;
        float _674 = dot(vec3(_671, _672, _673), vec3(_671, _672, _673));
        float _679 = (_674 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_674);
        float _687 = (dot(vec3(_276, _277, _278), vec3(_679 * _671, _679 * _672, _679 * _673)) + 1.0) * 0.5;
        float _3038 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        float _696 = sqrt(((_672 * _672) + (_671 * _671)) + (_673 * _673)) / (_625 + 9.9999997473787516355514526367188e-06);
        float _3049 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _697 = isnan(1.0) ? _3049 : (isnan(_3049) ? 1.0 : min(_3049, 1.0));
        float _698 = _697 * 2.0;
        float _702 = (1.0 - _697) / (_697 + 1.0);
        float _3060 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _703 = isnan(1.0) ? _3060 : (isnan(_3060) ? 1.0 : min(_3060, 1.0));
        float _712 = ((((1.0 - _703) * (_698 + 2.0)) * exp2(log2(isnan(1.0) ? _3038 : (isnan(_3038) ? 1.0 : min(_3038, 1.0))) * (_698 + 1.0))) + _703) * _625;
        float _713 = _593 * 0.5;
        float _714 = _603 * 0.5;
        float _715 = _613 * 0.5;
        float _716 = dot(vec3(_713, _714, _715), vec3(_713, _714, _715));
        float _721 = (_716 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_716);
        float _729 = (dot(vec3(_276, _277, _278), vec3(_721 * _713, _721 * _714, _721 * _715)) + 1.0) * 0.5;
        float _3071 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _738 = sqrt(((_714 * _714) + (_713 * _713)) + (_715 * _715)) / (_626 + 9.9999997473787516355514526367188e-06);
        float _3082 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _739 = isnan(1.0) ? _3082 : (isnan(_3082) ? 1.0 : min(_3082, 1.0));
        float _740 = _739 * 2.0;
        float _744 = (1.0 - _739) / (_739 + 1.0);
        float _3093 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _3093 : (isnan(_3093) ? 1.0 : min(_3093, 1.0));
        float _754 = ((((1.0 - _745) * (_740 + 2.0)) * exp2(log2(isnan(1.0) ? _3071 : (isnan(_3071) ? 1.0 : min(_3071, 1.0))) * (_740 + 1.0))) + _745) * _626;
        _762 = _593;
        _764 = _592;
        _765 = _591;
        _766 = _603;
        _767 = _602;
        _768 = _601;
        _769 = _613;
        _770 = _612;
        _771 = _611;
        _772 = _626;
        _773 = _625;
        _774 = _624;
        _775 = cbModelParam._m0[36u].z * (isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0)));
        _776 = cbModelParam._m0[36u].z * (isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0)));
        _777 = cbModelParam._m0[36u].z * (isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0)));
    }
    else
    {
        _762 = _763;
        _764 = _763;
        _765 = _763;
        _766 = _763;
        _767 = _763;
        _768 = _763;
        _769 = _763;
        _770 = _763;
        _771 = _763;
        _772 = _763;
        _773 = _763;
        _774 = _763;
        _775 = 0.0;
        _776 = 0.0;
        _777 = 0.0;
    }
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _803 = fma(_460, cbModelParam._m0[30u].z, fma(_456, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _452));
        float _807 = fma(_460, cbModelParam._m0[31u].z, fma(_456, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _452));
        float _811 = fma(_460, cbModelParam._m0[32u].z, fma(_456, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _452));
        float _834 = _452 + _276;
        float _835 = _456 + _277;
        float _836 = _460 + _278;
        float _846 = fma(_836, cbModelParam._m0[30u].z, fma(_835, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _834)) - _803;
        float _847 = fma(_836, cbModelParam._m0[31u].z, fma(_835, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _834)) - _807;
        float _848 = fma(_836, cbModelParam._m0[32u].z, fma(_835, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _834)) - _811;
        float _852 = inversesqrt(dot(vec3(_846, _847, _848), vec3(_846, _847, _848)));
        float _865 = ((_852 * _846) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_803 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _866 = ((_852 * _847) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_807 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _867 = ((_852 * _848) / cbModelParam._m0[35u].z) + ((((((_811 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_865, _866, _867), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_865, _866, _867), 0.0);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_865, _866, _867), 0.0);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_865, _866, _867), 0.0);
        float _902 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_869.x + (-0.5));
        float _904 = _902 * (_869.y + (-0.5));
        float _905 = _902 * (_869.z + (-0.5));
        float _912 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_876.x + (-0.5));
        float _914 = _912 * (_876.y + (-0.5));
        float _915 = _912 * (_876.z + (-0.5));
        float _922 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_883.x + (-0.5));
        float _924 = _922 * (_883.y + (-0.5));
        float _925 = _922 * (_883.z + (-0.5));
        float _932 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _933 = _932 * (_890.x + (-0.5));
        float _934 = _932 * (_890.y + (-0.5));
        float _935 = _932 * (_890.z + (-0.5));
        float _936 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _937 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _938 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _939 = _903 * 0.5;
        float _940 = _913 * 0.5;
        float _941 = _923 * 0.5;
        float _942 = dot(vec3(_939, _940, _941), vec3(_939, _940, _941));
        float _947 = (_942 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_942);
        float _955 = (dot(vec3(_276, _277, _278), vec3(_947 * _939, _947 * _940, _947 * _941)) + 1.0) * 0.5;
        float _3134 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _964 = sqrt(((_940 * _940) + (_939 * _939)) + (_941 * _941)) / (_936 + 9.9999997473787516355514526367188e-06);
        float _3145 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3145 : (isnan(_3145) ? 1.0 : min(_3145, 1.0));
        float _966 = _965 * 2.0;
        float _970 = (1.0 - _965) / (_965 + 1.0);
        float _3156 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3156 : (isnan(_3156) ? 1.0 : min(_3156, 1.0));
        float _980 = ((((1.0 - _971) * (_966 + 2.0)) * exp2(log2(isnan(1.0) ? _3134 : (isnan(_3134) ? 1.0 : min(_3134, 1.0))) * (_966 + 1.0))) + _971) * _936;
        float _981 = _904 * 0.5;
        float _982 = _914 * 0.5;
        float _983 = _924 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _997 = (dot(vec3(_276, _277, _278), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _3167 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1006 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_937 + 9.9999997473787516355514526367188e-06);
        float _3178 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3178 : (isnan(_3178) ? 1.0 : min(_3178, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3189 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3189 : (isnan(_3189) ? 1.0 : min(_3189, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3167 : (isnan(_3167) ? 1.0 : min(_3167, 1.0))) * (_1008 + 1.0))) + _1013) * _937;
        float _1023 = _905 * 0.5;
        float _1024 = _915 * 0.5;
        float _1025 = _925 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_276, _277, _278), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3200 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_938 + 9.9999997473787516355514526367188e-06);
        float _3211 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3222 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3200 : (isnan(_3200) ? 1.0 : min(_3200, 1.0))) * (_1050 + 1.0))) + _1055) * _938;
        _1072 = _905;
        _1073 = _904;
        _1074 = _903;
        _1075 = _915;
        _1076 = _914;
        _1077 = _913;
        _1078 = _925;
        _1079 = _924;
        _1080 = _923;
        _1081 = _938;
        _1082 = _937;
        _1083 = _936;
        _1084 = cbModelParam._m0[36u].w * (isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0)));
        _1085 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
        _1086 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
    }
    else
    {
        _1072 = _763;
        _1073 = _763;
        _1074 = _763;
        _1075 = _763;
        _1076 = _763;
        _1077 = _763;
        _1078 = _763;
        _1079 = _763;
        _1080 = _763;
        _1081 = _763;
        _1082 = _763;
        _1083 = _763;
        _1084 = 0.0;
        _1085 = 0.0;
        _1086 = 0.0;
    }
    float _1096 = (cbModelParam._m0[1u].x * (_1084 - _775)) + _775;
    float _1097 = (cbModelParam._m0[1u].x * (_1085 - _776)) + _776;
    float _1098 = (cbModelParam._m0[1u].x * (_1086 - _777)) + _777;
    float _1119 = fma(_1098, cbSceneParam._m0[89u].z, fma(_1097, cbSceneParam._m0[89u].y, _1096 * cbSceneParam._m0[89u].x));
    float _1122 = fma(_1098, cbSceneParam._m0[90u].z, fma(_1097, cbSceneParam._m0[90u].y, _1096 * cbSceneParam._m0[90u].x));
    float _1125 = fma(_1098, cbSceneParam._m0[91u].z, fma(_1097, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1096));
    float _1140 = _428 * 0.5;
    float _1141 = _429 * 0.5;
    float _1142 = _430 * 0.5;
    float _1143 = dot(vec4(_1140, _1141, _1142, 1.0), vec4(_1074, _1077, _1080, _1083));
    float _1146 = dot(vec4(_1140, _1141, _1142, 1.0), vec4(_1073, _1076, _1079, _1082));
    float _1149 = dot(vec4(_1140, _1141, _1142, 1.0), vec4(_1072, _1075, _1078, _1081));
    float _1183;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1156 = dot(vec4(_1140, _1141, _1142, 1.0), vec4(_762, _766, _769, _772));
        float _1160 = dot(vec4(_1140, _1141, _1142, 1.0), vec4(_764, _767, _770, _773));
        float _1164 = dot(vec4(_1140, _1141, _1142, 1.0), vec4(_765, _768, _771, _774));
        float _1171 = dot(vec4(cbModelParam._m0[39u]), vec4(_1140, _1141, _1142, 1.0));
        _1183 = dot(vec3(isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)), isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)), isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1171) ? 0.0 : (isnan(0.0) ? _1171 : max(0.0, _1171))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1183 = 1.0;
    }
    float _1194;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1185 = dot(vec4(cbModelParam._m0[40u]), vec4(_1140, _1141, _1142, 1.0));
        _1194 = dot(vec3(isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)), isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)), isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1185) ? 0.0 : (isnan(0.0) ? _1185 : max(0.0, _1185))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1194 = 1.0;
    }
    float _1198 = (_1194 * cbModelParam._m0[1u].x) + (_1183 * (1.0 - cbModelParam._m0[1u].x));
    float _1207 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1289;
    float _1291;
    float _1293;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1256 = fma(_460, cbModelParam._m0[13u].z, fma(_456, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _452)) + cbModelParam._m0[13u].w;
        float _1260 = fma(_460, cbModelParam._m0[14u].z, fma(_456, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _452)) + cbModelParam._m0[14u].w;
        float _1264 = fma(_460, cbModelParam._m0[15u].z, fma(_456, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _452)) + cbModelParam._m0[15u].w;
        float _1267 = fma(_430, cbModelParam._m0[13u].z, fma(_429, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _428));
        float _1270 = fma(_430, cbModelParam._m0[14u].z, fma(_429, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _428));
        float _1273 = fma(_430, cbModelParam._m0[15u].z, fma(_429, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _428));
        float _1299;
        if (_1267 > 0.0)
        {
            _1299 = abs((1.0 - _1256) / _1267);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1267 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1256 + 1.0) / _1267);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1299 = frontier_phi_16_14_ladder;
        }
        float _1528;
        if (_1270 > 0.0)
        {
            _1528 = abs((1.0 - _1260) / _1270);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1270 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1260 + 1.0) / _1270);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1528 = frontier_phi_25_21_ladder;
        }
        float _1720;
        if (_1273 > 0.0)
        {
            _1720 = abs((1.0 - _1264) / _1273);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1273 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1264 + 1.0) / _1273);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1720 = frontier_phi_37_32_ladder;
        }
        float _1722 = isnan(_1528) ? _1299 : (isnan(_1299) ? _1528 : min(_1299, _1528));
        float _1723 = isnan(_1720) ? _1722 : (isnan(_1722) ? _1720 : min(_1722, _1720));
        float _1727 = (_1723 * _1267) + _1256;
        float _1728 = (_1723 * _1270) + _1260;
        float _1729 = (_1723 * _1273) + _1264;
        float _1730 = _1723 * 9.9999997473787516355514526367188e-05;
        float _1732 = (-1.0) - _1730;
        float _1734 = _1730 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1729 > _1734) || ((_1729 < _1732) || ((_1728 > _1734) || ((_1728 < _1732) || ((_1727 < _1732) || (_1727 > _1734))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1826 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1729, cbModelParam._m0[9u].z, fma(_1728, cbModelParam._m0[9u].y, _1727 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1729, cbModelParam._m0[10u].z, fma(_1728, cbModelParam._m0[10u].y, _1727 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1729, cbModelParam._m0[11u].z, fma(_1728, cbModelParam._m0[11u].y, _1727 * cbModelParam._m0[11u].x))), _1207);
            frontier_phi_15_37_ladder = _1826.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1826.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1826.x * cbModelParam._m0[1u].y;
        }
        _1289 = frontier_phi_15_37_ladder_2;
        _1291 = frontier_phi_15_37_ladder_1;
        _1293 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1277 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_428, _429, _430), _1207);
        _1289 = _1277.x * cbModelParam._m0[1u].y;
        _1291 = _1277.y * cbModelParam._m0[1u].y;
        _1293 = _1277.z * cbModelParam._m0[1u].y;
    }
    float _1296 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1389;
    float _1391;
    float _1393;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1353 = fma(_460, cbModelParam._m0[21u].z, fma(_456, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _452)) + cbModelParam._m0[21u].w;
        float _1357 = fma(_460, cbModelParam._m0[22u].z, fma(_456, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _452)) + cbModelParam._m0[22u].w;
        float _1361 = fma(_460, cbModelParam._m0[23u].z, fma(_456, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _452)) + cbModelParam._m0[23u].w;
        float _1364 = fma(_430, cbModelParam._m0[21u].z, fma(_429, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _428));
        float _1367 = fma(_430, cbModelParam._m0[22u].z, fma(_429, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _428));
        float _1370 = fma(_430, cbModelParam._m0[23u].z, fma(_429, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _428));
        float _1533;
        if (_1364 > 0.0)
        {
            _1533 = abs((1.0 - _1353) / _1364);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1364 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1353 + 1.0) / _1364);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1533 = frontier_phi_27_23_ladder;
        }
        float _1747;
        if (_1367 > 0.0)
        {
            _1747 = abs((1.0 - _1357) / _1367);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1367 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1357 + 1.0) / _1367);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1747 = frontier_phi_39_34_ladder;
        }
        float _1898;
        if (_1370 > 0.0)
        {
            _1898 = abs((1.0 - _1361) / _1370);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1370 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1361 + 1.0) / _1370);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1898 = frontier_phi_48_45_ladder;
        }
        float _1900 = isnan(_1747) ? _1533 : (isnan(_1533) ? _1747 : min(_1533, _1747));
        float _1901 = isnan(_1898) ? _1900 : (isnan(_1900) ? _1898 : min(_1900, _1898));
        float _1905 = (_1901 * _1364) + _1353;
        float _1906 = (_1901 * _1367) + _1357;
        float _1907 = (_1901 * _1370) + _1361;
        float _1908 = _1901 * 9.9999997473787516355514526367188e-05;
        float _1909 = (-1.0) - _1908;
        float _1911 = _1908 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1907 > _1911) || ((_1907 < _1909) || ((_1906 > _1911) || ((_1906 < _1909) || ((_1905 < _1909) || (_1905 > _1911))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2110 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1907, cbModelParam._m0[17u].z, fma(_1906, cbModelParam._m0[17u].y, _1905 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1907, cbModelParam._m0[18u].z, fma(_1906, cbModelParam._m0[18u].y, _1905 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1907, cbModelParam._m0[19u].z, fma(_1906, cbModelParam._m0[19u].y, _1905 * cbModelParam._m0[19u].x))), _1296);
            frontier_phi_24_48_ladder = _2110.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2110.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2110.x * cbModelParam._m0[1u].z;
        }
        _1389 = frontier_phi_24_48_ladder_2;
        _1391 = frontier_phi_24_48_ladder_1;
        _1393 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1373 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_428, _429, _430), _1296);
        _1389 = _1373.x * cbModelParam._m0[1u].z;
        _1391 = _1373.y * cbModelParam._m0[1u].z;
        _1393 = _1373.z * cbModelParam._m0[1u].z;
    }
    float _1405 = _419 * 0.01200000010430812835693359375;
    float _1407 = _1405 * ((cbModelParam._m0[1u].w * (_1389 - _1289)) + _1289);
    float _1408 = _1405 * ((cbModelParam._m0[1u].w * (_1391 - _1291)) + _1291);
    float _1409 = _1405 * ((cbModelParam._m0[1u].w * (_1393 - _1293)) + _1293);
    float _1412 = fma(_1409, cbSceneParam._m0[89u].z, fma(_1408, cbSceneParam._m0[89u].y, _1407 * cbSceneParam._m0[89u].x));
    float _1415 = fma(_1409, cbSceneParam._m0[90u].z, fma(_1408, cbSceneParam._m0[90u].y, _1407 * cbSceneParam._m0[90u].x));
    float _1418 = fma(_1409, cbSceneParam._m0[91u].z, fma(_1408, cbSceneParam._m0[91u].y, _1407 * cbSceneParam._m0[91u].x));
    vec4 _1426 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_352, _353));
    float _1428 = _1426.w;
    float _1440 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1428);
    float _1441 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1428);
    float _1442 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1428);
    uvec4 _1446 = floatBitsToUint(cbInstanceData._m0[_393 + 5u]);
    uint _1448 = _1446.x * 14u;
    uint _1449 = _1448 + 13u;
    float _1456 = _419 + (-1.0);
    float _1462 = (cbLight._m0[_1449].x * _1456) + 1.0;
    float _1463 = (cbLight._m0[_1449].y * _1456) + 1.0;
    float _1464 = (cbLight._m0[_1449].z * _1456) + 1.0;
    float _1465 = (cbLight._m0[_1449].w * _1456) + 1.0;
    uint _1466 = _1448 + 5u;
    float _1472 = isnan(1.0) ? _1463 : (isnan(_1463) ? 1.0 : min(_1463, 1.0));
    uint _1476 = _1448 + 4u;
    float _1486 = isnan(1.0) ? _1462 : (isnan(_1462) ? 1.0 : min(_1462, 1.0));
    uint _1490 = _1448 | 1u;
    float _1501 = dot(vec3(cbLight._m0[_1448].xyz), vec3(_276, _277, _278));
    float _1504 = dot(vec3(cbLight._m0[_1490].xyz), vec3(_276, _277, _278));
    float _3358 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
    float _3369 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
    float _1509 = (isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0))) * 0.3183098733425140380859375;
    float _1511 = (isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0))) * 0.3183098733425140380859375;
    float _1518 = ((cbLight._m0[_1466].x * _1472) * _1511) + (((cbLight._m0[_1476].x * _1440) * _1486) * _1509);
    float _1519 = ((_1472 * cbLight._m0[_1466].y) * _1511) + (((cbLight._m0[_1476].y * _1441) * _1486) * _1509);
    float _1520 = ((_1472 * cbLight._m0[_1466].z) * _1511) + (((cbLight._m0[_1476].z * _1442) * _1486) * _1509);
    uvec4 _1525 = floatBitsToUint(cbLight._m0[_1448 + 12u]);
    bool _1527 = _1525.x == 0u;
    float _1538;
    float _1540;
    float _1542;
    if (_1527)
    {
        _1538 = _1518;
        _1540 = _1519;
        _1542 = _1520;
    }
    else
    {
        uint _1546 = _1448 + 6u;
        float _1562 = (dot(vec3(cbLight._m0[_1448 + 2u].xyz), vec3(_276, _277, _278)) * 0.5) + 0.5;
        float _1563 = _1562 * _1562;
        float _3380 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0));
        float _1565 = isnan(1.0) ? _1464 : (isnan(_1464) ? 1.0 : min(_1464, 1.0));
        _1538 = (((cbLight._m0[_1546].x * 0.3183098733425140380859375) * _1564) * _1565) + _1518;
        _1540 = (((cbLight._m0[_1546].y * 0.3183098733425140380859375) * _1564) * _1565) + _1519;
        _1542 = (((cbLight._m0[_1546].z * 0.3183098733425140380859375) * _1564) * _1565) + _1520;
    }
    bool _1545 = _1525.y == 0u;
    float _1583;
    float _1585;
    float _1587;
    if (_1545)
    {
        _1583 = _1538;
        _1585 = _1540;
        _1587 = _1542;
    }
    else
    {
        uint _1691 = _1448 + 7u;
        float _1707 = (dot(vec3(cbLight._m0[_1448 + 3u].xyz), vec3(_276, _277, _278)) * 0.5) + 0.5;
        float _1708 = _1707 * _1707;
        float _3396 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _1710 = isnan(1.0) ? _1465 : (isnan(_1465) ? 1.0 : min(_1465, 1.0));
        _1583 = (((cbLight._m0[_1691].x * 0.3183098733425140380859375) * _1709) * _1710) + _1538;
        _1585 = (((cbLight._m0[_1691].y * 0.3183098733425140380859375) * _1709) * _1710) + _1540;
        _1587 = (((cbLight._m0[_1691].z * 0.3183098733425140380859375) * _1709) * _1710) + _1542;
    }
    uint _1589 = _1448 + 8u;
    float _1595 = cbLight._m0[_1448].x + _345;
    float _1596 = cbLight._m0[_1448].y + _346;
    float _1597 = cbLight._m0[_1448].z + _347;
    float _1601 = inversesqrt(dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597)));
    float _1605 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_1448].xyz));
    float _3412 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
    float _1608 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
    float _3423 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _1609 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _1610 = dot(vec3(cbLight._m0[_1448].xyz), vec3(_1595 * _1601, _1596 * _1601, _1597 * _1601));
    float _3434 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
    float _1621 = (exp2(log2(1.0 - (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1627 = (0.5 / ((_1608 + 9.9999999392252902907785028219223e-09) + _1609)) * _1608;
    float _3445 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
    float _1629 = (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))) * 0.31831014156341552734375;
    uint _1643 = _1448 + 9u;
    float _1649 = cbLight._m0[_1490].x + _345;
    float _1650 = cbLight._m0[_1490].y + _346;
    float _1651 = cbLight._m0[_1490].z + _347;
    float _1655 = inversesqrt(dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651)));
    float _1659 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_1490].xyz));
    float _3456 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
    float _1662 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    float _1663 = dot(vec3(cbLight._m0[_1490].xyz), vec3(_1649 * _1655, _1650 * _1655, _1651 * _1655));
    float _3467 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
    float _1672 = (exp2(log2(1.0 - (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1676 = (0.5 / ((_1662 + 9.9999999392252902907785028219223e-09) + _1609)) * _1662;
    float _3478 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
    float _1678 = (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) * 0.31831014156341552734375;
    float _1688 = (((_1672 * cbLight._m0[_1643].x) * _1678) * _1472) + ((((cbLight._m0[_1589].x * _1440) * _1621) * _1629) * _1486);
    float _1689 = (((_1672 * cbLight._m0[_1643].y) * _1678) * _1472) + ((((cbLight._m0[_1589].y * _1441) * _1621) * _1629) * _1486);
    float _1690 = (((_1672 * cbLight._m0[_1643].z) * _1678) * _1472) + ((((cbLight._m0[_1589].z * _1442) * _1621) * _1629) * _1486);
    float _1752;
    float _1754;
    float _1756;
    if (_1527)
    {
        _1752 = _1688;
        _1754 = _1689;
        _1756 = _1690;
    }
    else
    {
        uint _1758 = _1448 + 10u;
        uint _1764 = _1448 + 2u;
        float _1770 = cbLight._m0[_1764].x + _345;
        float _1771 = cbLight._m0[_1764].y + _346;
        float _1772 = cbLight._m0[_1764].z + _347;
        float _1776 = inversesqrt(dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772)));
        float _1780 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_1764].xyz));
        float _3489 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1783 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _1784 = dot(vec3(cbLight._m0[_1764].xyz), vec3(_1770 * _1776, _1771 * _1776, _1772 * _1776));
        float _3500 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1793 = (exp2(log2(1.0 - (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1797 = (0.5 / ((_1783 + 9.9999999392252902907785028219223e-09) + _1609)) * _1783;
        float _3511 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1799 = (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * 0.31831014156341552734375;
        float _1800 = isnan(1.0) ? _1464 : (isnan(_1464) ? 1.0 : min(_1464, 1.0));
        _1752 = (((_1793 * cbLight._m0[_1758].x) * _1799) * _1800) + _1688;
        _1754 = (((_1793 * cbLight._m0[_1758].y) * _1799) * _1800) + _1689;
        _1756 = (((_1793 * cbLight._m0[_1758].z) * _1799) * _1800) + _1690;
    }
    float _1835;
    float _1837;
    float _1839;
    if (_1545)
    {
        _1835 = _1752;
        _1837 = _1754;
        _1839 = _1756;
    }
    else
    {
        uint _1846 = _1448 + 11u;
        uint _1852 = _1448 + 3u;
        float _1858 = cbLight._m0[_1852].x + _345;
        float _1859 = cbLight._m0[_1852].y + _346;
        float _1860 = cbLight._m0[_1852].z + _347;
        float _1864 = inversesqrt(dot(vec3(_1858, _1859, _1860), vec3(_1858, _1859, _1860)));
        float _1868 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_1852].xyz));
        float _3527 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1871 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _1872 = dot(vec3(cbLight._m0[_1852].xyz), vec3(_1858 * _1864, _1859 * _1864, _1860 * _1864));
        float _3538 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1881 = (exp2(log2(1.0 - (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1885 = (0.5 / ((_1871 + 9.9999999392252902907785028219223e-09) + _1609)) * _1871;
        float _3549 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1887 = (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))) * 0.31831014156341552734375;
        float _1888 = isnan(1.0) ? _1465 : (isnan(_1465) ? 1.0 : min(_1465, 1.0));
        _1835 = (((_1881 * cbLight._m0[_1846].x) * _1887) * _1888) + _1752;
        _1837 = (((_1881 * cbLight._m0[_1846].y) * _1887) * _1888) + _1754;
        _1839 = (((_1881 * cbLight._m0[_1846].z) * _1887) * _1888) + _1756;
    }
    float _2022;
    float _2024;
    float _2026;
    float _2028;
    float _2030;
    float _2032;
    if (_1446.y == 0u)
    {
        float _1963 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1964 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1963;
        float _1965 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1963;
        float _1966 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1963;
        uvec4 _1978 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1979 = _1978.x;
        uint _1990 = uint((float(_1978.y) * floor(float(uint(cbSceneParam._m0[85u].y * _353) / _1979))) + floor(float(uint(cbSceneParam._m0[85u].x * _352) / _1979)));
        float _2000 = (log2(_1966 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2001 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        uint _2004 = uint(isnan(14.0) ? _2001 : (isnan(_2001) ? 14.0 : min(_2001, 14.0)));
        uvec4 _2009 = texelFetch(g_lightClusterGridBuffer, int(((_2004 << 2u) + (_1990 << 6u)) >> 2u));
        uint _2010 = _2009.x;
        uint _2011 = _1978.z;
        float _2115;
        float _2117;
        float _2119;
        float _2121;
        float _2123;
        float _2125;
        if (((((1u << ((_2011 >> 4u) & 15u)) + 4294967295u) & _2010) == 0u) || ((_2011 & 240u) == 0u))
        {
            _2115 = 0.0;
            _2117 = 0.0;
            _2119 = 0.0;
            _2121 = 0.0;
            _2123 = 0.0;
            _2125 = 0.0;
        }
        else
        {
            float _2116;
            float _2118;
            float _2120;
            float _2122;
            float _2124;
            float _2126;
            float _2257 = 0.0;
            float _2258 = 0.0;
            float _2259 = 0.0;
            float _2260 = 0.0;
            float _2261 = 0.0;
            float _2262 = 0.0;
            uint _2263 = 0u;
            uint _2272;
            bool _2273;
            for (;;)
            {
                _2272 = texelFetch(g_lightClassification, int((((_2004 << 5u) + (_1990 << 9u)) + (_2263 << 2u)) >> 2u)).x;
                _2273 = _2272 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2273)
                {
                    frontier_phi_63_pred = _2262;
                    frontier_phi_63_pred_1 = _2261;
                    frontier_phi_63_pred_2 = _2260;
                    frontier_phi_63_pred_3 = _2259;
                    frontier_phi_63_pred_4 = _2258;
                    frontier_phi_63_pred_5 = _2257;
                }
                else
                {
                    float _2381;
                    float _2382;
                    float _2383;
                    float _2384;
                    float _2385;
                    float _2386;
                    uint _2387;
                    _2381 = _2257;
                    _2382 = _2258;
                    _2383 = _2259;
                    _2384 = _2260;
                    _2385 = _2261;
                    _2386 = _2262;
                    _2387 = _2272;
                    float _2313;
                    float _2314;
                    float _2315;
                    float _2316;
                    float _2317;
                    float _2318;
                    for (;;)
                    {
                        uint _2391 = uint(findLSB(_2387)) + (_2263 << 5u);
                        uint _2388 = (_2387 + 4294967295u) & _2387;
                        uint _2393 = _2391 * 48u;
                        vec4 _2407 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2393)).x, texelFetch(g_PointLightRenderingBuffer, int(_2393 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2393 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2393 + 3u)).x));
                        uint _2413 = (_2391 * 48u) + 4u;
                        vec4 _2426 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2413)).x, texelFetch(g_PointLightRenderingBuffer, int(_2413 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2413 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2413 + 3u)).x));
                        uint _2432 = (_2391 * 48u) + 8u;
                        vec3 _2443 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2432)).x, texelFetch(g_PointLightRenderingBuffer, int(_2432 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2432 + 2u)).x));
                        float _2447 = _2407.x - _1964;
                        float _2448 = _2407.y - _1965;
                        float _2449 = _2407.z - _1966;
                        float _2450 = dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449));
                        float _2453 = inversesqrt(_2450);
                        float _2462 = 1.0 - (_2450 * _2407.w);
                        float _3575 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
                        float _2463 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
                        float _2464 = sqrt(_2450) * _2426.w;
                        float _2467 = 1.39999997615814208984375 / (_2464 + 1.39999997615814208984375);
                        float _2468 = _2467 * _2467;
                        float _2471 = ((1.0 - _2468) * dot(vec3(_374, _377, _380), vec3(_2453 * _2447, _2453 * _2448, _2453 * _2449))) + _2468;
                        float _2474 = _2464 * _2464;
                        float _2478 = ((isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0))) * _2463) / ((_2474 * 0.699999988079071044921875) + 1.0);
                        float _2482 = (-0.0) - _1964;
                        float _2483 = (-0.0) - _1965;
                        float _2484 = (-0.0) - _1966;
                        float _2488 = inversesqrt(dot(vec3(_2482, _2483, _2484), vec3(_2482, _2483, _2484)));
                        float _2492 = dot(vec3(_374, _377, _380), vec3(_2488 * _2482, _2488 * _2483, _2488 * _2484));
                        float _3591 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
                        float _3602 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
                        float _2496 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
                        float _2500 = (0.5 / (((isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) + 9.9999999392252902907785028219223e-09) + _2496)) * _2496;
                        float _3613 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
                        float _2509 = (((isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * 3.1415927410125732421875) / ((_2474 * 2.1991131305694580078125) + 3.141590118408203125)) * _2463;
                        _2316 = (_2478 * _2426.x) + _2384;
                        _2317 = (_2478 * _2426.y) + _2385;
                        _2318 = (_2478 * _2426.z) + _2386;
                        _2313 = (_2509 * _2443.x) + _2381;
                        _2314 = (_2509 * _2443.y) + _2382;
                        _2315 = (_2509 * _2443.z) + _2383;
                        if (_2388 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2381 = _2313;
                            _2382 = _2314;
                            _2383 = _2315;
                            _2384 = _2316;
                            _2385 = _2317;
                            _2386 = _2318;
                            _2387 = _2388;
                        }
                    }
                    frontier_phi_63_pred = _2318;
                    frontier_phi_63_pred_1 = _2317;
                    frontier_phi_63_pred_2 = _2316;
                    frontier_phi_63_pred_3 = _2315;
                    frontier_phi_63_pred_4 = _2314;
                    frontier_phi_63_pred_5 = _2313;
                }
                _2126 = frontier_phi_63_pred;
                _2124 = frontier_phi_63_pred_1;
                _2122 = frontier_phi_63_pred_2;
                _2120 = frontier_phi_63_pred_3;
                _2118 = frontier_phi_63_pred_4;
                _2116 = frontier_phi_63_pred_5;
                uint _2264 = _2263 + 1u;
                if (_2264 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2257 = _2116;
                    _2258 = _2118;
                    _2259 = _2120;
                    _2260 = _2122;
                    _2261 = _2124;
                    _2262 = _2126;
                    _2263 = _2264;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2115 = _2116;
            _2117 = _2118;
            _2119 = _2120;
            _2121 = _2122;
            _2123 = _2124;
            _2125 = _2126;
        }
        uvec4 _2129 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2130 = _2129.z;
        uint _2132 = (_2130 >> 8u) & 15u;
        float _2228;
        float _2230;
        float _2232;
        float _2234;
        float _2236;
        float _2238;
        if (((4294967295u << _2132) & _2010) == 0u)
        {
            _2228 = _2115;
            _2230 = _2117;
            _2232 = _2119;
            _2234 = _2121;
            _2236 = _2123;
            _2238 = _2125;
        }
        else
        {
            float _2253 = inversesqrt(dot(vec3(_1964, _1965, _1966), vec3(_1964, _1965, _1966)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2132 < ((_2130 >> 12u) & 15u))
            {
                float _2229;
                float _2231;
                float _2233;
                float _2235;
                float _2237;
                float _2239;
                float _2364 = _2115;
                float _2365 = _2117;
                float _2366 = _2119;
                float _2367 = _2121;
                float _2368 = _2123;
                float _2369 = _2125;
                uint _2370 = _2132;
                uint _2379;
                bool _2380;
                for (;;)
                {
                    _2379 = texelFetch(g_lightClassification, int((((_2004 << 5u) + (_1990 << 9u)) + (_2370 << 2u)) >> 2u)).x;
                    _2380 = _2379 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2380)
                    {
                        frontier_phi_69_pred = _2369;
                        frontier_phi_69_pred_1 = _2368;
                        frontier_phi_69_pred_2 = _2367;
                        frontier_phi_69_pred_3 = _2366;
                        frontier_phi_69_pred_4 = _2365;
                        frontier_phi_69_pred_5 = _2364;
                    }
                    else
                    {
                        float _2514;
                        float _2515;
                        float _2516;
                        float _2517;
                        float _2518;
                        float _2519;
                        float _2766;
                        float _2767;
                        float _2768;
                        float _2769;
                        float _2770;
                        float _2771;
                        float _2527 = _2364;
                        float _2528 = _2365;
                        float _2529 = _2366;
                        float _2530 = _2367;
                        float _2531 = _2368;
                        float _2532 = _2369;
                        uint _2533 = _2379;
                        uint _2534;
                        vec4 _2559;
                        float _2560;
                        vec4 _2575;
                        vec3 _2587;
                        vec4 _2603;
                        vec4 _2619;
                        float _2666;
                        bool _2667;
                        for (;;)
                        {
                            uint _2544 = ((_2370 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2533));
                            _2534 = (_2533 + 4294967295u) & _2533;
                            uint _2546 = _2544 * 40u;
                            _2559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2546 + 3u)).x));
                            _2560 = _2559.w;
                            uint _2562 = (_2544 * 40u) + 4u;
                            _2575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2562 + 3u)).x));
                            uint _2577 = (_2544 * 40u) + 8u;
                            _2587 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2577 + 2u)).x));
                            uint _2590 = (_2544 * 40u) + 16u;
                            _2603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2590 + 3u)).x));
                            uint _2606 = (_2544 * 40u) + 20u;
                            _2619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2606 + 3u)).x));
                            uint _2622 = (_2544 * 40u) + 24u;
                            vec4 _2635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 3u)).x));
                            uint _2641 = (_2544 * 40u) + 28u;
                            vec4 _2654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 3u)).x));
                            _2666 = fma(_1966, _2654.z, fma(_1965, _2654.y, _2654.x * _1964)) + _2654.w;
                            _2667 = !((fma(_1966, _2635.z, fma(_1965, _2635.y, _2635.x * _1964)) + _2635.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2667)
                            {
                                float _2694 = _2559.x - _1964;
                                float _2695 = _2559.y - _1965;
                                float _2696 = _2559.z - _1966;
                                float _2697 = dot(vec3(_2694, _2695, _2696), vec3(_2694, _2695, _2696));
                                float _2700 = inversesqrt(_2697);
                                float _2701 = _2700 * _2694;
                                float _2702 = _2700 * _2695;
                                float _2703 = _2700 * _2696;
                                float _2707 = 1.0 - (_2697 / (_2560 * _2560));
                                float _3624 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
                                float _2708 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
                                float _2712 = sqrt(_2697) * _2575.w;
                                float _2714 = 1.39999997615814208984375 / (_2712 + 1.39999997615814208984375);
                                float _2715 = _2714 * _2714;
                                float _2716 = 1.0 - _2715;
                                float _2718 = (_2716 * dot(vec3(_2701, _2702, _2703), vec3(_374, _377, _380))) + _2715;
                                float _2721 = _2712 * _2712;
                                float _2725 = (fma(_1966, _2603.z, fma(_1965, _2603.y, _2603.x * _1964)) + _2603.w) / _2666;
                                float _2726 = (fma(_1966, _2619.z, fma(_1965, _2619.y, _2619.x * _1964)) + _2619.w) / _2666;
                                float _2730 = 1.0 - dot(vec2(_2725, _2726), vec2(_2725, _2726));
                                float _3640 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
                                float _2731 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
                                float _2732 = _2731 * (((isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0))) * _2708) / ((_2721 * 0.699999988079071044921875) + 1.0));
                                float _2742 = dot(vec3(_374, _377, _380), vec3((-0.0) - (_1964 * _2253), (-0.0) - (_1965 * _2253), (-0.0) - (_1966 * _2253)));
                                float _3651 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
                                float _2750 = (_2716 * dot(vec3(_374, _377, _380), vec3(_2701, _2702, _2703))) + _2715;
                                float _3662 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
                                float _2751 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
                                float _2755 = (0.5 / (((isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) + 9.9999999392252902907785028219223e-09) + _2751)) * _2751;
                                float _3673 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
                                float _2762 = (_2731 * _2708) * (((isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * 3.1415927410125732421875) / ((_2721 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2732 * _2575.z;
                                frontier_phi_75_pred_1 = _2732 * _2575.y;
                                frontier_phi_75_pred_2 = _2732 * _2575.x;
                                frontier_phi_75_pred_3 = _2762 * _2587.z;
                                frontier_phi_75_pred_4 = _2762 * _2587.y;
                                frontier_phi_75_pred_5 = _2762 * _2587.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2771 = frontier_phi_75_pred;
                            _2770 = frontier_phi_75_pred_1;
                            _2769 = frontier_phi_75_pred_2;
                            _2768 = frontier_phi_75_pred_3;
                            _2767 = frontier_phi_75_pred_4;
                            _2766 = frontier_phi_75_pred_5;
                            _2517 = _2769 + _2530;
                            _2518 = _2770 + _2531;
                            _2519 = _2771 + _2532;
                            _2514 = _2766 + _2527;
                            _2515 = _2767 + _2528;
                            _2516 = _2768 + _2529;
                            if (_2534 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2527 = _2514;
                                _2528 = _2515;
                                _2529 = _2516;
                                _2530 = _2517;
                                _2531 = _2518;
                                _2532 = _2519;
                                _2533 = _2534;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2519;
                        frontier_phi_69_pred_1 = _2518;
                        frontier_phi_69_pred_2 = _2517;
                        frontier_phi_69_pred_3 = _2516;
                        frontier_phi_69_pred_4 = _2515;
                        frontier_phi_69_pred_5 = _2514;
                    }
                    _2239 = frontier_phi_69_pred;
                    _2237 = frontier_phi_69_pred_1;
                    _2235 = frontier_phi_69_pred_2;
                    _2233 = frontier_phi_69_pred_3;
                    _2231 = frontier_phi_69_pred_4;
                    _2229 = frontier_phi_69_pred_5;
                    uint _2371 = _2370 + 1u;
                    if (_2371 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2364 = _2229;
                        _2365 = _2231;
                        _2366 = _2233;
                        _2367 = _2235;
                        _2368 = _2237;
                        _2369 = _2239;
                        _2370 = _2371;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2239;
                frontier_phi_57_58_ladder_1 = _2237;
                frontier_phi_57_58_ladder_2 = _2235;
                frontier_phi_57_58_ladder_3 = _2233;
                frontier_phi_57_58_ladder_4 = _2231;
                frontier_phi_57_58_ladder_5 = _2229;
            }
            else
            {
                frontier_phi_57_58_ladder = _2125;
                frontier_phi_57_58_ladder_1 = _2123;
                frontier_phi_57_58_ladder_2 = _2121;
                frontier_phi_57_58_ladder_3 = _2119;
                frontier_phi_57_58_ladder_4 = _2117;
                frontier_phi_57_58_ladder_5 = _2115;
            }
            _2228 = frontier_phi_57_58_ladder_5;
            _2230 = frontier_phi_57_58_ladder_4;
            _2232 = frontier_phi_57_58_ladder_3;
            _2234 = frontier_phi_57_58_ladder_2;
            _2236 = frontier_phi_57_58_ladder_1;
            _2238 = frontier_phi_57_58_ladder;
        }
        float _2243 = isnan(1.0) ? _419 : (isnan(_419) ? 1.0 : min(_419, 1.0));
        _2022 = (_2243 * _2234) + _1583;
        _2024 = (_2243 * _2236) + _1585;
        _2026 = (_2243 * _2238) + _1587;
        _2028 = ((_2228 * 0.039999999105930328369140625) * _2243) + _1835;
        _2030 = ((_2230 * 0.039999999105930328369140625) * _2243) + _1837;
        _2032 = ((_2232 * 0.039999999105930328369140625) * _2243) + _1839;
    }
    else
    {
        _2022 = _1583;
        _2024 = _1585;
        _2026 = _1587;
        _2028 = _1835;
        _2030 = _1837;
        _2032 = _1839;
    }
    float _3689 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _3700 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _3711 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _3722 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _2050 = ((isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_2022 + ((isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0))) * _419))) + ((_2028 + ((isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))) * _1198)) * cbPerFrame._m0[3u].x);
    float _2051 = ((isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_2024 + ((isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0))) * _419))) + ((_2030 + ((isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))) * _1198)) * cbPerFrame._m0[3u].x);
    float _2052 = ((isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * (_2026 + ((isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0))) * _419))) + ((_2032 + ((isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))) * _1198)) * cbPerFrame._m0[3u].x);
    float _2060 = cbInstanceData._m0[_393 + 6u].w * (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0)));
    float _2065 = _352 / cbSceneParam._m0[86u].x;
    float _2066 = _353 / cbSceneParam._m0[86u].y;
    vec4 _2080 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2065, _2066, (log2((isnan(cbSceneParam._m0[77u].w) ? _287 : (isnan(_287) ? cbSceneParam._m0[77u].w : min(_287, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2082 = _2080.x;
    float _2083 = _2080.y;
    float _2084 = _2080.z;
    float _2085 = _2080.w;
    float _2177;
    float _2179;
    float _2181;
    float _2183;
    if (_287 > cbSceneParam._m0[78u].w)
    {
        float _2140 = isnan(_287) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _287 : min(cbSceneParam._m0[80u].w, _287));
        float _2141 = _2140 / _287;
        float _2152 = _2141 * _338;
        float _2153 = _339 * _2141;
        float _2154 = (-0.0) - _2153;
        float _2155 = _2141 * _340;
        float _2157 = (cbSceneParam._m0[77u].w * _2154) / _2140;
        float _2158 = _2157 + cbSceneParam._m0[79u].w;
        float _2159 = cbSceneParam._m0[79u].w - _2153;
        float _2165 = sqrt(((_2152 * _2152) + (_2153 * _2153)) + (_2155 * _2155));
        float _2168 = (1.0 - (cbSceneParam._m0[77u].w / _2140)) * _2165;
        float _2173 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2175 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2326;
        if (abs((_2154 - _2157) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2326 = ((((_2158 > 0.0) ? exp2(_2173 * _2158) : (2.0 - exp2(_2175 * _2158))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2168;
        }
        else
        {
            float _2286 = 1.0 / cbSceneParam._m0[80u].x;
            float _2287 = isnan(_2159) ? _2158 : (isnan(_2158) ? _2159 : max(_2158, _2159));
            float _2288 = isnan(_2159) ? _2158 : (isnan(_2158) ? _2159 : min(_2158, _2159));
            float _2297 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : min(_2287, 0.0));
            float _2298 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : min(_2288, 0.0));
            _2326 = ((abs(_2165 / _2154) * cbSceneParam._m0[80u].y) * ((((_2297 - _2298) * 2.0) - ((exp2(_2173 * (isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0)))) - exp2(_2173 * (isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0))))) * _2286)) - ((exp2(_2175 * _2297) - exp2(_2175 * _2298)) * _2286))) + (_2168 * cbSceneParam._m0[80u].z);
        }
        vec4 _2328 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2065, _2066, 1.0), 0.0);
        float _2337 = exp2((_2326 * (-1.44269502162933349609375)) * (1.0 - _2328.w));
        float _2338 = log2(_2337);
        float _2354 = log2(_2085);
        _2177 = (exp2(_2354 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2338 * cbSceneParam._m0[78u].x)) * _2328.x) / cbSceneParam._m0[78u].x)) + _2082;
        _2179 = (exp2(_2354 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2338 * cbSceneParam._m0[78u].y)) * _2328.y) / cbSceneParam._m0[78u].y)) + _2083;
        _2181 = (exp2(_2354 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2338 * cbSceneParam._m0[78u].z)) * _2328.z) / cbSceneParam._m0[78u].z)) + _2084;
        _2183 = _2337 * _2085;
    }
    else
    {
        _2177 = _2082;
        _2179 = _2083;
        _2181 = _2084;
        _2183 = _2085;
    }
    float _2195 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2196 = _2195 == 3.0;
    float _2198 = log2(_2183);
    float _2205 = exp2(_2198 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0)));
    float _2206 = exp2(_2198 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0)));
    float _2207 = exp2(_2198 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0)));
    float _2216 = (_2195 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2216 * (_2196 ? _2205 : (_2205 + (cbSceneParam._m0[72u].w * _2177)));
    SV_Target.y = _2216 * (_2196 ? _2206 : (_2206 + (cbSceneParam._m0[72u].w * _2179)));
    SV_Target.z = _2216 * (_2196 ? _2207 : (_2207 + (cbSceneParam._m0[72u].w * _2181)));
    SV_Target.w = _2060;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2060;
}


