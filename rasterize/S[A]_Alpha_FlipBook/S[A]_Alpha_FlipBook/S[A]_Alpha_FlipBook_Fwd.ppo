#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A_Alpha_FlipBook_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _761;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _166 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _167 = _166 * NORMAL.x;
    float _168 = _166 * NORMAL.y;
    float _169 = _166 * NORMAL.z;
    float _174;
    float _175;
    float _176;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _174 = (-0.0) - _167;
        _175 = (-0.0) - _168;
        _176 = (-0.0) - _169;
    }
    else
    {
        _174 = _167;
        _175 = _168;
        _176 = _169;
    }
    uint _193 = uint(int(floor(cbMtdParam._m0[10u].x)));
    uint _194 = uint(int(cbMtdParam._m0[10u].w * cbMtdParam._m0[10u].z));
    float _196 = float(int(_193 - _194 * (_193 / _194)));
    vec4 _221 = texture(sampler2D(S_A_Alpha_FlipBook_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((fract(TEXCOORD_1.x) + (_196 - cbMtdParam._m0[10u].z * trunc(_196 / cbMtdParam._m0[10u].z))) * (1.0 / cbMtdParam._m0[10u].z)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((fract(TEXCOORD_1.y) + floor(_196 / cbMtdParam._m0[10u].z)) * (1.0 / cbMtdParam._m0[10u].w)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _228 = _221.x * cbMtdParam._m0[9u].x;
    float _229 = _221.y * cbMtdParam._m0[9u].y;
    float _230 = _221.z * cbMtdParam._m0[9u].z;
    vec4 _240 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _242 = _240.x;
    bool _249 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _265 = ((_249 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _242)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _242))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _2876 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _269 = ((cbMtdParam._m0[9u].w * TEXCOORD_1.z) * _221.w) * (isnan(1.0) ? _2876 : (isnan(_2876) ? 1.0 : min(_2876, 1.0)));
    float _273 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _274 = _273 * _174;
    float _275 = _273 * _175;
    float _276 = _273 * _176;
    float _2887 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _277 = isnan(1.0) ? _2887 : (isnan(_2887) ? 1.0 : min(_2887, 1.0));
    float _2898 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _2909 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _2920 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _285 = _249 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _326 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _336 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _326);
    float _337 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _326);
    float _338 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _326);
    float _342 = inversesqrt(dot(vec3(_336, _337, _338), vec3(_336, _337, _338)));
    float _343 = _336 * _342;
    float _344 = _337 * _342;
    float _345 = _338 * _342;
    float _350 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _351 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _372 = fma(_276, cbSceneParam._m0[5u].z, fma(_275, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _274));
    float _375 = fma(_276, cbSceneParam._m0[6u].z, fma(_275, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _274));
    float _378 = fma(_276, cbSceneParam._m0[7u].z, fma(_275, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _274));
    uint _391 = uint(roundEven(NORMAL.w)) * 13u;
    uint _394 = (_391 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _400 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2898 : (isnan(_2898) ? 1.0 : min(_2898, 1.0)))) * cbInstanceData._m0[_394].x;
    float _401 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2909 : (isnan(_2909) ? 1.0 : min(_2909, 1.0)))) * cbInstanceData._m0[_394].y;
    float _402 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2920 : (isnan(_2920) ? 1.0 : min(_2920, 1.0)))) * cbInstanceData._m0[_394].z;
    float _2931 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _403 = isnan(1.0) ? _2931 : (isnan(_2931) ? 1.0 : min(_2931, 1.0));
    float _2942 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _404 = isnan(1.0) ? _2942 : (isnan(_2942) ? 1.0 : min(_2942, 1.0));
    float _2953 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _405 = isnan(1.0) ? _2953 : (isnan(_2953) ? 1.0 : min(_2953, 1.0));
    vec4 _414 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _350, cbSceneParam._m0[86u].y * _351));
    float _417 = _414.x * TEXCOORD_1.w;
    float _418 = dot(vec3(_274, _275, _276), vec3(_343, _344, _345));
    float _421 = _418 * 2.0;
    float _426 = (_421 * _274) - _343;
    float _427 = (_421 * _275) - _344;
    float _428 = (_421 * _276) - _345;
    float _450 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _454 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _458 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _760;
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    float _767;
    float _768;
    float _769;
    float _770;
    float _771;
    float _772;
    float _773;
    float _774;
    float _775;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _485 = fma(_458, cbModelParam._m0[26u].z, fma(_454, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _450));
        float _489 = fma(_458, cbModelParam._m0[27u].z, fma(_454, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _450));
        float _493 = fma(_458, cbModelParam._m0[28u].z, fma(_454, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _450));
        float _518 = _450 + _274;
        float _519 = _454 + _275;
        float _520 = _458 + _276;
        float _530 = fma(_520, cbModelParam._m0[26u].z, fma(_519, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _518)) - _485;
        float _531 = fma(_520, cbModelParam._m0[27u].z, fma(_519, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _518)) - _489;
        float _532 = fma(_520, cbModelParam._m0[28u].z, fma(_519, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _518)) - _493;
        float _536 = inversesqrt(dot(vec3(_530, _531, _532), vec3(_530, _531, _532)));
        float _549 = ((_536 * _530) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_485 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _550 = ((_536 * _531) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_489 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _551 = ((_536 * _532) / cbModelParam._m0[34u].z) + ((((((_493 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _554 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_549, _550, _551), 0.0);
        vec4 _561 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_549, _550, _551), 0.0);
        vec4 _568 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_549, _550, _551), 0.0);
        vec4 _575 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_549, _550, _551), 0.0);
        float _588 = exp2((_554.w + (-0.5)) * 20.0) * 2.0;
        float _589 = _588 * (_554.x + (-0.5));
        float _590 = _588 * (_554.y + (-0.5));
        float _591 = _588 * (_554.z + (-0.5));
        float _598 = exp2((_561.w + (-0.5)) * 20.0) * 2.0;
        float _599 = _598 * (_561.x + (-0.5));
        float _600 = _598 * (_561.y + (-0.5));
        float _601 = _598 * (_561.z + (-0.5));
        float _608 = exp2((_568.w + (-0.5)) * 20.0) * 2.0;
        float _609 = _608 * (_568.x + (-0.5));
        float _610 = _608 * (_568.y + (-0.5));
        float _611 = _608 * (_568.z + (-0.5));
        float _618 = exp2((_575.w + (-0.5)) * 20.0) * 2.0;
        float _619 = _618 * (_575.x + (-0.5));
        float _620 = _618 * (_575.y + (-0.5));
        float _621 = _618 * (_575.z + (-0.5));
        float _622 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
        float _623 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
        float _624 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
        float _625 = _589 * 0.5;
        float _626 = _599 * 0.5;
        float _627 = _609 * 0.5;
        float _628 = dot(vec3(_625, _626, _627), vec3(_625, _626, _627));
        float _633 = (_628 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_628);
        float _642 = (dot(vec3(_274, _275, _276), vec3(_633 * _625, _633 * _626, _633 * _627)) + 1.0) * 0.5;
        float _2979 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
        float _652 = sqrt(((_626 * _626) + (_625 * _625)) + (_627 * _627)) / (_622 + 9.9999997473787516355514526367188e-06);
        float _2990 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        float _653 = isnan(1.0) ? _2990 : (isnan(_2990) ? 1.0 : min(_2990, 1.0));
        float _654 = _653 * 2.0;
        float _658 = (1.0 - _653) / (_653 + 1.0);
        float _3001 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _659 = isnan(1.0) ? _3001 : (isnan(_3001) ? 1.0 : min(_3001, 1.0));
        float _668 = ((((1.0 - _659) * (_654 + 2.0)) * exp2(log2(isnan(1.0) ? _2979 : (isnan(_2979) ? 1.0 : min(_2979, 1.0))) * (_654 + 1.0))) + _659) * _622;
        float _669 = _590 * 0.5;
        float _670 = _600 * 0.5;
        float _671 = _610 * 0.5;
        float _672 = dot(vec3(_669, _670, _671), vec3(_669, _670, _671));
        float _677 = (_672 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_672);
        float _685 = (dot(vec3(_274, _275, _276), vec3(_677 * _669, _677 * _670, _677 * _671)) + 1.0) * 0.5;
        float _3012 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _694 = sqrt(((_670 * _670) + (_669 * _669)) + (_671 * _671)) / (_623 + 9.9999997473787516355514526367188e-06);
        float _3023 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _695 = isnan(1.0) ? _3023 : (isnan(_3023) ? 1.0 : min(_3023, 1.0));
        float _696 = _695 * 2.0;
        float _700 = (1.0 - _695) / (_695 + 1.0);
        float _3034 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _701 = isnan(1.0) ? _3034 : (isnan(_3034) ? 1.0 : min(_3034, 1.0));
        float _710 = ((((1.0 - _701) * (_696 + 2.0)) * exp2(log2(isnan(1.0) ? _3012 : (isnan(_3012) ? 1.0 : min(_3012, 1.0))) * (_696 + 1.0))) + _701) * _623;
        float _711 = _591 * 0.5;
        float _712 = _601 * 0.5;
        float _713 = _611 * 0.5;
        float _714 = dot(vec3(_711, _712, _713), vec3(_711, _712, _713));
        float _719 = (_714 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_714);
        float _727 = (dot(vec3(_274, _275, _276), vec3(_719 * _711, _719 * _712, _719 * _713)) + 1.0) * 0.5;
        float _3045 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _736 = sqrt(((_712 * _712) + (_711 * _711)) + (_713 * _713)) / (_624 + 9.9999997473787516355514526367188e-06);
        float _3056 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _737 = isnan(1.0) ? _3056 : (isnan(_3056) ? 1.0 : min(_3056, 1.0));
        float _738 = _737 * 2.0;
        float _742 = (1.0 - _737) / (_737 + 1.0);
        float _3067 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _743 = isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0));
        float _752 = ((((1.0 - _743) * (_738 + 2.0)) * exp2(log2(isnan(1.0) ? _3045 : (isnan(_3045) ? 1.0 : min(_3045, 1.0))) * (_738 + 1.0))) + _743) * _624;
        _760 = _591;
        _762 = _590;
        _763 = _589;
        _764 = _601;
        _765 = _600;
        _766 = _599;
        _767 = _611;
        _768 = _610;
        _769 = _609;
        _770 = _624;
        _771 = _623;
        _772 = _622;
        _773 = cbModelParam._m0[36u].z * (isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0)));
        _774 = cbModelParam._m0[36u].z * (isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0)));
        _775 = cbModelParam._m0[36u].z * (isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0)));
    }
    else
    {
        _760 = _761;
        _762 = _761;
        _763 = _761;
        _764 = _761;
        _765 = _761;
        _766 = _761;
        _767 = _761;
        _768 = _761;
        _769 = _761;
        _770 = _761;
        _771 = _761;
        _772 = _761;
        _773 = 0.0;
        _774 = 0.0;
        _775 = 0.0;
    }
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _801 = fma(_458, cbModelParam._m0[30u].z, fma(_454, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _450));
        float _805 = fma(_458, cbModelParam._m0[31u].z, fma(_454, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _450));
        float _809 = fma(_458, cbModelParam._m0[32u].z, fma(_454, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _450));
        float _832 = _450 + _274;
        float _833 = _454 + _275;
        float _834 = _458 + _276;
        float _844 = fma(_834, cbModelParam._m0[30u].z, fma(_833, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _832)) - _801;
        float _845 = fma(_834, cbModelParam._m0[31u].z, fma(_833, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _832)) - _805;
        float _846 = fma(_834, cbModelParam._m0[32u].z, fma(_833, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _832)) - _809;
        float _850 = inversesqrt(dot(vec3(_844, _845, _846), vec3(_844, _845, _846)));
        float _863 = ((_850 * _844) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_801 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _864 = ((_850 * _845) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_805 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _865 = ((_850 * _846) / cbModelParam._m0[35u].z) + ((((((_809 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        float _900 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_867.x + (-0.5));
        float _902 = _900 * (_867.y + (-0.5));
        float _903 = _900 * (_867.z + (-0.5));
        float _910 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_874.x + (-0.5));
        float _912 = _910 * (_874.y + (-0.5));
        float _913 = _910 * (_874.z + (-0.5));
        float _920 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_881.x + (-0.5));
        float _922 = _920 * (_881.y + (-0.5));
        float _923 = _920 * (_881.z + (-0.5));
        float _930 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_888.x + (-0.5));
        float _932 = _930 * (_888.y + (-0.5));
        float _933 = _930 * (_888.z + (-0.5));
        float _934 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _935 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _936 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _937 = _901 * 0.5;
        float _938 = _911 * 0.5;
        float _939 = _921 * 0.5;
        float _940 = dot(vec3(_937, _938, _939), vec3(_937, _938, _939));
        float _945 = (_940 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_940);
        float _953 = (dot(vec3(_274, _275, _276), vec3(_945 * _937, _945 * _938, _945 * _939)) + 1.0) * 0.5;
        float _3108 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _962 = sqrt(((_938 * _938) + (_937 * _937)) + (_939 * _939)) / (_934 + 9.9999997473787516355514526367188e-06);
        float _3119 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0));
        float _964 = _963 * 2.0;
        float _968 = (1.0 - _963) / (_963 + 1.0);
        float _3130 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0));
        float _978 = ((((1.0 - _969) * (_964 + 2.0)) * exp2(log2(isnan(1.0) ? _3108 : (isnan(_3108) ? 1.0 : min(_3108, 1.0))) * (_964 + 1.0))) + _969) * _934;
        float _979 = _902 * 0.5;
        float _980 = _912 * 0.5;
        float _981 = _922 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _995 = (dot(vec3(_274, _275, _276), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3141 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _1004 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_935 + 9.9999997473787516355514526367188e-06);
        float _3152 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3152 : (isnan(_3152) ? 1.0 : min(_3152, 1.0));
        float _1006 = _1005 * 2.0;
        float _1010 = (1.0 - _1005) / (_1005 + 1.0);
        float _3163 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3163 : (isnan(_3163) ? 1.0 : min(_3163, 1.0));
        float _1020 = ((((1.0 - _1011) * (_1006 + 2.0)) * exp2(log2(isnan(1.0) ? _3141 : (isnan(_3141) ? 1.0 : min(_3141, 1.0))) * (_1006 + 1.0))) + _1011) * _935;
        float _1021 = _903 * 0.5;
        float _1022 = _913 * 0.5;
        float _1023 = _923 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(_274, _275, _276), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3174 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_936 + 9.9999997473787516355514526367188e-06);
        float _3185 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3196 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3174 : (isnan(_3174) ? 1.0 : min(_3174, 1.0))) * (_1048 + 1.0))) + _1053) * _936;
        _1070 = _903;
        _1071 = _902;
        _1072 = _901;
        _1073 = _913;
        _1074 = _912;
        _1075 = _911;
        _1076 = _923;
        _1077 = _922;
        _1078 = _921;
        _1079 = _936;
        _1080 = _935;
        _1081 = _934;
        _1082 = cbModelParam._m0[36u].w * (isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0)));
        _1083 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0)));
        _1084 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
    }
    else
    {
        _1070 = _761;
        _1071 = _761;
        _1072 = _761;
        _1073 = _761;
        _1074 = _761;
        _1075 = _761;
        _1076 = _761;
        _1077 = _761;
        _1078 = _761;
        _1079 = _761;
        _1080 = _761;
        _1081 = _761;
        _1082 = 0.0;
        _1083 = 0.0;
        _1084 = 0.0;
    }
    float _1094 = (cbModelParam._m0[1u].x * (_1082 - _773)) + _773;
    float _1095 = (cbModelParam._m0[1u].x * (_1083 - _774)) + _774;
    float _1096 = (cbModelParam._m0[1u].x * (_1084 - _775)) + _775;
    float _1117 = fma(_1096, cbSceneParam._m0[89u].z, fma(_1095, cbSceneParam._m0[89u].y, _1094 * cbSceneParam._m0[89u].x));
    float _1120 = fma(_1096, cbSceneParam._m0[90u].z, fma(_1095, cbSceneParam._m0[90u].y, _1094 * cbSceneParam._m0[90u].x));
    float _1123 = fma(_1096, cbSceneParam._m0[91u].z, fma(_1095, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1094));
    float _1138 = _426 * 0.5;
    float _1139 = _427 * 0.5;
    float _1140 = _428 * 0.5;
    float _1141 = dot(vec4(_1138, _1139, _1140, 1.0), vec4(_1072, _1075, _1078, _1081));
    float _1144 = dot(vec4(_1138, _1139, _1140, 1.0), vec4(_1071, _1074, _1077, _1080));
    float _1147 = dot(vec4(_1138, _1139, _1140, 1.0), vec4(_1070, _1073, _1076, _1079));
    float _1181;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1154 = dot(vec4(_1138, _1139, _1140, 1.0), vec4(_760, _764, _767, _770));
        float _1158 = dot(vec4(_1138, _1139, _1140, 1.0), vec4(_762, _765, _768, _771));
        float _1162 = dot(vec4(_1138, _1139, _1140, 1.0), vec4(_763, _766, _769, _772));
        float _1169 = dot(vec4(cbModelParam._m0[39u]), vec4(_1138, _1139, _1140, 1.0));
        _1181 = dot(vec3(isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)), isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)), isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1169) ? 0.0 : (isnan(0.0) ? _1169 : max(0.0, _1169))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1181 = 1.0;
    }
    float _1192;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1183 = dot(vec4(cbModelParam._m0[40u]), vec4(_1138, _1139, _1140, 1.0));
        _1192 = dot(vec3(isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)), isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)), isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1183) ? 0.0 : (isnan(0.0) ? _1183 : max(0.0, _1183))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1192 = 1.0;
    }
    float _1196 = (_1192 * cbModelParam._m0[1u].x) + (_1181 * (1.0 - cbModelParam._m0[1u].x));
    float _1205 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1287;
    float _1289;
    float _1291;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1254 = fma(_458, cbModelParam._m0[13u].z, fma(_454, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _450)) + cbModelParam._m0[13u].w;
        float _1258 = fma(_458, cbModelParam._m0[14u].z, fma(_454, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _450)) + cbModelParam._m0[14u].w;
        float _1262 = fma(_458, cbModelParam._m0[15u].z, fma(_454, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _450)) + cbModelParam._m0[15u].w;
        float _1265 = fma(_428, cbModelParam._m0[13u].z, fma(_427, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _426));
        float _1268 = fma(_428, cbModelParam._m0[14u].z, fma(_427, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _426));
        float _1271 = fma(_428, cbModelParam._m0[15u].z, fma(_427, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _426));
        float _1297;
        if (_1265 > 0.0)
        {
            _1297 = abs((1.0 - _1254) / _1265);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1265 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1254 + 1.0) / _1265);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1297 = frontier_phi_16_14_ladder;
        }
        float _1505;
        if (_1268 > 0.0)
        {
            _1505 = abs((1.0 - _1258) / _1268);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1268 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1258 + 1.0) / _1268);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1505 = frontier_phi_25_21_ladder;
        }
        float _1694;
        if (_1271 > 0.0)
        {
            _1694 = abs((1.0 - _1262) / _1271);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1271 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1262 + 1.0) / _1271);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1694 = frontier_phi_37_32_ladder;
        }
        float _1696 = isnan(_1505) ? _1297 : (isnan(_1297) ? _1505 : min(_1297, _1505));
        float _1697 = isnan(_1694) ? _1696 : (isnan(_1696) ? _1694 : min(_1696, _1694));
        float _1701 = (_1697 * _1265) + _1254;
        float _1702 = (_1697 * _1268) + _1258;
        float _1703 = (_1697 * _1271) + _1262;
        float _1704 = _1697 * 9.9999997473787516355514526367188e-05;
        float _1706 = (-1.0) - _1704;
        float _1708 = _1704 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1703 > _1708) || ((_1703 < _1706) || ((_1702 > _1708) || ((_1702 < _1706) || ((_1701 < _1706) || (_1701 > _1708))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1800 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1703, cbModelParam._m0[9u].z, fma(_1702, cbModelParam._m0[9u].y, _1701 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1703, cbModelParam._m0[10u].z, fma(_1702, cbModelParam._m0[10u].y, _1701 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1703, cbModelParam._m0[11u].z, fma(_1702, cbModelParam._m0[11u].y, _1701 * cbModelParam._m0[11u].x))), _1205);
            frontier_phi_15_37_ladder = _1800.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1800.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1800.x * cbModelParam._m0[1u].y;
        }
        _1287 = frontier_phi_15_37_ladder_2;
        _1289 = frontier_phi_15_37_ladder_1;
        _1291 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1275 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_426, _427, _428), _1205);
        _1287 = _1275.x * cbModelParam._m0[1u].y;
        _1289 = _1275.y * cbModelParam._m0[1u].y;
        _1291 = _1275.z * cbModelParam._m0[1u].y;
    }
    float _1294 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1387;
    float _1389;
    float _1391;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1351 = fma(_458, cbModelParam._m0[21u].z, fma(_454, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _450)) + cbModelParam._m0[21u].w;
        float _1355 = fma(_458, cbModelParam._m0[22u].z, fma(_454, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _450)) + cbModelParam._m0[22u].w;
        float _1359 = fma(_458, cbModelParam._m0[23u].z, fma(_454, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _450)) + cbModelParam._m0[23u].w;
        float _1362 = fma(_428, cbModelParam._m0[21u].z, fma(_427, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _426));
        float _1365 = fma(_428, cbModelParam._m0[22u].z, fma(_427, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _426));
        float _1368 = fma(_428, cbModelParam._m0[23u].z, fma(_427, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _426));
        float _1510;
        if (_1362 > 0.0)
        {
            _1510 = abs((1.0 - _1351) / _1362);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1362 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1351 + 1.0) / _1362);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1510 = frontier_phi_27_23_ladder;
        }
        float _1721;
        if (_1365 > 0.0)
        {
            _1721 = abs((1.0 - _1355) / _1365);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1365 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1355 + 1.0) / _1365);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1721 = frontier_phi_39_34_ladder;
        }
        float _1872;
        if (_1368 > 0.0)
        {
            _1872 = abs((1.0 - _1359) / _1368);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1368 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1359 + 1.0) / _1368);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1872 = frontier_phi_48_45_ladder;
        }
        float _1874 = isnan(_1721) ? _1510 : (isnan(_1510) ? _1721 : min(_1510, _1721));
        float _1875 = isnan(_1872) ? _1874 : (isnan(_1874) ? _1872 : min(_1874, _1872));
        float _1879 = (_1875 * _1362) + _1351;
        float _1880 = (_1875 * _1365) + _1355;
        float _1881 = (_1875 * _1368) + _1359;
        float _1882 = _1875 * 9.9999997473787516355514526367188e-05;
        float _1883 = (-1.0) - _1882;
        float _1885 = _1882 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1881 > _1885) || ((_1881 < _1883) || ((_1880 > _1885) || ((_1880 < _1883) || ((_1879 < _1883) || (_1879 > _1885))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2084 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1881, cbModelParam._m0[17u].z, fma(_1880, cbModelParam._m0[17u].y, _1879 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1881, cbModelParam._m0[18u].z, fma(_1880, cbModelParam._m0[18u].y, _1879 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1881, cbModelParam._m0[19u].z, fma(_1880, cbModelParam._m0[19u].y, _1879 * cbModelParam._m0[19u].x))), _1294);
            frontier_phi_24_48_ladder = _2084.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2084.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2084.x * cbModelParam._m0[1u].z;
        }
        _1387 = frontier_phi_24_48_ladder_2;
        _1389 = frontier_phi_24_48_ladder_1;
        _1391 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1371 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_426, _427, _428), _1294);
        _1387 = _1371.x * cbModelParam._m0[1u].z;
        _1389 = _1371.y * cbModelParam._m0[1u].z;
        _1391 = _1371.z * cbModelParam._m0[1u].z;
    }
    float _1403 = _417 * 0.01200000010430812835693359375;
    float _1405 = _1403 * ((cbModelParam._m0[1u].w * (_1387 - _1287)) + _1287);
    float _1406 = _1403 * ((cbModelParam._m0[1u].w * (_1389 - _1289)) + _1289);
    float _1407 = _1403 * ((cbModelParam._m0[1u].w * (_1391 - _1291)) + _1291);
    float _1410 = fma(_1407, cbSceneParam._m0[89u].z, fma(_1406, cbSceneParam._m0[89u].y, _1405 * cbSceneParam._m0[89u].x));
    float _1413 = fma(_1407, cbSceneParam._m0[90u].z, fma(_1406, cbSceneParam._m0[90u].y, _1405 * cbSceneParam._m0[90u].x));
    float _1416 = fma(_1407, cbSceneParam._m0[91u].z, fma(_1406, cbSceneParam._m0[91u].y, _1405 * cbSceneParam._m0[91u].x));
    uvec4 _1426 = floatBitsToUint(cbInstanceData._m0[_391 + 5u]);
    uint _1428 = _1426.x * 14u;
    uint _1429 = _1428 + 13u;
    float _1436 = _417 + (-1.0);
    float _1442 = (cbLight._m0[_1429].x * _1436) + 1.0;
    float _1443 = (cbLight._m0[_1429].y * _1436) + 1.0;
    float _1444 = (cbLight._m0[_1429].z * _1436) + 1.0;
    float _1445 = (cbLight._m0[_1429].w * _1436) + 1.0;
    uint _1446 = _1428 + 5u;
    float _1452 = isnan(1.0) ? _1443 : (isnan(_1443) ? 1.0 : min(_1443, 1.0));
    uint _1456 = _1428 + 4u;
    float _1463 = isnan(1.0) ? _1442 : (isnan(_1442) ? 1.0 : min(_1442, 1.0));
    uint _1467 = _1428 | 1u;
    float _1478 = dot(vec3(cbLight._m0[_1428].xyz), vec3(_274, _275, _276));
    float _1481 = dot(vec3(cbLight._m0[_1467].xyz), vec3(_274, _275, _276));
    float _3332 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
    float _3343 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
    float _1486 = (isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0))) * 0.3183098733425140380859375;
    float _1488 = (isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0))) * 0.3183098733425140380859375;
    float _1495 = ((cbLight._m0[_1446].x * _1452) * _1488) + ((cbLight._m0[_1456].x * _1463) * _1486);
    float _1496 = ((_1452 * cbLight._m0[_1446].y) * _1488) + ((_1463 * cbLight._m0[_1456].y) * _1486);
    float _1497 = ((_1452 * cbLight._m0[_1446].z) * _1488) + ((_1463 * cbLight._m0[_1456].z) * _1486);
    uvec4 _1502 = floatBitsToUint(cbLight._m0[_1428 + 12u]);
    bool _1504 = _1502.x == 0u;
    float _1515;
    float _1517;
    float _1519;
    if (_1504)
    {
        _1515 = _1495;
        _1517 = _1496;
        _1519 = _1497;
    }
    else
    {
        uint _1523 = _1428 + 6u;
        float _1539 = (dot(vec3(cbLight._m0[_1428 + 2u].xyz), vec3(_274, _275, _276)) * 0.5) + 0.5;
        float _1540 = _1539 * _1539;
        float _3354 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0));
        float _1542 = isnan(1.0) ? _1444 : (isnan(_1444) ? 1.0 : min(_1444, 1.0));
        _1515 = (((cbLight._m0[_1523].x * 0.3183098733425140380859375) * _1541) * _1542) + _1495;
        _1517 = (((cbLight._m0[_1523].y * 0.3183098733425140380859375) * _1541) * _1542) + _1496;
        _1519 = (((cbLight._m0[_1523].z * 0.3183098733425140380859375) * _1541) * _1542) + _1497;
    }
    bool _1522 = _1502.y == 0u;
    float _1560;
    float _1562;
    float _1564;
    if (_1522)
    {
        _1560 = _1515;
        _1562 = _1517;
        _1564 = _1519;
    }
    else
    {
        uint _1665 = _1428 + 7u;
        float _1681 = (dot(vec3(cbLight._m0[_1428 + 3u].xyz), vec3(_274, _275, _276)) * 0.5) + 0.5;
        float _1682 = _1681 * _1681;
        float _3370 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
        float _1684 = isnan(1.0) ? _1445 : (isnan(_1445) ? 1.0 : min(_1445, 1.0));
        _1560 = (((cbLight._m0[_1665].x * 0.3183098733425140380859375) * _1683) * _1684) + _1515;
        _1562 = (((cbLight._m0[_1665].y * 0.3183098733425140380859375) * _1683) * _1684) + _1517;
        _1564 = (((cbLight._m0[_1665].z * 0.3183098733425140380859375) * _1683) * _1684) + _1519;
    }
    uint _1566 = _1428 + 8u;
    float _1572 = cbLight._m0[_1428].x + _343;
    float _1573 = cbLight._m0[_1428].y + _344;
    float _1574 = cbLight._m0[_1428].z + _345;
    float _1578 = inversesqrt(dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574)));
    float _1582 = dot(vec3(_274, _275, _276), vec3(cbLight._m0[_1428].xyz));
    float _3386 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
    float _1585 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
    float _3397 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _1586 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    float _1587 = dot(vec3(cbLight._m0[_1428].xyz), vec3(_1572 * _1578, _1573 * _1578, _1574 * _1578));
    float _3408 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
    float _1598 = (exp2(log2(1.0 - (isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1604 = (0.5 / ((_1585 + 9.9999999392252902907785028219223e-09) + _1586)) * _1585;
    float _3419 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
    float _1606 = (isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))) * 0.31831014156341552734375;
    uint _1617 = _1428 + 9u;
    float _1623 = cbLight._m0[_1467].x + _343;
    float _1624 = cbLight._m0[_1467].y + _344;
    float _1625 = cbLight._m0[_1467].z + _345;
    float _1629 = inversesqrt(dot(vec3(_1623, _1624, _1625), vec3(_1623, _1624, _1625)));
    float _1633 = dot(vec3(_274, _275, _276), vec3(cbLight._m0[_1467].xyz));
    float _3430 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
    float _1636 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    float _1637 = dot(vec3(cbLight._m0[_1467].xyz), vec3(_1623 * _1629, _1624 * _1629, _1625 * _1629));
    float _3441 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
    float _1646 = (exp2(log2(1.0 - (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1650 = (0.5 / ((_1636 + 9.9999999392252902907785028219223e-09) + _1586)) * _1636;
    float _3452 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
    float _1652 = (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * 0.31831014156341552734375;
    float _1662 = (((_1646 * cbLight._m0[_1617].x) * _1652) * _1452) + (((_1598 * cbLight._m0[_1566].x) * _1606) * _1463);
    float _1663 = (((_1646 * cbLight._m0[_1617].y) * _1652) * _1452) + (((_1598 * cbLight._m0[_1566].y) * _1606) * _1463);
    float _1664 = (((_1646 * cbLight._m0[_1617].z) * _1652) * _1452) + (((_1598 * cbLight._m0[_1566].z) * _1606) * _1463);
    float _1726;
    float _1728;
    float _1730;
    if (_1504)
    {
        _1726 = _1662;
        _1728 = _1663;
        _1730 = _1664;
    }
    else
    {
        uint _1732 = _1428 + 10u;
        uint _1738 = _1428 + 2u;
        float _1744 = cbLight._m0[_1738].x + _343;
        float _1745 = cbLight._m0[_1738].y + _344;
        float _1746 = cbLight._m0[_1738].z + _345;
        float _1750 = inversesqrt(dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746)));
        float _1754 = dot(vec3(_274, _275, _276), vec3(cbLight._m0[_1738].xyz));
        float _3463 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1757 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _1758 = dot(vec3(cbLight._m0[_1738].xyz), vec3(_1744 * _1750, _1745 * _1750, _1746 * _1750));
        float _3474 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1767 = (exp2(log2(1.0 - (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1771 = (0.5 / ((_1757 + 9.9999999392252902907785028219223e-09) + _1586)) * _1757;
        float _3485 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1773 = (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * 0.31831014156341552734375;
        float _1774 = isnan(1.0) ? _1444 : (isnan(_1444) ? 1.0 : min(_1444, 1.0));
        _1726 = (((_1767 * cbLight._m0[_1732].x) * _1773) * _1774) + _1662;
        _1728 = (((_1767 * cbLight._m0[_1732].y) * _1773) * _1774) + _1663;
        _1730 = (((_1767 * cbLight._m0[_1732].z) * _1773) * _1774) + _1664;
    }
    float _1809;
    float _1811;
    float _1813;
    if (_1522)
    {
        _1809 = _1726;
        _1811 = _1728;
        _1813 = _1730;
    }
    else
    {
        uint _1820 = _1428 + 11u;
        uint _1826 = _1428 + 3u;
        float _1832 = cbLight._m0[_1826].x + _343;
        float _1833 = cbLight._m0[_1826].y + _344;
        float _1834 = cbLight._m0[_1826].z + _345;
        float _1838 = inversesqrt(dot(vec3(_1832, _1833, _1834), vec3(_1832, _1833, _1834)));
        float _1842 = dot(vec3(_274, _275, _276), vec3(cbLight._m0[_1826].xyz));
        float _3501 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1845 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _1846 = dot(vec3(cbLight._m0[_1826].xyz), vec3(_1832 * _1838, _1833 * _1838, _1834 * _1838));
        float _3512 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1855 = (exp2(log2(1.0 - (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1859 = (0.5 / ((_1845 + 9.9999999392252902907785028219223e-09) + _1586)) * _1845;
        float _3523 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1861 = (isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * 0.31831014156341552734375;
        float _1862 = isnan(1.0) ? _1445 : (isnan(_1445) ? 1.0 : min(_1445, 1.0));
        _1809 = (((_1855 * cbLight._m0[_1820].x) * _1861) * _1862) + _1726;
        _1811 = (((_1855 * cbLight._m0[_1820].y) * _1861) * _1862) + _1728;
        _1813 = (((_1855 * cbLight._m0[_1820].z) * _1861) * _1862) + _1730;
    }
    float _1996;
    float _1998;
    float _2000;
    float _2002;
    float _2004;
    float _2006;
    if (_1426.y == 0u)
    {
        float _1937 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1938 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1937;
        float _1939 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1937;
        float _1940 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1937;
        uvec4 _1952 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1953 = _1952.x;
        uint _1964 = uint((float(_1952.y) * floor(float(uint(cbSceneParam._m0[85u].y * _351) / _1953))) + floor(float(uint(cbSceneParam._m0[85u].x * _350) / _1953)));
        float _1974 = (log2(_1940 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1975 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        uint _1978 = uint(isnan(14.0) ? _1975 : (isnan(_1975) ? 14.0 : min(_1975, 14.0)));
        uvec4 _1983 = texelFetch(g_lightClusterGridBuffer, int(((_1978 << 2u) + (_1964 << 6u)) >> 2u));
        uint _1984 = _1983.x;
        uint _1985 = _1952.z;
        float _2089;
        float _2091;
        float _2093;
        float _2095;
        float _2097;
        float _2099;
        if (((((1u << ((_1985 >> 4u) & 15u)) + 4294967295u) & _1984) == 0u) || ((_1985 & 240u) == 0u))
        {
            _2089 = 0.0;
            _2091 = 0.0;
            _2093 = 0.0;
            _2095 = 0.0;
            _2097 = 0.0;
            _2099 = 0.0;
        }
        else
        {
            float _2090;
            float _2092;
            float _2094;
            float _2096;
            float _2098;
            float _2100;
            float _2231 = 0.0;
            float _2232 = 0.0;
            float _2233 = 0.0;
            float _2234 = 0.0;
            float _2235 = 0.0;
            float _2236 = 0.0;
            uint _2237 = 0u;
            uint _2246;
            bool _2247;
            for (;;)
            {
                _2246 = texelFetch(g_lightClassification, int((((_1978 << 5u) + (_1964 << 9u)) + (_2237 << 2u)) >> 2u)).x;
                _2247 = _2246 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2247)
                {
                    frontier_phi_63_pred = _2236;
                    frontier_phi_63_pred_1 = _2235;
                    frontier_phi_63_pred_2 = _2234;
                    frontier_phi_63_pred_3 = _2233;
                    frontier_phi_63_pred_4 = _2232;
                    frontier_phi_63_pred_5 = _2231;
                }
                else
                {
                    float _2355;
                    float _2356;
                    float _2357;
                    float _2358;
                    float _2359;
                    float _2360;
                    uint _2361;
                    _2355 = _2231;
                    _2356 = _2232;
                    _2357 = _2233;
                    _2358 = _2234;
                    _2359 = _2235;
                    _2360 = _2236;
                    _2361 = _2246;
                    float _2287;
                    float _2288;
                    float _2289;
                    float _2290;
                    float _2291;
                    float _2292;
                    for (;;)
                    {
                        uint _2365 = uint(findLSB(_2361)) + (_2237 << 5u);
                        uint _2362 = (_2361 + 4294967295u) & _2361;
                        uint _2367 = _2365 * 48u;
                        vec4 _2381 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2367)).x, texelFetch(g_PointLightRenderingBuffer, int(_2367 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2367 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2367 + 3u)).x));
                        uint _2387 = (_2365 * 48u) + 4u;
                        vec4 _2400 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2387)).x, texelFetch(g_PointLightRenderingBuffer, int(_2387 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2387 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2387 + 3u)).x));
                        uint _2406 = (_2365 * 48u) + 8u;
                        vec3 _2417 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2406)).x, texelFetch(g_PointLightRenderingBuffer, int(_2406 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2406 + 2u)).x));
                        float _2421 = _2381.x - _1938;
                        float _2422 = _2381.y - _1939;
                        float _2423 = _2381.z - _1940;
                        float _2424 = dot(vec3(_2421, _2422, _2423), vec3(_2421, _2422, _2423));
                        float _2427 = inversesqrt(_2424);
                        float _2436 = 1.0 - (_2424 * _2381.w);
                        float _3549 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
                        float _2437 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
                        float _2438 = sqrt(_2424) * _2400.w;
                        float _2441 = 1.39999997615814208984375 / (_2438 + 1.39999997615814208984375);
                        float _2442 = _2441 * _2441;
                        float _2445 = ((1.0 - _2442) * dot(vec3(_372, _375, _378), vec3(_2427 * _2421, _2427 * _2422, _2427 * _2423))) + _2442;
                        float _2448 = _2438 * _2438;
                        float _2452 = ((isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0))) * _2437) / ((_2448 * 0.699999988079071044921875) + 1.0);
                        float _2456 = (-0.0) - _1938;
                        float _2457 = (-0.0) - _1939;
                        float _2458 = (-0.0) - _1940;
                        float _2462 = inversesqrt(dot(vec3(_2456, _2457, _2458), vec3(_2456, _2457, _2458)));
                        float _2466 = dot(vec3(_372, _375, _378), vec3(_2462 * _2456, _2462 * _2457, _2462 * _2458));
                        float _3565 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
                        float _3576 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
                        float _2470 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
                        float _2474 = (0.5 / (((isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) + 9.9999999392252902907785028219223e-09) + _2470)) * _2470;
                        float _3587 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
                        float _2483 = (((isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * 3.1415927410125732421875) / ((_2448 * 2.1991131305694580078125) + 3.141590118408203125)) * _2437;
                        _2290 = (_2452 * _2400.x) + _2358;
                        _2291 = (_2452 * _2400.y) + _2359;
                        _2292 = (_2452 * _2400.z) + _2360;
                        _2287 = (_2483 * _2417.x) + _2355;
                        _2288 = (_2483 * _2417.y) + _2356;
                        _2289 = (_2483 * _2417.z) + _2357;
                        if (_2362 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2355 = _2287;
                            _2356 = _2288;
                            _2357 = _2289;
                            _2358 = _2290;
                            _2359 = _2291;
                            _2360 = _2292;
                            _2361 = _2362;
                        }
                    }
                    frontier_phi_63_pred = _2292;
                    frontier_phi_63_pred_1 = _2291;
                    frontier_phi_63_pred_2 = _2290;
                    frontier_phi_63_pred_3 = _2289;
                    frontier_phi_63_pred_4 = _2288;
                    frontier_phi_63_pred_5 = _2287;
                }
                _2100 = frontier_phi_63_pred;
                _2098 = frontier_phi_63_pred_1;
                _2096 = frontier_phi_63_pred_2;
                _2094 = frontier_phi_63_pred_3;
                _2092 = frontier_phi_63_pred_4;
                _2090 = frontier_phi_63_pred_5;
                uint _2238 = _2237 + 1u;
                if (_2238 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2231 = _2090;
                    _2232 = _2092;
                    _2233 = _2094;
                    _2234 = _2096;
                    _2235 = _2098;
                    _2236 = _2100;
                    _2237 = _2238;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2089 = _2090;
            _2091 = _2092;
            _2093 = _2094;
            _2095 = _2096;
            _2097 = _2098;
            _2099 = _2100;
        }
        uvec4 _2103 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2104 = _2103.z;
        uint _2106 = (_2104 >> 8u) & 15u;
        float _2202;
        float _2204;
        float _2206;
        float _2208;
        float _2210;
        float _2212;
        if (((4294967295u << _2106) & _1984) == 0u)
        {
            _2202 = _2089;
            _2204 = _2091;
            _2206 = _2093;
            _2208 = _2095;
            _2210 = _2097;
            _2212 = _2099;
        }
        else
        {
            float _2227 = inversesqrt(dot(vec3(_1938, _1939, _1940), vec3(_1938, _1939, _1940)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2106 < ((_2104 >> 12u) & 15u))
            {
                float _2203;
                float _2205;
                float _2207;
                float _2209;
                float _2211;
                float _2213;
                float _2338 = _2089;
                float _2339 = _2091;
                float _2340 = _2093;
                float _2341 = _2095;
                float _2342 = _2097;
                float _2343 = _2099;
                uint _2344 = _2106;
                uint _2353;
                bool _2354;
                for (;;)
                {
                    _2353 = texelFetch(g_lightClassification, int((((_1978 << 5u) + (_1964 << 9u)) + (_2344 << 2u)) >> 2u)).x;
                    _2354 = _2353 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2354)
                    {
                        frontier_phi_69_pred = _2343;
                        frontier_phi_69_pred_1 = _2342;
                        frontier_phi_69_pred_2 = _2341;
                        frontier_phi_69_pred_3 = _2340;
                        frontier_phi_69_pred_4 = _2339;
                        frontier_phi_69_pred_5 = _2338;
                    }
                    else
                    {
                        float _2488;
                        float _2489;
                        float _2490;
                        float _2491;
                        float _2492;
                        float _2493;
                        float _2740;
                        float _2741;
                        float _2742;
                        float _2743;
                        float _2744;
                        float _2745;
                        float _2501 = _2338;
                        float _2502 = _2339;
                        float _2503 = _2340;
                        float _2504 = _2341;
                        float _2505 = _2342;
                        float _2506 = _2343;
                        uint _2507 = _2353;
                        uint _2508;
                        vec4 _2533;
                        float _2534;
                        vec4 _2549;
                        vec3 _2561;
                        vec4 _2577;
                        vec4 _2593;
                        float _2640;
                        bool _2641;
                        for (;;)
                        {
                            uint _2518 = ((_2344 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2507));
                            _2508 = (_2507 + 4294967295u) & _2507;
                            uint _2520 = _2518 * 40u;
                            _2533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2520 + 3u)).x));
                            _2534 = _2533.w;
                            uint _2536 = (_2518 * 40u) + 4u;
                            _2549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2536 + 3u)).x));
                            uint _2551 = (_2518 * 40u) + 8u;
                            _2561 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 2u)).x));
                            uint _2564 = (_2518 * 40u) + 16u;
                            _2577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2564 + 3u)).x));
                            uint _2580 = (_2518 * 40u) + 20u;
                            _2593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2580 + 3u)).x));
                            uint _2596 = (_2518 * 40u) + 24u;
                            vec4 _2609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2596 + 3u)).x));
                            uint _2615 = (_2518 * 40u) + 28u;
                            vec4 _2628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2615 + 3u)).x));
                            _2640 = fma(_1940, _2628.z, fma(_1939, _2628.y, _2628.x * _1938)) + _2628.w;
                            _2641 = !((fma(_1940, _2609.z, fma(_1939, _2609.y, _2609.x * _1938)) + _2609.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2641)
                            {
                                float _2668 = _2533.x - _1938;
                                float _2669 = _2533.y - _1939;
                                float _2670 = _2533.z - _1940;
                                float _2671 = dot(vec3(_2668, _2669, _2670), vec3(_2668, _2669, _2670));
                                float _2674 = inversesqrt(_2671);
                                float _2675 = _2674 * _2668;
                                float _2676 = _2674 * _2669;
                                float _2677 = _2674 * _2670;
                                float _2681 = 1.0 - (_2671 / (_2534 * _2534));
                                float _3598 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
                                float _2682 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
                                float _2686 = sqrt(_2671) * _2549.w;
                                float _2688 = 1.39999997615814208984375 / (_2686 + 1.39999997615814208984375);
                                float _2689 = _2688 * _2688;
                                float _2690 = 1.0 - _2689;
                                float _2692 = (_2690 * dot(vec3(_2675, _2676, _2677), vec3(_372, _375, _378))) + _2689;
                                float _2695 = _2686 * _2686;
                                float _2699 = (fma(_1940, _2577.z, fma(_1939, _2577.y, _2577.x * _1938)) + _2577.w) / _2640;
                                float _2700 = (fma(_1940, _2593.z, fma(_1939, _2593.y, _2593.x * _1938)) + _2593.w) / _2640;
                                float _2704 = 1.0 - dot(vec2(_2699, _2700), vec2(_2699, _2700));
                                float _3614 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
                                float _2705 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
                                float _2706 = _2705 * (((isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0))) * _2682) / ((_2695 * 0.699999988079071044921875) + 1.0));
                                float _2716 = dot(vec3(_372, _375, _378), vec3((-0.0) - (_1938 * _2227), (-0.0) - (_1939 * _2227), (-0.0) - (_1940 * _2227)));
                                float _3625 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
                                float _2724 = (_2690 * dot(vec3(_372, _375, _378), vec3(_2675, _2676, _2677))) + _2689;
                                float _3636 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
                                float _2725 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
                                float _2729 = (0.5 / (((isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) + 9.9999999392252902907785028219223e-09) + _2725)) * _2725;
                                float _3647 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
                                float _2736 = (_2705 * _2682) * (((isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * 3.1415927410125732421875) / ((_2695 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2706 * _2549.z;
                                frontier_phi_75_pred_1 = _2706 * _2549.y;
                                frontier_phi_75_pred_2 = _2706 * _2549.x;
                                frontier_phi_75_pred_3 = _2736 * _2561.z;
                                frontier_phi_75_pred_4 = _2736 * _2561.y;
                                frontier_phi_75_pred_5 = _2736 * _2561.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2745 = frontier_phi_75_pred;
                            _2744 = frontier_phi_75_pred_1;
                            _2743 = frontier_phi_75_pred_2;
                            _2742 = frontier_phi_75_pred_3;
                            _2741 = frontier_phi_75_pred_4;
                            _2740 = frontier_phi_75_pred_5;
                            _2491 = _2743 + _2504;
                            _2492 = _2744 + _2505;
                            _2493 = _2745 + _2506;
                            _2488 = _2740 + _2501;
                            _2489 = _2741 + _2502;
                            _2490 = _2742 + _2503;
                            if (_2508 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2501 = _2488;
                                _2502 = _2489;
                                _2503 = _2490;
                                _2504 = _2491;
                                _2505 = _2492;
                                _2506 = _2493;
                                _2507 = _2508;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2493;
                        frontier_phi_69_pred_1 = _2492;
                        frontier_phi_69_pred_2 = _2491;
                        frontier_phi_69_pred_3 = _2490;
                        frontier_phi_69_pred_4 = _2489;
                        frontier_phi_69_pred_5 = _2488;
                    }
                    _2213 = frontier_phi_69_pred;
                    _2211 = frontier_phi_69_pred_1;
                    _2209 = frontier_phi_69_pred_2;
                    _2207 = frontier_phi_69_pred_3;
                    _2205 = frontier_phi_69_pred_4;
                    _2203 = frontier_phi_69_pred_5;
                    uint _2345 = _2344 + 1u;
                    if (_2345 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2338 = _2203;
                        _2339 = _2205;
                        _2340 = _2207;
                        _2341 = _2209;
                        _2342 = _2211;
                        _2343 = _2213;
                        _2344 = _2345;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2213;
                frontier_phi_57_58_ladder_1 = _2211;
                frontier_phi_57_58_ladder_2 = _2209;
                frontier_phi_57_58_ladder_3 = _2207;
                frontier_phi_57_58_ladder_4 = _2205;
                frontier_phi_57_58_ladder_5 = _2203;
            }
            else
            {
                frontier_phi_57_58_ladder = _2099;
                frontier_phi_57_58_ladder_1 = _2097;
                frontier_phi_57_58_ladder_2 = _2095;
                frontier_phi_57_58_ladder_3 = _2093;
                frontier_phi_57_58_ladder_4 = _2091;
                frontier_phi_57_58_ladder_5 = _2089;
            }
            _2202 = frontier_phi_57_58_ladder_5;
            _2204 = frontier_phi_57_58_ladder_4;
            _2206 = frontier_phi_57_58_ladder_3;
            _2208 = frontier_phi_57_58_ladder_2;
            _2210 = frontier_phi_57_58_ladder_1;
            _2212 = frontier_phi_57_58_ladder;
        }
        float _2217 = isnan(1.0) ? _417 : (isnan(_417) ? 1.0 : min(_417, 1.0));
        _1996 = (_2217 * _2208) + _1560;
        _1998 = (_2217 * _2210) + _1562;
        _2000 = (_2217 * _2212) + _1564;
        _2002 = ((_2202 * 0.039999999105930328369140625) * _2217) + _1809;
        _2004 = ((_2204 * 0.039999999105930328369140625) * _2217) + _1811;
        _2006 = ((_2206 * 0.039999999105930328369140625) * _2217) + _1813;
    }
    else
    {
        _1996 = _1560;
        _1998 = _1562;
        _2000 = _1564;
        _2002 = _1809;
        _2004 = _1811;
        _2006 = _1813;
    }
    float _3663 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _3674 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _3685 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _3696 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _2024 = ((isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_1996 + ((isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0))) * _417))) + ((_2002 + ((isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))) * _1196)) * cbPerFrame._m0[3u].x);
    float _2025 = ((isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * (_1998 + ((isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0))) * _417))) + ((_2004 + ((isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))) * _1196)) * cbPerFrame._m0[3u].x);
    float _2026 = ((isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * (_2000 + ((isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0))) * _417))) + ((_2006 + ((isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))) * _1196)) * cbPerFrame._m0[3u].x);
    float _2034 = cbInstanceData._m0[_391 + 6u].w * (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0)));
    float _2039 = _350 / cbSceneParam._m0[86u].x;
    float _2040 = _351 / cbSceneParam._m0[86u].y;
    vec4 _2054 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2039, _2040, (log2((isnan(cbSceneParam._m0[77u].w) ? _285 : (isnan(_285) ? cbSceneParam._m0[77u].w : min(_285, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2056 = _2054.x;
    float _2057 = _2054.y;
    float _2058 = _2054.z;
    float _2059 = _2054.w;
    float _2151;
    float _2153;
    float _2155;
    float _2157;
    if (_285 > cbSceneParam._m0[78u].w)
    {
        float _2114 = isnan(_285) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _285 : min(cbSceneParam._m0[80u].w, _285));
        float _2115 = _2114 / _285;
        float _2126 = _2115 * _336;
        float _2127 = _337 * _2115;
        float _2128 = (-0.0) - _2127;
        float _2129 = _2115 * _338;
        float _2131 = (cbSceneParam._m0[77u].w * _2128) / _2114;
        float _2132 = _2131 + cbSceneParam._m0[79u].w;
        float _2133 = cbSceneParam._m0[79u].w - _2127;
        float _2139 = sqrt(((_2126 * _2126) + (_2127 * _2127)) + (_2129 * _2129));
        float _2142 = (1.0 - (cbSceneParam._m0[77u].w / _2114)) * _2139;
        float _2147 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2149 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2300;
        if (abs((_2128 - _2131) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2300 = ((((_2132 > 0.0) ? exp2(_2147 * _2132) : (2.0 - exp2(_2149 * _2132))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2142;
        }
        else
        {
            float _2260 = 1.0 / cbSceneParam._m0[80u].x;
            float _2261 = isnan(_2133) ? _2132 : (isnan(_2132) ? _2133 : max(_2132, _2133));
            float _2262 = isnan(_2133) ? _2132 : (isnan(_2132) ? _2133 : min(_2132, _2133));
            float _2271 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : min(_2261, 0.0));
            float _2272 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : min(_2262, 0.0));
            _2300 = ((abs(_2139 / _2128) * cbSceneParam._m0[80u].y) * ((((_2271 - _2272) * 2.0) - ((exp2(_2147 * (isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0)))) - exp2(_2147 * (isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0))))) * _2260)) - ((exp2(_2149 * _2271) - exp2(_2149 * _2272)) * _2260))) + (_2142 * cbSceneParam._m0[80u].z);
        }
        vec4 _2302 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2039, _2040, 1.0), 0.0);
        float _2311 = exp2((_2300 * (-1.44269502162933349609375)) * (1.0 - _2302.w));
        float _2312 = log2(_2311);
        float _2328 = log2(_2059);
        _2151 = (exp2(_2328 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2312 * cbSceneParam._m0[78u].x)) * _2302.x) / cbSceneParam._m0[78u].x)) + _2056;
        _2153 = (exp2(_2328 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2312 * cbSceneParam._m0[78u].y)) * _2302.y) / cbSceneParam._m0[78u].y)) + _2057;
        _2155 = (exp2(_2328 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2312 * cbSceneParam._m0[78u].z)) * _2302.z) / cbSceneParam._m0[78u].z)) + _2058;
        _2157 = _2311 * _2059;
    }
    else
    {
        _2151 = _2056;
        _2153 = _2057;
        _2155 = _2058;
        _2157 = _2059;
    }
    float _2169 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2170 = _2169 == 3.0;
    float _2172 = log2(_2157);
    float _2179 = exp2(_2172 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0)));
    float _2180 = exp2(_2172 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0)));
    float _2181 = exp2(_2172 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0)));
    float _2190 = (_2169 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2190 * (_2170 ? _2179 : (_2179 + (cbSceneParam._m0[72u].w * _2151)));
    SV_Target.y = _2190 * (_2170 ? _2180 : (_2180 + (cbSceneParam._m0[72u].w * _2153)));
    SV_Target.z = _2190 * (_2170 ? _2181 : (_2181 + (cbSceneParam._m0[72u].w * _2155)));
    SV_Target.w = _2034;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2034;
}


