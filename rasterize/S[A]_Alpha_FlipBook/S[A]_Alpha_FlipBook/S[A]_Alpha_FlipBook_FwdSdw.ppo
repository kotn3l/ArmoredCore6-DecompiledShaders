#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A_Alpha_FlipBook_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _765;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _170 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _171 = _170 * NORMAL.x;
    float _172 = _170 * NORMAL.y;
    float _173 = _170 * NORMAL.z;
    float _178;
    float _179;
    float _180;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _178 = (-0.0) - _171;
        _179 = (-0.0) - _172;
        _180 = (-0.0) - _173;
    }
    else
    {
        _178 = _171;
        _179 = _172;
        _180 = _173;
    }
    uint _197 = uint(int(floor(cbMtdParam._m0[10u].x)));
    uint _198 = uint(int(cbMtdParam._m0[10u].w * cbMtdParam._m0[10u].z));
    float _200 = float(int(_197 - _198 * (_197 / _198)));
    vec4 _225 = texture(sampler2D(S_A_Alpha_FlipBook_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((fract(TEXCOORD_1.x) + (_200 - cbMtdParam._m0[10u].z * trunc(_200 / cbMtdParam._m0[10u].z))) * (1.0 / cbMtdParam._m0[10u].z)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((fract(TEXCOORD_1.y) + floor(_200 / cbMtdParam._m0[10u].z)) * (1.0 / cbMtdParam._m0[10u].w)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _225.x * cbMtdParam._m0[9u].x;
    float _233 = _225.y * cbMtdParam._m0[9u].y;
    float _234 = _225.z * cbMtdParam._m0[9u].z;
    vec4 _244 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _246 = _244.x;
    bool _253 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _269 = ((_253 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _246)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _246))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3164 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _273 = ((cbMtdParam._m0[9u].w * TEXCOORD_1.z) * _225.w) * (isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0)));
    float _277 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _278 = _277 * _178;
    float _279 = _277 * _179;
    float _280 = _277 * _180;
    float _3175 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _281 = isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0));
    float _3186 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3197 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3208 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _289 = _253 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _330 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _340 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _330);
    float _341 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _330);
    float _342 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _330);
    float _346 = inversesqrt(dot(vec3(_340, _341, _342), vec3(_340, _341, _342)));
    float _347 = _340 * _346;
    float _348 = _341 * _346;
    float _349 = _342 * _346;
    float _354 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _355 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _376 = fma(_280, cbSceneParam._m0[5u].z, fma(_279, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _278));
    float _379 = fma(_280, cbSceneParam._m0[6u].z, fma(_279, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _278));
    float _382 = fma(_280, cbSceneParam._m0[7u].z, fma(_279, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _278));
    uint _395 = uint(roundEven(NORMAL.w)) * 13u;
    uint _398 = (_395 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _404 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0)))) * cbInstanceData._m0[_398].x;
    float _405 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0)))) * cbInstanceData._m0[_398].y;
    float _406 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0)))) * cbInstanceData._m0[_398].z;
    float _3219 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _407 = isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0));
    float _3230 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _408 = isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0));
    float _3241 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _409 = isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0));
    vec4 _418 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _354, cbSceneParam._m0[86u].y * _355));
    float _421 = _418.x * TEXCOORD_1.w;
    float _422 = dot(vec3(_278, _279, _280), vec3(_347, _348, _349));
    float _425 = _422 * 2.0;
    float _430 = (_425 * _278) - _347;
    float _431 = (_425 * _279) - _348;
    float _432 = (_425 * _280) - _349;
    float _454 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _458 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _462 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _764;
    float _766;
    float _767;
    float _768;
    float _769;
    float _770;
    float _771;
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _489 = fma(_462, cbModelParam._m0[26u].z, fma(_458, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _454));
        float _493 = fma(_462, cbModelParam._m0[27u].z, fma(_458, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _454));
        float _497 = fma(_462, cbModelParam._m0[28u].z, fma(_458, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _454));
        float _522 = _454 + _278;
        float _523 = _458 + _279;
        float _524 = _462 + _280;
        float _534 = fma(_524, cbModelParam._m0[26u].z, fma(_523, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _522)) - _489;
        float _535 = fma(_524, cbModelParam._m0[27u].z, fma(_523, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _522)) - _493;
        float _536 = fma(_524, cbModelParam._m0[28u].z, fma(_523, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _522)) - _497;
        float _540 = inversesqrt(dot(vec3(_534, _535, _536), vec3(_534, _535, _536)));
        float _553 = ((_540 * _534) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_489 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _554 = ((_540 * _535) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_493 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _555 = ((_540 * _536) / cbModelParam._m0[34u].z) + ((((((_497 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _558 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_553, _554, _555), 0.0);
        vec4 _565 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_553, _554, _555), 0.0);
        vec4 _572 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_553, _554, _555), 0.0);
        vec4 _579 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_553, _554, _555), 0.0);
        float _592 = exp2((_558.w + (-0.5)) * 20.0) * 2.0;
        float _593 = _592 * (_558.x + (-0.5));
        float _594 = _592 * (_558.y + (-0.5));
        float _595 = _592 * (_558.z + (-0.5));
        float _602 = exp2((_565.w + (-0.5)) * 20.0) * 2.0;
        float _603 = _602 * (_565.x + (-0.5));
        float _604 = _602 * (_565.y + (-0.5));
        float _605 = _602 * (_565.z + (-0.5));
        float _612 = exp2((_572.w + (-0.5)) * 20.0) * 2.0;
        float _613 = _612 * (_572.x + (-0.5));
        float _614 = _612 * (_572.y + (-0.5));
        float _615 = _612 * (_572.z + (-0.5));
        float _622 = exp2((_579.w + (-0.5)) * 20.0) * 2.0;
        float _623 = _622 * (_579.x + (-0.5));
        float _624 = _622 * (_579.y + (-0.5));
        float _625 = _622 * (_579.z + (-0.5));
        float _626 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
        float _627 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
        float _628 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
        float _629 = _593 * 0.5;
        float _630 = _603 * 0.5;
        float _631 = _613 * 0.5;
        float _632 = dot(vec3(_629, _630, _631), vec3(_629, _630, _631));
        float _637 = (_632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_632);
        float _646 = (dot(vec3(_278, _279, _280), vec3(_637 * _629, _637 * _630, _637 * _631)) + 1.0) * 0.5;
        float _3267 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        float _656 = sqrt(((_630 * _630) + (_629 * _629)) + (_631 * _631)) / (_626 + 9.9999997473787516355514526367188e-06);
        float _3278 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _657 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
        float _658 = _657 * 2.0;
        float _662 = (1.0 - _657) / (_657 + 1.0);
        float _3289 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _663 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
        float _672 = ((((1.0 - _663) * (_658 + 2.0)) * exp2(log2(isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0))) * (_658 + 1.0))) + _663) * _626;
        float _673 = _594 * 0.5;
        float _674 = _604 * 0.5;
        float _675 = _614 * 0.5;
        float _676 = dot(vec3(_673, _674, _675), vec3(_673, _674, _675));
        float _681 = (_676 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_676);
        float _689 = (dot(vec3(_278, _279, _280), vec3(_681 * _673, _681 * _674, _681 * _675)) + 1.0) * 0.5;
        float _3300 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _698 = sqrt(((_674 * _674) + (_673 * _673)) + (_675 * _675)) / (_627 + 9.9999997473787516355514526367188e-06);
        float _3311 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _699 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
        float _700 = _699 * 2.0;
        float _704 = (1.0 - _699) / (_699 + 1.0);
        float _3322 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _705 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
        float _714 = ((((1.0 - _705) * (_700 + 2.0)) * exp2(log2(isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0))) * (_700 + 1.0))) + _705) * _627;
        float _715 = _595 * 0.5;
        float _716 = _605 * 0.5;
        float _717 = _615 * 0.5;
        float _718 = dot(vec3(_715, _716, _717), vec3(_715, _716, _717));
        float _723 = (_718 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_718);
        float _731 = (dot(vec3(_278, _279, _280), vec3(_723 * _715, _723 * _716, _723 * _717)) + 1.0) * 0.5;
        float _3333 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _740 = sqrt(((_716 * _716) + (_715 * _715)) + (_717 * _717)) / (_628 + 9.9999997473787516355514526367188e-06);
        float _3344 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _741 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
        float _742 = _741 * 2.0;
        float _746 = (1.0 - _741) / (_741 + 1.0);
        float _3355 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
        float _756 = ((((1.0 - _747) * (_742 + 2.0)) * exp2(log2(isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0))) * (_742 + 1.0))) + _747) * _628;
        _764 = _595;
        _766 = _594;
        _767 = _593;
        _768 = _605;
        _769 = _604;
        _770 = _603;
        _771 = _615;
        _772 = _614;
        _773 = _613;
        _774 = _628;
        _775 = _627;
        _776 = _626;
        _777 = cbModelParam._m0[36u].z * (isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0)));
        _778 = cbModelParam._m0[36u].z * (isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0)));
        _779 = cbModelParam._m0[36u].z * (isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0)));
    }
    else
    {
        _764 = _765;
        _766 = _765;
        _767 = _765;
        _768 = _765;
        _769 = _765;
        _770 = _765;
        _771 = _765;
        _772 = _765;
        _773 = _765;
        _774 = _765;
        _775 = _765;
        _776 = _765;
        _777 = 0.0;
        _778 = 0.0;
        _779 = 0.0;
    }
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _805 = fma(_462, cbModelParam._m0[30u].z, fma(_458, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _454));
        float _809 = fma(_462, cbModelParam._m0[31u].z, fma(_458, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _454));
        float _813 = fma(_462, cbModelParam._m0[32u].z, fma(_458, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _454));
        float _836 = _454 + _278;
        float _837 = _458 + _279;
        float _838 = _462 + _280;
        float _848 = fma(_838, cbModelParam._m0[30u].z, fma(_837, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _836)) - _805;
        float _849 = fma(_838, cbModelParam._m0[31u].z, fma(_837, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _836)) - _809;
        float _850 = fma(_838, cbModelParam._m0[32u].z, fma(_837, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _836)) - _813;
        float _854 = inversesqrt(dot(vec3(_848, _849, _850), vec3(_848, _849, _850)));
        float _867 = ((_854 * _848) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_805 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _868 = ((_854 * _849) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_809 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _869 = ((_854 * _850) / cbModelParam._m0[35u].z) + ((((((_813 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_867, _868, _869), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_867, _868, _869), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_867, _868, _869), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_867, _868, _869), 0.0);
        float _904 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_871.x + (-0.5));
        float _906 = _904 * (_871.y + (-0.5));
        float _907 = _904 * (_871.z + (-0.5));
        float _914 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_878.x + (-0.5));
        float _916 = _914 * (_878.y + (-0.5));
        float _917 = _914 * (_878.z + (-0.5));
        float _924 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _925 = _924 * (_885.x + (-0.5));
        float _926 = _924 * (_885.y + (-0.5));
        float _927 = _924 * (_885.z + (-0.5));
        float _934 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _935 = _934 * (_892.x + (-0.5));
        float _936 = _934 * (_892.y + (-0.5));
        float _937 = _934 * (_892.z + (-0.5));
        float _938 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _939 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _940 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _941 = _905 * 0.5;
        float _942 = _915 * 0.5;
        float _943 = _925 * 0.5;
        float _944 = dot(vec3(_941, _942, _943), vec3(_941, _942, _943));
        float _949 = (_944 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_944);
        float _957 = (dot(vec3(_278, _279, _280), vec3(_949 * _941, _949 * _942, _949 * _943)) + 1.0) * 0.5;
        float _3396 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _966 = sqrt(((_942 * _942) + (_941 * _941)) + (_943 * _943)) / (_938 + 9.9999997473787516355514526367188e-06);
        float _3407 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
        float _968 = _967 * 2.0;
        float _972 = (1.0 - _967) / (_967 + 1.0);
        float _3418 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
        float _982 = ((((1.0 - _973) * (_968 + 2.0)) * exp2(log2(isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0))) * (_968 + 1.0))) + _973) * _938;
        float _983 = _906 * 0.5;
        float _984 = _916 * 0.5;
        float _985 = _926 * 0.5;
        float _986 = dot(vec3(_983, _984, _985), vec3(_983, _984, _985));
        float _991 = (_986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_986);
        float _999 = (dot(vec3(_278, _279, _280), vec3(_991 * _983, _991 * _984, _991 * _985)) + 1.0) * 0.5;
        float _3429 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1008 = sqrt(((_984 * _984) + (_983 * _983)) + (_985 * _985)) / (_939 + 9.9999997473787516355514526367188e-06);
        float _3440 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _1010 = _1009 * 2.0;
        float _1014 = (1.0 - _1009) / (_1009 + 1.0);
        float _3451 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
        float _1024 = ((((1.0 - _1015) * (_1010 + 2.0)) * exp2(log2(isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0))) * (_1010 + 1.0))) + _1015) * _939;
        float _1025 = _907 * 0.5;
        float _1026 = _917 * 0.5;
        float _1027 = _927 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1041 = (dot(vec3(_278, _279, _280), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3462 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1050 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_940 + 9.9999997473787516355514526367188e-06);
        float _3473 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3484 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))) * (_1052 + 1.0))) + _1057) * _940;
        _1074 = _907;
        _1075 = _906;
        _1076 = _905;
        _1077 = _917;
        _1078 = _916;
        _1079 = _915;
        _1080 = _927;
        _1081 = _926;
        _1082 = _925;
        _1083 = _940;
        _1084 = _939;
        _1085 = _938;
        _1086 = cbModelParam._m0[36u].w * (isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0)));
        _1087 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0)));
        _1088 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
    }
    else
    {
        _1074 = _765;
        _1075 = _765;
        _1076 = _765;
        _1077 = _765;
        _1078 = _765;
        _1079 = _765;
        _1080 = _765;
        _1081 = _765;
        _1082 = _765;
        _1083 = _765;
        _1084 = _765;
        _1085 = _765;
        _1086 = 0.0;
        _1087 = 0.0;
        _1088 = 0.0;
    }
    float _1098 = (cbModelParam._m0[1u].x * (_1086 - _777)) + _777;
    float _1099 = (cbModelParam._m0[1u].x * (_1087 - _778)) + _778;
    float _1100 = (cbModelParam._m0[1u].x * (_1088 - _779)) + _779;
    float _1121 = fma(_1100, cbSceneParam._m0[89u].z, fma(_1099, cbSceneParam._m0[89u].y, _1098 * cbSceneParam._m0[89u].x));
    float _1124 = fma(_1100, cbSceneParam._m0[90u].z, fma(_1099, cbSceneParam._m0[90u].y, _1098 * cbSceneParam._m0[90u].x));
    float _1127 = fma(_1100, cbSceneParam._m0[91u].z, fma(_1099, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1098));
    float _1142 = _430 * 0.5;
    float _1143 = _431 * 0.5;
    float _1144 = _432 * 0.5;
    float _1145 = dot(vec4(_1142, _1143, _1144, 1.0), vec4(_1076, _1079, _1082, _1085));
    float _1148 = dot(vec4(_1142, _1143, _1144, 1.0), vec4(_1075, _1078, _1081, _1084));
    float _1151 = dot(vec4(_1142, _1143, _1144, 1.0), vec4(_1074, _1077, _1080, _1083));
    float _1185;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1158 = dot(vec4(_1142, _1143, _1144, 1.0), vec4(_764, _768, _771, _774));
        float _1162 = dot(vec4(_1142, _1143, _1144, 1.0), vec4(_766, _769, _772, _775));
        float _1166 = dot(vec4(_1142, _1143, _1144, 1.0), vec4(_767, _770, _773, _776));
        float _1173 = dot(vec4(cbModelParam._m0[39u]), vec4(_1142, _1143, _1144, 1.0));
        _1185 = dot(vec3(isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)), isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)), isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1173) ? 0.0 : (isnan(0.0) ? _1173 : max(0.0, _1173))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1185 = 1.0;
    }
    float _1196;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1187 = dot(vec4(cbModelParam._m0[40u]), vec4(_1142, _1143, _1144, 1.0));
        _1196 = dot(vec3(isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)), isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)), isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1187) ? 0.0 : (isnan(0.0) ? _1187 : max(0.0, _1187))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1196 = 1.0;
    }
    float _1200 = (_1196 * cbModelParam._m0[1u].x) + (_1185 * (1.0 - cbModelParam._m0[1u].x));
    float _1209 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1291;
    float _1293;
    float _1295;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1258 = fma(_462, cbModelParam._m0[13u].z, fma(_458, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _454)) + cbModelParam._m0[13u].w;
        float _1262 = fma(_462, cbModelParam._m0[14u].z, fma(_458, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _454)) + cbModelParam._m0[14u].w;
        float _1266 = fma(_462, cbModelParam._m0[15u].z, fma(_458, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _454)) + cbModelParam._m0[15u].w;
        float _1269 = fma(_432, cbModelParam._m0[13u].z, fma(_431, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _430));
        float _1272 = fma(_432, cbModelParam._m0[14u].z, fma(_431, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _430));
        float _1275 = fma(_432, cbModelParam._m0[15u].z, fma(_431, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _430));
        float _1301;
        if (_1269 > 0.0)
        {
            _1301 = abs((1.0 - _1258) / _1269);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1269 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1258 + 1.0) / _1269);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1301 = frontier_phi_16_14_ladder;
        }
        float _1476;
        if (_1272 > 0.0)
        {
            _1476 = abs((1.0 - _1262) / _1272);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1272 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1262 + 1.0) / _1272);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1476 = frontier_phi_25_21_ladder;
        }
        float _1773;
        if (_1275 > 0.0)
        {
            _1773 = abs((1.0 - _1266) / _1275);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1275 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1266 + 1.0) / _1275);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1773 = frontier_phi_37_32_ladder;
        }
        float _1775 = isnan(_1476) ? _1301 : (isnan(_1301) ? _1476 : min(_1301, _1476));
        float _1776 = isnan(_1773) ? _1775 : (isnan(_1775) ? _1773 : min(_1775, _1773));
        float _1780 = (_1776 * _1269) + _1258;
        float _1781 = (_1776 * _1272) + _1262;
        float _1782 = (_1776 * _1275) + _1266;
        float _1783 = _1776 * 9.9999997473787516355514526367188e-05;
        float _1785 = (-1.0) - _1783;
        float _1787 = _1783 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1782 > _1787) || ((_1782 < _1785) || ((_1781 > _1787) || ((_1781 < _1785) || ((_1780 < _1785) || (_1780 > _1787))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1927 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1782, cbModelParam._m0[9u].z, fma(_1781, cbModelParam._m0[9u].y, _1780 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1782, cbModelParam._m0[10u].z, fma(_1781, cbModelParam._m0[10u].y, _1780 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1782, cbModelParam._m0[11u].z, fma(_1781, cbModelParam._m0[11u].y, _1780 * cbModelParam._m0[11u].x))), _1209);
            frontier_phi_15_37_ladder = _1927.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1927.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1927.z * cbModelParam._m0[1u].y;
        }
        _1291 = frontier_phi_15_37_ladder_1;
        _1293 = frontier_phi_15_37_ladder;
        _1295 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1279 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_430, _431, _432), _1209);
        _1291 = _1279.x * cbModelParam._m0[1u].y;
        _1293 = _1279.y * cbModelParam._m0[1u].y;
        _1295 = _1279.z * cbModelParam._m0[1u].y;
    }
    float _1298 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1391;
    float _1393;
    float _1395;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1355 = fma(_462, cbModelParam._m0[21u].z, fma(_458, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _454)) + cbModelParam._m0[21u].w;
        float _1359 = fma(_462, cbModelParam._m0[22u].z, fma(_458, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _454)) + cbModelParam._m0[22u].w;
        float _1363 = fma(_462, cbModelParam._m0[23u].z, fma(_458, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _454)) + cbModelParam._m0[23u].w;
        float _1366 = fma(_432, cbModelParam._m0[21u].z, fma(_431, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _430));
        float _1369 = fma(_432, cbModelParam._m0[22u].z, fma(_431, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _430));
        float _1372 = fma(_432, cbModelParam._m0[23u].z, fma(_431, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _430));
        float _1481;
        if (_1366 > 0.0)
        {
            _1481 = abs((1.0 - _1355) / _1366);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1366 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1355 + 1.0) / _1366);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1481 = frontier_phi_27_23_ladder;
        }
        float _1800;
        if (_1369 > 0.0)
        {
            _1800 = abs((1.0 - _1359) / _1369);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1369 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1359 + 1.0) / _1369);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1800 = frontier_phi_39_34_ladder;
        }
        float _2073;
        if (_1372 > 0.0)
        {
            _2073 = abs((1.0 - _1363) / _1372);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1372 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1363 + 1.0) / _1372);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2073 = frontier_phi_49_46_ladder;
        }
        float _2075 = isnan(_1800) ? _1481 : (isnan(_1481) ? _1800 : min(_1481, _1800));
        float _2076 = isnan(_2073) ? _2075 : (isnan(_2075) ? _2073 : min(_2075, _2073));
        float _2080 = (_2076 * _1366) + _1355;
        float _2081 = (_2076 * _1369) + _1359;
        float _2082 = (_2076 * _1372) + _1363;
        float _2083 = _2076 * 9.9999997473787516355514526367188e-05;
        float _2084 = (-1.0) - _2083;
        float _2086 = _2083 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2082 > _2086) || ((_2082 < _2084) || ((_2081 > _2086) || ((_2081 < _2084) || ((_2080 < _2084) || (_2080 > _2086))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2173 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2082, cbModelParam._m0[17u].z, fma(_2081, cbModelParam._m0[17u].y, _2080 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2082, cbModelParam._m0[18u].z, fma(_2081, cbModelParam._m0[18u].y, _2080 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2082, cbModelParam._m0[19u].z, fma(_2081, cbModelParam._m0[19u].y, _2080 * cbModelParam._m0[19u].x))), _1298);
            frontier_phi_24_49_ladder = _2173.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2173.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2173.x * cbModelParam._m0[1u].z;
        }
        _1391 = frontier_phi_24_49_ladder_2;
        _1393 = frontier_phi_24_49_ladder_1;
        _1395 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1375 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_430, _431, _432), _1298);
        _1391 = _1375.x * cbModelParam._m0[1u].z;
        _1393 = _1375.y * cbModelParam._m0[1u].z;
        _1395 = _1375.z * cbModelParam._m0[1u].z;
    }
    float _1407 = _421 * 0.01200000010430812835693359375;
    float _1409 = _1407 * ((cbModelParam._m0[1u].w * (_1391 - _1291)) + _1291);
    float _1410 = _1407 * ((cbModelParam._m0[1u].w * (_1393 - _1293)) + _1293);
    float _1411 = _1407 * ((cbModelParam._m0[1u].w * (_1395 - _1295)) + _1295);
    float _1414 = fma(_1411, cbSceneParam._m0[89u].z, fma(_1410, cbSceneParam._m0[89u].y, _1409 * cbSceneParam._m0[89u].x));
    float _1417 = fma(_1411, cbSceneParam._m0[90u].z, fma(_1410, cbSceneParam._m0[90u].y, _1409 * cbSceneParam._m0[90u].x));
    float _1420 = fma(_1411, cbSceneParam._m0[91u].z, fma(_1410, cbSceneParam._m0[91u].y, _1409 * cbSceneParam._m0[91u].x));
    float _1455 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1459 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1463 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1467 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1468 = _1455 / _1467;
    float _1469 = _1459 / _1467;
    float _1470 = _1463 / _1467;
    float _1617;
    float _1618;
    float _1619;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1497 = ((uint(_1470 > cbSceneParam._m0[59u].y) + uint(_1470 > cbSceneParam._m0[59u].x)) + uint(_1470 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1498 = _1497 + 43u;
        uint _1506 = _1497 + 44u;
        uint _1514 = _1497 + 45u;
        uint _1522 = _1497 + 46u;
        float _1533 = fma(_1467, cbSceneParam._m0[_1498].w, fma(_1463, cbSceneParam._m0[_1498].z, fma(_1459, cbSceneParam._m0[_1498].y, _1455 * cbSceneParam._m0[_1498].x)));
        float _1537 = fma(_1467, cbSceneParam._m0[_1506].w, fma(_1463, cbSceneParam._m0[_1506].z, fma(_1459, cbSceneParam._m0[_1506].y, _1455 * cbSceneParam._m0[_1506].x)));
        float _1545 = fma(_1467, cbSceneParam._m0[_1522].w, fma(_1463, cbSceneParam._m0[_1522].z, fma(_1459, cbSceneParam._m0[_1522].y, _1455 * cbSceneParam._m0[_1522].x)));
        float _1550 = cbSceneParam._m0[33u].z * _1545;
        float _1552 = cbSceneParam._m0[33u].w * _1545;
        float _1555 = fma(_1467, cbSceneParam._m0[_1514].w, fma(_1463, cbSceneParam._m0[_1514].z, fma(_1459, cbSceneParam._m0[_1514].y, _1455 * cbSceneParam._m0[_1514].x))) / _1545;
        float _1603 = (cbSceneParam._m0[33u].x - sqrt(((_1469 * _1469) + (_1468 * _1468)) + (_1470 * _1470))) * cbSceneParam._m0[33u].y;
        float _3610 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1610 = (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1550 + _1533) / _1545, (_1552 + _1537) / _1545), _1555), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1552 + _1533) / _1545, (_1537 - _1550) / _1545), _1555), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1533 - _1550) / _1545, (_1537 - _1552) / _1545), _1555), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1533 - _1552) / _1545, (_1550 + _1537) / _1545), _1555), 0.0)).x), vec4(0.25)));
        _1617 = 1.0 - (_1610 * cbSceneParam._m0[34u].x);
        _1618 = 1.0 - (_1610 * cbSceneParam._m0[34u].y);
        _1619 = 1.0 - (_1610 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1617 = 1.0;
        _1618 = 1.0;
        _1619 = 1.0;
    }
    float _1683;
    float _1685;
    float _1687;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1671 = fma(_1467, cbSceneParam._m0[63u].w, fma(_1463, cbSceneParam._m0[63u].z, fma(_1459, cbSceneParam._m0[63u].y, _1455 * cbSceneParam._m0[63u].x)));
        float _1672 = fma(_1467, cbSceneParam._m0[60u].w, fma(_1463, cbSceneParam._m0[60u].z, fma(_1459, cbSceneParam._m0[60u].y, _1455 * cbSceneParam._m0[60u].x))) / _1671;
        float _1673 = fma(_1467, cbSceneParam._m0[61u].w, fma(_1463, cbSceneParam._m0[61u].z, fma(_1459, cbSceneParam._m0[61u].y, _1455 * cbSceneParam._m0[61u].x))) / _1671;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1672 >= cbSceneParam._m0[64u].x) && (_1673 >= cbSceneParam._m0[64u].y)) && (_1672 <= cbSceneParam._m0[64u].z)) && (_1673 <= cbSceneParam._m0[64u].w))
        {
            float _1813 = fma(_1467, cbSceneParam._m0[62u].w, fma(_1463, cbSceneParam._m0[62u].z, fma(_1459, cbSceneParam._m0[62u].y, _1455 * cbSceneParam._m0[62u].x))) / _1671;
            float _1817 = isnan(cbSceneParam._m0[41u].w) ? _1813 : (isnan(_1813) ? cbSceneParam._m0[41u].w : max(_1813, cbSceneParam._m0[41u].w));
            float _1860 = (cbSceneParam._m0[33u].x - sqrt(((_1469 * _1469) + (_1468 * _1468)) + (_1470 * _1470))) * cbSceneParam._m0[33u].y;
            float _3626 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
            float _1867 = (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1672, cbSceneParam._m0[33u].w + _1673), _1817), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1672, _1673 - cbSceneParam._m0[33u].z), _1817), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1672 - cbSceneParam._m0[33u].z, _1673 - cbSceneParam._m0[33u].w), _1817), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1672 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1673), _1817), 0.0)).x), vec4(0.25)));
            float _1871 = 1.0 - (_1867 * cbSceneParam._m0[34u].x);
            float _1872 = 1.0 - (_1867 * cbSceneParam._m0[34u].y);
            float _1873 = 1.0 - (_1867 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1872) ? _1618 : (isnan(_1618) ? _1872 : min(_1618, _1872));
            frontier_phi_36_35_ladder_1 = isnan(_1873) ? _1619 : (isnan(_1619) ? _1873 : min(_1619, _1873));
            frontier_phi_36_35_ladder_2 = isnan(_1871) ? _1617 : (isnan(_1617) ? _1871 : min(_1617, _1871));
        }
        else
        {
            frontier_phi_36_35_ladder = _1618;
            frontier_phi_36_35_ladder_1 = _1619;
            frontier_phi_36_35_ladder_2 = _1617;
        }
        _1683 = frontier_phi_36_35_ladder_2;
        _1685 = frontier_phi_36_35_ladder;
        _1687 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1683 = _1617;
        _1685 = _1618;
        _1687 = _1619;
    }
    uvec4 _1692 = floatBitsToUint(cbInstanceData._m0[_395 + 5u]);
    uint _1694 = _1692.x * 14u;
    uint _1695 = _1694 + 13u;
    float _1702 = _421 + (-1.0);
    float _1708 = (cbLight._m0[_1695].x * _1702) + 1.0;
    float _1709 = (cbLight._m0[_1695].y * _1702) + 1.0;
    float _1710 = (cbLight._m0[_1695].z * _1702) + 1.0;
    float _1711 = (cbLight._m0[_1695].w * _1702) + 1.0;
    uint _1712 = _1694 + 5u;
    float _1718 = isnan(1.0) ? _1709 : (isnan(_1709) ? 1.0 : min(_1709, 1.0));
    uint _1722 = _1694 + 4u;
    float _1732 = isnan(1.0) ? _1708 : (isnan(_1708) ? 1.0 : min(_1708, 1.0));
    uint _1736 = _1694 | 1u;
    float _1747 = dot(vec3(cbLight._m0[_1694].xyz), vec3(_278, _279, _280));
    float _1750 = dot(vec3(cbLight._m0[_1736].xyz), vec3(_278, _279, _280));
    float _3662 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _3673 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1755 = (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * 0.3183098733425140380859375;
    float _1757 = (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * 0.3183098733425140380859375;
    float _1764 = ((cbLight._m0[_1712].x * _1718) * _1757) + (((cbLight._m0[_1722].x * _1683) * _1732) * _1755);
    float _1765 = ((_1718 * cbLight._m0[_1712].y) * _1757) + (((cbLight._m0[_1722].y * _1685) * _1732) * _1755);
    float _1766 = ((_1718 * cbLight._m0[_1712].z) * _1757) + (((cbLight._m0[_1722].z * _1687) * _1732) * _1755);
    uvec4 _1770 = floatBitsToUint(cbLight._m0[_1694 + 12u]);
    bool _1772 = _1770.x == 0u;
    float _1874;
    float _1876;
    float _1878;
    if (_1772)
    {
        _1874 = _1764;
        _1876 = _1765;
        _1878 = _1766;
    }
    else
    {
        uint _1882 = _1694 + 6u;
        float _1898 = (dot(vec3(cbLight._m0[_1694 + 2u].xyz), vec3(_278, _279, _280)) * 0.5) + 0.5;
        float _1899 = _1898 * _1898;
        float _3684 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
        float _1900 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1901 = isnan(1.0) ? _1710 : (isnan(_1710) ? 1.0 : min(_1710, 1.0));
        _1874 = (((cbLight._m0[_1882].x * 0.3183098733425140380859375) * _1900) * _1901) + _1764;
        _1876 = (((cbLight._m0[_1882].y * 0.3183098733425140380859375) * _1900) * _1901) + _1765;
        _1878 = (((cbLight._m0[_1882].z * 0.3183098733425140380859375) * _1900) * _1901) + _1766;
    }
    bool _1881 = _1770.y == 0u;
    float _1936;
    float _1938;
    float _1940;
    if (_1881)
    {
        _1936 = _1874;
        _1938 = _1876;
        _1940 = _1878;
    }
    else
    {
        uint _2044 = _1694 + 7u;
        float _2060 = (dot(vec3(cbLight._m0[_1694 + 3u].xyz), vec3(_278, _279, _280)) * 0.5) + 0.5;
        float _2061 = _2060 * _2060;
        float _3700 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2062 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _2063 = isnan(1.0) ? _1711 : (isnan(_1711) ? 1.0 : min(_1711, 1.0));
        _1936 = (((cbLight._m0[_2044].x * 0.3183098733425140380859375) * _2062) * _2063) + _1874;
        _1938 = (((cbLight._m0[_2044].y * 0.3183098733425140380859375) * _2062) * _2063) + _1876;
        _1940 = (((cbLight._m0[_2044].z * 0.3183098733425140380859375) * _2062) * _2063) + _1878;
    }
    uint _1942 = _1694 + 8u;
    float _1948 = cbLight._m0[_1694].x + _347;
    float _1949 = cbLight._m0[_1694].y + _348;
    float _1950 = cbLight._m0[_1694].z + _349;
    float _1954 = inversesqrt(dot(vec3(_1948, _1949, _1950), vec3(_1948, _1949, _1950)));
    float _1958 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_1694].xyz));
    float _3716 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1961 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _3727 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _1962 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _1963 = dot(vec3(cbLight._m0[_1694].xyz), vec3(_1948 * _1954, _1949 * _1954, _1950 * _1954));
    float _3738 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1974 = (exp2(log2(1.0 - (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1980 = (0.5 / ((_1961 + 9.9999999392252902907785028219223e-09) + _1962)) * _1961;
    float _3749 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1982 = (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * 0.31831014156341552734375;
    uint _1996 = _1694 + 9u;
    float _2002 = cbLight._m0[_1736].x + _347;
    float _2003 = cbLight._m0[_1736].y + _348;
    float _2004 = cbLight._m0[_1736].z + _349;
    float _2008 = inversesqrt(dot(vec3(_2002, _2003, _2004), vec3(_2002, _2003, _2004)));
    float _2012 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_1736].xyz));
    float _3760 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2015 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _2016 = dot(vec3(cbLight._m0[_1736].xyz), vec3(_2002 * _2008, _2003 * _2008, _2004 * _2008));
    float _3771 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2025 = (exp2(log2(1.0 - (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2029 = (0.5 / ((_2015 + 9.9999999392252902907785028219223e-09) + _1962)) * _2015;
    float _3782 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2031 = (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * 0.31831014156341552734375;
    float _2041 = (((_2025 * cbLight._m0[_1996].x) * _2031) * _1718) + ((((cbLight._m0[_1942].x * _1683) * _1974) * _1982) * _1732);
    float _2042 = (((_2025 * cbLight._m0[_1996].y) * _2031) * _1718) + ((((cbLight._m0[_1942].y * _1685) * _1974) * _1982) * _1732);
    float _2043 = (((_2025 * cbLight._m0[_1996].z) * _2031) * _1718) + ((((cbLight._m0[_1942].z * _1687) * _1974) * _1982) * _1732);
    float _2099;
    float _2101;
    float _2103;
    if (_1772)
    {
        _2099 = _2041;
        _2101 = _2042;
        _2103 = _2043;
    }
    else
    {
        uint _2105 = _1694 + 10u;
        uint _2111 = _1694 + 2u;
        float _2117 = cbLight._m0[_2111].x + _347;
        float _2118 = cbLight._m0[_2111].y + _348;
        float _2119 = cbLight._m0[_2111].z + _349;
        float _2123 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
        float _2127 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_2111].xyz));
        float _3793 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2130 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _2131 = dot(vec3(cbLight._m0[_2111].xyz), vec3(_2117 * _2123, _2118 * _2123, _2119 * _2123));
        float _3804 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2140 = (exp2(log2(1.0 - (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2144 = (0.5 / ((_2130 + 9.9999999392252902907785028219223e-09) + _1962)) * _2130;
        float _3815 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2146 = (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * 0.31831014156341552734375;
        float _2147 = isnan(1.0) ? _1710 : (isnan(_1710) ? 1.0 : min(_1710, 1.0));
        _2099 = (((_2140 * cbLight._m0[_2105].x) * _2146) * _2147) + _2041;
        _2101 = (((_2140 * cbLight._m0[_2105].y) * _2146) * _2147) + _2042;
        _2103 = (((_2140 * cbLight._m0[_2105].z) * _2146) * _2147) + _2043;
    }
    float _2178;
    float _2180;
    float _2182;
    if (_1881)
    {
        _2178 = _2099;
        _2180 = _2101;
        _2182 = _2103;
    }
    else
    {
        uint _2189 = _1694 + 11u;
        uint _2195 = _1694 + 3u;
        float _2201 = cbLight._m0[_2195].x + _347;
        float _2202 = cbLight._m0[_2195].y + _348;
        float _2203 = cbLight._m0[_2195].z + _349;
        float _2207 = inversesqrt(dot(vec3(_2201, _2202, _2203), vec3(_2201, _2202, _2203)));
        float _2211 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_2195].xyz));
        float _3831 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2214 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _2215 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_2201 * _2207, _2202 * _2207, _2203 * _2207));
        float _3842 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2224 = (exp2(log2(1.0 - (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2228 = (0.5 / ((_2214 + 9.9999999392252902907785028219223e-09) + _1962)) * _2214;
        float _3853 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2230 = (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * 0.31831014156341552734375;
        float _2231 = isnan(1.0) ? _1711 : (isnan(_1711) ? 1.0 : min(_1711, 1.0));
        _2178 = (((_2224 * cbLight._m0[_2189].x) * _2230) * _2231) + _2099;
        _2180 = (((_2224 * cbLight._m0[_2189].y) * _2230) * _2231) + _2101;
        _2182 = (((_2224 * cbLight._m0[_2189].z) * _2230) * _2231) + _2103;
    }
    float _2296;
    float _2298;
    float _2300;
    float _2302;
    float _2304;
    float _2306;
    if (_1692.y == 0u)
    {
        uvec4 _2252 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2253 = _2252.x;
        uint _2264 = uint((float(_2252.y) * floor(float(uint(cbSceneParam._m0[85u].y * _355) / _2253))) + floor(float(uint(cbSceneParam._m0[85u].x * _354) / _2253)));
        float _2274 = (log2(_1470 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2275 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        uint _2278 = uint(isnan(14.0) ? _2275 : (isnan(_2275) ? 14.0 : min(_2275, 14.0)));
        uvec4 _2283 = texelFetch(g_lightClusterGridBuffer, int(((_2278 << 2u) + (_2264 << 6u)) >> 2u));
        uint _2284 = _2283.x;
        uint _2285 = _2252.z;
        float _2368;
        float _2370;
        float _2372;
        float _2374;
        float _2376;
        float _2378;
        if (((((1u << ((_2285 >> 4u) & 15u)) + 4294967295u) & _2284) == 0u) || ((_2285 & 240u) == 0u))
        {
            _2368 = 0.0;
            _2370 = 0.0;
            _2372 = 0.0;
            _2374 = 0.0;
            _2376 = 0.0;
            _2378 = 0.0;
        }
        else
        {
            float _2369;
            float _2371;
            float _2373;
            float _2375;
            float _2377;
            float _2379;
            float _2510 = 0.0;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            float _2514 = 0.0;
            float _2515 = 0.0;
            uint _2516 = 0u;
            uint _2525;
            bool _2526;
            for (;;)
            {
                _2525 = texelFetch(g_lightClassification, int((((_2278 << 5u) + (_2264 << 9u)) + (_2516 << 2u)) >> 2u)).x;
                _2526 = _2525 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2526)
                {
                    frontier_phi_68_pred = _2515;
                    frontier_phi_68_pred_1 = _2514;
                    frontier_phi_68_pred_2 = _2513;
                    frontier_phi_68_pred_3 = _2511;
                    frontier_phi_68_pred_4 = _2510;
                    frontier_phi_68_pred_5 = _2512;
                }
                else
                {
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    uint _2640;
                    _2634 = _2510;
                    _2635 = _2511;
                    _2636 = _2512;
                    _2637 = _2513;
                    _2638 = _2514;
                    _2639 = _2515;
                    _2640 = _2525;
                    float _2566;
                    float _2567;
                    float _2568;
                    float _2569;
                    float _2570;
                    float _2571;
                    for (;;)
                    {
                        uint _2644 = uint(findLSB(_2640)) + (_2516 << 5u);
                        uint _2641 = (_2640 + 4294967295u) & _2640;
                        uint _2646 = _2644 * 48u;
                        vec4 _2660 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2646)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 3u)).x));
                        uint _2666 = (_2644 * 48u) + 4u;
                        vec4 _2679 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2666)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 3u)).x));
                        uint _2685 = (_2644 * 48u) + 8u;
                        vec3 _2696 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x));
                        float _2700 = _2660.x - _1468;
                        float _2701 = _2660.y - _1469;
                        float _2702 = _2660.z - _1470;
                        float _2703 = dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702));
                        float _2706 = inversesqrt(_2703);
                        float _2715 = 1.0 - (_2703 * _2660.w);
                        float _3879 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
                        float _2716 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
                        float _2717 = sqrt(_2703) * _2679.w;
                        float _2720 = 1.39999997615814208984375 / (_2717 + 1.39999997615814208984375);
                        float _2721 = _2720 * _2720;
                        float _2724 = ((1.0 - _2721) * dot(vec3(_376, _379, _382), vec3(_2706 * _2700, _2706 * _2701, _2706 * _2702))) + _2721;
                        float _2727 = _2717 * _2717;
                        float _2731 = ((isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0))) * _2716) / ((_2727 * 0.699999988079071044921875) + 1.0);
                        float _2735 = (-0.0) - _1468;
                        float _2736 = (-0.0) - _1469;
                        float _2737 = (-0.0) - _1470;
                        float _2741 = inversesqrt(dot(vec3(_2735, _2736, _2737), vec3(_2735, _2736, _2737)));
                        float _2745 = dot(vec3(_376, _379, _382), vec3(_2741 * _2735, _2741 * _2736, _2741 * _2737));
                        float _3895 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
                        float _3906 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
                        float _2749 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
                        float _2753 = (0.5 / (((isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) + 9.9999999392252902907785028219223e-09) + _2749)) * _2749;
                        float _3917 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                        float _2762 = (((isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * 3.1415927410125732421875) / ((_2727 * 2.1991131305694580078125) + 3.141590118408203125)) * _2716;
                        _2569 = (_2731 * _2679.x) + _2637;
                        _2570 = (_2731 * _2679.y) + _2638;
                        _2571 = (_2731 * _2679.z) + _2639;
                        _2566 = (_2762 * _2696.x) + _2634;
                        _2567 = (_2762 * _2696.y) + _2635;
                        _2568 = (_2762 * _2696.z) + _2636;
                        if (_2641 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2634 = _2566;
                            _2635 = _2567;
                            _2636 = _2568;
                            _2637 = _2569;
                            _2638 = _2570;
                            _2639 = _2571;
                            _2640 = _2641;
                        }
                    }
                    frontier_phi_68_pred = _2571;
                    frontier_phi_68_pred_1 = _2570;
                    frontier_phi_68_pred_2 = _2569;
                    frontier_phi_68_pred_3 = _2567;
                    frontier_phi_68_pred_4 = _2566;
                    frontier_phi_68_pred_5 = _2568;
                }
                _2379 = frontier_phi_68_pred;
                _2377 = frontier_phi_68_pred_1;
                _2375 = frontier_phi_68_pred_2;
                _2371 = frontier_phi_68_pred_3;
                _2369 = frontier_phi_68_pred_4;
                _2373 = frontier_phi_68_pred_5;
                uint _2517 = _2516 + 1u;
                if (_2517 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2510 = _2369;
                    _2511 = _2371;
                    _2512 = _2373;
                    _2513 = _2375;
                    _2514 = _2377;
                    _2515 = _2379;
                    _2516 = _2517;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2368 = _2369;
            _2370 = _2371;
            _2372 = _2373;
            _2374 = _2375;
            _2376 = _2377;
            _2378 = _2379;
        }
        uvec4 _2382 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2383 = _2382.z;
        uint _2385 = (_2383 >> 8u) & 15u;
        float _2481;
        float _2483;
        float _2485;
        float _2487;
        float _2489;
        float _2491;
        if (((4294967295u << _2385) & _2284) == 0u)
        {
            _2481 = _2368;
            _2483 = _2370;
            _2485 = _2372;
            _2487 = _2374;
            _2489 = _2376;
            _2491 = _2378;
        }
        else
        {
            float _2506 = inversesqrt(dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470)));
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2385 < ((_2383 >> 12u) & 15u))
            {
                float _2482;
                float _2484;
                float _2486;
                float _2488;
                float _2490;
                float _2492;
                float _2617 = _2368;
                float _2618 = _2370;
                float _2619 = _2372;
                float _2620 = _2374;
                float _2621 = _2376;
                float _2622 = _2378;
                uint _2623 = _2385;
                uint _2632;
                bool _2633;
                for (;;)
                {
                    _2632 = texelFetch(g_lightClassification, int((((_2278 << 5u) + (_2264 << 9u)) + (_2623 << 2u)) >> 2u)).x;
                    _2633 = _2632 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2633)
                    {
                        frontier_phi_74_pred = _2619;
                        frontier_phi_74_pred_1 = _2618;
                        frontier_phi_74_pred_2 = _2617;
                        frontier_phi_74_pred_3 = _2622;
                        frontier_phi_74_pred_4 = _2621;
                        frontier_phi_74_pred_5 = _2620;
                    }
                    else
                    {
                        float _2767;
                        float _2768;
                        float _2769;
                        float _2770;
                        float _2771;
                        float _2772;
                        float _3019;
                        float _3020;
                        float _3021;
                        float _3022;
                        float _3023;
                        float _3024;
                        float _2780 = _2617;
                        float _2781 = _2618;
                        float _2782 = _2619;
                        float _2783 = _2620;
                        float _2784 = _2621;
                        float _2785 = _2622;
                        uint _2786 = _2632;
                        uint _2787;
                        vec4 _2812;
                        float _2813;
                        vec4 _2828;
                        vec3 _2840;
                        vec4 _2856;
                        vec4 _2872;
                        float _2919;
                        bool _2920;
                        for (;;)
                        {
                            uint _2797 = ((_2623 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2786));
                            _2787 = (_2786 + 4294967295u) & _2786;
                            uint _2799 = _2797 * 40u;
                            _2812 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2799)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 3u)).x));
                            _2813 = _2812.w;
                            uint _2815 = (_2797 * 40u) + 4u;
                            _2828 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2815)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 3u)).x));
                            uint _2830 = (_2797 * 40u) + 8u;
                            _2840 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2830)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 2u)).x));
                            uint _2843 = (_2797 * 40u) + 16u;
                            _2856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 3u)).x));
                            uint _2859 = (_2797 * 40u) + 20u;
                            _2872 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 3u)).x));
                            uint _2875 = (_2797 * 40u) + 24u;
                            vec4 _2888 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2875)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 3u)).x));
                            uint _2894 = (_2797 * 40u) + 28u;
                            vec4 _2907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 3u)).x));
                            _2919 = fma(_1470, _2907.z, fma(_1469, _2907.y, _2907.x * _1468)) + _2907.w;
                            _2920 = !((fma(_1470, _2888.z, fma(_1469, _2888.y, _2888.x * _1468)) + _2888.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_2920)
                            {
                                float _2947 = _2812.x - _1468;
                                float _2948 = _2812.y - _1469;
                                float _2949 = _2812.z - _1470;
                                float _2950 = dot(vec3(_2947, _2948, _2949), vec3(_2947, _2948, _2949));
                                float _2953 = inversesqrt(_2950);
                                float _2954 = _2953 * _2947;
                                float _2955 = _2953 * _2948;
                                float _2956 = _2953 * _2949;
                                float _2960 = 1.0 - (_2950 / (_2813 * _2813));
                                float _3928 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                                float _2961 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
                                float _2965 = sqrt(_2950) * _2828.w;
                                float _2967 = 1.39999997615814208984375 / (_2965 + 1.39999997615814208984375);
                                float _2968 = _2967 * _2967;
                                float _2969 = 1.0 - _2968;
                                float _2971 = (_2969 * dot(vec3(_2954, _2955, _2956), vec3(_376, _379, _382))) + _2968;
                                float _2974 = _2965 * _2965;
                                float _2978 = (fma(_1470, _2856.z, fma(_1469, _2856.y, _2856.x * _1468)) + _2856.w) / _2919;
                                float _2979 = (fma(_1470, _2872.z, fma(_1469, _2872.y, _2872.x * _1468)) + _2872.w) / _2919;
                                float _2983 = 1.0 - dot(vec2(_2978, _2979), vec2(_2978, _2979));
                                float _3944 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                                float _2984 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
                                float _2985 = _2984 * (((isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0))) * _2961) / ((_2974 * 0.699999988079071044921875) + 1.0));
                                float _2995 = dot(vec3(_376, _379, _382), vec3((-0.0) - (_1468 * _2506), (-0.0) - (_1469 * _2506), (-0.0) - (_1470 * _2506)));
                                float _3955 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _3003 = (_2969 * dot(vec3(_376, _379, _382), vec3(_2954, _2955, _2956))) + _2968;
                                float _3966 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                                float _3004 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
                                float _3008 = (0.5 / (((isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) + 9.9999999392252902907785028219223e-09) + _3004)) * _3004;
                                float _3977 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                                float _3015 = (_2984 * _2961) * (((isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * 3.1415927410125732421875) / ((_2974 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_80_pred = _3015 * _2840.z;
                                frontier_phi_80_pred_1 = _3015 * _2840.y;
                                frontier_phi_80_pred_2 = _3015 * _2840.x;
                                frontier_phi_80_pred_3 = _2985 * _2828.z;
                                frontier_phi_80_pred_4 = _2985 * _2828.y;
                                frontier_phi_80_pred_5 = _2985 * _2828.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3021 = frontier_phi_80_pred;
                            _3020 = frontier_phi_80_pred_1;
                            _3019 = frontier_phi_80_pred_2;
                            _3024 = frontier_phi_80_pred_3;
                            _3023 = frontier_phi_80_pred_4;
                            _3022 = frontier_phi_80_pred_5;
                            _2770 = _3022 + _2783;
                            _2771 = _3023 + _2784;
                            _2772 = _3024 + _2785;
                            _2767 = _3019 + _2780;
                            _2768 = _3020 + _2781;
                            _2769 = _3021 + _2782;
                            if (_2787 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2780 = _2767;
                                _2781 = _2768;
                                _2782 = _2769;
                                _2783 = _2770;
                                _2784 = _2771;
                                _2785 = _2772;
                                _2786 = _2787;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _2769;
                        frontier_phi_74_pred_1 = _2768;
                        frontier_phi_74_pred_2 = _2767;
                        frontier_phi_74_pred_3 = _2772;
                        frontier_phi_74_pred_4 = _2771;
                        frontier_phi_74_pred_5 = _2770;
                    }
                    _2486 = frontier_phi_74_pred;
                    _2484 = frontier_phi_74_pred_1;
                    _2482 = frontier_phi_74_pred_2;
                    _2492 = frontier_phi_74_pred_3;
                    _2490 = frontier_phi_74_pred_4;
                    _2488 = frontier_phi_74_pred_5;
                    uint _2624 = _2623 + 1u;
                    if (_2624 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2617 = _2482;
                        _2618 = _2484;
                        _2619 = _2486;
                        _2620 = _2488;
                        _2621 = _2490;
                        _2622 = _2492;
                        _2623 = _2624;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2490;
                frontier_phi_62_63_ladder_1 = _2488;
                frontier_phi_62_63_ladder_2 = _2486;
                frontier_phi_62_63_ladder_3 = _2492;
                frontier_phi_62_63_ladder_4 = _2484;
                frontier_phi_62_63_ladder_5 = _2482;
            }
            else
            {
                frontier_phi_62_63_ladder = _2376;
                frontier_phi_62_63_ladder_1 = _2374;
                frontier_phi_62_63_ladder_2 = _2372;
                frontier_phi_62_63_ladder_3 = _2378;
                frontier_phi_62_63_ladder_4 = _2370;
                frontier_phi_62_63_ladder_5 = _2368;
            }
            _2481 = frontier_phi_62_63_ladder_5;
            _2483 = frontier_phi_62_63_ladder_4;
            _2485 = frontier_phi_62_63_ladder_2;
            _2487 = frontier_phi_62_63_ladder_1;
            _2489 = frontier_phi_62_63_ladder;
            _2491 = frontier_phi_62_63_ladder_3;
        }
        float _2496 = isnan(1.0) ? _421 : (isnan(_421) ? 1.0 : min(_421, 1.0));
        _2296 = (_2496 * _2487) + _1936;
        _2298 = (_2496 * _2489) + _1938;
        _2300 = (_2496 * _2491) + _1940;
        _2302 = ((_2481 * 0.039999999105930328369140625) * _2496) + _2178;
        _2304 = ((_2483 * 0.039999999105930328369140625) * _2496) + _2180;
        _2306 = ((_2485 * 0.039999999105930328369140625) * _2496) + _2182;
    }
    else
    {
        _2296 = _1936;
        _2298 = _1938;
        _2300 = _1940;
        _2302 = _2178;
        _2304 = _2180;
        _2306 = _2182;
    }
    float _3993 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _4004 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _4015 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _4026 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _2324 = ((isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_2296 + ((isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0))) * _421))) + ((_2302 + ((isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))) * _1200)) * cbPerFrame._m0[3u].x);
    float _2325 = ((isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_2298 + ((isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0))) * _421))) + ((_2304 + ((isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))) * _1200)) * cbPerFrame._m0[3u].x);
    float _2326 = ((isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_2300 + ((isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0))) * _421))) + ((_2306 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _1200)) * cbPerFrame._m0[3u].x);
    float _2334 = cbInstanceData._m0[_395 + 6u].w * (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)));
    float _2339 = _354 / cbSceneParam._m0[86u].x;
    float _2340 = _355 / cbSceneParam._m0[86u].y;
    vec4 _2354 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2339, _2340, (log2((isnan(cbSceneParam._m0[77u].w) ? _289 : (isnan(_289) ? cbSceneParam._m0[77u].w : min(_289, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2356 = _2354.x;
    float _2357 = _2354.y;
    float _2358 = _2354.z;
    float _2359 = _2354.w;
    float _2430;
    float _2432;
    float _2434;
    float _2436;
    if (_289 > cbSceneParam._m0[78u].w)
    {
        float _2393 = isnan(_289) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _289 : min(cbSceneParam._m0[80u].w, _289));
        float _2394 = _2393 / _289;
        float _2405 = _2394 * _340;
        float _2406 = _341 * _2394;
        float _2407 = (-0.0) - _2406;
        float _2408 = _2394 * _342;
        float _2410 = (cbSceneParam._m0[77u].w * _2407) / _2393;
        float _2411 = _2410 + cbSceneParam._m0[79u].w;
        float _2412 = cbSceneParam._m0[79u].w - _2406;
        float _2418 = sqrt(((_2405 * _2405) + (_2406 * _2406)) + (_2408 * _2408));
        float _2421 = (1.0 - (cbSceneParam._m0[77u].w / _2393)) * _2418;
        float _2426 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2428 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2579;
        if (abs((_2407 - _2410) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2579 = ((((_2411 > 0.0) ? exp2(_2426 * _2411) : (2.0 - exp2(_2428 * _2411))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2421;
        }
        else
        {
            float _2539 = 1.0 / cbSceneParam._m0[80u].x;
            float _2540 = isnan(_2412) ? _2411 : (isnan(_2411) ? _2412 : max(_2411, _2412));
            float _2541 = isnan(_2412) ? _2411 : (isnan(_2411) ? _2412 : min(_2411, _2412));
            float _2550 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : min(_2540, 0.0));
            float _2551 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : min(_2541, 0.0));
            _2579 = ((abs(_2418 / _2407) * cbSceneParam._m0[80u].y) * ((((_2550 - _2551) * 2.0) - ((exp2(_2426 * (isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0)))) - exp2(_2426 * (isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0))))) * _2539)) - ((exp2(_2428 * _2550) - exp2(_2428 * _2551)) * _2539))) + (_2421 * cbSceneParam._m0[80u].z);
        }
        vec4 _2581 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2339, _2340, 1.0), 0.0);
        float _2590 = exp2((_2579 * (-1.44269502162933349609375)) * (1.0 - _2581.w));
        float _2591 = log2(_2590);
        float _2607 = log2(_2359);
        _2430 = (exp2(_2607 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2591 * cbSceneParam._m0[78u].x)) * _2581.x) / cbSceneParam._m0[78u].x)) + _2356;
        _2432 = (exp2(_2607 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2591 * cbSceneParam._m0[78u].y)) * _2581.y) / cbSceneParam._m0[78u].y)) + _2357;
        _2434 = (exp2(_2607 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2591 * cbSceneParam._m0[78u].z)) * _2581.z) / cbSceneParam._m0[78u].z)) + _2358;
        _2436 = _2590 * _2359;
    }
    else
    {
        _2430 = _2356;
        _2432 = _2357;
        _2434 = _2358;
        _2436 = _2359;
    }
    float _2448 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2449 = _2448 == 3.0;
    float _2451 = log2(_2436);
    float _2458 = exp2(_2451 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0)));
    float _2459 = exp2(_2451 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0)));
    float _2460 = exp2(_2451 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0)));
    float _2469 = (_2448 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2469 * (_2449 ? _2458 : (_2458 + (cbSceneParam._m0[72u].w * _2430)));
    SV_Target.y = _2469 * (_2449 ? _2459 : (_2459 + (cbSceneParam._m0[72u].w * _2432)));
    SV_Target.z = _2469 * (_2449 ? _2460 : (_2460 + (cbSceneParam._m0[72u].w * _2434)));
    SV_Target.w = _2334;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2334;
}


