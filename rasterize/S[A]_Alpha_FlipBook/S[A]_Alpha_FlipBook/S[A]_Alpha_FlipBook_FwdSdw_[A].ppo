#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A_Alpha_FlipBook_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _826;
float _3280;
float _3281;
float _3282;
float _3283;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _174 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _175 = _174 * NORMAL.x;
    float _176 = _174 * NORMAL.y;
    float _177 = _174 * NORMAL.z;
    float _182;
    float _183;
    float _184;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _182 = (-0.0) - _175;
        _183 = (-0.0) - _176;
        _184 = (-0.0) - _177;
    }
    else
    {
        _182 = _175;
        _183 = _176;
        _184 = _177;
    }
    uint _201 = uint(int(floor(cbMtdParam._m0[10u].x)));
    uint _202 = uint(int(cbMtdParam._m0[10u].w * cbMtdParam._m0[10u].z));
    float _204 = float(int(_201 - _202 * (_201 / _202)));
    vec4 _229 = texture(sampler2D(S_A_Alpha_FlipBook_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((fract(TEXCOORD_1.x) + (_204 - cbMtdParam._m0[10u].z * trunc(_204 / cbMtdParam._m0[10u].z))) * (1.0 / cbMtdParam._m0[10u].z)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((fract(TEXCOORD_1.y) + floor(_204 / cbMtdParam._m0[10u].z)) * (1.0 / cbMtdParam._m0[10u].w)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _236 = _229.x * cbMtdParam._m0[9u].x;
    float _237 = _229.y * cbMtdParam._m0[9u].y;
    float _238 = _229.z * cbMtdParam._m0[9u].z;
    vec4 _248 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _250 = _248.x;
    float _273 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _250)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _250))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3292 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _276 = (cbMtdParam._m0[9u].w * TEXCOORD_1.z) * _229.w;
    float _277 = (isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0))) * _276;
    float _278 = gl_FragCoord.x * 0.125;
    float _280 = gl_FragCoord.y * 0.125;
    vec4 _282 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_278, _280));
    float _290 = float(_276 >= ((_282.w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    float _294 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _295 = _294 * _182;
    float _296 = _294 * _183;
    float _297 = _294 * _184;
    float _3303 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _298 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
    float _3314 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3325 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3336 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _315 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _356 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _366 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _356);
    float _367 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _356);
    float _368 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _356);
    float _372 = inversesqrt(dot(vec3(_366, _367, _368), vec3(_366, _367, _368)));
    float _373 = _366 * _372;
    float _374 = _367 * _372;
    float _375 = _368 * _372;
    vec4 _376 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_278, _280));
    float _378 = _376.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _507 = sqrt(((_366 * _366) + (_367 * _367)) + (_368 * _368));
        float _513 = (cbMatDynParam._m0[5u].x * _507) + cbMatDynParam._m0[5u].y;
        float _3347 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
        float _514 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
        float _518 = (cbMatDynParam._m0[5u].z * _507) + cbMatDynParam._m0[5u].w;
        float _3358 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0))) - _514)) + _514) < ((_378 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _389 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _390 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _410 = fma(_297, cbSceneParam._m0[5u].z, fma(_296, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _295));
    float _413 = fma(_297, cbSceneParam._m0[6u].z, fma(_296, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _295));
    float _416 = fma(_297, cbSceneParam._m0[7u].z, fma(_296, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _295));
    uint _429 = uint(roundEven(NORMAL.w)) * 13u;
    uint _431 = _429 + 9u;
    uint _432 = _431 + uint(cbMatDynParam._m0[0u].w);
    float _438 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0)))) * cbInstanceData._m0[_432].x;
    float _439 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0)))) * cbInstanceData._m0[_432].y;
    float _440 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0)))) * cbInstanceData._m0[_432].z;
    float _3369 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _441 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
    float _3380 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0));
    float _3391 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
    vec4 _452 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _389, cbSceneParam._m0[86u].y * _390));
    float _455 = _452.x * TEXCOORD_1.w;
    float _456 = dot(vec3(_295, _296, _297), vec3(_373, _374, _375));
    float _459 = _456 * 2.0;
    float _464 = (_459 * _295) - _373;
    float _465 = (_459 * _296) - _374;
    float _466 = (_459 * _297) - _375;
    float _488 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _492 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _496 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _825;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _550 = fma(_496, cbModelParam._m0[26u].z, fma(_492, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _488));
        float _554 = fma(_496, cbModelParam._m0[27u].z, fma(_492, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _488));
        float _558 = fma(_496, cbModelParam._m0[28u].z, fma(_492, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _488));
        float _583 = _488 + _295;
        float _584 = _492 + _296;
        float _585 = _496 + _297;
        float _595 = fma(_585, cbModelParam._m0[26u].z, fma(_584, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _583)) - _550;
        float _596 = fma(_585, cbModelParam._m0[27u].z, fma(_584, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _583)) - _554;
        float _597 = fma(_585, cbModelParam._m0[28u].z, fma(_584, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _583)) - _558;
        float _601 = inversesqrt(dot(vec3(_595, _596, _597), vec3(_595, _596, _597)));
        float _614 = ((_601 * _595) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_550 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _615 = ((_601 * _596) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_554 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _616 = ((_601 * _597) / cbModelParam._m0[34u].z) + ((((((_558 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _619 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_614, _615, _616), 0.0);
        vec4 _626 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_614, _615, _616), 0.0);
        vec4 _633 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_614, _615, _616), 0.0);
        vec4 _640 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_614, _615, _616), 0.0);
        float _653 = exp2((_619.w + (-0.5)) * 20.0) * 2.0;
        float _654 = _653 * (_619.x + (-0.5));
        float _655 = _653 * (_619.y + (-0.5));
        float _656 = _653 * (_619.z + (-0.5));
        float _663 = exp2((_626.w + (-0.5)) * 20.0) * 2.0;
        float _664 = _663 * (_626.x + (-0.5));
        float _665 = _663 * (_626.y + (-0.5));
        float _666 = _663 * (_626.z + (-0.5));
        float _673 = exp2((_633.w + (-0.5)) * 20.0) * 2.0;
        float _674 = _673 * (_633.x + (-0.5));
        float _675 = _673 * (_633.y + (-0.5));
        float _676 = _673 * (_633.z + (-0.5));
        float _683 = exp2((_640.w + (-0.5)) * 20.0) * 2.0;
        float _684 = _683 * (_640.x + (-0.5));
        float _685 = _683 * (_640.y + (-0.5));
        float _686 = _683 * (_640.z + (-0.5));
        float _687 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
        float _688 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _689 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _690 = _654 * 0.5;
        float _691 = _664 * 0.5;
        float _692 = _674 * 0.5;
        float _693 = dot(vec3(_690, _691, _692), vec3(_690, _691, _692));
        float _698 = (_693 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_693);
        float _707 = (dot(vec3(_295, _296, _297), vec3(_698 * _690, _698 * _691, _698 * _692)) + 1.0) * 0.5;
        float _3417 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _717 = sqrt(((_691 * _691) + (_690 * _690)) + (_692 * _692)) / (_687 + 9.9999997473787516355514526367188e-06);
        float _3428 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _718 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
        float _719 = _718 * 2.0;
        float _723 = (1.0 - _718) / (_718 + 1.0);
        float _3439 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _724 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
        float _733 = ((((1.0 - _724) * (_719 + 2.0)) * exp2(log2(isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))) * (_719 + 1.0))) + _724) * _687;
        float _734 = _655 * 0.5;
        float _735 = _665 * 0.5;
        float _736 = _675 * 0.5;
        float _737 = dot(vec3(_734, _735, _736), vec3(_734, _735, _736));
        float _742 = (_737 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_737);
        float _750 = (dot(vec3(_295, _296, _297), vec3(_742 * _734, _742 * _735, _742 * _736)) + 1.0) * 0.5;
        float _3450 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _759 = sqrt(((_735 * _735) + (_734 * _734)) + (_736 * _736)) / (_688 + 9.9999997473787516355514526367188e-06);
        float _3461 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _760 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _761 = _760 * 2.0;
        float _765 = (1.0 - _760) / (_760 + 1.0);
        float _3472 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _766 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
        float _775 = ((((1.0 - _766) * (_761 + 2.0)) * exp2(log2(isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) * (_761 + 1.0))) + _766) * _688;
        float _776 = _656 * 0.5;
        float _777 = _666 * 0.5;
        float _778 = _676 * 0.5;
        float _779 = dot(vec3(_776, _777, _778), vec3(_776, _777, _778));
        float _784 = (_779 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_779);
        float _792 = (dot(vec3(_295, _296, _297), vec3(_784 * _776, _784 * _777, _784 * _778)) + 1.0) * 0.5;
        float _3483 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _801 = sqrt(((_777 * _777) + (_776 * _776)) + (_778 * _778)) / (_689 + 9.9999997473787516355514526367188e-06);
        float _3494 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _803 = _802 * 2.0;
        float _807 = (1.0 - _802) / (_802 + 1.0);
        float _3505 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _817 = ((((1.0 - _808) * (_803 + 2.0)) * exp2(log2(isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0))) * (_803 + 1.0))) + _808) * _689;
        _825 = _656;
        _827 = _655;
        _828 = _654;
        _829 = _666;
        _830 = _665;
        _831 = _664;
        _832 = _676;
        _833 = _675;
        _834 = _674;
        _835 = _689;
        _836 = _688;
        _837 = _687;
        _838 = cbModelParam._m0[36u].z * (isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0)));
        _839 = cbModelParam._m0[36u].z * (isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0)));
        _840 = cbModelParam._m0[36u].z * (isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0)));
    }
    else
    {
        _825 = _826;
        _827 = _826;
        _828 = _826;
        _829 = _826;
        _830 = _826;
        _831 = _826;
        _832 = _826;
        _833 = _826;
        _834 = _826;
        _835 = _826;
        _836 = _826;
        _837 = _826;
        _838 = 0.0;
        _839 = 0.0;
        _840 = 0.0;
    }
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _869 = fma(_496, cbModelParam._m0[30u].z, fma(_492, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _488));
        float _873 = fma(_496, cbModelParam._m0[31u].z, fma(_492, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _488));
        float _877 = fma(_496, cbModelParam._m0[32u].z, fma(_492, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _488));
        float _900 = _488 + _295;
        float _901 = _492 + _296;
        float _902 = _496 + _297;
        float _912 = fma(_902, cbModelParam._m0[30u].z, fma(_901, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _900)) - _869;
        float _913 = fma(_902, cbModelParam._m0[31u].z, fma(_901, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _900)) - _873;
        float _914 = fma(_902, cbModelParam._m0[32u].z, fma(_901, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _900)) - _877;
        float _918 = inversesqrt(dot(vec3(_912, _913, _914), vec3(_912, _913, _914)));
        float _931 = ((_918 * _912) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_869 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _932 = ((_918 * _913) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_873 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _933 = ((_918 * _914) / cbModelParam._m0[35u].z) + ((((((_877 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_931, _932, _933), 0.0);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_931, _932, _933), 0.0);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_931, _932, _933), 0.0);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_931, _932, _933), 0.0);
        float _968 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_935.x + (-0.5));
        float _970 = _968 * (_935.y + (-0.5));
        float _971 = _968 * (_935.z + (-0.5));
        float _978 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_942.x + (-0.5));
        float _980 = _978 * (_942.y + (-0.5));
        float _981 = _978 * (_942.z + (-0.5));
        float _988 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_949.x + (-0.5));
        float _990 = _988 * (_949.y + (-0.5));
        float _991 = _988 * (_949.z + (-0.5));
        float _998 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_956.x + (-0.5));
        float _1000 = _998 * (_956.y + (-0.5));
        float _1001 = _998 * (_956.z + (-0.5));
        float _1002 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1003 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1004 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1005 = _969 * 0.5;
        float _1006 = _979 * 0.5;
        float _1007 = _989 * 0.5;
        float _1008 = dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007));
        float _1013 = (_1008 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1008);
        float _1021 = (dot(vec3(_295, _296, _297), vec3(_1013 * _1005, _1013 * _1006, _1013 * _1007)) + 1.0) * 0.5;
        float _3546 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1030 = sqrt(((_1006 * _1006) + (_1005 * _1005)) + (_1007 * _1007)) / (_1002 + 9.9999997473787516355514526367188e-06);
        float _3557 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _1032 = _1031 * 2.0;
        float _1036 = (1.0 - _1031) / (_1031 + 1.0);
        float _3568 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _1046 = ((((1.0 - _1037) * (_1032 + 2.0)) * exp2(log2(isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * (_1032 + 1.0))) + _1037) * _1002;
        float _1047 = _970 * 0.5;
        float _1048 = _980 * 0.5;
        float _1049 = _990 * 0.5;
        float _1050 = dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049));
        float _1055 = (_1050 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1050);
        float _1063 = (dot(vec3(_295, _296, _297), vec3(_1055 * _1047, _1055 * _1048, _1055 * _1049)) + 1.0) * 0.5;
        float _3579 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1072 = sqrt(((_1048 * _1048) + (_1047 * _1047)) + (_1049 * _1049)) / (_1003 + 9.9999997473787516355514526367188e-06);
        float _3590 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _1074 = _1073 * 2.0;
        float _1078 = (1.0 - _1073) / (_1073 + 1.0);
        float _3601 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _1088 = ((((1.0 - _1079) * (_1074 + 2.0)) * exp2(log2(isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * (_1074 + 1.0))) + _1079) * _1003;
        float _1089 = _971 * 0.5;
        float _1090 = _981 * 0.5;
        float _1091 = _991 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_295, _296, _297), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3612 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1004 + 9.9999997473787516355514526367188e-06);
        float _3623 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3634 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * (_1116 + 1.0))) + _1121) * _1004;
        _1138 = _971;
        _1139 = _970;
        _1140 = _969;
        _1141 = _981;
        _1142 = _980;
        _1143 = _979;
        _1144 = _991;
        _1145 = _990;
        _1146 = _989;
        _1147 = _1004;
        _1148 = _1003;
        _1149 = _1002;
        _1150 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0)));
        _1151 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0)));
        _1152 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
    }
    else
    {
        _1138 = _826;
        _1139 = _826;
        _1140 = _826;
        _1141 = _826;
        _1142 = _826;
        _1143 = _826;
        _1144 = _826;
        _1145 = _826;
        _1146 = _826;
        _1147 = _826;
        _1148 = _826;
        _1149 = _826;
        _1150 = 0.0;
        _1151 = 0.0;
        _1152 = 0.0;
    }
    float _1162 = (cbModelParam._m0[1u].x * (_1150 - _838)) + _838;
    float _1163 = (cbModelParam._m0[1u].x * (_1151 - _839)) + _839;
    float _1164 = (cbModelParam._m0[1u].x * (_1152 - _840)) + _840;
    float _1185 = fma(_1164, cbSceneParam._m0[89u].z, fma(_1163, cbSceneParam._m0[89u].y, _1162 * cbSceneParam._m0[89u].x));
    float _1188 = fma(_1164, cbSceneParam._m0[90u].z, fma(_1163, cbSceneParam._m0[90u].y, _1162 * cbSceneParam._m0[90u].x));
    float _1191 = fma(_1164, cbSceneParam._m0[91u].z, fma(_1163, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1162));
    float _1206 = _464 * 0.5;
    float _1207 = _465 * 0.5;
    float _1208 = _466 * 0.5;
    float _1209 = dot(vec4(_1206, _1207, _1208, 1.0), vec4(_1140, _1143, _1146, _1149));
    float _1212 = dot(vec4(_1206, _1207, _1208, 1.0), vec4(_1139, _1142, _1145, _1148));
    float _1215 = dot(vec4(_1206, _1207, _1208, 1.0), vec4(_1138, _1141, _1144, _1147));
    float _1249;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1222 = dot(vec4(_1206, _1207, _1208, 1.0), vec4(_825, _829, _832, _835));
        float _1226 = dot(vec4(_1206, _1207, _1208, 1.0), vec4(_827, _830, _833, _836));
        float _1230 = dot(vec4(_1206, _1207, _1208, 1.0), vec4(_828, _831, _834, _837));
        float _1237 = dot(vec4(cbModelParam._m0[39u]), vec4(_1206, _1207, _1208, 1.0));
        _1249 = dot(vec3(isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)), isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)), isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1237) ? 0.0 : (isnan(0.0) ? _1237 : max(0.0, _1237))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1249 = 1.0;
    }
    float _1260;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1251 = dot(vec4(cbModelParam._m0[40u]), vec4(_1206, _1207, _1208, 1.0));
        _1260 = dot(vec3(isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)), isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)), isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1251) ? 0.0 : (isnan(0.0) ? _1251 : max(0.0, _1251))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1260 = 1.0;
    }
    float _1264 = (_1260 * cbModelParam._m0[1u].x) + (_1249 * (1.0 - cbModelParam._m0[1u].x));
    float _1273 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1355;
    float _1357;
    float _1359;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1322 = fma(_496, cbModelParam._m0[13u].z, fma(_492, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _488)) + cbModelParam._m0[13u].w;
        float _1326 = fma(_496, cbModelParam._m0[14u].z, fma(_492, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _488)) + cbModelParam._m0[14u].w;
        float _1330 = fma(_496, cbModelParam._m0[15u].z, fma(_492, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _488)) + cbModelParam._m0[15u].w;
        float _1333 = fma(_466, cbModelParam._m0[13u].z, fma(_465, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _464));
        float _1336 = fma(_466, cbModelParam._m0[14u].z, fma(_465, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _464));
        float _1339 = fma(_466, cbModelParam._m0[15u].z, fma(_465, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _464));
        float _1365;
        if (_1333 > 0.0)
        {
            _1365 = abs((1.0 - _1322) / _1333);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1333 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1322 + 1.0) / _1333);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1365 = frontier_phi_19_17_ladder;
        }
        float _1540;
        if (_1336 > 0.0)
        {
            _1540 = abs((1.0 - _1326) / _1336);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1336 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1326 + 1.0) / _1336);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1540 = frontier_phi_28_24_ladder;
        }
        float _1837;
        if (_1339 > 0.0)
        {
            _1837 = abs((1.0 - _1330) / _1339);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1339 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1330 + 1.0) / _1339);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1837 = frontier_phi_40_35_ladder;
        }
        float _1839 = isnan(_1540) ? _1365 : (isnan(_1365) ? _1540 : min(_1365, _1540));
        float _1840 = isnan(_1837) ? _1839 : (isnan(_1839) ? _1837 : min(_1839, _1837));
        float _1844 = (_1840 * _1333) + _1322;
        float _1845 = (_1840 * _1336) + _1326;
        float _1846 = (_1840 * _1339) + _1330;
        float _1847 = _1840 * 9.9999997473787516355514526367188e-05;
        float _1849 = (-1.0) - _1847;
        float _1851 = _1847 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1846 > _1851) || ((_1846 < _1849) || ((_1845 > _1851) || ((_1845 < _1849) || ((_1844 < _1849) || (_1844 > _1851))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1991 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1846, cbModelParam._m0[9u].z, fma(_1845, cbModelParam._m0[9u].y, _1844 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1846, cbModelParam._m0[10u].z, fma(_1845, cbModelParam._m0[10u].y, _1844 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1846, cbModelParam._m0[11u].z, fma(_1845, cbModelParam._m0[11u].y, _1844 * cbModelParam._m0[11u].x))), _1273);
            frontier_phi_18_40_ladder = _1991.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1991.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1991.x * cbModelParam._m0[1u].y;
        }
        _1355 = frontier_phi_18_40_ladder_2;
        _1357 = frontier_phi_18_40_ladder_1;
        _1359 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1343 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_464, _465, _466), _1273);
        _1355 = _1343.x * cbModelParam._m0[1u].y;
        _1357 = _1343.y * cbModelParam._m0[1u].y;
        _1359 = _1343.z * cbModelParam._m0[1u].y;
    }
    float _1362 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1455;
    float _1457;
    float _1459;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1419 = fma(_496, cbModelParam._m0[21u].z, fma(_492, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _488)) + cbModelParam._m0[21u].w;
        float _1423 = fma(_496, cbModelParam._m0[22u].z, fma(_492, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _488)) + cbModelParam._m0[22u].w;
        float _1427 = fma(_496, cbModelParam._m0[23u].z, fma(_492, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _488)) + cbModelParam._m0[23u].w;
        float _1430 = fma(_466, cbModelParam._m0[21u].z, fma(_465, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _464));
        float _1433 = fma(_466, cbModelParam._m0[22u].z, fma(_465, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _464));
        float _1436 = fma(_466, cbModelParam._m0[23u].z, fma(_465, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _464));
        float _1545;
        if (_1430 > 0.0)
        {
            _1545 = abs((1.0 - _1419) / _1430);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1430 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1419 + 1.0) / _1430);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1545 = frontier_phi_30_26_ladder;
        }
        float _1864;
        if (_1433 > 0.0)
        {
            _1864 = abs((1.0 - _1423) / _1433);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1433 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1423 + 1.0) / _1433);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1864 = frontier_phi_42_37_ladder;
        }
        float _2137;
        if (_1436 > 0.0)
        {
            _2137 = abs((1.0 - _1427) / _1436);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1436 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1427 + 1.0) / _1436);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2137 = frontier_phi_52_49_ladder;
        }
        float _2139 = isnan(_1864) ? _1545 : (isnan(_1545) ? _1864 : min(_1545, _1864));
        float _2140 = isnan(_2137) ? _2139 : (isnan(_2139) ? _2137 : min(_2139, _2137));
        float _2144 = (_2140 * _1430) + _1419;
        float _2145 = (_2140 * _1433) + _1423;
        float _2146 = (_2140 * _1436) + _1427;
        float _2147 = _2140 * 9.9999997473787516355514526367188e-05;
        float _2148 = (-1.0) - _2147;
        float _2150 = _2147 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2146 > _2150) || ((_2146 < _2148) || ((_2145 > _2150) || ((_2145 < _2148) || ((_2144 < _2148) || (_2144 > _2150))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2237 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2146, cbModelParam._m0[17u].z, fma(_2145, cbModelParam._m0[17u].y, _2144 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2146, cbModelParam._m0[18u].z, fma(_2145, cbModelParam._m0[18u].y, _2144 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2146, cbModelParam._m0[19u].z, fma(_2145, cbModelParam._m0[19u].y, _2144 * cbModelParam._m0[19u].x))), _1362);
            frontier_phi_27_52_ladder = _2237.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2237.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2237.x * cbModelParam._m0[1u].z;
        }
        _1455 = frontier_phi_27_52_ladder_2;
        _1457 = frontier_phi_27_52_ladder_1;
        _1459 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1439 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_464, _465, _466), _1362);
        _1455 = _1439.x * cbModelParam._m0[1u].z;
        _1457 = _1439.y * cbModelParam._m0[1u].z;
        _1459 = _1439.z * cbModelParam._m0[1u].z;
    }
    float _1471 = _455 * 0.01200000010430812835693359375;
    float _1473 = _1471 * ((cbModelParam._m0[1u].w * (_1455 - _1355)) + _1355);
    float _1474 = _1471 * ((cbModelParam._m0[1u].w * (_1457 - _1357)) + _1357);
    float _1475 = _1471 * ((cbModelParam._m0[1u].w * (_1459 - _1359)) + _1359);
    float _1478 = fma(_1475, cbSceneParam._m0[89u].z, fma(_1474, cbSceneParam._m0[89u].y, _1473 * cbSceneParam._m0[89u].x));
    float _1481 = fma(_1475, cbSceneParam._m0[90u].z, fma(_1474, cbSceneParam._m0[90u].y, _1473 * cbSceneParam._m0[90u].x));
    float _1484 = fma(_1475, cbSceneParam._m0[91u].z, fma(_1474, cbSceneParam._m0[91u].y, _1473 * cbSceneParam._m0[91u].x));
    float _1519 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1523 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1527 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1531 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1532 = _1519 / _1531;
    float _1533 = _1523 / _1531;
    float _1534 = _1527 / _1531;
    float _1681;
    float _1682;
    float _1683;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1561 = ((uint(_1534 > cbSceneParam._m0[59u].y) + uint(_1534 > cbSceneParam._m0[59u].x)) + uint(_1534 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1562 = _1561 + 43u;
        uint _1570 = _1561 + 44u;
        uint _1578 = _1561 + 45u;
        uint _1586 = _1561 + 46u;
        float _1597 = fma(_1531, cbSceneParam._m0[_1562].w, fma(_1527, cbSceneParam._m0[_1562].z, fma(_1523, cbSceneParam._m0[_1562].y, _1519 * cbSceneParam._m0[_1562].x)));
        float _1601 = fma(_1531, cbSceneParam._m0[_1570].w, fma(_1527, cbSceneParam._m0[_1570].z, fma(_1523, cbSceneParam._m0[_1570].y, _1519 * cbSceneParam._m0[_1570].x)));
        float _1609 = fma(_1531, cbSceneParam._m0[_1586].w, fma(_1527, cbSceneParam._m0[_1586].z, fma(_1523, cbSceneParam._m0[_1586].y, _1519 * cbSceneParam._m0[_1586].x)));
        float _1614 = cbSceneParam._m0[33u].z * _1609;
        float _1616 = cbSceneParam._m0[33u].w * _1609;
        float _1619 = fma(_1531, cbSceneParam._m0[_1578].w, fma(_1527, cbSceneParam._m0[_1578].z, fma(_1523, cbSceneParam._m0[_1578].y, _1519 * cbSceneParam._m0[_1578].x))) / _1609;
        float _1667 = (cbSceneParam._m0[33u].x - sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534))) * cbSceneParam._m0[33u].y;
        float _3760 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1674 = (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1614 + _1597) / _1609, (_1616 + _1601) / _1609), _1619), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1616 + _1597) / _1609, (_1601 - _1614) / _1609), _1619), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1597 - _1614) / _1609, (_1601 - _1616) / _1609), _1619), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1597 - _1616) / _1609, (_1614 + _1601) / _1609), _1619), 0.0)).x), vec4(0.25)));
        _1681 = 1.0 - (_1674 * cbSceneParam._m0[34u].x);
        _1682 = 1.0 - (_1674 * cbSceneParam._m0[34u].y);
        _1683 = 1.0 - (_1674 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1681 = 1.0;
        _1682 = 1.0;
        _1683 = 1.0;
    }
    float _1747;
    float _1749;
    float _1751;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1735 = fma(_1531, cbSceneParam._m0[63u].w, fma(_1527, cbSceneParam._m0[63u].z, fma(_1523, cbSceneParam._m0[63u].y, _1519 * cbSceneParam._m0[63u].x)));
        float _1736 = fma(_1531, cbSceneParam._m0[60u].w, fma(_1527, cbSceneParam._m0[60u].z, fma(_1523, cbSceneParam._m0[60u].y, _1519 * cbSceneParam._m0[60u].x))) / _1735;
        float _1737 = fma(_1531, cbSceneParam._m0[61u].w, fma(_1527, cbSceneParam._m0[61u].z, fma(_1523, cbSceneParam._m0[61u].y, _1519 * cbSceneParam._m0[61u].x))) / _1735;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1736 >= cbSceneParam._m0[64u].x) && (_1737 >= cbSceneParam._m0[64u].y)) && (_1736 <= cbSceneParam._m0[64u].z)) && (_1737 <= cbSceneParam._m0[64u].w))
        {
            float _1877 = fma(_1531, cbSceneParam._m0[62u].w, fma(_1527, cbSceneParam._m0[62u].z, fma(_1523, cbSceneParam._m0[62u].y, _1519 * cbSceneParam._m0[62u].x))) / _1735;
            float _1881 = isnan(cbSceneParam._m0[41u].w) ? _1877 : (isnan(_1877) ? cbSceneParam._m0[41u].w : max(_1877, cbSceneParam._m0[41u].w));
            float _1924 = (cbSceneParam._m0[33u].x - sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534))) * cbSceneParam._m0[33u].y;
            float _3776 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
            float _1931 = (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1736, cbSceneParam._m0[33u].w + _1737), _1881), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1736, _1737 - cbSceneParam._m0[33u].z), _1881), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1736 - cbSceneParam._m0[33u].z, _1737 - cbSceneParam._m0[33u].w), _1881), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1736 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1737), _1881), 0.0)).x), vec4(0.25)));
            float _1935 = 1.0 - (_1931 * cbSceneParam._m0[34u].x);
            float _1936 = 1.0 - (_1931 * cbSceneParam._m0[34u].y);
            float _1937 = 1.0 - (_1931 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1936) ? _1682 : (isnan(_1682) ? _1936 : min(_1682, _1936));
            frontier_phi_39_38_ladder_1 = isnan(_1935) ? _1681 : (isnan(_1681) ? _1935 : min(_1681, _1935));
            frontier_phi_39_38_ladder_2 = isnan(_1937) ? _1683 : (isnan(_1683) ? _1937 : min(_1683, _1937));
        }
        else
        {
            frontier_phi_39_38_ladder = _1682;
            frontier_phi_39_38_ladder_1 = _1681;
            frontier_phi_39_38_ladder_2 = _1683;
        }
        _1747 = frontier_phi_39_38_ladder_1;
        _1749 = frontier_phi_39_38_ladder;
        _1751 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1747 = _1681;
        _1749 = _1682;
        _1751 = _1683;
    }
    uvec4 _1756 = floatBitsToUint(cbInstanceData._m0[_429 + 5u]);
    uint _1758 = _1756.x * 14u;
    uint _1759 = _1758 + 13u;
    float _1766 = _455 + (-1.0);
    float _1772 = (cbLight._m0[_1759].x * _1766) + 1.0;
    float _1773 = (cbLight._m0[_1759].y * _1766) + 1.0;
    float _1774 = (cbLight._m0[_1759].z * _1766) + 1.0;
    float _1775 = (cbLight._m0[_1759].w * _1766) + 1.0;
    uint _1776 = _1758 + 5u;
    float _1782 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
    uint _1786 = _1758 + 4u;
    float _1796 = isnan(1.0) ? _1772 : (isnan(_1772) ? 1.0 : min(_1772, 1.0));
    uint _1800 = _1758 | 1u;
    float _1811 = dot(vec3(cbLight._m0[_1758].xyz), vec3(_295, _296, _297));
    float _1814 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_295, _296, _297));
    float _3812 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _3823 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1819 = (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * 0.3183098733425140380859375;
    float _1821 = (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * 0.3183098733425140380859375;
    float _1828 = ((cbLight._m0[_1776].x * _1782) * _1821) + (((cbLight._m0[_1786].x * _1747) * _1796) * _1819);
    float _1829 = ((_1782 * cbLight._m0[_1776].y) * _1821) + (((cbLight._m0[_1786].y * _1749) * _1796) * _1819);
    float _1830 = ((_1782 * cbLight._m0[_1776].z) * _1821) + (((cbLight._m0[_1786].z * _1751) * _1796) * _1819);
    uvec4 _1834 = floatBitsToUint(cbLight._m0[_1758 + 12u]);
    bool _1836 = _1834.x == 0u;
    float _1938;
    float _1940;
    float _1942;
    if (_1836)
    {
        _1938 = _1828;
        _1940 = _1829;
        _1942 = _1830;
    }
    else
    {
        uint _1946 = _1758 + 6u;
        float _1962 = (dot(vec3(cbLight._m0[_1758 + 2u].xyz), vec3(_295, _296, _297)) * 0.5) + 0.5;
        float _1963 = _1962 * _1962;
        float _3834 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        float _1964 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1965 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
        _1938 = (((cbLight._m0[_1946].x * 0.3183098733425140380859375) * _1964) * _1965) + _1828;
        _1940 = (((cbLight._m0[_1946].y * 0.3183098733425140380859375) * _1964) * _1965) + _1829;
        _1942 = (((cbLight._m0[_1946].z * 0.3183098733425140380859375) * _1964) * _1965) + _1830;
    }
    bool _1945 = _1834.y == 0u;
    float _2000;
    float _2002;
    float _2004;
    if (_1945)
    {
        _2000 = _1938;
        _2002 = _1940;
        _2004 = _1942;
    }
    else
    {
        uint _2108 = _1758 + 7u;
        float _2124 = (dot(vec3(cbLight._m0[_1758 + 3u].xyz), vec3(_295, _296, _297)) * 0.5) + 0.5;
        float _2125 = _2124 * _2124;
        float _3850 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2126 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _2127 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _2000 = (((cbLight._m0[_2108].x * 0.3183098733425140380859375) * _2126) * _2127) + _1938;
        _2002 = (((cbLight._m0[_2108].y * 0.3183098733425140380859375) * _2126) * _2127) + _1940;
        _2004 = (((cbLight._m0[_2108].z * 0.3183098733425140380859375) * _2126) * _2127) + _1942;
    }
    uint _2006 = _1758 + 8u;
    float _2012 = cbLight._m0[_1758].x + _373;
    float _2013 = cbLight._m0[_1758].y + _374;
    float _2014 = cbLight._m0[_1758].z + _375;
    float _2018 = inversesqrt(dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014)));
    float _2022 = dot(vec3(_295, _296, _297), vec3(cbLight._m0[_1758].xyz));
    float _3866 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2025 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _3877 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _2026 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _2027 = dot(vec3(cbLight._m0[_1758].xyz), vec3(_2012 * _2018, _2013 * _2018, _2014 * _2018));
    float _3888 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2038 = (exp2(log2(1.0 - (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2044 = (0.5 / ((_2025 + 9.9999999392252902907785028219223e-09) + _2026)) * _2025;
    float _3899 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2046 = (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * 0.31831014156341552734375;
    uint _2060 = _1758 + 9u;
    float _2066 = cbLight._m0[_1800].x + _373;
    float _2067 = cbLight._m0[_1800].y + _374;
    float _2068 = cbLight._m0[_1800].z + _375;
    float _2072 = inversesqrt(dot(vec3(_2066, _2067, _2068), vec3(_2066, _2067, _2068)));
    float _2076 = dot(vec3(_295, _296, _297), vec3(cbLight._m0[_1800].xyz));
    float _3910 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _2080 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_2066 * _2072, _2067 * _2072, _2068 * _2072));
    float _3921 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2089 = (exp2(log2(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2093 = (0.5 / ((_2079 + 9.9999999392252902907785028219223e-09) + _2026)) * _2079;
    float _3932 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2095 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * 0.31831014156341552734375;
    float _2105 = (((_2089 * cbLight._m0[_2060].x) * _2095) * _1782) + ((((cbLight._m0[_2006].x * _1747) * _2038) * _2046) * _1796);
    float _2106 = (((_2089 * cbLight._m0[_2060].y) * _2095) * _1782) + ((((cbLight._m0[_2006].y * _1749) * _2038) * _2046) * _1796);
    float _2107 = (((_2089 * cbLight._m0[_2060].z) * _2095) * _1782) + ((((cbLight._m0[_2006].z * _1751) * _2038) * _2046) * _1796);
    float _2163;
    float _2165;
    float _2167;
    if (_1836)
    {
        _2163 = _2105;
        _2165 = _2106;
        _2167 = _2107;
    }
    else
    {
        uint _2169 = _1758 + 10u;
        uint _2175 = _1758 + 2u;
        float _2181 = cbLight._m0[_2175].x + _373;
        float _2182 = cbLight._m0[_2175].y + _374;
        float _2183 = cbLight._m0[_2175].z + _375;
        float _2187 = inversesqrt(dot(vec3(_2181, _2182, _2183), vec3(_2181, _2182, _2183)));
        float _2191 = dot(vec3(_295, _296, _297), vec3(cbLight._m0[_2175].xyz));
        float _3943 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2194 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _2195 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_2181 * _2187, _2182 * _2187, _2183 * _2187));
        float _3954 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2204 = (exp2(log2(1.0 - (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2208 = (0.5 / ((_2194 + 9.9999999392252902907785028219223e-09) + _2026)) * _2194;
        float _3965 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2210 = (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * 0.31831014156341552734375;
        float _2211 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
        _2163 = (((_2204 * cbLight._m0[_2169].x) * _2210) * _2211) + _2105;
        _2165 = (((_2204 * cbLight._m0[_2169].y) * _2210) * _2211) + _2106;
        _2167 = (((_2204 * cbLight._m0[_2169].z) * _2210) * _2211) + _2107;
    }
    float _2242;
    float _2244;
    float _2246;
    if (_1945)
    {
        _2242 = _2163;
        _2244 = _2165;
        _2246 = _2167;
    }
    else
    {
        uint _2253 = _1758 + 11u;
        uint _2259 = _1758 + 3u;
        float _2265 = cbLight._m0[_2259].x + _373;
        float _2266 = cbLight._m0[_2259].y + _374;
        float _2267 = cbLight._m0[_2259].z + _375;
        float _2271 = inversesqrt(dot(vec3(_2265, _2266, _2267), vec3(_2265, _2266, _2267)));
        float _2275 = dot(vec3(_295, _296, _297), vec3(cbLight._m0[_2259].xyz));
        float _3981 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2278 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _2279 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_2265 * _2271, _2266 * _2271, _2267 * _2271));
        float _3992 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2288 = (exp2(log2(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2292 = (0.5 / ((_2278 + 9.9999999392252902907785028219223e-09) + _2026)) * _2278;
        float _4003 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2294 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * 0.31831014156341552734375;
        float _2295 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _2242 = (((_2288 * cbLight._m0[_2253].x) * _2294) * _2295) + _2163;
        _2244 = (((_2288 * cbLight._m0[_2253].y) * _2294) * _2295) + _2165;
        _2246 = (((_2288 * cbLight._m0[_2253].z) * _2294) * _2295) + _2167;
    }
    float _2360;
    float _2362;
    float _2364;
    float _2366;
    float _2368;
    float _2370;
    if (_1756.y == 0u)
    {
        uvec4 _2316 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2317 = _2316.x;
        uint _2328 = uint((float(_2316.y) * floor(float(uint(cbSceneParam._m0[85u].y * _390) / _2317))) + floor(float(uint(cbSceneParam._m0[85u].x * _389) / _2317)));
        float _2338 = (log2(_1534 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2339 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        uint _2342 = uint(isnan(14.0) ? _2339 : (isnan(_2339) ? 14.0 : min(_2339, 14.0)));
        uvec4 _2347 = texelFetch(g_lightClusterGridBuffer, int(((_2342 << 2u) + (_2328 << 6u)) >> 2u));
        uint _2348 = _2347.x;
        uint _2349 = _2316.z;
        float _2432;
        float _2434;
        float _2436;
        float _2438;
        float _2440;
        float _2442;
        if (((((1u << ((_2349 >> 4u) & 15u)) + 4294967295u) & _2348) == 0u) || ((_2349 & 240u) == 0u))
        {
            _2432 = 0.0;
            _2434 = 0.0;
            _2436 = 0.0;
            _2438 = 0.0;
            _2440 = 0.0;
            _2442 = 0.0;
        }
        else
        {
            float _2433;
            float _2435;
            float _2437;
            float _2439;
            float _2441;
            float _2443;
            float _2583 = 0.0;
            float _2584 = 0.0;
            float _2585 = 0.0;
            float _2586 = 0.0;
            float _2587 = 0.0;
            float _2588 = 0.0;
            uint _2589 = 0u;
            uint _2598;
            bool _2599;
            for (;;)
            {
                _2598 = texelFetch(g_lightClassification, int((((_2342 << 5u) + (_2328 << 9u)) + (_2589 << 2u)) >> 2u)).x;
                _2599 = _2598 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2599)
                {
                    frontier_phi_73_pred = _2588;
                    frontier_phi_73_pred_1 = _2587;
                    frontier_phi_73_pred_2 = _2586;
                    frontier_phi_73_pred_3 = _2585;
                    frontier_phi_73_pred_4 = _2584;
                    frontier_phi_73_pred_5 = _2583;
                }
                else
                {
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    uint _2734;
                    _2728 = _2583;
                    _2729 = _2584;
                    _2730 = _2585;
                    _2731 = _2586;
                    _2732 = _2587;
                    _2733 = _2588;
                    _2734 = _2598;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    for (;;)
                    {
                        uint _2738 = uint(findLSB(_2734)) + (_2589 << 5u);
                        uint _2735 = (_2734 + 4294967295u) & _2734;
                        uint _2740 = _2738 * 48u;
                        vec4 _2754 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2740)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 3u)).x));
                        uint _2760 = (_2738 * 48u) + 4u;
                        vec4 _2773 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2760)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 3u)).x));
                        uint _2779 = (_2738 * 48u) + 8u;
                        vec3 _2790 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2779)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 2u)).x));
                        float _2794 = _2754.x - _1532;
                        float _2795 = _2754.y - _1533;
                        float _2796 = _2754.z - _1534;
                        float _2797 = dot(vec3(_2794, _2795, _2796), vec3(_2794, _2795, _2796));
                        float _2800 = inversesqrt(_2797);
                        float _2809 = 1.0 - (_2797 * _2754.w);
                        float _4029 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
                        float _2810 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
                        float _2811 = sqrt(_2797) * _2773.w;
                        float _2814 = 1.39999997615814208984375 / (_2811 + 1.39999997615814208984375);
                        float _2815 = _2814 * _2814;
                        float _2818 = ((1.0 - _2815) * dot(vec3(_410, _413, _416), vec3(_2800 * _2794, _2800 * _2795, _2800 * _2796))) + _2815;
                        float _2821 = _2811 * _2811;
                        float _2825 = ((isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0))) * _2810) / ((_2821 * 0.699999988079071044921875) + 1.0);
                        float _2829 = (-0.0) - _1532;
                        float _2830 = (-0.0) - _1533;
                        float _2831 = (-0.0) - _1534;
                        float _2835 = inversesqrt(dot(vec3(_2829, _2830, _2831), vec3(_2829, _2830, _2831)));
                        float _2839 = dot(vec3(_410, _413, _416), vec3(_2835 * _2829, _2835 * _2830, _2835 * _2831));
                        float _4045 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
                        float _4056 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2843 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                        float _2847 = (0.5 / (((isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) + 9.9999999392252902907785028219223e-09) + _2843)) * _2843;
                        float _4067 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
                        float _2856 = (((isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * 3.1415927410125732421875) / ((_2821 * 2.1991131305694580078125) + 3.141590118408203125)) * _2810;
                        _2658 = (_2825 * _2773.x) + _2731;
                        _2659 = (_2825 * _2773.y) + _2732;
                        _2660 = (_2825 * _2773.z) + _2733;
                        _2655 = (_2856 * _2790.x) + _2728;
                        _2656 = (_2856 * _2790.y) + _2729;
                        _2657 = (_2856 * _2790.z) + _2730;
                        if (_2735 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2728 = _2655;
                            _2729 = _2656;
                            _2730 = _2657;
                            _2731 = _2658;
                            _2732 = _2659;
                            _2733 = _2660;
                            _2734 = _2735;
                        }
                    }
                    frontier_phi_73_pred = _2660;
                    frontier_phi_73_pred_1 = _2659;
                    frontier_phi_73_pred_2 = _2658;
                    frontier_phi_73_pred_3 = _2657;
                    frontier_phi_73_pred_4 = _2656;
                    frontier_phi_73_pred_5 = _2655;
                }
                _2443 = frontier_phi_73_pred;
                _2441 = frontier_phi_73_pred_1;
                _2439 = frontier_phi_73_pred_2;
                _2437 = frontier_phi_73_pred_3;
                _2435 = frontier_phi_73_pred_4;
                _2433 = frontier_phi_73_pred_5;
                uint _2590 = _2589 + 1u;
                if (_2590 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2583 = _2433;
                    _2584 = _2435;
                    _2585 = _2437;
                    _2586 = _2439;
                    _2587 = _2441;
                    _2588 = _2443;
                    _2589 = _2590;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2432 = _2433;
            _2434 = _2435;
            _2436 = _2437;
            _2438 = _2439;
            _2440 = _2441;
            _2442 = _2443;
        }
        uvec4 _2446 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2447 = _2446.z;
        uint _2449 = (_2447 >> 8u) & 15u;
        float _2554;
        float _2556;
        float _2558;
        float _2560;
        float _2562;
        float _2564;
        if (((4294967295u << _2449) & _2348) == 0u)
        {
            _2554 = _2432;
            _2556 = _2434;
            _2558 = _2436;
            _2560 = _2438;
            _2562 = _2440;
            _2564 = _2442;
        }
        else
        {
            float _2579 = inversesqrt(dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2449 < ((_2447 >> 12u) & 15u))
            {
                float _2555;
                float _2557;
                float _2559;
                float _2561;
                float _2563;
                float _2565;
                float _2711 = _2432;
                float _2712 = _2434;
                float _2713 = _2436;
                float _2714 = _2438;
                float _2715 = _2440;
                float _2716 = _2442;
                uint _2717 = _2449;
                uint _2726;
                bool _2727;
                for (;;)
                {
                    _2726 = texelFetch(g_lightClassification, int((((_2342 << 5u) + (_2328 << 9u)) + (_2717 << 2u)) >> 2u)).x;
                    _2727 = _2726 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2727)
                    {
                        frontier_phi_84_pred = _2715;
                        frontier_phi_84_pred_1 = _2714;
                        frontier_phi_84_pred_2 = _2713;
                        frontier_phi_84_pred_3 = _2712;
                        frontier_phi_84_pred_4 = _2711;
                        frontier_phi_84_pred_5 = _2716;
                    }
                    else
                    {
                        float _2870;
                        float _2871;
                        float _2872;
                        float _2873;
                        float _2874;
                        float _2875;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _2883 = _2711;
                        float _2884 = _2712;
                        float _2885 = _2713;
                        float _2886 = _2714;
                        float _2887 = _2715;
                        float _2888 = _2716;
                        uint _2889 = _2726;
                        uint _2890;
                        vec4 _2915;
                        float _2916;
                        vec4 _2931;
                        vec3 _2943;
                        vec4 _2959;
                        vec4 _2975;
                        float _3022;
                        bool _3023;
                        for (;;)
                        {
                            uint _2900 = ((_2717 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2889));
                            _2890 = (_2889 + 4294967295u) & _2889;
                            uint _2902 = _2900 * 40u;
                            _2915 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 3u)).x));
                            _2916 = _2915.w;
                            uint _2918 = (_2900 * 40u) + 4u;
                            _2931 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 3u)).x));
                            uint _2933 = (_2900 * 40u) + 8u;
                            _2943 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 2u)).x));
                            uint _2946 = (_2900 * 40u) + 16u;
                            _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            uint _2962 = (_2900 * 40u) + 20u;
                            _2975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 3u)).x));
                            uint _2978 = (_2900 * 40u) + 24u;
                            vec4 _2991 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 3u)).x));
                            uint _2997 = (_2900 * 40u) + 28u;
                            vec4 _3010 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 3u)).x));
                            _3022 = fma(_1534, _3010.z, fma(_1533, _3010.y, _3010.x * _1532)) + _3010.w;
                            _3023 = !((fma(_1534, _2991.z, fma(_1533, _2991.y, _2991.x * _1532)) + _2991.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3023)
                            {
                                float _3050 = _2915.x - _1532;
                                float _3051 = _2915.y - _1533;
                                float _3052 = _2915.z - _1534;
                                float _3053 = dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052));
                                float _3056 = inversesqrt(_3053);
                                float _3057 = _3056 * _3050;
                                float _3058 = _3056 * _3051;
                                float _3059 = _3056 * _3052;
                                float _3063 = 1.0 - (_3053 / (_2916 * _2916));
                                float _4078 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3064 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
                                float _3068 = sqrt(_3053) * _2931.w;
                                float _3070 = 1.39999997615814208984375 / (_3068 + 1.39999997615814208984375);
                                float _3071 = _3070 * _3070;
                                float _3072 = 1.0 - _3071;
                                float _3074 = (_3072 * dot(vec3(_3057, _3058, _3059), vec3(_410, _413, _416))) + _3071;
                                float _3077 = _3068 * _3068;
                                float _3081 = (fma(_1534, _2959.z, fma(_1533, _2959.y, _2959.x * _1532)) + _2959.w) / _3022;
                                float _3082 = (fma(_1534, _2975.z, fma(_1533, _2975.y, _2975.x * _1532)) + _2975.w) / _3022;
                                float _3086 = 1.0 - dot(vec2(_3081, _3082), vec2(_3081, _3082));
                                float _4094 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                                float _3087 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                                float _3088 = _3087 * (((isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0))) * _3064) / ((_3077 * 0.699999988079071044921875) + 1.0));
                                float _3098 = dot(vec3(_410, _413, _416), vec3((-0.0) - (_1532 * _2579), (-0.0) - (_1533 * _2579), (-0.0) - (_1534 * _2579)));
                                float _4105 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                                float _3106 = (_3072 * dot(vec3(_410, _413, _416), vec3(_3057, _3058, _3059))) + _3071;
                                float _4116 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3107 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                                float _3111 = (0.5 / (((isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) + 9.9999999392252902907785028219223e-09) + _3107)) * _3107;
                                float _4127 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3118 = (_3087 * _3064) * (((isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * 3.1415927410125732421875) / ((_3077 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_90_pred = _3088 * _2931.y;
                                frontier_phi_90_pred_1 = _3088 * _2931.x;
                                frontier_phi_90_pred_2 = _3118 * _2943.z;
                                frontier_phi_90_pred_3 = _3118 * _2943.y;
                                frontier_phi_90_pred_4 = _3118 * _2943.x;
                                frontier_phi_90_pred_5 = _3088 * _2931.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3126 = frontier_phi_90_pred;
                            _3125 = frontier_phi_90_pred_1;
                            _3124 = frontier_phi_90_pred_2;
                            _3123 = frontier_phi_90_pred_3;
                            _3122 = frontier_phi_90_pred_4;
                            _3127 = frontier_phi_90_pred_5;
                            _2873 = _3125 + _2886;
                            _2874 = _3126 + _2887;
                            _2875 = _3127 + _2888;
                            _2870 = _3122 + _2883;
                            _2871 = _3123 + _2884;
                            _2872 = _3124 + _2885;
                            if (_2890 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2883 = _2870;
                                _2884 = _2871;
                                _2885 = _2872;
                                _2886 = _2873;
                                _2887 = _2874;
                                _2888 = _2875;
                                _2889 = _2890;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _2874;
                        frontier_phi_84_pred_1 = _2873;
                        frontier_phi_84_pred_2 = _2872;
                        frontier_phi_84_pred_3 = _2871;
                        frontier_phi_84_pred_4 = _2870;
                        frontier_phi_84_pred_5 = _2875;
                    }
                    _2563 = frontier_phi_84_pred;
                    _2561 = frontier_phi_84_pred_1;
                    _2559 = frontier_phi_84_pred_2;
                    _2557 = frontier_phi_84_pred_3;
                    _2555 = frontier_phi_84_pred_4;
                    _2565 = frontier_phi_84_pred_5;
                    uint _2718 = _2717 + 1u;
                    if (_2718 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2711 = _2555;
                        _2712 = _2557;
                        _2713 = _2559;
                        _2714 = _2561;
                        _2715 = _2563;
                        _2716 = _2565;
                        _2717 = _2718;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2565;
                frontier_phi_65_66_ladder_1 = _2561;
                frontier_phi_65_66_ladder_2 = _2563;
                frontier_phi_65_66_ladder_3 = _2557;
                frontier_phi_65_66_ladder_4 = _2555;
                frontier_phi_65_66_ladder_5 = _2559;
            }
            else
            {
                frontier_phi_65_66_ladder = _2442;
                frontier_phi_65_66_ladder_1 = _2438;
                frontier_phi_65_66_ladder_2 = _2440;
                frontier_phi_65_66_ladder_3 = _2434;
                frontier_phi_65_66_ladder_4 = _2432;
                frontier_phi_65_66_ladder_5 = _2436;
            }
            _2554 = frontier_phi_65_66_ladder_4;
            _2556 = frontier_phi_65_66_ladder_3;
            _2558 = frontier_phi_65_66_ladder_5;
            _2560 = frontier_phi_65_66_ladder_1;
            _2562 = frontier_phi_65_66_ladder_2;
            _2564 = frontier_phi_65_66_ladder;
        }
        float _2569 = isnan(1.0) ? _455 : (isnan(_455) ? 1.0 : min(_455, 1.0));
        _2360 = (_2569 * _2560) + _2000;
        _2362 = (_2569 * _2562) + _2002;
        _2364 = (_2569 * _2564) + _2004;
        _2366 = ((_2554 * 0.039999999105930328369140625) * _2569) + _2242;
        _2368 = ((_2556 * 0.039999999105930328369140625) * _2569) + _2244;
        _2370 = ((_2558 * 0.039999999105930328369140625) * _2569) + _2246;
    }
    else
    {
        _2360 = _2000;
        _2362 = _2002;
        _2364 = _2004;
        _2366 = _2242;
        _2368 = _2244;
        _2370 = _2246;
    }
    float _4143 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _4154 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _4165 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _4176 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _2388 = ((isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_2360 + ((isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0))) * _455))) + ((_2366 + ((isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))) * _1264)) * cbPerFrame._m0[3u].x);
    float _2389 = ((isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_2362 + ((isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0))) * _455))) + ((_2368 + ((isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))) * _1264)) * cbPerFrame._m0[3u].x);
    float _2390 = ((isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2364 + ((isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0))) * _455))) + ((_2370 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _1264)) * cbPerFrame._m0[3u].x);
    float _2391 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2392 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2393 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2398 = cbInstanceData._m0[_429 + 6u].w * (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)));
    float _2403 = _389 / cbSceneParam._m0[86u].x;
    float _2404 = _390 / cbSceneParam._m0[86u].y;
    vec4 _2418 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2403, _2404, (log2((isnan(cbSceneParam._m0[77u].w) ? _315 : (isnan(_315) ? cbSceneParam._m0[77u].w : min(_315, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2420 = _2418.x;
    float _2421 = _2418.y;
    float _2422 = _2418.z;
    float _2423 = _2418.w;
    float _2494;
    float _2496;
    float _2498;
    float _2500;
    if (_315 > cbSceneParam._m0[78u].w)
    {
        float _2457 = isnan(_315) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _315 : min(cbSceneParam._m0[80u].w, _315));
        float _2458 = _2457 / _315;
        float _2469 = _2458 * _366;
        float _2470 = _367 * _2458;
        float _2471 = (-0.0) - _2470;
        float _2472 = _2458 * _368;
        float _2474 = (cbSceneParam._m0[77u].w * _2471) / _2457;
        float _2475 = _2474 + cbSceneParam._m0[79u].w;
        float _2476 = cbSceneParam._m0[79u].w - _2470;
        float _2482 = sqrt(((_2469 * _2469) + (_2470 * _2470)) + (_2472 * _2472));
        float _2485 = (1.0 - (cbSceneParam._m0[77u].w / _2457)) * _2482;
        float _2490 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2492 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2668;
        if (abs((_2471 - _2474) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2668 = ((((_2475 > 0.0) ? exp2(_2490 * _2475) : (2.0 - exp2(_2492 * _2475))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2485;
        }
        else
        {
            float _2612 = 1.0 / cbSceneParam._m0[80u].x;
            float _2613 = isnan(_2476) ? _2475 : (isnan(_2475) ? _2476 : max(_2475, _2476));
            float _2614 = isnan(_2476) ? _2475 : (isnan(_2475) ? _2476 : min(_2475, _2476));
            float _2623 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : min(_2613, 0.0));
            float _2624 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : min(_2614, 0.0));
            _2668 = ((abs(_2482 / _2471) * cbSceneParam._m0[80u].y) * ((((_2623 - _2624) * 2.0) - ((exp2(_2490 * (isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0)))) - exp2(_2490 * (isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0))))) * _2612)) - ((exp2(_2492 * _2623) - exp2(_2492 * _2624)) * _2612))) + (_2485 * cbSceneParam._m0[80u].z);
        }
        vec4 _2670 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2403, _2404, 1.0), 0.0);
        float _2679 = exp2((_2668 * (-1.44269502162933349609375)) * (1.0 - _2670.w));
        float _2680 = log2(_2679);
        float _2696 = log2(_2423);
        _2494 = (exp2(_2696 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2680 * cbSceneParam._m0[78u].x)) * _2670.x) / cbSceneParam._m0[78u].x)) + _2420;
        _2496 = (exp2(_2696 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2680 * cbSceneParam._m0[78u].y)) * _2670.y) / cbSceneParam._m0[78u].y)) + _2421;
        _2498 = (exp2(_2696 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2680 * cbSceneParam._m0[78u].z)) * _2670.z) / cbSceneParam._m0[78u].z)) + _2422;
        _2500 = _2679 * _2423;
    }
    else
    {
        _2494 = _2420;
        _2496 = _2421;
        _2498 = _2422;
        _2500 = _2423;
    }
    bool _2706;
    vec4 _2510;
    vec4 _2533;
    float _2535;
    float _2539;
    float _2540;
    float _2541;
    float _2542;
    bool _2553;
    for (;;)
    {
        _2510 = cbMatDynParam._m0[0u];
        float _2512 = roundEven(_2510.y);
        bool _2513 = _2512 == 3.0;
        float _2515 = log2(_2500);
        float _2522 = exp2(_2515 * cbSceneParam._m0[78u].x) * _2391;
        float _2523 = exp2(_2515 * cbSceneParam._m0[78u].y) * _2392;
        float _2524 = exp2(_2515 * cbSceneParam._m0[78u].z) * _2393;
        float _2531 = _378 + (-0.5);
        _2533 = cbMtdParam._m0[1u];
        _2535 = _2533.y * _2531;
        float _2538 = (_2512 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2539 = _2538 * (_2513 ? _2522 : (_2522 + (cbSceneParam._m0[72u].w * _2494)));
        _2540 = _2538 * (_2513 ? _2523 : (_2523 + (cbSceneParam._m0[72u].w * _2496)));
        _2541 = _2538 * (_2513 ? _2524 : (_2524 + (cbSceneParam._m0[72u].w * _2498)));
        _2542 = _2531 * 0.999000012874603271484375;
        _2553 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2553)
        {
            if ((cbInstanceData._m0[_429 + 7u].x + _2542) < 0.5)
            {
                _2706 = true;
                break;
            }
        }
        uint _2647 = _431 + uint(_2510.w);
        if ((cbInstanceData._m0[_2647].w < 1.0) && ((cbInstanceData._m0[_2647].w + _2542) < 0.5))
        {
            _2706 = true;
            break;
        }
        if ((_2535 + _290) < _2533.x)
        {
            _2706 = true;
            break;
        }
        _2706 = false;
        break;
    }
    float _2861;
    if (_2706)
    {
        discard_state = true;
        _2861 = 0.0;
    }
    else
    {
        _2861 = _2398;
    }
    SV_Target.x = _2539;
    SV_Target.y = _2540;
    SV_Target.z = _2541;
    SV_Target.w = _2861;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2398;
    discard_exit();
}


