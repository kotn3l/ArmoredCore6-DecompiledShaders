#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A_Alpha_FlipBook_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _822;
float _2992;
float _2993;
float _2994;
float _2995;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _170 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _171 = _170 * NORMAL.x;
    float _172 = _170 * NORMAL.y;
    float _173 = _170 * NORMAL.z;
    float _178;
    float _179;
    float _180;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _178 = (-0.0) - _171;
        _179 = (-0.0) - _172;
        _180 = (-0.0) - _173;
    }
    else
    {
        _178 = _171;
        _179 = _172;
        _180 = _173;
    }
    uint _197 = uint(int(floor(cbMtdParam._m0[10u].x)));
    uint _198 = uint(int(cbMtdParam._m0[10u].w * cbMtdParam._m0[10u].z));
    float _200 = float(int(_197 - _198 * (_197 / _198)));
    vec4 _225 = texture(sampler2D(S_A_Alpha_FlipBook_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((fract(TEXCOORD_1.x) + (_200 - cbMtdParam._m0[10u].z * trunc(_200 / cbMtdParam._m0[10u].z))) * (1.0 / cbMtdParam._m0[10u].z)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((fract(TEXCOORD_1.y) + floor(_200 / cbMtdParam._m0[10u].z)) * (1.0 / cbMtdParam._m0[10u].w)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _225.x * cbMtdParam._m0[9u].x;
    float _233 = _225.y * cbMtdParam._m0[9u].y;
    float _234 = _225.z * cbMtdParam._m0[9u].z;
    vec4 _244 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _246 = _244.x;
    float _269 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _246)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _246))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3004 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _272 = (cbMtdParam._m0[9u].w * TEXCOORD_1.z) * _225.w;
    float _273 = (isnan(1.0) ? _3004 : (isnan(_3004) ? 1.0 : min(_3004, 1.0))) * _272;
    float _274 = gl_FragCoord.x * 0.125;
    float _276 = gl_FragCoord.y * 0.125;
    vec4 _278 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_274, _276));
    float _286 = float(_272 >= ((_278.w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    float _290 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _291 = _290 * _178;
    float _292 = _290 * _179;
    float _293 = _290 * _180;
    float _3015 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _294 = isnan(1.0) ? _3015 : (isnan(_3015) ? 1.0 : min(_3015, 1.0));
    float _3026 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3037 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3048 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _311 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _352 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _362 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _352);
    float _363 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _352);
    float _364 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _352);
    float _368 = inversesqrt(dot(vec3(_362, _363, _364), vec3(_362, _363, _364)));
    float _369 = _362 * _368;
    float _370 = _363 * _368;
    float _371 = _364 * _368;
    vec4 _372 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_274, _276));
    float _374 = _372.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _503 = sqrt(((_362 * _362) + (_363 * _363)) + (_364 * _364));
        float _509 = (cbMatDynParam._m0[5u].x * _503) + cbMatDynParam._m0[5u].y;
        float _3059 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
        float _510 = isnan(1.0) ? _3059 : (isnan(_3059) ? 1.0 : min(_3059, 1.0));
        float _514 = (cbMatDynParam._m0[5u].z * _503) + cbMatDynParam._m0[5u].w;
        float _3070 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3070 : (isnan(_3070) ? 1.0 : min(_3070, 1.0))) - _510)) + _510) < ((_374 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _385 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _386 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _406 = fma(_293, cbSceneParam._m0[5u].z, fma(_292, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _291));
    float _409 = fma(_293, cbSceneParam._m0[6u].z, fma(_292, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _291));
    float _412 = fma(_293, cbSceneParam._m0[7u].z, fma(_292, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _291));
    uint _425 = uint(roundEven(NORMAL.w)) * 13u;
    uint _427 = _425 + 9u;
    uint _428 = _427 + uint(cbMatDynParam._m0[0u].w);
    float _434 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3026 : (isnan(_3026) ? 1.0 : min(_3026, 1.0)))) * cbInstanceData._m0[_428].x;
    float _435 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3037 : (isnan(_3037) ? 1.0 : min(_3037, 1.0)))) * cbInstanceData._m0[_428].y;
    float _436 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3048 : (isnan(_3048) ? 1.0 : min(_3048, 1.0)))) * cbInstanceData._m0[_428].z;
    float _3081 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _437 = isnan(1.0) ? _3081 : (isnan(_3081) ? 1.0 : min(_3081, 1.0));
    float _3092 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _438 = isnan(1.0) ? _3092 : (isnan(_3092) ? 1.0 : min(_3092, 1.0));
    float _3103 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _439 = isnan(1.0) ? _3103 : (isnan(_3103) ? 1.0 : min(_3103, 1.0));
    vec4 _448 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _385, cbSceneParam._m0[86u].y * _386));
    float _451 = _448.x * TEXCOORD_1.w;
    float _452 = dot(vec3(_291, _292, _293), vec3(_369, _370, _371));
    float _455 = _452 * 2.0;
    float _460 = (_455 * _291) - _369;
    float _461 = (_455 * _292) - _370;
    float _462 = (_455 * _293) - _371;
    float _484 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _488 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _492 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _821;
    float _823;
    float _824;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _546 = fma(_492, cbModelParam._m0[26u].z, fma(_488, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _484));
        float _550 = fma(_492, cbModelParam._m0[27u].z, fma(_488, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _484));
        float _554 = fma(_492, cbModelParam._m0[28u].z, fma(_488, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _484));
        float _579 = _484 + _291;
        float _580 = _488 + _292;
        float _581 = _492 + _293;
        float _591 = fma(_581, cbModelParam._m0[26u].z, fma(_580, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _579)) - _546;
        float _592 = fma(_581, cbModelParam._m0[27u].z, fma(_580, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _579)) - _550;
        float _593 = fma(_581, cbModelParam._m0[28u].z, fma(_580, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _579)) - _554;
        float _597 = inversesqrt(dot(vec3(_591, _592, _593), vec3(_591, _592, _593)));
        float _610 = ((_597 * _591) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_546 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _611 = ((_597 * _592) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_550 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _612 = ((_597 * _593) / cbModelParam._m0[34u].z) + ((((((_554 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _615 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_610, _611, _612), 0.0);
        vec4 _622 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_610, _611, _612), 0.0);
        vec4 _629 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_610, _611, _612), 0.0);
        vec4 _636 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_610, _611, _612), 0.0);
        float _649 = exp2((_615.w + (-0.5)) * 20.0) * 2.0;
        float _650 = _649 * (_615.x + (-0.5));
        float _651 = _649 * (_615.y + (-0.5));
        float _652 = _649 * (_615.z + (-0.5));
        float _659 = exp2((_622.w + (-0.5)) * 20.0) * 2.0;
        float _660 = _659 * (_622.x + (-0.5));
        float _661 = _659 * (_622.y + (-0.5));
        float _662 = _659 * (_622.z + (-0.5));
        float _669 = exp2((_629.w + (-0.5)) * 20.0) * 2.0;
        float _670 = _669 * (_629.x + (-0.5));
        float _671 = _669 * (_629.y + (-0.5));
        float _672 = _669 * (_629.z + (-0.5));
        float _679 = exp2((_636.w + (-0.5)) * 20.0) * 2.0;
        float _680 = _679 * (_636.x + (-0.5));
        float _681 = _679 * (_636.y + (-0.5));
        float _682 = _679 * (_636.z + (-0.5));
        float _683 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _684 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _685 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _686 = _650 * 0.5;
        float _687 = _660 * 0.5;
        float _688 = _670 * 0.5;
        float _689 = dot(vec3(_686, _687, _688), vec3(_686, _687, _688));
        float _694 = (_689 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_689);
        float _703 = (dot(vec3(_291, _292, _293), vec3(_694 * _686, _694 * _687, _694 * _688)) + 1.0) * 0.5;
        float _3129 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _713 = sqrt(((_687 * _687) + (_686 * _686)) + (_688 * _688)) / (_683 + 9.9999997473787516355514526367188e-06);
        float _3140 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _714 = isnan(1.0) ? _3140 : (isnan(_3140) ? 1.0 : min(_3140, 1.0));
        float _715 = _714 * 2.0;
        float _719 = (1.0 - _714) / (_714 + 1.0);
        float _3151 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _720 = isnan(1.0) ? _3151 : (isnan(_3151) ? 1.0 : min(_3151, 1.0));
        float _729 = ((((1.0 - _720) * (_715 + 2.0)) * exp2(log2(isnan(1.0) ? _3129 : (isnan(_3129) ? 1.0 : min(_3129, 1.0))) * (_715 + 1.0))) + _720) * _683;
        float _730 = _651 * 0.5;
        float _731 = _661 * 0.5;
        float _732 = _671 * 0.5;
        float _733 = dot(vec3(_730, _731, _732), vec3(_730, _731, _732));
        float _738 = (_733 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_733);
        float _746 = (dot(vec3(_291, _292, _293), vec3(_738 * _730, _738 * _731, _738 * _732)) + 1.0) * 0.5;
        float _3162 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _755 = sqrt(((_731 * _731) + (_730 * _730)) + (_732 * _732)) / (_684 + 9.9999997473787516355514526367188e-06);
        float _3173 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _756 = isnan(1.0) ? _3173 : (isnan(_3173) ? 1.0 : min(_3173, 1.0));
        float _757 = _756 * 2.0;
        float _761 = (1.0 - _756) / (_756 + 1.0);
        float _3184 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _762 = isnan(1.0) ? _3184 : (isnan(_3184) ? 1.0 : min(_3184, 1.0));
        float _771 = ((((1.0 - _762) * (_757 + 2.0)) * exp2(log2(isnan(1.0) ? _3162 : (isnan(_3162) ? 1.0 : min(_3162, 1.0))) * (_757 + 1.0))) + _762) * _684;
        float _772 = _652 * 0.5;
        float _773 = _662 * 0.5;
        float _774 = _672 * 0.5;
        float _775 = dot(vec3(_772, _773, _774), vec3(_772, _773, _774));
        float _780 = (_775 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_775);
        float _788 = (dot(vec3(_291, _292, _293), vec3(_780 * _772, _780 * _773, _780 * _774)) + 1.0) * 0.5;
        float _3195 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _797 = sqrt(((_773 * _773) + (_772 * _772)) + (_774 * _774)) / (_685 + 9.9999997473787516355514526367188e-06);
        float _3206 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3206 : (isnan(_3206) ? 1.0 : min(_3206, 1.0));
        float _799 = _798 * 2.0;
        float _803 = (1.0 - _798) / (_798 + 1.0);
        float _3217 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _804 = isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0));
        float _813 = ((((1.0 - _804) * (_799 + 2.0)) * exp2(log2(isnan(1.0) ? _3195 : (isnan(_3195) ? 1.0 : min(_3195, 1.0))) * (_799 + 1.0))) + _804) * _685;
        _821 = _652;
        _823 = _651;
        _824 = _650;
        _825 = _662;
        _826 = _661;
        _827 = _660;
        _828 = _672;
        _829 = _671;
        _830 = _670;
        _831 = _685;
        _832 = _684;
        _833 = _683;
        _834 = cbModelParam._m0[36u].z * (isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0)));
        _835 = cbModelParam._m0[36u].z * (isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0)));
        _836 = cbModelParam._m0[36u].z * (isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0)));
    }
    else
    {
        _821 = _822;
        _823 = _822;
        _824 = _822;
        _825 = _822;
        _826 = _822;
        _827 = _822;
        _828 = _822;
        _829 = _822;
        _830 = _822;
        _831 = _822;
        _832 = _822;
        _833 = _822;
        _834 = 0.0;
        _835 = 0.0;
        _836 = 0.0;
    }
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _865 = fma(_492, cbModelParam._m0[30u].z, fma(_488, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _484));
        float _869 = fma(_492, cbModelParam._m0[31u].z, fma(_488, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _484));
        float _873 = fma(_492, cbModelParam._m0[32u].z, fma(_488, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _484));
        float _896 = _484 + _291;
        float _897 = _488 + _292;
        float _898 = _492 + _293;
        float _908 = fma(_898, cbModelParam._m0[30u].z, fma(_897, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _896)) - _865;
        float _909 = fma(_898, cbModelParam._m0[31u].z, fma(_897, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _896)) - _869;
        float _910 = fma(_898, cbModelParam._m0[32u].z, fma(_897, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _896)) - _873;
        float _914 = inversesqrt(dot(vec3(_908, _909, _910), vec3(_908, _909, _910)));
        float _927 = ((_914 * _908) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_865 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _928 = ((_914 * _909) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_869 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _929 = ((_914 * _910) / cbModelParam._m0[35u].z) + ((((((_873 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        float _964 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_931.x + (-0.5));
        float _966 = _964 * (_931.y + (-0.5));
        float _967 = _964 * (_931.z + (-0.5));
        float _974 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_938.x + (-0.5));
        float _976 = _974 * (_938.y + (-0.5));
        float _977 = _974 * (_938.z + (-0.5));
        float _984 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_945.x + (-0.5));
        float _986 = _984 * (_945.y + (-0.5));
        float _987 = _984 * (_945.z + (-0.5));
        float _994 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_952.x + (-0.5));
        float _996 = _994 * (_952.y + (-0.5));
        float _997 = _994 * (_952.z + (-0.5));
        float _998 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1001 = _965 * 0.5;
        float _1002 = _975 * 0.5;
        float _1003 = _985 * 0.5;
        float _1004 = dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003));
        float _1009 = (_1004 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1004);
        float _1017 = (dot(vec3(_291, _292, _293), vec3(_1009 * _1001, _1009 * _1002, _1009 * _1003)) + 1.0) * 0.5;
        float _3258 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1026 = sqrt(((_1002 * _1002) + (_1001 * _1001)) + (_1003 * _1003)) / (_998 + 9.9999997473787516355514526367188e-06);
        float _3269 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0));
        float _1028 = _1027 * 2.0;
        float _1032 = (1.0 - _1027) / (_1027 + 1.0);
        float _3280 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
        float _1042 = ((((1.0 - _1033) * (_1028 + 2.0)) * exp2(log2(isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0))) * (_1028 + 1.0))) + _1033) * _998;
        float _1043 = _966 * 0.5;
        float _1044 = _976 * 0.5;
        float _1045 = _986 * 0.5;
        float _1046 = dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045));
        float _1051 = (_1046 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1046);
        float _1059 = (dot(vec3(_291, _292, _293), vec3(_1051 * _1043, _1051 * _1044, _1051 * _1045)) + 1.0) * 0.5;
        float _3291 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1068 = sqrt(((_1044 * _1044) + (_1043 * _1043)) + (_1045 * _1045)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _3302 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
        float _1070 = _1069 * 2.0;
        float _1074 = (1.0 - _1069) / (_1069 + 1.0);
        float _3313 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
        float _1084 = ((((1.0 - _1075) * (_1070 + 2.0)) * exp2(log2(isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0))) * (_1070 + 1.0))) + _1075) * _999;
        float _1085 = _967 * 0.5;
        float _1086 = _977 * 0.5;
        float _1087 = _987 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_291, _292, _293), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3324 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1000 + 9.9999997473787516355514526367188e-06);
        float _3335 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3346 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0))) * (_1112 + 1.0))) + _1117) * _1000;
        _1134 = _967;
        _1135 = _966;
        _1136 = _965;
        _1137 = _977;
        _1138 = _976;
        _1139 = _975;
        _1140 = _987;
        _1141 = _986;
        _1142 = _985;
        _1143 = _1000;
        _1144 = _999;
        _1145 = _998;
        _1146 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0)));
        _1147 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)));
        _1148 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
    }
    else
    {
        _1134 = _822;
        _1135 = _822;
        _1136 = _822;
        _1137 = _822;
        _1138 = _822;
        _1139 = _822;
        _1140 = _822;
        _1141 = _822;
        _1142 = _822;
        _1143 = _822;
        _1144 = _822;
        _1145 = _822;
        _1146 = 0.0;
        _1147 = 0.0;
        _1148 = 0.0;
    }
    float _1158 = (cbModelParam._m0[1u].x * (_1146 - _834)) + _834;
    float _1159 = (cbModelParam._m0[1u].x * (_1147 - _835)) + _835;
    float _1160 = (cbModelParam._m0[1u].x * (_1148 - _836)) + _836;
    float _1181 = fma(_1160, cbSceneParam._m0[89u].z, fma(_1159, cbSceneParam._m0[89u].y, _1158 * cbSceneParam._m0[89u].x));
    float _1184 = fma(_1160, cbSceneParam._m0[90u].z, fma(_1159, cbSceneParam._m0[90u].y, _1158 * cbSceneParam._m0[90u].x));
    float _1187 = fma(_1160, cbSceneParam._m0[91u].z, fma(_1159, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1158));
    float _1202 = _460 * 0.5;
    float _1203 = _461 * 0.5;
    float _1204 = _462 * 0.5;
    float _1205 = dot(vec4(_1202, _1203, _1204, 1.0), vec4(_1136, _1139, _1142, _1145));
    float _1208 = dot(vec4(_1202, _1203, _1204, 1.0), vec4(_1135, _1138, _1141, _1144));
    float _1211 = dot(vec4(_1202, _1203, _1204, 1.0), vec4(_1134, _1137, _1140, _1143));
    float _1245;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1218 = dot(vec4(_1202, _1203, _1204, 1.0), vec4(_821, _825, _828, _831));
        float _1222 = dot(vec4(_1202, _1203, _1204, 1.0), vec4(_823, _826, _829, _832));
        float _1226 = dot(vec4(_1202, _1203, _1204, 1.0), vec4(_824, _827, _830, _833));
        float _1233 = dot(vec4(cbModelParam._m0[39u]), vec4(_1202, _1203, _1204, 1.0));
        _1245 = dot(vec3(isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)), isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)), isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1233) ? 0.0 : (isnan(0.0) ? _1233 : max(0.0, _1233))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1245 = 1.0;
    }
    float _1256;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1247 = dot(vec4(cbModelParam._m0[40u]), vec4(_1202, _1203, _1204, 1.0));
        _1256 = dot(vec3(isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)), isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)), isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1247) ? 0.0 : (isnan(0.0) ? _1247 : max(0.0, _1247))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1256 = 1.0;
    }
    float _1260 = (_1256 * cbModelParam._m0[1u].x) + (_1245 * (1.0 - cbModelParam._m0[1u].x));
    float _1269 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1351;
    float _1353;
    float _1355;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1318 = fma(_492, cbModelParam._m0[13u].z, fma(_488, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _484)) + cbModelParam._m0[13u].w;
        float _1322 = fma(_492, cbModelParam._m0[14u].z, fma(_488, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _484)) + cbModelParam._m0[14u].w;
        float _1326 = fma(_492, cbModelParam._m0[15u].z, fma(_488, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _484)) + cbModelParam._m0[15u].w;
        float _1329 = fma(_462, cbModelParam._m0[13u].z, fma(_461, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _460));
        float _1332 = fma(_462, cbModelParam._m0[14u].z, fma(_461, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _460));
        float _1335 = fma(_462, cbModelParam._m0[15u].z, fma(_461, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _460));
        float _1361;
        if (_1329 > 0.0)
        {
            _1361 = abs((1.0 - _1318) / _1329);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1329 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1318 + 1.0) / _1329);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1361 = frontier_phi_19_17_ladder;
        }
        float _1569;
        if (_1332 > 0.0)
        {
            _1569 = abs((1.0 - _1322) / _1332);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1332 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1322 + 1.0) / _1332);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1569 = frontier_phi_28_24_ladder;
        }
        float _1758;
        if (_1335 > 0.0)
        {
            _1758 = abs((1.0 - _1326) / _1335);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1335 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1326 + 1.0) / _1335);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1758 = frontier_phi_40_35_ladder;
        }
        float _1760 = isnan(_1569) ? _1361 : (isnan(_1361) ? _1569 : min(_1361, _1569));
        float _1761 = isnan(_1758) ? _1760 : (isnan(_1760) ? _1758 : min(_1760, _1758));
        float _1765 = (_1761 * _1329) + _1318;
        float _1766 = (_1761 * _1332) + _1322;
        float _1767 = (_1761 * _1335) + _1326;
        float _1768 = _1761 * 9.9999997473787516355514526367188e-05;
        float _1770 = (-1.0) - _1768;
        float _1772 = _1768 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1767 > _1772) || ((_1767 < _1770) || ((_1766 > _1772) || ((_1766 < _1770) || ((_1765 < _1770) || (_1765 > _1772))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1864 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1767, cbModelParam._m0[9u].z, fma(_1766, cbModelParam._m0[9u].y, _1765 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1767, cbModelParam._m0[10u].z, fma(_1766, cbModelParam._m0[10u].y, _1765 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1767, cbModelParam._m0[11u].z, fma(_1766, cbModelParam._m0[11u].y, _1765 * cbModelParam._m0[11u].x))), _1269);
            frontier_phi_18_40_ladder = _1864.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1864.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1864.x * cbModelParam._m0[1u].y;
        }
        _1351 = frontier_phi_18_40_ladder_2;
        _1353 = frontier_phi_18_40_ladder_1;
        _1355 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1339 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_460, _461, _462), _1269);
        _1351 = _1339.x * cbModelParam._m0[1u].y;
        _1353 = _1339.y * cbModelParam._m0[1u].y;
        _1355 = _1339.z * cbModelParam._m0[1u].y;
    }
    float _1358 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1451;
    float _1453;
    float _1455;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1415 = fma(_492, cbModelParam._m0[21u].z, fma(_488, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _484)) + cbModelParam._m0[21u].w;
        float _1419 = fma(_492, cbModelParam._m0[22u].z, fma(_488, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _484)) + cbModelParam._m0[22u].w;
        float _1423 = fma(_492, cbModelParam._m0[23u].z, fma(_488, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _484)) + cbModelParam._m0[23u].w;
        float _1426 = fma(_462, cbModelParam._m0[21u].z, fma(_461, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _460));
        float _1429 = fma(_462, cbModelParam._m0[22u].z, fma(_461, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _460));
        float _1432 = fma(_462, cbModelParam._m0[23u].z, fma(_461, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _460));
        float _1574;
        if (_1426 > 0.0)
        {
            _1574 = abs((1.0 - _1415) / _1426);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1426 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1415 + 1.0) / _1426);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1574 = frontier_phi_30_26_ladder;
        }
        float _1785;
        if (_1429 > 0.0)
        {
            _1785 = abs((1.0 - _1419) / _1429);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1429 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1419 + 1.0) / _1429);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1785 = frontier_phi_42_37_ladder;
        }
        float _1936;
        if (_1432 > 0.0)
        {
            _1936 = abs((1.0 - _1423) / _1432);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1432 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1423 + 1.0) / _1432);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1936 = frontier_phi_51_48_ladder;
        }
        float _1938 = isnan(_1785) ? _1574 : (isnan(_1574) ? _1785 : min(_1574, _1785));
        float _1939 = isnan(_1936) ? _1938 : (isnan(_1938) ? _1936 : min(_1938, _1936));
        float _1943 = (_1939 * _1426) + _1415;
        float _1944 = (_1939 * _1429) + _1419;
        float _1945 = (_1939 * _1432) + _1423;
        float _1946 = _1939 * 9.9999997473787516355514526367188e-05;
        float _1947 = (-1.0) - _1946;
        float _1949 = _1946 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1945 > _1949) || ((_1945 < _1947) || ((_1944 > _1949) || ((_1944 < _1947) || ((_1943 < _1947) || (_1943 > _1949))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2148 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1945, cbModelParam._m0[17u].z, fma(_1944, cbModelParam._m0[17u].y, _1943 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1945, cbModelParam._m0[18u].z, fma(_1944, cbModelParam._m0[18u].y, _1943 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1945, cbModelParam._m0[19u].z, fma(_1944, cbModelParam._m0[19u].y, _1943 * cbModelParam._m0[19u].x))), _1358);
            frontier_phi_27_51_ladder = _2148.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2148.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2148.x * cbModelParam._m0[1u].z;
        }
        _1451 = frontier_phi_27_51_ladder_2;
        _1453 = frontier_phi_27_51_ladder_1;
        _1455 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1435 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_460, _461, _462), _1358);
        _1451 = _1435.x * cbModelParam._m0[1u].z;
        _1453 = _1435.y * cbModelParam._m0[1u].z;
        _1455 = _1435.z * cbModelParam._m0[1u].z;
    }
    float _1467 = _451 * 0.01200000010430812835693359375;
    float _1469 = _1467 * ((cbModelParam._m0[1u].w * (_1451 - _1351)) + _1351);
    float _1470 = _1467 * ((cbModelParam._m0[1u].w * (_1453 - _1353)) + _1353);
    float _1471 = _1467 * ((cbModelParam._m0[1u].w * (_1455 - _1355)) + _1355);
    float _1474 = fma(_1471, cbSceneParam._m0[89u].z, fma(_1470, cbSceneParam._m0[89u].y, _1469 * cbSceneParam._m0[89u].x));
    float _1477 = fma(_1471, cbSceneParam._m0[90u].z, fma(_1470, cbSceneParam._m0[90u].y, _1469 * cbSceneParam._m0[90u].x));
    float _1480 = fma(_1471, cbSceneParam._m0[91u].z, fma(_1470, cbSceneParam._m0[91u].y, _1469 * cbSceneParam._m0[91u].x));
    uvec4 _1490 = floatBitsToUint(cbInstanceData._m0[_425 + 5u]);
    uint _1492 = _1490.x * 14u;
    uint _1493 = _1492 + 13u;
    float _1500 = _451 + (-1.0);
    float _1506 = (cbLight._m0[_1493].x * _1500) + 1.0;
    float _1507 = (cbLight._m0[_1493].y * _1500) + 1.0;
    float _1508 = (cbLight._m0[_1493].z * _1500) + 1.0;
    float _1509 = (cbLight._m0[_1493].w * _1500) + 1.0;
    uint _1510 = _1492 + 5u;
    float _1516 = isnan(1.0) ? _1507 : (isnan(_1507) ? 1.0 : min(_1507, 1.0));
    uint _1520 = _1492 + 4u;
    float _1527 = isnan(1.0) ? _1506 : (isnan(_1506) ? 1.0 : min(_1506, 1.0));
    uint _1531 = _1492 | 1u;
    float _1542 = dot(vec3(cbLight._m0[_1492].xyz), vec3(_291, _292, _293));
    float _1545 = dot(vec3(cbLight._m0[_1531].xyz), vec3(_291, _292, _293));
    float _3482 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
    float _3493 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
    float _1550 = (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * 0.3183098733425140380859375;
    float _1552 = (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * 0.3183098733425140380859375;
    float _1559 = ((cbLight._m0[_1510].x * _1516) * _1552) + ((cbLight._m0[_1520].x * _1527) * _1550);
    float _1560 = ((_1516 * cbLight._m0[_1510].y) * _1552) + ((_1527 * cbLight._m0[_1520].y) * _1550);
    float _1561 = ((_1516 * cbLight._m0[_1510].z) * _1552) + ((_1527 * cbLight._m0[_1520].z) * _1550);
    uvec4 _1566 = floatBitsToUint(cbLight._m0[_1492 + 12u]);
    bool _1568 = _1566.x == 0u;
    float _1579;
    float _1581;
    float _1583;
    if (_1568)
    {
        _1579 = _1559;
        _1581 = _1560;
        _1583 = _1561;
    }
    else
    {
        uint _1587 = _1492 + 6u;
        float _1603 = (dot(vec3(cbLight._m0[_1492 + 2u].xyz), vec3(_291, _292, _293)) * 0.5) + 0.5;
        float _1604 = _1603 * _1603;
        float _3504 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _1606 = isnan(1.0) ? _1508 : (isnan(_1508) ? 1.0 : min(_1508, 1.0));
        _1579 = (((cbLight._m0[_1587].x * 0.3183098733425140380859375) * _1605) * _1606) + _1559;
        _1581 = (((cbLight._m0[_1587].y * 0.3183098733425140380859375) * _1605) * _1606) + _1560;
        _1583 = (((cbLight._m0[_1587].z * 0.3183098733425140380859375) * _1605) * _1606) + _1561;
    }
    bool _1586 = _1566.y == 0u;
    float _1624;
    float _1626;
    float _1628;
    if (_1586)
    {
        _1624 = _1579;
        _1626 = _1581;
        _1628 = _1583;
    }
    else
    {
        uint _1729 = _1492 + 7u;
        float _1745 = (dot(vec3(cbLight._m0[_1492 + 3u].xyz), vec3(_291, _292, _293)) * 0.5) + 0.5;
        float _1746 = _1745 * _1745;
        float _3520 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1747 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _1748 = isnan(1.0) ? _1509 : (isnan(_1509) ? 1.0 : min(_1509, 1.0));
        _1624 = (((cbLight._m0[_1729].x * 0.3183098733425140380859375) * _1747) * _1748) + _1579;
        _1626 = (((cbLight._m0[_1729].y * 0.3183098733425140380859375) * _1747) * _1748) + _1581;
        _1628 = (((cbLight._m0[_1729].z * 0.3183098733425140380859375) * _1747) * _1748) + _1583;
    }
    uint _1630 = _1492 + 8u;
    float _1636 = cbLight._m0[_1492].x + _369;
    float _1637 = cbLight._m0[_1492].y + _370;
    float _1638 = cbLight._m0[_1492].z + _371;
    float _1642 = inversesqrt(dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638)));
    float _1646 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1492].xyz));
    float _3536 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
    float _1649 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _3547 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _1650 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _1651 = dot(vec3(cbLight._m0[_1492].xyz), vec3(_1636 * _1642, _1637 * _1642, _1638 * _1642));
    float _3558 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
    float _1662 = (exp2(log2(1.0 - (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1668 = (0.5 / ((_1649 + 9.9999999392252902907785028219223e-09) + _1650)) * _1649;
    float _3569 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
    float _1670 = (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * 0.31831014156341552734375;
    uint _1681 = _1492 + 9u;
    float _1687 = cbLight._m0[_1531].x + _369;
    float _1688 = cbLight._m0[_1531].y + _370;
    float _1689 = cbLight._m0[_1531].z + _371;
    float _1693 = inversesqrt(dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689)));
    float _1697 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1531].xyz));
    float _3580 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _1700 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _1701 = dot(vec3(cbLight._m0[_1531].xyz), vec3(_1687 * _1693, _1688 * _1693, _1689 * _1693));
    float _3591 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
    float _1710 = (exp2(log2(1.0 - (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1714 = (0.5 / ((_1700 + 9.9999999392252902907785028219223e-09) + _1650)) * _1700;
    float _3602 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _1716 = (isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * 0.31831014156341552734375;
    float _1726 = (((_1710 * cbLight._m0[_1681].x) * _1716) * _1516) + (((_1662 * cbLight._m0[_1630].x) * _1670) * _1527);
    float _1727 = (((_1710 * cbLight._m0[_1681].y) * _1716) * _1516) + (((_1662 * cbLight._m0[_1630].y) * _1670) * _1527);
    float _1728 = (((_1710 * cbLight._m0[_1681].z) * _1716) * _1516) + (((_1662 * cbLight._m0[_1630].z) * _1670) * _1527);
    float _1790;
    float _1792;
    float _1794;
    if (_1568)
    {
        _1790 = _1726;
        _1792 = _1727;
        _1794 = _1728;
    }
    else
    {
        uint _1796 = _1492 + 10u;
        uint _1802 = _1492 + 2u;
        float _1808 = cbLight._m0[_1802].x + _369;
        float _1809 = cbLight._m0[_1802].y + _370;
        float _1810 = cbLight._m0[_1802].z + _371;
        float _1814 = inversesqrt(dot(vec3(_1808, _1809, _1810), vec3(_1808, _1809, _1810)));
        float _1818 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1802].xyz));
        float _3613 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1821 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _1822 = dot(vec3(cbLight._m0[_1802].xyz), vec3(_1808 * _1814, _1809 * _1814, _1810 * _1814));
        float _3624 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1831 = (exp2(log2(1.0 - (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1835 = (0.5 / ((_1821 + 9.9999999392252902907785028219223e-09) + _1650)) * _1821;
        float _3635 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1837 = (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * 0.31831014156341552734375;
        float _1838 = isnan(1.0) ? _1508 : (isnan(_1508) ? 1.0 : min(_1508, 1.0));
        _1790 = (((_1831 * cbLight._m0[_1796].x) * _1837) * _1838) + _1726;
        _1792 = (((_1831 * cbLight._m0[_1796].y) * _1837) * _1838) + _1727;
        _1794 = (((_1831 * cbLight._m0[_1796].z) * _1837) * _1838) + _1728;
    }
    float _1873;
    float _1875;
    float _1877;
    if (_1586)
    {
        _1873 = _1790;
        _1875 = _1792;
        _1877 = _1794;
    }
    else
    {
        uint _1884 = _1492 + 11u;
        uint _1890 = _1492 + 3u;
        float _1896 = cbLight._m0[_1890].x + _369;
        float _1897 = cbLight._m0[_1890].y + _370;
        float _1898 = cbLight._m0[_1890].z + _371;
        float _1902 = inversesqrt(dot(vec3(_1896, _1897, _1898), vec3(_1896, _1897, _1898)));
        float _1906 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1890].xyz));
        float _3651 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1909 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1910 = dot(vec3(cbLight._m0[_1890].xyz), vec3(_1896 * _1902, _1897 * _1902, _1898 * _1902));
        float _3662 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1919 = (exp2(log2(1.0 - (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1923 = (0.5 / ((_1909 + 9.9999999392252902907785028219223e-09) + _1650)) * _1909;
        float _3673 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
        float _1925 = (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * 0.31831014156341552734375;
        float _1926 = isnan(1.0) ? _1509 : (isnan(_1509) ? 1.0 : min(_1509, 1.0));
        _1873 = (((_1919 * cbLight._m0[_1884].x) * _1925) * _1926) + _1790;
        _1875 = (((_1919 * cbLight._m0[_1884].y) * _1925) * _1926) + _1792;
        _1877 = (((_1919 * cbLight._m0[_1884].z) * _1925) * _1926) + _1794;
    }
    float _2060;
    float _2062;
    float _2064;
    float _2066;
    float _2068;
    float _2070;
    if (_1490.y == 0u)
    {
        float _2001 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2002 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2001;
        float _2003 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2001;
        float _2004 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2001;
        uvec4 _2016 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2017 = _2016.x;
        uint _2028 = uint((float(_2016.y) * floor(float(uint(cbSceneParam._m0[85u].y * _386) / _2017))) + floor(float(uint(cbSceneParam._m0[85u].x * _385) / _2017)));
        float _2038 = (log2(_2004 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2039 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
        uint _2042 = uint(isnan(14.0) ? _2039 : (isnan(_2039) ? 14.0 : min(_2039, 14.0)));
        uvec4 _2047 = texelFetch(g_lightClusterGridBuffer, int(((_2042 << 2u) + (_2028 << 6u)) >> 2u));
        uint _2048 = _2047.x;
        uint _2049 = _2016.z;
        float _2153;
        float _2155;
        float _2157;
        float _2159;
        float _2161;
        float _2163;
        if (((((1u << ((_2049 >> 4u) & 15u)) + 4294967295u) & _2048) == 0u) || ((_2049 & 240u) == 0u))
        {
            _2153 = 0.0;
            _2155 = 0.0;
            _2157 = 0.0;
            _2159 = 0.0;
            _2161 = 0.0;
            _2163 = 0.0;
        }
        else
        {
            float _2154;
            float _2156;
            float _2158;
            float _2160;
            float _2162;
            float _2164;
            float _2304 = 0.0;
            float _2305 = 0.0;
            float _2306 = 0.0;
            float _2307 = 0.0;
            float _2308 = 0.0;
            float _2309 = 0.0;
            uint _2310 = 0u;
            uint _2319;
            bool _2320;
            for (;;)
            {
                _2319 = texelFetch(g_lightClassification, int((((_2042 << 5u) + (_2028 << 9u)) + (_2310 << 2u)) >> 2u)).x;
                _2320 = _2319 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2320)
                {
                    frontier_phi_68_pred = _2306;
                    frontier_phi_68_pred_1 = _2309;
                    frontier_phi_68_pred_2 = _2308;
                    frontier_phi_68_pred_3 = _2307;
                    frontier_phi_68_pred_4 = _2305;
                    frontier_phi_68_pred_5 = _2304;
                }
                else
                {
                    float _2449;
                    float _2450;
                    float _2451;
                    float _2452;
                    float _2453;
                    float _2454;
                    uint _2455;
                    _2449 = _2304;
                    _2450 = _2305;
                    _2451 = _2306;
                    _2452 = _2307;
                    _2453 = _2308;
                    _2454 = _2309;
                    _2455 = _2319;
                    float _2376;
                    float _2377;
                    float _2378;
                    float _2379;
                    float _2380;
                    float _2381;
                    for (;;)
                    {
                        uint _2459 = uint(findLSB(_2455)) + (_2310 << 5u);
                        uint _2456 = (_2455 + 4294967295u) & _2455;
                        uint _2461 = _2459 * 48u;
                        vec4 _2475 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2461)).x, texelFetch(g_PointLightRenderingBuffer, int(_2461 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2461 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2461 + 3u)).x));
                        uint _2481 = (_2459 * 48u) + 4u;
                        vec4 _2494 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2481)).x, texelFetch(g_PointLightRenderingBuffer, int(_2481 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2481 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2481 + 3u)).x));
                        uint _2500 = (_2459 * 48u) + 8u;
                        vec3 _2511 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2500)).x, texelFetch(g_PointLightRenderingBuffer, int(_2500 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2500 + 2u)).x));
                        float _2515 = _2475.x - _2002;
                        float _2516 = _2475.y - _2003;
                        float _2517 = _2475.z - _2004;
                        float _2518 = dot(vec3(_2515, _2516, _2517), vec3(_2515, _2516, _2517));
                        float _2521 = inversesqrt(_2518);
                        float _2530 = 1.0 - (_2518 * _2475.w);
                        float _3699 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
                        float _2531 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
                        float _2532 = sqrt(_2518) * _2494.w;
                        float _2535 = 1.39999997615814208984375 / (_2532 + 1.39999997615814208984375);
                        float _2536 = _2535 * _2535;
                        float _2539 = ((1.0 - _2536) * dot(vec3(_406, _409, _412), vec3(_2521 * _2515, _2521 * _2516, _2521 * _2517))) + _2536;
                        float _2542 = _2532 * _2532;
                        float _2546 = ((isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0))) * _2531) / ((_2542 * 0.699999988079071044921875) + 1.0);
                        float _2550 = (-0.0) - _2002;
                        float _2551 = (-0.0) - _2003;
                        float _2552 = (-0.0) - _2004;
                        float _2556 = inversesqrt(dot(vec3(_2550, _2551, _2552), vec3(_2550, _2551, _2552)));
                        float _2560 = dot(vec3(_406, _409, _412), vec3(_2556 * _2550, _2556 * _2551, _2556 * _2552));
                        float _3715 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
                        float _3726 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
                        float _2564 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
                        float _2568 = (0.5 / (((isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) + 9.9999999392252902907785028219223e-09) + _2564)) * _2564;
                        float _3737 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
                        float _2577 = (((isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * 3.1415927410125732421875) / ((_2542 * 2.1991131305694580078125) + 3.141590118408203125)) * _2531;
                        _2379 = (_2546 * _2494.x) + _2452;
                        _2380 = (_2546 * _2494.y) + _2453;
                        _2381 = (_2546 * _2494.z) + _2454;
                        _2376 = (_2577 * _2511.x) + _2449;
                        _2377 = (_2577 * _2511.y) + _2450;
                        _2378 = (_2577 * _2511.z) + _2451;
                        if (_2456 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2449 = _2376;
                            _2450 = _2377;
                            _2451 = _2378;
                            _2452 = _2379;
                            _2453 = _2380;
                            _2454 = _2381;
                            _2455 = _2456;
                        }
                    }
                    frontier_phi_68_pred = _2378;
                    frontier_phi_68_pred_1 = _2381;
                    frontier_phi_68_pred_2 = _2380;
                    frontier_phi_68_pred_3 = _2379;
                    frontier_phi_68_pred_4 = _2377;
                    frontier_phi_68_pred_5 = _2376;
                }
                _2158 = frontier_phi_68_pred;
                _2164 = frontier_phi_68_pred_1;
                _2162 = frontier_phi_68_pred_2;
                _2160 = frontier_phi_68_pred_3;
                _2156 = frontier_phi_68_pred_4;
                _2154 = frontier_phi_68_pred_5;
                uint _2311 = _2310 + 1u;
                if (_2311 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2304 = _2154;
                    _2305 = _2156;
                    _2306 = _2158;
                    _2307 = _2160;
                    _2308 = _2162;
                    _2309 = _2164;
                    _2310 = _2311;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2153 = _2154;
            _2155 = _2156;
            _2157 = _2158;
            _2159 = _2160;
            _2161 = _2162;
            _2163 = _2164;
        }
        uvec4 _2167 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2168 = _2167.z;
        uint _2170 = (_2168 >> 8u) & 15u;
        float _2275;
        float _2277;
        float _2279;
        float _2281;
        float _2283;
        float _2285;
        if (((4294967295u << _2170) & _2048) == 0u)
        {
            _2275 = _2153;
            _2277 = _2155;
            _2279 = _2157;
            _2281 = _2159;
            _2283 = _2161;
            _2285 = _2163;
        }
        else
        {
            float _2300 = inversesqrt(dot(vec3(_2002, _2003, _2004), vec3(_2002, _2003, _2004)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2170 < ((_2168 >> 12u) & 15u))
            {
                float _2276;
                float _2278;
                float _2280;
                float _2282;
                float _2284;
                float _2286;
                float _2432 = _2153;
                float _2433 = _2155;
                float _2434 = _2157;
                float _2435 = _2159;
                float _2436 = _2161;
                float _2437 = _2163;
                uint _2438 = _2170;
                uint _2447;
                bool _2448;
                for (;;)
                {
                    _2447 = texelFetch(g_lightClassification, int((((_2042 << 5u) + (_2028 << 9u)) + (_2438 << 2u)) >> 2u)).x;
                    _2448 = _2447 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2448)
                    {
                        frontier_phi_79_pred = _2437;
                        frontier_phi_79_pred_1 = _2436;
                        frontier_phi_79_pred_2 = _2435;
                        frontier_phi_79_pred_3 = _2434;
                        frontier_phi_79_pred_4 = _2433;
                        frontier_phi_79_pred_5 = _2432;
                    }
                    else
                    {
                        float _2591;
                        float _2592;
                        float _2593;
                        float _2594;
                        float _2595;
                        float _2596;
                        float _2843;
                        float _2844;
                        float _2845;
                        float _2846;
                        float _2847;
                        float _2848;
                        float _2604 = _2432;
                        float _2605 = _2433;
                        float _2606 = _2434;
                        float _2607 = _2435;
                        float _2608 = _2436;
                        float _2609 = _2437;
                        uint _2610 = _2447;
                        uint _2611;
                        vec4 _2636;
                        float _2637;
                        vec4 _2652;
                        vec3 _2664;
                        vec4 _2680;
                        vec4 _2696;
                        float _2743;
                        bool _2744;
                        for (;;)
                        {
                            uint _2621 = ((_2438 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2610));
                            _2611 = (_2610 + 4294967295u) & _2610;
                            uint _2623 = _2621 * 40u;
                            _2636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2623 + 3u)).x));
                            _2637 = _2636.w;
                            uint _2639 = (_2621 * 40u) + 4u;
                            _2652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2639 + 3u)).x));
                            uint _2654 = (_2621 * 40u) + 8u;
                            _2664 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2654 + 2u)).x));
                            uint _2667 = (_2621 * 40u) + 16u;
                            _2680 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2667 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2667 + 3u)).x));
                            uint _2683 = (_2621 * 40u) + 20u;
                            _2696 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2683 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2683 + 3u)).x));
                            uint _2699 = (_2621 * 40u) + 24u;
                            vec4 _2712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2699 + 3u)).x));
                            uint _2718 = (_2621 * 40u) + 28u;
                            vec4 _2731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 3u)).x));
                            _2743 = fma(_2004, _2731.z, fma(_2003, _2731.y, _2731.x * _2002)) + _2731.w;
                            _2744 = !((fma(_2004, _2712.z, fma(_2003, _2712.y, _2712.x * _2002)) + _2712.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2744)
                            {
                                float _2771 = _2636.x - _2002;
                                float _2772 = _2636.y - _2003;
                                float _2773 = _2636.z - _2004;
                                float _2774 = dot(vec3(_2771, _2772, _2773), vec3(_2771, _2772, _2773));
                                float _2777 = inversesqrt(_2774);
                                float _2778 = _2777 * _2771;
                                float _2779 = _2777 * _2772;
                                float _2780 = _2777 * _2773;
                                float _2784 = 1.0 - (_2774 / (_2637 * _2637));
                                float _3748 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
                                float _2785 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
                                float _2789 = sqrt(_2774) * _2652.w;
                                float _2791 = 1.39999997615814208984375 / (_2789 + 1.39999997615814208984375);
                                float _2792 = _2791 * _2791;
                                float _2793 = 1.0 - _2792;
                                float _2795 = (_2793 * dot(vec3(_2778, _2779, _2780), vec3(_406, _409, _412))) + _2792;
                                float _2798 = _2789 * _2789;
                                float _2802 = (fma(_2004, _2680.z, fma(_2003, _2680.y, _2680.x * _2002)) + _2680.w) / _2743;
                                float _2803 = (fma(_2004, _2696.z, fma(_2003, _2696.y, _2696.x * _2002)) + _2696.w) / _2743;
                                float _2807 = 1.0 - dot(vec2(_2802, _2803), vec2(_2802, _2803));
                                float _3764 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
                                float _2808 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
                                float _2809 = _2808 * (((isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0))) * _2785) / ((_2798 * 0.699999988079071044921875) + 1.0));
                                float _2819 = dot(vec3(_406, _409, _412), vec3((-0.0) - (_2002 * _2300), (-0.0) - (_2003 * _2300), (-0.0) - (_2004 * _2300)));
                                float _3775 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
                                float _2827 = (_2793 * dot(vec3(_406, _409, _412), vec3(_2778, _2779, _2780))) + _2792;
                                float _3786 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
                                float _2828 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
                                float _2832 = (0.5 / (((isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) + 9.9999999392252902907785028219223e-09) + _2828)) * _2828;
                                float _3797 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                                float _2839 = (_2808 * _2785) * (((isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * 3.1415927410125732421875) / ((_2798 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2809 * _2652.z;
                                frontier_phi_85_pred_1 = _2809 * _2652.y;
                                frontier_phi_85_pred_2 = _2809 * _2652.x;
                                frontier_phi_85_pred_3 = _2839 * _2664.z;
                                frontier_phi_85_pred_4 = _2839 * _2664.y;
                                frontier_phi_85_pred_5 = _2839 * _2664.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2848 = frontier_phi_85_pred;
                            _2847 = frontier_phi_85_pred_1;
                            _2846 = frontier_phi_85_pred_2;
                            _2845 = frontier_phi_85_pred_3;
                            _2844 = frontier_phi_85_pred_4;
                            _2843 = frontier_phi_85_pred_5;
                            _2594 = _2846 + _2607;
                            _2595 = _2847 + _2608;
                            _2596 = _2848 + _2609;
                            _2591 = _2843 + _2604;
                            _2592 = _2844 + _2605;
                            _2593 = _2845 + _2606;
                            if (_2611 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2604 = _2591;
                                _2605 = _2592;
                                _2606 = _2593;
                                _2607 = _2594;
                                _2608 = _2595;
                                _2609 = _2596;
                                _2610 = _2611;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2596;
                        frontier_phi_79_pred_1 = _2595;
                        frontier_phi_79_pred_2 = _2594;
                        frontier_phi_79_pred_3 = _2593;
                        frontier_phi_79_pred_4 = _2592;
                        frontier_phi_79_pred_5 = _2591;
                    }
                    _2286 = frontier_phi_79_pred;
                    _2284 = frontier_phi_79_pred_1;
                    _2282 = frontier_phi_79_pred_2;
                    _2280 = frontier_phi_79_pred_3;
                    _2278 = frontier_phi_79_pred_4;
                    _2276 = frontier_phi_79_pred_5;
                    uint _2439 = _2438 + 1u;
                    if (_2439 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2432 = _2276;
                        _2433 = _2278;
                        _2434 = _2280;
                        _2435 = _2282;
                        _2436 = _2284;
                        _2437 = _2286;
                        _2438 = _2439;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2282;
                frontier_phi_60_61_ladder_1 = _2286;
                frontier_phi_60_61_ladder_2 = _2284;
                frontier_phi_60_61_ladder_3 = _2280;
                frontier_phi_60_61_ladder_4 = _2278;
                frontier_phi_60_61_ladder_5 = _2276;
            }
            else
            {
                frontier_phi_60_61_ladder = _2159;
                frontier_phi_60_61_ladder_1 = _2163;
                frontier_phi_60_61_ladder_2 = _2161;
                frontier_phi_60_61_ladder_3 = _2157;
                frontier_phi_60_61_ladder_4 = _2155;
                frontier_phi_60_61_ladder_5 = _2153;
            }
            _2275 = frontier_phi_60_61_ladder_5;
            _2277 = frontier_phi_60_61_ladder_4;
            _2279 = frontier_phi_60_61_ladder_3;
            _2281 = frontier_phi_60_61_ladder;
            _2283 = frontier_phi_60_61_ladder_2;
            _2285 = frontier_phi_60_61_ladder_1;
        }
        float _2290 = isnan(1.0) ? _451 : (isnan(_451) ? 1.0 : min(_451, 1.0));
        _2060 = (_2290 * _2281) + _1624;
        _2062 = (_2290 * _2283) + _1626;
        _2064 = (_2290 * _2285) + _1628;
        _2066 = ((_2275 * 0.039999999105930328369140625) * _2290) + _1873;
        _2068 = ((_2277 * 0.039999999105930328369140625) * _2290) + _1875;
        _2070 = ((_2279 * 0.039999999105930328369140625) * _2290) + _1877;
    }
    else
    {
        _2060 = _1624;
        _2062 = _1626;
        _2064 = _1628;
        _2066 = _1873;
        _2068 = _1875;
        _2070 = _1877;
    }
    float _3813 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _3824 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _3835 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _3846 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _2088 = ((isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * (_2060 + ((isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0))) * _451))) + ((_2066 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _1260)) * cbPerFrame._m0[3u].x);
    float _2089 = ((isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * (_2062 + ((isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0))) * _451))) + ((_2068 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _1260)) * cbPerFrame._m0[3u].x);
    float _2090 = ((isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_2064 + ((isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0))) * _451))) + ((_2070 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _1260)) * cbPerFrame._m0[3u].x);
    float _2091 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2092 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2093 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2098 = cbInstanceData._m0[_425 + 6u].w * (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)));
    float _2103 = _385 / cbSceneParam._m0[86u].x;
    float _2104 = _386 / cbSceneParam._m0[86u].y;
    vec4 _2118 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2103, _2104, (log2((isnan(cbSceneParam._m0[77u].w) ? _311 : (isnan(_311) ? cbSceneParam._m0[77u].w : min(_311, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2120 = _2118.x;
    float _2121 = _2118.y;
    float _2122 = _2118.z;
    float _2123 = _2118.w;
    float _2215;
    float _2217;
    float _2219;
    float _2221;
    if (_311 > cbSceneParam._m0[78u].w)
    {
        float _2178 = isnan(_311) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _311 : min(cbSceneParam._m0[80u].w, _311));
        float _2179 = _2178 / _311;
        float _2190 = _2179 * _362;
        float _2191 = _363 * _2179;
        float _2192 = (-0.0) - _2191;
        float _2193 = _2179 * _364;
        float _2195 = (cbSceneParam._m0[77u].w * _2192) / _2178;
        float _2196 = _2195 + cbSceneParam._m0[79u].w;
        float _2197 = cbSceneParam._m0[79u].w - _2191;
        float _2203 = sqrt(((_2190 * _2190) + (_2191 * _2191)) + (_2193 * _2193));
        float _2206 = (1.0 - (cbSceneParam._m0[77u].w / _2178)) * _2203;
        float _2211 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2213 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2389;
        if (abs((_2192 - _2195) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2389 = ((((_2196 > 0.0) ? exp2(_2211 * _2196) : (2.0 - exp2(_2213 * _2196))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2206;
        }
        else
        {
            float _2333 = 1.0 / cbSceneParam._m0[80u].x;
            float _2334 = isnan(_2197) ? _2196 : (isnan(_2196) ? _2197 : max(_2196, _2197));
            float _2335 = isnan(_2197) ? _2196 : (isnan(_2196) ? _2197 : min(_2196, _2197));
            float _2344 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : min(_2334, 0.0));
            float _2345 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : min(_2335, 0.0));
            _2389 = ((abs(_2203 / _2192) * cbSceneParam._m0[80u].y) * ((((_2344 - _2345) * 2.0) - ((exp2(_2211 * (isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0)))) - exp2(_2211 * (isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0))))) * _2333)) - ((exp2(_2213 * _2344) - exp2(_2213 * _2345)) * _2333))) + (_2206 * cbSceneParam._m0[80u].z);
        }
        vec4 _2391 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2103, _2104, 1.0), 0.0);
        float _2400 = exp2((_2389 * (-1.44269502162933349609375)) * (1.0 - _2391.w));
        float _2401 = log2(_2400);
        float _2417 = log2(_2123);
        _2215 = (exp2(_2417 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2401 * cbSceneParam._m0[78u].x)) * _2391.x) / cbSceneParam._m0[78u].x)) + _2120;
        _2217 = (exp2(_2417 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2401 * cbSceneParam._m0[78u].y)) * _2391.y) / cbSceneParam._m0[78u].y)) + _2121;
        _2219 = (exp2(_2417 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2401 * cbSceneParam._m0[78u].z)) * _2391.z) / cbSceneParam._m0[78u].z)) + _2122;
        _2221 = _2400 * _2123;
    }
    else
    {
        _2215 = _2120;
        _2217 = _2121;
        _2219 = _2122;
        _2221 = _2123;
    }
    bool _2427;
    vec4 _2231;
    vec4 _2254;
    float _2256;
    float _2260;
    float _2261;
    float _2262;
    float _2263;
    bool _2274;
    for (;;)
    {
        _2231 = cbMatDynParam._m0[0u];
        float _2233 = roundEven(_2231.y);
        bool _2234 = _2233 == 3.0;
        float _2236 = log2(_2221);
        float _2243 = exp2(_2236 * cbSceneParam._m0[78u].x) * _2091;
        float _2244 = exp2(_2236 * cbSceneParam._m0[78u].y) * _2092;
        float _2245 = exp2(_2236 * cbSceneParam._m0[78u].z) * _2093;
        float _2252 = _374 + (-0.5);
        _2254 = cbMtdParam._m0[1u];
        _2256 = _2254.y * _2252;
        float _2259 = (_2233 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2260 = _2259 * (_2234 ? _2243 : (_2243 + (cbSceneParam._m0[72u].w * _2215)));
        _2261 = _2259 * (_2234 ? _2244 : (_2244 + (cbSceneParam._m0[72u].w * _2217)));
        _2262 = _2259 * (_2234 ? _2245 : (_2245 + (cbSceneParam._m0[72u].w * _2219)));
        _2263 = _2252 * 0.999000012874603271484375;
        _2274 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2274)
        {
            if ((cbInstanceData._m0[_425 + 7u].x + _2263) < 0.5)
            {
                _2427 = true;
                break;
            }
        }
        uint _2368 = _427 + uint(_2231.w);
        if ((cbInstanceData._m0[_2368].w < 1.0) && ((cbInstanceData._m0[_2368].w + _2263) < 0.5))
        {
            _2427 = true;
            break;
        }
        if ((_2256 + _286) < _2254.x)
        {
            _2427 = true;
            break;
        }
        _2427 = false;
        break;
    }
    float _2582;
    if (_2427)
    {
        discard_state = true;
        _2582 = 0.0;
    }
    else
    {
        _2582 = _2098;
    }
    SV_Target.x = _2260;
    SV_Target.y = _2261;
    SV_Target.z = _2262;
    SV_Target.w = _2582;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2098;
    discard_exit();
}


