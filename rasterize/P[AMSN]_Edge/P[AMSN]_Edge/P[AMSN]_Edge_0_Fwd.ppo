#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_AMSN_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _847;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209;
    float _210;
    float _211;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _209 = (-0.0) - _195;
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
    }
    else
    {
        _209 = _195;
        _210 = _196;
        _211 = _197;
    }
    vec4 _231 = texture(sampler2D(P_AMSN_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = _231.x * cbMtdParam._m0[9u].x;
    float _238 = _231.y * cbMtdParam._m0[9u].y;
    float _239 = _231.z * cbMtdParam._m0[9u].z;
    vec4 _251 = texture(sampler2D(P_AMSN_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _258 = cbMtdParam._m0[10u].x + _251.x;
    vec4 _270 = texture(sampler2D(P_AMSN_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _274 = _270.z;
    float _278 = (_270.x * 2.0) + (-1.0);
    float _280 = (_270.y * 2.0) + (-1.0);
    float _281 = dot(vec2(_278, _280), vec2(_278, _280));
    float _3184 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _287 = sqrt(1.0 - (isnan(1.0) ? _3184 : (isnan(_3184) ? 1.0 : min(_3184, 1.0))));
    float _290 = fma(_287, _209, fma(_280, _201 * TANGENT.x, (_187 * _180) * _278));
    float _293 = fma(_287, _210, fma(_280, _201 * TANGENT.y, (_187 * _181) * _278));
    float _296 = fma(_287, _211, fma(_280, _201 * TANGENT.z, (_187 * _182) * _278));
    float _300 = inversesqrt(dot(vec3(_290, _293, _296), vec3(_290, _293, _296)));
    float _301 = _300 * _290;
    float _302 = _300 * _293;
    float _303 = _300 * _296;
    float _3195 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _304 = isnan(1.0) ? _3195 : (isnan(_3195) ? 1.0 : min(_3195, 1.0));
    float _3206 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3217 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3228 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3239 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _308 = isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0));
    float _324 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _365 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _375 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _365);
    float _376 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _365);
    float _377 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _365);
    float _381 = inversesqrt(dot(vec3(_375, _376, _377), vec3(_375, _376, _377)));
    float _382 = _375 * _381;
    float _383 = _376 * _381;
    float _384 = _377 * _381;
    float _390 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _391 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _412 = fma(_303, cbSceneParam._m0[5u].z, fma(_302, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _301));
    float _415 = fma(_303, cbSceneParam._m0[6u].z, fma(_302, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _301));
    float _418 = fma(_303, cbSceneParam._m0[7u].z, fma(_302, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _301));
    uint _431 = uint(roundEven(NORMAL.w)) * 13u;
    uint _434 = (_431 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _440 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3206 : (isnan(_3206) ? 1.0 : min(_3206, 1.0)))) * cbInstanceData._m0[_434].x;
    float _441 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0)))) * cbInstanceData._m0[_434].y;
    float _442 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0)))) * cbInstanceData._m0[_434].z;
    float _3250 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0));
    float _3261 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
    float _3272 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0));
    float _446 = 1.0 - _308;
    float _447 = _443 * _446;
    float _448 = _444 * _446;
    float _449 = _445 * _446;
    float _454 = (_443 + (-0.039999999105930328369140625)) * _308;
    float _455 = (_444 + (-0.039999999105930328369140625)) * _308;
    float _456 = (_445 + (-0.039999999105930328369140625)) * _308;
    float _457 = _454 + 0.039999999105930328369140625;
    float _459 = _455 + 0.039999999105930328369140625;
    float _460 = _456 + 0.039999999105930328369140625;
    vec4 _469 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _390, cbSceneParam._m0[86u].y * _391));
    float _472 = _469.x * TEXCOORD.z;
    float _473 = dot(vec3(_301, _302, _303), vec3(_382, _383, _384));
    float _476 = _473 * 2.0;
    float _480 = (_476 * _301) - _382;
    float _481 = (_476 * _302) - _383;
    float _482 = (_476 * _303) - _384;
    float _486 = abs(dot(vec3(_382, _383, _384), vec3(_301, _302, _303)));
    float _3283 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _488 = sqrt(_304);
    float _501 = exp2((_488 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_488 * 3.0));
    float _507 = (1.0 - _501) * ((_488 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _508 = _501 * _488;
    float _536 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _540 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _544 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _846;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _571 = fma(_544, cbModelParam._m0[26u].z, fma(_540, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _536));
        float _575 = fma(_544, cbModelParam._m0[27u].z, fma(_540, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _536));
        float _579 = fma(_544, cbModelParam._m0[28u].z, fma(_540, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _536));
        float _604 = _536 + _301;
        float _605 = _540 + _302;
        float _606 = _544 + _303;
        float _616 = fma(_606, cbModelParam._m0[26u].z, fma(_605, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _604)) - _571;
        float _617 = fma(_606, cbModelParam._m0[27u].z, fma(_605, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _604)) - _575;
        float _618 = fma(_606, cbModelParam._m0[28u].z, fma(_605, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _604)) - _579;
        float _622 = inversesqrt(dot(vec3(_616, _617, _618), vec3(_616, _617, _618)));
        float _635 = ((_622 * _616) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_571 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _636 = ((_622 * _617) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_575 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _637 = ((_622 * _618) / cbModelParam._m0[34u].z) + ((((((_579 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _640 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_635, _636, _637), 0.0);
        vec4 _647 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_635, _636, _637), 0.0);
        vec4 _654 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_635, _636, _637), 0.0);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_635, _636, _637), 0.0);
        float _674 = exp2((_640.w + (-0.5)) * 20.0) * 2.0;
        float _675 = _674 * (_640.x + (-0.5));
        float _676 = _674 * (_640.y + (-0.5));
        float _677 = _674 * (_640.z + (-0.5));
        float _684 = exp2((_647.w + (-0.5)) * 20.0) * 2.0;
        float _685 = _684 * (_647.x + (-0.5));
        float _686 = _684 * (_647.y + (-0.5));
        float _687 = _684 * (_647.z + (-0.5));
        float _694 = exp2((_654.w + (-0.5)) * 20.0) * 2.0;
        float _695 = _694 * (_654.x + (-0.5));
        float _696 = _694 * (_654.y + (-0.5));
        float _697 = _694 * (_654.z + (-0.5));
        float _704 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_661.x + (-0.5));
        float _706 = _704 * (_661.y + (-0.5));
        float _707 = _704 * (_661.z + (-0.5));
        float _708 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _709 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _710 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _711 = _675 * 0.5;
        float _712 = _685 * 0.5;
        float _713 = _695 * 0.5;
        float _714 = dot(vec3(_711, _712, _713), vec3(_711, _712, _713));
        float _719 = (_714 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_714);
        float _728 = (dot(vec3(_301, _302, _303), vec3(_719 * _711, _719 * _712, _719 * _713)) + 1.0) * 0.5;
        float _3309 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _738 = sqrt(((_712 * _712) + (_711 * _711)) + (_713 * _713)) / (_708 + 9.9999997473787516355514526367188e-06);
        float _3320 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _739 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
        float _740 = _739 * 2.0;
        float _744 = (1.0 - _739) / (_739 + 1.0);
        float _3331 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
        float _754 = ((((1.0 - _745) * (_740 + 2.0)) * exp2(log2(isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0))) * (_740 + 1.0))) + _745) * _708;
        float _755 = _676 * 0.5;
        float _756 = _686 * 0.5;
        float _757 = _696 * 0.5;
        float _758 = dot(vec3(_755, _756, _757), vec3(_755, _756, _757));
        float _763 = (_758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_758);
        float _771 = (dot(vec3(_301, _302, _303), vec3(_763 * _755, _763 * _756, _763 * _757)) + 1.0) * 0.5;
        float _3342 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _780 = sqrt(((_756 * _756) + (_755 * _755)) + (_757 * _757)) / (_709 + 9.9999997473787516355514526367188e-06);
        float _3353 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
        float _782 = _781 * 2.0;
        float _786 = (1.0 - _781) / (_781 + 1.0);
        float _3364 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
        float _796 = ((((1.0 - _787) * (_782 + 2.0)) * exp2(log2(isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0))) * (_782 + 1.0))) + _787) * _709;
        float _797 = _677 * 0.5;
        float _798 = _687 * 0.5;
        float _799 = _697 * 0.5;
        float _800 = dot(vec3(_797, _798, _799), vec3(_797, _798, _799));
        float _805 = (_800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_800);
        float _813 = (dot(vec3(_301, _302, _303), vec3(_805 * _797, _805 * _798, _805 * _799)) + 1.0) * 0.5;
        float _3375 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _822 = sqrt(((_798 * _798) + (_797 * _797)) + (_799 * _799)) / (_710 + 9.9999997473787516355514526367188e-06);
        float _3386 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _824 = _823 * 2.0;
        float _828 = (1.0 - _823) / (_823 + 1.0);
        float _3397 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _838 = ((((1.0 - _829) * (_824 + 2.0)) * exp2(log2(isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))) * (_824 + 1.0))) + _829) * _710;
        _846 = _677;
        _848 = _676;
        _849 = _675;
        _850 = _687;
        _851 = _686;
        _852 = _685;
        _853 = _697;
        _854 = _696;
        _855 = _695;
        _856 = _710;
        _857 = _709;
        _858 = _708;
        _859 = cbModelParam._m0[36u].z * (isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0)));
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0)));
        _861 = cbModelParam._m0[36u].z * (isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0)));
    }
    else
    {
        _846 = _847;
        _848 = _847;
        _849 = _847;
        _850 = _847;
        _851 = _847;
        _852 = _847;
        _853 = _847;
        _854 = _847;
        _855 = _847;
        _856 = _847;
        _857 = _847;
        _858 = _847;
        _859 = 0.0;
        _860 = 0.0;
        _861 = 0.0;
    }
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _887 = fma(_544, cbModelParam._m0[30u].z, fma(_540, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _536));
        float _891 = fma(_544, cbModelParam._m0[31u].z, fma(_540, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _536));
        float _895 = fma(_544, cbModelParam._m0[32u].z, fma(_540, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _536));
        float _918 = _536 + _301;
        float _919 = _540 + _302;
        float _920 = _544 + _303;
        float _930 = fma(_920, cbModelParam._m0[30u].z, fma(_919, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _918)) - _887;
        float _931 = fma(_920, cbModelParam._m0[31u].z, fma(_919, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _918)) - _891;
        float _932 = fma(_920, cbModelParam._m0[32u].z, fma(_919, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _918)) - _895;
        float _936 = inversesqrt(dot(vec3(_930, _931, _932), vec3(_930, _931, _932)));
        float _949 = ((_936 * _930) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_887 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _950 = ((_936 * _931) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_891 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _951 = ((_936 * _932) / cbModelParam._m0[35u].z) + ((((((_895 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        float _986 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_953.x + (-0.5));
        float _988 = _986 * (_953.y + (-0.5));
        float _989 = _986 * (_953.z + (-0.5));
        float _996 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_960.x + (-0.5));
        float _998 = _996 * (_960.y + (-0.5));
        float _999 = _996 * (_960.z + (-0.5));
        float _1006 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_967.x + (-0.5));
        float _1008 = _1006 * (_967.y + (-0.5));
        float _1009 = _1006 * (_967.z + (-0.5));
        float _1016 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_974.x + (-0.5));
        float _1018 = _1016 * (_974.y + (-0.5));
        float _1019 = _1016 * (_974.z + (-0.5));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = _987 * 0.5;
        float _1024 = _997 * 0.5;
        float _1025 = _1007 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_301, _302, _303), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3438 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3449 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3460 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) * (_1050 + 1.0))) + _1055) * _1020;
        float _1065 = _988 * 0.5;
        float _1066 = _998 * 0.5;
        float _1067 = _1008 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_301, _302, _303), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3471 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3482 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3493 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))) * (_1092 + 1.0))) + _1097) * _1021;
        float _1107 = _989 * 0.5;
        float _1108 = _999 * 0.5;
        float _1109 = _1009 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_301, _302, _303), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3504 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3515 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3526 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * (_1134 + 1.0))) + _1139) * _1022;
        _1156 = _989;
        _1157 = _988;
        _1158 = _987;
        _1159 = _999;
        _1160 = _998;
        _1161 = _997;
        _1162 = _1009;
        _1163 = _1008;
        _1164 = _1007;
        _1165 = _1022;
        _1166 = _1021;
        _1167 = _1020;
        _1168 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
    }
    else
    {
        _1156 = _847;
        _1157 = _847;
        _1158 = _847;
        _1159 = _847;
        _1160 = _847;
        _1161 = _847;
        _1162 = _847;
        _1163 = _847;
        _1164 = _847;
        _1165 = _847;
        _1166 = _847;
        _1167 = _847;
        _1168 = 0.0;
        _1169 = 0.0;
        _1170 = 0.0;
    }
    float _1180 = (cbModelParam._m0[1u].x * (_1168 - _859)) + _859;
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _860)) + _860;
    float _1182 = (cbModelParam._m0[1u].x * (_1170 - _861)) + _861;
    float _1203 = fma(_1182, cbSceneParam._m0[89u].z, fma(_1181, cbSceneParam._m0[89u].y, _1180 * cbSceneParam._m0[89u].x));
    float _1206 = fma(_1182, cbSceneParam._m0[90u].z, fma(_1181, cbSceneParam._m0[90u].y, _1180 * cbSceneParam._m0[90u].x));
    float _1209 = fma(_1182, cbSceneParam._m0[91u].z, fma(_1181, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1180));
    float _1224 = _480 * 0.5;
    float _1225 = _481 * 0.5;
    float _1226 = _482 * 0.5;
    float _1227 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_1158, _1161, _1164, _1167));
    float _1230 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1233 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_1156, _1159, _1162, _1165));
    float _1267;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1240 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_846, _850, _853, _856));
        float _1244 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_848, _851, _854, _857));
        float _1248 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_849, _852, _855, _858));
        float _1255 = dot(vec4(cbModelParam._m0[39u]), vec4(_1224, _1225, _1226, 1.0));
        _1267 = dot(vec3(isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)), isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)), isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1255) ? 0.0 : (isnan(0.0) ? _1255 : max(0.0, _1255))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1267 = 1.0;
    }
    float _1278;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1269 = dot(vec4(cbModelParam._m0[40u]), vec4(_1224, _1225, _1226, 1.0));
        _1278 = dot(vec3(isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)), isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)), isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1269) ? 0.0 : (isnan(0.0) ? _1269 : max(0.0, _1269))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1278 = 1.0;
    }
    float _1282 = (_1278 * cbModelParam._m0[1u].x) + (_1267 * (1.0 - cbModelParam._m0[1u].x));
    float _1292 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _304);
    float _1293 = isnan(_1292) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1292 : min(cbModelParam._m0[25u].z, _1292));
    float _1375;
    float _1377;
    float _1379;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1342 = fma(_544, cbModelParam._m0[13u].z, fma(_540, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _536)) + cbModelParam._m0[13u].w;
        float _1346 = fma(_544, cbModelParam._m0[14u].z, fma(_540, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _536)) + cbModelParam._m0[14u].w;
        float _1350 = fma(_544, cbModelParam._m0[15u].z, fma(_540, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _536)) + cbModelParam._m0[15u].w;
        float _1353 = fma(_482, cbModelParam._m0[13u].z, fma(_481, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _480));
        float _1356 = fma(_482, cbModelParam._m0[14u].z, fma(_481, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _480));
        float _1359 = fma(_482, cbModelParam._m0[15u].z, fma(_481, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _480));
        float _1387;
        if (_1353 > 0.0)
        {
            _1387 = abs((1.0 - _1342) / _1353);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1353 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1342 + 1.0) / _1353);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1387 = frontier_phi_16_14_ladder;
        }
        float _1595;
        if (_1356 > 0.0)
        {
            _1595 = abs((1.0 - _1346) / _1356);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1346 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1595 = frontier_phi_25_21_ladder;
        }
        float _1849;
        if (_1359 > 0.0)
        {
            _1849 = abs((1.0 - _1350) / _1359);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1359 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1350 + 1.0) / _1359);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1849 = frontier_phi_37_32_ladder;
        }
        float _1851 = isnan(_1595) ? _1387 : (isnan(_1387) ? _1595 : min(_1387, _1595));
        float _1852 = isnan(_1849) ? _1851 : (isnan(_1851) ? _1849 : min(_1851, _1849));
        float _1856 = (_1852 * _1353) + _1342;
        float _1857 = (_1852 * _1356) + _1346;
        float _1858 = (_1852 * _1359) + _1350;
        float _1859 = _1852 * 9.9999997473787516355514526367188e-05;
        float _1861 = (-1.0) - _1859;
        float _1863 = _1859 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1858 > _1863) || ((_1858 < _1861) || ((_1857 > _1863) || ((_1857 < _1861) || ((_1856 < _1861) || (_1856 > _1863))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1986 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1858, cbModelParam._m0[9u].z, fma(_1857, cbModelParam._m0[9u].y, _1856 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1858, cbModelParam._m0[10u].z, fma(_1857, cbModelParam._m0[10u].y, _1856 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1858, cbModelParam._m0[11u].z, fma(_1857, cbModelParam._m0[11u].y, _1856 * cbModelParam._m0[11u].x))), _1293);
            frontier_phi_15_37_ladder = _1986.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1986.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1986.x * cbModelParam._m0[1u].y;
        }
        _1375 = frontier_phi_15_37_ladder_2;
        _1377 = frontier_phi_15_37_ladder_1;
        _1379 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1363 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_480, _481, _482), _1293);
        _1375 = _1363.x * cbModelParam._m0[1u].y;
        _1377 = _1363.y * cbModelParam._m0[1u].y;
        _1379 = _1363.z * cbModelParam._m0[1u].y;
    }
    float _1383 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _304);
    float _1384 = isnan(_1383) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1383 : min(cbModelParam._m0[25u].w, _1383));
    float _1477;
    float _1479;
    float _1481;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1441 = fma(_544, cbModelParam._m0[21u].z, fma(_540, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _536)) + cbModelParam._m0[21u].w;
        float _1445 = fma(_544, cbModelParam._m0[22u].z, fma(_540, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _536)) + cbModelParam._m0[22u].w;
        float _1449 = fma(_544, cbModelParam._m0[23u].z, fma(_540, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _536)) + cbModelParam._m0[23u].w;
        float _1452 = fma(_482, cbModelParam._m0[21u].z, fma(_481, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _480));
        float _1455 = fma(_482, cbModelParam._m0[22u].z, fma(_481, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _480));
        float _1458 = fma(_482, cbModelParam._m0[23u].z, fma(_481, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _480));
        float _1600;
        if (_1452 > 0.0)
        {
            _1600 = abs((1.0 - _1441) / _1452);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1452 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1441 + 1.0) / _1452);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1600 = frontier_phi_27_23_ladder;
        }
        float _1876;
        if (_1455 > 0.0)
        {
            _1876 = abs((1.0 - _1445) / _1455);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1445 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1876 = frontier_phi_39_34_ladder;
        }
        float _2089;
        if (_1458 > 0.0)
        {
            _2089 = abs((1.0 - _1449) / _1458);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1449 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2089 = frontier_phi_48_45_ladder;
        }
        float _2091 = isnan(_1876) ? _1600 : (isnan(_1600) ? _1876 : min(_1600, _1876));
        float _2092 = isnan(_2089) ? _2091 : (isnan(_2091) ? _2089 : min(_2091, _2089));
        float _2096 = (_2092 * _1452) + _1441;
        float _2097 = (_2092 * _1455) + _1445;
        float _2098 = (_2092 * _1458) + _1449;
        float _2099 = _2092 * 9.9999997473787516355514526367188e-05;
        float _2100 = (-1.0) - _2099;
        float _2102 = _2099 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2098 > _2102) || ((_2098 < _2100) || ((_2097 > _2102) || ((_2097 < _2100) || ((_2096 < _2100) || (_2096 > _2102))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2296 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2098, cbModelParam._m0[17u].z, fma(_2097, cbModelParam._m0[17u].y, _2096 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2098, cbModelParam._m0[18u].z, fma(_2097, cbModelParam._m0[18u].y, _2096 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2098, cbModelParam._m0[19u].z, fma(_2097, cbModelParam._m0[19u].y, _2096 * cbModelParam._m0[19u].x))), _1384);
            frontier_phi_24_48_ladder = _2296.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2296.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2296.x * cbModelParam._m0[1u].z;
        }
        _1477 = frontier_phi_24_48_ladder_2;
        _1479 = frontier_phi_24_48_ladder_1;
        _1481 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1461 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_480, _481, _482), _1384);
        _1477 = _1461.x * cbModelParam._m0[1u].z;
        _1479 = _1461.y * cbModelParam._m0[1u].z;
        _1481 = _1461.z * cbModelParam._m0[1u].z;
    }
    float _1494 = (((_507 * _457) + _508) * _472) * ((cbModelParam._m0[1u].w * (_1477 - _1375)) + _1375);
    float _1496 = (((_507 * _459) + _508) * _472) * ((cbModelParam._m0[1u].w * (_1479 - _1377)) + _1377);
    float _1498 = (((_507 * _460) + _508) * _472) * ((cbModelParam._m0[1u].w * (_1481 - _1379)) + _1379);
    float _1501 = fma(_1498, cbSceneParam._m0[89u].z, fma(_1496, cbSceneParam._m0[89u].y, _1494 * cbSceneParam._m0[89u].x));
    float _1504 = fma(_1498, cbSceneParam._m0[90u].z, fma(_1496, cbSceneParam._m0[90u].y, _1494 * cbSceneParam._m0[90u].x));
    float _1507 = fma(_1498, cbSceneParam._m0[91u].z, fma(_1496, cbSceneParam._m0[91u].y, _1494 * cbSceneParam._m0[91u].x));
    uvec4 _1517 = floatBitsToUint(cbInstanceData._m0[_431 + 5u]);
    uint _1519 = _1517.x * 14u;
    uint _1520 = _1519 + 13u;
    float _1527 = _472 + (-1.0);
    float _1532 = (cbLight._m0[_1520].x * _1527) + 1.0;
    float _1533 = (cbLight._m0[_1520].y * _1527) + 1.0;
    float _1534 = (cbLight._m0[_1520].z * _1527) + 1.0;
    float _1535 = (cbLight._m0[_1520].w * _1527) + 1.0;
    uint _1536 = _1519 + 5u;
    float _1542 = isnan(1.0) ? _1533 : (isnan(_1533) ? 1.0 : min(_1533, 1.0));
    uint _1546 = _1519 + 4u;
    float _1553 = isnan(1.0) ? _1532 : (isnan(_1532) ? 1.0 : min(_1532, 1.0));
    uint _1557 = _1519 | 1u;
    float _1568 = dot(vec3(cbLight._m0[_1519].xyz), vec3(_301, _302, _303));
    float _1571 = dot(vec3(cbLight._m0[_1557].xyz), vec3(_301, _302, _303));
    float _3662 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
    float _3673 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
    float _1576 = (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * 0.3183098733425140380859375;
    float _1578 = (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * 0.3183098733425140380859375;
    float _1585 = ((cbLight._m0[_1536].x * _1542) * _1578) + ((cbLight._m0[_1546].x * _1553) * _1576);
    float _1586 = ((_1542 * cbLight._m0[_1536].y) * _1578) + ((_1553 * cbLight._m0[_1546].y) * _1576);
    float _1587 = ((_1542 * cbLight._m0[_1536].z) * _1578) + ((_1553 * cbLight._m0[_1546].z) * _1576);
    uvec4 _1592 = floatBitsToUint(cbLight._m0[_1519 + 12u]);
    bool _1594 = _1592.x == 0u;
    float _1605;
    float _1607;
    float _1609;
    if (_1594)
    {
        _1605 = _1585;
        _1607 = _1586;
        _1609 = _1587;
    }
    else
    {
        uint _1613 = _1519 + 6u;
        float _1629 = (dot(vec3(cbLight._m0[_1519 + 2u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _1630 = _1629 * _1629;
        float _3684 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1632 = isnan(1.0) ? _1534 : (isnan(_1534) ? 1.0 : min(_1534, 1.0));
        _1605 = (((cbLight._m0[_1613].x * 0.3183098733425140380859375) * _1631) * _1632) + _1585;
        _1607 = (((cbLight._m0[_1613].y * 0.3183098733425140380859375) * _1631) * _1632) + _1586;
        _1609 = (((cbLight._m0[_1613].z * 0.3183098733425140380859375) * _1631) * _1632) + _1587;
    }
    bool _1612 = _1592.y == 0u;
    float _1650;
    float _1652;
    float _1654;
    if (_1612)
    {
        _1650 = _1605;
        _1652 = _1607;
        _1654 = _1609;
    }
    else
    {
        uint _1820 = _1519 + 7u;
        float _1836 = (dot(vec3(cbLight._m0[_1519 + 3u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _1837 = _1836 * _1836;
        float _3700 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1838 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1839 = isnan(1.0) ? _1535 : (isnan(_1535) ? 1.0 : min(_1535, 1.0));
        _1650 = (((cbLight._m0[_1820].x * 0.3183098733425140380859375) * _1838) * _1839) + _1605;
        _1652 = (((cbLight._m0[_1820].y * 0.3183098733425140380859375) * _1838) * _1839) + _1607;
        _1654 = (((cbLight._m0[_1820].z * 0.3183098733425140380859375) * _1838) * _1839) + _1609;
    }
    uint _1657 = _1519 + 8u;
    float _1670 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1519].w)) * _304) * 0.949999988079071044921875);
    float _1671 = _1670 * _1670;
    float _1672 = cbLight._m0[_1519].x + _382;
    float _1673 = cbLight._m0[_1519].y + _383;
    float _1674 = cbLight._m0[_1519].z + _384;
    float _1678 = inversesqrt(dot(vec3(_1672, _1673, _1674), vec3(_1672, _1673, _1674)));
    float _1679 = _1678 * _1672;
    float _1680 = _1678 * _1673;
    float _1681 = _1678 * _1674;
    float _1682 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1519].xyz));
    float _3716 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
    float _1685 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _3727 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _1686 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _1687 = dot(vec3(_301, _302, _303), vec3(_1679, _1680, _1681));
    float _3738 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    float _1690 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _1691 = dot(vec3(cbLight._m0[_1519].xyz), vec3(_1679, _1680, _1681));
    float _3749 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
    float _1695 = _1671 * _1671;
    float _1699 = ((_1690 * _1690) * (_1695 + (-1.0))) + 1.0;
    float _1707 = exp2(log2(1.0 - (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0)))) * 5.0);
    float _1708 = 0.959999978542327880859375 - _454;
    float _1710 = 0.959999978542327880859375 - _455;
    float _1711 = 0.959999978542327880859375 - _456;
    float _1718 = 1.0 - _1671;
    float _1729 = (0.5 / (((_1686 * ((_1685 * _1718) + _1671)) + 9.9999999392252902907785028219223e-09) + (((_1686 * _1718) + _1671) * _1685))) * _1685;
    float _3760 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _1731 = (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1695 / ((_1699 * _1699) * 3.141590118408203125));
    uint _1742 = _1519 + 9u;
    float _1753 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1557].w)) * _304) * 0.949999988079071044921875);
    float _1754 = _1753 * _1753;
    float _1755 = cbLight._m0[_1557].x + _382;
    float _1756 = cbLight._m0[_1557].y + _383;
    float _1757 = cbLight._m0[_1557].z + _384;
    float _1761 = inversesqrt(dot(vec3(_1755, _1756, _1757), vec3(_1755, _1756, _1757)));
    float _1762 = _1761 * _1755;
    float _1763 = _1761 * _1756;
    float _1764 = _1761 * _1757;
    float _1765 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1557].xyz));
    float _3771 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1768 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _1769 = dot(vec3(_301, _302, _303), vec3(_1762, _1763, _1764));
    float _3782 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1772 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _1773 = dot(vec3(cbLight._m0[_1557].xyz), vec3(_1762, _1763, _1764));
    float _3793 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1777 = _1754 * _1754;
    float _1781 = ((_1772 * _1772) * (_1777 + (-1.0))) + 1.0;
    float _1788 = exp2(log2(1.0 - (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) * 5.0);
    float _1795 = 1.0 - _1754;
    float _1805 = (0.5 / (((_1686 * ((_1768 * _1795) + _1754)) + 9.9999999392252902907785028219223e-09) + (((_1686 * _1795) + _1754) * _1768))) * _1768;
    float _3804 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1807 = (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1777 / ((_1781 * _1781) * 3.141590118408203125));
    float _1817 = (((((_1788 * _1708) + _457) * cbLight._m0[_1742].x) * _1807) * _1542) + (((((_1707 * _1708) + _457) * cbLight._m0[_1657].x) * _1731) * _1553);
    float _1818 = (((((_1788 * _1710) + _459) * cbLight._m0[_1742].y) * _1807) * _1542) + (((((_1707 * _1710) + _459) * cbLight._m0[_1657].y) * _1731) * _1553);
    float _1819 = (((((_1788 * _1711) + _460) * cbLight._m0[_1742].z) * _1807) * _1542) + (((((_1707 * _1711) + _460) * cbLight._m0[_1657].z) * _1731) * _1553);
    float _1881;
    float _1883;
    float _1885;
    if (_1594)
    {
        _1881 = _1817;
        _1883 = _1818;
        _1885 = _1819;
    }
    else
    {
        uint _1887 = _1519 + 2u;
        uint _1891 = _1519 + 10u;
        float _1905 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1887].w)) * _304) * 0.949999988079071044921875);
        float _1906 = _1905 * _1905;
        float _1907 = cbLight._m0[_1887].x + _382;
        float _1908 = cbLight._m0[_1887].y + _383;
        float _1909 = cbLight._m0[_1887].z + _384;
        float _1913 = inversesqrt(dot(vec3(_1907, _1908, _1909), vec3(_1907, _1908, _1909)));
        float _1914 = _1913 * _1907;
        float _1915 = _1913 * _1908;
        float _1916 = _1913 * _1909;
        float _1917 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1887].xyz));
        float _3815 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
        float _1920 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1921 = dot(vec3(_301, _302, _303), vec3(_1914, _1915, _1916));
        float _3826 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1924 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1925 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_1914, _1915, _1916));
        float _3837 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
        float _1929 = _1906 * _1906;
        float _1933 = ((_1924 * _1924) * (_1929 + (-1.0))) + 1.0;
        float _1940 = exp2(log2(1.0 - (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) * 5.0);
        float _1947 = 1.0 - _1906;
        float _1957 = (0.5 / (((_1686 * ((_1920 * _1947) + _1906)) + 9.9999999392252902907785028219223e-09) + (((_1686 * _1947) + _1906) * _1920))) * _1920;
        float _3848 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
        float _1959 = (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_1929 / ((_1933 * _1933) * 3.141590118408203125));
        float _1960 = isnan(1.0) ? _1534 : (isnan(_1534) ? 1.0 : min(_1534, 1.0));
        _1881 = (((((_1940 * _1708) + _457) * cbLight._m0[_1891].x) * _1959) * _1960) + _1817;
        _1883 = (((((_1940 * _1710) + _459) * cbLight._m0[_1891].y) * _1959) * _1960) + _1818;
        _1885 = (((((_1940 * _1711) + _460) * cbLight._m0[_1891].z) * _1959) * _1960) + _1819;
    }
    float _1995;
    float _1997;
    float _1999;
    if (_1612)
    {
        _1995 = _1881;
        _1997 = _1883;
        _1999 = _1885;
    }
    else
    {
        uint _2006 = _1519 + 3u;
        uint _2010 = _1519 + 11u;
        float _2024 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2006].w)) * _304) * 0.949999988079071044921875);
        float _2025 = _2024 * _2024;
        float _2026 = cbLight._m0[_2006].x + _382;
        float _2027 = cbLight._m0[_2006].y + _383;
        float _2028 = cbLight._m0[_2006].z + _384;
        float _2032 = inversesqrt(dot(vec3(_2026, _2027, _2028), vec3(_2026, _2027, _2028)));
        float _2033 = _2032 * _2026;
        float _2034 = _2032 * _2027;
        float _2035 = _2032 * _2028;
        float _2036 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_2006].xyz));
        float _3864 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2039 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _2040 = dot(vec3(_301, _302, _303), vec3(_2033, _2034, _2035));
        float _3875 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2043 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _2044 = dot(vec3(cbLight._m0[_2006].xyz), vec3(_2033, _2034, _2035));
        float _3886 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2048 = _2025 * _2025;
        float _2052 = ((_2043 * _2043) * (_2048 + (-1.0))) + 1.0;
        float _2059 = exp2(log2(1.0 - (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) * 5.0);
        float _2066 = 1.0 - _2025;
        float _2076 = (0.5 / (((_1686 * ((_2039 * _2066) + _2025)) + 9.9999999392252902907785028219223e-09) + (((_1686 * _2066) + _2025) * _2039))) * _2039;
        float _3897 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2078 = (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_2048 / ((_2052 * _2052) * 3.141590118408203125));
        float _2079 = isnan(1.0) ? _1535 : (isnan(_1535) ? 1.0 : min(_1535, 1.0));
        _1995 = (((((_2059 * _1708) + _457) * cbLight._m0[_2010].x) * _2078) * _2079) + _1881;
        _1997 = (((((_2059 * _1710) + _459) * cbLight._m0[_2010].y) * _2078) * _2079) + _1883;
        _1999 = (((((_2059 * _1711) + _460) * cbLight._m0[_2010].z) * _2078) * _2079) + _1885;
    }
    float _2213;
    float _2215;
    float _2217;
    float _2219;
    float _2221;
    float _2223;
    if (_1517.y == 0u)
    {
        float _2154 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2155 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2154;
        float _2156 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2154;
        float _2157 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2154;
        uvec4 _2169 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2170 = _2169.x;
        uint _2181 = uint((float(_2169.y) * floor(float(uint(cbSceneParam._m0[85u].y * _391) / _2170))) + floor(float(uint(cbSceneParam._m0[85u].x * _390) / _2170)));
        float _2191 = (log2(_2157 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2192 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        uint _2195 = uint(isnan(14.0) ? _2192 : (isnan(_2192) ? 14.0 : min(_2192, 14.0)));
        uvec4 _2200 = texelFetch(g_lightClusterGridBuffer, int(((_2195 << 2u) + (_2181 << 6u)) >> 2u));
        uint _2201 = _2200.x;
        uint _2202 = _2169.z;
        float _2301;
        float _2303;
        float _2305;
        float _2307;
        float _2309;
        float _2311;
        if (((((1u << ((_2202 >> 4u) & 15u)) + 4294967295u) & _2201) == 0u) || ((_2202 & 240u) == 0u))
        {
            _2301 = 0.0;
            _2303 = 0.0;
            _2305 = 0.0;
            _2307 = 0.0;
            _2309 = 0.0;
            _2311 = 0.0;
        }
        else
        {
            float _2302;
            float _2304;
            float _2306;
            float _2308;
            float _2310;
            float _2312;
            float _2445 = 0.0;
            float _2446 = 0.0;
            float _2447 = 0.0;
            float _2448 = 0.0;
            float _2449 = 0.0;
            float _2450 = 0.0;
            uint _2451 = 0u;
            uint _2460;
            bool _2461;
            for (;;)
            {
                _2460 = texelFetch(g_lightClassification, int((((_2195 << 5u) + (_2181 << 9u)) + (_2451 << 2u)) >> 2u)).x;
                _2461 = _2460 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2461)
                {
                    frontier_phi_63_pred = _2450;
                    frontier_phi_63_pred_1 = _2449;
                    frontier_phi_63_pred_2 = _2448;
                    frontier_phi_63_pred_3 = _2447;
                    frontier_phi_63_pred_4 = _2446;
                    frontier_phi_63_pred_5 = _2445;
                }
                else
                {
                    float _2569;
                    float _2570;
                    float _2571;
                    float _2572;
                    float _2573;
                    float _2574;
                    uint _2575;
                    _2569 = _2445;
                    _2570 = _2446;
                    _2571 = _2447;
                    _2572 = _2448;
                    _2573 = _2449;
                    _2574 = _2450;
                    _2575 = _2460;
                    float _2501;
                    float _2502;
                    float _2503;
                    float _2504;
                    float _2505;
                    float _2506;
                    for (;;)
                    {
                        uint _2579 = uint(findLSB(_2575)) + (_2451 << 5u);
                        uint _2576 = (_2575 + 4294967295u) & _2575;
                        uint _2581 = _2579 * 48u;
                        vec4 _2595 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2581)).x, texelFetch(g_PointLightRenderingBuffer, int(_2581 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2581 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2581 + 3u)).x));
                        uint _2601 = (_2579 * 48u) + 4u;
                        vec4 _2614 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2601)).x, texelFetch(g_PointLightRenderingBuffer, int(_2601 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2601 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2601 + 3u)).x));
                        uint _2620 = (_2579 * 48u) + 8u;
                        vec3 _2631 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2620)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 2u)).x));
                        float _2635 = _2595.x - _2155;
                        float _2636 = _2595.y - _2156;
                        float _2637 = _2595.z - _2157;
                        float _2638 = dot(vec3(_2635, _2636, _2637), vec3(_2635, _2636, _2637));
                        float _2641 = inversesqrt(_2638);
                        float _2642 = _2641 * _2635;
                        float _2643 = _2641 * _2636;
                        float _2644 = _2641 * _2637;
                        float _2645 = dot(vec3(_412, _415, _418), vec3(_2642, _2643, _2644));
                        float _2650 = 1.0 - (_2638 * _2595.w);
                        float _3923 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
                        float _2651 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
                        float _2652 = sqrt(_2638) * _2614.w;
                        float _2655 = 1.39999997615814208984375 / (_2652 + 1.39999997615814208984375);
                        float _2656 = _2655 * _2655;
                        float _2659 = ((1.0 - _2656) * _2645) + _2656;
                        float _2662 = _2652 * _2652;
                        float _2666 = ((isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0))) * _2651) / ((_2662 * 0.699999988079071044921875) + 1.0);
                        float _2670 = (-0.0) - _2155;
                        float _2671 = (-0.0) - _2156;
                        float _2672 = (-0.0) - _2157;
                        float _2676 = inversesqrt(dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672)));
                        float _2677 = _2676 * _2670;
                        float _2678 = _2676 * _2671;
                        float _2679 = _2676 * _2672;
                        float _2687 = exp2(log2(1.0 / ((_2662 * 3.5) + 5.0)) * 0.25);
                        float _2688 = 1.0 - _488;
                        float _2695 = sqrt(1.0 - ((1.0 - (_2688 * _2688)) * (1.0 - (_2687 * _2687))));
                        float _2696 = _2695 * _2695;
                        float _2697 = _2696 * _2696;
                        float _2698 = _2677 + _2642;
                        float _2699 = _2678 + _2643;
                        float _2700 = _2679 + _2644;
                        float _2704 = inversesqrt(dot(vec3(_2698, _2699, _2700), vec3(_2698, _2699, _2700)));
                        float _2708 = dot(vec3(_412, _415, _418), vec3(_2677, _2678, _2679));
                        float _3939 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
                        float _2711 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
                        float _2712 = dot(vec3(_412, _415, _418), vec3(_2704 * _2698, _2704 * _2699, _2704 * _2700));
                        float _3950 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
                        float _2715 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
                        float _2719 = ((_2715 * _2715) * (_2697 + (-1.0))) + 1.0;
                        float _2720 = _2655 * _2696;
                        float _2721 = _2720 * _2720;
                        float _2724 = ((1.0 - _2721) * _2645) + _2721;
                        float _3961 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
                        float _2725 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
                        float _2726 = 1.0 - _2696;
                        float _2736 = (0.5 / (((_2725 * ((_2711 * _2726) + _2696)) + 9.9999999392252902907785028219223e-09) + (((_2725 * _2726) + _2696) * _2711))) * _2725;
                        float _3972 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
                        float _2747 = (((_2697 * 3.1415927410125732421875) * (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) / ((_2719 * _2719) * ((_2662 * 2.1991131305694580078125) + 3.141590118408203125))) * _2651;
                        _2504 = (_2666 * _2614.x) + _2572;
                        _2505 = (_2666 * _2614.y) + _2573;
                        _2506 = (_2666 * _2614.z) + _2574;
                        _2501 = (_2747 * _2631.x) + _2569;
                        _2502 = (_2747 * _2631.y) + _2570;
                        _2503 = (_2747 * _2631.z) + _2571;
                        if (_2576 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2569 = _2501;
                            _2570 = _2502;
                            _2571 = _2503;
                            _2572 = _2504;
                            _2573 = _2505;
                            _2574 = _2506;
                            _2575 = _2576;
                        }
                    }
                    frontier_phi_63_pred = _2506;
                    frontier_phi_63_pred_1 = _2505;
                    frontier_phi_63_pred_2 = _2504;
                    frontier_phi_63_pred_3 = _2503;
                    frontier_phi_63_pred_4 = _2502;
                    frontier_phi_63_pred_5 = _2501;
                }
                _2312 = frontier_phi_63_pred;
                _2310 = frontier_phi_63_pred_1;
                _2308 = frontier_phi_63_pred_2;
                _2306 = frontier_phi_63_pred_3;
                _2304 = frontier_phi_63_pred_4;
                _2302 = frontier_phi_63_pred_5;
                uint _2452 = _2451 + 1u;
                if (_2452 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2445 = _2302;
                    _2446 = _2304;
                    _2447 = _2306;
                    _2448 = _2308;
                    _2449 = _2310;
                    _2450 = _2312;
                    _2451 = _2452;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2301 = _2302;
            _2303 = _2304;
            _2305 = _2306;
            _2307 = _2308;
            _2309 = _2310;
            _2311 = _2312;
        }
        uvec4 _2315 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2316 = _2315.z;
        uint _2318 = (_2316 >> 8u) & 15u;
        float _2413;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        float _2423;
        if (((4294967295u << _2318) & _2201) == 0u)
        {
            _2413 = _2301;
            _2415 = _2303;
            _2417 = _2305;
            _2419 = _2307;
            _2421 = _2309;
            _2423 = _2311;
        }
        else
        {
            float _2438 = inversesqrt(dot(vec3(_2155, _2156, _2157), vec3(_2155, _2156, _2157)));
            float _2439 = _2438 * _2155;
            float _2440 = _2438 * _2156;
            float _2441 = _2438 * _2157;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2318 < ((_2316 >> 12u) & 15u))
            {
                float _2414;
                float _2416;
                float _2418;
                float _2420;
                float _2422;
                float _2424;
                float _2552 = _2301;
                float _2553 = _2303;
                float _2554 = _2305;
                float _2555 = _2307;
                float _2556 = _2309;
                float _2557 = _2311;
                uint _2558 = _2318;
                uint _2567;
                bool _2568;
                for (;;)
                {
                    _2567 = texelFetch(g_lightClassification, int((((_2195 << 5u) + (_2181 << 9u)) + (_2558 << 2u)) >> 2u)).x;
                    _2568 = _2567 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2568)
                    {
                        frontier_phi_69_pred = _2557;
                        frontier_phi_69_pred_1 = _2556;
                        frontier_phi_69_pred_2 = _2555;
                        frontier_phi_69_pred_3 = _2554;
                        frontier_phi_69_pred_4 = _2553;
                        frontier_phi_69_pred_5 = _2552;
                    }
                    else
                    {
                        float _2752;
                        float _2753;
                        float _2754;
                        float _2755;
                        float _2756;
                        float _2757;
                        float _3048;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _2765 = _2552;
                        float _2766 = _2553;
                        float _2767 = _2554;
                        float _2768 = _2555;
                        float _2769 = _2556;
                        float _2770 = _2557;
                        uint _2771 = _2567;
                        uint _2772;
                        vec4 _2797;
                        float _2798;
                        vec4 _2813;
                        vec3 _2825;
                        vec4 _2841;
                        vec4 _2857;
                        float _2904;
                        bool _2905;
                        for (;;)
                        {
                            uint _2782 = ((_2558 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2771));
                            _2772 = (_2771 + 4294967295u) & _2771;
                            uint _2784 = _2782 * 40u;
                            _2797 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2784)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2784 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2784 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2784 + 3u)).x));
                            _2798 = _2797.w;
                            uint _2800 = (_2782 * 40u) + 4u;
                            _2813 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2800)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 3u)).x));
                            uint _2815 = (_2782 * 40u) + 8u;
                            _2825 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2815)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 2u)).x));
                            uint _2828 = (_2782 * 40u) + 16u;
                            _2841 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2828)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2828 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2828 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2828 + 3u)).x));
                            uint _2844 = (_2782 * 40u) + 20u;
                            _2857 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2844)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 3u)).x));
                            uint _2860 = (_2782 * 40u) + 24u;
                            vec4 _2873 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2860)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 3u)).x));
                            uint _2879 = (_2782 * 40u) + 28u;
                            vec4 _2892 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 3u)).x));
                            _2904 = fma(_2157, _2892.z, fma(_2156, _2892.y, _2892.x * _2155)) + _2892.w;
                            _2905 = !((fma(_2157, _2873.z, fma(_2156, _2873.y, _2873.x * _2155)) + _2873.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2905)
                            {
                                float _2932 = _2797.x - _2155;
                                float _2933 = _2797.y - _2156;
                                float _2934 = _2797.z - _2157;
                                float _2935 = dot(vec3(_2932, _2933, _2934), vec3(_2932, _2933, _2934));
                                float _2938 = inversesqrt(_2935);
                                float _2939 = _2938 * _2932;
                                float _2940 = _2938 * _2933;
                                float _2941 = _2938 * _2934;
                                float _2945 = 1.0 - (_2935 / (_2798 * _2798));
                                float _3983 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
                                float _2946 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
                                float _2950 = sqrt(_2935) * _2813.w;
                                float _2952 = 1.39999997615814208984375 / (_2950 + 1.39999997615814208984375);
                                float _2953 = _2952 * _2952;
                                float _2956 = ((1.0 - _2953) * dot(vec3(_2939, _2940, _2941), vec3(_412, _415, _418))) + _2953;
                                float _2959 = _2950 * _2950;
                                float _2963 = (fma(_2157, _2841.z, fma(_2156, _2841.y, _2841.x * _2155)) + _2841.w) / _2904;
                                float _2964 = (fma(_2157, _2857.z, fma(_2156, _2857.y, _2857.x * _2155)) + _2857.w) / _2904;
                                float _2968 = 1.0 - dot(vec2(_2963, _2964), vec2(_2963, _2964));
                                float _3999 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                                float _2969 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
                                float _2970 = _2969 * (((isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0))) * _2946) / ((_2959 * 0.699999988079071044921875) + 1.0));
                                float _2982 = exp2(log2(1.0 / ((_2959 * 3.5) + 5.0)) * 0.25);
                                float _2983 = 1.0 - _488;
                                float _2990 = sqrt(1.0 - ((1.0 - (_2983 * _2983)) * (1.0 - (_2982 * _2982))));
                                float _2991 = _2990 * _2990;
                                float _2992 = _2991 * _2991;
                                float _2993 = _2939 - _2439;
                                float _2994 = _2940 - _2440;
                                float _2995 = _2941 - _2441;
                                float _2999 = inversesqrt(dot(vec3(_2993, _2994, _2995), vec3(_2993, _2994, _2995)));
                                float _3003 = dot(vec3(_412, _415, _418), vec3((-0.0) - _2439, (-0.0) - _2440, (-0.0) - _2441));
                                float _4010 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                                float _3006 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
                                float _3007 = dot(vec3(_412, _415, _418), vec3(_2999 * _2993, _2999 * _2994, _2999 * _2995));
                                float _4021 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                                float _3010 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
                                float _3014 = ((_3010 * _3010) * (_2992 + (-1.0))) + 1.0;
                                float _3015 = _2952 * _2991;
                                float _3016 = _3015 * _3015;
                                float _3022 = ((1.0 - _3016) * dot(vec3(_412, _415, _418), vec3(_2939, _2940, _2941))) + _3016;
                                float _4032 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                                float _3023 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
                                float _3024 = 1.0 - _2991;
                                float _3034 = (0.5 / (((_3023 * ((_3006 * _3024) + _2991)) + 9.9999999392252902907785028219223e-09) + (((_3023 * _3024) + _2991) * _3006))) * _3023;
                                float _4043 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                                float _3044 = (_2969 * _2946) * (((_2992 * 3.1415927410125732421875) * (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) / ((_3014 * _3014) * ((_2959 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2970 * _2813.z;
                                frontier_phi_75_pred_1 = _2970 * _2813.y;
                                frontier_phi_75_pred_2 = _2970 * _2813.x;
                                frontier_phi_75_pred_3 = _3044 * _2825.z;
                                frontier_phi_75_pred_4 = _3044 * _2825.y;
                                frontier_phi_75_pred_5 = _3044 * _2825.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3053 = frontier_phi_75_pred;
                            _3052 = frontier_phi_75_pred_1;
                            _3051 = frontier_phi_75_pred_2;
                            _3050 = frontier_phi_75_pred_3;
                            _3049 = frontier_phi_75_pred_4;
                            _3048 = frontier_phi_75_pred_5;
                            _2755 = _3051 + _2768;
                            _2756 = _3052 + _2769;
                            _2757 = _3053 + _2770;
                            _2752 = _3048 + _2765;
                            _2753 = _3049 + _2766;
                            _2754 = _3050 + _2767;
                            if (_2772 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2765 = _2752;
                                _2766 = _2753;
                                _2767 = _2754;
                                _2768 = _2755;
                                _2769 = _2756;
                                _2770 = _2757;
                                _2771 = _2772;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2757;
                        frontier_phi_69_pred_1 = _2756;
                        frontier_phi_69_pred_2 = _2755;
                        frontier_phi_69_pred_3 = _2754;
                        frontier_phi_69_pred_4 = _2753;
                        frontier_phi_69_pred_5 = _2752;
                    }
                    _2424 = frontier_phi_69_pred;
                    _2422 = frontier_phi_69_pred_1;
                    _2420 = frontier_phi_69_pred_2;
                    _2418 = frontier_phi_69_pred_3;
                    _2416 = frontier_phi_69_pred_4;
                    _2414 = frontier_phi_69_pred_5;
                    uint _2559 = _2558 + 1u;
                    if (_2559 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2552 = _2414;
                        _2553 = _2416;
                        _2554 = _2418;
                        _2555 = _2420;
                        _2556 = _2422;
                        _2557 = _2424;
                        _2558 = _2559;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2424;
                frontier_phi_57_58_ladder_1 = _2422;
                frontier_phi_57_58_ladder_2 = _2420;
                frontier_phi_57_58_ladder_3 = _2418;
                frontier_phi_57_58_ladder_4 = _2416;
                frontier_phi_57_58_ladder_5 = _2414;
            }
            else
            {
                frontier_phi_57_58_ladder = _2311;
                frontier_phi_57_58_ladder_1 = _2309;
                frontier_phi_57_58_ladder_2 = _2307;
                frontier_phi_57_58_ladder_3 = _2305;
                frontier_phi_57_58_ladder_4 = _2303;
                frontier_phi_57_58_ladder_5 = _2301;
            }
            _2413 = frontier_phi_57_58_ladder_5;
            _2415 = frontier_phi_57_58_ladder_4;
            _2417 = frontier_phi_57_58_ladder_3;
            _2419 = frontier_phi_57_58_ladder_2;
            _2421 = frontier_phi_57_58_ladder_1;
            _2423 = frontier_phi_57_58_ladder;
        }
        float _2428 = isnan(1.0) ? _472 : (isnan(_472) ? 1.0 : min(_472, 1.0));
        _2213 = (_2428 * _2419) + _1650;
        _2215 = (_2428 * _2421) + _1652;
        _2217 = (_2428 * _2423) + _1654;
        _2219 = ((_2413 * _457) * _2428) + _1995;
        _2221 = ((_2415 * _459) * _2428) + _1997;
        _2223 = ((_2417 * _460) * _2428) + _1999;
    }
    else
    {
        _2213 = _1650;
        _2215 = _1652;
        _2217 = _1654;
        _2219 = _1995;
        _2221 = _1997;
        _2223 = _1999;
    }
    float _4059 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _4070 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _4081 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    uint _2243 = _431 + 6u;
    float _2251 = _390 / cbSceneParam._m0[86u].x;
    float _2252 = _391 / cbSceneParam._m0[86u].y;
    vec4 _2266 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2251, _2252, (log2((isnan(cbSceneParam._m0[77u].w) ? _324 : (isnan(_324) ? cbSceneParam._m0[77u].w : min(_324, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2268 = _2266.x;
    float _2269 = _2266.y;
    float _2270 = _2266.z;
    float _2271 = _2266.w;
    float _2363;
    float _2365;
    float _2367;
    float _2369;
    if (_324 > cbSceneParam._m0[78u].w)
    {
        float _2326 = isnan(_324) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _324 : min(cbSceneParam._m0[80u].w, _324));
        float _2327 = _2326 / _324;
        float _2338 = _2327 * _375;
        float _2339 = _376 * _2327;
        float _2340 = (-0.0) - _2339;
        float _2341 = _2327 * _377;
        float _2343 = (cbSceneParam._m0[77u].w * _2340) / _2326;
        float _2344 = _2343 + cbSceneParam._m0[79u].w;
        float _2345 = cbSceneParam._m0[79u].w - _2339;
        float _2351 = sqrt(((_2338 * _2338) + (_2339 * _2339)) + (_2341 * _2341));
        float _2354 = (1.0 - (cbSceneParam._m0[77u].w / _2326)) * _2351;
        float _2359 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2361 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2514;
        if (abs((_2340 - _2343) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2514 = ((((_2344 > 0.0) ? exp2(_2359 * _2344) : (2.0 - exp2(_2361 * _2344))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2354;
        }
        else
        {
            float _2474 = 1.0 / cbSceneParam._m0[80u].x;
            float _2475 = isnan(_2345) ? _2344 : (isnan(_2344) ? _2345 : max(_2344, _2345));
            float _2476 = isnan(_2345) ? _2344 : (isnan(_2344) ? _2345 : min(_2344, _2345));
            float _2485 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : min(_2475, 0.0));
            float _2486 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : min(_2476, 0.0));
            _2514 = ((abs(_2351 / _2340) * cbSceneParam._m0[80u].y) * ((((_2485 - _2486) * 2.0) - ((exp2(_2359 * (isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0)))) - exp2(_2359 * (isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0))))) * _2474)) - ((exp2(_2361 * _2485) - exp2(_2361 * _2486)) * _2474))) + (_2354 * cbSceneParam._m0[80u].z);
        }
        vec4 _2516 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2251, _2252, 1.0), 0.0);
        float _2525 = exp2((_2514 * (-1.44269502162933349609375)) * (1.0 - _2516.w));
        float _2526 = log2(_2525);
        float _2542 = log2(_2271);
        _2363 = (exp2(_2542 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2526 * cbSceneParam._m0[78u].x)) * _2516.x) / cbSceneParam._m0[78u].x)) + _2268;
        _2365 = (exp2(_2542 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2526 * cbSceneParam._m0[78u].y)) * _2516.y) / cbSceneParam._m0[78u].y)) + _2269;
        _2367 = (exp2(_2542 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2526 * cbSceneParam._m0[78u].z)) * _2516.z) / cbSceneParam._m0[78u].z)) + _2270;
        _2369 = _2525 * _2271;
    }
    else
    {
        _2363 = _2268;
        _2365 = _2269;
        _2367 = _2270;
        _2369 = _2271;
    }
    float _2381 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2382 = _2381 == 3.0;
    float _2383 = log2(_2369);
    float _2390 = exp2(_2383 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_2213 + ((isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0))) * _472))) + ((_2219 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _1282)) * cbPerFrame._m0[3u].x));
    float _2391 = exp2(_2383 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_2215 + ((isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))) * _472))) + ((_2221 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _1282)) * cbPerFrame._m0[3u].x));
    float _2392 = exp2(_2383 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_2217 + ((isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0))) * _472))) + ((_2223 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _1282)) * cbPerFrame._m0[3u].x));
    float _2401 = (_2381 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2401 * (_2382 ? _2390 : (_2390 + (cbSceneParam._m0[72u].w * _2363)));
    SV_Target.y = _2401 * (_2382 ? _2391 : (_2391 + (cbSceneParam._m0[72u].w * _2365)));
    SV_Target.z = _2401 * (_2382 ? _2392 : (_2392 + (cbSceneParam._m0[72u].w * _2367)));
    SV_Target.w = cbInstanceData._m0[_2243].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2243].w;
}


