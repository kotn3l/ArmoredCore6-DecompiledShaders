#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_AMSN_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _897;
float _3571;
float _3572;
float _3573;
float _3574;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    vec4 _239 = texture(sampler2D(P_AMSN_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _245 = _239.w;
    float _246 = _239.x * cbMtdParam._m0[9u].x;
    float _247 = _239.y * cbMtdParam._m0[9u].y;
    float _248 = _239.z * cbMtdParam._m0[9u].z;
    vec4 _260 = texture(sampler2D(P_AMSN_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _267 = cbMtdParam._m0[10u].x + _260.x;
    vec4 _279 = texture(sampler2D(P_AMSN_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _283 = _279.z;
    float _287 = (_279.x * 2.0) + (-1.0);
    float _289 = (_279.y * 2.0) + (-1.0);
    float _290 = dot(vec2(_287, _289), vec2(_287, _289));
    float _3583 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _296 = sqrt(1.0 - (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))));
    float _299 = fma(_296, _217, fma(_289, _209 * TANGENT.x, (_195 * _188) * _287));
    float _302 = fma(_296, _218, fma(_289, _209 * TANGENT.y, (_195 * _189) * _287));
    float _305 = fma(_296, _219, fma(_289, _209 * TANGENT.z, (_195 * _190) * _287));
    float _309 = inversesqrt(dot(vec3(_299, _302, _305), vec3(_299, _302, _305)));
    float _310 = _309 * _299;
    float _311 = _309 * _302;
    float _312 = _309 * _305;
    float _3594 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _313 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _3605 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3616 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3627 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3638 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _317 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    float _333 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _374 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _384 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _374);
    float _385 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _374);
    float _386 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _374);
    float _390 = inversesqrt(dot(vec3(_384, _385, _386), vec3(_384, _385, _386)));
    float _391 = _384 * _390;
    float _392 = _385 * _390;
    float _393 = _386 * _390;
    vec4 _398 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _400 = _398.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _576 = sqrt(((_384 * _384) + (_385 * _385)) + (_386 * _386));
        float _582 = (cbMatDynParam._m0[5u].x * _576) + cbMatDynParam._m0[5u].y;
        float _3649 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
        float _583 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _587 = (cbMatDynParam._m0[5u].z * _576) + cbMatDynParam._m0[5u].w;
        float _3660 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) - _583)) + _583) < ((_400 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _412 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _413 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _433 = fma(_312, cbSceneParam._m0[5u].z, fma(_311, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _310));
    float _436 = fma(_312, cbSceneParam._m0[6u].z, fma(_311, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _310));
    float _439 = fma(_312, cbSceneParam._m0[7u].z, fma(_311, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _310));
    uint _452 = uint(roundEven(NORMAL.w)) * 13u;
    uint _454 = _452 + 9u;
    uint _455 = _454 + uint(cbMatDynParam._m0[0u].w);
    float _461 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0)))) * cbInstanceData._m0[_455].x;
    float _462 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0)))) * cbInstanceData._m0[_455].y;
    float _463 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0)))) * cbInstanceData._m0[_455].z;
    float _3671 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _464 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _3682 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _465 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _3693 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _466 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _467 = 1.0 - _317;
    float _468 = _464 * _467;
    float _469 = _465 * _467;
    float _470 = _466 * _467;
    float _475 = (_464 + (-0.039999999105930328369140625)) * _317;
    float _476 = (_465 + (-0.039999999105930328369140625)) * _317;
    float _477 = (_466 + (-0.039999999105930328369140625)) * _317;
    float _478 = _475 + 0.039999999105930328369140625;
    float _480 = _476 + 0.039999999105930328369140625;
    float _481 = _477 + 0.039999999105930328369140625;
    vec4 _490 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _412, cbSceneParam._m0[86u].y * _413));
    float _493 = _490.x * TEXCOORD.z;
    float _494 = dot(vec3(_310, _311, _312), vec3(_391, _392, _393));
    float _497 = _494 * 2.0;
    float _501 = (_497 * _310) - _391;
    float _502 = (_497 * _311) - _392;
    float _503 = (_497 * _312) - _393;
    float _507 = abs(dot(vec3(_391, _392, _393), vec3(_310, _311, _312)));
    float _3704 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _509 = sqrt(_313);
    float _522 = exp2((_509 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_509 * 3.0));
    float _528 = (1.0 - _522) * ((_509 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _529 = _522 * _509;
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _565 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _896;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _621 = fma(_565, cbModelParam._m0[26u].z, fma(_561, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _557));
        float _625 = fma(_565, cbModelParam._m0[27u].z, fma(_561, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _557));
        float _629 = fma(_565, cbModelParam._m0[28u].z, fma(_561, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _557));
        float _654 = _557 + _310;
        float _655 = _561 + _311;
        float _656 = _565 + _312;
        float _666 = fma(_656, cbModelParam._m0[26u].z, fma(_655, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _654)) - _621;
        float _667 = fma(_656, cbModelParam._m0[27u].z, fma(_655, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _654)) - _625;
        float _668 = fma(_656, cbModelParam._m0[28u].z, fma(_655, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _654)) - _629;
        float _672 = inversesqrt(dot(vec3(_666, _667, _668), vec3(_666, _667, _668)));
        float _685 = ((_672 * _666) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_621 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _686 = ((_672 * _667) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_625 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _687 = ((_672 * _668) / cbModelParam._m0[34u].z) + ((((((_629 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        float _724 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _725 = _724 * (_690.x + (-0.5));
        float _726 = _724 * (_690.y + (-0.5));
        float _727 = _724 * (_690.z + (-0.5));
        float _734 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _735 = _734 * (_697.x + (-0.5));
        float _736 = _734 * (_697.y + (-0.5));
        float _737 = _734 * (_697.z + (-0.5));
        float _744 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _745 = _744 * (_704.x + (-0.5));
        float _746 = _744 * (_704.y + (-0.5));
        float _747 = _744 * (_704.z + (-0.5));
        float _754 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _755 = _754 * (_711.x + (-0.5));
        float _756 = _754 * (_711.y + (-0.5));
        float _757 = _754 * (_711.z + (-0.5));
        float _758 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _759 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _760 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _761 = _725 * 0.5;
        float _762 = _735 * 0.5;
        float _763 = _745 * 0.5;
        float _764 = dot(vec3(_761, _762, _763), vec3(_761, _762, _763));
        float _769 = (_764 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_764);
        float _778 = (dot(vec3(_310, _311, _312), vec3(_769 * _761, _769 * _762, _769 * _763)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _788 = sqrt(((_762 * _762) + (_761 * _761)) + (_763 * _763)) / (_758 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _790 = _789 * 2.0;
        float _794 = (1.0 - _789) / (_789 + 1.0);
        float _3752 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _804 = ((((1.0 - _795) * (_790 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_790 + 1.0))) + _795) * _758;
        float _805 = _726 * 0.5;
        float _806 = _736 * 0.5;
        float _807 = _746 * 0.5;
        float _808 = dot(vec3(_805, _806, _807), vec3(_805, _806, _807));
        float _813 = (_808 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_808);
        float _821 = (dot(vec3(_310, _311, _312), vec3(_813 * _805, _813 * _806, _813 * _807)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _830 = sqrt(((_806 * _806) + (_805 * _805)) + (_807 * _807)) / (_759 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _832 = _831 * 2.0;
        float _836 = (1.0 - _831) / (_831 + 1.0);
        float _3785 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _846 = ((((1.0 - _837) * (_832 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_832 + 1.0))) + _837) * _759;
        float _847 = _727 * 0.5;
        float _848 = _737 * 0.5;
        float _849 = _747 * 0.5;
        float _850 = dot(vec3(_847, _848, _849), vec3(_847, _848, _849));
        float _855 = (_850 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_850);
        float _863 = (dot(vec3(_310, _311, _312), vec3(_855 * _847, _855 * _848, _855 * _849)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _872 = sqrt(((_848 * _848) + (_847 * _847)) + (_849 * _849)) / (_760 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _874 = _873 * 2.0;
        float _878 = (1.0 - _873) / (_873 + 1.0);
        float _3818 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _888 = ((((1.0 - _879) * (_874 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_874 + 1.0))) + _879) * _760;
        _896 = _727;
        _898 = _726;
        _899 = _725;
        _900 = _737;
        _901 = _736;
        _902 = _735;
        _903 = _747;
        _904 = _746;
        _905 = _745;
        _906 = _760;
        _907 = _759;
        _908 = _758;
        _909 = cbModelParam._m0[36u].z * (isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0)));
        _910 = cbModelParam._m0[36u].z * (isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0)));
        _911 = cbModelParam._m0[36u].z * (isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0)));
    }
    else
    {
        _896 = _897;
        _898 = _897;
        _899 = _897;
        _900 = _897;
        _901 = _897;
        _902 = _897;
        _903 = _897;
        _904 = _897;
        _905 = _897;
        _906 = _897;
        _907 = _897;
        _908 = _897;
        _909 = 0.0;
        _910 = 0.0;
        _911 = 0.0;
    }
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _940 = fma(_565, cbModelParam._m0[30u].z, fma(_561, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _557));
        float _944 = fma(_565, cbModelParam._m0[31u].z, fma(_561, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _557));
        float _948 = fma(_565, cbModelParam._m0[32u].z, fma(_561, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _557));
        float _971 = _557 + _310;
        float _972 = _561 + _311;
        float _973 = _565 + _312;
        float _983 = fma(_973, cbModelParam._m0[30u].z, fma(_972, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _971)) - _940;
        float _984 = fma(_973, cbModelParam._m0[31u].z, fma(_972, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _971)) - _944;
        float _985 = fma(_973, cbModelParam._m0[32u].z, fma(_972, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _971)) - _948;
        float _989 = inversesqrt(dot(vec3(_983, _984, _985), vec3(_983, _984, _985)));
        float _1002 = ((_989 * _983) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_940 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1003 = ((_989 * _984) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_944 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1004 = ((_989 * _985) / cbModelParam._m0[35u].z) + ((((((_948 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        float _1039 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_1006.x + (-0.5));
        float _1041 = _1039 * (_1006.y + (-0.5));
        float _1042 = _1039 * (_1006.z + (-0.5));
        float _1049 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1013.x + (-0.5));
        float _1051 = _1049 * (_1013.y + (-0.5));
        float _1052 = _1049 * (_1013.z + (-0.5));
        float _1059 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1020.x + (-0.5));
        float _1061 = _1059 * (_1020.y + (-0.5));
        float _1062 = _1059 * (_1020.z + (-0.5));
        float _1069 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1027.x + (-0.5));
        float _1071 = _1069 * (_1027.y + (-0.5));
        float _1072 = _1069 * (_1027.z + (-0.5));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = _1040 * 0.5;
        float _1077 = _1050 * 0.5;
        float _1078 = _1060 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_310, _311, _312), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3881 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1103 + 1.0))) + _1108) * _1073;
        float _1118 = _1041 * 0.5;
        float _1119 = _1051 * 0.5;
        float _1120 = _1061 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_310, _311, _312), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3892 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3903 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3914 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_1145 + 1.0))) + _1150) * _1074;
        float _1160 = _1042 * 0.5;
        float _1161 = _1052 * 0.5;
        float _1162 = _1062 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_310, _311, _312), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3925 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _3936 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3947 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1187 + 1.0))) + _1192) * _1075;
        _1209 = _1042;
        _1210 = _1041;
        _1211 = _1040;
        _1212 = _1052;
        _1213 = _1051;
        _1214 = _1050;
        _1215 = _1062;
        _1216 = _1061;
        _1217 = _1060;
        _1218 = _1075;
        _1219 = _1074;
        _1220 = _1073;
        _1221 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
        _1222 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
        _1223 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
    }
    else
    {
        _1209 = _897;
        _1210 = _897;
        _1211 = _897;
        _1212 = _897;
        _1213 = _897;
        _1214 = _897;
        _1215 = _897;
        _1216 = _897;
        _1217 = _897;
        _1218 = _897;
        _1219 = _897;
        _1220 = _897;
        _1221 = 0.0;
        _1222 = 0.0;
        _1223 = 0.0;
    }
    float _1233 = (cbModelParam._m0[1u].x * (_1221 - _909)) + _909;
    float _1234 = (cbModelParam._m0[1u].x * (_1222 - _910)) + _910;
    float _1235 = (cbModelParam._m0[1u].x * (_1223 - _911)) + _911;
    float _1256 = fma(_1235, cbSceneParam._m0[89u].z, fma(_1234, cbSceneParam._m0[89u].y, _1233 * cbSceneParam._m0[89u].x));
    float _1259 = fma(_1235, cbSceneParam._m0[90u].z, fma(_1234, cbSceneParam._m0[90u].y, _1233 * cbSceneParam._m0[90u].x));
    float _1262 = fma(_1235, cbSceneParam._m0[91u].z, fma(_1234, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1233));
    float _1277 = _501 * 0.5;
    float _1278 = _502 * 0.5;
    float _1279 = _503 * 0.5;
    float _1280 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_1211, _1214, _1217, _1220));
    float _1283 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_1210, _1213, _1216, _1219));
    float _1286 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_1209, _1212, _1215, _1218));
    float _1320;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1293 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_896, _900, _903, _906));
        float _1297 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_898, _901, _904, _907));
        float _1301 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_899, _902, _905, _908));
        float _1308 = dot(vec4(cbModelParam._m0[39u]), vec4(_1277, _1278, _1279, 1.0));
        _1320 = dot(vec3(isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)), isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1308) ? 0.0 : (isnan(0.0) ? _1308 : max(0.0, _1308))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1320 = 1.0;
    }
    float _1331;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1322 = dot(vec4(cbModelParam._m0[40u]), vec4(_1277, _1278, _1279, 1.0));
        _1331 = dot(vec3(isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)), isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)), isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1322) ? 0.0 : (isnan(0.0) ? _1322 : max(0.0, _1322))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1331 = 1.0;
    }
    float _1335 = (_1331 * cbModelParam._m0[1u].x) + (_1320 * (1.0 - cbModelParam._m0[1u].x));
    float _1345 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _313);
    float _1346 = isnan(_1345) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1345 : min(cbModelParam._m0[25u].z, _1345));
    float _1428;
    float _1430;
    float _1432;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1395 = fma(_565, cbModelParam._m0[13u].z, fma(_561, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _557)) + cbModelParam._m0[13u].w;
        float _1399 = fma(_565, cbModelParam._m0[14u].z, fma(_561, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _557)) + cbModelParam._m0[14u].w;
        float _1403 = fma(_565, cbModelParam._m0[15u].z, fma(_561, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _557)) + cbModelParam._m0[15u].w;
        float _1406 = fma(_503, cbModelParam._m0[13u].z, fma(_502, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _501));
        float _1409 = fma(_503, cbModelParam._m0[14u].z, fma(_502, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _501));
        float _1412 = fma(_503, cbModelParam._m0[15u].z, fma(_502, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _501));
        float _1440;
        if (_1406 > 0.0)
        {
            _1440 = abs((1.0 - _1395) / _1406);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1395 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1440 = frontier_phi_19_17_ladder;
        }
        float _1616;
        if (_1409 > 0.0)
        {
            _1616 = abs((1.0 - _1399) / _1409);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1399 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1616 = frontier_phi_28_24_ladder;
        }
        float _1912;
        if (_1412 > 0.0)
        {
            _1912 = abs((1.0 - _1403) / _1412);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1403 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1912 = frontier_phi_40_35_ladder;
        }
        float _1914 = isnan(_1616) ? _1440 : (isnan(_1440) ? _1616 : min(_1440, _1616));
        float _1915 = isnan(_1912) ? _1914 : (isnan(_1914) ? _1912 : min(_1914, _1912));
        float _1919 = (_1915 * _1406) + _1395;
        float _1920 = (_1915 * _1409) + _1399;
        float _1921 = (_1915 * _1412) + _1403;
        float _1922 = _1915 * 9.9999997473787516355514526367188e-05;
        float _1924 = (-1.0) - _1922;
        float _1926 = _1922 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1921 > _1926) || ((_1921 < _1924) || ((_1920 > _1926) || ((_1920 < _1924) || ((_1919 < _1924) || (_1919 > _1926))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2066 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1921, cbModelParam._m0[9u].z, fma(_1920, cbModelParam._m0[9u].y, _1919 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1921, cbModelParam._m0[10u].z, fma(_1920, cbModelParam._m0[10u].y, _1919 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1921, cbModelParam._m0[11u].z, fma(_1920, cbModelParam._m0[11u].y, _1919 * cbModelParam._m0[11u].x))), _1346);
            frontier_phi_18_40_ladder = _2066.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2066.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2066.x * cbModelParam._m0[1u].y;
        }
        _1428 = frontier_phi_18_40_ladder_2;
        _1430 = frontier_phi_18_40_ladder_1;
        _1432 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1416 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_501, _502, _503), _1346);
        _1428 = _1416.x * cbModelParam._m0[1u].y;
        _1430 = _1416.y * cbModelParam._m0[1u].y;
        _1432 = _1416.z * cbModelParam._m0[1u].y;
    }
    float _1436 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _313);
    float _1437 = isnan(_1436) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1436 : min(cbModelParam._m0[25u].w, _1436));
    float _1530;
    float _1532;
    float _1534;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1494 = fma(_565, cbModelParam._m0[21u].z, fma(_561, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _557)) + cbModelParam._m0[21u].w;
        float _1498 = fma(_565, cbModelParam._m0[22u].z, fma(_561, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _557)) + cbModelParam._m0[22u].w;
        float _1502 = fma(_565, cbModelParam._m0[23u].z, fma(_561, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _557)) + cbModelParam._m0[23u].w;
        float _1505 = fma(_503, cbModelParam._m0[21u].z, fma(_502, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _501));
        float _1508 = fma(_503, cbModelParam._m0[22u].z, fma(_502, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _501));
        float _1511 = fma(_503, cbModelParam._m0[23u].z, fma(_502, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _501));
        float _1621;
        if (_1505 > 0.0)
        {
            _1621 = abs((1.0 - _1494) / _1505);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1494 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1621 = frontier_phi_30_26_ladder;
        }
        float _1939;
        if (_1508 > 0.0)
        {
            _1939 = abs((1.0 - _1498) / _1508);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1498 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1939 = frontier_phi_42_37_ladder;
        }
        float _2277;
        if (_1511 > 0.0)
        {
            _2277 = abs((1.0 - _1502) / _1511);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1502 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2277 = frontier_phi_52_49_ladder;
        }
        float _2279 = isnan(_1939) ? _1621 : (isnan(_1621) ? _1939 : min(_1621, _1939));
        float _2280 = isnan(_2277) ? _2279 : (isnan(_2279) ? _2277 : min(_2279, _2277));
        float _2284 = (_2280 * _1505) + _1494;
        float _2285 = (_2280 * _1508) + _1498;
        float _2286 = (_2280 * _1511) + _1502;
        float _2287 = _2280 * 9.9999997473787516355514526367188e-05;
        float _2288 = (-1.0) - _2287;
        float _2290 = _2287 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2286 > _2290) || ((_2286 < _2288) || ((_2285 > _2290) || ((_2285 < _2288) || ((_2284 < _2288) || (_2284 > _2290))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2408 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2286, cbModelParam._m0[17u].z, fma(_2285, cbModelParam._m0[17u].y, _2284 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2286, cbModelParam._m0[18u].z, fma(_2285, cbModelParam._m0[18u].y, _2284 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2286, cbModelParam._m0[19u].z, fma(_2285, cbModelParam._m0[19u].y, _2284 * cbModelParam._m0[19u].x))), _1437);
            frontier_phi_27_52_ladder = _2408.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2408.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2408.x * cbModelParam._m0[1u].z;
        }
        _1530 = frontier_phi_27_52_ladder_2;
        _1532 = frontier_phi_27_52_ladder_1;
        _1534 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1514 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_501, _502, _503), _1437);
        _1530 = _1514.x * cbModelParam._m0[1u].z;
        _1532 = _1514.y * cbModelParam._m0[1u].z;
        _1534 = _1514.z * cbModelParam._m0[1u].z;
    }
    float _1547 = (((_528 * _478) + _529) * _493) * ((cbModelParam._m0[1u].w * (_1530 - _1428)) + _1428);
    float _1549 = (((_528 * _480) + _529) * _493) * ((cbModelParam._m0[1u].w * (_1532 - _1430)) + _1430);
    float _1551 = (((_528 * _481) + _529) * _493) * ((cbModelParam._m0[1u].w * (_1534 - _1432)) + _1432);
    float _1554 = fma(_1551, cbSceneParam._m0[89u].z, fma(_1549, cbSceneParam._m0[89u].y, _1547 * cbSceneParam._m0[89u].x));
    float _1557 = fma(_1551, cbSceneParam._m0[90u].z, fma(_1549, cbSceneParam._m0[90u].y, _1547 * cbSceneParam._m0[90u].x));
    float _1560 = fma(_1551, cbSceneParam._m0[91u].z, fma(_1549, cbSceneParam._m0[91u].y, _1547 * cbSceneParam._m0[91u].x));
    float _1595 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1599 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1603 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1607 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1608 = _1595 / _1607;
    float _1609 = _1599 / _1607;
    float _1610 = _1603 / _1607;
    float _1757;
    float _1758;
    float _1759;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1637 = ((uint(_1610 > cbSceneParam._m0[59u].y) + uint(_1610 > cbSceneParam._m0[59u].x)) + uint(_1610 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1638 = _1637 + 43u;
        uint _1646 = _1637 + 44u;
        uint _1654 = _1637 + 45u;
        uint _1662 = _1637 + 46u;
        float _1673 = fma(_1607, cbSceneParam._m0[_1638].w, fma(_1603, cbSceneParam._m0[_1638].z, fma(_1599, cbSceneParam._m0[_1638].y, _1595 * cbSceneParam._m0[_1638].x)));
        float _1677 = fma(_1607, cbSceneParam._m0[_1646].w, fma(_1603, cbSceneParam._m0[_1646].z, fma(_1599, cbSceneParam._m0[_1646].y, _1595 * cbSceneParam._m0[_1646].x)));
        float _1685 = fma(_1607, cbSceneParam._m0[_1662].w, fma(_1603, cbSceneParam._m0[_1662].z, fma(_1599, cbSceneParam._m0[_1662].y, _1595 * cbSceneParam._m0[_1662].x)));
        float _1690 = cbSceneParam._m0[33u].z * _1685;
        float _1692 = cbSceneParam._m0[33u].w * _1685;
        float _1695 = fma(_1607, cbSceneParam._m0[_1654].w, fma(_1603, cbSceneParam._m0[_1654].z, fma(_1599, cbSceneParam._m0[_1654].y, _1595 * cbSceneParam._m0[_1654].x))) / _1685;
        float _1743 = (cbSceneParam._m0[33u].x - sqrt(((_1609 * _1609) + (_1608 * _1608)) + (_1610 * _1610))) * cbSceneParam._m0[33u].y;
        float _4073 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1750 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1690 + _1673) / _1685, (_1692 + _1677) / _1685), _1695), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1692 + _1673) / _1685, (_1677 - _1690) / _1685), _1695), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1673 - _1690) / _1685, (_1677 - _1692) / _1685), _1695), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1673 - _1692) / _1685, (_1690 + _1677) / _1685), _1695), 0.0)).x), vec4(0.25)));
        _1757 = 1.0 - (_1750 * cbSceneParam._m0[34u].x);
        _1758 = 1.0 - (_1750 * cbSceneParam._m0[34u].y);
        _1759 = 1.0 - (_1750 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1757 = 1.0;
        _1758 = 1.0;
        _1759 = 1.0;
    }
    float _1823;
    float _1825;
    float _1827;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1811 = fma(_1607, cbSceneParam._m0[63u].w, fma(_1603, cbSceneParam._m0[63u].z, fma(_1599, cbSceneParam._m0[63u].y, _1595 * cbSceneParam._m0[63u].x)));
        float _1812 = fma(_1607, cbSceneParam._m0[60u].w, fma(_1603, cbSceneParam._m0[60u].z, fma(_1599, cbSceneParam._m0[60u].y, _1595 * cbSceneParam._m0[60u].x))) / _1811;
        float _1813 = fma(_1607, cbSceneParam._m0[61u].w, fma(_1603, cbSceneParam._m0[61u].z, fma(_1599, cbSceneParam._m0[61u].y, _1595 * cbSceneParam._m0[61u].x))) / _1811;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1812 >= cbSceneParam._m0[64u].x) && (_1813 >= cbSceneParam._m0[64u].y)) && (_1812 <= cbSceneParam._m0[64u].z)) && (_1813 <= cbSceneParam._m0[64u].w))
        {
            float _1952 = fma(_1607, cbSceneParam._m0[62u].w, fma(_1603, cbSceneParam._m0[62u].z, fma(_1599, cbSceneParam._m0[62u].y, _1595 * cbSceneParam._m0[62u].x))) / _1811;
            float _1956 = isnan(cbSceneParam._m0[41u].w) ? _1952 : (isnan(_1952) ? cbSceneParam._m0[41u].w : max(_1952, cbSceneParam._m0[41u].w));
            float _1999 = (cbSceneParam._m0[33u].x - sqrt(((_1609 * _1609) + (_1608 * _1608)) + (_1610 * _1610))) * cbSceneParam._m0[33u].y;
            float _4089 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
            float _2006 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1812, cbSceneParam._m0[33u].w + _1813), _1956), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1812, _1813 - cbSceneParam._m0[33u].z), _1956), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1812 - cbSceneParam._m0[33u].z, _1813 - cbSceneParam._m0[33u].w), _1956), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1812 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1813), _1956), 0.0)).x), vec4(0.25)));
            float _2010 = 1.0 - (_2006 * cbSceneParam._m0[34u].x);
            float _2011 = 1.0 - (_2006 * cbSceneParam._m0[34u].y);
            float _2012 = 1.0 - (_2006 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2011) ? _1758 : (isnan(_1758) ? _2011 : min(_1758, _2011));
            frontier_phi_39_38_ladder_1 = isnan(_2010) ? _1757 : (isnan(_1757) ? _2010 : min(_1757, _2010));
            frontier_phi_39_38_ladder_2 = isnan(_2012) ? _1759 : (isnan(_1759) ? _2012 : min(_1759, _2012));
        }
        else
        {
            frontier_phi_39_38_ladder = _1758;
            frontier_phi_39_38_ladder_1 = _1757;
            frontier_phi_39_38_ladder_2 = _1759;
        }
        _1823 = frontier_phi_39_38_ladder_1;
        _1825 = frontier_phi_39_38_ladder;
        _1827 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1823 = _1757;
        _1825 = _1758;
        _1827 = _1759;
    }
    uvec4 _1832 = floatBitsToUint(cbInstanceData._m0[_452 + 5u]);
    uint _1834 = _1832.x * 14u;
    uint _1835 = _1834 + 13u;
    float _1842 = _493 + (-1.0);
    float _1847 = (cbLight._m0[_1835].x * _1842) + 1.0;
    float _1848 = (cbLight._m0[_1835].y * _1842) + 1.0;
    float _1849 = (cbLight._m0[_1835].z * _1842) + 1.0;
    float _1850 = (cbLight._m0[_1835].w * _1842) + 1.0;
    uint _1851 = _1834 + 5u;
    float _1857 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
    uint _1861 = _1834 + 4u;
    float _1871 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
    uint _1875 = _1834 | 1u;
    float _1886 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_310, _311, _312));
    float _1889 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_310, _311, _312));
    float _4125 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _4136 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1894 = (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * 0.3183098733425140380859375;
    float _1896 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * 0.3183098733425140380859375;
    float _1903 = ((cbLight._m0[_1851].x * _1857) * _1896) + (((cbLight._m0[_1861].x * _1823) * _1871) * _1894);
    float _1904 = ((_1857 * cbLight._m0[_1851].y) * _1896) + (((cbLight._m0[_1861].y * _1825) * _1871) * _1894);
    float _1905 = ((_1857 * cbLight._m0[_1851].z) * _1896) + (((cbLight._m0[_1861].z * _1827) * _1871) * _1894);
    uvec4 _1909 = floatBitsToUint(cbLight._m0[_1834 + 12u]);
    bool _1911 = _1909.x == 0u;
    float _2013;
    float _2015;
    float _2017;
    if (_1911)
    {
        _2013 = _1903;
        _2015 = _1904;
        _2017 = _1905;
    }
    else
    {
        uint _2021 = _1834 + 6u;
        float _2037 = (dot(vec3(cbLight._m0[_1834 + 2u].xyz), vec3(_310, _311, _312)) * 0.5) + 0.5;
        float _2038 = _2037 * _2037;
        float _4147 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
        float _2039 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _2040 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
        _2013 = (((cbLight._m0[_2021].x * 0.3183098733425140380859375) * _2039) * _2040) + _1903;
        _2015 = (((cbLight._m0[_2021].y * 0.3183098733425140380859375) * _2039) * _2040) + _1904;
        _2017 = (((cbLight._m0[_2021].z * 0.3183098733425140380859375) * _2039) * _2040) + _1905;
    }
    bool _2020 = _1909.y == 0u;
    float _2075;
    float _2077;
    float _2079;
    if (_2020)
    {
        _2075 = _2013;
        _2077 = _2015;
        _2079 = _2017;
    }
    else
    {
        uint _2248 = _1834 + 7u;
        float _2264 = (dot(vec3(cbLight._m0[_1834 + 3u].xyz), vec3(_310, _311, _312)) * 0.5) + 0.5;
        float _2265 = _2264 * _2264;
        float _4163 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2266 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _2267 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _2075 = (((cbLight._m0[_2248].x * 0.3183098733425140380859375) * _2266) * _2267) + _2013;
        _2077 = (((cbLight._m0[_2248].y * 0.3183098733425140380859375) * _2266) * _2267) + _2015;
        _2079 = (((cbLight._m0[_2248].z * 0.3183098733425140380859375) * _2266) * _2267) + _2017;
    }
    uint _2082 = _1834 + 8u;
    float _2095 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1834].w)) * _313) * 0.949999988079071044921875);
    float _2096 = _2095 * _2095;
    float _2097 = cbLight._m0[_1834].x + _391;
    float _2098 = cbLight._m0[_1834].y + _392;
    float _2099 = cbLight._m0[_1834].z + _393;
    float _2103 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
    float _2104 = _2103 * _2097;
    float _2105 = _2103 * _2098;
    float _2106 = _2103 * _2099;
    float _2107 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_1834].xyz));
    float _4179 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2110 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _4190 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _2111 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _2112 = dot(vec3(_310, _311, _312), vec3(_2104, _2105, _2106));
    float _4201 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2115 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _2116 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_2104, _2105, _2106));
    float _4212 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2120 = _2096 * _2096;
    float _2124 = ((_2115 * _2115) * (_2120 + (-1.0))) + 1.0;
    float _2132 = exp2(log2(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * 5.0);
    float _2133 = 0.959999978542327880859375 - _475;
    float _2135 = 0.959999978542327880859375 - _476;
    float _2136 = 0.959999978542327880859375 - _477;
    float _2143 = 1.0 - _2096;
    float _2154 = (0.5 / (((_2111 * ((_2110 * _2143) + _2096)) + 9.9999999392252902907785028219223e-09) + (((_2111 * _2143) + _2096) * _2110))) * _2110;
    float _4223 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2156 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2120 / ((_2124 * _2124) * 3.141590118408203125));
    uint _2170 = _1834 + 9u;
    float _2181 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1875].w)) * _313) * 0.949999988079071044921875);
    float _2182 = _2181 * _2181;
    float _2183 = cbLight._m0[_1875].x + _391;
    float _2184 = cbLight._m0[_1875].y + _392;
    float _2185 = cbLight._m0[_1875].z + _393;
    float _2189 = inversesqrt(dot(vec3(_2183, _2184, _2185), vec3(_2183, _2184, _2185)));
    float _2190 = _2189 * _2183;
    float _2191 = _2189 * _2184;
    float _2192 = _2189 * _2185;
    float _2193 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_1875].xyz));
    float _4234 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2196 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _2197 = dot(vec3(_310, _311, _312), vec3(_2190, _2191, _2192));
    float _4245 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2200 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _2201 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_2190, _2191, _2192));
    float _4256 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2205 = _2182 * _2182;
    float _2209 = ((_2200 * _2200) * (_2205 + (-1.0))) + 1.0;
    float _2216 = exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0);
    float _2223 = 1.0 - _2182;
    float _2233 = (0.5 / (((_2111 * ((_2196 * _2223) + _2182)) + 9.9999999392252902907785028219223e-09) + (((_2111 * _2223) + _2182) * _2196))) * _2196;
    float _4267 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2235 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2205 / ((_2209 * _2209) * 3.141590118408203125));
    float _2245 = (((((_2216 * _2133) + _478) * cbLight._m0[_2170].x) * _2235) * _1857) + ((((cbLight._m0[_2082].x * _1823) * ((_2132 * _2133) + _478)) * _2156) * _1871);
    float _2246 = (((((_2216 * _2135) + _480) * cbLight._m0[_2170].y) * _2235) * _1857) + ((((cbLight._m0[_2082].y * _1825) * ((_2132 * _2135) + _480)) * _2156) * _1871);
    float _2247 = (((((_2216 * _2136) + _481) * cbLight._m0[_2170].z) * _2235) * _1857) + ((((cbLight._m0[_2082].z * _1827) * ((_2132 * _2136) + _481)) * _2156) * _1871);
    float _2303;
    float _2305;
    float _2307;
    if (_1911)
    {
        _2303 = _2245;
        _2305 = _2246;
        _2307 = _2247;
    }
    else
    {
        uint _2309 = _1834 + 2u;
        uint _2313 = _1834 + 10u;
        float _2327 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2309].w)) * _313) * 0.949999988079071044921875);
        float _2328 = _2327 * _2327;
        float _2329 = cbLight._m0[_2309].x + _391;
        float _2330 = cbLight._m0[_2309].y + _392;
        float _2331 = cbLight._m0[_2309].z + _393;
        float _2335 = inversesqrt(dot(vec3(_2329, _2330, _2331), vec3(_2329, _2330, _2331)));
        float _2336 = _2335 * _2329;
        float _2337 = _2335 * _2330;
        float _2338 = _2335 * _2331;
        float _2339 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_2309].xyz));
        float _4278 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2342 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2343 = dot(vec3(_310, _311, _312), vec3(_2336, _2337, _2338));
        float _4289 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2346 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2347 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_2336, _2337, _2338));
        float _4300 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2351 = _2328 * _2328;
        float _2355 = ((_2346 * _2346) * (_2351 + (-1.0))) + 1.0;
        float _2362 = exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0);
        float _2369 = 1.0 - _2328;
        float _2379 = (0.5 / (((_2111 * ((_2342 * _2369) + _2328)) + 9.9999999392252902907785028219223e-09) + (((_2111 * _2369) + _2328) * _2342))) * _2342;
        float _4311 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2381 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2351 / ((_2355 * _2355) * 3.141590118408203125));
        float _2382 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
        _2303 = (((((_2362 * _2133) + _478) * cbLight._m0[_2313].x) * _2381) * _2382) + _2245;
        _2305 = (((((_2362 * _2135) + _480) * cbLight._m0[_2313].y) * _2381) * _2382) + _2246;
        _2307 = (((((_2362 * _2136) + _481) * cbLight._m0[_2313].z) * _2381) * _2382) + _2247;
    }
    float _2413;
    float _2415;
    float _2417;
    if (_2020)
    {
        _2413 = _2303;
        _2415 = _2305;
        _2417 = _2307;
    }
    else
    {
        uint _2424 = _1834 + 3u;
        uint _2428 = _1834 + 11u;
        float _2442 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2424].w)) * _313) * 0.949999988079071044921875);
        float _2443 = _2442 * _2442;
        float _2444 = cbLight._m0[_2424].x + _391;
        float _2445 = cbLight._m0[_2424].y + _392;
        float _2446 = cbLight._m0[_2424].z + _393;
        float _2450 = inversesqrt(dot(vec3(_2444, _2445, _2446), vec3(_2444, _2445, _2446)));
        float _2451 = _2450 * _2444;
        float _2452 = _2450 * _2445;
        float _2453 = _2450 * _2446;
        float _2454 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_2424].xyz));
        float _4327 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2457 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _2458 = dot(vec3(_310, _311, _312), vec3(_2451, _2452, _2453));
        float _4338 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2461 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2462 = dot(vec3(cbLight._m0[_2424].xyz), vec3(_2451, _2452, _2453));
        float _4349 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2466 = _2443 * _2443;
        float _2470 = ((_2461 * _2461) * (_2466 + (-1.0))) + 1.0;
        float _2477 = exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0);
        float _2484 = 1.0 - _2443;
        float _2494 = (0.5 / (((_2111 * ((_2457 * _2484) + _2443)) + 9.9999999392252902907785028219223e-09) + (((_2111 * _2484) + _2443) * _2457))) * _2457;
        float _4360 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2496 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2466 / ((_2470 * _2470) * 3.141590118408203125));
        float _2497 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _2413 = (((((_2477 * _2133) + _478) * cbLight._m0[_2428].x) * _2496) * _2497) + _2303;
        _2415 = (((((_2477 * _2135) + _480) * cbLight._m0[_2428].y) * _2496) * _2497) + _2305;
        _2417 = (((((_2477 * _2136) + _481) * cbLight._m0[_2428].z) * _2496) * _2497) + _2307;
    }
    float _2562;
    float _2564;
    float _2566;
    float _2568;
    float _2570;
    float _2572;
    if (_1832.y == 0u)
    {
        uvec4 _2518 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2519 = _2518.x;
        uint _2530 = uint((float(_2518.y) * floor(float(uint(cbSceneParam._m0[85u].y * _413) / _2519))) + floor(float(uint(cbSceneParam._m0[85u].x * _412) / _2519)));
        float _2540 = (log2(_1610 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2541 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        uint _2544 = uint(isnan(14.0) ? _2541 : (isnan(_2541) ? 14.0 : min(_2541, 14.0)));
        uvec4 _2549 = texelFetch(g_lightClusterGridBuffer, int(((_2544 << 2u) + (_2530 << 6u)) >> 2u));
        uint _2550 = _2549.x;
        uint _2551 = _2518.z;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        if (((((1u << ((_2551 >> 4u) & 15u)) + 4294967295u) & _2550) == 0u) || ((_2551 & 240u) == 0u))
        {
            _2629 = 0.0;
            _2631 = 0.0;
            _2633 = 0.0;
            _2635 = 0.0;
            _2637 = 0.0;
            _2639 = 0.0;
        }
        else
        {
            float _2630;
            float _2632;
            float _2634;
            float _2636;
            float _2638;
            float _2640;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            float _2786 = 0.0;
            uint _2787 = 0u;
            uint _2796;
            bool _2797;
            for (;;)
            {
                _2796 = texelFetch(g_lightClassification, int((((_2544 << 5u) + (_2530 << 9u)) + (_2787 << 2u)) >> 2u)).x;
                _2797 = _2796 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2797)
                {
                    frontier_phi_73_pred = _2786;
                    frontier_phi_73_pred_1 = _2785;
                    frontier_phi_73_pred_2 = _2784;
                    frontier_phi_73_pred_3 = _2783;
                    frontier_phi_73_pred_4 = _2782;
                    frontier_phi_73_pred_5 = _2781;
                }
                else
                {
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    uint _2932;
                    _2926 = _2781;
                    _2927 = _2782;
                    _2928 = _2783;
                    _2929 = _2784;
                    _2930 = _2785;
                    _2931 = _2786;
                    _2932 = _2796;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    for (;;)
                    {
                        uint _2936 = uint(findLSB(_2932)) + (_2787 << 5u);
                        uint _2933 = (_2932 + 4294967295u) & _2932;
                        uint _2938 = _2936 * 48u;
                        vec4 _2952 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2938)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 3u)).x));
                        uint _2958 = (_2936 * 48u) + 4u;
                        vec4 _2971 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2958)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 3u)).x));
                        uint _2977 = (_2936 * 48u) + 8u;
                        vec3 _2988 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2977)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 2u)).x));
                        float _2992 = _2952.x - _1608;
                        float _2993 = _2952.y - _1609;
                        float _2994 = _2952.z - _1610;
                        float _2995 = dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994));
                        float _2998 = inversesqrt(_2995);
                        float _2999 = _2998 * _2992;
                        float _3000 = _2998 * _2993;
                        float _3001 = _2998 * _2994;
                        float _3002 = dot(vec3(_433, _436, _439), vec3(_2999, _3000, _3001));
                        float _3007 = 1.0 - (_2995 * _2952.w);
                        float _4386 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3008 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                        float _3009 = sqrt(_2995) * _2971.w;
                        float _3012 = 1.39999997615814208984375 / (_3009 + 1.39999997615814208984375);
                        float _3013 = _3012 * _3012;
                        float _3016 = ((1.0 - _3013) * _3002) + _3013;
                        float _3019 = _3009 * _3009;
                        float _3023 = ((isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0))) * _3008) / ((_3019 * 0.699999988079071044921875) + 1.0);
                        float _3027 = (-0.0) - _1608;
                        float _3028 = (-0.0) - _1609;
                        float _3029 = (-0.0) - _1610;
                        float _3033 = inversesqrt(dot(vec3(_3027, _3028, _3029), vec3(_3027, _3028, _3029)));
                        float _3034 = _3033 * _3027;
                        float _3035 = _3033 * _3028;
                        float _3036 = _3033 * _3029;
                        float _3043 = exp2(log2(1.0 / ((_3019 * 3.5) + 5.0)) * 0.25);
                        float _3044 = 1.0 - _509;
                        float _3051 = sqrt(1.0 - ((1.0 - (_3044 * _3044)) * (1.0 - (_3043 * _3043))));
                        float _3052 = _3051 * _3051;
                        float _3053 = _3052 * _3052;
                        float _3054 = _3034 + _2999;
                        float _3055 = _3035 + _3000;
                        float _3056 = _3036 + _3001;
                        float _3060 = inversesqrt(dot(vec3(_3054, _3055, _3056), vec3(_3054, _3055, _3056)));
                        float _3064 = dot(vec3(_433, _436, _439), vec3(_3034, _3035, _3036));
                        float _4402 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3067 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                        float _3068 = dot(vec3(_433, _436, _439), vec3(_3060 * _3054, _3060 * _3055, _3060 * _3056));
                        float _4413 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3071 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                        float _3075 = ((_3071 * _3071) * (_3053 + (-1.0))) + 1.0;
                        float _3076 = _3012 * _3052;
                        float _3077 = _3076 * _3076;
                        float _3080 = ((1.0 - _3077) * _3002) + _3077;
                        float _4424 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3081 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                        float _3082 = 1.0 - _3052;
                        float _3092 = (0.5 / (((_3081 * ((_3067 * _3082) + _3052)) + 9.9999999392252902907785028219223e-09) + (((_3081 * _3082) + _3052) * _3067))) * _3081;
                        float _4435 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3103 = (((_3053 * 3.1415927410125732421875) * (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) / ((_3075 * _3075) * ((_3019 * 2.1991131305694580078125) + 3.141590118408203125))) * _3008;
                        _2856 = (_3023 * _2971.x) + _2929;
                        _2857 = (_3023 * _2971.y) + _2930;
                        _2858 = (_3023 * _2971.z) + _2931;
                        _2853 = (_3103 * _2988.x) + _2926;
                        _2854 = (_3103 * _2988.y) + _2927;
                        _2855 = (_3103 * _2988.z) + _2928;
                        if (_2933 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2926 = _2853;
                            _2927 = _2854;
                            _2928 = _2855;
                            _2929 = _2856;
                            _2930 = _2857;
                            _2931 = _2858;
                            _2932 = _2933;
                        }
                    }
                    frontier_phi_73_pred = _2858;
                    frontier_phi_73_pred_1 = _2857;
                    frontier_phi_73_pred_2 = _2856;
                    frontier_phi_73_pred_3 = _2855;
                    frontier_phi_73_pred_4 = _2854;
                    frontier_phi_73_pred_5 = _2853;
                }
                _2640 = frontier_phi_73_pred;
                _2638 = frontier_phi_73_pred_1;
                _2636 = frontier_phi_73_pred_2;
                _2634 = frontier_phi_73_pred_3;
                _2632 = frontier_phi_73_pred_4;
                _2630 = frontier_phi_73_pred_5;
                uint _2788 = _2787 + 1u;
                if (_2788 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2781 = _2630;
                    _2782 = _2632;
                    _2783 = _2634;
                    _2784 = _2636;
                    _2785 = _2638;
                    _2786 = _2640;
                    _2787 = _2788;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2629 = _2630;
            _2631 = _2632;
            _2633 = _2634;
            _2635 = _2636;
            _2637 = _2638;
            _2639 = _2640;
        }
        uvec4 _2643 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2644 = _2643.z;
        uint _2646 = (_2644 >> 8u) & 15u;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        if (((4294967295u << _2646) & _2550) == 0u)
        {
            _2749 = _2629;
            _2751 = _2631;
            _2753 = _2633;
            _2755 = _2635;
            _2757 = _2637;
            _2759 = _2639;
        }
        else
        {
            float _2774 = inversesqrt(dot(vec3(_1608, _1609, _1610), vec3(_1608, _1609, _1610)));
            float _2775 = _2774 * _1608;
            float _2776 = _2774 * _1609;
            float _2777 = _2774 * _1610;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2646 < ((_2644 >> 12u) & 15u))
            {
                float _2750;
                float _2752;
                float _2754;
                float _2756;
                float _2758;
                float _2760;
                float _2909 = _2629;
                float _2910 = _2631;
                float _2911 = _2633;
                float _2912 = _2635;
                float _2913 = _2637;
                float _2914 = _2639;
                uint _2915 = _2646;
                uint _2924;
                bool _2925;
                for (;;)
                {
                    _2924 = texelFetch(g_lightClassification, int((((_2544 << 5u) + (_2530 << 9u)) + (_2915 << 2u)) >> 2u)).x;
                    _2925 = _2924 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2925)
                    {
                        frontier_phi_84_pred = _2913;
                        frontier_phi_84_pred_1 = _2912;
                        frontier_phi_84_pred_2 = _2911;
                        frontier_phi_84_pred_3 = _2910;
                        frontier_phi_84_pred_4 = _2909;
                        frontier_phi_84_pred_5 = _2914;
                    }
                    else
                    {
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3130 = _2909;
                        float _3131 = _2910;
                        float _3132 = _2911;
                        float _3133 = _2912;
                        float _3134 = _2913;
                        float _3135 = _2914;
                        uint _3136 = _2924;
                        uint _3137;
                        vec4 _3162;
                        float _3163;
                        vec4 _3178;
                        vec3 _3190;
                        vec4 _3206;
                        vec4 _3222;
                        float _3269;
                        bool _3270;
                        for (;;)
                        {
                            uint _3147 = ((_2915 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3136));
                            _3137 = (_3136 + 4294967295u) & _3136;
                            uint _3149 = _3147 * 40u;
                            _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            _3163 = _3162.w;
                            uint _3165 = (_3147 * 40u) + 4u;
                            _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3180 = (_3147 * 40u) + 8u;
                            _3190 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x));
                            uint _3193 = (_3147 * 40u) + 16u;
                            _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            uint _3209 = (_3147 * 40u) + 20u;
                            _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            uint _3225 = (_3147 * 40u) + 24u;
                            vec4 _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            uint _3244 = (_3147 * 40u) + 28u;
                            vec4 _3257 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 3u)).x));
                            _3269 = fma(_1610, _3257.z, fma(_1609, _3257.y, _3257.x * _1608)) + _3257.w;
                            _3270 = !((fma(_1610, _3238.z, fma(_1609, _3238.y, _3238.x * _1608)) + _3238.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3270)
                            {
                                float _3297 = _3162.x - _1608;
                                float _3298 = _3162.y - _1609;
                                float _3299 = _3162.z - _1610;
                                float _3300 = dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299));
                                float _3303 = inversesqrt(_3300);
                                float _3304 = _3303 * _3297;
                                float _3305 = _3303 * _3298;
                                float _3306 = _3303 * _3299;
                                float _3310 = 1.0 - (_3300 / (_3163 * _3163));
                                float _4446 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3311 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3315 = sqrt(_3300) * _3178.w;
                                float _3317 = 1.39999997615814208984375 / (_3315 + 1.39999997615814208984375);
                                float _3318 = _3317 * _3317;
                                float _3321 = ((1.0 - _3318) * dot(vec3(_3304, _3305, _3306), vec3(_433, _436, _439))) + _3318;
                                float _3324 = _3315 * _3315;
                                float _3328 = (fma(_1610, _3206.z, fma(_1609, _3206.y, _3206.x * _1608)) + _3206.w) / _3269;
                                float _3329 = (fma(_1610, _3222.z, fma(_1609, _3222.y, _3222.x * _1608)) + _3222.w) / _3269;
                                float _3333 = 1.0 - dot(vec2(_3328, _3329), vec2(_3328, _3329));
                                float _4462 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3334 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                                float _3335 = _3334 * (((isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0))) * _3311) / ((_3324 * 0.699999988079071044921875) + 1.0));
                                float _3347 = exp2(log2(1.0 / ((_3324 * 3.5) + 5.0)) * 0.25);
                                float _3348 = 1.0 - _509;
                                float _3355 = sqrt(1.0 - ((1.0 - (_3348 * _3348)) * (1.0 - (_3347 * _3347))));
                                float _3356 = _3355 * _3355;
                                float _3357 = _3356 * _3356;
                                float _3358 = _3304 - _2775;
                                float _3359 = _3305 - _2776;
                                float _3360 = _3306 - _2777;
                                float _3364 = inversesqrt(dot(vec3(_3358, _3359, _3360), vec3(_3358, _3359, _3360)));
                                float _3368 = dot(vec3(_433, _436, _439), vec3((-0.0) - _2775, (-0.0) - _2776, (-0.0) - _2777));
                                float _4473 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3371 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                                float _3372 = dot(vec3(_433, _436, _439), vec3(_3364 * _3358, _3364 * _3359, _3364 * _3360));
                                float _4484 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3375 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                                float _3379 = ((_3375 * _3375) * (_3357 + (-1.0))) + 1.0;
                                float _3380 = _3317 * _3356;
                                float _3381 = _3380 * _3380;
                                float _3387 = ((1.0 - _3381) * dot(vec3(_433, _436, _439), vec3(_3304, _3305, _3306))) + _3381;
                                float _4495 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3388 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3389 = 1.0 - _3356;
                                float _3399 = (0.5 / (((_3388 * ((_3371 * _3389) + _3356)) + 9.9999999392252902907785028219223e-09) + (((_3388 * _3389) + _3356) * _3371))) * _3388;
                                float _4506 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                                float _3409 = (_3334 * _3311) * (((_3357 * 3.1415927410125732421875) * (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) / ((_3379 * _3379) * ((_3324 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3335 * _3178.y;
                                frontier_phi_90_pred_1 = _3335 * _3178.x;
                                frontier_phi_90_pred_2 = _3409 * _3190.z;
                                frontier_phi_90_pred_3 = _3409 * _3190.y;
                                frontier_phi_90_pred_4 = _3409 * _3190.x;
                                frontier_phi_90_pred_5 = _3335 * _3178.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3417 = frontier_phi_90_pred;
                            _3416 = frontier_phi_90_pred_1;
                            _3415 = frontier_phi_90_pred_2;
                            _3414 = frontier_phi_90_pred_3;
                            _3413 = frontier_phi_90_pred_4;
                            _3418 = frontier_phi_90_pred_5;
                            _3120 = _3416 + _3133;
                            _3121 = _3417 + _3134;
                            _3122 = _3418 + _3135;
                            _3117 = _3413 + _3130;
                            _3118 = _3414 + _3131;
                            _3119 = _3415 + _3132;
                            if (_3137 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3130 = _3117;
                                _3131 = _3118;
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3121;
                                _3135 = _3122;
                                _3136 = _3137;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3121;
                        frontier_phi_84_pred_1 = _3120;
                        frontier_phi_84_pred_2 = _3119;
                        frontier_phi_84_pred_3 = _3118;
                        frontier_phi_84_pred_4 = _3117;
                        frontier_phi_84_pred_5 = _3122;
                    }
                    _2758 = frontier_phi_84_pred;
                    _2756 = frontier_phi_84_pred_1;
                    _2754 = frontier_phi_84_pred_2;
                    _2752 = frontier_phi_84_pred_3;
                    _2750 = frontier_phi_84_pred_4;
                    _2760 = frontier_phi_84_pred_5;
                    uint _2916 = _2915 + 1u;
                    if (_2916 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2909 = _2750;
                        _2910 = _2752;
                        _2911 = _2754;
                        _2912 = _2756;
                        _2913 = _2758;
                        _2914 = _2760;
                        _2915 = _2916;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2760;
                frontier_phi_65_66_ladder_1 = _2756;
                frontier_phi_65_66_ladder_2 = _2758;
                frontier_phi_65_66_ladder_3 = _2752;
                frontier_phi_65_66_ladder_4 = _2750;
                frontier_phi_65_66_ladder_5 = _2754;
            }
            else
            {
                frontier_phi_65_66_ladder = _2639;
                frontier_phi_65_66_ladder_1 = _2635;
                frontier_phi_65_66_ladder_2 = _2637;
                frontier_phi_65_66_ladder_3 = _2631;
                frontier_phi_65_66_ladder_4 = _2629;
                frontier_phi_65_66_ladder_5 = _2633;
            }
            _2749 = frontier_phi_65_66_ladder_4;
            _2751 = frontier_phi_65_66_ladder_3;
            _2753 = frontier_phi_65_66_ladder_5;
            _2755 = frontier_phi_65_66_ladder_1;
            _2757 = frontier_phi_65_66_ladder_2;
            _2759 = frontier_phi_65_66_ladder;
        }
        float _2764 = isnan(1.0) ? _493 : (isnan(_493) ? 1.0 : min(_493, 1.0));
        _2562 = (_2764 * _2755) + _2075;
        _2564 = (_2764 * _2757) + _2077;
        _2566 = (_2764 * _2759) + _2079;
        _2568 = ((_2749 * _478) * _2764) + _2413;
        _2570 = ((_2751 * _480) * _2764) + _2415;
        _2572 = ((_2753 * _481) * _2764) + _2417;
    }
    else
    {
        _2562 = _2075;
        _2564 = _2077;
        _2566 = _2079;
        _2568 = _2413;
        _2570 = _2415;
        _2572 = _2417;
    }
    float _4522 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _4533 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _4544 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _2589 = ((isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_2562 + ((isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))) * _493))) + ((_2568 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _1335)) * cbPerFrame._m0[3u].x);
    float _2590 = ((isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2564 + ((isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0))) * _493))) + ((_2570 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _1335)) * cbPerFrame._m0[3u].x);
    float _2591 = ((isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2566 + ((isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))) * _493))) + ((_2572 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _1335)) * cbPerFrame._m0[3u].x);
    uint _2592 = _452 + 6u;
    float _2600 = _412 / cbSceneParam._m0[86u].x;
    float _2601 = _413 / cbSceneParam._m0[86u].y;
    vec4 _2615 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2600, _2601, (log2((isnan(cbSceneParam._m0[77u].w) ? _333 : (isnan(_333) ? cbSceneParam._m0[77u].w : min(_333, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2617 = _2615.x;
    float _2618 = _2615.y;
    float _2619 = _2615.z;
    float _2620 = _2615.w;
    float _2691;
    float _2693;
    float _2695;
    float _2697;
    if (_333 > cbSceneParam._m0[78u].w)
    {
        float _2654 = isnan(_333) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _333 : min(cbSceneParam._m0[80u].w, _333));
        float _2655 = _2654 / _333;
        float _2666 = _2655 * _384;
        float _2667 = _385 * _2655;
        float _2668 = (-0.0) - _2667;
        float _2669 = _2655 * _386;
        float _2671 = (cbSceneParam._m0[77u].w * _2668) / _2654;
        float _2672 = _2671 + cbSceneParam._m0[79u].w;
        float _2673 = cbSceneParam._m0[79u].w - _2667;
        float _2679 = sqrt(((_2666 * _2666) + (_2667 * _2667)) + (_2669 * _2669));
        float _2682 = (1.0 - (cbSceneParam._m0[77u].w / _2654)) * _2679;
        float _2687 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2689 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2866;
        if (abs((_2668 - _2671) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2866 = ((((_2672 > 0.0) ? exp2(_2687 * _2672) : (2.0 - exp2(_2689 * _2672))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2682;
        }
        else
        {
            float _2810 = 1.0 / cbSceneParam._m0[80u].x;
            float _2811 = isnan(_2673) ? _2672 : (isnan(_2672) ? _2673 : max(_2672, _2673));
            float _2812 = isnan(_2673) ? _2672 : (isnan(_2672) ? _2673 : min(_2672, _2673));
            float _2821 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : min(_2811, 0.0));
            float _2822 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : min(_2812, 0.0));
            _2866 = ((abs(_2679 / _2668) * cbSceneParam._m0[80u].y) * ((((_2821 - _2822) * 2.0) - ((exp2(_2687 * (isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0)))) - exp2(_2687 * (isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0))))) * _2810)) - ((exp2(_2689 * _2821) - exp2(_2689 * _2822)) * _2810))) + (_2682 * cbSceneParam._m0[80u].z);
        }
        vec4 _2868 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2600, _2601, 1.0), 0.0);
        float _2877 = exp2((_2866 * (-1.44269502162933349609375)) * (1.0 - _2868.w));
        float _2878 = log2(_2877);
        float _2894 = log2(_2620);
        _2691 = (exp2(_2894 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].x)) * _2868.x) / cbSceneParam._m0[78u].x)) + _2617;
        _2693 = (exp2(_2894 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].y)) * _2868.y) / cbSceneParam._m0[78u].y)) + _2618;
        _2695 = (exp2(_2894 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].z)) * _2868.z) / cbSceneParam._m0[78u].z)) + _2619;
        _2697 = _2877 * _2620;
    }
    else
    {
        _2691 = _2617;
        _2693 = _2618;
        _2695 = _2619;
        _2697 = _2620;
    }
    bool _2904;
    vec4 _2707;
    vec4 _2729;
    float _2731;
    float _2735;
    float _2736;
    float _2737;
    float _2738;
    bool _2748;
    for (;;)
    {
        _2707 = cbMatDynParam._m0[0u];
        float _2709 = roundEven(_2707.y);
        bool _2710 = _2709 == 3.0;
        float _2711 = log2(_2697);
        float _2718 = exp2(_2711 * cbSceneParam._m0[78u].x) * _2589;
        float _2719 = exp2(_2711 * cbSceneParam._m0[78u].y) * _2590;
        float _2720 = exp2(_2711 * cbSceneParam._m0[78u].z) * _2591;
        float _2727 = _400 + (-0.5);
        _2729 = cbMtdParam._m0[1u];
        _2731 = _2729.y * _2727;
        float _2734 = (_2709 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2735 = _2734 * (_2710 ? _2718 : (_2718 + (cbSceneParam._m0[72u].w * _2691)));
        _2736 = _2734 * (_2710 ? _2719 : (_2719 + (cbSceneParam._m0[72u].w * _2693)));
        _2737 = _2734 * (_2710 ? _2720 : (_2720 + (cbSceneParam._m0[72u].w * _2695)));
        _2738 = _2727 * 0.999000012874603271484375;
        _2748 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2748)
        {
            if ((cbInstanceData._m0[_452 + 7u].x + _2738) < 0.5)
            {
                _2904 = true;
                break;
            }
        }
        uint _2845 = _454 + uint(_2707.w);
        if ((cbInstanceData._m0[_2845].w < 1.0) && ((cbInstanceData._m0[_2845].w + _2738) < 0.5))
        {
            _2904 = true;
            break;
        }
        if ((_2731 + _245) < _2729.x)
        {
            _2904 = true;
            break;
        }
        _2904 = false;
        break;
    }
    float _3108;
    if (_2904)
    {
        discard_state = true;
        _3108 = 0.0;
    }
    else
    {
        _3108 = cbInstanceData._m0[_2592].w;
    }
    SV_Target.x = _2735;
    SV_Target.y = _2736;
    SV_Target.z = _2737;
    SV_Target.w = _3108;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2592].w;
    discard_exit();
}


