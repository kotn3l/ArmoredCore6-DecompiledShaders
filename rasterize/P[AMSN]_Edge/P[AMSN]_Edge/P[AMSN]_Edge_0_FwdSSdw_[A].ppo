#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_AMSN_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _895;
float _3310;
float _3311;
float _3312;
float _3313;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _237 = texture(sampler2D(P_AMSN_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _243 = _237.w;
    float _244 = _237.x * cbMtdParam._m0[9u].x;
    float _245 = _237.y * cbMtdParam._m0[9u].y;
    float _246 = _237.z * cbMtdParam._m0[9u].z;
    vec4 _258 = texture(sampler2D(P_AMSN_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _265 = cbMtdParam._m0[10u].x + _258.x;
    vec4 _277 = texture(sampler2D(P_AMSN_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _281 = _277.z;
    float _285 = (_277.x * 2.0) + (-1.0);
    float _287 = (_277.y * 2.0) + (-1.0);
    float _288 = dot(vec2(_285, _287), vec2(_285, _287));
    float _3322 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _294 = sqrt(1.0 - (isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0))));
    float _297 = fma(_294, _215, fma(_287, _207 * TANGENT.x, (_193 * _186) * _285));
    float _300 = fma(_294, _216, fma(_287, _207 * TANGENT.y, (_193 * _187) * _285));
    float _303 = fma(_294, _217, fma(_287, _207 * TANGENT.z, (_193 * _188) * _285));
    float _307 = inversesqrt(dot(vec3(_297, _300, _303), vec3(_297, _300, _303)));
    float _308 = _307 * _297;
    float _309 = _307 * _300;
    float _310 = _307 * _303;
    float _3333 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _311 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
    float _3344 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3355 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3366 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3377 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _315 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
    float _331 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _372 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _382 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _372);
    float _383 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _372);
    float _384 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _372);
    float _388 = inversesqrt(dot(vec3(_382, _383, _384), vec3(_382, _383, _384)));
    float _389 = _382 * _388;
    float _390 = _383 * _388;
    float _391 = _384 * _388;
    vec4 _396 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _398 = _396.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _574 = sqrt(((_382 * _382) + (_383 * _383)) + (_384 * _384));
        float _580 = (cbMatDynParam._m0[5u].x * _574) + cbMatDynParam._m0[5u].y;
        float _3388 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
        float _581 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _585 = (cbMatDynParam._m0[5u].z * _574) + cbMatDynParam._m0[5u].w;
        float _3399 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))) - _581)) + _581) < ((_398 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _410 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _411 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _431 = fma(_310, cbSceneParam._m0[5u].z, fma(_309, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _308));
    float _434 = fma(_310, cbSceneParam._m0[6u].z, fma(_309, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _308));
    float _437 = fma(_310, cbSceneParam._m0[7u].z, fma(_309, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _308));
    uint _450 = uint(roundEven(NORMAL.w)) * 13u;
    uint _452 = _450 + 9u;
    uint _453 = _452 + uint(cbMatDynParam._m0[0u].w);
    float _459 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0)))) * cbInstanceData._m0[_453].x;
    float _460 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0)))) * cbInstanceData._m0[_453].y;
    float _461 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0)))) * cbInstanceData._m0[_453].z;
    float _3410 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
    float _3421 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
    float _3432 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _464 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
    float _465 = 1.0 - _315;
    float _466 = _462 * _465;
    float _467 = _463 * _465;
    float _468 = _464 * _465;
    float _473 = (_462 + (-0.039999999105930328369140625)) * _315;
    float _474 = (_463 + (-0.039999999105930328369140625)) * _315;
    float _475 = (_464 + (-0.039999999105930328369140625)) * _315;
    float _476 = _473 + 0.039999999105930328369140625;
    float _478 = _474 + 0.039999999105930328369140625;
    float _479 = _475 + 0.039999999105930328369140625;
    vec4 _488 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _410, cbSceneParam._m0[86u].y * _411));
    float _491 = _488.x * TEXCOORD.z;
    float _492 = dot(vec3(_308, _309, _310), vec3(_389, _390, _391));
    float _495 = _492 * 2.0;
    float _499 = (_495 * _308) - _389;
    float _500 = (_495 * _309) - _390;
    float _501 = (_495 * _310) - _391;
    float _505 = abs(dot(vec3(_389, _390, _391), vec3(_308, _309, _310)));
    float _3443 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _507 = sqrt(_311);
    float _520 = exp2((_507 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_507 * 3.0));
    float _526 = (1.0 - _520) * ((_507 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _527 = _520 * _507;
    float _555 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _559 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _563 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _894;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _619 = fma(_563, cbModelParam._m0[26u].z, fma(_559, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _555));
        float _623 = fma(_563, cbModelParam._m0[27u].z, fma(_559, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _555));
        float _627 = fma(_563, cbModelParam._m0[28u].z, fma(_559, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _555));
        float _652 = _555 + _308;
        float _653 = _559 + _309;
        float _654 = _563 + _310;
        float _664 = fma(_654, cbModelParam._m0[26u].z, fma(_653, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _652)) - _619;
        float _665 = fma(_654, cbModelParam._m0[27u].z, fma(_653, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _652)) - _623;
        float _666 = fma(_654, cbModelParam._m0[28u].z, fma(_653, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _652)) - _627;
        float _670 = inversesqrt(dot(vec3(_664, _665, _666), vec3(_664, _665, _666)));
        float _683 = ((_670 * _664) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_619 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _684 = ((_670 * _665) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_623 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _685 = ((_670 * _666) / cbModelParam._m0[34u].z) + ((((((_627 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_683, _684, _685), 0.0);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_683, _684, _685), 0.0);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_683, _684, _685), 0.0);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_683, _684, _685), 0.0);
        float _722 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _723 = _722 * (_688.x + (-0.5));
        float _724 = _722 * (_688.y + (-0.5));
        float _725 = _722 * (_688.z + (-0.5));
        float _732 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _733 = _732 * (_695.x + (-0.5));
        float _734 = _732 * (_695.y + (-0.5));
        float _735 = _732 * (_695.z + (-0.5));
        float _742 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _743 = _742 * (_702.x + (-0.5));
        float _744 = _742 * (_702.y + (-0.5));
        float _745 = _742 * (_702.z + (-0.5));
        float _752 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _753 = _752 * (_709.x + (-0.5));
        float _754 = _752 * (_709.y + (-0.5));
        float _755 = _752 * (_709.z + (-0.5));
        float _756 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _757 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _758 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _759 = _723 * 0.5;
        float _760 = _733 * 0.5;
        float _761 = _743 * 0.5;
        float _762 = dot(vec3(_759, _760, _761), vec3(_759, _760, _761));
        float _767 = (_762 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_762);
        float _776 = (dot(vec3(_308, _309, _310), vec3(_767 * _759, _767 * _760, _767 * _761)) + 1.0) * 0.5;
        float _3469 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _786 = sqrt(((_760 * _760) + (_759 * _759)) + (_761 * _761)) / (_756 + 9.9999997473787516355514526367188e-06);
        float _3480 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _788 = _787 * 2.0;
        float _792 = (1.0 - _787) / (_787 + 1.0);
        float _3491 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _802 = ((((1.0 - _793) * (_788 + 2.0)) * exp2(log2(isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) * (_788 + 1.0))) + _793) * _756;
        float _803 = _724 * 0.5;
        float _804 = _734 * 0.5;
        float _805 = _744 * 0.5;
        float _806 = dot(vec3(_803, _804, _805), vec3(_803, _804, _805));
        float _811 = (_806 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_806);
        float _819 = (dot(vec3(_308, _309, _310), vec3(_811 * _803, _811 * _804, _811 * _805)) + 1.0) * 0.5;
        float _3502 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _828 = sqrt(((_804 * _804) + (_803 * _803)) + (_805 * _805)) / (_757 + 9.9999997473787516355514526367188e-06);
        float _3513 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _830 = _829 * 2.0;
        float _834 = (1.0 - _829) / (_829 + 1.0);
        float _3524 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _844 = ((((1.0 - _835) * (_830 + 2.0)) * exp2(log2(isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * (_830 + 1.0))) + _835) * _757;
        float _845 = _725 * 0.5;
        float _846 = _735 * 0.5;
        float _847 = _745 * 0.5;
        float _848 = dot(vec3(_845, _846, _847), vec3(_845, _846, _847));
        float _853 = (_848 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_848);
        float _861 = (dot(vec3(_308, _309, _310), vec3(_853 * _845, _853 * _846, _853 * _847)) + 1.0) * 0.5;
        float _3535 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _870 = sqrt(((_846 * _846) + (_845 * _845)) + (_847 * _847)) / (_758 + 9.9999997473787516355514526367188e-06);
        float _3546 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _872 = _871 * 2.0;
        float _876 = (1.0 - _871) / (_871 + 1.0);
        float _3557 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _886 = ((((1.0 - _877) * (_872 + 2.0)) * exp2(log2(isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * (_872 + 1.0))) + _877) * _758;
        _894 = _725;
        _896 = _724;
        _897 = _723;
        _898 = _735;
        _899 = _734;
        _900 = _733;
        _901 = _745;
        _902 = _744;
        _903 = _743;
        _904 = _758;
        _905 = _757;
        _906 = _756;
        _907 = cbModelParam._m0[36u].z * (isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0)));
        _908 = cbModelParam._m0[36u].z * (isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0)));
        _909 = cbModelParam._m0[36u].z * (isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0)));
    }
    else
    {
        _894 = _895;
        _896 = _895;
        _897 = _895;
        _898 = _895;
        _899 = _895;
        _900 = _895;
        _901 = _895;
        _902 = _895;
        _903 = _895;
        _904 = _895;
        _905 = _895;
        _906 = _895;
        _907 = 0.0;
        _908 = 0.0;
        _909 = 0.0;
    }
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _938 = fma(_563, cbModelParam._m0[30u].z, fma(_559, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _555));
        float _942 = fma(_563, cbModelParam._m0[31u].z, fma(_559, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _555));
        float _946 = fma(_563, cbModelParam._m0[32u].z, fma(_559, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _555));
        float _969 = _555 + _308;
        float _970 = _559 + _309;
        float _971 = _563 + _310;
        float _981 = fma(_971, cbModelParam._m0[30u].z, fma(_970, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _969)) - _938;
        float _982 = fma(_971, cbModelParam._m0[31u].z, fma(_970, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _969)) - _942;
        float _983 = fma(_971, cbModelParam._m0[32u].z, fma(_970, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _969)) - _946;
        float _987 = inversesqrt(dot(vec3(_981, _982, _983), vec3(_981, _982, _983)));
        float _1000 = ((_987 * _981) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_938 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1001 = ((_987 * _982) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_942 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1002 = ((_987 * _983) / cbModelParam._m0[35u].z) + ((((((_946 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        float _1037 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_1004.x + (-0.5));
        float _1039 = _1037 * (_1004.y + (-0.5));
        float _1040 = _1037 * (_1004.z + (-0.5));
        float _1047 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1011.x + (-0.5));
        float _1049 = _1047 * (_1011.y + (-0.5));
        float _1050 = _1047 * (_1011.z + (-0.5));
        float _1057 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1018.x + (-0.5));
        float _1059 = _1057 * (_1018.y + (-0.5));
        float _1060 = _1057 * (_1018.z + (-0.5));
        float _1067 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1025.x + (-0.5));
        float _1069 = _1067 * (_1025.y + (-0.5));
        float _1070 = _1067 * (_1025.z + (-0.5));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = _1038 * 0.5;
        float _1075 = _1048 * 0.5;
        float _1076 = _1058 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_308, _309, _310), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3598 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3609 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3620 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * (_1101 + 1.0))) + _1106) * _1071;
        float _1116 = _1039 * 0.5;
        float _1117 = _1049 * 0.5;
        float _1118 = _1059 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_308, _309, _310), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3631 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3642 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3653 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * (_1143 + 1.0))) + _1148) * _1072;
        float _1158 = _1040 * 0.5;
        float _1159 = _1050 * 0.5;
        float _1160 = _1060 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_308, _309, _310), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _3686 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_1185 + 1.0))) + _1190) * _1073;
        _1207 = _1040;
        _1208 = _1039;
        _1209 = _1038;
        _1210 = _1050;
        _1211 = _1049;
        _1212 = _1048;
        _1213 = _1060;
        _1214 = _1059;
        _1215 = _1058;
        _1216 = _1073;
        _1217 = _1072;
        _1218 = _1071;
        _1219 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
        _1220 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
        _1221 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
    }
    else
    {
        _1207 = _895;
        _1208 = _895;
        _1209 = _895;
        _1210 = _895;
        _1211 = _895;
        _1212 = _895;
        _1213 = _895;
        _1214 = _895;
        _1215 = _895;
        _1216 = _895;
        _1217 = _895;
        _1218 = _895;
        _1219 = 0.0;
        _1220 = 0.0;
        _1221 = 0.0;
    }
    float _1231 = (cbModelParam._m0[1u].x * (_1219 - _907)) + _907;
    float _1232 = (cbModelParam._m0[1u].x * (_1220 - _908)) + _908;
    float _1233 = (cbModelParam._m0[1u].x * (_1221 - _909)) + _909;
    float _1254 = fma(_1233, cbSceneParam._m0[89u].z, fma(_1232, cbSceneParam._m0[89u].y, _1231 * cbSceneParam._m0[89u].x));
    float _1257 = fma(_1233, cbSceneParam._m0[90u].z, fma(_1232, cbSceneParam._m0[90u].y, _1231 * cbSceneParam._m0[90u].x));
    float _1260 = fma(_1233, cbSceneParam._m0[91u].z, fma(_1232, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1231));
    float _1275 = _499 * 0.5;
    float _1276 = _500 * 0.5;
    float _1277 = _501 * 0.5;
    float _1278 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_1209, _1212, _1215, _1218));
    float _1281 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_1208, _1211, _1214, _1217));
    float _1284 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_1207, _1210, _1213, _1216));
    float _1318;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1291 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_894, _898, _901, _904));
        float _1295 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_896, _899, _902, _905));
        float _1299 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_897, _900, _903, _906));
        float _1306 = dot(vec4(cbModelParam._m0[39u]), vec4(_1275, _1276, _1277, 1.0));
        _1318 = dot(vec3(isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)), isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1306) ? 0.0 : (isnan(0.0) ? _1306 : max(0.0, _1306))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1318 = 1.0;
    }
    float _1329;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1320 = dot(vec4(cbModelParam._m0[40u]), vec4(_1275, _1276, _1277, 1.0));
        _1329 = dot(vec3(isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)), isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)), isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1320) ? 0.0 : (isnan(0.0) ? _1320 : max(0.0, _1320))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1329 = 1.0;
    }
    float _1333 = (_1329 * cbModelParam._m0[1u].x) + (_1318 * (1.0 - cbModelParam._m0[1u].x));
    float _1343 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _311);
    float _1344 = isnan(_1343) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1343 : min(cbModelParam._m0[25u].z, _1343));
    float _1426;
    float _1428;
    float _1430;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1393 = fma(_563, cbModelParam._m0[13u].z, fma(_559, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _555)) + cbModelParam._m0[13u].w;
        float _1397 = fma(_563, cbModelParam._m0[14u].z, fma(_559, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _555)) + cbModelParam._m0[14u].w;
        float _1401 = fma(_563, cbModelParam._m0[15u].z, fma(_559, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _555)) + cbModelParam._m0[15u].w;
        float _1404 = fma(_501, cbModelParam._m0[13u].z, fma(_500, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _499));
        float _1407 = fma(_501, cbModelParam._m0[14u].z, fma(_500, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _499));
        float _1410 = fma(_501, cbModelParam._m0[15u].z, fma(_500, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _499));
        float _1438;
        if (_1404 > 0.0)
        {
            _1438 = abs((1.0 - _1393) / _1404);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1393 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1438 = frontier_phi_19_17_ladder;
        }
        float _1667;
        if (_1407 > 0.0)
        {
            _1667 = abs((1.0 - _1397) / _1407);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1407 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1397 + 1.0) / _1407);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1667 = frontier_phi_28_24_ladder;
        }
        float _1924;
        if (_1410 > 0.0)
        {
            _1924 = abs((1.0 - _1401) / _1410);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1410 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1401 + 1.0) / _1410);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1924 = frontier_phi_40_35_ladder;
        }
        float _1926 = isnan(_1667) ? _1438 : (isnan(_1438) ? _1667 : min(_1438, _1667));
        float _1927 = isnan(_1924) ? _1926 : (isnan(_1926) ? _1924 : min(_1926, _1924));
        float _1931 = (_1927 * _1404) + _1393;
        float _1932 = (_1927 * _1407) + _1397;
        float _1933 = (_1927 * _1410) + _1401;
        float _1934 = _1927 * 9.9999997473787516355514526367188e-05;
        float _1936 = (-1.0) - _1934;
        float _1938 = _1934 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1933 > _1938) || ((_1933 < _1936) || ((_1932 > _1938) || ((_1932 < _1936) || ((_1931 < _1936) || (_1931 > _1938))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2061 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1933, cbModelParam._m0[9u].z, fma(_1932, cbModelParam._m0[9u].y, _1931 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1933, cbModelParam._m0[10u].z, fma(_1932, cbModelParam._m0[10u].y, _1931 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1933, cbModelParam._m0[11u].z, fma(_1932, cbModelParam._m0[11u].y, _1931 * cbModelParam._m0[11u].x))), _1344);
            frontier_phi_18_40_ladder = _2061.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2061.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2061.x * cbModelParam._m0[1u].y;
        }
        _1426 = frontier_phi_18_40_ladder_2;
        _1428 = frontier_phi_18_40_ladder_1;
        _1430 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1414 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_499, _500, _501), _1344);
        _1426 = _1414.x * cbModelParam._m0[1u].y;
        _1428 = _1414.y * cbModelParam._m0[1u].y;
        _1430 = _1414.z * cbModelParam._m0[1u].y;
    }
    float _1434 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _311);
    float _1435 = isnan(_1434) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1434 : min(cbModelParam._m0[25u].w, _1434));
    float _1528;
    float _1530;
    float _1532;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1492 = fma(_563, cbModelParam._m0[21u].z, fma(_559, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _555)) + cbModelParam._m0[21u].w;
        float _1496 = fma(_563, cbModelParam._m0[22u].z, fma(_559, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _555)) + cbModelParam._m0[22u].w;
        float _1500 = fma(_563, cbModelParam._m0[23u].z, fma(_559, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _555)) + cbModelParam._m0[23u].w;
        float _1503 = fma(_501, cbModelParam._m0[21u].z, fma(_500, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _499));
        float _1506 = fma(_501, cbModelParam._m0[22u].z, fma(_500, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _499));
        float _1509 = fma(_501, cbModelParam._m0[23u].z, fma(_500, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _499));
        float _1672;
        if (_1503 > 0.0)
        {
            _1672 = abs((1.0 - _1492) / _1503);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1492 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1672 = frontier_phi_30_26_ladder;
        }
        float _1951;
        if (_1506 > 0.0)
        {
            _1951 = abs((1.0 - _1496) / _1506);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1496 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1951 = frontier_phi_42_37_ladder;
        }
        float _2164;
        if (_1509 > 0.0)
        {
            _2164 = abs((1.0 - _1500) / _1509);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1500 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2164 = frontier_phi_51_48_ladder;
        }
        float _2166 = isnan(_1951) ? _1672 : (isnan(_1672) ? _1951 : min(_1672, _1951));
        float _2167 = isnan(_2164) ? _2166 : (isnan(_2166) ? _2164 : min(_2166, _2164));
        float _2171 = (_2167 * _1503) + _1492;
        float _2172 = (_2167 * _1506) + _1496;
        float _2173 = (_2167 * _1509) + _1500;
        float _2174 = _2167 * 9.9999997473787516355514526367188e-05;
        float _2175 = (-1.0) - _2174;
        float _2177 = _2174 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2173 > _2177) || ((_2173 < _2175) || ((_2172 > _2177) || ((_2172 < _2175) || ((_2171 < _2175) || (_2171 > _2177))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2371 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2173, cbModelParam._m0[17u].z, fma(_2172, cbModelParam._m0[17u].y, _2171 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2173, cbModelParam._m0[18u].z, fma(_2172, cbModelParam._m0[18u].y, _2171 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2173, cbModelParam._m0[19u].z, fma(_2172, cbModelParam._m0[19u].y, _2171 * cbModelParam._m0[19u].x))), _1435);
            frontier_phi_27_51_ladder = _2371.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2371.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2371.x * cbModelParam._m0[1u].z;
        }
        _1528 = frontier_phi_27_51_ladder_2;
        _1530 = frontier_phi_27_51_ladder_1;
        _1532 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1512 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_499, _500, _501), _1435);
        _1528 = _1512.x * cbModelParam._m0[1u].z;
        _1530 = _1512.y * cbModelParam._m0[1u].z;
        _1532 = _1512.z * cbModelParam._m0[1u].z;
    }
    float _1545 = (((_526 * _476) + _527) * _491) * ((cbModelParam._m0[1u].w * (_1528 - _1426)) + _1426);
    float _1547 = (((_526 * _478) + _527) * _491) * ((cbModelParam._m0[1u].w * (_1530 - _1428)) + _1428);
    float _1549 = (((_526 * _479) + _527) * _491) * ((cbModelParam._m0[1u].w * (_1532 - _1430)) + _1430);
    float _1552 = fma(_1549, cbSceneParam._m0[89u].z, fma(_1547, cbSceneParam._m0[89u].y, _1545 * cbSceneParam._m0[89u].x));
    float _1555 = fma(_1549, cbSceneParam._m0[90u].z, fma(_1547, cbSceneParam._m0[90u].y, _1545 * cbSceneParam._m0[90u].x));
    float _1558 = fma(_1549, cbSceneParam._m0[91u].z, fma(_1547, cbSceneParam._m0[91u].y, _1545 * cbSceneParam._m0[91u].x));
    vec4 _1566 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_410, _411));
    float _1568 = _1566.w;
    float _1580 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1568);
    float _1581 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1568);
    float _1582 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1568);
    uvec4 _1586 = floatBitsToUint(cbInstanceData._m0[_450 + 5u]);
    uint _1588 = _1586.x * 14u;
    uint _1589 = _1588 + 13u;
    float _1596 = _491 + (-1.0);
    float _1601 = (cbLight._m0[_1589].x * _1596) + 1.0;
    float _1602 = (cbLight._m0[_1589].y * _1596) + 1.0;
    float _1603 = (cbLight._m0[_1589].z * _1596) + 1.0;
    float _1604 = (cbLight._m0[_1589].w * _1596) + 1.0;
    uint _1605 = _1588 + 5u;
    float _1611 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
    uint _1615 = _1588 + 4u;
    float _1625 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
    uint _1629 = _1588 | 1u;
    float _1640 = dot(vec3(cbLight._m0[_1588].xyz), vec3(_308, _309, _310));
    float _1643 = dot(vec3(cbLight._m0[_1629].xyz), vec3(_308, _309, _310));
    float _3822 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
    float _3833 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
    float _1648 = (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * 0.3183098733425140380859375;
    float _1650 = (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * 0.3183098733425140380859375;
    float _1657 = ((cbLight._m0[_1605].x * _1611) * _1650) + (((cbLight._m0[_1615].x * _1580) * _1625) * _1648);
    float _1658 = ((_1611 * cbLight._m0[_1605].y) * _1650) + (((cbLight._m0[_1615].y * _1581) * _1625) * _1648);
    float _1659 = ((_1611 * cbLight._m0[_1605].z) * _1650) + (((cbLight._m0[_1615].z * _1582) * _1625) * _1648);
    uvec4 _1664 = floatBitsToUint(cbLight._m0[_1588 + 12u]);
    bool _1666 = _1664.x == 0u;
    float _1677;
    float _1679;
    float _1681;
    if (_1666)
    {
        _1677 = _1657;
        _1679 = _1658;
        _1681 = _1659;
    }
    else
    {
        uint _1685 = _1588 + 6u;
        float _1701 = (dot(vec3(cbLight._m0[_1588 + 2u].xyz), vec3(_308, _309, _310)) * 0.5) + 0.5;
        float _1702 = _1701 * _1701;
        float _3844 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1704 = isnan(1.0) ? _1603 : (isnan(_1603) ? 1.0 : min(_1603, 1.0));
        _1677 = (((cbLight._m0[_1685].x * 0.3183098733425140380859375) * _1703) * _1704) + _1657;
        _1679 = (((cbLight._m0[_1685].y * 0.3183098733425140380859375) * _1703) * _1704) + _1658;
        _1681 = (((cbLight._m0[_1685].z * 0.3183098733425140380859375) * _1703) * _1704) + _1659;
    }
    bool _1684 = _1664.y == 0u;
    float _1722;
    float _1724;
    float _1726;
    if (_1684)
    {
        _1722 = _1677;
        _1724 = _1679;
        _1726 = _1681;
    }
    else
    {
        uint _1895 = _1588 + 7u;
        float _1911 = (dot(vec3(cbLight._m0[_1588 + 3u].xyz), vec3(_308, _309, _310)) * 0.5) + 0.5;
        float _1912 = _1911 * _1911;
        float _3860 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
        float _1913 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1914 = isnan(1.0) ? _1604 : (isnan(_1604) ? 1.0 : min(_1604, 1.0));
        _1722 = (((cbLight._m0[_1895].x * 0.3183098733425140380859375) * _1913) * _1914) + _1677;
        _1724 = (((cbLight._m0[_1895].y * 0.3183098733425140380859375) * _1913) * _1914) + _1679;
        _1726 = (((cbLight._m0[_1895].z * 0.3183098733425140380859375) * _1913) * _1914) + _1681;
    }
    uint _1729 = _1588 + 8u;
    float _1742 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1588].w)) * _311) * 0.949999988079071044921875);
    float _1743 = _1742 * _1742;
    float _1744 = cbLight._m0[_1588].x + _389;
    float _1745 = cbLight._m0[_1588].y + _390;
    float _1746 = cbLight._m0[_1588].z + _391;
    float _1750 = inversesqrt(dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746)));
    float _1751 = _1750 * _1744;
    float _1752 = _1750 * _1745;
    float _1753 = _1750 * _1746;
    float _1754 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_1588].xyz));
    float _3876 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1757 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _3887 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _1758 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _1759 = dot(vec3(_308, _309, _310), vec3(_1751, _1752, _1753));
    float _3898 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1762 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _1763 = dot(vec3(cbLight._m0[_1588].xyz), vec3(_1751, _1752, _1753));
    float _3909 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1767 = _1743 * _1743;
    float _1771 = ((_1762 * _1762) * (_1767 + (-1.0))) + 1.0;
    float _1779 = exp2(log2(1.0 - (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) * 5.0);
    float _1780 = 0.959999978542327880859375 - _473;
    float _1782 = 0.959999978542327880859375 - _474;
    float _1783 = 0.959999978542327880859375 - _475;
    float _1790 = 1.0 - _1743;
    float _1801 = (0.5 / (((_1758 * ((_1757 * _1790) + _1743)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _1790) + _1743) * _1757))) * _1757;
    float _3920 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1803 = (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1767 / ((_1771 * _1771) * 3.141590118408203125));
    uint _1817 = _1588 + 9u;
    float _1828 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1629].w)) * _311) * 0.949999988079071044921875);
    float _1829 = _1828 * _1828;
    float _1830 = cbLight._m0[_1629].x + _389;
    float _1831 = cbLight._m0[_1629].y + _390;
    float _1832 = cbLight._m0[_1629].z + _391;
    float _1836 = inversesqrt(dot(vec3(_1830, _1831, _1832), vec3(_1830, _1831, _1832)));
    float _1837 = _1836 * _1830;
    float _1838 = _1836 * _1831;
    float _1839 = _1836 * _1832;
    float _1840 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_1629].xyz));
    float _3931 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1843 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _1844 = dot(vec3(_308, _309, _310), vec3(_1837, _1838, _1839));
    float _3942 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1847 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _1848 = dot(vec3(cbLight._m0[_1629].xyz), vec3(_1837, _1838, _1839));
    float _3953 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1852 = _1829 * _1829;
    float _1856 = ((_1847 * _1847) * (_1852 + (-1.0))) + 1.0;
    float _1863 = exp2(log2(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * 5.0);
    float _1870 = 1.0 - _1829;
    float _1880 = (0.5 / (((_1758 * ((_1843 * _1870) + _1829)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _1870) + _1829) * _1843))) * _1843;
    float _3964 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1882 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1852 / ((_1856 * _1856) * 3.141590118408203125));
    float _1892 = (((((_1863 * _1780) + _476) * cbLight._m0[_1817].x) * _1882) * _1611) + ((((cbLight._m0[_1729].x * _1580) * ((_1779 * _1780) + _476)) * _1803) * _1625);
    float _1893 = (((((_1863 * _1782) + _478) * cbLight._m0[_1817].y) * _1882) * _1611) + ((((cbLight._m0[_1729].y * _1581) * ((_1779 * _1782) + _478)) * _1803) * _1625);
    float _1894 = (((((_1863 * _1783) + _479) * cbLight._m0[_1817].z) * _1882) * _1611) + ((((cbLight._m0[_1729].z * _1582) * ((_1779 * _1783) + _479)) * _1803) * _1625);
    float _1956;
    float _1958;
    float _1960;
    if (_1666)
    {
        _1956 = _1892;
        _1958 = _1893;
        _1960 = _1894;
    }
    else
    {
        uint _1962 = _1588 + 2u;
        uint _1966 = _1588 + 10u;
        float _1980 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1962].w)) * _311) * 0.949999988079071044921875);
        float _1981 = _1980 * _1980;
        float _1982 = cbLight._m0[_1962].x + _389;
        float _1983 = cbLight._m0[_1962].y + _390;
        float _1984 = cbLight._m0[_1962].z + _391;
        float _1988 = inversesqrt(dot(vec3(_1982, _1983, _1984), vec3(_1982, _1983, _1984)));
        float _1989 = _1988 * _1982;
        float _1990 = _1988 * _1983;
        float _1991 = _1988 * _1984;
        float _1992 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_1962].xyz));
        float _3975 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1995 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1996 = dot(vec3(_308, _309, _310), vec3(_1989, _1990, _1991));
        float _3986 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _1999 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _2000 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_1989, _1990, _1991));
        float _3997 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        float _2004 = _1981 * _1981;
        float _2008 = ((_1999 * _1999) * (_2004 + (-1.0))) + 1.0;
        float _2015 = exp2(log2(1.0 - (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * 5.0);
        float _2022 = 1.0 - _1981;
        float _2032 = (0.5 / (((_1758 * ((_1995 * _2022) + _1981)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _2022) + _1981) * _1995))) * _1995;
        float _4008 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2034 = (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_2004 / ((_2008 * _2008) * 3.141590118408203125));
        float _2035 = isnan(1.0) ? _1603 : (isnan(_1603) ? 1.0 : min(_1603, 1.0));
        _1956 = (((((_2015 * _1780) + _476) * cbLight._m0[_1966].x) * _2034) * _2035) + _1892;
        _1958 = (((((_2015 * _1782) + _478) * cbLight._m0[_1966].y) * _2034) * _2035) + _1893;
        _1960 = (((((_2015 * _1783) + _479) * cbLight._m0[_1966].z) * _2034) * _2035) + _1894;
    }
    float _2070;
    float _2072;
    float _2074;
    if (_1684)
    {
        _2070 = _1956;
        _2072 = _1958;
        _2074 = _1960;
    }
    else
    {
        uint _2081 = _1588 + 3u;
        uint _2085 = _1588 + 11u;
        float _2099 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2081].w)) * _311) * 0.949999988079071044921875);
        float _2100 = _2099 * _2099;
        float _2101 = cbLight._m0[_2081].x + _389;
        float _2102 = cbLight._m0[_2081].y + _390;
        float _2103 = cbLight._m0[_2081].z + _391;
        float _2107 = inversesqrt(dot(vec3(_2101, _2102, _2103), vec3(_2101, _2102, _2103)));
        float _2108 = _2107 * _2101;
        float _2109 = _2107 * _2102;
        float _2110 = _2107 * _2103;
        float _2111 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_2081].xyz));
        float _4024 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2114 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _2115 = dot(vec3(_308, _309, _310), vec3(_2108, _2109, _2110));
        float _4035 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2118 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _2119 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_2108, _2109, _2110));
        float _4046 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2123 = _2100 * _2100;
        float _2127 = ((_2118 * _2118) * (_2123 + (-1.0))) + 1.0;
        float _2134 = exp2(log2(1.0 - (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * 5.0);
        float _2141 = 1.0 - _2100;
        float _2151 = (0.5 / (((_1758 * ((_2114 * _2141) + _2100)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _2141) + _2100) * _2114))) * _2114;
        float _4057 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2153 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_2123 / ((_2127 * _2127) * 3.141590118408203125));
        float _2154 = isnan(1.0) ? _1604 : (isnan(_1604) ? 1.0 : min(_1604, 1.0));
        _2070 = (((((_2134 * _1780) + _476) * cbLight._m0[_2085].x) * _2153) * _2154) + _1956;
        _2072 = (((((_2134 * _1782) + _478) * cbLight._m0[_2085].y) * _2153) * _2154) + _1958;
        _2074 = (((((_2134 * _1783) + _479) * cbLight._m0[_2085].z) * _2153) * _2154) + _1960;
    }
    float _2288;
    float _2290;
    float _2292;
    float _2294;
    float _2296;
    float _2298;
    if (_1586.y == 0u)
    {
        float _2229 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2230 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2229;
        float _2231 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2229;
        float _2232 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2229;
        uvec4 _2244 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2245 = _2244.x;
        uint _2256 = uint((float(_2244.y) * floor(float(uint(cbSceneParam._m0[85u].y * _411) / _2245))) + floor(float(uint(cbSceneParam._m0[85u].x * _410) / _2245)));
        float _2266 = (log2(_2232 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2267 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        uint _2270 = uint(isnan(14.0) ? _2267 : (isnan(_2267) ? 14.0 : min(_2267, 14.0)));
        uvec4 _2275 = texelFetch(g_lightClusterGridBuffer, int(((_2270 << 2u) + (_2256 << 6u)) >> 2u));
        uint _2276 = _2275.x;
        uint _2277 = _2244.z;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        float _2384;
        float _2386;
        if (((((1u << ((_2277 >> 4u) & 15u)) + 4294967295u) & _2276) == 0u) || ((_2277 & 240u) == 0u))
        {
            _2376 = 0.0;
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
            _2384 = 0.0;
            _2386 = 0.0;
        }
        else
        {
            float _2377;
            float _2379;
            float _2381;
            float _2383;
            float _2385;
            float _2387;
            float _2528 = 0.0;
            float _2529 = 0.0;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            float _2533 = 0.0;
            uint _2534 = 0u;
            uint _2543;
            bool _2544;
            for (;;)
            {
                _2543 = texelFetch(g_lightClassification, int((((_2270 << 5u) + (_2256 << 9u)) + (_2534 << 2u)) >> 2u)).x;
                _2544 = _2543 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2544)
                {
                    frontier_phi_68_pred = _2530;
                    frontier_phi_68_pred_1 = _2533;
                    frontier_phi_68_pred_2 = _2532;
                    frontier_phi_68_pred_3 = _2531;
                    frontier_phi_68_pred_4 = _2529;
                    frontier_phi_68_pred_5 = _2528;
                }
                else
                {
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    uint _2679;
                    _2673 = _2528;
                    _2674 = _2529;
                    _2675 = _2530;
                    _2676 = _2531;
                    _2677 = _2532;
                    _2678 = _2533;
                    _2679 = _2543;
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    for (;;)
                    {
                        uint _2683 = uint(findLSB(_2679)) + (_2534 << 5u);
                        uint _2680 = (_2679 + 4294967295u) & _2679;
                        uint _2685 = _2683 * 48u;
                        vec4 _2699 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 3u)).x));
                        uint _2705 = (_2683 * 48u) + 4u;
                        vec4 _2718 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2705)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 3u)).x));
                        uint _2724 = (_2683 * 48u) + 8u;
                        vec3 _2735 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2724)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 2u)).x));
                        float _2739 = _2699.x - _2230;
                        float _2740 = _2699.y - _2231;
                        float _2741 = _2699.z - _2232;
                        float _2742 = dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741));
                        float _2745 = inversesqrt(_2742);
                        float _2746 = _2745 * _2739;
                        float _2747 = _2745 * _2740;
                        float _2748 = _2745 * _2741;
                        float _2749 = dot(vec3(_431, _434, _437), vec3(_2746, _2747, _2748));
                        float _2754 = 1.0 - (_2742 * _2699.w);
                        float _4083 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                        float _2755 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                        float _2756 = sqrt(_2742) * _2718.w;
                        float _2759 = 1.39999997615814208984375 / (_2756 + 1.39999997615814208984375);
                        float _2760 = _2759 * _2759;
                        float _2763 = ((1.0 - _2760) * _2749) + _2760;
                        float _2766 = _2756 * _2756;
                        float _2770 = ((isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0))) * _2755) / ((_2766 * 0.699999988079071044921875) + 1.0);
                        float _2774 = (-0.0) - _2230;
                        float _2775 = (-0.0) - _2231;
                        float _2776 = (-0.0) - _2232;
                        float _2780 = inversesqrt(dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776)));
                        float _2781 = _2780 * _2774;
                        float _2782 = _2780 * _2775;
                        float _2783 = _2780 * _2776;
                        float _2791 = exp2(log2(1.0 / ((_2766 * 3.5) + 5.0)) * 0.25);
                        float _2792 = 1.0 - _507;
                        float _2799 = sqrt(1.0 - ((1.0 - (_2792 * _2792)) * (1.0 - (_2791 * _2791))));
                        float _2800 = _2799 * _2799;
                        float _2801 = _2800 * _2800;
                        float _2802 = _2781 + _2746;
                        float _2803 = _2782 + _2747;
                        float _2804 = _2783 + _2748;
                        float _2808 = inversesqrt(dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804)));
                        float _2812 = dot(vec3(_431, _434, _437), vec3(_2781, _2782, _2783));
                        float _4099 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                        float _2815 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                        float _2816 = dot(vec3(_431, _434, _437), vec3(_2808 * _2802, _2808 * _2803, _2808 * _2804));
                        float _4110 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _2819 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
                        float _2823 = ((_2819 * _2819) * (_2801 + (-1.0))) + 1.0;
                        float _2824 = _2759 * _2800;
                        float _2825 = _2824 * _2824;
                        float _2828 = ((1.0 - _2825) * _2749) + _2825;
                        float _4121 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                        float _2829 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                        float _2830 = 1.0 - _2800;
                        float _2840 = (0.5 / (((_2829 * ((_2815 * _2830) + _2800)) + 9.9999999392252902907785028219223e-09) + (((_2829 * _2830) + _2800) * _2815))) * _2829;
                        float _4132 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                        float _2851 = (((_2801 * 3.1415927410125732421875) * (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) / ((_2823 * _2823) * ((_2766 * 2.1991131305694580078125) + 3.141590118408203125))) * _2755;
                        _2603 = (_2770 * _2718.x) + _2676;
                        _2604 = (_2770 * _2718.y) + _2677;
                        _2605 = (_2770 * _2718.z) + _2678;
                        _2600 = (_2851 * _2735.x) + _2673;
                        _2601 = (_2851 * _2735.y) + _2674;
                        _2602 = (_2851 * _2735.z) + _2675;
                        if (_2680 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2673 = _2600;
                            _2674 = _2601;
                            _2675 = _2602;
                            _2676 = _2603;
                            _2677 = _2604;
                            _2678 = _2605;
                            _2679 = _2680;
                        }
                    }
                    frontier_phi_68_pred = _2602;
                    frontier_phi_68_pred_1 = _2605;
                    frontier_phi_68_pred_2 = _2604;
                    frontier_phi_68_pred_3 = _2603;
                    frontier_phi_68_pred_4 = _2601;
                    frontier_phi_68_pred_5 = _2600;
                }
                _2381 = frontier_phi_68_pred;
                _2387 = frontier_phi_68_pred_1;
                _2385 = frontier_phi_68_pred_2;
                _2383 = frontier_phi_68_pred_3;
                _2379 = frontier_phi_68_pred_4;
                _2377 = frontier_phi_68_pred_5;
                uint _2535 = _2534 + 1u;
                if (_2535 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2528 = _2377;
                    _2529 = _2379;
                    _2530 = _2381;
                    _2531 = _2383;
                    _2532 = _2385;
                    _2533 = _2387;
                    _2534 = _2535;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2376 = _2377;
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
            _2384 = _2385;
            _2386 = _2387;
        }
        uvec4 _2390 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2391 = _2390.z;
        uint _2393 = (_2391 >> 8u) & 15u;
        float _2496;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        if (((4294967295u << _2393) & _2276) == 0u)
        {
            _2496 = _2376;
            _2498 = _2378;
            _2500 = _2380;
            _2502 = _2382;
            _2504 = _2384;
            _2506 = _2386;
        }
        else
        {
            float _2521 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
            float _2522 = _2521 * _2230;
            float _2523 = _2521 * _2231;
            float _2524 = _2521 * _2232;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2393 < ((_2391 >> 12u) & 15u))
            {
                float _2497;
                float _2499;
                float _2501;
                float _2503;
                float _2505;
                float _2507;
                float _2656 = _2376;
                float _2657 = _2378;
                float _2658 = _2380;
                float _2659 = _2382;
                float _2660 = _2384;
                float _2661 = _2386;
                uint _2662 = _2393;
                uint _2671;
                bool _2672;
                for (;;)
                {
                    _2671 = texelFetch(g_lightClassification, int((((_2270 << 5u) + (_2256 << 9u)) + (_2662 << 2u)) >> 2u)).x;
                    _2672 = _2671 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2672)
                    {
                        frontier_phi_79_pred = _2661;
                        frontier_phi_79_pred_1 = _2660;
                        frontier_phi_79_pred_2 = _2659;
                        frontier_phi_79_pred_3 = _2658;
                        frontier_phi_79_pred_4 = _2657;
                        frontier_phi_79_pred_5 = _2656;
                    }
                    else
                    {
                        float _2865;
                        float _2866;
                        float _2867;
                        float _2868;
                        float _2869;
                        float _2870;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _2878 = _2656;
                        float _2879 = _2657;
                        float _2880 = _2658;
                        float _2881 = _2659;
                        float _2882 = _2660;
                        float _2883 = _2661;
                        uint _2884 = _2671;
                        uint _2885;
                        vec4 _2910;
                        float _2911;
                        vec4 _2926;
                        vec3 _2938;
                        vec4 _2954;
                        vec4 _2970;
                        float _3017;
                        bool _3018;
                        for (;;)
                        {
                            uint _2895 = ((_2662 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2884));
                            _2885 = (_2884 + 4294967295u) & _2884;
                            uint _2897 = _2895 * 40u;
                            _2910 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 3u)).x));
                            _2911 = _2910.w;
                            uint _2913 = (_2895 * 40u) + 4u;
                            _2926 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 3u)).x));
                            uint _2928 = (_2895 * 40u) + 8u;
                            _2938 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x));
                            uint _2941 = (_2895 * 40u) + 16u;
                            _2954 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 3u)).x));
                            uint _2957 = (_2895 * 40u) + 20u;
                            _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            uint _2973 = (_2895 * 40u) + 24u;
                            vec4 _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            uint _2992 = (_2895 * 40u) + 28u;
                            vec4 _3005 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 3u)).x));
                            _3017 = fma(_2232, _3005.z, fma(_2231, _3005.y, _3005.x * _2230)) + _3005.w;
                            _3018 = !((fma(_2232, _2986.z, fma(_2231, _2986.y, _2986.x * _2230)) + _2986.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3018)
                            {
                                float _3045 = _2910.x - _2230;
                                float _3046 = _2910.y - _2231;
                                float _3047 = _2910.z - _2232;
                                float _3048 = dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047));
                                float _3051 = inversesqrt(_3048);
                                float _3052 = _3051 * _3045;
                                float _3053 = _3051 * _3046;
                                float _3054 = _3051 * _3047;
                                float _3058 = 1.0 - (_3048 / (_2911 * _2911));
                                float _4143 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                                float _3059 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
                                float _3063 = sqrt(_3048) * _2926.w;
                                float _3065 = 1.39999997615814208984375 / (_3063 + 1.39999997615814208984375);
                                float _3066 = _3065 * _3065;
                                float _3069 = ((1.0 - _3066) * dot(vec3(_3052, _3053, _3054), vec3(_431, _434, _437))) + _3066;
                                float _3072 = _3063 * _3063;
                                float _3076 = (fma(_2232, _2954.z, fma(_2231, _2954.y, _2954.x * _2230)) + _2954.w) / _3017;
                                float _3077 = (fma(_2232, _2970.z, fma(_2231, _2970.y, _2970.x * _2230)) + _2970.w) / _3017;
                                float _3081 = 1.0 - dot(vec2(_3076, _3077), vec2(_3076, _3077));
                                float _4159 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                                float _3082 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                                float _3083 = _3082 * (((isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0))) * _3059) / ((_3072 * 0.699999988079071044921875) + 1.0));
                                float _3095 = exp2(log2(1.0 / ((_3072 * 3.5) + 5.0)) * 0.25);
                                float _3096 = 1.0 - _507;
                                float _3103 = sqrt(1.0 - ((1.0 - (_3096 * _3096)) * (1.0 - (_3095 * _3095))));
                                float _3104 = _3103 * _3103;
                                float _3105 = _3104 * _3104;
                                float _3106 = _3052 - _2522;
                                float _3107 = _3053 - _2523;
                                float _3108 = _3054 - _2524;
                                float _3112 = inversesqrt(dot(vec3(_3106, _3107, _3108), vec3(_3106, _3107, _3108)));
                                float _3116 = dot(vec3(_431, _434, _437), vec3((-0.0) - _2522, (-0.0) - _2523, (-0.0) - _2524));
                                float _4170 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                                float _3119 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
                                float _3120 = dot(vec3(_431, _434, _437), vec3(_3112 * _3106, _3112 * _3107, _3112 * _3108));
                                float _4181 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3123 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                                float _3127 = ((_3123 * _3123) * (_3105 + (-1.0))) + 1.0;
                                float _3128 = _3065 * _3104;
                                float _3129 = _3128 * _3128;
                                float _3135 = ((1.0 - _3129) * dot(vec3(_431, _434, _437), vec3(_3052, _3053, _3054))) + _3129;
                                float _4192 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                                float _3136 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                                float _3137 = 1.0 - _3104;
                                float _3147 = (0.5 / (((_3136 * ((_3119 * _3137) + _3104)) + 9.9999999392252902907785028219223e-09) + (((_3136 * _3137) + _3104) * _3119))) * _3136;
                                float _4203 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                                float _3157 = (_3082 * _3059) * (((_3105 * 3.1415927410125732421875) * (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) / ((_3127 * _3127) * ((_3072 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3083 * _2926.z;
                                frontier_phi_85_pred_1 = _3083 * _2926.y;
                                frontier_phi_85_pred_2 = _3083 * _2926.x;
                                frontier_phi_85_pred_3 = _3157 * _2938.z;
                                frontier_phi_85_pred_4 = _3157 * _2938.y;
                                frontier_phi_85_pred_5 = _3157 * _2938.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3166 = frontier_phi_85_pred;
                            _3165 = frontier_phi_85_pred_1;
                            _3164 = frontier_phi_85_pred_2;
                            _3163 = frontier_phi_85_pred_3;
                            _3162 = frontier_phi_85_pred_4;
                            _3161 = frontier_phi_85_pred_5;
                            _2868 = _3164 + _2881;
                            _2869 = _3165 + _2882;
                            _2870 = _3166 + _2883;
                            _2865 = _3161 + _2878;
                            _2866 = _3162 + _2879;
                            _2867 = _3163 + _2880;
                            if (_2885 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2878 = _2865;
                                _2879 = _2866;
                                _2880 = _2867;
                                _2881 = _2868;
                                _2882 = _2869;
                                _2883 = _2870;
                                _2884 = _2885;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2870;
                        frontier_phi_79_pred_1 = _2869;
                        frontier_phi_79_pred_2 = _2868;
                        frontier_phi_79_pred_3 = _2867;
                        frontier_phi_79_pred_4 = _2866;
                        frontier_phi_79_pred_5 = _2865;
                    }
                    _2507 = frontier_phi_79_pred;
                    _2505 = frontier_phi_79_pred_1;
                    _2503 = frontier_phi_79_pred_2;
                    _2501 = frontier_phi_79_pred_3;
                    _2499 = frontier_phi_79_pred_4;
                    _2497 = frontier_phi_79_pred_5;
                    uint _2663 = _2662 + 1u;
                    if (_2663 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2656 = _2497;
                        _2657 = _2499;
                        _2658 = _2501;
                        _2659 = _2503;
                        _2660 = _2505;
                        _2661 = _2507;
                        _2662 = _2663;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2503;
                frontier_phi_60_61_ladder_1 = _2507;
                frontier_phi_60_61_ladder_2 = _2505;
                frontier_phi_60_61_ladder_3 = _2501;
                frontier_phi_60_61_ladder_4 = _2499;
                frontier_phi_60_61_ladder_5 = _2497;
            }
            else
            {
                frontier_phi_60_61_ladder = _2382;
                frontier_phi_60_61_ladder_1 = _2386;
                frontier_phi_60_61_ladder_2 = _2384;
                frontier_phi_60_61_ladder_3 = _2380;
                frontier_phi_60_61_ladder_4 = _2378;
                frontier_phi_60_61_ladder_5 = _2376;
            }
            _2496 = frontier_phi_60_61_ladder_5;
            _2498 = frontier_phi_60_61_ladder_4;
            _2500 = frontier_phi_60_61_ladder_3;
            _2502 = frontier_phi_60_61_ladder;
            _2504 = frontier_phi_60_61_ladder_2;
            _2506 = frontier_phi_60_61_ladder_1;
        }
        float _2511 = isnan(1.0) ? _491 : (isnan(_491) ? 1.0 : min(_491, 1.0));
        _2288 = (_2511 * _2502) + _1722;
        _2290 = (_2511 * _2504) + _1724;
        _2292 = (_2511 * _2506) + _1726;
        _2294 = ((_2496 * _476) * _2511) + _2070;
        _2296 = ((_2498 * _478) * _2511) + _2072;
        _2298 = ((_2500 * _479) * _2511) + _2074;
    }
    else
    {
        _2288 = _1722;
        _2290 = _1724;
        _2292 = _1726;
        _2294 = _2070;
        _2296 = _2072;
        _2298 = _2074;
    }
    float _4219 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _4230 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _4241 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _2315 = ((isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_2288 + ((isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))) * _491))) + ((_2294 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _1333)) * cbPerFrame._m0[3u].x);
    float _2316 = ((isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_2290 + ((isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))) * _491))) + ((_2296 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _1333)) * cbPerFrame._m0[3u].x);
    float _2317 = ((isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_2292 + ((isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))) * _491))) + ((_2298 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _1333)) * cbPerFrame._m0[3u].x);
    uint _2318 = _450 + 6u;
    float _2326 = _410 / cbSceneParam._m0[86u].x;
    float _2327 = _411 / cbSceneParam._m0[86u].y;
    vec4 _2341 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2326, _2327, (log2((isnan(cbSceneParam._m0[77u].w) ? _331 : (isnan(_331) ? cbSceneParam._m0[77u].w : min(_331, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2343 = _2341.x;
    float _2344 = _2341.y;
    float _2345 = _2341.z;
    float _2346 = _2341.w;
    float _2438;
    float _2440;
    float _2442;
    float _2444;
    if (_331 > cbSceneParam._m0[78u].w)
    {
        float _2401 = isnan(_331) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _331 : min(cbSceneParam._m0[80u].w, _331));
        float _2402 = _2401 / _331;
        float _2413 = _2402 * _382;
        float _2414 = _383 * _2402;
        float _2415 = (-0.0) - _2414;
        float _2416 = _2402 * _384;
        float _2418 = (cbSceneParam._m0[77u].w * _2415) / _2401;
        float _2419 = _2418 + cbSceneParam._m0[79u].w;
        float _2420 = cbSceneParam._m0[79u].w - _2414;
        float _2426 = sqrt(((_2413 * _2413) + (_2414 * _2414)) + (_2416 * _2416));
        float _2429 = (1.0 - (cbSceneParam._m0[77u].w / _2401)) * _2426;
        float _2434 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2436 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2613;
        if (abs((_2415 - _2418) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2613 = ((((_2419 > 0.0) ? exp2(_2434 * _2419) : (2.0 - exp2(_2436 * _2419))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2429;
        }
        else
        {
            float _2557 = 1.0 / cbSceneParam._m0[80u].x;
            float _2558 = isnan(_2420) ? _2419 : (isnan(_2419) ? _2420 : max(_2419, _2420));
            float _2559 = isnan(_2420) ? _2419 : (isnan(_2419) ? _2420 : min(_2419, _2420));
            float _2568 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : min(_2558, 0.0));
            float _2569 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : min(_2559, 0.0));
            _2613 = ((abs(_2426 / _2415) * cbSceneParam._m0[80u].y) * ((((_2568 - _2569) * 2.0) - ((exp2(_2434 * (isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0)))) - exp2(_2434 * (isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0))))) * _2557)) - ((exp2(_2436 * _2568) - exp2(_2436 * _2569)) * _2557))) + (_2429 * cbSceneParam._m0[80u].z);
        }
        vec4 _2615 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2326, _2327, 1.0), 0.0);
        float _2624 = exp2((_2613 * (-1.44269502162933349609375)) * (1.0 - _2615.w));
        float _2625 = log2(_2624);
        float _2641 = log2(_2346);
        _2438 = (exp2(_2641 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].x)) * _2615.x) / cbSceneParam._m0[78u].x)) + _2343;
        _2440 = (exp2(_2641 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].y)) * _2615.y) / cbSceneParam._m0[78u].y)) + _2344;
        _2442 = (exp2(_2641 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].z)) * _2615.z) / cbSceneParam._m0[78u].z)) + _2345;
        _2444 = _2624 * _2346;
    }
    else
    {
        _2438 = _2343;
        _2440 = _2344;
        _2442 = _2345;
        _2444 = _2346;
    }
    bool _2651;
    vec4 _2454;
    vec4 _2476;
    float _2478;
    float _2482;
    float _2483;
    float _2484;
    float _2485;
    bool _2495;
    for (;;)
    {
        _2454 = cbMatDynParam._m0[0u];
        float _2456 = roundEven(_2454.y);
        bool _2457 = _2456 == 3.0;
        float _2458 = log2(_2444);
        float _2465 = exp2(_2458 * cbSceneParam._m0[78u].x) * _2315;
        float _2466 = exp2(_2458 * cbSceneParam._m0[78u].y) * _2316;
        float _2467 = exp2(_2458 * cbSceneParam._m0[78u].z) * _2317;
        float _2474 = _398 + (-0.5);
        _2476 = cbMtdParam._m0[1u];
        _2478 = _2476.y * _2474;
        float _2481 = (_2456 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2482 = _2481 * (_2457 ? _2465 : (_2465 + (cbSceneParam._m0[72u].w * _2438)));
        _2483 = _2481 * (_2457 ? _2466 : (_2466 + (cbSceneParam._m0[72u].w * _2440)));
        _2484 = _2481 * (_2457 ? _2467 : (_2467 + (cbSceneParam._m0[72u].w * _2442)));
        _2485 = _2474 * 0.999000012874603271484375;
        _2495 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2495)
        {
            if ((cbInstanceData._m0[_450 + 7u].x + _2485) < 0.5)
            {
                _2651 = true;
                break;
            }
        }
        uint _2592 = _452 + uint(_2454.w);
        if ((cbInstanceData._m0[_2592].w < 1.0) && ((cbInstanceData._m0[_2592].w + _2485) < 0.5))
        {
            _2651 = true;
            break;
        }
        if ((_2478 + _243) < _2476.x)
        {
            _2651 = true;
            break;
        }
        _2651 = false;
        break;
    }
    float _2856;
    if (_2651)
    {
        discard_state = true;
        _2856 = 0.0;
    }
    else
    {
        _2856 = cbInstanceData._m0[_2318].w;
    }
    SV_Target.x = _2482;
    SV_Target.y = _2483;
    SV_Target.z = _2484;
    SV_Target.w = _2856;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2318].w;
    discard_exit();
}


