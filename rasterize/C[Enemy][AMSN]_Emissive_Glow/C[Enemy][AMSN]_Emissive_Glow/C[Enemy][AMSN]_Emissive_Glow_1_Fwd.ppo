#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _824;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _220 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _226 = _220.x * cbMtdParam._m0[9u].x;
    float _227 = _220.y * cbMtdParam._m0[9u].y;
    float _228 = _220.z * cbMtdParam._m0[9u].z;
    vec4 _240 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _244 = _240.z;
    float _248 = (_240.x * 2.0) + (-1.0);
    float _250 = (_240.y * 2.0) + (-1.0);
    float _251 = dot(vec2(_248, _250), vec2(_248, _250));
    float _3183 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _257 = sqrt(1.0 - (isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0))));
    vec4 _279 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _286 = fma(_257, _190 * NORMAL.x, fma(_250, _197 * TANGENT.x, (_183 * _176) * _248));
    float _289 = fma(_257, _190 * NORMAL.y, fma(_250, _197 * TANGENT.y, (_183 * _177) * _248));
    float _292 = fma(_257, _190 * NORMAL.z, fma(_250, _197 * TANGENT.z, (_183 * _178) * _248));
    float _296 = inversesqrt(dot(vec3(_286, _289, _292), vec3(_286, _289, _292)));
    float _297 = _296 * _286;
    float _298 = _296 * _289;
    float _299 = _296 * _292;
    float _3194 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _300 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
    float _3205 = isnan(0.0) ? _226 : (isnan(_226) ? 0.0 : max(_226, 0.0));
    float _3216 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _3227 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _319 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _360 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _370 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _360);
    float _371 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _360);
    float _372 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _360);
    float _376 = inversesqrt(dot(vec3(_370, _371, _372), vec3(_370, _371, _372)));
    float _377 = _370 * _376;
    float _378 = _371 * _376;
    float _379 = _372 * _376;
    float _385 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _386 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _407 = fma(_299, cbSceneParam._m0[5u].z, fma(_298, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _297));
    float _410 = fma(_299, cbSceneParam._m0[6u].z, fma(_298, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _297));
    float _413 = fma(_299, cbSceneParam._m0[7u].z, fma(_298, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _297));
    uint _426 = uint(roundEven(NORMAL.w)) * 13u;
    uint _428 = _426 + 9u;
    uint _429 = _428 + uint(cbMatDynParam._m0[0u].w);
    float _435 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0)))) * cbInstanceData._m0[_429].x;
    float _436 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0)))) * cbInstanceData._m0[_429].y;
    float _437 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0)))) * cbInstanceData._m0[_429].z;
    float _3238 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _438 = isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0));
    float _3249 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _439 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
    float _3260 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
    vec4 _449 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _385, cbSceneParam._m0[86u].y * _386));
    float _452 = _449.x * TEXCOORD.z;
    float _453 = dot(vec3(_297, _298, _299), vec3(_377, _378, _379));
    float _456 = _453 * 2.0;
    float _460 = (_456 * _297) - _377;
    float _461 = (_456 * _298) - _378;
    float _462 = (_456 * _299) - _379;
    float _466 = abs(dot(vec3(_377, _378, _379), vec3(_297, _298, _299)));
    float _3271 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _468 = sqrt(_300);
    float _481 = exp2((_468 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_468 * 3.0));
    float _513 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _517 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _521 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _823;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _548 = fma(_521, cbModelParam._m0[26u].z, fma(_517, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _513));
        float _552 = fma(_521, cbModelParam._m0[27u].z, fma(_517, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _513));
        float _556 = fma(_521, cbModelParam._m0[28u].z, fma(_517, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _513));
        float _581 = _513 + _297;
        float _582 = _517 + _298;
        float _583 = _521 + _299;
        float _593 = fma(_583, cbModelParam._m0[26u].z, fma(_582, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _581)) - _548;
        float _594 = fma(_583, cbModelParam._m0[27u].z, fma(_582, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _581)) - _552;
        float _595 = fma(_583, cbModelParam._m0[28u].z, fma(_582, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _581)) - _556;
        float _599 = inversesqrt(dot(vec3(_593, _594, _595), vec3(_593, _594, _595)));
        float _612 = ((_599 * _593) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_548 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _613 = ((_599 * _594) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_552 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _614 = ((_599 * _595) / cbModelParam._m0[34u].z) + ((((((_556 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _617 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_612, _613, _614), 0.0);
        vec4 _624 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_612, _613, _614), 0.0);
        vec4 _631 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_612, _613, _614), 0.0);
        vec4 _638 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_612, _613, _614), 0.0);
        float _651 = exp2((_617.w + (-0.5)) * 20.0) * 2.0;
        float _652 = _651 * (_617.x + (-0.5));
        float _653 = _651 * (_617.y + (-0.5));
        float _654 = _651 * (_617.z + (-0.5));
        float _661 = exp2((_624.w + (-0.5)) * 20.0) * 2.0;
        float _662 = _661 * (_624.x + (-0.5));
        float _663 = _661 * (_624.y + (-0.5));
        float _664 = _661 * (_624.z + (-0.5));
        float _671 = exp2((_631.w + (-0.5)) * 20.0) * 2.0;
        float _672 = _671 * (_631.x + (-0.5));
        float _673 = _671 * (_631.y + (-0.5));
        float _674 = _671 * (_631.z + (-0.5));
        float _681 = exp2((_638.w + (-0.5)) * 20.0) * 2.0;
        float _682 = _681 * (_638.x + (-0.5));
        float _683 = _681 * (_638.y + (-0.5));
        float _684 = _681 * (_638.z + (-0.5));
        float _685 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _686 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _687 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
        float _688 = _652 * 0.5;
        float _689 = _662 * 0.5;
        float _690 = _672 * 0.5;
        float _691 = dot(vec3(_688, _689, _690), vec3(_688, _689, _690));
        float _696 = (_691 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_691);
        float _705 = (dot(vec3(_297, _298, _299), vec3(_696 * _688, _696 * _689, _696 * _690)) + 1.0) * 0.5;
        float _3297 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _715 = sqrt(((_689 * _689) + (_688 * _688)) + (_690 * _690)) / (_685 + 9.9999997473787516355514526367188e-06);
        float _3308 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _716 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
        float _717 = _716 * 2.0;
        float _721 = (1.0 - _716) / (_716 + 1.0);
        float _3319 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _722 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
        float _731 = ((((1.0 - _722) * (_717 + 2.0)) * exp2(log2(isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0))) * (_717 + 1.0))) + _722) * _685;
        float _732 = _653 * 0.5;
        float _733 = _663 * 0.5;
        float _734 = _673 * 0.5;
        float _735 = dot(vec3(_732, _733, _734), vec3(_732, _733, _734));
        float _740 = (_735 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_735);
        float _748 = (dot(vec3(_297, _298, _299), vec3(_740 * _732, _740 * _733, _740 * _734)) + 1.0) * 0.5;
        float _3330 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _757 = sqrt(((_733 * _733) + (_732 * _732)) + (_734 * _734)) / (_686 + 9.9999997473787516355514526367188e-06);
        float _3341 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _758 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
        float _759 = _758 * 2.0;
        float _763 = (1.0 - _758) / (_758 + 1.0);
        float _3352 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _764 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
        float _773 = ((((1.0 - _764) * (_759 + 2.0)) * exp2(log2(isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0))) * (_759 + 1.0))) + _764) * _686;
        float _774 = _654 * 0.5;
        float _775 = _664 * 0.5;
        float _776 = _674 * 0.5;
        float _777 = dot(vec3(_774, _775, _776), vec3(_774, _775, _776));
        float _782 = (_777 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_777);
        float _790 = (dot(vec3(_297, _298, _299), vec3(_782 * _774, _782 * _775, _782 * _776)) + 1.0) * 0.5;
        float _3363 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _799 = sqrt(((_775 * _775) + (_774 * _774)) + (_776 * _776)) / (_687 + 9.9999997473787516355514526367188e-06);
        float _3374 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
        float _801 = _800 * 2.0;
        float _805 = (1.0 - _800) / (_800 + 1.0);
        float _3385 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _806 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _815 = ((((1.0 - _806) * (_801 + 2.0)) * exp2(log2(isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))) * (_801 + 1.0))) + _806) * _687;
        _823 = _654;
        _825 = _653;
        _826 = _652;
        _827 = _664;
        _828 = _663;
        _829 = _662;
        _830 = _674;
        _831 = _673;
        _832 = _672;
        _833 = _687;
        _834 = _686;
        _835 = _685;
        _836 = cbModelParam._m0[36u].z * (isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0)));
        _837 = cbModelParam._m0[36u].z * (isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0)));
        _838 = cbModelParam._m0[36u].z * (isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0)));
    }
    else
    {
        _823 = _824;
        _825 = _824;
        _826 = _824;
        _827 = _824;
        _828 = _824;
        _829 = _824;
        _830 = _824;
        _831 = _824;
        _832 = _824;
        _833 = _824;
        _834 = _824;
        _835 = _824;
        _836 = 0.0;
        _837 = 0.0;
        _838 = 0.0;
    }
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _864 = fma(_521, cbModelParam._m0[30u].z, fma(_517, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _513));
        float _868 = fma(_521, cbModelParam._m0[31u].z, fma(_517, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _513));
        float _872 = fma(_521, cbModelParam._m0[32u].z, fma(_517, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _513));
        float _895 = _513 + _297;
        float _896 = _517 + _298;
        float _897 = _521 + _299;
        float _907 = fma(_897, cbModelParam._m0[30u].z, fma(_896, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _895)) - _864;
        float _908 = fma(_897, cbModelParam._m0[31u].z, fma(_896, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _895)) - _868;
        float _909 = fma(_897, cbModelParam._m0[32u].z, fma(_896, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _895)) - _872;
        float _913 = inversesqrt(dot(vec3(_907, _908, _909), vec3(_907, _908, _909)));
        float _926 = ((_913 * _907) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_864 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _927 = ((_913 * _908) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_868 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _928 = ((_913 * _909) / cbModelParam._m0[35u].z) + ((((((_872 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        vec4 _937 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        float _963 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_930.x + (-0.5));
        float _965 = _963 * (_930.y + (-0.5));
        float _966 = _963 * (_930.z + (-0.5));
        float _973 = exp2((_937.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_937.x + (-0.5));
        float _975 = _973 * (_937.y + (-0.5));
        float _976 = _973 * (_937.z + (-0.5));
        float _983 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_944.x + (-0.5));
        float _985 = _983 * (_944.y + (-0.5));
        float _986 = _983 * (_944.z + (-0.5));
        float _993 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_951.x + (-0.5));
        float _995 = _993 * (_951.y + (-0.5));
        float _996 = _993 * (_951.z + (-0.5));
        float _997 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _998 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = _964 * 0.5;
        float _1001 = _974 * 0.5;
        float _1002 = _984 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1016 = (dot(vec3(_297, _298, _299), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3426 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1025 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_997 + 9.9999997473787516355514526367188e-06);
        float _3437 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3448 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * (_1027 + 1.0))) + _1032) * _997;
        float _1042 = _965 * 0.5;
        float _1043 = _975 * 0.5;
        float _1044 = _985 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1058 = (dot(vec3(_297, _298, _299), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _3459 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1067 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_998 + 9.9999997473787516355514526367188e-06);
        float _3470 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _3481 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * (_1069 + 1.0))) + _1074) * _998;
        float _1084 = _966 * 0.5;
        float _1085 = _976 * 0.5;
        float _1086 = _986 * 0.5;
        float _1087 = dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086));
        float _1092 = (_1087 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1087);
        float _1100 = (dot(vec3(_297, _298, _299), vec3(_1092 * _1084, _1092 * _1085, _1092 * _1086)) + 1.0) * 0.5;
        float _3492 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1109 = sqrt(((_1085 * _1085) + (_1084 * _1084)) + (_1086 * _1086)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _3503 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _3514 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * (_1111 + 1.0))) + _1116) * _999;
        _1133 = _966;
        _1134 = _965;
        _1135 = _964;
        _1136 = _976;
        _1137 = _975;
        _1138 = _974;
        _1139 = _986;
        _1140 = _985;
        _1141 = _984;
        _1142 = _999;
        _1143 = _998;
        _1144 = _997;
        _1145 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
        _1146 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
        _1147 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
    }
    else
    {
        _1133 = _824;
        _1134 = _824;
        _1135 = _824;
        _1136 = _824;
        _1137 = _824;
        _1138 = _824;
        _1139 = _824;
        _1140 = _824;
        _1141 = _824;
        _1142 = _824;
        _1143 = _824;
        _1144 = _824;
        _1145 = 0.0;
        _1146 = 0.0;
        _1147 = 0.0;
    }
    float _1157 = (cbModelParam._m0[1u].x * (_1145 - _836)) + _836;
    float _1158 = (cbModelParam._m0[1u].x * (_1146 - _837)) + _837;
    float _1159 = (cbModelParam._m0[1u].x * (_1147 - _838)) + _838;
    float _1180 = fma(_1159, cbSceneParam._m0[89u].z, fma(_1158, cbSceneParam._m0[89u].y, _1157 * cbSceneParam._m0[89u].x));
    float _1183 = fma(_1159, cbSceneParam._m0[90u].z, fma(_1158, cbSceneParam._m0[90u].y, _1157 * cbSceneParam._m0[90u].x));
    float _1186 = fma(_1159, cbSceneParam._m0[91u].z, fma(_1158, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1157));
    float _1201 = _460 * 0.5;
    float _1202 = _461 * 0.5;
    float _1203 = _462 * 0.5;
    float _1204 = dot(vec4(_1201, _1202, _1203, 1.0), vec4(_1135, _1138, _1141, _1144));
    float _1207 = dot(vec4(_1201, _1202, _1203, 1.0), vec4(_1134, _1137, _1140, _1143));
    float _1210 = dot(vec4(_1201, _1202, _1203, 1.0), vec4(_1133, _1136, _1139, _1142));
    float _1244;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1217 = dot(vec4(_1201, _1202, _1203, 1.0), vec4(_823, _827, _830, _833));
        float _1221 = dot(vec4(_1201, _1202, _1203, 1.0), vec4(_825, _828, _831, _834));
        float _1225 = dot(vec4(_1201, _1202, _1203, 1.0), vec4(_826, _829, _832, _835));
        float _1232 = dot(vec4(cbModelParam._m0[39u]), vec4(_1201, _1202, _1203, 1.0));
        _1244 = dot(vec3(isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)), isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)), isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1232) ? 0.0 : (isnan(0.0) ? _1232 : max(0.0, _1232))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1244 = 1.0;
    }
    float _1255;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1246 = dot(vec4(cbModelParam._m0[40u]), vec4(_1201, _1202, _1203, 1.0));
        _1255 = dot(vec3(isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)), isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)), isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1246) ? 0.0 : (isnan(0.0) ? _1246 : max(0.0, _1246))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1255 = 1.0;
    }
    float _1259 = (_1255 * cbModelParam._m0[1u].x) + (_1244 * (1.0 - cbModelParam._m0[1u].x));
    float _1269 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _300);
    float _1270 = isnan(_1269) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1269 : min(cbModelParam._m0[25u].z, _1269));
    float _1351;
    float _1353;
    float _1355;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1318 = fma(_521, cbModelParam._m0[13u].z, fma(_517, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _513)) + cbModelParam._m0[13u].w;
        float _1322 = fma(_521, cbModelParam._m0[14u].z, fma(_517, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _513)) + cbModelParam._m0[14u].w;
        float _1326 = fma(_521, cbModelParam._m0[15u].z, fma(_517, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _513)) + cbModelParam._m0[15u].w;
        float _1329 = fma(_462, cbModelParam._m0[13u].z, fma(_461, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _460));
        float _1332 = fma(_462, cbModelParam._m0[14u].z, fma(_461, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _460));
        float _1335 = fma(_462, cbModelParam._m0[15u].z, fma(_461, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _460));
        float _1363;
        if (_1329 > 0.0)
        {
            _1363 = abs((1.0 - _1318) / _1329);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1329 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1318 + 1.0) / _1329);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1363 = frontier_phi_14_12_ladder;
        }
        float _1569;
        if (_1332 > 0.0)
        {
            _1569 = abs((1.0 - _1322) / _1332);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1332 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1322 + 1.0) / _1332);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1569 = frontier_phi_23_19_ladder;
        }
        float _1812;
        if (_1335 > 0.0)
        {
            _1812 = abs((1.0 - _1326) / _1335);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1335 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1326 + 1.0) / _1335);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1812 = frontier_phi_35_30_ladder;
        }
        float _1814 = isnan(_1569) ? _1363 : (isnan(_1363) ? _1569 : min(_1363, _1569));
        float _1815 = isnan(_1812) ? _1814 : (isnan(_1814) ? _1812 : min(_1814, _1812));
        float _1819 = (_1815 * _1329) + _1318;
        float _1820 = (_1815 * _1332) + _1322;
        float _1821 = (_1815 * _1335) + _1326;
        float _1822 = _1815 * 9.9999997473787516355514526367188e-05;
        float _1824 = (-1.0) - _1822;
        float _1826 = _1822 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1821 > _1826) || ((_1821 < _1824) || ((_1820 > _1826) || ((_1820 < _1824) || ((_1819 < _1824) || (_1819 > _1826))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1945 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1821, cbModelParam._m0[9u].z, fma(_1820, cbModelParam._m0[9u].y, _1819 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1821, cbModelParam._m0[10u].z, fma(_1820, cbModelParam._m0[10u].y, _1819 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1821, cbModelParam._m0[11u].z, fma(_1820, cbModelParam._m0[11u].y, _1819 * cbModelParam._m0[11u].x))), _1270);
            frontier_phi_13_35_ladder = _1945.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1945.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1945.x * cbModelParam._m0[1u].y;
        }
        _1351 = frontier_phi_13_35_ladder_2;
        _1353 = frontier_phi_13_35_ladder_1;
        _1355 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1339 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_460, _461, _462), _1270);
        _1351 = _1339.x * cbModelParam._m0[1u].y;
        _1353 = _1339.y * cbModelParam._m0[1u].y;
        _1355 = _1339.z * cbModelParam._m0[1u].y;
    }
    float _1359 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _300);
    float _1360 = isnan(_1359) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1359 : min(cbModelParam._m0[25u].w, _1359));
    float _1453;
    float _1455;
    float _1457;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1417 = fma(_521, cbModelParam._m0[21u].z, fma(_517, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _513)) + cbModelParam._m0[21u].w;
        float _1421 = fma(_521, cbModelParam._m0[22u].z, fma(_517, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _513)) + cbModelParam._m0[22u].w;
        float _1425 = fma(_521, cbModelParam._m0[23u].z, fma(_517, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _513)) + cbModelParam._m0[23u].w;
        float _1428 = fma(_462, cbModelParam._m0[21u].z, fma(_461, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _460));
        float _1431 = fma(_462, cbModelParam._m0[22u].z, fma(_461, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _460));
        float _1434 = fma(_462, cbModelParam._m0[23u].z, fma(_461, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _460));
        float _1574;
        if (_1428 > 0.0)
        {
            _1574 = abs((1.0 - _1417) / _1428);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1428 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1417 + 1.0) / _1428);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1574 = frontier_phi_25_21_ladder;
        }
        float _1839;
        if (_1431 > 0.0)
        {
            _1839 = abs((1.0 - _1421) / _1431);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1431 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1421 + 1.0) / _1431);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1839 = frontier_phi_37_32_ladder;
        }
        float _2044;
        if (_1434 > 0.0)
        {
            _2044 = abs((1.0 - _1425) / _1434);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1434 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1425 + 1.0) / _1434);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2044 = frontier_phi_46_43_ladder;
        }
        float _2046 = isnan(_1839) ? _1574 : (isnan(_1574) ? _1839 : min(_1574, _1839));
        float _2047 = isnan(_2044) ? _2046 : (isnan(_2046) ? _2044 : min(_2046, _2044));
        float _2051 = (_2047 * _1428) + _1417;
        float _2052 = (_2047 * _1431) + _1421;
        float _2053 = (_2047 * _1434) + _1425;
        float _2054 = _2047 * 9.9999997473787516355514526367188e-05;
        float _2055 = (-1.0) - _2054;
        float _2057 = _2054 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2053 > _2057) || ((_2053 < _2055) || ((_2052 > _2057) || ((_2052 < _2055) || ((_2051 < _2055) || (_2051 > _2057))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2287 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2053, cbModelParam._m0[17u].z, fma(_2052, cbModelParam._m0[17u].y, _2051 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2053, cbModelParam._m0[18u].z, fma(_2052, cbModelParam._m0[18u].y, _2051 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2053, cbModelParam._m0[19u].z, fma(_2052, cbModelParam._m0[19u].y, _2051 * cbModelParam._m0[19u].x))), _1360);
            frontier_phi_22_46_ladder = _2287.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2287.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2287.x * cbModelParam._m0[1u].z;
        }
        _1453 = frontier_phi_22_46_ladder_2;
        _1455 = frontier_phi_22_46_ladder_1;
        _1457 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1437 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_460, _461, _462), _1360);
        _1453 = _1437.x * cbModelParam._m0[1u].z;
        _1455 = _1437.y * cbModelParam._m0[1u].z;
        _1457 = _1437.z * cbModelParam._m0[1u].z;
    }
    float _1469 = ((((1.0 - _481) * ((_468 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_481 * _468)) * _452;
    float _1470 = _1469 * ((cbModelParam._m0[1u].w * (_1453 - _1351)) + _1351);
    float _1471 = _1469 * ((cbModelParam._m0[1u].w * (_1455 - _1353)) + _1353);
    float _1472 = _1469 * ((cbModelParam._m0[1u].w * (_1457 - _1355)) + _1355);
    float _1475 = fma(_1472, cbSceneParam._m0[89u].z, fma(_1471, cbSceneParam._m0[89u].y, _1470 * cbSceneParam._m0[89u].x));
    float _1478 = fma(_1472, cbSceneParam._m0[90u].z, fma(_1471, cbSceneParam._m0[90u].y, _1470 * cbSceneParam._m0[90u].x));
    float _1481 = fma(_1472, cbSceneParam._m0[91u].z, fma(_1471, cbSceneParam._m0[91u].y, _1470 * cbSceneParam._m0[91u].x));
    uvec4 _1491 = floatBitsToUint(cbInstanceData._m0[_426 + 5u]);
    uint _1493 = _1491.x * 14u;
    uint _1494 = _1493 + 13u;
    float _1501 = _452 + (-1.0);
    float _1506 = (cbLight._m0[_1494].x * _1501) + 1.0;
    float _1507 = (cbLight._m0[_1494].y * _1501) + 1.0;
    float _1508 = (cbLight._m0[_1494].z * _1501) + 1.0;
    float _1509 = (cbLight._m0[_1494].w * _1501) + 1.0;
    uint _1510 = _1493 + 5u;
    float _1516 = isnan(1.0) ? _1507 : (isnan(_1507) ? 1.0 : min(_1507, 1.0));
    uint _1520 = _1493 + 4u;
    float _1527 = isnan(1.0) ? _1506 : (isnan(_1506) ? 1.0 : min(_1506, 1.0));
    uint _1531 = _1493 | 1u;
    float _1542 = dot(vec3(cbLight._m0[_1493].xyz), vec3(_297, _298, _299));
    float _1545 = dot(vec3(cbLight._m0[_1531].xyz), vec3(_297, _298, _299));
    float _3650 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
    float _3661 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
    float _1550 = (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * 0.3183098733425140380859375;
    float _1552 = (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * 0.3183098733425140380859375;
    float _1559 = ((cbLight._m0[_1510].x * _1516) * _1552) + ((cbLight._m0[_1520].x * _1527) * _1550);
    float _1560 = ((_1516 * cbLight._m0[_1510].y) * _1552) + ((_1527 * cbLight._m0[_1520].y) * _1550);
    float _1561 = ((_1516 * cbLight._m0[_1510].z) * _1552) + ((_1527 * cbLight._m0[_1520].z) * _1550);
    uvec4 _1566 = floatBitsToUint(cbLight._m0[_1493 + 12u]);
    bool _1568 = _1566.x == 0u;
    float _1579;
    float _1581;
    float _1583;
    if (_1568)
    {
        _1579 = _1559;
        _1581 = _1560;
        _1583 = _1561;
    }
    else
    {
        uint _1587 = _1493 + 6u;
        float _1603 = (dot(vec3(cbLight._m0[_1493 + 2u].xyz), vec3(_297, _298, _299)) * 0.5) + 0.5;
        float _1604 = _1603 * _1603;
        float _3672 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1606 = isnan(1.0) ? _1508 : (isnan(_1508) ? 1.0 : min(_1508, 1.0));
        _1579 = (((cbLight._m0[_1587].x * 0.3183098733425140380859375) * _1605) * _1606) + _1559;
        _1581 = (((cbLight._m0[_1587].y * 0.3183098733425140380859375) * _1605) * _1606) + _1560;
        _1583 = (((cbLight._m0[_1587].z * 0.3183098733425140380859375) * _1605) * _1606) + _1561;
    }
    bool _1586 = _1566.y == 0u;
    float _1624;
    float _1626;
    float _1628;
    if (_1586)
    {
        _1624 = _1579;
        _1626 = _1581;
        _1628 = _1583;
    }
    else
    {
        uint _1783 = _1493 + 7u;
        float _1799 = (dot(vec3(cbLight._m0[_1493 + 3u].xyz), vec3(_297, _298, _299)) * 0.5) + 0.5;
        float _1800 = _1799 * _1799;
        float _3688 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1802 = isnan(1.0) ? _1509 : (isnan(_1509) ? 1.0 : min(_1509, 1.0));
        _1624 = (((cbLight._m0[_1783].x * 0.3183098733425140380859375) * _1801) * _1802) + _1579;
        _1626 = (((cbLight._m0[_1783].y * 0.3183098733425140380859375) * _1801) * _1802) + _1581;
        _1628 = (((cbLight._m0[_1783].z * 0.3183098733425140380859375) * _1801) * _1802) + _1583;
    }
    uint _1631 = _1493 + 8u;
    float _1644 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1493].w)) * _300) * 0.949999988079071044921875);
    float _1645 = _1644 * _1644;
    float _1646 = cbLight._m0[_1493].x + _377;
    float _1647 = cbLight._m0[_1493].y + _378;
    float _1648 = cbLight._m0[_1493].z + _379;
    float _1652 = inversesqrt(dot(vec3(_1646, _1647, _1648), vec3(_1646, _1647, _1648)));
    float _1653 = _1652 * _1646;
    float _1654 = _1652 * _1647;
    float _1655 = _1652 * _1648;
    float _1656 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_1493].xyz));
    float _3704 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
    float _1659 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _3715 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _1660 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _1661 = dot(vec3(_297, _298, _299), vec3(_1653, _1654, _1655));
    float _3726 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
    float _1664 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _1665 = dot(vec3(cbLight._m0[_1493].xyz), vec3(_1653, _1654, _1655));
    float _3737 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
    float _1669 = _1645 * _1645;
    float _1673 = ((_1664 * _1664) * (_1669 + (-1.0))) + 1.0;
    float _1684 = (exp2(log2(1.0 - (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1685 = 1.0 - _1645;
    float _1696 = (0.5 / (((_1660 * ((_1659 * _1685) + _1645)) + 9.9999999392252902907785028219223e-09) + (((_1660 * _1685) + _1645) * _1659))) * _1659;
    float _3748 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
    float _1698 = (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * (_1669 / ((_1673 * _1673) * 3.141590118408203125));
    uint _1709 = _1493 + 9u;
    float _1720 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1531].w)) * _300) * 0.949999988079071044921875);
    float _1721 = _1720 * _1720;
    float _1722 = cbLight._m0[_1531].x + _377;
    float _1723 = cbLight._m0[_1531].y + _378;
    float _1724 = cbLight._m0[_1531].z + _379;
    float _1728 = inversesqrt(dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724)));
    float _1729 = _1728 * _1722;
    float _1730 = _1728 * _1723;
    float _1731 = _1728 * _1724;
    float _1732 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_1531].xyz));
    float _3759 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1735 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _1736 = dot(vec3(_297, _298, _299), vec3(_1729, _1730, _1731));
    float _3770 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1739 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _1740 = dot(vec3(cbLight._m0[_1531].xyz), vec3(_1729, _1730, _1731));
    float _3781 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1744 = _1721 * _1721;
    float _1748 = ((_1739 * _1739) * (_1744 + (-1.0))) + 1.0;
    float _1757 = (exp2(log2(1.0 - (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1758 = 1.0 - _1721;
    float _1768 = (0.5 / (((_1660 * ((_1735 * _1758) + _1721)) + 9.9999999392252902907785028219223e-09) + (((_1660 * _1758) + _1721) * _1735))) * _1735;
    float _3792 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1770 = (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1744 / ((_1748 * _1748) * 3.141590118408203125));
    float _1780 = (((_1757 * cbLight._m0[_1709].x) * _1770) * _1516) + (((_1684 * cbLight._m0[_1631].x) * _1698) * _1527);
    float _1781 = (((_1757 * cbLight._m0[_1709].y) * _1770) * _1516) + (((_1684 * cbLight._m0[_1631].y) * _1698) * _1527);
    float _1782 = (((_1757 * cbLight._m0[_1709].z) * _1770) * _1516) + (((_1684 * cbLight._m0[_1631].z) * _1698) * _1527);
    float _1844;
    float _1846;
    float _1848;
    if (_1568)
    {
        _1844 = _1780;
        _1846 = _1781;
        _1848 = _1782;
    }
    else
    {
        uint _1850 = _1493 + 2u;
        uint _1854 = _1493 + 10u;
        float _1868 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1850].w)) * _300) * 0.949999988079071044921875);
        float _1869 = _1868 * _1868;
        float _1870 = cbLight._m0[_1850].x + _377;
        float _1871 = cbLight._m0[_1850].y + _378;
        float _1872 = cbLight._m0[_1850].z + _379;
        float _1876 = inversesqrt(dot(vec3(_1870, _1871, _1872), vec3(_1870, _1871, _1872)));
        float _1877 = _1876 * _1870;
        float _1878 = _1876 * _1871;
        float _1879 = _1876 * _1872;
        float _1880 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_1850].xyz));
        float _3803 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1883 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1884 = dot(vec3(_297, _298, _299), vec3(_1877, _1878, _1879));
        float _3814 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1887 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1888 = dot(vec3(cbLight._m0[_1850].xyz), vec3(_1877, _1878, _1879));
        float _3825 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1892 = _1869 * _1869;
        float _1896 = ((_1887 * _1887) * (_1892 + (-1.0))) + 1.0;
        float _1905 = (exp2(log2(1.0 - (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1906 = 1.0 - _1869;
        float _1916 = (0.5 / (((_1660 * ((_1883 * _1906) + _1869)) + 9.9999999392252902907785028219223e-09) + (((_1660 * _1906) + _1869) * _1883))) * _1883;
        float _3836 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
        float _1918 = (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1892 / ((_1896 * _1896) * 3.141590118408203125));
        float _1919 = isnan(1.0) ? _1508 : (isnan(_1508) ? 1.0 : min(_1508, 1.0));
        _1844 = (((_1905 * cbLight._m0[_1854].x) * _1918) * _1919) + _1780;
        _1846 = (((_1905 * cbLight._m0[_1854].y) * _1918) * _1919) + _1781;
        _1848 = (((_1905 * cbLight._m0[_1854].z) * _1918) * _1919) + _1782;
    }
    float _1954;
    float _1956;
    float _1958;
    if (_1586)
    {
        _1954 = _1844;
        _1956 = _1846;
        _1958 = _1848;
    }
    else
    {
        uint _1965 = _1493 + 3u;
        uint _1969 = _1493 + 11u;
        float _1983 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1965].w)) * _300) * 0.949999988079071044921875);
        float _1984 = _1983 * _1983;
        float _1985 = cbLight._m0[_1965].x + _377;
        float _1986 = cbLight._m0[_1965].y + _378;
        float _1987 = cbLight._m0[_1965].z + _379;
        float _1991 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
        float _1992 = _1991 * _1985;
        float _1993 = _1991 * _1986;
        float _1994 = _1991 * _1987;
        float _1995 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_1965].xyz));
        float _3852 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1998 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1999 = dot(vec3(_297, _298, _299), vec3(_1992, _1993, _1994));
        float _3863 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2002 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _2003 = dot(vec3(cbLight._m0[_1965].xyz), vec3(_1992, _1993, _1994));
        float _3874 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2007 = _1984 * _1984;
        float _2011 = ((_2002 * _2002) * (_2007 + (-1.0))) + 1.0;
        float _2020 = (exp2(log2(1.0 - (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2021 = 1.0 - _1984;
        float _2031 = (0.5 / (((_1660 * ((_1998 * _2021) + _1984)) + 9.9999999392252902907785028219223e-09) + (((_1660 * _2021) + _1984) * _1998))) * _1998;
        float _3885 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2033 = (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_2007 / ((_2011 * _2011) * 3.141590118408203125));
        float _2034 = isnan(1.0) ? _1509 : (isnan(_1509) ? 1.0 : min(_1509, 1.0));
        _1954 = (((_2020 * cbLight._m0[_1969].x) * _2033) * _2034) + _1844;
        _1956 = (((_2020 * cbLight._m0[_1969].y) * _2033) * _2034) + _1846;
        _1958 = (((_2020 * cbLight._m0[_1969].z) * _2033) * _2034) + _1848;
    }
    float _2169;
    float _2171;
    float _2173;
    float _2175;
    float _2177;
    float _2179;
    if (_1491.y == 0u)
    {
        float _2109 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2110 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2109;
        float _2111 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2109;
        float _2112 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2109;
        uvec4 _2124 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2125 = _2124.x;
        uint _2136 = uint((float(_2124.y) * floor(float(uint(cbSceneParam._m0[85u].y * _386) / _2125))) + floor(float(uint(cbSceneParam._m0[85u].x * _385) / _2125)));
        float _2146 = (log2(_2112 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2147 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        uint _2150 = uint(isnan(14.0) ? _2147 : (isnan(_2147) ? 14.0 : min(_2147, 14.0)));
        uvec4 _2155 = texelFetch(g_lightClusterGridBuffer, int(((_2150 << 2u) + (_2136 << 6u)) >> 2u));
        uint _2156 = _2155.x;
        uint _2157 = _2124.z;
        float _2292;
        float _2294;
        float _2296;
        float _2298;
        float _2300;
        float _2302;
        if (((((1u << ((_2157 >> 4u) & 15u)) + 4294967295u) & _2156) == 0u) || ((_2157 & 240u) == 0u))
        {
            _2292 = 0.0;
            _2294 = 0.0;
            _2296 = 0.0;
            _2298 = 0.0;
            _2300 = 0.0;
            _2302 = 0.0;
        }
        else
        {
            float _2293;
            float _2295;
            float _2297;
            float _2299;
            float _2301;
            float _2303;
            float _2446 = 0.0;
            float _2447 = 0.0;
            float _2448 = 0.0;
            float _2449 = 0.0;
            float _2450 = 0.0;
            float _2451 = 0.0;
            uint _2452 = 0u;
            uint _2461;
            bool _2462;
            for (;;)
            {
                _2461 = texelFetch(g_lightClassification, int((((_2150 << 5u) + (_2136 << 9u)) + (_2452 << 2u)) >> 2u)).x;
                _2462 = _2461 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2462)
                {
                    frontier_phi_61_pred = _2446;
                    frontier_phi_61_pred_1 = _2451;
                    frontier_phi_61_pred_2 = _2450;
                    frontier_phi_61_pred_3 = _2449;
                    frontier_phi_61_pred_4 = _2448;
                    frontier_phi_61_pred_5 = _2447;
                }
                else
                {
                    float _2570;
                    float _2571;
                    float _2572;
                    float _2573;
                    float _2574;
                    float _2575;
                    uint _2576;
                    _2570 = _2446;
                    _2571 = _2447;
                    _2572 = _2448;
                    _2573 = _2449;
                    _2574 = _2450;
                    _2575 = _2451;
                    _2576 = _2461;
                    float _2502;
                    float _2503;
                    float _2504;
                    float _2505;
                    float _2506;
                    float _2507;
                    for (;;)
                    {
                        uint _2580 = uint(findLSB(_2576)) + (_2452 << 5u);
                        uint _2577 = (_2576 + 4294967295u) & _2576;
                        uint _2582 = _2580 * 48u;
                        vec4 _2596 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2582)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 3u)).x));
                        uint _2602 = (_2580 * 48u) + 4u;
                        vec4 _2615 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2602)).x, texelFetch(g_PointLightRenderingBuffer, int(_2602 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2602 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2602 + 3u)).x));
                        uint _2621 = (_2580 * 48u) + 8u;
                        vec3 _2632 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2621)).x, texelFetch(g_PointLightRenderingBuffer, int(_2621 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2621 + 2u)).x));
                        float _2636 = _2596.x - _2110;
                        float _2637 = _2596.y - _2111;
                        float _2638 = _2596.z - _2112;
                        float _2639 = dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638));
                        float _2642 = inversesqrt(_2639);
                        float _2643 = _2642 * _2636;
                        float _2644 = _2642 * _2637;
                        float _2645 = _2642 * _2638;
                        float _2646 = dot(vec3(_407, _410, _413), vec3(_2643, _2644, _2645));
                        float _2651 = 1.0 - (_2639 * _2596.w);
                        float _3911 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
                        float _2652 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
                        float _2653 = sqrt(_2639) * _2615.w;
                        float _2656 = 1.39999997615814208984375 / (_2653 + 1.39999997615814208984375);
                        float _2657 = _2656 * _2656;
                        float _2660 = ((1.0 - _2657) * _2646) + _2657;
                        float _2663 = _2653 * _2653;
                        float _2667 = ((isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0))) * _2652) / ((_2663 * 0.699999988079071044921875) + 1.0);
                        float _2671 = (-0.0) - _2110;
                        float _2672 = (-0.0) - _2111;
                        float _2673 = (-0.0) - _2112;
                        float _2677 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
                        float _2678 = _2677 * _2671;
                        float _2679 = _2677 * _2672;
                        float _2680 = _2677 * _2673;
                        float _2688 = exp2(log2(1.0 / ((_2663 * 3.5) + 5.0)) * 0.25);
                        float _2689 = 1.0 - _468;
                        float _2696 = sqrt(1.0 - ((1.0 - (_2689 * _2689)) * (1.0 - (_2688 * _2688))));
                        float _2697 = _2696 * _2696;
                        float _2698 = _2697 * _2697;
                        float _2699 = _2678 + _2643;
                        float _2700 = _2679 + _2644;
                        float _2701 = _2680 + _2645;
                        float _2705 = inversesqrt(dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701)));
                        float _2709 = dot(vec3(_407, _410, _413), vec3(_2678, _2679, _2680));
                        float _3927 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
                        float _2712 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
                        float _2713 = dot(vec3(_407, _410, _413), vec3(_2705 * _2699, _2705 * _2700, _2705 * _2701));
                        float _3938 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
                        float _2716 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
                        float _2720 = ((_2716 * _2716) * (_2698 + (-1.0))) + 1.0;
                        float _2721 = _2656 * _2697;
                        float _2722 = _2721 * _2721;
                        float _2725 = ((1.0 - _2722) * _2646) + _2722;
                        float _3949 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
                        float _2726 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
                        float _2727 = 1.0 - _2697;
                        float _2737 = (0.5 / (((_2726 * ((_2712 * _2727) + _2697)) + 9.9999999392252902907785028219223e-09) + (((_2726 * _2727) + _2697) * _2712))) * _2726;
                        float _3960 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
                        float _2748 = (((_2698 * 3.1415927410125732421875) * (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) / ((_2720 * _2720) * ((_2663 * 2.1991131305694580078125) + 3.141590118408203125))) * _2652;
                        _2505 = (_2667 * _2615.x) + _2573;
                        _2506 = (_2667 * _2615.y) + _2574;
                        _2507 = (_2667 * _2615.z) + _2575;
                        _2502 = (_2748 * _2632.x) + _2570;
                        _2503 = (_2748 * _2632.y) + _2571;
                        _2504 = (_2748 * _2632.z) + _2572;
                        if (_2577 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2570 = _2502;
                            _2571 = _2503;
                            _2572 = _2504;
                            _2573 = _2505;
                            _2574 = _2506;
                            _2575 = _2507;
                            _2576 = _2577;
                        }
                    }
                    frontier_phi_61_pred = _2502;
                    frontier_phi_61_pred_1 = _2507;
                    frontier_phi_61_pred_2 = _2506;
                    frontier_phi_61_pred_3 = _2505;
                    frontier_phi_61_pred_4 = _2504;
                    frontier_phi_61_pred_5 = _2503;
                }
                _2293 = frontier_phi_61_pred;
                _2303 = frontier_phi_61_pred_1;
                _2301 = frontier_phi_61_pred_2;
                _2299 = frontier_phi_61_pred_3;
                _2297 = frontier_phi_61_pred_4;
                _2295 = frontier_phi_61_pred_5;
                uint _2453 = _2452 + 1u;
                if (_2453 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2446 = _2293;
                    _2447 = _2295;
                    _2448 = _2297;
                    _2449 = _2299;
                    _2450 = _2301;
                    _2451 = _2303;
                    _2452 = _2453;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2292 = _2293;
            _2294 = _2295;
            _2296 = _2297;
            _2298 = _2299;
            _2300 = _2301;
            _2302 = _2303;
        }
        uvec4 _2306 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2307 = _2306.z;
        uint _2309 = (_2307 >> 8u) & 15u;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        float _2424;
        if (((4294967295u << _2309) & _2156) == 0u)
        {
            _2414 = _2292;
            _2416 = _2294;
            _2418 = _2296;
            _2420 = _2298;
            _2422 = _2300;
            _2424 = _2302;
        }
        else
        {
            float _2439 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
            float _2440 = _2439 * _2110;
            float _2441 = _2439 * _2111;
            float _2442 = _2439 * _2112;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2309 < ((_2307 >> 12u) & 15u))
            {
                float _2415;
                float _2417;
                float _2419;
                float _2421;
                float _2423;
                float _2425;
                float _2553 = _2292;
                float _2554 = _2294;
                float _2555 = _2296;
                float _2556 = _2298;
                float _2557 = _2300;
                float _2558 = _2302;
                uint _2559 = _2309;
                uint _2568;
                bool _2569;
                for (;;)
                {
                    _2568 = texelFetch(g_lightClassification, int((((_2150 << 5u) + (_2136 << 9u)) + (_2559 << 2u)) >> 2u)).x;
                    _2569 = _2568 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2569)
                    {
                        frontier_phi_67_pred = _2556;
                        frontier_phi_67_pred_1 = _2557;
                        frontier_phi_67_pred_2 = _2558;
                        frontier_phi_67_pred_3 = _2555;
                        frontier_phi_67_pred_4 = _2554;
                        frontier_phi_67_pred_5 = _2553;
                    }
                    else
                    {
                        float _2753;
                        float _2754;
                        float _2755;
                        float _2756;
                        float _2757;
                        float _2758;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _2766 = _2553;
                        float _2767 = _2554;
                        float _2768 = _2555;
                        float _2769 = _2556;
                        float _2770 = _2557;
                        float _2771 = _2558;
                        uint _2772 = _2568;
                        uint _2773;
                        vec4 _2798;
                        float _2799;
                        vec4 _2814;
                        vec3 _2826;
                        vec4 _2842;
                        vec4 _2858;
                        float _2905;
                        bool _2906;
                        for (;;)
                        {
                            uint _2783 = ((_2559 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2772));
                            _2773 = (_2772 + 4294967295u) & _2772;
                            uint _2785 = _2783 * 40u;
                            _2798 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2785)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 3u)).x));
                            _2799 = _2798.w;
                            uint _2801 = (_2783 * 40u) + 4u;
                            _2814 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 3u)).x));
                            uint _2816 = (_2783 * 40u) + 8u;
                            _2826 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 2u)).x));
                            uint _2829 = (_2783 * 40u) + 16u;
                            _2842 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 3u)).x));
                            uint _2845 = (_2783 * 40u) + 20u;
                            _2858 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2845)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 3u)).x));
                            uint _2861 = (_2783 * 40u) + 24u;
                            vec4 _2874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 3u)).x));
                            uint _2880 = (_2783 * 40u) + 28u;
                            vec4 _2893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 3u)).x));
                            _2905 = fma(_2112, _2893.z, fma(_2111, _2893.y, _2893.x * _2110)) + _2893.w;
                            _2906 = !((fma(_2112, _2874.z, fma(_2111, _2874.y, _2874.x * _2110)) + _2874.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2906)
                            {
                                float _2933 = _2798.x - _2110;
                                float _2934 = _2798.y - _2111;
                                float _2935 = _2798.z - _2112;
                                float _2936 = dot(vec3(_2933, _2934, _2935), vec3(_2933, _2934, _2935));
                                float _2939 = inversesqrt(_2936);
                                float _2940 = _2939 * _2933;
                                float _2941 = _2939 * _2934;
                                float _2942 = _2939 * _2935;
                                float _2946 = 1.0 - (_2936 / (_2799 * _2799));
                                float _3971 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                                float _2947 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
                                float _2951 = sqrt(_2936) * _2814.w;
                                float _2953 = 1.39999997615814208984375 / (_2951 + 1.39999997615814208984375);
                                float _2954 = _2953 * _2953;
                                float _2957 = ((1.0 - _2954) * dot(vec3(_2940, _2941, _2942), vec3(_407, _410, _413))) + _2954;
                                float _2960 = _2951 * _2951;
                                float _2964 = (fma(_2112, _2842.z, fma(_2111, _2842.y, _2842.x * _2110)) + _2842.w) / _2905;
                                float _2965 = (fma(_2112, _2858.z, fma(_2111, _2858.y, _2858.x * _2110)) + _2858.w) / _2905;
                                float _2969 = 1.0 - dot(vec2(_2964, _2965), vec2(_2964, _2965));
                                float _3987 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                                float _2970 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
                                float _2971 = _2970 * (((isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0))) * _2947) / ((_2960 * 0.699999988079071044921875) + 1.0));
                                float _2983 = exp2(log2(1.0 / ((_2960 * 3.5) + 5.0)) * 0.25);
                                float _2984 = 1.0 - _468;
                                float _2991 = sqrt(1.0 - ((1.0 - (_2984 * _2984)) * (1.0 - (_2983 * _2983))));
                                float _2992 = _2991 * _2991;
                                float _2993 = _2992 * _2992;
                                float _2994 = _2940 - _2440;
                                float _2995 = _2941 - _2441;
                                float _2996 = _2942 - _2442;
                                float _3000 = inversesqrt(dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996)));
                                float _3004 = dot(vec3(_407, _410, _413), vec3((-0.0) - _2440, (-0.0) - _2441, (-0.0) - _2442));
                                float _3998 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                                float _3007 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
                                float _3008 = dot(vec3(_407, _410, _413), vec3(_3000 * _2994, _3000 * _2995, _3000 * _2996));
                                float _4009 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                                float _3011 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
                                float _3015 = ((_3011 * _3011) * (_2993 + (-1.0))) + 1.0;
                                float _3016 = _2953 * _2992;
                                float _3017 = _3016 * _3016;
                                float _3023 = ((1.0 - _3017) * dot(vec3(_407, _410, _413), vec3(_2940, _2941, _2942))) + _3017;
                                float _4020 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                                float _3024 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                                float _3025 = 1.0 - _2992;
                                float _3035 = (0.5 / (((_3024 * ((_3007 * _3025) + _2992)) + 9.9999999392252902907785028219223e-09) + (((_3024 * _3025) + _2992) * _3007))) * _3024;
                                float _4031 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                                float _3045 = (_2970 * _2947) * (((_2993 * 3.1415927410125732421875) * (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) / ((_3015 * _3015) * ((_2960 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3045 * _2826.x;
                                frontier_phi_73_pred_1 = _3045 * _2826.y;
                                frontier_phi_73_pred_2 = _2971 * _2814.z;
                                frontier_phi_73_pred_3 = _2971 * _2814.y;
                                frontier_phi_73_pred_4 = _2971 * _2814.x;
                                frontier_phi_73_pred_5 = _3045 * _2826.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3049 = frontier_phi_73_pred;
                            _3050 = frontier_phi_73_pred_1;
                            _3054 = frontier_phi_73_pred_2;
                            _3053 = frontier_phi_73_pred_3;
                            _3052 = frontier_phi_73_pred_4;
                            _3051 = frontier_phi_73_pred_5;
                            _2756 = _3052 + _2769;
                            _2757 = _3053 + _2770;
                            _2758 = _3054 + _2771;
                            _2753 = _3049 + _2766;
                            _2754 = _3050 + _2767;
                            _2755 = _3051 + _2768;
                            if (_2773 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2766 = _2753;
                                _2767 = _2754;
                                _2768 = _2755;
                                _2769 = _2756;
                                _2770 = _2757;
                                _2771 = _2758;
                                _2772 = _2773;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2756;
                        frontier_phi_67_pred_1 = _2757;
                        frontier_phi_67_pred_2 = _2758;
                        frontier_phi_67_pred_3 = _2755;
                        frontier_phi_67_pred_4 = _2754;
                        frontier_phi_67_pred_5 = _2753;
                    }
                    _2421 = frontier_phi_67_pred;
                    _2423 = frontier_phi_67_pred_1;
                    _2425 = frontier_phi_67_pred_2;
                    _2419 = frontier_phi_67_pred_3;
                    _2417 = frontier_phi_67_pred_4;
                    _2415 = frontier_phi_67_pred_5;
                    uint _2560 = _2559 + 1u;
                    if (_2560 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2553 = _2415;
                        _2554 = _2417;
                        _2555 = _2419;
                        _2556 = _2421;
                        _2557 = _2423;
                        _2558 = _2425;
                        _2559 = _2560;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2423;
                frontier_phi_55_56_ladder_1 = _2425;
                frontier_phi_55_56_ladder_2 = _2421;
                frontier_phi_55_56_ladder_3 = _2419;
                frontier_phi_55_56_ladder_4 = _2417;
                frontier_phi_55_56_ladder_5 = _2415;
            }
            else
            {
                frontier_phi_55_56_ladder = _2300;
                frontier_phi_55_56_ladder_1 = _2302;
                frontier_phi_55_56_ladder_2 = _2298;
                frontier_phi_55_56_ladder_3 = _2296;
                frontier_phi_55_56_ladder_4 = _2294;
                frontier_phi_55_56_ladder_5 = _2292;
            }
            _2414 = frontier_phi_55_56_ladder_5;
            _2416 = frontier_phi_55_56_ladder_4;
            _2418 = frontier_phi_55_56_ladder_3;
            _2420 = frontier_phi_55_56_ladder_2;
            _2422 = frontier_phi_55_56_ladder;
            _2424 = frontier_phi_55_56_ladder_1;
        }
        float _2429 = isnan(1.0) ? _452 : (isnan(_452) ? 1.0 : min(_452, 1.0));
        _2169 = (_2429 * _2420) + _1624;
        _2171 = (_2429 * _2422) + _1626;
        _2173 = (_2429 * _2424) + _1628;
        _2175 = ((_2414 * 0.039999999105930328369140625) * _2429) + _1954;
        _2177 = ((_2416 * 0.039999999105930328369140625) * _2429) + _1956;
        _2179 = ((_2418 * 0.039999999105930328369140625) * _2429) + _1958;
    }
    else
    {
        _2169 = _1624;
        _2171 = _1626;
        _2173 = _1628;
        _2175 = _1954;
        _2177 = _1956;
        _2179 = _1958;
    }
    uint _2185 = _428 + uint(cbMatDynParam._m0[0u].w);
    float _2193 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _279.x) * cbInstanceData._m0[_2185].x;
    float _2196 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _279.y) * cbInstanceData._m0[_2185].y;
    float _2199 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _279.z) * cbInstanceData._m0[_2185].z;
    float _4047 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _4058 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _4069 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _2216 = (((isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_2169 + ((isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0))) * _452))) + ((_2175 + ((isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))) * _1259)) * cbPerFrame._m0[3u].x)) + _2193;
    float _2218 = (_2196 + ((_2177 + ((isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))) * _1259)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_2171 + ((isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0))) * _452)));
    float _2220 = (_2199 + ((_2179 + ((isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))) * _1259)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_2173 + ((isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0))) * _452)));
    float _4095 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2233 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    uint _2234 = _426 + 6u;
    float _2242 = _385 / cbSceneParam._m0[86u].x;
    float _2243 = _386 / cbSceneParam._m0[86u].y;
    vec4 _2257 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2242, _2243, (log2((isnan(cbSceneParam._m0[77u].w) ? _319 : (isnan(_319) ? cbSceneParam._m0[77u].w : min(_319, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2259 = _2257.x;
    float _2260 = _2257.y;
    float _2261 = _2257.z;
    float _2262 = _2257.w;
    float _2355;
    float _2357;
    float _2359;
    float _2361;
    if (_319 > cbSceneParam._m0[78u].w)
    {
        float _2317 = isnan(_319) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _319 : min(cbSceneParam._m0[80u].w, _319));
        float _2318 = _2317 / _319;
        float _2329 = _2318 * _370;
        float _2330 = _371 * _2318;
        float _2331 = (-0.0) - _2330;
        float _2333 = _2318 * _372;
        float _2335 = (cbSceneParam._m0[77u].w * _2331) / _2317;
        float _2336 = _2335 + cbSceneParam._m0[79u].w;
        float _2337 = cbSceneParam._m0[79u].w - _2330;
        float _2343 = sqrt(((_2329 * _2329) + (_2330 * _2330)) + (_2333 * _2333));
        float _2346 = (1.0 - (cbSceneParam._m0[77u].w / _2317)) * _2343;
        float _2351 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2353 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2515;
        if (abs((_2331 - _2335) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2515 = ((((_2336 > 0.0) ? exp2(_2351 * _2336) : (2.0 - exp2(_2353 * _2336))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2346;
        }
        else
        {
            float _2475 = 1.0 / cbSceneParam._m0[80u].x;
            float _2476 = isnan(_2337) ? _2336 : (isnan(_2336) ? _2337 : max(_2336, _2337));
            float _2477 = isnan(_2337) ? _2336 : (isnan(_2336) ? _2337 : min(_2336, _2337));
            float _2486 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : min(_2476, 0.0));
            float _2487 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : min(_2477, 0.0));
            _2515 = ((abs(_2343 / _2331) * cbSceneParam._m0[80u].y) * ((((_2486 - _2487) * 2.0) - ((exp2(_2351 * (isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0)))) - exp2(_2351 * (isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0))))) * _2475)) - ((exp2(_2353 * _2486) - exp2(_2353 * _2487)) * _2475))) + (_2346 * cbSceneParam._m0[80u].z);
        }
        vec4 _2517 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2242, _2243, 1.0), 0.0);
        float _2526 = exp2((_2515 * (-1.44269502162933349609375)) * (1.0 - _2517.w));
        float _2527 = log2(_2526);
        float _2543 = log2(_2262);
        _2355 = (exp2(_2543 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2527 * cbSceneParam._m0[78u].x)) * _2517.x) / cbSceneParam._m0[78u].x)) + _2259;
        _2357 = (exp2(_2543 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2527 * cbSceneParam._m0[78u].y)) * _2517.y) / cbSceneParam._m0[78u].y)) + _2260;
        _2359 = (exp2(_2543 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2527 * cbSceneParam._m0[78u].z)) * _2517.z) / cbSceneParam._m0[78u].z)) + _2261;
        _2361 = _2526 * _2262;
    }
    else
    {
        _2355 = _2259;
        _2357 = _2260;
        _2359 = _2261;
        _2361 = _2262;
    }
    float _2373 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2374 = _2373 == 3.0;
    float _2375 = log2(_2361);
    float _2379 = exp2(_2375 * cbSceneParam._m0[78u].x);
    float _2380 = exp2(_2375 * cbSceneParam._m0[78u].y);
    float _2381 = exp2(_2375 * cbSceneParam._m0[78u].z);
    float _2382 = _2379 * (isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0)));
    float _2383 = _2380 * (isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0)));
    float _2384 = _2381 * (isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0)));
    float _2393 = (_2373 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2393 * (_2374 ? _2382 : (_2382 + (cbSceneParam._m0[72u].w * _2355)));
    SV_Target.y = _2393 * (_2374 ? _2383 : (_2383 + (cbSceneParam._m0[72u].w * _2357)));
    SV_Target.z = _2393 * (_2374 ? _2384 : (_2384 + (cbSceneParam._m0[72u].w * _2359)));
    SV_Target.w = cbInstanceData._m0[_2234].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2193) * _2233) * _2379) * _2393;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2196) * _2233) * _2380) * _2393;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2199) * _2233) * _2381) * _2393;
    SV_Target_1.w = cbInstanceData._m0[_2234].w;
}


