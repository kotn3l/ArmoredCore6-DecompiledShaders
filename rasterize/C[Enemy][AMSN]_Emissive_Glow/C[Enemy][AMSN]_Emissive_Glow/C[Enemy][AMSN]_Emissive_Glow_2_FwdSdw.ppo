#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _885;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _230 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _236 = _230.x * cbMtdParam._m0[9u].x;
    float _237 = _230.y * cbMtdParam._m0[9u].y;
    float _238 = _230.z * cbMtdParam._m0[9u].z;
    vec4 _250 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _252 = _250.x;
    vec4 _264 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _268 = _264.z;
    float _272 = (_264.x * 2.0) + (-1.0);
    float _274 = (_264.y * 2.0) + (-1.0);
    float _275 = dot(vec2(_272, _274), vec2(_272, _274));
    float _3549 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _281 = sqrt(1.0 - (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))));
    vec4 _303 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _317 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3560 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _318 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _326 = (((_318 * _318) * (3.0 - (_318 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _329 = fma(_281, _201 * NORMAL.x, fma(_274, _208 * TANGENT.x, (_194 * _187) * _272));
    float _332 = fma(_281, _201 * NORMAL.y, fma(_274, _208 * TANGENT.y, (_194 * _188) * _272));
    float _335 = fma(_281, _201 * NORMAL.z, fma(_274, _208 * TANGENT.z, (_194 * _189) * _272));
    float _339 = inversesqrt(dot(vec3(_329, _332, _335), vec3(_329, _332, _335)));
    float _340 = _339 * _329;
    float _341 = _339 * _332;
    float _342 = _339 * _335;
    float _3571 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _343 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    float _3582 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3593 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3604 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3615 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _347 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _363 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _404 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _414 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _404);
    float _415 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _404);
    float _416 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _404);
    float _420 = inversesqrt(dot(vec3(_414, _415, _416), vec3(_414, _415, _416)));
    float _421 = _414 * _420;
    float _422 = _415 * _420;
    float _423 = _416 * _420;
    float _429 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _430 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _451 = fma(_342, cbSceneParam._m0[5u].z, fma(_341, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _340));
    float _454 = fma(_342, cbSceneParam._m0[6u].z, fma(_341, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _340));
    float _457 = fma(_342, cbSceneParam._m0[7u].z, fma(_341, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _340));
    uint _470 = uint(roundEven(NORMAL.w)) * 13u;
    uint _472 = _470 + 9u;
    uint _473 = _472 + uint(cbMatDynParam._m0[0u].w);
    float _479 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0)))) * cbInstanceData._m0[_473].x;
    float _480 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0)))) * cbInstanceData._m0[_473].y;
    float _481 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0)))) * cbInstanceData._m0[_473].z;
    float _3626 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _482 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _3637 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _483 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    float _3648 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _484 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _485 = 1.0 - _347;
    float _486 = _482 * _485;
    float _487 = _483 * _485;
    float _488 = _484 * _485;
    float _493 = (_482 + (-0.039999999105930328369140625)) * _347;
    float _494 = (_483 + (-0.039999999105930328369140625)) * _347;
    float _495 = (_484 + (-0.039999999105930328369140625)) * _347;
    float _496 = _493 + 0.039999999105930328369140625;
    float _498 = _494 + 0.039999999105930328369140625;
    float _499 = _495 + 0.039999999105930328369140625;
    vec4 _508 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _429, cbSceneParam._m0[86u].y * _430));
    float _511 = _508.x * TEXCOORD.z;
    float _512 = dot(vec3(_340, _341, _342), vec3(_421, _422, _423));
    float _515 = _512 * 2.0;
    float _519 = (_515 * _340) - _421;
    float _520 = (_515 * _341) - _422;
    float _521 = (_515 * _342) - _423;
    float _525 = abs(dot(vec3(_421, _422, _423), vec3(_340, _341, _342)));
    float _3659 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _527 = sqrt(_343);
    float _539 = exp2((_527 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_527 * 3.0));
    float _545 = (1.0 - _539) * ((_527 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _546 = _539 * _527;
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _582 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _884;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _609 = fma(_582, cbModelParam._m0[26u].z, fma(_578, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _574));
        float _613 = fma(_582, cbModelParam._m0[27u].z, fma(_578, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _574));
        float _617 = fma(_582, cbModelParam._m0[28u].z, fma(_578, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _574));
        float _642 = _574 + _340;
        float _643 = _578 + _341;
        float _644 = _582 + _342;
        float _654 = fma(_644, cbModelParam._m0[26u].z, fma(_643, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _642)) - _609;
        float _655 = fma(_644, cbModelParam._m0[27u].z, fma(_643, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _642)) - _613;
        float _656 = fma(_644, cbModelParam._m0[28u].z, fma(_643, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _642)) - _617;
        float _660 = inversesqrt(dot(vec3(_654, _655, _656), vec3(_654, _655, _656)));
        float _673 = ((_660 * _654) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_609 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _674 = ((_660 * _655) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_613 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _675 = ((_660 * _656) / cbModelParam._m0[34u].z) + ((((((_617 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _678 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_673, _674, _675), 0.0);
        vec4 _685 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_673, _674, _675), 0.0);
        vec4 _692 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_673, _674, _675), 0.0);
        vec4 _699 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_673, _674, _675), 0.0);
        float _712 = exp2((_678.w + (-0.5)) * 20.0) * 2.0;
        float _713 = _712 * (_678.x + (-0.5));
        float _714 = _712 * (_678.y + (-0.5));
        float _715 = _712 * (_678.z + (-0.5));
        float _722 = exp2((_685.w + (-0.5)) * 20.0) * 2.0;
        float _723 = _722 * (_685.x + (-0.5));
        float _724 = _722 * (_685.y + (-0.5));
        float _725 = _722 * (_685.z + (-0.5));
        float _732 = exp2((_692.w + (-0.5)) * 20.0) * 2.0;
        float _733 = _732 * (_692.x + (-0.5));
        float _734 = _732 * (_692.y + (-0.5));
        float _735 = _732 * (_692.z + (-0.5));
        float _742 = exp2((_699.w + (-0.5)) * 20.0) * 2.0;
        float _743 = _742 * (_699.x + (-0.5));
        float _744 = _742 * (_699.y + (-0.5));
        float _745 = _742 * (_699.z + (-0.5));
        float _746 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _747 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _748 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _749 = _713 * 0.5;
        float _750 = _723 * 0.5;
        float _751 = _733 * 0.5;
        float _752 = dot(vec3(_749, _750, _751), vec3(_749, _750, _751));
        float _757 = (_752 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_752);
        float _766 = (dot(vec3(_340, _341, _342), vec3(_757 * _749, _757 * _750, _757 * _751)) + 1.0) * 0.5;
        float _3685 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _776 = sqrt(((_750 * _750) + (_749 * _749)) + (_751 * _751)) / (_746 + 9.9999997473787516355514526367188e-06);
        float _3696 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _778 = _777 * 2.0;
        float _782 = (1.0 - _777) / (_777 + 1.0);
        float _3707 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _792 = ((((1.0 - _783) * (_778 + 2.0)) * exp2(log2(isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * (_778 + 1.0))) + _783) * _746;
        float _793 = _714 * 0.5;
        float _794 = _724 * 0.5;
        float _795 = _734 * 0.5;
        float _796 = dot(vec3(_793, _794, _795), vec3(_793, _794, _795));
        float _801 = (_796 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_796);
        float _809 = (dot(vec3(_340, _341, _342), vec3(_801 * _793, _801 * _794, _801 * _795)) + 1.0) * 0.5;
        float _3718 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _818 = sqrt(((_794 * _794) + (_793 * _793)) + (_795 * _795)) / (_747 + 9.9999997473787516355514526367188e-06);
        float _3729 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _820 = _819 * 2.0;
        float _824 = (1.0 - _819) / (_819 + 1.0);
        float _3740 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _834 = ((((1.0 - _825) * (_820 + 2.0)) * exp2(log2(isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * (_820 + 1.0))) + _825) * _747;
        float _835 = _715 * 0.5;
        float _836 = _725 * 0.5;
        float _837 = _735 * 0.5;
        float _838 = dot(vec3(_835, _836, _837), vec3(_835, _836, _837));
        float _843 = (_838 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_838);
        float _851 = (dot(vec3(_340, _341, _342), vec3(_843 * _835, _843 * _836, _843 * _837)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _860 = sqrt(((_836 * _836) + (_835 * _835)) + (_837 * _837)) / (_748 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _862 = _861 * 2.0;
        float _866 = (1.0 - _861) / (_861 + 1.0);
        float _3773 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _876 = ((((1.0 - _867) * (_862 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_862 + 1.0))) + _867) * _748;
        _884 = _715;
        _886 = _714;
        _887 = _713;
        _888 = _725;
        _889 = _724;
        _890 = _723;
        _891 = _735;
        _892 = _734;
        _893 = _733;
        _894 = _748;
        _895 = _747;
        _896 = _746;
        _897 = cbModelParam._m0[36u].z * (isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0)));
        _898 = cbModelParam._m0[36u].z * (isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0)));
        _899 = cbModelParam._m0[36u].z * (isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0)));
    }
    else
    {
        _884 = _885;
        _886 = _885;
        _887 = _885;
        _888 = _885;
        _889 = _885;
        _890 = _885;
        _891 = _885;
        _892 = _885;
        _893 = _885;
        _894 = _885;
        _895 = _885;
        _896 = _885;
        _897 = 0.0;
        _898 = 0.0;
        _899 = 0.0;
    }
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _925 = fma(_582, cbModelParam._m0[30u].z, fma(_578, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _574));
        float _929 = fma(_582, cbModelParam._m0[31u].z, fma(_578, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _574));
        float _933 = fma(_582, cbModelParam._m0[32u].z, fma(_578, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _574));
        float _956 = _574 + _340;
        float _957 = _578 + _341;
        float _958 = _582 + _342;
        float _968 = fma(_958, cbModelParam._m0[30u].z, fma(_957, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _956)) - _925;
        float _969 = fma(_958, cbModelParam._m0[31u].z, fma(_957, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _956)) - _929;
        float _970 = fma(_958, cbModelParam._m0[32u].z, fma(_957, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _956)) - _933;
        float _974 = inversesqrt(dot(vec3(_968, _969, _970), vec3(_968, _969, _970)));
        float _987 = ((_974 * _968) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_925 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _988 = ((_974 * _969) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_929 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _989 = ((_974 * _970) / cbModelParam._m0[35u].z) + ((((((_933 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        float _1024 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_991.x + (-0.5));
        float _1026 = _1024 * (_991.y + (-0.5));
        float _1027 = _1024 * (_991.z + (-0.5));
        float _1034 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_998.x + (-0.5));
        float _1036 = _1034 * (_998.y + (-0.5));
        float _1037 = _1034 * (_998.z + (-0.5));
        float _1044 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1005.x + (-0.5));
        float _1046 = _1044 * (_1005.y + (-0.5));
        float _1047 = _1044 * (_1005.z + (-0.5));
        float _1054 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1012.x + (-0.5));
        float _1056 = _1054 * (_1012.y + (-0.5));
        float _1057 = _1054 * (_1012.z + (-0.5));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = _1025 * 0.5;
        float _1062 = _1035 * 0.5;
        float _1063 = _1045 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1077 = (dot(vec3(_340, _341, _342), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3814 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1086 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3825 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _3836 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * (_1088 + 1.0))) + _1093) * _1058;
        float _1103 = _1026 * 0.5;
        float _1104 = _1036 * 0.5;
        float _1105 = _1046 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1119 = (dot(vec3(_340, _341, _342), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3847 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1128 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3858 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3869 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_1130 + 1.0))) + _1135) * _1059;
        float _1145 = _1027 * 0.5;
        float _1146 = _1037 * 0.5;
        float _1147 = _1047 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_340, _341, _342), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3880 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _3891 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3902 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1172 + 1.0))) + _1177) * _1060;
        _1194 = _1027;
        _1195 = _1026;
        _1196 = _1025;
        _1197 = _1037;
        _1198 = _1036;
        _1199 = _1035;
        _1200 = _1047;
        _1201 = _1046;
        _1202 = _1045;
        _1203 = _1060;
        _1204 = _1059;
        _1205 = _1058;
        _1206 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
        _1207 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
        _1208 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
    }
    else
    {
        _1194 = _885;
        _1195 = _885;
        _1196 = _885;
        _1197 = _885;
        _1198 = _885;
        _1199 = _885;
        _1200 = _885;
        _1201 = _885;
        _1202 = _885;
        _1203 = _885;
        _1204 = _885;
        _1205 = _885;
        _1206 = 0.0;
        _1207 = 0.0;
        _1208 = 0.0;
    }
    float _1218 = (cbModelParam._m0[1u].x * (_1206 - _897)) + _897;
    float _1219 = (cbModelParam._m0[1u].x * (_1207 - _898)) + _898;
    float _1220 = (cbModelParam._m0[1u].x * (_1208 - _899)) + _899;
    float _1241 = fma(_1220, cbSceneParam._m0[89u].z, fma(_1219, cbSceneParam._m0[89u].y, _1218 * cbSceneParam._m0[89u].x));
    float _1244 = fma(_1220, cbSceneParam._m0[90u].z, fma(_1219, cbSceneParam._m0[90u].y, _1218 * cbSceneParam._m0[90u].x));
    float _1247 = fma(_1220, cbSceneParam._m0[91u].z, fma(_1219, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1218));
    float _1262 = _519 * 0.5;
    float _1263 = _520 * 0.5;
    float _1264 = _521 * 0.5;
    float _1265 = dot(vec4(_1262, _1263, _1264, 1.0), vec4(_1196, _1199, _1202, _1205));
    float _1268 = dot(vec4(_1262, _1263, _1264, 1.0), vec4(_1195, _1198, _1201, _1204));
    float _1271 = dot(vec4(_1262, _1263, _1264, 1.0), vec4(_1194, _1197, _1200, _1203));
    float _1305;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1278 = dot(vec4(_1262, _1263, _1264, 1.0), vec4(_884, _888, _891, _894));
        float _1282 = dot(vec4(_1262, _1263, _1264, 1.0), vec4(_886, _889, _892, _895));
        float _1286 = dot(vec4(_1262, _1263, _1264, 1.0), vec4(_887, _890, _893, _896));
        float _1293 = dot(vec4(cbModelParam._m0[39u]), vec4(_1262, _1263, _1264, 1.0));
        _1305 = dot(vec3(isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)), isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)), isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1293) ? 0.0 : (isnan(0.0) ? _1293 : max(0.0, _1293))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1305 = 1.0;
    }
    float _1316;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1307 = dot(vec4(cbModelParam._m0[40u]), vec4(_1262, _1263, _1264, 1.0));
        _1316 = dot(vec3(isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)), isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)), isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1307) ? 0.0 : (isnan(0.0) ? _1307 : max(0.0, _1307))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1316 = 1.0;
    }
    float _1320 = (_1316 * cbModelParam._m0[1u].x) + (_1305 * (1.0 - cbModelParam._m0[1u].x));
    float _1330 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _343);
    float _1331 = isnan(_1330) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1330 : min(cbModelParam._m0[25u].z, _1330));
    float _1412;
    float _1414;
    float _1416;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1379 = fma(_582, cbModelParam._m0[13u].z, fma(_578, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _574)) + cbModelParam._m0[13u].w;
        float _1383 = fma(_582, cbModelParam._m0[14u].z, fma(_578, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _574)) + cbModelParam._m0[14u].w;
        float _1387 = fma(_582, cbModelParam._m0[15u].z, fma(_578, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _574)) + cbModelParam._m0[15u].w;
        float _1390 = fma(_521, cbModelParam._m0[13u].z, fma(_520, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _519));
        float _1393 = fma(_521, cbModelParam._m0[14u].z, fma(_520, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _519));
        float _1396 = fma(_521, cbModelParam._m0[15u].z, fma(_520, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _519));
        float _1424;
        if (_1390 > 0.0)
        {
            _1424 = abs((1.0 - _1379) / _1390);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1390 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1379 + 1.0) / _1390);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1424 = frontier_phi_14_12_ladder;
        }
        float _1598;
        if (_1393 > 0.0)
        {
            _1598 = abs((1.0 - _1383) / _1393);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1393 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1383 + 1.0) / _1393);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1598 = frontier_phi_23_19_ladder;
        }
        float _1894;
        if (_1396 > 0.0)
        {
            _1894 = abs((1.0 - _1387) / _1396);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1396 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1387 + 1.0) / _1396);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1894 = frontier_phi_35_30_ladder;
        }
        float _1896 = isnan(_1598) ? _1424 : (isnan(_1424) ? _1598 : min(_1424, _1598));
        float _1897 = isnan(_1894) ? _1896 : (isnan(_1896) ? _1894 : min(_1896, _1894));
        float _1901 = (_1897 * _1390) + _1379;
        float _1902 = (_1897 * _1393) + _1383;
        float _1903 = (_1897 * _1396) + _1387;
        float _1904 = _1897 * 9.9999997473787516355514526367188e-05;
        float _1906 = (-1.0) - _1904;
        float _1908 = _1904 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1903 > _1908) || ((_1903 < _1906) || ((_1902 > _1908) || ((_1902 < _1906) || ((_1901 < _1906) || (_1901 > _1908))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2048 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1903, cbModelParam._m0[9u].z, fma(_1902, cbModelParam._m0[9u].y, _1901 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1903, cbModelParam._m0[10u].z, fma(_1902, cbModelParam._m0[10u].y, _1901 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1903, cbModelParam._m0[11u].z, fma(_1902, cbModelParam._m0[11u].y, _1901 * cbModelParam._m0[11u].x))), _1331);
            frontier_phi_13_35_ladder = _2048.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2048.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2048.x * cbModelParam._m0[1u].y;
        }
        _1412 = frontier_phi_13_35_ladder_2;
        _1414 = frontier_phi_13_35_ladder_1;
        _1416 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1400 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_519, _520, _521), _1331);
        _1412 = _1400.x * cbModelParam._m0[1u].y;
        _1414 = _1400.y * cbModelParam._m0[1u].y;
        _1416 = _1400.z * cbModelParam._m0[1u].y;
    }
    float _1420 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _343);
    float _1421 = isnan(_1420) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1420 : min(cbModelParam._m0[25u].w, _1420));
    float _1513;
    float _1515;
    float _1517;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1477 = fma(_582, cbModelParam._m0[21u].z, fma(_578, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _574)) + cbModelParam._m0[21u].w;
        float _1481 = fma(_582, cbModelParam._m0[22u].z, fma(_578, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _574)) + cbModelParam._m0[22u].w;
        float _1485 = fma(_582, cbModelParam._m0[23u].z, fma(_578, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _574)) + cbModelParam._m0[23u].w;
        float _1488 = fma(_521, cbModelParam._m0[21u].z, fma(_520, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _519));
        float _1491 = fma(_521, cbModelParam._m0[22u].z, fma(_520, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _519));
        float _1494 = fma(_521, cbModelParam._m0[23u].z, fma(_520, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _519));
        float _1603;
        if (_1488 > 0.0)
        {
            _1603 = abs((1.0 - _1477) / _1488);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1477 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1603 = frontier_phi_25_21_ladder;
        }
        float _1921;
        if (_1491 > 0.0)
        {
            _1921 = abs((1.0 - _1481) / _1491);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1481 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1921 = frontier_phi_37_32_ladder;
        }
        float _2259;
        if (_1494 > 0.0)
        {
            _2259 = abs((1.0 - _1485) / _1494);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1485 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2259 = frontier_phi_47_44_ladder;
        }
        float _2261 = isnan(_1921) ? _1603 : (isnan(_1603) ? _1921 : min(_1603, _1921));
        float _2262 = isnan(_2259) ? _2261 : (isnan(_2261) ? _2259 : min(_2261, _2259));
        float _2266 = (_2262 * _1488) + _1477;
        float _2267 = (_2262 * _1491) + _1481;
        float _2268 = (_2262 * _1494) + _1485;
        float _2269 = _2262 * 9.9999997473787516355514526367188e-05;
        float _2270 = (-1.0) - _2269;
        float _2272 = _2269 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2268 > _2272) || ((_2268 < _2270) || ((_2267 > _2272) || ((_2267 < _2270) || ((_2266 < _2270) || (_2266 > _2272))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2390 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2268, cbModelParam._m0[17u].z, fma(_2267, cbModelParam._m0[17u].y, _2266 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2268, cbModelParam._m0[18u].z, fma(_2267, cbModelParam._m0[18u].y, _2266 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2268, cbModelParam._m0[19u].z, fma(_2267, cbModelParam._m0[19u].y, _2266 * cbModelParam._m0[19u].x))), _1421);
            frontier_phi_22_47_ladder = _2390.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2390.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2390.x * cbModelParam._m0[1u].z;
        }
        _1513 = frontier_phi_22_47_ladder_2;
        _1515 = frontier_phi_22_47_ladder_1;
        _1517 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1497 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_519, _520, _521), _1421);
        _1513 = _1497.x * cbModelParam._m0[1u].z;
        _1515 = _1497.y * cbModelParam._m0[1u].z;
        _1517 = _1497.z * cbModelParam._m0[1u].z;
    }
    float _1530 = (((_545 * _496) + _546) * _511) * ((cbModelParam._m0[1u].w * (_1513 - _1412)) + _1412);
    float _1532 = (((_545 * _498) + _546) * _511) * ((cbModelParam._m0[1u].w * (_1515 - _1414)) + _1414);
    float _1534 = (((_545 * _499) + _546) * _511) * ((cbModelParam._m0[1u].w * (_1517 - _1416)) + _1416);
    float _1537 = fma(_1534, cbSceneParam._m0[89u].z, fma(_1532, cbSceneParam._m0[89u].y, _1530 * cbSceneParam._m0[89u].x));
    float _1540 = fma(_1534, cbSceneParam._m0[90u].z, fma(_1532, cbSceneParam._m0[90u].y, _1530 * cbSceneParam._m0[90u].x));
    float _1543 = fma(_1534, cbSceneParam._m0[91u].z, fma(_1532, cbSceneParam._m0[91u].y, _1530 * cbSceneParam._m0[91u].x));
    float _1577 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1581 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1585 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1589 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1590 = _1577 / _1589;
    float _1591 = _1581 / _1589;
    float _1592 = _1585 / _1589;
    float _1739;
    float _1740;
    float _1741;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1619 = ((uint(_1592 > cbSceneParam._m0[59u].y) + uint(_1592 > cbSceneParam._m0[59u].x)) + uint(_1592 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1620 = _1619 + 43u;
        uint _1628 = _1619 + 44u;
        uint _1636 = _1619 + 45u;
        uint _1644 = _1619 + 46u;
        float _1655 = fma(_1589, cbSceneParam._m0[_1620].w, fma(_1585, cbSceneParam._m0[_1620].z, fma(_1581, cbSceneParam._m0[_1620].y, _1577 * cbSceneParam._m0[_1620].x)));
        float _1659 = fma(_1589, cbSceneParam._m0[_1628].w, fma(_1585, cbSceneParam._m0[_1628].z, fma(_1581, cbSceneParam._m0[_1628].y, _1577 * cbSceneParam._m0[_1628].x)));
        float _1667 = fma(_1589, cbSceneParam._m0[_1644].w, fma(_1585, cbSceneParam._m0[_1644].z, fma(_1581, cbSceneParam._m0[_1644].y, _1577 * cbSceneParam._m0[_1644].x)));
        float _1672 = cbSceneParam._m0[33u].z * _1667;
        float _1674 = cbSceneParam._m0[33u].w * _1667;
        float _1677 = fma(_1589, cbSceneParam._m0[_1636].w, fma(_1585, cbSceneParam._m0[_1636].z, fma(_1581, cbSceneParam._m0[_1636].y, _1577 * cbSceneParam._m0[_1636].x))) / _1667;
        float _1725 = (cbSceneParam._m0[33u].x - sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592))) * cbSceneParam._m0[33u].y;
        float _4028 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1732 = (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1672 + _1655) / _1667, (_1674 + _1659) / _1667), _1677), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1674 + _1655) / _1667, (_1659 - _1672) / _1667), _1677), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1655 - _1672) / _1667, (_1659 - _1674) / _1667), _1677), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1655 - _1674) / _1667, (_1672 + _1659) / _1667), _1677), 0.0)).x), vec4(0.25)));
        _1739 = 1.0 - (_1732 * cbSceneParam._m0[34u].x);
        _1740 = 1.0 - (_1732 * cbSceneParam._m0[34u].y);
        _1741 = 1.0 - (_1732 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1739 = 1.0;
        _1740 = 1.0;
        _1741 = 1.0;
    }
    float _1805;
    float _1807;
    float _1809;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1793 = fma(_1589, cbSceneParam._m0[63u].w, fma(_1585, cbSceneParam._m0[63u].z, fma(_1581, cbSceneParam._m0[63u].y, _1577 * cbSceneParam._m0[63u].x)));
        float _1794 = fma(_1589, cbSceneParam._m0[60u].w, fma(_1585, cbSceneParam._m0[60u].z, fma(_1581, cbSceneParam._m0[60u].y, _1577 * cbSceneParam._m0[60u].x))) / _1793;
        float _1795 = fma(_1589, cbSceneParam._m0[61u].w, fma(_1585, cbSceneParam._m0[61u].z, fma(_1581, cbSceneParam._m0[61u].y, _1577 * cbSceneParam._m0[61u].x))) / _1793;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1794 >= cbSceneParam._m0[64u].x) && (_1795 >= cbSceneParam._m0[64u].y)) && (_1794 <= cbSceneParam._m0[64u].z)) && (_1795 <= cbSceneParam._m0[64u].w))
        {
            float _1934 = fma(_1589, cbSceneParam._m0[62u].w, fma(_1585, cbSceneParam._m0[62u].z, fma(_1581, cbSceneParam._m0[62u].y, _1577 * cbSceneParam._m0[62u].x))) / _1793;
            float _1938 = isnan(cbSceneParam._m0[41u].w) ? _1934 : (isnan(_1934) ? cbSceneParam._m0[41u].w : max(_1934, cbSceneParam._m0[41u].w));
            float _1981 = (cbSceneParam._m0[33u].x - sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592))) * cbSceneParam._m0[33u].y;
            float _4044 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
            float _1988 = (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1794, cbSceneParam._m0[33u].w + _1795), _1938), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1794, _1795 - cbSceneParam._m0[33u].z), _1938), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1794 - cbSceneParam._m0[33u].z, _1795 - cbSceneParam._m0[33u].w), _1938), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1794 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1795), _1938), 0.0)).x), vec4(0.25)));
            float _1992 = 1.0 - (_1988 * cbSceneParam._m0[34u].x);
            float _1993 = 1.0 - (_1988 * cbSceneParam._m0[34u].y);
            float _1994 = 1.0 - (_1988 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1994) ? _1741 : (isnan(_1741) ? _1994 : min(_1741, _1994));
            frontier_phi_34_33_ladder_1 = isnan(_1993) ? _1740 : (isnan(_1740) ? _1993 : min(_1740, _1993));
            frontier_phi_34_33_ladder_2 = isnan(_1992) ? _1739 : (isnan(_1739) ? _1992 : min(_1739, _1992));
        }
        else
        {
            frontier_phi_34_33_ladder = _1741;
            frontier_phi_34_33_ladder_1 = _1740;
            frontier_phi_34_33_ladder_2 = _1739;
        }
        _1805 = frontier_phi_34_33_ladder_2;
        _1807 = frontier_phi_34_33_ladder_1;
        _1809 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1805 = _1739;
        _1807 = _1740;
        _1809 = _1741;
    }
    uvec4 _1814 = floatBitsToUint(cbInstanceData._m0[_470 + 5u]);
    uint _1816 = _1814.x * 14u;
    uint _1817 = _1816 + 13u;
    float _1824 = _511 + (-1.0);
    float _1829 = (cbLight._m0[_1817].x * _1824) + 1.0;
    float _1830 = (cbLight._m0[_1817].y * _1824) + 1.0;
    float _1831 = (cbLight._m0[_1817].z * _1824) + 1.0;
    float _1832 = (cbLight._m0[_1817].w * _1824) + 1.0;
    uint _1833 = _1816 + 5u;
    float _1839 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
    uint _1843 = _1816 + 4u;
    float _1853 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
    uint _1857 = _1816 | 1u;
    float _1868 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_340, _341, _342));
    float _1871 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_340, _341, _342));
    float _4080 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _4091 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1876 = (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * 0.3183098733425140380859375;
    float _1878 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * 0.3183098733425140380859375;
    float _1885 = ((cbLight._m0[_1833].x * _1839) * _1878) + (((cbLight._m0[_1843].x * _1805) * _1853) * _1876);
    float _1886 = ((_1839 * cbLight._m0[_1833].y) * _1878) + (((cbLight._m0[_1843].y * _1807) * _1853) * _1876);
    float _1887 = ((_1839 * cbLight._m0[_1833].z) * _1878) + (((cbLight._m0[_1843].z * _1809) * _1853) * _1876);
    uvec4 _1891 = floatBitsToUint(cbLight._m0[_1816 + 12u]);
    bool _1893 = _1891.x == 0u;
    float _1995;
    float _1997;
    float _1999;
    if (_1893)
    {
        _1995 = _1885;
        _1997 = _1886;
        _1999 = _1887;
    }
    else
    {
        uint _2003 = _1816 + 6u;
        float _2019 = (dot(vec3(cbLight._m0[_1816 + 2u].xyz), vec3(_340, _341, _342)) * 0.5) + 0.5;
        float _2020 = _2019 * _2019;
        float _4102 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
        float _2021 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _2022 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
        _1995 = (((cbLight._m0[_2003].x * 0.3183098733425140380859375) * _2021) * _2022) + _1885;
        _1997 = (((cbLight._m0[_2003].y * 0.3183098733425140380859375) * _2021) * _2022) + _1886;
        _1999 = (((cbLight._m0[_2003].z * 0.3183098733425140380859375) * _2021) * _2022) + _1887;
    }
    bool _2002 = _1891.y == 0u;
    float _2057;
    float _2059;
    float _2061;
    if (_2002)
    {
        _2057 = _1995;
        _2059 = _1997;
        _2061 = _1999;
    }
    else
    {
        uint _2230 = _1816 + 7u;
        float _2246 = (dot(vec3(cbLight._m0[_1816 + 3u].xyz), vec3(_340, _341, _342)) * 0.5) + 0.5;
        float _2247 = _2246 * _2246;
        float _4118 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2248 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _2249 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
        _2057 = (((cbLight._m0[_2230].x * 0.3183098733425140380859375) * _2248) * _2249) + _1995;
        _2059 = (((cbLight._m0[_2230].y * 0.3183098733425140380859375) * _2248) * _2249) + _1997;
        _2061 = (((cbLight._m0[_2230].z * 0.3183098733425140380859375) * _2248) * _2249) + _1999;
    }
    uint _2064 = _1816 + 8u;
    float _2077 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1816].w)) * _343) * 0.949999988079071044921875);
    float _2078 = _2077 * _2077;
    float _2079 = cbLight._m0[_1816].x + _421;
    float _2080 = cbLight._m0[_1816].y + _422;
    float _2081 = cbLight._m0[_1816].z + _423;
    float _2085 = inversesqrt(dot(vec3(_2079, _2080, _2081), vec3(_2079, _2080, _2081)));
    float _2086 = _2085 * _2079;
    float _2087 = _2085 * _2080;
    float _2088 = _2085 * _2081;
    float _2089 = dot(vec3(_340, _341, _342), vec3(cbLight._m0[_1816].xyz));
    float _4134 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2092 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _4145 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _2093 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _2094 = dot(vec3(_340, _341, _342), vec3(_2086, _2087, _2088));
    float _4156 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2097 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _2098 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_2086, _2087, _2088));
    float _4167 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2102 = _2078 * _2078;
    float _2106 = ((_2097 * _2097) * (_2102 + (-1.0))) + 1.0;
    float _2114 = exp2(log2(1.0 - (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0)))) * 5.0);
    float _2115 = 0.959999978542327880859375 - _493;
    float _2117 = 0.959999978542327880859375 - _494;
    float _2118 = 0.959999978542327880859375 - _495;
    float _2125 = 1.0 - _2078;
    float _2136 = (0.5 / (((_2093 * ((_2092 * _2125) + _2078)) + 9.9999999392252902907785028219223e-09) + (((_2093 * _2125) + _2078) * _2092))) * _2092;
    float _4178 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2138 = (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_2102 / ((_2106 * _2106) * 3.141590118408203125));
    uint _2152 = _1816 + 9u;
    float _2163 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1857].w)) * _343) * 0.949999988079071044921875);
    float _2164 = _2163 * _2163;
    float _2165 = cbLight._m0[_1857].x + _421;
    float _2166 = cbLight._m0[_1857].y + _422;
    float _2167 = cbLight._m0[_1857].z + _423;
    float _2171 = inversesqrt(dot(vec3(_2165, _2166, _2167), vec3(_2165, _2166, _2167)));
    float _2172 = _2171 * _2165;
    float _2173 = _2171 * _2166;
    float _2174 = _2171 * _2167;
    float _2175 = dot(vec3(_340, _341, _342), vec3(cbLight._m0[_1857].xyz));
    float _4189 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2178 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _2179 = dot(vec3(_340, _341, _342), vec3(_2172, _2173, _2174));
    float _4200 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2182 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _2183 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_2172, _2173, _2174));
    float _4211 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2187 = _2164 * _2164;
    float _2191 = ((_2182 * _2182) * (_2187 + (-1.0))) + 1.0;
    float _2198 = exp2(log2(1.0 - (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) * 5.0);
    float _2205 = 1.0 - _2164;
    float _2215 = (0.5 / (((_2093 * ((_2178 * _2205) + _2164)) + 9.9999999392252902907785028219223e-09) + (((_2093 * _2205) + _2164) * _2178))) * _2178;
    float _4222 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2217 = (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_2187 / ((_2191 * _2191) * 3.141590118408203125));
    float _2227 = (((((_2198 * _2115) + _496) * cbLight._m0[_2152].x) * _2217) * _1839) + ((((cbLight._m0[_2064].x * _1805) * ((_2114 * _2115) + _496)) * _2138) * _1853);
    float _2228 = (((((_2198 * _2117) + _498) * cbLight._m0[_2152].y) * _2217) * _1839) + ((((cbLight._m0[_2064].y * _1807) * ((_2114 * _2117) + _498)) * _2138) * _1853);
    float _2229 = (((((_2198 * _2118) + _499) * cbLight._m0[_2152].z) * _2217) * _1839) + ((((cbLight._m0[_2064].z * _1809) * ((_2114 * _2118) + _499)) * _2138) * _1853);
    float _2285;
    float _2287;
    float _2289;
    if (_1893)
    {
        _2285 = _2227;
        _2287 = _2228;
        _2289 = _2229;
    }
    else
    {
        uint _2291 = _1816 + 2u;
        uint _2295 = _1816 + 10u;
        float _2309 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2291].w)) * _343) * 0.949999988079071044921875);
        float _2310 = _2309 * _2309;
        float _2311 = cbLight._m0[_2291].x + _421;
        float _2312 = cbLight._m0[_2291].y + _422;
        float _2313 = cbLight._m0[_2291].z + _423;
        float _2317 = inversesqrt(dot(vec3(_2311, _2312, _2313), vec3(_2311, _2312, _2313)));
        float _2318 = _2317 * _2311;
        float _2319 = _2317 * _2312;
        float _2320 = _2317 * _2313;
        float _2321 = dot(vec3(_340, _341, _342), vec3(cbLight._m0[_2291].xyz));
        float _4233 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2324 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _2325 = dot(vec3(_340, _341, _342), vec3(_2318, _2319, _2320));
        float _4244 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2328 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _2329 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_2318, _2319, _2320));
        float _4255 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2333 = _2310 * _2310;
        float _2337 = ((_2328 * _2328) * (_2333 + (-1.0))) + 1.0;
        float _2344 = exp2(log2(1.0 - (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0)))) * 5.0);
        float _2351 = 1.0 - _2310;
        float _2361 = (0.5 / (((_2093 * ((_2324 * _2351) + _2310)) + 9.9999999392252902907785028219223e-09) + (((_2093 * _2351) + _2310) * _2324))) * _2324;
        float _4266 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2363 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_2333 / ((_2337 * _2337) * 3.141590118408203125));
        float _2364 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
        _2285 = (((((_2344 * _2115) + _496) * cbLight._m0[_2295].x) * _2363) * _2364) + _2227;
        _2287 = (((((_2344 * _2117) + _498) * cbLight._m0[_2295].y) * _2363) * _2364) + _2228;
        _2289 = (((((_2344 * _2118) + _499) * cbLight._m0[_2295].z) * _2363) * _2364) + _2229;
    }
    float _2395;
    float _2397;
    float _2399;
    if (_2002)
    {
        _2395 = _2285;
        _2397 = _2287;
        _2399 = _2289;
    }
    else
    {
        uint _2406 = _1816 + 3u;
        uint _2410 = _1816 + 11u;
        float _2424 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2406].w)) * _343) * 0.949999988079071044921875);
        float _2425 = _2424 * _2424;
        float _2426 = cbLight._m0[_2406].x + _421;
        float _2427 = cbLight._m0[_2406].y + _422;
        float _2428 = cbLight._m0[_2406].z + _423;
        float _2432 = inversesqrt(dot(vec3(_2426, _2427, _2428), vec3(_2426, _2427, _2428)));
        float _2433 = _2432 * _2426;
        float _2434 = _2432 * _2427;
        float _2435 = _2432 * _2428;
        float _2436 = dot(vec3(_340, _341, _342), vec3(cbLight._m0[_2406].xyz));
        float _4282 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2439 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _2440 = dot(vec3(_340, _341, _342), vec3(_2433, _2434, _2435));
        float _4293 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2443 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _2444 = dot(vec3(cbLight._m0[_2406].xyz), vec3(_2433, _2434, _2435));
        float _4304 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2448 = _2425 * _2425;
        float _2452 = ((_2443 * _2443) * (_2448 + (-1.0))) + 1.0;
        float _2459 = exp2(log2(1.0 - (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) * 5.0);
        float _2466 = 1.0 - _2425;
        float _2476 = (0.5 / (((_2093 * ((_2439 * _2466) + _2425)) + 9.9999999392252902907785028219223e-09) + (((_2093 * _2466) + _2425) * _2439))) * _2439;
        float _4315 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2478 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_2448 / ((_2452 * _2452) * 3.141590118408203125));
        float _2479 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
        _2395 = (((((_2459 * _2115) + _496) * cbLight._m0[_2410].x) * _2478) * _2479) + _2285;
        _2397 = (((((_2459 * _2117) + _498) * cbLight._m0[_2410].y) * _2478) * _2479) + _2287;
        _2399 = (((((_2459 * _2118) + _499) * cbLight._m0[_2410].z) * _2478) * _2479) + _2289;
    }
    float _2545;
    float _2547;
    float _2549;
    float _2551;
    float _2553;
    float _2555;
    if (_1814.y == 0u)
    {
        uvec4 _2500 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2501 = _2500.x;
        uint _2512 = uint((float(_2500.y) * floor(float(uint(cbSceneParam._m0[85u].y * _430) / _2501))) + floor(float(uint(cbSceneParam._m0[85u].x * _429) / _2501)));
        float _2522 = (log2(_1592 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2523 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        uint _2526 = uint(isnan(14.0) ? _2523 : (isnan(_2523) ? 14.0 : min(_2523, 14.0)));
        uvec4 _2531 = texelFetch(g_lightClusterGridBuffer, int(((_2526 << 2u) + (_2512 << 6u)) >> 2u));
        uint _2532 = _2531.x;
        uint _2533 = _2500.z;
        float _2650;
        float _2652;
        float _2654;
        float _2656;
        float _2658;
        float _2660;
        if (((((1u << ((_2533 >> 4u) & 15u)) + 4294967295u) & _2532) == 0u) || ((_2533 & 240u) == 0u))
        {
            _2650 = 0.0;
            _2652 = 0.0;
            _2654 = 0.0;
            _2656 = 0.0;
            _2658 = 0.0;
            _2660 = 0.0;
        }
        else
        {
            float _2651;
            float _2653;
            float _2655;
            float _2657;
            float _2659;
            float _2661;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            float _2807 = 0.0;
            float _2808 = 0.0;
            float _2809 = 0.0;
            uint _2810 = 0u;
            uint _2819;
            bool _2820;
            for (;;)
            {
                _2819 = texelFetch(g_lightClassification, int((((_2526 << 5u) + (_2512 << 9u)) + (_2810 << 2u)) >> 2u)).x;
                _2820 = _2819 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2820)
                {
                    frontier_phi_66_pred = _2809;
                    frontier_phi_66_pred_1 = _2808;
                    frontier_phi_66_pred_2 = _2807;
                    frontier_phi_66_pred_3 = _2806;
                    frontier_phi_66_pred_4 = _2805;
                    frontier_phi_66_pred_5 = _2804;
                }
                else
                {
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    uint _2934;
                    _2928 = _2804;
                    _2929 = _2805;
                    _2930 = _2806;
                    _2931 = _2807;
                    _2932 = _2808;
                    _2933 = _2809;
                    _2934 = _2819;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    for (;;)
                    {
                        uint _2938 = uint(findLSB(_2934)) + (_2810 << 5u);
                        uint _2935 = (_2934 + 4294967295u) & _2934;
                        uint _2940 = _2938 * 48u;
                        vec4 _2954 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2940)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 3u)).x));
                        uint _2960 = (_2938 * 48u) + 4u;
                        vec4 _2973 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2960)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 3u)).x));
                        uint _2979 = (_2938 * 48u) + 8u;
                        vec3 _2990 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2979)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 2u)).x));
                        float _2994 = _2954.x - _1590;
                        float _2995 = _2954.y - _1591;
                        float _2996 = _2954.z - _1592;
                        float _2997 = dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996));
                        float _3000 = inversesqrt(_2997);
                        float _3001 = _3000 * _2994;
                        float _3002 = _3000 * _2995;
                        float _3003 = _3000 * _2996;
                        float _3004 = dot(vec3(_451, _454, _457), vec3(_3001, _3002, _3003));
                        float _3009 = 1.0 - (_2997 * _2954.w);
                        float _4341 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3010 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                        float _3011 = sqrt(_2997) * _2973.w;
                        float _3014 = 1.39999997615814208984375 / (_3011 + 1.39999997615814208984375);
                        float _3015 = _3014 * _3014;
                        float _3018 = ((1.0 - _3015) * _3004) + _3015;
                        float _3021 = _3011 * _3011;
                        float _3025 = ((isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0))) * _3010) / ((_3021 * 0.699999988079071044921875) + 1.0);
                        float _3029 = (-0.0) - _1590;
                        float _3030 = (-0.0) - _1591;
                        float _3031 = (-0.0) - _1592;
                        float _3035 = inversesqrt(dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031)));
                        float _3036 = _3035 * _3029;
                        float _3037 = _3035 * _3030;
                        float _3038 = _3035 * _3031;
                        float _3045 = exp2(log2(1.0 / ((_3021 * 3.5) + 5.0)) * 0.25);
                        float _3046 = 1.0 - _527;
                        float _3053 = sqrt(1.0 - ((1.0 - (_3046 * _3046)) * (1.0 - (_3045 * _3045))));
                        float _3054 = _3053 * _3053;
                        float _3055 = _3054 * _3054;
                        float _3056 = _3036 + _3001;
                        float _3057 = _3037 + _3002;
                        float _3058 = _3038 + _3003;
                        float _3062 = inversesqrt(dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058)));
                        float _3066 = dot(vec3(_451, _454, _457), vec3(_3036, _3037, _3038));
                        float _4357 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3069 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                        float _3070 = dot(vec3(_451, _454, _457), vec3(_3062 * _3056, _3062 * _3057, _3062 * _3058));
                        float _4368 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3073 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                        float _3077 = ((_3073 * _3073) * (_3055 + (-1.0))) + 1.0;
                        float _3078 = _3014 * _3054;
                        float _3079 = _3078 * _3078;
                        float _3082 = ((1.0 - _3079) * _3004) + _3079;
                        float _4379 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3083 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                        float _3084 = 1.0 - _3054;
                        float _3094 = (0.5 / (((_3083 * ((_3069 * _3084) + _3054)) + 9.9999999392252902907785028219223e-09) + (((_3083 * _3084) + _3054) * _3069))) * _3083;
                        float _4390 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3105 = (((_3055 * 3.1415927410125732421875) * (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) / ((_3077 * _3077) * ((_3021 * 2.1991131305694580078125) + 3.141590118408203125))) * _3010;
                        _2863 = (_3025 * _2973.x) + _2931;
                        _2864 = (_3025 * _2973.y) + _2932;
                        _2865 = (_3025 * _2973.z) + _2933;
                        _2860 = (_3105 * _2990.x) + _2928;
                        _2861 = (_3105 * _2990.y) + _2929;
                        _2862 = (_3105 * _2990.z) + _2930;
                        if (_2935 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2928 = _2860;
                            _2929 = _2861;
                            _2930 = _2862;
                            _2931 = _2863;
                            _2932 = _2864;
                            _2933 = _2865;
                            _2934 = _2935;
                        }
                    }
                    frontier_phi_66_pred = _2865;
                    frontier_phi_66_pred_1 = _2864;
                    frontier_phi_66_pred_2 = _2863;
                    frontier_phi_66_pred_3 = _2862;
                    frontier_phi_66_pred_4 = _2861;
                    frontier_phi_66_pred_5 = _2860;
                }
                _2661 = frontier_phi_66_pred;
                _2659 = frontier_phi_66_pred_1;
                _2657 = frontier_phi_66_pred_2;
                _2655 = frontier_phi_66_pred_3;
                _2653 = frontier_phi_66_pred_4;
                _2651 = frontier_phi_66_pred_5;
                uint _2811 = _2810 + 1u;
                if (_2811 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2804 = _2651;
                    _2805 = _2653;
                    _2806 = _2655;
                    _2807 = _2657;
                    _2808 = _2659;
                    _2809 = _2661;
                    _2810 = _2811;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2650 = _2651;
            _2652 = _2653;
            _2654 = _2655;
            _2656 = _2657;
            _2658 = _2659;
            _2660 = _2661;
        }
        uvec4 _2664 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2665 = _2664.z;
        uint _2667 = (_2665 >> 8u) & 15u;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        if (((4294967295u << _2667) & _2532) == 0u)
        {
            _2772 = _2650;
            _2774 = _2652;
            _2776 = _2654;
            _2778 = _2656;
            _2780 = _2658;
            _2782 = _2660;
        }
        else
        {
            float _2797 = inversesqrt(dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592)));
            float _2798 = _2797 * _1590;
            float _2799 = _2797 * _1591;
            float _2800 = _2797 * _1592;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2667 < ((_2665 >> 12u) & 15u))
            {
                float _2773;
                float _2775;
                float _2777;
                float _2779;
                float _2781;
                float _2783;
                float _2911 = _2650;
                float _2912 = _2652;
                float _2913 = _2654;
                float _2914 = _2656;
                float _2915 = _2658;
                float _2916 = _2660;
                uint _2917 = _2667;
                uint _2926;
                bool _2927;
                for (;;)
                {
                    _2926 = texelFetch(g_lightClassification, int((((_2526 << 5u) + (_2512 << 9u)) + (_2917 << 2u)) >> 2u)).x;
                    _2927 = _2926 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2927)
                    {
                        frontier_phi_72_pred = _2916;
                        frontier_phi_72_pred_1 = _2915;
                        frontier_phi_72_pred_2 = _2914;
                        frontier_phi_72_pred_3 = _2913;
                        frontier_phi_72_pred_4 = _2912;
                        frontier_phi_72_pred_5 = _2911;
                    }
                    else
                    {
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3123 = _2911;
                        float _3124 = _2912;
                        float _3125 = _2913;
                        float _3126 = _2914;
                        float _3127 = _2915;
                        float _3128 = _2916;
                        uint _3129 = _2926;
                        uint _3130;
                        vec4 _3155;
                        float _3156;
                        vec4 _3171;
                        vec3 _3183;
                        vec4 _3199;
                        vec4 _3215;
                        float _3262;
                        bool _3263;
                        for (;;)
                        {
                            uint _3140 = ((_2917 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3129));
                            _3130 = (_3129 + 4294967295u) & _3129;
                            uint _3142 = _3140 * 40u;
                            _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            _3156 = _3155.w;
                            uint _3158 = (_3140 * 40u) + 4u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            uint _3173 = (_3140 * 40u) + 8u;
                            _3183 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x));
                            uint _3186 = (_3140 * 40u) + 16u;
                            _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            uint _3202 = (_3140 * 40u) + 20u;
                            _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            uint _3218 = (_3140 * 40u) + 24u;
                            vec4 _3231 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 3u)).x));
                            uint _3237 = (_3140 * 40u) + 28u;
                            vec4 _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            _3262 = fma(_1592, _3250.z, fma(_1591, _3250.y, _3250.x * _1590)) + _3250.w;
                            _3263 = !((fma(_1592, _3231.z, fma(_1591, _3231.y, _3231.x * _1590)) + _3231.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3263)
                            {
                                float _3290 = _3155.x - _1590;
                                float _3291 = _3155.y - _1591;
                                float _3292 = _3155.z - _1592;
                                float _3293 = dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292));
                                float _3296 = inversesqrt(_3293);
                                float _3297 = _3296 * _3290;
                                float _3298 = _3296 * _3291;
                                float _3299 = _3296 * _3292;
                                float _3303 = 1.0 - (_3293 / (_3156 * _3156));
                                float _4401 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3304 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                                float _3308 = sqrt(_3293) * _3171.w;
                                float _3310 = 1.39999997615814208984375 / (_3308 + 1.39999997615814208984375);
                                float _3311 = _3310 * _3310;
                                float _3314 = ((1.0 - _3311) * dot(vec3(_3297, _3298, _3299), vec3(_451, _454, _457))) + _3311;
                                float _3317 = _3308 * _3308;
                                float _3321 = (fma(_1592, _3199.z, fma(_1591, _3199.y, _3199.x * _1590)) + _3199.w) / _3262;
                                float _3322 = (fma(_1592, _3215.z, fma(_1591, _3215.y, _3215.x * _1590)) + _3215.w) / _3262;
                                float _3326 = 1.0 - dot(vec2(_3321, _3322), vec2(_3321, _3322));
                                float _4417 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3327 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                                float _3328 = _3327 * (((isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0))) * _3304) / ((_3317 * 0.699999988079071044921875) + 1.0));
                                float _3340 = exp2(log2(1.0 / ((_3317 * 3.5) + 5.0)) * 0.25);
                                float _3341 = 1.0 - _527;
                                float _3348 = sqrt(1.0 - ((1.0 - (_3341 * _3341)) * (1.0 - (_3340 * _3340))));
                                float _3349 = _3348 * _3348;
                                float _3350 = _3349 * _3349;
                                float _3351 = _3297 - _2798;
                                float _3352 = _3298 - _2799;
                                float _3353 = _3299 - _2800;
                                float _3357 = inversesqrt(dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353)));
                                float _3361 = dot(vec3(_451, _454, _457), vec3((-0.0) - _2798, (-0.0) - _2799, (-0.0) - _2800));
                                float _4428 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3364 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                                float _3365 = dot(vec3(_451, _454, _457), vec3(_3357 * _3351, _3357 * _3352, _3357 * _3353));
                                float _4439 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3368 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                                float _3372 = ((_3368 * _3368) * (_3350 + (-1.0))) + 1.0;
                                float _3373 = _3310 * _3349;
                                float _3374 = _3373 * _3373;
                                float _3380 = ((1.0 - _3374) * dot(vec3(_451, _454, _457), vec3(_3297, _3298, _3299))) + _3374;
                                float _4450 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3381 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                                float _3382 = 1.0 - _3349;
                                float _3392 = (0.5 / (((_3381 * ((_3364 * _3382) + _3349)) + 9.9999999392252902907785028219223e-09) + (((_3381 * _3382) + _3349) * _3364))) * _3381;
                                float _4461 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3402 = (_3327 * _3304) * (((_3350 * 3.1415927410125732421875) * (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)))) / ((_3372 * _3372) * ((_3317 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3328 * _3171.y;
                                frontier_phi_78_pred_1 = _3328 * _3171.x;
                                frontier_phi_78_pred_2 = _3402 * _3183.z;
                                frontier_phi_78_pred_3 = _3402 * _3183.y;
                                frontier_phi_78_pred_4 = _3402 * _3183.x;
                                frontier_phi_78_pred_5 = _3328 * _3171.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3410 = frontier_phi_78_pred;
                            _3409 = frontier_phi_78_pred_1;
                            _3408 = frontier_phi_78_pred_2;
                            _3407 = frontier_phi_78_pred_3;
                            _3406 = frontier_phi_78_pred_4;
                            _3411 = frontier_phi_78_pred_5;
                            _3113 = _3409 + _3126;
                            _3114 = _3410 + _3127;
                            _3115 = _3411 + _3128;
                            _3110 = _3406 + _3123;
                            _3111 = _3407 + _3124;
                            _3112 = _3408 + _3125;
                            if (_3130 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3114;
                                _3128 = _3115;
                                _3129 = _3130;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3115;
                        frontier_phi_72_pred_1 = _3114;
                        frontier_phi_72_pred_2 = _3113;
                        frontier_phi_72_pred_3 = _3112;
                        frontier_phi_72_pred_4 = _3111;
                        frontier_phi_72_pred_5 = _3110;
                    }
                    _2783 = frontier_phi_72_pred;
                    _2781 = frontier_phi_72_pred_1;
                    _2779 = frontier_phi_72_pred_2;
                    _2777 = frontier_phi_72_pred_3;
                    _2775 = frontier_phi_72_pred_4;
                    _2773 = frontier_phi_72_pred_5;
                    uint _2918 = _2917 + 1u;
                    if (_2918 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2911 = _2773;
                        _2912 = _2775;
                        _2913 = _2777;
                        _2914 = _2779;
                        _2915 = _2781;
                        _2916 = _2783;
                        _2917 = _2918;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2783;
                frontier_phi_60_61_ladder_1 = _2781;
                frontier_phi_60_61_ladder_2 = _2777;
                frontier_phi_60_61_ladder_3 = _2775;
                frontier_phi_60_61_ladder_4 = _2773;
                frontier_phi_60_61_ladder_5 = _2779;
            }
            else
            {
                frontier_phi_60_61_ladder = _2660;
                frontier_phi_60_61_ladder_1 = _2658;
                frontier_phi_60_61_ladder_2 = _2654;
                frontier_phi_60_61_ladder_3 = _2652;
                frontier_phi_60_61_ladder_4 = _2650;
                frontier_phi_60_61_ladder_5 = _2656;
            }
            _2772 = frontier_phi_60_61_ladder_4;
            _2774 = frontier_phi_60_61_ladder_3;
            _2776 = frontier_phi_60_61_ladder_2;
            _2778 = frontier_phi_60_61_ladder_5;
            _2780 = frontier_phi_60_61_ladder_1;
            _2782 = frontier_phi_60_61_ladder;
        }
        float _2787 = isnan(1.0) ? _511 : (isnan(_511) ? 1.0 : min(_511, 1.0));
        _2545 = (_2787 * _2778) + _2057;
        _2547 = (_2787 * _2780) + _2059;
        _2549 = (_2787 * _2782) + _2061;
        _2551 = ((_2772 * _496) * _2787) + _2395;
        _2553 = ((_2774 * _498) * _2787) + _2397;
        _2555 = ((_2776 * _499) * _2787) + _2399;
    }
    else
    {
        _2545 = _2057;
        _2547 = _2059;
        _2549 = _2061;
        _2551 = _2395;
        _2553 = _2397;
        _2555 = _2399;
    }
    uint _2561 = _472 + uint(cbMatDynParam._m0[0u].w);
    float _2570 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _303.x) * _326) * cbInstanceData._m0[_2561].x;
    float _2574 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _303.y) * _326) * cbInstanceData._m0[_2561].y;
    float _2578 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _303.z) * _326) * cbInstanceData._m0[_2561].z;
    float _4477 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _4488 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _4499 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _2595 = (((isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2545 + ((isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))) * _511))) + ((_2551 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _1320)) * cbPerFrame._m0[3u].x)) + _2570;
    float _2597 = (_2574 + ((_2553 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _1320)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2547 + ((isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))) * _511)));
    float _2599 = (_2578 + ((_2555 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _1320)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2549 + ((isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0))) * _511)));
    float _4525 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2612 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
    uint _2613 = _470 + 6u;
    float _2621 = _429 / cbSceneParam._m0[86u].x;
    float _2622 = _430 / cbSceneParam._m0[86u].y;
    vec4 _2636 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2621, _2622, (log2((isnan(cbSceneParam._m0[77u].w) ? _363 : (isnan(_363) ? cbSceneParam._m0[77u].w : min(_363, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2638 = _2636.x;
    float _2639 = _2636.y;
    float _2640 = _2636.z;
    float _2641 = _2636.w;
    float _2713;
    float _2715;
    float _2717;
    float _2719;
    if (_363 > cbSceneParam._m0[78u].w)
    {
        float _2675 = isnan(_363) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _363 : min(cbSceneParam._m0[80u].w, _363));
        float _2676 = _2675 / _363;
        float _2687 = _2676 * _414;
        float _2688 = _415 * _2676;
        float _2689 = (-0.0) - _2688;
        float _2691 = _2676 * _416;
        float _2693 = (cbSceneParam._m0[77u].w * _2689) / _2675;
        float _2694 = _2693 + cbSceneParam._m0[79u].w;
        float _2695 = cbSceneParam._m0[79u].w - _2688;
        float _2701 = sqrt(((_2687 * _2687) + (_2688 * _2688)) + (_2691 * _2691));
        float _2704 = (1.0 - (cbSceneParam._m0[77u].w / _2675)) * _2701;
        float _2709 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2711 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2873;
        if (abs((_2689 - _2693) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2873 = ((((_2694 > 0.0) ? exp2(_2709 * _2694) : (2.0 - exp2(_2711 * _2694))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2704;
        }
        else
        {
            float _2833 = 1.0 / cbSceneParam._m0[80u].x;
            float _2834 = isnan(_2695) ? _2694 : (isnan(_2694) ? _2695 : max(_2694, _2695));
            float _2835 = isnan(_2695) ? _2694 : (isnan(_2694) ? _2695 : min(_2694, _2695));
            float _2844 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : min(_2834, 0.0));
            float _2845 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : min(_2835, 0.0));
            _2873 = ((abs(_2701 / _2689) * cbSceneParam._m0[80u].y) * ((((_2844 - _2845) * 2.0) - ((exp2(_2709 * (isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0)))) - exp2(_2709 * (isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0))))) * _2833)) - ((exp2(_2711 * _2844) - exp2(_2711 * _2845)) * _2833))) + (_2704 * cbSceneParam._m0[80u].z);
        }
        vec4 _2875 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2621, _2622, 1.0), 0.0);
        float _2884 = exp2((_2873 * (-1.44269502162933349609375)) * (1.0 - _2875.w));
        float _2885 = log2(_2884);
        float _2901 = log2(_2641);
        _2713 = (exp2(_2901 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2885 * cbSceneParam._m0[78u].x)) * _2875.x) / cbSceneParam._m0[78u].x)) + _2638;
        _2715 = (exp2(_2901 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2885 * cbSceneParam._m0[78u].y)) * _2875.y) / cbSceneParam._m0[78u].y)) + _2639;
        _2717 = (exp2(_2901 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2885 * cbSceneParam._m0[78u].z)) * _2875.z) / cbSceneParam._m0[78u].z)) + _2640;
        _2719 = _2884 * _2641;
    }
    else
    {
        _2713 = _2638;
        _2715 = _2639;
        _2717 = _2640;
        _2719 = _2641;
    }
    float _2731 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2732 = _2731 == 3.0;
    float _2733 = log2(_2719);
    float _2737 = exp2(_2733 * cbSceneParam._m0[78u].x);
    float _2738 = exp2(_2733 * cbSceneParam._m0[78u].y);
    float _2739 = exp2(_2733 * cbSceneParam._m0[78u].z);
    float _2740 = _2737 * (isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0)));
    float _2741 = _2738 * (isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0)));
    float _2742 = _2739 * (isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0)));
    float _2751 = (_2731 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2751 * (_2732 ? _2740 : (_2740 + (cbSceneParam._m0[72u].w * _2713)));
    SV_Target.y = _2751 * (_2732 ? _2741 : (_2741 + (cbSceneParam._m0[72u].w * _2715)));
    SV_Target.z = _2751 * (_2732 ? _2742 : (_2742 + (cbSceneParam._m0[72u].w * _2717)));
    SV_Target.w = cbInstanceData._m0[_2613].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2570) * _2612) * _2737) * _2751;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2574) * _2612) * _2738) * _2751;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2578) * _2612) * _2739) * _2751;
    SV_Target_1.w = cbInstanceData._m0[_2613].w;
}


