#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _842;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _181 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _182 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _183 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_181, _182, _183), vec3(_181, _182, _183)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _224.x * cbMtdParam._m0[9u].x;
    float _231 = _224.y * cbMtdParam._m0[9u].y;
    float _232 = _224.z * cbMtdParam._m0[9u].z;
    vec4 _244 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _248 = _244.z;
    float _252 = (_244.x * 2.0) + (-1.0);
    float _254 = (_244.y * 2.0) + (-1.0);
    float _255 = dot(vec2(_252, _254), vec2(_252, _254));
    float _3199 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _261 = sqrt(1.0 - (isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0))));
    vec4 _298 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _305 = fma(_261, _195 * NORMAL.x, fma(_254, _202 * TANGENT.x, (_188 * _181) * _252));
    float _308 = fma(_261, _195 * NORMAL.y, fma(_254, _202 * TANGENT.y, (_188 * _182) * _252));
    float _311 = fma(_261, _195 * NORMAL.z, fma(_254, _202 * TANGENT.z, (_188 * _183) * _252));
    float _315 = inversesqrt(dot(vec3(_305, _308, _311), vec3(_305, _308, _311)));
    float _316 = _315 * _305;
    float _317 = _315 * _308;
    float _318 = _315 * _311;
    float _3210 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _319 = isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0));
    float _3221 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3232 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3243 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _338 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _379 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _389 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _379);
    float _390 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _379);
    float _391 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _379);
    float _395 = inversesqrt(dot(vec3(_389, _390, _391), vec3(_389, _390, _391)));
    float _396 = _389 * _395;
    float _397 = _390 * _395;
    float _398 = _391 * _395;
    float _404 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _405 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _426 = fma(_318, cbSceneParam._m0[5u].z, fma(_317, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _316));
    float _429 = fma(_318, cbSceneParam._m0[6u].z, fma(_317, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _316));
    float _432 = fma(_318, cbSceneParam._m0[7u].z, fma(_317, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _316));
    uint _445 = uint(roundEven(NORMAL.w)) * 13u;
    uint _446 = _445 + 9u;
    uint _447 = _446 + uint(cbMatDynParam._m0[0u].w);
    float _453 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0)))) * cbInstanceData._m0[_447].x;
    float _454 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0)))) * cbInstanceData._m0[_447].y;
    float _455 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0)))) * cbInstanceData._m0[_447].z;
    float _3254 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0));
    float _3265 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
    float _3276 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
    vec4 _467 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _404, cbSceneParam._m0[86u].y * _405));
    float _470 = _467.x * TEXCOORD.z;
    float _471 = dot(vec3(_316, _317, _318), vec3(_396, _397, _398));
    float _474 = _471 * 2.0;
    float _478 = (_474 * _316) - _396;
    float _479 = (_474 * _317) - _397;
    float _480 = (_474 * _318) - _398;
    float _484 = abs(dot(vec3(_396, _397, _398), vec3(_316, _317, _318)));
    float _3287 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _486 = sqrt(_319);
    float _499 = exp2((_486 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_486 * 3.0));
    float _531 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _535 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _841;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _566 = fma(_539, cbModelParam._m0[26u].z, fma(_535, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _531));
        float _570 = fma(_539, cbModelParam._m0[27u].z, fma(_535, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _531));
        float _574 = fma(_539, cbModelParam._m0[28u].z, fma(_535, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _531));
        float _599 = _531 + _316;
        float _600 = _535 + _317;
        float _601 = _539 + _318;
        float _611 = fma(_601, cbModelParam._m0[26u].z, fma(_600, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _599)) - _566;
        float _612 = fma(_601, cbModelParam._m0[27u].z, fma(_600, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _599)) - _570;
        float _613 = fma(_601, cbModelParam._m0[28u].z, fma(_600, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _599)) - _574;
        float _617 = inversesqrt(dot(vec3(_611, _612, _613), vec3(_611, _612, _613)));
        float _630 = ((_617 * _611) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_566 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _631 = ((_617 * _612) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_570 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _632 = ((_617 * _613) / cbModelParam._m0[34u].z) + ((((((_574 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _635 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        vec4 _642 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        vec4 _649 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        vec4 _656 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        float _669 = exp2((_635.w + (-0.5)) * 20.0) * 2.0;
        float _670 = _669 * (_635.x + (-0.5));
        float _671 = _669 * (_635.y + (-0.5));
        float _672 = _669 * (_635.z + (-0.5));
        float _679 = exp2((_642.w + (-0.5)) * 20.0) * 2.0;
        float _680 = _679 * (_642.x + (-0.5));
        float _681 = _679 * (_642.y + (-0.5));
        float _682 = _679 * (_642.z + (-0.5));
        float _689 = exp2((_649.w + (-0.5)) * 20.0) * 2.0;
        float _690 = _689 * (_649.x + (-0.5));
        float _691 = _689 * (_649.y + (-0.5));
        float _692 = _689 * (_649.z + (-0.5));
        float _699 = exp2((_656.w + (-0.5)) * 20.0) * 2.0;
        float _700 = _699 * (_656.x + (-0.5));
        float _701 = _699 * (_656.y + (-0.5));
        float _702 = _699 * (_656.z + (-0.5));
        float _703 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _704 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _705 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _706 = _670 * 0.5;
        float _707 = _680 * 0.5;
        float _708 = _690 * 0.5;
        float _709 = dot(vec3(_706, _707, _708), vec3(_706, _707, _708));
        float _714 = (_709 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_709);
        float _723 = (dot(vec3(_316, _317, _318), vec3(_714 * _706, _714 * _707, _714 * _708)) + 1.0) * 0.5;
        float _3313 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _733 = sqrt(((_707 * _707) + (_706 * _706)) + (_708 * _708)) / (_703 + 9.9999997473787516355514526367188e-06);
        float _3324 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _734 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
        float _735 = _734 * 2.0;
        float _739 = (1.0 - _734) / (_734 + 1.0);
        float _3335 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _740 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
        float _749 = ((((1.0 - _740) * (_735 + 2.0)) * exp2(log2(isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0))) * (_735 + 1.0))) + _740) * _703;
        float _750 = _671 * 0.5;
        float _751 = _681 * 0.5;
        float _752 = _691 * 0.5;
        float _753 = dot(vec3(_750, _751, _752), vec3(_750, _751, _752));
        float _758 = (_753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_753);
        float _766 = (dot(vec3(_316, _317, _318), vec3(_758 * _750, _758 * _751, _758 * _752)) + 1.0) * 0.5;
        float _3346 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _775 = sqrt(((_751 * _751) + (_750 * _750)) + (_752 * _752)) / (_704 + 9.9999997473787516355514526367188e-06);
        float _3357 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _776 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
        float _777 = _776 * 2.0;
        float _781 = (1.0 - _776) / (_776 + 1.0);
        float _3368 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
        float _791 = ((((1.0 - _782) * (_777 + 2.0)) * exp2(log2(isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0))) * (_777 + 1.0))) + _782) * _704;
        float _792 = _672 * 0.5;
        float _793 = _682 * 0.5;
        float _794 = _692 * 0.5;
        float _795 = dot(vec3(_792, _793, _794), vec3(_792, _793, _794));
        float _800 = (_795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_795);
        float _808 = (dot(vec3(_316, _317, _318), vec3(_800 * _792, _800 * _793, _800 * _794)) + 1.0) * 0.5;
        float _3379 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _817 = sqrt(((_793 * _793) + (_792 * _792)) + (_794 * _794)) / (_705 + 9.9999997473787516355514526367188e-06);
        float _3390 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _819 = _818 * 2.0;
        float _823 = (1.0 - _818) / (_818 + 1.0);
        float _3401 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _833 = ((((1.0 - _824) * (_819 + 2.0)) * exp2(log2(isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))) * (_819 + 1.0))) + _824) * _705;
        _841 = _672;
        _843 = _671;
        _844 = _670;
        _845 = _682;
        _846 = _681;
        _847 = _680;
        _848 = _692;
        _849 = _691;
        _850 = _690;
        _851 = _705;
        _852 = _704;
        _853 = _703;
        _854 = cbModelParam._m0[36u].z * (isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0)));
        _855 = cbModelParam._m0[36u].z * (isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0)));
        _856 = cbModelParam._m0[36u].z * (isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0)));
    }
    else
    {
        _841 = _842;
        _843 = _842;
        _844 = _842;
        _845 = _842;
        _846 = _842;
        _847 = _842;
        _848 = _842;
        _849 = _842;
        _850 = _842;
        _851 = _842;
        _852 = _842;
        _853 = _842;
        _854 = 0.0;
        _855 = 0.0;
        _856 = 0.0;
    }
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _882 = fma(_539, cbModelParam._m0[30u].z, fma(_535, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _531));
        float _886 = fma(_539, cbModelParam._m0[31u].z, fma(_535, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _531));
        float _890 = fma(_539, cbModelParam._m0[32u].z, fma(_535, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _531));
        float _913 = _531 + _316;
        float _914 = _535 + _317;
        float _915 = _539 + _318;
        float _925 = fma(_915, cbModelParam._m0[30u].z, fma(_914, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _913)) - _882;
        float _926 = fma(_915, cbModelParam._m0[31u].z, fma(_914, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _913)) - _886;
        float _927 = fma(_915, cbModelParam._m0[32u].z, fma(_914, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _913)) - _890;
        float _931 = inversesqrt(dot(vec3(_925, _926, _927), vec3(_925, _926, _927)));
        float _944 = ((_931 * _925) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_882 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _945 = ((_931 * _926) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_886 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _946 = ((_931 * _927) / cbModelParam._m0[35u].z) + ((((((_890 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        float _981 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_948.x + (-0.5));
        float _983 = _981 * (_948.y + (-0.5));
        float _984 = _981 * (_948.z + (-0.5));
        float _991 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_955.x + (-0.5));
        float _993 = _991 * (_955.y + (-0.5));
        float _994 = _991 * (_955.z + (-0.5));
        float _1001 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_962.x + (-0.5));
        float _1003 = _1001 * (_962.y + (-0.5));
        float _1004 = _1001 * (_962.z + (-0.5));
        float _1011 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_969.x + (-0.5));
        float _1013 = _1011 * (_969.y + (-0.5));
        float _1014 = _1011 * (_969.z + (-0.5));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = _982 * 0.5;
        float _1019 = _992 * 0.5;
        float _1020 = _1002 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1034 = (dot(vec3(_316, _317, _318), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3442 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1043 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3453 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _3464 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * (_1045 + 1.0))) + _1050) * _1015;
        float _1060 = _983 * 0.5;
        float _1061 = _993 * 0.5;
        float _1062 = _1003 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_316, _317, _318), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3475 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3486 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3497 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * (_1087 + 1.0))) + _1092) * _1016;
        float _1102 = _984 * 0.5;
        float _1103 = _994 * 0.5;
        float _1104 = _1004 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1118 = (dot(vec3(_316, _317, _318), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3508 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1127 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3519 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3530 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * (_1129 + 1.0))) + _1134) * _1017;
        _1151 = _984;
        _1152 = _983;
        _1153 = _982;
        _1154 = _994;
        _1155 = _993;
        _1156 = _992;
        _1157 = _1004;
        _1158 = _1003;
        _1159 = _1002;
        _1160 = _1017;
        _1161 = _1016;
        _1162 = _1015;
        _1163 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
        _1164 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
        _1165 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
    }
    else
    {
        _1151 = _842;
        _1152 = _842;
        _1153 = _842;
        _1154 = _842;
        _1155 = _842;
        _1156 = _842;
        _1157 = _842;
        _1158 = _842;
        _1159 = _842;
        _1160 = _842;
        _1161 = _842;
        _1162 = _842;
        _1163 = 0.0;
        _1164 = 0.0;
        _1165 = 0.0;
    }
    float _1175 = (cbModelParam._m0[1u].x * (_1163 - _854)) + _854;
    float _1176 = (cbModelParam._m0[1u].x * (_1164 - _855)) + _855;
    float _1177 = (cbModelParam._m0[1u].x * (_1165 - _856)) + _856;
    float _1198 = fma(_1177, cbSceneParam._m0[89u].z, fma(_1176, cbSceneParam._m0[89u].y, _1175 * cbSceneParam._m0[89u].x));
    float _1201 = fma(_1177, cbSceneParam._m0[90u].z, fma(_1176, cbSceneParam._m0[90u].y, _1175 * cbSceneParam._m0[90u].x));
    float _1204 = fma(_1177, cbSceneParam._m0[91u].z, fma(_1176, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1175));
    float _1219 = _478 * 0.5;
    float _1220 = _479 * 0.5;
    float _1221 = _480 * 0.5;
    float _1222 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_1153, _1156, _1159, _1162));
    float _1225 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_1152, _1155, _1158, _1161));
    float _1228 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_1151, _1154, _1157, _1160));
    float _1262;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1235 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_841, _845, _848, _851));
        float _1239 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_843, _846, _849, _852));
        float _1243 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_844, _847, _850, _853));
        float _1250 = dot(vec4(cbModelParam._m0[39u]), vec4(_1219, _1220, _1221, 1.0));
        _1262 = dot(vec3(isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)), isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1250) ? 0.0 : (isnan(0.0) ? _1250 : max(0.0, _1250))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1262 = 1.0;
    }
    float _1273;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1264 = dot(vec4(cbModelParam._m0[40u]), vec4(_1219, _1220, _1221, 1.0));
        _1273 = dot(vec3(isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)), isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)), isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1264) ? 0.0 : (isnan(0.0) ? _1264 : max(0.0, _1264))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1273 = 1.0;
    }
    float _1277 = (_1273 * cbModelParam._m0[1u].x) + (_1262 * (1.0 - cbModelParam._m0[1u].x));
    float _1287 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _319);
    float _1288 = isnan(_1287) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1287 : min(cbModelParam._m0[25u].z, _1287));
    float _1369;
    float _1371;
    float _1373;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1336 = fma(_539, cbModelParam._m0[13u].z, fma(_535, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _531)) + cbModelParam._m0[13u].w;
        float _1340 = fma(_539, cbModelParam._m0[14u].z, fma(_535, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _531)) + cbModelParam._m0[14u].w;
        float _1344 = fma(_539, cbModelParam._m0[15u].z, fma(_535, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _531)) + cbModelParam._m0[15u].w;
        float _1347 = fma(_480, cbModelParam._m0[13u].z, fma(_479, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _478));
        float _1350 = fma(_480, cbModelParam._m0[14u].z, fma(_479, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _478));
        float _1353 = fma(_480, cbModelParam._m0[15u].z, fma(_479, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _478));
        float _1381;
        if (_1347 > 0.0)
        {
            _1381 = abs((1.0 - _1336) / _1347);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1347 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1336 + 1.0) / _1347);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1381 = frontier_phi_14_12_ladder;
        }
        float _1585;
        if (_1350 > 0.0)
        {
            _1585 = abs((1.0 - _1340) / _1350);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1350 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1340 + 1.0) / _1350);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1585 = frontier_phi_23_19_ladder;
        }
        float _1828;
        if (_1353 > 0.0)
        {
            _1828 = abs((1.0 - _1344) / _1353);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1353 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1344 + 1.0) / _1353);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1828 = frontier_phi_35_30_ladder;
        }
        float _1830 = isnan(_1585) ? _1381 : (isnan(_1381) ? _1585 : min(_1381, _1585));
        float _1831 = isnan(_1828) ? _1830 : (isnan(_1830) ? _1828 : min(_1830, _1828));
        float _1835 = (_1831 * _1347) + _1336;
        float _1836 = (_1831 * _1350) + _1340;
        float _1837 = (_1831 * _1353) + _1344;
        float _1838 = _1831 * 9.9999997473787516355514526367188e-05;
        float _1840 = (-1.0) - _1838;
        float _1842 = _1838 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1837 > _1842) || ((_1837 < _1840) || ((_1836 > _1842) || ((_1836 < _1840) || ((_1835 < _1840) || (_1835 > _1842))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1961 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1837, cbModelParam._m0[9u].z, fma(_1836, cbModelParam._m0[9u].y, _1835 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1837, cbModelParam._m0[10u].z, fma(_1836, cbModelParam._m0[10u].y, _1835 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1837, cbModelParam._m0[11u].z, fma(_1836, cbModelParam._m0[11u].y, _1835 * cbModelParam._m0[11u].x))), _1288);
            frontier_phi_13_35_ladder = _1961.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1961.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1961.x * cbModelParam._m0[1u].y;
        }
        _1369 = frontier_phi_13_35_ladder_2;
        _1371 = frontier_phi_13_35_ladder_1;
        _1373 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1357 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_478, _479, _480), _1288);
        _1369 = _1357.x * cbModelParam._m0[1u].y;
        _1371 = _1357.y * cbModelParam._m0[1u].y;
        _1373 = _1357.z * cbModelParam._m0[1u].y;
    }
    float _1377 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _319);
    float _1378 = isnan(_1377) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1377 : min(cbModelParam._m0[25u].w, _1377));
    float _1470;
    float _1472;
    float _1474;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1434 = fma(_539, cbModelParam._m0[21u].z, fma(_535, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _531)) + cbModelParam._m0[21u].w;
        float _1438 = fma(_539, cbModelParam._m0[22u].z, fma(_535, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _531)) + cbModelParam._m0[22u].w;
        float _1442 = fma(_539, cbModelParam._m0[23u].z, fma(_535, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _531)) + cbModelParam._m0[23u].w;
        float _1445 = fma(_480, cbModelParam._m0[21u].z, fma(_479, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _478));
        float _1448 = fma(_480, cbModelParam._m0[22u].z, fma(_479, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _478));
        float _1451 = fma(_480, cbModelParam._m0[23u].z, fma(_479, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _478));
        float _1590;
        if (_1445 > 0.0)
        {
            _1590 = abs((1.0 - _1434) / _1445);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1434 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1590 = frontier_phi_25_21_ladder;
        }
        float _1855;
        if (_1448 > 0.0)
        {
            _1855 = abs((1.0 - _1438) / _1448);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1448 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1438 + 1.0) / _1448);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1855 = frontier_phi_37_32_ladder;
        }
        float _2060;
        if (_1451 > 0.0)
        {
            _2060 = abs((1.0 - _1442) / _1451);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1442 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2060 = frontier_phi_46_43_ladder;
        }
        float _2062 = isnan(_1855) ? _1590 : (isnan(_1590) ? _1855 : min(_1590, _1855));
        float _2063 = isnan(_2060) ? _2062 : (isnan(_2062) ? _2060 : min(_2062, _2060));
        float _2067 = (_2063 * _1445) + _1434;
        float _2068 = (_2063 * _1448) + _1438;
        float _2069 = (_2063 * _1451) + _1442;
        float _2070 = _2063 * 9.9999997473787516355514526367188e-05;
        float _2071 = (-1.0) - _2070;
        float _2073 = _2070 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2069 > _2073) || ((_2069 < _2071) || ((_2068 > _2073) || ((_2068 < _2071) || ((_2067 < _2071) || (_2067 > _2073))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2303 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2069, cbModelParam._m0[17u].z, fma(_2068, cbModelParam._m0[17u].y, _2067 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2069, cbModelParam._m0[18u].z, fma(_2068, cbModelParam._m0[18u].y, _2067 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2069, cbModelParam._m0[19u].z, fma(_2068, cbModelParam._m0[19u].y, _2067 * cbModelParam._m0[19u].x))), _1378);
            frontier_phi_22_46_ladder = _2303.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2303.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2303.x * cbModelParam._m0[1u].z;
        }
        _1470 = frontier_phi_22_46_ladder_2;
        _1472 = frontier_phi_22_46_ladder_1;
        _1474 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1454 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_478, _479, _480), _1378);
        _1470 = _1454.x * cbModelParam._m0[1u].z;
        _1472 = _1454.y * cbModelParam._m0[1u].z;
        _1474 = _1454.z * cbModelParam._m0[1u].z;
    }
    float _1486 = ((((1.0 - _499) * ((_486 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_499 * _486)) * _470;
    float _1487 = _1486 * ((cbModelParam._m0[1u].w * (_1470 - _1369)) + _1369);
    float _1488 = _1486 * ((cbModelParam._m0[1u].w * (_1472 - _1371)) + _1371);
    float _1489 = _1486 * ((cbModelParam._m0[1u].w * (_1474 - _1373)) + _1373);
    float _1492 = fma(_1489, cbSceneParam._m0[89u].z, fma(_1488, cbSceneParam._m0[89u].y, _1487 * cbSceneParam._m0[89u].x));
    float _1495 = fma(_1489, cbSceneParam._m0[90u].z, fma(_1488, cbSceneParam._m0[90u].y, _1487 * cbSceneParam._m0[90u].x));
    float _1498 = fma(_1489, cbSceneParam._m0[91u].z, fma(_1488, cbSceneParam._m0[91u].y, _1487 * cbSceneParam._m0[91u].x));
    uvec4 _1508 = floatBitsToUint(cbInstanceData._m0[_445 + 5u]);
    uint _1510 = _1508.x * 14u;
    uint _1511 = _1510 + 13u;
    float _1518 = _470 + (-1.0);
    float _1523 = (cbLight._m0[_1511].x * _1518) + 1.0;
    float _1524 = (cbLight._m0[_1511].y * _1518) + 1.0;
    float _1525 = (cbLight._m0[_1511].z * _1518) + 1.0;
    float _1526 = (cbLight._m0[_1511].w * _1518) + 1.0;
    uint _1527 = _1510 + 5u;
    float _1533 = isnan(1.0) ? _1524 : (isnan(_1524) ? 1.0 : min(_1524, 1.0));
    uint _1537 = _1510 + 4u;
    float _1544 = isnan(1.0) ? _1523 : (isnan(_1523) ? 1.0 : min(_1523, 1.0));
    uint _1548 = _1510 | 1u;
    float _1559 = dot(vec3(cbLight._m0[_1510].xyz), vec3(_316, _317, _318));
    float _1562 = dot(vec3(cbLight._m0[_1548].xyz), vec3(_316, _317, _318));
    float _3666 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
    float _3677 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
    float _1567 = (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * 0.3183098733425140380859375;
    float _1569 = (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * 0.3183098733425140380859375;
    float _1576 = ((cbLight._m0[_1527].x * _1533) * _1569) + ((cbLight._m0[_1537].x * _1544) * _1567);
    float _1577 = ((_1533 * cbLight._m0[_1527].y) * _1569) + ((_1544 * cbLight._m0[_1537].y) * _1567);
    float _1578 = ((_1533 * cbLight._m0[_1527].z) * _1569) + ((_1544 * cbLight._m0[_1537].z) * _1567);
    uvec4 _1582 = floatBitsToUint(cbLight._m0[_1510 + 12u]);
    bool _1584 = _1582.x == 0u;
    float _1595;
    float _1597;
    float _1599;
    if (_1584)
    {
        _1595 = _1576;
        _1597 = _1577;
        _1599 = _1578;
    }
    else
    {
        uint _1603 = _1510 + 6u;
        float _1619 = (dot(vec3(cbLight._m0[_1510 + 2u].xyz), vec3(_316, _317, _318)) * 0.5) + 0.5;
        float _1620 = _1619 * _1619;
        float _3688 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1622 = isnan(1.0) ? _1525 : (isnan(_1525) ? 1.0 : min(_1525, 1.0));
        _1595 = (((cbLight._m0[_1603].x * 0.3183098733425140380859375) * _1621) * _1622) + _1576;
        _1597 = (((cbLight._m0[_1603].y * 0.3183098733425140380859375) * _1621) * _1622) + _1577;
        _1599 = (((cbLight._m0[_1603].z * 0.3183098733425140380859375) * _1621) * _1622) + _1578;
    }
    bool _1602 = _1582.y == 0u;
    float _1640;
    float _1642;
    float _1644;
    if (_1602)
    {
        _1640 = _1595;
        _1642 = _1597;
        _1644 = _1599;
    }
    else
    {
        uint _1799 = _1510 + 7u;
        float _1815 = (dot(vec3(cbLight._m0[_1510 + 3u].xyz), vec3(_316, _317, _318)) * 0.5) + 0.5;
        float _1816 = _1815 * _1815;
        float _3704 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1817 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1818 = isnan(1.0) ? _1526 : (isnan(_1526) ? 1.0 : min(_1526, 1.0));
        _1640 = (((cbLight._m0[_1799].x * 0.3183098733425140380859375) * _1817) * _1818) + _1595;
        _1642 = (((cbLight._m0[_1799].y * 0.3183098733425140380859375) * _1817) * _1818) + _1597;
        _1644 = (((cbLight._m0[_1799].z * 0.3183098733425140380859375) * _1817) * _1818) + _1599;
    }
    uint _1647 = _1510 + 8u;
    float _1660 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1510].w)) * _319) * 0.949999988079071044921875);
    float _1661 = _1660 * _1660;
    float _1662 = cbLight._m0[_1510].x + _396;
    float _1663 = cbLight._m0[_1510].y + _397;
    float _1664 = cbLight._m0[_1510].z + _398;
    float _1668 = inversesqrt(dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664)));
    float _1669 = _1668 * _1662;
    float _1670 = _1668 * _1663;
    float _1671 = _1668 * _1664;
    float _1672 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_1510].xyz));
    float _3720 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
    float _1675 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _3731 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _1676 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _1677 = dot(vec3(_316, _317, _318), vec3(_1669, _1670, _1671));
    float _3742 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
    float _1680 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _1681 = dot(vec3(cbLight._m0[_1510].xyz), vec3(_1669, _1670, _1671));
    float _3753 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
    float _1685 = _1661 * _1661;
    float _1689 = ((_1680 * _1680) * (_1685 + (-1.0))) + 1.0;
    float _1700 = (exp2(log2(1.0 - (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1701 = 1.0 - _1661;
    float _1712 = (0.5 / (((_1676 * ((_1675 * _1701) + _1661)) + 9.9999999392252902907785028219223e-09) + (((_1676 * _1701) + _1661) * _1675))) * _1675;
    float _3764 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
    float _1714 = (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (_1685 / ((_1689 * _1689) * 3.141590118408203125));
    uint _1725 = _1510 + 9u;
    float _1736 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1548].w)) * _319) * 0.949999988079071044921875);
    float _1737 = _1736 * _1736;
    float _1738 = cbLight._m0[_1548].x + _396;
    float _1739 = cbLight._m0[_1548].y + _397;
    float _1740 = cbLight._m0[_1548].z + _398;
    float _1744 = inversesqrt(dot(vec3(_1738, _1739, _1740), vec3(_1738, _1739, _1740)));
    float _1745 = _1744 * _1738;
    float _1746 = _1744 * _1739;
    float _1747 = _1744 * _1740;
    float _1748 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_1548].xyz));
    float _3775 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1751 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _1752 = dot(vec3(_316, _317, _318), vec3(_1745, _1746, _1747));
    float _3786 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1755 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _1756 = dot(vec3(cbLight._m0[_1548].xyz), vec3(_1745, _1746, _1747));
    float _3797 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1760 = _1737 * _1737;
    float _1764 = ((_1755 * _1755) * (_1760 + (-1.0))) + 1.0;
    float _1773 = (exp2(log2(1.0 - (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1774 = 1.0 - _1737;
    float _1784 = (0.5 / (((_1676 * ((_1751 * _1774) + _1737)) + 9.9999999392252902907785028219223e-09) + (((_1676 * _1774) + _1737) * _1751))) * _1751;
    float _3808 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1786 = (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_1760 / ((_1764 * _1764) * 3.141590118408203125));
    float _1796 = (((_1773 * cbLight._m0[_1725].x) * _1786) * _1533) + (((_1700 * cbLight._m0[_1647].x) * _1714) * _1544);
    float _1797 = (((_1773 * cbLight._m0[_1725].y) * _1786) * _1533) + (((_1700 * cbLight._m0[_1647].y) * _1714) * _1544);
    float _1798 = (((_1773 * cbLight._m0[_1725].z) * _1786) * _1533) + (((_1700 * cbLight._m0[_1647].z) * _1714) * _1544);
    float _1860;
    float _1862;
    float _1864;
    if (_1584)
    {
        _1860 = _1796;
        _1862 = _1797;
        _1864 = _1798;
    }
    else
    {
        uint _1866 = _1510 + 2u;
        uint _1870 = _1510 + 10u;
        float _1884 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1866].w)) * _319) * 0.949999988079071044921875);
        float _1885 = _1884 * _1884;
        float _1886 = cbLight._m0[_1866].x + _396;
        float _1887 = cbLight._m0[_1866].y + _397;
        float _1888 = cbLight._m0[_1866].z + _398;
        float _1892 = inversesqrt(dot(vec3(_1886, _1887, _1888), vec3(_1886, _1887, _1888)));
        float _1893 = _1892 * _1886;
        float _1894 = _1892 * _1887;
        float _1895 = _1892 * _1888;
        float _1896 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_1866].xyz));
        float _3819 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1899 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1900 = dot(vec3(_316, _317, _318), vec3(_1893, _1894, _1895));
        float _3830 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1903 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1904 = dot(vec3(cbLight._m0[_1866].xyz), vec3(_1893, _1894, _1895));
        float _3841 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1908 = _1885 * _1885;
        float _1912 = ((_1903 * _1903) * (_1908 + (-1.0))) + 1.0;
        float _1921 = (exp2(log2(1.0 - (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1922 = 1.0 - _1885;
        float _1932 = (0.5 / (((_1676 * ((_1899 * _1922) + _1885)) + 9.9999999392252902907785028219223e-09) + (((_1676 * _1922) + _1885) * _1899))) * _1899;
        float _3852 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1934 = (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1908 / ((_1912 * _1912) * 3.141590118408203125));
        float _1935 = isnan(1.0) ? _1525 : (isnan(_1525) ? 1.0 : min(_1525, 1.0));
        _1860 = (((_1921 * cbLight._m0[_1870].x) * _1934) * _1935) + _1796;
        _1862 = (((_1921 * cbLight._m0[_1870].y) * _1934) * _1935) + _1797;
        _1864 = (((_1921 * cbLight._m0[_1870].z) * _1934) * _1935) + _1798;
    }
    float _1970;
    float _1972;
    float _1974;
    if (_1602)
    {
        _1970 = _1860;
        _1972 = _1862;
        _1974 = _1864;
    }
    else
    {
        uint _1981 = _1510 + 3u;
        uint _1985 = _1510 + 11u;
        float _1999 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1981].w)) * _319) * 0.949999988079071044921875);
        float _2000 = _1999 * _1999;
        float _2001 = cbLight._m0[_1981].x + _396;
        float _2002 = cbLight._m0[_1981].y + _397;
        float _2003 = cbLight._m0[_1981].z + _398;
        float _2007 = inversesqrt(dot(vec3(_2001, _2002, _2003), vec3(_2001, _2002, _2003)));
        float _2008 = _2007 * _2001;
        float _2009 = _2007 * _2002;
        float _2010 = _2007 * _2003;
        float _2011 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_1981].xyz));
        float _3868 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2014 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _2015 = dot(vec3(_316, _317, _318), vec3(_2008, _2009, _2010));
        float _3879 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2018 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _2019 = dot(vec3(cbLight._m0[_1981].xyz), vec3(_2008, _2009, _2010));
        float _3890 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2023 = _2000 * _2000;
        float _2027 = ((_2018 * _2018) * (_2023 + (-1.0))) + 1.0;
        float _2036 = (exp2(log2(1.0 - (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2037 = 1.0 - _2000;
        float _2047 = (0.5 / (((_1676 * ((_2014 * _2037) + _2000)) + 9.9999999392252902907785028219223e-09) + (((_1676 * _2037) + _2000) * _2014))) * _2014;
        float _3901 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2049 = (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_2023 / ((_2027 * _2027) * 3.141590118408203125));
        float _2050 = isnan(1.0) ? _1526 : (isnan(_1526) ? 1.0 : min(_1526, 1.0));
        _1970 = (((_2036 * cbLight._m0[_1985].x) * _2049) * _2050) + _1860;
        _1972 = (((_2036 * cbLight._m0[_1985].y) * _2049) * _2050) + _1862;
        _1974 = (((_2036 * cbLight._m0[_1985].z) * _2049) * _2050) + _1864;
    }
    float _2185;
    float _2187;
    float _2189;
    float _2191;
    float _2193;
    float _2195;
    if (_1508.y == 0u)
    {
        float _2125 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2126 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2125;
        float _2127 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2125;
        float _2128 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2125;
        uvec4 _2140 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2141 = _2140.x;
        uint _2152 = uint((float(_2140.y) * floor(float(uint(cbSceneParam._m0[85u].y * _405) / _2141))) + floor(float(uint(cbSceneParam._m0[85u].x * _404) / _2141)));
        float _2162 = (log2(_2128 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2163 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        uint _2166 = uint(isnan(14.0) ? _2163 : (isnan(_2163) ? 14.0 : min(_2163, 14.0)));
        uvec4 _2171 = texelFetch(g_lightClusterGridBuffer, int(((_2166 << 2u) + (_2152 << 6u)) >> 2u));
        uint _2172 = _2171.x;
        uint _2173 = _2140.z;
        float _2308;
        float _2310;
        float _2312;
        float _2314;
        float _2316;
        float _2318;
        if (((((1u << ((_2173 >> 4u) & 15u)) + 4294967295u) & _2172) == 0u) || ((_2173 & 240u) == 0u))
        {
            _2308 = 0.0;
            _2310 = 0.0;
            _2312 = 0.0;
            _2314 = 0.0;
            _2316 = 0.0;
            _2318 = 0.0;
        }
        else
        {
            float _2309;
            float _2311;
            float _2313;
            float _2315;
            float _2317;
            float _2319;
            float _2462 = 0.0;
            float _2463 = 0.0;
            float _2464 = 0.0;
            float _2465 = 0.0;
            float _2466 = 0.0;
            float _2467 = 0.0;
            uint _2468 = 0u;
            uint _2477;
            bool _2478;
            for (;;)
            {
                _2477 = texelFetch(g_lightClassification, int((((_2166 << 5u) + (_2152 << 9u)) + (_2468 << 2u)) >> 2u)).x;
                _2478 = _2477 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2478)
                {
                    frontier_phi_61_pred = _2462;
                    frontier_phi_61_pred_1 = _2467;
                    frontier_phi_61_pred_2 = _2466;
                    frontier_phi_61_pred_3 = _2465;
                    frontier_phi_61_pred_4 = _2464;
                    frontier_phi_61_pred_5 = _2463;
                }
                else
                {
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    uint _2592;
                    _2586 = _2462;
                    _2587 = _2463;
                    _2588 = _2464;
                    _2589 = _2465;
                    _2590 = _2466;
                    _2591 = _2467;
                    _2592 = _2477;
                    float _2518;
                    float _2519;
                    float _2520;
                    float _2521;
                    float _2522;
                    float _2523;
                    for (;;)
                    {
                        uint _2596 = uint(findLSB(_2592)) + (_2468 << 5u);
                        uint _2593 = (_2592 + 4294967295u) & _2592;
                        uint _2598 = _2596 * 48u;
                        vec4 _2612 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2598)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 3u)).x));
                        uint _2618 = (_2596 * 48u) + 4u;
                        vec4 _2631 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2618)).x, texelFetch(g_PointLightRenderingBuffer, int(_2618 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2618 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2618 + 3u)).x));
                        uint _2637 = (_2596 * 48u) + 8u;
                        vec3 _2648 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2637)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 2u)).x));
                        float _2652 = _2612.x - _2126;
                        float _2653 = _2612.y - _2127;
                        float _2654 = _2612.z - _2128;
                        float _2655 = dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654));
                        float _2658 = inversesqrt(_2655);
                        float _2659 = _2658 * _2652;
                        float _2660 = _2658 * _2653;
                        float _2661 = _2658 * _2654;
                        float _2662 = dot(vec3(_426, _429, _432), vec3(_2659, _2660, _2661));
                        float _2667 = 1.0 - (_2655 * _2612.w);
                        float _3927 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
                        float _2668 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
                        float _2669 = sqrt(_2655) * _2631.w;
                        float _2672 = 1.39999997615814208984375 / (_2669 + 1.39999997615814208984375);
                        float _2673 = _2672 * _2672;
                        float _2676 = ((1.0 - _2673) * _2662) + _2673;
                        float _2679 = _2669 * _2669;
                        float _2683 = ((isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0))) * _2668) / ((_2679 * 0.699999988079071044921875) + 1.0);
                        float _2687 = (-0.0) - _2126;
                        float _2688 = (-0.0) - _2127;
                        float _2689 = (-0.0) - _2128;
                        float _2693 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
                        float _2694 = _2693 * _2687;
                        float _2695 = _2693 * _2688;
                        float _2696 = _2693 * _2689;
                        float _2704 = exp2(log2(1.0 / ((_2679 * 3.5) + 5.0)) * 0.25);
                        float _2705 = 1.0 - _486;
                        float _2712 = sqrt(1.0 - ((1.0 - (_2705 * _2705)) * (1.0 - (_2704 * _2704))));
                        float _2713 = _2712 * _2712;
                        float _2714 = _2713 * _2713;
                        float _2715 = _2694 + _2659;
                        float _2716 = _2695 + _2660;
                        float _2717 = _2696 + _2661;
                        float _2721 = inversesqrt(dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717)));
                        float _2725 = dot(vec3(_426, _429, _432), vec3(_2694, _2695, _2696));
                        float _3943 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
                        float _2728 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
                        float _2729 = dot(vec3(_426, _429, _432), vec3(_2721 * _2715, _2721 * _2716, _2721 * _2717));
                        float _3954 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
                        float _2732 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
                        float _2736 = ((_2732 * _2732) * (_2714 + (-1.0))) + 1.0;
                        float _2737 = _2672 * _2713;
                        float _2738 = _2737 * _2737;
                        float _2741 = ((1.0 - _2738) * _2662) + _2738;
                        float _3965 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
                        float _2742 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
                        float _2743 = 1.0 - _2713;
                        float _2753 = (0.5 / (((_2742 * ((_2728 * _2743) + _2713)) + 9.9999999392252902907785028219223e-09) + (((_2742 * _2743) + _2713) * _2728))) * _2742;
                        float _3976 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                        float _2764 = (((_2714 * 3.1415927410125732421875) * (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) / ((_2736 * _2736) * ((_2679 * 2.1991131305694580078125) + 3.141590118408203125))) * _2668;
                        _2521 = (_2683 * _2631.x) + _2589;
                        _2522 = (_2683 * _2631.y) + _2590;
                        _2523 = (_2683 * _2631.z) + _2591;
                        _2518 = (_2764 * _2648.x) + _2586;
                        _2519 = (_2764 * _2648.y) + _2587;
                        _2520 = (_2764 * _2648.z) + _2588;
                        if (_2593 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2586 = _2518;
                            _2587 = _2519;
                            _2588 = _2520;
                            _2589 = _2521;
                            _2590 = _2522;
                            _2591 = _2523;
                            _2592 = _2593;
                        }
                    }
                    frontier_phi_61_pred = _2518;
                    frontier_phi_61_pred_1 = _2523;
                    frontier_phi_61_pred_2 = _2522;
                    frontier_phi_61_pred_3 = _2521;
                    frontier_phi_61_pred_4 = _2520;
                    frontier_phi_61_pred_5 = _2519;
                }
                _2309 = frontier_phi_61_pred;
                _2319 = frontier_phi_61_pred_1;
                _2317 = frontier_phi_61_pred_2;
                _2315 = frontier_phi_61_pred_3;
                _2313 = frontier_phi_61_pred_4;
                _2311 = frontier_phi_61_pred_5;
                uint _2469 = _2468 + 1u;
                if (_2469 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2462 = _2309;
                    _2463 = _2311;
                    _2464 = _2313;
                    _2465 = _2315;
                    _2466 = _2317;
                    _2467 = _2319;
                    _2468 = _2469;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2308 = _2309;
            _2310 = _2311;
            _2312 = _2313;
            _2314 = _2315;
            _2316 = _2317;
            _2318 = _2319;
        }
        uvec4 _2322 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2323 = _2322.z;
        uint _2325 = (_2323 >> 8u) & 15u;
        float _2430;
        float _2432;
        float _2434;
        float _2436;
        float _2438;
        float _2440;
        if (((4294967295u << _2325) & _2172) == 0u)
        {
            _2430 = _2308;
            _2432 = _2310;
            _2434 = _2312;
            _2436 = _2314;
            _2438 = _2316;
            _2440 = _2318;
        }
        else
        {
            float _2455 = inversesqrt(dot(vec3(_2126, _2127, _2128), vec3(_2126, _2127, _2128)));
            float _2456 = _2455 * _2126;
            float _2457 = _2455 * _2127;
            float _2458 = _2455 * _2128;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2325 < ((_2323 >> 12u) & 15u))
            {
                float _2431;
                float _2433;
                float _2435;
                float _2437;
                float _2439;
                float _2441;
                float _2569 = _2308;
                float _2570 = _2310;
                float _2571 = _2312;
                float _2572 = _2314;
                float _2573 = _2316;
                float _2574 = _2318;
                uint _2575 = _2325;
                uint _2584;
                bool _2585;
                for (;;)
                {
                    _2584 = texelFetch(g_lightClassification, int((((_2166 << 5u) + (_2152 << 9u)) + (_2575 << 2u)) >> 2u)).x;
                    _2585 = _2584 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2585)
                    {
                        frontier_phi_67_pred = _2572;
                        frontier_phi_67_pred_1 = _2573;
                        frontier_phi_67_pred_2 = _2574;
                        frontier_phi_67_pred_3 = _2571;
                        frontier_phi_67_pred_4 = _2570;
                        frontier_phi_67_pred_5 = _2569;
                    }
                    else
                    {
                        float _2769;
                        float _2770;
                        float _2771;
                        float _2772;
                        float _2773;
                        float _2774;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _2782 = _2569;
                        float _2783 = _2570;
                        float _2784 = _2571;
                        float _2785 = _2572;
                        float _2786 = _2573;
                        float _2787 = _2574;
                        uint _2788 = _2584;
                        uint _2789;
                        vec4 _2814;
                        float _2815;
                        vec4 _2830;
                        vec3 _2842;
                        vec4 _2858;
                        vec4 _2874;
                        float _2921;
                        bool _2922;
                        for (;;)
                        {
                            uint _2799 = ((_2575 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2788));
                            _2789 = (_2788 + 4294967295u) & _2788;
                            uint _2801 = _2799 * 40u;
                            _2814 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 3u)).x));
                            _2815 = _2814.w;
                            uint _2817 = (_2799 * 40u) + 4u;
                            _2830 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 3u)).x));
                            uint _2832 = (_2799 * 40u) + 8u;
                            _2842 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 2u)).x));
                            uint _2845 = (_2799 * 40u) + 16u;
                            _2858 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2845)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 3u)).x));
                            uint _2861 = (_2799 * 40u) + 20u;
                            _2874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 3u)).x));
                            uint _2877 = (_2799 * 40u) + 24u;
                            vec4 _2890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 3u)).x));
                            uint _2896 = (_2799 * 40u) + 28u;
                            vec4 _2909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 3u)).x));
                            _2921 = fma(_2128, _2909.z, fma(_2127, _2909.y, _2909.x * _2126)) + _2909.w;
                            _2922 = !((fma(_2128, _2890.z, fma(_2127, _2890.y, _2890.x * _2126)) + _2890.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2922)
                            {
                                float _2949 = _2814.x - _2126;
                                float _2950 = _2814.y - _2127;
                                float _2951 = _2814.z - _2128;
                                float _2952 = dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951));
                                float _2955 = inversesqrt(_2952);
                                float _2956 = _2955 * _2949;
                                float _2957 = _2955 * _2950;
                                float _2958 = _2955 * _2951;
                                float _2962 = 1.0 - (_2952 / (_2815 * _2815));
                                float _3987 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                                float _2963 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
                                float _2967 = sqrt(_2952) * _2830.w;
                                float _2969 = 1.39999997615814208984375 / (_2967 + 1.39999997615814208984375);
                                float _2970 = _2969 * _2969;
                                float _2973 = ((1.0 - _2970) * dot(vec3(_2956, _2957, _2958), vec3(_426, _429, _432))) + _2970;
                                float _2976 = _2967 * _2967;
                                float _2980 = (fma(_2128, _2858.z, fma(_2127, _2858.y, _2858.x * _2126)) + _2858.w) / _2921;
                                float _2981 = (fma(_2128, _2874.z, fma(_2127, _2874.y, _2874.x * _2126)) + _2874.w) / _2921;
                                float _2985 = 1.0 - dot(vec2(_2980, _2981), vec2(_2980, _2981));
                                float _4003 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                                float _2986 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
                                float _2987 = _2986 * (((isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0))) * _2963) / ((_2976 * 0.699999988079071044921875) + 1.0));
                                float _2999 = exp2(log2(1.0 / ((_2976 * 3.5) + 5.0)) * 0.25);
                                float _3000 = 1.0 - _486;
                                float _3007 = sqrt(1.0 - ((1.0 - (_3000 * _3000)) * (1.0 - (_2999 * _2999))));
                                float _3008 = _3007 * _3007;
                                float _3009 = _3008 * _3008;
                                float _3010 = _2956 - _2456;
                                float _3011 = _2957 - _2457;
                                float _3012 = _2958 - _2458;
                                float _3016 = inversesqrt(dot(vec3(_3010, _3011, _3012), vec3(_3010, _3011, _3012)));
                                float _3020 = dot(vec3(_426, _429, _432), vec3((-0.0) - _2456, (-0.0) - _2457, (-0.0) - _2458));
                                float _4014 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                                float _3023 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
                                float _3024 = dot(vec3(_426, _429, _432), vec3(_3016 * _3010, _3016 * _3011, _3016 * _3012));
                                float _4025 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                                float _3027 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
                                float _3031 = ((_3027 * _3027) * (_3009 + (-1.0))) + 1.0;
                                float _3032 = _2969 * _3008;
                                float _3033 = _3032 * _3032;
                                float _3039 = ((1.0 - _3033) * dot(vec3(_426, _429, _432), vec3(_2956, _2957, _2958))) + _3033;
                                float _4036 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                                float _3040 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
                                float _3041 = 1.0 - _3008;
                                float _3051 = (0.5 / (((_3040 * ((_3023 * _3041) + _3008)) + 9.9999999392252902907785028219223e-09) + (((_3040 * _3041) + _3008) * _3023))) * _3040;
                                float _4047 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                                float _3061 = (_2986 * _2963) * (((_3009 * 3.1415927410125732421875) * (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) / ((_3031 * _3031) * ((_2976 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3061 * _2842.x;
                                frontier_phi_73_pred_1 = _3061 * _2842.y;
                                frontier_phi_73_pred_2 = _2987 * _2830.z;
                                frontier_phi_73_pred_3 = _2987 * _2830.y;
                                frontier_phi_73_pred_4 = _2987 * _2830.x;
                                frontier_phi_73_pred_5 = _3061 * _2842.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3065 = frontier_phi_73_pred;
                            _3066 = frontier_phi_73_pred_1;
                            _3070 = frontier_phi_73_pred_2;
                            _3069 = frontier_phi_73_pred_3;
                            _3068 = frontier_phi_73_pred_4;
                            _3067 = frontier_phi_73_pred_5;
                            _2772 = _3068 + _2785;
                            _2773 = _3069 + _2786;
                            _2774 = _3070 + _2787;
                            _2769 = _3065 + _2782;
                            _2770 = _3066 + _2783;
                            _2771 = _3067 + _2784;
                            if (_2789 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2782 = _2769;
                                _2783 = _2770;
                                _2784 = _2771;
                                _2785 = _2772;
                                _2786 = _2773;
                                _2787 = _2774;
                                _2788 = _2789;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2772;
                        frontier_phi_67_pred_1 = _2773;
                        frontier_phi_67_pred_2 = _2774;
                        frontier_phi_67_pred_3 = _2771;
                        frontier_phi_67_pred_4 = _2770;
                        frontier_phi_67_pred_5 = _2769;
                    }
                    _2437 = frontier_phi_67_pred;
                    _2439 = frontier_phi_67_pred_1;
                    _2441 = frontier_phi_67_pred_2;
                    _2435 = frontier_phi_67_pred_3;
                    _2433 = frontier_phi_67_pred_4;
                    _2431 = frontier_phi_67_pred_5;
                    uint _2576 = _2575 + 1u;
                    if (_2576 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2569 = _2431;
                        _2570 = _2433;
                        _2571 = _2435;
                        _2572 = _2437;
                        _2573 = _2439;
                        _2574 = _2441;
                        _2575 = _2576;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2439;
                frontier_phi_55_56_ladder_1 = _2441;
                frontier_phi_55_56_ladder_2 = _2437;
                frontier_phi_55_56_ladder_3 = _2435;
                frontier_phi_55_56_ladder_4 = _2433;
                frontier_phi_55_56_ladder_5 = _2431;
            }
            else
            {
                frontier_phi_55_56_ladder = _2316;
                frontier_phi_55_56_ladder_1 = _2318;
                frontier_phi_55_56_ladder_2 = _2314;
                frontier_phi_55_56_ladder_3 = _2312;
                frontier_phi_55_56_ladder_4 = _2310;
                frontier_phi_55_56_ladder_5 = _2308;
            }
            _2430 = frontier_phi_55_56_ladder_5;
            _2432 = frontier_phi_55_56_ladder_4;
            _2434 = frontier_phi_55_56_ladder_3;
            _2436 = frontier_phi_55_56_ladder_2;
            _2438 = frontier_phi_55_56_ladder;
            _2440 = frontier_phi_55_56_ladder_1;
        }
        float _2445 = isnan(1.0) ? _470 : (isnan(_470) ? 1.0 : min(_470, 1.0));
        _2185 = (_2445 * _2436) + _1640;
        _2187 = (_2445 * _2438) + _1642;
        _2189 = (_2445 * _2440) + _1644;
        _2191 = ((_2430 * 0.039999999105930328369140625) * _2445) + _1970;
        _2193 = ((_2432 * 0.039999999105930328369140625) * _2445) + _1972;
        _2195 = ((_2434 * 0.039999999105930328369140625) * _2445) + _1974;
    }
    else
    {
        _2185 = _1640;
        _2187 = _1642;
        _2189 = _1644;
        _2191 = _1970;
        _2193 = _1972;
        _2195 = _1974;
    }
    uint _2201 = _446 + uint(cbMatDynParam._m0[0u].w);
    float _2209 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _298.x) * cbInstanceData._m0[_2201].x;
    float _2212 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _298.y) * cbInstanceData._m0[_2201].y;
    float _2215 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _298.z) * cbInstanceData._m0[_2201].z;
    float _4063 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _4074 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _4085 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _2232 = (((isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_2185 + ((isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0))) * _470))) + ((_2191 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _1277)) * cbPerFrame._m0[3u].x)) + _2209;
    float _2234 = (_2212 + ((_2193 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _1277)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_2187 + ((isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0))) * _470)));
    float _2236 = (_2215 + ((_2195 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _1277)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_2189 + ((isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))) * _470)));
    float _4111 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2249 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    uint _2250 = _445 + 6u;
    float _2258 = _404 / cbSceneParam._m0[86u].x;
    float _2259 = _405 / cbSceneParam._m0[86u].y;
    vec4 _2273 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2258, _2259, (log2((isnan(cbSceneParam._m0[77u].w) ? _338 : (isnan(_338) ? cbSceneParam._m0[77u].w : min(_338, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2275 = _2273.x;
    float _2276 = _2273.y;
    float _2277 = _2273.z;
    float _2278 = _2273.w;
    float _2371;
    float _2373;
    float _2375;
    float _2377;
    if (_338 > cbSceneParam._m0[78u].w)
    {
        float _2333 = isnan(_338) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _338 : min(cbSceneParam._m0[80u].w, _338));
        float _2334 = _2333 / _338;
        float _2345 = _2334 * _389;
        float _2346 = _390 * _2334;
        float _2347 = (-0.0) - _2346;
        float _2349 = _2334 * _391;
        float _2351 = (cbSceneParam._m0[77u].w * _2347) / _2333;
        float _2352 = _2351 + cbSceneParam._m0[79u].w;
        float _2353 = cbSceneParam._m0[79u].w - _2346;
        float _2359 = sqrt(((_2345 * _2345) + (_2346 * _2346)) + (_2349 * _2349));
        float _2362 = (1.0 - (cbSceneParam._m0[77u].w / _2333)) * _2359;
        float _2367 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2369 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2531;
        if (abs((_2347 - _2351) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2531 = ((((_2352 > 0.0) ? exp2(_2367 * _2352) : (2.0 - exp2(_2369 * _2352))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2362;
        }
        else
        {
            float _2491 = 1.0 / cbSceneParam._m0[80u].x;
            float _2492 = isnan(_2353) ? _2352 : (isnan(_2352) ? _2353 : max(_2352, _2353));
            float _2493 = isnan(_2353) ? _2352 : (isnan(_2352) ? _2353 : min(_2352, _2353));
            float _2502 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : min(_2492, 0.0));
            float _2503 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : min(_2493, 0.0));
            _2531 = ((abs(_2359 / _2347) * cbSceneParam._m0[80u].y) * ((((_2502 - _2503) * 2.0) - ((exp2(_2367 * (isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0)))) - exp2(_2367 * (isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0))))) * _2491)) - ((exp2(_2369 * _2502) - exp2(_2369 * _2503)) * _2491))) + (_2362 * cbSceneParam._m0[80u].z);
        }
        vec4 _2533 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2258, _2259, 1.0), 0.0);
        float _2542 = exp2((_2531 * (-1.44269502162933349609375)) * (1.0 - _2533.w));
        float _2543 = log2(_2542);
        float _2559 = log2(_2278);
        _2371 = (exp2(_2559 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2543 * cbSceneParam._m0[78u].x)) * _2533.x) / cbSceneParam._m0[78u].x)) + _2275;
        _2373 = (exp2(_2559 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2543 * cbSceneParam._m0[78u].y)) * _2533.y) / cbSceneParam._m0[78u].y)) + _2276;
        _2375 = (exp2(_2559 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2543 * cbSceneParam._m0[78u].z)) * _2533.z) / cbSceneParam._m0[78u].z)) + _2277;
        _2377 = _2542 * _2278;
    }
    else
    {
        _2371 = _2275;
        _2373 = _2276;
        _2375 = _2277;
        _2377 = _2278;
    }
    float _2389 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2390 = _2389 == 3.0;
    float _2391 = log2(_2377);
    float _2395 = exp2(_2391 * cbSceneParam._m0[78u].x);
    float _2396 = exp2(_2391 * cbSceneParam._m0[78u].y);
    float _2397 = exp2(_2391 * cbSceneParam._m0[78u].z);
    float _2398 = _2395 * (isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0)));
    float _2399 = _2396 * (isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0)));
    float _2400 = _2397 * (isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0)));
    float _2409 = (_2389 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2409 * (_2390 ? _2398 : (_2398 + (cbSceneParam._m0[72u].w * _2371)));
    SV_Target.y = _2409 * (_2390 ? _2399 : (_2399 + (cbSceneParam._m0[72u].w * _2373)));
    SV_Target.z = _2409 * (_2390 ? _2400 : (_2400 + (cbSceneParam._m0[72u].w * _2375)));
    SV_Target.w = cbInstanceData._m0[_2250].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2209) * _2249) * _2395) * _2409;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2212) * _2249) * _2396) * _2409;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2215) * _2249) * _2397) * _2409;
    SV_Target_1.w = cbInstanceData._m0[_2250].w;
}


