#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _846;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _181 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _182 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _183 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_181, _182, _183), vec3(_181, _182, _183)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _224.x * cbMtdParam._m0[9u].x;
    float _231 = _224.y * cbMtdParam._m0[9u].y;
    float _232 = _224.z * cbMtdParam._m0[9u].z;
    vec4 _244 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _248 = _244.z;
    float _252 = (_244.x * 2.0) + (-1.0);
    float _254 = (_244.y * 2.0) + (-1.0);
    float _255 = dot(vec2(_252, _254), vec2(_252, _254));
    float _3206 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _261 = sqrt(1.0 - (isnan(1.0) ? _3206 : (isnan(_3206) ? 1.0 : min(_3206, 1.0))));
    vec4 _283 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _297 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3217 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _298 = isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0));
    float _306 = (((_298 * _298) * (3.0 - (_298 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _309 = fma(_261, _195 * NORMAL.x, fma(_254, _202 * TANGENT.x, (_188 * _181) * _252));
    float _312 = fma(_261, _195 * NORMAL.y, fma(_254, _202 * TANGENT.y, (_188 * _182) * _252));
    float _315 = fma(_261, _195 * NORMAL.z, fma(_254, _202 * TANGENT.z, (_188 * _183) * _252));
    float _319 = inversesqrt(dot(vec3(_309, _312, _315), vec3(_309, _312, _315)));
    float _320 = _319 * _309;
    float _321 = _319 * _312;
    float _322 = _319 * _315;
    float _3228 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _323 = isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0));
    float _3239 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3250 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3261 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _342 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _383 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _393 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _383);
    float _394 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _383);
    float _395 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _383);
    float _399 = inversesqrt(dot(vec3(_393, _394, _395), vec3(_393, _394, _395)));
    float _400 = _393 * _399;
    float _401 = _394 * _399;
    float _402 = _395 * _399;
    float _408 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _409 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _430 = fma(_322, cbSceneParam._m0[5u].z, fma(_321, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _320));
    float _433 = fma(_322, cbSceneParam._m0[6u].z, fma(_321, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _320));
    float _436 = fma(_322, cbSceneParam._m0[7u].z, fma(_321, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _320));
    uint _449 = uint(roundEven(NORMAL.w)) * 13u;
    uint _451 = _449 + 9u;
    uint _452 = _451 + uint(cbMatDynParam._m0[0u].w);
    float _458 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0)))) * cbInstanceData._m0[_452].x;
    float _459 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0)))) * cbInstanceData._m0[_452].y;
    float _460 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0)))) * cbInstanceData._m0[_452].z;
    float _3272 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0));
    float _3283 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
    float _3294 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
    vec4 _472 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _408, cbSceneParam._m0[86u].y * _409));
    float _475 = _472.x * TEXCOORD.z;
    float _476 = dot(vec3(_320, _321, _322), vec3(_400, _401, _402));
    float _479 = _476 * 2.0;
    float _483 = (_479 * _320) - _400;
    float _484 = (_479 * _321) - _401;
    float _485 = (_479 * _322) - _402;
    float _489 = abs(dot(vec3(_400, _401, _402), vec3(_320, _321, _322)));
    float _3305 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _491 = sqrt(_323);
    float _503 = exp2((_491 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_491 * 3.0));
    float _535 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _845;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _570 = fma(_543, cbModelParam._m0[26u].z, fma(_539, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _535));
        float _574 = fma(_543, cbModelParam._m0[27u].z, fma(_539, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _535));
        float _578 = fma(_543, cbModelParam._m0[28u].z, fma(_539, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _535));
        float _603 = _535 + _320;
        float _604 = _539 + _321;
        float _605 = _543 + _322;
        float _615 = fma(_605, cbModelParam._m0[26u].z, fma(_604, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _603)) - _570;
        float _616 = fma(_605, cbModelParam._m0[27u].z, fma(_604, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _603)) - _574;
        float _617 = fma(_605, cbModelParam._m0[28u].z, fma(_604, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _603)) - _578;
        float _621 = inversesqrt(dot(vec3(_615, _616, _617), vec3(_615, _616, _617)));
        float _634 = ((_621 * _615) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_570 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _635 = ((_621 * _616) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_574 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _636 = ((_621 * _617) / cbModelParam._m0[34u].z) + ((((((_578 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _639 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _646 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _653 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        float _673 = exp2((_639.w + (-0.5)) * 20.0) * 2.0;
        float _674 = _673 * (_639.x + (-0.5));
        float _675 = _673 * (_639.y + (-0.5));
        float _676 = _673 * (_639.z + (-0.5));
        float _683 = exp2((_646.w + (-0.5)) * 20.0) * 2.0;
        float _684 = _683 * (_646.x + (-0.5));
        float _685 = _683 * (_646.y + (-0.5));
        float _686 = _683 * (_646.z + (-0.5));
        float _693 = exp2((_653.w + (-0.5)) * 20.0) * 2.0;
        float _694 = _693 * (_653.x + (-0.5));
        float _695 = _693 * (_653.y + (-0.5));
        float _696 = _693 * (_653.z + (-0.5));
        float _703 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _704 = _703 * (_660.x + (-0.5));
        float _705 = _703 * (_660.y + (-0.5));
        float _706 = _703 * (_660.z + (-0.5));
        float _707 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _708 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _709 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _710 = _674 * 0.5;
        float _711 = _684 * 0.5;
        float _712 = _694 * 0.5;
        float _713 = dot(vec3(_710, _711, _712), vec3(_710, _711, _712));
        float _718 = (_713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_713);
        float _727 = (dot(vec3(_320, _321, _322), vec3(_718 * _710, _718 * _711, _718 * _712)) + 1.0) * 0.5;
        float _3331 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _737 = sqrt(((_711 * _711) + (_710 * _710)) + (_712 * _712)) / (_707 + 9.9999997473787516355514526367188e-06);
        float _3342 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _738 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
        float _739 = _738 * 2.0;
        float _743 = (1.0 - _738) / (_738 + 1.0);
        float _3353 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _744 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
        float _753 = ((((1.0 - _744) * (_739 + 2.0)) * exp2(log2(isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0))) * (_739 + 1.0))) + _744) * _707;
        float _754 = _675 * 0.5;
        float _755 = _685 * 0.5;
        float _756 = _695 * 0.5;
        float _757 = dot(vec3(_754, _755, _756), vec3(_754, _755, _756));
        float _762 = (_757 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_757);
        float _770 = (dot(vec3(_320, _321, _322), vec3(_762 * _754, _762 * _755, _762 * _756)) + 1.0) * 0.5;
        float _3364 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _779 = sqrt(((_755 * _755) + (_754 * _754)) + (_756 * _756)) / (_708 + 9.9999997473787516355514526367188e-06);
        float _3375 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
        float _781 = _780 * 2.0;
        float _785 = (1.0 - _780) / (_780 + 1.0);
        float _3386 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _795 = ((((1.0 - _786) * (_781 + 2.0)) * exp2(log2(isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0))) * (_781 + 1.0))) + _786) * _708;
        float _796 = _676 * 0.5;
        float _797 = _686 * 0.5;
        float _798 = _696 * 0.5;
        float _799 = dot(vec3(_796, _797, _798), vec3(_796, _797, _798));
        float _804 = (_799 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_799);
        float _812 = (dot(vec3(_320, _321, _322), vec3(_804 * _796, _804 * _797, _804 * _798)) + 1.0) * 0.5;
        float _3397 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _821 = sqrt(((_797 * _797) + (_796 * _796)) + (_798 * _798)) / (_709 + 9.9999997473787516355514526367188e-06);
        float _3408 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
        float _823 = _822 * 2.0;
        float _827 = (1.0 - _822) / (_822 + 1.0);
        float _3419 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _837 = ((((1.0 - _828) * (_823 + 2.0)) * exp2(log2(isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0))) * (_823 + 1.0))) + _828) * _709;
        _845 = _676;
        _847 = _675;
        _848 = _674;
        _849 = _686;
        _850 = _685;
        _851 = _684;
        _852 = _696;
        _853 = _695;
        _854 = _694;
        _855 = _709;
        _856 = _708;
        _857 = _707;
        _858 = cbModelParam._m0[36u].z * (isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0)));
        _859 = cbModelParam._m0[36u].z * (isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0)));
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0)));
    }
    else
    {
        _845 = _846;
        _847 = _846;
        _848 = _846;
        _849 = _846;
        _850 = _846;
        _851 = _846;
        _852 = _846;
        _853 = _846;
        _854 = _846;
        _855 = _846;
        _856 = _846;
        _857 = _846;
        _858 = 0.0;
        _859 = 0.0;
        _860 = 0.0;
    }
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _886 = fma(_543, cbModelParam._m0[30u].z, fma(_539, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _535));
        float _890 = fma(_543, cbModelParam._m0[31u].z, fma(_539, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _535));
        float _894 = fma(_543, cbModelParam._m0[32u].z, fma(_539, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _535));
        float _917 = _535 + _320;
        float _918 = _539 + _321;
        float _919 = _543 + _322;
        float _929 = fma(_919, cbModelParam._m0[30u].z, fma(_918, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _917)) - _886;
        float _930 = fma(_919, cbModelParam._m0[31u].z, fma(_918, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _917)) - _890;
        float _931 = fma(_919, cbModelParam._m0[32u].z, fma(_918, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _917)) - _894;
        float _935 = inversesqrt(dot(vec3(_929, _930, _931), vec3(_929, _930, _931)));
        float _948 = ((_935 * _929) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_886 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_935 * _930) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_890 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _950 = ((_935 * _931) / cbModelParam._m0[35u].z) + ((((((_894 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        float _985 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_952.x + (-0.5));
        float _987 = _985 * (_952.y + (-0.5));
        float _988 = _985 * (_952.z + (-0.5));
        float _995 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_959.x + (-0.5));
        float _997 = _995 * (_959.y + (-0.5));
        float _998 = _995 * (_959.z + (-0.5));
        float _1005 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_966.x + (-0.5));
        float _1007 = _1005 * (_966.y + (-0.5));
        float _1008 = _1005 * (_966.z + (-0.5));
        float _1015 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_973.x + (-0.5));
        float _1017 = _1015 * (_973.y + (-0.5));
        float _1018 = _1015 * (_973.z + (-0.5));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = _986 * 0.5;
        float _1023 = _996 * 0.5;
        float _1024 = _1006 * 0.5;
        float _1025 = dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024));
        float _1030 = (_1025 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1025);
        float _1038 = (dot(vec3(_320, _321, _322), vec3(_1030 * _1022, _1030 * _1023, _1030 * _1024)) + 1.0) * 0.5;
        float _3460 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1047 = sqrt(((_1023 * _1023) + (_1022 * _1022)) + (_1024 * _1024)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3471 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _3482 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * (_1049 + 1.0))) + _1054) * _1019;
        float _1064 = _987 * 0.5;
        float _1065 = _997 * 0.5;
        float _1066 = _1007 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_320, _321, _322), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3493 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3504 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3515 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * (_1091 + 1.0))) + _1096) * _1020;
        float _1106 = _988 * 0.5;
        float _1107 = _998 * 0.5;
        float _1108 = _1008 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_320, _321, _322), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _3526 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3537 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3548 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * (_1133 + 1.0))) + _1138) * _1021;
        _1155 = _988;
        _1156 = _987;
        _1157 = _986;
        _1158 = _998;
        _1159 = _997;
        _1160 = _996;
        _1161 = _1008;
        _1162 = _1007;
        _1163 = _1006;
        _1164 = _1021;
        _1165 = _1020;
        _1166 = _1019;
        _1167 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
        _1168 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
    }
    else
    {
        _1155 = _846;
        _1156 = _846;
        _1157 = _846;
        _1158 = _846;
        _1159 = _846;
        _1160 = _846;
        _1161 = _846;
        _1162 = _846;
        _1163 = _846;
        _1164 = _846;
        _1165 = _846;
        _1166 = _846;
        _1167 = 0.0;
        _1168 = 0.0;
        _1169 = 0.0;
    }
    float _1179 = (cbModelParam._m0[1u].x * (_1167 - _858)) + _858;
    float _1180 = (cbModelParam._m0[1u].x * (_1168 - _859)) + _859;
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _860)) + _860;
    float _1202 = fma(_1181, cbSceneParam._m0[89u].z, fma(_1180, cbSceneParam._m0[89u].y, _1179 * cbSceneParam._m0[89u].x));
    float _1205 = fma(_1181, cbSceneParam._m0[90u].z, fma(_1180, cbSceneParam._m0[90u].y, _1179 * cbSceneParam._m0[90u].x));
    float _1208 = fma(_1181, cbSceneParam._m0[91u].z, fma(_1180, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1179));
    float _1223 = _483 * 0.5;
    float _1224 = _484 * 0.5;
    float _1225 = _485 * 0.5;
    float _1226 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1229 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_1156, _1159, _1162, _1165));
    float _1232 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_1155, _1158, _1161, _1164));
    float _1266;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1239 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_845, _849, _852, _855));
        float _1243 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_847, _850, _853, _856));
        float _1247 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_848, _851, _854, _857));
        float _1254 = dot(vec4(cbModelParam._m0[39u]), vec4(_1223, _1224, _1225, 1.0));
        _1266 = dot(vec3(isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1254) ? 0.0 : (isnan(0.0) ? _1254 : max(0.0, _1254))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1266 = 1.0;
    }
    float _1277;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1268 = dot(vec4(cbModelParam._m0[40u]), vec4(_1223, _1224, _1225, 1.0));
        _1277 = dot(vec3(isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)), isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)), isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1268) ? 0.0 : (isnan(0.0) ? _1268 : max(0.0, _1268))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1277 = 1.0;
    }
    float _1281 = (_1277 * cbModelParam._m0[1u].x) + (_1266 * (1.0 - cbModelParam._m0[1u].x));
    float _1291 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _323);
    float _1292 = isnan(_1291) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1291 : min(cbModelParam._m0[25u].z, _1291));
    float _1373;
    float _1375;
    float _1377;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1340 = fma(_543, cbModelParam._m0[13u].z, fma(_539, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _535)) + cbModelParam._m0[13u].w;
        float _1344 = fma(_543, cbModelParam._m0[14u].z, fma(_539, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _535)) + cbModelParam._m0[14u].w;
        float _1348 = fma(_543, cbModelParam._m0[15u].z, fma(_539, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _535)) + cbModelParam._m0[15u].w;
        float _1351 = fma(_485, cbModelParam._m0[13u].z, fma(_484, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _483));
        float _1354 = fma(_485, cbModelParam._m0[14u].z, fma(_484, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _483));
        float _1357 = fma(_485, cbModelParam._m0[15u].z, fma(_484, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _483));
        float _1385;
        if (_1351 > 0.0)
        {
            _1385 = abs((1.0 - _1340) / _1351);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1351 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1340 + 1.0) / _1351);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1385 = frontier_phi_14_12_ladder;
        }
        float _1589;
        if (_1354 > 0.0)
        {
            _1589 = abs((1.0 - _1344) / _1354);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1344 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1589 = frontier_phi_23_19_ladder;
        }
        float _1832;
        if (_1357 > 0.0)
        {
            _1832 = abs((1.0 - _1348) / _1357);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1348 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1832 = frontier_phi_35_30_ladder;
        }
        float _1834 = isnan(_1589) ? _1385 : (isnan(_1385) ? _1589 : min(_1385, _1589));
        float _1835 = isnan(_1832) ? _1834 : (isnan(_1834) ? _1832 : min(_1834, _1832));
        float _1839 = (_1835 * _1351) + _1340;
        float _1840 = (_1835 * _1354) + _1344;
        float _1841 = (_1835 * _1357) + _1348;
        float _1842 = _1835 * 9.9999997473787516355514526367188e-05;
        float _1844 = (-1.0) - _1842;
        float _1846 = _1842 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1841 > _1846) || ((_1841 < _1844) || ((_1840 > _1846) || ((_1840 < _1844) || ((_1839 < _1844) || (_1839 > _1846))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1965 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1841, cbModelParam._m0[9u].z, fma(_1840, cbModelParam._m0[9u].y, _1839 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1841, cbModelParam._m0[10u].z, fma(_1840, cbModelParam._m0[10u].y, _1839 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1841, cbModelParam._m0[11u].z, fma(_1840, cbModelParam._m0[11u].y, _1839 * cbModelParam._m0[11u].x))), _1292);
            frontier_phi_13_35_ladder = _1965.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1965.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1965.x * cbModelParam._m0[1u].y;
        }
        _1373 = frontier_phi_13_35_ladder_2;
        _1375 = frontier_phi_13_35_ladder_1;
        _1377 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1361 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_483, _484, _485), _1292);
        _1373 = _1361.x * cbModelParam._m0[1u].y;
        _1375 = _1361.y * cbModelParam._m0[1u].y;
        _1377 = _1361.z * cbModelParam._m0[1u].y;
    }
    float _1381 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _323);
    float _1382 = isnan(_1381) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1381 : min(cbModelParam._m0[25u].w, _1381));
    float _1474;
    float _1476;
    float _1478;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1438 = fma(_543, cbModelParam._m0[21u].z, fma(_539, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _535)) + cbModelParam._m0[21u].w;
        float _1442 = fma(_543, cbModelParam._m0[22u].z, fma(_539, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _535)) + cbModelParam._m0[22u].w;
        float _1446 = fma(_543, cbModelParam._m0[23u].z, fma(_539, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _535)) + cbModelParam._m0[23u].w;
        float _1449 = fma(_485, cbModelParam._m0[21u].z, fma(_484, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _483));
        float _1452 = fma(_485, cbModelParam._m0[22u].z, fma(_484, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _483));
        float _1455 = fma(_485, cbModelParam._m0[23u].z, fma(_484, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _483));
        float _1594;
        if (_1449 > 0.0)
        {
            _1594 = abs((1.0 - _1438) / _1449);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1438 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1594 = frontier_phi_25_21_ladder;
        }
        float _1859;
        if (_1452 > 0.0)
        {
            _1859 = abs((1.0 - _1442) / _1452);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1452 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1442 + 1.0) / _1452);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1859 = frontier_phi_37_32_ladder;
        }
        float _2064;
        if (_1455 > 0.0)
        {
            _2064 = abs((1.0 - _1446) / _1455);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1446 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2064 = frontier_phi_46_43_ladder;
        }
        float _2066 = isnan(_1859) ? _1594 : (isnan(_1594) ? _1859 : min(_1594, _1859));
        float _2067 = isnan(_2064) ? _2066 : (isnan(_2066) ? _2064 : min(_2066, _2064));
        float _2071 = (_2067 * _1449) + _1438;
        float _2072 = (_2067 * _1452) + _1442;
        float _2073 = (_2067 * _1455) + _1446;
        float _2074 = _2067 * 9.9999997473787516355514526367188e-05;
        float _2075 = (-1.0) - _2074;
        float _2077 = _2074 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2073 > _2077) || ((_2073 < _2075) || ((_2072 > _2077) || ((_2072 < _2075) || ((_2071 < _2075) || (_2071 > _2077))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2310 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2073, cbModelParam._m0[17u].z, fma(_2072, cbModelParam._m0[17u].y, _2071 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2073, cbModelParam._m0[18u].z, fma(_2072, cbModelParam._m0[18u].y, _2071 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2073, cbModelParam._m0[19u].z, fma(_2072, cbModelParam._m0[19u].y, _2071 * cbModelParam._m0[19u].x))), _1382);
            frontier_phi_22_46_ladder = _2310.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2310.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2310.x * cbModelParam._m0[1u].z;
        }
        _1474 = frontier_phi_22_46_ladder_2;
        _1476 = frontier_phi_22_46_ladder_1;
        _1478 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1458 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_483, _484, _485), _1382);
        _1474 = _1458.x * cbModelParam._m0[1u].z;
        _1476 = _1458.y * cbModelParam._m0[1u].z;
        _1478 = _1458.z * cbModelParam._m0[1u].z;
    }
    float _1490 = ((((1.0 - _503) * ((_491 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_503 * _491)) * _475;
    float _1491 = _1490 * ((cbModelParam._m0[1u].w * (_1474 - _1373)) + _1373);
    float _1492 = _1490 * ((cbModelParam._m0[1u].w * (_1476 - _1375)) + _1375);
    float _1493 = _1490 * ((cbModelParam._m0[1u].w * (_1478 - _1377)) + _1377);
    float _1496 = fma(_1493, cbSceneParam._m0[89u].z, fma(_1492, cbSceneParam._m0[89u].y, _1491 * cbSceneParam._m0[89u].x));
    float _1499 = fma(_1493, cbSceneParam._m0[90u].z, fma(_1492, cbSceneParam._m0[90u].y, _1491 * cbSceneParam._m0[90u].x));
    float _1502 = fma(_1493, cbSceneParam._m0[91u].z, fma(_1492, cbSceneParam._m0[91u].y, _1491 * cbSceneParam._m0[91u].x));
    uvec4 _1512 = floatBitsToUint(cbInstanceData._m0[_449 + 5u]);
    uint _1514 = _1512.x * 14u;
    uint _1515 = _1514 + 13u;
    float _1522 = _475 + (-1.0);
    float _1527 = (cbLight._m0[_1515].x * _1522) + 1.0;
    float _1528 = (cbLight._m0[_1515].y * _1522) + 1.0;
    float _1529 = (cbLight._m0[_1515].z * _1522) + 1.0;
    float _1530 = (cbLight._m0[_1515].w * _1522) + 1.0;
    uint _1531 = _1514 + 5u;
    float _1537 = isnan(1.0) ? _1528 : (isnan(_1528) ? 1.0 : min(_1528, 1.0));
    uint _1541 = _1514 + 4u;
    float _1548 = isnan(1.0) ? _1527 : (isnan(_1527) ? 1.0 : min(_1527, 1.0));
    uint _1552 = _1514 | 1u;
    float _1563 = dot(vec3(cbLight._m0[_1514].xyz), vec3(_320, _321, _322));
    float _1566 = dot(vec3(cbLight._m0[_1552].xyz), vec3(_320, _321, _322));
    float _3684 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
    float _3695 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
    float _1571 = (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * 0.3183098733425140380859375;
    float _1573 = (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * 0.3183098733425140380859375;
    float _1580 = ((cbLight._m0[_1531].x * _1537) * _1573) + ((cbLight._m0[_1541].x * _1548) * _1571);
    float _1581 = ((_1537 * cbLight._m0[_1531].y) * _1573) + ((_1548 * cbLight._m0[_1541].y) * _1571);
    float _1582 = ((_1537 * cbLight._m0[_1531].z) * _1573) + ((_1548 * cbLight._m0[_1541].z) * _1571);
    uvec4 _1586 = floatBitsToUint(cbLight._m0[_1514 + 12u]);
    bool _1588 = _1586.x == 0u;
    float _1599;
    float _1601;
    float _1603;
    if (_1588)
    {
        _1599 = _1580;
        _1601 = _1581;
        _1603 = _1582;
    }
    else
    {
        uint _1607 = _1514 + 6u;
        float _1623 = (dot(vec3(cbLight._m0[_1514 + 2u].xyz), vec3(_320, _321, _322)) * 0.5) + 0.5;
        float _1624 = _1623 * _1623;
        float _3706 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1626 = isnan(1.0) ? _1529 : (isnan(_1529) ? 1.0 : min(_1529, 1.0));
        _1599 = (((cbLight._m0[_1607].x * 0.3183098733425140380859375) * _1625) * _1626) + _1580;
        _1601 = (((cbLight._m0[_1607].y * 0.3183098733425140380859375) * _1625) * _1626) + _1581;
        _1603 = (((cbLight._m0[_1607].z * 0.3183098733425140380859375) * _1625) * _1626) + _1582;
    }
    bool _1606 = _1586.y == 0u;
    float _1644;
    float _1646;
    float _1648;
    if (_1606)
    {
        _1644 = _1599;
        _1646 = _1601;
        _1648 = _1603;
    }
    else
    {
        uint _1803 = _1514 + 7u;
        float _1819 = (dot(vec3(cbLight._m0[_1514 + 3u].xyz), vec3(_320, _321, _322)) * 0.5) + 0.5;
        float _1820 = _1819 * _1819;
        float _3722 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1821 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1822 = isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0));
        _1644 = (((cbLight._m0[_1803].x * 0.3183098733425140380859375) * _1821) * _1822) + _1599;
        _1646 = (((cbLight._m0[_1803].y * 0.3183098733425140380859375) * _1821) * _1822) + _1601;
        _1648 = (((cbLight._m0[_1803].z * 0.3183098733425140380859375) * _1821) * _1822) + _1603;
    }
    uint _1651 = _1514 + 8u;
    float _1664 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1514].w)) * _323) * 0.949999988079071044921875);
    float _1665 = _1664 * _1664;
    float _1666 = cbLight._m0[_1514].x + _400;
    float _1667 = cbLight._m0[_1514].y + _401;
    float _1668 = cbLight._m0[_1514].z + _402;
    float _1672 = inversesqrt(dot(vec3(_1666, _1667, _1668), vec3(_1666, _1667, _1668)));
    float _1673 = _1672 * _1666;
    float _1674 = _1672 * _1667;
    float _1675 = _1672 * _1668;
    float _1676 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1514].xyz));
    float _3738 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
    float _1679 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _3749 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _1680 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _1681 = dot(vec3(_320, _321, _322), vec3(_1673, _1674, _1675));
    float _3760 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
    float _1684 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _1685 = dot(vec3(cbLight._m0[_1514].xyz), vec3(_1673, _1674, _1675));
    float _3771 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
    float _1689 = _1665 * _1665;
    float _1693 = ((_1684 * _1684) * (_1689 + (-1.0))) + 1.0;
    float _1704 = (exp2(log2(1.0 - (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1705 = 1.0 - _1665;
    float _1716 = (0.5 / (((_1680 * ((_1679 * _1705) + _1665)) + 9.9999999392252902907785028219223e-09) + (((_1680 * _1705) + _1665) * _1679))) * _1679;
    float _3782 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
    float _1718 = (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * (_1689 / ((_1693 * _1693) * 3.141590118408203125));
    uint _1729 = _1514 + 9u;
    float _1740 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1552].w)) * _323) * 0.949999988079071044921875);
    float _1741 = _1740 * _1740;
    float _1742 = cbLight._m0[_1552].x + _400;
    float _1743 = cbLight._m0[_1552].y + _401;
    float _1744 = cbLight._m0[_1552].z + _402;
    float _1748 = inversesqrt(dot(vec3(_1742, _1743, _1744), vec3(_1742, _1743, _1744)));
    float _1749 = _1748 * _1742;
    float _1750 = _1748 * _1743;
    float _1751 = _1748 * _1744;
    float _1752 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1552].xyz));
    float _3793 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1755 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _1756 = dot(vec3(_320, _321, _322), vec3(_1749, _1750, _1751));
    float _3804 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1759 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _1760 = dot(vec3(cbLight._m0[_1552].xyz), vec3(_1749, _1750, _1751));
    float _3815 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1764 = _1741 * _1741;
    float _1768 = ((_1759 * _1759) * (_1764 + (-1.0))) + 1.0;
    float _1777 = (exp2(log2(1.0 - (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1778 = 1.0 - _1741;
    float _1788 = (0.5 / (((_1680 * ((_1755 * _1778) + _1741)) + 9.9999999392252902907785028219223e-09) + (((_1680 * _1778) + _1741) * _1755))) * _1755;
    float _3826 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1790 = (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1764 / ((_1768 * _1768) * 3.141590118408203125));
    float _1800 = (((_1777 * cbLight._m0[_1729].x) * _1790) * _1537) + (((_1704 * cbLight._m0[_1651].x) * _1718) * _1548);
    float _1801 = (((_1777 * cbLight._m0[_1729].y) * _1790) * _1537) + (((_1704 * cbLight._m0[_1651].y) * _1718) * _1548);
    float _1802 = (((_1777 * cbLight._m0[_1729].z) * _1790) * _1537) + (((_1704 * cbLight._m0[_1651].z) * _1718) * _1548);
    float _1864;
    float _1866;
    float _1868;
    if (_1588)
    {
        _1864 = _1800;
        _1866 = _1801;
        _1868 = _1802;
    }
    else
    {
        uint _1870 = _1514 + 2u;
        uint _1874 = _1514 + 10u;
        float _1888 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1870].w)) * _323) * 0.949999988079071044921875);
        float _1889 = _1888 * _1888;
        float _1890 = cbLight._m0[_1870].x + _400;
        float _1891 = cbLight._m0[_1870].y + _401;
        float _1892 = cbLight._m0[_1870].z + _402;
        float _1896 = inversesqrt(dot(vec3(_1890, _1891, _1892), vec3(_1890, _1891, _1892)));
        float _1897 = _1896 * _1890;
        float _1898 = _1896 * _1891;
        float _1899 = _1896 * _1892;
        float _1900 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1870].xyz));
        float _3837 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1903 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1904 = dot(vec3(_320, _321, _322), vec3(_1897, _1898, _1899));
        float _3848 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1907 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1908 = dot(vec3(cbLight._m0[_1870].xyz), vec3(_1897, _1898, _1899));
        float _3859 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
        float _1912 = _1889 * _1889;
        float _1916 = ((_1907 * _1907) * (_1912 + (-1.0))) + 1.0;
        float _1925 = (exp2(log2(1.0 - (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1926 = 1.0 - _1889;
        float _1936 = (0.5 / (((_1680 * ((_1903 * _1926) + _1889)) + 9.9999999392252902907785028219223e-09) + (((_1680 * _1926) + _1889) * _1903))) * _1903;
        float _3870 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1938 = (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1912 / ((_1916 * _1916) * 3.141590118408203125));
        float _1939 = isnan(1.0) ? _1529 : (isnan(_1529) ? 1.0 : min(_1529, 1.0));
        _1864 = (((_1925 * cbLight._m0[_1874].x) * _1938) * _1939) + _1800;
        _1866 = (((_1925 * cbLight._m0[_1874].y) * _1938) * _1939) + _1801;
        _1868 = (((_1925 * cbLight._m0[_1874].z) * _1938) * _1939) + _1802;
    }
    float _1974;
    float _1976;
    float _1978;
    if (_1606)
    {
        _1974 = _1864;
        _1976 = _1866;
        _1978 = _1868;
    }
    else
    {
        uint _1985 = _1514 + 3u;
        uint _1989 = _1514 + 11u;
        float _2003 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1985].w)) * _323) * 0.949999988079071044921875);
        float _2004 = _2003 * _2003;
        float _2005 = cbLight._m0[_1985].x + _400;
        float _2006 = cbLight._m0[_1985].y + _401;
        float _2007 = cbLight._m0[_1985].z + _402;
        float _2011 = inversesqrt(dot(vec3(_2005, _2006, _2007), vec3(_2005, _2006, _2007)));
        float _2012 = _2011 * _2005;
        float _2013 = _2011 * _2006;
        float _2014 = _2011 * _2007;
        float _2015 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1985].xyz));
        float _3886 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2018 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _2019 = dot(vec3(_320, _321, _322), vec3(_2012, _2013, _2014));
        float _3897 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2022 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _2023 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_2012, _2013, _2014));
        float _3908 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2027 = _2004 * _2004;
        float _2031 = ((_2022 * _2022) * (_2027 + (-1.0))) + 1.0;
        float _2040 = (exp2(log2(1.0 - (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2041 = 1.0 - _2004;
        float _2051 = (0.5 / (((_1680 * ((_2018 * _2041) + _2004)) + 9.9999999392252902907785028219223e-09) + (((_1680 * _2041) + _2004) * _2018))) * _2018;
        float _3919 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2053 = (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_2027 / ((_2031 * _2031) * 3.141590118408203125));
        float _2054 = isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0));
        _1974 = (((_2040 * cbLight._m0[_1989].x) * _2053) * _2054) + _1864;
        _1976 = (((_2040 * cbLight._m0[_1989].y) * _2053) * _2054) + _1866;
        _1978 = (((_2040 * cbLight._m0[_1989].z) * _2053) * _2054) + _1868;
    }
    float _2189;
    float _2191;
    float _2193;
    float _2195;
    float _2197;
    float _2199;
    if (_1512.y == 0u)
    {
        float _2129 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2130 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2129;
        float _2131 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2129;
        float _2132 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2129;
        uvec4 _2144 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2145 = _2144.x;
        uint _2156 = uint((float(_2144.y) * floor(float(uint(cbSceneParam._m0[85u].y * _409) / _2145))) + floor(float(uint(cbSceneParam._m0[85u].x * _408) / _2145)));
        float _2166 = (log2(_2132 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2167 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        uint _2170 = uint(isnan(14.0) ? _2167 : (isnan(_2167) ? 14.0 : min(_2167, 14.0)));
        uvec4 _2175 = texelFetch(g_lightClusterGridBuffer, int(((_2170 << 2u) + (_2156 << 6u)) >> 2u));
        uint _2176 = _2175.x;
        uint _2177 = _2144.z;
        float _2315;
        float _2317;
        float _2319;
        float _2321;
        float _2323;
        float _2325;
        if (((((1u << ((_2177 >> 4u) & 15u)) + 4294967295u) & _2176) == 0u) || ((_2177 & 240u) == 0u))
        {
            _2315 = 0.0;
            _2317 = 0.0;
            _2319 = 0.0;
            _2321 = 0.0;
            _2323 = 0.0;
            _2325 = 0.0;
        }
        else
        {
            float _2316;
            float _2318;
            float _2320;
            float _2322;
            float _2324;
            float _2326;
            float _2469 = 0.0;
            float _2470 = 0.0;
            float _2471 = 0.0;
            float _2472 = 0.0;
            float _2473 = 0.0;
            float _2474 = 0.0;
            uint _2475 = 0u;
            uint _2484;
            bool _2485;
            for (;;)
            {
                _2484 = texelFetch(g_lightClassification, int((((_2170 << 5u) + (_2156 << 9u)) + (_2475 << 2u)) >> 2u)).x;
                _2485 = _2484 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2485)
                {
                    frontier_phi_61_pred = _2469;
                    frontier_phi_61_pred_1 = _2474;
                    frontier_phi_61_pred_2 = _2473;
                    frontier_phi_61_pred_3 = _2472;
                    frontier_phi_61_pred_4 = _2471;
                    frontier_phi_61_pred_5 = _2470;
                }
                else
                {
                    float _2593;
                    float _2594;
                    float _2595;
                    float _2596;
                    float _2597;
                    float _2598;
                    uint _2599;
                    _2593 = _2469;
                    _2594 = _2470;
                    _2595 = _2471;
                    _2596 = _2472;
                    _2597 = _2473;
                    _2598 = _2474;
                    _2599 = _2484;
                    float _2525;
                    float _2526;
                    float _2527;
                    float _2528;
                    float _2529;
                    float _2530;
                    for (;;)
                    {
                        uint _2603 = uint(findLSB(_2599)) + (_2475 << 5u);
                        uint _2600 = (_2599 + 4294967295u) & _2599;
                        uint _2605 = _2603 * 48u;
                        vec4 _2619 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2605)).x, texelFetch(g_PointLightRenderingBuffer, int(_2605 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2605 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2605 + 3u)).x));
                        uint _2625 = (_2603 * 48u) + 4u;
                        vec4 _2638 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2625)).x, texelFetch(g_PointLightRenderingBuffer, int(_2625 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2625 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2625 + 3u)).x));
                        uint _2644 = (_2603 * 48u) + 8u;
                        vec3 _2655 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2644)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 2u)).x));
                        float _2659 = _2619.x - _2130;
                        float _2660 = _2619.y - _2131;
                        float _2661 = _2619.z - _2132;
                        float _2662 = dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661));
                        float _2665 = inversesqrt(_2662);
                        float _2666 = _2665 * _2659;
                        float _2667 = _2665 * _2660;
                        float _2668 = _2665 * _2661;
                        float _2669 = dot(vec3(_430, _433, _436), vec3(_2666, _2667, _2668));
                        float _2674 = 1.0 - (_2662 * _2619.w);
                        float _3945 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
                        float _2675 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
                        float _2676 = sqrt(_2662) * _2638.w;
                        float _2679 = 1.39999997615814208984375 / (_2676 + 1.39999997615814208984375);
                        float _2680 = _2679 * _2679;
                        float _2683 = ((1.0 - _2680) * _2669) + _2680;
                        float _2686 = _2676 * _2676;
                        float _2690 = ((isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0))) * _2675) / ((_2686 * 0.699999988079071044921875) + 1.0);
                        float _2694 = (-0.0) - _2130;
                        float _2695 = (-0.0) - _2131;
                        float _2696 = (-0.0) - _2132;
                        float _2700 = inversesqrt(dot(vec3(_2694, _2695, _2696), vec3(_2694, _2695, _2696)));
                        float _2701 = _2700 * _2694;
                        float _2702 = _2700 * _2695;
                        float _2703 = _2700 * _2696;
                        float _2711 = exp2(log2(1.0 / ((_2686 * 3.5) + 5.0)) * 0.25);
                        float _2712 = 1.0 - _491;
                        float _2719 = sqrt(1.0 - ((1.0 - (_2712 * _2712)) * (1.0 - (_2711 * _2711))));
                        float _2720 = _2719 * _2719;
                        float _2721 = _2720 * _2720;
                        float _2722 = _2701 + _2666;
                        float _2723 = _2702 + _2667;
                        float _2724 = _2703 + _2668;
                        float _2728 = inversesqrt(dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724)));
                        float _2732 = dot(vec3(_430, _433, _436), vec3(_2701, _2702, _2703));
                        float _3961 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
                        float _2735 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
                        float _2736 = dot(vec3(_430, _433, _436), vec3(_2728 * _2722, _2728 * _2723, _2728 * _2724));
                        float _3972 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
                        float _2739 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
                        float _2743 = ((_2739 * _2739) * (_2721 + (-1.0))) + 1.0;
                        float _2744 = _2679 * _2720;
                        float _2745 = _2744 * _2744;
                        float _2748 = ((1.0 - _2745) * _2669) + _2745;
                        float _3983 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
                        float _2749 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
                        float _2750 = 1.0 - _2720;
                        float _2760 = (0.5 / (((_2749 * ((_2735 * _2750) + _2720)) + 9.9999999392252902907785028219223e-09) + (((_2749 * _2750) + _2720) * _2735))) * _2749;
                        float _3994 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
                        float _2771 = (((_2721 * 3.1415927410125732421875) * (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) / ((_2743 * _2743) * ((_2686 * 2.1991131305694580078125) + 3.141590118408203125))) * _2675;
                        _2528 = (_2690 * _2638.x) + _2596;
                        _2529 = (_2690 * _2638.y) + _2597;
                        _2530 = (_2690 * _2638.z) + _2598;
                        _2525 = (_2771 * _2655.x) + _2593;
                        _2526 = (_2771 * _2655.y) + _2594;
                        _2527 = (_2771 * _2655.z) + _2595;
                        if (_2600 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2593 = _2525;
                            _2594 = _2526;
                            _2595 = _2527;
                            _2596 = _2528;
                            _2597 = _2529;
                            _2598 = _2530;
                            _2599 = _2600;
                        }
                    }
                    frontier_phi_61_pred = _2525;
                    frontier_phi_61_pred_1 = _2530;
                    frontier_phi_61_pred_2 = _2529;
                    frontier_phi_61_pred_3 = _2528;
                    frontier_phi_61_pred_4 = _2527;
                    frontier_phi_61_pred_5 = _2526;
                }
                _2316 = frontier_phi_61_pred;
                _2326 = frontier_phi_61_pred_1;
                _2324 = frontier_phi_61_pred_2;
                _2322 = frontier_phi_61_pred_3;
                _2320 = frontier_phi_61_pred_4;
                _2318 = frontier_phi_61_pred_5;
                uint _2476 = _2475 + 1u;
                if (_2476 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2469 = _2316;
                    _2470 = _2318;
                    _2471 = _2320;
                    _2472 = _2322;
                    _2473 = _2324;
                    _2474 = _2326;
                    _2475 = _2476;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2315 = _2316;
            _2317 = _2318;
            _2319 = _2320;
            _2321 = _2322;
            _2323 = _2324;
            _2325 = _2326;
        }
        uvec4 _2329 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2330 = _2329.z;
        uint _2332 = (_2330 >> 8u) & 15u;
        float _2437;
        float _2439;
        float _2441;
        float _2443;
        float _2445;
        float _2447;
        if (((4294967295u << _2332) & _2176) == 0u)
        {
            _2437 = _2315;
            _2439 = _2317;
            _2441 = _2319;
            _2443 = _2321;
            _2445 = _2323;
            _2447 = _2325;
        }
        else
        {
            float _2462 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
            float _2463 = _2462 * _2130;
            float _2464 = _2462 * _2131;
            float _2465 = _2462 * _2132;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2332 < ((_2330 >> 12u) & 15u))
            {
                float _2438;
                float _2440;
                float _2442;
                float _2444;
                float _2446;
                float _2448;
                float _2576 = _2315;
                float _2577 = _2317;
                float _2578 = _2319;
                float _2579 = _2321;
                float _2580 = _2323;
                float _2581 = _2325;
                uint _2582 = _2332;
                uint _2591;
                bool _2592;
                for (;;)
                {
                    _2591 = texelFetch(g_lightClassification, int((((_2170 << 5u) + (_2156 << 9u)) + (_2582 << 2u)) >> 2u)).x;
                    _2592 = _2591 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2592)
                    {
                        frontier_phi_67_pred = _2579;
                        frontier_phi_67_pred_1 = _2580;
                        frontier_phi_67_pred_2 = _2581;
                        frontier_phi_67_pred_3 = _2578;
                        frontier_phi_67_pred_4 = _2577;
                        frontier_phi_67_pred_5 = _2576;
                    }
                    else
                    {
                        float _2776;
                        float _2777;
                        float _2778;
                        float _2779;
                        float _2780;
                        float _2781;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _2789 = _2576;
                        float _2790 = _2577;
                        float _2791 = _2578;
                        float _2792 = _2579;
                        float _2793 = _2580;
                        float _2794 = _2581;
                        uint _2795 = _2591;
                        uint _2796;
                        vec4 _2821;
                        float _2822;
                        vec4 _2837;
                        vec3 _2849;
                        vec4 _2865;
                        vec4 _2881;
                        float _2928;
                        bool _2929;
                        for (;;)
                        {
                            uint _2806 = ((_2582 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2795));
                            _2796 = (_2795 + 4294967295u) & _2795;
                            uint _2808 = _2806 * 40u;
                            _2821 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2808)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2808 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2808 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2808 + 3u)).x));
                            _2822 = _2821.w;
                            uint _2824 = (_2806 * 40u) + 4u;
                            _2837 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 3u)).x));
                            uint _2839 = (_2806 * 40u) + 8u;
                            _2849 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2839)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 2u)).x));
                            uint _2852 = (_2806 * 40u) + 16u;
                            _2865 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 3u)).x));
                            uint _2868 = (_2806 * 40u) + 20u;
                            _2881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 3u)).x));
                            uint _2884 = (_2806 * 40u) + 24u;
                            vec4 _2897 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 3u)).x));
                            uint _2903 = (_2806 * 40u) + 28u;
                            vec4 _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            _2928 = fma(_2132, _2916.z, fma(_2131, _2916.y, _2916.x * _2130)) + _2916.w;
                            _2929 = !((fma(_2132, _2897.z, fma(_2131, _2897.y, _2897.x * _2130)) + _2897.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2929)
                            {
                                float _2956 = _2821.x - _2130;
                                float _2957 = _2821.y - _2131;
                                float _2958 = _2821.z - _2132;
                                float _2959 = dot(vec3(_2956, _2957, _2958), vec3(_2956, _2957, _2958));
                                float _2962 = inversesqrt(_2959);
                                float _2963 = _2962 * _2956;
                                float _2964 = _2962 * _2957;
                                float _2965 = _2962 * _2958;
                                float _2969 = 1.0 - (_2959 / (_2822 * _2822));
                                float _4005 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                                float _2970 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
                                float _2974 = sqrt(_2959) * _2837.w;
                                float _2976 = 1.39999997615814208984375 / (_2974 + 1.39999997615814208984375);
                                float _2977 = _2976 * _2976;
                                float _2980 = ((1.0 - _2977) * dot(vec3(_2963, _2964, _2965), vec3(_430, _433, _436))) + _2977;
                                float _2983 = _2974 * _2974;
                                float _2987 = (fma(_2132, _2865.z, fma(_2131, _2865.y, _2865.x * _2130)) + _2865.w) / _2928;
                                float _2988 = (fma(_2132, _2881.z, fma(_2131, _2881.y, _2881.x * _2130)) + _2881.w) / _2928;
                                float _2992 = 1.0 - dot(vec2(_2987, _2988), vec2(_2987, _2988));
                                float _4021 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                                float _2993 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
                                float _2994 = _2993 * (((isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0))) * _2970) / ((_2983 * 0.699999988079071044921875) + 1.0));
                                float _3006 = exp2(log2(1.0 / ((_2983 * 3.5) + 5.0)) * 0.25);
                                float _3007 = 1.0 - _491;
                                float _3014 = sqrt(1.0 - ((1.0 - (_3007 * _3007)) * (1.0 - (_3006 * _3006))));
                                float _3015 = _3014 * _3014;
                                float _3016 = _3015 * _3015;
                                float _3017 = _2963 - _2463;
                                float _3018 = _2964 - _2464;
                                float _3019 = _2965 - _2465;
                                float _3023 = inversesqrt(dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019)));
                                float _3027 = dot(vec3(_430, _433, _436), vec3((-0.0) - _2463, (-0.0) - _2464, (-0.0) - _2465));
                                float _4032 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                                float _3030 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
                                float _3031 = dot(vec3(_430, _433, _436), vec3(_3023 * _3017, _3023 * _3018, _3023 * _3019));
                                float _4043 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                                float _3034 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
                                float _3038 = ((_3034 * _3034) * (_3016 + (-1.0))) + 1.0;
                                float _3039 = _2976 * _3015;
                                float _3040 = _3039 * _3039;
                                float _3046 = ((1.0 - _3040) * dot(vec3(_430, _433, _436), vec3(_2963, _2964, _2965))) + _3040;
                                float _4054 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                                float _3047 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
                                float _3048 = 1.0 - _3015;
                                float _3058 = (0.5 / (((_3047 * ((_3030 * _3048) + _3015)) + 9.9999999392252902907785028219223e-09) + (((_3047 * _3048) + _3015) * _3030))) * _3047;
                                float _4065 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                                float _3068 = (_2993 * _2970) * (((_3016 * 3.1415927410125732421875) * (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) / ((_3038 * _3038) * ((_2983 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3068 * _2849.x;
                                frontier_phi_73_pred_1 = _3068 * _2849.y;
                                frontier_phi_73_pred_2 = _2994 * _2837.z;
                                frontier_phi_73_pred_3 = _2994 * _2837.y;
                                frontier_phi_73_pred_4 = _2994 * _2837.x;
                                frontier_phi_73_pred_5 = _3068 * _2849.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3072 = frontier_phi_73_pred;
                            _3073 = frontier_phi_73_pred_1;
                            _3077 = frontier_phi_73_pred_2;
                            _3076 = frontier_phi_73_pred_3;
                            _3075 = frontier_phi_73_pred_4;
                            _3074 = frontier_phi_73_pred_5;
                            _2779 = _3075 + _2792;
                            _2780 = _3076 + _2793;
                            _2781 = _3077 + _2794;
                            _2776 = _3072 + _2789;
                            _2777 = _3073 + _2790;
                            _2778 = _3074 + _2791;
                            if (_2796 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2789 = _2776;
                                _2790 = _2777;
                                _2791 = _2778;
                                _2792 = _2779;
                                _2793 = _2780;
                                _2794 = _2781;
                                _2795 = _2796;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2779;
                        frontier_phi_67_pred_1 = _2780;
                        frontier_phi_67_pred_2 = _2781;
                        frontier_phi_67_pred_3 = _2778;
                        frontier_phi_67_pred_4 = _2777;
                        frontier_phi_67_pred_5 = _2776;
                    }
                    _2444 = frontier_phi_67_pred;
                    _2446 = frontier_phi_67_pred_1;
                    _2448 = frontier_phi_67_pred_2;
                    _2442 = frontier_phi_67_pred_3;
                    _2440 = frontier_phi_67_pred_4;
                    _2438 = frontier_phi_67_pred_5;
                    uint _2583 = _2582 + 1u;
                    if (_2583 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2576 = _2438;
                        _2577 = _2440;
                        _2578 = _2442;
                        _2579 = _2444;
                        _2580 = _2446;
                        _2581 = _2448;
                        _2582 = _2583;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2446;
                frontier_phi_55_56_ladder_1 = _2448;
                frontier_phi_55_56_ladder_2 = _2444;
                frontier_phi_55_56_ladder_3 = _2442;
                frontier_phi_55_56_ladder_4 = _2440;
                frontier_phi_55_56_ladder_5 = _2438;
            }
            else
            {
                frontier_phi_55_56_ladder = _2323;
                frontier_phi_55_56_ladder_1 = _2325;
                frontier_phi_55_56_ladder_2 = _2321;
                frontier_phi_55_56_ladder_3 = _2319;
                frontier_phi_55_56_ladder_4 = _2317;
                frontier_phi_55_56_ladder_5 = _2315;
            }
            _2437 = frontier_phi_55_56_ladder_5;
            _2439 = frontier_phi_55_56_ladder_4;
            _2441 = frontier_phi_55_56_ladder_3;
            _2443 = frontier_phi_55_56_ladder_2;
            _2445 = frontier_phi_55_56_ladder;
            _2447 = frontier_phi_55_56_ladder_1;
        }
        float _2452 = isnan(1.0) ? _475 : (isnan(_475) ? 1.0 : min(_475, 1.0));
        _2189 = (_2452 * _2443) + _1644;
        _2191 = (_2452 * _2445) + _1646;
        _2193 = (_2452 * _2447) + _1648;
        _2195 = ((_2437 * 0.039999999105930328369140625) * _2452) + _1974;
        _2197 = ((_2439 * 0.039999999105930328369140625) * _2452) + _1976;
        _2199 = ((_2441 * 0.039999999105930328369140625) * _2452) + _1978;
    }
    else
    {
        _2189 = _1644;
        _2191 = _1646;
        _2193 = _1648;
        _2195 = _1974;
        _2197 = _1976;
        _2199 = _1978;
    }
    uint _2205 = _451 + uint(cbMatDynParam._m0[0u].w);
    float _2214 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _283.x) * _306) * cbInstanceData._m0[_2205].x;
    float _2218 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _283.y) * _306) * cbInstanceData._m0[_2205].y;
    float _2222 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _283.z) * _306) * cbInstanceData._m0[_2205].z;
    float _4081 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _4092 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _4103 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _2239 = (((isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_2189 + ((isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0))) * _475))) + ((_2195 + ((isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))) * _1281)) * cbPerFrame._m0[3u].x)) + _2214;
    float _2241 = (_2218 + ((_2197 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _1281)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_2191 + ((isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0))) * _475)));
    float _2243 = (_2222 + ((_2199 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _1281)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_2193 + ((isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))) * _475)));
    float _4129 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2256 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    uint _2257 = _449 + 6u;
    float _2265 = _408 / cbSceneParam._m0[86u].x;
    float _2266 = _409 / cbSceneParam._m0[86u].y;
    vec4 _2280 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2265, _2266, (log2((isnan(cbSceneParam._m0[77u].w) ? _342 : (isnan(_342) ? cbSceneParam._m0[77u].w : min(_342, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2282 = _2280.x;
    float _2283 = _2280.y;
    float _2284 = _2280.z;
    float _2285 = _2280.w;
    float _2378;
    float _2380;
    float _2382;
    float _2384;
    if (_342 > cbSceneParam._m0[78u].w)
    {
        float _2340 = isnan(_342) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _342 : min(cbSceneParam._m0[80u].w, _342));
        float _2341 = _2340 / _342;
        float _2352 = _2341 * _393;
        float _2353 = _394 * _2341;
        float _2354 = (-0.0) - _2353;
        float _2356 = _2341 * _395;
        float _2358 = (cbSceneParam._m0[77u].w * _2354) / _2340;
        float _2359 = _2358 + cbSceneParam._m0[79u].w;
        float _2360 = cbSceneParam._m0[79u].w - _2353;
        float _2366 = sqrt(((_2352 * _2352) + (_2353 * _2353)) + (_2356 * _2356));
        float _2369 = (1.0 - (cbSceneParam._m0[77u].w / _2340)) * _2366;
        float _2374 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2376 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2538;
        if (abs((_2354 - _2358) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2538 = ((((_2359 > 0.0) ? exp2(_2374 * _2359) : (2.0 - exp2(_2376 * _2359))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2369;
        }
        else
        {
            float _2498 = 1.0 / cbSceneParam._m0[80u].x;
            float _2499 = isnan(_2360) ? _2359 : (isnan(_2359) ? _2360 : max(_2359, _2360));
            float _2500 = isnan(_2360) ? _2359 : (isnan(_2359) ? _2360 : min(_2359, _2360));
            float _2509 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : min(_2499, 0.0));
            float _2510 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : min(_2500, 0.0));
            _2538 = ((abs(_2366 / _2354) * cbSceneParam._m0[80u].y) * ((((_2509 - _2510) * 2.0) - ((exp2(_2374 * (isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0)))) - exp2(_2374 * (isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0))))) * _2498)) - ((exp2(_2376 * _2509) - exp2(_2376 * _2510)) * _2498))) + (_2369 * cbSceneParam._m0[80u].z);
        }
        vec4 _2540 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2265, _2266, 1.0), 0.0);
        float _2549 = exp2((_2538 * (-1.44269502162933349609375)) * (1.0 - _2540.w));
        float _2550 = log2(_2549);
        float _2566 = log2(_2285);
        _2378 = (exp2(_2566 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2550 * cbSceneParam._m0[78u].x)) * _2540.x) / cbSceneParam._m0[78u].x)) + _2282;
        _2380 = (exp2(_2566 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2550 * cbSceneParam._m0[78u].y)) * _2540.y) / cbSceneParam._m0[78u].y)) + _2283;
        _2382 = (exp2(_2566 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2550 * cbSceneParam._m0[78u].z)) * _2540.z) / cbSceneParam._m0[78u].z)) + _2284;
        _2384 = _2549 * _2285;
    }
    else
    {
        _2378 = _2282;
        _2380 = _2283;
        _2382 = _2284;
        _2384 = _2285;
    }
    float _2396 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2397 = _2396 == 3.0;
    float _2398 = log2(_2384);
    float _2402 = exp2(_2398 * cbSceneParam._m0[78u].x);
    float _2403 = exp2(_2398 * cbSceneParam._m0[78u].y);
    float _2404 = exp2(_2398 * cbSceneParam._m0[78u].z);
    float _2405 = _2402 * (isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0)));
    float _2406 = _2403 * (isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0)));
    float _2407 = _2404 * (isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0)));
    float _2416 = (_2396 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2416 * (_2397 ? _2405 : (_2405 + (cbSceneParam._m0[72u].w * _2378)));
    SV_Target.y = _2416 * (_2397 ? _2406 : (_2406 + (cbSceneParam._m0[72u].w * _2380)));
    SV_Target.z = _2416 * (_2397 ? _2407 : (_2407 + (cbSceneParam._m0[72u].w * _2382)));
    SV_Target.w = cbInstanceData._m0[_2257].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2214) * _2256) * _2402) * _2416;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2218) * _2256) * _2403) * _2416;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2222) * _2256) * _2404) * _2416;
    SV_Target_1.w = cbInstanceData._m0[_2257].w;
}


