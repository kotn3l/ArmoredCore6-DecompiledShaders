#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _887;
float _3298;
float _3299;
float _3300;
float _3301;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _228.x * cbMtdParam._m0[9u].x;
    float _235 = _228.y * cbMtdParam._m0[9u].y;
    float _236 = _228.z * cbMtdParam._m0[9u].z;
    vec4 _248 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _252 = _248.z;
    float _256 = (_248.x * 2.0) + (-1.0);
    float _258 = (_248.y * 2.0) + (-1.0);
    float _259 = dot(vec2(_256, _258), vec2(_256, _258));
    float _3310 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _265 = sqrt(1.0 - (isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0))));
    vec4 _302 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _309 = fma(_265, _199 * NORMAL.x, fma(_258, _206 * TANGENT.x, (_192 * _185) * _256));
    float _312 = fma(_265, _199 * NORMAL.y, fma(_258, _206 * TANGENT.y, (_192 * _186) * _256));
    float _315 = fma(_265, _199 * NORMAL.z, fma(_258, _206 * TANGENT.z, (_192 * _187) * _256));
    float _319 = inversesqrt(dot(vec3(_309, _312, _315), vec3(_309, _312, _315)));
    float _320 = _319 * _309;
    float _321 = _319 * _312;
    float _322 = _319 * _315;
    float _3321 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _323 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
    float _3332 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3343 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3354 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _342 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _383 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _393 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _383);
    float _394 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _383);
    float _395 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _383);
    float _399 = inversesqrt(dot(vec3(_393, _394, _395), vec3(_393, _394, _395)));
    float _400 = _393 * _399;
    float _401 = _394 * _399;
    float _402 = _395 * _399;
    vec4 _407 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _409 = _407.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _566 = sqrt(((_393 * _393) + (_394 * _394)) + (_395 * _395));
        float _572 = (cbMatDynParam._m0[5u].x * _566) + cbMatDynParam._m0[5u].y;
        float _3365 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
        float _573 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
        float _577 = (cbMatDynParam._m0[5u].z * _566) + cbMatDynParam._m0[5u].w;
        float _3376 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0))) - _573)) + _573) < ((_409 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _421 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _422 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _442 = fma(_322, cbSceneParam._m0[5u].z, fma(_321, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _320));
    float _445 = fma(_322, cbSceneParam._m0[6u].z, fma(_321, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _320));
    float _448 = fma(_322, cbSceneParam._m0[7u].z, fma(_321, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _320));
    uint _461 = uint(roundEven(NORMAL.w)) * 13u;
    uint _462 = _461 + 9u;
    uint _463 = _462 + uint(cbMatDynParam._m0[0u].w);
    float _469 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0)))) * cbInstanceData._m0[_463].x;
    float _470 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0)))) * cbInstanceData._m0[_463].y;
    float _471 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0)))) * cbInstanceData._m0[_463].z;
    float _3387 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _472 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
    float _3398 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
    float _3409 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
    vec4 _483 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _421, cbSceneParam._m0[86u].y * _422));
    float _486 = _483.x * TEXCOORD.z;
    float _487 = dot(vec3(_320, _321, _322), vec3(_400, _401, _402));
    float _490 = _487 * 2.0;
    float _494 = (_490 * _320) - _400;
    float _495 = (_490 * _321) - _401;
    float _496 = (_490 * _322) - _402;
    float _500 = abs(dot(vec3(_400, _401, _402), vec3(_320, _321, _322)));
    float _3420 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _502 = sqrt(_323);
    float _515 = exp2((_502 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_502 * 3.0));
    float _547 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _551 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _555 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _886;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _611 = fma(_555, cbModelParam._m0[26u].z, fma(_551, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _547));
        float _615 = fma(_555, cbModelParam._m0[27u].z, fma(_551, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _547));
        float _619 = fma(_555, cbModelParam._m0[28u].z, fma(_551, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _547));
        float _644 = _547 + _320;
        float _645 = _551 + _321;
        float _646 = _555 + _322;
        float _656 = fma(_646, cbModelParam._m0[26u].z, fma(_645, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _644)) - _611;
        float _657 = fma(_646, cbModelParam._m0[27u].z, fma(_645, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _644)) - _615;
        float _658 = fma(_646, cbModelParam._m0[28u].z, fma(_645, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _644)) - _619;
        float _662 = inversesqrt(dot(vec3(_656, _657, _658), vec3(_656, _657, _658)));
        float _675 = ((_662 * _656) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_611 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _676 = ((_662 * _657) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_615 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _677 = ((_662 * _658) / cbModelParam._m0[34u].z) + ((((((_619 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _680 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_675, _676, _677), 0.0);
        vec4 _687 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_675, _676, _677), 0.0);
        vec4 _694 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_675, _676, _677), 0.0);
        vec4 _701 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_675, _676, _677), 0.0);
        float _714 = exp2((_680.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_680.x + (-0.5));
        float _716 = _714 * (_680.y + (-0.5));
        float _717 = _714 * (_680.z + (-0.5));
        float _724 = exp2((_687.w + (-0.5)) * 20.0) * 2.0;
        float _725 = _724 * (_687.x + (-0.5));
        float _726 = _724 * (_687.y + (-0.5));
        float _727 = _724 * (_687.z + (-0.5));
        float _734 = exp2((_694.w + (-0.5)) * 20.0) * 2.0;
        float _735 = _734 * (_694.x + (-0.5));
        float _736 = _734 * (_694.y + (-0.5));
        float _737 = _734 * (_694.z + (-0.5));
        float _744 = exp2((_701.w + (-0.5)) * 20.0) * 2.0;
        float _745 = _744 * (_701.x + (-0.5));
        float _746 = _744 * (_701.y + (-0.5));
        float _747 = _744 * (_701.z + (-0.5));
        float _748 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _749 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _750 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _751 = _715 * 0.5;
        float _752 = _725 * 0.5;
        float _753 = _735 * 0.5;
        float _754 = dot(vec3(_751, _752, _753), vec3(_751, _752, _753));
        float _759 = (_754 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_754);
        float _768 = (dot(vec3(_320, _321, _322), vec3(_759 * _751, _759 * _752, _759 * _753)) + 1.0) * 0.5;
        float _3446 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _778 = sqrt(((_752 * _752) + (_751 * _751)) + (_753 * _753)) / (_748 + 9.9999997473787516355514526367188e-06);
        float _3457 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
        float _780 = _779 * 2.0;
        float _784 = (1.0 - _779) / (_779 + 1.0);
        float _3468 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
        float _794 = ((((1.0 - _785) * (_780 + 2.0)) * exp2(log2(isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0))) * (_780 + 1.0))) + _785) * _748;
        float _795 = _716 * 0.5;
        float _796 = _726 * 0.5;
        float _797 = _736 * 0.5;
        float _798 = dot(vec3(_795, _796, _797), vec3(_795, _796, _797));
        float _803 = (_798 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_798);
        float _811 = (dot(vec3(_320, _321, _322), vec3(_803 * _795, _803 * _796, _803 * _797)) + 1.0) * 0.5;
        float _3479 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _820 = sqrt(((_796 * _796) + (_795 * _795)) + (_797 * _797)) / (_749 + 9.9999997473787516355514526367188e-06);
        float _3490 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _822 = _821 * 2.0;
        float _826 = (1.0 - _821) / (_821 + 1.0);
        float _3501 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _836 = ((((1.0 - _827) * (_822 + 2.0)) * exp2(log2(isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))) * (_822 + 1.0))) + _827) * _749;
        float _837 = _717 * 0.5;
        float _838 = _727 * 0.5;
        float _839 = _737 * 0.5;
        float _840 = dot(vec3(_837, _838, _839), vec3(_837, _838, _839));
        float _845 = (_840 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_840);
        float _853 = (dot(vec3(_320, _321, _322), vec3(_845 * _837, _845 * _838, _845 * _839)) + 1.0) * 0.5;
        float _3512 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _862 = sqrt(((_838 * _838) + (_837 * _837)) + (_839 * _839)) / (_750 + 9.9999997473787516355514526367188e-06);
        float _3523 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _864 = _863 * 2.0;
        float _868 = (1.0 - _863) / (_863 + 1.0);
        float _3534 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _878 = ((((1.0 - _869) * (_864 + 2.0)) * exp2(log2(isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * (_864 + 1.0))) + _869) * _750;
        _886 = _717;
        _888 = _716;
        _889 = _715;
        _890 = _727;
        _891 = _726;
        _892 = _725;
        _893 = _737;
        _894 = _736;
        _895 = _735;
        _896 = _750;
        _897 = _749;
        _898 = _748;
        _899 = cbModelParam._m0[36u].z * (isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0)));
        _900 = cbModelParam._m0[36u].z * (isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0)));
        _901 = cbModelParam._m0[36u].z * (isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0)));
    }
    else
    {
        _886 = _887;
        _888 = _887;
        _889 = _887;
        _890 = _887;
        _891 = _887;
        _892 = _887;
        _893 = _887;
        _894 = _887;
        _895 = _887;
        _896 = _887;
        _897 = _887;
        _898 = _887;
        _899 = 0.0;
        _900 = 0.0;
        _901 = 0.0;
    }
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _930 = fma(_555, cbModelParam._m0[30u].z, fma(_551, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _547));
        float _934 = fma(_555, cbModelParam._m0[31u].z, fma(_551, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _547));
        float _938 = fma(_555, cbModelParam._m0[32u].z, fma(_551, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _547));
        float _961 = _547 + _320;
        float _962 = _551 + _321;
        float _963 = _555 + _322;
        float _973 = fma(_963, cbModelParam._m0[30u].z, fma(_962, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _961)) - _930;
        float _974 = fma(_963, cbModelParam._m0[31u].z, fma(_962, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _961)) - _934;
        float _975 = fma(_963, cbModelParam._m0[32u].z, fma(_962, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _961)) - _938;
        float _979 = inversesqrt(dot(vec3(_973, _974, _975), vec3(_973, _974, _975)));
        float _992 = ((_979 * _973) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_930 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _993 = ((_979 * _974) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_934 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _994 = ((_979 * _975) / cbModelParam._m0[35u].z) + ((((((_938 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        float _1029 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_996.x + (-0.5));
        float _1031 = _1029 * (_996.y + (-0.5));
        float _1032 = _1029 * (_996.z + (-0.5));
        float _1039 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_1003.x + (-0.5));
        float _1041 = _1039 * (_1003.y + (-0.5));
        float _1042 = _1039 * (_1003.z + (-0.5));
        float _1049 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1010.x + (-0.5));
        float _1051 = _1049 * (_1010.y + (-0.5));
        float _1052 = _1049 * (_1010.z + (-0.5));
        float _1059 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1017.x + (-0.5));
        float _1061 = _1059 * (_1017.y + (-0.5));
        float _1062 = _1059 * (_1017.z + (-0.5));
        float _1063 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1064 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = _1030 * 0.5;
        float _1067 = _1040 * 0.5;
        float _1068 = _1050 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1082 = (dot(vec3(_320, _321, _322), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _3575 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1091 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_1063 + 9.9999997473787516355514526367188e-06);
        float _3586 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _3597 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * (_1093 + 1.0))) + _1098) * _1063;
        float _1108 = _1031 * 0.5;
        float _1109 = _1041 * 0.5;
        float _1110 = _1051 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_320, _321, _322), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3608 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1064 + 9.9999997473787516355514526367188e-06);
        float _3619 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3630 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * (_1135 + 1.0))) + _1140) * _1064;
        float _1150 = _1032 * 0.5;
        float _1151 = _1042 * 0.5;
        float _1152 = _1052 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_320, _321, _322), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _3641 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3652 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3663 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * (_1177 + 1.0))) + _1182) * _1065;
        _1199 = _1032;
        _1200 = _1031;
        _1201 = _1030;
        _1202 = _1042;
        _1203 = _1041;
        _1204 = _1040;
        _1205 = _1052;
        _1206 = _1051;
        _1207 = _1050;
        _1208 = _1065;
        _1209 = _1064;
        _1210 = _1063;
        _1211 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
        _1212 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
        _1213 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
    }
    else
    {
        _1199 = _887;
        _1200 = _887;
        _1201 = _887;
        _1202 = _887;
        _1203 = _887;
        _1204 = _887;
        _1205 = _887;
        _1206 = _887;
        _1207 = _887;
        _1208 = _887;
        _1209 = _887;
        _1210 = _887;
        _1211 = 0.0;
        _1212 = 0.0;
        _1213 = 0.0;
    }
    float _1223 = (cbModelParam._m0[1u].x * (_1211 - _899)) + _899;
    float _1224 = (cbModelParam._m0[1u].x * (_1212 - _900)) + _900;
    float _1225 = (cbModelParam._m0[1u].x * (_1213 - _901)) + _901;
    float _1246 = fma(_1225, cbSceneParam._m0[89u].z, fma(_1224, cbSceneParam._m0[89u].y, _1223 * cbSceneParam._m0[89u].x));
    float _1249 = fma(_1225, cbSceneParam._m0[90u].z, fma(_1224, cbSceneParam._m0[90u].y, _1223 * cbSceneParam._m0[90u].x));
    float _1252 = fma(_1225, cbSceneParam._m0[91u].z, fma(_1224, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1223));
    float _1267 = _494 * 0.5;
    float _1268 = _495 * 0.5;
    float _1269 = _496 * 0.5;
    float _1270 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_1201, _1204, _1207, _1210));
    float _1273 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_1200, _1203, _1206, _1209));
    float _1276 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_1199, _1202, _1205, _1208));
    float _1310;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1283 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_886, _890, _893, _896));
        float _1287 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_888, _891, _894, _897));
        float _1291 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_889, _892, _895, _898));
        float _1298 = dot(vec4(cbModelParam._m0[39u]), vec4(_1267, _1268, _1269, 1.0));
        _1310 = dot(vec3(isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)), isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1298) ? 0.0 : (isnan(0.0) ? _1298 : max(0.0, _1298))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1310 = 1.0;
    }
    float _1321;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1312 = dot(vec4(cbModelParam._m0[40u]), vec4(_1267, _1268, _1269, 1.0));
        _1321 = dot(vec3(isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)), isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)), isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1312) ? 0.0 : (isnan(0.0) ? _1312 : max(0.0, _1312))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1321 = 1.0;
    }
    float _1325 = (_1321 * cbModelParam._m0[1u].x) + (_1310 * (1.0 - cbModelParam._m0[1u].x));
    float _1335 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _323);
    float _1336 = isnan(_1335) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1335 : min(cbModelParam._m0[25u].z, _1335));
    float _1417;
    float _1419;
    float _1421;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1384 = fma(_555, cbModelParam._m0[13u].z, fma(_551, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _547)) + cbModelParam._m0[13u].w;
        float _1388 = fma(_555, cbModelParam._m0[14u].z, fma(_551, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _547)) + cbModelParam._m0[14u].w;
        float _1392 = fma(_555, cbModelParam._m0[15u].z, fma(_551, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _547)) + cbModelParam._m0[15u].w;
        float _1395 = fma(_496, cbModelParam._m0[13u].z, fma(_495, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _494));
        float _1398 = fma(_496, cbModelParam._m0[14u].z, fma(_495, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _494));
        float _1401 = fma(_496, cbModelParam._m0[15u].z, fma(_495, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _494));
        float _1429;
        if (_1395 > 0.0)
        {
            _1429 = abs((1.0 - _1384) / _1395);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1395 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1384 + 1.0) / _1395);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1429 = frontier_phi_17_15_ladder;
        }
        float _1633;
        if (_1398 > 0.0)
        {
            _1633 = abs((1.0 - _1388) / _1398);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1398 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1388 + 1.0) / _1398);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1633 = frontier_phi_26_22_ladder;
        }
        float _1876;
        if (_1401 > 0.0)
        {
            _1876 = abs((1.0 - _1392) / _1401);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1401 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1392 + 1.0) / _1401);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1876 = frontier_phi_38_33_ladder;
        }
        float _1878 = isnan(_1633) ? _1429 : (isnan(_1429) ? _1633 : min(_1429, _1633));
        float _1879 = isnan(_1876) ? _1878 : (isnan(_1878) ? _1876 : min(_1878, _1876));
        float _1883 = (_1879 * _1395) + _1384;
        float _1884 = (_1879 * _1398) + _1388;
        float _1885 = (_1879 * _1401) + _1392;
        float _1886 = _1879 * 9.9999997473787516355514526367188e-05;
        float _1888 = (-1.0) - _1886;
        float _1890 = _1886 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1885 > _1890) || ((_1885 < _1888) || ((_1884 > _1890) || ((_1884 < _1888) || ((_1883 < _1888) || (_1883 > _1890))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2009 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1885, cbModelParam._m0[9u].z, fma(_1884, cbModelParam._m0[9u].y, _1883 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1885, cbModelParam._m0[10u].z, fma(_1884, cbModelParam._m0[10u].y, _1883 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1885, cbModelParam._m0[11u].z, fma(_1884, cbModelParam._m0[11u].y, _1883 * cbModelParam._m0[11u].x))), _1336);
            frontier_phi_16_38_ladder = _2009.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2009.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2009.x * cbModelParam._m0[1u].y;
        }
        _1417 = frontier_phi_16_38_ladder_2;
        _1419 = frontier_phi_16_38_ladder_1;
        _1421 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1405 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_494, _495, _496), _1336);
        _1417 = _1405.x * cbModelParam._m0[1u].y;
        _1419 = _1405.y * cbModelParam._m0[1u].y;
        _1421 = _1405.z * cbModelParam._m0[1u].y;
    }
    float _1425 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _323);
    float _1426 = isnan(_1425) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1425 : min(cbModelParam._m0[25u].w, _1425));
    float _1518;
    float _1520;
    float _1522;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1482 = fma(_555, cbModelParam._m0[21u].z, fma(_551, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _547)) + cbModelParam._m0[21u].w;
        float _1486 = fma(_555, cbModelParam._m0[22u].z, fma(_551, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _547)) + cbModelParam._m0[22u].w;
        float _1490 = fma(_555, cbModelParam._m0[23u].z, fma(_551, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _547)) + cbModelParam._m0[23u].w;
        float _1493 = fma(_496, cbModelParam._m0[21u].z, fma(_495, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _494));
        float _1496 = fma(_496, cbModelParam._m0[22u].z, fma(_495, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _494));
        float _1499 = fma(_496, cbModelParam._m0[23u].z, fma(_495, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _494));
        float _1638;
        if (_1493 > 0.0)
        {
            _1638 = abs((1.0 - _1482) / _1493);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1493 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1482 + 1.0) / _1493);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1638 = frontier_phi_28_24_ladder;
        }
        float _1903;
        if (_1496 > 0.0)
        {
            _1903 = abs((1.0 - _1486) / _1496);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1496 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1486 + 1.0) / _1496);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1903 = frontier_phi_40_35_ladder;
        }
        float _2108;
        if (_1499 > 0.0)
        {
            _2108 = abs((1.0 - _1490) / _1499);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1490 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2108 = frontier_phi_49_46_ladder;
        }
        float _2110 = isnan(_1903) ? _1638 : (isnan(_1638) ? _1903 : min(_1638, _1903));
        float _2111 = isnan(_2108) ? _2110 : (isnan(_2110) ? _2108 : min(_2110, _2108));
        float _2115 = (_2111 * _1493) + _1482;
        float _2116 = (_2111 * _1496) + _1486;
        float _2117 = (_2111 * _1499) + _1490;
        float _2118 = _2111 * 9.9999997473787516355514526367188e-05;
        float _2119 = (-1.0) - _2118;
        float _2121 = _2118 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2117 > _2121) || ((_2117 < _2119) || ((_2116 > _2121) || ((_2116 < _2119) || ((_2115 < _2119) || (_2115 > _2121))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2351 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2117, cbModelParam._m0[17u].z, fma(_2116, cbModelParam._m0[17u].y, _2115 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2117, cbModelParam._m0[18u].z, fma(_2116, cbModelParam._m0[18u].y, _2115 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2117, cbModelParam._m0[19u].z, fma(_2116, cbModelParam._m0[19u].y, _2115 * cbModelParam._m0[19u].x))), _1426);
            frontier_phi_25_49_ladder = _2351.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2351.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2351.x * cbModelParam._m0[1u].z;
        }
        _1518 = frontier_phi_25_49_ladder_2;
        _1520 = frontier_phi_25_49_ladder_1;
        _1522 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1502 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_494, _495, _496), _1426);
        _1518 = _1502.x * cbModelParam._m0[1u].z;
        _1520 = _1502.y * cbModelParam._m0[1u].z;
        _1522 = _1502.z * cbModelParam._m0[1u].z;
    }
    float _1534 = ((((1.0 - _515) * ((_502 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_515 * _502)) * _486;
    float _1535 = _1534 * ((cbModelParam._m0[1u].w * (_1518 - _1417)) + _1417);
    float _1536 = _1534 * ((cbModelParam._m0[1u].w * (_1520 - _1419)) + _1419);
    float _1537 = _1534 * ((cbModelParam._m0[1u].w * (_1522 - _1421)) + _1421);
    float _1540 = fma(_1537, cbSceneParam._m0[89u].z, fma(_1536, cbSceneParam._m0[89u].y, _1535 * cbSceneParam._m0[89u].x));
    float _1543 = fma(_1537, cbSceneParam._m0[90u].z, fma(_1536, cbSceneParam._m0[90u].y, _1535 * cbSceneParam._m0[90u].x));
    float _1546 = fma(_1537, cbSceneParam._m0[91u].z, fma(_1536, cbSceneParam._m0[91u].y, _1535 * cbSceneParam._m0[91u].x));
    uvec4 _1556 = floatBitsToUint(cbInstanceData._m0[_461 + 5u]);
    uint _1558 = _1556.x * 14u;
    uint _1559 = _1558 + 13u;
    float _1566 = _486 + (-1.0);
    float _1571 = (cbLight._m0[_1559].x * _1566) + 1.0;
    float _1572 = (cbLight._m0[_1559].y * _1566) + 1.0;
    float _1573 = (cbLight._m0[_1559].z * _1566) + 1.0;
    float _1574 = (cbLight._m0[_1559].w * _1566) + 1.0;
    uint _1575 = _1558 + 5u;
    float _1581 = isnan(1.0) ? _1572 : (isnan(_1572) ? 1.0 : min(_1572, 1.0));
    uint _1585 = _1558 + 4u;
    float _1592 = isnan(1.0) ? _1571 : (isnan(_1571) ? 1.0 : min(_1571, 1.0));
    uint _1596 = _1558 | 1u;
    float _1607 = dot(vec3(cbLight._m0[_1558].xyz), vec3(_320, _321, _322));
    float _1610 = dot(vec3(cbLight._m0[_1596].xyz), vec3(_320, _321, _322));
    float _3799 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
    float _3810 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
    float _1615 = (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * 0.3183098733425140380859375;
    float _1617 = (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * 0.3183098733425140380859375;
    float _1624 = ((cbLight._m0[_1575].x * _1581) * _1617) + ((cbLight._m0[_1585].x * _1592) * _1615);
    float _1625 = ((_1581 * cbLight._m0[_1575].y) * _1617) + ((_1592 * cbLight._m0[_1585].y) * _1615);
    float _1626 = ((_1581 * cbLight._m0[_1575].z) * _1617) + ((_1592 * cbLight._m0[_1585].z) * _1615);
    uvec4 _1630 = floatBitsToUint(cbLight._m0[_1558 + 12u]);
    bool _1632 = _1630.x == 0u;
    float _1643;
    float _1645;
    float _1647;
    if (_1632)
    {
        _1643 = _1624;
        _1645 = _1625;
        _1647 = _1626;
    }
    else
    {
        uint _1651 = _1558 + 6u;
        float _1667 = (dot(vec3(cbLight._m0[_1558 + 2u].xyz), vec3(_320, _321, _322)) * 0.5) + 0.5;
        float _1668 = _1667 * _1667;
        float _3821 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1670 = isnan(1.0) ? _1573 : (isnan(_1573) ? 1.0 : min(_1573, 1.0));
        _1643 = (((cbLight._m0[_1651].x * 0.3183098733425140380859375) * _1669) * _1670) + _1624;
        _1645 = (((cbLight._m0[_1651].y * 0.3183098733425140380859375) * _1669) * _1670) + _1625;
        _1647 = (((cbLight._m0[_1651].z * 0.3183098733425140380859375) * _1669) * _1670) + _1626;
    }
    bool _1650 = _1630.y == 0u;
    float _1688;
    float _1690;
    float _1692;
    if (_1650)
    {
        _1688 = _1643;
        _1690 = _1645;
        _1692 = _1647;
    }
    else
    {
        uint _1847 = _1558 + 7u;
        float _1863 = (dot(vec3(cbLight._m0[_1558 + 3u].xyz), vec3(_320, _321, _322)) * 0.5) + 0.5;
        float _1864 = _1863 * _1863;
        float _3837 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1865 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1866 = isnan(1.0) ? _1574 : (isnan(_1574) ? 1.0 : min(_1574, 1.0));
        _1688 = (((cbLight._m0[_1847].x * 0.3183098733425140380859375) * _1865) * _1866) + _1643;
        _1690 = (((cbLight._m0[_1847].y * 0.3183098733425140380859375) * _1865) * _1866) + _1645;
        _1692 = (((cbLight._m0[_1847].z * 0.3183098733425140380859375) * _1865) * _1866) + _1647;
    }
    uint _1695 = _1558 + 8u;
    float _1708 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1558].w)) * _323) * 0.949999988079071044921875);
    float _1709 = _1708 * _1708;
    float _1710 = cbLight._m0[_1558].x + _400;
    float _1711 = cbLight._m0[_1558].y + _401;
    float _1712 = cbLight._m0[_1558].z + _402;
    float _1716 = inversesqrt(dot(vec3(_1710, _1711, _1712), vec3(_1710, _1711, _1712)));
    float _1717 = _1716 * _1710;
    float _1718 = _1716 * _1711;
    float _1719 = _1716 * _1712;
    float _1720 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1558].xyz));
    float _3853 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
    float _1723 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _3864 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _1724 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _1725 = dot(vec3(_320, _321, _322), vec3(_1717, _1718, _1719));
    float _3875 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _1728 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _1729 = dot(vec3(cbLight._m0[_1558].xyz), vec3(_1717, _1718, _1719));
    float _3886 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _1733 = _1709 * _1709;
    float _1737 = ((_1728 * _1728) * (_1733 + (-1.0))) + 1.0;
    float _1748 = (exp2(log2(1.0 - (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1749 = 1.0 - _1709;
    float _1760 = (0.5 / (((_1724 * ((_1723 * _1749) + _1709)) + 9.9999999392252902907785028219223e-09) + (((_1724 * _1749) + _1709) * _1723))) * _1723;
    float _3897 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1762 = (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1733 / ((_1737 * _1737) * 3.141590118408203125));
    uint _1773 = _1558 + 9u;
    float _1784 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1596].w)) * _323) * 0.949999988079071044921875);
    float _1785 = _1784 * _1784;
    float _1786 = cbLight._m0[_1596].x + _400;
    float _1787 = cbLight._m0[_1596].y + _401;
    float _1788 = cbLight._m0[_1596].z + _402;
    float _1792 = inversesqrt(dot(vec3(_1786, _1787, _1788), vec3(_1786, _1787, _1788)));
    float _1793 = _1792 * _1786;
    float _1794 = _1792 * _1787;
    float _1795 = _1792 * _1788;
    float _1796 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1596].xyz));
    float _3908 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1799 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _1800 = dot(vec3(_320, _321, _322), vec3(_1793, _1794, _1795));
    float _3919 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1803 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _1804 = dot(vec3(cbLight._m0[_1596].xyz), vec3(_1793, _1794, _1795));
    float _3930 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1808 = _1785 * _1785;
    float _1812 = ((_1803 * _1803) * (_1808 + (-1.0))) + 1.0;
    float _1821 = (exp2(log2(1.0 - (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1822 = 1.0 - _1785;
    float _1832 = (0.5 / (((_1724 * ((_1799 * _1822) + _1785)) + 9.9999999392252902907785028219223e-09) + (((_1724 * _1822) + _1785) * _1799))) * _1799;
    float _3941 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1834 = (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_1808 / ((_1812 * _1812) * 3.141590118408203125));
    float _1844 = (((_1821 * cbLight._m0[_1773].x) * _1834) * _1581) + (((_1748 * cbLight._m0[_1695].x) * _1762) * _1592);
    float _1845 = (((_1821 * cbLight._m0[_1773].y) * _1834) * _1581) + (((_1748 * cbLight._m0[_1695].y) * _1762) * _1592);
    float _1846 = (((_1821 * cbLight._m0[_1773].z) * _1834) * _1581) + (((_1748 * cbLight._m0[_1695].z) * _1762) * _1592);
    float _1908;
    float _1910;
    float _1912;
    if (_1632)
    {
        _1908 = _1844;
        _1910 = _1845;
        _1912 = _1846;
    }
    else
    {
        uint _1914 = _1558 + 2u;
        uint _1918 = _1558 + 10u;
        float _1932 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1914].w)) * _323) * 0.949999988079071044921875);
        float _1933 = _1932 * _1932;
        float _1934 = cbLight._m0[_1914].x + _400;
        float _1935 = cbLight._m0[_1914].y + _401;
        float _1936 = cbLight._m0[_1914].z + _402;
        float _1940 = inversesqrt(dot(vec3(_1934, _1935, _1936), vec3(_1934, _1935, _1936)));
        float _1941 = _1940 * _1934;
        float _1942 = _1940 * _1935;
        float _1943 = _1940 * _1936;
        float _1944 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1914].xyz));
        float _3952 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1947 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1948 = dot(vec3(_320, _321, _322), vec3(_1941, _1942, _1943));
        float _3963 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1951 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1952 = dot(vec3(cbLight._m0[_1914].xyz), vec3(_1941, _1942, _1943));
        float _3974 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        float _1956 = _1933 * _1933;
        float _1960 = ((_1951 * _1951) * (_1956 + (-1.0))) + 1.0;
        float _1969 = (exp2(log2(1.0 - (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1970 = 1.0 - _1933;
        float _1980 = (0.5 / (((_1724 * ((_1947 * _1970) + _1933)) + 9.9999999392252902907785028219223e-09) + (((_1724 * _1970) + _1933) * _1947))) * _1947;
        float _3985 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1982 = (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1956 / ((_1960 * _1960) * 3.141590118408203125));
        float _1983 = isnan(1.0) ? _1573 : (isnan(_1573) ? 1.0 : min(_1573, 1.0));
        _1908 = (((_1969 * cbLight._m0[_1918].x) * _1982) * _1983) + _1844;
        _1910 = (((_1969 * cbLight._m0[_1918].y) * _1982) * _1983) + _1845;
        _1912 = (((_1969 * cbLight._m0[_1918].z) * _1982) * _1983) + _1846;
    }
    float _2018;
    float _2020;
    float _2022;
    if (_1650)
    {
        _2018 = _1908;
        _2020 = _1910;
        _2022 = _1912;
    }
    else
    {
        uint _2029 = _1558 + 3u;
        uint _2033 = _1558 + 11u;
        float _2047 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2029].w)) * _323) * 0.949999988079071044921875);
        float _2048 = _2047 * _2047;
        float _2049 = cbLight._m0[_2029].x + _400;
        float _2050 = cbLight._m0[_2029].y + _401;
        float _2051 = cbLight._m0[_2029].z + _402;
        float _2055 = inversesqrt(dot(vec3(_2049, _2050, _2051), vec3(_2049, _2050, _2051)));
        float _2056 = _2055 * _2049;
        float _2057 = _2055 * _2050;
        float _2058 = _2055 * _2051;
        float _2059 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_2029].xyz));
        float _4001 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2062 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _2063 = dot(vec3(_320, _321, _322), vec3(_2056, _2057, _2058));
        float _4012 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2066 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _2067 = dot(vec3(cbLight._m0[_2029].xyz), vec3(_2056, _2057, _2058));
        float _4023 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2071 = _2048 * _2048;
        float _2075 = ((_2066 * _2066) * (_2071 + (-1.0))) + 1.0;
        float _2084 = (exp2(log2(1.0 - (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2085 = 1.0 - _2048;
        float _2095 = (0.5 / (((_1724 * ((_2062 * _2085) + _2048)) + 9.9999999392252902907785028219223e-09) + (((_1724 * _2085) + _2048) * _2062))) * _2062;
        float _4034 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2097 = (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_2071 / ((_2075 * _2075) * 3.141590118408203125));
        float _2098 = isnan(1.0) ? _1574 : (isnan(_1574) ? 1.0 : min(_1574, 1.0));
        _2018 = (((_2084 * cbLight._m0[_2033].x) * _2097) * _2098) + _1908;
        _2020 = (((_2084 * cbLight._m0[_2033].y) * _2097) * _2098) + _1910;
        _2022 = (((_2084 * cbLight._m0[_2033].z) * _2097) * _2098) + _1912;
    }
    float _2233;
    float _2235;
    float _2237;
    float _2239;
    float _2241;
    float _2243;
    if (_1556.y == 0u)
    {
        float _2173 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2174 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2173;
        float _2175 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2173;
        float _2176 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2173;
        uvec4 _2188 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2189 = _2188.x;
        uint _2200 = uint((float(_2188.y) * floor(float(uint(cbSceneParam._m0[85u].y * _422) / _2189))) + floor(float(uint(cbSceneParam._m0[85u].x * _421) / _2189)));
        float _2210 = (log2(_2176 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2211 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        uint _2214 = uint(isnan(14.0) ? _2211 : (isnan(_2211) ? 14.0 : min(_2211, 14.0)));
        uvec4 _2219 = texelFetch(g_lightClusterGridBuffer, int(((_2214 << 2u) + (_2200 << 6u)) >> 2u));
        uint _2220 = _2219.x;
        uint _2221 = _2188.z;
        float _2356;
        float _2358;
        float _2360;
        float _2362;
        float _2364;
        float _2366;
        if (((((1u << ((_2221 >> 4u) & 15u)) + 4294967295u) & _2220) == 0u) || ((_2221 & 240u) == 0u))
        {
            _2356 = 0.0;
            _2358 = 0.0;
            _2360 = 0.0;
            _2362 = 0.0;
            _2364 = 0.0;
            _2366 = 0.0;
        }
        else
        {
            float _2357;
            float _2359;
            float _2361;
            float _2363;
            float _2365;
            float _2367;
            float _2518 = 0.0;
            float _2519 = 0.0;
            float _2520 = 0.0;
            float _2521 = 0.0;
            float _2522 = 0.0;
            float _2523 = 0.0;
            uint _2524 = 0u;
            uint _2533;
            bool _2534;
            for (;;)
            {
                _2533 = texelFetch(g_lightClassification, int((((_2214 << 5u) + (_2200 << 9u)) + (_2524 << 2u)) >> 2u)).x;
                _2534 = _2533 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2534)
                {
                    frontier_phi_66_pred = _2518;
                    frontier_phi_66_pred_1 = _2523;
                    frontier_phi_66_pred_2 = _2522;
                    frontier_phi_66_pred_3 = _2521;
                    frontier_phi_66_pred_4 = _2520;
                    frontier_phi_66_pred_5 = _2519;
                }
                else
                {
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    float _2667;
                    float _2668;
                    uint _2669;
                    _2663 = _2518;
                    _2664 = _2519;
                    _2665 = _2520;
                    _2666 = _2521;
                    _2667 = _2522;
                    _2668 = _2523;
                    _2669 = _2533;
                    float _2590;
                    float _2591;
                    float _2592;
                    float _2593;
                    float _2594;
                    float _2595;
                    for (;;)
                    {
                        uint _2673 = uint(findLSB(_2669)) + (_2524 << 5u);
                        uint _2670 = (_2669 + 4294967295u) & _2669;
                        uint _2675 = _2673 * 48u;
                        vec4 _2689 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2675)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 3u)).x));
                        uint _2695 = (_2673 * 48u) + 4u;
                        vec4 _2708 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2695)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 3u)).x));
                        uint _2714 = (_2673 * 48u) + 8u;
                        vec3 _2725 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2714)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 2u)).x));
                        float _2729 = _2689.x - _2174;
                        float _2730 = _2689.y - _2175;
                        float _2731 = _2689.z - _2176;
                        float _2732 = dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731));
                        float _2735 = inversesqrt(_2732);
                        float _2736 = _2735 * _2729;
                        float _2737 = _2735 * _2730;
                        float _2738 = _2735 * _2731;
                        float _2739 = dot(vec3(_442, _445, _448), vec3(_2736, _2737, _2738));
                        float _2744 = 1.0 - (_2732 * _2689.w);
                        float _4060 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
                        float _2745 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
                        float _2746 = sqrt(_2732) * _2708.w;
                        float _2749 = 1.39999997615814208984375 / (_2746 + 1.39999997615814208984375);
                        float _2750 = _2749 * _2749;
                        float _2753 = ((1.0 - _2750) * _2739) + _2750;
                        float _2756 = _2746 * _2746;
                        float _2760 = ((isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0))) * _2745) / ((_2756 * 0.699999988079071044921875) + 1.0);
                        float _2764 = (-0.0) - _2174;
                        float _2765 = (-0.0) - _2175;
                        float _2766 = (-0.0) - _2176;
                        float _2770 = inversesqrt(dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766)));
                        float _2771 = _2770 * _2764;
                        float _2772 = _2770 * _2765;
                        float _2773 = _2770 * _2766;
                        float _2781 = exp2(log2(1.0 / ((_2756 * 3.5) + 5.0)) * 0.25);
                        float _2782 = 1.0 - _502;
                        float _2789 = sqrt(1.0 - ((1.0 - (_2782 * _2782)) * (1.0 - (_2781 * _2781))));
                        float _2790 = _2789 * _2789;
                        float _2791 = _2790 * _2790;
                        float _2792 = _2771 + _2736;
                        float _2793 = _2772 + _2737;
                        float _2794 = _2773 + _2738;
                        float _2798 = inversesqrt(dot(vec3(_2792, _2793, _2794), vec3(_2792, _2793, _2794)));
                        float _2802 = dot(vec3(_442, _445, _448), vec3(_2771, _2772, _2773));
                        float _4076 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                        float _2805 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
                        float _2806 = dot(vec3(_442, _445, _448), vec3(_2798 * _2792, _2798 * _2793, _2798 * _2794));
                        float _4087 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
                        float _2809 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                        float _2813 = ((_2809 * _2809) * (_2791 + (-1.0))) + 1.0;
                        float _2814 = _2749 * _2790;
                        float _2815 = _2814 * _2814;
                        float _2818 = ((1.0 - _2815) * _2739) + _2815;
                        float _4098 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2819 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
                        float _2820 = 1.0 - _2790;
                        float _2830 = (0.5 / (((_2819 * ((_2805 * _2820) + _2790)) + 9.9999999392252902907785028219223e-09) + (((_2819 * _2820) + _2790) * _2805))) * _2819;
                        float _4109 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2841 = (((_2791 * 3.1415927410125732421875) * (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) / ((_2813 * _2813) * ((_2756 * 2.1991131305694580078125) + 3.141590118408203125))) * _2745;
                        _2593 = (_2760 * _2708.x) + _2666;
                        _2594 = (_2760 * _2708.y) + _2667;
                        _2595 = (_2760 * _2708.z) + _2668;
                        _2590 = (_2841 * _2725.x) + _2663;
                        _2591 = (_2841 * _2725.y) + _2664;
                        _2592 = (_2841 * _2725.z) + _2665;
                        if (_2670 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2663 = _2590;
                            _2664 = _2591;
                            _2665 = _2592;
                            _2666 = _2593;
                            _2667 = _2594;
                            _2668 = _2595;
                            _2669 = _2670;
                        }
                    }
                    frontier_phi_66_pred = _2590;
                    frontier_phi_66_pred_1 = _2595;
                    frontier_phi_66_pred_2 = _2594;
                    frontier_phi_66_pred_3 = _2593;
                    frontier_phi_66_pred_4 = _2592;
                    frontier_phi_66_pred_5 = _2591;
                }
                _2357 = frontier_phi_66_pred;
                _2367 = frontier_phi_66_pred_1;
                _2365 = frontier_phi_66_pred_2;
                _2363 = frontier_phi_66_pred_3;
                _2361 = frontier_phi_66_pred_4;
                _2359 = frontier_phi_66_pred_5;
                uint _2525 = _2524 + 1u;
                if (_2525 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2518 = _2357;
                    _2519 = _2359;
                    _2520 = _2361;
                    _2521 = _2363;
                    _2522 = _2365;
                    _2523 = _2367;
                    _2524 = _2525;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2356 = _2357;
            _2358 = _2359;
            _2360 = _2361;
            _2362 = _2363;
            _2364 = _2365;
            _2366 = _2367;
        }
        uvec4 _2370 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2371 = _2370.z;
        uint _2373 = (_2371 >> 8u) & 15u;
        float _2486;
        float _2488;
        float _2490;
        float _2492;
        float _2494;
        float _2496;
        if (((4294967295u << _2373) & _2220) == 0u)
        {
            _2486 = _2356;
            _2488 = _2358;
            _2490 = _2360;
            _2492 = _2362;
            _2494 = _2364;
            _2496 = _2366;
        }
        else
        {
            float _2511 = inversesqrt(dot(vec3(_2174, _2175, _2176), vec3(_2174, _2175, _2176)));
            float _2512 = _2511 * _2174;
            float _2513 = _2511 * _2175;
            float _2514 = _2511 * _2176;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2373 < ((_2371 >> 12u) & 15u))
            {
                float _2487;
                float _2489;
                float _2491;
                float _2493;
                float _2495;
                float _2497;
                float _2646 = _2356;
                float _2647 = _2358;
                float _2648 = _2360;
                float _2649 = _2362;
                float _2650 = _2364;
                float _2651 = _2366;
                uint _2652 = _2373;
                uint _2661;
                bool _2662;
                for (;;)
                {
                    _2661 = texelFetch(g_lightClassification, int((((_2214 << 5u) + (_2200 << 9u)) + (_2652 << 2u)) >> 2u)).x;
                    _2662 = _2661 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2662)
                    {
                        frontier_phi_77_pred = _2651;
                        frontier_phi_77_pred_1 = _2650;
                        frontier_phi_77_pred_2 = _2649;
                        frontier_phi_77_pred_3 = _2648;
                        frontier_phi_77_pred_4 = _2647;
                        frontier_phi_77_pred_5 = _2646;
                    }
                    else
                    {
                        float _2855;
                        float _2856;
                        float _2857;
                        float _2858;
                        float _2859;
                        float _2860;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _2868 = _2646;
                        float _2869 = _2647;
                        float _2870 = _2648;
                        float _2871 = _2649;
                        float _2872 = _2650;
                        float _2873 = _2651;
                        uint _2874 = _2661;
                        uint _2875;
                        vec4 _2900;
                        float _2901;
                        vec4 _2916;
                        vec3 _2928;
                        vec4 _2944;
                        vec4 _2960;
                        float _3007;
                        bool _3008;
                        for (;;)
                        {
                            uint _2885 = ((_2652 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2874));
                            _2875 = (_2874 + 4294967295u) & _2874;
                            uint _2887 = _2885 * 40u;
                            _2900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 3u)).x));
                            _2901 = _2900.w;
                            uint _2903 = (_2885 * 40u) + 4u;
                            _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            uint _2918 = (_2885 * 40u) + 8u;
                            _2928 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 2u)).x));
                            uint _2931 = (_2885 * 40u) + 16u;
                            _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            uint _2947 = (_2885 * 40u) + 20u;
                            _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            uint _2963 = (_2885 * 40u) + 24u;
                            vec4 _2976 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 3u)).x));
                            uint _2982 = (_2885 * 40u) + 28u;
                            vec4 _2995 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 3u)).x));
                            _3007 = fma(_2176, _2995.z, fma(_2175, _2995.y, _2995.x * _2174)) + _2995.w;
                            _3008 = !((fma(_2176, _2976.z, fma(_2175, _2976.y, _2976.x * _2174)) + _2976.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3008)
                            {
                                float _3035 = _2900.x - _2174;
                                float _3036 = _2900.y - _2175;
                                float _3037 = _2900.z - _2176;
                                float _3038 = dot(vec3(_3035, _3036, _3037), vec3(_3035, _3036, _3037));
                                float _3041 = inversesqrt(_3038);
                                float _3042 = _3041 * _3035;
                                float _3043 = _3041 * _3036;
                                float _3044 = _3041 * _3037;
                                float _3048 = 1.0 - (_3038 / (_2901 * _2901));
                                float _4120 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                                float _3049 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
                                float _3053 = sqrt(_3038) * _2916.w;
                                float _3055 = 1.39999997615814208984375 / (_3053 + 1.39999997615814208984375);
                                float _3056 = _3055 * _3055;
                                float _3059 = ((1.0 - _3056) * dot(vec3(_3042, _3043, _3044), vec3(_442, _445, _448))) + _3056;
                                float _3062 = _3053 * _3053;
                                float _3066 = (fma(_2176, _2944.z, fma(_2175, _2944.y, _2944.x * _2174)) + _2944.w) / _3007;
                                float _3067 = (fma(_2176, _2960.z, fma(_2175, _2960.y, _2960.x * _2174)) + _2960.w) / _3007;
                                float _3071 = 1.0 - dot(vec2(_3066, _3067), vec2(_3066, _3067));
                                float _4136 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                                float _3072 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                                float _3073 = _3072 * (((isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0))) * _3049) / ((_3062 * 0.699999988079071044921875) + 1.0));
                                float _3085 = exp2(log2(1.0 / ((_3062 * 3.5) + 5.0)) * 0.25);
                                float _3086 = 1.0 - _502;
                                float _3093 = sqrt(1.0 - ((1.0 - (_3086 * _3086)) * (1.0 - (_3085 * _3085))));
                                float _3094 = _3093 * _3093;
                                float _3095 = _3094 * _3094;
                                float _3096 = _3042 - _2512;
                                float _3097 = _3043 - _2513;
                                float _3098 = _3044 - _2514;
                                float _3102 = inversesqrt(dot(vec3(_3096, _3097, _3098), vec3(_3096, _3097, _3098)));
                                float _3106 = dot(vec3(_442, _445, _448), vec3((-0.0) - _2512, (-0.0) - _2513, (-0.0) - _2514));
                                float _4147 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3109 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
                                float _3110 = dot(vec3(_442, _445, _448), vec3(_3102 * _3096, _3102 * _3097, _3102 * _3098));
                                float _4158 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3113 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                                float _3117 = ((_3113 * _3113) * (_3095 + (-1.0))) + 1.0;
                                float _3118 = _3055 * _3094;
                                float _3119 = _3118 * _3118;
                                float _3125 = ((1.0 - _3119) * dot(vec3(_442, _445, _448), vec3(_3042, _3043, _3044))) + _3119;
                                float _4169 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                                float _3126 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                                float _3127 = 1.0 - _3094;
                                float _3137 = (0.5 / (((_3126 * ((_3109 * _3127) + _3094)) + 9.9999999392252902907785028219223e-09) + (((_3126 * _3127) + _3094) * _3109))) * _3126;
                                float _4180 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3147 = (_3072 * _3049) * (((_3095 * 3.1415927410125732421875) * (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) / ((_3117 * _3117) * ((_3062 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3073 * _2916.y;
                                frontier_phi_83_pred_1 = _3073 * _2916.x;
                                frontier_phi_83_pred_2 = _3147 * _2928.z;
                                frontier_phi_83_pred_3 = _3147 * _2928.y;
                                frontier_phi_83_pred_4 = _3147 * _2928.x;
                                frontier_phi_83_pred_5 = _3073 * _2916.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3155 = frontier_phi_83_pred;
                            _3154 = frontier_phi_83_pred_1;
                            _3153 = frontier_phi_83_pred_2;
                            _3152 = frontier_phi_83_pred_3;
                            _3151 = frontier_phi_83_pred_4;
                            _3156 = frontier_phi_83_pred_5;
                            _2858 = _3154 + _2871;
                            _2859 = _3155 + _2872;
                            _2860 = _3156 + _2873;
                            _2855 = _3151 + _2868;
                            _2856 = _3152 + _2869;
                            _2857 = _3153 + _2870;
                            if (_2875 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2868 = _2855;
                                _2869 = _2856;
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2859;
                                _2873 = _2860;
                                _2874 = _2875;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2860;
                        frontier_phi_77_pred_1 = _2859;
                        frontier_phi_77_pred_2 = _2858;
                        frontier_phi_77_pred_3 = _2857;
                        frontier_phi_77_pred_4 = _2856;
                        frontier_phi_77_pred_5 = _2855;
                    }
                    _2497 = frontier_phi_77_pred;
                    _2495 = frontier_phi_77_pred_1;
                    _2493 = frontier_phi_77_pred_2;
                    _2491 = frontier_phi_77_pred_3;
                    _2489 = frontier_phi_77_pred_4;
                    _2487 = frontier_phi_77_pred_5;
                    uint _2653 = _2652 + 1u;
                    if (_2653 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2646 = _2487;
                        _2647 = _2489;
                        _2648 = _2491;
                        _2649 = _2493;
                        _2650 = _2495;
                        _2651 = _2497;
                        _2652 = _2653;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2491;
                frontier_phi_58_59_ladder_1 = _2497;
                frontier_phi_58_59_ladder_2 = _2495;
                frontier_phi_58_59_ladder_3 = _2493;
                frontier_phi_58_59_ladder_4 = _2489;
                frontier_phi_58_59_ladder_5 = _2487;
            }
            else
            {
                frontier_phi_58_59_ladder = _2360;
                frontier_phi_58_59_ladder_1 = _2366;
                frontier_phi_58_59_ladder_2 = _2364;
                frontier_phi_58_59_ladder_3 = _2362;
                frontier_phi_58_59_ladder_4 = _2358;
                frontier_phi_58_59_ladder_5 = _2356;
            }
            _2486 = frontier_phi_58_59_ladder_5;
            _2488 = frontier_phi_58_59_ladder_4;
            _2490 = frontier_phi_58_59_ladder;
            _2492 = frontier_phi_58_59_ladder_3;
            _2494 = frontier_phi_58_59_ladder_2;
            _2496 = frontier_phi_58_59_ladder_1;
        }
        float _2501 = isnan(1.0) ? _486 : (isnan(_486) ? 1.0 : min(_486, 1.0));
        _2233 = (_2501 * _2492) + _1688;
        _2235 = (_2501 * _2494) + _1690;
        _2237 = (_2501 * _2496) + _1692;
        _2239 = ((_2486 * 0.039999999105930328369140625) * _2501) + _2018;
        _2241 = ((_2488 * 0.039999999105930328369140625) * _2501) + _2020;
        _2243 = ((_2490 * 0.039999999105930328369140625) * _2501) + _2022;
    }
    else
    {
        _2233 = _1688;
        _2235 = _1690;
        _2237 = _1692;
        _2239 = _2018;
        _2241 = _2020;
        _2243 = _2022;
    }
    uint _2249 = _462 + uint(cbMatDynParam._m0[0u].w);
    float _2257 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _302.x) * cbInstanceData._m0[_2249].x;
    float _2260 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _302.y) * cbInstanceData._m0[_2249].y;
    float _2263 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _302.z) * cbInstanceData._m0[_2249].z;
    float _4196 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _4207 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _4218 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _2280 = (((isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_2233 + ((isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))) * _486))) + ((_2239 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _1325)) * cbPerFrame._m0[3u].x)) + _2257;
    float _2282 = (_2260 + ((_2241 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _1325)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_2235 + ((isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0))) * _486)));
    float _2284 = (_2263 + ((_2243 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _1325)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_2237 + ((isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))) * _486)));
    float _2285 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2286 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2287 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2293 = cbMtdParam._m0[2u].x * _2257;
    float _2294 = cbMtdParam._m0[2u].y * _2260;
    float _2295 = cbMtdParam._m0[2u].z * _2263;
    float _4244 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2297 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    uint _2298 = _461 + 6u;
    float _2306 = _421 / cbSceneParam._m0[86u].x;
    float _2307 = _422 / cbSceneParam._m0[86u].y;
    vec4 _2321 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2306, _2307, (log2((isnan(cbSceneParam._m0[77u].w) ? _342 : (isnan(_342) ? cbSceneParam._m0[77u].w : min(_342, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2323 = _2321.x;
    float _2324 = _2321.y;
    float _2325 = _2321.z;
    float _2326 = _2321.w;
    float _2419;
    float _2421;
    float _2423;
    float _2425;
    if (_342 > cbSceneParam._m0[78u].w)
    {
        float _2381 = isnan(_342) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _342 : min(cbSceneParam._m0[80u].w, _342));
        float _2382 = _2381 / _342;
        float _2393 = _2382 * _393;
        float _2394 = _394 * _2382;
        float _2395 = (-0.0) - _2394;
        float _2397 = _2382 * _395;
        float _2399 = (cbSceneParam._m0[77u].w * _2395) / _2381;
        float _2400 = _2399 + cbSceneParam._m0[79u].w;
        float _2401 = cbSceneParam._m0[79u].w - _2394;
        float _2407 = sqrt(((_2393 * _2393) + (_2394 * _2394)) + (_2397 * _2397));
        float _2410 = (1.0 - (cbSceneParam._m0[77u].w / _2381)) * _2407;
        float _2415 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2417 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2603;
        if (abs((_2395 - _2399) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2603 = ((((_2400 > 0.0) ? exp2(_2415 * _2400) : (2.0 - exp2(_2417 * _2400))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2410;
        }
        else
        {
            float _2547 = 1.0 / cbSceneParam._m0[80u].x;
            float _2548 = isnan(_2401) ? _2400 : (isnan(_2400) ? _2401 : max(_2400, _2401));
            float _2549 = isnan(_2401) ? _2400 : (isnan(_2400) ? _2401 : min(_2400, _2401));
            float _2558 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : min(_2548, 0.0));
            float _2559 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : min(_2549, 0.0));
            _2603 = ((abs(_2407 / _2395) * cbSceneParam._m0[80u].y) * ((((_2558 - _2559) * 2.0) - ((exp2(_2415 * (isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0)))) - exp2(_2415 * (isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0))))) * _2547)) - ((exp2(_2417 * _2558) - exp2(_2417 * _2559)) * _2547))) + (_2410 * cbSceneParam._m0[80u].z);
        }
        vec4 _2605 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2306, _2307, 1.0), 0.0);
        float _2614 = exp2((_2603 * (-1.44269502162933349609375)) * (1.0 - _2605.w));
        float _2615 = log2(_2614);
        float _2631 = log2(_2326);
        _2419 = (exp2(_2631 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2615 * cbSceneParam._m0[78u].x)) * _2605.x) / cbSceneParam._m0[78u].x)) + _2323;
        _2421 = (exp2(_2631 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2615 * cbSceneParam._m0[78u].y)) * _2605.y) / cbSceneParam._m0[78u].y)) + _2324;
        _2423 = (exp2(_2631 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2615 * cbSceneParam._m0[78u].z)) * _2605.z) / cbSceneParam._m0[78u].z)) + _2325;
        _2425 = _2614 * _2326;
    }
    else
    {
        _2419 = _2323;
        _2421 = _2324;
        _2423 = _2325;
        _2425 = _2326;
    }
    bool _2641;
    vec4 _2435;
    vec4 _2457;
    float _2459;
    float _2463;
    float _2464;
    float _2465;
    float _2468;
    float _2471;
    float _2474;
    float _2475;
    bool _2485;
    for (;;)
    {
        _2435 = cbMatDynParam._m0[0u];
        float _2437 = roundEven(_2435.y);
        bool _2438 = _2437 == 3.0;
        float _2439 = log2(_2425);
        float _2443 = exp2(_2439 * cbSceneParam._m0[78u].x);
        float _2444 = exp2(_2439 * cbSceneParam._m0[78u].y);
        float _2445 = exp2(_2439 * cbSceneParam._m0[78u].z);
        float _2446 = _2443 * _2285;
        float _2447 = _2444 * _2286;
        float _2448 = _2445 * _2287;
        float _2455 = _409 + (-0.5);
        _2457 = cbMtdParam._m0[1u];
        _2459 = _2457.y * _2455;
        float _2462 = (_2437 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2463 = _2462 * (_2438 ? _2446 : (_2446 + (cbSceneParam._m0[72u].w * _2419)));
        _2464 = _2462 * (_2438 ? _2447 : (_2447 + (cbSceneParam._m0[72u].w * _2421)));
        _2465 = _2462 * (_2438 ? _2448 : (_2448 + (cbSceneParam._m0[72u].w * _2423)));
        _2468 = ((_2293 * _2297) * _2443) * _2462;
        _2471 = ((_2294 * _2297) * _2444) * _2462;
        _2474 = ((_2295 * _2297) * _2445) * _2462;
        _2475 = _2455 * 0.999000012874603271484375;
        _2485 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2485)
        {
            if ((cbInstanceData._m0[_461 + 7u].x + _2475) < 0.5)
            {
                _2641 = true;
                break;
            }
        }
        uint _2582 = _462 + uint(_2435.w);
        if ((cbInstanceData._m0[_2582].w < 1.0) && ((cbInstanceData._m0[_2582].w + _2475) < 0.5))
        {
            _2641 = true;
            break;
        }
        if ((_2459 + 1.0) < _2457.x)
        {
            _2641 = true;
            break;
        }
        _2641 = false;
        break;
    }
    float _2846;
    if (_2641)
    {
        discard_state = true;
        _2846 = 0.0;
    }
    else
    {
        _2846 = cbInstanceData._m0[_2298].w;
    }
    SV_Target.x = _2463;
    SV_Target.y = _2464;
    SV_Target.z = _2465;
    SV_Target.w = _2846;
    SV_Target_1.x = _2468;
    SV_Target_1.y = _2471;
    SV_Target_1.z = _2474;
    SV_Target_1.w = cbInstanceData._m0[_2298].w;
    discard_exit();
}


