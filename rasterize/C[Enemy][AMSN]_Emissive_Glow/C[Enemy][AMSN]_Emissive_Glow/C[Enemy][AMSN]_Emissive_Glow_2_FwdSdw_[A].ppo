#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _930;
float _3648;
float _3649;
float _3650;
float _3651;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _234 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _240 = _234.x * cbMtdParam._m0[9u].x;
    float _241 = _234.y * cbMtdParam._m0[9u].y;
    float _242 = _234.z * cbMtdParam._m0[9u].z;
    vec4 _254 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _256 = _254.x;
    vec4 _268 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _272 = _268.z;
    float _276 = (_268.x * 2.0) + (-1.0);
    float _278 = (_268.y * 2.0) + (-1.0);
    float _279 = dot(vec2(_276, _278), vec2(_276, _278));
    float _3660 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _285 = sqrt(1.0 - (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))));
    vec4 _307 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _321 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3671 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _322 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _330 = (((_322 * _322) * (3.0 - (_322 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _333 = fma(_285, _205 * NORMAL.x, fma(_278, _212 * TANGENT.x, (_198 * _191) * _276));
    float _336 = fma(_285, _205 * NORMAL.y, fma(_278, _212 * TANGENT.y, (_198 * _192) * _276));
    float _339 = fma(_285, _205 * NORMAL.z, fma(_278, _212 * TANGENT.z, (_198 * _193) * _276));
    float _343 = inversesqrt(dot(vec3(_333, _336, _339), vec3(_333, _336, _339)));
    float _344 = _343 * _333;
    float _345 = _343 * _336;
    float _346 = _343 * _339;
    float _3682 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _347 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _3693 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3704 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3715 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3726 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _351 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _367 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _408 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _418 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _408);
    float _419 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _408);
    float _420 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _408);
    float _424 = inversesqrt(dot(vec3(_418, _419, _420), vec3(_418, _419, _420)));
    float _425 = _418 * _424;
    float _426 = _419 * _424;
    float _427 = _420 * _424;
    vec4 _432 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _434 = _432.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _609 = sqrt(((_418 * _418) + (_419 * _419)) + (_420 * _420));
        float _615 = (cbMatDynParam._m0[5u].x * _609) + cbMatDynParam._m0[5u].y;
        float _3737 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
        float _616 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _620 = (cbMatDynParam._m0[5u].z * _609) + cbMatDynParam._m0[5u].w;
        float _3748 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) - _616)) + _616) < ((_434 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _446 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _447 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _467 = fma(_346, cbSceneParam._m0[5u].z, fma(_345, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _344));
    float _470 = fma(_346, cbSceneParam._m0[6u].z, fma(_345, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _344));
    float _473 = fma(_346, cbSceneParam._m0[7u].z, fma(_345, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _344));
    uint _486 = uint(roundEven(NORMAL.w)) * 13u;
    uint _488 = _486 + 9u;
    uint _489 = _488 + uint(cbMatDynParam._m0[0u].w);
    float _495 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0)))) * cbInstanceData._m0[_489].x;
    float _496 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0)))) * cbInstanceData._m0[_489].y;
    float _497 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0)))) * cbInstanceData._m0[_489].z;
    float _3759 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _498 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _3770 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _499 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _3781 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _500 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _501 = 1.0 - _351;
    float _502 = _498 * _501;
    float _503 = _499 * _501;
    float _504 = _500 * _501;
    float _509 = (_498 + (-0.039999999105930328369140625)) * _351;
    float _510 = (_499 + (-0.039999999105930328369140625)) * _351;
    float _511 = (_500 + (-0.039999999105930328369140625)) * _351;
    float _512 = _509 + 0.039999999105930328369140625;
    float _514 = _510 + 0.039999999105930328369140625;
    float _515 = _511 + 0.039999999105930328369140625;
    vec4 _524 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _446, cbSceneParam._m0[86u].y * _447));
    float _527 = _524.x * TEXCOORD.z;
    float _528 = dot(vec3(_344, _345, _346), vec3(_425, _426, _427));
    float _531 = _528 * 2.0;
    float _535 = (_531 * _344) - _425;
    float _536 = (_531 * _345) - _426;
    float _537 = (_531 * _346) - _427;
    float _541 = abs(dot(vec3(_425, _426, _427), vec3(_344, _345, _346)));
    float _3792 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _543 = sqrt(_347);
    float _555 = exp2((_543 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_543 * 3.0));
    float _561 = (1.0 - _555) * ((_543 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _562 = _555 * _543;
    float _590 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _929;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _654 = fma(_598, cbModelParam._m0[26u].z, fma(_594, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _590));
        float _658 = fma(_598, cbModelParam._m0[27u].z, fma(_594, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _590));
        float _662 = fma(_598, cbModelParam._m0[28u].z, fma(_594, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _590));
        float _687 = _590 + _344;
        float _688 = _594 + _345;
        float _689 = _598 + _346;
        float _699 = fma(_689, cbModelParam._m0[26u].z, fma(_688, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _687)) - _654;
        float _700 = fma(_689, cbModelParam._m0[27u].z, fma(_688, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _687)) - _658;
        float _701 = fma(_689, cbModelParam._m0[28u].z, fma(_688, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _687)) - _662;
        float _705 = inversesqrt(dot(vec3(_699, _700, _701), vec3(_699, _700, _701)));
        float _718 = ((_705 * _699) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_654 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _719 = ((_705 * _700) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_658 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _720 = ((_705 * _701) / cbModelParam._m0[34u].z) + ((((((_662 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _723 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_718, _719, _720), 0.0);
        vec4 _730 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_718, _719, _720), 0.0);
        vec4 _737 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_718, _719, _720), 0.0);
        vec4 _744 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_718, _719, _720), 0.0);
        float _757 = exp2((_723.w + (-0.5)) * 20.0) * 2.0;
        float _758 = _757 * (_723.x + (-0.5));
        float _759 = _757 * (_723.y + (-0.5));
        float _760 = _757 * (_723.z + (-0.5));
        float _767 = exp2((_730.w + (-0.5)) * 20.0) * 2.0;
        float _768 = _767 * (_730.x + (-0.5));
        float _769 = _767 * (_730.y + (-0.5));
        float _770 = _767 * (_730.z + (-0.5));
        float _777 = exp2((_737.w + (-0.5)) * 20.0) * 2.0;
        float _778 = _777 * (_737.x + (-0.5));
        float _779 = _777 * (_737.y + (-0.5));
        float _780 = _777 * (_737.z + (-0.5));
        float _787 = exp2((_744.w + (-0.5)) * 20.0) * 2.0;
        float _788 = _787 * (_744.x + (-0.5));
        float _789 = _787 * (_744.y + (-0.5));
        float _790 = _787 * (_744.z + (-0.5));
        float _791 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _792 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _793 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _794 = _758 * 0.5;
        float _795 = _768 * 0.5;
        float _796 = _778 * 0.5;
        float _797 = dot(vec3(_794, _795, _796), vec3(_794, _795, _796));
        float _802 = (_797 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_797);
        float _811 = (dot(vec3(_344, _345, _346), vec3(_802 * _794, _802 * _795, _802 * _796)) + 1.0) * 0.5;
        float _3818 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _821 = sqrt(((_795 * _795) + (_794 * _794)) + (_796 * _796)) / (_791 + 9.9999997473787516355514526367188e-06);
        float _3829 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _823 = _822 * 2.0;
        float _827 = (1.0 - _822) / (_822 + 1.0);
        float _3840 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _837 = ((((1.0 - _828) * (_823 + 2.0)) * exp2(log2(isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_823 + 1.0))) + _828) * _791;
        float _838 = _759 * 0.5;
        float _839 = _769 * 0.5;
        float _840 = _779 * 0.5;
        float _841 = dot(vec3(_838, _839, _840), vec3(_838, _839, _840));
        float _846 = (_841 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_841);
        float _854 = (dot(vec3(_344, _345, _346), vec3(_846 * _838, _846 * _839, _846 * _840)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _863 = sqrt(((_839 * _839) + (_838 * _838)) + (_840 * _840)) / (_792 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _865 = _864 * 2.0;
        float _869 = (1.0 - _864) / (_864 + 1.0);
        float _3873 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _879 = ((((1.0 - _870) * (_865 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_865 + 1.0))) + _870) * _792;
        float _880 = _760 * 0.5;
        float _881 = _770 * 0.5;
        float _882 = _780 * 0.5;
        float _883 = dot(vec3(_880, _881, _882), vec3(_880, _881, _882));
        float _888 = (_883 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_883);
        float _896 = (dot(vec3(_344, _345, _346), vec3(_888 * _880, _888 * _881, _888 * _882)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _905 = sqrt(((_881 * _881) + (_880 * _880)) + (_882 * _882)) / (_793 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _907 = _906 * 2.0;
        float _911 = (1.0 - _906) / (_906 + 1.0);
        float _3906 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _921 = ((((1.0 - _912) * (_907 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_907 + 1.0))) + _912) * _793;
        _929 = _760;
        _931 = _759;
        _932 = _758;
        _933 = _770;
        _934 = _769;
        _935 = _768;
        _936 = _780;
        _937 = _779;
        _938 = _778;
        _939 = _793;
        _940 = _792;
        _941 = _791;
        _942 = cbModelParam._m0[36u].z * (isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0)));
        _943 = cbModelParam._m0[36u].z * (isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0)));
        _944 = cbModelParam._m0[36u].z * (isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0)));
    }
    else
    {
        _929 = _930;
        _931 = _930;
        _932 = _930;
        _933 = _930;
        _934 = _930;
        _935 = _930;
        _936 = _930;
        _937 = _930;
        _938 = _930;
        _939 = _930;
        _940 = _930;
        _941 = _930;
        _942 = 0.0;
        _943 = 0.0;
        _944 = 0.0;
    }
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _973 = fma(_598, cbModelParam._m0[30u].z, fma(_594, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _590));
        float _977 = fma(_598, cbModelParam._m0[31u].z, fma(_594, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _590));
        float _981 = fma(_598, cbModelParam._m0[32u].z, fma(_594, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _590));
        float _1004 = _590 + _344;
        float _1005 = _594 + _345;
        float _1006 = _598 + _346;
        float _1016 = fma(_1006, cbModelParam._m0[30u].z, fma(_1005, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1004)) - _973;
        float _1017 = fma(_1006, cbModelParam._m0[31u].z, fma(_1005, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1004)) - _977;
        float _1018 = fma(_1006, cbModelParam._m0[32u].z, fma(_1005, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1004)) - _981;
        float _1022 = inversesqrt(dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018)));
        float _1035 = ((_1022 * _1016) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_973 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1022 * _1017) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_977 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1022 * _1018) / cbModelParam._m0[35u].z) + ((((((_981 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        float _1072 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1039.x + (-0.5));
        float _1074 = _1072 * (_1039.y + (-0.5));
        float _1075 = _1072 * (_1039.z + (-0.5));
        float _1082 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1046.x + (-0.5));
        float _1084 = _1082 * (_1046.y + (-0.5));
        float _1085 = _1082 * (_1046.z + (-0.5));
        float _1092 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1053.x + (-0.5));
        float _1094 = _1092 * (_1053.y + (-0.5));
        float _1095 = _1092 * (_1053.z + (-0.5));
        float _1102 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1060.x + (-0.5));
        float _1104 = _1102 * (_1060.y + (-0.5));
        float _1105 = _1102 * (_1060.z + (-0.5));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = _1073 * 0.5;
        float _1110 = _1083 * 0.5;
        float _1111 = _1093 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_344, _345, _346), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3947 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3958 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3969 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1136 + 1.0))) + _1141) * _1106;
        float _1151 = _1074 * 0.5;
        float _1152 = _1084 * 0.5;
        float _1153 = _1094 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(_344, _345, _346), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _3980 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3991 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _4002 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1178 + 1.0))) + _1183) * _1107;
        float _1193 = _1075 * 0.5;
        float _1194 = _1085 * 0.5;
        float _1195 = _1095 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_344, _345, _346), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _4035 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1220 + 1.0))) + _1225) * _1108;
        _1242 = _1075;
        _1243 = _1074;
        _1244 = _1073;
        _1245 = _1085;
        _1246 = _1084;
        _1247 = _1083;
        _1248 = _1095;
        _1249 = _1094;
        _1250 = _1093;
        _1251 = _1108;
        _1252 = _1107;
        _1253 = _1106;
        _1254 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
        _1255 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
        _1256 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
    }
    else
    {
        _1242 = _930;
        _1243 = _930;
        _1244 = _930;
        _1245 = _930;
        _1246 = _930;
        _1247 = _930;
        _1248 = _930;
        _1249 = _930;
        _1250 = _930;
        _1251 = _930;
        _1252 = _930;
        _1253 = _930;
        _1254 = 0.0;
        _1255 = 0.0;
        _1256 = 0.0;
    }
    float _1266 = (cbModelParam._m0[1u].x * (_1254 - _942)) + _942;
    float _1267 = (cbModelParam._m0[1u].x * (_1255 - _943)) + _943;
    float _1268 = (cbModelParam._m0[1u].x * (_1256 - _944)) + _944;
    float _1289 = fma(_1268, cbSceneParam._m0[89u].z, fma(_1267, cbSceneParam._m0[89u].y, _1266 * cbSceneParam._m0[89u].x));
    float _1292 = fma(_1268, cbSceneParam._m0[90u].z, fma(_1267, cbSceneParam._m0[90u].y, _1266 * cbSceneParam._m0[90u].x));
    float _1295 = fma(_1268, cbSceneParam._m0[91u].z, fma(_1267, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1266));
    float _1310 = _535 * 0.5;
    float _1311 = _536 * 0.5;
    float _1312 = _537 * 0.5;
    float _1313 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_1244, _1247, _1250, _1253));
    float _1316 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_1243, _1246, _1249, _1252));
    float _1319 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_1242, _1245, _1248, _1251));
    float _1353;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1326 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_929, _933, _936, _939));
        float _1330 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_931, _934, _937, _940));
        float _1334 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_932, _935, _938, _941));
        float _1341 = dot(vec4(cbModelParam._m0[39u]), vec4(_1310, _1311, _1312, 1.0));
        _1353 = dot(vec3(isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)), isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)), isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1341) ? 0.0 : (isnan(0.0) ? _1341 : max(0.0, _1341))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1353 = 1.0;
    }
    float _1364;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1355 = dot(vec4(cbModelParam._m0[40u]), vec4(_1310, _1311, _1312, 1.0));
        _1364 = dot(vec3(isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)), isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)), isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1355) ? 0.0 : (isnan(0.0) ? _1355 : max(0.0, _1355))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1364 = 1.0;
    }
    float _1368 = (_1364 * cbModelParam._m0[1u].x) + (_1353 * (1.0 - cbModelParam._m0[1u].x));
    float _1378 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _347);
    float _1379 = isnan(_1378) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1378 : min(cbModelParam._m0[25u].z, _1378));
    float _1460;
    float _1462;
    float _1464;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1427 = fma(_598, cbModelParam._m0[13u].z, fma(_594, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _590)) + cbModelParam._m0[13u].w;
        float _1431 = fma(_598, cbModelParam._m0[14u].z, fma(_594, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _590)) + cbModelParam._m0[14u].w;
        float _1435 = fma(_598, cbModelParam._m0[15u].z, fma(_594, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _590)) + cbModelParam._m0[15u].w;
        float _1438 = fma(_537, cbModelParam._m0[13u].z, fma(_536, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _535));
        float _1441 = fma(_537, cbModelParam._m0[14u].z, fma(_536, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _535));
        float _1444 = fma(_537, cbModelParam._m0[15u].z, fma(_536, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _535));
        float _1472;
        if (_1438 > 0.0)
        {
            _1472 = abs((1.0 - _1427) / _1438);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1438 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1427 + 1.0) / _1438);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1472 = frontier_phi_17_15_ladder;
        }
        float _1646;
        if (_1441 > 0.0)
        {
            _1646 = abs((1.0 - _1431) / _1441);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1431 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1646 = frontier_phi_26_22_ladder;
        }
        float _1942;
        if (_1444 > 0.0)
        {
            _1942 = abs((1.0 - _1435) / _1444);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1444 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1435 + 1.0) / _1444);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1942 = frontier_phi_38_33_ladder;
        }
        float _1944 = isnan(_1646) ? _1472 : (isnan(_1472) ? _1646 : min(_1472, _1646));
        float _1945 = isnan(_1942) ? _1944 : (isnan(_1944) ? _1942 : min(_1944, _1942));
        float _1949 = (_1945 * _1438) + _1427;
        float _1950 = (_1945 * _1441) + _1431;
        float _1951 = (_1945 * _1444) + _1435;
        float _1952 = _1945 * 9.9999997473787516355514526367188e-05;
        float _1954 = (-1.0) - _1952;
        float _1956 = _1952 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1951 > _1956) || ((_1951 < _1954) || ((_1950 > _1956) || ((_1950 < _1954) || ((_1949 < _1954) || (_1949 > _1956))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2096 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1951, cbModelParam._m0[9u].z, fma(_1950, cbModelParam._m0[9u].y, _1949 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1951, cbModelParam._m0[10u].z, fma(_1950, cbModelParam._m0[10u].y, _1949 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1951, cbModelParam._m0[11u].z, fma(_1950, cbModelParam._m0[11u].y, _1949 * cbModelParam._m0[11u].x))), _1379);
            frontier_phi_16_38_ladder = _2096.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2096.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2096.x * cbModelParam._m0[1u].y;
        }
        _1460 = frontier_phi_16_38_ladder_2;
        _1462 = frontier_phi_16_38_ladder_1;
        _1464 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1448 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_535, _536, _537), _1379);
        _1460 = _1448.x * cbModelParam._m0[1u].y;
        _1462 = _1448.y * cbModelParam._m0[1u].y;
        _1464 = _1448.z * cbModelParam._m0[1u].y;
    }
    float _1468 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _347);
    float _1469 = isnan(_1468) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1468 : min(cbModelParam._m0[25u].w, _1468));
    float _1561;
    float _1563;
    float _1565;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1525 = fma(_598, cbModelParam._m0[21u].z, fma(_594, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _590)) + cbModelParam._m0[21u].w;
        float _1529 = fma(_598, cbModelParam._m0[22u].z, fma(_594, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _590)) + cbModelParam._m0[22u].w;
        float _1533 = fma(_598, cbModelParam._m0[23u].z, fma(_594, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _590)) + cbModelParam._m0[23u].w;
        float _1536 = fma(_537, cbModelParam._m0[21u].z, fma(_536, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _535));
        float _1539 = fma(_537, cbModelParam._m0[22u].z, fma(_536, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _535));
        float _1542 = fma(_537, cbModelParam._m0[23u].z, fma(_536, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _535));
        float _1651;
        if (_1536 > 0.0)
        {
            _1651 = abs((1.0 - _1525) / _1536);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1525 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1651 = frontier_phi_28_24_ladder;
        }
        float _1969;
        if (_1539 > 0.0)
        {
            _1969 = abs((1.0 - _1529) / _1539);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1529 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1969 = frontier_phi_40_35_ladder;
        }
        float _2307;
        if (_1542 > 0.0)
        {
            _2307 = abs((1.0 - _1533) / _1542);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1533 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2307 = frontier_phi_50_47_ladder;
        }
        float _2309 = isnan(_1969) ? _1651 : (isnan(_1651) ? _1969 : min(_1651, _1969));
        float _2310 = isnan(_2307) ? _2309 : (isnan(_2309) ? _2307 : min(_2309, _2307));
        float _2314 = (_2310 * _1536) + _1525;
        float _2315 = (_2310 * _1539) + _1529;
        float _2316 = (_2310 * _1542) + _1533;
        float _2317 = _2310 * 9.9999997473787516355514526367188e-05;
        float _2318 = (-1.0) - _2317;
        float _2320 = _2317 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2316 > _2320) || ((_2316 < _2318) || ((_2315 > _2320) || ((_2315 < _2318) || ((_2314 < _2318) || (_2314 > _2320))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2438 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2316, cbModelParam._m0[17u].z, fma(_2315, cbModelParam._m0[17u].y, _2314 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2316, cbModelParam._m0[18u].z, fma(_2315, cbModelParam._m0[18u].y, _2314 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2316, cbModelParam._m0[19u].z, fma(_2315, cbModelParam._m0[19u].y, _2314 * cbModelParam._m0[19u].x))), _1469);
            frontier_phi_25_50_ladder = _2438.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2438.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2438.x * cbModelParam._m0[1u].z;
        }
        _1561 = frontier_phi_25_50_ladder_2;
        _1563 = frontier_phi_25_50_ladder_1;
        _1565 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1545 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_535, _536, _537), _1469);
        _1561 = _1545.x * cbModelParam._m0[1u].z;
        _1563 = _1545.y * cbModelParam._m0[1u].z;
        _1565 = _1545.z * cbModelParam._m0[1u].z;
    }
    float _1578 = (((_561 * _512) + _562) * _527) * ((cbModelParam._m0[1u].w * (_1561 - _1460)) + _1460);
    float _1580 = (((_561 * _514) + _562) * _527) * ((cbModelParam._m0[1u].w * (_1563 - _1462)) + _1462);
    float _1582 = (((_561 * _515) + _562) * _527) * ((cbModelParam._m0[1u].w * (_1565 - _1464)) + _1464);
    float _1585 = fma(_1582, cbSceneParam._m0[89u].z, fma(_1580, cbSceneParam._m0[89u].y, _1578 * cbSceneParam._m0[89u].x));
    float _1588 = fma(_1582, cbSceneParam._m0[90u].z, fma(_1580, cbSceneParam._m0[90u].y, _1578 * cbSceneParam._m0[90u].x));
    float _1591 = fma(_1582, cbSceneParam._m0[91u].z, fma(_1580, cbSceneParam._m0[91u].y, _1578 * cbSceneParam._m0[91u].x));
    float _1625 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1629 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1633 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1637 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1638 = _1625 / _1637;
    float _1639 = _1629 / _1637;
    float _1640 = _1633 / _1637;
    float _1787;
    float _1788;
    float _1789;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1667 = ((uint(_1640 > cbSceneParam._m0[59u].y) + uint(_1640 > cbSceneParam._m0[59u].x)) + uint(_1640 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1668 = _1667 + 43u;
        uint _1676 = _1667 + 44u;
        uint _1684 = _1667 + 45u;
        uint _1692 = _1667 + 46u;
        float _1703 = fma(_1637, cbSceneParam._m0[_1668].w, fma(_1633, cbSceneParam._m0[_1668].z, fma(_1629, cbSceneParam._m0[_1668].y, _1625 * cbSceneParam._m0[_1668].x)));
        float _1707 = fma(_1637, cbSceneParam._m0[_1676].w, fma(_1633, cbSceneParam._m0[_1676].z, fma(_1629, cbSceneParam._m0[_1676].y, _1625 * cbSceneParam._m0[_1676].x)));
        float _1715 = fma(_1637, cbSceneParam._m0[_1692].w, fma(_1633, cbSceneParam._m0[_1692].z, fma(_1629, cbSceneParam._m0[_1692].y, _1625 * cbSceneParam._m0[_1692].x)));
        float _1720 = cbSceneParam._m0[33u].z * _1715;
        float _1722 = cbSceneParam._m0[33u].w * _1715;
        float _1725 = fma(_1637, cbSceneParam._m0[_1684].w, fma(_1633, cbSceneParam._m0[_1684].z, fma(_1629, cbSceneParam._m0[_1684].y, _1625 * cbSceneParam._m0[_1684].x))) / _1715;
        float _1773 = (cbSceneParam._m0[33u].x - sqrt(((_1639 * _1639) + (_1638 * _1638)) + (_1640 * _1640))) * cbSceneParam._m0[33u].y;
        float _4161 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1780 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1720 + _1703) / _1715, (_1722 + _1707) / _1715), _1725), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1722 + _1703) / _1715, (_1707 - _1720) / _1715), _1725), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1703 - _1720) / _1715, (_1707 - _1722) / _1715), _1725), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1703 - _1722) / _1715, (_1720 + _1707) / _1715), _1725), 0.0)).x), vec4(0.25)));
        _1787 = 1.0 - (_1780 * cbSceneParam._m0[34u].x);
        _1788 = 1.0 - (_1780 * cbSceneParam._m0[34u].y);
        _1789 = 1.0 - (_1780 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1787 = 1.0;
        _1788 = 1.0;
        _1789 = 1.0;
    }
    float _1853;
    float _1855;
    float _1857;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1841 = fma(_1637, cbSceneParam._m0[63u].w, fma(_1633, cbSceneParam._m0[63u].z, fma(_1629, cbSceneParam._m0[63u].y, _1625 * cbSceneParam._m0[63u].x)));
        float _1842 = fma(_1637, cbSceneParam._m0[60u].w, fma(_1633, cbSceneParam._m0[60u].z, fma(_1629, cbSceneParam._m0[60u].y, _1625 * cbSceneParam._m0[60u].x))) / _1841;
        float _1843 = fma(_1637, cbSceneParam._m0[61u].w, fma(_1633, cbSceneParam._m0[61u].z, fma(_1629, cbSceneParam._m0[61u].y, _1625 * cbSceneParam._m0[61u].x))) / _1841;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1842 >= cbSceneParam._m0[64u].x) && (_1843 >= cbSceneParam._m0[64u].y)) && (_1842 <= cbSceneParam._m0[64u].z)) && (_1843 <= cbSceneParam._m0[64u].w))
        {
            float _1982 = fma(_1637, cbSceneParam._m0[62u].w, fma(_1633, cbSceneParam._m0[62u].z, fma(_1629, cbSceneParam._m0[62u].y, _1625 * cbSceneParam._m0[62u].x))) / _1841;
            float _1986 = isnan(cbSceneParam._m0[41u].w) ? _1982 : (isnan(_1982) ? cbSceneParam._m0[41u].w : max(_1982, cbSceneParam._m0[41u].w));
            float _2029 = (cbSceneParam._m0[33u].x - sqrt(((_1639 * _1639) + (_1638 * _1638)) + (_1640 * _1640))) * cbSceneParam._m0[33u].y;
            float _4177 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
            float _2036 = (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1842, cbSceneParam._m0[33u].w + _1843), _1986), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1842, _1843 - cbSceneParam._m0[33u].z), _1986), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1842 - cbSceneParam._m0[33u].z, _1843 - cbSceneParam._m0[33u].w), _1986), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1842 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1843), _1986), 0.0)).x), vec4(0.25)));
            float _2040 = 1.0 - (_2036 * cbSceneParam._m0[34u].x);
            float _2041 = 1.0 - (_2036 * cbSceneParam._m0[34u].y);
            float _2042 = 1.0 - (_2036 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2042) ? _1789 : (isnan(_1789) ? _2042 : min(_1789, _2042));
            frontier_phi_37_36_ladder_1 = isnan(_2041) ? _1788 : (isnan(_1788) ? _2041 : min(_1788, _2041));
            frontier_phi_37_36_ladder_2 = isnan(_2040) ? _1787 : (isnan(_1787) ? _2040 : min(_1787, _2040));
        }
        else
        {
            frontier_phi_37_36_ladder = _1789;
            frontier_phi_37_36_ladder_1 = _1788;
            frontier_phi_37_36_ladder_2 = _1787;
        }
        _1853 = frontier_phi_37_36_ladder_2;
        _1855 = frontier_phi_37_36_ladder_1;
        _1857 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1853 = _1787;
        _1855 = _1788;
        _1857 = _1789;
    }
    uvec4 _1862 = floatBitsToUint(cbInstanceData._m0[_486 + 5u]);
    uint _1864 = _1862.x * 14u;
    uint _1865 = _1864 + 13u;
    float _1872 = _527 + (-1.0);
    float _1877 = (cbLight._m0[_1865].x * _1872) + 1.0;
    float _1878 = (cbLight._m0[_1865].y * _1872) + 1.0;
    float _1879 = (cbLight._m0[_1865].z * _1872) + 1.0;
    float _1880 = (cbLight._m0[_1865].w * _1872) + 1.0;
    uint _1881 = _1864 + 5u;
    float _1887 = isnan(1.0) ? _1878 : (isnan(_1878) ? 1.0 : min(_1878, 1.0));
    uint _1891 = _1864 + 4u;
    float _1901 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
    uint _1905 = _1864 | 1u;
    float _1916 = dot(vec3(cbLight._m0[_1864].xyz), vec3(_344, _345, _346));
    float _1919 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_344, _345, _346));
    float _4213 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _4224 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1924 = (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * 0.3183098733425140380859375;
    float _1926 = (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * 0.3183098733425140380859375;
    float _1933 = ((cbLight._m0[_1881].x * _1887) * _1926) + (((cbLight._m0[_1891].x * _1853) * _1901) * _1924);
    float _1934 = ((_1887 * cbLight._m0[_1881].y) * _1926) + (((cbLight._m0[_1891].y * _1855) * _1901) * _1924);
    float _1935 = ((_1887 * cbLight._m0[_1881].z) * _1926) + (((cbLight._m0[_1891].z * _1857) * _1901) * _1924);
    uvec4 _1939 = floatBitsToUint(cbLight._m0[_1864 + 12u]);
    bool _1941 = _1939.x == 0u;
    float _2043;
    float _2045;
    float _2047;
    if (_1941)
    {
        _2043 = _1933;
        _2045 = _1934;
        _2047 = _1935;
    }
    else
    {
        uint _2051 = _1864 + 6u;
        float _2067 = (dot(vec3(cbLight._m0[_1864 + 2u].xyz), vec3(_344, _345, _346)) * 0.5) + 0.5;
        float _2068 = _2067 * _2067;
        float _4235 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2069 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2070 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
        _2043 = (((cbLight._m0[_2051].x * 0.3183098733425140380859375) * _2069) * _2070) + _1933;
        _2045 = (((cbLight._m0[_2051].y * 0.3183098733425140380859375) * _2069) * _2070) + _1934;
        _2047 = (((cbLight._m0[_2051].z * 0.3183098733425140380859375) * _2069) * _2070) + _1935;
    }
    bool _2050 = _1939.y == 0u;
    float _2105;
    float _2107;
    float _2109;
    if (_2050)
    {
        _2105 = _2043;
        _2107 = _2045;
        _2109 = _2047;
    }
    else
    {
        uint _2278 = _1864 + 7u;
        float _2294 = (dot(vec3(cbLight._m0[_1864 + 3u].xyz), vec3(_344, _345, _346)) * 0.5) + 0.5;
        float _2295 = _2294 * _2294;
        float _4251 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2296 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2297 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
        _2105 = (((cbLight._m0[_2278].x * 0.3183098733425140380859375) * _2296) * _2297) + _2043;
        _2107 = (((cbLight._m0[_2278].y * 0.3183098733425140380859375) * _2296) * _2297) + _2045;
        _2109 = (((cbLight._m0[_2278].z * 0.3183098733425140380859375) * _2296) * _2297) + _2047;
    }
    uint _2112 = _1864 + 8u;
    float _2125 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1864].w)) * _347) * 0.949999988079071044921875);
    float _2126 = _2125 * _2125;
    float _2127 = cbLight._m0[_1864].x + _425;
    float _2128 = cbLight._m0[_1864].y + _426;
    float _2129 = cbLight._m0[_1864].z + _427;
    float _2133 = inversesqrt(dot(vec3(_2127, _2128, _2129), vec3(_2127, _2128, _2129)));
    float _2134 = _2133 * _2127;
    float _2135 = _2133 * _2128;
    float _2136 = _2133 * _2129;
    float _2137 = dot(vec3(_344, _345, _346), vec3(cbLight._m0[_1864].xyz));
    float _4267 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2140 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _4278 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _2141 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _2142 = dot(vec3(_344, _345, _346), vec3(_2134, _2135, _2136));
    float _4289 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2145 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _2146 = dot(vec3(cbLight._m0[_1864].xyz), vec3(_2134, _2135, _2136));
    float _4300 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2150 = _2126 * _2126;
    float _2154 = ((_2145 * _2145) * (_2150 + (-1.0))) + 1.0;
    float _2162 = exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0);
    float _2163 = 0.959999978542327880859375 - _509;
    float _2165 = 0.959999978542327880859375 - _510;
    float _2166 = 0.959999978542327880859375 - _511;
    float _2173 = 1.0 - _2126;
    float _2184 = (0.5 / (((_2141 * ((_2140 * _2173) + _2126)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2173) + _2126) * _2140))) * _2140;
    float _4311 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2186 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2150 / ((_2154 * _2154) * 3.141590118408203125));
    uint _2200 = _1864 + 9u;
    float _2211 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1905].w)) * _347) * 0.949999988079071044921875);
    float _2212 = _2211 * _2211;
    float _2213 = cbLight._m0[_1905].x + _425;
    float _2214 = cbLight._m0[_1905].y + _426;
    float _2215 = cbLight._m0[_1905].z + _427;
    float _2219 = inversesqrt(dot(vec3(_2213, _2214, _2215), vec3(_2213, _2214, _2215)));
    float _2220 = _2219 * _2213;
    float _2221 = _2219 * _2214;
    float _2222 = _2219 * _2215;
    float _2223 = dot(vec3(_344, _345, _346), vec3(cbLight._m0[_1905].xyz));
    float _4322 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2226 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _2227 = dot(vec3(_344, _345, _346), vec3(_2220, _2221, _2222));
    float _4333 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2230 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2231 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_2220, _2221, _2222));
    float _4344 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2235 = _2212 * _2212;
    float _2239 = ((_2230 * _2230) * (_2235 + (-1.0))) + 1.0;
    float _2246 = exp2(log2(1.0 - (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) * 5.0);
    float _2253 = 1.0 - _2212;
    float _2263 = (0.5 / (((_2141 * ((_2226 * _2253) + _2212)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2253) + _2212) * _2226))) * _2226;
    float _4355 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2265 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2235 / ((_2239 * _2239) * 3.141590118408203125));
    float _2275 = (((((_2246 * _2163) + _512) * cbLight._m0[_2200].x) * _2265) * _1887) + ((((cbLight._m0[_2112].x * _1853) * ((_2162 * _2163) + _512)) * _2186) * _1901);
    float _2276 = (((((_2246 * _2165) + _514) * cbLight._m0[_2200].y) * _2265) * _1887) + ((((cbLight._m0[_2112].y * _1855) * ((_2162 * _2165) + _514)) * _2186) * _1901);
    float _2277 = (((((_2246 * _2166) + _515) * cbLight._m0[_2200].z) * _2265) * _1887) + ((((cbLight._m0[_2112].z * _1857) * ((_2162 * _2166) + _515)) * _2186) * _1901);
    float _2333;
    float _2335;
    float _2337;
    if (_1941)
    {
        _2333 = _2275;
        _2335 = _2276;
        _2337 = _2277;
    }
    else
    {
        uint _2339 = _1864 + 2u;
        uint _2343 = _1864 + 10u;
        float _2357 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2339].w)) * _347) * 0.949999988079071044921875);
        float _2358 = _2357 * _2357;
        float _2359 = cbLight._m0[_2339].x + _425;
        float _2360 = cbLight._m0[_2339].y + _426;
        float _2361 = cbLight._m0[_2339].z + _427;
        float _2365 = inversesqrt(dot(vec3(_2359, _2360, _2361), vec3(_2359, _2360, _2361)));
        float _2366 = _2365 * _2359;
        float _2367 = _2365 * _2360;
        float _2368 = _2365 * _2361;
        float _2369 = dot(vec3(_344, _345, _346), vec3(cbLight._m0[_2339].xyz));
        float _4366 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2372 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _2373 = dot(vec3(_344, _345, _346), vec3(_2366, _2367, _2368));
        float _4377 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2376 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2377 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_2366, _2367, _2368));
        float _4388 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2381 = _2358 * _2358;
        float _2385 = ((_2376 * _2376) * (_2381 + (-1.0))) + 1.0;
        float _2392 = exp2(log2(1.0 - (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) * 5.0);
        float _2399 = 1.0 - _2358;
        float _2409 = (0.5 / (((_2141 * ((_2372 * _2399) + _2358)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2399) + _2358) * _2372))) * _2372;
        float _4399 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2411 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2381 / ((_2385 * _2385) * 3.141590118408203125));
        float _2412 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
        _2333 = (((((_2392 * _2163) + _512) * cbLight._m0[_2343].x) * _2411) * _2412) + _2275;
        _2335 = (((((_2392 * _2165) + _514) * cbLight._m0[_2343].y) * _2411) * _2412) + _2276;
        _2337 = (((((_2392 * _2166) + _515) * cbLight._m0[_2343].z) * _2411) * _2412) + _2277;
    }
    float _2443;
    float _2445;
    float _2447;
    if (_2050)
    {
        _2443 = _2333;
        _2445 = _2335;
        _2447 = _2337;
    }
    else
    {
        uint _2454 = _1864 + 3u;
        uint _2458 = _1864 + 11u;
        float _2472 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2454].w)) * _347) * 0.949999988079071044921875);
        float _2473 = _2472 * _2472;
        float _2474 = cbLight._m0[_2454].x + _425;
        float _2475 = cbLight._m0[_2454].y + _426;
        float _2476 = cbLight._m0[_2454].z + _427;
        float _2480 = inversesqrt(dot(vec3(_2474, _2475, _2476), vec3(_2474, _2475, _2476)));
        float _2481 = _2480 * _2474;
        float _2482 = _2480 * _2475;
        float _2483 = _2480 * _2476;
        float _2484 = dot(vec3(_344, _345, _346), vec3(cbLight._m0[_2454].xyz));
        float _4415 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2487 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2488 = dot(vec3(_344, _345, _346), vec3(_2481, _2482, _2483));
        float _4426 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2491 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2492 = dot(vec3(cbLight._m0[_2454].xyz), vec3(_2481, _2482, _2483));
        float _4437 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2496 = _2473 * _2473;
        float _2500 = ((_2491 * _2491) * (_2496 + (-1.0))) + 1.0;
        float _2507 = exp2(log2(1.0 - (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) * 5.0);
        float _2514 = 1.0 - _2473;
        float _2524 = (0.5 / (((_2141 * ((_2487 * _2514) + _2473)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2514) + _2473) * _2487))) * _2487;
        float _4448 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2526 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2496 / ((_2500 * _2500) * 3.141590118408203125));
        float _2527 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
        _2443 = (((((_2507 * _2163) + _512) * cbLight._m0[_2458].x) * _2526) * _2527) + _2333;
        _2445 = (((((_2507 * _2165) + _514) * cbLight._m0[_2458].y) * _2526) * _2527) + _2335;
        _2447 = (((((_2507 * _2166) + _515) * cbLight._m0[_2458].z) * _2526) * _2527) + _2337;
    }
    float _2593;
    float _2595;
    float _2597;
    float _2599;
    float _2601;
    float _2603;
    if (_1862.y == 0u)
    {
        uvec4 _2548 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2549 = _2548.x;
        uint _2560 = uint((float(_2548.y) * floor(float(uint(cbSceneParam._m0[85u].y * _447) / _2549))) + floor(float(uint(cbSceneParam._m0[85u].x * _446) / _2549)));
        float _2570 = (log2(_1640 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2571 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        uint _2574 = uint(isnan(14.0) ? _2571 : (isnan(_2571) ? 14.0 : min(_2571, 14.0)));
        uvec4 _2579 = texelFetch(g_lightClusterGridBuffer, int(((_2574 << 2u) + (_2560 << 6u)) >> 2u));
        uint _2580 = _2579.x;
        uint _2581 = _2548.z;
        float _2698;
        float _2700;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        if (((((1u << ((_2581 >> 4u) & 15u)) + 4294967295u) & _2580) == 0u) || ((_2581 & 240u) == 0u))
        {
            _2698 = 0.0;
            _2700 = 0.0;
            _2702 = 0.0;
            _2704 = 0.0;
            _2706 = 0.0;
            _2708 = 0.0;
        }
        else
        {
            float _2699;
            float _2701;
            float _2703;
            float _2705;
            float _2707;
            float _2709;
            float _2860 = 0.0;
            float _2861 = 0.0;
            float _2862 = 0.0;
            float _2863 = 0.0;
            float _2864 = 0.0;
            float _2865 = 0.0;
            uint _2866 = 0u;
            uint _2875;
            bool _2876;
            for (;;)
            {
                _2875 = texelFetch(g_lightClassification, int((((_2574 << 5u) + (_2560 << 9u)) + (_2866 << 2u)) >> 2u)).x;
                _2876 = _2875 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2876)
                {
                    frontier_phi_71_pred = _2865;
                    frontier_phi_71_pred_1 = _2864;
                    frontier_phi_71_pred_2 = _2863;
                    frontier_phi_71_pred_3 = _2862;
                    frontier_phi_71_pred_4 = _2861;
                    frontier_phi_71_pred_5 = _2860;
                }
                else
                {
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    uint _3011;
                    _3005 = _2860;
                    _3006 = _2861;
                    _3007 = _2862;
                    _3008 = _2863;
                    _3009 = _2864;
                    _3010 = _2865;
                    _3011 = _2875;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    for (;;)
                    {
                        uint _3015 = uint(findLSB(_3011)) + (_2866 << 5u);
                        uint _3012 = (_3011 + 4294967295u) & _3011;
                        uint _3017 = _3015 * 48u;
                        vec4 _3031 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3017)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 3u)).x));
                        uint _3037 = (_3015 * 48u) + 4u;
                        vec4 _3050 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3037)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 3u)).x));
                        uint _3056 = (_3015 * 48u) + 8u;
                        vec3 _3067 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3056)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 2u)).x));
                        float _3071 = _3031.x - _1638;
                        float _3072 = _3031.y - _1639;
                        float _3073 = _3031.z - _1640;
                        float _3074 = dot(vec3(_3071, _3072, _3073), vec3(_3071, _3072, _3073));
                        float _3077 = inversesqrt(_3074);
                        float _3078 = _3077 * _3071;
                        float _3079 = _3077 * _3072;
                        float _3080 = _3077 * _3073;
                        float _3081 = dot(vec3(_467, _470, _473), vec3(_3078, _3079, _3080));
                        float _3086 = 1.0 - (_3074 * _3031.w);
                        float _4474 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                        float _3087 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                        float _3088 = sqrt(_3074) * _3050.w;
                        float _3091 = 1.39999997615814208984375 / (_3088 + 1.39999997615814208984375);
                        float _3092 = _3091 * _3091;
                        float _3095 = ((1.0 - _3092) * _3081) + _3092;
                        float _3098 = _3088 * _3088;
                        float _3102 = ((isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0))) * _3087) / ((_3098 * 0.699999988079071044921875) + 1.0);
                        float _3106 = (-0.0) - _1638;
                        float _3107 = (-0.0) - _1639;
                        float _3108 = (-0.0) - _1640;
                        float _3112 = inversesqrt(dot(vec3(_3106, _3107, _3108), vec3(_3106, _3107, _3108)));
                        float _3113 = _3112 * _3106;
                        float _3114 = _3112 * _3107;
                        float _3115 = _3112 * _3108;
                        float _3122 = exp2(log2(1.0 / ((_3098 * 3.5) + 5.0)) * 0.25);
                        float _3123 = 1.0 - _543;
                        float _3130 = sqrt(1.0 - ((1.0 - (_3123 * _3123)) * (1.0 - (_3122 * _3122))));
                        float _3131 = _3130 * _3130;
                        float _3132 = _3131 * _3131;
                        float _3133 = _3113 + _3078;
                        float _3134 = _3114 + _3079;
                        float _3135 = _3115 + _3080;
                        float _3139 = inversesqrt(dot(vec3(_3133, _3134, _3135), vec3(_3133, _3134, _3135)));
                        float _3143 = dot(vec3(_467, _470, _473), vec3(_3113, _3114, _3115));
                        float _4490 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3146 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                        float _3147 = dot(vec3(_467, _470, _473), vec3(_3139 * _3133, _3139 * _3134, _3139 * _3135));
                        float _4501 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3150 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                        float _3154 = ((_3150 * _3150) * (_3132 + (-1.0))) + 1.0;
                        float _3155 = _3091 * _3131;
                        float _3156 = _3155 * _3155;
                        float _3159 = ((1.0 - _3156) * _3081) + _3156;
                        float _4512 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                        float _3160 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                        float _3161 = 1.0 - _3131;
                        float _3171 = (0.5 / (((_3160 * ((_3146 * _3161) + _3131)) + 9.9999999392252902907785028219223e-09) + (((_3160 * _3161) + _3131) * _3146))) * _3160;
                        float _4523 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3182 = (((_3132 * 3.1415927410125732421875) * (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) / ((_3154 * _3154) * ((_3098 * 2.1991131305694580078125) + 3.141590118408203125))) * _3087;
                        _2935 = (_3102 * _3050.x) + _3008;
                        _2936 = (_3102 * _3050.y) + _3009;
                        _2937 = (_3102 * _3050.z) + _3010;
                        _2932 = (_3182 * _3067.x) + _3005;
                        _2933 = (_3182 * _3067.y) + _3006;
                        _2934 = (_3182 * _3067.z) + _3007;
                        if (_3012 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3005 = _2932;
                            _3006 = _2933;
                            _3007 = _2934;
                            _3008 = _2935;
                            _3009 = _2936;
                            _3010 = _2937;
                            _3011 = _3012;
                        }
                    }
                    frontier_phi_71_pred = _2937;
                    frontier_phi_71_pred_1 = _2936;
                    frontier_phi_71_pred_2 = _2935;
                    frontier_phi_71_pred_3 = _2934;
                    frontier_phi_71_pred_4 = _2933;
                    frontier_phi_71_pred_5 = _2932;
                }
                _2709 = frontier_phi_71_pred;
                _2707 = frontier_phi_71_pred_1;
                _2705 = frontier_phi_71_pred_2;
                _2703 = frontier_phi_71_pred_3;
                _2701 = frontier_phi_71_pred_4;
                _2699 = frontier_phi_71_pred_5;
                uint _2867 = _2866 + 1u;
                if (_2867 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2860 = _2699;
                    _2861 = _2701;
                    _2862 = _2703;
                    _2863 = _2705;
                    _2864 = _2707;
                    _2865 = _2709;
                    _2866 = _2867;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2698 = _2699;
            _2700 = _2701;
            _2702 = _2703;
            _2704 = _2705;
            _2706 = _2707;
            _2708 = _2709;
        }
        uvec4 _2712 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2713 = _2712.z;
        uint _2715 = (_2713 >> 8u) & 15u;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        if (((4294967295u << _2715) & _2580) == 0u)
        {
            _2828 = _2698;
            _2830 = _2700;
            _2832 = _2702;
            _2834 = _2704;
            _2836 = _2706;
            _2838 = _2708;
        }
        else
        {
            float _2853 = inversesqrt(dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640)));
            float _2854 = _2853 * _1638;
            float _2855 = _2853 * _1639;
            float _2856 = _2853 * _1640;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2715 < ((_2713 >> 12u) & 15u))
            {
                float _2829;
                float _2831;
                float _2833;
                float _2835;
                float _2837;
                float _2839;
                float _2988 = _2698;
                float _2989 = _2700;
                float _2990 = _2702;
                float _2991 = _2704;
                float _2992 = _2706;
                float _2993 = _2708;
                uint _2994 = _2715;
                uint _3003;
                bool _3004;
                for (;;)
                {
                    _3003 = texelFetch(g_lightClassification, int((((_2574 << 5u) + (_2560 << 9u)) + (_2994 << 2u)) >> 2u)).x;
                    _3004 = _3003 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3004)
                    {
                        frontier_phi_82_pred = _2993;
                        frontier_phi_82_pred_1 = _2992;
                        frontier_phi_82_pred_2 = _2991;
                        frontier_phi_82_pred_3 = _2990;
                        frontier_phi_82_pred_4 = _2989;
                        frontier_phi_82_pred_5 = _2988;
                    }
                    else
                    {
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3209 = _2988;
                        float _3210 = _2989;
                        float _3211 = _2990;
                        float _3212 = _2991;
                        float _3213 = _2992;
                        float _3214 = _2993;
                        uint _3215 = _3003;
                        uint _3216;
                        vec4 _3241;
                        float _3242;
                        vec4 _3257;
                        vec3 _3269;
                        vec4 _3285;
                        vec4 _3301;
                        float _3348;
                        bool _3349;
                        for (;;)
                        {
                            uint _3226 = ((_2994 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3215));
                            _3216 = (_3215 + 4294967295u) & _3215;
                            uint _3228 = _3226 * 40u;
                            _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            _3242 = _3241.w;
                            uint _3244 = (_3226 * 40u) + 4u;
                            _3257 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 3u)).x));
                            uint _3259 = (_3226 * 40u) + 8u;
                            _3269 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x));
                            uint _3272 = (_3226 * 40u) + 16u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            uint _3288 = (_3226 * 40u) + 20u;
                            _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3304 = (_3226 * 40u) + 24u;
                            vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            uint _3323 = (_3226 * 40u) + 28u;
                            vec4 _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            _3348 = fma(_1640, _3336.z, fma(_1639, _3336.y, _3336.x * _1638)) + _3336.w;
                            _3349 = !((fma(_1640, _3317.z, fma(_1639, _3317.y, _3317.x * _1638)) + _3317.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3349)
                            {
                                float _3376 = _3241.x - _1638;
                                float _3377 = _3241.y - _1639;
                                float _3378 = _3241.z - _1640;
                                float _3379 = dot(vec3(_3376, _3377, _3378), vec3(_3376, _3377, _3378));
                                float _3382 = inversesqrt(_3379);
                                float _3383 = _3382 * _3376;
                                float _3384 = _3382 * _3377;
                                float _3385 = _3382 * _3378;
                                float _3389 = 1.0 - (_3379 / (_3242 * _3242));
                                float _4534 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3390 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                                float _3394 = sqrt(_3379) * _3257.w;
                                float _3396 = 1.39999997615814208984375 / (_3394 + 1.39999997615814208984375);
                                float _3397 = _3396 * _3396;
                                float _3400 = ((1.0 - _3397) * dot(vec3(_3383, _3384, _3385), vec3(_467, _470, _473))) + _3397;
                                float _3403 = _3394 * _3394;
                                float _3407 = (fma(_1640, _3285.z, fma(_1639, _3285.y, _3285.x * _1638)) + _3285.w) / _3348;
                                float _3408 = (fma(_1640, _3301.z, fma(_1639, _3301.y, _3301.x * _1638)) + _3301.w) / _3348;
                                float _3412 = 1.0 - dot(vec2(_3407, _3408), vec2(_3407, _3408));
                                float _4550 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3413 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                                float _3414 = _3413 * (((isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0))) * _3390) / ((_3403 * 0.699999988079071044921875) + 1.0));
                                float _3426 = exp2(log2(1.0 / ((_3403 * 3.5) + 5.0)) * 0.25);
                                float _3427 = 1.0 - _543;
                                float _3434 = sqrt(1.0 - ((1.0 - (_3427 * _3427)) * (1.0 - (_3426 * _3426))));
                                float _3435 = _3434 * _3434;
                                float _3436 = _3435 * _3435;
                                float _3437 = _3383 - _2854;
                                float _3438 = _3384 - _2855;
                                float _3439 = _3385 - _2856;
                                float _3443 = inversesqrt(dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439)));
                                float _3447 = dot(vec3(_467, _470, _473), vec3((-0.0) - _2854, (-0.0) - _2855, (-0.0) - _2856));
                                float _4561 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3450 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3451 = dot(vec3(_467, _470, _473), vec3(_3443 * _3437, _3443 * _3438, _3443 * _3439));
                                float _4572 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3454 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3458 = ((_3454 * _3454) * (_3436 + (-1.0))) + 1.0;
                                float _3459 = _3396 * _3435;
                                float _3460 = _3459 * _3459;
                                float _3466 = ((1.0 - _3460) * dot(vec3(_467, _470, _473), vec3(_3383, _3384, _3385))) + _3460;
                                float _4583 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3467 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3468 = 1.0 - _3435;
                                float _3478 = (0.5 / (((_3467 * ((_3450 * _3468) + _3435)) + 9.9999999392252902907785028219223e-09) + (((_3467 * _3468) + _3435) * _3450))) * _3467;
                                float _4594 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3488 = (_3413 * _3390) * (((_3436 * 3.1415927410125732421875) * (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0)))) / ((_3458 * _3458) * ((_3403 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3414 * _3257.z;
                                frontier_phi_88_pred_1 = _3414 * _3257.y;
                                frontier_phi_88_pred_2 = _3414 * _3257.x;
                                frontier_phi_88_pred_3 = _3488 * _3269.z;
                                frontier_phi_88_pred_4 = _3488 * _3269.y;
                                frontier_phi_88_pred_5 = _3488 * _3269.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3497 = frontier_phi_88_pred;
                            _3496 = frontier_phi_88_pred_1;
                            _3495 = frontier_phi_88_pred_2;
                            _3494 = frontier_phi_88_pred_3;
                            _3493 = frontier_phi_88_pred_4;
                            _3492 = frontier_phi_88_pred_5;
                            _3199 = _3495 + _3212;
                            _3200 = _3496 + _3213;
                            _3201 = _3497 + _3214;
                            _3196 = _3492 + _3209;
                            _3197 = _3493 + _3210;
                            _3198 = _3494 + _3211;
                            if (_3216 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3216;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3201;
                        frontier_phi_82_pred_1 = _3200;
                        frontier_phi_82_pred_2 = _3199;
                        frontier_phi_82_pred_3 = _3198;
                        frontier_phi_82_pred_4 = _3197;
                        frontier_phi_82_pred_5 = _3196;
                    }
                    _2839 = frontier_phi_82_pred;
                    _2837 = frontier_phi_82_pred_1;
                    _2835 = frontier_phi_82_pred_2;
                    _2833 = frontier_phi_82_pred_3;
                    _2831 = frontier_phi_82_pred_4;
                    _2829 = frontier_phi_82_pred_5;
                    uint _2995 = _2994 + 1u;
                    if (_2995 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2988 = _2829;
                        _2989 = _2831;
                        _2990 = _2833;
                        _2991 = _2835;
                        _2992 = _2837;
                        _2993 = _2839;
                        _2994 = _2995;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2835;
                frontier_phi_63_64_ladder_1 = _2839;
                frontier_phi_63_64_ladder_2 = _2837;
                frontier_phi_63_64_ladder_3 = _2833;
                frontier_phi_63_64_ladder_4 = _2831;
                frontier_phi_63_64_ladder_5 = _2829;
            }
            else
            {
                frontier_phi_63_64_ladder = _2704;
                frontier_phi_63_64_ladder_1 = _2708;
                frontier_phi_63_64_ladder_2 = _2706;
                frontier_phi_63_64_ladder_3 = _2702;
                frontier_phi_63_64_ladder_4 = _2700;
                frontier_phi_63_64_ladder_5 = _2698;
            }
            _2828 = frontier_phi_63_64_ladder_5;
            _2830 = frontier_phi_63_64_ladder_4;
            _2832 = frontier_phi_63_64_ladder_3;
            _2834 = frontier_phi_63_64_ladder;
            _2836 = frontier_phi_63_64_ladder_2;
            _2838 = frontier_phi_63_64_ladder_1;
        }
        float _2843 = isnan(1.0) ? _527 : (isnan(_527) ? 1.0 : min(_527, 1.0));
        _2593 = (_2843 * _2834) + _2105;
        _2595 = (_2843 * _2836) + _2107;
        _2597 = (_2843 * _2838) + _2109;
        _2599 = ((_2828 * _512) * _2843) + _2443;
        _2601 = ((_2830 * _514) * _2843) + _2445;
        _2603 = ((_2832 * _515) * _2843) + _2447;
    }
    else
    {
        _2593 = _2105;
        _2595 = _2107;
        _2597 = _2109;
        _2599 = _2443;
        _2601 = _2445;
        _2603 = _2447;
    }
    uint _2609 = _488 + uint(cbMatDynParam._m0[0u].w);
    float _2618 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _307.x) * _330) * cbInstanceData._m0[_2609].x;
    float _2622 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _307.y) * _330) * cbInstanceData._m0[_2609].y;
    float _2626 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _307.z) * _330) * cbInstanceData._m0[_2609].z;
    float _4610 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _4621 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _4632 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _2643 = (((isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2593 + ((isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))) * _527))) + ((_2599 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _1368)) * cbPerFrame._m0[3u].x)) + _2618;
    float _2645 = (_2622 + ((_2601 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _1368)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2595 + ((isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))) * _527)));
    float _2647 = (_2626 + ((_2603 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _1368)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2597 + ((isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))) * _527)));
    float _2648 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2649 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2650 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
    float _2656 = cbMtdParam._m0[2u].x * _2618;
    float _2657 = cbMtdParam._m0[2u].y * _2622;
    float _2658 = cbMtdParam._m0[2u].z * _2626;
    float _4658 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2660 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
    uint _2661 = _486 + 6u;
    float _2669 = _446 / cbSceneParam._m0[86u].x;
    float _2670 = _447 / cbSceneParam._m0[86u].y;
    vec4 _2684 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2669, _2670, (log2((isnan(cbSceneParam._m0[77u].w) ? _367 : (isnan(_367) ? cbSceneParam._m0[77u].w : min(_367, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2686 = _2684.x;
    float _2687 = _2684.y;
    float _2688 = _2684.z;
    float _2689 = _2684.w;
    float _2761;
    float _2763;
    float _2765;
    float _2767;
    if (_367 > cbSceneParam._m0[78u].w)
    {
        float _2723 = isnan(_367) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _367 : min(cbSceneParam._m0[80u].w, _367));
        float _2724 = _2723 / _367;
        float _2735 = _2724 * _418;
        float _2736 = _419 * _2724;
        float _2737 = (-0.0) - _2736;
        float _2739 = _2724 * _420;
        float _2741 = (cbSceneParam._m0[77u].w * _2737) / _2723;
        float _2742 = _2741 + cbSceneParam._m0[79u].w;
        float _2743 = cbSceneParam._m0[79u].w - _2736;
        float _2749 = sqrt(((_2735 * _2735) + (_2736 * _2736)) + (_2739 * _2739));
        float _2752 = (1.0 - (cbSceneParam._m0[77u].w / _2723)) * _2749;
        float _2757 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2759 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2945;
        if (abs((_2737 - _2741) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2945 = ((((_2742 > 0.0) ? exp2(_2757 * _2742) : (2.0 - exp2(_2759 * _2742))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2752;
        }
        else
        {
            float _2889 = 1.0 / cbSceneParam._m0[80u].x;
            float _2890 = isnan(_2743) ? _2742 : (isnan(_2742) ? _2743 : max(_2742, _2743));
            float _2891 = isnan(_2743) ? _2742 : (isnan(_2742) ? _2743 : min(_2742, _2743));
            float _2900 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : min(_2890, 0.0));
            float _2901 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : min(_2891, 0.0));
            _2945 = ((abs(_2749 / _2737) * cbSceneParam._m0[80u].y) * ((((_2900 - _2901) * 2.0) - ((exp2(_2757 * (isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0)))) - exp2(_2757 * (isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0))))) * _2889)) - ((exp2(_2759 * _2900) - exp2(_2759 * _2901)) * _2889))) + (_2752 * cbSceneParam._m0[80u].z);
        }
        vec4 _2947 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2669, _2670, 1.0), 0.0);
        float _2956 = exp2((_2945 * (-1.44269502162933349609375)) * (1.0 - _2947.w));
        float _2957 = log2(_2956);
        float _2973 = log2(_2689);
        _2761 = (exp2(_2973 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2957 * cbSceneParam._m0[78u].x)) * _2947.x) / cbSceneParam._m0[78u].x)) + _2686;
        _2763 = (exp2(_2973 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2957 * cbSceneParam._m0[78u].y)) * _2947.y) / cbSceneParam._m0[78u].y)) + _2687;
        _2765 = (exp2(_2973 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2957 * cbSceneParam._m0[78u].z)) * _2947.z) / cbSceneParam._m0[78u].z)) + _2688;
        _2767 = _2956 * _2689;
    }
    else
    {
        _2761 = _2686;
        _2763 = _2687;
        _2765 = _2688;
        _2767 = _2689;
    }
    bool _2983;
    vec4 _2777;
    vec4 _2799;
    float _2801;
    float _2805;
    float _2806;
    float _2807;
    float _2810;
    float _2813;
    float _2816;
    float _2817;
    bool _2827;
    for (;;)
    {
        _2777 = cbMatDynParam._m0[0u];
        float _2779 = roundEven(_2777.y);
        bool _2780 = _2779 == 3.0;
        float _2781 = log2(_2767);
        float _2785 = exp2(_2781 * cbSceneParam._m0[78u].x);
        float _2786 = exp2(_2781 * cbSceneParam._m0[78u].y);
        float _2787 = exp2(_2781 * cbSceneParam._m0[78u].z);
        float _2788 = _2785 * _2648;
        float _2789 = _2786 * _2649;
        float _2790 = _2787 * _2650;
        float _2797 = _434 + (-0.5);
        _2799 = cbMtdParam._m0[1u];
        _2801 = _2799.y * _2797;
        float _2804 = (_2779 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2805 = _2804 * (_2780 ? _2788 : (_2788 + (cbSceneParam._m0[72u].w * _2761)));
        _2806 = _2804 * (_2780 ? _2789 : (_2789 + (cbSceneParam._m0[72u].w * _2763)));
        _2807 = _2804 * (_2780 ? _2790 : (_2790 + (cbSceneParam._m0[72u].w * _2765)));
        _2810 = ((_2656 * _2660) * _2785) * _2804;
        _2813 = ((_2657 * _2660) * _2786) * _2804;
        _2816 = ((_2658 * _2660) * _2787) * _2804;
        _2817 = _2797 * 0.999000012874603271484375;
        _2827 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2827)
        {
            if ((cbInstanceData._m0[_486 + 7u].x + _2817) < 0.5)
            {
                _2983 = true;
                break;
            }
        }
        uint _2924 = _488 + uint(_2777.w);
        if ((cbInstanceData._m0[_2924].w < 1.0) && ((cbInstanceData._m0[_2924].w + _2817) < 0.5))
        {
            _2983 = true;
            break;
        }
        if ((_2801 + 1.0) < _2799.x)
        {
            _2983 = true;
            break;
        }
        _2983 = false;
        break;
    }
    float _3187;
    if (_2983)
    {
        discard_state = true;
        _3187 = 0.0;
    }
    else
    {
        _3187 = cbInstanceData._m0[_2661].w;
    }
    SV_Target.x = _2805;
    SV_Target.y = _2806;
    SV_Target.z = _2807;
    SV_Target.w = _3187;
    SV_Target_1.x = _2810;
    SV_Target_1.y = _2813;
    SV_Target_1.z = _2816;
    SV_Target_1.w = cbInstanceData._m0[_2661].w;
    discard_exit();
}


