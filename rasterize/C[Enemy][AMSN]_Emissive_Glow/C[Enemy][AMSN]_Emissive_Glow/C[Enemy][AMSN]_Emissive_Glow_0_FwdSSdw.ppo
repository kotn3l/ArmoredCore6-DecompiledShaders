#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _861;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _224.x * cbMtdParam._m0[9u].x;
    float _231 = _224.y * cbMtdParam._m0[9u].y;
    float _232 = _224.z * cbMtdParam._m0[9u].z;
    vec4 _244 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _246 = _244.x;
    vec4 _258 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _262 = _258.z;
    float _266 = (_258.x * 2.0) + (-1.0);
    float _268 = (_258.y * 2.0) + (-1.0);
    float _269 = dot(vec2(_266, _268), vec2(_266, _268));
    float _3265 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _275 = sqrt(1.0 - (isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0))));
    vec4 _297 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _304 = fma(_275, _194 * NORMAL.x, fma(_268, _201 * TANGENT.x, (_187 * _180) * _266));
    float _307 = fma(_275, _194 * NORMAL.y, fma(_268, _201 * TANGENT.y, (_187 * _181) * _266));
    float _310 = fma(_275, _194 * NORMAL.z, fma(_268, _201 * TANGENT.z, (_187 * _182) * _266));
    float _314 = inversesqrt(dot(vec3(_304, _307, _310), vec3(_304, _307, _310)));
    float _315 = _314 * _304;
    float _316 = _314 * _307;
    float _317 = _314 * _310;
    float _3276 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _318 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
    float _3287 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3298 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3309 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3320 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _322 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
    float _338 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _379 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _389 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _379);
    float _390 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _379);
    float _391 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _379);
    float _395 = inversesqrt(dot(vec3(_389, _390, _391), vec3(_389, _390, _391)));
    float _396 = _389 * _395;
    float _397 = _390 * _395;
    float _398 = _391 * _395;
    float _404 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _405 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _426 = fma(_317, cbSceneParam._m0[5u].z, fma(_316, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _315));
    float _429 = fma(_317, cbSceneParam._m0[6u].z, fma(_316, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _315));
    float _432 = fma(_317, cbSceneParam._m0[7u].z, fma(_316, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _315));
    uint _445 = uint(roundEven(NORMAL.w)) * 13u;
    uint _447 = _445 + 9u;
    uint _448 = _447 + uint(cbMatDynParam._m0[0u].w);
    float _454 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0)))) * cbInstanceData._m0[_448].x;
    float _455 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0)))) * cbInstanceData._m0[_448].y;
    float _456 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0)))) * cbInstanceData._m0[_448].z;
    float _3331 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    float _3342 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
    float _3353 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
    float _460 = 1.0 - _322;
    float _461 = _457 * _460;
    float _462 = _458 * _460;
    float _463 = _459 * _460;
    float _468 = (_457 + (-0.039999999105930328369140625)) * _322;
    float _469 = (_458 + (-0.039999999105930328369140625)) * _322;
    float _470 = (_459 + (-0.039999999105930328369140625)) * _322;
    float _471 = _468 + 0.039999999105930328369140625;
    float _473 = _469 + 0.039999999105930328369140625;
    float _474 = _470 + 0.039999999105930328369140625;
    vec4 _483 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _404, cbSceneParam._m0[86u].y * _405));
    float _486 = _483.x * TEXCOORD.z;
    float _487 = dot(vec3(_315, _316, _317), vec3(_396, _397, _398));
    float _490 = _487 * 2.0;
    float _494 = (_490 * _315) - _396;
    float _495 = (_490 * _316) - _397;
    float _496 = (_490 * _317) - _398;
    float _500 = abs(dot(vec3(_396, _397, _398), vec3(_315, _316, _317)));
    float _3364 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _502 = sqrt(_318);
    float _515 = exp2((_502 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_502 * 3.0));
    float _521 = (1.0 - _515) * ((_502 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _522 = _515 * _502;
    float _550 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _554 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _558 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _860;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _585 = fma(_558, cbModelParam._m0[26u].z, fma(_554, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _550));
        float _589 = fma(_558, cbModelParam._m0[27u].z, fma(_554, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _550));
        float _593 = fma(_558, cbModelParam._m0[28u].z, fma(_554, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _550));
        float _618 = _550 + _315;
        float _619 = _554 + _316;
        float _620 = _558 + _317;
        float _630 = fma(_620, cbModelParam._m0[26u].z, fma(_619, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _618)) - _585;
        float _631 = fma(_620, cbModelParam._m0[27u].z, fma(_619, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _618)) - _589;
        float _632 = fma(_620, cbModelParam._m0[28u].z, fma(_619, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _618)) - _593;
        float _636 = inversesqrt(dot(vec3(_630, _631, _632), vec3(_630, _631, _632)));
        float _649 = ((_636 * _630) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_585 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _650 = ((_636 * _631) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_589 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _651 = ((_636 * _632) / cbModelParam._m0[34u].z) + ((((((_593 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _654 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        vec4 _668 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        vec4 _675 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        float _688 = exp2((_654.w + (-0.5)) * 20.0) * 2.0;
        float _689 = _688 * (_654.x + (-0.5));
        float _690 = _688 * (_654.y + (-0.5));
        float _691 = _688 * (_654.z + (-0.5));
        float _698 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _699 = _698 * (_661.x + (-0.5));
        float _700 = _698 * (_661.y + (-0.5));
        float _701 = _698 * (_661.z + (-0.5));
        float _708 = exp2((_668.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _708 * (_668.x + (-0.5));
        float _710 = _708 * (_668.y + (-0.5));
        float _711 = _708 * (_668.z + (-0.5));
        float _718 = exp2((_675.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_675.x + (-0.5));
        float _720 = _718 * (_675.y + (-0.5));
        float _721 = _718 * (_675.z + (-0.5));
        float _722 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _723 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _724 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _725 = _689 * 0.5;
        float _726 = _699 * 0.5;
        float _727 = _709 * 0.5;
        float _728 = dot(vec3(_725, _726, _727), vec3(_725, _726, _727));
        float _733 = (_728 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_728);
        float _742 = (dot(vec3(_315, _316, _317), vec3(_733 * _725, _733 * _726, _733 * _727)) + 1.0) * 0.5;
        float _3390 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _752 = sqrt(((_726 * _726) + (_725 * _725)) + (_727 * _727)) / (_722 + 9.9999997473787516355514526367188e-06);
        float _3401 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _754 = _753 * 2.0;
        float _758 = (1.0 - _753) / (_753 + 1.0);
        float _3412 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _768 = ((((1.0 - _759) * (_754 + 2.0)) * exp2(log2(isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0))) * (_754 + 1.0))) + _759) * _722;
        float _769 = _690 * 0.5;
        float _770 = _700 * 0.5;
        float _771 = _710 * 0.5;
        float _772 = dot(vec3(_769, _770, _771), vec3(_769, _770, _771));
        float _777 = (_772 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_772);
        float _785 = (dot(vec3(_315, _316, _317), vec3(_777 * _769, _777 * _770, _777 * _771)) + 1.0) * 0.5;
        float _3423 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _794 = sqrt(((_770 * _770) + (_769 * _769)) + (_771 * _771)) / (_723 + 9.9999997473787516355514526367188e-06);
        float _3434 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
        float _796 = _795 * 2.0;
        float _800 = (1.0 - _795) / (_795 + 1.0);
        float _3445 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _810 = ((((1.0 - _801) * (_796 + 2.0)) * exp2(log2(isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0))) * (_796 + 1.0))) + _801) * _723;
        float _811 = _691 * 0.5;
        float _812 = _701 * 0.5;
        float _813 = _711 * 0.5;
        float _814 = dot(vec3(_811, _812, _813), vec3(_811, _812, _813));
        float _819 = (_814 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_814);
        float _827 = (dot(vec3(_315, _316, _317), vec3(_819 * _811, _819 * _812, _819 * _813)) + 1.0) * 0.5;
        float _3456 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _836 = sqrt(((_812 * _812) + (_811 * _811)) + (_813 * _813)) / (_724 + 9.9999997473787516355514526367188e-06);
        float _3467 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _838 = _837 * 2.0;
        float _842 = (1.0 - _837) / (_837 + 1.0);
        float _3478 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _852 = ((((1.0 - _843) * (_838 + 2.0)) * exp2(log2(isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * (_838 + 1.0))) + _843) * _724;
        _860 = _691;
        _862 = _690;
        _863 = _689;
        _864 = _701;
        _865 = _700;
        _866 = _699;
        _867 = _711;
        _868 = _710;
        _869 = _709;
        _870 = _724;
        _871 = _723;
        _872 = _722;
        _873 = cbModelParam._m0[36u].z * (isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0)));
        _874 = cbModelParam._m0[36u].z * (isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0)));
        _875 = cbModelParam._m0[36u].z * (isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0)));
    }
    else
    {
        _860 = _861;
        _862 = _861;
        _863 = _861;
        _864 = _861;
        _865 = _861;
        _866 = _861;
        _867 = _861;
        _868 = _861;
        _869 = _861;
        _870 = _861;
        _871 = _861;
        _872 = _861;
        _873 = 0.0;
        _874 = 0.0;
        _875 = 0.0;
    }
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _901 = fma(_558, cbModelParam._m0[30u].z, fma(_554, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _550));
        float _905 = fma(_558, cbModelParam._m0[31u].z, fma(_554, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _550));
        float _909 = fma(_558, cbModelParam._m0[32u].z, fma(_554, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _550));
        float _932 = _550 + _315;
        float _933 = _554 + _316;
        float _934 = _558 + _317;
        float _944 = fma(_934, cbModelParam._m0[30u].z, fma(_933, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _932)) - _901;
        float _945 = fma(_934, cbModelParam._m0[31u].z, fma(_933, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _932)) - _905;
        float _946 = fma(_934, cbModelParam._m0[32u].z, fma(_933, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _932)) - _909;
        float _950 = inversesqrt(dot(vec3(_944, _945, _946), vec3(_944, _945, _946)));
        float _963 = ((_950 * _944) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_901 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_950 * _945) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_905 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_950 * _946) / cbModelParam._m0[35u].z) + ((((((_909 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        float _1000 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_967.x + (-0.5));
        float _1002 = _1000 * (_967.y + (-0.5));
        float _1003 = _1000 * (_967.z + (-0.5));
        float _1010 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_974.x + (-0.5));
        float _1012 = _1010 * (_974.y + (-0.5));
        float _1013 = _1010 * (_974.z + (-0.5));
        float _1020 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_981.x + (-0.5));
        float _1022 = _1020 * (_981.y + (-0.5));
        float _1023 = _1020 * (_981.z + (-0.5));
        float _1030 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_988.x + (-0.5));
        float _1032 = _1030 * (_988.y + (-0.5));
        float _1033 = _1030 * (_988.z + (-0.5));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = _1001 * 0.5;
        float _1038 = _1011 * 0.5;
        float _1039 = _1021 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1053 = (dot(vec3(_315, _316, _317), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3519 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1062 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3530 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3541 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))) * (_1064 + 1.0))) + _1069) * _1034;
        float _1079 = _1002 * 0.5;
        float _1080 = _1012 * 0.5;
        float _1081 = _1022 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_315, _316, _317), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3552 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3563 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3574 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))) * (_1106 + 1.0))) + _1111) * _1035;
        float _1121 = _1003 * 0.5;
        float _1122 = _1013 * 0.5;
        float _1123 = _1023 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_315, _316, _317), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3585 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3596 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3607 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * (_1148 + 1.0))) + _1153) * _1036;
        _1170 = _1003;
        _1171 = _1002;
        _1172 = _1001;
        _1173 = _1013;
        _1174 = _1012;
        _1175 = _1011;
        _1176 = _1023;
        _1177 = _1022;
        _1178 = _1021;
        _1179 = _1036;
        _1180 = _1035;
        _1181 = _1034;
        _1182 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1183 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1184 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
    }
    else
    {
        _1170 = _861;
        _1171 = _861;
        _1172 = _861;
        _1173 = _861;
        _1174 = _861;
        _1175 = _861;
        _1176 = _861;
        _1177 = _861;
        _1178 = _861;
        _1179 = _861;
        _1180 = _861;
        _1181 = _861;
        _1182 = 0.0;
        _1183 = 0.0;
        _1184 = 0.0;
    }
    float _1194 = (cbModelParam._m0[1u].x * (_1182 - _873)) + _873;
    float _1195 = (cbModelParam._m0[1u].x * (_1183 - _874)) + _874;
    float _1196 = (cbModelParam._m0[1u].x * (_1184 - _875)) + _875;
    float _1217 = fma(_1196, cbSceneParam._m0[89u].z, fma(_1195, cbSceneParam._m0[89u].y, _1194 * cbSceneParam._m0[89u].x));
    float _1220 = fma(_1196, cbSceneParam._m0[90u].z, fma(_1195, cbSceneParam._m0[90u].y, _1194 * cbSceneParam._m0[90u].x));
    float _1223 = fma(_1196, cbSceneParam._m0[91u].z, fma(_1195, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1194));
    float _1238 = _494 * 0.5;
    float _1239 = _495 * 0.5;
    float _1240 = _496 * 0.5;
    float _1241 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_1172, _1175, _1178, _1181));
    float _1244 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_1171, _1174, _1177, _1180));
    float _1247 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_1170, _1173, _1176, _1179));
    float _1281;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1254 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_860, _864, _867, _870));
        float _1258 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_862, _865, _868, _871));
        float _1262 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_863, _866, _869, _872));
        float _1269 = dot(vec4(cbModelParam._m0[39u]), vec4(_1238, _1239, _1240, 1.0));
        _1281 = dot(vec3(isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)), isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)), isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1269) ? 0.0 : (isnan(0.0) ? _1269 : max(0.0, _1269))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1281 = 1.0;
    }
    float _1292;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1283 = dot(vec4(cbModelParam._m0[40u]), vec4(_1238, _1239, _1240, 1.0));
        _1292 = dot(vec3(isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)), isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)), isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1283) ? 0.0 : (isnan(0.0) ? _1283 : max(0.0, _1283))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1292 = 1.0;
    }
    float _1296 = (_1292 * cbModelParam._m0[1u].x) + (_1281 * (1.0 - cbModelParam._m0[1u].x));
    float _1306 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _318);
    float _1307 = isnan(_1306) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1306 : min(cbModelParam._m0[25u].z, _1306));
    float _1388;
    float _1390;
    float _1392;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1355 = fma(_558, cbModelParam._m0[13u].z, fma(_554, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _550)) + cbModelParam._m0[13u].w;
        float _1359 = fma(_558, cbModelParam._m0[14u].z, fma(_554, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _550)) + cbModelParam._m0[14u].w;
        float _1363 = fma(_558, cbModelParam._m0[15u].z, fma(_554, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _550)) + cbModelParam._m0[15u].w;
        float _1366 = fma(_496, cbModelParam._m0[13u].z, fma(_495, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _494));
        float _1369 = fma(_496, cbModelParam._m0[14u].z, fma(_495, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _494));
        float _1372 = fma(_496, cbModelParam._m0[15u].z, fma(_495, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _494));
        float _1400;
        if (_1366 > 0.0)
        {
            _1400 = abs((1.0 - _1355) / _1366);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1366 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1355 + 1.0) / _1366);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1400 = frontier_phi_14_12_ladder;
        }
        float _1629;
        if (_1369 > 0.0)
        {
            _1629 = abs((1.0 - _1359) / _1369);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1369 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1359 + 1.0) / _1369);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1629 = frontier_phi_23_19_ladder;
        }
        float _1886;
        if (_1372 > 0.0)
        {
            _1886 = abs((1.0 - _1363) / _1372);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1372 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1363 + 1.0) / _1372);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1886 = frontier_phi_35_30_ladder;
        }
        float _1888 = isnan(_1629) ? _1400 : (isnan(_1400) ? _1629 : min(_1400, _1629));
        float _1889 = isnan(_1886) ? _1888 : (isnan(_1888) ? _1886 : min(_1888, _1886));
        float _1893 = (_1889 * _1366) + _1355;
        float _1894 = (_1889 * _1369) + _1359;
        float _1895 = (_1889 * _1372) + _1363;
        float _1896 = _1889 * 9.9999997473787516355514526367188e-05;
        float _1898 = (-1.0) - _1896;
        float _1900 = _1896 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1895 > _1900) || ((_1895 < _1898) || ((_1894 > _1900) || ((_1894 < _1898) || ((_1893 < _1898) || (_1893 > _1900))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2023 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1895, cbModelParam._m0[9u].z, fma(_1894, cbModelParam._m0[9u].y, _1893 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1895, cbModelParam._m0[10u].z, fma(_1894, cbModelParam._m0[10u].y, _1893 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1895, cbModelParam._m0[11u].z, fma(_1894, cbModelParam._m0[11u].y, _1893 * cbModelParam._m0[11u].x))), _1307);
            frontier_phi_13_35_ladder = _2023.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2023.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2023.x * cbModelParam._m0[1u].y;
        }
        _1388 = frontier_phi_13_35_ladder_2;
        _1390 = frontier_phi_13_35_ladder_1;
        _1392 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1376 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_494, _495, _496), _1307);
        _1388 = _1376.x * cbModelParam._m0[1u].y;
        _1390 = _1376.y * cbModelParam._m0[1u].y;
        _1392 = _1376.z * cbModelParam._m0[1u].y;
    }
    float _1396 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _318);
    float _1397 = isnan(_1396) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1396 : min(cbModelParam._m0[25u].w, _1396));
    float _1490;
    float _1492;
    float _1494;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1454 = fma(_558, cbModelParam._m0[21u].z, fma(_554, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _550)) + cbModelParam._m0[21u].w;
        float _1458 = fma(_558, cbModelParam._m0[22u].z, fma(_554, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _550)) + cbModelParam._m0[22u].w;
        float _1462 = fma(_558, cbModelParam._m0[23u].z, fma(_554, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _550)) + cbModelParam._m0[23u].w;
        float _1465 = fma(_496, cbModelParam._m0[21u].z, fma(_495, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _494));
        float _1468 = fma(_496, cbModelParam._m0[22u].z, fma(_495, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _494));
        float _1471 = fma(_496, cbModelParam._m0[23u].z, fma(_495, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _494));
        float _1634;
        if (_1465 > 0.0)
        {
            _1634 = abs((1.0 - _1454) / _1465);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1454 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1634 = frontier_phi_25_21_ladder;
        }
        float _1913;
        if (_1468 > 0.0)
        {
            _1913 = abs((1.0 - _1458) / _1468);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1458 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1913 = frontier_phi_37_32_ladder;
        }
        float _2126;
        if (_1471 > 0.0)
        {
            _2126 = abs((1.0 - _1462) / _1471);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1462 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2126 = frontier_phi_46_43_ladder;
        }
        float _2128 = isnan(_1913) ? _1634 : (isnan(_1634) ? _1913 : min(_1634, _1913));
        float _2129 = isnan(_2126) ? _2128 : (isnan(_2128) ? _2126 : min(_2128, _2126));
        float _2133 = (_2129 * _1465) + _1454;
        float _2134 = (_2129 * _1468) + _1458;
        float _2135 = (_2129 * _1471) + _1462;
        float _2136 = _2129 * 9.9999997473787516355514526367188e-05;
        float _2137 = (-1.0) - _2136;
        float _2139 = _2136 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2135 > _2139) || ((_2135 < _2137) || ((_2134 > _2139) || ((_2134 < _2137) || ((_2133 < _2137) || (_2133 > _2139))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2369 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2135, cbModelParam._m0[17u].z, fma(_2134, cbModelParam._m0[17u].y, _2133 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2135, cbModelParam._m0[18u].z, fma(_2134, cbModelParam._m0[18u].y, _2133 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2135, cbModelParam._m0[19u].z, fma(_2134, cbModelParam._m0[19u].y, _2133 * cbModelParam._m0[19u].x))), _1397);
            frontier_phi_22_46_ladder = _2369.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2369.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2369.x * cbModelParam._m0[1u].z;
        }
        _1490 = frontier_phi_22_46_ladder_2;
        _1492 = frontier_phi_22_46_ladder_1;
        _1494 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1474 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_494, _495, _496), _1397);
        _1490 = _1474.x * cbModelParam._m0[1u].z;
        _1492 = _1474.y * cbModelParam._m0[1u].z;
        _1494 = _1474.z * cbModelParam._m0[1u].z;
    }
    float _1507 = (((_521 * _471) + _522) * _486) * ((cbModelParam._m0[1u].w * (_1490 - _1388)) + _1388);
    float _1509 = (((_521 * _473) + _522) * _486) * ((cbModelParam._m0[1u].w * (_1492 - _1390)) + _1390);
    float _1511 = (((_521 * _474) + _522) * _486) * ((cbModelParam._m0[1u].w * (_1494 - _1392)) + _1392);
    float _1514 = fma(_1511, cbSceneParam._m0[89u].z, fma(_1509, cbSceneParam._m0[89u].y, _1507 * cbSceneParam._m0[89u].x));
    float _1517 = fma(_1511, cbSceneParam._m0[90u].z, fma(_1509, cbSceneParam._m0[90u].y, _1507 * cbSceneParam._m0[90u].x));
    float _1520 = fma(_1511, cbSceneParam._m0[91u].z, fma(_1509, cbSceneParam._m0[91u].y, _1507 * cbSceneParam._m0[91u].x));
    vec4 _1528 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_404, _405));
    float _1530 = _1528.w;
    float _1542 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1530);
    float _1543 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1530);
    float _1544 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1530);
    uvec4 _1548 = floatBitsToUint(cbInstanceData._m0[_445 + 5u]);
    uint _1550 = _1548.x * 14u;
    uint _1551 = _1550 + 13u;
    float _1558 = _486 + (-1.0);
    float _1563 = (cbLight._m0[_1551].x * _1558) + 1.0;
    float _1564 = (cbLight._m0[_1551].y * _1558) + 1.0;
    float _1565 = (cbLight._m0[_1551].z * _1558) + 1.0;
    float _1566 = (cbLight._m0[_1551].w * _1558) + 1.0;
    uint _1567 = _1550 + 5u;
    float _1573 = isnan(1.0) ? _1564 : (isnan(_1564) ? 1.0 : min(_1564, 1.0));
    uint _1577 = _1550 + 4u;
    float _1587 = isnan(1.0) ? _1563 : (isnan(_1563) ? 1.0 : min(_1563, 1.0));
    uint _1591 = _1550 | 1u;
    float _1602 = dot(vec3(cbLight._m0[_1550].xyz), vec3(_315, _316, _317));
    float _1605 = dot(vec3(cbLight._m0[_1591].xyz), vec3(_315, _316, _317));
    float _3743 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
    float _3754 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
    float _1610 = (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * 0.3183098733425140380859375;
    float _1612 = (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * 0.3183098733425140380859375;
    float _1619 = ((cbLight._m0[_1567].x * _1573) * _1612) + (((cbLight._m0[_1577].x * _1542) * _1587) * _1610);
    float _1620 = ((_1573 * cbLight._m0[_1567].y) * _1612) + (((cbLight._m0[_1577].y * _1543) * _1587) * _1610);
    float _1621 = ((_1573 * cbLight._m0[_1567].z) * _1612) + (((cbLight._m0[_1577].z * _1544) * _1587) * _1610);
    uvec4 _1626 = floatBitsToUint(cbLight._m0[_1550 + 12u]);
    bool _1628 = _1626.x == 0u;
    float _1639;
    float _1641;
    float _1643;
    if (_1628)
    {
        _1639 = _1619;
        _1641 = _1620;
        _1643 = _1621;
    }
    else
    {
        uint _1647 = _1550 + 6u;
        float _1663 = (dot(vec3(cbLight._m0[_1550 + 2u].xyz), vec3(_315, _316, _317)) * 0.5) + 0.5;
        float _1664 = _1663 * _1663;
        float _3765 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1666 = isnan(1.0) ? _1565 : (isnan(_1565) ? 1.0 : min(_1565, 1.0));
        _1639 = (((cbLight._m0[_1647].x * 0.3183098733425140380859375) * _1665) * _1666) + _1619;
        _1641 = (((cbLight._m0[_1647].y * 0.3183098733425140380859375) * _1665) * _1666) + _1620;
        _1643 = (((cbLight._m0[_1647].z * 0.3183098733425140380859375) * _1665) * _1666) + _1621;
    }
    bool _1646 = _1626.y == 0u;
    float _1684;
    float _1686;
    float _1688;
    if (_1646)
    {
        _1684 = _1639;
        _1686 = _1641;
        _1688 = _1643;
    }
    else
    {
        uint _1857 = _1550 + 7u;
        float _1873 = (dot(vec3(cbLight._m0[_1550 + 3u].xyz), vec3(_315, _316, _317)) * 0.5) + 0.5;
        float _1874 = _1873 * _1873;
        float _3781 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
        float _1875 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1876 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
        _1684 = (((cbLight._m0[_1857].x * 0.3183098733425140380859375) * _1875) * _1876) + _1639;
        _1686 = (((cbLight._m0[_1857].y * 0.3183098733425140380859375) * _1875) * _1876) + _1641;
        _1688 = (((cbLight._m0[_1857].z * 0.3183098733425140380859375) * _1875) * _1876) + _1643;
    }
    uint _1691 = _1550 + 8u;
    float _1704 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1550].w)) * _318) * 0.949999988079071044921875);
    float _1705 = _1704 * _1704;
    float _1706 = cbLight._m0[_1550].x + _396;
    float _1707 = cbLight._m0[_1550].y + _397;
    float _1708 = cbLight._m0[_1550].z + _398;
    float _1712 = inversesqrt(dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708)));
    float _1713 = _1712 * _1706;
    float _1714 = _1712 * _1707;
    float _1715 = _1712 * _1708;
    float _1716 = dot(vec3(_315, _316, _317), vec3(cbLight._m0[_1550].xyz));
    float _3797 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
    float _1719 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _3808 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _1720 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _1721 = dot(vec3(_315, _316, _317), vec3(_1713, _1714, _1715));
    float _3819 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1724 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _1725 = dot(vec3(cbLight._m0[_1550].xyz), vec3(_1713, _1714, _1715));
    float _3830 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _1729 = _1705 * _1705;
    float _1733 = ((_1724 * _1724) * (_1729 + (-1.0))) + 1.0;
    float _1741 = exp2(log2(1.0 - (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) * 5.0);
    float _1742 = 0.959999978542327880859375 - _468;
    float _1744 = 0.959999978542327880859375 - _469;
    float _1745 = 0.959999978542327880859375 - _470;
    float _1752 = 1.0 - _1705;
    float _1763 = (0.5 / (((_1720 * ((_1719 * _1752) + _1705)) + 9.9999999392252902907785028219223e-09) + (((_1720 * _1752) + _1705) * _1719))) * _1719;
    float _3841 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1765 = (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_1729 / ((_1733 * _1733) * 3.141590118408203125));
    uint _1779 = _1550 + 9u;
    float _1790 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1591].w)) * _318) * 0.949999988079071044921875);
    float _1791 = _1790 * _1790;
    float _1792 = cbLight._m0[_1591].x + _396;
    float _1793 = cbLight._m0[_1591].y + _397;
    float _1794 = cbLight._m0[_1591].z + _398;
    float _1798 = inversesqrt(dot(vec3(_1792, _1793, _1794), vec3(_1792, _1793, _1794)));
    float _1799 = _1798 * _1792;
    float _1800 = _1798 * _1793;
    float _1801 = _1798 * _1794;
    float _1802 = dot(vec3(_315, _316, _317), vec3(cbLight._m0[_1591].xyz));
    float _3852 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1805 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _1806 = dot(vec3(_315, _316, _317), vec3(_1799, _1800, _1801));
    float _3863 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1809 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _1810 = dot(vec3(cbLight._m0[_1591].xyz), vec3(_1799, _1800, _1801));
    float _3874 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1814 = _1791 * _1791;
    float _1818 = ((_1809 * _1809) * (_1814 + (-1.0))) + 1.0;
    float _1825 = exp2(log2(1.0 - (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * 5.0);
    float _1832 = 1.0 - _1791;
    float _1842 = (0.5 / (((_1720 * ((_1805 * _1832) + _1791)) + 9.9999999392252902907785028219223e-09) + (((_1720 * _1832) + _1791) * _1805))) * _1805;
    float _3885 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1844 = (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1814 / ((_1818 * _1818) * 3.141590118408203125));
    float _1854 = (((((_1825 * _1742) + _471) * cbLight._m0[_1779].x) * _1844) * _1573) + ((((cbLight._m0[_1691].x * _1542) * ((_1741 * _1742) + _471)) * _1765) * _1587);
    float _1855 = (((((_1825 * _1744) + _473) * cbLight._m0[_1779].y) * _1844) * _1573) + ((((cbLight._m0[_1691].y * _1543) * ((_1741 * _1744) + _473)) * _1765) * _1587);
    float _1856 = (((((_1825 * _1745) + _474) * cbLight._m0[_1779].z) * _1844) * _1573) + ((((cbLight._m0[_1691].z * _1544) * ((_1741 * _1745) + _474)) * _1765) * _1587);
    float _1918;
    float _1920;
    float _1922;
    if (_1628)
    {
        _1918 = _1854;
        _1920 = _1855;
        _1922 = _1856;
    }
    else
    {
        uint _1924 = _1550 + 2u;
        uint _1928 = _1550 + 10u;
        float _1942 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1924].w)) * _318) * 0.949999988079071044921875);
        float _1943 = _1942 * _1942;
        float _1944 = cbLight._m0[_1924].x + _396;
        float _1945 = cbLight._m0[_1924].y + _397;
        float _1946 = cbLight._m0[_1924].z + _398;
        float _1950 = inversesqrt(dot(vec3(_1944, _1945, _1946), vec3(_1944, _1945, _1946)));
        float _1951 = _1950 * _1944;
        float _1952 = _1950 * _1945;
        float _1953 = _1950 * _1946;
        float _1954 = dot(vec3(_315, _316, _317), vec3(cbLight._m0[_1924].xyz));
        float _3896 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        float _1957 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1958 = dot(vec3(_315, _316, _317), vec3(_1951, _1952, _1953));
        float _3907 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        float _1961 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1962 = dot(vec3(cbLight._m0[_1924].xyz), vec3(_1951, _1952, _1953));
        float _3918 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        float _1966 = _1943 * _1943;
        float _1970 = ((_1961 * _1961) * (_1966 + (-1.0))) + 1.0;
        float _1977 = exp2(log2(1.0 - (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * 5.0);
        float _1984 = 1.0 - _1943;
        float _1994 = (0.5 / (((_1720 * ((_1957 * _1984) + _1943)) + 9.9999999392252902907785028219223e-09) + (((_1720 * _1984) + _1943) * _1957))) * _1957;
        float _3929 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
        float _1996 = (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1966 / ((_1970 * _1970) * 3.141590118408203125));
        float _1997 = isnan(1.0) ? _1565 : (isnan(_1565) ? 1.0 : min(_1565, 1.0));
        _1918 = (((((_1977 * _1742) + _471) * cbLight._m0[_1928].x) * _1996) * _1997) + _1854;
        _1920 = (((((_1977 * _1744) + _473) * cbLight._m0[_1928].y) * _1996) * _1997) + _1855;
        _1922 = (((((_1977 * _1745) + _474) * cbLight._m0[_1928].z) * _1996) * _1997) + _1856;
    }
    float _2032;
    float _2034;
    float _2036;
    if (_1646)
    {
        _2032 = _1918;
        _2034 = _1920;
        _2036 = _1922;
    }
    else
    {
        uint _2043 = _1550 + 3u;
        uint _2047 = _1550 + 11u;
        float _2061 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2043].w)) * _318) * 0.949999988079071044921875);
        float _2062 = _2061 * _2061;
        float _2063 = cbLight._m0[_2043].x + _396;
        float _2064 = cbLight._m0[_2043].y + _397;
        float _2065 = cbLight._m0[_2043].z + _398;
        float _2069 = inversesqrt(dot(vec3(_2063, _2064, _2065), vec3(_2063, _2064, _2065)));
        float _2070 = _2069 * _2063;
        float _2071 = _2069 * _2064;
        float _2072 = _2069 * _2065;
        float _2073 = dot(vec3(_315, _316, _317), vec3(cbLight._m0[_2043].xyz));
        float _3945 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2076 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _2077 = dot(vec3(_315, _316, _317), vec3(_2070, _2071, _2072));
        float _3956 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2080 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _2081 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_2070, _2071, _2072));
        float _3967 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2085 = _2062 * _2062;
        float _2089 = ((_2080 * _2080) * (_2085 + (-1.0))) + 1.0;
        float _2096 = exp2(log2(1.0 - (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) * 5.0);
        float _2103 = 1.0 - _2062;
        float _2113 = (0.5 / (((_1720 * ((_2076 * _2103) + _2062)) + 9.9999999392252902907785028219223e-09) + (((_1720 * _2103) + _2062) * _2076))) * _2076;
        float _3978 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2115 = (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_2085 / ((_2089 * _2089) * 3.141590118408203125));
        float _2116 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
        _2032 = (((((_2096 * _1742) + _471) * cbLight._m0[_2047].x) * _2115) * _2116) + _1918;
        _2034 = (((((_2096 * _1744) + _473) * cbLight._m0[_2047].y) * _2115) * _2116) + _1920;
        _2036 = (((((_2096 * _1745) + _474) * cbLight._m0[_2047].z) * _2115) * _2116) + _1922;
    }
    float _2251;
    float _2253;
    float _2255;
    float _2257;
    float _2259;
    float _2261;
    if (_1548.y == 0u)
    {
        float _2191 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2192 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2191;
        float _2193 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2191;
        float _2194 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2191;
        uvec4 _2206 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2207 = _2206.x;
        uint _2218 = uint((float(_2206.y) * floor(float(uint(cbSceneParam._m0[85u].y * _405) / _2207))) + floor(float(uint(cbSceneParam._m0[85u].x * _404) / _2207)));
        float _2228 = (log2(_2194 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2229 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        uint _2232 = uint(isnan(14.0) ? _2229 : (isnan(_2229) ? 14.0 : min(_2229, 14.0)));
        uvec4 _2237 = texelFetch(g_lightClusterGridBuffer, int(((_2232 << 2u) + (_2218 << 6u)) >> 2u));
        uint _2238 = _2237.x;
        uint _2239 = _2206.z;
        float _2374;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        float _2384;
        if (((((1u << ((_2239 >> 4u) & 15u)) + 4294967295u) & _2238) == 0u) || ((_2239 & 240u) == 0u))
        {
            _2374 = 0.0;
            _2376 = 0.0;
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
            _2384 = 0.0;
        }
        else
        {
            float _2375;
            float _2377;
            float _2379;
            float _2381;
            float _2383;
            float _2385;
            float _2528 = 0.0;
            float _2529 = 0.0;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            float _2533 = 0.0;
            uint _2534 = 0u;
            uint _2543;
            bool _2544;
            for (;;)
            {
                _2543 = texelFetch(g_lightClassification, int((((_2232 << 5u) + (_2218 << 9u)) + (_2534 << 2u)) >> 2u)).x;
                _2544 = _2543 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2544)
                {
                    frontier_phi_61_pred = _2528;
                    frontier_phi_61_pred_1 = _2533;
                    frontier_phi_61_pred_2 = _2532;
                    frontier_phi_61_pred_3 = _2531;
                    frontier_phi_61_pred_4 = _2530;
                    frontier_phi_61_pred_5 = _2529;
                }
                else
                {
                    float _2652;
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    uint _2658;
                    _2652 = _2528;
                    _2653 = _2529;
                    _2654 = _2530;
                    _2655 = _2531;
                    _2656 = _2532;
                    _2657 = _2533;
                    _2658 = _2543;
                    float _2584;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    for (;;)
                    {
                        uint _2662 = uint(findLSB(_2658)) + (_2534 << 5u);
                        uint _2659 = (_2658 + 4294967295u) & _2658;
                        uint _2664 = _2662 * 48u;
                        vec4 _2678 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2664)).x, texelFetch(g_PointLightRenderingBuffer, int(_2664 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2664 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2664 + 3u)).x));
                        uint _2684 = (_2662 * 48u) + 4u;
                        vec4 _2697 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2684)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 3u)).x));
                        uint _2703 = (_2662 * 48u) + 8u;
                        vec3 _2714 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2703)).x, texelFetch(g_PointLightRenderingBuffer, int(_2703 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2703 + 2u)).x));
                        float _2718 = _2678.x - _2192;
                        float _2719 = _2678.y - _2193;
                        float _2720 = _2678.z - _2194;
                        float _2721 = dot(vec3(_2718, _2719, _2720), vec3(_2718, _2719, _2720));
                        float _2724 = inversesqrt(_2721);
                        float _2725 = _2724 * _2718;
                        float _2726 = _2724 * _2719;
                        float _2727 = _2724 * _2720;
                        float _2728 = dot(vec3(_426, _429, _432), vec3(_2725, _2726, _2727));
                        float _2733 = 1.0 - (_2721 * _2678.w);
                        float _4004 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
                        float _2734 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
                        float _2735 = sqrt(_2721) * _2697.w;
                        float _2738 = 1.39999997615814208984375 / (_2735 + 1.39999997615814208984375);
                        float _2739 = _2738 * _2738;
                        float _2742 = ((1.0 - _2739) * _2728) + _2739;
                        float _2745 = _2735 * _2735;
                        float _2749 = ((isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0))) * _2734) / ((_2745 * 0.699999988079071044921875) + 1.0);
                        float _2753 = (-0.0) - _2192;
                        float _2754 = (-0.0) - _2193;
                        float _2755 = (-0.0) - _2194;
                        float _2759 = inversesqrt(dot(vec3(_2753, _2754, _2755), vec3(_2753, _2754, _2755)));
                        float _2760 = _2759 * _2753;
                        float _2761 = _2759 * _2754;
                        float _2762 = _2759 * _2755;
                        float _2770 = exp2(log2(1.0 / ((_2745 * 3.5) + 5.0)) * 0.25);
                        float _2771 = 1.0 - _502;
                        float _2778 = sqrt(1.0 - ((1.0 - (_2771 * _2771)) * (1.0 - (_2770 * _2770))));
                        float _2779 = _2778 * _2778;
                        float _2780 = _2779 * _2779;
                        float _2781 = _2760 + _2725;
                        float _2782 = _2761 + _2726;
                        float _2783 = _2762 + _2727;
                        float _2787 = inversesqrt(dot(vec3(_2781, _2782, _2783), vec3(_2781, _2782, _2783)));
                        float _2791 = dot(vec3(_426, _429, _432), vec3(_2760, _2761, _2762));
                        float _4020 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
                        float _2794 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                        float _2795 = dot(vec3(_426, _429, _432), vec3(_2787 * _2781, _2787 * _2782, _2787 * _2783));
                        float _4031 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
                        float _2798 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                        float _2802 = ((_2798 * _2798) * (_2780 + (-1.0))) + 1.0;
                        float _2803 = _2738 * _2779;
                        float _2804 = _2803 * _2803;
                        float _2807 = ((1.0 - _2804) * _2728) + _2804;
                        float _4042 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
                        float _2808 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                        float _2809 = 1.0 - _2779;
                        float _2819 = (0.5 / (((_2808 * ((_2794 * _2809) + _2779)) + 9.9999999392252902907785028219223e-09) + (((_2808 * _2809) + _2779) * _2794))) * _2808;
                        float _4053 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
                        float _2830 = (((_2780 * 3.1415927410125732421875) * (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) / ((_2802 * _2802) * ((_2745 * 2.1991131305694580078125) + 3.141590118408203125))) * _2734;
                        _2587 = (_2749 * _2697.x) + _2655;
                        _2588 = (_2749 * _2697.y) + _2656;
                        _2589 = (_2749 * _2697.z) + _2657;
                        _2584 = (_2830 * _2714.x) + _2652;
                        _2585 = (_2830 * _2714.y) + _2653;
                        _2586 = (_2830 * _2714.z) + _2654;
                        if (_2659 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2652 = _2584;
                            _2653 = _2585;
                            _2654 = _2586;
                            _2655 = _2587;
                            _2656 = _2588;
                            _2657 = _2589;
                            _2658 = _2659;
                        }
                    }
                    frontier_phi_61_pred = _2584;
                    frontier_phi_61_pred_1 = _2589;
                    frontier_phi_61_pred_2 = _2588;
                    frontier_phi_61_pred_3 = _2587;
                    frontier_phi_61_pred_4 = _2586;
                    frontier_phi_61_pred_5 = _2585;
                }
                _2375 = frontier_phi_61_pred;
                _2385 = frontier_phi_61_pred_1;
                _2383 = frontier_phi_61_pred_2;
                _2381 = frontier_phi_61_pred_3;
                _2379 = frontier_phi_61_pred_4;
                _2377 = frontier_phi_61_pred_5;
                uint _2535 = _2534 + 1u;
                if (_2535 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2528 = _2375;
                    _2529 = _2377;
                    _2530 = _2379;
                    _2531 = _2381;
                    _2532 = _2383;
                    _2533 = _2385;
                    _2534 = _2535;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2374 = _2375;
            _2376 = _2377;
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
            _2384 = _2385;
        }
        uvec4 _2388 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2389 = _2388.z;
        uint _2391 = (_2389 >> 8u) & 15u;
        float _2496;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        if (((4294967295u << _2391) & _2238) == 0u)
        {
            _2496 = _2374;
            _2498 = _2376;
            _2500 = _2378;
            _2502 = _2380;
            _2504 = _2382;
            _2506 = _2384;
        }
        else
        {
            float _2521 = inversesqrt(dot(vec3(_2192, _2193, _2194), vec3(_2192, _2193, _2194)));
            float _2522 = _2521 * _2192;
            float _2523 = _2521 * _2193;
            float _2524 = _2521 * _2194;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2391 < ((_2389 >> 12u) & 15u))
            {
                float _2497;
                float _2499;
                float _2501;
                float _2503;
                float _2505;
                float _2507;
                float _2635 = _2374;
                float _2636 = _2376;
                float _2637 = _2378;
                float _2638 = _2380;
                float _2639 = _2382;
                float _2640 = _2384;
                uint _2641 = _2391;
                uint _2650;
                bool _2651;
                for (;;)
                {
                    _2650 = texelFetch(g_lightClassification, int((((_2232 << 5u) + (_2218 << 9u)) + (_2641 << 2u)) >> 2u)).x;
                    _2651 = _2650 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2651)
                    {
                        frontier_phi_67_pred = _2638;
                        frontier_phi_67_pred_1 = _2639;
                        frontier_phi_67_pred_2 = _2640;
                        frontier_phi_67_pred_3 = _2637;
                        frontier_phi_67_pred_4 = _2636;
                        frontier_phi_67_pred_5 = _2635;
                    }
                    else
                    {
                        float _2835;
                        float _2836;
                        float _2837;
                        float _2838;
                        float _2839;
                        float _2840;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _2848 = _2635;
                        float _2849 = _2636;
                        float _2850 = _2637;
                        float _2851 = _2638;
                        float _2852 = _2639;
                        float _2853 = _2640;
                        uint _2854 = _2650;
                        uint _2855;
                        vec4 _2880;
                        float _2881;
                        vec4 _2896;
                        vec3 _2908;
                        vec4 _2924;
                        vec4 _2940;
                        float _2987;
                        bool _2988;
                        for (;;)
                        {
                            uint _2865 = ((_2641 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2854));
                            _2855 = (_2854 + 4294967295u) & _2854;
                            uint _2867 = _2865 * 40u;
                            _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            _2881 = _2880.w;
                            uint _2883 = (_2865 * 40u) + 4u;
                            _2896 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 3u)).x));
                            uint _2898 = (_2865 * 40u) + 8u;
                            _2908 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x));
                            uint _2911 = (_2865 * 40u) + 16u;
                            _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            uint _2927 = (_2865 * 40u) + 20u;
                            _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            uint _2943 = (_2865 * 40u) + 24u;
                            vec4 _2956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 3u)).x));
                            uint _2962 = (_2865 * 40u) + 28u;
                            vec4 _2975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 3u)).x));
                            _2987 = fma(_2194, _2975.z, fma(_2193, _2975.y, _2975.x * _2192)) + _2975.w;
                            _2988 = !((fma(_2194, _2956.z, fma(_2193, _2956.y, _2956.x * _2192)) + _2956.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2988)
                            {
                                float _3015 = _2880.x - _2192;
                                float _3016 = _2880.y - _2193;
                                float _3017 = _2880.z - _2194;
                                float _3018 = dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017));
                                float _3021 = inversesqrt(_3018);
                                float _3022 = _3021 * _3015;
                                float _3023 = _3021 * _3016;
                                float _3024 = _3021 * _3017;
                                float _3028 = 1.0 - (_3018 / (_2881 * _2881));
                                float _4064 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                                float _3029 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
                                float _3033 = sqrt(_3018) * _2896.w;
                                float _3035 = 1.39999997615814208984375 / (_3033 + 1.39999997615814208984375);
                                float _3036 = _3035 * _3035;
                                float _3039 = ((1.0 - _3036) * dot(vec3(_3022, _3023, _3024), vec3(_426, _429, _432))) + _3036;
                                float _3042 = _3033 * _3033;
                                float _3046 = (fma(_2194, _2924.z, fma(_2193, _2924.y, _2924.x * _2192)) + _2924.w) / _2987;
                                float _3047 = (fma(_2194, _2940.z, fma(_2193, _2940.y, _2940.x * _2192)) + _2940.w) / _2987;
                                float _3051 = 1.0 - dot(vec2(_3046, _3047), vec2(_3046, _3047));
                                float _4080 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                                float _3052 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                                float _3053 = _3052 * (((isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0))) * _3029) / ((_3042 * 0.699999988079071044921875) + 1.0));
                                float _3065 = exp2(log2(1.0 / ((_3042 * 3.5) + 5.0)) * 0.25);
                                float _3066 = 1.0 - _502;
                                float _3073 = sqrt(1.0 - ((1.0 - (_3066 * _3066)) * (1.0 - (_3065 * _3065))));
                                float _3074 = _3073 * _3073;
                                float _3075 = _3074 * _3074;
                                float _3076 = _3022 - _2522;
                                float _3077 = _3023 - _2523;
                                float _3078 = _3024 - _2524;
                                float _3082 = inversesqrt(dot(vec3(_3076, _3077, _3078), vec3(_3076, _3077, _3078)));
                                float _3086 = dot(vec3(_426, _429, _432), vec3((-0.0) - _2522, (-0.0) - _2523, (-0.0) - _2524));
                                float _4091 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                                float _3089 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                                float _3090 = dot(vec3(_426, _429, _432), vec3(_3082 * _3076, _3082 * _3077, _3082 * _3078));
                                float _4102 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                                float _3093 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
                                float _3097 = ((_3093 * _3093) * (_3075 + (-1.0))) + 1.0;
                                float _3098 = _3035 * _3074;
                                float _3099 = _3098 * _3098;
                                float _3105 = ((1.0 - _3099) * dot(vec3(_426, _429, _432), vec3(_3022, _3023, _3024))) + _3099;
                                float _4113 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                                float _3106 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                                float _3107 = 1.0 - _3074;
                                float _3117 = (0.5 / (((_3106 * ((_3089 * _3107) + _3074)) + 9.9999999392252902907785028219223e-09) + (((_3106 * _3107) + _3074) * _3089))) * _3106;
                                float _4124 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3127 = (_3052 * _3029) * (((_3075 * 3.1415927410125732421875) * (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) / ((_3097 * _3097) * ((_3042 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3127 * _2908.x;
                                frontier_phi_73_pred_1 = _3127 * _2908.y;
                                frontier_phi_73_pred_2 = _3053 * _2896.z;
                                frontier_phi_73_pred_3 = _3053 * _2896.y;
                                frontier_phi_73_pred_4 = _3053 * _2896.x;
                                frontier_phi_73_pred_5 = _3127 * _2908.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3131 = frontier_phi_73_pred;
                            _3132 = frontier_phi_73_pred_1;
                            _3136 = frontier_phi_73_pred_2;
                            _3135 = frontier_phi_73_pred_3;
                            _3134 = frontier_phi_73_pred_4;
                            _3133 = frontier_phi_73_pred_5;
                            _2838 = _3134 + _2851;
                            _2839 = _3135 + _2852;
                            _2840 = _3136 + _2853;
                            _2835 = _3131 + _2848;
                            _2836 = _3132 + _2849;
                            _2837 = _3133 + _2850;
                            if (_2855 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2848 = _2835;
                                _2849 = _2836;
                                _2850 = _2837;
                                _2851 = _2838;
                                _2852 = _2839;
                                _2853 = _2840;
                                _2854 = _2855;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2838;
                        frontier_phi_67_pred_1 = _2839;
                        frontier_phi_67_pred_2 = _2840;
                        frontier_phi_67_pred_3 = _2837;
                        frontier_phi_67_pred_4 = _2836;
                        frontier_phi_67_pred_5 = _2835;
                    }
                    _2503 = frontier_phi_67_pred;
                    _2505 = frontier_phi_67_pred_1;
                    _2507 = frontier_phi_67_pred_2;
                    _2501 = frontier_phi_67_pred_3;
                    _2499 = frontier_phi_67_pred_4;
                    _2497 = frontier_phi_67_pred_5;
                    uint _2642 = _2641 + 1u;
                    if (_2642 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2635 = _2497;
                        _2636 = _2499;
                        _2637 = _2501;
                        _2638 = _2503;
                        _2639 = _2505;
                        _2640 = _2507;
                        _2641 = _2642;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2505;
                frontier_phi_55_56_ladder_1 = _2507;
                frontier_phi_55_56_ladder_2 = _2503;
                frontier_phi_55_56_ladder_3 = _2501;
                frontier_phi_55_56_ladder_4 = _2499;
                frontier_phi_55_56_ladder_5 = _2497;
            }
            else
            {
                frontier_phi_55_56_ladder = _2382;
                frontier_phi_55_56_ladder_1 = _2384;
                frontier_phi_55_56_ladder_2 = _2380;
                frontier_phi_55_56_ladder_3 = _2378;
                frontier_phi_55_56_ladder_4 = _2376;
                frontier_phi_55_56_ladder_5 = _2374;
            }
            _2496 = frontier_phi_55_56_ladder_5;
            _2498 = frontier_phi_55_56_ladder_4;
            _2500 = frontier_phi_55_56_ladder_3;
            _2502 = frontier_phi_55_56_ladder_2;
            _2504 = frontier_phi_55_56_ladder;
            _2506 = frontier_phi_55_56_ladder_1;
        }
        float _2511 = isnan(1.0) ? _486 : (isnan(_486) ? 1.0 : min(_486, 1.0));
        _2251 = (_2511 * _2502) + _1684;
        _2253 = (_2511 * _2504) + _1686;
        _2255 = (_2511 * _2506) + _1688;
        _2257 = ((_2496 * _471) * _2511) + _2032;
        _2259 = ((_2498 * _473) * _2511) + _2034;
        _2261 = ((_2500 * _474) * _2511) + _2036;
    }
    else
    {
        _2251 = _1684;
        _2253 = _1686;
        _2255 = _1688;
        _2257 = _2032;
        _2259 = _2034;
        _2261 = _2036;
    }
    uint _2267 = _447 + uint(cbMatDynParam._m0[0u].w);
    float _2275 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _297.x) * cbInstanceData._m0[_2267].x;
    float _2278 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _297.y) * cbInstanceData._m0[_2267].y;
    float _2281 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _297.z) * cbInstanceData._m0[_2267].z;
    float _4140 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _4151 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _4162 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _2298 = (((isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_2251 + ((isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0))) * _486))) + ((_2257 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _1296)) * cbPerFrame._m0[3u].x)) + _2275;
    float _2300 = (_2278 + ((_2259 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _1296)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_2253 + ((isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0))) * _486)));
    float _2302 = (_2281 + ((_2261 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _1296)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2255 + ((isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0))) * _486)));
    float _4188 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2315 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    uint _2316 = _445 + 6u;
    float _2324 = _404 / cbSceneParam._m0[86u].x;
    float _2325 = _405 / cbSceneParam._m0[86u].y;
    vec4 _2339 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2324, _2325, (log2((isnan(cbSceneParam._m0[77u].w) ? _338 : (isnan(_338) ? cbSceneParam._m0[77u].w : min(_338, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2341 = _2339.x;
    float _2342 = _2339.y;
    float _2343 = _2339.z;
    float _2344 = _2339.w;
    float _2437;
    float _2439;
    float _2441;
    float _2443;
    if (_338 > cbSceneParam._m0[78u].w)
    {
        float _2399 = isnan(_338) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _338 : min(cbSceneParam._m0[80u].w, _338));
        float _2400 = _2399 / _338;
        float _2411 = _2400 * _389;
        float _2412 = _390 * _2400;
        float _2413 = (-0.0) - _2412;
        float _2415 = _2400 * _391;
        float _2417 = (cbSceneParam._m0[77u].w * _2413) / _2399;
        float _2418 = _2417 + cbSceneParam._m0[79u].w;
        float _2419 = cbSceneParam._m0[79u].w - _2412;
        float _2425 = sqrt(((_2411 * _2411) + (_2412 * _2412)) + (_2415 * _2415));
        float _2428 = (1.0 - (cbSceneParam._m0[77u].w / _2399)) * _2425;
        float _2433 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2435 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2597;
        if (abs((_2413 - _2417) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2597 = ((((_2418 > 0.0) ? exp2(_2433 * _2418) : (2.0 - exp2(_2435 * _2418))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2428;
        }
        else
        {
            float _2557 = 1.0 / cbSceneParam._m0[80u].x;
            float _2558 = isnan(_2419) ? _2418 : (isnan(_2418) ? _2419 : max(_2418, _2419));
            float _2559 = isnan(_2419) ? _2418 : (isnan(_2418) ? _2419 : min(_2418, _2419));
            float _2568 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : min(_2558, 0.0));
            float _2569 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : min(_2559, 0.0));
            _2597 = ((abs(_2425 / _2413) * cbSceneParam._m0[80u].y) * ((((_2568 - _2569) * 2.0) - ((exp2(_2433 * (isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0)))) - exp2(_2433 * (isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0))))) * _2557)) - ((exp2(_2435 * _2568) - exp2(_2435 * _2569)) * _2557))) + (_2428 * cbSceneParam._m0[80u].z);
        }
        vec4 _2599 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2324, _2325, 1.0), 0.0);
        float _2608 = exp2((_2597 * (-1.44269502162933349609375)) * (1.0 - _2599.w));
        float _2609 = log2(_2608);
        float _2625 = log2(_2344);
        _2437 = (exp2(_2625 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2609 * cbSceneParam._m0[78u].x)) * _2599.x) / cbSceneParam._m0[78u].x)) + _2341;
        _2439 = (exp2(_2625 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2609 * cbSceneParam._m0[78u].y)) * _2599.y) / cbSceneParam._m0[78u].y)) + _2342;
        _2441 = (exp2(_2625 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2609 * cbSceneParam._m0[78u].z)) * _2599.z) / cbSceneParam._m0[78u].z)) + _2343;
        _2443 = _2608 * _2344;
    }
    else
    {
        _2437 = _2341;
        _2439 = _2342;
        _2441 = _2343;
        _2443 = _2344;
    }
    float _2455 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2456 = _2455 == 3.0;
    float _2457 = log2(_2443);
    float _2461 = exp2(_2457 * cbSceneParam._m0[78u].x);
    float _2462 = exp2(_2457 * cbSceneParam._m0[78u].y);
    float _2463 = exp2(_2457 * cbSceneParam._m0[78u].z);
    float _2464 = _2461 * (isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0)));
    float _2465 = _2462 * (isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0)));
    float _2466 = _2463 * (isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0)));
    float _2475 = (_2455 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2475 * (_2456 ? _2464 : (_2464 + (cbSceneParam._m0[72u].w * _2437)));
    SV_Target.y = _2475 * (_2456 ? _2465 : (_2465 + (cbSceneParam._m0[72u].w * _2439)));
    SV_Target.z = _2475 * (_2456 ? _2466 : (_2466 + (cbSceneParam._m0[72u].w * _2441)));
    SV_Target.w = cbInstanceData._m0[_2316].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2275) * _2315) * _2461) * _2475;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2278) * _2315) * _2462) * _2475;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2281) * _2315) * _2463) * _2475;
    SV_Target_1.w = cbInstanceData._m0[_2316].w;
}


