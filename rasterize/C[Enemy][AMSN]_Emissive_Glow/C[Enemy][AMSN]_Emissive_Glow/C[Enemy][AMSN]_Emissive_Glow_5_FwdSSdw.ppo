#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _844;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _183 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _184 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _185 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_183, _184, _185), vec3(_183, _184, _185)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _226 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _226.x * cbMtdParam._m0[9u].x;
    float _233 = _226.y * cbMtdParam._m0[9u].y;
    float _234 = _226.z * cbMtdParam._m0[9u].z;
    vec4 _246 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _250 = _246.z;
    float _254 = (_246.x * 2.0) + (-1.0);
    float _256 = (_246.y * 2.0) + (-1.0);
    float _257 = dot(vec2(_254, _256), vec2(_254, _256));
    float _3225 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _263 = sqrt(1.0 - (isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0))));
    vec4 _300 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _307 = fma(_263, _197 * NORMAL.x, fma(_256, _204 * TANGENT.x, (_190 * _183) * _254));
    float _310 = fma(_263, _197 * NORMAL.y, fma(_256, _204 * TANGENT.y, (_190 * _184) * _254));
    float _313 = fma(_263, _197 * NORMAL.z, fma(_256, _204 * TANGENT.z, (_190 * _185) * _254));
    float _317 = inversesqrt(dot(vec3(_307, _310, _313), vec3(_307, _310, _313)));
    float _318 = _317 * _307;
    float _319 = _317 * _310;
    float _320 = _317 * _313;
    float _3236 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _321 = isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0));
    float _3247 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3258 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3269 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _340 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _381 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _391 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _381);
    float _392 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _381);
    float _393 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _381);
    float _397 = inversesqrt(dot(vec3(_391, _392, _393), vec3(_391, _392, _393)));
    float _398 = _391 * _397;
    float _399 = _392 * _397;
    float _400 = _393 * _397;
    float _406 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _407 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _428 = fma(_320, cbSceneParam._m0[5u].z, fma(_319, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _318));
    float _431 = fma(_320, cbSceneParam._m0[6u].z, fma(_319, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _318));
    float _434 = fma(_320, cbSceneParam._m0[7u].z, fma(_319, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _318));
    uint _447 = uint(roundEven(NORMAL.w)) * 13u;
    uint _448 = _447 + 9u;
    uint _449 = _448 + uint(cbMatDynParam._m0[0u].w);
    float _455 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0)))) * cbInstanceData._m0[_449].x;
    float _456 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0)))) * cbInstanceData._m0[_449].y;
    float _457 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0)))) * cbInstanceData._m0[_449].z;
    float _3280 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
    float _3291 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
    float _3302 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
    vec4 _469 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _406, cbSceneParam._m0[86u].y * _407));
    float _472 = _469.x * TEXCOORD.z;
    float _473 = dot(vec3(_318, _319, _320), vec3(_398, _399, _400));
    float _476 = _473 * 2.0;
    float _480 = (_476 * _318) - _398;
    float _481 = (_476 * _319) - _399;
    float _482 = (_476 * _320) - _400;
    float _486 = abs(dot(vec3(_398, _399, _400), vec3(_318, _319, _320)));
    float _3313 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _488 = sqrt(_321);
    float _501 = exp2((_488 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_488 * 3.0));
    float _533 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _843;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _568 = fma(_541, cbModelParam._m0[26u].z, fma(_537, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _533));
        float _572 = fma(_541, cbModelParam._m0[27u].z, fma(_537, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _533));
        float _576 = fma(_541, cbModelParam._m0[28u].z, fma(_537, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _533));
        float _601 = _533 + _318;
        float _602 = _537 + _319;
        float _603 = _541 + _320;
        float _613 = fma(_603, cbModelParam._m0[26u].z, fma(_602, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _601)) - _568;
        float _614 = fma(_603, cbModelParam._m0[27u].z, fma(_602, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _601)) - _572;
        float _615 = fma(_603, cbModelParam._m0[28u].z, fma(_602, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _601)) - _576;
        float _619 = inversesqrt(dot(vec3(_613, _614, _615), vec3(_613, _614, _615)));
        float _632 = ((_619 * _613) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_568 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _633 = ((_619 * _614) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_572 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _634 = ((_619 * _615) / cbModelParam._m0[34u].z) + ((((((_576 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _637 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        vec4 _644 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        vec4 _651 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        float _671 = exp2((_637.w + (-0.5)) * 20.0) * 2.0;
        float _672 = _671 * (_637.x + (-0.5));
        float _673 = _671 * (_637.y + (-0.5));
        float _674 = _671 * (_637.z + (-0.5));
        float _681 = exp2((_644.w + (-0.5)) * 20.0) * 2.0;
        float _682 = _681 * (_644.x + (-0.5));
        float _683 = _681 * (_644.y + (-0.5));
        float _684 = _681 * (_644.z + (-0.5));
        float _691 = exp2((_651.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_651.x + (-0.5));
        float _693 = _691 * (_651.y + (-0.5));
        float _694 = _691 * (_651.z + (-0.5));
        float _701 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _702 = _701 * (_658.x + (-0.5));
        float _703 = _701 * (_658.y + (-0.5));
        float _704 = _701 * (_658.z + (-0.5));
        float _705 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _706 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _707 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _708 = _672 * 0.5;
        float _709 = _682 * 0.5;
        float _710 = _692 * 0.5;
        float _711 = dot(vec3(_708, _709, _710), vec3(_708, _709, _710));
        float _716 = (_711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_711);
        float _725 = (dot(vec3(_318, _319, _320), vec3(_716 * _708, _716 * _709, _716 * _710)) + 1.0) * 0.5;
        float _3339 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _735 = sqrt(((_709 * _709) + (_708 * _708)) + (_710 * _710)) / (_705 + 9.9999997473787516355514526367188e-06);
        float _3350 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _736 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
        float _737 = _736 * 2.0;
        float _741 = (1.0 - _736) / (_736 + 1.0);
        float _3361 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _742 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
        float _751 = ((((1.0 - _742) * (_737 + 2.0)) * exp2(log2(isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0))) * (_737 + 1.0))) + _742) * _705;
        float _752 = _673 * 0.5;
        float _753 = _683 * 0.5;
        float _754 = _693 * 0.5;
        float _755 = dot(vec3(_752, _753, _754), vec3(_752, _753, _754));
        float _760 = (_755 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_755);
        float _768 = (dot(vec3(_318, _319, _320), vec3(_760 * _752, _760 * _753, _760 * _754)) + 1.0) * 0.5;
        float _3372 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _777 = sqrt(((_753 * _753) + (_752 * _752)) + (_754 * _754)) / (_706 + 9.9999997473787516355514526367188e-06);
        float _3383 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _778 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
        float _779 = _778 * 2.0;
        float _783 = (1.0 - _778) / (_778 + 1.0);
        float _3394 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _793 = ((((1.0 - _784) * (_779 + 2.0)) * exp2(log2(isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))) * (_779 + 1.0))) + _784) * _706;
        float _794 = _674 * 0.5;
        float _795 = _684 * 0.5;
        float _796 = _694 * 0.5;
        float _797 = dot(vec3(_794, _795, _796), vec3(_794, _795, _796));
        float _802 = (_797 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_797);
        float _810 = (dot(vec3(_318, _319, _320), vec3(_802 * _794, _802 * _795, _802 * _796)) + 1.0) * 0.5;
        float _3405 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _819 = sqrt(((_795 * _795) + (_794 * _794)) + (_796 * _796)) / (_707 + 9.9999997473787516355514526367188e-06);
        float _3416 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _821 = _820 * 2.0;
        float _825 = (1.0 - _820) / (_820 + 1.0);
        float _3427 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _835 = ((((1.0 - _826) * (_821 + 2.0)) * exp2(log2(isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) * (_821 + 1.0))) + _826) * _707;
        _843 = _674;
        _845 = _673;
        _846 = _672;
        _847 = _684;
        _848 = _683;
        _849 = _682;
        _850 = _694;
        _851 = _693;
        _852 = _692;
        _853 = _707;
        _854 = _706;
        _855 = _705;
        _856 = cbModelParam._m0[36u].z * (isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0)));
        _857 = cbModelParam._m0[36u].z * (isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0)));
        _858 = cbModelParam._m0[36u].z * (isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0)));
    }
    else
    {
        _843 = _844;
        _845 = _844;
        _846 = _844;
        _847 = _844;
        _848 = _844;
        _849 = _844;
        _850 = _844;
        _851 = _844;
        _852 = _844;
        _853 = _844;
        _854 = _844;
        _855 = _844;
        _856 = 0.0;
        _857 = 0.0;
        _858 = 0.0;
    }
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _884 = fma(_541, cbModelParam._m0[30u].z, fma(_537, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _533));
        float _888 = fma(_541, cbModelParam._m0[31u].z, fma(_537, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _533));
        float _892 = fma(_541, cbModelParam._m0[32u].z, fma(_537, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _533));
        float _915 = _533 + _318;
        float _916 = _537 + _319;
        float _917 = _541 + _320;
        float _927 = fma(_917, cbModelParam._m0[30u].z, fma(_916, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _915)) - _884;
        float _928 = fma(_917, cbModelParam._m0[31u].z, fma(_916, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _915)) - _888;
        float _929 = fma(_917, cbModelParam._m0[32u].z, fma(_916, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _915)) - _892;
        float _933 = inversesqrt(dot(vec3(_927, _928, _929), vec3(_927, _928, _929)));
        float _946 = ((_933 * _927) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_884 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _947 = ((_933 * _928) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_888 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _948 = ((_933 * _929) / cbModelParam._m0[35u].z) + ((((((_892 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        float _983 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_950.x + (-0.5));
        float _985 = _983 * (_950.y + (-0.5));
        float _986 = _983 * (_950.z + (-0.5));
        float _993 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_957.x + (-0.5));
        float _995 = _993 * (_957.y + (-0.5));
        float _996 = _993 * (_957.z + (-0.5));
        float _1003 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_964.x + (-0.5));
        float _1005 = _1003 * (_964.y + (-0.5));
        float _1006 = _1003 * (_964.z + (-0.5));
        float _1013 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_971.x + (-0.5));
        float _1015 = _1013 * (_971.y + (-0.5));
        float _1016 = _1013 * (_971.z + (-0.5));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = _984 * 0.5;
        float _1021 = _994 * 0.5;
        float _1022 = _1004 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1036 = (dot(vec3(_318, _319, _320), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3468 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1045 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3479 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3490 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))) * (_1047 + 1.0))) + _1052) * _1017;
        float _1062 = _985 * 0.5;
        float _1063 = _995 * 0.5;
        float _1064 = _1005 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_318, _319, _320), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3501 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3512 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3523 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * (_1089 + 1.0))) + _1094) * _1018;
        float _1104 = _986 * 0.5;
        float _1105 = _996 * 0.5;
        float _1106 = _1006 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_318, _319, _320), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3534 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3545 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3556 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * (_1131 + 1.0))) + _1136) * _1019;
        _1153 = _986;
        _1154 = _985;
        _1155 = _984;
        _1156 = _996;
        _1157 = _995;
        _1158 = _994;
        _1159 = _1006;
        _1160 = _1005;
        _1161 = _1004;
        _1162 = _1019;
        _1163 = _1018;
        _1164 = _1017;
        _1165 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
        _1166 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1167 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
    }
    else
    {
        _1153 = _844;
        _1154 = _844;
        _1155 = _844;
        _1156 = _844;
        _1157 = _844;
        _1158 = _844;
        _1159 = _844;
        _1160 = _844;
        _1161 = _844;
        _1162 = _844;
        _1163 = _844;
        _1164 = _844;
        _1165 = 0.0;
        _1166 = 0.0;
        _1167 = 0.0;
    }
    float _1177 = (cbModelParam._m0[1u].x * (_1165 - _856)) + _856;
    float _1178 = (cbModelParam._m0[1u].x * (_1166 - _857)) + _857;
    float _1179 = (cbModelParam._m0[1u].x * (_1167 - _858)) + _858;
    float _1200 = fma(_1179, cbSceneParam._m0[89u].z, fma(_1178, cbSceneParam._m0[89u].y, _1177 * cbSceneParam._m0[89u].x));
    float _1203 = fma(_1179, cbSceneParam._m0[90u].z, fma(_1178, cbSceneParam._m0[90u].y, _1177 * cbSceneParam._m0[90u].x));
    float _1206 = fma(_1179, cbSceneParam._m0[91u].z, fma(_1178, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1177));
    float _1221 = _480 * 0.5;
    float _1222 = _481 * 0.5;
    float _1223 = _482 * 0.5;
    float _1224 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_1155, _1158, _1161, _1164));
    float _1227 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_1154, _1157, _1160, _1163));
    float _1230 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_1153, _1156, _1159, _1162));
    float _1264;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1237 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_843, _847, _850, _853));
        float _1241 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_845, _848, _851, _854));
        float _1245 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_846, _849, _852, _855));
        float _1252 = dot(vec4(cbModelParam._m0[39u]), vec4(_1221, _1222, _1223, 1.0));
        _1264 = dot(vec3(isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)), isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1252) ? 0.0 : (isnan(0.0) ? _1252 : max(0.0, _1252))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1264 = 1.0;
    }
    float _1275;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1266 = dot(vec4(cbModelParam._m0[40u]), vec4(_1221, _1222, _1223, 1.0));
        _1275 = dot(vec3(isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)), isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)), isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1266) ? 0.0 : (isnan(0.0) ? _1266 : max(0.0, _1266))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1275 = 1.0;
    }
    float _1279 = (_1275 * cbModelParam._m0[1u].x) + (_1264 * (1.0 - cbModelParam._m0[1u].x));
    float _1289 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _321);
    float _1290 = isnan(_1289) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1289 : min(cbModelParam._m0[25u].z, _1289));
    float _1371;
    float _1373;
    float _1375;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1338 = fma(_541, cbModelParam._m0[13u].z, fma(_537, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _533)) + cbModelParam._m0[13u].w;
        float _1342 = fma(_541, cbModelParam._m0[14u].z, fma(_537, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _533)) + cbModelParam._m0[14u].w;
        float _1346 = fma(_541, cbModelParam._m0[15u].z, fma(_537, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _533)) + cbModelParam._m0[15u].w;
        float _1349 = fma(_482, cbModelParam._m0[13u].z, fma(_481, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _480));
        float _1352 = fma(_482, cbModelParam._m0[14u].z, fma(_481, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _480));
        float _1355 = fma(_482, cbModelParam._m0[15u].z, fma(_481, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _480));
        float _1383;
        if (_1349 > 0.0)
        {
            _1383 = abs((1.0 - _1338) / _1349);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1349 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1338 + 1.0) / _1349);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1383 = frontier_phi_14_12_ladder;
        }
        float _1608;
        if (_1352 > 0.0)
        {
            _1608 = abs((1.0 - _1342) / _1352);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1352 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1342 + 1.0) / _1352);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1608 = frontier_phi_23_19_ladder;
        }
        float _1854;
        if (_1355 > 0.0)
        {
            _1854 = abs((1.0 - _1346) / _1355);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1355 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1346 + 1.0) / _1355);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1854 = frontier_phi_35_30_ladder;
        }
        float _1856 = isnan(_1608) ? _1383 : (isnan(_1383) ? _1608 : min(_1383, _1608));
        float _1857 = isnan(_1854) ? _1856 : (isnan(_1856) ? _1854 : min(_1856, _1854));
        float _1861 = (_1857 * _1349) + _1338;
        float _1862 = (_1857 * _1352) + _1342;
        float _1863 = (_1857 * _1355) + _1346;
        float _1864 = _1857 * 9.9999997473787516355514526367188e-05;
        float _1866 = (-1.0) - _1864;
        float _1868 = _1864 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1863 > _1868) || ((_1863 < _1866) || ((_1862 > _1868) || ((_1862 < _1866) || ((_1861 < _1866) || (_1861 > _1868))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1987 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1863, cbModelParam._m0[9u].z, fma(_1862, cbModelParam._m0[9u].y, _1861 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1863, cbModelParam._m0[10u].z, fma(_1862, cbModelParam._m0[10u].y, _1861 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1863, cbModelParam._m0[11u].z, fma(_1862, cbModelParam._m0[11u].y, _1861 * cbModelParam._m0[11u].x))), _1290);
            frontier_phi_13_35_ladder = _1987.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1987.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1987.x * cbModelParam._m0[1u].y;
        }
        _1371 = frontier_phi_13_35_ladder_2;
        _1373 = frontier_phi_13_35_ladder_1;
        _1375 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1359 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_480, _481, _482), _1290);
        _1371 = _1359.x * cbModelParam._m0[1u].y;
        _1373 = _1359.y * cbModelParam._m0[1u].y;
        _1375 = _1359.z * cbModelParam._m0[1u].y;
    }
    float _1379 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _321);
    float _1380 = isnan(_1379) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1379 : min(cbModelParam._m0[25u].w, _1379));
    float _1472;
    float _1474;
    float _1476;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1436 = fma(_541, cbModelParam._m0[21u].z, fma(_537, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _533)) + cbModelParam._m0[21u].w;
        float _1440 = fma(_541, cbModelParam._m0[22u].z, fma(_537, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _533)) + cbModelParam._m0[22u].w;
        float _1444 = fma(_541, cbModelParam._m0[23u].z, fma(_537, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _533)) + cbModelParam._m0[23u].w;
        float _1447 = fma(_482, cbModelParam._m0[21u].z, fma(_481, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _480));
        float _1450 = fma(_482, cbModelParam._m0[22u].z, fma(_481, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _480));
        float _1453 = fma(_482, cbModelParam._m0[23u].z, fma(_481, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _480));
        float _1613;
        if (_1447 > 0.0)
        {
            _1613 = abs((1.0 - _1436) / _1447);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1447 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1436 + 1.0) / _1447);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1613 = frontier_phi_25_21_ladder;
        }
        float _1881;
        if (_1450 > 0.0)
        {
            _1881 = abs((1.0 - _1440) / _1450);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1450 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1440 + 1.0) / _1450);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1881 = frontier_phi_37_32_ladder;
        }
        float _2086;
        if (_1453 > 0.0)
        {
            _2086 = abs((1.0 - _1444) / _1453);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1444 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2086 = frontier_phi_46_43_ladder;
        }
        float _2088 = isnan(_1881) ? _1613 : (isnan(_1613) ? _1881 : min(_1613, _1881));
        float _2089 = isnan(_2086) ? _2088 : (isnan(_2088) ? _2086 : min(_2088, _2086));
        float _2093 = (_2089 * _1447) + _1436;
        float _2094 = (_2089 * _1450) + _1440;
        float _2095 = (_2089 * _1453) + _1444;
        float _2096 = _2089 * 9.9999997473787516355514526367188e-05;
        float _2097 = (-1.0) - _2096;
        float _2099 = _2096 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2095 > _2099) || ((_2095 < _2097) || ((_2094 > _2099) || ((_2094 < _2097) || ((_2093 < _2097) || (_2093 > _2099))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2329 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2095, cbModelParam._m0[17u].z, fma(_2094, cbModelParam._m0[17u].y, _2093 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2095, cbModelParam._m0[18u].z, fma(_2094, cbModelParam._m0[18u].y, _2093 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2095, cbModelParam._m0[19u].z, fma(_2094, cbModelParam._m0[19u].y, _2093 * cbModelParam._m0[19u].x))), _1380);
            frontier_phi_22_46_ladder = _2329.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2329.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2329.x * cbModelParam._m0[1u].z;
        }
        _1472 = frontier_phi_22_46_ladder_2;
        _1474 = frontier_phi_22_46_ladder_1;
        _1476 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1456 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_480, _481, _482), _1380);
        _1472 = _1456.x * cbModelParam._m0[1u].z;
        _1474 = _1456.y * cbModelParam._m0[1u].z;
        _1476 = _1456.z * cbModelParam._m0[1u].z;
    }
    float _1488 = ((((1.0 - _501) * ((_488 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_501 * _488)) * _472;
    float _1489 = _1488 * ((cbModelParam._m0[1u].w * (_1472 - _1371)) + _1371);
    float _1490 = _1488 * ((cbModelParam._m0[1u].w * (_1474 - _1373)) + _1373);
    float _1491 = _1488 * ((cbModelParam._m0[1u].w * (_1476 - _1375)) + _1375);
    float _1494 = fma(_1491, cbSceneParam._m0[89u].z, fma(_1490, cbSceneParam._m0[89u].y, _1489 * cbSceneParam._m0[89u].x));
    float _1497 = fma(_1491, cbSceneParam._m0[90u].z, fma(_1490, cbSceneParam._m0[90u].y, _1489 * cbSceneParam._m0[90u].x));
    float _1500 = fma(_1491, cbSceneParam._m0[91u].z, fma(_1490, cbSceneParam._m0[91u].y, _1489 * cbSceneParam._m0[91u].x));
    vec4 _1508 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_406, _407));
    float _1510 = _1508.w;
    float _1522 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1510);
    float _1523 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1510);
    float _1524 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1510);
    uvec4 _1528 = floatBitsToUint(cbInstanceData._m0[_447 + 5u]);
    uint _1530 = _1528.x * 14u;
    uint _1531 = _1530 + 13u;
    float _1538 = _472 + (-1.0);
    float _1543 = (cbLight._m0[_1531].x * _1538) + 1.0;
    float _1544 = (cbLight._m0[_1531].y * _1538) + 1.0;
    float _1545 = (cbLight._m0[_1531].z * _1538) + 1.0;
    float _1546 = (cbLight._m0[_1531].w * _1538) + 1.0;
    uint _1547 = _1530 + 5u;
    float _1553 = isnan(1.0) ? _1544 : (isnan(_1544) ? 1.0 : min(_1544, 1.0));
    uint _1557 = _1530 + 4u;
    float _1567 = isnan(1.0) ? _1543 : (isnan(_1543) ? 1.0 : min(_1543, 1.0));
    uint _1571 = _1530 | 1u;
    float _1582 = dot(vec3(cbLight._m0[_1530].xyz), vec3(_318, _319, _320));
    float _1585 = dot(vec3(cbLight._m0[_1571].xyz), vec3(_318, _319, _320));
    float _3692 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
    float _3703 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
    float _1590 = (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * 0.3183098733425140380859375;
    float _1592 = (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * 0.3183098733425140380859375;
    float _1599 = ((cbLight._m0[_1547].x * _1553) * _1592) + (((cbLight._m0[_1557].x * _1522) * _1567) * _1590);
    float _1600 = ((_1553 * cbLight._m0[_1547].y) * _1592) + (((cbLight._m0[_1557].y * _1523) * _1567) * _1590);
    float _1601 = ((_1553 * cbLight._m0[_1547].z) * _1592) + (((cbLight._m0[_1557].z * _1524) * _1567) * _1590);
    uvec4 _1605 = floatBitsToUint(cbLight._m0[_1530 + 12u]);
    bool _1607 = _1605.x == 0u;
    float _1618;
    float _1620;
    float _1622;
    if (_1607)
    {
        _1618 = _1599;
        _1620 = _1600;
        _1622 = _1601;
    }
    else
    {
        uint _1626 = _1530 + 6u;
        float _1642 = (dot(vec3(cbLight._m0[_1530 + 2u].xyz), vec3(_318, _319, _320)) * 0.5) + 0.5;
        float _1643 = _1642 * _1642;
        float _3714 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1645 = isnan(1.0) ? _1545 : (isnan(_1545) ? 1.0 : min(_1545, 1.0));
        _1618 = (((cbLight._m0[_1626].x * 0.3183098733425140380859375) * _1644) * _1645) + _1599;
        _1620 = (((cbLight._m0[_1626].y * 0.3183098733425140380859375) * _1644) * _1645) + _1600;
        _1622 = (((cbLight._m0[_1626].z * 0.3183098733425140380859375) * _1644) * _1645) + _1601;
    }
    bool _1625 = _1605.y == 0u;
    float _1663;
    float _1665;
    float _1667;
    if (_1625)
    {
        _1663 = _1618;
        _1665 = _1620;
        _1667 = _1622;
    }
    else
    {
        uint _1825 = _1530 + 7u;
        float _1841 = (dot(vec3(cbLight._m0[_1530 + 3u].xyz), vec3(_318, _319, _320)) * 0.5) + 0.5;
        float _1842 = _1841 * _1841;
        float _3730 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1843 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1844 = isnan(1.0) ? _1546 : (isnan(_1546) ? 1.0 : min(_1546, 1.0));
        _1663 = (((cbLight._m0[_1825].x * 0.3183098733425140380859375) * _1843) * _1844) + _1618;
        _1665 = (((cbLight._m0[_1825].y * 0.3183098733425140380859375) * _1843) * _1844) + _1620;
        _1667 = (((cbLight._m0[_1825].z * 0.3183098733425140380859375) * _1843) * _1844) + _1622;
    }
    uint _1670 = _1530 + 8u;
    float _1683 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1530].w)) * _321) * 0.949999988079071044921875);
    float _1684 = _1683 * _1683;
    float _1685 = cbLight._m0[_1530].x + _398;
    float _1686 = cbLight._m0[_1530].y + _399;
    float _1687 = cbLight._m0[_1530].z + _400;
    float _1691 = inversesqrt(dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687)));
    float _1692 = _1691 * _1685;
    float _1693 = _1691 * _1686;
    float _1694 = _1691 * _1687;
    float _1695 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1530].xyz));
    float _3746 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
    float _1698 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _3757 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _1699 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _1700 = dot(vec3(_318, _319, _320), vec3(_1692, _1693, _1694));
    float _3768 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
    float _1703 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _1704 = dot(vec3(cbLight._m0[_1530].xyz), vec3(_1692, _1693, _1694));
    float _3779 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
    float _1708 = _1684 * _1684;
    float _1712 = ((_1703 * _1703) * (_1708 + (-1.0))) + 1.0;
    float _1723 = (exp2(log2(1.0 - (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1724 = 1.0 - _1684;
    float _1735 = (0.5 / (((_1699 * ((_1698 * _1724) + _1684)) + 9.9999999392252902907785028219223e-09) + (((_1699 * _1724) + _1684) * _1698))) * _1698;
    float _3790 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _1737 = (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_1708 / ((_1712 * _1712) * 3.141590118408203125));
    uint _1751 = _1530 + 9u;
    float _1762 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1571].w)) * _321) * 0.949999988079071044921875);
    float _1763 = _1762 * _1762;
    float _1764 = cbLight._m0[_1571].x + _398;
    float _1765 = cbLight._m0[_1571].y + _399;
    float _1766 = cbLight._m0[_1571].z + _400;
    float _1770 = inversesqrt(dot(vec3(_1764, _1765, _1766), vec3(_1764, _1765, _1766)));
    float _1771 = _1770 * _1764;
    float _1772 = _1770 * _1765;
    float _1773 = _1770 * _1766;
    float _1774 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1571].xyz));
    float _3801 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _1777 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _1778 = dot(vec3(_318, _319, _320), vec3(_1771, _1772, _1773));
    float _3812 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
    float _1781 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _1782 = dot(vec3(cbLight._m0[_1571].xyz), vec3(_1771, _1772, _1773));
    float _3823 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1786 = _1763 * _1763;
    float _1790 = ((_1781 * _1781) * (_1786 + (-1.0))) + 1.0;
    float _1799 = (exp2(log2(1.0 - (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1800 = 1.0 - _1763;
    float _1810 = (0.5 / (((_1699 * ((_1777 * _1800) + _1763)) + 9.9999999392252902907785028219223e-09) + (((_1699 * _1800) + _1763) * _1777))) * _1777;
    float _3834 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1812 = (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1786 / ((_1790 * _1790) * 3.141590118408203125));
    float _1822 = (((_1799 * cbLight._m0[_1751].x) * _1812) * _1553) + ((((cbLight._m0[_1670].x * _1522) * _1723) * _1737) * _1567);
    float _1823 = (((_1799 * cbLight._m0[_1751].y) * _1812) * _1553) + ((((cbLight._m0[_1670].y * _1523) * _1723) * _1737) * _1567);
    float _1824 = (((_1799 * cbLight._m0[_1751].z) * _1812) * _1553) + ((((cbLight._m0[_1670].z * _1524) * _1723) * _1737) * _1567);
    float _1886;
    float _1888;
    float _1890;
    if (_1607)
    {
        _1886 = _1822;
        _1888 = _1823;
        _1890 = _1824;
    }
    else
    {
        uint _1892 = _1530 + 2u;
        uint _1896 = _1530 + 10u;
        float _1910 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1892].w)) * _321) * 0.949999988079071044921875);
        float _1911 = _1910 * _1910;
        float _1912 = cbLight._m0[_1892].x + _398;
        float _1913 = cbLight._m0[_1892].y + _399;
        float _1914 = cbLight._m0[_1892].z + _400;
        float _1918 = inversesqrt(dot(vec3(_1912, _1913, _1914), vec3(_1912, _1913, _1914)));
        float _1919 = _1918 * _1912;
        float _1920 = _1918 * _1913;
        float _1921 = _1918 * _1914;
        float _1922 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1892].xyz));
        float _3845 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1925 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1926 = dot(vec3(_318, _319, _320), vec3(_1919, _1920, _1921));
        float _3856 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1929 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1930 = dot(vec3(cbLight._m0[_1892].xyz), vec3(_1919, _1920, _1921));
        float _3867 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        float _1934 = _1911 * _1911;
        float _1938 = ((_1929 * _1929) * (_1934 + (-1.0))) + 1.0;
        float _1947 = (exp2(log2(1.0 - (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1948 = 1.0 - _1911;
        float _1958 = (0.5 / (((_1699 * ((_1925 * _1948) + _1911)) + 9.9999999392252902907785028219223e-09) + (((_1699 * _1948) + _1911) * _1925))) * _1925;
        float _3878 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        float _1960 = (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * (_1934 / ((_1938 * _1938) * 3.141590118408203125));
        float _1961 = isnan(1.0) ? _1545 : (isnan(_1545) ? 1.0 : min(_1545, 1.0));
        _1886 = (((_1947 * cbLight._m0[_1896].x) * _1960) * _1961) + _1822;
        _1888 = (((_1947 * cbLight._m0[_1896].y) * _1960) * _1961) + _1823;
        _1890 = (((_1947 * cbLight._m0[_1896].z) * _1960) * _1961) + _1824;
    }
    float _1996;
    float _1998;
    float _2000;
    if (_1625)
    {
        _1996 = _1886;
        _1998 = _1888;
        _2000 = _1890;
    }
    else
    {
        uint _2007 = _1530 + 3u;
        uint _2011 = _1530 + 11u;
        float _2025 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2007].w)) * _321) * 0.949999988079071044921875);
        float _2026 = _2025 * _2025;
        float _2027 = cbLight._m0[_2007].x + _398;
        float _2028 = cbLight._m0[_2007].y + _399;
        float _2029 = cbLight._m0[_2007].z + _400;
        float _2033 = inversesqrt(dot(vec3(_2027, _2028, _2029), vec3(_2027, _2028, _2029)));
        float _2034 = _2033 * _2027;
        float _2035 = _2033 * _2028;
        float _2036 = _2033 * _2029;
        float _2037 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_2007].xyz));
        float _3894 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2040 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _2041 = dot(vec3(_318, _319, _320), vec3(_2034, _2035, _2036));
        float _3905 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2044 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _2045 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_2034, _2035, _2036));
        float _3916 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2049 = _2026 * _2026;
        float _2053 = ((_2044 * _2044) * (_2049 + (-1.0))) + 1.0;
        float _2062 = (exp2(log2(1.0 - (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2063 = 1.0 - _2026;
        float _2073 = (0.5 / (((_1699 * ((_2040 * _2063) + _2026)) + 9.9999999392252902907785028219223e-09) + (((_1699 * _2063) + _2026) * _2040))) * _2040;
        float _3927 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2075 = (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_2049 / ((_2053 * _2053) * 3.141590118408203125));
        float _2076 = isnan(1.0) ? _1546 : (isnan(_1546) ? 1.0 : min(_1546, 1.0));
        _1996 = (((_2062 * cbLight._m0[_2011].x) * _2075) * _2076) + _1886;
        _1998 = (((_2062 * cbLight._m0[_2011].y) * _2075) * _2076) + _1888;
        _2000 = (((_2062 * cbLight._m0[_2011].z) * _2075) * _2076) + _1890;
    }
    float _2211;
    float _2213;
    float _2215;
    float _2217;
    float _2219;
    float _2221;
    if (_1528.y == 0u)
    {
        float _2151 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2152 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2151;
        float _2153 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2151;
        float _2154 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2151;
        uvec4 _2166 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2167 = _2166.x;
        uint _2178 = uint((float(_2166.y) * floor(float(uint(cbSceneParam._m0[85u].y * _407) / _2167))) + floor(float(uint(cbSceneParam._m0[85u].x * _406) / _2167)));
        float _2188 = (log2(_2154 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2189 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        uint _2192 = uint(isnan(14.0) ? _2189 : (isnan(_2189) ? 14.0 : min(_2189, 14.0)));
        uvec4 _2197 = texelFetch(g_lightClusterGridBuffer, int(((_2192 << 2u) + (_2178 << 6u)) >> 2u));
        uint _2198 = _2197.x;
        uint _2199 = _2166.z;
        float _2334;
        float _2336;
        float _2338;
        float _2340;
        float _2342;
        float _2344;
        if (((((1u << ((_2199 >> 4u) & 15u)) + 4294967295u) & _2198) == 0u) || ((_2199 & 240u) == 0u))
        {
            _2334 = 0.0;
            _2336 = 0.0;
            _2338 = 0.0;
            _2340 = 0.0;
            _2342 = 0.0;
            _2344 = 0.0;
        }
        else
        {
            float _2335;
            float _2337;
            float _2339;
            float _2341;
            float _2343;
            float _2345;
            float _2488 = 0.0;
            float _2489 = 0.0;
            float _2490 = 0.0;
            float _2491 = 0.0;
            float _2492 = 0.0;
            float _2493 = 0.0;
            uint _2494 = 0u;
            uint _2503;
            bool _2504;
            for (;;)
            {
                _2503 = texelFetch(g_lightClassification, int((((_2192 << 5u) + (_2178 << 9u)) + (_2494 << 2u)) >> 2u)).x;
                _2504 = _2503 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2504)
                {
                    frontier_phi_61_pred = _2488;
                    frontier_phi_61_pred_1 = _2493;
                    frontier_phi_61_pred_2 = _2492;
                    frontier_phi_61_pred_3 = _2491;
                    frontier_phi_61_pred_4 = _2490;
                    frontier_phi_61_pred_5 = _2489;
                }
                else
                {
                    float _2612;
                    float _2613;
                    float _2614;
                    float _2615;
                    float _2616;
                    float _2617;
                    uint _2618;
                    _2612 = _2488;
                    _2613 = _2489;
                    _2614 = _2490;
                    _2615 = _2491;
                    _2616 = _2492;
                    _2617 = _2493;
                    _2618 = _2503;
                    float _2544;
                    float _2545;
                    float _2546;
                    float _2547;
                    float _2548;
                    float _2549;
                    for (;;)
                    {
                        uint _2622 = uint(findLSB(_2618)) + (_2494 << 5u);
                        uint _2619 = (_2618 + 4294967295u) & _2618;
                        uint _2624 = _2622 * 48u;
                        vec4 _2638 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2624)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 3u)).x));
                        uint _2644 = (_2622 * 48u) + 4u;
                        vec4 _2657 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2644)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 3u)).x));
                        uint _2663 = (_2622 * 48u) + 8u;
                        vec3 _2674 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2663)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 2u)).x));
                        float _2678 = _2638.x - _2152;
                        float _2679 = _2638.y - _2153;
                        float _2680 = _2638.z - _2154;
                        float _2681 = dot(vec3(_2678, _2679, _2680), vec3(_2678, _2679, _2680));
                        float _2684 = inversesqrt(_2681);
                        float _2685 = _2684 * _2678;
                        float _2686 = _2684 * _2679;
                        float _2687 = _2684 * _2680;
                        float _2688 = dot(vec3(_428, _431, _434), vec3(_2685, _2686, _2687));
                        float _2693 = 1.0 - (_2681 * _2638.w);
                        float _3953 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
                        float _2694 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
                        float _2695 = sqrt(_2681) * _2657.w;
                        float _2698 = 1.39999997615814208984375 / (_2695 + 1.39999997615814208984375);
                        float _2699 = _2698 * _2698;
                        float _2702 = ((1.0 - _2699) * _2688) + _2699;
                        float _2705 = _2695 * _2695;
                        float _2709 = ((isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0))) * _2694) / ((_2705 * 0.699999988079071044921875) + 1.0);
                        float _2713 = (-0.0) - _2152;
                        float _2714 = (-0.0) - _2153;
                        float _2715 = (-0.0) - _2154;
                        float _2719 = inversesqrt(dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715)));
                        float _2720 = _2719 * _2713;
                        float _2721 = _2719 * _2714;
                        float _2722 = _2719 * _2715;
                        float _2730 = exp2(log2(1.0 / ((_2705 * 3.5) + 5.0)) * 0.25);
                        float _2731 = 1.0 - _488;
                        float _2738 = sqrt(1.0 - ((1.0 - (_2731 * _2731)) * (1.0 - (_2730 * _2730))));
                        float _2739 = _2738 * _2738;
                        float _2740 = _2739 * _2739;
                        float _2741 = _2720 + _2685;
                        float _2742 = _2721 + _2686;
                        float _2743 = _2722 + _2687;
                        float _2747 = inversesqrt(dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743)));
                        float _2751 = dot(vec3(_428, _431, _434), vec3(_2720, _2721, _2722));
                        float _3969 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                        float _2754 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
                        float _2755 = dot(vec3(_428, _431, _434), vec3(_2747 * _2741, _2747 * _2742, _2747 * _2743));
                        float _3980 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
                        float _2758 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
                        float _2762 = ((_2758 * _2758) * (_2740 + (-1.0))) + 1.0;
                        float _2763 = _2698 * _2739;
                        float _2764 = _2763 * _2763;
                        float _2767 = ((1.0 - _2764) * _2688) + _2764;
                        float _3991 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
                        float _2768 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
                        float _2769 = 1.0 - _2739;
                        float _2779 = (0.5 / (((_2768 * ((_2754 * _2769) + _2739)) + 9.9999999392252902907785028219223e-09) + (((_2768 * _2769) + _2739) * _2754))) * _2768;
                        float _4002 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
                        float _2790 = (((_2740 * 3.1415927410125732421875) * (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) / ((_2762 * _2762) * ((_2705 * 2.1991131305694580078125) + 3.141590118408203125))) * _2694;
                        _2547 = (_2709 * _2657.x) + _2615;
                        _2548 = (_2709 * _2657.y) + _2616;
                        _2549 = (_2709 * _2657.z) + _2617;
                        _2544 = (_2790 * _2674.x) + _2612;
                        _2545 = (_2790 * _2674.y) + _2613;
                        _2546 = (_2790 * _2674.z) + _2614;
                        if (_2619 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2612 = _2544;
                            _2613 = _2545;
                            _2614 = _2546;
                            _2615 = _2547;
                            _2616 = _2548;
                            _2617 = _2549;
                            _2618 = _2619;
                        }
                    }
                    frontier_phi_61_pred = _2544;
                    frontier_phi_61_pred_1 = _2549;
                    frontier_phi_61_pred_2 = _2548;
                    frontier_phi_61_pred_3 = _2547;
                    frontier_phi_61_pred_4 = _2546;
                    frontier_phi_61_pred_5 = _2545;
                }
                _2335 = frontier_phi_61_pred;
                _2345 = frontier_phi_61_pred_1;
                _2343 = frontier_phi_61_pred_2;
                _2341 = frontier_phi_61_pred_3;
                _2339 = frontier_phi_61_pred_4;
                _2337 = frontier_phi_61_pred_5;
                uint _2495 = _2494 + 1u;
                if (_2495 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2488 = _2335;
                    _2489 = _2337;
                    _2490 = _2339;
                    _2491 = _2341;
                    _2492 = _2343;
                    _2493 = _2345;
                    _2494 = _2495;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2334 = _2335;
            _2336 = _2337;
            _2338 = _2339;
            _2340 = _2341;
            _2342 = _2343;
            _2344 = _2345;
        }
        uvec4 _2348 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2349 = _2348.z;
        uint _2351 = (_2349 >> 8u) & 15u;
        float _2456;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        float _2466;
        if (((4294967295u << _2351) & _2198) == 0u)
        {
            _2456 = _2334;
            _2458 = _2336;
            _2460 = _2338;
            _2462 = _2340;
            _2464 = _2342;
            _2466 = _2344;
        }
        else
        {
            float _2481 = inversesqrt(dot(vec3(_2152, _2153, _2154), vec3(_2152, _2153, _2154)));
            float _2482 = _2481 * _2152;
            float _2483 = _2481 * _2153;
            float _2484 = _2481 * _2154;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2351 < ((_2349 >> 12u) & 15u))
            {
                float _2457;
                float _2459;
                float _2461;
                float _2463;
                float _2465;
                float _2467;
                float _2595 = _2334;
                float _2596 = _2336;
                float _2597 = _2338;
                float _2598 = _2340;
                float _2599 = _2342;
                float _2600 = _2344;
                uint _2601 = _2351;
                uint _2610;
                bool _2611;
                for (;;)
                {
                    _2610 = texelFetch(g_lightClassification, int((((_2192 << 5u) + (_2178 << 9u)) + (_2601 << 2u)) >> 2u)).x;
                    _2611 = _2610 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2611)
                    {
                        frontier_phi_67_pred = _2598;
                        frontier_phi_67_pred_1 = _2599;
                        frontier_phi_67_pred_2 = _2600;
                        frontier_phi_67_pred_3 = _2597;
                        frontier_phi_67_pred_4 = _2596;
                        frontier_phi_67_pred_5 = _2595;
                    }
                    else
                    {
                        float _2795;
                        float _2796;
                        float _2797;
                        float _2798;
                        float _2799;
                        float _2800;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _2808 = _2595;
                        float _2809 = _2596;
                        float _2810 = _2597;
                        float _2811 = _2598;
                        float _2812 = _2599;
                        float _2813 = _2600;
                        uint _2814 = _2610;
                        uint _2815;
                        vec4 _2840;
                        float _2841;
                        vec4 _2856;
                        vec3 _2868;
                        vec4 _2884;
                        vec4 _2900;
                        float _2947;
                        bool _2948;
                        for (;;)
                        {
                            uint _2825 = ((_2601 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2814));
                            _2815 = (_2814 + 4294967295u) & _2814;
                            uint _2827 = _2825 * 40u;
                            _2840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 3u)).x));
                            _2841 = _2840.w;
                            uint _2843 = (_2825 * 40u) + 4u;
                            _2856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 3u)).x));
                            uint _2858 = (_2825 * 40u) + 8u;
                            _2868 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 2u)).x));
                            uint _2871 = (_2825 * 40u) + 16u;
                            _2884 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 3u)).x));
                            uint _2887 = (_2825 * 40u) + 20u;
                            _2900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 3u)).x));
                            uint _2903 = (_2825 * 40u) + 24u;
                            vec4 _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            uint _2922 = (_2825 * 40u) + 28u;
                            vec4 _2935 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 3u)).x));
                            _2947 = fma(_2154, _2935.z, fma(_2153, _2935.y, _2935.x * _2152)) + _2935.w;
                            _2948 = !((fma(_2154, _2916.z, fma(_2153, _2916.y, _2916.x * _2152)) + _2916.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2948)
                            {
                                float _2975 = _2840.x - _2152;
                                float _2976 = _2840.y - _2153;
                                float _2977 = _2840.z - _2154;
                                float _2978 = dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977));
                                float _2981 = inversesqrt(_2978);
                                float _2982 = _2981 * _2975;
                                float _2983 = _2981 * _2976;
                                float _2984 = _2981 * _2977;
                                float _2988 = 1.0 - (_2978 / (_2841 * _2841));
                                float _4013 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                                float _2989 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
                                float _2993 = sqrt(_2978) * _2856.w;
                                float _2995 = 1.39999997615814208984375 / (_2993 + 1.39999997615814208984375);
                                float _2996 = _2995 * _2995;
                                float _2999 = ((1.0 - _2996) * dot(vec3(_2982, _2983, _2984), vec3(_428, _431, _434))) + _2996;
                                float _3002 = _2993 * _2993;
                                float _3006 = (fma(_2154, _2884.z, fma(_2153, _2884.y, _2884.x * _2152)) + _2884.w) / _2947;
                                float _3007 = (fma(_2154, _2900.z, fma(_2153, _2900.y, _2900.x * _2152)) + _2900.w) / _2947;
                                float _3011 = 1.0 - dot(vec2(_3006, _3007), vec2(_3006, _3007));
                                float _4029 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                                float _3012 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
                                float _3013 = _3012 * (((isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0))) * _2989) / ((_3002 * 0.699999988079071044921875) + 1.0));
                                float _3025 = exp2(log2(1.0 / ((_3002 * 3.5) + 5.0)) * 0.25);
                                float _3026 = 1.0 - _488;
                                float _3033 = sqrt(1.0 - ((1.0 - (_3026 * _3026)) * (1.0 - (_3025 * _3025))));
                                float _3034 = _3033 * _3033;
                                float _3035 = _3034 * _3034;
                                float _3036 = _2982 - _2482;
                                float _3037 = _2983 - _2483;
                                float _3038 = _2984 - _2484;
                                float _3042 = inversesqrt(dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038)));
                                float _3046 = dot(vec3(_428, _431, _434), vec3((-0.0) - _2482, (-0.0) - _2483, (-0.0) - _2484));
                                float _4040 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                                float _3049 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
                                float _3050 = dot(vec3(_428, _431, _434), vec3(_3042 * _3036, _3042 * _3037, _3042 * _3038));
                                float _4051 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                                float _3053 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
                                float _3057 = ((_3053 * _3053) * (_3035 + (-1.0))) + 1.0;
                                float _3058 = _2995 * _3034;
                                float _3059 = _3058 * _3058;
                                float _3065 = ((1.0 - _3059) * dot(vec3(_428, _431, _434), vec3(_2982, _2983, _2984))) + _3059;
                                float _4062 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                                float _3066 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
                                float _3067 = 1.0 - _3034;
                                float _3077 = (0.5 / (((_3066 * ((_3049 * _3067) + _3034)) + 9.9999999392252902907785028219223e-09) + (((_3066 * _3067) + _3034) * _3049))) * _3066;
                                float _4073 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                                float _3087 = (_3012 * _2989) * (((_3035 * 3.1415927410125732421875) * (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) / ((_3057 * _3057) * ((_3002 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3087 * _2868.x;
                                frontier_phi_73_pred_1 = _3087 * _2868.y;
                                frontier_phi_73_pred_2 = _3013 * _2856.z;
                                frontier_phi_73_pred_3 = _3013 * _2856.y;
                                frontier_phi_73_pred_4 = _3013 * _2856.x;
                                frontier_phi_73_pred_5 = _3087 * _2868.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3091 = frontier_phi_73_pred;
                            _3092 = frontier_phi_73_pred_1;
                            _3096 = frontier_phi_73_pred_2;
                            _3095 = frontier_phi_73_pred_3;
                            _3094 = frontier_phi_73_pred_4;
                            _3093 = frontier_phi_73_pred_5;
                            _2798 = _3094 + _2811;
                            _2799 = _3095 + _2812;
                            _2800 = _3096 + _2813;
                            _2795 = _3091 + _2808;
                            _2796 = _3092 + _2809;
                            _2797 = _3093 + _2810;
                            if (_2815 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2808 = _2795;
                                _2809 = _2796;
                                _2810 = _2797;
                                _2811 = _2798;
                                _2812 = _2799;
                                _2813 = _2800;
                                _2814 = _2815;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2798;
                        frontier_phi_67_pred_1 = _2799;
                        frontier_phi_67_pred_2 = _2800;
                        frontier_phi_67_pred_3 = _2797;
                        frontier_phi_67_pred_4 = _2796;
                        frontier_phi_67_pred_5 = _2795;
                    }
                    _2463 = frontier_phi_67_pred;
                    _2465 = frontier_phi_67_pred_1;
                    _2467 = frontier_phi_67_pred_2;
                    _2461 = frontier_phi_67_pred_3;
                    _2459 = frontier_phi_67_pred_4;
                    _2457 = frontier_phi_67_pred_5;
                    uint _2602 = _2601 + 1u;
                    if (_2602 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2595 = _2457;
                        _2596 = _2459;
                        _2597 = _2461;
                        _2598 = _2463;
                        _2599 = _2465;
                        _2600 = _2467;
                        _2601 = _2602;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2465;
                frontier_phi_55_56_ladder_1 = _2467;
                frontier_phi_55_56_ladder_2 = _2463;
                frontier_phi_55_56_ladder_3 = _2461;
                frontier_phi_55_56_ladder_4 = _2459;
                frontier_phi_55_56_ladder_5 = _2457;
            }
            else
            {
                frontier_phi_55_56_ladder = _2342;
                frontier_phi_55_56_ladder_1 = _2344;
                frontier_phi_55_56_ladder_2 = _2340;
                frontier_phi_55_56_ladder_3 = _2338;
                frontier_phi_55_56_ladder_4 = _2336;
                frontier_phi_55_56_ladder_5 = _2334;
            }
            _2456 = frontier_phi_55_56_ladder_5;
            _2458 = frontier_phi_55_56_ladder_4;
            _2460 = frontier_phi_55_56_ladder_3;
            _2462 = frontier_phi_55_56_ladder_2;
            _2464 = frontier_phi_55_56_ladder;
            _2466 = frontier_phi_55_56_ladder_1;
        }
        float _2471 = isnan(1.0) ? _472 : (isnan(_472) ? 1.0 : min(_472, 1.0));
        _2211 = (_2471 * _2462) + _1663;
        _2213 = (_2471 * _2464) + _1665;
        _2215 = (_2471 * _2466) + _1667;
        _2217 = ((_2456 * 0.039999999105930328369140625) * _2471) + _1996;
        _2219 = ((_2458 * 0.039999999105930328369140625) * _2471) + _1998;
        _2221 = ((_2460 * 0.039999999105930328369140625) * _2471) + _2000;
    }
    else
    {
        _2211 = _1663;
        _2213 = _1665;
        _2215 = _1667;
        _2217 = _1996;
        _2219 = _1998;
        _2221 = _2000;
    }
    uint _2227 = _448 + uint(cbMatDynParam._m0[0u].w);
    float _2235 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _300.x) * cbInstanceData._m0[_2227].x;
    float _2238 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _300.y) * cbInstanceData._m0[_2227].y;
    float _2241 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _300.z) * cbInstanceData._m0[_2227].z;
    float _4089 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _4100 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _4111 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _2258 = (((isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_2211 + ((isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0))) * _472))) + ((_2217 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _1279)) * cbPerFrame._m0[3u].x)) + _2235;
    float _2260 = (_2238 + ((_2219 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _1279)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_2213 + ((isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0))) * _472)));
    float _2262 = (_2241 + ((_2221 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _1279)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_2215 + ((isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))) * _472)));
    float _4137 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2275 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    uint _2276 = _447 + 6u;
    float _2284 = _406 / cbSceneParam._m0[86u].x;
    float _2285 = _407 / cbSceneParam._m0[86u].y;
    vec4 _2299 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2284, _2285, (log2((isnan(cbSceneParam._m0[77u].w) ? _340 : (isnan(_340) ? cbSceneParam._m0[77u].w : min(_340, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2301 = _2299.x;
    float _2302 = _2299.y;
    float _2303 = _2299.z;
    float _2304 = _2299.w;
    float _2397;
    float _2399;
    float _2401;
    float _2403;
    if (_340 > cbSceneParam._m0[78u].w)
    {
        float _2359 = isnan(_340) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _340 : min(cbSceneParam._m0[80u].w, _340));
        float _2360 = _2359 / _340;
        float _2371 = _2360 * _391;
        float _2372 = _392 * _2360;
        float _2373 = (-0.0) - _2372;
        float _2375 = _2360 * _393;
        float _2377 = (cbSceneParam._m0[77u].w * _2373) / _2359;
        float _2378 = _2377 + cbSceneParam._m0[79u].w;
        float _2379 = cbSceneParam._m0[79u].w - _2372;
        float _2385 = sqrt(((_2371 * _2371) + (_2372 * _2372)) + (_2375 * _2375));
        float _2388 = (1.0 - (cbSceneParam._m0[77u].w / _2359)) * _2385;
        float _2393 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2395 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2557;
        if (abs((_2373 - _2377) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2557 = ((((_2378 > 0.0) ? exp2(_2393 * _2378) : (2.0 - exp2(_2395 * _2378))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2388;
        }
        else
        {
            float _2517 = 1.0 / cbSceneParam._m0[80u].x;
            float _2518 = isnan(_2379) ? _2378 : (isnan(_2378) ? _2379 : max(_2378, _2379));
            float _2519 = isnan(_2379) ? _2378 : (isnan(_2378) ? _2379 : min(_2378, _2379));
            float _2528 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : min(_2518, 0.0));
            float _2529 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : min(_2519, 0.0));
            _2557 = ((abs(_2385 / _2373) * cbSceneParam._m0[80u].y) * ((((_2528 - _2529) * 2.0) - ((exp2(_2393 * (isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0)))) - exp2(_2393 * (isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0))))) * _2517)) - ((exp2(_2395 * _2528) - exp2(_2395 * _2529)) * _2517))) + (_2388 * cbSceneParam._m0[80u].z);
        }
        vec4 _2559 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2284, _2285, 1.0), 0.0);
        float _2568 = exp2((_2557 * (-1.44269502162933349609375)) * (1.0 - _2559.w));
        float _2569 = log2(_2568);
        float _2585 = log2(_2304);
        _2397 = (exp2(_2585 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2569 * cbSceneParam._m0[78u].x)) * _2559.x) / cbSceneParam._m0[78u].x)) + _2301;
        _2399 = (exp2(_2585 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2569 * cbSceneParam._m0[78u].y)) * _2559.y) / cbSceneParam._m0[78u].y)) + _2302;
        _2401 = (exp2(_2585 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2569 * cbSceneParam._m0[78u].z)) * _2559.z) / cbSceneParam._m0[78u].z)) + _2303;
        _2403 = _2568 * _2304;
    }
    else
    {
        _2397 = _2301;
        _2399 = _2302;
        _2401 = _2303;
        _2403 = _2304;
    }
    float _2415 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2416 = _2415 == 3.0;
    float _2417 = log2(_2403);
    float _2421 = exp2(_2417 * cbSceneParam._m0[78u].x);
    float _2422 = exp2(_2417 * cbSceneParam._m0[78u].y);
    float _2423 = exp2(_2417 * cbSceneParam._m0[78u].z);
    float _2424 = _2421 * (isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0)));
    float _2425 = _2422 * (isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0)));
    float _2426 = _2423 * (isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0)));
    float _2435 = (_2415 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2435 * (_2416 ? _2424 : (_2424 + (cbSceneParam._m0[72u].w * _2397)));
    SV_Target.y = _2435 * (_2416 ? _2425 : (_2425 + (cbSceneParam._m0[72u].w * _2399)));
    SV_Target.z = _2435 * (_2416 ? _2426 : (_2426 + (cbSceneParam._m0[72u].w * _2401)));
    SV_Target.w = cbInstanceData._m0[_2276].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2235) * _2275) * _2421) * _2435;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2238) * _2275) * _2422) * _2435;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2241) * _2275) * _2423) * _2435;
    SV_Target_1.w = cbInstanceData._m0[_2276].w;
}


