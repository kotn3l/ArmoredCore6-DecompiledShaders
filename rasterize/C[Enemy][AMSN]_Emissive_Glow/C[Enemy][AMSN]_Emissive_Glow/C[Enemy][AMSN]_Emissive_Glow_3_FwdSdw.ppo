#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _850;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _228.x * cbMtdParam._m0[9u].x;
    float _235 = _228.y * cbMtdParam._m0[9u].y;
    float _236 = _228.z * cbMtdParam._m0[9u].z;
    vec4 _248 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _252 = _248.z;
    float _256 = (_248.x * 2.0) + (-1.0);
    float _258 = (_248.y * 2.0) + (-1.0);
    float _259 = dot(vec2(_256, _258), vec2(_256, _258));
    float _3493 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _265 = sqrt(1.0 - (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))));
    vec4 _287 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _301 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3504 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _302 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    float _310 = (((_302 * _302) * (3.0 - (_302 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _313 = fma(_265, _199 * NORMAL.x, fma(_258, _206 * TANGENT.x, (_192 * _185) * _256));
    float _316 = fma(_265, _199 * NORMAL.y, fma(_258, _206 * TANGENT.y, (_192 * _186) * _256));
    float _319 = fma(_265, _199 * NORMAL.z, fma(_258, _206 * TANGENT.z, (_192 * _187) * _256));
    float _323 = inversesqrt(dot(vec3(_313, _316, _319), vec3(_313, _316, _319)));
    float _324 = _323 * _313;
    float _325 = _323 * _316;
    float _326 = _323 * _319;
    float _3515 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _327 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _3526 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3537 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3548 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _346 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _387 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _397 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _387);
    float _398 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _387);
    float _399 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _387);
    float _403 = inversesqrt(dot(vec3(_397, _398, _399), vec3(_397, _398, _399)));
    float _404 = _397 * _403;
    float _405 = _398 * _403;
    float _406 = _399 * _403;
    float _412 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _413 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _434 = fma(_326, cbSceneParam._m0[5u].z, fma(_325, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _324));
    float _437 = fma(_326, cbSceneParam._m0[6u].z, fma(_325, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _324));
    float _440 = fma(_326, cbSceneParam._m0[7u].z, fma(_325, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _324));
    uint _453 = uint(roundEven(NORMAL.w)) * 13u;
    uint _455 = _453 + 9u;
    uint _456 = _455 + uint(cbMatDynParam._m0[0u].w);
    float _462 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0)))) * cbInstanceData._m0[_456].x;
    float _463 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0)))) * cbInstanceData._m0[_456].y;
    float _464 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0)))) * cbInstanceData._m0[_456].z;
    float _3559 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _465 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _3570 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _466 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _3581 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _467 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
    vec4 _476 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _412, cbSceneParam._m0[86u].y * _413));
    float _479 = _476.x * TEXCOORD.z;
    float _480 = dot(vec3(_324, _325, _326), vec3(_404, _405, _406));
    float _483 = _480 * 2.0;
    float _487 = (_483 * _324) - _404;
    float _488 = (_483 * _325) - _405;
    float _489 = (_483 * _326) - _406;
    float _493 = abs(dot(vec3(_404, _405, _406), vec3(_324, _325, _326)));
    float _3592 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _495 = sqrt(_327);
    float _507 = exp2((_495 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_495 * 3.0));
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _547 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _849;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _574 = fma(_547, cbModelParam._m0[26u].z, fma(_543, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _539));
        float _578 = fma(_547, cbModelParam._m0[27u].z, fma(_543, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _539));
        float _582 = fma(_547, cbModelParam._m0[28u].z, fma(_543, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _539));
        float _607 = _539 + _324;
        float _608 = _543 + _325;
        float _609 = _547 + _326;
        float _619 = fma(_609, cbModelParam._m0[26u].z, fma(_608, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _607)) - _574;
        float _620 = fma(_609, cbModelParam._m0[27u].z, fma(_608, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _607)) - _578;
        float _621 = fma(_609, cbModelParam._m0[28u].z, fma(_608, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _607)) - _582;
        float _625 = inversesqrt(dot(vec3(_619, _620, _621), vec3(_619, _620, _621)));
        float _638 = ((_625 * _619) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_574 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _639 = ((_625 * _620) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_578 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _640 = ((_625 * _621) / cbModelParam._m0[34u].z) + ((((((_582 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _643 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        vec4 _650 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        vec4 _657 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        float _677 = exp2((_643.w + (-0.5)) * 20.0) * 2.0;
        float _678 = _677 * (_643.x + (-0.5));
        float _679 = _677 * (_643.y + (-0.5));
        float _680 = _677 * (_643.z + (-0.5));
        float _687 = exp2((_650.w + (-0.5)) * 20.0) * 2.0;
        float _688 = _687 * (_650.x + (-0.5));
        float _689 = _687 * (_650.y + (-0.5));
        float _690 = _687 * (_650.z + (-0.5));
        float _697 = exp2((_657.w + (-0.5)) * 20.0) * 2.0;
        float _698 = _697 * (_657.x + (-0.5));
        float _699 = _697 * (_657.y + (-0.5));
        float _700 = _697 * (_657.z + (-0.5));
        float _707 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _708 = _707 * (_664.x + (-0.5));
        float _709 = _707 * (_664.y + (-0.5));
        float _710 = _707 * (_664.z + (-0.5));
        float _711 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _712 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _713 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _714 = _678 * 0.5;
        float _715 = _688 * 0.5;
        float _716 = _698 * 0.5;
        float _717 = dot(vec3(_714, _715, _716), vec3(_714, _715, _716));
        float _722 = (_717 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_717);
        float _731 = (dot(vec3(_324, _325, _326), vec3(_722 * _714, _722 * _715, _722 * _716)) + 1.0) * 0.5;
        float _3618 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _741 = sqrt(((_715 * _715) + (_714 * _714)) + (_716 * _716)) / (_711 + 9.9999997473787516355514526367188e-06);
        float _3629 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _742 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _743 = _742 * 2.0;
        float _747 = (1.0 - _742) / (_742 + 1.0);
        float _3640 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _748 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _757 = ((((1.0 - _748) * (_743 + 2.0)) * exp2(log2(isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * (_743 + 1.0))) + _748) * _711;
        float _758 = _679 * 0.5;
        float _759 = _689 * 0.5;
        float _760 = _699 * 0.5;
        float _761 = dot(vec3(_758, _759, _760), vec3(_758, _759, _760));
        float _766 = (_761 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_761);
        float _774 = (dot(vec3(_324, _325, _326), vec3(_766 * _758, _766 * _759, _766 * _760)) + 1.0) * 0.5;
        float _3651 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _783 = sqrt(((_759 * _759) + (_758 * _758)) + (_760 * _760)) / (_712 + 9.9999997473787516355514526367188e-06);
        float _3662 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _785 = _784 * 2.0;
        float _789 = (1.0 - _784) / (_784 + 1.0);
        float _3673 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _799 = ((((1.0 - _790) * (_785 + 2.0)) * exp2(log2(isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_785 + 1.0))) + _790) * _712;
        float _800 = _680 * 0.5;
        float _801 = _690 * 0.5;
        float _802 = _700 * 0.5;
        float _803 = dot(vec3(_800, _801, _802), vec3(_800, _801, _802));
        float _808 = (_803 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_803);
        float _816 = (dot(vec3(_324, _325, _326), vec3(_808 * _800, _808 * _801, _808 * _802)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _825 = sqrt(((_801 * _801) + (_800 * _800)) + (_802 * _802)) / (_713 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _827 = _826 * 2.0;
        float _831 = (1.0 - _826) / (_826 + 1.0);
        float _3706 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _841 = ((((1.0 - _832) * (_827 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_827 + 1.0))) + _832) * _713;
        _849 = _680;
        _851 = _679;
        _852 = _678;
        _853 = _690;
        _854 = _689;
        _855 = _688;
        _856 = _700;
        _857 = _699;
        _858 = _698;
        _859 = _713;
        _860 = _712;
        _861 = _711;
        _862 = cbModelParam._m0[36u].z * (isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0)));
        _863 = cbModelParam._m0[36u].z * (isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0)));
        _864 = cbModelParam._m0[36u].z * (isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0)));
    }
    else
    {
        _849 = _850;
        _851 = _850;
        _852 = _850;
        _853 = _850;
        _854 = _850;
        _855 = _850;
        _856 = _850;
        _857 = _850;
        _858 = _850;
        _859 = _850;
        _860 = _850;
        _861 = _850;
        _862 = 0.0;
        _863 = 0.0;
        _864 = 0.0;
    }
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _890 = fma(_547, cbModelParam._m0[30u].z, fma(_543, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _539));
        float _894 = fma(_547, cbModelParam._m0[31u].z, fma(_543, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _539));
        float _898 = fma(_547, cbModelParam._m0[32u].z, fma(_543, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _539));
        float _921 = _539 + _324;
        float _922 = _543 + _325;
        float _923 = _547 + _326;
        float _933 = fma(_923, cbModelParam._m0[30u].z, fma(_922, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _921)) - _890;
        float _934 = fma(_923, cbModelParam._m0[31u].z, fma(_922, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _921)) - _894;
        float _935 = fma(_923, cbModelParam._m0[32u].z, fma(_922, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _921)) - _898;
        float _939 = inversesqrt(dot(vec3(_933, _934, _935), vec3(_933, _934, _935)));
        float _952 = ((_939 * _933) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_890 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _953 = ((_939 * _934) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_894 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _954 = ((_939 * _935) / cbModelParam._m0[35u].z) + ((((((_898 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        float _989 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_956.x + (-0.5));
        float _991 = _989 * (_956.y + (-0.5));
        float _992 = _989 * (_956.z + (-0.5));
        float _999 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_963.x + (-0.5));
        float _1001 = _999 * (_963.y + (-0.5));
        float _1002 = _999 * (_963.z + (-0.5));
        float _1009 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_970.x + (-0.5));
        float _1011 = _1009 * (_970.y + (-0.5));
        float _1012 = _1009 * (_970.z + (-0.5));
        float _1019 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_977.x + (-0.5));
        float _1021 = _1019 * (_977.y + (-0.5));
        float _1022 = _1019 * (_977.z + (-0.5));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = _990 * 0.5;
        float _1027 = _1000 * 0.5;
        float _1028 = _1010 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1042 = (dot(vec3(_324, _325, _326), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3747 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1051 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3758 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3769 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (_1053 + 1.0))) + _1058) * _1023;
        float _1068 = _991 * 0.5;
        float _1069 = _1001 * 0.5;
        float _1070 = _1011 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_324, _325, _326), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3780 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3791 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3802 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_1095 + 1.0))) + _1100) * _1024;
        float _1110 = _992 * 0.5;
        float _1111 = _1002 * 0.5;
        float _1112 = _1012 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_324, _325, _326), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3813 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3824 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3835 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * (_1137 + 1.0))) + _1142) * _1025;
        _1159 = _992;
        _1160 = _991;
        _1161 = _990;
        _1162 = _1002;
        _1163 = _1001;
        _1164 = _1000;
        _1165 = _1012;
        _1166 = _1011;
        _1167 = _1010;
        _1168 = _1025;
        _1169 = _1024;
        _1170 = _1023;
        _1171 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
        _1172 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
        _1173 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
    }
    else
    {
        _1159 = _850;
        _1160 = _850;
        _1161 = _850;
        _1162 = _850;
        _1163 = _850;
        _1164 = _850;
        _1165 = _850;
        _1166 = _850;
        _1167 = _850;
        _1168 = _850;
        _1169 = _850;
        _1170 = _850;
        _1171 = 0.0;
        _1172 = 0.0;
        _1173 = 0.0;
    }
    float _1183 = (cbModelParam._m0[1u].x * (_1171 - _862)) + _862;
    float _1184 = (cbModelParam._m0[1u].x * (_1172 - _863)) + _863;
    float _1185 = (cbModelParam._m0[1u].x * (_1173 - _864)) + _864;
    float _1206 = fma(_1185, cbSceneParam._m0[89u].z, fma(_1184, cbSceneParam._m0[89u].y, _1183 * cbSceneParam._m0[89u].x));
    float _1209 = fma(_1185, cbSceneParam._m0[90u].z, fma(_1184, cbSceneParam._m0[90u].y, _1183 * cbSceneParam._m0[90u].x));
    float _1212 = fma(_1185, cbSceneParam._m0[91u].z, fma(_1184, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1183));
    float _1227 = _487 * 0.5;
    float _1228 = _488 * 0.5;
    float _1229 = _489 * 0.5;
    float _1230 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_1161, _1164, _1167, _1170));
    float _1233 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_1160, _1163, _1166, _1169));
    float _1236 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_1159, _1162, _1165, _1168));
    float _1270;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1243 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_849, _853, _856, _859));
        float _1247 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_851, _854, _857, _860));
        float _1251 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_852, _855, _858, _861));
        float _1258 = dot(vec4(cbModelParam._m0[39u]), vec4(_1227, _1228, _1229, 1.0));
        _1270 = dot(vec3(isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)), isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1258) ? 0.0 : (isnan(0.0) ? _1258 : max(0.0, _1258))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1270 = 1.0;
    }
    float _1281;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1272 = dot(vec4(cbModelParam._m0[40u]), vec4(_1227, _1228, _1229, 1.0));
        _1281 = dot(vec3(isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)), isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)), isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1272) ? 0.0 : (isnan(0.0) ? _1272 : max(0.0, _1272))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1281 = 1.0;
    }
    float _1285 = (_1281 * cbModelParam._m0[1u].x) + (_1270 * (1.0 - cbModelParam._m0[1u].x));
    float _1295 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _327);
    float _1296 = isnan(_1295) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1295 : min(cbModelParam._m0[25u].z, _1295));
    float _1377;
    float _1379;
    float _1381;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1344 = fma(_547, cbModelParam._m0[13u].z, fma(_543, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _539)) + cbModelParam._m0[13u].w;
        float _1348 = fma(_547, cbModelParam._m0[14u].z, fma(_543, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _539)) + cbModelParam._m0[14u].w;
        float _1352 = fma(_547, cbModelParam._m0[15u].z, fma(_543, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _539)) + cbModelParam._m0[15u].w;
        float _1355 = fma(_489, cbModelParam._m0[13u].z, fma(_488, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _487));
        float _1358 = fma(_489, cbModelParam._m0[14u].z, fma(_488, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _487));
        float _1361 = fma(_489, cbModelParam._m0[15u].z, fma(_488, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _487));
        float _1389;
        if (_1355 > 0.0)
        {
            _1389 = abs((1.0 - _1344) / _1355);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1355 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1344 + 1.0) / _1355);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1389 = frontier_phi_14_12_ladder;
        }
        float _1561;
        if (_1358 > 0.0)
        {
            _1561 = abs((1.0 - _1348) / _1358);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1348 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1561 = frontier_phi_23_19_ladder;
        }
        float _1857;
        if (_1361 > 0.0)
        {
            _1857 = abs((1.0 - _1352) / _1361);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1352 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1857 = frontier_phi_35_30_ladder;
        }
        float _1859 = isnan(_1561) ? _1389 : (isnan(_1389) ? _1561 : min(_1389, _1561));
        float _1860 = isnan(_1857) ? _1859 : (isnan(_1859) ? _1857 : min(_1859, _1857));
        float _1864 = (_1860 * _1355) + _1344;
        float _1865 = (_1860 * _1358) + _1348;
        float _1866 = (_1860 * _1361) + _1352;
        float _1867 = _1860 * 9.9999997473787516355514526367188e-05;
        float _1869 = (-1.0) - _1867;
        float _1871 = _1867 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1866 > _1871) || ((_1866 < _1869) || ((_1865 > _1871) || ((_1865 < _1869) || ((_1864 < _1869) || (_1864 > _1871))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2011 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1866, cbModelParam._m0[9u].z, fma(_1865, cbModelParam._m0[9u].y, _1864 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1866, cbModelParam._m0[10u].z, fma(_1865, cbModelParam._m0[10u].y, _1864 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1866, cbModelParam._m0[11u].z, fma(_1865, cbModelParam._m0[11u].y, _1864 * cbModelParam._m0[11u].x))), _1296);
            frontier_phi_13_35_ladder = _2011.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2011.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2011.x * cbModelParam._m0[1u].y;
        }
        _1377 = frontier_phi_13_35_ladder_2;
        _1379 = frontier_phi_13_35_ladder_1;
        _1381 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1365 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_487, _488, _489), _1296);
        _1377 = _1365.x * cbModelParam._m0[1u].y;
        _1379 = _1365.y * cbModelParam._m0[1u].y;
        _1381 = _1365.z * cbModelParam._m0[1u].y;
    }
    float _1385 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _327);
    float _1386 = isnan(_1385) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1385 : min(cbModelParam._m0[25u].w, _1385));
    float _1478;
    float _1480;
    float _1482;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1442 = fma(_547, cbModelParam._m0[21u].z, fma(_543, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _539)) + cbModelParam._m0[21u].w;
        float _1446 = fma(_547, cbModelParam._m0[22u].z, fma(_543, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _539)) + cbModelParam._m0[22u].w;
        float _1450 = fma(_547, cbModelParam._m0[23u].z, fma(_543, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _539)) + cbModelParam._m0[23u].w;
        float _1453 = fma(_489, cbModelParam._m0[21u].z, fma(_488, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _487));
        float _1456 = fma(_489, cbModelParam._m0[22u].z, fma(_488, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _487));
        float _1459 = fma(_489, cbModelParam._m0[23u].z, fma(_488, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _487));
        float _1566;
        if (_1453 > 0.0)
        {
            _1566 = abs((1.0 - _1442) / _1453);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1442 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1566 = frontier_phi_25_21_ladder;
        }
        float _1884;
        if (_1456 > 0.0)
        {
            _1884 = abs((1.0 - _1446) / _1456);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1446 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1884 = frontier_phi_37_32_ladder;
        }
        float _2211;
        if (_1459 > 0.0)
        {
            _2211 = abs((1.0 - _1450) / _1459);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1450 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2211 = frontier_phi_47_44_ladder;
        }
        float _2213 = isnan(_1884) ? _1566 : (isnan(_1566) ? _1884 : min(_1566, _1884));
        float _2214 = isnan(_2211) ? _2213 : (isnan(_2213) ? _2211 : min(_2213, _2211));
        float _2218 = (_2214 * _1453) + _1442;
        float _2219 = (_2214 * _1456) + _1446;
        float _2220 = (_2214 * _1459) + _1450;
        float _2221 = _2214 * 9.9999997473787516355514526367188e-05;
        float _2222 = (-1.0) - _2221;
        float _2224 = _2221 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2220 > _2224) || ((_2220 < _2222) || ((_2219 > _2224) || ((_2219 < _2222) || ((_2218 < _2222) || (_2218 > _2224))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2338 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2220, cbModelParam._m0[17u].z, fma(_2219, cbModelParam._m0[17u].y, _2218 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2220, cbModelParam._m0[18u].z, fma(_2219, cbModelParam._m0[18u].y, _2218 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2220, cbModelParam._m0[19u].z, fma(_2219, cbModelParam._m0[19u].y, _2218 * cbModelParam._m0[19u].x))), _1386);
            frontier_phi_22_47_ladder = _2338.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2338.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2338.x * cbModelParam._m0[1u].z;
        }
        _1478 = frontier_phi_22_47_ladder_2;
        _1480 = frontier_phi_22_47_ladder_1;
        _1482 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1462 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_487, _488, _489), _1386);
        _1478 = _1462.x * cbModelParam._m0[1u].z;
        _1480 = _1462.y * cbModelParam._m0[1u].z;
        _1482 = _1462.z * cbModelParam._m0[1u].z;
    }
    float _1494 = ((((1.0 - _507) * ((_495 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_507 * _495)) * _479;
    float _1495 = _1494 * ((cbModelParam._m0[1u].w * (_1478 - _1377)) + _1377);
    float _1496 = _1494 * ((cbModelParam._m0[1u].w * (_1480 - _1379)) + _1379);
    float _1497 = _1494 * ((cbModelParam._m0[1u].w * (_1482 - _1381)) + _1381);
    float _1500 = fma(_1497, cbSceneParam._m0[89u].z, fma(_1496, cbSceneParam._m0[89u].y, _1495 * cbSceneParam._m0[89u].x));
    float _1503 = fma(_1497, cbSceneParam._m0[90u].z, fma(_1496, cbSceneParam._m0[90u].y, _1495 * cbSceneParam._m0[90u].x));
    float _1506 = fma(_1497, cbSceneParam._m0[91u].z, fma(_1496, cbSceneParam._m0[91u].y, _1495 * cbSceneParam._m0[91u].x));
    float _1540 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1544 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1548 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1552 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1553 = _1540 / _1552;
    float _1554 = _1544 / _1552;
    float _1555 = _1548 / _1552;
    float _1702;
    float _1703;
    float _1704;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1582 = ((uint(_1555 > cbSceneParam._m0[59u].y) + uint(_1555 > cbSceneParam._m0[59u].x)) + uint(_1555 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1583 = _1582 + 43u;
        uint _1591 = _1582 + 44u;
        uint _1599 = _1582 + 45u;
        uint _1607 = _1582 + 46u;
        float _1618 = fma(_1552, cbSceneParam._m0[_1583].w, fma(_1548, cbSceneParam._m0[_1583].z, fma(_1544, cbSceneParam._m0[_1583].y, _1540 * cbSceneParam._m0[_1583].x)));
        float _1622 = fma(_1552, cbSceneParam._m0[_1591].w, fma(_1548, cbSceneParam._m0[_1591].z, fma(_1544, cbSceneParam._m0[_1591].y, _1540 * cbSceneParam._m0[_1591].x)));
        float _1630 = fma(_1552, cbSceneParam._m0[_1607].w, fma(_1548, cbSceneParam._m0[_1607].z, fma(_1544, cbSceneParam._m0[_1607].y, _1540 * cbSceneParam._m0[_1607].x)));
        float _1635 = cbSceneParam._m0[33u].z * _1630;
        float _1637 = cbSceneParam._m0[33u].w * _1630;
        float _1640 = fma(_1552, cbSceneParam._m0[_1599].w, fma(_1548, cbSceneParam._m0[_1599].z, fma(_1544, cbSceneParam._m0[_1599].y, _1540 * cbSceneParam._m0[_1599].x))) / _1630;
        float _1688 = (cbSceneParam._m0[33u].x - sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555))) * cbSceneParam._m0[33u].y;
        float _3961 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1695 = (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1635 + _1618) / _1630, (_1637 + _1622) / _1630), _1640), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1637 + _1618) / _1630, (_1622 - _1635) / _1630), _1640), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1618 - _1635) / _1630, (_1622 - _1637) / _1630), _1640), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1618 - _1637) / _1630, (_1635 + _1622) / _1630), _1640), 0.0)).x), vec4(0.25)));
        _1702 = 1.0 - (_1695 * cbSceneParam._m0[34u].x);
        _1703 = 1.0 - (_1695 * cbSceneParam._m0[34u].y);
        _1704 = 1.0 - (_1695 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1702 = 1.0;
        _1703 = 1.0;
        _1704 = 1.0;
    }
    float _1768;
    float _1770;
    float _1772;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1756 = fma(_1552, cbSceneParam._m0[63u].w, fma(_1548, cbSceneParam._m0[63u].z, fma(_1544, cbSceneParam._m0[63u].y, _1540 * cbSceneParam._m0[63u].x)));
        float _1757 = fma(_1552, cbSceneParam._m0[60u].w, fma(_1548, cbSceneParam._m0[60u].z, fma(_1544, cbSceneParam._m0[60u].y, _1540 * cbSceneParam._m0[60u].x))) / _1756;
        float _1758 = fma(_1552, cbSceneParam._m0[61u].w, fma(_1548, cbSceneParam._m0[61u].z, fma(_1544, cbSceneParam._m0[61u].y, _1540 * cbSceneParam._m0[61u].x))) / _1756;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1757 >= cbSceneParam._m0[64u].x) && (_1758 >= cbSceneParam._m0[64u].y)) && (_1757 <= cbSceneParam._m0[64u].z)) && (_1758 <= cbSceneParam._m0[64u].w))
        {
            float _1897 = fma(_1552, cbSceneParam._m0[62u].w, fma(_1548, cbSceneParam._m0[62u].z, fma(_1544, cbSceneParam._m0[62u].y, _1540 * cbSceneParam._m0[62u].x))) / _1756;
            float _1901 = isnan(cbSceneParam._m0[41u].w) ? _1897 : (isnan(_1897) ? cbSceneParam._m0[41u].w : max(_1897, cbSceneParam._m0[41u].w));
            float _1944 = (cbSceneParam._m0[33u].x - sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555))) * cbSceneParam._m0[33u].y;
            float _3977 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
            float _1951 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1757, cbSceneParam._m0[33u].w + _1758), _1901), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1757, _1758 - cbSceneParam._m0[33u].z), _1901), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1757 - cbSceneParam._m0[33u].z, _1758 - cbSceneParam._m0[33u].w), _1901), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1757 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1758), _1901), 0.0)).x), vec4(0.25)));
            float _1955 = 1.0 - (_1951 * cbSceneParam._m0[34u].x);
            float _1956 = 1.0 - (_1951 * cbSceneParam._m0[34u].y);
            float _1957 = 1.0 - (_1951 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1957) ? _1704 : (isnan(_1704) ? _1957 : min(_1704, _1957));
            frontier_phi_34_33_ladder_1 = isnan(_1956) ? _1703 : (isnan(_1703) ? _1956 : min(_1703, _1956));
            frontier_phi_34_33_ladder_2 = isnan(_1955) ? _1702 : (isnan(_1702) ? _1955 : min(_1702, _1955));
        }
        else
        {
            frontier_phi_34_33_ladder = _1704;
            frontier_phi_34_33_ladder_1 = _1703;
            frontier_phi_34_33_ladder_2 = _1702;
        }
        _1768 = frontier_phi_34_33_ladder_2;
        _1770 = frontier_phi_34_33_ladder_1;
        _1772 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1768 = _1702;
        _1770 = _1703;
        _1772 = _1704;
    }
    uvec4 _1777 = floatBitsToUint(cbInstanceData._m0[_453 + 5u]);
    uint _1779 = _1777.x * 14u;
    uint _1780 = _1779 + 13u;
    float _1787 = _479 + (-1.0);
    float _1792 = (cbLight._m0[_1780].x * _1787) + 1.0;
    float _1793 = (cbLight._m0[_1780].y * _1787) + 1.0;
    float _1794 = (cbLight._m0[_1780].z * _1787) + 1.0;
    float _1795 = (cbLight._m0[_1780].w * _1787) + 1.0;
    uint _1796 = _1779 + 5u;
    float _1802 = isnan(1.0) ? _1793 : (isnan(_1793) ? 1.0 : min(_1793, 1.0));
    uint _1806 = _1779 + 4u;
    float _1816 = isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0));
    uint _1820 = _1779 | 1u;
    float _1831 = dot(vec3(cbLight._m0[_1779].xyz), vec3(_324, _325, _326));
    float _1834 = dot(vec3(cbLight._m0[_1820].xyz), vec3(_324, _325, _326));
    float _4013 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _4024 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1839 = (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * 0.3183098733425140380859375;
    float _1841 = (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * 0.3183098733425140380859375;
    float _1848 = ((cbLight._m0[_1796].x * _1802) * _1841) + (((cbLight._m0[_1806].x * _1768) * _1816) * _1839);
    float _1849 = ((_1802 * cbLight._m0[_1796].y) * _1841) + (((cbLight._m0[_1806].y * _1770) * _1816) * _1839);
    float _1850 = ((_1802 * cbLight._m0[_1796].z) * _1841) + (((cbLight._m0[_1806].z * _1772) * _1816) * _1839);
    uvec4 _1854 = floatBitsToUint(cbLight._m0[_1779 + 12u]);
    bool _1856 = _1854.x == 0u;
    float _1958;
    float _1960;
    float _1962;
    if (_1856)
    {
        _1958 = _1848;
        _1960 = _1849;
        _1962 = _1850;
    }
    else
    {
        uint _1966 = _1779 + 6u;
        float _1982 = (dot(vec3(cbLight._m0[_1779 + 2u].xyz), vec3(_324, _325, _326)) * 0.5) + 0.5;
        float _1983 = _1982 * _1982;
        float _4035 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
        float _1984 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1985 = isnan(1.0) ? _1794 : (isnan(_1794) ? 1.0 : min(_1794, 1.0));
        _1958 = (((cbLight._m0[_1966].x * 0.3183098733425140380859375) * _1984) * _1985) + _1848;
        _1960 = (((cbLight._m0[_1966].y * 0.3183098733425140380859375) * _1984) * _1985) + _1849;
        _1962 = (((cbLight._m0[_1966].z * 0.3183098733425140380859375) * _1984) * _1985) + _1850;
    }
    bool _1965 = _1854.y == 0u;
    float _2020;
    float _2022;
    float _2024;
    if (_1965)
    {
        _2020 = _1958;
        _2022 = _1960;
        _2024 = _1962;
    }
    else
    {
        uint _2182 = _1779 + 7u;
        float _2198 = (dot(vec3(cbLight._m0[_1779 + 3u].xyz), vec3(_324, _325, _326)) * 0.5) + 0.5;
        float _2199 = _2198 * _2198;
        float _4051 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2200 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _2201 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
        _2020 = (((cbLight._m0[_2182].x * 0.3183098733425140380859375) * _2200) * _2201) + _1958;
        _2022 = (((cbLight._m0[_2182].y * 0.3183098733425140380859375) * _2200) * _2201) + _1960;
        _2024 = (((cbLight._m0[_2182].z * 0.3183098733425140380859375) * _2200) * _2201) + _1962;
    }
    uint _2027 = _1779 + 8u;
    float _2040 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1779].w)) * _327) * 0.949999988079071044921875);
    float _2041 = _2040 * _2040;
    float _2042 = cbLight._m0[_1779].x + _404;
    float _2043 = cbLight._m0[_1779].y + _405;
    float _2044 = cbLight._m0[_1779].z + _406;
    float _2048 = inversesqrt(dot(vec3(_2042, _2043, _2044), vec3(_2042, _2043, _2044)));
    float _2049 = _2048 * _2042;
    float _2050 = _2048 * _2043;
    float _2051 = _2048 * _2044;
    float _2052 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_1779].xyz));
    float _4067 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2055 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _4078 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _2056 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _2057 = dot(vec3(_324, _325, _326), vec3(_2049, _2050, _2051));
    float _4089 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2060 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _2061 = dot(vec3(cbLight._m0[_1779].xyz), vec3(_2049, _2050, _2051));
    float _4100 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2065 = _2041 * _2041;
    float _2069 = ((_2060 * _2060) * (_2065 + (-1.0))) + 1.0;
    float _2080 = (exp2(log2(1.0 - (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2081 = 1.0 - _2041;
    float _2092 = (0.5 / (((_2056 * ((_2055 * _2081) + _2041)) + 9.9999999392252902907785028219223e-09) + (((_2056 * _2081) + _2041) * _2055))) * _2055;
    float _4111 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2094 = (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_2065 / ((_2069 * _2069) * 3.141590118408203125));
    uint _2108 = _1779 + 9u;
    float _2119 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1820].w)) * _327) * 0.949999988079071044921875);
    float _2120 = _2119 * _2119;
    float _2121 = cbLight._m0[_1820].x + _404;
    float _2122 = cbLight._m0[_1820].y + _405;
    float _2123 = cbLight._m0[_1820].z + _406;
    float _2127 = inversesqrt(dot(vec3(_2121, _2122, _2123), vec3(_2121, _2122, _2123)));
    float _2128 = _2127 * _2121;
    float _2129 = _2127 * _2122;
    float _2130 = _2127 * _2123;
    float _2131 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_1820].xyz));
    float _4122 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2134 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _2135 = dot(vec3(_324, _325, _326), vec3(_2128, _2129, _2130));
    float _4133 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2138 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _2139 = dot(vec3(cbLight._m0[_1820].xyz), vec3(_2128, _2129, _2130));
    float _4144 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2143 = _2120 * _2120;
    float _2147 = ((_2138 * _2138) * (_2143 + (-1.0))) + 1.0;
    float _2156 = (exp2(log2(1.0 - (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2157 = 1.0 - _2120;
    float _2167 = (0.5 / (((_2056 * ((_2134 * _2157) + _2120)) + 9.9999999392252902907785028219223e-09) + (((_2056 * _2157) + _2120) * _2134))) * _2134;
    float _4155 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2169 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2143 / ((_2147 * _2147) * 3.141590118408203125));
    float _2179 = (((_2156 * cbLight._m0[_2108].x) * _2169) * _1802) + ((((cbLight._m0[_2027].x * _1768) * _2080) * _2094) * _1816);
    float _2180 = (((_2156 * cbLight._m0[_2108].y) * _2169) * _1802) + ((((cbLight._m0[_2027].y * _1770) * _2080) * _2094) * _1816);
    float _2181 = (((_2156 * cbLight._m0[_2108].z) * _2169) * _1802) + ((((cbLight._m0[_2027].z * _1772) * _2080) * _2094) * _1816);
    float _2237;
    float _2239;
    float _2241;
    if (_1856)
    {
        _2237 = _2179;
        _2239 = _2180;
        _2241 = _2181;
    }
    else
    {
        uint _2243 = _1779 + 2u;
        uint _2247 = _1779 + 10u;
        float _2261 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2243].w)) * _327) * 0.949999988079071044921875);
        float _2262 = _2261 * _2261;
        float _2263 = cbLight._m0[_2243].x + _404;
        float _2264 = cbLight._m0[_2243].y + _405;
        float _2265 = cbLight._m0[_2243].z + _406;
        float _2269 = inversesqrt(dot(vec3(_2263, _2264, _2265), vec3(_2263, _2264, _2265)));
        float _2270 = _2269 * _2263;
        float _2271 = _2269 * _2264;
        float _2272 = _2269 * _2265;
        float _2273 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_2243].xyz));
        float _4166 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2276 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _2277 = dot(vec3(_324, _325, _326), vec3(_2270, _2271, _2272));
        float _4177 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2280 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _2281 = dot(vec3(cbLight._m0[_2243].xyz), vec3(_2270, _2271, _2272));
        float _4188 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2285 = _2262 * _2262;
        float _2289 = ((_2280 * _2280) * (_2285 + (-1.0))) + 1.0;
        float _2298 = (exp2(log2(1.0 - (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2299 = 1.0 - _2262;
        float _2309 = (0.5 / (((_2056 * ((_2276 * _2299) + _2262)) + 9.9999999392252902907785028219223e-09) + (((_2056 * _2299) + _2262) * _2276))) * _2276;
        float _4199 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2311 = (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_2285 / ((_2289 * _2289) * 3.141590118408203125));
        float _2312 = isnan(1.0) ? _1794 : (isnan(_1794) ? 1.0 : min(_1794, 1.0));
        _2237 = (((_2298 * cbLight._m0[_2247].x) * _2311) * _2312) + _2179;
        _2239 = (((_2298 * cbLight._m0[_2247].y) * _2311) * _2312) + _2180;
        _2241 = (((_2298 * cbLight._m0[_2247].z) * _2311) * _2312) + _2181;
    }
    float _2343;
    float _2345;
    float _2347;
    if (_1965)
    {
        _2343 = _2237;
        _2345 = _2239;
        _2347 = _2241;
    }
    else
    {
        uint _2354 = _1779 + 3u;
        uint _2358 = _1779 + 11u;
        float _2372 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2354].w)) * _327) * 0.949999988079071044921875);
        float _2373 = _2372 * _2372;
        float _2374 = cbLight._m0[_2354].x + _404;
        float _2375 = cbLight._m0[_2354].y + _405;
        float _2376 = cbLight._m0[_2354].z + _406;
        float _2380 = inversesqrt(dot(vec3(_2374, _2375, _2376), vec3(_2374, _2375, _2376)));
        float _2381 = _2380 * _2374;
        float _2382 = _2380 * _2375;
        float _2383 = _2380 * _2376;
        float _2384 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_2354].xyz));
        float _4215 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2387 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _2388 = dot(vec3(_324, _325, _326), vec3(_2381, _2382, _2383));
        float _4226 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2391 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _2392 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_2381, _2382, _2383));
        float _4237 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2396 = _2373 * _2373;
        float _2400 = ((_2391 * _2391) * (_2396 + (-1.0))) + 1.0;
        float _2409 = (exp2(log2(1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2410 = 1.0 - _2373;
        float _2420 = (0.5 / (((_2056 * ((_2387 * _2410) + _2373)) + 9.9999999392252902907785028219223e-09) + (((_2056 * _2410) + _2373) * _2387))) * _2387;
        float _4248 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2422 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_2396 / ((_2400 * _2400) * 3.141590118408203125));
        float _2423 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
        _2343 = (((_2409 * cbLight._m0[_2358].x) * _2422) * _2423) + _2237;
        _2345 = (((_2409 * cbLight._m0[_2358].y) * _2422) * _2423) + _2239;
        _2347 = (((_2409 * cbLight._m0[_2358].z) * _2422) * _2423) + _2241;
    }
    float _2489;
    float _2491;
    float _2493;
    float _2495;
    float _2497;
    float _2499;
    if (_1777.y == 0u)
    {
        uvec4 _2444 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2445 = _2444.x;
        uint _2456 = uint((float(_2444.y) * floor(float(uint(cbSceneParam._m0[85u].y * _413) / _2445))) + floor(float(uint(cbSceneParam._m0[85u].x * _412) / _2445)));
        float _2466 = (log2(_1555 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2467 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        uint _2470 = uint(isnan(14.0) ? _2467 : (isnan(_2467) ? 14.0 : min(_2467, 14.0)));
        uvec4 _2475 = texelFetch(g_lightClusterGridBuffer, int(((_2470 << 2u) + (_2456 << 6u)) >> 2u));
        uint _2476 = _2475.x;
        uint _2477 = _2444.z;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        float _2602;
        float _2604;
        if (((((1u << ((_2477 >> 4u) & 15u)) + 4294967295u) & _2476) == 0u) || ((_2477 & 240u) == 0u))
        {
            _2594 = 0.0;
            _2596 = 0.0;
            _2598 = 0.0;
            _2600 = 0.0;
            _2602 = 0.0;
            _2604 = 0.0;
        }
        else
        {
            float _2595;
            float _2597;
            float _2599;
            float _2601;
            float _2603;
            float _2605;
            float _2748 = 0.0;
            float _2749 = 0.0;
            float _2750 = 0.0;
            float _2751 = 0.0;
            float _2752 = 0.0;
            float _2753 = 0.0;
            uint _2754 = 0u;
            uint _2763;
            bool _2764;
            for (;;)
            {
                _2763 = texelFetch(g_lightClassification, int((((_2470 << 5u) + (_2456 << 9u)) + (_2754 << 2u)) >> 2u)).x;
                _2764 = _2763 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2764)
                {
                    frontier_phi_66_pred = _2753;
                    frontier_phi_66_pred_1 = _2752;
                    frontier_phi_66_pred_2 = _2751;
                    frontier_phi_66_pred_3 = _2750;
                    frontier_phi_66_pred_4 = _2749;
                    frontier_phi_66_pred_5 = _2748;
                }
                else
                {
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    uint _2878;
                    _2872 = _2748;
                    _2873 = _2749;
                    _2874 = _2750;
                    _2875 = _2751;
                    _2876 = _2752;
                    _2877 = _2753;
                    _2878 = _2763;
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    for (;;)
                    {
                        uint _2882 = uint(findLSB(_2878)) + (_2754 << 5u);
                        uint _2879 = (_2878 + 4294967295u) & _2878;
                        uint _2884 = _2882 * 48u;
                        vec4 _2898 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2884)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 3u)).x));
                        uint _2904 = (_2882 * 48u) + 4u;
                        vec4 _2917 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2904)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 3u)).x));
                        uint _2923 = (_2882 * 48u) + 8u;
                        vec3 _2934 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2923)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 2u)).x));
                        float _2938 = _2898.x - _1553;
                        float _2939 = _2898.y - _1554;
                        float _2940 = _2898.z - _1555;
                        float _2941 = dot(vec3(_2938, _2939, _2940), vec3(_2938, _2939, _2940));
                        float _2944 = inversesqrt(_2941);
                        float _2945 = _2944 * _2938;
                        float _2946 = _2944 * _2939;
                        float _2947 = _2944 * _2940;
                        float _2948 = dot(vec3(_434, _437, _440), vec3(_2945, _2946, _2947));
                        float _2953 = 1.0 - (_2941 * _2898.w);
                        float _4274 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                        float _2954 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                        float _2955 = sqrt(_2941) * _2917.w;
                        float _2958 = 1.39999997615814208984375 / (_2955 + 1.39999997615814208984375);
                        float _2959 = _2958 * _2958;
                        float _2962 = ((1.0 - _2959) * _2948) + _2959;
                        float _2965 = _2955 * _2955;
                        float _2969 = ((isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0))) * _2954) / ((_2965 * 0.699999988079071044921875) + 1.0);
                        float _2973 = (-0.0) - _1553;
                        float _2974 = (-0.0) - _1554;
                        float _2975 = (-0.0) - _1555;
                        float _2979 = inversesqrt(dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975)));
                        float _2980 = _2979 * _2973;
                        float _2981 = _2979 * _2974;
                        float _2982 = _2979 * _2975;
                        float _2989 = exp2(log2(1.0 / ((_2965 * 3.5) + 5.0)) * 0.25);
                        float _2990 = 1.0 - _495;
                        float _2997 = sqrt(1.0 - ((1.0 - (_2990 * _2990)) * (1.0 - (_2989 * _2989))));
                        float _2998 = _2997 * _2997;
                        float _2999 = _2998 * _2998;
                        float _3000 = _2980 + _2945;
                        float _3001 = _2981 + _2946;
                        float _3002 = _2982 + _2947;
                        float _3006 = inversesqrt(dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002)));
                        float _3010 = dot(vec3(_434, _437, _440), vec3(_2980, _2981, _2982));
                        float _4290 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                        float _3013 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                        float _3014 = dot(vec3(_434, _437, _440), vec3(_3006 * _3000, _3006 * _3001, _3006 * _3002));
                        float _4301 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                        float _3017 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                        float _3021 = ((_3017 * _3017) * (_2999 + (-1.0))) + 1.0;
                        float _3022 = _2958 * _2998;
                        float _3023 = _3022 * _3022;
                        float _3026 = ((1.0 - _3023) * _2948) + _3023;
                        float _4312 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                        float _3027 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                        float _3028 = 1.0 - _2998;
                        float _3038 = (0.5 / (((_3027 * ((_3013 * _3028) + _2998)) + 9.9999999392252902907785028219223e-09) + (((_3027 * _3028) + _2998) * _3013))) * _3027;
                        float _4323 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3049 = (((_2999 * 3.1415927410125732421875) * (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) / ((_3021 * _3021) * ((_2965 * 2.1991131305694580078125) + 3.141590118408203125))) * _2954;
                        _2807 = (_2969 * _2917.x) + _2875;
                        _2808 = (_2969 * _2917.y) + _2876;
                        _2809 = (_2969 * _2917.z) + _2877;
                        _2804 = (_3049 * _2934.x) + _2872;
                        _2805 = (_3049 * _2934.y) + _2873;
                        _2806 = (_3049 * _2934.z) + _2874;
                        if (_2879 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2872 = _2804;
                            _2873 = _2805;
                            _2874 = _2806;
                            _2875 = _2807;
                            _2876 = _2808;
                            _2877 = _2809;
                            _2878 = _2879;
                        }
                    }
                    frontier_phi_66_pred = _2809;
                    frontier_phi_66_pred_1 = _2808;
                    frontier_phi_66_pred_2 = _2807;
                    frontier_phi_66_pred_3 = _2806;
                    frontier_phi_66_pred_4 = _2805;
                    frontier_phi_66_pred_5 = _2804;
                }
                _2605 = frontier_phi_66_pred;
                _2603 = frontier_phi_66_pred_1;
                _2601 = frontier_phi_66_pred_2;
                _2599 = frontier_phi_66_pred_3;
                _2597 = frontier_phi_66_pred_4;
                _2595 = frontier_phi_66_pred_5;
                uint _2755 = _2754 + 1u;
                if (_2755 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2748 = _2595;
                    _2749 = _2597;
                    _2750 = _2599;
                    _2751 = _2601;
                    _2752 = _2603;
                    _2753 = _2605;
                    _2754 = _2755;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2594 = _2595;
            _2596 = _2597;
            _2598 = _2599;
            _2600 = _2601;
            _2602 = _2603;
            _2604 = _2605;
        }
        uvec4 _2608 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2609 = _2608.z;
        uint _2611 = (_2609 >> 8u) & 15u;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        if (((4294967295u << _2611) & _2476) == 0u)
        {
            _2716 = _2594;
            _2718 = _2596;
            _2720 = _2598;
            _2722 = _2600;
            _2724 = _2602;
            _2726 = _2604;
        }
        else
        {
            float _2741 = inversesqrt(dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555)));
            float _2742 = _2741 * _1553;
            float _2743 = _2741 * _1554;
            float _2744 = _2741 * _1555;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2611 < ((_2609 >> 12u) & 15u))
            {
                float _2717;
                float _2719;
                float _2721;
                float _2723;
                float _2725;
                float _2727;
                float _2855 = _2594;
                float _2856 = _2596;
                float _2857 = _2598;
                float _2858 = _2600;
                float _2859 = _2602;
                float _2860 = _2604;
                uint _2861 = _2611;
                uint _2870;
                bool _2871;
                for (;;)
                {
                    _2870 = texelFetch(g_lightClassification, int((((_2470 << 5u) + (_2456 << 9u)) + (_2861 << 2u)) >> 2u)).x;
                    _2871 = _2870 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2871)
                    {
                        frontier_phi_72_pred = _2860;
                        frontier_phi_72_pred_1 = _2859;
                        frontier_phi_72_pred_2 = _2858;
                        frontier_phi_72_pred_3 = _2857;
                        frontier_phi_72_pred_4 = _2856;
                        frontier_phi_72_pred_5 = _2855;
                    }
                    else
                    {
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3067 = _2855;
                        float _3068 = _2856;
                        float _3069 = _2857;
                        float _3070 = _2858;
                        float _3071 = _2859;
                        float _3072 = _2860;
                        uint _3073 = _2870;
                        uint _3074;
                        vec4 _3099;
                        float _3100;
                        vec4 _3115;
                        vec3 _3127;
                        vec4 _3143;
                        vec4 _3159;
                        float _3206;
                        bool _3207;
                        for (;;)
                        {
                            uint _3084 = ((_2861 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3073));
                            _3074 = (_3073 + 4294967295u) & _3073;
                            uint _3086 = _3084 * 40u;
                            _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            _3100 = _3099.w;
                            uint _3102 = (_3084 * 40u) + 4u;
                            _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            uint _3117 = (_3084 * 40u) + 8u;
                            _3127 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x));
                            uint _3130 = (_3084 * 40u) + 16u;
                            _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            uint _3146 = (_3084 * 40u) + 20u;
                            _3159 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 3u)).x));
                            uint _3162 = (_3084 * 40u) + 24u;
                            vec4 _3175 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 3u)).x));
                            uint _3181 = (_3084 * 40u) + 28u;
                            vec4 _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            _3206 = fma(_1555, _3194.z, fma(_1554, _3194.y, _3194.x * _1553)) + _3194.w;
                            _3207 = !((fma(_1555, _3175.z, fma(_1554, _3175.y, _3175.x * _1553)) + _3175.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3207)
                            {
                                float _3234 = _3099.x - _1553;
                                float _3235 = _3099.y - _1554;
                                float _3236 = _3099.z - _1555;
                                float _3237 = dot(vec3(_3234, _3235, _3236), vec3(_3234, _3235, _3236));
                                float _3240 = inversesqrt(_3237);
                                float _3241 = _3240 * _3234;
                                float _3242 = _3240 * _3235;
                                float _3243 = _3240 * _3236;
                                float _3247 = 1.0 - (_3237 / (_3100 * _3100));
                                float _4334 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3248 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                                float _3252 = sqrt(_3237) * _3115.w;
                                float _3254 = 1.39999997615814208984375 / (_3252 + 1.39999997615814208984375);
                                float _3255 = _3254 * _3254;
                                float _3258 = ((1.0 - _3255) * dot(vec3(_3241, _3242, _3243), vec3(_434, _437, _440))) + _3255;
                                float _3261 = _3252 * _3252;
                                float _3265 = (fma(_1555, _3143.z, fma(_1554, _3143.y, _3143.x * _1553)) + _3143.w) / _3206;
                                float _3266 = (fma(_1555, _3159.z, fma(_1554, _3159.y, _3159.x * _1553)) + _3159.w) / _3206;
                                float _3270 = 1.0 - dot(vec2(_3265, _3266), vec2(_3265, _3266));
                                float _4350 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3271 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                                float _3272 = _3271 * (((isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0))) * _3248) / ((_3261 * 0.699999988079071044921875) + 1.0));
                                float _3284 = exp2(log2(1.0 / ((_3261 * 3.5) + 5.0)) * 0.25);
                                float _3285 = 1.0 - _495;
                                float _3292 = sqrt(1.0 - ((1.0 - (_3285 * _3285)) * (1.0 - (_3284 * _3284))));
                                float _3293 = _3292 * _3292;
                                float _3294 = _3293 * _3293;
                                float _3295 = _3241 - _2742;
                                float _3296 = _3242 - _2743;
                                float _3297 = _3243 - _2744;
                                float _3301 = inversesqrt(dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297)));
                                float _3305 = dot(vec3(_434, _437, _440), vec3((-0.0) - _2742, (-0.0) - _2743, (-0.0) - _2744));
                                float _4361 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3308 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                                float _3309 = dot(vec3(_434, _437, _440), vec3(_3301 * _3295, _3301 * _3296, _3301 * _3297));
                                float _4372 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3312 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                                float _3316 = ((_3312 * _3312) * (_3294 + (-1.0))) + 1.0;
                                float _3317 = _3254 * _3293;
                                float _3318 = _3317 * _3317;
                                float _3324 = ((1.0 - _3318) * dot(vec3(_434, _437, _440), vec3(_3241, _3242, _3243))) + _3318;
                                float _4383 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3325 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                                float _3326 = 1.0 - _3293;
                                float _3336 = (0.5 / (((_3325 * ((_3308 * _3326) + _3293)) + 9.9999999392252902907785028219223e-09) + (((_3325 * _3326) + _3293) * _3308))) * _3325;
                                float _4394 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3346 = (_3271 * _3248) * (((_3294 * 3.1415927410125732421875) * (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0)))) / ((_3316 * _3316) * ((_3261 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3272 * _3115.y;
                                frontier_phi_78_pred_1 = _3272 * _3115.x;
                                frontier_phi_78_pred_2 = _3346 * _3127.z;
                                frontier_phi_78_pred_3 = _3346 * _3127.y;
                                frontier_phi_78_pred_4 = _3346 * _3127.x;
                                frontier_phi_78_pred_5 = _3272 * _3115.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3354 = frontier_phi_78_pred;
                            _3353 = frontier_phi_78_pred_1;
                            _3352 = frontier_phi_78_pred_2;
                            _3351 = frontier_phi_78_pred_3;
                            _3350 = frontier_phi_78_pred_4;
                            _3355 = frontier_phi_78_pred_5;
                            _3057 = _3353 + _3070;
                            _3058 = _3354 + _3071;
                            _3059 = _3355 + _3072;
                            _3054 = _3350 + _3067;
                            _3055 = _3351 + _3068;
                            _3056 = _3352 + _3069;
                            if (_3074 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3058;
                                _3072 = _3059;
                                _3073 = _3074;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3059;
                        frontier_phi_72_pred_1 = _3058;
                        frontier_phi_72_pred_2 = _3057;
                        frontier_phi_72_pred_3 = _3056;
                        frontier_phi_72_pred_4 = _3055;
                        frontier_phi_72_pred_5 = _3054;
                    }
                    _2727 = frontier_phi_72_pred;
                    _2725 = frontier_phi_72_pred_1;
                    _2723 = frontier_phi_72_pred_2;
                    _2721 = frontier_phi_72_pred_3;
                    _2719 = frontier_phi_72_pred_4;
                    _2717 = frontier_phi_72_pred_5;
                    uint _2862 = _2861 + 1u;
                    if (_2862 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2855 = _2717;
                        _2856 = _2719;
                        _2857 = _2721;
                        _2858 = _2723;
                        _2859 = _2725;
                        _2860 = _2727;
                        _2861 = _2862;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2727;
                frontier_phi_60_61_ladder_1 = _2725;
                frontier_phi_60_61_ladder_2 = _2721;
                frontier_phi_60_61_ladder_3 = _2719;
                frontier_phi_60_61_ladder_4 = _2717;
                frontier_phi_60_61_ladder_5 = _2723;
            }
            else
            {
                frontier_phi_60_61_ladder = _2604;
                frontier_phi_60_61_ladder_1 = _2602;
                frontier_phi_60_61_ladder_2 = _2598;
                frontier_phi_60_61_ladder_3 = _2596;
                frontier_phi_60_61_ladder_4 = _2594;
                frontier_phi_60_61_ladder_5 = _2600;
            }
            _2716 = frontier_phi_60_61_ladder_4;
            _2718 = frontier_phi_60_61_ladder_3;
            _2720 = frontier_phi_60_61_ladder_2;
            _2722 = frontier_phi_60_61_ladder_5;
            _2724 = frontier_phi_60_61_ladder_1;
            _2726 = frontier_phi_60_61_ladder;
        }
        float _2731 = isnan(1.0) ? _479 : (isnan(_479) ? 1.0 : min(_479, 1.0));
        _2489 = (_2731 * _2722) + _2020;
        _2491 = (_2731 * _2724) + _2022;
        _2493 = (_2731 * _2726) + _2024;
        _2495 = ((_2716 * 0.039999999105930328369140625) * _2731) + _2343;
        _2497 = ((_2718 * 0.039999999105930328369140625) * _2731) + _2345;
        _2499 = ((_2720 * 0.039999999105930328369140625) * _2731) + _2347;
    }
    else
    {
        _2489 = _2020;
        _2491 = _2022;
        _2493 = _2024;
        _2495 = _2343;
        _2497 = _2345;
        _2499 = _2347;
    }
    uint _2505 = _455 + uint(cbMatDynParam._m0[0u].w);
    float _2514 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _287.x) * _310) * cbInstanceData._m0[_2505].x;
    float _2518 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _287.y) * _310) * cbInstanceData._m0[_2505].y;
    float _2522 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _287.z) * _310) * cbInstanceData._m0[_2505].z;
    float _4410 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _4421 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _4432 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _2539 = (((isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2489 + ((isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))) * _479))) + ((_2495 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _1285)) * cbPerFrame._m0[3u].x)) + _2514;
    float _2541 = (_2518 + ((_2497 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _1285)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_2491 + ((isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0))) * _479)));
    float _2543 = (_2522 + ((_2499 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _1285)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2493 + ((isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0))) * _479)));
    float _4458 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2556 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    uint _2557 = _453 + 6u;
    float _2565 = _412 / cbSceneParam._m0[86u].x;
    float _2566 = _413 / cbSceneParam._m0[86u].y;
    vec4 _2580 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2565, _2566, (log2((isnan(cbSceneParam._m0[77u].w) ? _346 : (isnan(_346) ? cbSceneParam._m0[77u].w : min(_346, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2582 = _2580.x;
    float _2583 = _2580.y;
    float _2584 = _2580.z;
    float _2585 = _2580.w;
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    if (_346 > cbSceneParam._m0[78u].w)
    {
        float _2619 = isnan(_346) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _346 : min(cbSceneParam._m0[80u].w, _346));
        float _2620 = _2619 / _346;
        float _2631 = _2620 * _397;
        float _2632 = _398 * _2620;
        float _2633 = (-0.0) - _2632;
        float _2635 = _2620 * _399;
        float _2637 = (cbSceneParam._m0[77u].w * _2633) / _2619;
        float _2638 = _2637 + cbSceneParam._m0[79u].w;
        float _2639 = cbSceneParam._m0[79u].w - _2632;
        float _2645 = sqrt(((_2631 * _2631) + (_2632 * _2632)) + (_2635 * _2635));
        float _2648 = (1.0 - (cbSceneParam._m0[77u].w / _2619)) * _2645;
        float _2653 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2655 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2817;
        if (abs((_2633 - _2637) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2817 = ((((_2638 > 0.0) ? exp2(_2653 * _2638) : (2.0 - exp2(_2655 * _2638))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2648;
        }
        else
        {
            float _2777 = 1.0 / cbSceneParam._m0[80u].x;
            float _2778 = isnan(_2639) ? _2638 : (isnan(_2638) ? _2639 : max(_2638, _2639));
            float _2779 = isnan(_2639) ? _2638 : (isnan(_2638) ? _2639 : min(_2638, _2639));
            float _2788 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : min(_2778, 0.0));
            float _2789 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : min(_2779, 0.0));
            _2817 = ((abs(_2645 / _2633) * cbSceneParam._m0[80u].y) * ((((_2788 - _2789) * 2.0) - ((exp2(_2653 * (isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0)))) - exp2(_2653 * (isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0))))) * _2777)) - ((exp2(_2655 * _2788) - exp2(_2655 * _2789)) * _2777))) + (_2648 * cbSceneParam._m0[80u].z);
        }
        vec4 _2819 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2565, _2566, 1.0), 0.0);
        float _2828 = exp2((_2817 * (-1.44269502162933349609375)) * (1.0 - _2819.w));
        float _2829 = log2(_2828);
        float _2845 = log2(_2585);
        _2657 = (exp2(_2845 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2829 * cbSceneParam._m0[78u].x)) * _2819.x) / cbSceneParam._m0[78u].x)) + _2582;
        _2659 = (exp2(_2845 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2829 * cbSceneParam._m0[78u].y)) * _2819.y) / cbSceneParam._m0[78u].y)) + _2583;
        _2661 = (exp2(_2845 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2829 * cbSceneParam._m0[78u].z)) * _2819.z) / cbSceneParam._m0[78u].z)) + _2584;
        _2663 = _2828 * _2585;
    }
    else
    {
        _2657 = _2582;
        _2659 = _2583;
        _2661 = _2584;
        _2663 = _2585;
    }
    float _2675 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2676 = _2675 == 3.0;
    float _2677 = log2(_2663);
    float _2681 = exp2(_2677 * cbSceneParam._m0[78u].x);
    float _2682 = exp2(_2677 * cbSceneParam._m0[78u].y);
    float _2683 = exp2(_2677 * cbSceneParam._m0[78u].z);
    float _2684 = _2681 * (isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0)));
    float _2685 = _2682 * (isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0)));
    float _2686 = _2683 * (isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0)));
    float _2695 = (_2675 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2695 * (_2676 ? _2684 : (_2684 + (cbSceneParam._m0[72u].w * _2657)));
    SV_Target.y = _2695 * (_2676 ? _2685 : (_2685 + (cbSceneParam._m0[72u].w * _2659)));
    SV_Target.z = _2695 * (_2676 ? _2686 : (_2686 + (cbSceneParam._m0[72u].w * _2661)));
    SV_Target.w = cbInstanceData._m0[_2557].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2514) * _2556) * _2681) * _2695;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2518) * _2556) * _2682) * _2695;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2522) * _2556) * _2683) * _2695;
    SV_Target_1.w = cbInstanceData._m0[_2557].w;
}


