#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _848;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _183 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _184 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _185 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_183, _184, _185), vec3(_183, _184, _185)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _226 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _226.x * cbMtdParam._m0[9u].x;
    float _233 = _226.y * cbMtdParam._m0[9u].y;
    float _234 = _226.z * cbMtdParam._m0[9u].z;
    vec4 _246 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _250 = _246.z;
    float _254 = (_246.x * 2.0) + (-1.0);
    float _256 = (_246.y * 2.0) + (-1.0);
    float _257 = dot(vec2(_254, _256), vec2(_254, _256));
    float _3232 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _263 = sqrt(1.0 - (isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0))));
    vec4 _285 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _299 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3243 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _300 = isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0));
    float _308 = (((_300 * _300) * (3.0 - (_300 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _311 = fma(_263, _197 * NORMAL.x, fma(_256, _204 * TANGENT.x, (_190 * _183) * _254));
    float _314 = fma(_263, _197 * NORMAL.y, fma(_256, _204 * TANGENT.y, (_190 * _184) * _254));
    float _317 = fma(_263, _197 * NORMAL.z, fma(_256, _204 * TANGENT.z, (_190 * _185) * _254));
    float _321 = inversesqrt(dot(vec3(_311, _314, _317), vec3(_311, _314, _317)));
    float _322 = _321 * _311;
    float _323 = _321 * _314;
    float _324 = _321 * _317;
    float _3254 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _325 = isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0));
    float _3265 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3276 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3287 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _344 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _385 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _395 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _385);
    float _396 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _385);
    float _397 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _385);
    float _401 = inversesqrt(dot(vec3(_395, _396, _397), vec3(_395, _396, _397)));
    float _402 = _395 * _401;
    float _403 = _396 * _401;
    float _404 = _397 * _401;
    float _410 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _411 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _432 = fma(_324, cbSceneParam._m0[5u].z, fma(_323, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _322));
    float _435 = fma(_324, cbSceneParam._m0[6u].z, fma(_323, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _322));
    float _438 = fma(_324, cbSceneParam._m0[7u].z, fma(_323, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _322));
    uint _451 = uint(roundEven(NORMAL.w)) * 13u;
    uint _453 = _451 + 9u;
    uint _454 = _453 + uint(cbMatDynParam._m0[0u].w);
    float _460 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0)))) * cbInstanceData._m0[_454].x;
    float _461 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0)))) * cbInstanceData._m0[_454].y;
    float _462 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0)))) * cbInstanceData._m0[_454].z;
    float _3298 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0));
    float _3309 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _464 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
    float _3320 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _465 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
    vec4 _474 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _410, cbSceneParam._m0[86u].y * _411));
    float _477 = _474.x * TEXCOORD.z;
    float _478 = dot(vec3(_322, _323, _324), vec3(_402, _403, _404));
    float _481 = _478 * 2.0;
    float _485 = (_481 * _322) - _402;
    float _486 = (_481 * _323) - _403;
    float _487 = (_481 * _324) - _404;
    float _491 = abs(dot(vec3(_402, _403, _404), vec3(_322, _323, _324)));
    float _3331 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _493 = sqrt(_325);
    float _505 = exp2((_493 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_493 * 3.0));
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _847;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _572 = fma(_545, cbModelParam._m0[26u].z, fma(_541, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _537));
        float _576 = fma(_545, cbModelParam._m0[27u].z, fma(_541, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _537));
        float _580 = fma(_545, cbModelParam._m0[28u].z, fma(_541, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _537));
        float _605 = _537 + _322;
        float _606 = _541 + _323;
        float _607 = _545 + _324;
        float _617 = fma(_607, cbModelParam._m0[26u].z, fma(_606, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _605)) - _572;
        float _618 = fma(_607, cbModelParam._m0[27u].z, fma(_606, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _605)) - _576;
        float _619 = fma(_607, cbModelParam._m0[28u].z, fma(_606, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _605)) - _580;
        float _623 = inversesqrt(dot(vec3(_617, _618, _619), vec3(_617, _618, _619)));
        float _636 = ((_623 * _617) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_572 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _637 = ((_623 * _618) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_576 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _638 = ((_623 * _619) / cbModelParam._m0[34u].z) + ((((((_580 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _641 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _648 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _655 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        float _675 = exp2((_641.w + (-0.5)) * 20.0) * 2.0;
        float _676 = _675 * (_641.x + (-0.5));
        float _677 = _675 * (_641.y + (-0.5));
        float _678 = _675 * (_641.z + (-0.5));
        float _685 = exp2((_648.w + (-0.5)) * 20.0) * 2.0;
        float _686 = _685 * (_648.x + (-0.5));
        float _687 = _685 * (_648.y + (-0.5));
        float _688 = _685 * (_648.z + (-0.5));
        float _695 = exp2((_655.w + (-0.5)) * 20.0) * 2.0;
        float _696 = _695 * (_655.x + (-0.5));
        float _697 = _695 * (_655.y + (-0.5));
        float _698 = _695 * (_655.z + (-0.5));
        float _705 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _706 = _705 * (_662.x + (-0.5));
        float _707 = _705 * (_662.y + (-0.5));
        float _708 = _705 * (_662.z + (-0.5));
        float _709 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _710 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _711 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _712 = _676 * 0.5;
        float _713 = _686 * 0.5;
        float _714 = _696 * 0.5;
        float _715 = dot(vec3(_712, _713, _714), vec3(_712, _713, _714));
        float _720 = (_715 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_715);
        float _729 = (dot(vec3(_322, _323, _324), vec3(_720 * _712, _720 * _713, _720 * _714)) + 1.0) * 0.5;
        float _3357 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _739 = sqrt(((_713 * _713) + (_712 * _712)) + (_714 * _714)) / (_709 + 9.9999997473787516355514526367188e-06);
        float _3368 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _740 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
        float _741 = _740 * 2.0;
        float _745 = (1.0 - _740) / (_740 + 1.0);
        float _3379 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _755 = ((((1.0 - _746) * (_741 + 2.0)) * exp2(log2(isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0))) * (_741 + 1.0))) + _746) * _709;
        float _756 = _677 * 0.5;
        float _757 = _687 * 0.5;
        float _758 = _697 * 0.5;
        float _759 = dot(vec3(_756, _757, _758), vec3(_756, _757, _758));
        float _764 = (_759 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_759);
        float _772 = (dot(vec3(_322, _323, _324), vec3(_764 * _756, _764 * _757, _764 * _758)) + 1.0) * 0.5;
        float _3390 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _781 = sqrt(((_757 * _757) + (_756 * _756)) + (_758 * _758)) / (_710 + 9.9999997473787516355514526367188e-06);
        float _3401 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _783 = _782 * 2.0;
        float _787 = (1.0 - _782) / (_782 + 1.0);
        float _3412 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _797 = ((((1.0 - _788) * (_783 + 2.0)) * exp2(log2(isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0))) * (_783 + 1.0))) + _788) * _710;
        float _798 = _678 * 0.5;
        float _799 = _688 * 0.5;
        float _800 = _698 * 0.5;
        float _801 = dot(vec3(_798, _799, _800), vec3(_798, _799, _800));
        float _806 = (_801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_801);
        float _814 = (dot(vec3(_322, _323, _324), vec3(_806 * _798, _806 * _799, _806 * _800)) + 1.0) * 0.5;
        float _3423 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _823 = sqrt(((_799 * _799) + (_798 * _798)) + (_800 * _800)) / (_711 + 9.9999997473787516355514526367188e-06);
        float _3434 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
        float _825 = _824 * 2.0;
        float _829 = (1.0 - _824) / (_824 + 1.0);
        float _3445 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _839 = ((((1.0 - _830) * (_825 + 2.0)) * exp2(log2(isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0))) * (_825 + 1.0))) + _830) * _711;
        _847 = _678;
        _849 = _677;
        _850 = _676;
        _851 = _688;
        _852 = _687;
        _853 = _686;
        _854 = _698;
        _855 = _697;
        _856 = _696;
        _857 = _711;
        _858 = _710;
        _859 = _709;
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0)));
        _861 = cbModelParam._m0[36u].z * (isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0)));
        _862 = cbModelParam._m0[36u].z * (isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0)));
    }
    else
    {
        _847 = _848;
        _849 = _848;
        _850 = _848;
        _851 = _848;
        _852 = _848;
        _853 = _848;
        _854 = _848;
        _855 = _848;
        _856 = _848;
        _857 = _848;
        _858 = _848;
        _859 = _848;
        _860 = 0.0;
        _861 = 0.0;
        _862 = 0.0;
    }
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _888 = fma(_545, cbModelParam._m0[30u].z, fma(_541, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _537));
        float _892 = fma(_545, cbModelParam._m0[31u].z, fma(_541, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _537));
        float _896 = fma(_545, cbModelParam._m0[32u].z, fma(_541, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _537));
        float _919 = _537 + _322;
        float _920 = _541 + _323;
        float _921 = _545 + _324;
        float _931 = fma(_921, cbModelParam._m0[30u].z, fma(_920, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _919)) - _888;
        float _932 = fma(_921, cbModelParam._m0[31u].z, fma(_920, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _919)) - _892;
        float _933 = fma(_921, cbModelParam._m0[32u].z, fma(_920, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _919)) - _896;
        float _937 = inversesqrt(dot(vec3(_931, _932, _933), vec3(_931, _932, _933)));
        float _950 = ((_937 * _931) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_888 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _951 = ((_937 * _932) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_892 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_937 * _933) / cbModelParam._m0[35u].z) + ((((((_896 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        float _987 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_954.x + (-0.5));
        float _989 = _987 * (_954.y + (-0.5));
        float _990 = _987 * (_954.z + (-0.5));
        float _997 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_961.x + (-0.5));
        float _999 = _997 * (_961.y + (-0.5));
        float _1000 = _997 * (_961.z + (-0.5));
        float _1007 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_968.x + (-0.5));
        float _1009 = _1007 * (_968.y + (-0.5));
        float _1010 = _1007 * (_968.z + (-0.5));
        float _1017 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_975.x + (-0.5));
        float _1019 = _1017 * (_975.y + (-0.5));
        float _1020 = _1017 * (_975.z + (-0.5));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = _988 * 0.5;
        float _1025 = _998 * 0.5;
        float _1026 = _1008 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1040 = (dot(vec3(_322, _323, _324), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _3486 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1049 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3497 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _1051 = _1050 * 2.0;
        float _1055 = (1.0 - _1050) / (_1050 + 1.0);
        float _3508 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _1065 = ((((1.0 - _1056) * (_1051 + 2.0)) * exp2(log2(isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0))) * (_1051 + 1.0))) + _1056) * _1021;
        float _1066 = _989 * 0.5;
        float _1067 = _999 * 0.5;
        float _1068 = _1009 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1082 = (dot(vec3(_322, _323, _324), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _3519 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1091 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3530 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _3541 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))) * (_1093 + 1.0))) + _1098) * _1022;
        float _1108 = _990 * 0.5;
        float _1109 = _1000 * 0.5;
        float _1110 = _1010 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_322, _323, _324), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3552 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3563 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3574 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))) * (_1135 + 1.0))) + _1140) * _1023;
        _1157 = _990;
        _1158 = _989;
        _1159 = _988;
        _1160 = _1000;
        _1161 = _999;
        _1162 = _998;
        _1163 = _1010;
        _1164 = _1009;
        _1165 = _1008;
        _1166 = _1023;
        _1167 = _1022;
        _1168 = _1021;
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0)));
        _1170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
        _1171 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
    }
    else
    {
        _1157 = _848;
        _1158 = _848;
        _1159 = _848;
        _1160 = _848;
        _1161 = _848;
        _1162 = _848;
        _1163 = _848;
        _1164 = _848;
        _1165 = _848;
        _1166 = _848;
        _1167 = _848;
        _1168 = _848;
        _1169 = 0.0;
        _1170 = 0.0;
        _1171 = 0.0;
    }
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _860)) + _860;
    float _1182 = (cbModelParam._m0[1u].x * (_1170 - _861)) + _861;
    float _1183 = (cbModelParam._m0[1u].x * (_1171 - _862)) + _862;
    float _1204 = fma(_1183, cbSceneParam._m0[89u].z, fma(_1182, cbSceneParam._m0[89u].y, _1181 * cbSceneParam._m0[89u].x));
    float _1207 = fma(_1183, cbSceneParam._m0[90u].z, fma(_1182, cbSceneParam._m0[90u].y, _1181 * cbSceneParam._m0[90u].x));
    float _1210 = fma(_1183, cbSceneParam._m0[91u].z, fma(_1182, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1181));
    float _1225 = _485 * 0.5;
    float _1226 = _486 * 0.5;
    float _1227 = _487 * 0.5;
    float _1228 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1159, _1162, _1165, _1168));
    float _1231 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1158, _1161, _1164, _1167));
    float _1234 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1268;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1241 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_847, _851, _854, _857));
        float _1245 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_849, _852, _855, _858));
        float _1249 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_850, _853, _856, _859));
        float _1256 = dot(vec4(cbModelParam._m0[39u]), vec4(_1225, _1226, _1227, 1.0));
        _1268 = dot(vec3(isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)), isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1256) ? 0.0 : (isnan(0.0) ? _1256 : max(0.0, _1256))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1268 = 1.0;
    }
    float _1279;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1270 = dot(vec4(cbModelParam._m0[40u]), vec4(_1225, _1226, _1227, 1.0));
        _1279 = dot(vec3(isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)), isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)), isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1270) ? 0.0 : (isnan(0.0) ? _1270 : max(0.0, _1270))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1279 = 1.0;
    }
    float _1283 = (_1279 * cbModelParam._m0[1u].x) + (_1268 * (1.0 - cbModelParam._m0[1u].x));
    float _1293 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _325);
    float _1294 = isnan(_1293) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1293 : min(cbModelParam._m0[25u].z, _1293));
    float _1375;
    float _1377;
    float _1379;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1342 = fma(_545, cbModelParam._m0[13u].z, fma(_541, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _537)) + cbModelParam._m0[13u].w;
        float _1346 = fma(_545, cbModelParam._m0[14u].z, fma(_541, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _537)) + cbModelParam._m0[14u].w;
        float _1350 = fma(_545, cbModelParam._m0[15u].z, fma(_541, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _537)) + cbModelParam._m0[15u].w;
        float _1353 = fma(_487, cbModelParam._m0[13u].z, fma(_486, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _485));
        float _1356 = fma(_487, cbModelParam._m0[14u].z, fma(_486, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _485));
        float _1359 = fma(_487, cbModelParam._m0[15u].z, fma(_486, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _485));
        float _1387;
        if (_1353 > 0.0)
        {
            _1387 = abs((1.0 - _1342) / _1353);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1353 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1342 + 1.0) / _1353);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1387 = frontier_phi_14_12_ladder;
        }
        float _1612;
        if (_1356 > 0.0)
        {
            _1612 = abs((1.0 - _1346) / _1356);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1346 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1612 = frontier_phi_23_19_ladder;
        }
        float _1858;
        if (_1359 > 0.0)
        {
            _1858 = abs((1.0 - _1350) / _1359);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1359 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1350 + 1.0) / _1359);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1858 = frontier_phi_35_30_ladder;
        }
        float _1860 = isnan(_1612) ? _1387 : (isnan(_1387) ? _1612 : min(_1387, _1612));
        float _1861 = isnan(_1858) ? _1860 : (isnan(_1860) ? _1858 : min(_1860, _1858));
        float _1865 = (_1861 * _1353) + _1342;
        float _1866 = (_1861 * _1356) + _1346;
        float _1867 = (_1861 * _1359) + _1350;
        float _1868 = _1861 * 9.9999997473787516355514526367188e-05;
        float _1870 = (-1.0) - _1868;
        float _1872 = _1868 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1867 > _1872) || ((_1867 < _1870) || ((_1866 > _1872) || ((_1866 < _1870) || ((_1865 < _1870) || (_1865 > _1872))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1991 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1867, cbModelParam._m0[9u].z, fma(_1866, cbModelParam._m0[9u].y, _1865 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1867, cbModelParam._m0[10u].z, fma(_1866, cbModelParam._m0[10u].y, _1865 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1867, cbModelParam._m0[11u].z, fma(_1866, cbModelParam._m0[11u].y, _1865 * cbModelParam._m0[11u].x))), _1294);
            frontier_phi_13_35_ladder = _1991.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1991.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1991.x * cbModelParam._m0[1u].y;
        }
        _1375 = frontier_phi_13_35_ladder_2;
        _1377 = frontier_phi_13_35_ladder_1;
        _1379 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1363 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_485, _486, _487), _1294);
        _1375 = _1363.x * cbModelParam._m0[1u].y;
        _1377 = _1363.y * cbModelParam._m0[1u].y;
        _1379 = _1363.z * cbModelParam._m0[1u].y;
    }
    float _1383 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _325);
    float _1384 = isnan(_1383) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1383 : min(cbModelParam._m0[25u].w, _1383));
    float _1476;
    float _1478;
    float _1480;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1440 = fma(_545, cbModelParam._m0[21u].z, fma(_541, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _537)) + cbModelParam._m0[21u].w;
        float _1444 = fma(_545, cbModelParam._m0[22u].z, fma(_541, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _537)) + cbModelParam._m0[22u].w;
        float _1448 = fma(_545, cbModelParam._m0[23u].z, fma(_541, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _537)) + cbModelParam._m0[23u].w;
        float _1451 = fma(_487, cbModelParam._m0[21u].z, fma(_486, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _485));
        float _1454 = fma(_487, cbModelParam._m0[22u].z, fma(_486, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _485));
        float _1457 = fma(_487, cbModelParam._m0[23u].z, fma(_486, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _485));
        float _1617;
        if (_1451 > 0.0)
        {
            _1617 = abs((1.0 - _1440) / _1451);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1440 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1617 = frontier_phi_25_21_ladder;
        }
        float _1885;
        if (_1454 > 0.0)
        {
            _1885 = abs((1.0 - _1444) / _1454);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1444 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1885 = frontier_phi_37_32_ladder;
        }
        float _2090;
        if (_1457 > 0.0)
        {
            _2090 = abs((1.0 - _1448) / _1457);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1448 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2090 = frontier_phi_46_43_ladder;
        }
        float _2092 = isnan(_1885) ? _1617 : (isnan(_1617) ? _1885 : min(_1617, _1885));
        float _2093 = isnan(_2090) ? _2092 : (isnan(_2092) ? _2090 : min(_2092, _2090));
        float _2097 = (_2093 * _1451) + _1440;
        float _2098 = (_2093 * _1454) + _1444;
        float _2099 = (_2093 * _1457) + _1448;
        float _2100 = _2093 * 9.9999997473787516355514526367188e-05;
        float _2101 = (-1.0) - _2100;
        float _2103 = _2100 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2099 > _2103) || ((_2099 < _2101) || ((_2098 > _2103) || ((_2098 < _2101) || ((_2097 < _2101) || (_2097 > _2103))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2336 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2099, cbModelParam._m0[17u].z, fma(_2098, cbModelParam._m0[17u].y, _2097 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2099, cbModelParam._m0[18u].z, fma(_2098, cbModelParam._m0[18u].y, _2097 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2099, cbModelParam._m0[19u].z, fma(_2098, cbModelParam._m0[19u].y, _2097 * cbModelParam._m0[19u].x))), _1384);
            frontier_phi_22_46_ladder = _2336.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2336.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2336.x * cbModelParam._m0[1u].z;
        }
        _1476 = frontier_phi_22_46_ladder_2;
        _1478 = frontier_phi_22_46_ladder_1;
        _1480 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1460 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_485, _486, _487), _1384);
        _1476 = _1460.x * cbModelParam._m0[1u].z;
        _1478 = _1460.y * cbModelParam._m0[1u].z;
        _1480 = _1460.z * cbModelParam._m0[1u].z;
    }
    float _1492 = ((((1.0 - _505) * ((_493 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_505 * _493)) * _477;
    float _1493 = _1492 * ((cbModelParam._m0[1u].w * (_1476 - _1375)) + _1375);
    float _1494 = _1492 * ((cbModelParam._m0[1u].w * (_1478 - _1377)) + _1377);
    float _1495 = _1492 * ((cbModelParam._m0[1u].w * (_1480 - _1379)) + _1379);
    float _1498 = fma(_1495, cbSceneParam._m0[89u].z, fma(_1494, cbSceneParam._m0[89u].y, _1493 * cbSceneParam._m0[89u].x));
    float _1501 = fma(_1495, cbSceneParam._m0[90u].z, fma(_1494, cbSceneParam._m0[90u].y, _1493 * cbSceneParam._m0[90u].x));
    float _1504 = fma(_1495, cbSceneParam._m0[91u].z, fma(_1494, cbSceneParam._m0[91u].y, _1493 * cbSceneParam._m0[91u].x));
    vec4 _1512 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_410, _411));
    float _1514 = _1512.w;
    float _1526 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1514);
    float _1527 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1514);
    float _1528 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1514);
    uvec4 _1532 = floatBitsToUint(cbInstanceData._m0[_451 + 5u]);
    uint _1534 = _1532.x * 14u;
    uint _1535 = _1534 + 13u;
    float _1542 = _477 + (-1.0);
    float _1547 = (cbLight._m0[_1535].x * _1542) + 1.0;
    float _1548 = (cbLight._m0[_1535].y * _1542) + 1.0;
    float _1549 = (cbLight._m0[_1535].z * _1542) + 1.0;
    float _1550 = (cbLight._m0[_1535].w * _1542) + 1.0;
    uint _1551 = _1534 + 5u;
    float _1557 = isnan(1.0) ? _1548 : (isnan(_1548) ? 1.0 : min(_1548, 1.0));
    uint _1561 = _1534 + 4u;
    float _1571 = isnan(1.0) ? _1547 : (isnan(_1547) ? 1.0 : min(_1547, 1.0));
    uint _1575 = _1534 | 1u;
    float _1586 = dot(vec3(cbLight._m0[_1534].xyz), vec3(_322, _323, _324));
    float _1589 = dot(vec3(cbLight._m0[_1575].xyz), vec3(_322, _323, _324));
    float _3710 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
    float _3721 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
    float _1594 = (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * 0.3183098733425140380859375;
    float _1596 = (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * 0.3183098733425140380859375;
    float _1603 = ((cbLight._m0[_1551].x * _1557) * _1596) + (((cbLight._m0[_1561].x * _1526) * _1571) * _1594);
    float _1604 = ((_1557 * cbLight._m0[_1551].y) * _1596) + (((cbLight._m0[_1561].y * _1527) * _1571) * _1594);
    float _1605 = ((_1557 * cbLight._m0[_1551].z) * _1596) + (((cbLight._m0[_1561].z * _1528) * _1571) * _1594);
    uvec4 _1609 = floatBitsToUint(cbLight._m0[_1534 + 12u]);
    bool _1611 = _1609.x == 0u;
    float _1622;
    float _1624;
    float _1626;
    if (_1611)
    {
        _1622 = _1603;
        _1624 = _1604;
        _1626 = _1605;
    }
    else
    {
        uint _1630 = _1534 + 6u;
        float _1646 = (dot(vec3(cbLight._m0[_1534 + 2u].xyz), vec3(_322, _323, _324)) * 0.5) + 0.5;
        float _1647 = _1646 * _1646;
        float _3732 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1649 = isnan(1.0) ? _1549 : (isnan(_1549) ? 1.0 : min(_1549, 1.0));
        _1622 = (((cbLight._m0[_1630].x * 0.3183098733425140380859375) * _1648) * _1649) + _1603;
        _1624 = (((cbLight._m0[_1630].y * 0.3183098733425140380859375) * _1648) * _1649) + _1604;
        _1626 = (((cbLight._m0[_1630].z * 0.3183098733425140380859375) * _1648) * _1649) + _1605;
    }
    bool _1629 = _1609.y == 0u;
    float _1667;
    float _1669;
    float _1671;
    if (_1629)
    {
        _1667 = _1622;
        _1669 = _1624;
        _1671 = _1626;
    }
    else
    {
        uint _1829 = _1534 + 7u;
        float _1845 = (dot(vec3(cbLight._m0[_1534 + 3u].xyz), vec3(_322, _323, _324)) * 0.5) + 0.5;
        float _1846 = _1845 * _1845;
        float _3748 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1847 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1848 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
        _1667 = (((cbLight._m0[_1829].x * 0.3183098733425140380859375) * _1847) * _1848) + _1622;
        _1669 = (((cbLight._m0[_1829].y * 0.3183098733425140380859375) * _1847) * _1848) + _1624;
        _1671 = (((cbLight._m0[_1829].z * 0.3183098733425140380859375) * _1847) * _1848) + _1626;
    }
    uint _1674 = _1534 + 8u;
    float _1687 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1534].w)) * _325) * 0.949999988079071044921875);
    float _1688 = _1687 * _1687;
    float _1689 = cbLight._m0[_1534].x + _402;
    float _1690 = cbLight._m0[_1534].y + _403;
    float _1691 = cbLight._m0[_1534].z + _404;
    float _1695 = inversesqrt(dot(vec3(_1689, _1690, _1691), vec3(_1689, _1690, _1691)));
    float _1696 = _1695 * _1689;
    float _1697 = _1695 * _1690;
    float _1698 = _1695 * _1691;
    float _1699 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_1534].xyz));
    float _3764 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
    float _1702 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _3775 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _1703 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _1704 = dot(vec3(_322, _323, _324), vec3(_1696, _1697, _1698));
    float _3786 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
    float _1707 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _1708 = dot(vec3(cbLight._m0[_1534].xyz), vec3(_1696, _1697, _1698));
    float _3797 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
    float _1712 = _1688 * _1688;
    float _1716 = ((_1707 * _1707) * (_1712 + (-1.0))) + 1.0;
    float _1727 = (exp2(log2(1.0 - (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1728 = 1.0 - _1688;
    float _1739 = (0.5 / (((_1703 * ((_1702 * _1728) + _1688)) + 9.9999999392252902907785028219223e-09) + (((_1703 * _1728) + _1688) * _1702))) * _1702;
    float _3808 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _1741 = (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_1712 / ((_1716 * _1716) * 3.141590118408203125));
    uint _1755 = _1534 + 9u;
    float _1766 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1575].w)) * _325) * 0.949999988079071044921875);
    float _1767 = _1766 * _1766;
    float _1768 = cbLight._m0[_1575].x + _402;
    float _1769 = cbLight._m0[_1575].y + _403;
    float _1770 = cbLight._m0[_1575].z + _404;
    float _1774 = inversesqrt(dot(vec3(_1768, _1769, _1770), vec3(_1768, _1769, _1770)));
    float _1775 = _1774 * _1768;
    float _1776 = _1774 * _1769;
    float _1777 = _1774 * _1770;
    float _1778 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_1575].xyz));
    float _3819 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
    float _1781 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _1782 = dot(vec3(_322, _323, _324), vec3(_1775, _1776, _1777));
    float _3830 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1785 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _1786 = dot(vec3(cbLight._m0[_1575].xyz), vec3(_1775, _1776, _1777));
    float _3841 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1790 = _1767 * _1767;
    float _1794 = ((_1785 * _1785) * (_1790 + (-1.0))) + 1.0;
    float _1803 = (exp2(log2(1.0 - (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1804 = 1.0 - _1767;
    float _1814 = (0.5 / (((_1703 * ((_1781 * _1804) + _1767)) + 9.9999999392252902907785028219223e-09) + (((_1703 * _1804) + _1767) * _1781))) * _1781;
    float _3852 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1816 = (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1790 / ((_1794 * _1794) * 3.141590118408203125));
    float _1826 = (((_1803 * cbLight._m0[_1755].x) * _1816) * _1557) + ((((cbLight._m0[_1674].x * _1526) * _1727) * _1741) * _1571);
    float _1827 = (((_1803 * cbLight._m0[_1755].y) * _1816) * _1557) + ((((cbLight._m0[_1674].y * _1527) * _1727) * _1741) * _1571);
    float _1828 = (((_1803 * cbLight._m0[_1755].z) * _1816) * _1557) + ((((cbLight._m0[_1674].z * _1528) * _1727) * _1741) * _1571);
    float _1890;
    float _1892;
    float _1894;
    if (_1611)
    {
        _1890 = _1826;
        _1892 = _1827;
        _1894 = _1828;
    }
    else
    {
        uint _1896 = _1534 + 2u;
        uint _1900 = _1534 + 10u;
        float _1914 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1896].w)) * _325) * 0.949999988079071044921875);
        float _1915 = _1914 * _1914;
        float _1916 = cbLight._m0[_1896].x + _402;
        float _1917 = cbLight._m0[_1896].y + _403;
        float _1918 = cbLight._m0[_1896].z + _404;
        float _1922 = inversesqrt(dot(vec3(_1916, _1917, _1918), vec3(_1916, _1917, _1918)));
        float _1923 = _1922 * _1916;
        float _1924 = _1922 * _1917;
        float _1925 = _1922 * _1918;
        float _1926 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_1896].xyz));
        float _3863 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1929 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1930 = dot(vec3(_322, _323, _324), vec3(_1923, _1924, _1925));
        float _3874 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        float _1933 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1934 = dot(vec3(cbLight._m0[_1896].xyz), vec3(_1923, _1924, _1925));
        float _3885 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1938 = _1915 * _1915;
        float _1942 = ((_1933 * _1933) * (_1938 + (-1.0))) + 1.0;
        float _1951 = (exp2(log2(1.0 - (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1952 = 1.0 - _1915;
        float _1962 = (0.5 / (((_1703 * ((_1929 * _1952) + _1915)) + 9.9999999392252902907785028219223e-09) + (((_1703 * _1952) + _1915) * _1929))) * _1929;
        float _3896 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        float _1964 = (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1938 / ((_1942 * _1942) * 3.141590118408203125));
        float _1965 = isnan(1.0) ? _1549 : (isnan(_1549) ? 1.0 : min(_1549, 1.0));
        _1890 = (((_1951 * cbLight._m0[_1900].x) * _1964) * _1965) + _1826;
        _1892 = (((_1951 * cbLight._m0[_1900].y) * _1964) * _1965) + _1827;
        _1894 = (((_1951 * cbLight._m0[_1900].z) * _1964) * _1965) + _1828;
    }
    float _2000;
    float _2002;
    float _2004;
    if (_1629)
    {
        _2000 = _1890;
        _2002 = _1892;
        _2004 = _1894;
    }
    else
    {
        uint _2011 = _1534 + 3u;
        uint _2015 = _1534 + 11u;
        float _2029 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2011].w)) * _325) * 0.949999988079071044921875);
        float _2030 = _2029 * _2029;
        float _2031 = cbLight._m0[_2011].x + _402;
        float _2032 = cbLight._m0[_2011].y + _403;
        float _2033 = cbLight._m0[_2011].z + _404;
        float _2037 = inversesqrt(dot(vec3(_2031, _2032, _2033), vec3(_2031, _2032, _2033)));
        float _2038 = _2037 * _2031;
        float _2039 = _2037 * _2032;
        float _2040 = _2037 * _2033;
        float _2041 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_2011].xyz));
        float _3912 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2044 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _2045 = dot(vec3(_322, _323, _324), vec3(_2038, _2039, _2040));
        float _3923 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2048 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _2049 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_2038, _2039, _2040));
        float _3934 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2053 = _2030 * _2030;
        float _2057 = ((_2048 * _2048) * (_2053 + (-1.0))) + 1.0;
        float _2066 = (exp2(log2(1.0 - (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2067 = 1.0 - _2030;
        float _2077 = (0.5 / (((_1703 * ((_2044 * _2067) + _2030)) + 9.9999999392252902907785028219223e-09) + (((_1703 * _2067) + _2030) * _2044))) * _2044;
        float _3945 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2079 = (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_2053 / ((_2057 * _2057) * 3.141590118408203125));
        float _2080 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
        _2000 = (((_2066 * cbLight._m0[_2015].x) * _2079) * _2080) + _1890;
        _2002 = (((_2066 * cbLight._m0[_2015].y) * _2079) * _2080) + _1892;
        _2004 = (((_2066 * cbLight._m0[_2015].z) * _2079) * _2080) + _1894;
    }
    float _2215;
    float _2217;
    float _2219;
    float _2221;
    float _2223;
    float _2225;
    if (_1532.y == 0u)
    {
        float _2155 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2156 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2155;
        float _2157 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2155;
        float _2158 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2155;
        uvec4 _2170 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2171 = _2170.x;
        uint _2182 = uint((float(_2170.y) * floor(float(uint(cbSceneParam._m0[85u].y * _411) / _2171))) + floor(float(uint(cbSceneParam._m0[85u].x * _410) / _2171)));
        float _2192 = (log2(_2158 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2193 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        uint _2196 = uint(isnan(14.0) ? _2193 : (isnan(_2193) ? 14.0 : min(_2193, 14.0)));
        uvec4 _2201 = texelFetch(g_lightClusterGridBuffer, int(((_2196 << 2u) + (_2182 << 6u)) >> 2u));
        uint _2202 = _2201.x;
        uint _2203 = _2170.z;
        float _2341;
        float _2343;
        float _2345;
        float _2347;
        float _2349;
        float _2351;
        if (((((1u << ((_2203 >> 4u) & 15u)) + 4294967295u) & _2202) == 0u) || ((_2203 & 240u) == 0u))
        {
            _2341 = 0.0;
            _2343 = 0.0;
            _2345 = 0.0;
            _2347 = 0.0;
            _2349 = 0.0;
            _2351 = 0.0;
        }
        else
        {
            float _2342;
            float _2344;
            float _2346;
            float _2348;
            float _2350;
            float _2352;
            float _2495 = 0.0;
            float _2496 = 0.0;
            float _2497 = 0.0;
            float _2498 = 0.0;
            float _2499 = 0.0;
            float _2500 = 0.0;
            uint _2501 = 0u;
            uint _2510;
            bool _2511;
            for (;;)
            {
                _2510 = texelFetch(g_lightClassification, int((((_2196 << 5u) + (_2182 << 9u)) + (_2501 << 2u)) >> 2u)).x;
                _2511 = _2510 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2511)
                {
                    frontier_phi_61_pred = _2495;
                    frontier_phi_61_pred_1 = _2500;
                    frontier_phi_61_pred_2 = _2499;
                    frontier_phi_61_pred_3 = _2498;
                    frontier_phi_61_pred_4 = _2497;
                    frontier_phi_61_pred_5 = _2496;
                }
                else
                {
                    float _2619;
                    float _2620;
                    float _2621;
                    float _2622;
                    float _2623;
                    float _2624;
                    uint _2625;
                    _2619 = _2495;
                    _2620 = _2496;
                    _2621 = _2497;
                    _2622 = _2498;
                    _2623 = _2499;
                    _2624 = _2500;
                    _2625 = _2510;
                    float _2551;
                    float _2552;
                    float _2553;
                    float _2554;
                    float _2555;
                    float _2556;
                    for (;;)
                    {
                        uint _2629 = uint(findLSB(_2625)) + (_2501 << 5u);
                        uint _2626 = (_2625 + 4294967295u) & _2625;
                        uint _2631 = _2629 * 48u;
                        vec4 _2645 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2631)).x, texelFetch(g_PointLightRenderingBuffer, int(_2631 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2631 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2631 + 3u)).x));
                        uint _2651 = (_2629 * 48u) + 4u;
                        vec4 _2664 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2651)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 3u)).x));
                        uint _2670 = (_2629 * 48u) + 8u;
                        vec3 _2681 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2670)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 2u)).x));
                        float _2685 = _2645.x - _2156;
                        float _2686 = _2645.y - _2157;
                        float _2687 = _2645.z - _2158;
                        float _2688 = dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687));
                        float _2691 = inversesqrt(_2688);
                        float _2692 = _2691 * _2685;
                        float _2693 = _2691 * _2686;
                        float _2694 = _2691 * _2687;
                        float _2695 = dot(vec3(_432, _435, _438), vec3(_2692, _2693, _2694));
                        float _2700 = 1.0 - (_2688 * _2645.w);
                        float _3971 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
                        float _2701 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
                        float _2702 = sqrt(_2688) * _2664.w;
                        float _2705 = 1.39999997615814208984375 / (_2702 + 1.39999997615814208984375);
                        float _2706 = _2705 * _2705;
                        float _2709 = ((1.0 - _2706) * _2695) + _2706;
                        float _2712 = _2702 * _2702;
                        float _2716 = ((isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0))) * _2701) / ((_2712 * 0.699999988079071044921875) + 1.0);
                        float _2720 = (-0.0) - _2156;
                        float _2721 = (-0.0) - _2157;
                        float _2722 = (-0.0) - _2158;
                        float _2726 = inversesqrt(dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722)));
                        float _2727 = _2726 * _2720;
                        float _2728 = _2726 * _2721;
                        float _2729 = _2726 * _2722;
                        float _2737 = exp2(log2(1.0 / ((_2712 * 3.5) + 5.0)) * 0.25);
                        float _2738 = 1.0 - _493;
                        float _2745 = sqrt(1.0 - ((1.0 - (_2738 * _2738)) * (1.0 - (_2737 * _2737))));
                        float _2746 = _2745 * _2745;
                        float _2747 = _2746 * _2746;
                        float _2748 = _2727 + _2692;
                        float _2749 = _2728 + _2693;
                        float _2750 = _2729 + _2694;
                        float _2754 = inversesqrt(dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750)));
                        float _2758 = dot(vec3(_432, _435, _438), vec3(_2727, _2728, _2729));
                        float _3987 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
                        float _2761 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
                        float _2762 = dot(vec3(_432, _435, _438), vec3(_2754 * _2748, _2754 * _2749, _2754 * _2750));
                        float _3998 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                        float _2765 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
                        float _2769 = ((_2765 * _2765) * (_2747 + (-1.0))) + 1.0;
                        float _2770 = _2705 * _2746;
                        float _2771 = _2770 * _2770;
                        float _2774 = ((1.0 - _2771) * _2695) + _2771;
                        float _4009 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
                        float _2775 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
                        float _2776 = 1.0 - _2746;
                        float _2786 = (0.5 / (((_2775 * ((_2761 * _2776) + _2746)) + 9.9999999392252902907785028219223e-09) + (((_2775 * _2776) + _2746) * _2761))) * _2775;
                        float _4020 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
                        float _2797 = (((_2747 * 3.1415927410125732421875) * (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) / ((_2769 * _2769) * ((_2712 * 2.1991131305694580078125) + 3.141590118408203125))) * _2701;
                        _2554 = (_2716 * _2664.x) + _2622;
                        _2555 = (_2716 * _2664.y) + _2623;
                        _2556 = (_2716 * _2664.z) + _2624;
                        _2551 = (_2797 * _2681.x) + _2619;
                        _2552 = (_2797 * _2681.y) + _2620;
                        _2553 = (_2797 * _2681.z) + _2621;
                        if (_2626 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2619 = _2551;
                            _2620 = _2552;
                            _2621 = _2553;
                            _2622 = _2554;
                            _2623 = _2555;
                            _2624 = _2556;
                            _2625 = _2626;
                        }
                    }
                    frontier_phi_61_pred = _2551;
                    frontier_phi_61_pred_1 = _2556;
                    frontier_phi_61_pred_2 = _2555;
                    frontier_phi_61_pred_3 = _2554;
                    frontier_phi_61_pred_4 = _2553;
                    frontier_phi_61_pred_5 = _2552;
                }
                _2342 = frontier_phi_61_pred;
                _2352 = frontier_phi_61_pred_1;
                _2350 = frontier_phi_61_pred_2;
                _2348 = frontier_phi_61_pred_3;
                _2346 = frontier_phi_61_pred_4;
                _2344 = frontier_phi_61_pred_5;
                uint _2502 = _2501 + 1u;
                if (_2502 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2495 = _2342;
                    _2496 = _2344;
                    _2497 = _2346;
                    _2498 = _2348;
                    _2499 = _2350;
                    _2500 = _2352;
                    _2501 = _2502;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2341 = _2342;
            _2343 = _2344;
            _2345 = _2346;
            _2347 = _2348;
            _2349 = _2350;
            _2351 = _2352;
        }
        uvec4 _2355 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2356 = _2355.z;
        uint _2358 = (_2356 >> 8u) & 15u;
        float _2463;
        float _2465;
        float _2467;
        float _2469;
        float _2471;
        float _2473;
        if (((4294967295u << _2358) & _2202) == 0u)
        {
            _2463 = _2341;
            _2465 = _2343;
            _2467 = _2345;
            _2469 = _2347;
            _2471 = _2349;
            _2473 = _2351;
        }
        else
        {
            float _2488 = inversesqrt(dot(vec3(_2156, _2157, _2158), vec3(_2156, _2157, _2158)));
            float _2489 = _2488 * _2156;
            float _2490 = _2488 * _2157;
            float _2491 = _2488 * _2158;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2358 < ((_2356 >> 12u) & 15u))
            {
                float _2464;
                float _2466;
                float _2468;
                float _2470;
                float _2472;
                float _2474;
                float _2602 = _2341;
                float _2603 = _2343;
                float _2604 = _2345;
                float _2605 = _2347;
                float _2606 = _2349;
                float _2607 = _2351;
                uint _2608 = _2358;
                uint _2617;
                bool _2618;
                for (;;)
                {
                    _2617 = texelFetch(g_lightClassification, int((((_2196 << 5u) + (_2182 << 9u)) + (_2608 << 2u)) >> 2u)).x;
                    _2618 = _2617 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2618)
                    {
                        frontier_phi_67_pred = _2605;
                        frontier_phi_67_pred_1 = _2606;
                        frontier_phi_67_pred_2 = _2607;
                        frontier_phi_67_pred_3 = _2604;
                        frontier_phi_67_pred_4 = _2603;
                        frontier_phi_67_pred_5 = _2602;
                    }
                    else
                    {
                        float _2802;
                        float _2803;
                        float _2804;
                        float _2805;
                        float _2806;
                        float _2807;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _2815 = _2602;
                        float _2816 = _2603;
                        float _2817 = _2604;
                        float _2818 = _2605;
                        float _2819 = _2606;
                        float _2820 = _2607;
                        uint _2821 = _2617;
                        uint _2822;
                        vec4 _2847;
                        float _2848;
                        vec4 _2863;
                        vec3 _2875;
                        vec4 _2891;
                        vec4 _2907;
                        float _2954;
                        bool _2955;
                        for (;;)
                        {
                            uint _2832 = ((_2608 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2821));
                            _2822 = (_2821 + 4294967295u) & _2821;
                            uint _2834 = _2832 * 40u;
                            _2847 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2834)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 3u)).x));
                            _2848 = _2847.w;
                            uint _2850 = (_2832 * 40u) + 4u;
                            _2863 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2850)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 3u)).x));
                            uint _2865 = (_2832 * 40u) + 8u;
                            _2875 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2865)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 2u)).x));
                            uint _2878 = (_2832 * 40u) + 16u;
                            _2891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 3u)).x));
                            uint _2894 = (_2832 * 40u) + 20u;
                            _2907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 3u)).x));
                            uint _2910 = (_2832 * 40u) + 24u;
                            vec4 _2923 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 3u)).x));
                            uint _2929 = (_2832 * 40u) + 28u;
                            vec4 _2942 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 3u)).x));
                            _2954 = fma(_2158, _2942.z, fma(_2157, _2942.y, _2942.x * _2156)) + _2942.w;
                            _2955 = !((fma(_2158, _2923.z, fma(_2157, _2923.y, _2923.x * _2156)) + _2923.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2955)
                            {
                                float _2982 = _2847.x - _2156;
                                float _2983 = _2847.y - _2157;
                                float _2984 = _2847.z - _2158;
                                float _2985 = dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984));
                                float _2988 = inversesqrt(_2985);
                                float _2989 = _2988 * _2982;
                                float _2990 = _2988 * _2983;
                                float _2991 = _2988 * _2984;
                                float _2995 = 1.0 - (_2985 / (_2848 * _2848));
                                float _4031 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _2996 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                                float _3000 = sqrt(_2985) * _2863.w;
                                float _3002 = 1.39999997615814208984375 / (_3000 + 1.39999997615814208984375);
                                float _3003 = _3002 * _3002;
                                float _3006 = ((1.0 - _3003) * dot(vec3(_2989, _2990, _2991), vec3(_432, _435, _438))) + _3003;
                                float _3009 = _3000 * _3000;
                                float _3013 = (fma(_2158, _2891.z, fma(_2157, _2891.y, _2891.x * _2156)) + _2891.w) / _2954;
                                float _3014 = (fma(_2158, _2907.z, fma(_2157, _2907.y, _2907.x * _2156)) + _2907.w) / _2954;
                                float _3018 = 1.0 - dot(vec2(_3013, _3014), vec2(_3013, _3014));
                                float _4047 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                                float _3019 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
                                float _3020 = _3019 * (((isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0))) * _2996) / ((_3009 * 0.699999988079071044921875) + 1.0));
                                float _3032 = exp2(log2(1.0 / ((_3009 * 3.5) + 5.0)) * 0.25);
                                float _3033 = 1.0 - _493;
                                float _3040 = sqrt(1.0 - ((1.0 - (_3033 * _3033)) * (1.0 - (_3032 * _3032))));
                                float _3041 = _3040 * _3040;
                                float _3042 = _3041 * _3041;
                                float _3043 = _2989 - _2489;
                                float _3044 = _2990 - _2490;
                                float _3045 = _2991 - _2491;
                                float _3049 = inversesqrt(dot(vec3(_3043, _3044, _3045), vec3(_3043, _3044, _3045)));
                                float _3053 = dot(vec3(_432, _435, _438), vec3((-0.0) - _2489, (-0.0) - _2490, (-0.0) - _2491));
                                float _4058 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                                float _3056 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
                                float _3057 = dot(vec3(_432, _435, _438), vec3(_3049 * _3043, _3049 * _3044, _3049 * _3045));
                                float _4069 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                                float _3060 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
                                float _3064 = ((_3060 * _3060) * (_3042 + (-1.0))) + 1.0;
                                float _3065 = _3002 * _3041;
                                float _3066 = _3065 * _3065;
                                float _3072 = ((1.0 - _3066) * dot(vec3(_432, _435, _438), vec3(_2989, _2990, _2991))) + _3066;
                                float _4080 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3073 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                                float _3074 = 1.0 - _3041;
                                float _3084 = (0.5 / (((_3073 * ((_3056 * _3074) + _3041)) + 9.9999999392252902907785028219223e-09) + (((_3073 * _3074) + _3041) * _3056))) * _3073;
                                float _4091 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                                float _3094 = (_3019 * _2996) * (((_3042 * 3.1415927410125732421875) * (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)))) / ((_3064 * _3064) * ((_3009 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3094 * _2875.x;
                                frontier_phi_73_pred_1 = _3094 * _2875.y;
                                frontier_phi_73_pred_2 = _3020 * _2863.z;
                                frontier_phi_73_pred_3 = _3020 * _2863.y;
                                frontier_phi_73_pred_4 = _3020 * _2863.x;
                                frontier_phi_73_pred_5 = _3094 * _2875.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3098 = frontier_phi_73_pred;
                            _3099 = frontier_phi_73_pred_1;
                            _3103 = frontier_phi_73_pred_2;
                            _3102 = frontier_phi_73_pred_3;
                            _3101 = frontier_phi_73_pred_4;
                            _3100 = frontier_phi_73_pred_5;
                            _2805 = _3101 + _2818;
                            _2806 = _3102 + _2819;
                            _2807 = _3103 + _2820;
                            _2802 = _3098 + _2815;
                            _2803 = _3099 + _2816;
                            _2804 = _3100 + _2817;
                            if (_2822 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2815 = _2802;
                                _2816 = _2803;
                                _2817 = _2804;
                                _2818 = _2805;
                                _2819 = _2806;
                                _2820 = _2807;
                                _2821 = _2822;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2805;
                        frontier_phi_67_pred_1 = _2806;
                        frontier_phi_67_pred_2 = _2807;
                        frontier_phi_67_pred_3 = _2804;
                        frontier_phi_67_pred_4 = _2803;
                        frontier_phi_67_pred_5 = _2802;
                    }
                    _2470 = frontier_phi_67_pred;
                    _2472 = frontier_phi_67_pred_1;
                    _2474 = frontier_phi_67_pred_2;
                    _2468 = frontier_phi_67_pred_3;
                    _2466 = frontier_phi_67_pred_4;
                    _2464 = frontier_phi_67_pred_5;
                    uint _2609 = _2608 + 1u;
                    if (_2609 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2602 = _2464;
                        _2603 = _2466;
                        _2604 = _2468;
                        _2605 = _2470;
                        _2606 = _2472;
                        _2607 = _2474;
                        _2608 = _2609;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2472;
                frontier_phi_55_56_ladder_1 = _2474;
                frontier_phi_55_56_ladder_2 = _2470;
                frontier_phi_55_56_ladder_3 = _2468;
                frontier_phi_55_56_ladder_4 = _2466;
                frontier_phi_55_56_ladder_5 = _2464;
            }
            else
            {
                frontier_phi_55_56_ladder = _2349;
                frontier_phi_55_56_ladder_1 = _2351;
                frontier_phi_55_56_ladder_2 = _2347;
                frontier_phi_55_56_ladder_3 = _2345;
                frontier_phi_55_56_ladder_4 = _2343;
                frontier_phi_55_56_ladder_5 = _2341;
            }
            _2463 = frontier_phi_55_56_ladder_5;
            _2465 = frontier_phi_55_56_ladder_4;
            _2467 = frontier_phi_55_56_ladder_3;
            _2469 = frontier_phi_55_56_ladder_2;
            _2471 = frontier_phi_55_56_ladder;
            _2473 = frontier_phi_55_56_ladder_1;
        }
        float _2478 = isnan(1.0) ? _477 : (isnan(_477) ? 1.0 : min(_477, 1.0));
        _2215 = (_2478 * _2469) + _1667;
        _2217 = (_2478 * _2471) + _1669;
        _2219 = (_2478 * _2473) + _1671;
        _2221 = ((_2463 * 0.039999999105930328369140625) * _2478) + _2000;
        _2223 = ((_2465 * 0.039999999105930328369140625) * _2478) + _2002;
        _2225 = ((_2467 * 0.039999999105930328369140625) * _2478) + _2004;
    }
    else
    {
        _2215 = _1667;
        _2217 = _1669;
        _2219 = _1671;
        _2221 = _2000;
        _2223 = _2002;
        _2225 = _2004;
    }
    uint _2231 = _453 + uint(cbMatDynParam._m0[0u].w);
    float _2240 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _285.x) * _308) * cbInstanceData._m0[_2231].x;
    float _2244 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _285.y) * _308) * cbInstanceData._m0[_2231].y;
    float _2248 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _285.z) * _308) * cbInstanceData._m0[_2231].z;
    float _4107 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _4118 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _4129 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _2265 = (((isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_2215 + ((isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))) * _477))) + ((_2221 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _1283)) * cbPerFrame._m0[3u].x)) + _2240;
    float _2267 = (_2244 + ((_2223 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _1283)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_2217 + ((isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))) * _477)));
    float _2269 = (_2248 + ((_2225 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _1283)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_2219 + ((isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0))) * _477)));
    float _4155 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2282 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    uint _2283 = _451 + 6u;
    float _2291 = _410 / cbSceneParam._m0[86u].x;
    float _2292 = _411 / cbSceneParam._m0[86u].y;
    vec4 _2306 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2291, _2292, (log2((isnan(cbSceneParam._m0[77u].w) ? _344 : (isnan(_344) ? cbSceneParam._m0[77u].w : min(_344, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2308 = _2306.x;
    float _2309 = _2306.y;
    float _2310 = _2306.z;
    float _2311 = _2306.w;
    float _2404;
    float _2406;
    float _2408;
    float _2410;
    if (_344 > cbSceneParam._m0[78u].w)
    {
        float _2366 = isnan(_344) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _344 : min(cbSceneParam._m0[80u].w, _344));
        float _2367 = _2366 / _344;
        float _2378 = _2367 * _395;
        float _2379 = _396 * _2367;
        float _2380 = (-0.0) - _2379;
        float _2382 = _2367 * _397;
        float _2384 = (cbSceneParam._m0[77u].w * _2380) / _2366;
        float _2385 = _2384 + cbSceneParam._m0[79u].w;
        float _2386 = cbSceneParam._m0[79u].w - _2379;
        float _2392 = sqrt(((_2378 * _2378) + (_2379 * _2379)) + (_2382 * _2382));
        float _2395 = (1.0 - (cbSceneParam._m0[77u].w / _2366)) * _2392;
        float _2400 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2402 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2564;
        if (abs((_2380 - _2384) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2564 = ((((_2385 > 0.0) ? exp2(_2400 * _2385) : (2.0 - exp2(_2402 * _2385))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2395;
        }
        else
        {
            float _2524 = 1.0 / cbSceneParam._m0[80u].x;
            float _2525 = isnan(_2386) ? _2385 : (isnan(_2385) ? _2386 : max(_2385, _2386));
            float _2526 = isnan(_2386) ? _2385 : (isnan(_2385) ? _2386 : min(_2385, _2386));
            float _2535 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : min(_2525, 0.0));
            float _2536 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : min(_2526, 0.0));
            _2564 = ((abs(_2392 / _2380) * cbSceneParam._m0[80u].y) * ((((_2535 - _2536) * 2.0) - ((exp2(_2400 * (isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0)))) - exp2(_2400 * (isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0))))) * _2524)) - ((exp2(_2402 * _2535) - exp2(_2402 * _2536)) * _2524))) + (_2395 * cbSceneParam._m0[80u].z);
        }
        vec4 _2566 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2291, _2292, 1.0), 0.0);
        float _2575 = exp2((_2564 * (-1.44269502162933349609375)) * (1.0 - _2566.w));
        float _2576 = log2(_2575);
        float _2592 = log2(_2311);
        _2404 = (exp2(_2592 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2576 * cbSceneParam._m0[78u].x)) * _2566.x) / cbSceneParam._m0[78u].x)) + _2308;
        _2406 = (exp2(_2592 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2576 * cbSceneParam._m0[78u].y)) * _2566.y) / cbSceneParam._m0[78u].y)) + _2309;
        _2408 = (exp2(_2592 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2576 * cbSceneParam._m0[78u].z)) * _2566.z) / cbSceneParam._m0[78u].z)) + _2310;
        _2410 = _2575 * _2311;
    }
    else
    {
        _2404 = _2308;
        _2406 = _2309;
        _2408 = _2310;
        _2410 = _2311;
    }
    float _2422 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2423 = _2422 == 3.0;
    float _2424 = log2(_2410);
    float _2428 = exp2(_2424 * cbSceneParam._m0[78u].x);
    float _2429 = exp2(_2424 * cbSceneParam._m0[78u].y);
    float _2430 = exp2(_2424 * cbSceneParam._m0[78u].z);
    float _2431 = _2428 * (isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0)));
    float _2432 = _2429 * (isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0)));
    float _2433 = _2430 * (isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0)));
    float _2442 = (_2422 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2442 * (_2423 ? _2431 : (_2431 + (cbSceneParam._m0[72u].w * _2404)));
    SV_Target.y = _2442 * (_2423 ? _2432 : (_2432 + (cbSceneParam._m0[72u].w * _2406)));
    SV_Target.z = _2442 * (_2423 ? _2433 : (_2433 + (cbSceneParam._m0[72u].w * _2408)));
    SV_Target.w = cbInstanceData._m0[_2283].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2240) * _2282) * _2428) * _2442;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2244) * _2282) * _2429) * _2442;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2248) * _2282) * _2430) * _2442;
    SV_Target_1.w = cbInstanceData._m0[_2283].w;
}


