#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _939;
float _3398;
float _3399;
float _3400;
float _3401;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _232 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _238 = _232.x * cbMtdParam._m0[9u].x;
    float _239 = _232.y * cbMtdParam._m0[9u].y;
    float _240 = _232.z * cbMtdParam._m0[9u].z;
    vec4 _252 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _254 = _252.x;
    vec4 _266 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _270 = _266.z;
    float _274 = (_266.x * 2.0) + (-1.0);
    float _276 = (_266.y * 2.0) + (-1.0);
    float _277 = dot(vec2(_274, _276), vec2(_274, _276));
    float _3410 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _283 = sqrt(1.0 - (isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))));
    vec4 _320 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _331 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3421 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _332 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
    float _340 = (((_332 * _332) * (3.0 - (_332 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _343 = fma(_283, _203 * NORMAL.x, fma(_276, _210 * TANGENT.x, (_196 * _189) * _274));
    float _346 = fma(_283, _203 * NORMAL.y, fma(_276, _210 * TANGENT.y, (_196 * _190) * _274));
    float _349 = fma(_283, _203 * NORMAL.z, fma(_276, _210 * TANGENT.z, (_196 * _191) * _274));
    float _353 = inversesqrt(dot(vec3(_343, _346, _349), vec3(_343, _346, _349)));
    float _354 = _353 * _343;
    float _355 = _353 * _346;
    float _356 = _353 * _349;
    float _3432 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _357 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
    float _3443 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3454 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3465 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3476 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _361 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    float _377 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _418 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _428 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _418);
    float _429 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _418);
    float _430 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _418);
    float _434 = inversesqrt(dot(vec3(_428, _429, _430), vec3(_428, _429, _430)));
    float _435 = _428 * _434;
    float _436 = _429 * _434;
    float _437 = _430 * _434;
    vec4 _442 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _444 = _442.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _618 = sqrt(((_428 * _428) + (_429 * _429)) + (_430 * _430));
        float _624 = (cbMatDynParam._m0[5u].x * _618) + cbMatDynParam._m0[5u].y;
        float _3487 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
        float _625 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _629 = (cbMatDynParam._m0[5u].z * _618) + cbMatDynParam._m0[5u].w;
        float _3498 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0))) - _625)) + _625) < ((_444 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _456 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _457 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _477 = fma(_356, cbSceneParam._m0[5u].z, fma(_355, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _354));
    float _480 = fma(_356, cbSceneParam._m0[6u].z, fma(_355, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _354));
    float _483 = fma(_356, cbSceneParam._m0[7u].z, fma(_355, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _354));
    uint _496 = uint(roundEven(NORMAL.w)) * 13u;
    uint _497 = _496 + 9u;
    uint _498 = _497 + uint(cbMatDynParam._m0[0u].w);
    float _504 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0)))) * cbInstanceData._m0[_498].x;
    float _505 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0)))) * cbInstanceData._m0[_498].y;
    float _506 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0)))) * cbInstanceData._m0[_498].z;
    float _3509 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _507 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _3520 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _508 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
    float _3531 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _509 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    float _510 = 1.0 - _361;
    float _511 = _507 * _510;
    float _512 = _508 * _510;
    float _513 = _509 * _510;
    float _518 = (_507 + (-0.039999999105930328369140625)) * _361;
    float _519 = (_508 + (-0.039999999105930328369140625)) * _361;
    float _520 = (_509 + (-0.039999999105930328369140625)) * _361;
    float _521 = _518 + 0.039999999105930328369140625;
    float _523 = _519 + 0.039999999105930328369140625;
    float _524 = _520 + 0.039999999105930328369140625;
    vec4 _533 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _456, cbSceneParam._m0[86u].y * _457));
    float _536 = _533.x * TEXCOORD.z;
    float _537 = dot(vec3(_354, _355, _356), vec3(_435, _436, _437));
    float _540 = _537 * 2.0;
    float _544 = (_540 * _354) - _435;
    float _545 = (_540 * _355) - _436;
    float _546 = (_540 * _356) - _437;
    float _550 = abs(dot(vec3(_435, _436, _437), vec3(_354, _355, _356)));
    float _3542 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _552 = sqrt(_357);
    float _564 = exp2((_552 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_552 * 3.0));
    float _570 = (1.0 - _564) * ((_552 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _571 = _564 * _552;
    float _599 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _603 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _607 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _938;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _663 = fma(_607, cbModelParam._m0[26u].z, fma(_603, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _599));
        float _667 = fma(_607, cbModelParam._m0[27u].z, fma(_603, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _599));
        float _671 = fma(_607, cbModelParam._m0[28u].z, fma(_603, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _599));
        float _696 = _599 + _354;
        float _697 = _603 + _355;
        float _698 = _607 + _356;
        float _708 = fma(_698, cbModelParam._m0[26u].z, fma(_697, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _696)) - _663;
        float _709 = fma(_698, cbModelParam._m0[27u].z, fma(_697, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _696)) - _667;
        float _710 = fma(_698, cbModelParam._m0[28u].z, fma(_697, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _696)) - _671;
        float _714 = inversesqrt(dot(vec3(_708, _709, _710), vec3(_708, _709, _710)));
        float _727 = ((_714 * _708) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_663 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _728 = ((_714 * _709) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_667 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _729 = ((_714 * _710) / cbModelParam._m0[34u].z) + ((((((_671 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _732 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_727, _728, _729), 0.0);
        vec4 _739 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_727, _728, _729), 0.0);
        vec4 _746 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_727, _728, _729), 0.0);
        vec4 _753 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_727, _728, _729), 0.0);
        float _766 = exp2((_732.w + (-0.5)) * 20.0) * 2.0;
        float _767 = _766 * (_732.x + (-0.5));
        float _768 = _766 * (_732.y + (-0.5));
        float _769 = _766 * (_732.z + (-0.5));
        float _776 = exp2((_739.w + (-0.5)) * 20.0) * 2.0;
        float _777 = _776 * (_739.x + (-0.5));
        float _778 = _776 * (_739.y + (-0.5));
        float _779 = _776 * (_739.z + (-0.5));
        float _786 = exp2((_746.w + (-0.5)) * 20.0) * 2.0;
        float _787 = _786 * (_746.x + (-0.5));
        float _788 = _786 * (_746.y + (-0.5));
        float _789 = _786 * (_746.z + (-0.5));
        float _796 = exp2((_753.w + (-0.5)) * 20.0) * 2.0;
        float _797 = _796 * (_753.x + (-0.5));
        float _798 = _796 * (_753.y + (-0.5));
        float _799 = _796 * (_753.z + (-0.5));
        float _800 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _801 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _802 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _803 = _767 * 0.5;
        float _804 = _777 * 0.5;
        float _805 = _787 * 0.5;
        float _806 = dot(vec3(_803, _804, _805), vec3(_803, _804, _805));
        float _811 = (_806 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_806);
        float _820 = (dot(vec3(_354, _355, _356), vec3(_811 * _803, _811 * _804, _811 * _805)) + 1.0) * 0.5;
        float _3568 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _830 = sqrt(((_804 * _804) + (_803 * _803)) + (_805 * _805)) / (_800 + 9.9999997473787516355514526367188e-06);
        float _3579 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _832 = _831 * 2.0;
        float _836 = (1.0 - _831) / (_831 + 1.0);
        float _3590 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _846 = ((((1.0 - _837) * (_832 + 2.0)) * exp2(log2(isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * (_832 + 1.0))) + _837) * _800;
        float _847 = _768 * 0.5;
        float _848 = _778 * 0.5;
        float _849 = _788 * 0.5;
        float _850 = dot(vec3(_847, _848, _849), vec3(_847, _848, _849));
        float _855 = (_850 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_850);
        float _863 = (dot(vec3(_354, _355, _356), vec3(_855 * _847, _855 * _848, _855 * _849)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _872 = sqrt(((_848 * _848) + (_847 * _847)) + (_849 * _849)) / (_801 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _874 = _873 * 2.0;
        float _878 = (1.0 - _873) / (_873 + 1.0);
        float _3623 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _888 = ((((1.0 - _879) * (_874 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_874 + 1.0))) + _879) * _801;
        float _889 = _769 * 0.5;
        float _890 = _779 * 0.5;
        float _891 = _789 * 0.5;
        float _892 = dot(vec3(_889, _890, _891), vec3(_889, _890, _891));
        float _897 = (_892 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_892);
        float _905 = (dot(vec3(_354, _355, _356), vec3(_897 * _889, _897 * _890, _897 * _891)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _914 = sqrt(((_890 * _890) + (_889 * _889)) + (_891 * _891)) / (_802 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _916 = _915 * 2.0;
        float _920 = (1.0 - _915) / (_915 + 1.0);
        float _3656 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _930 = ((((1.0 - _921) * (_916 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_916 + 1.0))) + _921) * _802;
        _938 = _769;
        _940 = _768;
        _941 = _767;
        _942 = _779;
        _943 = _778;
        _944 = _777;
        _945 = _789;
        _946 = _788;
        _947 = _787;
        _948 = _802;
        _949 = _801;
        _950 = _800;
        _951 = cbModelParam._m0[36u].z * (isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0)));
        _952 = cbModelParam._m0[36u].z * (isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0)));
        _953 = cbModelParam._m0[36u].z * (isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0)));
    }
    else
    {
        _938 = _939;
        _940 = _939;
        _941 = _939;
        _942 = _939;
        _943 = _939;
        _944 = _939;
        _945 = _939;
        _946 = _939;
        _947 = _939;
        _948 = _939;
        _949 = _939;
        _950 = _939;
        _951 = 0.0;
        _952 = 0.0;
        _953 = 0.0;
    }
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _982 = fma(_607, cbModelParam._m0[30u].z, fma(_603, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _599));
        float _986 = fma(_607, cbModelParam._m0[31u].z, fma(_603, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _599));
        float _990 = fma(_607, cbModelParam._m0[32u].z, fma(_603, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _599));
        float _1013 = _599 + _354;
        float _1014 = _603 + _355;
        float _1015 = _607 + _356;
        float _1025 = fma(_1015, cbModelParam._m0[30u].z, fma(_1014, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1013)) - _982;
        float _1026 = fma(_1015, cbModelParam._m0[31u].z, fma(_1014, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1013)) - _986;
        float _1027 = fma(_1015, cbModelParam._m0[32u].z, fma(_1014, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1013)) - _990;
        float _1031 = inversesqrt(dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027)));
        float _1044 = ((_1031 * _1025) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_982 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1045 = ((_1031 * _1026) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_986 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1046 = ((_1031 * _1027) / cbModelParam._m0[35u].z) + ((((((_990 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        float _1081 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1048.x + (-0.5));
        float _1083 = _1081 * (_1048.y + (-0.5));
        float _1084 = _1081 * (_1048.z + (-0.5));
        float _1091 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1055.x + (-0.5));
        float _1093 = _1091 * (_1055.y + (-0.5));
        float _1094 = _1091 * (_1055.z + (-0.5));
        float _1101 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1062.x + (-0.5));
        float _1103 = _1101 * (_1062.y + (-0.5));
        float _1104 = _1101 * (_1062.z + (-0.5));
        float _1111 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1069.x + (-0.5));
        float _1113 = _1111 * (_1069.y + (-0.5));
        float _1114 = _1111 * (_1069.z + (-0.5));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = _1082 * 0.5;
        float _1119 = _1092 * 0.5;
        float _1120 = _1102 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_354, _355, _356), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3719 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1145 + 1.0))) + _1150) * _1115;
        float _1160 = _1083 * 0.5;
        float _1161 = _1093 * 0.5;
        float _1162 = _1103 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_354, _355, _356), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1116 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3752 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1187 + 1.0))) + _1192) * _1116;
        float _1202 = _1084 * 0.5;
        float _1203 = _1094 * 0.5;
        float _1204 = _1104 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_354, _355, _356), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _3785 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1229 + 1.0))) + _1234) * _1117;
        _1251 = _1084;
        _1252 = _1083;
        _1253 = _1082;
        _1254 = _1094;
        _1255 = _1093;
        _1256 = _1092;
        _1257 = _1104;
        _1258 = _1103;
        _1259 = _1102;
        _1260 = _1117;
        _1261 = _1116;
        _1262 = _1115;
        _1263 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
        _1264 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
        _1265 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
    }
    else
    {
        _1251 = _939;
        _1252 = _939;
        _1253 = _939;
        _1254 = _939;
        _1255 = _939;
        _1256 = _939;
        _1257 = _939;
        _1258 = _939;
        _1259 = _939;
        _1260 = _939;
        _1261 = _939;
        _1262 = _939;
        _1263 = 0.0;
        _1264 = 0.0;
        _1265 = 0.0;
    }
    float _1275 = (cbModelParam._m0[1u].x * (_1263 - _951)) + _951;
    float _1276 = (cbModelParam._m0[1u].x * (_1264 - _952)) + _952;
    float _1277 = (cbModelParam._m0[1u].x * (_1265 - _953)) + _953;
    float _1298 = fma(_1277, cbSceneParam._m0[89u].z, fma(_1276, cbSceneParam._m0[89u].y, _1275 * cbSceneParam._m0[89u].x));
    float _1301 = fma(_1277, cbSceneParam._m0[90u].z, fma(_1276, cbSceneParam._m0[90u].y, _1275 * cbSceneParam._m0[90u].x));
    float _1304 = fma(_1277, cbSceneParam._m0[91u].z, fma(_1276, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1275));
    float _1319 = _544 * 0.5;
    float _1320 = _545 * 0.5;
    float _1321 = _546 * 0.5;
    float _1322 = dot(vec4(_1319, _1320, _1321, 1.0), vec4(_1253, _1256, _1259, _1262));
    float _1325 = dot(vec4(_1319, _1320, _1321, 1.0), vec4(_1252, _1255, _1258, _1261));
    float _1328 = dot(vec4(_1319, _1320, _1321, 1.0), vec4(_1251, _1254, _1257, _1260));
    float _1362;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1335 = dot(vec4(_1319, _1320, _1321, 1.0), vec4(_938, _942, _945, _948));
        float _1339 = dot(vec4(_1319, _1320, _1321, 1.0), vec4(_940, _943, _946, _949));
        float _1343 = dot(vec4(_1319, _1320, _1321, 1.0), vec4(_941, _944, _947, _950));
        float _1350 = dot(vec4(cbModelParam._m0[39u]), vec4(_1319, _1320, _1321, 1.0));
        _1362 = dot(vec3(isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)), isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)), isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1350) ? 0.0 : (isnan(0.0) ? _1350 : max(0.0, _1350))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1362 = 1.0;
    }
    float _1373;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1364 = dot(vec4(cbModelParam._m0[40u]), vec4(_1319, _1320, _1321, 1.0));
        _1373 = dot(vec3(isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)), isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)), isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1364) ? 0.0 : (isnan(0.0) ? _1364 : max(0.0, _1364))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1373 = 1.0;
    }
    float _1377 = (_1373 * cbModelParam._m0[1u].x) + (_1362 * (1.0 - cbModelParam._m0[1u].x));
    float _1387 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _357);
    float _1388 = isnan(_1387) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1387 : min(cbModelParam._m0[25u].z, _1387));
    float _1469;
    float _1471;
    float _1473;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1436 = fma(_607, cbModelParam._m0[13u].z, fma(_603, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _599)) + cbModelParam._m0[13u].w;
        float _1440 = fma(_607, cbModelParam._m0[14u].z, fma(_603, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _599)) + cbModelParam._m0[14u].w;
        float _1444 = fma(_607, cbModelParam._m0[15u].z, fma(_603, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _599)) + cbModelParam._m0[15u].w;
        float _1447 = fma(_546, cbModelParam._m0[13u].z, fma(_545, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _544));
        float _1450 = fma(_546, cbModelParam._m0[14u].z, fma(_545, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _544));
        float _1453 = fma(_546, cbModelParam._m0[15u].z, fma(_545, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _544));
        float _1481;
        if (_1447 > 0.0)
        {
            _1481 = abs((1.0 - _1436) / _1447);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1447 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1436 + 1.0) / _1447);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1481 = frontier_phi_17_15_ladder;
        }
        float _1708;
        if (_1450 > 0.0)
        {
            _1708 = abs((1.0 - _1440) / _1450);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1450 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1440 + 1.0) / _1450);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1708 = frontier_phi_26_22_ladder;
        }
        float _1965;
        if (_1453 > 0.0)
        {
            _1965 = abs((1.0 - _1444) / _1453);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1444 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1965 = frontier_phi_38_33_ladder;
        }
        float _1967 = isnan(_1708) ? _1481 : (isnan(_1481) ? _1708 : min(_1481, _1708));
        float _1968 = isnan(_1965) ? _1967 : (isnan(_1967) ? _1965 : min(_1967, _1965));
        float _1972 = (_1968 * _1447) + _1436;
        float _1973 = (_1968 * _1450) + _1440;
        float _1974 = (_1968 * _1453) + _1444;
        float _1975 = _1968 * 9.9999997473787516355514526367188e-05;
        float _1977 = (-1.0) - _1975;
        float _1979 = _1975 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1974 > _1979) || ((_1974 < _1977) || ((_1973 > _1979) || ((_1973 < _1977) || ((_1972 < _1977) || (_1972 > _1979))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2102 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1974, cbModelParam._m0[9u].z, fma(_1973, cbModelParam._m0[9u].y, _1972 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1974, cbModelParam._m0[10u].z, fma(_1973, cbModelParam._m0[10u].y, _1972 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1974, cbModelParam._m0[11u].z, fma(_1973, cbModelParam._m0[11u].y, _1972 * cbModelParam._m0[11u].x))), _1388);
            frontier_phi_16_38_ladder = _2102.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2102.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2102.x * cbModelParam._m0[1u].y;
        }
        _1469 = frontier_phi_16_38_ladder_2;
        _1471 = frontier_phi_16_38_ladder_1;
        _1473 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1457 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_544, _545, _546), _1388);
        _1469 = _1457.x * cbModelParam._m0[1u].y;
        _1471 = _1457.y * cbModelParam._m0[1u].y;
        _1473 = _1457.z * cbModelParam._m0[1u].y;
    }
    float _1477 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _357);
    float _1478 = isnan(_1477) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1477 : min(cbModelParam._m0[25u].w, _1477));
    float _1570;
    float _1572;
    float _1574;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1534 = fma(_607, cbModelParam._m0[21u].z, fma(_603, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _599)) + cbModelParam._m0[21u].w;
        float _1538 = fma(_607, cbModelParam._m0[22u].z, fma(_603, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _599)) + cbModelParam._m0[22u].w;
        float _1542 = fma(_607, cbModelParam._m0[23u].z, fma(_603, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _599)) + cbModelParam._m0[23u].w;
        float _1545 = fma(_546, cbModelParam._m0[21u].z, fma(_545, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _544));
        float _1548 = fma(_546, cbModelParam._m0[22u].z, fma(_545, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _544));
        float _1551 = fma(_546, cbModelParam._m0[23u].z, fma(_545, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _544));
        float _1713;
        if (_1545 > 0.0)
        {
            _1713 = abs((1.0 - _1534) / _1545);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1534 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1713 = frontier_phi_28_24_ladder;
        }
        float _1992;
        if (_1548 > 0.0)
        {
            _1992 = abs((1.0 - _1538) / _1548);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1538 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1992 = frontier_phi_40_35_ladder;
        }
        float _2205;
        if (_1551 > 0.0)
        {
            _2205 = abs((1.0 - _1542) / _1551);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1542 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2205 = frontier_phi_49_46_ladder;
        }
        float _2207 = isnan(_1992) ? _1713 : (isnan(_1713) ? _1992 : min(_1713, _1992));
        float _2208 = isnan(_2205) ? _2207 : (isnan(_2207) ? _2205 : min(_2207, _2205));
        float _2212 = (_2208 * _1545) + _1534;
        float _2213 = (_2208 * _1548) + _1538;
        float _2214 = (_2208 * _1551) + _1542;
        float _2215 = _2208 * 9.9999997473787516355514526367188e-05;
        float _2216 = (-1.0) - _2215;
        float _2218 = _2215 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2214 > _2218) || ((_2214 < _2216) || ((_2213 > _2218) || ((_2213 < _2216) || ((_2212 < _2216) || (_2212 > _2218))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2451 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2214, cbModelParam._m0[17u].z, fma(_2213, cbModelParam._m0[17u].y, _2212 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2214, cbModelParam._m0[18u].z, fma(_2213, cbModelParam._m0[18u].y, _2212 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2214, cbModelParam._m0[19u].z, fma(_2213, cbModelParam._m0[19u].y, _2212 * cbModelParam._m0[19u].x))), _1478);
            frontier_phi_25_49_ladder = _2451.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2451.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2451.x * cbModelParam._m0[1u].z;
        }
        _1570 = frontier_phi_25_49_ladder_2;
        _1572 = frontier_phi_25_49_ladder_1;
        _1574 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1554 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_544, _545, _546), _1478);
        _1570 = _1554.x * cbModelParam._m0[1u].z;
        _1572 = _1554.y * cbModelParam._m0[1u].z;
        _1574 = _1554.z * cbModelParam._m0[1u].z;
    }
    float _1587 = (((_570 * _521) + _571) * _536) * ((cbModelParam._m0[1u].w * (_1570 - _1469)) + _1469);
    float _1589 = (((_570 * _523) + _571) * _536) * ((cbModelParam._m0[1u].w * (_1572 - _1471)) + _1471);
    float _1591 = (((_570 * _524) + _571) * _536) * ((cbModelParam._m0[1u].w * (_1574 - _1473)) + _1473);
    float _1594 = fma(_1591, cbSceneParam._m0[89u].z, fma(_1589, cbSceneParam._m0[89u].y, _1587 * cbSceneParam._m0[89u].x));
    float _1597 = fma(_1591, cbSceneParam._m0[90u].z, fma(_1589, cbSceneParam._m0[90u].y, _1587 * cbSceneParam._m0[90u].x));
    float _1600 = fma(_1591, cbSceneParam._m0[91u].z, fma(_1589, cbSceneParam._m0[91u].y, _1587 * cbSceneParam._m0[91u].x));
    vec4 _1608 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_456, _457));
    float _1610 = _1608.w;
    float _1622 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1610);
    float _1623 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1610);
    float _1624 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1610);
    uvec4 _1628 = floatBitsToUint(cbInstanceData._m0[_496 + 5u]);
    uint _1630 = _1628.x * 14u;
    uint _1631 = _1630 + 13u;
    float _1638 = _536 + (-1.0);
    float _1643 = (cbLight._m0[_1631].x * _1638) + 1.0;
    float _1644 = (cbLight._m0[_1631].y * _1638) + 1.0;
    float _1645 = (cbLight._m0[_1631].z * _1638) + 1.0;
    float _1646 = (cbLight._m0[_1631].w * _1638) + 1.0;
    uint _1647 = _1630 + 5u;
    float _1653 = isnan(1.0) ? _1644 : (isnan(_1644) ? 1.0 : min(_1644, 1.0));
    uint _1657 = _1630 + 4u;
    float _1667 = isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0));
    uint _1671 = _1630 | 1u;
    float _1682 = dot(vec3(cbLight._m0[_1630].xyz), vec3(_354, _355, _356));
    float _1685 = dot(vec3(cbLight._m0[_1671].xyz), vec3(_354, _355, _356));
    float _3921 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
    float _3932 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
    float _1690 = (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * 0.3183098733425140380859375;
    float _1692 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * 0.3183098733425140380859375;
    float _1699 = ((cbLight._m0[_1647].x * _1653) * _1692) + (((cbLight._m0[_1657].x * _1622) * _1667) * _1690);
    float _1700 = ((_1653 * cbLight._m0[_1647].y) * _1692) + (((cbLight._m0[_1657].y * _1623) * _1667) * _1690);
    float _1701 = ((_1653 * cbLight._m0[_1647].z) * _1692) + (((cbLight._m0[_1657].z * _1624) * _1667) * _1690);
    uvec4 _1705 = floatBitsToUint(cbLight._m0[_1630 + 12u]);
    bool _1707 = _1705.x == 0u;
    float _1718;
    float _1720;
    float _1722;
    if (_1707)
    {
        _1718 = _1699;
        _1720 = _1700;
        _1722 = _1701;
    }
    else
    {
        uint _1726 = _1630 + 6u;
        float _1742 = (dot(vec3(cbLight._m0[_1630 + 2u].xyz), vec3(_354, _355, _356)) * 0.5) + 0.5;
        float _1743 = _1742 * _1742;
        float _3943 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1745 = isnan(1.0) ? _1645 : (isnan(_1645) ? 1.0 : min(_1645, 1.0));
        _1718 = (((cbLight._m0[_1726].x * 0.3183098733425140380859375) * _1744) * _1745) + _1699;
        _1720 = (((cbLight._m0[_1726].y * 0.3183098733425140380859375) * _1744) * _1745) + _1700;
        _1722 = (((cbLight._m0[_1726].z * 0.3183098733425140380859375) * _1744) * _1745) + _1701;
    }
    bool _1725 = _1705.y == 0u;
    float _1763;
    float _1765;
    float _1767;
    if (_1725)
    {
        _1763 = _1718;
        _1765 = _1720;
        _1767 = _1722;
    }
    else
    {
        uint _1936 = _1630 + 7u;
        float _1952 = (dot(vec3(cbLight._m0[_1630 + 3u].xyz), vec3(_354, _355, _356)) * 0.5) + 0.5;
        float _1953 = _1952 * _1952;
        float _3959 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
        float _1954 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1955 = isnan(1.0) ? _1646 : (isnan(_1646) ? 1.0 : min(_1646, 1.0));
        _1763 = (((cbLight._m0[_1936].x * 0.3183098733425140380859375) * _1954) * _1955) + _1718;
        _1765 = (((cbLight._m0[_1936].y * 0.3183098733425140380859375) * _1954) * _1955) + _1720;
        _1767 = (((cbLight._m0[_1936].z * 0.3183098733425140380859375) * _1954) * _1955) + _1722;
    }
    uint _1770 = _1630 + 8u;
    float _1783 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1630].w)) * _357) * 0.949999988079071044921875);
    float _1784 = _1783 * _1783;
    float _1785 = cbLight._m0[_1630].x + _435;
    float _1786 = cbLight._m0[_1630].y + _436;
    float _1787 = cbLight._m0[_1630].z + _437;
    float _1791 = inversesqrt(dot(vec3(_1785, _1786, _1787), vec3(_1785, _1786, _1787)));
    float _1792 = _1791 * _1785;
    float _1793 = _1791 * _1786;
    float _1794 = _1791 * _1787;
    float _1795 = dot(vec3(_354, _355, _356), vec3(cbLight._m0[_1630].xyz));
    float _3975 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1798 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _3986 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _1799 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _1800 = dot(vec3(_354, _355, _356), vec3(_1792, _1793, _1794));
    float _3997 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1803 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _1804 = dot(vec3(cbLight._m0[_1630].xyz), vec3(_1792, _1793, _1794));
    float _4008 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1808 = _1784 * _1784;
    float _1812 = ((_1803 * _1803) * (_1808 + (-1.0))) + 1.0;
    float _1820 = exp2(log2(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * 5.0);
    float _1821 = 0.959999978542327880859375 - _518;
    float _1823 = 0.959999978542327880859375 - _519;
    float _1824 = 0.959999978542327880859375 - _520;
    float _1831 = 1.0 - _1784;
    float _1842 = (0.5 / (((_1799 * ((_1798 * _1831) + _1784)) + 9.9999999392252902907785028219223e-09) + (((_1799 * _1831) + _1784) * _1798))) * _1798;
    float _4019 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1844 = (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1808 / ((_1812 * _1812) * 3.141590118408203125));
    uint _1858 = _1630 + 9u;
    float _1869 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1671].w)) * _357) * 0.949999988079071044921875);
    float _1870 = _1869 * _1869;
    float _1871 = cbLight._m0[_1671].x + _435;
    float _1872 = cbLight._m0[_1671].y + _436;
    float _1873 = cbLight._m0[_1671].z + _437;
    float _1877 = inversesqrt(dot(vec3(_1871, _1872, _1873), vec3(_1871, _1872, _1873)));
    float _1878 = _1877 * _1871;
    float _1879 = _1877 * _1872;
    float _1880 = _1877 * _1873;
    float _1881 = dot(vec3(_354, _355, _356), vec3(cbLight._m0[_1671].xyz));
    float _4030 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1884 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _1885 = dot(vec3(_354, _355, _356), vec3(_1878, _1879, _1880));
    float _4041 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1888 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _1889 = dot(vec3(cbLight._m0[_1671].xyz), vec3(_1878, _1879, _1880));
    float _4052 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1893 = _1870 * _1870;
    float _1897 = ((_1888 * _1888) * (_1893 + (-1.0))) + 1.0;
    float _1904 = exp2(log2(1.0 - (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * 5.0);
    float _1911 = 1.0 - _1870;
    float _1921 = (0.5 / (((_1799 * ((_1884 * _1911) + _1870)) + 9.9999999392252902907785028219223e-09) + (((_1799 * _1911) + _1870) * _1884))) * _1884;
    float _4063 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _1923 = (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1893 / ((_1897 * _1897) * 3.141590118408203125));
    float _1933 = (((((_1904 * _1821) + _521) * cbLight._m0[_1858].x) * _1923) * _1653) + ((((cbLight._m0[_1770].x * _1622) * ((_1820 * _1821) + _521)) * _1844) * _1667);
    float _1934 = (((((_1904 * _1823) + _523) * cbLight._m0[_1858].y) * _1923) * _1653) + ((((cbLight._m0[_1770].y * _1623) * ((_1820 * _1823) + _523)) * _1844) * _1667);
    float _1935 = (((((_1904 * _1824) + _524) * cbLight._m0[_1858].z) * _1923) * _1653) + ((((cbLight._m0[_1770].z * _1624) * ((_1820 * _1824) + _524)) * _1844) * _1667);
    float _1997;
    float _1999;
    float _2001;
    if (_1707)
    {
        _1997 = _1933;
        _1999 = _1934;
        _2001 = _1935;
    }
    else
    {
        uint _2003 = _1630 + 2u;
        uint _2007 = _1630 + 10u;
        float _2021 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2003].w)) * _357) * 0.949999988079071044921875);
        float _2022 = _2021 * _2021;
        float _2023 = cbLight._m0[_2003].x + _435;
        float _2024 = cbLight._m0[_2003].y + _436;
        float _2025 = cbLight._m0[_2003].z + _437;
        float _2029 = inversesqrt(dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025)));
        float _2030 = _2029 * _2023;
        float _2031 = _2029 * _2024;
        float _2032 = _2029 * _2025;
        float _2033 = dot(vec3(_354, _355, _356), vec3(cbLight._m0[_2003].xyz));
        float _4074 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2036 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _2037 = dot(vec3(_354, _355, _356), vec3(_2030, _2031, _2032));
        float _4085 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2040 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _2041 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_2030, _2031, _2032));
        float _4096 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2045 = _2022 * _2022;
        float _2049 = ((_2040 * _2040) * (_2045 + (-1.0))) + 1.0;
        float _2056 = exp2(log2(1.0 - (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) * 5.0);
        float _2063 = 1.0 - _2022;
        float _2073 = (0.5 / (((_1799 * ((_2036 * _2063) + _2022)) + 9.9999999392252902907785028219223e-09) + (((_1799 * _2063) + _2022) * _2036))) * _2036;
        float _4107 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2075 = (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_2045 / ((_2049 * _2049) * 3.141590118408203125));
        float _2076 = isnan(1.0) ? _1645 : (isnan(_1645) ? 1.0 : min(_1645, 1.0));
        _1997 = (((((_2056 * _1821) + _521) * cbLight._m0[_2007].x) * _2075) * _2076) + _1933;
        _1999 = (((((_2056 * _1823) + _523) * cbLight._m0[_2007].y) * _2075) * _2076) + _1934;
        _2001 = (((((_2056 * _1824) + _524) * cbLight._m0[_2007].z) * _2075) * _2076) + _1935;
    }
    float _2111;
    float _2113;
    float _2115;
    if (_1725)
    {
        _2111 = _1997;
        _2113 = _1999;
        _2115 = _2001;
    }
    else
    {
        uint _2122 = _1630 + 3u;
        uint _2126 = _1630 + 11u;
        float _2140 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2122].w)) * _357) * 0.949999988079071044921875);
        float _2141 = _2140 * _2140;
        float _2142 = cbLight._m0[_2122].x + _435;
        float _2143 = cbLight._m0[_2122].y + _436;
        float _2144 = cbLight._m0[_2122].z + _437;
        float _2148 = inversesqrt(dot(vec3(_2142, _2143, _2144), vec3(_2142, _2143, _2144)));
        float _2149 = _2148 * _2142;
        float _2150 = _2148 * _2143;
        float _2151 = _2148 * _2144;
        float _2152 = dot(vec3(_354, _355, _356), vec3(cbLight._m0[_2122].xyz));
        float _4123 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2155 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _2156 = dot(vec3(_354, _355, _356), vec3(_2149, _2150, _2151));
        float _4134 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2159 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _2160 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_2149, _2150, _2151));
        float _4145 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2164 = _2141 * _2141;
        float _2168 = ((_2159 * _2159) * (_2164 + (-1.0))) + 1.0;
        float _2175 = exp2(log2(1.0 - (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * 5.0);
        float _2182 = 1.0 - _2141;
        float _2192 = (0.5 / (((_1799 * ((_2155 * _2182) + _2141)) + 9.9999999392252902907785028219223e-09) + (((_1799 * _2182) + _2141) * _2155))) * _2155;
        float _4156 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2194 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2164 / ((_2168 * _2168) * 3.141590118408203125));
        float _2195 = isnan(1.0) ? _1646 : (isnan(_1646) ? 1.0 : min(_1646, 1.0));
        _2111 = (((((_2175 * _1821) + _521) * cbLight._m0[_2126].x) * _2194) * _2195) + _1997;
        _2113 = (((((_2175 * _1823) + _523) * cbLight._m0[_2126].y) * _2194) * _2195) + _1999;
        _2115 = (((((_2175 * _1824) + _524) * cbLight._m0[_2126].z) * _2194) * _2195) + _2001;
    }
    float _2330;
    float _2332;
    float _2334;
    float _2336;
    float _2338;
    float _2340;
    if (_1628.y == 0u)
    {
        float _2270 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2271 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2270;
        float _2272 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2270;
        float _2273 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2270;
        uvec4 _2285 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2286 = _2285.x;
        uint _2297 = uint((float(_2285.y) * floor(float(uint(cbSceneParam._m0[85u].y * _457) / _2286))) + floor(float(uint(cbSceneParam._m0[85u].x * _456) / _2286)));
        float _2307 = (log2(_2273 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2308 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        uint _2311 = uint(isnan(14.0) ? _2308 : (isnan(_2308) ? 14.0 : min(_2308, 14.0)));
        uvec4 _2316 = texelFetch(g_lightClusterGridBuffer, int(((_2311 << 2u) + (_2297 << 6u)) >> 2u));
        uint _2317 = _2316.x;
        uint _2318 = _2285.z;
        float _2456;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        float _2466;
        if (((((1u << ((_2318 >> 4u) & 15u)) + 4294967295u) & _2317) == 0u) || ((_2318 & 240u) == 0u))
        {
            _2456 = 0.0;
            _2458 = 0.0;
            _2460 = 0.0;
            _2462 = 0.0;
            _2464 = 0.0;
            _2466 = 0.0;
        }
        else
        {
            float _2457;
            float _2459;
            float _2461;
            float _2463;
            float _2465;
            float _2467;
            float _2618 = 0.0;
            float _2619 = 0.0;
            float _2620 = 0.0;
            float _2621 = 0.0;
            float _2622 = 0.0;
            float _2623 = 0.0;
            uint _2624 = 0u;
            uint _2633;
            bool _2634;
            for (;;)
            {
                _2633 = texelFetch(g_lightClassification, int((((_2311 << 5u) + (_2297 << 9u)) + (_2624 << 2u)) >> 2u)).x;
                _2634 = _2633 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2634)
                {
                    frontier_phi_66_pred = _2618;
                    frontier_phi_66_pred_1 = _2623;
                    frontier_phi_66_pred_2 = _2622;
                    frontier_phi_66_pred_3 = _2621;
                    frontier_phi_66_pred_4 = _2620;
                    frontier_phi_66_pred_5 = _2619;
                }
                else
                {
                    float _2763;
                    float _2764;
                    float _2765;
                    float _2766;
                    float _2767;
                    float _2768;
                    uint _2769;
                    _2763 = _2618;
                    _2764 = _2619;
                    _2765 = _2620;
                    _2766 = _2621;
                    _2767 = _2622;
                    _2768 = _2623;
                    _2769 = _2633;
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    float _2694;
                    float _2695;
                    for (;;)
                    {
                        uint _2773 = uint(findLSB(_2769)) + (_2624 << 5u);
                        uint _2770 = (_2769 + 4294967295u) & _2769;
                        uint _2775 = _2773 * 48u;
                        vec4 _2789 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2775)).x, texelFetch(g_PointLightRenderingBuffer, int(_2775 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2775 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2775 + 3u)).x));
                        uint _2795 = (_2773 * 48u) + 4u;
                        vec4 _2808 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2795)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 3u)).x));
                        uint _2814 = (_2773 * 48u) + 8u;
                        vec3 _2825 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2814)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 2u)).x));
                        float _2829 = _2789.x - _2271;
                        float _2830 = _2789.y - _2272;
                        float _2831 = _2789.z - _2273;
                        float _2832 = dot(vec3(_2829, _2830, _2831), vec3(_2829, _2830, _2831));
                        float _2835 = inversesqrt(_2832);
                        float _2836 = _2835 * _2829;
                        float _2837 = _2835 * _2830;
                        float _2838 = _2835 * _2831;
                        float _2839 = dot(vec3(_477, _480, _483), vec3(_2836, _2837, _2838));
                        float _2844 = 1.0 - (_2832 * _2789.w);
                        float _4182 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                        float _2845 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                        float _2846 = sqrt(_2832) * _2808.w;
                        float _2849 = 1.39999997615814208984375 / (_2846 + 1.39999997615814208984375);
                        float _2850 = _2849 * _2849;
                        float _2853 = ((1.0 - _2850) * _2839) + _2850;
                        float _2856 = _2846 * _2846;
                        float _2860 = ((isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0))) * _2845) / ((_2856 * 0.699999988079071044921875) + 1.0);
                        float _2864 = (-0.0) - _2271;
                        float _2865 = (-0.0) - _2272;
                        float _2866 = (-0.0) - _2273;
                        float _2870 = inversesqrt(dot(vec3(_2864, _2865, _2866), vec3(_2864, _2865, _2866)));
                        float _2871 = _2870 * _2864;
                        float _2872 = _2870 * _2865;
                        float _2873 = _2870 * _2866;
                        float _2881 = exp2(log2(1.0 / ((_2856 * 3.5) + 5.0)) * 0.25);
                        float _2882 = 1.0 - _552;
                        float _2889 = sqrt(1.0 - ((1.0 - (_2882 * _2882)) * (1.0 - (_2881 * _2881))));
                        float _2890 = _2889 * _2889;
                        float _2891 = _2890 * _2890;
                        float _2892 = _2871 + _2836;
                        float _2893 = _2872 + _2837;
                        float _2894 = _2873 + _2838;
                        float _2898 = inversesqrt(dot(vec3(_2892, _2893, _2894), vec3(_2892, _2893, _2894)));
                        float _2902 = dot(vec3(_477, _480, _483), vec3(_2871, _2872, _2873));
                        float _4198 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
                        float _2905 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                        float _2906 = dot(vec3(_477, _480, _483), vec3(_2898 * _2892, _2898 * _2893, _2898 * _2894));
                        float _4209 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
                        float _2909 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                        float _2913 = ((_2909 * _2909) * (_2891 + (-1.0))) + 1.0;
                        float _2914 = _2849 * _2890;
                        float _2915 = _2914 * _2914;
                        float _2918 = ((1.0 - _2915) * _2839) + _2915;
                        float _4220 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                        float _2919 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                        float _2920 = 1.0 - _2890;
                        float _2930 = (0.5 / (((_2919 * ((_2905 * _2920) + _2890)) + 9.9999999392252902907785028219223e-09) + (((_2919 * _2920) + _2890) * _2905))) * _2919;
                        float _4231 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2941 = (((_2891 * 3.1415927410125732421875) * (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) / ((_2913 * _2913) * ((_2856 * 2.1991131305694580078125) + 3.141590118408203125))) * _2845;
                        _2693 = (_2860 * _2808.x) + _2766;
                        _2694 = (_2860 * _2808.y) + _2767;
                        _2695 = (_2860 * _2808.z) + _2768;
                        _2690 = (_2941 * _2825.x) + _2763;
                        _2691 = (_2941 * _2825.y) + _2764;
                        _2692 = (_2941 * _2825.z) + _2765;
                        if (_2770 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2763 = _2690;
                            _2764 = _2691;
                            _2765 = _2692;
                            _2766 = _2693;
                            _2767 = _2694;
                            _2768 = _2695;
                            _2769 = _2770;
                        }
                    }
                    frontier_phi_66_pred = _2690;
                    frontier_phi_66_pred_1 = _2695;
                    frontier_phi_66_pred_2 = _2694;
                    frontier_phi_66_pred_3 = _2693;
                    frontier_phi_66_pred_4 = _2692;
                    frontier_phi_66_pred_5 = _2691;
                }
                _2457 = frontier_phi_66_pred;
                _2467 = frontier_phi_66_pred_1;
                _2465 = frontier_phi_66_pred_2;
                _2463 = frontier_phi_66_pred_3;
                _2461 = frontier_phi_66_pred_4;
                _2459 = frontier_phi_66_pred_5;
                uint _2625 = _2624 + 1u;
                if (_2625 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2618 = _2457;
                    _2619 = _2459;
                    _2620 = _2461;
                    _2621 = _2463;
                    _2622 = _2465;
                    _2623 = _2467;
                    _2624 = _2625;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2456 = _2457;
            _2458 = _2459;
            _2460 = _2461;
            _2462 = _2463;
            _2464 = _2465;
            _2466 = _2467;
        }
        uvec4 _2470 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2471 = _2470.z;
        uint _2473 = (_2471 >> 8u) & 15u;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        if (((4294967295u << _2473) & _2317) == 0u)
        {
            _2586 = _2456;
            _2588 = _2458;
            _2590 = _2460;
            _2592 = _2462;
            _2594 = _2464;
            _2596 = _2466;
        }
        else
        {
            float _2611 = inversesqrt(dot(vec3(_2271, _2272, _2273), vec3(_2271, _2272, _2273)));
            float _2612 = _2611 * _2271;
            float _2613 = _2611 * _2272;
            float _2614 = _2611 * _2273;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2473 < ((_2471 >> 12u) & 15u))
            {
                float _2587;
                float _2589;
                float _2591;
                float _2593;
                float _2595;
                float _2597;
                float _2746 = _2456;
                float _2747 = _2458;
                float _2748 = _2460;
                float _2749 = _2462;
                float _2750 = _2464;
                float _2751 = _2466;
                uint _2752 = _2473;
                uint _2761;
                bool _2762;
                for (;;)
                {
                    _2761 = texelFetch(g_lightClassification, int((((_2311 << 5u) + (_2297 << 9u)) + (_2752 << 2u)) >> 2u)).x;
                    _2762 = _2761 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2762)
                    {
                        frontier_phi_77_pred = _2751;
                        frontier_phi_77_pred_1 = _2750;
                        frontier_phi_77_pred_2 = _2749;
                        frontier_phi_77_pred_3 = _2748;
                        frontier_phi_77_pred_4 = _2747;
                        frontier_phi_77_pred_5 = _2746;
                    }
                    else
                    {
                        float _2955;
                        float _2956;
                        float _2957;
                        float _2958;
                        float _2959;
                        float _2960;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _2968 = _2746;
                        float _2969 = _2747;
                        float _2970 = _2748;
                        float _2971 = _2749;
                        float _2972 = _2750;
                        float _2973 = _2751;
                        uint _2974 = _2761;
                        uint _2975;
                        vec4 _3000;
                        float _3001;
                        vec4 _3016;
                        vec3 _3028;
                        vec4 _3044;
                        vec4 _3060;
                        float _3107;
                        bool _3108;
                        for (;;)
                        {
                            uint _2985 = ((_2752 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2974));
                            _2975 = (_2974 + 4294967295u) & _2974;
                            uint _2987 = _2985 * 40u;
                            _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            _3001 = _3000.w;
                            uint _3003 = (_2985 * 40u) + 4u;
                            _3016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 3u)).x));
                            uint _3018 = (_2985 * 40u) + 8u;
                            _3028 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3018)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 2u)).x));
                            uint _3031 = (_2985 * 40u) + 16u;
                            _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            uint _3047 = (_2985 * 40u) + 20u;
                            _3060 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 3u)).x));
                            uint _3063 = (_2985 * 40u) + 24u;
                            vec4 _3076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 3u)).x));
                            uint _3082 = (_2985 * 40u) + 28u;
                            vec4 _3095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 3u)).x));
                            _3107 = fma(_2273, _3095.z, fma(_2272, _3095.y, _3095.x * _2271)) + _3095.w;
                            _3108 = !((fma(_2273, _3076.z, fma(_2272, _3076.y, _3076.x * _2271)) + _3076.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3108)
                            {
                                float _3135 = _3000.x - _2271;
                                float _3136 = _3000.y - _2272;
                                float _3137 = _3000.z - _2273;
                                float _3138 = dot(vec3(_3135, _3136, _3137), vec3(_3135, _3136, _3137));
                                float _3141 = inversesqrt(_3138);
                                float _3142 = _3141 * _3135;
                                float _3143 = _3141 * _3136;
                                float _3144 = _3141 * _3137;
                                float _3148 = 1.0 - (_3138 / (_3001 * _3001));
                                float _4242 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                                float _3149 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                                float _3153 = sqrt(_3138) * _3016.w;
                                float _3155 = 1.39999997615814208984375 / (_3153 + 1.39999997615814208984375);
                                float _3156 = _3155 * _3155;
                                float _3159 = ((1.0 - _3156) * dot(vec3(_3142, _3143, _3144), vec3(_477, _480, _483))) + _3156;
                                float _3162 = _3153 * _3153;
                                float _3166 = (fma(_2273, _3044.z, fma(_2272, _3044.y, _3044.x * _2271)) + _3044.w) / _3107;
                                float _3167 = (fma(_2273, _3060.z, fma(_2272, _3060.y, _3060.x * _2271)) + _3060.w) / _3107;
                                float _3171 = 1.0 - dot(vec2(_3166, _3167), vec2(_3166, _3167));
                                float _4258 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3172 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                                float _3173 = _3172 * (((isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0))) * _3149) / ((_3162 * 0.699999988079071044921875) + 1.0));
                                float _3185 = exp2(log2(1.0 / ((_3162 * 3.5) + 5.0)) * 0.25);
                                float _3186 = 1.0 - _552;
                                float _3193 = sqrt(1.0 - ((1.0 - (_3186 * _3186)) * (1.0 - (_3185 * _3185))));
                                float _3194 = _3193 * _3193;
                                float _3195 = _3194 * _3194;
                                float _3196 = _3142 - _2612;
                                float _3197 = _3143 - _2613;
                                float _3198 = _3144 - _2614;
                                float _3202 = inversesqrt(dot(vec3(_3196, _3197, _3198), vec3(_3196, _3197, _3198)));
                                float _3206 = dot(vec3(_477, _480, _483), vec3((-0.0) - _2612, (-0.0) - _2613, (-0.0) - _2614));
                                float _4269 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                                float _3209 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                                float _3210 = dot(vec3(_477, _480, _483), vec3(_3202 * _3196, _3202 * _3197, _3202 * _3198));
                                float _4280 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                                float _3213 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                                float _3217 = ((_3213 * _3213) * (_3195 + (-1.0))) + 1.0;
                                float _3218 = _3155 * _3194;
                                float _3219 = _3218 * _3218;
                                float _3225 = ((1.0 - _3219) * dot(vec3(_477, _480, _483), vec3(_3142, _3143, _3144))) + _3219;
                                float _4291 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                                float _3226 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                                float _3227 = 1.0 - _3194;
                                float _3237 = (0.5 / (((_3226 * ((_3209 * _3227) + _3194)) + 9.9999999392252902907785028219223e-09) + (((_3226 * _3227) + _3194) * _3209))) * _3226;
                                float _4302 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                                float _3247 = (_3172 * _3149) * (((_3195 * 3.1415927410125732421875) * (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) / ((_3217 * _3217) * ((_3162 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3173 * _3016.y;
                                frontier_phi_83_pred_1 = _3173 * _3016.x;
                                frontier_phi_83_pred_2 = _3247 * _3028.z;
                                frontier_phi_83_pred_3 = _3247 * _3028.y;
                                frontier_phi_83_pred_4 = _3247 * _3028.x;
                                frontier_phi_83_pred_5 = _3173 * _3016.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3255 = frontier_phi_83_pred;
                            _3254 = frontier_phi_83_pred_1;
                            _3253 = frontier_phi_83_pred_2;
                            _3252 = frontier_phi_83_pred_3;
                            _3251 = frontier_phi_83_pred_4;
                            _3256 = frontier_phi_83_pred_5;
                            _2958 = _3254 + _2971;
                            _2959 = _3255 + _2972;
                            _2960 = _3256 + _2973;
                            _2955 = _3251 + _2968;
                            _2956 = _3252 + _2969;
                            _2957 = _3253 + _2970;
                            if (_2975 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2968 = _2955;
                                _2969 = _2956;
                                _2970 = _2957;
                                _2971 = _2958;
                                _2972 = _2959;
                                _2973 = _2960;
                                _2974 = _2975;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2960;
                        frontier_phi_77_pred_1 = _2959;
                        frontier_phi_77_pred_2 = _2958;
                        frontier_phi_77_pred_3 = _2957;
                        frontier_phi_77_pred_4 = _2956;
                        frontier_phi_77_pred_5 = _2955;
                    }
                    _2597 = frontier_phi_77_pred;
                    _2595 = frontier_phi_77_pred_1;
                    _2593 = frontier_phi_77_pred_2;
                    _2591 = frontier_phi_77_pred_3;
                    _2589 = frontier_phi_77_pred_4;
                    _2587 = frontier_phi_77_pred_5;
                    uint _2753 = _2752 + 1u;
                    if (_2753 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2746 = _2587;
                        _2747 = _2589;
                        _2748 = _2591;
                        _2749 = _2593;
                        _2750 = _2595;
                        _2751 = _2597;
                        _2752 = _2753;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2591;
                frontier_phi_58_59_ladder_1 = _2597;
                frontier_phi_58_59_ladder_2 = _2595;
                frontier_phi_58_59_ladder_3 = _2593;
                frontier_phi_58_59_ladder_4 = _2589;
                frontier_phi_58_59_ladder_5 = _2587;
            }
            else
            {
                frontier_phi_58_59_ladder = _2460;
                frontier_phi_58_59_ladder_1 = _2466;
                frontier_phi_58_59_ladder_2 = _2464;
                frontier_phi_58_59_ladder_3 = _2462;
                frontier_phi_58_59_ladder_4 = _2458;
                frontier_phi_58_59_ladder_5 = _2456;
            }
            _2586 = frontier_phi_58_59_ladder_5;
            _2588 = frontier_phi_58_59_ladder_4;
            _2590 = frontier_phi_58_59_ladder;
            _2592 = frontier_phi_58_59_ladder_3;
            _2594 = frontier_phi_58_59_ladder_2;
            _2596 = frontier_phi_58_59_ladder_1;
        }
        float _2601 = isnan(1.0) ? _536 : (isnan(_536) ? 1.0 : min(_536, 1.0));
        _2330 = (_2601 * _2592) + _1763;
        _2332 = (_2601 * _2594) + _1765;
        _2334 = (_2601 * _2596) + _1767;
        _2336 = ((_2586 * _521) * _2601) + _2111;
        _2338 = ((_2588 * _523) * _2601) + _2113;
        _2340 = ((_2590 * _524) * _2601) + _2115;
    }
    else
    {
        _2330 = _1763;
        _2332 = _1765;
        _2334 = _1767;
        _2336 = _2111;
        _2338 = _2113;
        _2340 = _2115;
    }
    uint _2346 = _497 + uint(cbMatDynParam._m0[0u].w);
    float _2355 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _320.x) * _340) * cbInstanceData._m0[_2346].x;
    float _2359 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _320.y) * _340) * cbInstanceData._m0[_2346].y;
    float _2363 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _320.z) * _340) * cbInstanceData._m0[_2346].z;
    float _4318 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _4329 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _4340 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _2380 = (((isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2330 + ((isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0))) * _536))) + ((_2336 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _1377)) * cbPerFrame._m0[3u].x)) + _2355;
    float _2382 = (_2359 + ((_2338 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _1377)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2332 + ((isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0))) * _536)));
    float _2384 = (_2363 + ((_2340 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _1377)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_2334 + ((isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0))) * _536)));
    float _2385 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2386 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2387 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2393 = cbMtdParam._m0[2u].x * _2355;
    float _2394 = cbMtdParam._m0[2u].y * _2359;
    float _2395 = cbMtdParam._m0[2u].z * _2363;
    float _4366 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2397 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    uint _2398 = _496 + 6u;
    float _2406 = _456 / cbSceneParam._m0[86u].x;
    float _2407 = _457 / cbSceneParam._m0[86u].y;
    vec4 _2421 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2406, _2407, (log2((isnan(cbSceneParam._m0[77u].w) ? _377 : (isnan(_377) ? cbSceneParam._m0[77u].w : min(_377, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2423 = _2421.x;
    float _2424 = _2421.y;
    float _2425 = _2421.z;
    float _2426 = _2421.w;
    float _2519;
    float _2521;
    float _2523;
    float _2525;
    if (_377 > cbSceneParam._m0[78u].w)
    {
        float _2481 = isnan(_377) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _377 : min(cbSceneParam._m0[80u].w, _377));
        float _2482 = _2481 / _377;
        float _2493 = _2482 * _428;
        float _2494 = _429 * _2482;
        float _2495 = (-0.0) - _2494;
        float _2497 = _2482 * _430;
        float _2499 = (cbSceneParam._m0[77u].w * _2495) / _2481;
        float _2500 = _2499 + cbSceneParam._m0[79u].w;
        float _2501 = cbSceneParam._m0[79u].w - _2494;
        float _2507 = sqrt(((_2493 * _2493) + (_2494 * _2494)) + (_2497 * _2497));
        float _2510 = (1.0 - (cbSceneParam._m0[77u].w / _2481)) * _2507;
        float _2515 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2517 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2703;
        if (abs((_2495 - _2499) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2703 = ((((_2500 > 0.0) ? exp2(_2515 * _2500) : (2.0 - exp2(_2517 * _2500))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2510;
        }
        else
        {
            float _2647 = 1.0 / cbSceneParam._m0[80u].x;
            float _2648 = isnan(_2501) ? _2500 : (isnan(_2500) ? _2501 : max(_2500, _2501));
            float _2649 = isnan(_2501) ? _2500 : (isnan(_2500) ? _2501 : min(_2500, _2501));
            float _2658 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : min(_2648, 0.0));
            float _2659 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : min(_2649, 0.0));
            _2703 = ((abs(_2507 / _2495) * cbSceneParam._m0[80u].y) * ((((_2658 - _2659) * 2.0) - ((exp2(_2515 * (isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0)))) - exp2(_2515 * (isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0))))) * _2647)) - ((exp2(_2517 * _2658) - exp2(_2517 * _2659)) * _2647))) + (_2510 * cbSceneParam._m0[80u].z);
        }
        vec4 _2705 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2406, _2407, 1.0), 0.0);
        float _2714 = exp2((_2703 * (-1.44269502162933349609375)) * (1.0 - _2705.w));
        float _2715 = log2(_2714);
        float _2731 = log2(_2426);
        _2519 = (exp2(_2731 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2715 * cbSceneParam._m0[78u].x)) * _2705.x) / cbSceneParam._m0[78u].x)) + _2423;
        _2521 = (exp2(_2731 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2715 * cbSceneParam._m0[78u].y)) * _2705.y) / cbSceneParam._m0[78u].y)) + _2424;
        _2523 = (exp2(_2731 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2715 * cbSceneParam._m0[78u].z)) * _2705.z) / cbSceneParam._m0[78u].z)) + _2425;
        _2525 = _2714 * _2426;
    }
    else
    {
        _2519 = _2423;
        _2521 = _2424;
        _2523 = _2425;
        _2525 = _2426;
    }
    bool _2741;
    vec4 _2535;
    vec4 _2557;
    float _2559;
    float _2563;
    float _2564;
    float _2565;
    float _2568;
    float _2571;
    float _2574;
    float _2575;
    bool _2585;
    for (;;)
    {
        _2535 = cbMatDynParam._m0[0u];
        float _2537 = roundEven(_2535.y);
        bool _2538 = _2537 == 3.0;
        float _2539 = log2(_2525);
        float _2543 = exp2(_2539 * cbSceneParam._m0[78u].x);
        float _2544 = exp2(_2539 * cbSceneParam._m0[78u].y);
        float _2545 = exp2(_2539 * cbSceneParam._m0[78u].z);
        float _2546 = _2543 * _2385;
        float _2547 = _2544 * _2386;
        float _2548 = _2545 * _2387;
        float _2555 = _444 + (-0.5);
        _2557 = cbMtdParam._m0[1u];
        _2559 = _2557.y * _2555;
        float _2562 = (_2537 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2563 = _2562 * (_2538 ? _2546 : (_2546 + (cbSceneParam._m0[72u].w * _2519)));
        _2564 = _2562 * (_2538 ? _2547 : (_2547 + (cbSceneParam._m0[72u].w * _2521)));
        _2565 = _2562 * (_2538 ? _2548 : (_2548 + (cbSceneParam._m0[72u].w * _2523)));
        _2568 = ((_2393 * _2397) * _2543) * _2562;
        _2571 = ((_2394 * _2397) * _2544) * _2562;
        _2574 = ((_2395 * _2397) * _2545) * _2562;
        _2575 = _2555 * 0.999000012874603271484375;
        _2585 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2585)
        {
            if ((cbInstanceData._m0[_496 + 7u].x + _2575) < 0.5)
            {
                _2741 = true;
                break;
            }
        }
        uint _2682 = _497 + uint(_2535.w);
        if ((cbInstanceData._m0[_2682].w < 1.0) && ((cbInstanceData._m0[_2682].w + _2575) < 0.5))
        {
            _2741 = true;
            break;
        }
        if ((_2559 + 1.0) < _2557.x)
        {
            _2741 = true;
            break;
        }
        _2741 = false;
        break;
    }
    float _2946;
    if (_2741)
    {
        discard_state = true;
        _2946 = 0.0;
    }
    else
    {
        _2946 = cbInstanceData._m0[_2398].w;
    }
    SV_Target.x = _2563;
    SV_Target.y = _2564;
    SV_Target.z = _2565;
    SV_Target.w = _2946;
    SV_Target_1.x = _2568;
    SV_Target_1.y = _2571;
    SV_Target_1.z = _2574;
    SV_Target_1.w = cbInstanceData._m0[_2398].w;
    discard_exit();
}


