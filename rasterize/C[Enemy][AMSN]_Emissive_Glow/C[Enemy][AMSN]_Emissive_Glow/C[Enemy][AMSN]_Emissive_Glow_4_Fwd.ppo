#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _877;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _183 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _184 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _185 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_183, _184, _185), vec3(_183, _184, _185)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _226 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _226.x * cbMtdParam._m0[9u].x;
    float _233 = _226.y * cbMtdParam._m0[9u].y;
    float _234 = _226.z * cbMtdParam._m0[9u].z;
    vec4 _246 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _248 = _246.x;
    vec4 _260 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _264 = _260.z;
    float _268 = (_260.x * 2.0) + (-1.0);
    float _270 = (_260.y * 2.0) + (-1.0);
    float _271 = dot(vec2(_268, _270), vec2(_268, _270));
    float _3255 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _277 = sqrt(1.0 - (isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0))));
    vec4 _314 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _321 = fma(_277, _197 * NORMAL.x, fma(_270, _204 * TANGENT.x, (_190 * _183) * _268));
    float _324 = fma(_277, _197 * NORMAL.y, fma(_270, _204 * TANGENT.y, (_190 * _184) * _268));
    float _327 = fma(_277, _197 * NORMAL.z, fma(_270, _204 * TANGENT.z, (_190 * _185) * _268));
    float _331 = inversesqrt(dot(vec3(_321, _324, _327), vec3(_321, _324, _327)));
    float _332 = _331 * _321;
    float _333 = _331 * _324;
    float _334 = _331 * _327;
    float _3266 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _335 = isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0));
    float _3277 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3288 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3299 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3310 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _339 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
    float _355 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _396 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _406 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _396);
    float _407 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _396);
    float _408 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _396);
    float _412 = inversesqrt(dot(vec3(_406, _407, _408), vec3(_406, _407, _408)));
    float _413 = _406 * _412;
    float _414 = _407 * _412;
    float _415 = _408 * _412;
    float _421 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _422 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _443 = fma(_334, cbSceneParam._m0[5u].z, fma(_333, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _332));
    float _446 = fma(_334, cbSceneParam._m0[6u].z, fma(_333, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _332));
    float _449 = fma(_334, cbSceneParam._m0[7u].z, fma(_333, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _332));
    uint _462 = uint(roundEven(NORMAL.w)) * 13u;
    uint _463 = _462 + 9u;
    uint _464 = _463 + uint(cbMatDynParam._m0[0u].w);
    float _470 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0)))) * cbInstanceData._m0[_464].x;
    float _471 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0)))) * cbInstanceData._m0[_464].y;
    float _472 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0)))) * cbInstanceData._m0[_464].z;
    float _3321 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
    float _3332 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
    float _3343 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0));
    float _476 = 1.0 - _339;
    float _477 = _473 * _476;
    float _478 = _474 * _476;
    float _479 = _475 * _476;
    float _484 = (_473 + (-0.039999999105930328369140625)) * _339;
    float _485 = (_474 + (-0.039999999105930328369140625)) * _339;
    float _486 = (_475 + (-0.039999999105930328369140625)) * _339;
    float _487 = _484 + 0.039999999105930328369140625;
    float _489 = _485 + 0.039999999105930328369140625;
    float _490 = _486 + 0.039999999105930328369140625;
    vec4 _499 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _421, cbSceneParam._m0[86u].y * _422));
    float _502 = _499.x * TEXCOORD.z;
    float _503 = dot(vec3(_332, _333, _334), vec3(_413, _414, _415));
    float _506 = _503 * 2.0;
    float _510 = (_506 * _332) - _413;
    float _511 = (_506 * _333) - _414;
    float _512 = (_506 * _334) - _415;
    float _516 = abs(dot(vec3(_413, _414, _415), vec3(_332, _333, _334)));
    float _3354 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _518 = sqrt(_335);
    float _531 = exp2((_518 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_518 * 3.0));
    float _537 = (1.0 - _531) * ((_518 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _538 = _531 * _518;
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _876;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _601 = fma(_574, cbModelParam._m0[26u].z, fma(_570, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _566));
        float _605 = fma(_574, cbModelParam._m0[27u].z, fma(_570, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _566));
        float _609 = fma(_574, cbModelParam._m0[28u].z, fma(_570, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _566));
        float _634 = _566 + _332;
        float _635 = _570 + _333;
        float _636 = _574 + _334;
        float _646 = fma(_636, cbModelParam._m0[26u].z, fma(_635, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _634)) - _601;
        float _647 = fma(_636, cbModelParam._m0[27u].z, fma(_635, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _634)) - _605;
        float _648 = fma(_636, cbModelParam._m0[28u].z, fma(_635, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _634)) - _609;
        float _652 = inversesqrt(dot(vec3(_646, _647, _648), vec3(_646, _647, _648)));
        float _665 = ((_652 * _646) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_601 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _666 = ((_652 * _647) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_605 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _667 = ((_652 * _648) / cbModelParam._m0[34u].z) + ((((((_609 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _670 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        vec4 _677 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        vec4 _684 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        vec4 _691 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        float _704 = exp2((_670.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_670.x + (-0.5));
        float _706 = _704 * (_670.y + (-0.5));
        float _707 = _704 * (_670.z + (-0.5));
        float _714 = exp2((_677.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_677.x + (-0.5));
        float _716 = _714 * (_677.y + (-0.5));
        float _717 = _714 * (_677.z + (-0.5));
        float _724 = exp2((_684.w + (-0.5)) * 20.0) * 2.0;
        float _725 = _724 * (_684.x + (-0.5));
        float _726 = _724 * (_684.y + (-0.5));
        float _727 = _724 * (_684.z + (-0.5));
        float _734 = exp2((_691.w + (-0.5)) * 20.0) * 2.0;
        float _735 = _734 * (_691.x + (-0.5));
        float _736 = _734 * (_691.y + (-0.5));
        float _737 = _734 * (_691.z + (-0.5));
        float _738 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _739 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _740 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _741 = _705 * 0.5;
        float _742 = _715 * 0.5;
        float _743 = _725 * 0.5;
        float _744 = dot(vec3(_741, _742, _743), vec3(_741, _742, _743));
        float _749 = (_744 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_744);
        float _758 = (dot(vec3(_332, _333, _334), vec3(_749 * _741, _749 * _742, _749 * _743)) + 1.0) * 0.5;
        float _3380 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _768 = sqrt(((_742 * _742) + (_741 * _741)) + (_743 * _743)) / (_738 + 9.9999997473787516355514526367188e-06);
        float _3391 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
        float _770 = _769 * 2.0;
        float _774 = (1.0 - _769) / (_769 + 1.0);
        float _3402 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
        float _784 = ((((1.0 - _775) * (_770 + 2.0)) * exp2(log2(isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0))) * (_770 + 1.0))) + _775) * _738;
        float _785 = _706 * 0.5;
        float _786 = _716 * 0.5;
        float _787 = _726 * 0.5;
        float _788 = dot(vec3(_785, _786, _787), vec3(_785, _786, _787));
        float _793 = (_788 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_788);
        float _801 = (dot(vec3(_332, _333, _334), vec3(_793 * _785, _793 * _786, _793 * _787)) + 1.0) * 0.5;
        float _3413 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _810 = sqrt(((_786 * _786) + (_785 * _785)) + (_787 * _787)) / (_739 + 9.9999997473787516355514526367188e-06);
        float _3424 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
        float _812 = _811 * 2.0;
        float _816 = (1.0 - _811) / (_811 + 1.0);
        float _3435 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
        float _826 = ((((1.0 - _817) * (_812 + 2.0)) * exp2(log2(isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0))) * (_812 + 1.0))) + _817) * _739;
        float _827 = _707 * 0.5;
        float _828 = _717 * 0.5;
        float _829 = _727 * 0.5;
        float _830 = dot(vec3(_827, _828, _829), vec3(_827, _828, _829));
        float _835 = (_830 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_830);
        float _843 = (dot(vec3(_332, _333, _334), vec3(_835 * _827, _835 * _828, _835 * _829)) + 1.0) * 0.5;
        float _3446 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _852 = sqrt(((_828 * _828) + (_827 * _827)) + (_829 * _829)) / (_740 + 9.9999997473787516355514526367188e-06);
        float _3457 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
        float _854 = _853 * 2.0;
        float _858 = (1.0 - _853) / (_853 + 1.0);
        float _3468 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
        float _868 = ((((1.0 - _859) * (_854 + 2.0)) * exp2(log2(isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0))) * (_854 + 1.0))) + _859) * _740;
        _876 = _707;
        _878 = _706;
        _879 = _705;
        _880 = _717;
        _881 = _716;
        _882 = _715;
        _883 = _727;
        _884 = _726;
        _885 = _725;
        _886 = _740;
        _887 = _739;
        _888 = _738;
        _889 = cbModelParam._m0[36u].z * (isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0)));
        _890 = cbModelParam._m0[36u].z * (isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0)));
        _891 = cbModelParam._m0[36u].z * (isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0)));
    }
    else
    {
        _876 = _877;
        _878 = _877;
        _879 = _877;
        _880 = _877;
        _881 = _877;
        _882 = _877;
        _883 = _877;
        _884 = _877;
        _885 = _877;
        _886 = _877;
        _887 = _877;
        _888 = _877;
        _889 = 0.0;
        _890 = 0.0;
        _891 = 0.0;
    }
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _917 = fma(_574, cbModelParam._m0[30u].z, fma(_570, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _566));
        float _921 = fma(_574, cbModelParam._m0[31u].z, fma(_570, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _566));
        float _925 = fma(_574, cbModelParam._m0[32u].z, fma(_570, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _566));
        float _948 = _566 + _332;
        float _949 = _570 + _333;
        float _950 = _574 + _334;
        float _960 = fma(_950, cbModelParam._m0[30u].z, fma(_949, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _948)) - _917;
        float _961 = fma(_950, cbModelParam._m0[31u].z, fma(_949, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _948)) - _921;
        float _962 = fma(_950, cbModelParam._m0[32u].z, fma(_949, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _948)) - _925;
        float _966 = inversesqrt(dot(vec3(_960, _961, _962), vec3(_960, _961, _962)));
        float _979 = ((_966 * _960) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_917 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _980 = ((_966 * _961) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_921 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _981 = ((_966 * _962) / cbModelParam._m0[35u].z) + ((((((_925 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        float _1016 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_983.x + (-0.5));
        float _1018 = _1016 * (_983.y + (-0.5));
        float _1019 = _1016 * (_983.z + (-0.5));
        float _1026 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_990.x + (-0.5));
        float _1028 = _1026 * (_990.y + (-0.5));
        float _1029 = _1026 * (_990.z + (-0.5));
        float _1036 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_997.x + (-0.5));
        float _1038 = _1036 * (_997.y + (-0.5));
        float _1039 = _1036 * (_997.z + (-0.5));
        float _1046 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1004.x + (-0.5));
        float _1048 = _1046 * (_1004.y + (-0.5));
        float _1049 = _1046 * (_1004.z + (-0.5));
        float _1050 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1051 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1052 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1053 = _1017 * 0.5;
        float _1054 = _1027 * 0.5;
        float _1055 = _1037 * 0.5;
        float _1056 = dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055));
        float _1061 = (_1056 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1056);
        float _1069 = (dot(vec3(_332, _333, _334), vec3(_1061 * _1053, _1061 * _1054, _1061 * _1055)) + 1.0) * 0.5;
        float _3509 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1078 = sqrt(((_1054 * _1054) + (_1053 * _1053)) + (_1055 * _1055)) / (_1050 + 9.9999997473787516355514526367188e-06);
        float _3520 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _1080 = _1079 * 2.0;
        float _1084 = (1.0 - _1079) / (_1079 + 1.0);
        float _3531 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _1094 = ((((1.0 - _1085) * (_1080 + 2.0)) * exp2(log2(isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * (_1080 + 1.0))) + _1085) * _1050;
        float _1095 = _1018 * 0.5;
        float _1096 = _1028 * 0.5;
        float _1097 = _1038 * 0.5;
        float _1098 = dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097));
        float _1103 = (_1098 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1098);
        float _1111 = (dot(vec3(_332, _333, _334), vec3(_1103 * _1095, _1103 * _1096, _1103 * _1097)) + 1.0) * 0.5;
        float _3542 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1120 = sqrt(((_1096 * _1096) + (_1095 * _1095)) + (_1097 * _1097)) / (_1051 + 9.9999997473787516355514526367188e-06);
        float _3553 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _1122 = _1121 * 2.0;
        float _1126 = (1.0 - _1121) / (_1121 + 1.0);
        float _3564 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _1136 = ((((1.0 - _1127) * (_1122 + 2.0)) * exp2(log2(isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * (_1122 + 1.0))) + _1127) * _1051;
        float _1137 = _1019 * 0.5;
        float _1138 = _1029 * 0.5;
        float _1139 = _1039 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1153 = (dot(vec3(_332, _333, _334), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _3575 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1162 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1052 + 9.9999997473787516355514526367188e-06);
        float _3586 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _1164 = _1163 * 2.0;
        float _1168 = (1.0 - _1163) / (_1163 + 1.0);
        float _3597 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _1178 = ((((1.0 - _1169) * (_1164 + 2.0)) * exp2(log2(isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * (_1164 + 1.0))) + _1169) * _1052;
        _1186 = _1019;
        _1187 = _1018;
        _1188 = _1017;
        _1189 = _1029;
        _1190 = _1028;
        _1191 = _1027;
        _1192 = _1039;
        _1193 = _1038;
        _1194 = _1037;
        _1195 = _1052;
        _1196 = _1051;
        _1197 = _1050;
        _1198 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0)));
        _1199 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)));
        _1200 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)));
    }
    else
    {
        _1186 = _877;
        _1187 = _877;
        _1188 = _877;
        _1189 = _877;
        _1190 = _877;
        _1191 = _877;
        _1192 = _877;
        _1193 = _877;
        _1194 = _877;
        _1195 = _877;
        _1196 = _877;
        _1197 = _877;
        _1198 = 0.0;
        _1199 = 0.0;
        _1200 = 0.0;
    }
    float _1210 = (cbModelParam._m0[1u].x * (_1198 - _889)) + _889;
    float _1211 = (cbModelParam._m0[1u].x * (_1199 - _890)) + _890;
    float _1212 = (cbModelParam._m0[1u].x * (_1200 - _891)) + _891;
    float _1233 = fma(_1212, cbSceneParam._m0[89u].z, fma(_1211, cbSceneParam._m0[89u].y, _1210 * cbSceneParam._m0[89u].x));
    float _1236 = fma(_1212, cbSceneParam._m0[90u].z, fma(_1211, cbSceneParam._m0[90u].y, _1210 * cbSceneParam._m0[90u].x));
    float _1239 = fma(_1212, cbSceneParam._m0[91u].z, fma(_1211, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1210));
    float _1254 = _510 * 0.5;
    float _1255 = _511 * 0.5;
    float _1256 = _512 * 0.5;
    float _1257 = dot(vec4(_1254, _1255, _1256, 1.0), vec4(_1188, _1191, _1194, _1197));
    float _1260 = dot(vec4(_1254, _1255, _1256, 1.0), vec4(_1187, _1190, _1193, _1196));
    float _1263 = dot(vec4(_1254, _1255, _1256, 1.0), vec4(_1186, _1189, _1192, _1195));
    float _1297;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1270 = dot(vec4(_1254, _1255, _1256, 1.0), vec4(_876, _880, _883, _886));
        float _1274 = dot(vec4(_1254, _1255, _1256, 1.0), vec4(_878, _881, _884, _887));
        float _1278 = dot(vec4(_1254, _1255, _1256, 1.0), vec4(_879, _882, _885, _888));
        float _1285 = dot(vec4(cbModelParam._m0[39u]), vec4(_1254, _1255, _1256, 1.0));
        _1297 = dot(vec3(isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)), isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)), isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1285) ? 0.0 : (isnan(0.0) ? _1285 : max(0.0, _1285))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1297 = 1.0;
    }
    float _1308;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1299 = dot(vec4(cbModelParam._m0[40u]), vec4(_1254, _1255, _1256, 1.0));
        _1308 = dot(vec3(isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)), isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)), isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1299) ? 0.0 : (isnan(0.0) ? _1299 : max(0.0, _1299))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1308 = 1.0;
    }
    float _1312 = (_1308 * cbModelParam._m0[1u].x) + (_1297 * (1.0 - cbModelParam._m0[1u].x));
    float _1322 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _335);
    float _1323 = isnan(_1322) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1322 : min(cbModelParam._m0[25u].z, _1322));
    float _1404;
    float _1406;
    float _1408;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1371 = fma(_574, cbModelParam._m0[13u].z, fma(_570, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _566)) + cbModelParam._m0[13u].w;
        float _1375 = fma(_574, cbModelParam._m0[14u].z, fma(_570, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _566)) + cbModelParam._m0[14u].w;
        float _1379 = fma(_574, cbModelParam._m0[15u].z, fma(_570, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _566)) + cbModelParam._m0[15u].w;
        float _1382 = fma(_512, cbModelParam._m0[13u].z, fma(_511, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _510));
        float _1385 = fma(_512, cbModelParam._m0[14u].z, fma(_511, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _510));
        float _1388 = fma(_512, cbModelParam._m0[15u].z, fma(_511, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _510));
        float _1416;
        if (_1382 > 0.0)
        {
            _1416 = abs((1.0 - _1371) / _1382);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1382 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1371 + 1.0) / _1382);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1416 = frontier_phi_14_12_ladder;
        }
        float _1622;
        if (_1385 > 0.0)
        {
            _1622 = abs((1.0 - _1375) / _1385);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1385 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1375 + 1.0) / _1385);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1622 = frontier_phi_23_19_ladder;
        }
        float _1876;
        if (_1388 > 0.0)
        {
            _1876 = abs((1.0 - _1379) / _1388);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1388 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1379 + 1.0) / _1388);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1876 = frontier_phi_35_30_ladder;
        }
        float _1878 = isnan(_1622) ? _1416 : (isnan(_1416) ? _1622 : min(_1416, _1622));
        float _1879 = isnan(_1876) ? _1878 : (isnan(_1878) ? _1876 : min(_1878, _1876));
        float _1883 = (_1879 * _1382) + _1371;
        float _1884 = (_1879 * _1385) + _1375;
        float _1885 = (_1879 * _1388) + _1379;
        float _1886 = _1879 * 9.9999997473787516355514526367188e-05;
        float _1888 = (-1.0) - _1886;
        float _1890 = _1886 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1885 > _1890) || ((_1885 < _1888) || ((_1884 > _1890) || ((_1884 < _1888) || ((_1883 < _1888) || (_1883 > _1890))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2013 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1885, cbModelParam._m0[9u].z, fma(_1884, cbModelParam._m0[9u].y, _1883 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1885, cbModelParam._m0[10u].z, fma(_1884, cbModelParam._m0[10u].y, _1883 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1885, cbModelParam._m0[11u].z, fma(_1884, cbModelParam._m0[11u].y, _1883 * cbModelParam._m0[11u].x))), _1323);
            frontier_phi_13_35_ladder = _2013.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2013.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2013.x * cbModelParam._m0[1u].y;
        }
        _1404 = frontier_phi_13_35_ladder_2;
        _1406 = frontier_phi_13_35_ladder_1;
        _1408 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1392 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_510, _511, _512), _1323);
        _1404 = _1392.x * cbModelParam._m0[1u].y;
        _1406 = _1392.y * cbModelParam._m0[1u].y;
        _1408 = _1392.z * cbModelParam._m0[1u].y;
    }
    float _1412 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _335);
    float _1413 = isnan(_1412) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1412 : min(cbModelParam._m0[25u].w, _1412));
    float _1505;
    float _1507;
    float _1509;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1469 = fma(_574, cbModelParam._m0[21u].z, fma(_570, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _566)) + cbModelParam._m0[21u].w;
        float _1473 = fma(_574, cbModelParam._m0[22u].z, fma(_570, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _566)) + cbModelParam._m0[22u].w;
        float _1477 = fma(_574, cbModelParam._m0[23u].z, fma(_570, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _566)) + cbModelParam._m0[23u].w;
        float _1480 = fma(_512, cbModelParam._m0[21u].z, fma(_511, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _510));
        float _1483 = fma(_512, cbModelParam._m0[22u].z, fma(_511, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _510));
        float _1486 = fma(_512, cbModelParam._m0[23u].z, fma(_511, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _510));
        float _1627;
        if (_1480 > 0.0)
        {
            _1627 = abs((1.0 - _1469) / _1480);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1469 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1627 = frontier_phi_25_21_ladder;
        }
        float _1903;
        if (_1483 > 0.0)
        {
            _1903 = abs((1.0 - _1473) / _1483);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1473 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1903 = frontier_phi_37_32_ladder;
        }
        float _2116;
        if (_1486 > 0.0)
        {
            _2116 = abs((1.0 - _1477) / _1486);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1477 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2116 = frontier_phi_46_43_ladder;
        }
        float _2118 = isnan(_1903) ? _1627 : (isnan(_1627) ? _1903 : min(_1627, _1903));
        float _2119 = isnan(_2116) ? _2118 : (isnan(_2118) ? _2116 : min(_2118, _2116));
        float _2123 = (_2119 * _1480) + _1469;
        float _2124 = (_2119 * _1483) + _1473;
        float _2125 = (_2119 * _1486) + _1477;
        float _2126 = _2119 * 9.9999997473787516355514526367188e-05;
        float _2127 = (-1.0) - _2126;
        float _2129 = _2126 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2125 > _2129) || ((_2125 < _2127) || ((_2124 > _2129) || ((_2124 < _2127) || ((_2123 < _2127) || (_2123 > _2129))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2359 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2125, cbModelParam._m0[17u].z, fma(_2124, cbModelParam._m0[17u].y, _2123 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2125, cbModelParam._m0[18u].z, fma(_2124, cbModelParam._m0[18u].y, _2123 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2125, cbModelParam._m0[19u].z, fma(_2124, cbModelParam._m0[19u].y, _2123 * cbModelParam._m0[19u].x))), _1413);
            frontier_phi_22_46_ladder = _2359.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2359.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2359.x * cbModelParam._m0[1u].z;
        }
        _1505 = frontier_phi_22_46_ladder_2;
        _1507 = frontier_phi_22_46_ladder_1;
        _1509 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1489 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_510, _511, _512), _1413);
        _1505 = _1489.x * cbModelParam._m0[1u].z;
        _1507 = _1489.y * cbModelParam._m0[1u].z;
        _1509 = _1489.z * cbModelParam._m0[1u].z;
    }
    float _1522 = (((_537 * _487) + _538) * _502) * ((cbModelParam._m0[1u].w * (_1505 - _1404)) + _1404);
    float _1524 = (((_537 * _489) + _538) * _502) * ((cbModelParam._m0[1u].w * (_1507 - _1406)) + _1406);
    float _1526 = (((_537 * _490) + _538) * _502) * ((cbModelParam._m0[1u].w * (_1509 - _1408)) + _1408);
    float _1529 = fma(_1526, cbSceneParam._m0[89u].z, fma(_1524, cbSceneParam._m0[89u].y, _1522 * cbSceneParam._m0[89u].x));
    float _1532 = fma(_1526, cbSceneParam._m0[90u].z, fma(_1524, cbSceneParam._m0[90u].y, _1522 * cbSceneParam._m0[90u].x));
    float _1535 = fma(_1526, cbSceneParam._m0[91u].z, fma(_1524, cbSceneParam._m0[91u].y, _1522 * cbSceneParam._m0[91u].x));
    uvec4 _1545 = floatBitsToUint(cbInstanceData._m0[_462 + 5u]);
    uint _1547 = _1545.x * 14u;
    uint _1548 = _1547 + 13u;
    float _1555 = _502 + (-1.0);
    float _1560 = (cbLight._m0[_1548].x * _1555) + 1.0;
    float _1561 = (cbLight._m0[_1548].y * _1555) + 1.0;
    float _1562 = (cbLight._m0[_1548].z * _1555) + 1.0;
    float _1563 = (cbLight._m0[_1548].w * _1555) + 1.0;
    uint _1564 = _1547 + 5u;
    float _1570 = isnan(1.0) ? _1561 : (isnan(_1561) ? 1.0 : min(_1561, 1.0));
    uint _1574 = _1547 + 4u;
    float _1581 = isnan(1.0) ? _1560 : (isnan(_1560) ? 1.0 : min(_1560, 1.0));
    uint _1585 = _1547 | 1u;
    float _1596 = dot(vec3(cbLight._m0[_1547].xyz), vec3(_332, _333, _334));
    float _1599 = dot(vec3(cbLight._m0[_1585].xyz), vec3(_332, _333, _334));
    float _3733 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
    float _3744 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
    float _1604 = (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * 0.3183098733425140380859375;
    float _1606 = (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * 0.3183098733425140380859375;
    float _1613 = ((cbLight._m0[_1564].x * _1570) * _1606) + ((cbLight._m0[_1574].x * _1581) * _1604);
    float _1614 = ((_1570 * cbLight._m0[_1564].y) * _1606) + ((_1581 * cbLight._m0[_1574].y) * _1604);
    float _1615 = ((_1570 * cbLight._m0[_1564].z) * _1606) + ((_1581 * cbLight._m0[_1574].z) * _1604);
    uvec4 _1619 = floatBitsToUint(cbLight._m0[_1547 + 12u]);
    bool _1621 = _1619.x == 0u;
    float _1632;
    float _1634;
    float _1636;
    if (_1621)
    {
        _1632 = _1613;
        _1634 = _1614;
        _1636 = _1615;
    }
    else
    {
        uint _1640 = _1547 + 6u;
        float _1656 = (dot(vec3(cbLight._m0[_1547 + 2u].xyz), vec3(_332, _333, _334)) * 0.5) + 0.5;
        float _1657 = _1656 * _1656;
        float _3755 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1659 = isnan(1.0) ? _1562 : (isnan(_1562) ? 1.0 : min(_1562, 1.0));
        _1632 = (((cbLight._m0[_1640].x * 0.3183098733425140380859375) * _1658) * _1659) + _1613;
        _1634 = (((cbLight._m0[_1640].y * 0.3183098733425140380859375) * _1658) * _1659) + _1614;
        _1636 = (((cbLight._m0[_1640].z * 0.3183098733425140380859375) * _1658) * _1659) + _1615;
    }
    bool _1639 = _1619.y == 0u;
    float _1677;
    float _1679;
    float _1681;
    if (_1639)
    {
        _1677 = _1632;
        _1679 = _1634;
        _1681 = _1636;
    }
    else
    {
        uint _1847 = _1547 + 7u;
        float _1863 = (dot(vec3(cbLight._m0[_1547 + 3u].xyz), vec3(_332, _333, _334)) * 0.5) + 0.5;
        float _1864 = _1863 * _1863;
        float _3771 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1865 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1866 = isnan(1.0) ? _1563 : (isnan(_1563) ? 1.0 : min(_1563, 1.0));
        _1677 = (((cbLight._m0[_1847].x * 0.3183098733425140380859375) * _1865) * _1866) + _1632;
        _1679 = (((cbLight._m0[_1847].y * 0.3183098733425140380859375) * _1865) * _1866) + _1634;
        _1681 = (((cbLight._m0[_1847].z * 0.3183098733425140380859375) * _1865) * _1866) + _1636;
    }
    uint _1684 = _1547 + 8u;
    float _1697 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1547].w)) * _335) * 0.949999988079071044921875);
    float _1698 = _1697 * _1697;
    float _1699 = cbLight._m0[_1547].x + _413;
    float _1700 = cbLight._m0[_1547].y + _414;
    float _1701 = cbLight._m0[_1547].z + _415;
    float _1705 = inversesqrt(dot(vec3(_1699, _1700, _1701), vec3(_1699, _1700, _1701)));
    float _1706 = _1705 * _1699;
    float _1707 = _1705 * _1700;
    float _1708 = _1705 * _1701;
    float _1709 = dot(vec3(_332, _333, _334), vec3(cbLight._m0[_1547].xyz));
    float _3787 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1712 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _3798 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _1713 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _1714 = dot(vec3(_332, _333, _334), vec3(_1706, _1707, _1708));
    float _3809 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _1717 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _1718 = dot(vec3(cbLight._m0[_1547].xyz), vec3(_1706, _1707, _1708));
    float _3820 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1722 = _1698 * _1698;
    float _1726 = ((_1717 * _1717) * (_1722 + (-1.0))) + 1.0;
    float _1734 = exp2(log2(1.0 - (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0)))) * 5.0);
    float _1735 = 0.959999978542327880859375 - _484;
    float _1737 = 0.959999978542327880859375 - _485;
    float _1738 = 0.959999978542327880859375 - _486;
    float _1745 = 1.0 - _1698;
    float _1756 = (0.5 / (((_1713 * ((_1712 * _1745) + _1698)) + 9.9999999392252902907785028219223e-09) + (((_1713 * _1745) + _1698) * _1712))) * _1712;
    float _3831 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1758 = (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1722 / ((_1726 * _1726) * 3.141590118408203125));
    uint _1769 = _1547 + 9u;
    float _1780 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1585].w)) * _335) * 0.949999988079071044921875);
    float _1781 = _1780 * _1780;
    float _1782 = cbLight._m0[_1585].x + _413;
    float _1783 = cbLight._m0[_1585].y + _414;
    float _1784 = cbLight._m0[_1585].z + _415;
    float _1788 = inversesqrt(dot(vec3(_1782, _1783, _1784), vec3(_1782, _1783, _1784)));
    float _1789 = _1788 * _1782;
    float _1790 = _1788 * _1783;
    float _1791 = _1788 * _1784;
    float _1792 = dot(vec3(_332, _333, _334), vec3(cbLight._m0[_1585].xyz));
    float _3842 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1795 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _1796 = dot(vec3(_332, _333, _334), vec3(_1789, _1790, _1791));
    float _3853 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1799 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _1800 = dot(vec3(cbLight._m0[_1585].xyz), vec3(_1789, _1790, _1791));
    float _3864 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1804 = _1781 * _1781;
    float _1808 = ((_1799 * _1799) * (_1804 + (-1.0))) + 1.0;
    float _1815 = exp2(log2(1.0 - (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) * 5.0);
    float _1822 = 1.0 - _1781;
    float _1832 = (0.5 / (((_1713 * ((_1795 * _1822) + _1781)) + 9.9999999392252902907785028219223e-09) + (((_1713 * _1822) + _1781) * _1795))) * _1795;
    float _3875 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1834 = (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1804 / ((_1808 * _1808) * 3.141590118408203125));
    float _1844 = (((((_1815 * _1735) + _487) * cbLight._m0[_1769].x) * _1834) * _1570) + (((((_1734 * _1735) + _487) * cbLight._m0[_1684].x) * _1758) * _1581);
    float _1845 = (((((_1815 * _1737) + _489) * cbLight._m0[_1769].y) * _1834) * _1570) + (((((_1734 * _1737) + _489) * cbLight._m0[_1684].y) * _1758) * _1581);
    float _1846 = (((((_1815 * _1738) + _490) * cbLight._m0[_1769].z) * _1834) * _1570) + (((((_1734 * _1738) + _490) * cbLight._m0[_1684].z) * _1758) * _1581);
    float _1908;
    float _1910;
    float _1912;
    if (_1621)
    {
        _1908 = _1844;
        _1910 = _1845;
        _1912 = _1846;
    }
    else
    {
        uint _1914 = _1547 + 2u;
        uint _1918 = _1547 + 10u;
        float _1932 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1914].w)) * _335) * 0.949999988079071044921875);
        float _1933 = _1932 * _1932;
        float _1934 = cbLight._m0[_1914].x + _413;
        float _1935 = cbLight._m0[_1914].y + _414;
        float _1936 = cbLight._m0[_1914].z + _415;
        float _1940 = inversesqrt(dot(vec3(_1934, _1935, _1936), vec3(_1934, _1935, _1936)));
        float _1941 = _1940 * _1934;
        float _1942 = _1940 * _1935;
        float _1943 = _1940 * _1936;
        float _1944 = dot(vec3(_332, _333, _334), vec3(cbLight._m0[_1914].xyz));
        float _3886 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1947 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1948 = dot(vec3(_332, _333, _334), vec3(_1941, _1942, _1943));
        float _3897 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1951 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1952 = dot(vec3(cbLight._m0[_1914].xyz), vec3(_1941, _1942, _1943));
        float _3908 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        float _1956 = _1933 * _1933;
        float _1960 = ((_1951 * _1951) * (_1956 + (-1.0))) + 1.0;
        float _1967 = exp2(log2(1.0 - (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) * 5.0);
        float _1974 = 1.0 - _1933;
        float _1984 = (0.5 / (((_1713 * ((_1947 * _1974) + _1933)) + 9.9999999392252902907785028219223e-09) + (((_1713 * _1974) + _1933) * _1947))) * _1947;
        float _3919 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1986 = (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1956 / ((_1960 * _1960) * 3.141590118408203125));
        float _1987 = isnan(1.0) ? _1562 : (isnan(_1562) ? 1.0 : min(_1562, 1.0));
        _1908 = (((((_1967 * _1735) + _487) * cbLight._m0[_1918].x) * _1986) * _1987) + _1844;
        _1910 = (((((_1967 * _1737) + _489) * cbLight._m0[_1918].y) * _1986) * _1987) + _1845;
        _1912 = (((((_1967 * _1738) + _490) * cbLight._m0[_1918].z) * _1986) * _1987) + _1846;
    }
    float _2022;
    float _2024;
    float _2026;
    if (_1639)
    {
        _2022 = _1908;
        _2024 = _1910;
        _2026 = _1912;
    }
    else
    {
        uint _2033 = _1547 + 3u;
        uint _2037 = _1547 + 11u;
        float _2051 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2033].w)) * _335) * 0.949999988079071044921875);
        float _2052 = _2051 * _2051;
        float _2053 = cbLight._m0[_2033].x + _413;
        float _2054 = cbLight._m0[_2033].y + _414;
        float _2055 = cbLight._m0[_2033].z + _415;
        float _2059 = inversesqrt(dot(vec3(_2053, _2054, _2055), vec3(_2053, _2054, _2055)));
        float _2060 = _2059 * _2053;
        float _2061 = _2059 * _2054;
        float _2062 = _2059 * _2055;
        float _2063 = dot(vec3(_332, _333, _334), vec3(cbLight._m0[_2033].xyz));
        float _3935 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2066 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _2067 = dot(vec3(_332, _333, _334), vec3(_2060, _2061, _2062));
        float _3946 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2070 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _2071 = dot(vec3(cbLight._m0[_2033].xyz), vec3(_2060, _2061, _2062));
        float _3957 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2075 = _2052 * _2052;
        float _2079 = ((_2070 * _2070) * (_2075 + (-1.0))) + 1.0;
        float _2086 = exp2(log2(1.0 - (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) * 5.0);
        float _2093 = 1.0 - _2052;
        float _2103 = (0.5 / (((_1713 * ((_2066 * _2093) + _2052)) + 9.9999999392252902907785028219223e-09) + (((_1713 * _2093) + _2052) * _2066))) * _2066;
        float _3968 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2105 = (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_2075 / ((_2079 * _2079) * 3.141590118408203125));
        float _2106 = isnan(1.0) ? _1563 : (isnan(_1563) ? 1.0 : min(_1563, 1.0));
        _2022 = (((((_2086 * _1735) + _487) * cbLight._m0[_2037].x) * _2105) * _2106) + _1908;
        _2024 = (((((_2086 * _1737) + _489) * cbLight._m0[_2037].y) * _2105) * _2106) + _1910;
        _2026 = (((((_2086 * _1738) + _490) * cbLight._m0[_2037].z) * _2105) * _2106) + _1912;
    }
    float _2241;
    float _2243;
    float _2245;
    float _2247;
    float _2249;
    float _2251;
    if (_1545.y == 0u)
    {
        float _2181 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2182 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2181;
        float _2183 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2181;
        float _2184 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2181;
        uvec4 _2196 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2197 = _2196.x;
        uint _2208 = uint((float(_2196.y) * floor(float(uint(cbSceneParam._m0[85u].y * _422) / _2197))) + floor(float(uint(cbSceneParam._m0[85u].x * _421) / _2197)));
        float _2218 = (log2(_2184 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2219 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        uint _2222 = uint(isnan(14.0) ? _2219 : (isnan(_2219) ? 14.0 : min(_2219, 14.0)));
        uvec4 _2227 = texelFetch(g_lightClusterGridBuffer, int(((_2222 << 2u) + (_2208 << 6u)) >> 2u));
        uint _2228 = _2227.x;
        uint _2229 = _2196.z;
        float _2364;
        float _2366;
        float _2368;
        float _2370;
        float _2372;
        float _2374;
        if (((((1u << ((_2229 >> 4u) & 15u)) + 4294967295u) & _2228) == 0u) || ((_2229 & 240u) == 0u))
        {
            _2364 = 0.0;
            _2366 = 0.0;
            _2368 = 0.0;
            _2370 = 0.0;
            _2372 = 0.0;
            _2374 = 0.0;
        }
        else
        {
            float _2365;
            float _2367;
            float _2369;
            float _2371;
            float _2373;
            float _2375;
            float _2518 = 0.0;
            float _2519 = 0.0;
            float _2520 = 0.0;
            float _2521 = 0.0;
            float _2522 = 0.0;
            float _2523 = 0.0;
            uint _2524 = 0u;
            uint _2533;
            bool _2534;
            for (;;)
            {
                _2533 = texelFetch(g_lightClassification, int((((_2222 << 5u) + (_2208 << 9u)) + (_2524 << 2u)) >> 2u)).x;
                _2534 = _2533 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2534)
                {
                    frontier_phi_61_pred = _2518;
                    frontier_phi_61_pred_1 = _2523;
                    frontier_phi_61_pred_2 = _2522;
                    frontier_phi_61_pred_3 = _2521;
                    frontier_phi_61_pred_4 = _2520;
                    frontier_phi_61_pred_5 = _2519;
                }
                else
                {
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    float _2647;
                    uint _2648;
                    _2642 = _2518;
                    _2643 = _2519;
                    _2644 = _2520;
                    _2645 = _2521;
                    _2646 = _2522;
                    _2647 = _2523;
                    _2648 = _2533;
                    float _2574;
                    float _2575;
                    float _2576;
                    float _2577;
                    float _2578;
                    float _2579;
                    for (;;)
                    {
                        uint _2652 = uint(findLSB(_2648)) + (_2524 << 5u);
                        uint _2649 = (_2648 + 4294967295u) & _2648;
                        uint _2654 = _2652 * 48u;
                        vec4 _2668 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2654)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 3u)).x));
                        uint _2674 = (_2652 * 48u) + 4u;
                        vec4 _2687 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2674)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 3u)).x));
                        uint _2693 = (_2652 * 48u) + 8u;
                        vec3 _2704 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2693)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 2u)).x));
                        float _2708 = _2668.x - _2182;
                        float _2709 = _2668.y - _2183;
                        float _2710 = _2668.z - _2184;
                        float _2711 = dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710));
                        float _2714 = inversesqrt(_2711);
                        float _2715 = _2714 * _2708;
                        float _2716 = _2714 * _2709;
                        float _2717 = _2714 * _2710;
                        float _2718 = dot(vec3(_443, _446, _449), vec3(_2715, _2716, _2717));
                        float _2723 = 1.0 - (_2711 * _2668.w);
                        float _3994 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
                        float _2724 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
                        float _2725 = sqrt(_2711) * _2687.w;
                        float _2728 = 1.39999997615814208984375 / (_2725 + 1.39999997615814208984375);
                        float _2729 = _2728 * _2728;
                        float _2732 = ((1.0 - _2729) * _2718) + _2729;
                        float _2735 = _2725 * _2725;
                        float _2739 = ((isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0))) * _2724) / ((_2735 * 0.699999988079071044921875) + 1.0);
                        float _2743 = (-0.0) - _2182;
                        float _2744 = (-0.0) - _2183;
                        float _2745 = (-0.0) - _2184;
                        float _2749 = inversesqrt(dot(vec3(_2743, _2744, _2745), vec3(_2743, _2744, _2745)));
                        float _2750 = _2749 * _2743;
                        float _2751 = _2749 * _2744;
                        float _2752 = _2749 * _2745;
                        float _2760 = exp2(log2(1.0 / ((_2735 * 3.5) + 5.0)) * 0.25);
                        float _2761 = 1.0 - _518;
                        float _2768 = sqrt(1.0 - ((1.0 - (_2761 * _2761)) * (1.0 - (_2760 * _2760))));
                        float _2769 = _2768 * _2768;
                        float _2770 = _2769 * _2769;
                        float _2771 = _2750 + _2715;
                        float _2772 = _2751 + _2716;
                        float _2773 = _2752 + _2717;
                        float _2777 = inversesqrt(dot(vec3(_2771, _2772, _2773), vec3(_2771, _2772, _2773)));
                        float _2781 = dot(vec3(_443, _446, _449), vec3(_2750, _2751, _2752));
                        float _4010 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
                        float _2784 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
                        float _2785 = dot(vec3(_443, _446, _449), vec3(_2777 * _2771, _2777 * _2772, _2777 * _2773));
                        float _4021 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                        float _2788 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
                        float _2792 = ((_2788 * _2788) * (_2770 + (-1.0))) + 1.0;
                        float _2793 = _2728 * _2769;
                        float _2794 = _2793 * _2793;
                        float _2797 = ((1.0 - _2794) * _2718) + _2794;
                        float _4032 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                        float _2798 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
                        float _2799 = 1.0 - _2769;
                        float _2809 = (0.5 / (((_2798 * ((_2784 * _2799) + _2769)) + 9.9999999392252902907785028219223e-09) + (((_2798 * _2799) + _2769) * _2784))) * _2798;
                        float _4043 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
                        float _2820 = (((_2770 * 3.1415927410125732421875) * (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) / ((_2792 * _2792) * ((_2735 * 2.1991131305694580078125) + 3.141590118408203125))) * _2724;
                        _2577 = (_2739 * _2687.x) + _2645;
                        _2578 = (_2739 * _2687.y) + _2646;
                        _2579 = (_2739 * _2687.z) + _2647;
                        _2574 = (_2820 * _2704.x) + _2642;
                        _2575 = (_2820 * _2704.y) + _2643;
                        _2576 = (_2820 * _2704.z) + _2644;
                        if (_2649 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2642 = _2574;
                            _2643 = _2575;
                            _2644 = _2576;
                            _2645 = _2577;
                            _2646 = _2578;
                            _2647 = _2579;
                            _2648 = _2649;
                        }
                    }
                    frontier_phi_61_pred = _2574;
                    frontier_phi_61_pred_1 = _2579;
                    frontier_phi_61_pred_2 = _2578;
                    frontier_phi_61_pred_3 = _2577;
                    frontier_phi_61_pred_4 = _2576;
                    frontier_phi_61_pred_5 = _2575;
                }
                _2365 = frontier_phi_61_pred;
                _2375 = frontier_phi_61_pred_1;
                _2373 = frontier_phi_61_pred_2;
                _2371 = frontier_phi_61_pred_3;
                _2369 = frontier_phi_61_pred_4;
                _2367 = frontier_phi_61_pred_5;
                uint _2525 = _2524 + 1u;
                if (_2525 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2518 = _2365;
                    _2519 = _2367;
                    _2520 = _2369;
                    _2521 = _2371;
                    _2522 = _2373;
                    _2523 = _2375;
                    _2524 = _2525;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2364 = _2365;
            _2366 = _2367;
            _2368 = _2369;
            _2370 = _2371;
            _2372 = _2373;
            _2374 = _2375;
        }
        uvec4 _2378 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2379 = _2378.z;
        uint _2381 = (_2379 >> 8u) & 15u;
        float _2486;
        float _2488;
        float _2490;
        float _2492;
        float _2494;
        float _2496;
        if (((4294967295u << _2381) & _2228) == 0u)
        {
            _2486 = _2364;
            _2488 = _2366;
            _2490 = _2368;
            _2492 = _2370;
            _2494 = _2372;
            _2496 = _2374;
        }
        else
        {
            float _2511 = inversesqrt(dot(vec3(_2182, _2183, _2184), vec3(_2182, _2183, _2184)));
            float _2512 = _2511 * _2182;
            float _2513 = _2511 * _2183;
            float _2514 = _2511 * _2184;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2381 < ((_2379 >> 12u) & 15u))
            {
                float _2487;
                float _2489;
                float _2491;
                float _2493;
                float _2495;
                float _2497;
                float _2625 = _2364;
                float _2626 = _2366;
                float _2627 = _2368;
                float _2628 = _2370;
                float _2629 = _2372;
                float _2630 = _2374;
                uint _2631 = _2381;
                uint _2640;
                bool _2641;
                for (;;)
                {
                    _2640 = texelFetch(g_lightClassification, int((((_2222 << 5u) + (_2208 << 9u)) + (_2631 << 2u)) >> 2u)).x;
                    _2641 = _2640 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2641)
                    {
                        frontier_phi_67_pred = _2628;
                        frontier_phi_67_pred_1 = _2629;
                        frontier_phi_67_pred_2 = _2630;
                        frontier_phi_67_pred_3 = _2627;
                        frontier_phi_67_pred_4 = _2626;
                        frontier_phi_67_pred_5 = _2625;
                    }
                    else
                    {
                        float _2825;
                        float _2826;
                        float _2827;
                        float _2828;
                        float _2829;
                        float _2830;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _2838 = _2625;
                        float _2839 = _2626;
                        float _2840 = _2627;
                        float _2841 = _2628;
                        float _2842 = _2629;
                        float _2843 = _2630;
                        uint _2844 = _2640;
                        uint _2845;
                        vec4 _2870;
                        float _2871;
                        vec4 _2886;
                        vec3 _2898;
                        vec4 _2914;
                        vec4 _2930;
                        float _2977;
                        bool _2978;
                        for (;;)
                        {
                            uint _2855 = ((_2631 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2844));
                            _2845 = (_2844 + 4294967295u) & _2844;
                            uint _2857 = _2855 * 40u;
                            _2870 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2857)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 3u)).x));
                            _2871 = _2870.w;
                            uint _2873 = (_2855 * 40u) + 4u;
                            _2886 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2873)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 3u)).x));
                            uint _2888 = (_2855 * 40u) + 8u;
                            _2898 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2888)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 2u)).x));
                            uint _2901 = (_2855 * 40u) + 16u;
                            _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            uint _2917 = (_2855 * 40u) + 20u;
                            _2930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 3u)).x));
                            uint _2933 = (_2855 * 40u) + 24u;
                            vec4 _2946 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 3u)).x));
                            uint _2952 = (_2855 * 40u) + 28u;
                            vec4 _2965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 3u)).x));
                            _2977 = fma(_2184, _2965.z, fma(_2183, _2965.y, _2965.x * _2182)) + _2965.w;
                            _2978 = !((fma(_2184, _2946.z, fma(_2183, _2946.y, _2946.x * _2182)) + _2946.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2978)
                            {
                                float _3005 = _2870.x - _2182;
                                float _3006 = _2870.y - _2183;
                                float _3007 = _2870.z - _2184;
                                float _3008 = dot(vec3(_3005, _3006, _3007), vec3(_3005, _3006, _3007));
                                float _3011 = inversesqrt(_3008);
                                float _3012 = _3011 * _3005;
                                float _3013 = _3011 * _3006;
                                float _3014 = _3011 * _3007;
                                float _3018 = 1.0 - (_3008 / (_2871 * _2871));
                                float _4054 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                                float _3019 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
                                float _3023 = sqrt(_3008) * _2886.w;
                                float _3025 = 1.39999997615814208984375 / (_3023 + 1.39999997615814208984375);
                                float _3026 = _3025 * _3025;
                                float _3029 = ((1.0 - _3026) * dot(vec3(_3012, _3013, _3014), vec3(_443, _446, _449))) + _3026;
                                float _3032 = _3023 * _3023;
                                float _3036 = (fma(_2184, _2914.z, fma(_2183, _2914.y, _2914.x * _2182)) + _2914.w) / _2977;
                                float _3037 = (fma(_2184, _2930.z, fma(_2183, _2930.y, _2930.x * _2182)) + _2930.w) / _2977;
                                float _3041 = 1.0 - dot(vec2(_3036, _3037), vec2(_3036, _3037));
                                float _4070 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                                float _3042 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                                float _3043 = _3042 * (((isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0))) * _3019) / ((_3032 * 0.699999988079071044921875) + 1.0));
                                float _3055 = exp2(log2(1.0 / ((_3032 * 3.5) + 5.0)) * 0.25);
                                float _3056 = 1.0 - _518;
                                float _3063 = sqrt(1.0 - ((1.0 - (_3056 * _3056)) * (1.0 - (_3055 * _3055))));
                                float _3064 = _3063 * _3063;
                                float _3065 = _3064 * _3064;
                                float _3066 = _3012 - _2512;
                                float _3067 = _3013 - _2513;
                                float _3068 = _3014 - _2514;
                                float _3072 = inversesqrt(dot(vec3(_3066, _3067, _3068), vec3(_3066, _3067, _3068)));
                                float _3076 = dot(vec3(_443, _446, _449), vec3((-0.0) - _2512, (-0.0) - _2513, (-0.0) - _2514));
                                float _4081 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                                float _3079 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                                float _3080 = dot(vec3(_443, _446, _449), vec3(_3072 * _3066, _3072 * _3067, _3072 * _3068));
                                float _4092 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                                float _3083 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                                float _3087 = ((_3083 * _3083) * (_3065 + (-1.0))) + 1.0;
                                float _3088 = _3025 * _3064;
                                float _3089 = _3088 * _3088;
                                float _3095 = ((1.0 - _3089) * dot(vec3(_443, _446, _449), vec3(_3012, _3013, _3014))) + _3089;
                                float _4103 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                                float _3096 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
                                float _3097 = 1.0 - _3064;
                                float _3107 = (0.5 / (((_3096 * ((_3079 * _3097) + _3064)) + 9.9999999392252902907785028219223e-09) + (((_3096 * _3097) + _3064) * _3079))) * _3096;
                                float _4114 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                                float _3117 = (_3042 * _3019) * (((_3065 * 3.1415927410125732421875) * (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) / ((_3087 * _3087) * ((_3032 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3117 * _2898.x;
                                frontier_phi_73_pred_1 = _3117 * _2898.y;
                                frontier_phi_73_pred_2 = _3043 * _2886.z;
                                frontier_phi_73_pred_3 = _3043 * _2886.y;
                                frontier_phi_73_pred_4 = _3043 * _2886.x;
                                frontier_phi_73_pred_5 = _3117 * _2898.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3121 = frontier_phi_73_pred;
                            _3122 = frontier_phi_73_pred_1;
                            _3126 = frontier_phi_73_pred_2;
                            _3125 = frontier_phi_73_pred_3;
                            _3124 = frontier_phi_73_pred_4;
                            _3123 = frontier_phi_73_pred_5;
                            _2828 = _3124 + _2841;
                            _2829 = _3125 + _2842;
                            _2830 = _3126 + _2843;
                            _2825 = _3121 + _2838;
                            _2826 = _3122 + _2839;
                            _2827 = _3123 + _2840;
                            if (_2845 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2838 = _2825;
                                _2839 = _2826;
                                _2840 = _2827;
                                _2841 = _2828;
                                _2842 = _2829;
                                _2843 = _2830;
                                _2844 = _2845;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2828;
                        frontier_phi_67_pred_1 = _2829;
                        frontier_phi_67_pred_2 = _2830;
                        frontier_phi_67_pred_3 = _2827;
                        frontier_phi_67_pred_4 = _2826;
                        frontier_phi_67_pred_5 = _2825;
                    }
                    _2493 = frontier_phi_67_pred;
                    _2495 = frontier_phi_67_pred_1;
                    _2497 = frontier_phi_67_pred_2;
                    _2491 = frontier_phi_67_pred_3;
                    _2489 = frontier_phi_67_pred_4;
                    _2487 = frontier_phi_67_pred_5;
                    uint _2632 = _2631 + 1u;
                    if (_2632 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2625 = _2487;
                        _2626 = _2489;
                        _2627 = _2491;
                        _2628 = _2493;
                        _2629 = _2495;
                        _2630 = _2497;
                        _2631 = _2632;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2495;
                frontier_phi_55_56_ladder_1 = _2497;
                frontier_phi_55_56_ladder_2 = _2493;
                frontier_phi_55_56_ladder_3 = _2491;
                frontier_phi_55_56_ladder_4 = _2489;
                frontier_phi_55_56_ladder_5 = _2487;
            }
            else
            {
                frontier_phi_55_56_ladder = _2372;
                frontier_phi_55_56_ladder_1 = _2374;
                frontier_phi_55_56_ladder_2 = _2370;
                frontier_phi_55_56_ladder_3 = _2368;
                frontier_phi_55_56_ladder_4 = _2366;
                frontier_phi_55_56_ladder_5 = _2364;
            }
            _2486 = frontier_phi_55_56_ladder_5;
            _2488 = frontier_phi_55_56_ladder_4;
            _2490 = frontier_phi_55_56_ladder_3;
            _2492 = frontier_phi_55_56_ladder_2;
            _2494 = frontier_phi_55_56_ladder;
            _2496 = frontier_phi_55_56_ladder_1;
        }
        float _2501 = isnan(1.0) ? _502 : (isnan(_502) ? 1.0 : min(_502, 1.0));
        _2241 = (_2501 * _2492) + _1677;
        _2243 = (_2501 * _2494) + _1679;
        _2245 = (_2501 * _2496) + _1681;
        _2247 = ((_2486 * _487) * _2501) + _2022;
        _2249 = ((_2488 * _489) * _2501) + _2024;
        _2251 = ((_2490 * _490) * _2501) + _2026;
    }
    else
    {
        _2241 = _1677;
        _2243 = _1679;
        _2245 = _1681;
        _2247 = _2022;
        _2249 = _2024;
        _2251 = _2026;
    }
    uint _2257 = _463 + uint(cbMatDynParam._m0[0u].w);
    float _2265 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _314.x) * cbInstanceData._m0[_2257].x;
    float _2268 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _314.y) * cbInstanceData._m0[_2257].y;
    float _2271 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _314.z) * cbInstanceData._m0[_2257].z;
    float _4130 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _4141 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _4152 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _2288 = (((isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_2241 + ((isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0))) * _502))) + ((_2247 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _1312)) * cbPerFrame._m0[3u].x)) + _2265;
    float _2290 = (_2268 + ((_2249 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _1312)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_2243 + ((isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0))) * _502)));
    float _2292 = (_2271 + ((_2251 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _1312)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_2245 + ((isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))) * _502)));
    float _4178 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2305 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    uint _2306 = _462 + 6u;
    float _2314 = _421 / cbSceneParam._m0[86u].x;
    float _2315 = _422 / cbSceneParam._m0[86u].y;
    vec4 _2329 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2314, _2315, (log2((isnan(cbSceneParam._m0[77u].w) ? _355 : (isnan(_355) ? cbSceneParam._m0[77u].w : min(_355, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2331 = _2329.x;
    float _2332 = _2329.y;
    float _2333 = _2329.z;
    float _2334 = _2329.w;
    float _2427;
    float _2429;
    float _2431;
    float _2433;
    if (_355 > cbSceneParam._m0[78u].w)
    {
        float _2389 = isnan(_355) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _355 : min(cbSceneParam._m0[80u].w, _355));
        float _2390 = _2389 / _355;
        float _2401 = _2390 * _406;
        float _2402 = _407 * _2390;
        float _2403 = (-0.0) - _2402;
        float _2405 = _2390 * _408;
        float _2407 = (cbSceneParam._m0[77u].w * _2403) / _2389;
        float _2408 = _2407 + cbSceneParam._m0[79u].w;
        float _2409 = cbSceneParam._m0[79u].w - _2402;
        float _2415 = sqrt(((_2401 * _2401) + (_2402 * _2402)) + (_2405 * _2405));
        float _2418 = (1.0 - (cbSceneParam._m0[77u].w / _2389)) * _2415;
        float _2423 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2425 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2587;
        if (abs((_2403 - _2407) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2587 = ((((_2408 > 0.0) ? exp2(_2423 * _2408) : (2.0 - exp2(_2425 * _2408))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2418;
        }
        else
        {
            float _2547 = 1.0 / cbSceneParam._m0[80u].x;
            float _2548 = isnan(_2409) ? _2408 : (isnan(_2408) ? _2409 : max(_2408, _2409));
            float _2549 = isnan(_2409) ? _2408 : (isnan(_2408) ? _2409 : min(_2408, _2409));
            float _2558 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : min(_2548, 0.0));
            float _2559 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : min(_2549, 0.0));
            _2587 = ((abs(_2415 / _2403) * cbSceneParam._m0[80u].y) * ((((_2558 - _2559) * 2.0) - ((exp2(_2423 * (isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0)))) - exp2(_2423 * (isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0))))) * _2547)) - ((exp2(_2425 * _2558) - exp2(_2425 * _2559)) * _2547))) + (_2418 * cbSceneParam._m0[80u].z);
        }
        vec4 _2589 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2314, _2315, 1.0), 0.0);
        float _2598 = exp2((_2587 * (-1.44269502162933349609375)) * (1.0 - _2589.w));
        float _2599 = log2(_2598);
        float _2615 = log2(_2334);
        _2427 = (exp2(_2615 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2599 * cbSceneParam._m0[78u].x)) * _2589.x) / cbSceneParam._m0[78u].x)) + _2331;
        _2429 = (exp2(_2615 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2599 * cbSceneParam._m0[78u].y)) * _2589.y) / cbSceneParam._m0[78u].y)) + _2332;
        _2431 = (exp2(_2615 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2599 * cbSceneParam._m0[78u].z)) * _2589.z) / cbSceneParam._m0[78u].z)) + _2333;
        _2433 = _2598 * _2334;
    }
    else
    {
        _2427 = _2331;
        _2429 = _2332;
        _2431 = _2333;
        _2433 = _2334;
    }
    float _2445 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2446 = _2445 == 3.0;
    float _2447 = log2(_2433);
    float _2451 = exp2(_2447 * cbSceneParam._m0[78u].x);
    float _2452 = exp2(_2447 * cbSceneParam._m0[78u].y);
    float _2453 = exp2(_2447 * cbSceneParam._m0[78u].z);
    float _2454 = _2451 * (isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0)));
    float _2455 = _2452 * (isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0)));
    float _2456 = _2453 * (isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0)));
    float _2465 = (_2445 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2465 * (_2446 ? _2454 : (_2454 + (cbSceneParam._m0[72u].w * _2427)));
    SV_Target.y = _2465 * (_2446 ? _2455 : (_2455 + (cbSceneParam._m0[72u].w * _2429)));
    SV_Target.z = _2465 * (_2446 ? _2456 : (_2456 + (cbSceneParam._m0[72u].w * _2431)));
    SV_Target.w = cbInstanceData._m0[_2306].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2265) * _2305) * _2451) * _2465;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2268) * _2305) * _2452) * _2465;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2271) * _2305) * _2453) * _2465;
    SV_Target_1.w = cbInstanceData._m0[_2306].w;
}


