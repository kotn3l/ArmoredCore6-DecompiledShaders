#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _891;
float _3305;
float _3306;
float _3307;
float _3308;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _228.x * cbMtdParam._m0[9u].x;
    float _235 = _228.y * cbMtdParam._m0[9u].y;
    float _236 = _228.z * cbMtdParam._m0[9u].z;
    vec4 _248 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _252 = _248.z;
    float _256 = (_248.x * 2.0) + (-1.0);
    float _258 = (_248.y * 2.0) + (-1.0);
    float _259 = dot(vec2(_256, _258), vec2(_256, _258));
    float _3317 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _265 = sqrt(1.0 - (isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0))));
    vec4 _287 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _301 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3328 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _302 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
    float _310 = (((_302 * _302) * (3.0 - (_302 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _313 = fma(_265, _199 * NORMAL.x, fma(_258, _206 * TANGENT.x, (_192 * _185) * _256));
    float _316 = fma(_265, _199 * NORMAL.y, fma(_258, _206 * TANGENT.y, (_192 * _186) * _256));
    float _319 = fma(_265, _199 * NORMAL.z, fma(_258, _206 * TANGENT.z, (_192 * _187) * _256));
    float _323 = inversesqrt(dot(vec3(_313, _316, _319), vec3(_313, _316, _319)));
    float _324 = _323 * _313;
    float _325 = _323 * _316;
    float _326 = _323 * _319;
    float _3339 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _327 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
    float _3350 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3361 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3372 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _346 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _387 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _397 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _387);
    float _398 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _387);
    float _399 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _387);
    float _403 = inversesqrt(dot(vec3(_397, _398, _399), vec3(_397, _398, _399)));
    float _404 = _397 * _403;
    float _405 = _398 * _403;
    float _406 = _399 * _403;
    vec4 _411 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _413 = _411.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _570 = sqrt(((_397 * _397) + (_398 * _398)) + (_399 * _399));
        float _576 = (cbMatDynParam._m0[5u].x * _570) + cbMatDynParam._m0[5u].y;
        float _3383 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
        float _577 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
        float _581 = (cbMatDynParam._m0[5u].z * _570) + cbMatDynParam._m0[5u].w;
        float _3394 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))) - _577)) + _577) < ((_413 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _425 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _426 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _446 = fma(_326, cbSceneParam._m0[5u].z, fma(_325, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _324));
    float _449 = fma(_326, cbSceneParam._m0[6u].z, fma(_325, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _324));
    float _452 = fma(_326, cbSceneParam._m0[7u].z, fma(_325, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _324));
    uint _465 = uint(roundEven(NORMAL.w)) * 13u;
    uint _467 = _465 + 9u;
    uint _468 = _467 + uint(cbMatDynParam._m0[0u].w);
    float _474 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0)))) * cbInstanceData._m0[_468].x;
    float _475 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0)))) * cbInstanceData._m0[_468].y;
    float _476 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0)))) * cbInstanceData._m0[_468].z;
    float _3405 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
    float _3416 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _478 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
    float _3427 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
    vec4 _488 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _425, cbSceneParam._m0[86u].y * _426));
    float _491 = _488.x * TEXCOORD.z;
    float _492 = dot(vec3(_324, _325, _326), vec3(_404, _405, _406));
    float _495 = _492 * 2.0;
    float _499 = (_495 * _324) - _404;
    float _500 = (_495 * _325) - _405;
    float _501 = (_495 * _326) - _406;
    float _505 = abs(dot(vec3(_404, _405, _406), vec3(_324, _325, _326)));
    float _3438 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _507 = sqrt(_327);
    float _519 = exp2((_507 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_507 * 3.0));
    float _551 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _555 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _559 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _890;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _615 = fma(_559, cbModelParam._m0[26u].z, fma(_555, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _551));
        float _619 = fma(_559, cbModelParam._m0[27u].z, fma(_555, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _551));
        float _623 = fma(_559, cbModelParam._m0[28u].z, fma(_555, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _551));
        float _648 = _551 + _324;
        float _649 = _555 + _325;
        float _650 = _559 + _326;
        float _660 = fma(_650, cbModelParam._m0[26u].z, fma(_649, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _648)) - _615;
        float _661 = fma(_650, cbModelParam._m0[27u].z, fma(_649, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _648)) - _619;
        float _662 = fma(_650, cbModelParam._m0[28u].z, fma(_649, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _648)) - _623;
        float _666 = inversesqrt(dot(vec3(_660, _661, _662), vec3(_660, _661, _662)));
        float _679 = ((_666 * _660) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_615 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _680 = ((_666 * _661) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_619 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _681 = ((_666 * _662) / cbModelParam._m0[34u].z) + ((((((_623 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _684 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        vec4 _691 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        vec4 _698 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        vec4 _705 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        float _718 = exp2((_684.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_684.x + (-0.5));
        float _720 = _718 * (_684.y + (-0.5));
        float _721 = _718 * (_684.z + (-0.5));
        float _728 = exp2((_691.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_691.x + (-0.5));
        float _730 = _728 * (_691.y + (-0.5));
        float _731 = _728 * (_691.z + (-0.5));
        float _738 = exp2((_698.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_698.x + (-0.5));
        float _740 = _738 * (_698.y + (-0.5));
        float _741 = _738 * (_698.z + (-0.5));
        float _748 = exp2((_705.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_705.x + (-0.5));
        float _750 = _748 * (_705.y + (-0.5));
        float _751 = _748 * (_705.z + (-0.5));
        float _752 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _753 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _754 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _755 = _719 * 0.5;
        float _756 = _729 * 0.5;
        float _757 = _739 * 0.5;
        float _758 = dot(vec3(_755, _756, _757), vec3(_755, _756, _757));
        float _763 = (_758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_758);
        float _772 = (dot(vec3(_324, _325, _326), vec3(_763 * _755, _763 * _756, _763 * _757)) + 1.0) * 0.5;
        float _3464 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _782 = sqrt(((_756 * _756) + (_755 * _755)) + (_757 * _757)) / (_752 + 9.9999997473787516355514526367188e-06);
        float _3475 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _784 = _783 * 2.0;
        float _788 = (1.0 - _783) / (_783 + 1.0);
        float _3486 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _798 = ((((1.0 - _789) * (_784 + 2.0)) * exp2(log2(isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * (_784 + 1.0))) + _789) * _752;
        float _799 = _720 * 0.5;
        float _800 = _730 * 0.5;
        float _801 = _740 * 0.5;
        float _802 = dot(vec3(_799, _800, _801), vec3(_799, _800, _801));
        float _807 = (_802 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_802);
        float _815 = (dot(vec3(_324, _325, _326), vec3(_807 * _799, _807 * _800, _807 * _801)) + 1.0) * 0.5;
        float _3497 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _824 = sqrt(((_800 * _800) + (_799 * _799)) + (_801 * _801)) / (_753 + 9.9999997473787516355514526367188e-06);
        float _3508 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _826 = _825 * 2.0;
        float _830 = (1.0 - _825) / (_825 + 1.0);
        float _3519 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _840 = ((((1.0 - _831) * (_826 + 2.0)) * exp2(log2(isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * (_826 + 1.0))) + _831) * _753;
        float _841 = _721 * 0.5;
        float _842 = _731 * 0.5;
        float _843 = _741 * 0.5;
        float _844 = dot(vec3(_841, _842, _843), vec3(_841, _842, _843));
        float _849 = (_844 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_844);
        float _857 = (dot(vec3(_324, _325, _326), vec3(_849 * _841, _849 * _842, _849 * _843)) + 1.0) * 0.5;
        float _3530 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _866 = sqrt(((_842 * _842) + (_841 * _841)) + (_843 * _843)) / (_754 + 9.9999997473787516355514526367188e-06);
        float _3541 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _868 = _867 * 2.0;
        float _872 = (1.0 - _867) / (_867 + 1.0);
        float _3552 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _882 = ((((1.0 - _873) * (_868 + 2.0)) * exp2(log2(isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * (_868 + 1.0))) + _873) * _754;
        _890 = _721;
        _892 = _720;
        _893 = _719;
        _894 = _731;
        _895 = _730;
        _896 = _729;
        _897 = _741;
        _898 = _740;
        _899 = _739;
        _900 = _754;
        _901 = _753;
        _902 = _752;
        _903 = cbModelParam._m0[36u].z * (isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0)));
        _904 = cbModelParam._m0[36u].z * (isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0)));
        _905 = cbModelParam._m0[36u].z * (isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0)));
    }
    else
    {
        _890 = _891;
        _892 = _891;
        _893 = _891;
        _894 = _891;
        _895 = _891;
        _896 = _891;
        _897 = _891;
        _898 = _891;
        _899 = _891;
        _900 = _891;
        _901 = _891;
        _902 = _891;
        _903 = 0.0;
        _904 = 0.0;
        _905 = 0.0;
    }
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _934 = fma(_559, cbModelParam._m0[30u].z, fma(_555, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _551));
        float _938 = fma(_559, cbModelParam._m0[31u].z, fma(_555, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _551));
        float _942 = fma(_559, cbModelParam._m0[32u].z, fma(_555, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _551));
        float _965 = _551 + _324;
        float _966 = _555 + _325;
        float _967 = _559 + _326;
        float _977 = fma(_967, cbModelParam._m0[30u].z, fma(_966, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _965)) - _934;
        float _978 = fma(_967, cbModelParam._m0[31u].z, fma(_966, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _965)) - _938;
        float _979 = fma(_967, cbModelParam._m0[32u].z, fma(_966, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _965)) - _942;
        float _983 = inversesqrt(dot(vec3(_977, _978, _979), vec3(_977, _978, _979)));
        float _996 = ((_983 * _977) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_934 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _997 = ((_983 * _978) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_938 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _998 = ((_983 * _979) / cbModelParam._m0[35u].z) + ((((((_942 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        float _1033 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_1000.x + (-0.5));
        float _1035 = _1033 * (_1000.y + (-0.5));
        float _1036 = _1033 * (_1000.z + (-0.5));
        float _1043 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1007.x + (-0.5));
        float _1045 = _1043 * (_1007.y + (-0.5));
        float _1046 = _1043 * (_1007.z + (-0.5));
        float _1053 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1014.x + (-0.5));
        float _1055 = _1053 * (_1014.y + (-0.5));
        float _1056 = _1053 * (_1014.z + (-0.5));
        float _1063 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1021.x + (-0.5));
        float _1065 = _1063 * (_1021.y + (-0.5));
        float _1066 = _1063 * (_1021.z + (-0.5));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = _1034 * 0.5;
        float _1071 = _1044 * 0.5;
        float _1072 = _1054 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1086 = (dot(vec3(_324, _325, _326), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3593 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1095 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3604 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _3615 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * (_1097 + 1.0))) + _1102) * _1067;
        float _1112 = _1035 * 0.5;
        float _1113 = _1045 * 0.5;
        float _1114 = _1055 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1128 = (dot(vec3(_324, _325, _326), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1137 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3648 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_1139 + 1.0))) + _1144) * _1068;
        float _1154 = _1036 * 0.5;
        float _1155 = _1046 * 0.5;
        float _1156 = _1056 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_324, _325, _326), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3659 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3670 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3681 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_1181 + 1.0))) + _1186) * _1069;
        _1203 = _1036;
        _1204 = _1035;
        _1205 = _1034;
        _1206 = _1046;
        _1207 = _1045;
        _1208 = _1044;
        _1209 = _1056;
        _1210 = _1055;
        _1211 = _1054;
        _1212 = _1069;
        _1213 = _1068;
        _1214 = _1067;
        _1215 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
        _1216 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
        _1217 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
    }
    else
    {
        _1203 = _891;
        _1204 = _891;
        _1205 = _891;
        _1206 = _891;
        _1207 = _891;
        _1208 = _891;
        _1209 = _891;
        _1210 = _891;
        _1211 = _891;
        _1212 = _891;
        _1213 = _891;
        _1214 = _891;
        _1215 = 0.0;
        _1216 = 0.0;
        _1217 = 0.0;
    }
    float _1227 = (cbModelParam._m0[1u].x * (_1215 - _903)) + _903;
    float _1228 = (cbModelParam._m0[1u].x * (_1216 - _904)) + _904;
    float _1229 = (cbModelParam._m0[1u].x * (_1217 - _905)) + _905;
    float _1250 = fma(_1229, cbSceneParam._m0[89u].z, fma(_1228, cbSceneParam._m0[89u].y, _1227 * cbSceneParam._m0[89u].x));
    float _1253 = fma(_1229, cbSceneParam._m0[90u].z, fma(_1228, cbSceneParam._m0[90u].y, _1227 * cbSceneParam._m0[90u].x));
    float _1256 = fma(_1229, cbSceneParam._m0[91u].z, fma(_1228, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1227));
    float _1271 = _499 * 0.5;
    float _1272 = _500 * 0.5;
    float _1273 = _501 * 0.5;
    float _1274 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_1205, _1208, _1211, _1214));
    float _1277 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_1204, _1207, _1210, _1213));
    float _1280 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_1203, _1206, _1209, _1212));
    float _1314;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1287 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_890, _894, _897, _900));
        float _1291 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_892, _895, _898, _901));
        float _1295 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_893, _896, _899, _902));
        float _1302 = dot(vec4(cbModelParam._m0[39u]), vec4(_1271, _1272, _1273, 1.0));
        _1314 = dot(vec3(isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1302) ? 0.0 : (isnan(0.0) ? _1302 : max(0.0, _1302))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1314 = 1.0;
    }
    float _1325;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1316 = dot(vec4(cbModelParam._m0[40u]), vec4(_1271, _1272, _1273, 1.0));
        _1325 = dot(vec3(isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)), isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)), isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1316) ? 0.0 : (isnan(0.0) ? _1316 : max(0.0, _1316))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1325 = 1.0;
    }
    float _1329 = (_1325 * cbModelParam._m0[1u].x) + (_1314 * (1.0 - cbModelParam._m0[1u].x));
    float _1339 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _327);
    float _1340 = isnan(_1339) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1339 : min(cbModelParam._m0[25u].z, _1339));
    float _1421;
    float _1423;
    float _1425;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1388 = fma(_559, cbModelParam._m0[13u].z, fma(_555, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _551)) + cbModelParam._m0[13u].w;
        float _1392 = fma(_559, cbModelParam._m0[14u].z, fma(_555, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _551)) + cbModelParam._m0[14u].w;
        float _1396 = fma(_559, cbModelParam._m0[15u].z, fma(_555, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _551)) + cbModelParam._m0[15u].w;
        float _1399 = fma(_501, cbModelParam._m0[13u].z, fma(_500, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _499));
        float _1402 = fma(_501, cbModelParam._m0[14u].z, fma(_500, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _499));
        float _1405 = fma(_501, cbModelParam._m0[15u].z, fma(_500, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _499));
        float _1433;
        if (_1399 > 0.0)
        {
            _1433 = abs((1.0 - _1388) / _1399);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1399 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1388 + 1.0) / _1399);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1433 = frontier_phi_17_15_ladder;
        }
        float _1637;
        if (_1402 > 0.0)
        {
            _1637 = abs((1.0 - _1392) / _1402);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1392 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1637 = frontier_phi_26_22_ladder;
        }
        float _1880;
        if (_1405 > 0.0)
        {
            _1880 = abs((1.0 - _1396) / _1405);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1396 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1880 = frontier_phi_38_33_ladder;
        }
        float _1882 = isnan(_1637) ? _1433 : (isnan(_1433) ? _1637 : min(_1433, _1637));
        float _1883 = isnan(_1880) ? _1882 : (isnan(_1882) ? _1880 : min(_1882, _1880));
        float _1887 = (_1883 * _1399) + _1388;
        float _1888 = (_1883 * _1402) + _1392;
        float _1889 = (_1883 * _1405) + _1396;
        float _1890 = _1883 * 9.9999997473787516355514526367188e-05;
        float _1892 = (-1.0) - _1890;
        float _1894 = _1890 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1889 > _1894) || ((_1889 < _1892) || ((_1888 > _1894) || ((_1888 < _1892) || ((_1887 < _1892) || (_1887 > _1894))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2013 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1889, cbModelParam._m0[9u].z, fma(_1888, cbModelParam._m0[9u].y, _1887 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1889, cbModelParam._m0[10u].z, fma(_1888, cbModelParam._m0[10u].y, _1887 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1889, cbModelParam._m0[11u].z, fma(_1888, cbModelParam._m0[11u].y, _1887 * cbModelParam._m0[11u].x))), _1340);
            frontier_phi_16_38_ladder = _2013.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2013.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2013.x * cbModelParam._m0[1u].y;
        }
        _1421 = frontier_phi_16_38_ladder_2;
        _1423 = frontier_phi_16_38_ladder_1;
        _1425 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1409 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_499, _500, _501), _1340);
        _1421 = _1409.x * cbModelParam._m0[1u].y;
        _1423 = _1409.y * cbModelParam._m0[1u].y;
        _1425 = _1409.z * cbModelParam._m0[1u].y;
    }
    float _1429 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _327);
    float _1430 = isnan(_1429) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1429 : min(cbModelParam._m0[25u].w, _1429));
    float _1522;
    float _1524;
    float _1526;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1486 = fma(_559, cbModelParam._m0[21u].z, fma(_555, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _551)) + cbModelParam._m0[21u].w;
        float _1490 = fma(_559, cbModelParam._m0[22u].z, fma(_555, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _551)) + cbModelParam._m0[22u].w;
        float _1494 = fma(_559, cbModelParam._m0[23u].z, fma(_555, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _551)) + cbModelParam._m0[23u].w;
        float _1497 = fma(_501, cbModelParam._m0[21u].z, fma(_500, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _499));
        float _1500 = fma(_501, cbModelParam._m0[22u].z, fma(_500, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _499));
        float _1503 = fma(_501, cbModelParam._m0[23u].z, fma(_500, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _499));
        float _1642;
        if (_1497 > 0.0)
        {
            _1642 = abs((1.0 - _1486) / _1497);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1486 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1642 = frontier_phi_28_24_ladder;
        }
        float _1907;
        if (_1500 > 0.0)
        {
            _1907 = abs((1.0 - _1490) / _1500);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1500 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1490 + 1.0) / _1500);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1907 = frontier_phi_40_35_ladder;
        }
        float _2112;
        if (_1503 > 0.0)
        {
            _2112 = abs((1.0 - _1494) / _1503);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1494 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2112 = frontier_phi_49_46_ladder;
        }
        float _2114 = isnan(_1907) ? _1642 : (isnan(_1642) ? _1907 : min(_1642, _1907));
        float _2115 = isnan(_2112) ? _2114 : (isnan(_2114) ? _2112 : min(_2114, _2112));
        float _2119 = (_2115 * _1497) + _1486;
        float _2120 = (_2115 * _1500) + _1490;
        float _2121 = (_2115 * _1503) + _1494;
        float _2122 = _2115 * 9.9999997473787516355514526367188e-05;
        float _2123 = (-1.0) - _2122;
        float _2125 = _2122 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2121 > _2125) || ((_2121 < _2123) || ((_2120 > _2125) || ((_2120 < _2123) || ((_2119 < _2123) || (_2119 > _2125))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2358 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2121, cbModelParam._m0[17u].z, fma(_2120, cbModelParam._m0[17u].y, _2119 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2121, cbModelParam._m0[18u].z, fma(_2120, cbModelParam._m0[18u].y, _2119 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2121, cbModelParam._m0[19u].z, fma(_2120, cbModelParam._m0[19u].y, _2119 * cbModelParam._m0[19u].x))), _1430);
            frontier_phi_25_49_ladder = _2358.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2358.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2358.x * cbModelParam._m0[1u].z;
        }
        _1522 = frontier_phi_25_49_ladder_2;
        _1524 = frontier_phi_25_49_ladder_1;
        _1526 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1506 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_499, _500, _501), _1430);
        _1522 = _1506.x * cbModelParam._m0[1u].z;
        _1524 = _1506.y * cbModelParam._m0[1u].z;
        _1526 = _1506.z * cbModelParam._m0[1u].z;
    }
    float _1538 = ((((1.0 - _519) * ((_507 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_519 * _507)) * _491;
    float _1539 = _1538 * ((cbModelParam._m0[1u].w * (_1522 - _1421)) + _1421);
    float _1540 = _1538 * ((cbModelParam._m0[1u].w * (_1524 - _1423)) + _1423);
    float _1541 = _1538 * ((cbModelParam._m0[1u].w * (_1526 - _1425)) + _1425);
    float _1544 = fma(_1541, cbSceneParam._m0[89u].z, fma(_1540, cbSceneParam._m0[89u].y, _1539 * cbSceneParam._m0[89u].x));
    float _1547 = fma(_1541, cbSceneParam._m0[90u].z, fma(_1540, cbSceneParam._m0[90u].y, _1539 * cbSceneParam._m0[90u].x));
    float _1550 = fma(_1541, cbSceneParam._m0[91u].z, fma(_1540, cbSceneParam._m0[91u].y, _1539 * cbSceneParam._m0[91u].x));
    uvec4 _1560 = floatBitsToUint(cbInstanceData._m0[_465 + 5u]);
    uint _1562 = _1560.x * 14u;
    uint _1563 = _1562 + 13u;
    float _1570 = _491 + (-1.0);
    float _1575 = (cbLight._m0[_1563].x * _1570) + 1.0;
    float _1576 = (cbLight._m0[_1563].y * _1570) + 1.0;
    float _1577 = (cbLight._m0[_1563].z * _1570) + 1.0;
    float _1578 = (cbLight._m0[_1563].w * _1570) + 1.0;
    uint _1579 = _1562 + 5u;
    float _1585 = isnan(1.0) ? _1576 : (isnan(_1576) ? 1.0 : min(_1576, 1.0));
    uint _1589 = _1562 + 4u;
    float _1596 = isnan(1.0) ? _1575 : (isnan(_1575) ? 1.0 : min(_1575, 1.0));
    uint _1600 = _1562 | 1u;
    float _1611 = dot(vec3(cbLight._m0[_1562].xyz), vec3(_324, _325, _326));
    float _1614 = dot(vec3(cbLight._m0[_1600].xyz), vec3(_324, _325, _326));
    float _3817 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
    float _3828 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
    float _1619 = (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * 0.3183098733425140380859375;
    float _1621 = (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * 0.3183098733425140380859375;
    float _1628 = ((cbLight._m0[_1579].x * _1585) * _1621) + ((cbLight._m0[_1589].x * _1596) * _1619);
    float _1629 = ((_1585 * cbLight._m0[_1579].y) * _1621) + ((_1596 * cbLight._m0[_1589].y) * _1619);
    float _1630 = ((_1585 * cbLight._m0[_1579].z) * _1621) + ((_1596 * cbLight._m0[_1589].z) * _1619);
    uvec4 _1634 = floatBitsToUint(cbLight._m0[_1562 + 12u]);
    bool _1636 = _1634.x == 0u;
    float _1647;
    float _1649;
    float _1651;
    if (_1636)
    {
        _1647 = _1628;
        _1649 = _1629;
        _1651 = _1630;
    }
    else
    {
        uint _1655 = _1562 + 6u;
        float _1671 = (dot(vec3(cbLight._m0[_1562 + 2u].xyz), vec3(_324, _325, _326)) * 0.5) + 0.5;
        float _1672 = _1671 * _1671;
        float _3839 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1674 = isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0));
        _1647 = (((cbLight._m0[_1655].x * 0.3183098733425140380859375) * _1673) * _1674) + _1628;
        _1649 = (((cbLight._m0[_1655].y * 0.3183098733425140380859375) * _1673) * _1674) + _1629;
        _1651 = (((cbLight._m0[_1655].z * 0.3183098733425140380859375) * _1673) * _1674) + _1630;
    }
    bool _1654 = _1634.y == 0u;
    float _1692;
    float _1694;
    float _1696;
    if (_1654)
    {
        _1692 = _1647;
        _1694 = _1649;
        _1696 = _1651;
    }
    else
    {
        uint _1851 = _1562 + 7u;
        float _1867 = (dot(vec3(cbLight._m0[_1562 + 3u].xyz), vec3(_324, _325, _326)) * 0.5) + 0.5;
        float _1868 = _1867 * _1867;
        float _3855 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1869 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1870 = isnan(1.0) ? _1578 : (isnan(_1578) ? 1.0 : min(_1578, 1.0));
        _1692 = (((cbLight._m0[_1851].x * 0.3183098733425140380859375) * _1869) * _1870) + _1647;
        _1694 = (((cbLight._m0[_1851].y * 0.3183098733425140380859375) * _1869) * _1870) + _1649;
        _1696 = (((cbLight._m0[_1851].z * 0.3183098733425140380859375) * _1869) * _1870) + _1651;
    }
    uint _1699 = _1562 + 8u;
    float _1712 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1562].w)) * _327) * 0.949999988079071044921875);
    float _1713 = _1712 * _1712;
    float _1714 = cbLight._m0[_1562].x + _404;
    float _1715 = cbLight._m0[_1562].y + _405;
    float _1716 = cbLight._m0[_1562].z + _406;
    float _1720 = inversesqrt(dot(vec3(_1714, _1715, _1716), vec3(_1714, _1715, _1716)));
    float _1721 = _1720 * _1714;
    float _1722 = _1720 * _1715;
    float _1723 = _1720 * _1716;
    float _1724 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_1562].xyz));
    float _3871 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
    float _1727 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _3882 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _1728 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _1729 = dot(vec3(_324, _325, _326), vec3(_1721, _1722, _1723));
    float _3893 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _1732 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _1733 = dot(vec3(cbLight._m0[_1562].xyz), vec3(_1721, _1722, _1723));
    float _3904 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
    float _1737 = _1713 * _1713;
    float _1741 = ((_1732 * _1732) * (_1737 + (-1.0))) + 1.0;
    float _1752 = (exp2(log2(1.0 - (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1753 = 1.0 - _1713;
    float _1764 = (0.5 / (((_1728 * ((_1727 * _1753) + _1713)) + 9.9999999392252902907785028219223e-09) + (((_1728 * _1753) + _1713) * _1727))) * _1727;
    float _3915 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _1766 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1737 / ((_1741 * _1741) * 3.141590118408203125));
    uint _1777 = _1562 + 9u;
    float _1788 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1600].w)) * _327) * 0.949999988079071044921875);
    float _1789 = _1788 * _1788;
    float _1790 = cbLight._m0[_1600].x + _404;
    float _1791 = cbLight._m0[_1600].y + _405;
    float _1792 = cbLight._m0[_1600].z + _406;
    float _1796 = inversesqrt(dot(vec3(_1790, _1791, _1792), vec3(_1790, _1791, _1792)));
    float _1797 = _1796 * _1790;
    float _1798 = _1796 * _1791;
    float _1799 = _1796 * _1792;
    float _1800 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_1600].xyz));
    float _3926 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1803 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _1804 = dot(vec3(_324, _325, _326), vec3(_1797, _1798, _1799));
    float _3937 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1807 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _1808 = dot(vec3(cbLight._m0[_1600].xyz), vec3(_1797, _1798, _1799));
    float _3948 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1812 = _1789 * _1789;
    float _1816 = ((_1807 * _1807) * (_1812 + (-1.0))) + 1.0;
    float _1825 = (exp2(log2(1.0 - (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1826 = 1.0 - _1789;
    float _1836 = (0.5 / (((_1728 * ((_1803 * _1826) + _1789)) + 9.9999999392252902907785028219223e-09) + (((_1728 * _1826) + _1789) * _1803))) * _1803;
    float _3959 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1838 = (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1812 / ((_1816 * _1816) * 3.141590118408203125));
    float _1848 = (((_1825 * cbLight._m0[_1777].x) * _1838) * _1585) + (((_1752 * cbLight._m0[_1699].x) * _1766) * _1596);
    float _1849 = (((_1825 * cbLight._m0[_1777].y) * _1838) * _1585) + (((_1752 * cbLight._m0[_1699].y) * _1766) * _1596);
    float _1850 = (((_1825 * cbLight._m0[_1777].z) * _1838) * _1585) + (((_1752 * cbLight._m0[_1699].z) * _1766) * _1596);
    float _1912;
    float _1914;
    float _1916;
    if (_1636)
    {
        _1912 = _1848;
        _1914 = _1849;
        _1916 = _1850;
    }
    else
    {
        uint _1918 = _1562 + 2u;
        uint _1922 = _1562 + 10u;
        float _1936 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1918].w)) * _327) * 0.949999988079071044921875);
        float _1937 = _1936 * _1936;
        float _1938 = cbLight._m0[_1918].x + _404;
        float _1939 = cbLight._m0[_1918].y + _405;
        float _1940 = cbLight._m0[_1918].z + _406;
        float _1944 = inversesqrt(dot(vec3(_1938, _1939, _1940), vec3(_1938, _1939, _1940)));
        float _1945 = _1944 * _1938;
        float _1946 = _1944 * _1939;
        float _1947 = _1944 * _1940;
        float _1948 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_1918].xyz));
        float _3970 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1951 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1952 = dot(vec3(_324, _325, _326), vec3(_1945, _1946, _1947));
        float _3981 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        float _1955 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1956 = dot(vec3(cbLight._m0[_1918].xyz), vec3(_1945, _1946, _1947));
        float _3992 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
        float _1960 = _1937 * _1937;
        float _1964 = ((_1955 * _1955) * (_1960 + (-1.0))) + 1.0;
        float _1973 = (exp2(log2(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1974 = 1.0 - _1937;
        float _1984 = (0.5 / (((_1728 * ((_1951 * _1974) + _1937)) + 9.9999999392252902907785028219223e-09) + (((_1728 * _1974) + _1937) * _1951))) * _1951;
        float _4003 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1986 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1960 / ((_1964 * _1964) * 3.141590118408203125));
        float _1987 = isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0));
        _1912 = (((_1973 * cbLight._m0[_1922].x) * _1986) * _1987) + _1848;
        _1914 = (((_1973 * cbLight._m0[_1922].y) * _1986) * _1987) + _1849;
        _1916 = (((_1973 * cbLight._m0[_1922].z) * _1986) * _1987) + _1850;
    }
    float _2022;
    float _2024;
    float _2026;
    if (_1654)
    {
        _2022 = _1912;
        _2024 = _1914;
        _2026 = _1916;
    }
    else
    {
        uint _2033 = _1562 + 3u;
        uint _2037 = _1562 + 11u;
        float _2051 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2033].w)) * _327) * 0.949999988079071044921875);
        float _2052 = _2051 * _2051;
        float _2053 = cbLight._m0[_2033].x + _404;
        float _2054 = cbLight._m0[_2033].y + _405;
        float _2055 = cbLight._m0[_2033].z + _406;
        float _2059 = inversesqrt(dot(vec3(_2053, _2054, _2055), vec3(_2053, _2054, _2055)));
        float _2060 = _2059 * _2053;
        float _2061 = _2059 * _2054;
        float _2062 = _2059 * _2055;
        float _2063 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_2033].xyz));
        float _4019 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2066 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _2067 = dot(vec3(_324, _325, _326), vec3(_2060, _2061, _2062));
        float _4030 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2070 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _2071 = dot(vec3(cbLight._m0[_2033].xyz), vec3(_2060, _2061, _2062));
        float _4041 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2075 = _2052 * _2052;
        float _2079 = ((_2070 * _2070) * (_2075 + (-1.0))) + 1.0;
        float _2088 = (exp2(log2(1.0 - (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2089 = 1.0 - _2052;
        float _2099 = (0.5 / (((_1728 * ((_2066 * _2089) + _2052)) + 9.9999999392252902907785028219223e-09) + (((_1728 * _2089) + _2052) * _2066))) * _2066;
        float _4052 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2101 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_2075 / ((_2079 * _2079) * 3.141590118408203125));
        float _2102 = isnan(1.0) ? _1578 : (isnan(_1578) ? 1.0 : min(_1578, 1.0));
        _2022 = (((_2088 * cbLight._m0[_2037].x) * _2101) * _2102) + _1912;
        _2024 = (((_2088 * cbLight._m0[_2037].y) * _2101) * _2102) + _1914;
        _2026 = (((_2088 * cbLight._m0[_2037].z) * _2101) * _2102) + _1916;
    }
    float _2237;
    float _2239;
    float _2241;
    float _2243;
    float _2245;
    float _2247;
    if (_1560.y == 0u)
    {
        float _2177 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2178 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2177;
        float _2179 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2177;
        float _2180 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2177;
        uvec4 _2192 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2193 = _2192.x;
        uint _2204 = uint((float(_2192.y) * floor(float(uint(cbSceneParam._m0[85u].y * _426) / _2193))) + floor(float(uint(cbSceneParam._m0[85u].x * _425) / _2193)));
        float _2214 = (log2(_2180 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2215 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        uint _2218 = uint(isnan(14.0) ? _2215 : (isnan(_2215) ? 14.0 : min(_2215, 14.0)));
        uvec4 _2223 = texelFetch(g_lightClusterGridBuffer, int(((_2218 << 2u) + (_2204 << 6u)) >> 2u));
        uint _2224 = _2223.x;
        uint _2225 = _2192.z;
        float _2363;
        float _2365;
        float _2367;
        float _2369;
        float _2371;
        float _2373;
        if (((((1u << ((_2225 >> 4u) & 15u)) + 4294967295u) & _2224) == 0u) || ((_2225 & 240u) == 0u))
        {
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
        }
        else
        {
            float _2364;
            float _2366;
            float _2368;
            float _2370;
            float _2372;
            float _2374;
            float _2525 = 0.0;
            float _2526 = 0.0;
            float _2527 = 0.0;
            float _2528 = 0.0;
            float _2529 = 0.0;
            float _2530 = 0.0;
            uint _2531 = 0u;
            uint _2540;
            bool _2541;
            for (;;)
            {
                _2540 = texelFetch(g_lightClassification, int((((_2218 << 5u) + (_2204 << 9u)) + (_2531 << 2u)) >> 2u)).x;
                _2541 = _2540 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2541)
                {
                    frontier_phi_66_pred = _2525;
                    frontier_phi_66_pred_1 = _2530;
                    frontier_phi_66_pred_2 = _2529;
                    frontier_phi_66_pred_3 = _2528;
                    frontier_phi_66_pred_4 = _2527;
                    frontier_phi_66_pred_5 = _2526;
                }
                else
                {
                    float _2670;
                    float _2671;
                    float _2672;
                    float _2673;
                    float _2674;
                    float _2675;
                    uint _2676;
                    _2670 = _2525;
                    _2671 = _2526;
                    _2672 = _2527;
                    _2673 = _2528;
                    _2674 = _2529;
                    _2675 = _2530;
                    _2676 = _2540;
                    float _2597;
                    float _2598;
                    float _2599;
                    float _2600;
                    float _2601;
                    float _2602;
                    for (;;)
                    {
                        uint _2680 = uint(findLSB(_2676)) + (_2531 << 5u);
                        uint _2677 = (_2676 + 4294967295u) & _2676;
                        uint _2682 = _2680 * 48u;
                        vec4 _2696 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2682)).x, texelFetch(g_PointLightRenderingBuffer, int(_2682 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2682 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2682 + 3u)).x));
                        uint _2702 = (_2680 * 48u) + 4u;
                        vec4 _2715 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2702)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 3u)).x));
                        uint _2721 = (_2680 * 48u) + 8u;
                        vec3 _2732 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2721)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 2u)).x));
                        float _2736 = _2696.x - _2178;
                        float _2737 = _2696.y - _2179;
                        float _2738 = _2696.z - _2180;
                        float _2739 = dot(vec3(_2736, _2737, _2738), vec3(_2736, _2737, _2738));
                        float _2742 = inversesqrt(_2739);
                        float _2743 = _2742 * _2736;
                        float _2744 = _2742 * _2737;
                        float _2745 = _2742 * _2738;
                        float _2746 = dot(vec3(_446, _449, _452), vec3(_2743, _2744, _2745));
                        float _2751 = 1.0 - (_2739 * _2696.w);
                        float _4078 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                        float _2752 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
                        float _2753 = sqrt(_2739) * _2715.w;
                        float _2756 = 1.39999997615814208984375 / (_2753 + 1.39999997615814208984375);
                        float _2757 = _2756 * _2756;
                        float _2760 = ((1.0 - _2757) * _2746) + _2757;
                        float _2763 = _2753 * _2753;
                        float _2767 = ((isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0))) * _2752) / ((_2763 * 0.699999988079071044921875) + 1.0);
                        float _2771 = (-0.0) - _2178;
                        float _2772 = (-0.0) - _2179;
                        float _2773 = (-0.0) - _2180;
                        float _2777 = inversesqrt(dot(vec3(_2771, _2772, _2773), vec3(_2771, _2772, _2773)));
                        float _2778 = _2777 * _2771;
                        float _2779 = _2777 * _2772;
                        float _2780 = _2777 * _2773;
                        float _2788 = exp2(log2(1.0 / ((_2763 * 3.5) + 5.0)) * 0.25);
                        float _2789 = 1.0 - _507;
                        float _2796 = sqrt(1.0 - ((1.0 - (_2789 * _2789)) * (1.0 - (_2788 * _2788))));
                        float _2797 = _2796 * _2796;
                        float _2798 = _2797 * _2797;
                        float _2799 = _2778 + _2743;
                        float _2800 = _2779 + _2744;
                        float _2801 = _2780 + _2745;
                        float _2805 = inversesqrt(dot(vec3(_2799, _2800, _2801), vec3(_2799, _2800, _2801)));
                        float _2809 = dot(vec3(_446, _449, _452), vec3(_2778, _2779, _2780));
                        float _4094 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
                        float _2812 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                        float _2813 = dot(vec3(_446, _449, _452), vec3(_2805 * _2799, _2805 * _2800, _2805 * _2801));
                        float _4105 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
                        float _2816 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
                        float _2820 = ((_2816 * _2816) * (_2798 + (-1.0))) + 1.0;
                        float _2821 = _2756 * _2797;
                        float _2822 = _2821 * _2821;
                        float _2825 = ((1.0 - _2822) * _2746) + _2822;
                        float _4116 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
                        float _2826 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                        float _2827 = 1.0 - _2797;
                        float _2837 = (0.5 / (((_2826 * ((_2812 * _2827) + _2797)) + 9.9999999392252902907785028219223e-09) + (((_2826 * _2827) + _2797) * _2812))) * _2826;
                        float _4127 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
                        float _2848 = (((_2798 * 3.1415927410125732421875) * (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) / ((_2820 * _2820) * ((_2763 * 2.1991131305694580078125) + 3.141590118408203125))) * _2752;
                        _2600 = (_2767 * _2715.x) + _2673;
                        _2601 = (_2767 * _2715.y) + _2674;
                        _2602 = (_2767 * _2715.z) + _2675;
                        _2597 = (_2848 * _2732.x) + _2670;
                        _2598 = (_2848 * _2732.y) + _2671;
                        _2599 = (_2848 * _2732.z) + _2672;
                        if (_2677 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2670 = _2597;
                            _2671 = _2598;
                            _2672 = _2599;
                            _2673 = _2600;
                            _2674 = _2601;
                            _2675 = _2602;
                            _2676 = _2677;
                        }
                    }
                    frontier_phi_66_pred = _2597;
                    frontier_phi_66_pred_1 = _2602;
                    frontier_phi_66_pred_2 = _2601;
                    frontier_phi_66_pred_3 = _2600;
                    frontier_phi_66_pred_4 = _2599;
                    frontier_phi_66_pred_5 = _2598;
                }
                _2364 = frontier_phi_66_pred;
                _2374 = frontier_phi_66_pred_1;
                _2372 = frontier_phi_66_pred_2;
                _2370 = frontier_phi_66_pred_3;
                _2368 = frontier_phi_66_pred_4;
                _2366 = frontier_phi_66_pred_5;
                uint _2532 = _2531 + 1u;
                if (_2532 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2525 = _2364;
                    _2526 = _2366;
                    _2527 = _2368;
                    _2528 = _2370;
                    _2529 = _2372;
                    _2530 = _2374;
                    _2531 = _2532;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
        }
        uvec4 _2377 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2378 = _2377.z;
        uint _2380 = (_2378 >> 8u) & 15u;
        float _2493;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        if (((4294967295u << _2380) & _2224) == 0u)
        {
            _2493 = _2363;
            _2495 = _2365;
            _2497 = _2367;
            _2499 = _2369;
            _2501 = _2371;
            _2503 = _2373;
        }
        else
        {
            float _2518 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
            float _2519 = _2518 * _2178;
            float _2520 = _2518 * _2179;
            float _2521 = _2518 * _2180;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2380 < ((_2378 >> 12u) & 15u))
            {
                float _2494;
                float _2496;
                float _2498;
                float _2500;
                float _2502;
                float _2504;
                float _2653 = _2363;
                float _2654 = _2365;
                float _2655 = _2367;
                float _2656 = _2369;
                float _2657 = _2371;
                float _2658 = _2373;
                uint _2659 = _2380;
                uint _2668;
                bool _2669;
                for (;;)
                {
                    _2668 = texelFetch(g_lightClassification, int((((_2218 << 5u) + (_2204 << 9u)) + (_2659 << 2u)) >> 2u)).x;
                    _2669 = _2668 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2669)
                    {
                        frontier_phi_77_pred = _2658;
                        frontier_phi_77_pred_1 = _2657;
                        frontier_phi_77_pred_2 = _2656;
                        frontier_phi_77_pred_3 = _2655;
                        frontier_phi_77_pred_4 = _2654;
                        frontier_phi_77_pred_5 = _2653;
                    }
                    else
                    {
                        float _2862;
                        float _2863;
                        float _2864;
                        float _2865;
                        float _2866;
                        float _2867;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _2875 = _2653;
                        float _2876 = _2654;
                        float _2877 = _2655;
                        float _2878 = _2656;
                        float _2879 = _2657;
                        float _2880 = _2658;
                        uint _2881 = _2668;
                        uint _2882;
                        vec4 _2907;
                        float _2908;
                        vec4 _2923;
                        vec3 _2935;
                        vec4 _2951;
                        vec4 _2967;
                        float _3014;
                        bool _3015;
                        for (;;)
                        {
                            uint _2892 = ((_2659 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2881));
                            _2882 = (_2881 + 4294967295u) & _2881;
                            uint _2894 = _2892 * 40u;
                            _2907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 3u)).x));
                            _2908 = _2907.w;
                            uint _2910 = (_2892 * 40u) + 4u;
                            _2923 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 3u)).x));
                            uint _2925 = (_2892 * 40u) + 8u;
                            _2935 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 2u)).x));
                            uint _2938 = (_2892 * 40u) + 16u;
                            _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            uint _2954 = (_2892 * 40u) + 20u;
                            _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            uint _2970 = (_2892 * 40u) + 24u;
                            vec4 _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            uint _2989 = (_2892 * 40u) + 28u;
                            vec4 _3002 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2989)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 3u)).x));
                            _3014 = fma(_2180, _3002.z, fma(_2179, _3002.y, _3002.x * _2178)) + _3002.w;
                            _3015 = !((fma(_2180, _2983.z, fma(_2179, _2983.y, _2983.x * _2178)) + _2983.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3015)
                            {
                                float _3042 = _2907.x - _2178;
                                float _3043 = _2907.y - _2179;
                                float _3044 = _2907.z - _2180;
                                float _3045 = dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044));
                                float _3048 = inversesqrt(_3045);
                                float _3049 = _3048 * _3042;
                                float _3050 = _3048 * _3043;
                                float _3051 = _3048 * _3044;
                                float _3055 = 1.0 - (_3045 / (_2908 * _2908));
                                float _4138 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                                float _3056 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                                float _3060 = sqrt(_3045) * _2923.w;
                                float _3062 = 1.39999997615814208984375 / (_3060 + 1.39999997615814208984375);
                                float _3063 = _3062 * _3062;
                                float _3066 = ((1.0 - _3063) * dot(vec3(_3049, _3050, _3051), vec3(_446, _449, _452))) + _3063;
                                float _3069 = _3060 * _3060;
                                float _3073 = (fma(_2180, _2951.z, fma(_2179, _2951.y, _2951.x * _2178)) + _2951.w) / _3014;
                                float _3074 = (fma(_2180, _2967.z, fma(_2179, _2967.y, _2967.x * _2178)) + _2967.w) / _3014;
                                float _3078 = 1.0 - dot(vec2(_3073, _3074), vec2(_3073, _3074));
                                float _4154 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                                float _3079 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
                                float _3080 = _3079 * (((isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0))) * _3056) / ((_3069 * 0.699999988079071044921875) + 1.0));
                                float _3092 = exp2(log2(1.0 / ((_3069 * 3.5) + 5.0)) * 0.25);
                                float _3093 = 1.0 - _507;
                                float _3100 = sqrt(1.0 - ((1.0 - (_3093 * _3093)) * (1.0 - (_3092 * _3092))));
                                float _3101 = _3100 * _3100;
                                float _3102 = _3101 * _3101;
                                float _3103 = _3049 - _2519;
                                float _3104 = _3050 - _2520;
                                float _3105 = _3051 - _2521;
                                float _3109 = inversesqrt(dot(vec3(_3103, _3104, _3105), vec3(_3103, _3104, _3105)));
                                float _3113 = dot(vec3(_446, _449, _452), vec3((-0.0) - _2519, (-0.0) - _2520, (-0.0) - _2521));
                                float _4165 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                                float _3116 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                                float _3117 = dot(vec3(_446, _449, _452), vec3(_3109 * _3103, _3109 * _3104, _3109 * _3105));
                                float _4176 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3120 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
                                float _3124 = ((_3120 * _3120) * (_3102 + (-1.0))) + 1.0;
                                float _3125 = _3062 * _3101;
                                float _3126 = _3125 * _3125;
                                float _3132 = ((1.0 - _3126) * dot(vec3(_446, _449, _452), vec3(_3049, _3050, _3051))) + _3126;
                                float _4187 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                                float _3133 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                                float _3134 = 1.0 - _3101;
                                float _3144 = (0.5 / (((_3133 * ((_3116 * _3134) + _3101)) + 9.9999999392252902907785028219223e-09) + (((_3133 * _3134) + _3101) * _3116))) * _3133;
                                float _4198 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                                float _3154 = (_3079 * _3056) * (((_3102 * 3.1415927410125732421875) * (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) / ((_3124 * _3124) * ((_3069 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3080 * _2923.y;
                                frontier_phi_83_pred_1 = _3080 * _2923.x;
                                frontier_phi_83_pred_2 = _3154 * _2935.z;
                                frontier_phi_83_pred_3 = _3154 * _2935.y;
                                frontier_phi_83_pred_4 = _3154 * _2935.x;
                                frontier_phi_83_pred_5 = _3080 * _2923.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3162 = frontier_phi_83_pred;
                            _3161 = frontier_phi_83_pred_1;
                            _3160 = frontier_phi_83_pred_2;
                            _3159 = frontier_phi_83_pred_3;
                            _3158 = frontier_phi_83_pred_4;
                            _3163 = frontier_phi_83_pred_5;
                            _2865 = _3161 + _2878;
                            _2866 = _3162 + _2879;
                            _2867 = _3163 + _2880;
                            _2862 = _3158 + _2875;
                            _2863 = _3159 + _2876;
                            _2864 = _3160 + _2877;
                            if (_2882 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2875 = _2862;
                                _2876 = _2863;
                                _2877 = _2864;
                                _2878 = _2865;
                                _2879 = _2866;
                                _2880 = _2867;
                                _2881 = _2882;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2867;
                        frontier_phi_77_pred_1 = _2866;
                        frontier_phi_77_pred_2 = _2865;
                        frontier_phi_77_pred_3 = _2864;
                        frontier_phi_77_pred_4 = _2863;
                        frontier_phi_77_pred_5 = _2862;
                    }
                    _2504 = frontier_phi_77_pred;
                    _2502 = frontier_phi_77_pred_1;
                    _2500 = frontier_phi_77_pred_2;
                    _2498 = frontier_phi_77_pred_3;
                    _2496 = frontier_phi_77_pred_4;
                    _2494 = frontier_phi_77_pred_5;
                    uint _2660 = _2659 + 1u;
                    if (_2660 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2653 = _2494;
                        _2654 = _2496;
                        _2655 = _2498;
                        _2656 = _2500;
                        _2657 = _2502;
                        _2658 = _2504;
                        _2659 = _2660;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2498;
                frontier_phi_58_59_ladder_1 = _2504;
                frontier_phi_58_59_ladder_2 = _2502;
                frontier_phi_58_59_ladder_3 = _2500;
                frontier_phi_58_59_ladder_4 = _2496;
                frontier_phi_58_59_ladder_5 = _2494;
            }
            else
            {
                frontier_phi_58_59_ladder = _2367;
                frontier_phi_58_59_ladder_1 = _2373;
                frontier_phi_58_59_ladder_2 = _2371;
                frontier_phi_58_59_ladder_3 = _2369;
                frontier_phi_58_59_ladder_4 = _2365;
                frontier_phi_58_59_ladder_5 = _2363;
            }
            _2493 = frontier_phi_58_59_ladder_5;
            _2495 = frontier_phi_58_59_ladder_4;
            _2497 = frontier_phi_58_59_ladder;
            _2499 = frontier_phi_58_59_ladder_3;
            _2501 = frontier_phi_58_59_ladder_2;
            _2503 = frontier_phi_58_59_ladder_1;
        }
        float _2508 = isnan(1.0) ? _491 : (isnan(_491) ? 1.0 : min(_491, 1.0));
        _2237 = (_2508 * _2499) + _1692;
        _2239 = (_2508 * _2501) + _1694;
        _2241 = (_2508 * _2503) + _1696;
        _2243 = ((_2493 * 0.039999999105930328369140625) * _2508) + _2022;
        _2245 = ((_2495 * 0.039999999105930328369140625) * _2508) + _2024;
        _2247 = ((_2497 * 0.039999999105930328369140625) * _2508) + _2026;
    }
    else
    {
        _2237 = _1692;
        _2239 = _1694;
        _2241 = _1696;
        _2243 = _2022;
        _2245 = _2024;
        _2247 = _2026;
    }
    uint _2253 = _467 + uint(cbMatDynParam._m0[0u].w);
    float _2262 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _287.x) * _310) * cbInstanceData._m0[_2253].x;
    float _2266 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _287.y) * _310) * cbInstanceData._m0[_2253].y;
    float _2270 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _287.z) * _310) * cbInstanceData._m0[_2253].z;
    float _4214 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _4225 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _4236 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _2287 = (((isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_2237 + ((isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))) * _491))) + ((_2243 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _1329)) * cbPerFrame._m0[3u].x)) + _2262;
    float _2289 = (_2266 + ((_2245 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _1329)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_2239 + ((isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))) * _491)));
    float _2291 = (_2270 + ((_2247 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _1329)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_2241 + ((isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))) * _491)));
    float _2292 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2293 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2294 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2300 = cbMtdParam._m0[2u].x * _2262;
    float _2301 = cbMtdParam._m0[2u].y * _2266;
    float _2302 = cbMtdParam._m0[2u].z * _2270;
    float _4262 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2304 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    uint _2305 = _465 + 6u;
    float _2313 = _425 / cbSceneParam._m0[86u].x;
    float _2314 = _426 / cbSceneParam._m0[86u].y;
    vec4 _2328 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2313, _2314, (log2((isnan(cbSceneParam._m0[77u].w) ? _346 : (isnan(_346) ? cbSceneParam._m0[77u].w : min(_346, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2330 = _2328.x;
    float _2331 = _2328.y;
    float _2332 = _2328.z;
    float _2333 = _2328.w;
    float _2426;
    float _2428;
    float _2430;
    float _2432;
    if (_346 > cbSceneParam._m0[78u].w)
    {
        float _2388 = isnan(_346) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _346 : min(cbSceneParam._m0[80u].w, _346));
        float _2389 = _2388 / _346;
        float _2400 = _2389 * _397;
        float _2401 = _398 * _2389;
        float _2402 = (-0.0) - _2401;
        float _2404 = _2389 * _399;
        float _2406 = (cbSceneParam._m0[77u].w * _2402) / _2388;
        float _2407 = _2406 + cbSceneParam._m0[79u].w;
        float _2408 = cbSceneParam._m0[79u].w - _2401;
        float _2414 = sqrt(((_2400 * _2400) + (_2401 * _2401)) + (_2404 * _2404));
        float _2417 = (1.0 - (cbSceneParam._m0[77u].w / _2388)) * _2414;
        float _2422 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2424 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2610;
        if (abs((_2402 - _2406) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2610 = ((((_2407 > 0.0) ? exp2(_2422 * _2407) : (2.0 - exp2(_2424 * _2407))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2417;
        }
        else
        {
            float _2554 = 1.0 / cbSceneParam._m0[80u].x;
            float _2555 = isnan(_2408) ? _2407 : (isnan(_2407) ? _2408 : max(_2407, _2408));
            float _2556 = isnan(_2408) ? _2407 : (isnan(_2407) ? _2408 : min(_2407, _2408));
            float _2565 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : min(_2555, 0.0));
            float _2566 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : min(_2556, 0.0));
            _2610 = ((abs(_2414 / _2402) * cbSceneParam._m0[80u].y) * ((((_2565 - _2566) * 2.0) - ((exp2(_2422 * (isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0)))) - exp2(_2422 * (isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0))))) * _2554)) - ((exp2(_2424 * _2565) - exp2(_2424 * _2566)) * _2554))) + (_2417 * cbSceneParam._m0[80u].z);
        }
        vec4 _2612 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2313, _2314, 1.0), 0.0);
        float _2621 = exp2((_2610 * (-1.44269502162933349609375)) * (1.0 - _2612.w));
        float _2622 = log2(_2621);
        float _2638 = log2(_2333);
        _2426 = (exp2(_2638 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2622 * cbSceneParam._m0[78u].x)) * _2612.x) / cbSceneParam._m0[78u].x)) + _2330;
        _2428 = (exp2(_2638 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2622 * cbSceneParam._m0[78u].y)) * _2612.y) / cbSceneParam._m0[78u].y)) + _2331;
        _2430 = (exp2(_2638 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2622 * cbSceneParam._m0[78u].z)) * _2612.z) / cbSceneParam._m0[78u].z)) + _2332;
        _2432 = _2621 * _2333;
    }
    else
    {
        _2426 = _2330;
        _2428 = _2331;
        _2430 = _2332;
        _2432 = _2333;
    }
    bool _2648;
    vec4 _2442;
    vec4 _2464;
    float _2466;
    float _2470;
    float _2471;
    float _2472;
    float _2475;
    float _2478;
    float _2481;
    float _2482;
    bool _2492;
    for (;;)
    {
        _2442 = cbMatDynParam._m0[0u];
        float _2444 = roundEven(_2442.y);
        bool _2445 = _2444 == 3.0;
        float _2446 = log2(_2432);
        float _2450 = exp2(_2446 * cbSceneParam._m0[78u].x);
        float _2451 = exp2(_2446 * cbSceneParam._m0[78u].y);
        float _2452 = exp2(_2446 * cbSceneParam._m0[78u].z);
        float _2453 = _2450 * _2292;
        float _2454 = _2451 * _2293;
        float _2455 = _2452 * _2294;
        float _2462 = _413 + (-0.5);
        _2464 = cbMtdParam._m0[1u];
        _2466 = _2464.y * _2462;
        float _2469 = (_2444 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2470 = _2469 * (_2445 ? _2453 : (_2453 + (cbSceneParam._m0[72u].w * _2426)));
        _2471 = _2469 * (_2445 ? _2454 : (_2454 + (cbSceneParam._m0[72u].w * _2428)));
        _2472 = _2469 * (_2445 ? _2455 : (_2455 + (cbSceneParam._m0[72u].w * _2430)));
        _2475 = ((_2300 * _2304) * _2450) * _2469;
        _2478 = ((_2301 * _2304) * _2451) * _2469;
        _2481 = ((_2302 * _2304) * _2452) * _2469;
        _2482 = _2462 * 0.999000012874603271484375;
        _2492 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2492)
        {
            if ((cbInstanceData._m0[_465 + 7u].x + _2482) < 0.5)
            {
                _2648 = true;
                break;
            }
        }
        uint _2589 = _467 + uint(_2442.w);
        if ((cbInstanceData._m0[_2589].w < 1.0) && ((cbInstanceData._m0[_2589].w + _2482) < 0.5))
        {
            _2648 = true;
            break;
        }
        if ((_2466 + 1.0) < _2464.x)
        {
            _2648 = true;
            break;
        }
        _2648 = false;
        break;
    }
    float _2853;
    if (_2648)
    {
        discard_state = true;
        _2853 = 0.0;
    }
    else
    {
        _2853 = cbInstanceData._m0[_2305].w;
    }
    SV_Target.x = _2470;
    SV_Target.y = _2471;
    SV_Target.z = _2472;
    SV_Target.w = _2853;
    SV_Target_1.x = _2475;
    SV_Target_1.y = _2478;
    SV_Target_1.z = _2481;
    SV_Target_1.w = cbInstanceData._m0[_2305].w;
    discard_exit();
}


