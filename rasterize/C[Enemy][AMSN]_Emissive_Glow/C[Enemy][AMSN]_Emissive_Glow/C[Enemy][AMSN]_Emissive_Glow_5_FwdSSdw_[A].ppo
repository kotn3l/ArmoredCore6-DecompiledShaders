#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _889;
float _3324;
float _3325;
float _3326;
float _3327;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _230 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _236 = _230.x * cbMtdParam._m0[9u].x;
    float _237 = _230.y * cbMtdParam._m0[9u].y;
    float _238 = _230.z * cbMtdParam._m0[9u].z;
    vec4 _250 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _254 = _250.z;
    float _258 = (_250.x * 2.0) + (-1.0);
    float _260 = (_250.y * 2.0) + (-1.0);
    float _261 = dot(vec2(_258, _260), vec2(_258, _260));
    float _3336 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _267 = sqrt(1.0 - (isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0))));
    vec4 _304 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _311 = fma(_267, _201 * NORMAL.x, fma(_260, _208 * TANGENT.x, (_194 * _187) * _258));
    float _314 = fma(_267, _201 * NORMAL.y, fma(_260, _208 * TANGENT.y, (_194 * _188) * _258));
    float _317 = fma(_267, _201 * NORMAL.z, fma(_260, _208 * TANGENT.z, (_194 * _189) * _258));
    float _321 = inversesqrt(dot(vec3(_311, _314, _317), vec3(_311, _314, _317)));
    float _322 = _321 * _311;
    float _323 = _321 * _314;
    float _324 = _321 * _317;
    float _3347 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _325 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
    float _3358 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3369 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3380 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _344 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _385 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _395 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _385);
    float _396 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _385);
    float _397 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _385);
    float _401 = inversesqrt(dot(vec3(_395, _396, _397), vec3(_395, _396, _397)));
    float _402 = _395 * _401;
    float _403 = _396 * _401;
    float _404 = _397 * _401;
    vec4 _409 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _411 = _409.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _568 = sqrt(((_395 * _395) + (_396 * _396)) + (_397 * _397));
        float _574 = (cbMatDynParam._m0[5u].x * _568) + cbMatDynParam._m0[5u].y;
        float _3391 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
        float _575 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
        float _579 = (cbMatDynParam._m0[5u].z * _568) + cbMatDynParam._m0[5u].w;
        float _3402 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0))) - _575)) + _575) < ((_411 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _423 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _424 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _444 = fma(_324, cbSceneParam._m0[5u].z, fma(_323, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _322));
    float _447 = fma(_324, cbSceneParam._m0[6u].z, fma(_323, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _322));
    float _450 = fma(_324, cbSceneParam._m0[7u].z, fma(_323, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _322));
    uint _463 = uint(roundEven(NORMAL.w)) * 13u;
    uint _464 = _463 + 9u;
    uint _465 = _464 + uint(cbMatDynParam._m0[0u].w);
    float _471 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0)))) * cbInstanceData._m0[_465].x;
    float _472 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0)))) * cbInstanceData._m0[_465].y;
    float _473 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0)))) * cbInstanceData._m0[_465].z;
    float _3413 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
    float _3424 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
    float _3435 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _476 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
    vec4 _485 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _423, cbSceneParam._m0[86u].y * _424));
    float _488 = _485.x * TEXCOORD.z;
    float _489 = dot(vec3(_322, _323, _324), vec3(_402, _403, _404));
    float _492 = _489 * 2.0;
    float _496 = (_492 * _322) - _402;
    float _497 = (_492 * _323) - _403;
    float _498 = (_492 * _324) - _404;
    float _502 = abs(dot(vec3(_402, _403, _404), vec3(_322, _323, _324)));
    float _3446 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _504 = sqrt(_325);
    float _517 = exp2((_504 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_504 * 3.0));
    float _549 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _553 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _888;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _613 = fma(_557, cbModelParam._m0[26u].z, fma(_553, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _549));
        float _617 = fma(_557, cbModelParam._m0[27u].z, fma(_553, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _549));
        float _621 = fma(_557, cbModelParam._m0[28u].z, fma(_553, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _549));
        float _646 = _549 + _322;
        float _647 = _553 + _323;
        float _648 = _557 + _324;
        float _658 = fma(_648, cbModelParam._m0[26u].z, fma(_647, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _646)) - _613;
        float _659 = fma(_648, cbModelParam._m0[27u].z, fma(_647, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _646)) - _617;
        float _660 = fma(_648, cbModelParam._m0[28u].z, fma(_647, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _646)) - _621;
        float _664 = inversesqrt(dot(vec3(_658, _659, _660), vec3(_658, _659, _660)));
        float _677 = ((_664 * _658) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_613 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _678 = ((_664 * _659) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_617 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _679 = ((_664 * _660) / cbModelParam._m0[34u].z) + ((((((_621 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _682 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        vec4 _689 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        vec4 _696 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        vec4 _703 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        float _716 = exp2((_682.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_682.x + (-0.5));
        float _718 = _716 * (_682.y + (-0.5));
        float _719 = _716 * (_682.z + (-0.5));
        float _726 = exp2((_689.w + (-0.5)) * 20.0) * 2.0;
        float _727 = _726 * (_689.x + (-0.5));
        float _728 = _726 * (_689.y + (-0.5));
        float _729 = _726 * (_689.z + (-0.5));
        float _736 = exp2((_696.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_696.x + (-0.5));
        float _738 = _736 * (_696.y + (-0.5));
        float _739 = _736 * (_696.z + (-0.5));
        float _746 = exp2((_703.w + (-0.5)) * 20.0) * 2.0;
        float _747 = _746 * (_703.x + (-0.5));
        float _748 = _746 * (_703.y + (-0.5));
        float _749 = _746 * (_703.z + (-0.5));
        float _750 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _751 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _752 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _753 = _717 * 0.5;
        float _754 = _727 * 0.5;
        float _755 = _737 * 0.5;
        float _756 = dot(vec3(_753, _754, _755), vec3(_753, _754, _755));
        float _761 = (_756 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_756);
        float _770 = (dot(vec3(_322, _323, _324), vec3(_761 * _753, _761 * _754, _761 * _755)) + 1.0) * 0.5;
        float _3472 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _780 = sqrt(((_754 * _754) + (_753 * _753)) + (_755 * _755)) / (_750 + 9.9999997473787516355514526367188e-06);
        float _3483 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
        float _782 = _781 * 2.0;
        float _786 = (1.0 - _781) / (_781 + 1.0);
        float _3494 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _796 = ((((1.0 - _787) * (_782 + 2.0)) * exp2(log2(isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))) * (_782 + 1.0))) + _787) * _750;
        float _797 = _718 * 0.5;
        float _798 = _728 * 0.5;
        float _799 = _738 * 0.5;
        float _800 = dot(vec3(_797, _798, _799), vec3(_797, _798, _799));
        float _805 = (_800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_800);
        float _813 = (dot(vec3(_322, _323, _324), vec3(_805 * _797, _805 * _798, _805 * _799)) + 1.0) * 0.5;
        float _3505 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _822 = sqrt(((_798 * _798) + (_797 * _797)) + (_799 * _799)) / (_751 + 9.9999997473787516355514526367188e-06);
        float _3516 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _824 = _823 * 2.0;
        float _828 = (1.0 - _823) / (_823 + 1.0);
        float _3527 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _838 = ((((1.0 - _829) * (_824 + 2.0)) * exp2(log2(isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * (_824 + 1.0))) + _829) * _751;
        float _839 = _719 * 0.5;
        float _840 = _729 * 0.5;
        float _841 = _739 * 0.5;
        float _842 = dot(vec3(_839, _840, _841), vec3(_839, _840, _841));
        float _847 = (_842 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_842);
        float _855 = (dot(vec3(_322, _323, _324), vec3(_847 * _839, _847 * _840, _847 * _841)) + 1.0) * 0.5;
        float _3538 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _864 = sqrt(((_840 * _840) + (_839 * _839)) + (_841 * _841)) / (_752 + 9.9999997473787516355514526367188e-06);
        float _3549 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _866 = _865 * 2.0;
        float _870 = (1.0 - _865) / (_865 + 1.0);
        float _3560 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _880 = ((((1.0 - _871) * (_866 + 2.0)) * exp2(log2(isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * (_866 + 1.0))) + _871) * _752;
        _888 = _719;
        _890 = _718;
        _891 = _717;
        _892 = _729;
        _893 = _728;
        _894 = _727;
        _895 = _739;
        _896 = _738;
        _897 = _737;
        _898 = _752;
        _899 = _751;
        _900 = _750;
        _901 = cbModelParam._m0[36u].z * (isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0)));
        _902 = cbModelParam._m0[36u].z * (isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0)));
        _903 = cbModelParam._m0[36u].z * (isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0)));
    }
    else
    {
        _888 = _889;
        _890 = _889;
        _891 = _889;
        _892 = _889;
        _893 = _889;
        _894 = _889;
        _895 = _889;
        _896 = _889;
        _897 = _889;
        _898 = _889;
        _899 = _889;
        _900 = _889;
        _901 = 0.0;
        _902 = 0.0;
        _903 = 0.0;
    }
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _932 = fma(_557, cbModelParam._m0[30u].z, fma(_553, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _549));
        float _936 = fma(_557, cbModelParam._m0[31u].z, fma(_553, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _549));
        float _940 = fma(_557, cbModelParam._m0[32u].z, fma(_553, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _549));
        float _963 = _549 + _322;
        float _964 = _553 + _323;
        float _965 = _557 + _324;
        float _975 = fma(_965, cbModelParam._m0[30u].z, fma(_964, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _963)) - _932;
        float _976 = fma(_965, cbModelParam._m0[31u].z, fma(_964, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _963)) - _936;
        float _977 = fma(_965, cbModelParam._m0[32u].z, fma(_964, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _963)) - _940;
        float _981 = inversesqrt(dot(vec3(_975, _976, _977), vec3(_975, _976, _977)));
        float _994 = ((_981 * _975) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_932 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _995 = ((_981 * _976) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_936 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _996 = ((_981 * _977) / cbModelParam._m0[35u].z) + ((((((_940 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        float _1031 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_998.x + (-0.5));
        float _1033 = _1031 * (_998.y + (-0.5));
        float _1034 = _1031 * (_998.z + (-0.5));
        float _1041 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1005.x + (-0.5));
        float _1043 = _1041 * (_1005.y + (-0.5));
        float _1044 = _1041 * (_1005.z + (-0.5));
        float _1051 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1012.x + (-0.5));
        float _1053 = _1051 * (_1012.y + (-0.5));
        float _1054 = _1051 * (_1012.z + (-0.5));
        float _1061 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1019.x + (-0.5));
        float _1063 = _1061 * (_1019.y + (-0.5));
        float _1064 = _1061 * (_1019.z + (-0.5));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = _1032 * 0.5;
        float _1069 = _1042 * 0.5;
        float _1070 = _1052 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_322, _323, _324), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3623 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_1095 + 1.0))) + _1100) * _1065;
        float _1110 = _1033 * 0.5;
        float _1111 = _1043 * 0.5;
        float _1112 = _1053 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_322, _323, _324), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3656 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_1137 + 1.0))) + _1142) * _1066;
        float _1152 = _1034 * 0.5;
        float _1153 = _1044 * 0.5;
        float _1154 = _1054 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_322, _323, _324), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3689 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_1179 + 1.0))) + _1184) * _1067;
        _1201 = _1034;
        _1202 = _1033;
        _1203 = _1032;
        _1204 = _1044;
        _1205 = _1043;
        _1206 = _1042;
        _1207 = _1054;
        _1208 = _1053;
        _1209 = _1052;
        _1210 = _1067;
        _1211 = _1066;
        _1212 = _1065;
        _1213 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
        _1214 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
        _1215 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
    }
    else
    {
        _1201 = _889;
        _1202 = _889;
        _1203 = _889;
        _1204 = _889;
        _1205 = _889;
        _1206 = _889;
        _1207 = _889;
        _1208 = _889;
        _1209 = _889;
        _1210 = _889;
        _1211 = _889;
        _1212 = _889;
        _1213 = 0.0;
        _1214 = 0.0;
        _1215 = 0.0;
    }
    float _1225 = (cbModelParam._m0[1u].x * (_1213 - _901)) + _901;
    float _1226 = (cbModelParam._m0[1u].x * (_1214 - _902)) + _902;
    float _1227 = (cbModelParam._m0[1u].x * (_1215 - _903)) + _903;
    float _1248 = fma(_1227, cbSceneParam._m0[89u].z, fma(_1226, cbSceneParam._m0[89u].y, _1225 * cbSceneParam._m0[89u].x));
    float _1251 = fma(_1227, cbSceneParam._m0[90u].z, fma(_1226, cbSceneParam._m0[90u].y, _1225 * cbSceneParam._m0[90u].x));
    float _1254 = fma(_1227, cbSceneParam._m0[91u].z, fma(_1226, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1225));
    float _1269 = _496 * 0.5;
    float _1270 = _497 * 0.5;
    float _1271 = _498 * 0.5;
    float _1272 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_1203, _1206, _1209, _1212));
    float _1275 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_1202, _1205, _1208, _1211));
    float _1278 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_1201, _1204, _1207, _1210));
    float _1312;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1285 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_888, _892, _895, _898));
        float _1289 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_890, _893, _896, _899));
        float _1293 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_891, _894, _897, _900));
        float _1300 = dot(vec4(cbModelParam._m0[39u]), vec4(_1269, _1270, _1271, 1.0));
        _1312 = dot(vec3(isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1300) ? 0.0 : (isnan(0.0) ? _1300 : max(0.0, _1300))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1312 = 1.0;
    }
    float _1323;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1314 = dot(vec4(cbModelParam._m0[40u]), vec4(_1269, _1270, _1271, 1.0));
        _1323 = dot(vec3(isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)), isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)), isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1314) ? 0.0 : (isnan(0.0) ? _1314 : max(0.0, _1314))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1323 = 1.0;
    }
    float _1327 = (_1323 * cbModelParam._m0[1u].x) + (_1312 * (1.0 - cbModelParam._m0[1u].x));
    float _1337 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _325);
    float _1338 = isnan(_1337) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1337 : min(cbModelParam._m0[25u].z, _1337));
    float _1419;
    float _1421;
    float _1423;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1386 = fma(_557, cbModelParam._m0[13u].z, fma(_553, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _549)) + cbModelParam._m0[13u].w;
        float _1390 = fma(_557, cbModelParam._m0[14u].z, fma(_553, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _549)) + cbModelParam._m0[14u].w;
        float _1394 = fma(_557, cbModelParam._m0[15u].z, fma(_553, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _549)) + cbModelParam._m0[15u].w;
        float _1397 = fma(_498, cbModelParam._m0[13u].z, fma(_497, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _496));
        float _1400 = fma(_498, cbModelParam._m0[14u].z, fma(_497, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _496));
        float _1403 = fma(_498, cbModelParam._m0[15u].z, fma(_497, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _496));
        float _1431;
        if (_1397 > 0.0)
        {
            _1431 = abs((1.0 - _1386) / _1397);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1397 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1386 + 1.0) / _1397);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1431 = frontier_phi_17_15_ladder;
        }
        float _1656;
        if (_1400 > 0.0)
        {
            _1656 = abs((1.0 - _1390) / _1400);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1400 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1390 + 1.0) / _1400);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1656 = frontier_phi_26_22_ladder;
        }
        float _1902;
        if (_1403 > 0.0)
        {
            _1902 = abs((1.0 - _1394) / _1403);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1394 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1902 = frontier_phi_38_33_ladder;
        }
        float _1904 = isnan(_1656) ? _1431 : (isnan(_1431) ? _1656 : min(_1431, _1656));
        float _1905 = isnan(_1902) ? _1904 : (isnan(_1904) ? _1902 : min(_1904, _1902));
        float _1909 = (_1905 * _1397) + _1386;
        float _1910 = (_1905 * _1400) + _1390;
        float _1911 = (_1905 * _1403) + _1394;
        float _1912 = _1905 * 9.9999997473787516355514526367188e-05;
        float _1914 = (-1.0) - _1912;
        float _1916 = _1912 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1911 > _1916) || ((_1911 < _1914) || ((_1910 > _1916) || ((_1910 < _1914) || ((_1909 < _1914) || (_1909 > _1916))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2035 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1911, cbModelParam._m0[9u].z, fma(_1910, cbModelParam._m0[9u].y, _1909 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1911, cbModelParam._m0[10u].z, fma(_1910, cbModelParam._m0[10u].y, _1909 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1911, cbModelParam._m0[11u].z, fma(_1910, cbModelParam._m0[11u].y, _1909 * cbModelParam._m0[11u].x))), _1338);
            frontier_phi_16_38_ladder = _2035.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2035.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2035.x * cbModelParam._m0[1u].y;
        }
        _1419 = frontier_phi_16_38_ladder_2;
        _1421 = frontier_phi_16_38_ladder_1;
        _1423 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1407 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_496, _497, _498), _1338);
        _1419 = _1407.x * cbModelParam._m0[1u].y;
        _1421 = _1407.y * cbModelParam._m0[1u].y;
        _1423 = _1407.z * cbModelParam._m0[1u].y;
    }
    float _1427 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _325);
    float _1428 = isnan(_1427) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1427 : min(cbModelParam._m0[25u].w, _1427));
    float _1520;
    float _1522;
    float _1524;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1484 = fma(_557, cbModelParam._m0[21u].z, fma(_553, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _549)) + cbModelParam._m0[21u].w;
        float _1488 = fma(_557, cbModelParam._m0[22u].z, fma(_553, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _549)) + cbModelParam._m0[22u].w;
        float _1492 = fma(_557, cbModelParam._m0[23u].z, fma(_553, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _549)) + cbModelParam._m0[23u].w;
        float _1495 = fma(_498, cbModelParam._m0[21u].z, fma(_497, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _496));
        float _1498 = fma(_498, cbModelParam._m0[22u].z, fma(_497, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _496));
        float _1501 = fma(_498, cbModelParam._m0[23u].z, fma(_497, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _496));
        float _1661;
        if (_1495 > 0.0)
        {
            _1661 = abs((1.0 - _1484) / _1495);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1484 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1661 = frontier_phi_28_24_ladder;
        }
        float _1929;
        if (_1498 > 0.0)
        {
            _1929 = abs((1.0 - _1488) / _1498);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1498 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1488 + 1.0) / _1498);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1929 = frontier_phi_40_35_ladder;
        }
        float _2134;
        if (_1501 > 0.0)
        {
            _2134 = abs((1.0 - _1492) / _1501);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1492 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2134 = frontier_phi_49_46_ladder;
        }
        float _2136 = isnan(_1929) ? _1661 : (isnan(_1661) ? _1929 : min(_1661, _1929));
        float _2137 = isnan(_2134) ? _2136 : (isnan(_2136) ? _2134 : min(_2136, _2134));
        float _2141 = (_2137 * _1495) + _1484;
        float _2142 = (_2137 * _1498) + _1488;
        float _2143 = (_2137 * _1501) + _1492;
        float _2144 = _2137 * 9.9999997473787516355514526367188e-05;
        float _2145 = (-1.0) - _2144;
        float _2147 = _2144 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2143 > _2147) || ((_2143 < _2145) || ((_2142 > _2147) || ((_2142 < _2145) || ((_2141 < _2145) || (_2141 > _2147))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2377 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2143, cbModelParam._m0[17u].z, fma(_2142, cbModelParam._m0[17u].y, _2141 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2143, cbModelParam._m0[18u].z, fma(_2142, cbModelParam._m0[18u].y, _2141 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2143, cbModelParam._m0[19u].z, fma(_2142, cbModelParam._m0[19u].y, _2141 * cbModelParam._m0[19u].x))), _1428);
            frontier_phi_25_49_ladder = _2377.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2377.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2377.x * cbModelParam._m0[1u].z;
        }
        _1520 = frontier_phi_25_49_ladder_2;
        _1522 = frontier_phi_25_49_ladder_1;
        _1524 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1504 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_496, _497, _498), _1428);
        _1520 = _1504.x * cbModelParam._m0[1u].z;
        _1522 = _1504.y * cbModelParam._m0[1u].z;
        _1524 = _1504.z * cbModelParam._m0[1u].z;
    }
    float _1536 = ((((1.0 - _517) * ((_504 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_517 * _504)) * _488;
    float _1537 = _1536 * ((cbModelParam._m0[1u].w * (_1520 - _1419)) + _1419);
    float _1538 = _1536 * ((cbModelParam._m0[1u].w * (_1522 - _1421)) + _1421);
    float _1539 = _1536 * ((cbModelParam._m0[1u].w * (_1524 - _1423)) + _1423);
    float _1542 = fma(_1539, cbSceneParam._m0[89u].z, fma(_1538, cbSceneParam._m0[89u].y, _1537 * cbSceneParam._m0[89u].x));
    float _1545 = fma(_1539, cbSceneParam._m0[90u].z, fma(_1538, cbSceneParam._m0[90u].y, _1537 * cbSceneParam._m0[90u].x));
    float _1548 = fma(_1539, cbSceneParam._m0[91u].z, fma(_1538, cbSceneParam._m0[91u].y, _1537 * cbSceneParam._m0[91u].x));
    vec4 _1556 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_423, _424));
    float _1558 = _1556.w;
    float _1570 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1558);
    float _1571 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1558);
    float _1572 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1558);
    uvec4 _1576 = floatBitsToUint(cbInstanceData._m0[_463 + 5u]);
    uint _1578 = _1576.x * 14u;
    uint _1579 = _1578 + 13u;
    float _1586 = _488 + (-1.0);
    float _1591 = (cbLight._m0[_1579].x * _1586) + 1.0;
    float _1592 = (cbLight._m0[_1579].y * _1586) + 1.0;
    float _1593 = (cbLight._m0[_1579].z * _1586) + 1.0;
    float _1594 = (cbLight._m0[_1579].w * _1586) + 1.0;
    uint _1595 = _1578 + 5u;
    float _1601 = isnan(1.0) ? _1592 : (isnan(_1592) ? 1.0 : min(_1592, 1.0));
    uint _1605 = _1578 + 4u;
    float _1615 = isnan(1.0) ? _1591 : (isnan(_1591) ? 1.0 : min(_1591, 1.0));
    uint _1619 = _1578 | 1u;
    float _1630 = dot(vec3(cbLight._m0[_1578].xyz), vec3(_322, _323, _324));
    float _1633 = dot(vec3(cbLight._m0[_1619].xyz), vec3(_322, _323, _324));
    float _3825 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
    float _3836 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
    float _1638 = (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * 0.3183098733425140380859375;
    float _1640 = (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * 0.3183098733425140380859375;
    float _1647 = ((cbLight._m0[_1595].x * _1601) * _1640) + (((cbLight._m0[_1605].x * _1570) * _1615) * _1638);
    float _1648 = ((_1601 * cbLight._m0[_1595].y) * _1640) + (((cbLight._m0[_1605].y * _1571) * _1615) * _1638);
    float _1649 = ((_1601 * cbLight._m0[_1595].z) * _1640) + (((cbLight._m0[_1605].z * _1572) * _1615) * _1638);
    uvec4 _1653 = floatBitsToUint(cbLight._m0[_1578 + 12u]);
    bool _1655 = _1653.x == 0u;
    float _1666;
    float _1668;
    float _1670;
    if (_1655)
    {
        _1666 = _1647;
        _1668 = _1648;
        _1670 = _1649;
    }
    else
    {
        uint _1674 = _1578 + 6u;
        float _1690 = (dot(vec3(cbLight._m0[_1578 + 2u].xyz), vec3(_322, _323, _324)) * 0.5) + 0.5;
        float _1691 = _1690 * _1690;
        float _3847 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1693 = isnan(1.0) ? _1593 : (isnan(_1593) ? 1.0 : min(_1593, 1.0));
        _1666 = (((cbLight._m0[_1674].x * 0.3183098733425140380859375) * _1692) * _1693) + _1647;
        _1668 = (((cbLight._m0[_1674].y * 0.3183098733425140380859375) * _1692) * _1693) + _1648;
        _1670 = (((cbLight._m0[_1674].z * 0.3183098733425140380859375) * _1692) * _1693) + _1649;
    }
    bool _1673 = _1653.y == 0u;
    float _1711;
    float _1713;
    float _1715;
    if (_1673)
    {
        _1711 = _1666;
        _1713 = _1668;
        _1715 = _1670;
    }
    else
    {
        uint _1873 = _1578 + 7u;
        float _1889 = (dot(vec3(cbLight._m0[_1578 + 3u].xyz), vec3(_322, _323, _324)) * 0.5) + 0.5;
        float _1890 = _1889 * _1889;
        float _3863 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        float _1891 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1892 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
        _1711 = (((cbLight._m0[_1873].x * 0.3183098733425140380859375) * _1891) * _1892) + _1666;
        _1713 = (((cbLight._m0[_1873].y * 0.3183098733425140380859375) * _1891) * _1892) + _1668;
        _1715 = (((cbLight._m0[_1873].z * 0.3183098733425140380859375) * _1891) * _1892) + _1670;
    }
    uint _1718 = _1578 + 8u;
    float _1731 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1578].w)) * _325) * 0.949999988079071044921875);
    float _1732 = _1731 * _1731;
    float _1733 = cbLight._m0[_1578].x + _402;
    float _1734 = cbLight._m0[_1578].y + _403;
    float _1735 = cbLight._m0[_1578].z + _404;
    float _1739 = inversesqrt(dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735)));
    float _1740 = _1739 * _1733;
    float _1741 = _1739 * _1734;
    float _1742 = _1739 * _1735;
    float _1743 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_1578].xyz));
    float _3879 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1746 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _3890 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _1747 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _1748 = dot(vec3(_322, _323, _324), vec3(_1740, _1741, _1742));
    float _3901 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1751 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _1752 = dot(vec3(cbLight._m0[_1578].xyz), vec3(_1740, _1741, _1742));
    float _3912 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1756 = _1732 * _1732;
    float _1760 = ((_1751 * _1751) * (_1756 + (-1.0))) + 1.0;
    float _1771 = (exp2(log2(1.0 - (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1772 = 1.0 - _1732;
    float _1783 = (0.5 / (((_1747 * ((_1746 * _1772) + _1732)) + 9.9999999392252902907785028219223e-09) + (((_1747 * _1772) + _1732) * _1746))) * _1746;
    float _3923 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1785 = (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1756 / ((_1760 * _1760) * 3.141590118408203125));
    uint _1799 = _1578 + 9u;
    float _1810 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1619].w)) * _325) * 0.949999988079071044921875);
    float _1811 = _1810 * _1810;
    float _1812 = cbLight._m0[_1619].x + _402;
    float _1813 = cbLight._m0[_1619].y + _403;
    float _1814 = cbLight._m0[_1619].z + _404;
    float _1818 = inversesqrt(dot(vec3(_1812, _1813, _1814), vec3(_1812, _1813, _1814)));
    float _1819 = _1818 * _1812;
    float _1820 = _1818 * _1813;
    float _1821 = _1818 * _1814;
    float _1822 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_1619].xyz));
    float _3934 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1825 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _1826 = dot(vec3(_322, _323, _324), vec3(_1819, _1820, _1821));
    float _3945 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1829 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _1830 = dot(vec3(cbLight._m0[_1619].xyz), vec3(_1819, _1820, _1821));
    float _3956 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1834 = _1811 * _1811;
    float _1838 = ((_1829 * _1829) * (_1834 + (-1.0))) + 1.0;
    float _1847 = (exp2(log2(1.0 - (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1848 = 1.0 - _1811;
    float _1858 = (0.5 / (((_1747 * ((_1825 * _1848) + _1811)) + 9.9999999392252902907785028219223e-09) + (((_1747 * _1848) + _1811) * _1825))) * _1825;
    float _3967 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1860 = (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1834 / ((_1838 * _1838) * 3.141590118408203125));
    float _1870 = (((_1847 * cbLight._m0[_1799].x) * _1860) * _1601) + ((((cbLight._m0[_1718].x * _1570) * _1771) * _1785) * _1615);
    float _1871 = (((_1847 * cbLight._m0[_1799].y) * _1860) * _1601) + ((((cbLight._m0[_1718].y * _1571) * _1771) * _1785) * _1615);
    float _1872 = (((_1847 * cbLight._m0[_1799].z) * _1860) * _1601) + ((((cbLight._m0[_1718].z * _1572) * _1771) * _1785) * _1615);
    float _1934;
    float _1936;
    float _1938;
    if (_1655)
    {
        _1934 = _1870;
        _1936 = _1871;
        _1938 = _1872;
    }
    else
    {
        uint _1940 = _1578 + 2u;
        uint _1944 = _1578 + 10u;
        float _1958 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1940].w)) * _325) * 0.949999988079071044921875);
        float _1959 = _1958 * _1958;
        float _1960 = cbLight._m0[_1940].x + _402;
        float _1961 = cbLight._m0[_1940].y + _403;
        float _1962 = cbLight._m0[_1940].z + _404;
        float _1966 = inversesqrt(dot(vec3(_1960, _1961, _1962), vec3(_1960, _1961, _1962)));
        float _1967 = _1966 * _1960;
        float _1968 = _1966 * _1961;
        float _1969 = _1966 * _1962;
        float _1970 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_1940].xyz));
        float _3978 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1973 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1974 = dot(vec3(_322, _323, _324), vec3(_1967, _1968, _1969));
        float _3989 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1977 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1978 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_1967, _1968, _1969));
        float _4000 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1982 = _1959 * _1959;
        float _1986 = ((_1977 * _1977) * (_1982 + (-1.0))) + 1.0;
        float _1995 = (exp2(log2(1.0 - (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1996 = 1.0 - _1959;
        float _2006 = (0.5 / (((_1747 * ((_1973 * _1996) + _1959)) + 9.9999999392252902907785028219223e-09) + (((_1747 * _1996) + _1959) * _1973))) * _1973;
        float _4011 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2008 = (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1982 / ((_1986 * _1986) * 3.141590118408203125));
        float _2009 = isnan(1.0) ? _1593 : (isnan(_1593) ? 1.0 : min(_1593, 1.0));
        _1934 = (((_1995 * cbLight._m0[_1944].x) * _2008) * _2009) + _1870;
        _1936 = (((_1995 * cbLight._m0[_1944].y) * _2008) * _2009) + _1871;
        _1938 = (((_1995 * cbLight._m0[_1944].z) * _2008) * _2009) + _1872;
    }
    float _2044;
    float _2046;
    float _2048;
    if (_1673)
    {
        _2044 = _1934;
        _2046 = _1936;
        _2048 = _1938;
    }
    else
    {
        uint _2055 = _1578 + 3u;
        uint _2059 = _1578 + 11u;
        float _2073 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2055].w)) * _325) * 0.949999988079071044921875);
        float _2074 = _2073 * _2073;
        float _2075 = cbLight._m0[_2055].x + _402;
        float _2076 = cbLight._m0[_2055].y + _403;
        float _2077 = cbLight._m0[_2055].z + _404;
        float _2081 = inversesqrt(dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077)));
        float _2082 = _2081 * _2075;
        float _2083 = _2081 * _2076;
        float _2084 = _2081 * _2077;
        float _2085 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_2055].xyz));
        float _4027 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2088 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _2089 = dot(vec3(_322, _323, _324), vec3(_2082, _2083, _2084));
        float _4038 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2092 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _2093 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_2082, _2083, _2084));
        float _4049 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2097 = _2074 * _2074;
        float _2101 = ((_2092 * _2092) * (_2097 + (-1.0))) + 1.0;
        float _2110 = (exp2(log2(1.0 - (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2111 = 1.0 - _2074;
        float _2121 = (0.5 / (((_1747 * ((_2088 * _2111) + _2074)) + 9.9999999392252902907785028219223e-09) + (((_1747 * _2111) + _2074) * _2088))) * _2088;
        float _4060 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2123 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_2097 / ((_2101 * _2101) * 3.141590118408203125));
        float _2124 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
        _2044 = (((_2110 * cbLight._m0[_2059].x) * _2123) * _2124) + _1934;
        _2046 = (((_2110 * cbLight._m0[_2059].y) * _2123) * _2124) + _1936;
        _2048 = (((_2110 * cbLight._m0[_2059].z) * _2123) * _2124) + _1938;
    }
    float _2259;
    float _2261;
    float _2263;
    float _2265;
    float _2267;
    float _2269;
    if (_1576.y == 0u)
    {
        float _2199 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2200 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2199;
        float _2201 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2199;
        float _2202 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2199;
        uvec4 _2214 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2215 = _2214.x;
        uint _2226 = uint((float(_2214.y) * floor(float(uint(cbSceneParam._m0[85u].y * _424) / _2215))) + floor(float(uint(cbSceneParam._m0[85u].x * _423) / _2215)));
        float _2236 = (log2(_2202 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2237 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        uint _2240 = uint(isnan(14.0) ? _2237 : (isnan(_2237) ? 14.0 : min(_2237, 14.0)));
        uvec4 _2245 = texelFetch(g_lightClusterGridBuffer, int(((_2240 << 2u) + (_2226 << 6u)) >> 2u));
        uint _2246 = _2245.x;
        uint _2247 = _2214.z;
        float _2382;
        float _2384;
        float _2386;
        float _2388;
        float _2390;
        float _2392;
        if (((((1u << ((_2247 >> 4u) & 15u)) + 4294967295u) & _2246) == 0u) || ((_2247 & 240u) == 0u))
        {
            _2382 = 0.0;
            _2384 = 0.0;
            _2386 = 0.0;
            _2388 = 0.0;
            _2390 = 0.0;
            _2392 = 0.0;
        }
        else
        {
            float _2383;
            float _2385;
            float _2387;
            float _2389;
            float _2391;
            float _2393;
            float _2544 = 0.0;
            float _2545 = 0.0;
            float _2546 = 0.0;
            float _2547 = 0.0;
            float _2548 = 0.0;
            float _2549 = 0.0;
            uint _2550 = 0u;
            uint _2559;
            bool _2560;
            for (;;)
            {
                _2559 = texelFetch(g_lightClassification, int((((_2240 << 5u) + (_2226 << 9u)) + (_2550 << 2u)) >> 2u)).x;
                _2560 = _2559 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2560)
                {
                    frontier_phi_66_pred = _2544;
                    frontier_phi_66_pred_1 = _2549;
                    frontier_phi_66_pred_2 = _2548;
                    frontier_phi_66_pred_3 = _2547;
                    frontier_phi_66_pred_4 = _2546;
                    frontier_phi_66_pred_5 = _2545;
                }
                else
                {
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    float _2694;
                    uint _2695;
                    _2689 = _2544;
                    _2690 = _2545;
                    _2691 = _2546;
                    _2692 = _2547;
                    _2693 = _2548;
                    _2694 = _2549;
                    _2695 = _2559;
                    float _2616;
                    float _2617;
                    float _2618;
                    float _2619;
                    float _2620;
                    float _2621;
                    for (;;)
                    {
                        uint _2699 = uint(findLSB(_2695)) + (_2550 << 5u);
                        uint _2696 = (_2695 + 4294967295u) & _2695;
                        uint _2701 = _2699 * 48u;
                        vec4 _2715 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2701)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 3u)).x));
                        uint _2721 = (_2699 * 48u) + 4u;
                        vec4 _2734 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2721)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 3u)).x));
                        uint _2740 = (_2699 * 48u) + 8u;
                        vec3 _2751 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2740)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 2u)).x));
                        float _2755 = _2715.x - _2200;
                        float _2756 = _2715.y - _2201;
                        float _2757 = _2715.z - _2202;
                        float _2758 = dot(vec3(_2755, _2756, _2757), vec3(_2755, _2756, _2757));
                        float _2761 = inversesqrt(_2758);
                        float _2762 = _2761 * _2755;
                        float _2763 = _2761 * _2756;
                        float _2764 = _2761 * _2757;
                        float _2765 = dot(vec3(_444, _447, _450), vec3(_2762, _2763, _2764));
                        float _2770 = 1.0 - (_2758 * _2715.w);
                        float _4086 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
                        float _2771 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
                        float _2772 = sqrt(_2758) * _2734.w;
                        float _2775 = 1.39999997615814208984375 / (_2772 + 1.39999997615814208984375);
                        float _2776 = _2775 * _2775;
                        float _2779 = ((1.0 - _2776) * _2765) + _2776;
                        float _2782 = _2772 * _2772;
                        float _2786 = ((isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0))) * _2771) / ((_2782 * 0.699999988079071044921875) + 1.0);
                        float _2790 = (-0.0) - _2200;
                        float _2791 = (-0.0) - _2201;
                        float _2792 = (-0.0) - _2202;
                        float _2796 = inversesqrt(dot(vec3(_2790, _2791, _2792), vec3(_2790, _2791, _2792)));
                        float _2797 = _2796 * _2790;
                        float _2798 = _2796 * _2791;
                        float _2799 = _2796 * _2792;
                        float _2807 = exp2(log2(1.0 / ((_2782 * 3.5) + 5.0)) * 0.25);
                        float _2808 = 1.0 - _504;
                        float _2815 = sqrt(1.0 - ((1.0 - (_2808 * _2808)) * (1.0 - (_2807 * _2807))));
                        float _2816 = _2815 * _2815;
                        float _2817 = _2816 * _2816;
                        float _2818 = _2797 + _2762;
                        float _2819 = _2798 + _2763;
                        float _2820 = _2799 + _2764;
                        float _2824 = inversesqrt(dot(vec3(_2818, _2819, _2820), vec3(_2818, _2819, _2820)));
                        float _2828 = dot(vec3(_444, _447, _450), vec3(_2797, _2798, _2799));
                        float _4102 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                        float _2831 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
                        float _2832 = dot(vec3(_444, _447, _450), vec3(_2824 * _2818, _2824 * _2819, _2824 * _2820));
                        float _4113 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                        float _2835 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                        float _2839 = ((_2835 * _2835) * (_2817 + (-1.0))) + 1.0;
                        float _2840 = _2775 * _2816;
                        float _2841 = _2840 * _2840;
                        float _2844 = ((1.0 - _2841) * _2765) + _2841;
                        float _4124 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                        float _2845 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
                        float _2846 = 1.0 - _2816;
                        float _2856 = (0.5 / (((_2845 * ((_2831 * _2846) + _2816)) + 9.9999999392252902907785028219223e-09) + (((_2845 * _2846) + _2816) * _2831))) * _2845;
                        float _4135 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
                        float _2867 = (((_2817 * 3.1415927410125732421875) * (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) / ((_2839 * _2839) * ((_2782 * 2.1991131305694580078125) + 3.141590118408203125))) * _2771;
                        _2619 = (_2786 * _2734.x) + _2692;
                        _2620 = (_2786 * _2734.y) + _2693;
                        _2621 = (_2786 * _2734.z) + _2694;
                        _2616 = (_2867 * _2751.x) + _2689;
                        _2617 = (_2867 * _2751.y) + _2690;
                        _2618 = (_2867 * _2751.z) + _2691;
                        if (_2696 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2689 = _2616;
                            _2690 = _2617;
                            _2691 = _2618;
                            _2692 = _2619;
                            _2693 = _2620;
                            _2694 = _2621;
                            _2695 = _2696;
                        }
                    }
                    frontier_phi_66_pred = _2616;
                    frontier_phi_66_pred_1 = _2621;
                    frontier_phi_66_pred_2 = _2620;
                    frontier_phi_66_pred_3 = _2619;
                    frontier_phi_66_pred_4 = _2618;
                    frontier_phi_66_pred_5 = _2617;
                }
                _2383 = frontier_phi_66_pred;
                _2393 = frontier_phi_66_pred_1;
                _2391 = frontier_phi_66_pred_2;
                _2389 = frontier_phi_66_pred_3;
                _2387 = frontier_phi_66_pred_4;
                _2385 = frontier_phi_66_pred_5;
                uint _2551 = _2550 + 1u;
                if (_2551 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2544 = _2383;
                    _2545 = _2385;
                    _2546 = _2387;
                    _2547 = _2389;
                    _2548 = _2391;
                    _2549 = _2393;
                    _2550 = _2551;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2382 = _2383;
            _2384 = _2385;
            _2386 = _2387;
            _2388 = _2389;
            _2390 = _2391;
            _2392 = _2393;
        }
        uvec4 _2396 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2397 = _2396.z;
        uint _2399 = (_2397 >> 8u) & 15u;
        float _2512;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        if (((4294967295u << _2399) & _2246) == 0u)
        {
            _2512 = _2382;
            _2514 = _2384;
            _2516 = _2386;
            _2518 = _2388;
            _2520 = _2390;
            _2522 = _2392;
        }
        else
        {
            float _2537 = inversesqrt(dot(vec3(_2200, _2201, _2202), vec3(_2200, _2201, _2202)));
            float _2538 = _2537 * _2200;
            float _2539 = _2537 * _2201;
            float _2540 = _2537 * _2202;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2399 < ((_2397 >> 12u) & 15u))
            {
                float _2513;
                float _2515;
                float _2517;
                float _2519;
                float _2521;
                float _2523;
                float _2672 = _2382;
                float _2673 = _2384;
                float _2674 = _2386;
                float _2675 = _2388;
                float _2676 = _2390;
                float _2677 = _2392;
                uint _2678 = _2399;
                uint _2687;
                bool _2688;
                for (;;)
                {
                    _2687 = texelFetch(g_lightClassification, int((((_2240 << 5u) + (_2226 << 9u)) + (_2678 << 2u)) >> 2u)).x;
                    _2688 = _2687 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2688)
                    {
                        frontier_phi_77_pred = _2677;
                        frontier_phi_77_pred_1 = _2676;
                        frontier_phi_77_pred_2 = _2675;
                        frontier_phi_77_pred_3 = _2674;
                        frontier_phi_77_pred_4 = _2673;
                        frontier_phi_77_pred_5 = _2672;
                    }
                    else
                    {
                        float _2881;
                        float _2882;
                        float _2883;
                        float _2884;
                        float _2885;
                        float _2886;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _2894 = _2672;
                        float _2895 = _2673;
                        float _2896 = _2674;
                        float _2897 = _2675;
                        float _2898 = _2676;
                        float _2899 = _2677;
                        uint _2900 = _2687;
                        uint _2901;
                        vec4 _2926;
                        float _2927;
                        vec4 _2942;
                        vec3 _2954;
                        vec4 _2970;
                        vec4 _2986;
                        float _3033;
                        bool _3034;
                        for (;;)
                        {
                            uint _2911 = ((_2678 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2900));
                            _2901 = (_2900 + 4294967295u) & _2900;
                            uint _2913 = _2911 * 40u;
                            _2926 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 3u)).x));
                            _2927 = _2926.w;
                            uint _2929 = (_2911 * 40u) + 4u;
                            _2942 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 3u)).x));
                            uint _2944 = (_2911 * 40u) + 8u;
                            _2954 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2944)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 2u)).x));
                            uint _2957 = (_2911 * 40u) + 16u;
                            _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            uint _2973 = (_2911 * 40u) + 20u;
                            _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            uint _2989 = (_2911 * 40u) + 24u;
                            vec4 _3002 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2989)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 3u)).x));
                            uint _3008 = (_2911 * 40u) + 28u;
                            vec4 _3021 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3008)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 3u)).x));
                            _3033 = fma(_2202, _3021.z, fma(_2201, _3021.y, _3021.x * _2200)) + _3021.w;
                            _3034 = !((fma(_2202, _3002.z, fma(_2201, _3002.y, _3002.x * _2200)) + _3002.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3034)
                            {
                                float _3061 = _2926.x - _2200;
                                float _3062 = _2926.y - _2201;
                                float _3063 = _2926.z - _2202;
                                float _3064 = dot(vec3(_3061, _3062, _3063), vec3(_3061, _3062, _3063));
                                float _3067 = inversesqrt(_3064);
                                float _3068 = _3067 * _3061;
                                float _3069 = _3067 * _3062;
                                float _3070 = _3067 * _3063;
                                float _3074 = 1.0 - (_3064 / (_2927 * _2927));
                                float _4146 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                                float _3075 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
                                float _3079 = sqrt(_3064) * _2942.w;
                                float _3081 = 1.39999997615814208984375 / (_3079 + 1.39999997615814208984375);
                                float _3082 = _3081 * _3081;
                                float _3085 = ((1.0 - _3082) * dot(vec3(_3068, _3069, _3070), vec3(_444, _447, _450))) + _3082;
                                float _3088 = _3079 * _3079;
                                float _3092 = (fma(_2202, _2970.z, fma(_2201, _2970.y, _2970.x * _2200)) + _2970.w) / _3033;
                                float _3093 = (fma(_2202, _2986.z, fma(_2201, _2986.y, _2986.x * _2200)) + _2986.w) / _3033;
                                float _3097 = 1.0 - dot(vec2(_3092, _3093), vec2(_3092, _3093));
                                float _4162 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                                float _3098 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
                                float _3099 = _3098 * (((isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0))) * _3075) / ((_3088 * 0.699999988079071044921875) + 1.0));
                                float _3111 = exp2(log2(1.0 / ((_3088 * 3.5) + 5.0)) * 0.25);
                                float _3112 = 1.0 - _504;
                                float _3119 = sqrt(1.0 - ((1.0 - (_3112 * _3112)) * (1.0 - (_3111 * _3111))));
                                float _3120 = _3119 * _3119;
                                float _3121 = _3120 * _3120;
                                float _3122 = _3068 - _2538;
                                float _3123 = _3069 - _2539;
                                float _3124 = _3070 - _2540;
                                float _3128 = inversesqrt(dot(vec3(_3122, _3123, _3124), vec3(_3122, _3123, _3124)));
                                float _3132 = dot(vec3(_444, _447, _450), vec3((-0.0) - _2538, (-0.0) - _2539, (-0.0) - _2540));
                                float _4173 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                                float _3135 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
                                float _3136 = dot(vec3(_444, _447, _450), vec3(_3128 * _3122, _3128 * _3123, _3128 * _3124));
                                float _4184 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                                float _3139 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                                float _3143 = ((_3139 * _3139) * (_3121 + (-1.0))) + 1.0;
                                float _3144 = _3081 * _3120;
                                float _3145 = _3144 * _3144;
                                float _3151 = ((1.0 - _3145) * dot(vec3(_444, _447, _450), vec3(_3068, _3069, _3070))) + _3145;
                                float _4195 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                                float _3152 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                                float _3153 = 1.0 - _3120;
                                float _3163 = (0.5 / (((_3152 * ((_3135 * _3153) + _3120)) + 9.9999999392252902907785028219223e-09) + (((_3152 * _3153) + _3120) * _3135))) * _3152;
                                float _4206 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                                float _3173 = (_3098 * _3075) * (((_3121 * 3.1415927410125732421875) * (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)))) / ((_3143 * _3143) * ((_3088 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3099 * _2942.y;
                                frontier_phi_83_pred_1 = _3099 * _2942.x;
                                frontier_phi_83_pred_2 = _3173 * _2954.z;
                                frontier_phi_83_pred_3 = _3173 * _2954.y;
                                frontier_phi_83_pred_4 = _3173 * _2954.x;
                                frontier_phi_83_pred_5 = _3099 * _2942.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3181 = frontier_phi_83_pred;
                            _3180 = frontier_phi_83_pred_1;
                            _3179 = frontier_phi_83_pred_2;
                            _3178 = frontier_phi_83_pred_3;
                            _3177 = frontier_phi_83_pred_4;
                            _3182 = frontier_phi_83_pred_5;
                            _2884 = _3180 + _2897;
                            _2885 = _3181 + _2898;
                            _2886 = _3182 + _2899;
                            _2881 = _3177 + _2894;
                            _2882 = _3178 + _2895;
                            _2883 = _3179 + _2896;
                            if (_2901 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2894 = _2881;
                                _2895 = _2882;
                                _2896 = _2883;
                                _2897 = _2884;
                                _2898 = _2885;
                                _2899 = _2886;
                                _2900 = _2901;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2886;
                        frontier_phi_77_pred_1 = _2885;
                        frontier_phi_77_pred_2 = _2884;
                        frontier_phi_77_pred_3 = _2883;
                        frontier_phi_77_pred_4 = _2882;
                        frontier_phi_77_pred_5 = _2881;
                    }
                    _2523 = frontier_phi_77_pred;
                    _2521 = frontier_phi_77_pred_1;
                    _2519 = frontier_phi_77_pred_2;
                    _2517 = frontier_phi_77_pred_3;
                    _2515 = frontier_phi_77_pred_4;
                    _2513 = frontier_phi_77_pred_5;
                    uint _2679 = _2678 + 1u;
                    if (_2679 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2672 = _2513;
                        _2673 = _2515;
                        _2674 = _2517;
                        _2675 = _2519;
                        _2676 = _2521;
                        _2677 = _2523;
                        _2678 = _2679;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2517;
                frontier_phi_58_59_ladder_1 = _2523;
                frontier_phi_58_59_ladder_2 = _2521;
                frontier_phi_58_59_ladder_3 = _2519;
                frontier_phi_58_59_ladder_4 = _2515;
                frontier_phi_58_59_ladder_5 = _2513;
            }
            else
            {
                frontier_phi_58_59_ladder = _2386;
                frontier_phi_58_59_ladder_1 = _2392;
                frontier_phi_58_59_ladder_2 = _2390;
                frontier_phi_58_59_ladder_3 = _2388;
                frontier_phi_58_59_ladder_4 = _2384;
                frontier_phi_58_59_ladder_5 = _2382;
            }
            _2512 = frontier_phi_58_59_ladder_5;
            _2514 = frontier_phi_58_59_ladder_4;
            _2516 = frontier_phi_58_59_ladder;
            _2518 = frontier_phi_58_59_ladder_3;
            _2520 = frontier_phi_58_59_ladder_2;
            _2522 = frontier_phi_58_59_ladder_1;
        }
        float _2527 = isnan(1.0) ? _488 : (isnan(_488) ? 1.0 : min(_488, 1.0));
        _2259 = (_2527 * _2518) + _1711;
        _2261 = (_2527 * _2520) + _1713;
        _2263 = (_2527 * _2522) + _1715;
        _2265 = ((_2512 * 0.039999999105930328369140625) * _2527) + _2044;
        _2267 = ((_2514 * 0.039999999105930328369140625) * _2527) + _2046;
        _2269 = ((_2516 * 0.039999999105930328369140625) * _2527) + _2048;
    }
    else
    {
        _2259 = _1711;
        _2261 = _1713;
        _2263 = _1715;
        _2265 = _2044;
        _2267 = _2046;
        _2269 = _2048;
    }
    uint _2275 = _464 + uint(cbMatDynParam._m0[0u].w);
    float _2283 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _304.x) * cbInstanceData._m0[_2275].x;
    float _2286 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _304.y) * cbInstanceData._m0[_2275].y;
    float _2289 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _304.z) * cbInstanceData._m0[_2275].z;
    float _4222 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _4233 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _4244 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _2306 = (((isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_2259 + ((isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))) * _488))) + ((_2265 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _1327)) * cbPerFrame._m0[3u].x)) + _2283;
    float _2308 = (_2286 + ((_2267 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _1327)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_2261 + ((isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))) * _488)));
    float _2310 = (_2289 + ((_2269 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _1327)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2263 + ((isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))) * _488)));
    float _2311 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2312 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2313 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2319 = cbMtdParam._m0[2u].x * _2283;
    float _2320 = cbMtdParam._m0[2u].y * _2286;
    float _2321 = cbMtdParam._m0[2u].z * _2289;
    float _4270 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2323 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    uint _2324 = _463 + 6u;
    float _2332 = _423 / cbSceneParam._m0[86u].x;
    float _2333 = _424 / cbSceneParam._m0[86u].y;
    vec4 _2347 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2332, _2333, (log2((isnan(cbSceneParam._m0[77u].w) ? _344 : (isnan(_344) ? cbSceneParam._m0[77u].w : min(_344, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2349 = _2347.x;
    float _2350 = _2347.y;
    float _2351 = _2347.z;
    float _2352 = _2347.w;
    float _2445;
    float _2447;
    float _2449;
    float _2451;
    if (_344 > cbSceneParam._m0[78u].w)
    {
        float _2407 = isnan(_344) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _344 : min(cbSceneParam._m0[80u].w, _344));
        float _2408 = _2407 / _344;
        float _2419 = _2408 * _395;
        float _2420 = _396 * _2408;
        float _2421 = (-0.0) - _2420;
        float _2423 = _2408 * _397;
        float _2425 = (cbSceneParam._m0[77u].w * _2421) / _2407;
        float _2426 = _2425 + cbSceneParam._m0[79u].w;
        float _2427 = cbSceneParam._m0[79u].w - _2420;
        float _2433 = sqrt(((_2419 * _2419) + (_2420 * _2420)) + (_2423 * _2423));
        float _2436 = (1.0 - (cbSceneParam._m0[77u].w / _2407)) * _2433;
        float _2441 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2443 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2629;
        if (abs((_2421 - _2425) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2629 = ((((_2426 > 0.0) ? exp2(_2441 * _2426) : (2.0 - exp2(_2443 * _2426))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2436;
        }
        else
        {
            float _2573 = 1.0 / cbSceneParam._m0[80u].x;
            float _2574 = isnan(_2427) ? _2426 : (isnan(_2426) ? _2427 : max(_2426, _2427));
            float _2575 = isnan(_2427) ? _2426 : (isnan(_2426) ? _2427 : min(_2426, _2427));
            float _2584 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : min(_2574, 0.0));
            float _2585 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : min(_2575, 0.0));
            _2629 = ((abs(_2433 / _2421) * cbSceneParam._m0[80u].y) * ((((_2584 - _2585) * 2.0) - ((exp2(_2441 * (isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0)))) - exp2(_2441 * (isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0))))) * _2573)) - ((exp2(_2443 * _2584) - exp2(_2443 * _2585)) * _2573))) + (_2436 * cbSceneParam._m0[80u].z);
        }
        vec4 _2631 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2332, _2333, 1.0), 0.0);
        float _2640 = exp2((_2629 * (-1.44269502162933349609375)) * (1.0 - _2631.w));
        float _2641 = log2(_2640);
        float _2657 = log2(_2352);
        _2445 = (exp2(_2657 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2641 * cbSceneParam._m0[78u].x)) * _2631.x) / cbSceneParam._m0[78u].x)) + _2349;
        _2447 = (exp2(_2657 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2641 * cbSceneParam._m0[78u].y)) * _2631.y) / cbSceneParam._m0[78u].y)) + _2350;
        _2449 = (exp2(_2657 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2641 * cbSceneParam._m0[78u].z)) * _2631.z) / cbSceneParam._m0[78u].z)) + _2351;
        _2451 = _2640 * _2352;
    }
    else
    {
        _2445 = _2349;
        _2447 = _2350;
        _2449 = _2351;
        _2451 = _2352;
    }
    bool _2667;
    vec4 _2461;
    vec4 _2483;
    float _2485;
    float _2489;
    float _2490;
    float _2491;
    float _2494;
    float _2497;
    float _2500;
    float _2501;
    bool _2511;
    for (;;)
    {
        _2461 = cbMatDynParam._m0[0u];
        float _2463 = roundEven(_2461.y);
        bool _2464 = _2463 == 3.0;
        float _2465 = log2(_2451);
        float _2469 = exp2(_2465 * cbSceneParam._m0[78u].x);
        float _2470 = exp2(_2465 * cbSceneParam._m0[78u].y);
        float _2471 = exp2(_2465 * cbSceneParam._m0[78u].z);
        float _2472 = _2469 * _2311;
        float _2473 = _2470 * _2312;
        float _2474 = _2471 * _2313;
        float _2481 = _411 + (-0.5);
        _2483 = cbMtdParam._m0[1u];
        _2485 = _2483.y * _2481;
        float _2488 = (_2463 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2489 = _2488 * (_2464 ? _2472 : (_2472 + (cbSceneParam._m0[72u].w * _2445)));
        _2490 = _2488 * (_2464 ? _2473 : (_2473 + (cbSceneParam._m0[72u].w * _2447)));
        _2491 = _2488 * (_2464 ? _2474 : (_2474 + (cbSceneParam._m0[72u].w * _2449)));
        _2494 = ((_2319 * _2323) * _2469) * _2488;
        _2497 = ((_2320 * _2323) * _2470) * _2488;
        _2500 = ((_2321 * _2323) * _2471) * _2488;
        _2501 = _2481 * 0.999000012874603271484375;
        _2511 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2511)
        {
            if ((cbInstanceData._m0[_463 + 7u].x + _2501) < 0.5)
            {
                _2667 = true;
                break;
            }
        }
        uint _2608 = _464 + uint(_2461.w);
        if ((cbInstanceData._m0[_2608].w < 1.0) && ((cbInstanceData._m0[_2608].w + _2501) < 0.5))
        {
            _2667 = true;
            break;
        }
        if ((_2485 + 1.0) < _2483.x)
        {
            _2667 = true;
            break;
        }
        _2667 = false;
        break;
    }
    float _2872;
    if (_2667)
    {
        discard_state = true;
        _2872 = 0.0;
    }
    else
    {
        _2872 = cbInstanceData._m0[_2324].w;
    }
    SV_Target.x = _2489;
    SV_Target.y = _2490;
    SV_Target.z = _2491;
    SV_Target.w = _2872;
    SV_Target_1.x = _2494;
    SV_Target_1.y = _2497;
    SV_Target_1.z = _2500;
    SV_Target_1.w = cbInstanceData._m0[_2324].w;
    discard_exit();
}


