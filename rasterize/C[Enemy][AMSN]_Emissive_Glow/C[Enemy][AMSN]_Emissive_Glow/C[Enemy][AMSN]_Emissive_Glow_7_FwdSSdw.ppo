#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _859;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _183 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _184 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _185 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_183, _184, _185), vec3(_183, _184, _185)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _226 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _226.x * cbMtdParam._m0[9u].x;
    float _233 = _226.y * cbMtdParam._m0[9u].y;
    float _234 = _226.z * cbMtdParam._m0[9u].z;
    vec4 _246 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _250 = _246.z;
    float _254 = (_246.x * 2.0) + (-1.0);
    float _256 = (_246.y * 2.0) + (-1.0);
    float _257 = dot(vec2(_254, _256), vec2(_254, _256));
    float _3243 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _263 = sqrt(1.0 - (isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0))));
    vec4 _300 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _311 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3254 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _312 = isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0));
    float _320 = (((_312 * _312) * (3.0 - (_312 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _323 = fma(_263, _197 * NORMAL.x, fma(_256, _204 * TANGENT.x, (_190 * _183) * _254));
    float _326 = fma(_263, _197 * NORMAL.y, fma(_256, _204 * TANGENT.y, (_190 * _184) * _254));
    float _329 = fma(_263, _197 * NORMAL.z, fma(_256, _204 * TANGENT.z, (_190 * _185) * _254));
    float _333 = inversesqrt(dot(vec3(_323, _326, _329), vec3(_323, _326, _329)));
    float _334 = _333 * _323;
    float _335 = _333 * _326;
    float _336 = _333 * _329;
    float _3265 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _337 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
    float _3276 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3287 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3298 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _356 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _397 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _407 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _397);
    float _408 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _397);
    float _409 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _397);
    float _413 = inversesqrt(dot(vec3(_407, _408, _409), vec3(_407, _408, _409)));
    float _414 = _407 * _413;
    float _415 = _408 * _413;
    float _416 = _409 * _413;
    float _422 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _423 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _444 = fma(_336, cbSceneParam._m0[5u].z, fma(_335, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _334));
    float _447 = fma(_336, cbSceneParam._m0[6u].z, fma(_335, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _334));
    float _450 = fma(_336, cbSceneParam._m0[7u].z, fma(_335, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _334));
    uint _463 = uint(roundEven(NORMAL.w)) * 13u;
    uint _464 = _463 + 9u;
    uint _465 = _464 + uint(cbMatDynParam._m0[0u].w);
    float _471 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0)))) * cbInstanceData._m0[_465].x;
    float _472 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0)))) * cbInstanceData._m0[_465].y;
    float _473 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0)))) * cbInstanceData._m0[_465].z;
    float _3309 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
    float _3320 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
    float _3331 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _476 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    vec4 _485 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _422, cbSceneParam._m0[86u].y * _423));
    float _488 = _485.x * TEXCOORD.z;
    float _489 = dot(vec3(_334, _335, _336), vec3(_414, _415, _416));
    float _492 = _489 * 2.0;
    float _496 = (_492 * _334) - _414;
    float _497 = (_492 * _335) - _415;
    float _498 = (_492 * _336) - _416;
    float _502 = abs(dot(vec3(_414, _415, _416), vec3(_334, _335, _336)));
    float _3342 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _504 = sqrt(_337);
    float _516 = exp2((_504 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_504 * 3.0));
    float _548 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _552 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _556 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _858;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _583 = fma(_556, cbModelParam._m0[26u].z, fma(_552, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _548));
        float _587 = fma(_556, cbModelParam._m0[27u].z, fma(_552, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _548));
        float _591 = fma(_556, cbModelParam._m0[28u].z, fma(_552, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _548));
        float _616 = _548 + _334;
        float _617 = _552 + _335;
        float _618 = _556 + _336;
        float _628 = fma(_618, cbModelParam._m0[26u].z, fma(_617, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _616)) - _583;
        float _629 = fma(_618, cbModelParam._m0[27u].z, fma(_617, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _616)) - _587;
        float _630 = fma(_618, cbModelParam._m0[28u].z, fma(_617, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _616)) - _591;
        float _634 = inversesqrt(dot(vec3(_628, _629, _630), vec3(_628, _629, _630)));
        float _647 = ((_634 * _628) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_583 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _648 = ((_634 * _629) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_587 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _649 = ((_634 * _630) / cbModelParam._m0[34u].z) + ((((((_591 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _652 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        vec4 _659 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        vec4 _666 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        vec4 _673 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        float _686 = exp2((_652.w + (-0.5)) * 20.0) * 2.0;
        float _687 = _686 * (_652.x + (-0.5));
        float _688 = _686 * (_652.y + (-0.5));
        float _689 = _686 * (_652.z + (-0.5));
        float _696 = exp2((_659.w + (-0.5)) * 20.0) * 2.0;
        float _697 = _696 * (_659.x + (-0.5));
        float _698 = _696 * (_659.y + (-0.5));
        float _699 = _696 * (_659.z + (-0.5));
        float _706 = exp2((_666.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _706 * (_666.x + (-0.5));
        float _708 = _706 * (_666.y + (-0.5));
        float _709 = _706 * (_666.z + (-0.5));
        float _716 = exp2((_673.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_673.x + (-0.5));
        float _718 = _716 * (_673.y + (-0.5));
        float _719 = _716 * (_673.z + (-0.5));
        float _720 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _721 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _722 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _723 = _687 * 0.5;
        float _724 = _697 * 0.5;
        float _725 = _707 * 0.5;
        float _726 = dot(vec3(_723, _724, _725), vec3(_723, _724, _725));
        float _731 = (_726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_726);
        float _740 = (dot(vec3(_334, _335, _336), vec3(_731 * _723, _731 * _724, _731 * _725)) + 1.0) * 0.5;
        float _3368 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _750 = sqrt(((_724 * _724) + (_723 * _723)) + (_725 * _725)) / (_720 + 9.9999997473787516355514526367188e-06);
        float _3379 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _752 = _751 * 2.0;
        float _756 = (1.0 - _751) / (_751 + 1.0);
        float _3390 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _766 = ((((1.0 - _757) * (_752 + 2.0)) * exp2(log2(isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * (_752 + 1.0))) + _757) * _720;
        float _767 = _688 * 0.5;
        float _768 = _698 * 0.5;
        float _769 = _708 * 0.5;
        float _770 = dot(vec3(_767, _768, _769), vec3(_767, _768, _769));
        float _775 = (_770 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_770);
        float _783 = (dot(vec3(_334, _335, _336), vec3(_775 * _767, _775 * _768, _775 * _769)) + 1.0) * 0.5;
        float _3401 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _792 = sqrt(((_768 * _768) + (_767 * _767)) + (_769 * _769)) / (_721 + 9.9999997473787516355514526367188e-06);
        float _3412 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _794 = _793 * 2.0;
        float _798 = (1.0 - _793) / (_793 + 1.0);
        float _3423 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _808 = ((((1.0 - _799) * (_794 + 2.0)) * exp2(log2(isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * (_794 + 1.0))) + _799) * _721;
        float _809 = _689 * 0.5;
        float _810 = _699 * 0.5;
        float _811 = _709 * 0.5;
        float _812 = dot(vec3(_809, _810, _811), vec3(_809, _810, _811));
        float _817 = (_812 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_812);
        float _825 = (dot(vec3(_334, _335, _336), vec3(_817 * _809, _817 * _810, _817 * _811)) + 1.0) * 0.5;
        float _3434 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _834 = sqrt(((_810 * _810) + (_809 * _809)) + (_811 * _811)) / (_722 + 9.9999997473787516355514526367188e-06);
        float _3445 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _836 = _835 * 2.0;
        float _840 = (1.0 - _835) / (_835 + 1.0);
        float _3456 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _850 = ((((1.0 - _841) * (_836 + 2.0)) * exp2(log2(isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * (_836 + 1.0))) + _841) * _722;
        _858 = _689;
        _860 = _688;
        _861 = _687;
        _862 = _699;
        _863 = _698;
        _864 = _697;
        _865 = _709;
        _866 = _708;
        _867 = _707;
        _868 = _722;
        _869 = _721;
        _870 = _720;
        _871 = cbModelParam._m0[36u].z * (isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0)));
        _872 = cbModelParam._m0[36u].z * (isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0)));
        _873 = cbModelParam._m0[36u].z * (isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0)));
    }
    else
    {
        _858 = _859;
        _860 = _859;
        _861 = _859;
        _862 = _859;
        _863 = _859;
        _864 = _859;
        _865 = _859;
        _866 = _859;
        _867 = _859;
        _868 = _859;
        _869 = _859;
        _870 = _859;
        _871 = 0.0;
        _872 = 0.0;
        _873 = 0.0;
    }
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _899 = fma(_556, cbModelParam._m0[30u].z, fma(_552, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _548));
        float _903 = fma(_556, cbModelParam._m0[31u].z, fma(_552, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _548));
        float _907 = fma(_556, cbModelParam._m0[32u].z, fma(_552, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _548));
        float _930 = _548 + _334;
        float _931 = _552 + _335;
        float _932 = _556 + _336;
        float _942 = fma(_932, cbModelParam._m0[30u].z, fma(_931, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _930)) - _899;
        float _943 = fma(_932, cbModelParam._m0[31u].z, fma(_931, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _930)) - _903;
        float _944 = fma(_932, cbModelParam._m0[32u].z, fma(_931, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _930)) - _907;
        float _948 = inversesqrt(dot(vec3(_942, _943, _944), vec3(_942, _943, _944)));
        float _961 = ((_948 * _942) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_899 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_948 * _943) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_903 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_948 * _944) / cbModelParam._m0[35u].z) + ((((((_907 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        float _998 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_965.x + (-0.5));
        float _1000 = _998 * (_965.y + (-0.5));
        float _1001 = _998 * (_965.z + (-0.5));
        float _1008 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_972.x + (-0.5));
        float _1010 = _1008 * (_972.y + (-0.5));
        float _1011 = _1008 * (_972.z + (-0.5));
        float _1018 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_979.x + (-0.5));
        float _1020 = _1018 * (_979.y + (-0.5));
        float _1021 = _1018 * (_979.z + (-0.5));
        float _1028 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_986.x + (-0.5));
        float _1030 = _1028 * (_986.y + (-0.5));
        float _1031 = _1028 * (_986.z + (-0.5));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = _999 * 0.5;
        float _1036 = _1009 * 0.5;
        float _1037 = _1019 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1051 = (dot(vec3(_334, _335, _336), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3497 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1060 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3508 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3519 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * (_1062 + 1.0))) + _1067) * _1032;
        float _1077 = _1000 * 0.5;
        float _1078 = _1010 * 0.5;
        float _1079 = _1020 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_334, _335, _336), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3530 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3541 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3552 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * (_1104 + 1.0))) + _1109) * _1033;
        float _1119 = _1001 * 0.5;
        float _1120 = _1011 * 0.5;
        float _1121 = _1021 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_334, _335, _336), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3563 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3574 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3585 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * (_1146 + 1.0))) + _1151) * _1034;
        _1168 = _1001;
        _1169 = _1000;
        _1170 = _999;
        _1171 = _1011;
        _1172 = _1010;
        _1173 = _1009;
        _1174 = _1021;
        _1175 = _1020;
        _1176 = _1019;
        _1177 = _1034;
        _1178 = _1033;
        _1179 = _1032;
        _1180 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
        _1181 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1182 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
    }
    else
    {
        _1168 = _859;
        _1169 = _859;
        _1170 = _859;
        _1171 = _859;
        _1172 = _859;
        _1173 = _859;
        _1174 = _859;
        _1175 = _859;
        _1176 = _859;
        _1177 = _859;
        _1178 = _859;
        _1179 = _859;
        _1180 = 0.0;
        _1181 = 0.0;
        _1182 = 0.0;
    }
    float _1192 = (cbModelParam._m0[1u].x * (_1180 - _871)) + _871;
    float _1193 = (cbModelParam._m0[1u].x * (_1181 - _872)) + _872;
    float _1194 = (cbModelParam._m0[1u].x * (_1182 - _873)) + _873;
    float _1215 = fma(_1194, cbSceneParam._m0[89u].z, fma(_1193, cbSceneParam._m0[89u].y, _1192 * cbSceneParam._m0[89u].x));
    float _1218 = fma(_1194, cbSceneParam._m0[90u].z, fma(_1193, cbSceneParam._m0[90u].y, _1192 * cbSceneParam._m0[90u].x));
    float _1221 = fma(_1194, cbSceneParam._m0[91u].z, fma(_1193, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1192));
    float _1236 = _496 * 0.5;
    float _1237 = _497 * 0.5;
    float _1238 = _498 * 0.5;
    float _1239 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_1170, _1173, _1176, _1179));
    float _1242 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_1169, _1172, _1175, _1178));
    float _1245 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_1168, _1171, _1174, _1177));
    float _1279;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1252 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_858, _862, _865, _868));
        float _1256 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_860, _863, _866, _869));
        float _1260 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_861, _864, _867, _870));
        float _1267 = dot(vec4(cbModelParam._m0[39u]), vec4(_1236, _1237, _1238, 1.0));
        _1279 = dot(vec3(isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)), isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)), isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1267) ? 0.0 : (isnan(0.0) ? _1267 : max(0.0, _1267))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1279 = 1.0;
    }
    float _1290;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1281 = dot(vec4(cbModelParam._m0[40u]), vec4(_1236, _1237, _1238, 1.0));
        _1290 = dot(vec3(isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)), isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1281) ? 0.0 : (isnan(0.0) ? _1281 : max(0.0, _1281))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1290 = 1.0;
    }
    float _1294 = (_1290 * cbModelParam._m0[1u].x) + (_1279 * (1.0 - cbModelParam._m0[1u].x));
    float _1304 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _337);
    float _1305 = isnan(_1304) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1304 : min(cbModelParam._m0[25u].z, _1304));
    float _1386;
    float _1388;
    float _1390;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1353 = fma(_556, cbModelParam._m0[13u].z, fma(_552, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _548)) + cbModelParam._m0[13u].w;
        float _1357 = fma(_556, cbModelParam._m0[14u].z, fma(_552, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _548)) + cbModelParam._m0[14u].w;
        float _1361 = fma(_556, cbModelParam._m0[15u].z, fma(_552, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _548)) + cbModelParam._m0[15u].w;
        float _1364 = fma(_498, cbModelParam._m0[13u].z, fma(_497, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _496));
        float _1367 = fma(_498, cbModelParam._m0[14u].z, fma(_497, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _496));
        float _1370 = fma(_498, cbModelParam._m0[15u].z, fma(_497, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _496));
        float _1398;
        if (_1364 > 0.0)
        {
            _1398 = abs((1.0 - _1353) / _1364);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1364 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1353 + 1.0) / _1364);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1398 = frontier_phi_14_12_ladder;
        }
        float _1623;
        if (_1367 > 0.0)
        {
            _1623 = abs((1.0 - _1357) / _1367);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1367 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1357 + 1.0) / _1367);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1623 = frontier_phi_23_19_ladder;
        }
        float _1869;
        if (_1370 > 0.0)
        {
            _1869 = abs((1.0 - _1361) / _1370);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1370 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1361 + 1.0) / _1370);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1869 = frontier_phi_35_30_ladder;
        }
        float _1871 = isnan(_1623) ? _1398 : (isnan(_1398) ? _1623 : min(_1398, _1623));
        float _1872 = isnan(_1869) ? _1871 : (isnan(_1871) ? _1869 : min(_1871, _1869));
        float _1876 = (_1872 * _1364) + _1353;
        float _1877 = (_1872 * _1367) + _1357;
        float _1878 = (_1872 * _1370) + _1361;
        float _1879 = _1872 * 9.9999997473787516355514526367188e-05;
        float _1881 = (-1.0) - _1879;
        float _1883 = _1879 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1878 > _1883) || ((_1878 < _1881) || ((_1877 > _1883) || ((_1877 < _1881) || ((_1876 < _1881) || (_1876 > _1883))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2002 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1878, cbModelParam._m0[9u].z, fma(_1877, cbModelParam._m0[9u].y, _1876 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1878, cbModelParam._m0[10u].z, fma(_1877, cbModelParam._m0[10u].y, _1876 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1878, cbModelParam._m0[11u].z, fma(_1877, cbModelParam._m0[11u].y, _1876 * cbModelParam._m0[11u].x))), _1305);
            frontier_phi_13_35_ladder = _2002.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2002.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2002.x * cbModelParam._m0[1u].y;
        }
        _1386 = frontier_phi_13_35_ladder_2;
        _1388 = frontier_phi_13_35_ladder_1;
        _1390 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1374 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_496, _497, _498), _1305);
        _1386 = _1374.x * cbModelParam._m0[1u].y;
        _1388 = _1374.y * cbModelParam._m0[1u].y;
        _1390 = _1374.z * cbModelParam._m0[1u].y;
    }
    float _1394 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _337);
    float _1395 = isnan(_1394) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1394 : min(cbModelParam._m0[25u].w, _1394));
    float _1487;
    float _1489;
    float _1491;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1451 = fma(_556, cbModelParam._m0[21u].z, fma(_552, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _548)) + cbModelParam._m0[21u].w;
        float _1455 = fma(_556, cbModelParam._m0[22u].z, fma(_552, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _548)) + cbModelParam._m0[22u].w;
        float _1459 = fma(_556, cbModelParam._m0[23u].z, fma(_552, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _548)) + cbModelParam._m0[23u].w;
        float _1462 = fma(_498, cbModelParam._m0[21u].z, fma(_497, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _496));
        float _1465 = fma(_498, cbModelParam._m0[22u].z, fma(_497, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _496));
        float _1468 = fma(_498, cbModelParam._m0[23u].z, fma(_497, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _496));
        float _1628;
        if (_1462 > 0.0)
        {
            _1628 = abs((1.0 - _1451) / _1462);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1451 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1628 = frontier_phi_25_21_ladder;
        }
        float _1896;
        if (_1465 > 0.0)
        {
            _1896 = abs((1.0 - _1455) / _1465);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1455 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1896 = frontier_phi_37_32_ladder;
        }
        float _2101;
        if (_1468 > 0.0)
        {
            _2101 = abs((1.0 - _1459) / _1468);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1459 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2101 = frontier_phi_46_43_ladder;
        }
        float _2103 = isnan(_1896) ? _1628 : (isnan(_1628) ? _1896 : min(_1628, _1896));
        float _2104 = isnan(_2101) ? _2103 : (isnan(_2103) ? _2101 : min(_2103, _2101));
        float _2108 = (_2104 * _1462) + _1451;
        float _2109 = (_2104 * _1465) + _1455;
        float _2110 = (_2104 * _1468) + _1459;
        float _2111 = _2104 * 9.9999997473787516355514526367188e-05;
        float _2112 = (-1.0) - _2111;
        float _2114 = _2111 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2110 > _2114) || ((_2110 < _2112) || ((_2109 > _2114) || ((_2109 < _2112) || ((_2108 < _2112) || (_2108 > _2114))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2347 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2110, cbModelParam._m0[17u].z, fma(_2109, cbModelParam._m0[17u].y, _2108 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2110, cbModelParam._m0[18u].z, fma(_2109, cbModelParam._m0[18u].y, _2108 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2110, cbModelParam._m0[19u].z, fma(_2109, cbModelParam._m0[19u].y, _2108 * cbModelParam._m0[19u].x))), _1395);
            frontier_phi_22_46_ladder = _2347.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2347.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2347.x * cbModelParam._m0[1u].z;
        }
        _1487 = frontier_phi_22_46_ladder_2;
        _1489 = frontier_phi_22_46_ladder_1;
        _1491 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1471 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_496, _497, _498), _1395);
        _1487 = _1471.x * cbModelParam._m0[1u].z;
        _1489 = _1471.y * cbModelParam._m0[1u].z;
        _1491 = _1471.z * cbModelParam._m0[1u].z;
    }
    float _1503 = ((((1.0 - _516) * ((_504 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_516 * _504)) * _488;
    float _1504 = _1503 * ((cbModelParam._m0[1u].w * (_1487 - _1386)) + _1386);
    float _1505 = _1503 * ((cbModelParam._m0[1u].w * (_1489 - _1388)) + _1388);
    float _1506 = _1503 * ((cbModelParam._m0[1u].w * (_1491 - _1390)) + _1390);
    float _1509 = fma(_1506, cbSceneParam._m0[89u].z, fma(_1505, cbSceneParam._m0[89u].y, _1504 * cbSceneParam._m0[89u].x));
    float _1512 = fma(_1506, cbSceneParam._m0[90u].z, fma(_1505, cbSceneParam._m0[90u].y, _1504 * cbSceneParam._m0[90u].x));
    float _1515 = fma(_1506, cbSceneParam._m0[91u].z, fma(_1505, cbSceneParam._m0[91u].y, _1504 * cbSceneParam._m0[91u].x));
    vec4 _1523 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_422, _423));
    float _1525 = _1523.w;
    float _1537 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1525);
    float _1538 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1525);
    float _1539 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1525);
    uvec4 _1543 = floatBitsToUint(cbInstanceData._m0[_463 + 5u]);
    uint _1545 = _1543.x * 14u;
    uint _1546 = _1545 + 13u;
    float _1553 = _488 + (-1.0);
    float _1558 = (cbLight._m0[_1546].x * _1553) + 1.0;
    float _1559 = (cbLight._m0[_1546].y * _1553) + 1.0;
    float _1560 = (cbLight._m0[_1546].z * _1553) + 1.0;
    float _1561 = (cbLight._m0[_1546].w * _1553) + 1.0;
    uint _1562 = _1545 + 5u;
    float _1568 = isnan(1.0) ? _1559 : (isnan(_1559) ? 1.0 : min(_1559, 1.0));
    uint _1572 = _1545 + 4u;
    float _1582 = isnan(1.0) ? _1558 : (isnan(_1558) ? 1.0 : min(_1558, 1.0));
    uint _1586 = _1545 | 1u;
    float _1597 = dot(vec3(cbLight._m0[_1545].xyz), vec3(_334, _335, _336));
    float _1600 = dot(vec3(cbLight._m0[_1586].xyz), vec3(_334, _335, _336));
    float _3721 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
    float _3732 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
    float _1605 = (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * 0.3183098733425140380859375;
    float _1607 = (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * 0.3183098733425140380859375;
    float _1614 = ((cbLight._m0[_1562].x * _1568) * _1607) + (((cbLight._m0[_1572].x * _1537) * _1582) * _1605);
    float _1615 = ((_1568 * cbLight._m0[_1562].y) * _1607) + (((cbLight._m0[_1572].y * _1538) * _1582) * _1605);
    float _1616 = ((_1568 * cbLight._m0[_1562].z) * _1607) + (((cbLight._m0[_1572].z * _1539) * _1582) * _1605);
    uvec4 _1620 = floatBitsToUint(cbLight._m0[_1545 + 12u]);
    bool _1622 = _1620.x == 0u;
    float _1633;
    float _1635;
    float _1637;
    if (_1622)
    {
        _1633 = _1614;
        _1635 = _1615;
        _1637 = _1616;
    }
    else
    {
        uint _1641 = _1545 + 6u;
        float _1657 = (dot(vec3(cbLight._m0[_1545 + 2u].xyz), vec3(_334, _335, _336)) * 0.5) + 0.5;
        float _1658 = _1657 * _1657;
        float _3743 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1660 = isnan(1.0) ? _1560 : (isnan(_1560) ? 1.0 : min(_1560, 1.0));
        _1633 = (((cbLight._m0[_1641].x * 0.3183098733425140380859375) * _1659) * _1660) + _1614;
        _1635 = (((cbLight._m0[_1641].y * 0.3183098733425140380859375) * _1659) * _1660) + _1615;
        _1637 = (((cbLight._m0[_1641].z * 0.3183098733425140380859375) * _1659) * _1660) + _1616;
    }
    bool _1640 = _1620.y == 0u;
    float _1678;
    float _1680;
    float _1682;
    if (_1640)
    {
        _1678 = _1633;
        _1680 = _1635;
        _1682 = _1637;
    }
    else
    {
        uint _1840 = _1545 + 7u;
        float _1856 = (dot(vec3(cbLight._m0[_1545 + 3u].xyz), vec3(_334, _335, _336)) * 0.5) + 0.5;
        float _1857 = _1856 * _1856;
        float _3759 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1858 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1859 = isnan(1.0) ? _1561 : (isnan(_1561) ? 1.0 : min(_1561, 1.0));
        _1678 = (((cbLight._m0[_1840].x * 0.3183098733425140380859375) * _1858) * _1859) + _1633;
        _1680 = (((cbLight._m0[_1840].y * 0.3183098733425140380859375) * _1858) * _1859) + _1635;
        _1682 = (((cbLight._m0[_1840].z * 0.3183098733425140380859375) * _1858) * _1859) + _1637;
    }
    uint _1685 = _1545 + 8u;
    float _1698 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1545].w)) * _337) * 0.949999988079071044921875);
    float _1699 = _1698 * _1698;
    float _1700 = cbLight._m0[_1545].x + _414;
    float _1701 = cbLight._m0[_1545].y + _415;
    float _1702 = cbLight._m0[_1545].z + _416;
    float _1706 = inversesqrt(dot(vec3(_1700, _1701, _1702), vec3(_1700, _1701, _1702)));
    float _1707 = _1706 * _1700;
    float _1708 = _1706 * _1701;
    float _1709 = _1706 * _1702;
    float _1710 = dot(vec3(_334, _335, _336), vec3(cbLight._m0[_1545].xyz));
    float _3775 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
    float _1713 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _1714 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _1715 = dot(vec3(_334, _335, _336), vec3(_1707, _1708, _1709));
    float _3797 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _1718 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _1719 = dot(vec3(cbLight._m0[_1545].xyz), vec3(_1707, _1708, _1709));
    float _3808 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
    float _1723 = _1699 * _1699;
    float _1727 = ((_1718 * _1718) * (_1723 + (-1.0))) + 1.0;
    float _1738 = (exp2(log2(1.0 - (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1739 = 1.0 - _1699;
    float _1750 = (0.5 / (((_1714 * ((_1713 * _1739) + _1699)) + 9.9999999392252902907785028219223e-09) + (((_1714 * _1739) + _1699) * _1713))) * _1713;
    float _3819 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1752 = (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1723 / ((_1727 * _1727) * 3.141590118408203125));
    uint _1766 = _1545 + 9u;
    float _1777 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1586].w)) * _337) * 0.949999988079071044921875);
    float _1778 = _1777 * _1777;
    float _1779 = cbLight._m0[_1586].x + _414;
    float _1780 = cbLight._m0[_1586].y + _415;
    float _1781 = cbLight._m0[_1586].z + _416;
    float _1785 = inversesqrt(dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781)));
    float _1786 = _1785 * _1779;
    float _1787 = _1785 * _1780;
    float _1788 = _1785 * _1781;
    float _1789 = dot(vec3(_334, _335, _336), vec3(cbLight._m0[_1586].xyz));
    float _3830 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1792 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _1793 = dot(vec3(_334, _335, _336), vec3(_1786, _1787, _1788));
    float _3841 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _1796 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _1797 = dot(vec3(cbLight._m0[_1586].xyz), vec3(_1786, _1787, _1788));
    float _3852 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1801 = _1778 * _1778;
    float _1805 = ((_1796 * _1796) * (_1801 + (-1.0))) + 1.0;
    float _1814 = (exp2(log2(1.0 - (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1815 = 1.0 - _1778;
    float _1825 = (0.5 / (((_1714 * ((_1792 * _1815) + _1778)) + 9.9999999392252902907785028219223e-09) + (((_1714 * _1815) + _1778) * _1792))) * _1792;
    float _3863 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1827 = (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1801 / ((_1805 * _1805) * 3.141590118408203125));
    float _1837 = (((_1814 * cbLight._m0[_1766].x) * _1827) * _1568) + ((((cbLight._m0[_1685].x * _1537) * _1738) * _1752) * _1582);
    float _1838 = (((_1814 * cbLight._m0[_1766].y) * _1827) * _1568) + ((((cbLight._m0[_1685].y * _1538) * _1738) * _1752) * _1582);
    float _1839 = (((_1814 * cbLight._m0[_1766].z) * _1827) * _1568) + ((((cbLight._m0[_1685].z * _1539) * _1738) * _1752) * _1582);
    float _1901;
    float _1903;
    float _1905;
    if (_1622)
    {
        _1901 = _1837;
        _1903 = _1838;
        _1905 = _1839;
    }
    else
    {
        uint _1907 = _1545 + 2u;
        uint _1911 = _1545 + 10u;
        float _1925 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1907].w)) * _337) * 0.949999988079071044921875);
        float _1926 = _1925 * _1925;
        float _1927 = cbLight._m0[_1907].x + _414;
        float _1928 = cbLight._m0[_1907].y + _415;
        float _1929 = cbLight._m0[_1907].z + _416;
        float _1933 = inversesqrt(dot(vec3(_1927, _1928, _1929), vec3(_1927, _1928, _1929)));
        float _1934 = _1933 * _1927;
        float _1935 = _1933 * _1928;
        float _1936 = _1933 * _1929;
        float _1937 = dot(vec3(_334, _335, _336), vec3(cbLight._m0[_1907].xyz));
        float _3874 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1940 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1941 = dot(vec3(_334, _335, _336), vec3(_1934, _1935, _1936));
        float _3885 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1944 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1945 = dot(vec3(cbLight._m0[_1907].xyz), vec3(_1934, _1935, _1936));
        float _3896 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1949 = _1926 * _1926;
        float _1953 = ((_1944 * _1944) * (_1949 + (-1.0))) + 1.0;
        float _1962 = (exp2(log2(1.0 - (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1963 = 1.0 - _1926;
        float _1973 = (0.5 / (((_1714 * ((_1940 * _1963) + _1926)) + 9.9999999392252902907785028219223e-09) + (((_1714 * _1963) + _1926) * _1940))) * _1940;
        float _3907 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1975 = (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1949 / ((_1953 * _1953) * 3.141590118408203125));
        float _1976 = isnan(1.0) ? _1560 : (isnan(_1560) ? 1.0 : min(_1560, 1.0));
        _1901 = (((_1962 * cbLight._m0[_1911].x) * _1975) * _1976) + _1837;
        _1903 = (((_1962 * cbLight._m0[_1911].y) * _1975) * _1976) + _1838;
        _1905 = (((_1962 * cbLight._m0[_1911].z) * _1975) * _1976) + _1839;
    }
    float _2011;
    float _2013;
    float _2015;
    if (_1640)
    {
        _2011 = _1901;
        _2013 = _1903;
        _2015 = _1905;
    }
    else
    {
        uint _2022 = _1545 + 3u;
        uint _2026 = _1545 + 11u;
        float _2040 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2022].w)) * _337) * 0.949999988079071044921875);
        float _2041 = _2040 * _2040;
        float _2042 = cbLight._m0[_2022].x + _414;
        float _2043 = cbLight._m0[_2022].y + _415;
        float _2044 = cbLight._m0[_2022].z + _416;
        float _2048 = inversesqrt(dot(vec3(_2042, _2043, _2044), vec3(_2042, _2043, _2044)));
        float _2049 = _2048 * _2042;
        float _2050 = _2048 * _2043;
        float _2051 = _2048 * _2044;
        float _2052 = dot(vec3(_334, _335, _336), vec3(cbLight._m0[_2022].xyz));
        float _3923 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2055 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _2056 = dot(vec3(_334, _335, _336), vec3(_2049, _2050, _2051));
        float _3934 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2059 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _2060 = dot(vec3(cbLight._m0[_2022].xyz), vec3(_2049, _2050, _2051));
        float _3945 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2064 = _2041 * _2041;
        float _2068 = ((_2059 * _2059) * (_2064 + (-1.0))) + 1.0;
        float _2077 = (exp2(log2(1.0 - (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2078 = 1.0 - _2041;
        float _2088 = (0.5 / (((_1714 * ((_2055 * _2078) + _2041)) + 9.9999999392252902907785028219223e-09) + (((_1714 * _2078) + _2041) * _2055))) * _2055;
        float _3956 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2090 = (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_2064 / ((_2068 * _2068) * 3.141590118408203125));
        float _2091 = isnan(1.0) ? _1561 : (isnan(_1561) ? 1.0 : min(_1561, 1.0));
        _2011 = (((_2077 * cbLight._m0[_2026].x) * _2090) * _2091) + _1901;
        _2013 = (((_2077 * cbLight._m0[_2026].y) * _2090) * _2091) + _1903;
        _2015 = (((_2077 * cbLight._m0[_2026].z) * _2090) * _2091) + _1905;
    }
    float _2226;
    float _2228;
    float _2230;
    float _2232;
    float _2234;
    float _2236;
    if (_1543.y == 0u)
    {
        float _2166 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2167 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2166;
        float _2168 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2166;
        float _2169 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2166;
        uvec4 _2181 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2182 = _2181.x;
        uint _2193 = uint((float(_2181.y) * floor(float(uint(cbSceneParam._m0[85u].y * _423) / _2182))) + floor(float(uint(cbSceneParam._m0[85u].x * _422) / _2182)));
        float _2203 = (log2(_2169 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2204 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        uint _2207 = uint(isnan(14.0) ? _2204 : (isnan(_2204) ? 14.0 : min(_2204, 14.0)));
        uvec4 _2212 = texelFetch(g_lightClusterGridBuffer, int(((_2207 << 2u) + (_2193 << 6u)) >> 2u));
        uint _2213 = _2212.x;
        uint _2214 = _2181.z;
        float _2352;
        float _2354;
        float _2356;
        float _2358;
        float _2360;
        float _2362;
        if (((((1u << ((_2214 >> 4u) & 15u)) + 4294967295u) & _2213) == 0u) || ((_2214 & 240u) == 0u))
        {
            _2352 = 0.0;
            _2354 = 0.0;
            _2356 = 0.0;
            _2358 = 0.0;
            _2360 = 0.0;
            _2362 = 0.0;
        }
        else
        {
            float _2353;
            float _2355;
            float _2357;
            float _2359;
            float _2361;
            float _2363;
            float _2506 = 0.0;
            float _2507 = 0.0;
            float _2508 = 0.0;
            float _2509 = 0.0;
            float _2510 = 0.0;
            float _2511 = 0.0;
            uint _2512 = 0u;
            uint _2521;
            bool _2522;
            for (;;)
            {
                _2521 = texelFetch(g_lightClassification, int((((_2207 << 5u) + (_2193 << 9u)) + (_2512 << 2u)) >> 2u)).x;
                _2522 = _2521 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2522)
                {
                    frontier_phi_61_pred = _2506;
                    frontier_phi_61_pred_1 = _2511;
                    frontier_phi_61_pred_2 = _2510;
                    frontier_phi_61_pred_3 = _2509;
                    frontier_phi_61_pred_4 = _2508;
                    frontier_phi_61_pred_5 = _2507;
                }
                else
                {
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    float _2634;
                    float _2635;
                    uint _2636;
                    _2630 = _2506;
                    _2631 = _2507;
                    _2632 = _2508;
                    _2633 = _2509;
                    _2634 = _2510;
                    _2635 = _2511;
                    _2636 = _2521;
                    float _2562;
                    float _2563;
                    float _2564;
                    float _2565;
                    float _2566;
                    float _2567;
                    for (;;)
                    {
                        uint _2640 = uint(findLSB(_2636)) + (_2512 << 5u);
                        uint _2637 = (_2636 + 4294967295u) & _2636;
                        uint _2642 = _2640 * 48u;
                        vec4 _2656 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2642)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 3u)).x));
                        uint _2662 = (_2640 * 48u) + 4u;
                        vec4 _2675 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2662)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 3u)).x));
                        uint _2681 = (_2640 * 48u) + 8u;
                        vec3 _2692 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2681)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 2u)).x));
                        float _2696 = _2656.x - _2167;
                        float _2697 = _2656.y - _2168;
                        float _2698 = _2656.z - _2169;
                        float _2699 = dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698));
                        float _2702 = inversesqrt(_2699);
                        float _2703 = _2702 * _2696;
                        float _2704 = _2702 * _2697;
                        float _2705 = _2702 * _2698;
                        float _2706 = dot(vec3(_444, _447, _450), vec3(_2703, _2704, _2705));
                        float _2711 = 1.0 - (_2699 * _2656.w);
                        float _3982 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
                        float _2712 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
                        float _2713 = sqrt(_2699) * _2675.w;
                        float _2716 = 1.39999997615814208984375 / (_2713 + 1.39999997615814208984375);
                        float _2717 = _2716 * _2716;
                        float _2720 = ((1.0 - _2717) * _2706) + _2717;
                        float _2723 = _2713 * _2713;
                        float _2727 = ((isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0))) * _2712) / ((_2723 * 0.699999988079071044921875) + 1.0);
                        float _2731 = (-0.0) - _2167;
                        float _2732 = (-0.0) - _2168;
                        float _2733 = (-0.0) - _2169;
                        float _2737 = inversesqrt(dot(vec3(_2731, _2732, _2733), vec3(_2731, _2732, _2733)));
                        float _2738 = _2737 * _2731;
                        float _2739 = _2737 * _2732;
                        float _2740 = _2737 * _2733;
                        float _2748 = exp2(log2(1.0 / ((_2723 * 3.5) + 5.0)) * 0.25);
                        float _2749 = 1.0 - _504;
                        float _2756 = sqrt(1.0 - ((1.0 - (_2749 * _2749)) * (1.0 - (_2748 * _2748))));
                        float _2757 = _2756 * _2756;
                        float _2758 = _2757 * _2757;
                        float _2759 = _2738 + _2703;
                        float _2760 = _2739 + _2704;
                        float _2761 = _2740 + _2705;
                        float _2765 = inversesqrt(dot(vec3(_2759, _2760, _2761), vec3(_2759, _2760, _2761)));
                        float _2769 = dot(vec3(_444, _447, _450), vec3(_2738, _2739, _2740));
                        float _3998 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
                        float _2772 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
                        float _2773 = dot(vec3(_444, _447, _450), vec3(_2765 * _2759, _2765 * _2760, _2765 * _2761));
                        float _4009 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
                        float _2776 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
                        float _2780 = ((_2776 * _2776) * (_2758 + (-1.0))) + 1.0;
                        float _2781 = _2716 * _2757;
                        float _2782 = _2781 * _2781;
                        float _2785 = ((1.0 - _2782) * _2706) + _2782;
                        float _4020 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                        float _2786 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                        float _2787 = 1.0 - _2757;
                        float _2797 = (0.5 / (((_2786 * ((_2772 * _2787) + _2757)) + 9.9999999392252902907785028219223e-09) + (((_2786 * _2787) + _2757) * _2772))) * _2786;
                        float _4031 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                        float _2808 = (((_2758 * 3.1415927410125732421875) * (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) / ((_2780 * _2780) * ((_2723 * 2.1991131305694580078125) + 3.141590118408203125))) * _2712;
                        _2565 = (_2727 * _2675.x) + _2633;
                        _2566 = (_2727 * _2675.y) + _2634;
                        _2567 = (_2727 * _2675.z) + _2635;
                        _2562 = (_2808 * _2692.x) + _2630;
                        _2563 = (_2808 * _2692.y) + _2631;
                        _2564 = (_2808 * _2692.z) + _2632;
                        if (_2637 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2630 = _2562;
                            _2631 = _2563;
                            _2632 = _2564;
                            _2633 = _2565;
                            _2634 = _2566;
                            _2635 = _2567;
                            _2636 = _2637;
                        }
                    }
                    frontier_phi_61_pred = _2562;
                    frontier_phi_61_pred_1 = _2567;
                    frontier_phi_61_pred_2 = _2566;
                    frontier_phi_61_pred_3 = _2565;
                    frontier_phi_61_pred_4 = _2564;
                    frontier_phi_61_pred_5 = _2563;
                }
                _2353 = frontier_phi_61_pred;
                _2363 = frontier_phi_61_pred_1;
                _2361 = frontier_phi_61_pred_2;
                _2359 = frontier_phi_61_pred_3;
                _2357 = frontier_phi_61_pred_4;
                _2355 = frontier_phi_61_pred_5;
                uint _2513 = _2512 + 1u;
                if (_2513 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2506 = _2353;
                    _2507 = _2355;
                    _2508 = _2357;
                    _2509 = _2359;
                    _2510 = _2361;
                    _2511 = _2363;
                    _2512 = _2513;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2352 = _2353;
            _2354 = _2355;
            _2356 = _2357;
            _2358 = _2359;
            _2360 = _2361;
            _2362 = _2363;
        }
        uvec4 _2366 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2367 = _2366.z;
        uint _2369 = (_2367 >> 8u) & 15u;
        float _2474;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        if (((4294967295u << _2369) & _2213) == 0u)
        {
            _2474 = _2352;
            _2476 = _2354;
            _2478 = _2356;
            _2480 = _2358;
            _2482 = _2360;
            _2484 = _2362;
        }
        else
        {
            float _2499 = inversesqrt(dot(vec3(_2167, _2168, _2169), vec3(_2167, _2168, _2169)));
            float _2500 = _2499 * _2167;
            float _2501 = _2499 * _2168;
            float _2502 = _2499 * _2169;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2369 < ((_2367 >> 12u) & 15u))
            {
                float _2475;
                float _2477;
                float _2479;
                float _2481;
                float _2483;
                float _2485;
                float _2613 = _2352;
                float _2614 = _2354;
                float _2615 = _2356;
                float _2616 = _2358;
                float _2617 = _2360;
                float _2618 = _2362;
                uint _2619 = _2369;
                uint _2628;
                bool _2629;
                for (;;)
                {
                    _2628 = texelFetch(g_lightClassification, int((((_2207 << 5u) + (_2193 << 9u)) + (_2619 << 2u)) >> 2u)).x;
                    _2629 = _2628 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2629)
                    {
                        frontier_phi_67_pred = _2616;
                        frontier_phi_67_pred_1 = _2617;
                        frontier_phi_67_pred_2 = _2618;
                        frontier_phi_67_pred_3 = _2615;
                        frontier_phi_67_pred_4 = _2614;
                        frontier_phi_67_pred_5 = _2613;
                    }
                    else
                    {
                        float _2813;
                        float _2814;
                        float _2815;
                        float _2816;
                        float _2817;
                        float _2818;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _2826 = _2613;
                        float _2827 = _2614;
                        float _2828 = _2615;
                        float _2829 = _2616;
                        float _2830 = _2617;
                        float _2831 = _2618;
                        uint _2832 = _2628;
                        uint _2833;
                        vec4 _2858;
                        float _2859;
                        vec4 _2874;
                        vec3 _2886;
                        vec4 _2902;
                        vec4 _2918;
                        float _2965;
                        bool _2966;
                        for (;;)
                        {
                            uint _2843 = ((_2619 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2832));
                            _2833 = (_2832 + 4294967295u) & _2832;
                            uint _2845 = _2843 * 40u;
                            _2858 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2845)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 3u)).x));
                            _2859 = _2858.w;
                            uint _2861 = (_2843 * 40u) + 4u;
                            _2874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 3u)).x));
                            uint _2876 = (_2843 * 40u) + 8u;
                            _2886 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2876)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 2u)).x));
                            uint _2889 = (_2843 * 40u) + 16u;
                            _2902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 3u)).x));
                            uint _2905 = (_2843 * 40u) + 20u;
                            _2918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 3u)).x));
                            uint _2921 = (_2843 * 40u) + 24u;
                            vec4 _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            uint _2940 = (_2843 * 40u) + 28u;
                            vec4 _2953 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 3u)).x));
                            _2965 = fma(_2169, _2953.z, fma(_2168, _2953.y, _2953.x * _2167)) + _2953.w;
                            _2966 = !((fma(_2169, _2934.z, fma(_2168, _2934.y, _2934.x * _2167)) + _2934.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2966)
                            {
                                float _2993 = _2858.x - _2167;
                                float _2994 = _2858.y - _2168;
                                float _2995 = _2858.z - _2169;
                                float _2996 = dot(vec3(_2993, _2994, _2995), vec3(_2993, _2994, _2995));
                                float _2999 = inversesqrt(_2996);
                                float _3000 = _2999 * _2993;
                                float _3001 = _2999 * _2994;
                                float _3002 = _2999 * _2995;
                                float _3006 = 1.0 - (_2996 / (_2859 * _2859));
                                float _4042 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                                float _3007 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                                float _3011 = sqrt(_2996) * _2874.w;
                                float _3013 = 1.39999997615814208984375 / (_3011 + 1.39999997615814208984375);
                                float _3014 = _3013 * _3013;
                                float _3017 = ((1.0 - _3014) * dot(vec3(_3000, _3001, _3002), vec3(_444, _447, _450))) + _3014;
                                float _3020 = _3011 * _3011;
                                float _3024 = (fma(_2169, _2902.z, fma(_2168, _2902.y, _2902.x * _2167)) + _2902.w) / _2965;
                                float _3025 = (fma(_2169, _2918.z, fma(_2168, _2918.y, _2918.x * _2167)) + _2918.w) / _2965;
                                float _3029 = 1.0 - dot(vec2(_3024, _3025), vec2(_3024, _3025));
                                float _4058 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                                float _3030 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
                                float _3031 = _3030 * (((isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0))) * _3007) / ((_3020 * 0.699999988079071044921875) + 1.0));
                                float _3043 = exp2(log2(1.0 / ((_3020 * 3.5) + 5.0)) * 0.25);
                                float _3044 = 1.0 - _504;
                                float _3051 = sqrt(1.0 - ((1.0 - (_3044 * _3044)) * (1.0 - (_3043 * _3043))));
                                float _3052 = _3051 * _3051;
                                float _3053 = _3052 * _3052;
                                float _3054 = _3000 - _2500;
                                float _3055 = _3001 - _2501;
                                float _3056 = _3002 - _2502;
                                float _3060 = inversesqrt(dot(vec3(_3054, _3055, _3056), vec3(_3054, _3055, _3056)));
                                float _3064 = dot(vec3(_444, _447, _450), vec3((-0.0) - _2500, (-0.0) - _2501, (-0.0) - _2502));
                                float _4069 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                                float _3067 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
                                float _3068 = dot(vec3(_444, _447, _450), vec3(_3060 * _3054, _3060 * _3055, _3060 * _3056));
                                float _4080 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                                float _3071 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                                float _3075 = ((_3071 * _3071) * (_3053 + (-1.0))) + 1.0;
                                float _3076 = _3013 * _3052;
                                float _3077 = _3076 * _3076;
                                float _3083 = ((1.0 - _3077) * dot(vec3(_444, _447, _450), vec3(_3000, _3001, _3002))) + _3077;
                                float _4091 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                                float _3084 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                                float _3085 = 1.0 - _3052;
                                float _3095 = (0.5 / (((_3084 * ((_3067 * _3085) + _3052)) + 9.9999999392252902907785028219223e-09) + (((_3084 * _3085) + _3052) * _3067))) * _3084;
                                float _4102 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                                float _3105 = (_3030 * _3007) * (((_3053 * 3.1415927410125732421875) * (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) / ((_3075 * _3075) * ((_3020 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3105 * _2886.x;
                                frontier_phi_73_pred_1 = _3105 * _2886.y;
                                frontier_phi_73_pred_2 = _3031 * _2874.z;
                                frontier_phi_73_pred_3 = _3031 * _2874.y;
                                frontier_phi_73_pred_4 = _3031 * _2874.x;
                                frontier_phi_73_pred_5 = _3105 * _2886.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3109 = frontier_phi_73_pred;
                            _3110 = frontier_phi_73_pred_1;
                            _3114 = frontier_phi_73_pred_2;
                            _3113 = frontier_phi_73_pred_3;
                            _3112 = frontier_phi_73_pred_4;
                            _3111 = frontier_phi_73_pred_5;
                            _2816 = _3112 + _2829;
                            _2817 = _3113 + _2830;
                            _2818 = _3114 + _2831;
                            _2813 = _3109 + _2826;
                            _2814 = _3110 + _2827;
                            _2815 = _3111 + _2828;
                            if (_2833 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2826 = _2813;
                                _2827 = _2814;
                                _2828 = _2815;
                                _2829 = _2816;
                                _2830 = _2817;
                                _2831 = _2818;
                                _2832 = _2833;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2816;
                        frontier_phi_67_pred_1 = _2817;
                        frontier_phi_67_pred_2 = _2818;
                        frontier_phi_67_pred_3 = _2815;
                        frontier_phi_67_pred_4 = _2814;
                        frontier_phi_67_pred_5 = _2813;
                    }
                    _2481 = frontier_phi_67_pred;
                    _2483 = frontier_phi_67_pred_1;
                    _2485 = frontier_phi_67_pred_2;
                    _2479 = frontier_phi_67_pred_3;
                    _2477 = frontier_phi_67_pred_4;
                    _2475 = frontier_phi_67_pred_5;
                    uint _2620 = _2619 + 1u;
                    if (_2620 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2613 = _2475;
                        _2614 = _2477;
                        _2615 = _2479;
                        _2616 = _2481;
                        _2617 = _2483;
                        _2618 = _2485;
                        _2619 = _2620;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2483;
                frontier_phi_55_56_ladder_1 = _2485;
                frontier_phi_55_56_ladder_2 = _2481;
                frontier_phi_55_56_ladder_3 = _2479;
                frontier_phi_55_56_ladder_4 = _2477;
                frontier_phi_55_56_ladder_5 = _2475;
            }
            else
            {
                frontier_phi_55_56_ladder = _2360;
                frontier_phi_55_56_ladder_1 = _2362;
                frontier_phi_55_56_ladder_2 = _2358;
                frontier_phi_55_56_ladder_3 = _2356;
                frontier_phi_55_56_ladder_4 = _2354;
                frontier_phi_55_56_ladder_5 = _2352;
            }
            _2474 = frontier_phi_55_56_ladder_5;
            _2476 = frontier_phi_55_56_ladder_4;
            _2478 = frontier_phi_55_56_ladder_3;
            _2480 = frontier_phi_55_56_ladder_2;
            _2482 = frontier_phi_55_56_ladder;
            _2484 = frontier_phi_55_56_ladder_1;
        }
        float _2489 = isnan(1.0) ? _488 : (isnan(_488) ? 1.0 : min(_488, 1.0));
        _2226 = (_2489 * _2480) + _1678;
        _2228 = (_2489 * _2482) + _1680;
        _2230 = (_2489 * _2484) + _1682;
        _2232 = ((_2474 * 0.039999999105930328369140625) * _2489) + _2011;
        _2234 = ((_2476 * 0.039999999105930328369140625) * _2489) + _2013;
        _2236 = ((_2478 * 0.039999999105930328369140625) * _2489) + _2015;
    }
    else
    {
        _2226 = _1678;
        _2228 = _1680;
        _2230 = _1682;
        _2232 = _2011;
        _2234 = _2013;
        _2236 = _2015;
    }
    uint _2242 = _464 + uint(cbMatDynParam._m0[0u].w);
    float _2251 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _300.x) * _320) * cbInstanceData._m0[_2242].x;
    float _2255 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _300.y) * _320) * cbInstanceData._m0[_2242].y;
    float _2259 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _300.z) * _320) * cbInstanceData._m0[_2242].z;
    float _4118 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _4129 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _4140 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _2276 = (((isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_2226 + ((isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0))) * _488))) + ((_2232 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _1294)) * cbPerFrame._m0[3u].x)) + _2251;
    float _2278 = (_2255 + ((_2234 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _1294)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_2228 + ((isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))) * _488)));
    float _2280 = (_2259 + ((_2236 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _1294)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_2230 + ((isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))) * _488)));
    float _4166 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2293 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    uint _2294 = _463 + 6u;
    float _2302 = _422 / cbSceneParam._m0[86u].x;
    float _2303 = _423 / cbSceneParam._m0[86u].y;
    vec4 _2317 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2302, _2303, (log2((isnan(cbSceneParam._m0[77u].w) ? _356 : (isnan(_356) ? cbSceneParam._m0[77u].w : min(_356, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2319 = _2317.x;
    float _2320 = _2317.y;
    float _2321 = _2317.z;
    float _2322 = _2317.w;
    float _2415;
    float _2417;
    float _2419;
    float _2421;
    if (_356 > cbSceneParam._m0[78u].w)
    {
        float _2377 = isnan(_356) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _356 : min(cbSceneParam._m0[80u].w, _356));
        float _2378 = _2377 / _356;
        float _2389 = _2378 * _407;
        float _2390 = _408 * _2378;
        float _2391 = (-0.0) - _2390;
        float _2393 = _2378 * _409;
        float _2395 = (cbSceneParam._m0[77u].w * _2391) / _2377;
        float _2396 = _2395 + cbSceneParam._m0[79u].w;
        float _2397 = cbSceneParam._m0[79u].w - _2390;
        float _2403 = sqrt(((_2389 * _2389) + (_2390 * _2390)) + (_2393 * _2393));
        float _2406 = (1.0 - (cbSceneParam._m0[77u].w / _2377)) * _2403;
        float _2411 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2413 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2575;
        if (abs((_2391 - _2395) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2575 = ((((_2396 > 0.0) ? exp2(_2411 * _2396) : (2.0 - exp2(_2413 * _2396))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2406;
        }
        else
        {
            float _2535 = 1.0 / cbSceneParam._m0[80u].x;
            float _2536 = isnan(_2397) ? _2396 : (isnan(_2396) ? _2397 : max(_2396, _2397));
            float _2537 = isnan(_2397) ? _2396 : (isnan(_2396) ? _2397 : min(_2396, _2397));
            float _2546 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : min(_2536, 0.0));
            float _2547 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : min(_2537, 0.0));
            _2575 = ((abs(_2403 / _2391) * cbSceneParam._m0[80u].y) * ((((_2546 - _2547) * 2.0) - ((exp2(_2411 * (isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0)))) - exp2(_2411 * (isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0))))) * _2535)) - ((exp2(_2413 * _2546) - exp2(_2413 * _2547)) * _2535))) + (_2406 * cbSceneParam._m0[80u].z);
        }
        vec4 _2577 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2302, _2303, 1.0), 0.0);
        float _2586 = exp2((_2575 * (-1.44269502162933349609375)) * (1.0 - _2577.w));
        float _2587 = log2(_2586);
        float _2603 = log2(_2322);
        _2415 = (exp2(_2603 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2587 * cbSceneParam._m0[78u].x)) * _2577.x) / cbSceneParam._m0[78u].x)) + _2319;
        _2417 = (exp2(_2603 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2587 * cbSceneParam._m0[78u].y)) * _2577.y) / cbSceneParam._m0[78u].y)) + _2320;
        _2419 = (exp2(_2603 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2587 * cbSceneParam._m0[78u].z)) * _2577.z) / cbSceneParam._m0[78u].z)) + _2321;
        _2421 = _2586 * _2322;
    }
    else
    {
        _2415 = _2319;
        _2417 = _2320;
        _2419 = _2321;
        _2421 = _2322;
    }
    float _2433 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2434 = _2433 == 3.0;
    float _2435 = log2(_2421);
    float _2439 = exp2(_2435 * cbSceneParam._m0[78u].x);
    float _2440 = exp2(_2435 * cbSceneParam._m0[78u].y);
    float _2441 = exp2(_2435 * cbSceneParam._m0[78u].z);
    float _2442 = _2439 * (isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0)));
    float _2443 = _2440 * (isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0)));
    float _2444 = _2441 * (isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0)));
    float _2453 = (_2433 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2453 * (_2434 ? _2442 : (_2442 + (cbSceneParam._m0[72u].w * _2415)));
    SV_Target.y = _2453 * (_2434 ? _2443 : (_2443 + (cbSceneParam._m0[72u].w * _2417)));
    SV_Target.z = _2453 * (_2434 ? _2444 : (_2444 + (cbSceneParam._m0[72u].w * _2419)));
    SV_Target.w = cbInstanceData._m0[_2294].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2251) * _2293) * _2439) * _2453;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2255) * _2293) * _2440) * _2453;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2259) * _2293) * _2441) * _2453;
    SV_Target_1.w = cbInstanceData._m0[_2294].w;
}


