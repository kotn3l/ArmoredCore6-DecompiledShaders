#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _881;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _183 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _184 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _185 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_183, _184, _185), vec3(_183, _184, _185)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _226 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _226.x * cbMtdParam._m0[9u].x;
    float _233 = _226.y * cbMtdParam._m0[9u].y;
    float _234 = _226.z * cbMtdParam._m0[9u].z;
    vec4 _246 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _248 = _246.x;
    vec4 _260 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _264 = _260.z;
    float _268 = (_260.x * 2.0) + (-1.0);
    float _270 = (_260.y * 2.0) + (-1.0);
    float _271 = dot(vec2(_268, _270), vec2(_268, _270));
    float _3262 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _277 = sqrt(1.0 - (isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0))));
    vec4 _299 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _313 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3273 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _314 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
    float _322 = (((_314 * _314) * (3.0 - (_314 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _325 = fma(_277, _197 * NORMAL.x, fma(_270, _204 * TANGENT.x, (_190 * _183) * _268));
    float _328 = fma(_277, _197 * NORMAL.y, fma(_270, _204 * TANGENT.y, (_190 * _184) * _268));
    float _331 = fma(_277, _197 * NORMAL.z, fma(_270, _204 * TANGENT.z, (_190 * _185) * _268));
    float _335 = inversesqrt(dot(vec3(_325, _328, _331), vec3(_325, _328, _331)));
    float _336 = _335 * _325;
    float _337 = _335 * _328;
    float _338 = _335 * _331;
    float _3284 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _339 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
    float _3295 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3306 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3317 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3328 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _343 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
    float _359 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _400 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _410 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _400);
    float _411 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _400);
    float _412 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _400);
    float _416 = inversesqrt(dot(vec3(_410, _411, _412), vec3(_410, _411, _412)));
    float _417 = _410 * _416;
    float _418 = _411 * _416;
    float _419 = _412 * _416;
    float _425 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _426 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _447 = fma(_338, cbSceneParam._m0[5u].z, fma(_337, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _336));
    float _450 = fma(_338, cbSceneParam._m0[6u].z, fma(_337, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _336));
    float _453 = fma(_338, cbSceneParam._m0[7u].z, fma(_337, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _336));
    uint _466 = uint(roundEven(NORMAL.w)) * 13u;
    uint _468 = _466 + 9u;
    uint _469 = _468 + uint(cbMatDynParam._m0[0u].w);
    float _475 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0)))) * cbInstanceData._m0[_469].x;
    float _476 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0)))) * cbInstanceData._m0[_469].y;
    float _477 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0)))) * cbInstanceData._m0[_469].z;
    float _3339 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _478 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
    float _3350 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
    float _3361 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _480 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
    float _481 = 1.0 - _343;
    float _482 = _478 * _481;
    float _483 = _479 * _481;
    float _484 = _480 * _481;
    float _489 = (_478 + (-0.039999999105930328369140625)) * _343;
    float _490 = (_479 + (-0.039999999105930328369140625)) * _343;
    float _491 = (_480 + (-0.039999999105930328369140625)) * _343;
    float _492 = _489 + 0.039999999105930328369140625;
    float _494 = _490 + 0.039999999105930328369140625;
    float _495 = _491 + 0.039999999105930328369140625;
    vec4 _504 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _425, cbSceneParam._m0[86u].y * _426));
    float _507 = _504.x * TEXCOORD.z;
    float _508 = dot(vec3(_336, _337, _338), vec3(_417, _418, _419));
    float _511 = _508 * 2.0;
    float _515 = (_511 * _336) - _417;
    float _516 = (_511 * _337) - _418;
    float _517 = (_511 * _338) - _419;
    float _521 = abs(dot(vec3(_417, _418, _419), vec3(_336, _337, _338)));
    float _3372 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _523 = sqrt(_339);
    float _535 = exp2((_523 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_523 * 3.0));
    float _541 = (1.0 - _535) * ((_523 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _542 = _535 * _523;
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _880;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _605 = fma(_578, cbModelParam._m0[26u].z, fma(_574, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _570));
        float _609 = fma(_578, cbModelParam._m0[27u].z, fma(_574, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _570));
        float _613 = fma(_578, cbModelParam._m0[28u].z, fma(_574, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _570));
        float _638 = _570 + _336;
        float _639 = _574 + _337;
        float _640 = _578 + _338;
        float _650 = fma(_640, cbModelParam._m0[26u].z, fma(_639, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _638)) - _605;
        float _651 = fma(_640, cbModelParam._m0[27u].z, fma(_639, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _638)) - _609;
        float _652 = fma(_640, cbModelParam._m0[28u].z, fma(_639, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _638)) - _613;
        float _656 = inversesqrt(dot(vec3(_650, _651, _652), vec3(_650, _651, _652)));
        float _669 = ((_656 * _650) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_605 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _670 = ((_656 * _651) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_609 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _671 = ((_656 * _652) / cbModelParam._m0[34u].z) + ((((((_613 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _674 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _681 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        float _708 = exp2((_674.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _708 * (_674.x + (-0.5));
        float _710 = _708 * (_674.y + (-0.5));
        float _711 = _708 * (_674.z + (-0.5));
        float _718 = exp2((_681.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_681.x + (-0.5));
        float _720 = _718 * (_681.y + (-0.5));
        float _721 = _718 * (_681.z + (-0.5));
        float _728 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_688.x + (-0.5));
        float _730 = _728 * (_688.y + (-0.5));
        float _731 = _728 * (_688.z + (-0.5));
        float _738 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_695.x + (-0.5));
        float _740 = _738 * (_695.y + (-0.5));
        float _741 = _738 * (_695.z + (-0.5));
        float _742 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _743 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _744 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _745 = _709 * 0.5;
        float _746 = _719 * 0.5;
        float _747 = _729 * 0.5;
        float _748 = dot(vec3(_745, _746, _747), vec3(_745, _746, _747));
        float _753 = (_748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_748);
        float _762 = (dot(vec3(_336, _337, _338), vec3(_753 * _745, _753 * _746, _753 * _747)) + 1.0) * 0.5;
        float _3398 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _772 = sqrt(((_746 * _746) + (_745 * _745)) + (_747 * _747)) / (_742 + 9.9999997473787516355514526367188e-06);
        float _3409 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _774 = _773 * 2.0;
        float _778 = (1.0 - _773) / (_773 + 1.0);
        float _3420 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _788 = ((((1.0 - _779) * (_774 + 2.0)) * exp2(log2(isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0))) * (_774 + 1.0))) + _779) * _742;
        float _789 = _710 * 0.5;
        float _790 = _720 * 0.5;
        float _791 = _730 * 0.5;
        float _792 = dot(vec3(_789, _790, _791), vec3(_789, _790, _791));
        float _797 = (_792 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_792);
        float _805 = (dot(vec3(_336, _337, _338), vec3(_797 * _789, _797 * _790, _797 * _791)) + 1.0) * 0.5;
        float _3431 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _814 = sqrt(((_790 * _790) + (_789 * _789)) + (_791 * _791)) / (_743 + 9.9999997473787516355514526367188e-06);
        float _3442 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
        float _816 = _815 * 2.0;
        float _820 = (1.0 - _815) / (_815 + 1.0);
        float _3453 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _830 = ((((1.0 - _821) * (_816 + 2.0)) * exp2(log2(isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) * (_816 + 1.0))) + _821) * _743;
        float _831 = _711 * 0.5;
        float _832 = _721 * 0.5;
        float _833 = _731 * 0.5;
        float _834 = dot(vec3(_831, _832, _833), vec3(_831, _832, _833));
        float _839 = (_834 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_834);
        float _847 = (dot(vec3(_336, _337, _338), vec3(_839 * _831, _839 * _832, _839 * _833)) + 1.0) * 0.5;
        float _3464 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _856 = sqrt(((_832 * _832) + (_831 * _831)) + (_833 * _833)) / (_744 + 9.9999997473787516355514526367188e-06);
        float _3475 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _858 = _857 * 2.0;
        float _862 = (1.0 - _857) / (_857 + 1.0);
        float _3486 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _872 = ((((1.0 - _863) * (_858 + 2.0)) * exp2(log2(isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * (_858 + 1.0))) + _863) * _744;
        _880 = _711;
        _882 = _710;
        _883 = _709;
        _884 = _721;
        _885 = _720;
        _886 = _719;
        _887 = _731;
        _888 = _730;
        _889 = _729;
        _890 = _744;
        _891 = _743;
        _892 = _742;
        _893 = cbModelParam._m0[36u].z * (isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0)));
        _894 = cbModelParam._m0[36u].z * (isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0)));
        _895 = cbModelParam._m0[36u].z * (isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0)));
    }
    else
    {
        _880 = _881;
        _882 = _881;
        _883 = _881;
        _884 = _881;
        _885 = _881;
        _886 = _881;
        _887 = _881;
        _888 = _881;
        _889 = _881;
        _890 = _881;
        _891 = _881;
        _892 = _881;
        _893 = 0.0;
        _894 = 0.0;
        _895 = 0.0;
    }
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _921 = fma(_578, cbModelParam._m0[30u].z, fma(_574, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _570));
        float _925 = fma(_578, cbModelParam._m0[31u].z, fma(_574, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _570));
        float _929 = fma(_578, cbModelParam._m0[32u].z, fma(_574, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _570));
        float _952 = _570 + _336;
        float _953 = _574 + _337;
        float _954 = _578 + _338;
        float _964 = fma(_954, cbModelParam._m0[30u].z, fma(_953, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _952)) - _921;
        float _965 = fma(_954, cbModelParam._m0[31u].z, fma(_953, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _952)) - _925;
        float _966 = fma(_954, cbModelParam._m0[32u].z, fma(_953, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _952)) - _929;
        float _970 = inversesqrt(dot(vec3(_964, _965, _966), vec3(_964, _965, _966)));
        float _983 = ((_970 * _964) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_921 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _984 = ((_970 * _965) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_925 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_970 * _966) / cbModelParam._m0[35u].z) + ((((((_929 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        float _1020 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_987.x + (-0.5));
        float _1022 = _1020 * (_987.y + (-0.5));
        float _1023 = _1020 * (_987.z + (-0.5));
        float _1030 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_994.x + (-0.5));
        float _1032 = _1030 * (_994.y + (-0.5));
        float _1033 = _1030 * (_994.z + (-0.5));
        float _1040 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1001.x + (-0.5));
        float _1042 = _1040 * (_1001.y + (-0.5));
        float _1043 = _1040 * (_1001.z + (-0.5));
        float _1050 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1008.x + (-0.5));
        float _1052 = _1050 * (_1008.y + (-0.5));
        float _1053 = _1050 * (_1008.z + (-0.5));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = _1021 * 0.5;
        float _1058 = _1031 * 0.5;
        float _1059 = _1041 * 0.5;
        float _1060 = dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059));
        float _1065 = (_1060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1060);
        float _1073 = (dot(vec3(_336, _337, _338), vec3(_1065 * _1057, _1065 * _1058, _1065 * _1059)) + 1.0) * 0.5;
        float _3527 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1082 = sqrt(((_1058 * _1058) + (_1057 * _1057)) + (_1059 * _1059)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3538 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _1084 = _1083 * 2.0;
        float _1088 = (1.0 - _1083) / (_1083 + 1.0);
        float _3549 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _1098 = ((((1.0 - _1089) * (_1084 + 2.0)) * exp2(log2(isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))) * (_1084 + 1.0))) + _1089) * _1054;
        float _1099 = _1022 * 0.5;
        float _1100 = _1032 * 0.5;
        float _1101 = _1042 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1115 = (dot(vec3(_336, _337, _338), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _3560 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1124 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3571 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _3582 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * (_1126 + 1.0))) + _1131) * _1055;
        float _1141 = _1023 * 0.5;
        float _1142 = _1033 * 0.5;
        float _1143 = _1043 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_336, _337, _338), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3593 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3604 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _3615 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * (_1168 + 1.0))) + _1173) * _1056;
        _1190 = _1023;
        _1191 = _1022;
        _1192 = _1021;
        _1193 = _1033;
        _1194 = _1032;
        _1195 = _1031;
        _1196 = _1043;
        _1197 = _1042;
        _1198 = _1041;
        _1199 = _1056;
        _1200 = _1055;
        _1201 = _1054;
        _1202 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)));
        _1203 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
        _1204 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
    }
    else
    {
        _1190 = _881;
        _1191 = _881;
        _1192 = _881;
        _1193 = _881;
        _1194 = _881;
        _1195 = _881;
        _1196 = _881;
        _1197 = _881;
        _1198 = _881;
        _1199 = _881;
        _1200 = _881;
        _1201 = _881;
        _1202 = 0.0;
        _1203 = 0.0;
        _1204 = 0.0;
    }
    float _1214 = (cbModelParam._m0[1u].x * (_1202 - _893)) + _893;
    float _1215 = (cbModelParam._m0[1u].x * (_1203 - _894)) + _894;
    float _1216 = (cbModelParam._m0[1u].x * (_1204 - _895)) + _895;
    float _1237 = fma(_1216, cbSceneParam._m0[89u].z, fma(_1215, cbSceneParam._m0[89u].y, _1214 * cbSceneParam._m0[89u].x));
    float _1240 = fma(_1216, cbSceneParam._m0[90u].z, fma(_1215, cbSceneParam._m0[90u].y, _1214 * cbSceneParam._m0[90u].x));
    float _1243 = fma(_1216, cbSceneParam._m0[91u].z, fma(_1215, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1214));
    float _1258 = _515 * 0.5;
    float _1259 = _516 * 0.5;
    float _1260 = _517 * 0.5;
    float _1261 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_1192, _1195, _1198, _1201));
    float _1264 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_1191, _1194, _1197, _1200));
    float _1267 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_1190, _1193, _1196, _1199));
    float _1301;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1274 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_880, _884, _887, _890));
        float _1278 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_882, _885, _888, _891));
        float _1282 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_883, _886, _889, _892));
        float _1289 = dot(vec4(cbModelParam._m0[39u]), vec4(_1258, _1259, _1260, 1.0));
        _1301 = dot(vec3(isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)), isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)), isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1289) ? 0.0 : (isnan(0.0) ? _1289 : max(0.0, _1289))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1301 = 1.0;
    }
    float _1312;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1303 = dot(vec4(cbModelParam._m0[40u]), vec4(_1258, _1259, _1260, 1.0));
        _1312 = dot(vec3(isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1303) ? 0.0 : (isnan(0.0) ? _1303 : max(0.0, _1303))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1312 = 1.0;
    }
    float _1316 = (_1312 * cbModelParam._m0[1u].x) + (_1301 * (1.0 - cbModelParam._m0[1u].x));
    float _1326 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _339);
    float _1327 = isnan(_1326) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1326 : min(cbModelParam._m0[25u].z, _1326));
    float _1408;
    float _1410;
    float _1412;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1375 = fma(_578, cbModelParam._m0[13u].z, fma(_574, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _570)) + cbModelParam._m0[13u].w;
        float _1379 = fma(_578, cbModelParam._m0[14u].z, fma(_574, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _570)) + cbModelParam._m0[14u].w;
        float _1383 = fma(_578, cbModelParam._m0[15u].z, fma(_574, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _570)) + cbModelParam._m0[15u].w;
        float _1386 = fma(_517, cbModelParam._m0[13u].z, fma(_516, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _515));
        float _1389 = fma(_517, cbModelParam._m0[14u].z, fma(_516, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _515));
        float _1392 = fma(_517, cbModelParam._m0[15u].z, fma(_516, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _515));
        float _1420;
        if (_1386 > 0.0)
        {
            _1420 = abs((1.0 - _1375) / _1386);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1386 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1375 + 1.0) / _1386);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1420 = frontier_phi_14_12_ladder;
        }
        float _1626;
        if (_1389 > 0.0)
        {
            _1626 = abs((1.0 - _1379) / _1389);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1389 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1379 + 1.0) / _1389);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1626 = frontier_phi_23_19_ladder;
        }
        float _1880;
        if (_1392 > 0.0)
        {
            _1880 = abs((1.0 - _1383) / _1392);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1392 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1383 + 1.0) / _1392);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1880 = frontier_phi_35_30_ladder;
        }
        float _1882 = isnan(_1626) ? _1420 : (isnan(_1420) ? _1626 : min(_1420, _1626));
        float _1883 = isnan(_1880) ? _1882 : (isnan(_1882) ? _1880 : min(_1882, _1880));
        float _1887 = (_1883 * _1386) + _1375;
        float _1888 = (_1883 * _1389) + _1379;
        float _1889 = (_1883 * _1392) + _1383;
        float _1890 = _1883 * 9.9999997473787516355514526367188e-05;
        float _1892 = (-1.0) - _1890;
        float _1894 = _1890 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1889 > _1894) || ((_1889 < _1892) || ((_1888 > _1894) || ((_1888 < _1892) || ((_1887 < _1892) || (_1887 > _1894))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2017 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1889, cbModelParam._m0[9u].z, fma(_1888, cbModelParam._m0[9u].y, _1887 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1889, cbModelParam._m0[10u].z, fma(_1888, cbModelParam._m0[10u].y, _1887 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1889, cbModelParam._m0[11u].z, fma(_1888, cbModelParam._m0[11u].y, _1887 * cbModelParam._m0[11u].x))), _1327);
            frontier_phi_13_35_ladder = _2017.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2017.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2017.x * cbModelParam._m0[1u].y;
        }
        _1408 = frontier_phi_13_35_ladder_2;
        _1410 = frontier_phi_13_35_ladder_1;
        _1412 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1396 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_515, _516, _517), _1327);
        _1408 = _1396.x * cbModelParam._m0[1u].y;
        _1410 = _1396.y * cbModelParam._m0[1u].y;
        _1412 = _1396.z * cbModelParam._m0[1u].y;
    }
    float _1416 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _339);
    float _1417 = isnan(_1416) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1416 : min(cbModelParam._m0[25u].w, _1416));
    float _1509;
    float _1511;
    float _1513;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1473 = fma(_578, cbModelParam._m0[21u].z, fma(_574, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _570)) + cbModelParam._m0[21u].w;
        float _1477 = fma(_578, cbModelParam._m0[22u].z, fma(_574, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _570)) + cbModelParam._m0[22u].w;
        float _1481 = fma(_578, cbModelParam._m0[23u].z, fma(_574, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _570)) + cbModelParam._m0[23u].w;
        float _1484 = fma(_517, cbModelParam._m0[21u].z, fma(_516, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _515));
        float _1487 = fma(_517, cbModelParam._m0[22u].z, fma(_516, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _515));
        float _1490 = fma(_517, cbModelParam._m0[23u].z, fma(_516, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _515));
        float _1631;
        if (_1484 > 0.0)
        {
            _1631 = abs((1.0 - _1473) / _1484);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1473 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1631 = frontier_phi_25_21_ladder;
        }
        float _1907;
        if (_1487 > 0.0)
        {
            _1907 = abs((1.0 - _1477) / _1487);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1477 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1907 = frontier_phi_37_32_ladder;
        }
        float _2120;
        if (_1490 > 0.0)
        {
            _2120 = abs((1.0 - _1481) / _1490);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1481 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2120 = frontier_phi_46_43_ladder;
        }
        float _2122 = isnan(_1907) ? _1631 : (isnan(_1631) ? _1907 : min(_1631, _1907));
        float _2123 = isnan(_2120) ? _2122 : (isnan(_2122) ? _2120 : min(_2122, _2120));
        float _2127 = (_2123 * _1484) + _1473;
        float _2128 = (_2123 * _1487) + _1477;
        float _2129 = (_2123 * _1490) + _1481;
        float _2130 = _2123 * 9.9999997473787516355514526367188e-05;
        float _2131 = (-1.0) - _2130;
        float _2133 = _2130 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2129 > _2133) || ((_2129 < _2131) || ((_2128 > _2133) || ((_2128 < _2131) || ((_2127 < _2131) || (_2127 > _2133))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2366 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2129, cbModelParam._m0[17u].z, fma(_2128, cbModelParam._m0[17u].y, _2127 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2129, cbModelParam._m0[18u].z, fma(_2128, cbModelParam._m0[18u].y, _2127 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2129, cbModelParam._m0[19u].z, fma(_2128, cbModelParam._m0[19u].y, _2127 * cbModelParam._m0[19u].x))), _1417);
            frontier_phi_22_46_ladder = _2366.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2366.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2366.x * cbModelParam._m0[1u].z;
        }
        _1509 = frontier_phi_22_46_ladder_2;
        _1511 = frontier_phi_22_46_ladder_1;
        _1513 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1493 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_515, _516, _517), _1417);
        _1509 = _1493.x * cbModelParam._m0[1u].z;
        _1511 = _1493.y * cbModelParam._m0[1u].z;
        _1513 = _1493.z * cbModelParam._m0[1u].z;
    }
    float _1526 = (((_541 * _492) + _542) * _507) * ((cbModelParam._m0[1u].w * (_1509 - _1408)) + _1408);
    float _1528 = (((_541 * _494) + _542) * _507) * ((cbModelParam._m0[1u].w * (_1511 - _1410)) + _1410);
    float _1530 = (((_541 * _495) + _542) * _507) * ((cbModelParam._m0[1u].w * (_1513 - _1412)) + _1412);
    float _1533 = fma(_1530, cbSceneParam._m0[89u].z, fma(_1528, cbSceneParam._m0[89u].y, _1526 * cbSceneParam._m0[89u].x));
    float _1536 = fma(_1530, cbSceneParam._m0[90u].z, fma(_1528, cbSceneParam._m0[90u].y, _1526 * cbSceneParam._m0[90u].x));
    float _1539 = fma(_1530, cbSceneParam._m0[91u].z, fma(_1528, cbSceneParam._m0[91u].y, _1526 * cbSceneParam._m0[91u].x));
    uvec4 _1549 = floatBitsToUint(cbInstanceData._m0[_466 + 5u]);
    uint _1551 = _1549.x * 14u;
    uint _1552 = _1551 + 13u;
    float _1559 = _507 + (-1.0);
    float _1564 = (cbLight._m0[_1552].x * _1559) + 1.0;
    float _1565 = (cbLight._m0[_1552].y * _1559) + 1.0;
    float _1566 = (cbLight._m0[_1552].z * _1559) + 1.0;
    float _1567 = (cbLight._m0[_1552].w * _1559) + 1.0;
    uint _1568 = _1551 + 5u;
    float _1574 = isnan(1.0) ? _1565 : (isnan(_1565) ? 1.0 : min(_1565, 1.0));
    uint _1578 = _1551 + 4u;
    float _1585 = isnan(1.0) ? _1564 : (isnan(_1564) ? 1.0 : min(_1564, 1.0));
    uint _1589 = _1551 | 1u;
    float _1600 = dot(vec3(cbLight._m0[_1551].xyz), vec3(_336, _337, _338));
    float _1603 = dot(vec3(cbLight._m0[_1589].xyz), vec3(_336, _337, _338));
    float _3751 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
    float _3762 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
    float _1608 = (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * 0.3183098733425140380859375;
    float _1610 = (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * 0.3183098733425140380859375;
    float _1617 = ((cbLight._m0[_1568].x * _1574) * _1610) + ((cbLight._m0[_1578].x * _1585) * _1608);
    float _1618 = ((_1574 * cbLight._m0[_1568].y) * _1610) + ((_1585 * cbLight._m0[_1578].y) * _1608);
    float _1619 = ((_1574 * cbLight._m0[_1568].z) * _1610) + ((_1585 * cbLight._m0[_1578].z) * _1608);
    uvec4 _1623 = floatBitsToUint(cbLight._m0[_1551 + 12u]);
    bool _1625 = _1623.x == 0u;
    float _1636;
    float _1638;
    float _1640;
    if (_1625)
    {
        _1636 = _1617;
        _1638 = _1618;
        _1640 = _1619;
    }
    else
    {
        uint _1644 = _1551 + 6u;
        float _1660 = (dot(vec3(cbLight._m0[_1551 + 2u].xyz), vec3(_336, _337, _338)) * 0.5) + 0.5;
        float _1661 = _1660 * _1660;
        float _3773 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1663 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
        _1636 = (((cbLight._m0[_1644].x * 0.3183098733425140380859375) * _1662) * _1663) + _1617;
        _1638 = (((cbLight._m0[_1644].y * 0.3183098733425140380859375) * _1662) * _1663) + _1618;
        _1640 = (((cbLight._m0[_1644].z * 0.3183098733425140380859375) * _1662) * _1663) + _1619;
    }
    bool _1643 = _1623.y == 0u;
    float _1681;
    float _1683;
    float _1685;
    if (_1643)
    {
        _1681 = _1636;
        _1683 = _1638;
        _1685 = _1640;
    }
    else
    {
        uint _1851 = _1551 + 7u;
        float _1867 = (dot(vec3(cbLight._m0[_1551 + 3u].xyz), vec3(_336, _337, _338)) * 0.5) + 0.5;
        float _1868 = _1867 * _1867;
        float _3789 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1869 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1870 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
        _1681 = (((cbLight._m0[_1851].x * 0.3183098733425140380859375) * _1869) * _1870) + _1636;
        _1683 = (((cbLight._m0[_1851].y * 0.3183098733425140380859375) * _1869) * _1870) + _1638;
        _1685 = (((cbLight._m0[_1851].z * 0.3183098733425140380859375) * _1869) * _1870) + _1640;
    }
    uint _1688 = _1551 + 8u;
    float _1701 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1551].w)) * _339) * 0.949999988079071044921875);
    float _1702 = _1701 * _1701;
    float _1703 = cbLight._m0[_1551].x + _417;
    float _1704 = cbLight._m0[_1551].y + _418;
    float _1705 = cbLight._m0[_1551].z + _419;
    float _1709 = inversesqrt(dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705)));
    float _1710 = _1709 * _1703;
    float _1711 = _1709 * _1704;
    float _1712 = _1709 * _1705;
    float _1713 = dot(vec3(_336, _337, _338), vec3(cbLight._m0[_1551].xyz));
    float _3805 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1716 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _3816 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _1717 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _1718 = dot(vec3(_336, _337, _338), vec3(_1710, _1711, _1712));
    float _3827 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1721 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _1722 = dot(vec3(cbLight._m0[_1551].xyz), vec3(_1710, _1711, _1712));
    float _3838 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
    float _1726 = _1702 * _1702;
    float _1730 = ((_1721 * _1721) * (_1726 + (-1.0))) + 1.0;
    float _1738 = exp2(log2(1.0 - (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) * 5.0);
    float _1739 = 0.959999978542327880859375 - _489;
    float _1741 = 0.959999978542327880859375 - _490;
    float _1742 = 0.959999978542327880859375 - _491;
    float _1749 = 1.0 - _1702;
    float _1760 = (0.5 / (((_1717 * ((_1716 * _1749) + _1702)) + 9.9999999392252902907785028219223e-09) + (((_1717 * _1749) + _1702) * _1716))) * _1716;
    float _3849 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1762 = (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1726 / ((_1730 * _1730) * 3.141590118408203125));
    uint _1773 = _1551 + 9u;
    float _1784 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1589].w)) * _339) * 0.949999988079071044921875);
    float _1785 = _1784 * _1784;
    float _1786 = cbLight._m0[_1589].x + _417;
    float _1787 = cbLight._m0[_1589].y + _418;
    float _1788 = cbLight._m0[_1589].z + _419;
    float _1792 = inversesqrt(dot(vec3(_1786, _1787, _1788), vec3(_1786, _1787, _1788)));
    float _1793 = _1792 * _1786;
    float _1794 = _1792 * _1787;
    float _1795 = _1792 * _1788;
    float _1796 = dot(vec3(_336, _337, _338), vec3(cbLight._m0[_1589].xyz));
    float _3860 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1799 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _1800 = dot(vec3(_336, _337, _338), vec3(_1793, _1794, _1795));
    float _3871 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1803 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _1804 = dot(vec3(cbLight._m0[_1589].xyz), vec3(_1793, _1794, _1795));
    float _3882 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1808 = _1785 * _1785;
    float _1812 = ((_1803 * _1803) * (_1808 + (-1.0))) + 1.0;
    float _1819 = exp2(log2(1.0 - (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * 5.0);
    float _1826 = 1.0 - _1785;
    float _1836 = (0.5 / (((_1717 * ((_1799 * _1826) + _1785)) + 9.9999999392252902907785028219223e-09) + (((_1717 * _1826) + _1785) * _1799))) * _1799;
    float _3893 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1838 = (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1808 / ((_1812 * _1812) * 3.141590118408203125));
    float _1848 = (((((_1819 * _1739) + _492) * cbLight._m0[_1773].x) * _1838) * _1574) + (((((_1738 * _1739) + _492) * cbLight._m0[_1688].x) * _1762) * _1585);
    float _1849 = (((((_1819 * _1741) + _494) * cbLight._m0[_1773].y) * _1838) * _1574) + (((((_1738 * _1741) + _494) * cbLight._m0[_1688].y) * _1762) * _1585);
    float _1850 = (((((_1819 * _1742) + _495) * cbLight._m0[_1773].z) * _1838) * _1574) + (((((_1738 * _1742) + _495) * cbLight._m0[_1688].z) * _1762) * _1585);
    float _1912;
    float _1914;
    float _1916;
    if (_1625)
    {
        _1912 = _1848;
        _1914 = _1849;
        _1916 = _1850;
    }
    else
    {
        uint _1918 = _1551 + 2u;
        uint _1922 = _1551 + 10u;
        float _1936 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1918].w)) * _339) * 0.949999988079071044921875);
        float _1937 = _1936 * _1936;
        float _1938 = cbLight._m0[_1918].x + _417;
        float _1939 = cbLight._m0[_1918].y + _418;
        float _1940 = cbLight._m0[_1918].z + _419;
        float _1944 = inversesqrt(dot(vec3(_1938, _1939, _1940), vec3(_1938, _1939, _1940)));
        float _1945 = _1944 * _1938;
        float _1946 = _1944 * _1939;
        float _1947 = _1944 * _1940;
        float _1948 = dot(vec3(_336, _337, _338), vec3(cbLight._m0[_1918].xyz));
        float _3904 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1951 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1952 = dot(vec3(_336, _337, _338), vec3(_1945, _1946, _1947));
        float _3915 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        float _1955 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1956 = dot(vec3(cbLight._m0[_1918].xyz), vec3(_1945, _1946, _1947));
        float _3926 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
        float _1960 = _1937 * _1937;
        float _1964 = ((_1955 * _1955) * (_1960 + (-1.0))) + 1.0;
        float _1971 = exp2(log2(1.0 - (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * 5.0);
        float _1978 = 1.0 - _1937;
        float _1988 = (0.5 / (((_1717 * ((_1951 * _1978) + _1937)) + 9.9999999392252902907785028219223e-09) + (((_1717 * _1978) + _1937) * _1951))) * _1951;
        float _3937 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1990 = (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1960 / ((_1964 * _1964) * 3.141590118408203125));
        float _1991 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
        _1912 = (((((_1971 * _1739) + _492) * cbLight._m0[_1922].x) * _1990) * _1991) + _1848;
        _1914 = (((((_1971 * _1741) + _494) * cbLight._m0[_1922].y) * _1990) * _1991) + _1849;
        _1916 = (((((_1971 * _1742) + _495) * cbLight._m0[_1922].z) * _1990) * _1991) + _1850;
    }
    float _2026;
    float _2028;
    float _2030;
    if (_1643)
    {
        _2026 = _1912;
        _2028 = _1914;
        _2030 = _1916;
    }
    else
    {
        uint _2037 = _1551 + 3u;
        uint _2041 = _1551 + 11u;
        float _2055 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2037].w)) * _339) * 0.949999988079071044921875);
        float _2056 = _2055 * _2055;
        float _2057 = cbLight._m0[_2037].x + _417;
        float _2058 = cbLight._m0[_2037].y + _418;
        float _2059 = cbLight._m0[_2037].z + _419;
        float _2063 = inversesqrt(dot(vec3(_2057, _2058, _2059), vec3(_2057, _2058, _2059)));
        float _2064 = _2063 * _2057;
        float _2065 = _2063 * _2058;
        float _2066 = _2063 * _2059;
        float _2067 = dot(vec3(_336, _337, _338), vec3(cbLight._m0[_2037].xyz));
        float _3953 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2070 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _2071 = dot(vec3(_336, _337, _338), vec3(_2064, _2065, _2066));
        float _3964 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2074 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _2075 = dot(vec3(cbLight._m0[_2037].xyz), vec3(_2064, _2065, _2066));
        float _3975 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2079 = _2056 * _2056;
        float _2083 = ((_2074 * _2074) * (_2079 + (-1.0))) + 1.0;
        float _2090 = exp2(log2(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) * 5.0);
        float _2097 = 1.0 - _2056;
        float _2107 = (0.5 / (((_1717 * ((_2070 * _2097) + _2056)) + 9.9999999392252902907785028219223e-09) + (((_1717 * _2097) + _2056) * _2070))) * _2070;
        float _3986 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2109 = (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_2079 / ((_2083 * _2083) * 3.141590118408203125));
        float _2110 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
        _2026 = (((((_2090 * _1739) + _492) * cbLight._m0[_2041].x) * _2109) * _2110) + _1912;
        _2028 = (((((_2090 * _1741) + _494) * cbLight._m0[_2041].y) * _2109) * _2110) + _1914;
        _2030 = (((((_2090 * _1742) + _495) * cbLight._m0[_2041].z) * _2109) * _2110) + _1916;
    }
    float _2245;
    float _2247;
    float _2249;
    float _2251;
    float _2253;
    float _2255;
    if (_1549.y == 0u)
    {
        float _2185 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2186 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2185;
        float _2187 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2185;
        float _2188 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2185;
        uvec4 _2200 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2201 = _2200.x;
        uint _2212 = uint((float(_2200.y) * floor(float(uint(cbSceneParam._m0[85u].y * _426) / _2201))) + floor(float(uint(cbSceneParam._m0[85u].x * _425) / _2201)));
        float _2222 = (log2(_2188 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2223 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        uint _2226 = uint(isnan(14.0) ? _2223 : (isnan(_2223) ? 14.0 : min(_2223, 14.0)));
        uvec4 _2231 = texelFetch(g_lightClusterGridBuffer, int(((_2226 << 2u) + (_2212 << 6u)) >> 2u));
        uint _2232 = _2231.x;
        uint _2233 = _2200.z;
        float _2371;
        float _2373;
        float _2375;
        float _2377;
        float _2379;
        float _2381;
        if (((((1u << ((_2233 >> 4u) & 15u)) + 4294967295u) & _2232) == 0u) || ((_2233 & 240u) == 0u))
        {
            _2371 = 0.0;
            _2373 = 0.0;
            _2375 = 0.0;
            _2377 = 0.0;
            _2379 = 0.0;
            _2381 = 0.0;
        }
        else
        {
            float _2372;
            float _2374;
            float _2376;
            float _2378;
            float _2380;
            float _2382;
            float _2525 = 0.0;
            float _2526 = 0.0;
            float _2527 = 0.0;
            float _2528 = 0.0;
            float _2529 = 0.0;
            float _2530 = 0.0;
            uint _2531 = 0u;
            uint _2540;
            bool _2541;
            for (;;)
            {
                _2540 = texelFetch(g_lightClassification, int((((_2226 << 5u) + (_2212 << 9u)) + (_2531 << 2u)) >> 2u)).x;
                _2541 = _2540 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2541)
                {
                    frontier_phi_61_pred = _2525;
                    frontier_phi_61_pred_1 = _2530;
                    frontier_phi_61_pred_2 = _2529;
                    frontier_phi_61_pred_3 = _2528;
                    frontier_phi_61_pred_4 = _2527;
                    frontier_phi_61_pred_5 = _2526;
                }
                else
                {
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    uint _2655;
                    _2649 = _2525;
                    _2650 = _2526;
                    _2651 = _2527;
                    _2652 = _2528;
                    _2653 = _2529;
                    _2654 = _2530;
                    _2655 = _2540;
                    float _2581;
                    float _2582;
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    for (;;)
                    {
                        uint _2659 = uint(findLSB(_2655)) + (_2531 << 5u);
                        uint _2656 = (_2655 + 4294967295u) & _2655;
                        uint _2661 = _2659 * 48u;
                        vec4 _2675 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2661)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 3u)).x));
                        uint _2681 = (_2659 * 48u) + 4u;
                        vec4 _2694 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2681)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 3u)).x));
                        uint _2700 = (_2659 * 48u) + 8u;
                        vec3 _2711 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2700)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 2u)).x));
                        float _2715 = _2675.x - _2186;
                        float _2716 = _2675.y - _2187;
                        float _2717 = _2675.z - _2188;
                        float _2718 = dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717));
                        float _2721 = inversesqrt(_2718);
                        float _2722 = _2721 * _2715;
                        float _2723 = _2721 * _2716;
                        float _2724 = _2721 * _2717;
                        float _2725 = dot(vec3(_447, _450, _453), vec3(_2722, _2723, _2724));
                        float _2730 = 1.0 - (_2718 * _2675.w);
                        float _4012 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
                        float _2731 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
                        float _2732 = sqrt(_2718) * _2694.w;
                        float _2735 = 1.39999997615814208984375 / (_2732 + 1.39999997615814208984375);
                        float _2736 = _2735 * _2735;
                        float _2739 = ((1.0 - _2736) * _2725) + _2736;
                        float _2742 = _2732 * _2732;
                        float _2746 = ((isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0))) * _2731) / ((_2742 * 0.699999988079071044921875) + 1.0);
                        float _2750 = (-0.0) - _2186;
                        float _2751 = (-0.0) - _2187;
                        float _2752 = (-0.0) - _2188;
                        float _2756 = inversesqrt(dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752)));
                        float _2757 = _2756 * _2750;
                        float _2758 = _2756 * _2751;
                        float _2759 = _2756 * _2752;
                        float _2767 = exp2(log2(1.0 / ((_2742 * 3.5) + 5.0)) * 0.25);
                        float _2768 = 1.0 - _523;
                        float _2775 = sqrt(1.0 - ((1.0 - (_2768 * _2768)) * (1.0 - (_2767 * _2767))));
                        float _2776 = _2775 * _2775;
                        float _2777 = _2776 * _2776;
                        float _2778 = _2757 + _2722;
                        float _2779 = _2758 + _2723;
                        float _2780 = _2759 + _2724;
                        float _2784 = inversesqrt(dot(vec3(_2778, _2779, _2780), vec3(_2778, _2779, _2780)));
                        float _2788 = dot(vec3(_447, _450, _453), vec3(_2757, _2758, _2759));
                        float _4028 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                        float _2791 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
                        float _2792 = dot(vec3(_447, _450, _453), vec3(_2784 * _2778, _2784 * _2779, _2784 * _2780));
                        float _4039 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2795 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                        float _2799 = ((_2795 * _2795) * (_2777 + (-1.0))) + 1.0;
                        float _2800 = _2735 * _2776;
                        float _2801 = _2800 * _2800;
                        float _2804 = ((1.0 - _2801) * _2725) + _2801;
                        float _4050 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                        float _2805 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                        float _2806 = 1.0 - _2776;
                        float _2816 = (0.5 / (((_2805 * ((_2791 * _2806) + _2776)) + 9.9999999392252902907785028219223e-09) + (((_2805 * _2806) + _2776) * _2791))) * _2805;
                        float _4061 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _2827 = (((_2777 * 3.1415927410125732421875) * (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) / ((_2799 * _2799) * ((_2742 * 2.1991131305694580078125) + 3.141590118408203125))) * _2731;
                        _2584 = (_2746 * _2694.x) + _2652;
                        _2585 = (_2746 * _2694.y) + _2653;
                        _2586 = (_2746 * _2694.z) + _2654;
                        _2581 = (_2827 * _2711.x) + _2649;
                        _2582 = (_2827 * _2711.y) + _2650;
                        _2583 = (_2827 * _2711.z) + _2651;
                        if (_2656 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2649 = _2581;
                            _2650 = _2582;
                            _2651 = _2583;
                            _2652 = _2584;
                            _2653 = _2585;
                            _2654 = _2586;
                            _2655 = _2656;
                        }
                    }
                    frontier_phi_61_pred = _2581;
                    frontier_phi_61_pred_1 = _2586;
                    frontier_phi_61_pred_2 = _2585;
                    frontier_phi_61_pred_3 = _2584;
                    frontier_phi_61_pred_4 = _2583;
                    frontier_phi_61_pred_5 = _2582;
                }
                _2372 = frontier_phi_61_pred;
                _2382 = frontier_phi_61_pred_1;
                _2380 = frontier_phi_61_pred_2;
                _2378 = frontier_phi_61_pred_3;
                _2376 = frontier_phi_61_pred_4;
                _2374 = frontier_phi_61_pred_5;
                uint _2532 = _2531 + 1u;
                if (_2532 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2525 = _2372;
                    _2526 = _2374;
                    _2527 = _2376;
                    _2528 = _2378;
                    _2529 = _2380;
                    _2530 = _2382;
                    _2531 = _2532;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2371 = _2372;
            _2373 = _2374;
            _2375 = _2376;
            _2377 = _2378;
            _2379 = _2380;
            _2381 = _2382;
        }
        uvec4 _2385 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2386 = _2385.z;
        uint _2388 = (_2386 >> 8u) & 15u;
        float _2493;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        if (((4294967295u << _2388) & _2232) == 0u)
        {
            _2493 = _2371;
            _2495 = _2373;
            _2497 = _2375;
            _2499 = _2377;
            _2501 = _2379;
            _2503 = _2381;
        }
        else
        {
            float _2518 = inversesqrt(dot(vec3(_2186, _2187, _2188), vec3(_2186, _2187, _2188)));
            float _2519 = _2518 * _2186;
            float _2520 = _2518 * _2187;
            float _2521 = _2518 * _2188;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2388 < ((_2386 >> 12u) & 15u))
            {
                float _2494;
                float _2496;
                float _2498;
                float _2500;
                float _2502;
                float _2504;
                float _2632 = _2371;
                float _2633 = _2373;
                float _2634 = _2375;
                float _2635 = _2377;
                float _2636 = _2379;
                float _2637 = _2381;
                uint _2638 = _2388;
                uint _2647;
                bool _2648;
                for (;;)
                {
                    _2647 = texelFetch(g_lightClassification, int((((_2226 << 5u) + (_2212 << 9u)) + (_2638 << 2u)) >> 2u)).x;
                    _2648 = _2647 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2648)
                    {
                        frontier_phi_67_pred = _2635;
                        frontier_phi_67_pred_1 = _2636;
                        frontier_phi_67_pred_2 = _2637;
                        frontier_phi_67_pred_3 = _2634;
                        frontier_phi_67_pred_4 = _2633;
                        frontier_phi_67_pred_5 = _2632;
                    }
                    else
                    {
                        float _2832;
                        float _2833;
                        float _2834;
                        float _2835;
                        float _2836;
                        float _2837;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _2845 = _2632;
                        float _2846 = _2633;
                        float _2847 = _2634;
                        float _2848 = _2635;
                        float _2849 = _2636;
                        float _2850 = _2637;
                        uint _2851 = _2647;
                        uint _2852;
                        vec4 _2877;
                        float _2878;
                        vec4 _2893;
                        vec3 _2905;
                        vec4 _2921;
                        vec4 _2937;
                        float _2984;
                        bool _2985;
                        for (;;)
                        {
                            uint _2862 = ((_2638 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2851));
                            _2852 = (_2851 + 4294967295u) & _2851;
                            uint _2864 = _2862 * 40u;
                            _2877 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2864)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 3u)).x));
                            _2878 = _2877.w;
                            uint _2880 = (_2862 * 40u) + 4u;
                            _2893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 3u)).x));
                            uint _2895 = (_2862 * 40u) + 8u;
                            _2905 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x));
                            uint _2908 = (_2862 * 40u) + 16u;
                            _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            uint _2924 = (_2862 * 40u) + 20u;
                            _2937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 3u)).x));
                            uint _2940 = (_2862 * 40u) + 24u;
                            vec4 _2953 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 3u)).x));
                            uint _2959 = (_2862 * 40u) + 28u;
                            vec4 _2972 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 3u)).x));
                            _2984 = fma(_2188, _2972.z, fma(_2187, _2972.y, _2972.x * _2186)) + _2972.w;
                            _2985 = !((fma(_2188, _2953.z, fma(_2187, _2953.y, _2953.x * _2186)) + _2953.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2985)
                            {
                                float _3012 = _2877.x - _2186;
                                float _3013 = _2877.y - _2187;
                                float _3014 = _2877.z - _2188;
                                float _3015 = dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014));
                                float _3018 = inversesqrt(_3015);
                                float _3019 = _3018 * _3012;
                                float _3020 = _3018 * _3013;
                                float _3021 = _3018 * _3014;
                                float _3025 = 1.0 - (_3015 / (_2878 * _2878));
                                float _4072 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                                float _3026 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
                                float _3030 = sqrt(_3015) * _2893.w;
                                float _3032 = 1.39999997615814208984375 / (_3030 + 1.39999997615814208984375);
                                float _3033 = _3032 * _3032;
                                float _3036 = ((1.0 - _3033) * dot(vec3(_3019, _3020, _3021), vec3(_447, _450, _453))) + _3033;
                                float _3039 = _3030 * _3030;
                                float _3043 = (fma(_2188, _2921.z, fma(_2187, _2921.y, _2921.x * _2186)) + _2921.w) / _2984;
                                float _3044 = (fma(_2188, _2937.z, fma(_2187, _2937.y, _2937.x * _2186)) + _2937.w) / _2984;
                                float _3048 = 1.0 - dot(vec2(_3043, _3044), vec2(_3043, _3044));
                                float _4088 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                                float _3049 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
                                float _3050 = _3049 * (((isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0))) * _3026) / ((_3039 * 0.699999988079071044921875) + 1.0));
                                float _3062 = exp2(log2(1.0 / ((_3039 * 3.5) + 5.0)) * 0.25);
                                float _3063 = 1.0 - _523;
                                float _3070 = sqrt(1.0 - ((1.0 - (_3063 * _3063)) * (1.0 - (_3062 * _3062))));
                                float _3071 = _3070 * _3070;
                                float _3072 = _3071 * _3071;
                                float _3073 = _3019 - _2519;
                                float _3074 = _3020 - _2520;
                                float _3075 = _3021 - _2521;
                                float _3079 = inversesqrt(dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075)));
                                float _3083 = dot(vec3(_447, _450, _453), vec3((-0.0) - _2519, (-0.0) - _2520, (-0.0) - _2521));
                                float _4099 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                                float _3086 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                                float _3087 = dot(vec3(_447, _450, _453), vec3(_3079 * _3073, _3079 * _3074, _3079 * _3075));
                                float _4110 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3090 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
                                float _3094 = ((_3090 * _3090) * (_3072 + (-1.0))) + 1.0;
                                float _3095 = _3032 * _3071;
                                float _3096 = _3095 * _3095;
                                float _3102 = ((1.0 - _3096) * dot(vec3(_447, _450, _453), vec3(_3019, _3020, _3021))) + _3096;
                                float _4121 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                                float _3103 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                                float _3104 = 1.0 - _3071;
                                float _3114 = (0.5 / (((_3103 * ((_3086 * _3104) + _3071)) + 9.9999999392252902907785028219223e-09) + (((_3103 * _3104) + _3071) * _3086))) * _3103;
                                float _4132 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                                float _3124 = (_3049 * _3026) * (((_3072 * 3.1415927410125732421875) * (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) / ((_3094 * _3094) * ((_3039 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3124 * _2905.x;
                                frontier_phi_73_pred_1 = _3124 * _2905.y;
                                frontier_phi_73_pred_2 = _3050 * _2893.z;
                                frontier_phi_73_pred_3 = _3050 * _2893.y;
                                frontier_phi_73_pred_4 = _3050 * _2893.x;
                                frontier_phi_73_pred_5 = _3124 * _2905.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3128 = frontier_phi_73_pred;
                            _3129 = frontier_phi_73_pred_1;
                            _3133 = frontier_phi_73_pred_2;
                            _3132 = frontier_phi_73_pred_3;
                            _3131 = frontier_phi_73_pred_4;
                            _3130 = frontier_phi_73_pred_5;
                            _2835 = _3131 + _2848;
                            _2836 = _3132 + _2849;
                            _2837 = _3133 + _2850;
                            _2832 = _3128 + _2845;
                            _2833 = _3129 + _2846;
                            _2834 = _3130 + _2847;
                            if (_2852 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2845 = _2832;
                                _2846 = _2833;
                                _2847 = _2834;
                                _2848 = _2835;
                                _2849 = _2836;
                                _2850 = _2837;
                                _2851 = _2852;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2835;
                        frontier_phi_67_pred_1 = _2836;
                        frontier_phi_67_pred_2 = _2837;
                        frontier_phi_67_pred_3 = _2834;
                        frontier_phi_67_pred_4 = _2833;
                        frontier_phi_67_pred_5 = _2832;
                    }
                    _2500 = frontier_phi_67_pred;
                    _2502 = frontier_phi_67_pred_1;
                    _2504 = frontier_phi_67_pred_2;
                    _2498 = frontier_phi_67_pred_3;
                    _2496 = frontier_phi_67_pred_4;
                    _2494 = frontier_phi_67_pred_5;
                    uint _2639 = _2638 + 1u;
                    if (_2639 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2632 = _2494;
                        _2633 = _2496;
                        _2634 = _2498;
                        _2635 = _2500;
                        _2636 = _2502;
                        _2637 = _2504;
                        _2638 = _2639;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2502;
                frontier_phi_55_56_ladder_1 = _2504;
                frontier_phi_55_56_ladder_2 = _2500;
                frontier_phi_55_56_ladder_3 = _2498;
                frontier_phi_55_56_ladder_4 = _2496;
                frontier_phi_55_56_ladder_5 = _2494;
            }
            else
            {
                frontier_phi_55_56_ladder = _2379;
                frontier_phi_55_56_ladder_1 = _2381;
                frontier_phi_55_56_ladder_2 = _2377;
                frontier_phi_55_56_ladder_3 = _2375;
                frontier_phi_55_56_ladder_4 = _2373;
                frontier_phi_55_56_ladder_5 = _2371;
            }
            _2493 = frontier_phi_55_56_ladder_5;
            _2495 = frontier_phi_55_56_ladder_4;
            _2497 = frontier_phi_55_56_ladder_3;
            _2499 = frontier_phi_55_56_ladder_2;
            _2501 = frontier_phi_55_56_ladder;
            _2503 = frontier_phi_55_56_ladder_1;
        }
        float _2508 = isnan(1.0) ? _507 : (isnan(_507) ? 1.0 : min(_507, 1.0));
        _2245 = (_2508 * _2499) + _1681;
        _2247 = (_2508 * _2501) + _1683;
        _2249 = (_2508 * _2503) + _1685;
        _2251 = ((_2493 * _492) * _2508) + _2026;
        _2253 = ((_2495 * _494) * _2508) + _2028;
        _2255 = ((_2497 * _495) * _2508) + _2030;
    }
    else
    {
        _2245 = _1681;
        _2247 = _1683;
        _2249 = _1685;
        _2251 = _2026;
        _2253 = _2028;
        _2255 = _2030;
    }
    uint _2261 = _468 + uint(cbMatDynParam._m0[0u].w);
    float _2270 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _299.x) * _322) * cbInstanceData._m0[_2261].x;
    float _2274 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _299.y) * _322) * cbInstanceData._m0[_2261].y;
    float _2278 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _299.z) * _322) * cbInstanceData._m0[_2261].z;
    float _4148 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _4159 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _4170 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _2295 = (((isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2245 + ((isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0))) * _507))) + ((_2251 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _1316)) * cbPerFrame._m0[3u].x)) + _2270;
    float _2297 = (_2274 + ((_2253 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _1316)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_2247 + ((isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))) * _507)));
    float _2299 = (_2278 + ((_2255 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _1316)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_2249 + ((isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))) * _507)));
    float _4196 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2312 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    uint _2313 = _466 + 6u;
    float _2321 = _425 / cbSceneParam._m0[86u].x;
    float _2322 = _426 / cbSceneParam._m0[86u].y;
    vec4 _2336 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2321, _2322, (log2((isnan(cbSceneParam._m0[77u].w) ? _359 : (isnan(_359) ? cbSceneParam._m0[77u].w : min(_359, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2338 = _2336.x;
    float _2339 = _2336.y;
    float _2340 = _2336.z;
    float _2341 = _2336.w;
    float _2434;
    float _2436;
    float _2438;
    float _2440;
    if (_359 > cbSceneParam._m0[78u].w)
    {
        float _2396 = isnan(_359) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _359 : min(cbSceneParam._m0[80u].w, _359));
        float _2397 = _2396 / _359;
        float _2408 = _2397 * _410;
        float _2409 = _411 * _2397;
        float _2410 = (-0.0) - _2409;
        float _2412 = _2397 * _412;
        float _2414 = (cbSceneParam._m0[77u].w * _2410) / _2396;
        float _2415 = _2414 + cbSceneParam._m0[79u].w;
        float _2416 = cbSceneParam._m0[79u].w - _2409;
        float _2422 = sqrt(((_2408 * _2408) + (_2409 * _2409)) + (_2412 * _2412));
        float _2425 = (1.0 - (cbSceneParam._m0[77u].w / _2396)) * _2422;
        float _2430 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2432 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2594;
        if (abs((_2410 - _2414) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2594 = ((((_2415 > 0.0) ? exp2(_2430 * _2415) : (2.0 - exp2(_2432 * _2415))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2425;
        }
        else
        {
            float _2554 = 1.0 / cbSceneParam._m0[80u].x;
            float _2555 = isnan(_2416) ? _2415 : (isnan(_2415) ? _2416 : max(_2415, _2416));
            float _2556 = isnan(_2416) ? _2415 : (isnan(_2415) ? _2416 : min(_2415, _2416));
            float _2565 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : min(_2555, 0.0));
            float _2566 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : min(_2556, 0.0));
            _2594 = ((abs(_2422 / _2410) * cbSceneParam._m0[80u].y) * ((((_2565 - _2566) * 2.0) - ((exp2(_2430 * (isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0)))) - exp2(_2430 * (isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0))))) * _2554)) - ((exp2(_2432 * _2565) - exp2(_2432 * _2566)) * _2554))) + (_2425 * cbSceneParam._m0[80u].z);
        }
        vec4 _2596 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2321, _2322, 1.0), 0.0);
        float _2605 = exp2((_2594 * (-1.44269502162933349609375)) * (1.0 - _2596.w));
        float _2606 = log2(_2605);
        float _2622 = log2(_2341);
        _2434 = (exp2(_2622 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2606 * cbSceneParam._m0[78u].x)) * _2596.x) / cbSceneParam._m0[78u].x)) + _2338;
        _2436 = (exp2(_2622 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2606 * cbSceneParam._m0[78u].y)) * _2596.y) / cbSceneParam._m0[78u].y)) + _2339;
        _2438 = (exp2(_2622 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2606 * cbSceneParam._m0[78u].z)) * _2596.z) / cbSceneParam._m0[78u].z)) + _2340;
        _2440 = _2605 * _2341;
    }
    else
    {
        _2434 = _2338;
        _2436 = _2339;
        _2438 = _2340;
        _2440 = _2341;
    }
    float _2452 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2453 = _2452 == 3.0;
    float _2454 = log2(_2440);
    float _2458 = exp2(_2454 * cbSceneParam._m0[78u].x);
    float _2459 = exp2(_2454 * cbSceneParam._m0[78u].y);
    float _2460 = exp2(_2454 * cbSceneParam._m0[78u].z);
    float _2461 = _2458 * (isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0)));
    float _2462 = _2459 * (isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0)));
    float _2463 = _2460 * (isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0)));
    float _2472 = (_2452 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2472 * (_2453 ? _2461 : (_2461 + (cbSceneParam._m0[72u].w * _2434)));
    SV_Target.y = _2472 * (_2453 ? _2462 : (_2462 + (cbSceneParam._m0[72u].w * _2436)));
    SV_Target.z = _2472 * (_2453 ? _2463 : (_2463 + (cbSceneParam._m0[72u].w * _2438)));
    SV_Target.w = cbInstanceData._m0[_2313].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2270) * _2312) * _2458) * _2472;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2274) * _2312) * _2459) * _2472;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2278) * _2312) * _2460) * _2472;
    SV_Target_1.w = cbInstanceData._m0[_2313].w;
}


