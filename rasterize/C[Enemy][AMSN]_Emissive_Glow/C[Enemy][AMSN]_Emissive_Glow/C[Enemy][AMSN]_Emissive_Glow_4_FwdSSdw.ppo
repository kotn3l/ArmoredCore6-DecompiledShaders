#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _879;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _228.x * cbMtdParam._m0[9u].x;
    float _235 = _228.y * cbMtdParam._m0[9u].y;
    float _236 = _228.z * cbMtdParam._m0[9u].z;
    vec4 _248 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _250 = _248.x;
    vec4 _262 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _266 = _262.z;
    float _270 = (_262.x * 2.0) + (-1.0);
    float _272 = (_262.y * 2.0) + (-1.0);
    float _273 = dot(vec2(_270, _272), vec2(_270, _272));
    float _3281 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _279 = sqrt(1.0 - (isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0))));
    vec4 _316 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _323 = fma(_279, _199 * NORMAL.x, fma(_272, _206 * TANGENT.x, (_192 * _185) * _270));
    float _326 = fma(_279, _199 * NORMAL.y, fma(_272, _206 * TANGENT.y, (_192 * _186) * _270));
    float _329 = fma(_279, _199 * NORMAL.z, fma(_272, _206 * TANGENT.z, (_192 * _187) * _270));
    float _333 = inversesqrt(dot(vec3(_323, _326, _329), vec3(_323, _326, _329)));
    float _334 = _333 * _323;
    float _335 = _333 * _326;
    float _336 = _333 * _329;
    float _3292 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _337 = isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0));
    float _3303 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3314 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3325 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3336 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _341 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
    float _357 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _398 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _408 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _398);
    float _409 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _398);
    float _410 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _398);
    float _414 = inversesqrt(dot(vec3(_408, _409, _410), vec3(_408, _409, _410)));
    float _415 = _408 * _414;
    float _416 = _409 * _414;
    float _417 = _410 * _414;
    float _423 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _424 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _445 = fma(_336, cbSceneParam._m0[5u].z, fma(_335, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _334));
    float _448 = fma(_336, cbSceneParam._m0[6u].z, fma(_335, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _334));
    float _451 = fma(_336, cbSceneParam._m0[7u].z, fma(_335, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _334));
    uint _464 = uint(roundEven(NORMAL.w)) * 13u;
    uint _465 = _464 + 9u;
    uint _466 = _465 + uint(cbMatDynParam._m0[0u].w);
    float _472 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0)))) * cbInstanceData._m0[_466].x;
    float _473 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0)))) * cbInstanceData._m0[_466].y;
    float _474 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0)))) * cbInstanceData._m0[_466].z;
    float _3347 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
    float _3358 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _476 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
    float _3369 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
    float _478 = 1.0 - _341;
    float _479 = _475 * _478;
    float _480 = _476 * _478;
    float _481 = _477 * _478;
    float _486 = (_475 + (-0.039999999105930328369140625)) * _341;
    float _487 = (_476 + (-0.039999999105930328369140625)) * _341;
    float _488 = (_477 + (-0.039999999105930328369140625)) * _341;
    float _489 = _486 + 0.039999999105930328369140625;
    float _491 = _487 + 0.039999999105930328369140625;
    float _492 = _488 + 0.039999999105930328369140625;
    vec4 _501 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _423, cbSceneParam._m0[86u].y * _424));
    float _504 = _501.x * TEXCOORD.z;
    float _505 = dot(vec3(_334, _335, _336), vec3(_415, _416, _417));
    float _508 = _505 * 2.0;
    float _512 = (_508 * _334) - _415;
    float _513 = (_508 * _335) - _416;
    float _514 = (_508 * _336) - _417;
    float _518 = abs(dot(vec3(_415, _416, _417), vec3(_334, _335, _336)));
    float _3380 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _520 = sqrt(_337);
    float _533 = exp2((_520 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_520 * 3.0));
    float _539 = (1.0 - _533) * ((_520 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _540 = _533 * _520;
    float _568 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _572 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _576 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _878;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _603 = fma(_576, cbModelParam._m0[26u].z, fma(_572, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _568));
        float _607 = fma(_576, cbModelParam._m0[27u].z, fma(_572, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _568));
        float _611 = fma(_576, cbModelParam._m0[28u].z, fma(_572, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _568));
        float _636 = _568 + _334;
        float _637 = _572 + _335;
        float _638 = _576 + _336;
        float _648 = fma(_638, cbModelParam._m0[26u].z, fma(_637, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _636)) - _603;
        float _649 = fma(_638, cbModelParam._m0[27u].z, fma(_637, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _636)) - _607;
        float _650 = fma(_638, cbModelParam._m0[28u].z, fma(_637, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _636)) - _611;
        float _654 = inversesqrt(dot(vec3(_648, _649, _650), vec3(_648, _649, _650)));
        float _667 = ((_654 * _648) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_603 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _668 = ((_654 * _649) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_607 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _669 = ((_654 * _650) / cbModelParam._m0[34u].z) + ((((((_611 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        vec4 _679 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        vec4 _686 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        vec4 _693 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        float _706 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _706 * (_672.x + (-0.5));
        float _708 = _706 * (_672.y + (-0.5));
        float _709 = _706 * (_672.z + (-0.5));
        float _716 = exp2((_679.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_679.x + (-0.5));
        float _718 = _716 * (_679.y + (-0.5));
        float _719 = _716 * (_679.z + (-0.5));
        float _726 = exp2((_686.w + (-0.5)) * 20.0) * 2.0;
        float _727 = _726 * (_686.x + (-0.5));
        float _728 = _726 * (_686.y + (-0.5));
        float _729 = _726 * (_686.z + (-0.5));
        float _736 = exp2((_693.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_693.x + (-0.5));
        float _738 = _736 * (_693.y + (-0.5));
        float _739 = _736 * (_693.z + (-0.5));
        float _740 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _741 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _742 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _743 = _707 * 0.5;
        float _744 = _717 * 0.5;
        float _745 = _727 * 0.5;
        float _746 = dot(vec3(_743, _744, _745), vec3(_743, _744, _745));
        float _751 = (_746 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_746);
        float _760 = (dot(vec3(_334, _335, _336), vec3(_751 * _743, _751 * _744, _751 * _745)) + 1.0) * 0.5;
        float _3406 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _770 = sqrt(((_744 * _744) + (_743 * _743)) + (_745 * _745)) / (_740 + 9.9999997473787516355514526367188e-06);
        float _3417 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
        float _772 = _771 * 2.0;
        float _776 = (1.0 - _771) / (_771 + 1.0);
        float _3428 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
        float _786 = ((((1.0 - _777) * (_772 + 2.0)) * exp2(log2(isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0))) * (_772 + 1.0))) + _777) * _740;
        float _787 = _708 * 0.5;
        float _788 = _718 * 0.5;
        float _789 = _728 * 0.5;
        float _790 = dot(vec3(_787, _788, _789), vec3(_787, _788, _789));
        float _795 = (_790 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_790);
        float _803 = (dot(vec3(_334, _335, _336), vec3(_795 * _787, _795 * _788, _795 * _789)) + 1.0) * 0.5;
        float _3439 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _812 = sqrt(((_788 * _788) + (_787 * _787)) + (_789 * _789)) / (_741 + 9.9999997473787516355514526367188e-06);
        float _3450 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
        float _814 = _813 * 2.0;
        float _818 = (1.0 - _813) / (_813 + 1.0);
        float _3461 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _828 = ((((1.0 - _819) * (_814 + 2.0)) * exp2(log2(isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0))) * (_814 + 1.0))) + _819) * _741;
        float _829 = _709 * 0.5;
        float _830 = _719 * 0.5;
        float _831 = _729 * 0.5;
        float _832 = dot(vec3(_829, _830, _831), vec3(_829, _830, _831));
        float _837 = (_832 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_832);
        float _845 = (dot(vec3(_334, _335, _336), vec3(_837 * _829, _837 * _830, _837 * _831)) + 1.0) * 0.5;
        float _3472 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _854 = sqrt(((_830 * _830) + (_829 * _829)) + (_831 * _831)) / (_742 + 9.9999997473787516355514526367188e-06);
        float _3483 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
        float _856 = _855 * 2.0;
        float _860 = (1.0 - _855) / (_855 + 1.0);
        float _3494 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _870 = ((((1.0 - _861) * (_856 + 2.0)) * exp2(log2(isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))) * (_856 + 1.0))) + _861) * _742;
        _878 = _709;
        _880 = _708;
        _881 = _707;
        _882 = _719;
        _883 = _718;
        _884 = _717;
        _885 = _729;
        _886 = _728;
        _887 = _727;
        _888 = _742;
        _889 = _741;
        _890 = _740;
        _891 = cbModelParam._m0[36u].z * (isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0)));
        _892 = cbModelParam._m0[36u].z * (isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0)));
        _893 = cbModelParam._m0[36u].z * (isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0)));
    }
    else
    {
        _878 = _879;
        _880 = _879;
        _881 = _879;
        _882 = _879;
        _883 = _879;
        _884 = _879;
        _885 = _879;
        _886 = _879;
        _887 = _879;
        _888 = _879;
        _889 = _879;
        _890 = _879;
        _891 = 0.0;
        _892 = 0.0;
        _893 = 0.0;
    }
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _919 = fma(_576, cbModelParam._m0[30u].z, fma(_572, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _568));
        float _923 = fma(_576, cbModelParam._m0[31u].z, fma(_572, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _568));
        float _927 = fma(_576, cbModelParam._m0[32u].z, fma(_572, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _568));
        float _950 = _568 + _334;
        float _951 = _572 + _335;
        float _952 = _576 + _336;
        float _962 = fma(_952, cbModelParam._m0[30u].z, fma(_951, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _950)) - _919;
        float _963 = fma(_952, cbModelParam._m0[31u].z, fma(_951, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _950)) - _923;
        float _964 = fma(_952, cbModelParam._m0[32u].z, fma(_951, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _950)) - _927;
        float _968 = inversesqrt(dot(vec3(_962, _963, _964), vec3(_962, _963, _964)));
        float _981 = ((_968 * _962) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_919 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _982 = ((_968 * _963) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_923 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _983 = ((_968 * _964) / cbModelParam._m0[35u].z) + ((((((_927 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        float _1018 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_985.x + (-0.5));
        float _1020 = _1018 * (_985.y + (-0.5));
        float _1021 = _1018 * (_985.z + (-0.5));
        float _1028 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_992.x + (-0.5));
        float _1030 = _1028 * (_992.y + (-0.5));
        float _1031 = _1028 * (_992.z + (-0.5));
        float _1038 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_999.x + (-0.5));
        float _1040 = _1038 * (_999.y + (-0.5));
        float _1041 = _1038 * (_999.z + (-0.5));
        float _1048 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1006.x + (-0.5));
        float _1050 = _1048 * (_1006.y + (-0.5));
        float _1051 = _1048 * (_1006.z + (-0.5));
        float _1052 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = _1019 * 0.5;
        float _1056 = _1029 * 0.5;
        float _1057 = _1039 * 0.5;
        float _1058 = dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057));
        float _1063 = (_1058 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1058);
        float _1071 = (dot(vec3(_334, _335, _336), vec3(_1063 * _1055, _1063 * _1056, _1063 * _1057)) + 1.0) * 0.5;
        float _3535 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1080 = sqrt(((_1056 * _1056) + (_1055 * _1055)) + (_1057 * _1057)) / (_1052 + 9.9999997473787516355514526367188e-06);
        float _3546 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _1082 = _1081 * 2.0;
        float _1086 = (1.0 - _1081) / (_1081 + 1.0);
        float _3557 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _1096 = ((((1.0 - _1087) * (_1082 + 2.0)) * exp2(log2(isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * (_1082 + 1.0))) + _1087) * _1052;
        float _1097 = _1020 * 0.5;
        float _1098 = _1030 * 0.5;
        float _1099 = _1040 * 0.5;
        float _1100 = dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099));
        float _1105 = (_1100 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1100);
        float _1113 = (dot(vec3(_334, _335, _336), vec3(_1105 * _1097, _1105 * _1098, _1105 * _1099)) + 1.0) * 0.5;
        float _3568 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1122 = sqrt(((_1098 * _1098) + (_1097 * _1097)) + (_1099 * _1099)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _3579 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _1124 = _1123 * 2.0;
        float _1128 = (1.0 - _1123) / (_1123 + 1.0);
        float _3590 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _1138 = ((((1.0 - _1129) * (_1124 + 2.0)) * exp2(log2(isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * (_1124 + 1.0))) + _1129) * _1053;
        float _1139 = _1021 * 0.5;
        float _1140 = _1031 * 0.5;
        float _1141 = _1041 * 0.5;
        float _1142 = dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141));
        float _1147 = (_1142 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1142);
        float _1155 = (dot(vec3(_334, _335, _336), vec3(_1147 * _1139, _1147 * _1140, _1147 * _1141)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1164 = sqrt(((_1140 * _1140) + (_1139 * _1139)) + (_1141 * _1141)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _3623 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_1166 + 1.0))) + _1171) * _1054;
        _1188 = _1021;
        _1189 = _1020;
        _1190 = _1019;
        _1191 = _1031;
        _1192 = _1030;
        _1193 = _1029;
        _1194 = _1041;
        _1195 = _1040;
        _1196 = _1039;
        _1197 = _1054;
        _1198 = _1053;
        _1199 = _1052;
        _1200 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0)));
        _1201 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)));
        _1202 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
    }
    else
    {
        _1188 = _879;
        _1189 = _879;
        _1190 = _879;
        _1191 = _879;
        _1192 = _879;
        _1193 = _879;
        _1194 = _879;
        _1195 = _879;
        _1196 = _879;
        _1197 = _879;
        _1198 = _879;
        _1199 = _879;
        _1200 = 0.0;
        _1201 = 0.0;
        _1202 = 0.0;
    }
    float _1212 = (cbModelParam._m0[1u].x * (_1200 - _891)) + _891;
    float _1213 = (cbModelParam._m0[1u].x * (_1201 - _892)) + _892;
    float _1214 = (cbModelParam._m0[1u].x * (_1202 - _893)) + _893;
    float _1235 = fma(_1214, cbSceneParam._m0[89u].z, fma(_1213, cbSceneParam._m0[89u].y, _1212 * cbSceneParam._m0[89u].x));
    float _1238 = fma(_1214, cbSceneParam._m0[90u].z, fma(_1213, cbSceneParam._m0[90u].y, _1212 * cbSceneParam._m0[90u].x));
    float _1241 = fma(_1214, cbSceneParam._m0[91u].z, fma(_1213, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1212));
    float _1256 = _512 * 0.5;
    float _1257 = _513 * 0.5;
    float _1258 = _514 * 0.5;
    float _1259 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_1190, _1193, _1196, _1199));
    float _1262 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_1189, _1192, _1195, _1198));
    float _1265 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_1188, _1191, _1194, _1197));
    float _1299;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1272 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_878, _882, _885, _888));
        float _1276 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_880, _883, _886, _889));
        float _1280 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_881, _884, _887, _890));
        float _1287 = dot(vec4(cbModelParam._m0[39u]), vec4(_1256, _1257, _1258, 1.0));
        _1299 = dot(vec3(isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)), isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)), isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1287) ? 0.0 : (isnan(0.0) ? _1287 : max(0.0, _1287))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1299 = 1.0;
    }
    float _1310;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1301 = dot(vec4(cbModelParam._m0[40u]), vec4(_1256, _1257, _1258, 1.0));
        _1310 = dot(vec3(isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)), isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)), isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1301) ? 0.0 : (isnan(0.0) ? _1301 : max(0.0, _1301))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1310 = 1.0;
    }
    float _1314 = (_1310 * cbModelParam._m0[1u].x) + (_1299 * (1.0 - cbModelParam._m0[1u].x));
    float _1324 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _337);
    float _1325 = isnan(_1324) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1324 : min(cbModelParam._m0[25u].z, _1324));
    float _1406;
    float _1408;
    float _1410;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1373 = fma(_576, cbModelParam._m0[13u].z, fma(_572, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _568)) + cbModelParam._m0[13u].w;
        float _1377 = fma(_576, cbModelParam._m0[14u].z, fma(_572, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _568)) + cbModelParam._m0[14u].w;
        float _1381 = fma(_576, cbModelParam._m0[15u].z, fma(_572, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _568)) + cbModelParam._m0[15u].w;
        float _1384 = fma(_514, cbModelParam._m0[13u].z, fma(_513, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _512));
        float _1387 = fma(_514, cbModelParam._m0[14u].z, fma(_513, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _512));
        float _1390 = fma(_514, cbModelParam._m0[15u].z, fma(_513, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _512));
        float _1418;
        if (_1384 > 0.0)
        {
            _1418 = abs((1.0 - _1373) / _1384);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1384 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1373 + 1.0) / _1384);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1418 = frontier_phi_14_12_ladder;
        }
        float _1645;
        if (_1387 > 0.0)
        {
            _1645 = abs((1.0 - _1377) / _1387);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1387 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1377 + 1.0) / _1387);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1645 = frontier_phi_23_19_ladder;
        }
        float _1902;
        if (_1390 > 0.0)
        {
            _1902 = abs((1.0 - _1381) / _1390);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1390 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1381 + 1.0) / _1390);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1902 = frontier_phi_35_30_ladder;
        }
        float _1904 = isnan(_1645) ? _1418 : (isnan(_1418) ? _1645 : min(_1418, _1645));
        float _1905 = isnan(_1902) ? _1904 : (isnan(_1904) ? _1902 : min(_1904, _1902));
        float _1909 = (_1905 * _1384) + _1373;
        float _1910 = (_1905 * _1387) + _1377;
        float _1911 = (_1905 * _1390) + _1381;
        float _1912 = _1905 * 9.9999997473787516355514526367188e-05;
        float _1914 = (-1.0) - _1912;
        float _1916 = _1912 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1911 > _1916) || ((_1911 < _1914) || ((_1910 > _1916) || ((_1910 < _1914) || ((_1909 < _1914) || (_1909 > _1916))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2039 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1911, cbModelParam._m0[9u].z, fma(_1910, cbModelParam._m0[9u].y, _1909 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1911, cbModelParam._m0[10u].z, fma(_1910, cbModelParam._m0[10u].y, _1909 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1911, cbModelParam._m0[11u].z, fma(_1910, cbModelParam._m0[11u].y, _1909 * cbModelParam._m0[11u].x))), _1325);
            frontier_phi_13_35_ladder = _2039.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2039.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2039.x * cbModelParam._m0[1u].y;
        }
        _1406 = frontier_phi_13_35_ladder_2;
        _1408 = frontier_phi_13_35_ladder_1;
        _1410 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1394 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_512, _513, _514), _1325);
        _1406 = _1394.x * cbModelParam._m0[1u].y;
        _1408 = _1394.y * cbModelParam._m0[1u].y;
        _1410 = _1394.z * cbModelParam._m0[1u].y;
    }
    float _1414 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _337);
    float _1415 = isnan(_1414) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1414 : min(cbModelParam._m0[25u].w, _1414));
    float _1507;
    float _1509;
    float _1511;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1471 = fma(_576, cbModelParam._m0[21u].z, fma(_572, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _568)) + cbModelParam._m0[21u].w;
        float _1475 = fma(_576, cbModelParam._m0[22u].z, fma(_572, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _568)) + cbModelParam._m0[22u].w;
        float _1479 = fma(_576, cbModelParam._m0[23u].z, fma(_572, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _568)) + cbModelParam._m0[23u].w;
        float _1482 = fma(_514, cbModelParam._m0[21u].z, fma(_513, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _512));
        float _1485 = fma(_514, cbModelParam._m0[22u].z, fma(_513, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _512));
        float _1488 = fma(_514, cbModelParam._m0[23u].z, fma(_513, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _512));
        float _1650;
        if (_1482 > 0.0)
        {
            _1650 = abs((1.0 - _1471) / _1482);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1471 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1650 = frontier_phi_25_21_ladder;
        }
        float _1929;
        if (_1485 > 0.0)
        {
            _1929 = abs((1.0 - _1475) / _1485);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1475 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1929 = frontier_phi_37_32_ladder;
        }
        float _2142;
        if (_1488 > 0.0)
        {
            _2142 = abs((1.0 - _1479) / _1488);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1479 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2142 = frontier_phi_46_43_ladder;
        }
        float _2144 = isnan(_1929) ? _1650 : (isnan(_1650) ? _1929 : min(_1650, _1929));
        float _2145 = isnan(_2142) ? _2144 : (isnan(_2144) ? _2142 : min(_2144, _2142));
        float _2149 = (_2145 * _1482) + _1471;
        float _2150 = (_2145 * _1485) + _1475;
        float _2151 = (_2145 * _1488) + _1479;
        float _2152 = _2145 * 9.9999997473787516355514526367188e-05;
        float _2153 = (-1.0) - _2152;
        float _2155 = _2152 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2151 > _2155) || ((_2151 < _2153) || ((_2150 > _2155) || ((_2150 < _2153) || ((_2149 < _2153) || (_2149 > _2155))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2385 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2151, cbModelParam._m0[17u].z, fma(_2150, cbModelParam._m0[17u].y, _2149 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2151, cbModelParam._m0[18u].z, fma(_2150, cbModelParam._m0[18u].y, _2149 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2151, cbModelParam._m0[19u].z, fma(_2150, cbModelParam._m0[19u].y, _2149 * cbModelParam._m0[19u].x))), _1415);
            frontier_phi_22_46_ladder = _2385.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2385.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2385.x * cbModelParam._m0[1u].z;
        }
        _1507 = frontier_phi_22_46_ladder_2;
        _1509 = frontier_phi_22_46_ladder_1;
        _1511 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1491 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_512, _513, _514), _1415);
        _1507 = _1491.x * cbModelParam._m0[1u].z;
        _1509 = _1491.y * cbModelParam._m0[1u].z;
        _1511 = _1491.z * cbModelParam._m0[1u].z;
    }
    float _1524 = (((_539 * _489) + _540) * _504) * ((cbModelParam._m0[1u].w * (_1507 - _1406)) + _1406);
    float _1526 = (((_539 * _491) + _540) * _504) * ((cbModelParam._m0[1u].w * (_1509 - _1408)) + _1408);
    float _1528 = (((_539 * _492) + _540) * _504) * ((cbModelParam._m0[1u].w * (_1511 - _1410)) + _1410);
    float _1531 = fma(_1528, cbSceneParam._m0[89u].z, fma(_1526, cbSceneParam._m0[89u].y, _1524 * cbSceneParam._m0[89u].x));
    float _1534 = fma(_1528, cbSceneParam._m0[90u].z, fma(_1526, cbSceneParam._m0[90u].y, _1524 * cbSceneParam._m0[90u].x));
    float _1537 = fma(_1528, cbSceneParam._m0[91u].z, fma(_1526, cbSceneParam._m0[91u].y, _1524 * cbSceneParam._m0[91u].x));
    vec4 _1545 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_423, _424));
    float _1547 = _1545.w;
    float _1559 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1547);
    float _1560 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1547);
    float _1561 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1547);
    uvec4 _1565 = floatBitsToUint(cbInstanceData._m0[_464 + 5u]);
    uint _1567 = _1565.x * 14u;
    uint _1568 = _1567 + 13u;
    float _1575 = _504 + (-1.0);
    float _1580 = (cbLight._m0[_1568].x * _1575) + 1.0;
    float _1581 = (cbLight._m0[_1568].y * _1575) + 1.0;
    float _1582 = (cbLight._m0[_1568].z * _1575) + 1.0;
    float _1583 = (cbLight._m0[_1568].w * _1575) + 1.0;
    uint _1584 = _1567 + 5u;
    float _1590 = isnan(1.0) ? _1581 : (isnan(_1581) ? 1.0 : min(_1581, 1.0));
    uint _1594 = _1567 + 4u;
    float _1604 = isnan(1.0) ? _1580 : (isnan(_1580) ? 1.0 : min(_1580, 1.0));
    uint _1608 = _1567 | 1u;
    float _1619 = dot(vec3(cbLight._m0[_1567].xyz), vec3(_334, _335, _336));
    float _1622 = dot(vec3(cbLight._m0[_1608].xyz), vec3(_334, _335, _336));
    float _3759 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
    float _3770 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
    float _1627 = (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * 0.3183098733425140380859375;
    float _1629 = (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * 0.3183098733425140380859375;
    float _1636 = ((cbLight._m0[_1584].x * _1590) * _1629) + (((cbLight._m0[_1594].x * _1559) * _1604) * _1627);
    float _1637 = ((_1590 * cbLight._m0[_1584].y) * _1629) + (((cbLight._m0[_1594].y * _1560) * _1604) * _1627);
    float _1638 = ((_1590 * cbLight._m0[_1584].z) * _1629) + (((cbLight._m0[_1594].z * _1561) * _1604) * _1627);
    uvec4 _1642 = floatBitsToUint(cbLight._m0[_1567 + 12u]);
    bool _1644 = _1642.x == 0u;
    float _1655;
    float _1657;
    float _1659;
    if (_1644)
    {
        _1655 = _1636;
        _1657 = _1637;
        _1659 = _1638;
    }
    else
    {
        uint _1663 = _1567 + 6u;
        float _1679 = (dot(vec3(cbLight._m0[_1567 + 2u].xyz), vec3(_334, _335, _336)) * 0.5) + 0.5;
        float _1680 = _1679 * _1679;
        float _3781 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1682 = isnan(1.0) ? _1582 : (isnan(_1582) ? 1.0 : min(_1582, 1.0));
        _1655 = (((cbLight._m0[_1663].x * 0.3183098733425140380859375) * _1681) * _1682) + _1636;
        _1657 = (((cbLight._m0[_1663].y * 0.3183098733425140380859375) * _1681) * _1682) + _1637;
        _1659 = (((cbLight._m0[_1663].z * 0.3183098733425140380859375) * _1681) * _1682) + _1638;
    }
    bool _1662 = _1642.y == 0u;
    float _1700;
    float _1702;
    float _1704;
    if (_1662)
    {
        _1700 = _1655;
        _1702 = _1657;
        _1704 = _1659;
    }
    else
    {
        uint _1873 = _1567 + 7u;
        float _1889 = (dot(vec3(cbLight._m0[_1567 + 3u].xyz), vec3(_334, _335, _336)) * 0.5) + 0.5;
        float _1890 = _1889 * _1889;
        float _3797 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        float _1891 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1892 = isnan(1.0) ? _1583 : (isnan(_1583) ? 1.0 : min(_1583, 1.0));
        _1700 = (((cbLight._m0[_1873].x * 0.3183098733425140380859375) * _1891) * _1892) + _1655;
        _1702 = (((cbLight._m0[_1873].y * 0.3183098733425140380859375) * _1891) * _1892) + _1657;
        _1704 = (((cbLight._m0[_1873].z * 0.3183098733425140380859375) * _1891) * _1892) + _1659;
    }
    uint _1707 = _1567 + 8u;
    float _1720 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1567].w)) * _337) * 0.949999988079071044921875);
    float _1721 = _1720 * _1720;
    float _1722 = cbLight._m0[_1567].x + _415;
    float _1723 = cbLight._m0[_1567].y + _416;
    float _1724 = cbLight._m0[_1567].z + _417;
    float _1728 = inversesqrt(dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724)));
    float _1729 = _1728 * _1722;
    float _1730 = _1728 * _1723;
    float _1731 = _1728 * _1724;
    float _1732 = dot(vec3(_334, _335, _336), vec3(cbLight._m0[_1567].xyz));
    float _3813 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1735 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _3824 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _1736 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _1737 = dot(vec3(_334, _335, _336), vec3(_1729, _1730, _1731));
    float _3835 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _1740 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _1741 = dot(vec3(cbLight._m0[_1567].xyz), vec3(_1729, _1730, _1731));
    float _3846 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _1745 = _1721 * _1721;
    float _1749 = ((_1740 * _1740) * (_1745 + (-1.0))) + 1.0;
    float _1757 = exp2(log2(1.0 - (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)))) * 5.0);
    float _1758 = 0.959999978542327880859375 - _486;
    float _1760 = 0.959999978542327880859375 - _487;
    float _1761 = 0.959999978542327880859375 - _488;
    float _1768 = 1.0 - _1721;
    float _1779 = (0.5 / (((_1736 * ((_1735 * _1768) + _1721)) + 9.9999999392252902907785028219223e-09) + (((_1736 * _1768) + _1721) * _1735))) * _1735;
    float _3857 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _1781 = (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1745 / ((_1749 * _1749) * 3.141590118408203125));
    uint _1795 = _1567 + 9u;
    float _1806 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1608].w)) * _337) * 0.949999988079071044921875);
    float _1807 = _1806 * _1806;
    float _1808 = cbLight._m0[_1608].x + _415;
    float _1809 = cbLight._m0[_1608].y + _416;
    float _1810 = cbLight._m0[_1608].z + _417;
    float _1814 = inversesqrt(dot(vec3(_1808, _1809, _1810), vec3(_1808, _1809, _1810)));
    float _1815 = _1814 * _1808;
    float _1816 = _1814 * _1809;
    float _1817 = _1814 * _1810;
    float _1818 = dot(vec3(_334, _335, _336), vec3(cbLight._m0[_1608].xyz));
    float _3868 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1821 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _1822 = dot(vec3(_334, _335, _336), vec3(_1815, _1816, _1817));
    float _3879 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1825 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _1826 = dot(vec3(cbLight._m0[_1608].xyz), vec3(_1815, _1816, _1817));
    float _3890 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1830 = _1807 * _1807;
    float _1834 = ((_1825 * _1825) * (_1830 + (-1.0))) + 1.0;
    float _1841 = exp2(log2(1.0 - (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) * 5.0);
    float _1848 = 1.0 - _1807;
    float _1858 = (0.5 / (((_1736 * ((_1821 * _1848) + _1807)) + 9.9999999392252902907785028219223e-09) + (((_1736 * _1848) + _1807) * _1821))) * _1821;
    float _3901 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1860 = (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1830 / ((_1834 * _1834) * 3.141590118408203125));
    float _1870 = (((((_1841 * _1758) + _489) * cbLight._m0[_1795].x) * _1860) * _1590) + ((((cbLight._m0[_1707].x * _1559) * ((_1757 * _1758) + _489)) * _1781) * _1604);
    float _1871 = (((((_1841 * _1760) + _491) * cbLight._m0[_1795].y) * _1860) * _1590) + ((((cbLight._m0[_1707].y * _1560) * ((_1757 * _1760) + _491)) * _1781) * _1604);
    float _1872 = (((((_1841 * _1761) + _492) * cbLight._m0[_1795].z) * _1860) * _1590) + ((((cbLight._m0[_1707].z * _1561) * ((_1757 * _1761) + _492)) * _1781) * _1604);
    float _1934;
    float _1936;
    float _1938;
    if (_1644)
    {
        _1934 = _1870;
        _1936 = _1871;
        _1938 = _1872;
    }
    else
    {
        uint _1940 = _1567 + 2u;
        uint _1944 = _1567 + 10u;
        float _1958 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1940].w)) * _337) * 0.949999988079071044921875);
        float _1959 = _1958 * _1958;
        float _1960 = cbLight._m0[_1940].x + _415;
        float _1961 = cbLight._m0[_1940].y + _416;
        float _1962 = cbLight._m0[_1940].z + _417;
        float _1966 = inversesqrt(dot(vec3(_1960, _1961, _1962), vec3(_1960, _1961, _1962)));
        float _1967 = _1966 * _1960;
        float _1968 = _1966 * _1961;
        float _1969 = _1966 * _1962;
        float _1970 = dot(vec3(_334, _335, _336), vec3(cbLight._m0[_1940].xyz));
        float _3912 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1973 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1974 = dot(vec3(_334, _335, _336), vec3(_1967, _1968, _1969));
        float _3923 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1977 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1978 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_1967, _1968, _1969));
        float _3934 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1982 = _1959 * _1959;
        float _1986 = ((_1977 * _1977) * (_1982 + (-1.0))) + 1.0;
        float _1993 = exp2(log2(1.0 - (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) * 5.0);
        float _2000 = 1.0 - _1959;
        float _2010 = (0.5 / (((_1736 * ((_1973 * _2000) + _1959)) + 9.9999999392252902907785028219223e-09) + (((_1736 * _2000) + _1959) * _1973))) * _1973;
        float _3945 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2012 = (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1982 / ((_1986 * _1986) * 3.141590118408203125));
        float _2013 = isnan(1.0) ? _1582 : (isnan(_1582) ? 1.0 : min(_1582, 1.0));
        _1934 = (((((_1993 * _1758) + _489) * cbLight._m0[_1944].x) * _2012) * _2013) + _1870;
        _1936 = (((((_1993 * _1760) + _491) * cbLight._m0[_1944].y) * _2012) * _2013) + _1871;
        _1938 = (((((_1993 * _1761) + _492) * cbLight._m0[_1944].z) * _2012) * _2013) + _1872;
    }
    float _2048;
    float _2050;
    float _2052;
    if (_1662)
    {
        _2048 = _1934;
        _2050 = _1936;
        _2052 = _1938;
    }
    else
    {
        uint _2059 = _1567 + 3u;
        uint _2063 = _1567 + 11u;
        float _2077 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2059].w)) * _337) * 0.949999988079071044921875);
        float _2078 = _2077 * _2077;
        float _2079 = cbLight._m0[_2059].x + _415;
        float _2080 = cbLight._m0[_2059].y + _416;
        float _2081 = cbLight._m0[_2059].z + _417;
        float _2085 = inversesqrt(dot(vec3(_2079, _2080, _2081), vec3(_2079, _2080, _2081)));
        float _2086 = _2085 * _2079;
        float _2087 = _2085 * _2080;
        float _2088 = _2085 * _2081;
        float _2089 = dot(vec3(_334, _335, _336), vec3(cbLight._m0[_2059].xyz));
        float _3961 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2092 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _2093 = dot(vec3(_334, _335, _336), vec3(_2086, _2087, _2088));
        float _3972 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2096 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _2097 = dot(vec3(cbLight._m0[_2059].xyz), vec3(_2086, _2087, _2088));
        float _3983 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2101 = _2078 * _2078;
        float _2105 = ((_2096 * _2096) * (_2101 + (-1.0))) + 1.0;
        float _2112 = exp2(log2(1.0 - (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0)))) * 5.0);
        float _2119 = 1.0 - _2078;
        float _2129 = (0.5 / (((_1736 * ((_2092 * _2119) + _2078)) + 9.9999999392252902907785028219223e-09) + (((_1736 * _2119) + _2078) * _2092))) * _2092;
        float _3994 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2131 = (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_2101 / ((_2105 * _2105) * 3.141590118408203125));
        float _2132 = isnan(1.0) ? _1583 : (isnan(_1583) ? 1.0 : min(_1583, 1.0));
        _2048 = (((((_2112 * _1758) + _489) * cbLight._m0[_2063].x) * _2131) * _2132) + _1934;
        _2050 = (((((_2112 * _1760) + _491) * cbLight._m0[_2063].y) * _2131) * _2132) + _1936;
        _2052 = (((((_2112 * _1761) + _492) * cbLight._m0[_2063].z) * _2131) * _2132) + _1938;
    }
    float _2267;
    float _2269;
    float _2271;
    float _2273;
    float _2275;
    float _2277;
    if (_1565.y == 0u)
    {
        float _2207 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2208 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2207;
        float _2209 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2207;
        float _2210 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2207;
        uvec4 _2222 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2223 = _2222.x;
        uint _2234 = uint((float(_2222.y) * floor(float(uint(cbSceneParam._m0[85u].y * _424) / _2223))) + floor(float(uint(cbSceneParam._m0[85u].x * _423) / _2223)));
        float _2244 = (log2(_2210 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2245 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        uint _2248 = uint(isnan(14.0) ? _2245 : (isnan(_2245) ? 14.0 : min(_2245, 14.0)));
        uvec4 _2253 = texelFetch(g_lightClusterGridBuffer, int(((_2248 << 2u) + (_2234 << 6u)) >> 2u));
        uint _2254 = _2253.x;
        uint _2255 = _2222.z;
        float _2390;
        float _2392;
        float _2394;
        float _2396;
        float _2398;
        float _2400;
        if (((((1u << ((_2255 >> 4u) & 15u)) + 4294967295u) & _2254) == 0u) || ((_2255 & 240u) == 0u))
        {
            _2390 = 0.0;
            _2392 = 0.0;
            _2394 = 0.0;
            _2396 = 0.0;
            _2398 = 0.0;
            _2400 = 0.0;
        }
        else
        {
            float _2391;
            float _2393;
            float _2395;
            float _2397;
            float _2399;
            float _2401;
            float _2544 = 0.0;
            float _2545 = 0.0;
            float _2546 = 0.0;
            float _2547 = 0.0;
            float _2548 = 0.0;
            float _2549 = 0.0;
            uint _2550 = 0u;
            uint _2559;
            bool _2560;
            for (;;)
            {
                _2559 = texelFetch(g_lightClassification, int((((_2248 << 5u) + (_2234 << 9u)) + (_2550 << 2u)) >> 2u)).x;
                _2560 = _2559 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2560)
                {
                    frontier_phi_61_pred = _2544;
                    frontier_phi_61_pred_1 = _2549;
                    frontier_phi_61_pred_2 = _2548;
                    frontier_phi_61_pred_3 = _2547;
                    frontier_phi_61_pred_4 = _2546;
                    frontier_phi_61_pred_5 = _2545;
                }
                else
                {
                    float _2668;
                    float _2669;
                    float _2670;
                    float _2671;
                    float _2672;
                    float _2673;
                    uint _2674;
                    _2668 = _2544;
                    _2669 = _2545;
                    _2670 = _2546;
                    _2671 = _2547;
                    _2672 = _2548;
                    _2673 = _2549;
                    _2674 = _2559;
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    for (;;)
                    {
                        uint _2678 = uint(findLSB(_2674)) + (_2550 << 5u);
                        uint _2675 = (_2674 + 4294967295u) & _2674;
                        uint _2680 = _2678 * 48u;
                        vec4 _2694 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2680)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 3u)).x));
                        uint _2700 = (_2678 * 48u) + 4u;
                        vec4 _2713 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2700)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 3u)).x));
                        uint _2719 = (_2678 * 48u) + 8u;
                        vec3 _2730 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2719)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 2u)).x));
                        float _2734 = _2694.x - _2208;
                        float _2735 = _2694.y - _2209;
                        float _2736 = _2694.z - _2210;
                        float _2737 = dot(vec3(_2734, _2735, _2736), vec3(_2734, _2735, _2736));
                        float _2740 = inversesqrt(_2737);
                        float _2741 = _2740 * _2734;
                        float _2742 = _2740 * _2735;
                        float _2743 = _2740 * _2736;
                        float _2744 = dot(vec3(_445, _448, _451), vec3(_2741, _2742, _2743));
                        float _2749 = 1.0 - (_2737 * _2694.w);
                        float _4020 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
                        float _2750 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                        float _2751 = sqrt(_2737) * _2713.w;
                        float _2754 = 1.39999997615814208984375 / (_2751 + 1.39999997615814208984375);
                        float _2755 = _2754 * _2754;
                        float _2758 = ((1.0 - _2755) * _2744) + _2755;
                        float _2761 = _2751 * _2751;
                        float _2765 = ((isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0))) * _2750) / ((_2761 * 0.699999988079071044921875) + 1.0);
                        float _2769 = (-0.0) - _2208;
                        float _2770 = (-0.0) - _2209;
                        float _2771 = (-0.0) - _2210;
                        float _2775 = inversesqrt(dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771)));
                        float _2776 = _2775 * _2769;
                        float _2777 = _2775 * _2770;
                        float _2778 = _2775 * _2771;
                        float _2786 = exp2(log2(1.0 / ((_2761 * 3.5) + 5.0)) * 0.25);
                        float _2787 = 1.0 - _520;
                        float _2794 = sqrt(1.0 - ((1.0 - (_2787 * _2787)) * (1.0 - (_2786 * _2786))));
                        float _2795 = _2794 * _2794;
                        float _2796 = _2795 * _2795;
                        float _2797 = _2776 + _2741;
                        float _2798 = _2777 + _2742;
                        float _2799 = _2778 + _2743;
                        float _2803 = inversesqrt(dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799)));
                        float _2807 = dot(vec3(_445, _448, _451), vec3(_2776, _2777, _2778));
                        float _4036 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
                        float _2810 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
                        float _2811 = dot(vec3(_445, _448, _451), vec3(_2803 * _2797, _2803 * _2798, _2803 * _2799));
                        float _4047 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                        float _2814 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
                        float _2818 = ((_2814 * _2814) * (_2796 + (-1.0))) + 1.0;
                        float _2819 = _2754 * _2795;
                        float _2820 = _2819 * _2819;
                        float _2823 = ((1.0 - _2820) * _2744) + _2820;
                        float _4058 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
                        float _2824 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
                        float _2825 = 1.0 - _2795;
                        float _2835 = (0.5 / (((_2824 * ((_2810 * _2825) + _2795)) + 9.9999999392252902907785028219223e-09) + (((_2824 * _2825) + _2795) * _2810))) * _2824;
                        float _4069 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
                        float _2846 = (((_2796 * 3.1415927410125732421875) * (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) / ((_2818 * _2818) * ((_2761 * 2.1991131305694580078125) + 3.141590118408203125))) * _2750;
                        _2603 = (_2765 * _2713.x) + _2671;
                        _2604 = (_2765 * _2713.y) + _2672;
                        _2605 = (_2765 * _2713.z) + _2673;
                        _2600 = (_2846 * _2730.x) + _2668;
                        _2601 = (_2846 * _2730.y) + _2669;
                        _2602 = (_2846 * _2730.z) + _2670;
                        if (_2675 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2668 = _2600;
                            _2669 = _2601;
                            _2670 = _2602;
                            _2671 = _2603;
                            _2672 = _2604;
                            _2673 = _2605;
                            _2674 = _2675;
                        }
                    }
                    frontier_phi_61_pred = _2600;
                    frontier_phi_61_pred_1 = _2605;
                    frontier_phi_61_pred_2 = _2604;
                    frontier_phi_61_pred_3 = _2603;
                    frontier_phi_61_pred_4 = _2602;
                    frontier_phi_61_pred_5 = _2601;
                }
                _2391 = frontier_phi_61_pred;
                _2401 = frontier_phi_61_pred_1;
                _2399 = frontier_phi_61_pred_2;
                _2397 = frontier_phi_61_pred_3;
                _2395 = frontier_phi_61_pred_4;
                _2393 = frontier_phi_61_pred_5;
                uint _2551 = _2550 + 1u;
                if (_2551 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2544 = _2391;
                    _2545 = _2393;
                    _2546 = _2395;
                    _2547 = _2397;
                    _2548 = _2399;
                    _2549 = _2401;
                    _2550 = _2551;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2390 = _2391;
            _2392 = _2393;
            _2394 = _2395;
            _2396 = _2397;
            _2398 = _2399;
            _2400 = _2401;
        }
        uvec4 _2404 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2405 = _2404.z;
        uint _2407 = (_2405 >> 8u) & 15u;
        float _2512;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        if (((4294967295u << _2407) & _2254) == 0u)
        {
            _2512 = _2390;
            _2514 = _2392;
            _2516 = _2394;
            _2518 = _2396;
            _2520 = _2398;
            _2522 = _2400;
        }
        else
        {
            float _2537 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
            float _2538 = _2537 * _2208;
            float _2539 = _2537 * _2209;
            float _2540 = _2537 * _2210;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2407 < ((_2405 >> 12u) & 15u))
            {
                float _2513;
                float _2515;
                float _2517;
                float _2519;
                float _2521;
                float _2523;
                float _2651 = _2390;
                float _2652 = _2392;
                float _2653 = _2394;
                float _2654 = _2396;
                float _2655 = _2398;
                float _2656 = _2400;
                uint _2657 = _2407;
                uint _2666;
                bool _2667;
                for (;;)
                {
                    _2666 = texelFetch(g_lightClassification, int((((_2248 << 5u) + (_2234 << 9u)) + (_2657 << 2u)) >> 2u)).x;
                    _2667 = _2666 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2667)
                    {
                        frontier_phi_67_pred = _2654;
                        frontier_phi_67_pred_1 = _2655;
                        frontier_phi_67_pred_2 = _2656;
                        frontier_phi_67_pred_3 = _2653;
                        frontier_phi_67_pred_4 = _2652;
                        frontier_phi_67_pred_5 = _2651;
                    }
                    else
                    {
                        float _2851;
                        float _2852;
                        float _2853;
                        float _2854;
                        float _2855;
                        float _2856;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _2864 = _2651;
                        float _2865 = _2652;
                        float _2866 = _2653;
                        float _2867 = _2654;
                        float _2868 = _2655;
                        float _2869 = _2656;
                        uint _2870 = _2666;
                        uint _2871;
                        vec4 _2896;
                        float _2897;
                        vec4 _2912;
                        vec3 _2924;
                        vec4 _2940;
                        vec4 _2956;
                        float _3003;
                        bool _3004;
                        for (;;)
                        {
                            uint _2881 = ((_2657 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2870));
                            _2871 = (_2870 + 4294967295u) & _2870;
                            uint _2883 = _2881 * 40u;
                            _2896 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 3u)).x));
                            _2897 = _2896.w;
                            uint _2899 = (_2881 * 40u) + 4u;
                            _2912 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2899)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 3u)).x));
                            uint _2914 = (_2881 * 40u) + 8u;
                            _2924 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x));
                            uint _2927 = (_2881 * 40u) + 16u;
                            _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            uint _2943 = (_2881 * 40u) + 20u;
                            _2956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 3u)).x));
                            uint _2959 = (_2881 * 40u) + 24u;
                            vec4 _2972 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 3u)).x));
                            uint _2978 = (_2881 * 40u) + 28u;
                            vec4 _2991 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 3u)).x));
                            _3003 = fma(_2210, _2991.z, fma(_2209, _2991.y, _2991.x * _2208)) + _2991.w;
                            _3004 = !((fma(_2210, _2972.z, fma(_2209, _2972.y, _2972.x * _2208)) + _2972.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3004)
                            {
                                float _3031 = _2896.x - _2208;
                                float _3032 = _2896.y - _2209;
                                float _3033 = _2896.z - _2210;
                                float _3034 = dot(vec3(_3031, _3032, _3033), vec3(_3031, _3032, _3033));
                                float _3037 = inversesqrt(_3034);
                                float _3038 = _3037 * _3031;
                                float _3039 = _3037 * _3032;
                                float _3040 = _3037 * _3033;
                                float _3044 = 1.0 - (_3034 / (_2897 * _2897));
                                float _4080 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                                float _3045 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                                float _3049 = sqrt(_3034) * _2912.w;
                                float _3051 = 1.39999997615814208984375 / (_3049 + 1.39999997615814208984375);
                                float _3052 = _3051 * _3051;
                                float _3055 = ((1.0 - _3052) * dot(vec3(_3038, _3039, _3040), vec3(_445, _448, _451))) + _3052;
                                float _3058 = _3049 * _3049;
                                float _3062 = (fma(_2210, _2940.z, fma(_2209, _2940.y, _2940.x * _2208)) + _2940.w) / _3003;
                                float _3063 = (fma(_2210, _2956.z, fma(_2209, _2956.y, _2956.x * _2208)) + _2956.w) / _3003;
                                float _3067 = 1.0 - dot(vec2(_3062, _3063), vec2(_3062, _3063));
                                float _4096 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                                float _3068 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                                float _3069 = _3068 * (((isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0))) * _3045) / ((_3058 * 0.699999988079071044921875) + 1.0));
                                float _3081 = exp2(log2(1.0 / ((_3058 * 3.5) + 5.0)) * 0.25);
                                float _3082 = 1.0 - _520;
                                float _3089 = sqrt(1.0 - ((1.0 - (_3082 * _3082)) * (1.0 - (_3081 * _3081))));
                                float _3090 = _3089 * _3089;
                                float _3091 = _3090 * _3090;
                                float _3092 = _3038 - _2538;
                                float _3093 = _3039 - _2539;
                                float _3094 = _3040 - _2540;
                                float _3098 = inversesqrt(dot(vec3(_3092, _3093, _3094), vec3(_3092, _3093, _3094)));
                                float _3102 = dot(vec3(_445, _448, _451), vec3((-0.0) - _2538, (-0.0) - _2539, (-0.0) - _2540));
                                float _4107 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                                float _3105 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                                float _3106 = dot(vec3(_445, _448, _451), vec3(_3098 * _3092, _3098 * _3093, _3098 * _3094));
                                float _4118 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3109 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                                float _3113 = ((_3109 * _3109) * (_3091 + (-1.0))) + 1.0;
                                float _3114 = _3051 * _3090;
                                float _3115 = _3114 * _3114;
                                float _3121 = ((1.0 - _3115) * dot(vec3(_445, _448, _451), vec3(_3038, _3039, _3040))) + _3115;
                                float _4129 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                                float _3122 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                                float _3123 = 1.0 - _3090;
                                float _3133 = (0.5 / (((_3122 * ((_3105 * _3123) + _3090)) + 9.9999999392252902907785028219223e-09) + (((_3122 * _3123) + _3090) * _3105))) * _3122;
                                float _4140 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                                float _3143 = (_3068 * _3045) * (((_3091 * 3.1415927410125732421875) * (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) / ((_3113 * _3113) * ((_3058 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3143 * _2924.x;
                                frontier_phi_73_pred_1 = _3143 * _2924.y;
                                frontier_phi_73_pred_2 = _3069 * _2912.z;
                                frontier_phi_73_pred_3 = _3069 * _2912.y;
                                frontier_phi_73_pred_4 = _3069 * _2912.x;
                                frontier_phi_73_pred_5 = _3143 * _2924.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3147 = frontier_phi_73_pred;
                            _3148 = frontier_phi_73_pred_1;
                            _3152 = frontier_phi_73_pred_2;
                            _3151 = frontier_phi_73_pred_3;
                            _3150 = frontier_phi_73_pred_4;
                            _3149 = frontier_phi_73_pred_5;
                            _2854 = _3150 + _2867;
                            _2855 = _3151 + _2868;
                            _2856 = _3152 + _2869;
                            _2851 = _3147 + _2864;
                            _2852 = _3148 + _2865;
                            _2853 = _3149 + _2866;
                            if (_2871 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2864 = _2851;
                                _2865 = _2852;
                                _2866 = _2853;
                                _2867 = _2854;
                                _2868 = _2855;
                                _2869 = _2856;
                                _2870 = _2871;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2854;
                        frontier_phi_67_pred_1 = _2855;
                        frontier_phi_67_pred_2 = _2856;
                        frontier_phi_67_pred_3 = _2853;
                        frontier_phi_67_pred_4 = _2852;
                        frontier_phi_67_pred_5 = _2851;
                    }
                    _2519 = frontier_phi_67_pred;
                    _2521 = frontier_phi_67_pred_1;
                    _2523 = frontier_phi_67_pred_2;
                    _2517 = frontier_phi_67_pred_3;
                    _2515 = frontier_phi_67_pred_4;
                    _2513 = frontier_phi_67_pred_5;
                    uint _2658 = _2657 + 1u;
                    if (_2658 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2651 = _2513;
                        _2652 = _2515;
                        _2653 = _2517;
                        _2654 = _2519;
                        _2655 = _2521;
                        _2656 = _2523;
                        _2657 = _2658;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2521;
                frontier_phi_55_56_ladder_1 = _2523;
                frontier_phi_55_56_ladder_2 = _2519;
                frontier_phi_55_56_ladder_3 = _2517;
                frontier_phi_55_56_ladder_4 = _2515;
                frontier_phi_55_56_ladder_5 = _2513;
            }
            else
            {
                frontier_phi_55_56_ladder = _2398;
                frontier_phi_55_56_ladder_1 = _2400;
                frontier_phi_55_56_ladder_2 = _2396;
                frontier_phi_55_56_ladder_3 = _2394;
                frontier_phi_55_56_ladder_4 = _2392;
                frontier_phi_55_56_ladder_5 = _2390;
            }
            _2512 = frontier_phi_55_56_ladder_5;
            _2514 = frontier_phi_55_56_ladder_4;
            _2516 = frontier_phi_55_56_ladder_3;
            _2518 = frontier_phi_55_56_ladder_2;
            _2520 = frontier_phi_55_56_ladder;
            _2522 = frontier_phi_55_56_ladder_1;
        }
        float _2527 = isnan(1.0) ? _504 : (isnan(_504) ? 1.0 : min(_504, 1.0));
        _2267 = (_2527 * _2518) + _1700;
        _2269 = (_2527 * _2520) + _1702;
        _2271 = (_2527 * _2522) + _1704;
        _2273 = ((_2512 * _489) * _2527) + _2048;
        _2275 = ((_2514 * _491) * _2527) + _2050;
        _2277 = ((_2516 * _492) * _2527) + _2052;
    }
    else
    {
        _2267 = _1700;
        _2269 = _1702;
        _2271 = _1704;
        _2273 = _2048;
        _2275 = _2050;
        _2277 = _2052;
    }
    uint _2283 = _465 + uint(cbMatDynParam._m0[0u].w);
    float _2291 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _316.x) * cbInstanceData._m0[_2283].x;
    float _2294 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _316.y) * cbInstanceData._m0[_2283].y;
    float _2297 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _316.z) * cbInstanceData._m0[_2283].z;
    float _4156 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _4167 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _4178 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _2314 = (((isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2267 + ((isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0))) * _504))) + ((_2273 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _1314)) * cbPerFrame._m0[3u].x)) + _2291;
    float _2316 = (_2294 + ((_2275 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _1314)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_2269 + ((isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))) * _504)));
    float _2318 = (_2297 + ((_2277 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _1314)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_2271 + ((isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))) * _504)));
    float _4204 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2331 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    uint _2332 = _464 + 6u;
    float _2340 = _423 / cbSceneParam._m0[86u].x;
    float _2341 = _424 / cbSceneParam._m0[86u].y;
    vec4 _2355 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2340, _2341, (log2((isnan(cbSceneParam._m0[77u].w) ? _357 : (isnan(_357) ? cbSceneParam._m0[77u].w : min(_357, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2357 = _2355.x;
    float _2358 = _2355.y;
    float _2359 = _2355.z;
    float _2360 = _2355.w;
    float _2453;
    float _2455;
    float _2457;
    float _2459;
    if (_357 > cbSceneParam._m0[78u].w)
    {
        float _2415 = isnan(_357) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _357 : min(cbSceneParam._m0[80u].w, _357));
        float _2416 = _2415 / _357;
        float _2427 = _2416 * _408;
        float _2428 = _409 * _2416;
        float _2429 = (-0.0) - _2428;
        float _2431 = _2416 * _410;
        float _2433 = (cbSceneParam._m0[77u].w * _2429) / _2415;
        float _2434 = _2433 + cbSceneParam._m0[79u].w;
        float _2435 = cbSceneParam._m0[79u].w - _2428;
        float _2441 = sqrt(((_2427 * _2427) + (_2428 * _2428)) + (_2431 * _2431));
        float _2444 = (1.0 - (cbSceneParam._m0[77u].w / _2415)) * _2441;
        float _2449 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2451 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2613;
        if (abs((_2429 - _2433) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2613 = ((((_2434 > 0.0) ? exp2(_2449 * _2434) : (2.0 - exp2(_2451 * _2434))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2444;
        }
        else
        {
            float _2573 = 1.0 / cbSceneParam._m0[80u].x;
            float _2574 = isnan(_2435) ? _2434 : (isnan(_2434) ? _2435 : max(_2434, _2435));
            float _2575 = isnan(_2435) ? _2434 : (isnan(_2434) ? _2435 : min(_2434, _2435));
            float _2584 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : min(_2574, 0.0));
            float _2585 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : min(_2575, 0.0));
            _2613 = ((abs(_2441 / _2429) * cbSceneParam._m0[80u].y) * ((((_2584 - _2585) * 2.0) - ((exp2(_2449 * (isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0)))) - exp2(_2449 * (isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0))))) * _2573)) - ((exp2(_2451 * _2584) - exp2(_2451 * _2585)) * _2573))) + (_2444 * cbSceneParam._m0[80u].z);
        }
        vec4 _2615 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2340, _2341, 1.0), 0.0);
        float _2624 = exp2((_2613 * (-1.44269502162933349609375)) * (1.0 - _2615.w));
        float _2625 = log2(_2624);
        float _2641 = log2(_2360);
        _2453 = (exp2(_2641 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].x)) * _2615.x) / cbSceneParam._m0[78u].x)) + _2357;
        _2455 = (exp2(_2641 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].y)) * _2615.y) / cbSceneParam._m0[78u].y)) + _2358;
        _2457 = (exp2(_2641 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].z)) * _2615.z) / cbSceneParam._m0[78u].z)) + _2359;
        _2459 = _2624 * _2360;
    }
    else
    {
        _2453 = _2357;
        _2455 = _2358;
        _2457 = _2359;
        _2459 = _2360;
    }
    float _2471 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2472 = _2471 == 3.0;
    float _2473 = log2(_2459);
    float _2477 = exp2(_2473 * cbSceneParam._m0[78u].x);
    float _2478 = exp2(_2473 * cbSceneParam._m0[78u].y);
    float _2479 = exp2(_2473 * cbSceneParam._m0[78u].z);
    float _2480 = _2477 * (isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0)));
    float _2481 = _2478 * (isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0)));
    float _2482 = _2479 * (isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0)));
    float _2491 = (_2471 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2491 * (_2472 ? _2480 : (_2480 + (cbSceneParam._m0[72u].w * _2453)));
    SV_Target.y = _2491 * (_2472 ? _2481 : (_2481 + (cbSceneParam._m0[72u].w * _2455)));
    SV_Target.z = _2491 * (_2472 ? _2482 : (_2482 + (cbSceneParam._m0[72u].w * _2457)));
    SV_Target.w = cbInstanceData._m0[_2332].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2291) * _2331) * _2477) * _2491;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2294) * _2331) * _2478) * _2491;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2297) * _2331) * _2479) * _2491;
    SV_Target_1.w = cbInstanceData._m0[_2332].w;
}


