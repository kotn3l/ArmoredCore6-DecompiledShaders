#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _904;
float _3342;
float _3343;
float _3344;
float _3345;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _230 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _236 = _230.x * cbMtdParam._m0[9u].x;
    float _237 = _230.y * cbMtdParam._m0[9u].y;
    float _238 = _230.z * cbMtdParam._m0[9u].z;
    vec4 _250 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _254 = _250.z;
    float _258 = (_250.x * 2.0) + (-1.0);
    float _260 = (_250.y * 2.0) + (-1.0);
    float _261 = dot(vec2(_258, _260), vec2(_258, _260));
    float _3354 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _267 = sqrt(1.0 - (isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0))));
    vec4 _304 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _315 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3365 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _316 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
    float _324 = (((_316 * _316) * (3.0 - (_316 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _327 = fma(_267, _201 * NORMAL.x, fma(_260, _208 * TANGENT.x, (_194 * _187) * _258));
    float _330 = fma(_267, _201 * NORMAL.y, fma(_260, _208 * TANGENT.y, (_194 * _188) * _258));
    float _333 = fma(_267, _201 * NORMAL.z, fma(_260, _208 * TANGENT.z, (_194 * _189) * _258));
    float _337 = inversesqrt(dot(vec3(_327, _330, _333), vec3(_327, _330, _333)));
    float _338 = _337 * _327;
    float _339 = _337 * _330;
    float _340 = _337 * _333;
    float _3376 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _341 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
    float _3387 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3398 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3409 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _360 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _401 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _411 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _401);
    float _412 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _401);
    float _413 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _401);
    float _417 = inversesqrt(dot(vec3(_411, _412, _413), vec3(_411, _412, _413)));
    float _418 = _411 * _417;
    float _419 = _412 * _417;
    float _420 = _413 * _417;
    vec4 _425 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _427 = _425.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _583 = sqrt(((_411 * _411) + (_412 * _412)) + (_413 * _413));
        float _589 = (cbMatDynParam._m0[5u].x * _583) + cbMatDynParam._m0[5u].y;
        float _3420 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
        float _590 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _594 = (cbMatDynParam._m0[5u].z * _583) + cbMatDynParam._m0[5u].w;
        float _3431 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) - _590)) + _590) < ((_427 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _439 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _440 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _460 = fma(_340, cbSceneParam._m0[5u].z, fma(_339, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _338));
    float _463 = fma(_340, cbSceneParam._m0[6u].z, fma(_339, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _338));
    float _466 = fma(_340, cbSceneParam._m0[7u].z, fma(_339, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _338));
    uint _479 = uint(roundEven(NORMAL.w)) * 13u;
    uint _480 = _479 + 9u;
    uint _481 = _480 + uint(cbMatDynParam._m0[0u].w);
    float _487 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0)))) * cbInstanceData._m0[_481].x;
    float _488 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0)))) * cbInstanceData._m0[_481].y;
    float _489 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0)))) * cbInstanceData._m0[_481].z;
    float _3442 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _490 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    float _3453 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _491 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
    float _3464 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _492 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
    vec4 _501 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _439, cbSceneParam._m0[86u].y * _440));
    float _504 = _501.x * TEXCOORD.z;
    float _505 = dot(vec3(_338, _339, _340), vec3(_418, _419, _420));
    float _508 = _505 * 2.0;
    float _512 = (_508 * _338) - _418;
    float _513 = (_508 * _339) - _419;
    float _514 = (_508 * _340) - _420;
    float _518 = abs(dot(vec3(_418, _419, _420), vec3(_338, _339, _340)));
    float _3475 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _520 = sqrt(_341);
    float _532 = exp2((_520 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_520 * 3.0));
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _568 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _572 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _903;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _628 = fma(_572, cbModelParam._m0[26u].z, fma(_568, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _564));
        float _632 = fma(_572, cbModelParam._m0[27u].z, fma(_568, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _564));
        float _636 = fma(_572, cbModelParam._m0[28u].z, fma(_568, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _564));
        float _661 = _564 + _338;
        float _662 = _568 + _339;
        float _663 = _572 + _340;
        float _673 = fma(_663, cbModelParam._m0[26u].z, fma(_662, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _661)) - _628;
        float _674 = fma(_663, cbModelParam._m0[27u].z, fma(_662, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _661)) - _632;
        float _675 = fma(_663, cbModelParam._m0[28u].z, fma(_662, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _661)) - _636;
        float _679 = inversesqrt(dot(vec3(_673, _674, _675), vec3(_673, _674, _675)));
        float _692 = ((_679 * _673) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_628 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _693 = ((_679 * _674) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_632 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _694 = ((_679 * _675) / cbModelParam._m0[34u].z) + ((((((_636 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        vec4 _718 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        float _731 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _732 = _731 * (_697.x + (-0.5));
        float _733 = _731 * (_697.y + (-0.5));
        float _734 = _731 * (_697.z + (-0.5));
        float _741 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _742 = _741 * (_704.x + (-0.5));
        float _743 = _741 * (_704.y + (-0.5));
        float _744 = _741 * (_704.z + (-0.5));
        float _751 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _752 = _751 * (_711.x + (-0.5));
        float _753 = _751 * (_711.y + (-0.5));
        float _754 = _751 * (_711.z + (-0.5));
        float _761 = exp2((_718.w + (-0.5)) * 20.0) * 2.0;
        float _762 = _761 * (_718.x + (-0.5));
        float _763 = _761 * (_718.y + (-0.5));
        float _764 = _761 * (_718.z + (-0.5));
        float _765 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _766 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _767 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _768 = _732 * 0.5;
        float _769 = _742 * 0.5;
        float _770 = _752 * 0.5;
        float _771 = dot(vec3(_768, _769, _770), vec3(_768, _769, _770));
        float _776 = (_771 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_771);
        float _785 = (dot(vec3(_338, _339, _340), vec3(_776 * _768, _776 * _769, _776 * _770)) + 1.0) * 0.5;
        float _3501 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _795 = sqrt(((_769 * _769) + (_768 * _768)) + (_770 * _770)) / (_765 + 9.9999997473787516355514526367188e-06);
        float _3512 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _797 = _796 * 2.0;
        float _801 = (1.0 - _796) / (_796 + 1.0);
        float _3523 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _811 = ((((1.0 - _802) * (_797 + 2.0)) * exp2(log2(isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * (_797 + 1.0))) + _802) * _765;
        float _812 = _733 * 0.5;
        float _813 = _743 * 0.5;
        float _814 = _753 * 0.5;
        float _815 = dot(vec3(_812, _813, _814), vec3(_812, _813, _814));
        float _820 = (_815 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_815);
        float _828 = (dot(vec3(_338, _339, _340), vec3(_820 * _812, _820 * _813, _820 * _814)) + 1.0) * 0.5;
        float _3534 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _837 = sqrt(((_813 * _813) + (_812 * _812)) + (_814 * _814)) / (_766 + 9.9999997473787516355514526367188e-06);
        float _3545 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _839 = _838 * 2.0;
        float _843 = (1.0 - _838) / (_838 + 1.0);
        float _3556 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _853 = ((((1.0 - _844) * (_839 + 2.0)) * exp2(log2(isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * (_839 + 1.0))) + _844) * _766;
        float _854 = _734 * 0.5;
        float _855 = _744 * 0.5;
        float _856 = _754 * 0.5;
        float _857 = dot(vec3(_854, _855, _856), vec3(_854, _855, _856));
        float _862 = (_857 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_857);
        float _870 = (dot(vec3(_338, _339, _340), vec3(_862 * _854, _862 * _855, _862 * _856)) + 1.0) * 0.5;
        float _3567 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _879 = sqrt(((_855 * _855) + (_854 * _854)) + (_856 * _856)) / (_767 + 9.9999997473787516355514526367188e-06);
        float _3578 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _881 = _880 * 2.0;
        float _885 = (1.0 - _880) / (_880 + 1.0);
        float _3589 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _895 = ((((1.0 - _886) * (_881 + 2.0)) * exp2(log2(isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * (_881 + 1.0))) + _886) * _767;
        _903 = _734;
        _905 = _733;
        _906 = _732;
        _907 = _744;
        _908 = _743;
        _909 = _742;
        _910 = _754;
        _911 = _753;
        _912 = _752;
        _913 = _767;
        _914 = _766;
        _915 = _765;
        _916 = cbModelParam._m0[36u].z * (isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0)));
        _917 = cbModelParam._m0[36u].z * (isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0)));
        _918 = cbModelParam._m0[36u].z * (isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0)));
    }
    else
    {
        _903 = _904;
        _905 = _904;
        _906 = _904;
        _907 = _904;
        _908 = _904;
        _909 = _904;
        _910 = _904;
        _911 = _904;
        _912 = _904;
        _913 = _904;
        _914 = _904;
        _915 = _904;
        _916 = 0.0;
        _917 = 0.0;
        _918 = 0.0;
    }
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _947 = fma(_572, cbModelParam._m0[30u].z, fma(_568, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _564));
        float _951 = fma(_572, cbModelParam._m0[31u].z, fma(_568, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _564));
        float _955 = fma(_572, cbModelParam._m0[32u].z, fma(_568, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _564));
        float _978 = _564 + _338;
        float _979 = _568 + _339;
        float _980 = _572 + _340;
        float _990 = fma(_980, cbModelParam._m0[30u].z, fma(_979, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _978)) - _947;
        float _991 = fma(_980, cbModelParam._m0[31u].z, fma(_979, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _978)) - _951;
        float _992 = fma(_980, cbModelParam._m0[32u].z, fma(_979, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _978)) - _955;
        float _996 = inversesqrt(dot(vec3(_990, _991, _992), vec3(_990, _991, _992)));
        float _1009 = ((_996 * _990) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_947 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1010 = ((_996 * _991) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_951 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1011 = ((_996 * _992) / cbModelParam._m0[35u].z) + ((((((_955 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        float _1046 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1013.x + (-0.5));
        float _1048 = _1046 * (_1013.y + (-0.5));
        float _1049 = _1046 * (_1013.z + (-0.5));
        float _1056 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1020.x + (-0.5));
        float _1058 = _1056 * (_1020.y + (-0.5));
        float _1059 = _1056 * (_1020.z + (-0.5));
        float _1066 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1027.x + (-0.5));
        float _1068 = _1066 * (_1027.y + (-0.5));
        float _1069 = _1066 * (_1027.z + (-0.5));
        float _1076 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1034.x + (-0.5));
        float _1078 = _1076 * (_1034.y + (-0.5));
        float _1079 = _1076 * (_1034.z + (-0.5));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = _1047 * 0.5;
        float _1084 = _1057 * 0.5;
        float _1085 = _1067 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_338, _339, _340), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3630 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3641 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3652 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * (_1110 + 1.0))) + _1115) * _1080;
        float _1125 = _1048 * 0.5;
        float _1126 = _1058 * 0.5;
        float _1127 = _1068 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_338, _339, _340), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3685 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_1152 + 1.0))) + _1157) * _1081;
        float _1167 = _1049 * 0.5;
        float _1168 = _1059 * 0.5;
        float _1169 = _1069 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_338, _339, _340), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3718 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_1194 + 1.0))) + _1199) * _1082;
        _1216 = _1049;
        _1217 = _1048;
        _1218 = _1047;
        _1219 = _1059;
        _1220 = _1058;
        _1221 = _1057;
        _1222 = _1069;
        _1223 = _1068;
        _1224 = _1067;
        _1225 = _1082;
        _1226 = _1081;
        _1227 = _1080;
        _1228 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1229 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
        _1230 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
    }
    else
    {
        _1216 = _904;
        _1217 = _904;
        _1218 = _904;
        _1219 = _904;
        _1220 = _904;
        _1221 = _904;
        _1222 = _904;
        _1223 = _904;
        _1224 = _904;
        _1225 = _904;
        _1226 = _904;
        _1227 = _904;
        _1228 = 0.0;
        _1229 = 0.0;
        _1230 = 0.0;
    }
    float _1240 = (cbModelParam._m0[1u].x * (_1228 - _916)) + _916;
    float _1241 = (cbModelParam._m0[1u].x * (_1229 - _917)) + _917;
    float _1242 = (cbModelParam._m0[1u].x * (_1230 - _918)) + _918;
    float _1263 = fma(_1242, cbSceneParam._m0[89u].z, fma(_1241, cbSceneParam._m0[89u].y, _1240 * cbSceneParam._m0[89u].x));
    float _1266 = fma(_1242, cbSceneParam._m0[90u].z, fma(_1241, cbSceneParam._m0[90u].y, _1240 * cbSceneParam._m0[90u].x));
    float _1269 = fma(_1242, cbSceneParam._m0[91u].z, fma(_1241, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1240));
    float _1284 = _512 * 0.5;
    float _1285 = _513 * 0.5;
    float _1286 = _514 * 0.5;
    float _1287 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_1218, _1221, _1224, _1227));
    float _1290 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_1217, _1220, _1223, _1226));
    float _1293 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_1216, _1219, _1222, _1225));
    float _1327;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1300 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_903, _907, _910, _913));
        float _1304 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_905, _908, _911, _914));
        float _1308 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_906, _909, _912, _915));
        float _1315 = dot(vec4(cbModelParam._m0[39u]), vec4(_1284, _1285, _1286, 1.0));
        _1327 = dot(vec3(isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)), isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1315) ? 0.0 : (isnan(0.0) ? _1315 : max(0.0, _1315))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1327 = 1.0;
    }
    float _1338;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1329 = dot(vec4(cbModelParam._m0[40u]), vec4(_1284, _1285, _1286, 1.0));
        _1338 = dot(vec3(isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)), isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1329) ? 0.0 : (isnan(0.0) ? _1329 : max(0.0, _1329))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1338 = 1.0;
    }
    float _1342 = (_1338 * cbModelParam._m0[1u].x) + (_1327 * (1.0 - cbModelParam._m0[1u].x));
    float _1352 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _341);
    float _1353 = isnan(_1352) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1352 : min(cbModelParam._m0[25u].z, _1352));
    float _1434;
    float _1436;
    float _1438;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1401 = fma(_572, cbModelParam._m0[13u].z, fma(_568, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _564)) + cbModelParam._m0[13u].w;
        float _1405 = fma(_572, cbModelParam._m0[14u].z, fma(_568, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _564)) + cbModelParam._m0[14u].w;
        float _1409 = fma(_572, cbModelParam._m0[15u].z, fma(_568, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _564)) + cbModelParam._m0[15u].w;
        float _1412 = fma(_514, cbModelParam._m0[13u].z, fma(_513, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _512));
        float _1415 = fma(_514, cbModelParam._m0[14u].z, fma(_513, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _512));
        float _1418 = fma(_514, cbModelParam._m0[15u].z, fma(_513, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _512));
        float _1446;
        if (_1412 > 0.0)
        {
            _1446 = abs((1.0 - _1401) / _1412);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1401 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1446 = frontier_phi_17_15_ladder;
        }
        float _1671;
        if (_1415 > 0.0)
        {
            _1671 = abs((1.0 - _1405) / _1415);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1415 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1405 + 1.0) / _1415);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1671 = frontier_phi_26_22_ladder;
        }
        float _1917;
        if (_1418 > 0.0)
        {
            _1917 = abs((1.0 - _1409) / _1418);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1418 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1409 + 1.0) / _1418);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1917 = frontier_phi_38_33_ladder;
        }
        float _1919 = isnan(_1671) ? _1446 : (isnan(_1446) ? _1671 : min(_1446, _1671));
        float _1920 = isnan(_1917) ? _1919 : (isnan(_1919) ? _1917 : min(_1919, _1917));
        float _1924 = (_1920 * _1412) + _1401;
        float _1925 = (_1920 * _1415) + _1405;
        float _1926 = (_1920 * _1418) + _1409;
        float _1927 = _1920 * 9.9999997473787516355514526367188e-05;
        float _1929 = (-1.0) - _1927;
        float _1931 = _1927 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1926 > _1931) || ((_1926 < _1929) || ((_1925 > _1931) || ((_1925 < _1929) || ((_1924 < _1929) || (_1924 > _1931))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2050 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1926, cbModelParam._m0[9u].z, fma(_1925, cbModelParam._m0[9u].y, _1924 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1926, cbModelParam._m0[10u].z, fma(_1925, cbModelParam._m0[10u].y, _1924 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1926, cbModelParam._m0[11u].z, fma(_1925, cbModelParam._m0[11u].y, _1924 * cbModelParam._m0[11u].x))), _1353);
            frontier_phi_16_38_ladder = _2050.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2050.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2050.x * cbModelParam._m0[1u].y;
        }
        _1434 = frontier_phi_16_38_ladder_2;
        _1436 = frontier_phi_16_38_ladder_1;
        _1438 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1422 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_512, _513, _514), _1353);
        _1434 = _1422.x * cbModelParam._m0[1u].y;
        _1436 = _1422.y * cbModelParam._m0[1u].y;
        _1438 = _1422.z * cbModelParam._m0[1u].y;
    }
    float _1442 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _341);
    float _1443 = isnan(_1442) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1442 : min(cbModelParam._m0[25u].w, _1442));
    float _1535;
    float _1537;
    float _1539;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1499 = fma(_572, cbModelParam._m0[21u].z, fma(_568, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _564)) + cbModelParam._m0[21u].w;
        float _1503 = fma(_572, cbModelParam._m0[22u].z, fma(_568, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _564)) + cbModelParam._m0[22u].w;
        float _1507 = fma(_572, cbModelParam._m0[23u].z, fma(_568, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _564)) + cbModelParam._m0[23u].w;
        float _1510 = fma(_514, cbModelParam._m0[21u].z, fma(_513, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _512));
        float _1513 = fma(_514, cbModelParam._m0[22u].z, fma(_513, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _512));
        float _1516 = fma(_514, cbModelParam._m0[23u].z, fma(_513, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _512));
        float _1676;
        if (_1510 > 0.0)
        {
            _1676 = abs((1.0 - _1499) / _1510);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1499 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1676 = frontier_phi_28_24_ladder;
        }
        float _1944;
        if (_1513 > 0.0)
        {
            _1944 = abs((1.0 - _1503) / _1513);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1503 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1944 = frontier_phi_40_35_ladder;
        }
        float _2149;
        if (_1516 > 0.0)
        {
            _2149 = abs((1.0 - _1507) / _1516);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1507 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2149 = frontier_phi_49_46_ladder;
        }
        float _2151 = isnan(_1944) ? _1676 : (isnan(_1676) ? _1944 : min(_1676, _1944));
        float _2152 = isnan(_2149) ? _2151 : (isnan(_2151) ? _2149 : min(_2151, _2149));
        float _2156 = (_2152 * _1510) + _1499;
        float _2157 = (_2152 * _1513) + _1503;
        float _2158 = (_2152 * _1516) + _1507;
        float _2159 = _2152 * 9.9999997473787516355514526367188e-05;
        float _2160 = (-1.0) - _2159;
        float _2162 = _2159 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2158 > _2162) || ((_2158 < _2160) || ((_2157 > _2162) || ((_2157 < _2160) || ((_2156 < _2160) || (_2156 > _2162))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2395 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2158, cbModelParam._m0[17u].z, fma(_2157, cbModelParam._m0[17u].y, _2156 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2158, cbModelParam._m0[18u].z, fma(_2157, cbModelParam._m0[18u].y, _2156 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2158, cbModelParam._m0[19u].z, fma(_2157, cbModelParam._m0[19u].y, _2156 * cbModelParam._m0[19u].x))), _1443);
            frontier_phi_25_49_ladder = _2395.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2395.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2395.x * cbModelParam._m0[1u].z;
        }
        _1535 = frontier_phi_25_49_ladder_2;
        _1537 = frontier_phi_25_49_ladder_1;
        _1539 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1519 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_512, _513, _514), _1443);
        _1535 = _1519.x * cbModelParam._m0[1u].z;
        _1537 = _1519.y * cbModelParam._m0[1u].z;
        _1539 = _1519.z * cbModelParam._m0[1u].z;
    }
    float _1551 = ((((1.0 - _532) * ((_520 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_532 * _520)) * _504;
    float _1552 = _1551 * ((cbModelParam._m0[1u].w * (_1535 - _1434)) + _1434);
    float _1553 = _1551 * ((cbModelParam._m0[1u].w * (_1537 - _1436)) + _1436);
    float _1554 = _1551 * ((cbModelParam._m0[1u].w * (_1539 - _1438)) + _1438);
    float _1557 = fma(_1554, cbSceneParam._m0[89u].z, fma(_1553, cbSceneParam._m0[89u].y, _1552 * cbSceneParam._m0[89u].x));
    float _1560 = fma(_1554, cbSceneParam._m0[90u].z, fma(_1553, cbSceneParam._m0[90u].y, _1552 * cbSceneParam._m0[90u].x));
    float _1563 = fma(_1554, cbSceneParam._m0[91u].z, fma(_1553, cbSceneParam._m0[91u].y, _1552 * cbSceneParam._m0[91u].x));
    vec4 _1571 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_439, _440));
    float _1573 = _1571.w;
    float _1585 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1573);
    float _1586 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1573);
    float _1587 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1573);
    uvec4 _1591 = floatBitsToUint(cbInstanceData._m0[_479 + 5u]);
    uint _1593 = _1591.x * 14u;
    uint _1594 = _1593 + 13u;
    float _1601 = _504 + (-1.0);
    float _1606 = (cbLight._m0[_1594].x * _1601) + 1.0;
    float _1607 = (cbLight._m0[_1594].y * _1601) + 1.0;
    float _1608 = (cbLight._m0[_1594].z * _1601) + 1.0;
    float _1609 = (cbLight._m0[_1594].w * _1601) + 1.0;
    uint _1610 = _1593 + 5u;
    float _1616 = isnan(1.0) ? _1607 : (isnan(_1607) ? 1.0 : min(_1607, 1.0));
    uint _1620 = _1593 + 4u;
    float _1630 = isnan(1.0) ? _1606 : (isnan(_1606) ? 1.0 : min(_1606, 1.0));
    uint _1634 = _1593 | 1u;
    float _1645 = dot(vec3(cbLight._m0[_1593].xyz), vec3(_338, _339, _340));
    float _1648 = dot(vec3(cbLight._m0[_1634].xyz), vec3(_338, _339, _340));
    float _3854 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
    float _3865 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
    float _1653 = (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * 0.3183098733425140380859375;
    float _1655 = (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * 0.3183098733425140380859375;
    float _1662 = ((cbLight._m0[_1610].x * _1616) * _1655) + (((cbLight._m0[_1620].x * _1585) * _1630) * _1653);
    float _1663 = ((_1616 * cbLight._m0[_1610].y) * _1655) + (((cbLight._m0[_1620].y * _1586) * _1630) * _1653);
    float _1664 = ((_1616 * cbLight._m0[_1610].z) * _1655) + (((cbLight._m0[_1620].z * _1587) * _1630) * _1653);
    uvec4 _1668 = floatBitsToUint(cbLight._m0[_1593 + 12u]);
    bool _1670 = _1668.x == 0u;
    float _1681;
    float _1683;
    float _1685;
    if (_1670)
    {
        _1681 = _1662;
        _1683 = _1663;
        _1685 = _1664;
    }
    else
    {
        uint _1689 = _1593 + 6u;
        float _1705 = (dot(vec3(cbLight._m0[_1593 + 2u].xyz), vec3(_338, _339, _340)) * 0.5) + 0.5;
        float _1706 = _1705 * _1705;
        float _3876 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1708 = isnan(1.0) ? _1608 : (isnan(_1608) ? 1.0 : min(_1608, 1.0));
        _1681 = (((cbLight._m0[_1689].x * 0.3183098733425140380859375) * _1707) * _1708) + _1662;
        _1683 = (((cbLight._m0[_1689].y * 0.3183098733425140380859375) * _1707) * _1708) + _1663;
        _1685 = (((cbLight._m0[_1689].z * 0.3183098733425140380859375) * _1707) * _1708) + _1664;
    }
    bool _1688 = _1668.y == 0u;
    float _1726;
    float _1728;
    float _1730;
    if (_1688)
    {
        _1726 = _1681;
        _1728 = _1683;
        _1730 = _1685;
    }
    else
    {
        uint _1888 = _1593 + 7u;
        float _1904 = (dot(vec3(cbLight._m0[_1593 + 3u].xyz), vec3(_338, _339, _340)) * 0.5) + 0.5;
        float _1905 = _1904 * _1904;
        float _3892 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1906 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1907 = isnan(1.0) ? _1609 : (isnan(_1609) ? 1.0 : min(_1609, 1.0));
        _1726 = (((cbLight._m0[_1888].x * 0.3183098733425140380859375) * _1906) * _1907) + _1681;
        _1728 = (((cbLight._m0[_1888].y * 0.3183098733425140380859375) * _1906) * _1907) + _1683;
        _1730 = (((cbLight._m0[_1888].z * 0.3183098733425140380859375) * _1906) * _1907) + _1685;
    }
    uint _1733 = _1593 + 8u;
    float _1746 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1593].w)) * _341) * 0.949999988079071044921875);
    float _1747 = _1746 * _1746;
    float _1748 = cbLight._m0[_1593].x + _418;
    float _1749 = cbLight._m0[_1593].y + _419;
    float _1750 = cbLight._m0[_1593].z + _420;
    float _1754 = inversesqrt(dot(vec3(_1748, _1749, _1750), vec3(_1748, _1749, _1750)));
    float _1755 = _1754 * _1748;
    float _1756 = _1754 * _1749;
    float _1757 = _1754 * _1750;
    float _1758 = dot(vec3(_338, _339, _340), vec3(cbLight._m0[_1593].xyz));
    float _3908 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1761 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _3919 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _1762 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _1763 = dot(vec3(_338, _339, _340), vec3(_1755, _1756, _1757));
    float _3930 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1766 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _1767 = dot(vec3(cbLight._m0[_1593].xyz), vec3(_1755, _1756, _1757));
    float _3941 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1771 = _1747 * _1747;
    float _1775 = ((_1766 * _1766) * (_1771 + (-1.0))) + 1.0;
    float _1786 = (exp2(log2(1.0 - (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1787 = 1.0 - _1747;
    float _1798 = (0.5 / (((_1762 * ((_1761 * _1787) + _1747)) + 9.9999999392252902907785028219223e-09) + (((_1762 * _1787) + _1747) * _1761))) * _1761;
    float _3952 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1800 = (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1771 / ((_1775 * _1775) * 3.141590118408203125));
    uint _1814 = _1593 + 9u;
    float _1825 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1634].w)) * _341) * 0.949999988079071044921875);
    float _1826 = _1825 * _1825;
    float _1827 = cbLight._m0[_1634].x + _418;
    float _1828 = cbLight._m0[_1634].y + _419;
    float _1829 = cbLight._m0[_1634].z + _420;
    float _1833 = inversesqrt(dot(vec3(_1827, _1828, _1829), vec3(_1827, _1828, _1829)));
    float _1834 = _1833 * _1827;
    float _1835 = _1833 * _1828;
    float _1836 = _1833 * _1829;
    float _1837 = dot(vec3(_338, _339, _340), vec3(cbLight._m0[_1634].xyz));
    float _3963 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1840 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _1841 = dot(vec3(_338, _339, _340), vec3(_1834, _1835, _1836));
    float _3974 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1844 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _1845 = dot(vec3(cbLight._m0[_1634].xyz), vec3(_1834, _1835, _1836));
    float _3985 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1849 = _1826 * _1826;
    float _1853 = ((_1844 * _1844) * (_1849 + (-1.0))) + 1.0;
    float _1862 = (exp2(log2(1.0 - (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1863 = 1.0 - _1826;
    float _1873 = (0.5 / (((_1762 * ((_1840 * _1863) + _1826)) + 9.9999999392252902907785028219223e-09) + (((_1762 * _1863) + _1826) * _1840))) * _1840;
    float _3996 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1875 = (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1849 / ((_1853 * _1853) * 3.141590118408203125));
    float _1885 = (((_1862 * cbLight._m0[_1814].x) * _1875) * _1616) + ((((cbLight._m0[_1733].x * _1585) * _1786) * _1800) * _1630);
    float _1886 = (((_1862 * cbLight._m0[_1814].y) * _1875) * _1616) + ((((cbLight._m0[_1733].y * _1586) * _1786) * _1800) * _1630);
    float _1887 = (((_1862 * cbLight._m0[_1814].z) * _1875) * _1616) + ((((cbLight._m0[_1733].z * _1587) * _1786) * _1800) * _1630);
    float _1949;
    float _1951;
    float _1953;
    if (_1670)
    {
        _1949 = _1885;
        _1951 = _1886;
        _1953 = _1887;
    }
    else
    {
        uint _1955 = _1593 + 2u;
        uint _1959 = _1593 + 10u;
        float _1973 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1955].w)) * _341) * 0.949999988079071044921875);
        float _1974 = _1973 * _1973;
        float _1975 = cbLight._m0[_1955].x + _418;
        float _1976 = cbLight._m0[_1955].y + _419;
        float _1977 = cbLight._m0[_1955].z + _420;
        float _1981 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
        float _1982 = _1981 * _1975;
        float _1983 = _1981 * _1976;
        float _1984 = _1981 * _1977;
        float _1985 = dot(vec3(_338, _339, _340), vec3(cbLight._m0[_1955].xyz));
        float _4007 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1988 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1989 = dot(vec3(_338, _339, _340), vec3(_1982, _1983, _1984));
        float _4018 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1992 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1993 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_1982, _1983, _1984));
        float _4029 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _1997 = _1974 * _1974;
        float _2001 = ((_1992 * _1992) * (_1997 + (-1.0))) + 1.0;
        float _2010 = (exp2(log2(1.0 - (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2011 = 1.0 - _1974;
        float _2021 = (0.5 / (((_1762 * ((_1988 * _2011) + _1974)) + 9.9999999392252902907785028219223e-09) + (((_1762 * _2011) + _1974) * _1988))) * _1988;
        float _4040 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2023 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1997 / ((_2001 * _2001) * 3.141590118408203125));
        float _2024 = isnan(1.0) ? _1608 : (isnan(_1608) ? 1.0 : min(_1608, 1.0));
        _1949 = (((_2010 * cbLight._m0[_1959].x) * _2023) * _2024) + _1885;
        _1951 = (((_2010 * cbLight._m0[_1959].y) * _2023) * _2024) + _1886;
        _1953 = (((_2010 * cbLight._m0[_1959].z) * _2023) * _2024) + _1887;
    }
    float _2059;
    float _2061;
    float _2063;
    if (_1688)
    {
        _2059 = _1949;
        _2061 = _1951;
        _2063 = _1953;
    }
    else
    {
        uint _2070 = _1593 + 3u;
        uint _2074 = _1593 + 11u;
        float _2088 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2070].w)) * _341) * 0.949999988079071044921875);
        float _2089 = _2088 * _2088;
        float _2090 = cbLight._m0[_2070].x + _418;
        float _2091 = cbLight._m0[_2070].y + _419;
        float _2092 = cbLight._m0[_2070].z + _420;
        float _2096 = inversesqrt(dot(vec3(_2090, _2091, _2092), vec3(_2090, _2091, _2092)));
        float _2097 = _2096 * _2090;
        float _2098 = _2096 * _2091;
        float _2099 = _2096 * _2092;
        float _2100 = dot(vec3(_338, _339, _340), vec3(cbLight._m0[_2070].xyz));
        float _4056 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2103 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _2104 = dot(vec3(_338, _339, _340), vec3(_2097, _2098, _2099));
        float _4067 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2107 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _2108 = dot(vec3(cbLight._m0[_2070].xyz), vec3(_2097, _2098, _2099));
        float _4078 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2112 = _2089 * _2089;
        float _2116 = ((_2107 * _2107) * (_2112 + (-1.0))) + 1.0;
        float _2125 = (exp2(log2(1.0 - (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2126 = 1.0 - _2089;
        float _2136 = (0.5 / (((_1762 * ((_2103 * _2126) + _2089)) + 9.9999999392252902907785028219223e-09) + (((_1762 * _2126) + _2089) * _2103))) * _2103;
        float _4089 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2138 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_2112 / ((_2116 * _2116) * 3.141590118408203125));
        float _2139 = isnan(1.0) ? _1609 : (isnan(_1609) ? 1.0 : min(_1609, 1.0));
        _2059 = (((_2125 * cbLight._m0[_2074].x) * _2138) * _2139) + _1949;
        _2061 = (((_2125 * cbLight._m0[_2074].y) * _2138) * _2139) + _1951;
        _2063 = (((_2125 * cbLight._m0[_2074].z) * _2138) * _2139) + _1953;
    }
    float _2274;
    float _2276;
    float _2278;
    float _2280;
    float _2282;
    float _2284;
    if (_1591.y == 0u)
    {
        float _2214 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2215 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2214;
        float _2216 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2214;
        float _2217 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2214;
        uvec4 _2229 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2230 = _2229.x;
        uint _2241 = uint((float(_2229.y) * floor(float(uint(cbSceneParam._m0[85u].y * _440) / _2230))) + floor(float(uint(cbSceneParam._m0[85u].x * _439) / _2230)));
        float _2251 = (log2(_2217 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2252 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        uint _2255 = uint(isnan(14.0) ? _2252 : (isnan(_2252) ? 14.0 : min(_2252, 14.0)));
        uvec4 _2260 = texelFetch(g_lightClusterGridBuffer, int(((_2255 << 2u) + (_2241 << 6u)) >> 2u));
        uint _2261 = _2260.x;
        uint _2262 = _2229.z;
        float _2400;
        float _2402;
        float _2404;
        float _2406;
        float _2408;
        float _2410;
        if (((((1u << ((_2262 >> 4u) & 15u)) + 4294967295u) & _2261) == 0u) || ((_2262 & 240u) == 0u))
        {
            _2400 = 0.0;
            _2402 = 0.0;
            _2404 = 0.0;
            _2406 = 0.0;
            _2408 = 0.0;
            _2410 = 0.0;
        }
        else
        {
            float _2401;
            float _2403;
            float _2405;
            float _2407;
            float _2409;
            float _2411;
            float _2562 = 0.0;
            float _2563 = 0.0;
            float _2564 = 0.0;
            float _2565 = 0.0;
            float _2566 = 0.0;
            float _2567 = 0.0;
            uint _2568 = 0u;
            uint _2577;
            bool _2578;
            for (;;)
            {
                _2577 = texelFetch(g_lightClassification, int((((_2255 << 5u) + (_2241 << 9u)) + (_2568 << 2u)) >> 2u)).x;
                _2578 = _2577 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2578)
                {
                    frontier_phi_66_pred = _2562;
                    frontier_phi_66_pred_1 = _2567;
                    frontier_phi_66_pred_2 = _2566;
                    frontier_phi_66_pred_3 = _2565;
                    frontier_phi_66_pred_4 = _2564;
                    frontier_phi_66_pred_5 = _2563;
                }
                else
                {
                    float _2707;
                    float _2708;
                    float _2709;
                    float _2710;
                    float _2711;
                    float _2712;
                    uint _2713;
                    _2707 = _2562;
                    _2708 = _2563;
                    _2709 = _2564;
                    _2710 = _2565;
                    _2711 = _2566;
                    _2712 = _2567;
                    _2713 = _2577;
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    for (;;)
                    {
                        uint _2717 = uint(findLSB(_2713)) + (_2568 << 5u);
                        uint _2714 = (_2713 + 4294967295u) & _2713;
                        uint _2719 = _2717 * 48u;
                        vec4 _2733 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2719)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 3u)).x));
                        uint _2739 = (_2717 * 48u) + 4u;
                        vec4 _2752 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2739)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 3u)).x));
                        uint _2758 = (_2717 * 48u) + 8u;
                        vec3 _2769 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2758)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 2u)).x));
                        float _2773 = _2733.x - _2215;
                        float _2774 = _2733.y - _2216;
                        float _2775 = _2733.z - _2217;
                        float _2776 = dot(vec3(_2773, _2774, _2775), vec3(_2773, _2774, _2775));
                        float _2779 = inversesqrt(_2776);
                        float _2780 = _2779 * _2773;
                        float _2781 = _2779 * _2774;
                        float _2782 = _2779 * _2775;
                        float _2783 = dot(vec3(_460, _463, _466), vec3(_2780, _2781, _2782));
                        float _2788 = 1.0 - (_2776 * _2733.w);
                        float _4115 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                        float _2789 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                        float _2790 = sqrt(_2776) * _2752.w;
                        float _2793 = 1.39999997615814208984375 / (_2790 + 1.39999997615814208984375);
                        float _2794 = _2793 * _2793;
                        float _2797 = ((1.0 - _2794) * _2783) + _2794;
                        float _2800 = _2790 * _2790;
                        float _2804 = ((isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0))) * _2789) / ((_2800 * 0.699999988079071044921875) + 1.0);
                        float _2808 = (-0.0) - _2215;
                        float _2809 = (-0.0) - _2216;
                        float _2810 = (-0.0) - _2217;
                        float _2814 = inversesqrt(dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810)));
                        float _2815 = _2814 * _2808;
                        float _2816 = _2814 * _2809;
                        float _2817 = _2814 * _2810;
                        float _2825 = exp2(log2(1.0 / ((_2800 * 3.5) + 5.0)) * 0.25);
                        float _2826 = 1.0 - _520;
                        float _2833 = sqrt(1.0 - ((1.0 - (_2826 * _2826)) * (1.0 - (_2825 * _2825))));
                        float _2834 = _2833 * _2833;
                        float _2835 = _2834 * _2834;
                        float _2836 = _2815 + _2780;
                        float _2837 = _2816 + _2781;
                        float _2838 = _2817 + _2782;
                        float _2842 = inversesqrt(dot(vec3(_2836, _2837, _2838), vec3(_2836, _2837, _2838)));
                        float _2846 = dot(vec3(_460, _463, _466), vec3(_2815, _2816, _2817));
                        float _4131 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
                        float _2849 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
                        float _2850 = dot(vec3(_460, _463, _466), vec3(_2842 * _2836, _2842 * _2837, _2842 * _2838));
                        float _4142 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                        float _2853 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                        float _2857 = ((_2853 * _2853) * (_2835 + (-1.0))) + 1.0;
                        float _2858 = _2793 * _2834;
                        float _2859 = _2858 * _2858;
                        float _2862 = ((1.0 - _2859) * _2783) + _2859;
                        float _4153 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                        float _2863 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                        float _2864 = 1.0 - _2834;
                        float _2874 = (0.5 / (((_2863 * ((_2849 * _2864) + _2834)) + 9.9999999392252902907785028219223e-09) + (((_2863 * _2864) + _2834) * _2849))) * _2863;
                        float _4164 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                        float _2885 = (((_2835 * 3.1415927410125732421875) * (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0)))) / ((_2857 * _2857) * ((_2800 * 2.1991131305694580078125) + 3.141590118408203125))) * _2789;
                        _2637 = (_2804 * _2752.x) + _2710;
                        _2638 = (_2804 * _2752.y) + _2711;
                        _2639 = (_2804 * _2752.z) + _2712;
                        _2634 = (_2885 * _2769.x) + _2707;
                        _2635 = (_2885 * _2769.y) + _2708;
                        _2636 = (_2885 * _2769.z) + _2709;
                        if (_2714 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2707 = _2634;
                            _2708 = _2635;
                            _2709 = _2636;
                            _2710 = _2637;
                            _2711 = _2638;
                            _2712 = _2639;
                            _2713 = _2714;
                        }
                    }
                    frontier_phi_66_pred = _2634;
                    frontier_phi_66_pred_1 = _2639;
                    frontier_phi_66_pred_2 = _2638;
                    frontier_phi_66_pred_3 = _2637;
                    frontier_phi_66_pred_4 = _2636;
                    frontier_phi_66_pred_5 = _2635;
                }
                _2401 = frontier_phi_66_pred;
                _2411 = frontier_phi_66_pred_1;
                _2409 = frontier_phi_66_pred_2;
                _2407 = frontier_phi_66_pred_3;
                _2405 = frontier_phi_66_pred_4;
                _2403 = frontier_phi_66_pred_5;
                uint _2569 = _2568 + 1u;
                if (_2569 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2562 = _2401;
                    _2563 = _2403;
                    _2564 = _2405;
                    _2565 = _2407;
                    _2566 = _2409;
                    _2567 = _2411;
                    _2568 = _2569;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2400 = _2401;
            _2402 = _2403;
            _2404 = _2405;
            _2406 = _2407;
            _2408 = _2409;
            _2410 = _2411;
        }
        uvec4 _2414 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2415 = _2414.z;
        uint _2417 = (_2415 >> 8u) & 15u;
        float _2530;
        float _2532;
        float _2534;
        float _2536;
        float _2538;
        float _2540;
        if (((4294967295u << _2417) & _2261) == 0u)
        {
            _2530 = _2400;
            _2532 = _2402;
            _2534 = _2404;
            _2536 = _2406;
            _2538 = _2408;
            _2540 = _2410;
        }
        else
        {
            float _2555 = inversesqrt(dot(vec3(_2215, _2216, _2217), vec3(_2215, _2216, _2217)));
            float _2556 = _2555 * _2215;
            float _2557 = _2555 * _2216;
            float _2558 = _2555 * _2217;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2417 < ((_2415 >> 12u) & 15u))
            {
                float _2531;
                float _2533;
                float _2535;
                float _2537;
                float _2539;
                float _2541;
                float _2690 = _2400;
                float _2691 = _2402;
                float _2692 = _2404;
                float _2693 = _2406;
                float _2694 = _2408;
                float _2695 = _2410;
                uint _2696 = _2417;
                uint _2705;
                bool _2706;
                for (;;)
                {
                    _2705 = texelFetch(g_lightClassification, int((((_2255 << 5u) + (_2241 << 9u)) + (_2696 << 2u)) >> 2u)).x;
                    _2706 = _2705 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2706)
                    {
                        frontier_phi_77_pred = _2695;
                        frontier_phi_77_pred_1 = _2694;
                        frontier_phi_77_pred_2 = _2693;
                        frontier_phi_77_pred_3 = _2692;
                        frontier_phi_77_pred_4 = _2691;
                        frontier_phi_77_pred_5 = _2690;
                    }
                    else
                    {
                        float _2899;
                        float _2900;
                        float _2901;
                        float _2902;
                        float _2903;
                        float _2904;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _2912 = _2690;
                        float _2913 = _2691;
                        float _2914 = _2692;
                        float _2915 = _2693;
                        float _2916 = _2694;
                        float _2917 = _2695;
                        uint _2918 = _2705;
                        uint _2919;
                        vec4 _2944;
                        float _2945;
                        vec4 _2960;
                        vec3 _2972;
                        vec4 _2988;
                        vec4 _3004;
                        float _3051;
                        bool _3052;
                        for (;;)
                        {
                            uint _2929 = ((_2696 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2918));
                            _2919 = (_2918 + 4294967295u) & _2918;
                            uint _2931 = _2929 * 40u;
                            _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            _2945 = _2944.w;
                            uint _2947 = (_2929 * 40u) + 4u;
                            _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            uint _2962 = (_2929 * 40u) + 8u;
                            _2972 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x));
                            uint _2975 = (_2929 * 40u) + 16u;
                            _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            uint _2991 = (_2929 * 40u) + 20u;
                            _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            uint _3007 = (_2929 * 40u) + 24u;
                            vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 3u)).x));
                            uint _3026 = (_2929 * 40u) + 28u;
                            vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            _3051 = fma(_2217, _3039.z, fma(_2216, _3039.y, _3039.x * _2215)) + _3039.w;
                            _3052 = !((fma(_2217, _3020.z, fma(_2216, _3020.y, _3020.x * _2215)) + _3020.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3052)
                            {
                                float _3079 = _2944.x - _2215;
                                float _3080 = _2944.y - _2216;
                                float _3081 = _2944.z - _2217;
                                float _3082 = dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081));
                                float _3085 = inversesqrt(_3082);
                                float _3086 = _3085 * _3079;
                                float _3087 = _3085 * _3080;
                                float _3088 = _3085 * _3081;
                                float _3092 = 1.0 - (_3082 / (_2945 * _2945));
                                float _4175 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3093 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                                float _3097 = sqrt(_3082) * _2960.w;
                                float _3099 = 1.39999997615814208984375 / (_3097 + 1.39999997615814208984375);
                                float _3100 = _3099 * _3099;
                                float _3103 = ((1.0 - _3100) * dot(vec3(_3086, _3087, _3088), vec3(_460, _463, _466))) + _3100;
                                float _3106 = _3097 * _3097;
                                float _3110 = (fma(_2217, _2988.z, fma(_2216, _2988.y, _2988.x * _2215)) + _2988.w) / _3051;
                                float _3111 = (fma(_2217, _3004.z, fma(_2216, _3004.y, _3004.x * _2215)) + _3004.w) / _3051;
                                float _3115 = 1.0 - dot(vec2(_3110, _3111), vec2(_3110, _3111));
                                float _4191 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3116 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
                                float _3117 = _3116 * (((isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0))) * _3093) / ((_3106 * 0.699999988079071044921875) + 1.0));
                                float _3129 = exp2(log2(1.0 / ((_3106 * 3.5) + 5.0)) * 0.25);
                                float _3130 = 1.0 - _520;
                                float _3137 = sqrt(1.0 - ((1.0 - (_3130 * _3130)) * (1.0 - (_3129 * _3129))));
                                float _3138 = _3137 * _3137;
                                float _3139 = _3138 * _3138;
                                float _3140 = _3086 - _2556;
                                float _3141 = _3087 - _2557;
                                float _3142 = _3088 - _2558;
                                float _3146 = inversesqrt(dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142)));
                                float _3150 = dot(vec3(_460, _463, _466), vec3((-0.0) - _2556, (-0.0) - _2557, (-0.0) - _2558));
                                float _4202 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3153 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
                                float _3154 = dot(vec3(_460, _463, _466), vec3(_3146 * _3140, _3146 * _3141, _3146 * _3142));
                                float _4213 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3157 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                                float _3161 = ((_3157 * _3157) * (_3139 + (-1.0))) + 1.0;
                                float _3162 = _3099 * _3138;
                                float _3163 = _3162 * _3162;
                                float _3169 = ((1.0 - _3163) * dot(vec3(_460, _463, _466), vec3(_3086, _3087, _3088))) + _3163;
                                float _4224 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3170 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                                float _3171 = 1.0 - _3138;
                                float _3181 = (0.5 / (((_3170 * ((_3153 * _3171) + _3138)) + 9.9999999392252902907785028219223e-09) + (((_3170 * _3171) + _3138) * _3153))) * _3170;
                                float _4235 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3191 = (_3116 * _3093) * (((_3139 * 3.1415927410125732421875) * (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) / ((_3161 * _3161) * ((_3106 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3117 * _2960.y;
                                frontier_phi_83_pred_1 = _3117 * _2960.x;
                                frontier_phi_83_pred_2 = _3191 * _2972.z;
                                frontier_phi_83_pred_3 = _3191 * _2972.y;
                                frontier_phi_83_pred_4 = _3191 * _2972.x;
                                frontier_phi_83_pred_5 = _3117 * _2960.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3199 = frontier_phi_83_pred;
                            _3198 = frontier_phi_83_pred_1;
                            _3197 = frontier_phi_83_pred_2;
                            _3196 = frontier_phi_83_pred_3;
                            _3195 = frontier_phi_83_pred_4;
                            _3200 = frontier_phi_83_pred_5;
                            _2902 = _3198 + _2915;
                            _2903 = _3199 + _2916;
                            _2904 = _3200 + _2917;
                            _2899 = _3195 + _2912;
                            _2900 = _3196 + _2913;
                            _2901 = _3197 + _2914;
                            if (_2919 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2912 = _2899;
                                _2913 = _2900;
                                _2914 = _2901;
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2919;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2904;
                        frontier_phi_77_pred_1 = _2903;
                        frontier_phi_77_pred_2 = _2902;
                        frontier_phi_77_pred_3 = _2901;
                        frontier_phi_77_pred_4 = _2900;
                        frontier_phi_77_pred_5 = _2899;
                    }
                    _2541 = frontier_phi_77_pred;
                    _2539 = frontier_phi_77_pred_1;
                    _2537 = frontier_phi_77_pred_2;
                    _2535 = frontier_phi_77_pred_3;
                    _2533 = frontier_phi_77_pred_4;
                    _2531 = frontier_phi_77_pred_5;
                    uint _2697 = _2696 + 1u;
                    if (_2697 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2690 = _2531;
                        _2691 = _2533;
                        _2692 = _2535;
                        _2693 = _2537;
                        _2694 = _2539;
                        _2695 = _2541;
                        _2696 = _2697;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2535;
                frontier_phi_58_59_ladder_1 = _2541;
                frontier_phi_58_59_ladder_2 = _2539;
                frontier_phi_58_59_ladder_3 = _2537;
                frontier_phi_58_59_ladder_4 = _2533;
                frontier_phi_58_59_ladder_5 = _2531;
            }
            else
            {
                frontier_phi_58_59_ladder = _2404;
                frontier_phi_58_59_ladder_1 = _2410;
                frontier_phi_58_59_ladder_2 = _2408;
                frontier_phi_58_59_ladder_3 = _2406;
                frontier_phi_58_59_ladder_4 = _2402;
                frontier_phi_58_59_ladder_5 = _2400;
            }
            _2530 = frontier_phi_58_59_ladder_5;
            _2532 = frontier_phi_58_59_ladder_4;
            _2534 = frontier_phi_58_59_ladder;
            _2536 = frontier_phi_58_59_ladder_3;
            _2538 = frontier_phi_58_59_ladder_2;
            _2540 = frontier_phi_58_59_ladder_1;
        }
        float _2545 = isnan(1.0) ? _504 : (isnan(_504) ? 1.0 : min(_504, 1.0));
        _2274 = (_2545 * _2536) + _1726;
        _2276 = (_2545 * _2538) + _1728;
        _2278 = (_2545 * _2540) + _1730;
        _2280 = ((_2530 * 0.039999999105930328369140625) * _2545) + _2059;
        _2282 = ((_2532 * 0.039999999105930328369140625) * _2545) + _2061;
        _2284 = ((_2534 * 0.039999999105930328369140625) * _2545) + _2063;
    }
    else
    {
        _2274 = _1726;
        _2276 = _1728;
        _2278 = _1730;
        _2280 = _2059;
        _2282 = _2061;
        _2284 = _2063;
    }
    uint _2290 = _480 + uint(cbMatDynParam._m0[0u].w);
    float _2299 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _304.x) * _324) * cbInstanceData._m0[_2290].x;
    float _2303 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _304.y) * _324) * cbInstanceData._m0[_2290].y;
    float _2307 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _304.z) * _324) * cbInstanceData._m0[_2290].z;
    float _4251 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _4262 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _4273 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _2324 = (((isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_2274 + ((isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0))) * _504))) + ((_2280 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _1342)) * cbPerFrame._m0[3u].x)) + _2299;
    float _2326 = (_2303 + ((_2282 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _1342)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_2276 + ((isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0))) * _504)));
    float _2328 = (_2307 + ((_2284 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _1342)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_2278 + ((isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))) * _504)));
    float _2329 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2330 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2331 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2337 = cbMtdParam._m0[2u].x * _2299;
    float _2338 = cbMtdParam._m0[2u].y * _2303;
    float _2339 = cbMtdParam._m0[2u].z * _2307;
    float _4299 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2341 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    uint _2342 = _479 + 6u;
    float _2350 = _439 / cbSceneParam._m0[86u].x;
    float _2351 = _440 / cbSceneParam._m0[86u].y;
    vec4 _2365 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2350, _2351, (log2((isnan(cbSceneParam._m0[77u].w) ? _360 : (isnan(_360) ? cbSceneParam._m0[77u].w : min(_360, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2367 = _2365.x;
    float _2368 = _2365.y;
    float _2369 = _2365.z;
    float _2370 = _2365.w;
    float _2463;
    float _2465;
    float _2467;
    float _2469;
    if (_360 > cbSceneParam._m0[78u].w)
    {
        float _2425 = isnan(_360) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _360 : min(cbSceneParam._m0[80u].w, _360));
        float _2426 = _2425 / _360;
        float _2437 = _2426 * _411;
        float _2438 = _412 * _2426;
        float _2439 = (-0.0) - _2438;
        float _2441 = _2426 * _413;
        float _2443 = (cbSceneParam._m0[77u].w * _2439) / _2425;
        float _2444 = _2443 + cbSceneParam._m0[79u].w;
        float _2445 = cbSceneParam._m0[79u].w - _2438;
        float _2451 = sqrt(((_2437 * _2437) + (_2438 * _2438)) + (_2441 * _2441));
        float _2454 = (1.0 - (cbSceneParam._m0[77u].w / _2425)) * _2451;
        float _2459 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2461 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2647;
        if (abs((_2439 - _2443) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2647 = ((((_2444 > 0.0) ? exp2(_2459 * _2444) : (2.0 - exp2(_2461 * _2444))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2454;
        }
        else
        {
            float _2591 = 1.0 / cbSceneParam._m0[80u].x;
            float _2592 = isnan(_2445) ? _2444 : (isnan(_2444) ? _2445 : max(_2444, _2445));
            float _2593 = isnan(_2445) ? _2444 : (isnan(_2444) ? _2445 : min(_2444, _2445));
            float _2602 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : min(_2592, 0.0));
            float _2603 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : min(_2593, 0.0));
            _2647 = ((abs(_2451 / _2439) * cbSceneParam._m0[80u].y) * ((((_2602 - _2603) * 2.0) - ((exp2(_2459 * (isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0)))) - exp2(_2459 * (isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0))))) * _2591)) - ((exp2(_2461 * _2602) - exp2(_2461 * _2603)) * _2591))) + (_2454 * cbSceneParam._m0[80u].z);
        }
        vec4 _2649 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2350, _2351, 1.0), 0.0);
        float _2658 = exp2((_2647 * (-1.44269502162933349609375)) * (1.0 - _2649.w));
        float _2659 = log2(_2658);
        float _2675 = log2(_2370);
        _2463 = (exp2(_2675 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2659 * cbSceneParam._m0[78u].x)) * _2649.x) / cbSceneParam._m0[78u].x)) + _2367;
        _2465 = (exp2(_2675 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2659 * cbSceneParam._m0[78u].y)) * _2649.y) / cbSceneParam._m0[78u].y)) + _2368;
        _2467 = (exp2(_2675 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2659 * cbSceneParam._m0[78u].z)) * _2649.z) / cbSceneParam._m0[78u].z)) + _2369;
        _2469 = _2658 * _2370;
    }
    else
    {
        _2463 = _2367;
        _2465 = _2368;
        _2467 = _2369;
        _2469 = _2370;
    }
    bool _2685;
    vec4 _2479;
    vec4 _2501;
    float _2503;
    float _2507;
    float _2508;
    float _2509;
    float _2512;
    float _2515;
    float _2518;
    float _2519;
    bool _2529;
    for (;;)
    {
        _2479 = cbMatDynParam._m0[0u];
        float _2481 = roundEven(_2479.y);
        bool _2482 = _2481 == 3.0;
        float _2483 = log2(_2469);
        float _2487 = exp2(_2483 * cbSceneParam._m0[78u].x);
        float _2488 = exp2(_2483 * cbSceneParam._m0[78u].y);
        float _2489 = exp2(_2483 * cbSceneParam._m0[78u].z);
        float _2490 = _2487 * _2329;
        float _2491 = _2488 * _2330;
        float _2492 = _2489 * _2331;
        float _2499 = _427 + (-0.5);
        _2501 = cbMtdParam._m0[1u];
        _2503 = _2501.y * _2499;
        float _2506 = (_2481 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2507 = _2506 * (_2482 ? _2490 : (_2490 + (cbSceneParam._m0[72u].w * _2463)));
        _2508 = _2506 * (_2482 ? _2491 : (_2491 + (cbSceneParam._m0[72u].w * _2465)));
        _2509 = _2506 * (_2482 ? _2492 : (_2492 + (cbSceneParam._m0[72u].w * _2467)));
        _2512 = ((_2337 * _2341) * _2487) * _2506;
        _2515 = ((_2338 * _2341) * _2488) * _2506;
        _2518 = ((_2339 * _2341) * _2489) * _2506;
        _2519 = _2499 * 0.999000012874603271484375;
        _2529 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2529)
        {
            if ((cbInstanceData._m0[_479 + 7u].x + _2519) < 0.5)
            {
                _2685 = true;
                break;
            }
        }
        uint _2626 = _480 + uint(_2479.w);
        if ((cbInstanceData._m0[_2626].w < 1.0) && ((cbInstanceData._m0[_2626].w + _2519) < 0.5))
        {
            _2685 = true;
            break;
        }
        if ((_2503 + 1.0) < _2501.x)
        {
            _2685 = true;
            break;
        }
        _2685 = false;
        break;
    }
    float _2890;
    if (_2685)
    {
        discard_state = true;
        _2890 = 0.0;
    }
    else
    {
        _2890 = cbInstanceData._m0[_2342].w;
    }
    SV_Target.x = _2507;
    SV_Target.y = _2508;
    SV_Target.z = _2509;
    SV_Target.w = _2890;
    SV_Target_1.x = _2512;
    SV_Target_1.y = _2515;
    SV_Target_1.z = _2518;
    SV_Target_1.w = cbInstanceData._m0[_2342].w;
    discard_exit();
}


