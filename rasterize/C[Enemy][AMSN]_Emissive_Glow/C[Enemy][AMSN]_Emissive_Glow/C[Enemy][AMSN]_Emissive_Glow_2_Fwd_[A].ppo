#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _926;
float _3361;
float _3362;
float _3363;
float _3364;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _230 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _236 = _230.x * cbMtdParam._m0[9u].x;
    float _237 = _230.y * cbMtdParam._m0[9u].y;
    float _238 = _230.z * cbMtdParam._m0[9u].z;
    vec4 _250 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _252 = _250.x;
    vec4 _264 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _268 = _264.z;
    float _272 = (_264.x * 2.0) + (-1.0);
    float _274 = (_264.y * 2.0) + (-1.0);
    float _275 = dot(vec2(_272, _274), vec2(_272, _274));
    float _3373 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _281 = sqrt(1.0 - (isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0))));
    vec4 _303 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _317 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3384 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _318 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
    float _326 = (((_318 * _318) * (3.0 - (_318 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _329 = fma(_281, _201 * NORMAL.x, fma(_274, _208 * TANGENT.x, (_194 * _187) * _272));
    float _332 = fma(_281, _201 * NORMAL.y, fma(_274, _208 * TANGENT.y, (_194 * _188) * _272));
    float _335 = fma(_281, _201 * NORMAL.z, fma(_274, _208 * TANGENT.z, (_194 * _189) * _272));
    float _339 = inversesqrt(dot(vec3(_329, _332, _335), vec3(_329, _332, _335)));
    float _340 = _339 * _329;
    float _341 = _339 * _332;
    float _342 = _339 * _335;
    float _3395 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _343 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
    float _3406 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3417 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3428 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3439 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _347 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
    float _363 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _404 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _414 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _404);
    float _415 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _404);
    float _416 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _404);
    float _420 = inversesqrt(dot(vec3(_414, _415, _416), vec3(_414, _415, _416)));
    float _421 = _414 * _420;
    float _422 = _415 * _420;
    float _423 = _416 * _420;
    vec4 _428 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _430 = _428.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _605 = sqrt(((_414 * _414) + (_415 * _415)) + (_416 * _416));
        float _611 = (cbMatDynParam._m0[5u].x * _605) + cbMatDynParam._m0[5u].y;
        float _3450 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
        float _612 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
        float _616 = (cbMatDynParam._m0[5u].z * _605) + cbMatDynParam._m0[5u].w;
        float _3461 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0))) - _612)) + _612) < ((_430 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _442 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _443 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _463 = fma(_342, cbSceneParam._m0[5u].z, fma(_341, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _340));
    float _466 = fma(_342, cbSceneParam._m0[6u].z, fma(_341, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _340));
    float _469 = fma(_342, cbSceneParam._m0[7u].z, fma(_341, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _340));
    uint _482 = uint(roundEven(NORMAL.w)) * 13u;
    uint _484 = _482 + 9u;
    uint _485 = _484 + uint(cbMatDynParam._m0[0u].w);
    float _491 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0)))) * cbInstanceData._m0[_485].x;
    float _492 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0)))) * cbInstanceData._m0[_485].y;
    float _493 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0)))) * cbInstanceData._m0[_485].z;
    float _3472 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _494 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
    float _3483 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _495 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
    float _3494 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _496 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
    float _497 = 1.0 - _347;
    float _498 = _494 * _497;
    float _499 = _495 * _497;
    float _500 = _496 * _497;
    float _505 = (_494 + (-0.039999999105930328369140625)) * _347;
    float _506 = (_495 + (-0.039999999105930328369140625)) * _347;
    float _507 = (_496 + (-0.039999999105930328369140625)) * _347;
    float _508 = _505 + 0.039999999105930328369140625;
    float _510 = _506 + 0.039999999105930328369140625;
    float _511 = _507 + 0.039999999105930328369140625;
    vec4 _520 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _442, cbSceneParam._m0[86u].y * _443));
    float _523 = _520.x * TEXCOORD.z;
    float _524 = dot(vec3(_340, _341, _342), vec3(_421, _422, _423));
    float _527 = _524 * 2.0;
    float _531 = (_527 * _340) - _421;
    float _532 = (_527 * _341) - _422;
    float _533 = (_527 * _342) - _423;
    float _537 = abs(dot(vec3(_421, _422, _423), vec3(_340, _341, _342)));
    float _3505 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _539 = sqrt(_343);
    float _551 = exp2((_539 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_539 * 3.0));
    float _557 = (1.0 - _551) * ((_539 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _558 = _551 * _539;
    float _586 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _590 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _925;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _650 = fma(_594, cbModelParam._m0[26u].z, fma(_590, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _586));
        float _654 = fma(_594, cbModelParam._m0[27u].z, fma(_590, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _586));
        float _658 = fma(_594, cbModelParam._m0[28u].z, fma(_590, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _586));
        float _683 = _586 + _340;
        float _684 = _590 + _341;
        float _685 = _594 + _342;
        float _695 = fma(_685, cbModelParam._m0[26u].z, fma(_684, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _683)) - _650;
        float _696 = fma(_685, cbModelParam._m0[27u].z, fma(_684, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _683)) - _654;
        float _697 = fma(_685, cbModelParam._m0[28u].z, fma(_684, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _683)) - _658;
        float _701 = inversesqrt(dot(vec3(_695, _696, _697), vec3(_695, _696, _697)));
        float _714 = ((_701 * _695) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_650 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _715 = ((_701 * _696) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_654 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _716 = ((_701 * _697) / cbModelParam._m0[34u].z) + ((((((_658 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _719 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        vec4 _726 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        vec4 _733 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        vec4 _740 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        float _753 = exp2((_719.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _753 * (_719.x + (-0.5));
        float _755 = _753 * (_719.y + (-0.5));
        float _756 = _753 * (_719.z + (-0.5));
        float _763 = exp2((_726.w + (-0.5)) * 20.0) * 2.0;
        float _764 = _763 * (_726.x + (-0.5));
        float _765 = _763 * (_726.y + (-0.5));
        float _766 = _763 * (_726.z + (-0.5));
        float _773 = exp2((_733.w + (-0.5)) * 20.0) * 2.0;
        float _774 = _773 * (_733.x + (-0.5));
        float _775 = _773 * (_733.y + (-0.5));
        float _776 = _773 * (_733.z + (-0.5));
        float _783 = exp2((_740.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_740.x + (-0.5));
        float _785 = _783 * (_740.y + (-0.5));
        float _786 = _783 * (_740.z + (-0.5));
        float _787 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _788 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _789 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _790 = _754 * 0.5;
        float _791 = _764 * 0.5;
        float _792 = _774 * 0.5;
        float _793 = dot(vec3(_790, _791, _792), vec3(_790, _791, _792));
        float _798 = (_793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_793);
        float _807 = (dot(vec3(_340, _341, _342), vec3(_798 * _790, _798 * _791, _798 * _792)) + 1.0) * 0.5;
        float _3531 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _817 = sqrt(((_791 * _791) + (_790 * _790)) + (_792 * _792)) / (_787 + 9.9999997473787516355514526367188e-06);
        float _3542 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _819 = _818 * 2.0;
        float _823 = (1.0 - _818) / (_818 + 1.0);
        float _3553 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _833 = ((((1.0 - _824) * (_819 + 2.0)) * exp2(log2(isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))) * (_819 + 1.0))) + _824) * _787;
        float _834 = _755 * 0.5;
        float _835 = _765 * 0.5;
        float _836 = _775 * 0.5;
        float _837 = dot(vec3(_834, _835, _836), vec3(_834, _835, _836));
        float _842 = (_837 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_837);
        float _850 = (dot(vec3(_340, _341, _342), vec3(_842 * _834, _842 * _835, _842 * _836)) + 1.0) * 0.5;
        float _3564 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _859 = sqrt(((_835 * _835) + (_834 * _834)) + (_836 * _836)) / (_788 + 9.9999997473787516355514526367188e-06);
        float _3575 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _861 = _860 * 2.0;
        float _865 = (1.0 - _860) / (_860 + 1.0);
        float _3586 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _875 = ((((1.0 - _866) * (_861 + 2.0)) * exp2(log2(isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))) * (_861 + 1.0))) + _866) * _788;
        float _876 = _756 * 0.5;
        float _877 = _766 * 0.5;
        float _878 = _776 * 0.5;
        float _879 = dot(vec3(_876, _877, _878), vec3(_876, _877, _878));
        float _884 = (_879 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_879);
        float _892 = (dot(vec3(_340, _341, _342), vec3(_884 * _876, _884 * _877, _884 * _878)) + 1.0) * 0.5;
        float _3597 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _901 = sqrt(((_877 * _877) + (_876 * _876)) + (_878 * _878)) / (_789 + 9.9999997473787516355514526367188e-06);
        float _3608 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _903 = _902 * 2.0;
        float _907 = (1.0 - _902) / (_902 + 1.0);
        float _3619 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _917 = ((((1.0 - _908) * (_903 + 2.0)) * exp2(log2(isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * (_903 + 1.0))) + _908) * _789;
        _925 = _756;
        _927 = _755;
        _928 = _754;
        _929 = _766;
        _930 = _765;
        _931 = _764;
        _932 = _776;
        _933 = _775;
        _934 = _774;
        _935 = _789;
        _936 = _788;
        _937 = _787;
        _938 = cbModelParam._m0[36u].z * (isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0)));
        _939 = cbModelParam._m0[36u].z * (isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0)));
        _940 = cbModelParam._m0[36u].z * (isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0)));
    }
    else
    {
        _925 = _926;
        _927 = _926;
        _928 = _926;
        _929 = _926;
        _930 = _926;
        _931 = _926;
        _932 = _926;
        _933 = _926;
        _934 = _926;
        _935 = _926;
        _936 = _926;
        _937 = _926;
        _938 = 0.0;
        _939 = 0.0;
        _940 = 0.0;
    }
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _969 = fma(_594, cbModelParam._m0[30u].z, fma(_590, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _586));
        float _973 = fma(_594, cbModelParam._m0[31u].z, fma(_590, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _586));
        float _977 = fma(_594, cbModelParam._m0[32u].z, fma(_590, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _586));
        float _1000 = _586 + _340;
        float _1001 = _590 + _341;
        float _1002 = _594 + _342;
        float _1012 = fma(_1002, cbModelParam._m0[30u].z, fma(_1001, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1000)) - _969;
        float _1013 = fma(_1002, cbModelParam._m0[31u].z, fma(_1001, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1000)) - _973;
        float _1014 = fma(_1002, cbModelParam._m0[32u].z, fma(_1001, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1000)) - _977;
        float _1018 = inversesqrt(dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014)));
        float _1031 = ((_1018 * _1012) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_969 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1032 = ((_1018 * _1013) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_973 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1033 = ((_1018 * _1014) / cbModelParam._m0[35u].z) + ((((((_977 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        float _1068 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1035.x + (-0.5));
        float _1070 = _1068 * (_1035.y + (-0.5));
        float _1071 = _1068 * (_1035.z + (-0.5));
        float _1078 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1042.x + (-0.5));
        float _1080 = _1078 * (_1042.y + (-0.5));
        float _1081 = _1078 * (_1042.z + (-0.5));
        float _1088 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1049.x + (-0.5));
        float _1090 = _1088 * (_1049.y + (-0.5));
        float _1091 = _1088 * (_1049.z + (-0.5));
        float _1098 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1056.x + (-0.5));
        float _1100 = _1098 * (_1056.y + (-0.5));
        float _1101 = _1098 * (_1056.z + (-0.5));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = _1069 * 0.5;
        float _1106 = _1079 * 0.5;
        float _1107 = _1089 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_340, _341, _342), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3660 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3671 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3682 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_1132 + 1.0))) + _1137) * _1102;
        float _1147 = _1070 * 0.5;
        float _1148 = _1080 * 0.5;
        float _1149 = _1090 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_340, _341, _342), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3693 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _3704 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3715 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * (_1174 + 1.0))) + _1179) * _1103;
        float _1189 = _1071 * 0.5;
        float _1190 = _1081 * 0.5;
        float _1191 = _1091 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_340, _341, _342), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3726 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _3737 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3748 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_1216 + 1.0))) + _1221) * _1104;
        _1238 = _1071;
        _1239 = _1070;
        _1240 = _1069;
        _1241 = _1081;
        _1242 = _1080;
        _1243 = _1079;
        _1244 = _1091;
        _1245 = _1090;
        _1246 = _1089;
        _1247 = _1104;
        _1248 = _1103;
        _1249 = _1102;
        _1250 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
        _1251 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
        _1252 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
    }
    else
    {
        _1238 = _926;
        _1239 = _926;
        _1240 = _926;
        _1241 = _926;
        _1242 = _926;
        _1243 = _926;
        _1244 = _926;
        _1245 = _926;
        _1246 = _926;
        _1247 = _926;
        _1248 = _926;
        _1249 = _926;
        _1250 = 0.0;
        _1251 = 0.0;
        _1252 = 0.0;
    }
    float _1262 = (cbModelParam._m0[1u].x * (_1250 - _938)) + _938;
    float _1263 = (cbModelParam._m0[1u].x * (_1251 - _939)) + _939;
    float _1264 = (cbModelParam._m0[1u].x * (_1252 - _940)) + _940;
    float _1285 = fma(_1264, cbSceneParam._m0[89u].z, fma(_1263, cbSceneParam._m0[89u].y, _1262 * cbSceneParam._m0[89u].x));
    float _1288 = fma(_1264, cbSceneParam._m0[90u].z, fma(_1263, cbSceneParam._m0[90u].y, _1262 * cbSceneParam._m0[90u].x));
    float _1291 = fma(_1264, cbSceneParam._m0[91u].z, fma(_1263, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1262));
    float _1306 = _531 * 0.5;
    float _1307 = _532 * 0.5;
    float _1308 = _533 * 0.5;
    float _1309 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_1240, _1243, _1246, _1249));
    float _1312 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_1239, _1242, _1245, _1248));
    float _1315 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_1238, _1241, _1244, _1247));
    float _1349;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1322 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_925, _929, _932, _935));
        float _1326 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_927, _930, _933, _936));
        float _1330 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_928, _931, _934, _937));
        float _1337 = dot(vec4(cbModelParam._m0[39u]), vec4(_1306, _1307, _1308, 1.0));
        _1349 = dot(vec3(isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)), isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)), isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1337) ? 0.0 : (isnan(0.0) ? _1337 : max(0.0, _1337))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1349 = 1.0;
    }
    float _1360;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1351 = dot(vec4(cbModelParam._m0[40u]), vec4(_1306, _1307, _1308, 1.0));
        _1360 = dot(vec3(isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)), isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1351) ? 0.0 : (isnan(0.0) ? _1351 : max(0.0, _1351))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1360 = 1.0;
    }
    float _1364 = (_1360 * cbModelParam._m0[1u].x) + (_1349 * (1.0 - cbModelParam._m0[1u].x));
    float _1374 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _343);
    float _1375 = isnan(_1374) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1374 : min(cbModelParam._m0[25u].z, _1374));
    float _1456;
    float _1458;
    float _1460;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1423 = fma(_594, cbModelParam._m0[13u].z, fma(_590, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _586)) + cbModelParam._m0[13u].w;
        float _1427 = fma(_594, cbModelParam._m0[14u].z, fma(_590, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _586)) + cbModelParam._m0[14u].w;
        float _1431 = fma(_594, cbModelParam._m0[15u].z, fma(_590, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _586)) + cbModelParam._m0[15u].w;
        float _1434 = fma(_533, cbModelParam._m0[13u].z, fma(_532, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _531));
        float _1437 = fma(_533, cbModelParam._m0[14u].z, fma(_532, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _531));
        float _1440 = fma(_533, cbModelParam._m0[15u].z, fma(_532, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _531));
        float _1468;
        if (_1434 > 0.0)
        {
            _1468 = abs((1.0 - _1423) / _1434);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1434 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1423 + 1.0) / _1434);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1468 = frontier_phi_17_15_ladder;
        }
        float _1674;
        if (_1437 > 0.0)
        {
            _1674 = abs((1.0 - _1427) / _1437);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1437 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1427 + 1.0) / _1437);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1674 = frontier_phi_26_22_ladder;
        }
        float _1928;
        if (_1440 > 0.0)
        {
            _1928 = abs((1.0 - _1431) / _1440);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1440 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1431 + 1.0) / _1440);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1928 = frontier_phi_38_33_ladder;
        }
        float _1930 = isnan(_1674) ? _1468 : (isnan(_1468) ? _1674 : min(_1468, _1674));
        float _1931 = isnan(_1928) ? _1930 : (isnan(_1930) ? _1928 : min(_1930, _1928));
        float _1935 = (_1931 * _1434) + _1423;
        float _1936 = (_1931 * _1437) + _1427;
        float _1937 = (_1931 * _1440) + _1431;
        float _1938 = _1931 * 9.9999997473787516355514526367188e-05;
        float _1940 = (-1.0) - _1938;
        float _1942 = _1938 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1937 > _1942) || ((_1937 < _1940) || ((_1936 > _1942) || ((_1936 < _1940) || ((_1935 < _1940) || (_1935 > _1942))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2065 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1937, cbModelParam._m0[9u].z, fma(_1936, cbModelParam._m0[9u].y, _1935 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1937, cbModelParam._m0[10u].z, fma(_1936, cbModelParam._m0[10u].y, _1935 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1937, cbModelParam._m0[11u].z, fma(_1936, cbModelParam._m0[11u].y, _1935 * cbModelParam._m0[11u].x))), _1375);
            frontier_phi_16_38_ladder = _2065.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2065.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2065.x * cbModelParam._m0[1u].y;
        }
        _1456 = frontier_phi_16_38_ladder_2;
        _1458 = frontier_phi_16_38_ladder_1;
        _1460 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1444 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_531, _532, _533), _1375);
        _1456 = _1444.x * cbModelParam._m0[1u].y;
        _1458 = _1444.y * cbModelParam._m0[1u].y;
        _1460 = _1444.z * cbModelParam._m0[1u].y;
    }
    float _1464 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _343);
    float _1465 = isnan(_1464) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1464 : min(cbModelParam._m0[25u].w, _1464));
    float _1557;
    float _1559;
    float _1561;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1521 = fma(_594, cbModelParam._m0[21u].z, fma(_590, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _586)) + cbModelParam._m0[21u].w;
        float _1525 = fma(_594, cbModelParam._m0[22u].z, fma(_590, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _586)) + cbModelParam._m0[22u].w;
        float _1529 = fma(_594, cbModelParam._m0[23u].z, fma(_590, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _586)) + cbModelParam._m0[23u].w;
        float _1532 = fma(_533, cbModelParam._m0[21u].z, fma(_532, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _531));
        float _1535 = fma(_533, cbModelParam._m0[22u].z, fma(_532, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _531));
        float _1538 = fma(_533, cbModelParam._m0[23u].z, fma(_532, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _531));
        float _1679;
        if (_1532 > 0.0)
        {
            _1679 = abs((1.0 - _1521) / _1532);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1521 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1679 = frontier_phi_28_24_ladder;
        }
        float _1955;
        if (_1535 > 0.0)
        {
            _1955 = abs((1.0 - _1525) / _1535);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1525 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1955 = frontier_phi_40_35_ladder;
        }
        float _2168;
        if (_1538 > 0.0)
        {
            _2168 = abs((1.0 - _1529) / _1538);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1529 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2168 = frontier_phi_49_46_ladder;
        }
        float _2170 = isnan(_1955) ? _1679 : (isnan(_1679) ? _1955 : min(_1679, _1955));
        float _2171 = isnan(_2168) ? _2170 : (isnan(_2170) ? _2168 : min(_2170, _2168));
        float _2175 = (_2171 * _1532) + _1521;
        float _2176 = (_2171 * _1535) + _1525;
        float _2177 = (_2171 * _1538) + _1529;
        float _2178 = _2171 * 9.9999997473787516355514526367188e-05;
        float _2179 = (-1.0) - _2178;
        float _2181 = _2178 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2177 > _2181) || ((_2177 < _2179) || ((_2176 > _2181) || ((_2176 < _2179) || ((_2175 < _2179) || (_2175 > _2181))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2414 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2177, cbModelParam._m0[17u].z, fma(_2176, cbModelParam._m0[17u].y, _2175 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2177, cbModelParam._m0[18u].z, fma(_2176, cbModelParam._m0[18u].y, _2175 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2177, cbModelParam._m0[19u].z, fma(_2176, cbModelParam._m0[19u].y, _2175 * cbModelParam._m0[19u].x))), _1465);
            frontier_phi_25_49_ladder = _2414.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2414.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2414.x * cbModelParam._m0[1u].z;
        }
        _1557 = frontier_phi_25_49_ladder_2;
        _1559 = frontier_phi_25_49_ladder_1;
        _1561 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1541 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_531, _532, _533), _1465);
        _1557 = _1541.x * cbModelParam._m0[1u].z;
        _1559 = _1541.y * cbModelParam._m0[1u].z;
        _1561 = _1541.z * cbModelParam._m0[1u].z;
    }
    float _1574 = (((_557 * _508) + _558) * _523) * ((cbModelParam._m0[1u].w * (_1557 - _1456)) + _1456);
    float _1576 = (((_557 * _510) + _558) * _523) * ((cbModelParam._m0[1u].w * (_1559 - _1458)) + _1458);
    float _1578 = (((_557 * _511) + _558) * _523) * ((cbModelParam._m0[1u].w * (_1561 - _1460)) + _1460);
    float _1581 = fma(_1578, cbSceneParam._m0[89u].z, fma(_1576, cbSceneParam._m0[89u].y, _1574 * cbSceneParam._m0[89u].x));
    float _1584 = fma(_1578, cbSceneParam._m0[90u].z, fma(_1576, cbSceneParam._m0[90u].y, _1574 * cbSceneParam._m0[90u].x));
    float _1587 = fma(_1578, cbSceneParam._m0[91u].z, fma(_1576, cbSceneParam._m0[91u].y, _1574 * cbSceneParam._m0[91u].x));
    uvec4 _1597 = floatBitsToUint(cbInstanceData._m0[_482 + 5u]);
    uint _1599 = _1597.x * 14u;
    uint _1600 = _1599 + 13u;
    float _1607 = _523 + (-1.0);
    float _1612 = (cbLight._m0[_1600].x * _1607) + 1.0;
    float _1613 = (cbLight._m0[_1600].y * _1607) + 1.0;
    float _1614 = (cbLight._m0[_1600].z * _1607) + 1.0;
    float _1615 = (cbLight._m0[_1600].w * _1607) + 1.0;
    uint _1616 = _1599 + 5u;
    float _1622 = isnan(1.0) ? _1613 : (isnan(_1613) ? 1.0 : min(_1613, 1.0));
    uint _1626 = _1599 + 4u;
    float _1633 = isnan(1.0) ? _1612 : (isnan(_1612) ? 1.0 : min(_1612, 1.0));
    uint _1637 = _1599 | 1u;
    float _1648 = dot(vec3(cbLight._m0[_1599].xyz), vec3(_340, _341, _342));
    float _1651 = dot(vec3(cbLight._m0[_1637].xyz), vec3(_340, _341, _342));
    float _3884 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
    float _3895 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
    float _1656 = (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * 0.3183098733425140380859375;
    float _1658 = (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * 0.3183098733425140380859375;
    float _1665 = ((cbLight._m0[_1616].x * _1622) * _1658) + ((cbLight._m0[_1626].x * _1633) * _1656);
    float _1666 = ((_1622 * cbLight._m0[_1616].y) * _1658) + ((_1633 * cbLight._m0[_1626].y) * _1656);
    float _1667 = ((_1622 * cbLight._m0[_1616].z) * _1658) + ((_1633 * cbLight._m0[_1626].z) * _1656);
    uvec4 _1671 = floatBitsToUint(cbLight._m0[_1599 + 12u]);
    bool _1673 = _1671.x == 0u;
    float _1684;
    float _1686;
    float _1688;
    if (_1673)
    {
        _1684 = _1665;
        _1686 = _1666;
        _1688 = _1667;
    }
    else
    {
        uint _1692 = _1599 + 6u;
        float _1708 = (dot(vec3(cbLight._m0[_1599 + 2u].xyz), vec3(_340, _341, _342)) * 0.5) + 0.5;
        float _1709 = _1708 * _1708;
        float _3906 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1711 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
        _1684 = (((cbLight._m0[_1692].x * 0.3183098733425140380859375) * _1710) * _1711) + _1665;
        _1686 = (((cbLight._m0[_1692].y * 0.3183098733425140380859375) * _1710) * _1711) + _1666;
        _1688 = (((cbLight._m0[_1692].z * 0.3183098733425140380859375) * _1710) * _1711) + _1667;
    }
    bool _1691 = _1671.y == 0u;
    float _1729;
    float _1731;
    float _1733;
    if (_1691)
    {
        _1729 = _1684;
        _1731 = _1686;
        _1733 = _1688;
    }
    else
    {
        uint _1899 = _1599 + 7u;
        float _1915 = (dot(vec3(cbLight._m0[_1599 + 3u].xyz), vec3(_340, _341, _342)) * 0.5) + 0.5;
        float _1916 = _1915 * _1915;
        float _3922 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
        float _1917 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1918 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _1729 = (((cbLight._m0[_1899].x * 0.3183098733425140380859375) * _1917) * _1918) + _1684;
        _1731 = (((cbLight._m0[_1899].y * 0.3183098733425140380859375) * _1917) * _1918) + _1686;
        _1733 = (((cbLight._m0[_1899].z * 0.3183098733425140380859375) * _1917) * _1918) + _1688;
    }
    uint _1736 = _1599 + 8u;
    float _1749 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1599].w)) * _343) * 0.949999988079071044921875);
    float _1750 = _1749 * _1749;
    float _1751 = cbLight._m0[_1599].x + _421;
    float _1752 = cbLight._m0[_1599].y + _422;
    float _1753 = cbLight._m0[_1599].z + _423;
    float _1757 = inversesqrt(dot(vec3(_1751, _1752, _1753), vec3(_1751, _1752, _1753)));
    float _1758 = _1757 * _1751;
    float _1759 = _1757 * _1752;
    float _1760 = _1757 * _1753;
    float _1761 = dot(vec3(_340, _341, _342), vec3(cbLight._m0[_1599].xyz));
    float _3938 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1764 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _3949 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _1765 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _1766 = dot(vec3(_340, _341, _342), vec3(_1758, _1759, _1760));
    float _3960 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1769 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _1770 = dot(vec3(cbLight._m0[_1599].xyz), vec3(_1758, _1759, _1760));
    float _3971 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1774 = _1750 * _1750;
    float _1778 = ((_1769 * _1769) * (_1774 + (-1.0))) + 1.0;
    float _1786 = exp2(log2(1.0 - (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) * 5.0);
    float _1787 = 0.959999978542327880859375 - _505;
    float _1789 = 0.959999978542327880859375 - _506;
    float _1790 = 0.959999978542327880859375 - _507;
    float _1797 = 1.0 - _1750;
    float _1808 = (0.5 / (((_1765 * ((_1764 * _1797) + _1750)) + 9.9999999392252902907785028219223e-09) + (((_1765 * _1797) + _1750) * _1764))) * _1764;
    float _3982 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1810 = (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1774 / ((_1778 * _1778) * 3.141590118408203125));
    uint _1821 = _1599 + 9u;
    float _1832 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1637].w)) * _343) * 0.949999988079071044921875);
    float _1833 = _1832 * _1832;
    float _1834 = cbLight._m0[_1637].x + _421;
    float _1835 = cbLight._m0[_1637].y + _422;
    float _1836 = cbLight._m0[_1637].z + _423;
    float _1840 = inversesqrt(dot(vec3(_1834, _1835, _1836), vec3(_1834, _1835, _1836)));
    float _1841 = _1840 * _1834;
    float _1842 = _1840 * _1835;
    float _1843 = _1840 * _1836;
    float _1844 = dot(vec3(_340, _341, _342), vec3(cbLight._m0[_1637].xyz));
    float _3993 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1847 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _1848 = dot(vec3(_340, _341, _342), vec3(_1841, _1842, _1843));
    float _4004 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1851 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _1852 = dot(vec3(cbLight._m0[_1637].xyz), vec3(_1841, _1842, _1843));
    float _4015 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1856 = _1833 * _1833;
    float _1860 = ((_1851 * _1851) * (_1856 + (-1.0))) + 1.0;
    float _1867 = exp2(log2(1.0 - (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) * 5.0);
    float _1874 = 1.0 - _1833;
    float _1884 = (0.5 / (((_1765 * ((_1847 * _1874) + _1833)) + 9.9999999392252902907785028219223e-09) + (((_1765 * _1874) + _1833) * _1847))) * _1847;
    float _4026 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1886 = (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1856 / ((_1860 * _1860) * 3.141590118408203125));
    float _1896 = (((((_1867 * _1787) + _508) * cbLight._m0[_1821].x) * _1886) * _1622) + (((((_1786 * _1787) + _508) * cbLight._m0[_1736].x) * _1810) * _1633);
    float _1897 = (((((_1867 * _1789) + _510) * cbLight._m0[_1821].y) * _1886) * _1622) + (((((_1786 * _1789) + _510) * cbLight._m0[_1736].y) * _1810) * _1633);
    float _1898 = (((((_1867 * _1790) + _511) * cbLight._m0[_1821].z) * _1886) * _1622) + (((((_1786 * _1790) + _511) * cbLight._m0[_1736].z) * _1810) * _1633);
    float _1960;
    float _1962;
    float _1964;
    if (_1673)
    {
        _1960 = _1896;
        _1962 = _1897;
        _1964 = _1898;
    }
    else
    {
        uint _1966 = _1599 + 2u;
        uint _1970 = _1599 + 10u;
        float _1984 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1966].w)) * _343) * 0.949999988079071044921875);
        float _1985 = _1984 * _1984;
        float _1986 = cbLight._m0[_1966].x + _421;
        float _1987 = cbLight._m0[_1966].y + _422;
        float _1988 = cbLight._m0[_1966].z + _423;
        float _1992 = inversesqrt(dot(vec3(_1986, _1987, _1988), vec3(_1986, _1987, _1988)));
        float _1993 = _1992 * _1986;
        float _1994 = _1992 * _1987;
        float _1995 = _1992 * _1988;
        float _1996 = dot(vec3(_340, _341, _342), vec3(cbLight._m0[_1966].xyz));
        float _4037 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _1999 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _2000 = dot(vec3(_340, _341, _342), vec3(_1993, _1994, _1995));
        float _4048 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        float _2003 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _2004 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_1993, _1994, _1995));
        float _4059 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2008 = _1985 * _1985;
        float _2012 = ((_2003 * _2003) * (_2008 + (-1.0))) + 1.0;
        float _2019 = exp2(log2(1.0 - (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * 5.0);
        float _2026 = 1.0 - _1985;
        float _2036 = (0.5 / (((_1765 * ((_1999 * _2026) + _1985)) + 9.9999999392252902907785028219223e-09) + (((_1765 * _2026) + _1985) * _1999))) * _1999;
        float _4070 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2038 = (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_2008 / ((_2012 * _2012) * 3.141590118408203125));
        float _2039 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
        _1960 = (((((_2019 * _1787) + _508) * cbLight._m0[_1970].x) * _2038) * _2039) + _1896;
        _1962 = (((((_2019 * _1789) + _510) * cbLight._m0[_1970].y) * _2038) * _2039) + _1897;
        _1964 = (((((_2019 * _1790) + _511) * cbLight._m0[_1970].z) * _2038) * _2039) + _1898;
    }
    float _2074;
    float _2076;
    float _2078;
    if (_1691)
    {
        _2074 = _1960;
        _2076 = _1962;
        _2078 = _1964;
    }
    else
    {
        uint _2085 = _1599 + 3u;
        uint _2089 = _1599 + 11u;
        float _2103 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2085].w)) * _343) * 0.949999988079071044921875);
        float _2104 = _2103 * _2103;
        float _2105 = cbLight._m0[_2085].x + _421;
        float _2106 = cbLight._m0[_2085].y + _422;
        float _2107 = cbLight._m0[_2085].z + _423;
        float _2111 = inversesqrt(dot(vec3(_2105, _2106, _2107), vec3(_2105, _2106, _2107)));
        float _2112 = _2111 * _2105;
        float _2113 = _2111 * _2106;
        float _2114 = _2111 * _2107;
        float _2115 = dot(vec3(_340, _341, _342), vec3(cbLight._m0[_2085].xyz));
        float _4086 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2118 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _2119 = dot(vec3(_340, _341, _342), vec3(_2112, _2113, _2114));
        float _4097 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2122 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _2123 = dot(vec3(cbLight._m0[_2085].xyz), vec3(_2112, _2113, _2114));
        float _4108 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2127 = _2104 * _2104;
        float _2131 = ((_2122 * _2122) * (_2127 + (-1.0))) + 1.0;
        float _2138 = exp2(log2(1.0 - (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) * 5.0);
        float _2145 = 1.0 - _2104;
        float _2155 = (0.5 / (((_1765 * ((_2118 * _2145) + _2104)) + 9.9999999392252902907785028219223e-09) + (((_1765 * _2145) + _2104) * _2118))) * _2118;
        float _4119 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2157 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_2127 / ((_2131 * _2131) * 3.141590118408203125));
        float _2158 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _2074 = (((((_2138 * _1787) + _508) * cbLight._m0[_2089].x) * _2157) * _2158) + _1960;
        _2076 = (((((_2138 * _1789) + _510) * cbLight._m0[_2089].y) * _2157) * _2158) + _1962;
        _2078 = (((((_2138 * _1790) + _511) * cbLight._m0[_2089].z) * _2157) * _2158) + _1964;
    }
    float _2293;
    float _2295;
    float _2297;
    float _2299;
    float _2301;
    float _2303;
    if (_1597.y == 0u)
    {
        float _2233 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2234 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2233;
        float _2235 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2233;
        float _2236 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2233;
        uvec4 _2248 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2249 = _2248.x;
        uint _2260 = uint((float(_2248.y) * floor(float(uint(cbSceneParam._m0[85u].y * _443) / _2249))) + floor(float(uint(cbSceneParam._m0[85u].x * _442) / _2249)));
        float _2270 = (log2(_2236 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2271 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        uint _2274 = uint(isnan(14.0) ? _2271 : (isnan(_2271) ? 14.0 : min(_2271, 14.0)));
        uvec4 _2279 = texelFetch(g_lightClusterGridBuffer, int(((_2274 << 2u) + (_2260 << 6u)) >> 2u));
        uint _2280 = _2279.x;
        uint _2281 = _2248.z;
        float _2419;
        float _2421;
        float _2423;
        float _2425;
        float _2427;
        float _2429;
        if (((((1u << ((_2281 >> 4u) & 15u)) + 4294967295u) & _2280) == 0u) || ((_2281 & 240u) == 0u))
        {
            _2419 = 0.0;
            _2421 = 0.0;
            _2423 = 0.0;
            _2425 = 0.0;
            _2427 = 0.0;
            _2429 = 0.0;
        }
        else
        {
            float _2420;
            float _2422;
            float _2424;
            float _2426;
            float _2428;
            float _2430;
            float _2581 = 0.0;
            float _2582 = 0.0;
            float _2583 = 0.0;
            float _2584 = 0.0;
            float _2585 = 0.0;
            float _2586 = 0.0;
            uint _2587 = 0u;
            uint _2596;
            bool _2597;
            for (;;)
            {
                _2596 = texelFetch(g_lightClassification, int((((_2274 << 5u) + (_2260 << 9u)) + (_2587 << 2u)) >> 2u)).x;
                _2597 = _2596 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2597)
                {
                    frontier_phi_66_pred = _2581;
                    frontier_phi_66_pred_1 = _2586;
                    frontier_phi_66_pred_2 = _2585;
                    frontier_phi_66_pred_3 = _2584;
                    frontier_phi_66_pred_4 = _2583;
                    frontier_phi_66_pred_5 = _2582;
                }
                else
                {
                    float _2726;
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    uint _2732;
                    _2726 = _2581;
                    _2727 = _2582;
                    _2728 = _2583;
                    _2729 = _2584;
                    _2730 = _2585;
                    _2731 = _2586;
                    _2732 = _2596;
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    for (;;)
                    {
                        uint _2736 = uint(findLSB(_2732)) + (_2587 << 5u);
                        uint _2733 = (_2732 + 4294967295u) & _2732;
                        uint _2738 = _2736 * 48u;
                        vec4 _2752 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2738)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 3u)).x));
                        uint _2758 = (_2736 * 48u) + 4u;
                        vec4 _2771 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2758)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 3u)).x));
                        uint _2777 = (_2736 * 48u) + 8u;
                        vec3 _2788 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2777)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 2u)).x));
                        float _2792 = _2752.x - _2234;
                        float _2793 = _2752.y - _2235;
                        float _2794 = _2752.z - _2236;
                        float _2795 = dot(vec3(_2792, _2793, _2794), vec3(_2792, _2793, _2794));
                        float _2798 = inversesqrt(_2795);
                        float _2799 = _2798 * _2792;
                        float _2800 = _2798 * _2793;
                        float _2801 = _2798 * _2794;
                        float _2802 = dot(vec3(_463, _466, _469), vec3(_2799, _2800, _2801));
                        float _2807 = 1.0 - (_2795 * _2752.w);
                        float _4145 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
                        float _2808 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                        float _2809 = sqrt(_2795) * _2771.w;
                        float _2812 = 1.39999997615814208984375 / (_2809 + 1.39999997615814208984375);
                        float _2813 = _2812 * _2812;
                        float _2816 = ((1.0 - _2813) * _2802) + _2813;
                        float _2819 = _2809 * _2809;
                        float _2823 = ((isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0))) * _2808) / ((_2819 * 0.699999988079071044921875) + 1.0);
                        float _2827 = (-0.0) - _2234;
                        float _2828 = (-0.0) - _2235;
                        float _2829 = (-0.0) - _2236;
                        float _2833 = inversesqrt(dot(vec3(_2827, _2828, _2829), vec3(_2827, _2828, _2829)));
                        float _2834 = _2833 * _2827;
                        float _2835 = _2833 * _2828;
                        float _2836 = _2833 * _2829;
                        float _2844 = exp2(log2(1.0 / ((_2819 * 3.5) + 5.0)) * 0.25);
                        float _2845 = 1.0 - _539;
                        float _2852 = sqrt(1.0 - ((1.0 - (_2845 * _2845)) * (1.0 - (_2844 * _2844))));
                        float _2853 = _2852 * _2852;
                        float _2854 = _2853 * _2853;
                        float _2855 = _2834 + _2799;
                        float _2856 = _2835 + _2800;
                        float _2857 = _2836 + _2801;
                        float _2861 = inversesqrt(dot(vec3(_2855, _2856, _2857), vec3(_2855, _2856, _2857)));
                        float _2865 = dot(vec3(_463, _466, _469), vec3(_2834, _2835, _2836));
                        float _4161 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
                        float _2868 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
                        float _2869 = dot(vec3(_463, _466, _469), vec3(_2861 * _2855, _2861 * _2856, _2861 * _2857));
                        float _4172 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2872 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                        float _2876 = ((_2872 * _2872) * (_2854 + (-1.0))) + 1.0;
                        float _2877 = _2812 * _2853;
                        float _2878 = _2877 * _2877;
                        float _2881 = ((1.0 - _2878) * _2802) + _2878;
                        float _4183 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2882 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                        float _2883 = 1.0 - _2853;
                        float _2893 = (0.5 / (((_2882 * ((_2868 * _2883) + _2853)) + 9.9999999392252902907785028219223e-09) + (((_2882 * _2883) + _2853) * _2868))) * _2882;
                        float _4194 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
                        float _2904 = (((_2854 * 3.1415927410125732421875) * (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) / ((_2876 * _2876) * ((_2819 * 2.1991131305694580078125) + 3.141590118408203125))) * _2808;
                        _2656 = (_2823 * _2771.x) + _2729;
                        _2657 = (_2823 * _2771.y) + _2730;
                        _2658 = (_2823 * _2771.z) + _2731;
                        _2653 = (_2904 * _2788.x) + _2726;
                        _2654 = (_2904 * _2788.y) + _2727;
                        _2655 = (_2904 * _2788.z) + _2728;
                        if (_2733 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2726 = _2653;
                            _2727 = _2654;
                            _2728 = _2655;
                            _2729 = _2656;
                            _2730 = _2657;
                            _2731 = _2658;
                            _2732 = _2733;
                        }
                    }
                    frontier_phi_66_pred = _2653;
                    frontier_phi_66_pred_1 = _2658;
                    frontier_phi_66_pred_2 = _2657;
                    frontier_phi_66_pred_3 = _2656;
                    frontier_phi_66_pred_4 = _2655;
                    frontier_phi_66_pred_5 = _2654;
                }
                _2420 = frontier_phi_66_pred;
                _2430 = frontier_phi_66_pred_1;
                _2428 = frontier_phi_66_pred_2;
                _2426 = frontier_phi_66_pred_3;
                _2424 = frontier_phi_66_pred_4;
                _2422 = frontier_phi_66_pred_5;
                uint _2588 = _2587 + 1u;
                if (_2588 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2581 = _2420;
                    _2582 = _2422;
                    _2583 = _2424;
                    _2584 = _2426;
                    _2585 = _2428;
                    _2586 = _2430;
                    _2587 = _2588;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2419 = _2420;
            _2421 = _2422;
            _2423 = _2424;
            _2425 = _2426;
            _2427 = _2428;
            _2429 = _2430;
        }
        uvec4 _2433 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2434 = _2433.z;
        uint _2436 = (_2434 >> 8u) & 15u;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        if (((4294967295u << _2436) & _2280) == 0u)
        {
            _2549 = _2419;
            _2551 = _2421;
            _2553 = _2423;
            _2555 = _2425;
            _2557 = _2427;
            _2559 = _2429;
        }
        else
        {
            float _2574 = inversesqrt(dot(vec3(_2234, _2235, _2236), vec3(_2234, _2235, _2236)));
            float _2575 = _2574 * _2234;
            float _2576 = _2574 * _2235;
            float _2577 = _2574 * _2236;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2436 < ((_2434 >> 12u) & 15u))
            {
                float _2550;
                float _2552;
                float _2554;
                float _2556;
                float _2558;
                float _2560;
                float _2709 = _2419;
                float _2710 = _2421;
                float _2711 = _2423;
                float _2712 = _2425;
                float _2713 = _2427;
                float _2714 = _2429;
                uint _2715 = _2436;
                uint _2724;
                bool _2725;
                for (;;)
                {
                    _2724 = texelFetch(g_lightClassification, int((((_2274 << 5u) + (_2260 << 9u)) + (_2715 << 2u)) >> 2u)).x;
                    _2725 = _2724 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2725)
                    {
                        frontier_phi_77_pred = _2714;
                        frontier_phi_77_pred_1 = _2713;
                        frontier_phi_77_pred_2 = _2712;
                        frontier_phi_77_pred_3 = _2711;
                        frontier_phi_77_pred_4 = _2710;
                        frontier_phi_77_pred_5 = _2709;
                    }
                    else
                    {
                        float _2918;
                        float _2919;
                        float _2920;
                        float _2921;
                        float _2922;
                        float _2923;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _2931 = _2709;
                        float _2932 = _2710;
                        float _2933 = _2711;
                        float _2934 = _2712;
                        float _2935 = _2713;
                        float _2936 = _2714;
                        uint _2937 = _2724;
                        uint _2938;
                        vec4 _2963;
                        float _2964;
                        vec4 _2979;
                        vec3 _2991;
                        vec4 _3007;
                        vec4 _3023;
                        float _3070;
                        bool _3071;
                        for (;;)
                        {
                            uint _2948 = ((_2715 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2937));
                            _2938 = (_2937 + 4294967295u) & _2937;
                            uint _2950 = _2948 * 40u;
                            _2963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 3u)).x));
                            _2964 = _2963.w;
                            uint _2966 = (_2948 * 40u) + 4u;
                            _2979 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 3u)).x));
                            uint _2981 = (_2948 * 40u) + 8u;
                            _2991 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x));
                            uint _2994 = (_2948 * 40u) + 16u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            uint _3010 = (_2948 * 40u) + 20u;
                            _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            uint _3026 = (_2948 * 40u) + 24u;
                            vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            uint _3045 = (_2948 * 40u) + 28u;
                            vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            _3070 = fma(_2236, _3058.z, fma(_2235, _3058.y, _3058.x * _2234)) + _3058.w;
                            _3071 = !((fma(_2236, _3039.z, fma(_2235, _3039.y, _3039.x * _2234)) + _3039.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3071)
                            {
                                float _3098 = _2963.x - _2234;
                                float _3099 = _2963.y - _2235;
                                float _3100 = _2963.z - _2236;
                                float _3101 = dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100));
                                float _3104 = inversesqrt(_3101);
                                float _3105 = _3104 * _3098;
                                float _3106 = _3104 * _3099;
                                float _3107 = _3104 * _3100;
                                float _3111 = 1.0 - (_3101 / (_2964 * _2964));
                                float _4205 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3112 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                                float _3116 = sqrt(_3101) * _2979.w;
                                float _3118 = 1.39999997615814208984375 / (_3116 + 1.39999997615814208984375);
                                float _3119 = _3118 * _3118;
                                float _3122 = ((1.0 - _3119) * dot(vec3(_3105, _3106, _3107), vec3(_463, _466, _469))) + _3119;
                                float _3125 = _3116 * _3116;
                                float _3129 = (fma(_2236, _3007.z, fma(_2235, _3007.y, _3007.x * _2234)) + _3007.w) / _3070;
                                float _3130 = (fma(_2236, _3023.z, fma(_2235, _3023.y, _3023.x * _2234)) + _3023.w) / _3070;
                                float _3134 = 1.0 - dot(vec2(_3129, _3130), vec2(_3129, _3130));
                                float _4221 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3135 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
                                float _3136 = _3135 * (((isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0))) * _3112) / ((_3125 * 0.699999988079071044921875) + 1.0));
                                float _3148 = exp2(log2(1.0 / ((_3125 * 3.5) + 5.0)) * 0.25);
                                float _3149 = 1.0 - _539;
                                float _3156 = sqrt(1.0 - ((1.0 - (_3149 * _3149)) * (1.0 - (_3148 * _3148))));
                                float _3157 = _3156 * _3156;
                                float _3158 = _3157 * _3157;
                                float _3159 = _3105 - _2575;
                                float _3160 = _3106 - _2576;
                                float _3161 = _3107 - _2577;
                                float _3165 = inversesqrt(dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161)));
                                float _3169 = dot(vec3(_463, _466, _469), vec3((-0.0) - _2575, (-0.0) - _2576, (-0.0) - _2577));
                                float _4232 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3172 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
                                float _3173 = dot(vec3(_463, _466, _469), vec3(_3165 * _3159, _3165 * _3160, _3165 * _3161));
                                float _4243 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3176 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                                float _3180 = ((_3176 * _3176) * (_3158 + (-1.0))) + 1.0;
                                float _3181 = _3118 * _3157;
                                float _3182 = _3181 * _3181;
                                float _3188 = ((1.0 - _3182) * dot(vec3(_463, _466, _469), vec3(_3105, _3106, _3107))) + _3182;
                                float _4254 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3189 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                                float _3190 = 1.0 - _3157;
                                float _3200 = (0.5 / (((_3189 * ((_3172 * _3190) + _3157)) + 9.9999999392252902907785028219223e-09) + (((_3189 * _3190) + _3157) * _3172))) * _3189;
                                float _4265 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3210 = (_3135 * _3112) * (((_3158 * 3.1415927410125732421875) * (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) / ((_3180 * _3180) * ((_3125 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3136 * _2979.y;
                                frontier_phi_83_pred_1 = _3136 * _2979.x;
                                frontier_phi_83_pred_2 = _3210 * _2991.z;
                                frontier_phi_83_pred_3 = _3210 * _2991.y;
                                frontier_phi_83_pred_4 = _3210 * _2991.x;
                                frontier_phi_83_pred_5 = _3136 * _2979.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3218 = frontier_phi_83_pred;
                            _3217 = frontier_phi_83_pred_1;
                            _3216 = frontier_phi_83_pred_2;
                            _3215 = frontier_phi_83_pred_3;
                            _3214 = frontier_phi_83_pred_4;
                            _3219 = frontier_phi_83_pred_5;
                            _2921 = _3217 + _2934;
                            _2922 = _3218 + _2935;
                            _2923 = _3219 + _2936;
                            _2918 = _3214 + _2931;
                            _2919 = _3215 + _2932;
                            _2920 = _3216 + _2933;
                            if (_2938 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2931 = _2918;
                                _2932 = _2919;
                                _2933 = _2920;
                                _2934 = _2921;
                                _2935 = _2922;
                                _2936 = _2923;
                                _2937 = _2938;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2923;
                        frontier_phi_77_pred_1 = _2922;
                        frontier_phi_77_pred_2 = _2921;
                        frontier_phi_77_pred_3 = _2920;
                        frontier_phi_77_pred_4 = _2919;
                        frontier_phi_77_pred_5 = _2918;
                    }
                    _2560 = frontier_phi_77_pred;
                    _2558 = frontier_phi_77_pred_1;
                    _2556 = frontier_phi_77_pred_2;
                    _2554 = frontier_phi_77_pred_3;
                    _2552 = frontier_phi_77_pred_4;
                    _2550 = frontier_phi_77_pred_5;
                    uint _2716 = _2715 + 1u;
                    if (_2716 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2709 = _2550;
                        _2710 = _2552;
                        _2711 = _2554;
                        _2712 = _2556;
                        _2713 = _2558;
                        _2714 = _2560;
                        _2715 = _2716;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2554;
                frontier_phi_58_59_ladder_1 = _2560;
                frontier_phi_58_59_ladder_2 = _2558;
                frontier_phi_58_59_ladder_3 = _2556;
                frontier_phi_58_59_ladder_4 = _2552;
                frontier_phi_58_59_ladder_5 = _2550;
            }
            else
            {
                frontier_phi_58_59_ladder = _2423;
                frontier_phi_58_59_ladder_1 = _2429;
                frontier_phi_58_59_ladder_2 = _2427;
                frontier_phi_58_59_ladder_3 = _2425;
                frontier_phi_58_59_ladder_4 = _2421;
                frontier_phi_58_59_ladder_5 = _2419;
            }
            _2549 = frontier_phi_58_59_ladder_5;
            _2551 = frontier_phi_58_59_ladder_4;
            _2553 = frontier_phi_58_59_ladder;
            _2555 = frontier_phi_58_59_ladder_3;
            _2557 = frontier_phi_58_59_ladder_2;
            _2559 = frontier_phi_58_59_ladder_1;
        }
        float _2564 = isnan(1.0) ? _523 : (isnan(_523) ? 1.0 : min(_523, 1.0));
        _2293 = (_2564 * _2555) + _1729;
        _2295 = (_2564 * _2557) + _1731;
        _2297 = (_2564 * _2559) + _1733;
        _2299 = ((_2549 * _508) * _2564) + _2074;
        _2301 = ((_2551 * _510) * _2564) + _2076;
        _2303 = ((_2553 * _511) * _2564) + _2078;
    }
    else
    {
        _2293 = _1729;
        _2295 = _1731;
        _2297 = _1733;
        _2299 = _2074;
        _2301 = _2076;
        _2303 = _2078;
    }
    uint _2309 = _484 + uint(cbMatDynParam._m0[0u].w);
    float _2318 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _303.x) * _326) * cbInstanceData._m0[_2309].x;
    float _2322 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _303.y) * _326) * cbInstanceData._m0[_2309].y;
    float _2326 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _303.z) * _326) * cbInstanceData._m0[_2309].z;
    float _4281 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _4292 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _4303 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _2343 = (((isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_2293 + ((isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))) * _523))) + ((_2299 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _1364)) * cbPerFrame._m0[3u].x)) + _2318;
    float _2345 = (_2322 + ((_2301 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _1364)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2295 + ((isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0))) * _523)));
    float _2347 = (_2326 + ((_2303 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _1364)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_2297 + ((isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))) * _523)));
    float _2348 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2349 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2350 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2356 = cbMtdParam._m0[2u].x * _2318;
    float _2357 = cbMtdParam._m0[2u].y * _2322;
    float _2358 = cbMtdParam._m0[2u].z * _2326;
    float _4329 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2360 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    uint _2361 = _482 + 6u;
    float _2369 = _442 / cbSceneParam._m0[86u].x;
    float _2370 = _443 / cbSceneParam._m0[86u].y;
    vec4 _2384 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2369, _2370, (log2((isnan(cbSceneParam._m0[77u].w) ? _363 : (isnan(_363) ? cbSceneParam._m0[77u].w : min(_363, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2386 = _2384.x;
    float _2387 = _2384.y;
    float _2388 = _2384.z;
    float _2389 = _2384.w;
    float _2482;
    float _2484;
    float _2486;
    float _2488;
    if (_363 > cbSceneParam._m0[78u].w)
    {
        float _2444 = isnan(_363) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _363 : min(cbSceneParam._m0[80u].w, _363));
        float _2445 = _2444 / _363;
        float _2456 = _2445 * _414;
        float _2457 = _415 * _2445;
        float _2458 = (-0.0) - _2457;
        float _2460 = _2445 * _416;
        float _2462 = (cbSceneParam._m0[77u].w * _2458) / _2444;
        float _2463 = _2462 + cbSceneParam._m0[79u].w;
        float _2464 = cbSceneParam._m0[79u].w - _2457;
        float _2470 = sqrt(((_2456 * _2456) + (_2457 * _2457)) + (_2460 * _2460));
        float _2473 = (1.0 - (cbSceneParam._m0[77u].w / _2444)) * _2470;
        float _2478 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2480 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2666;
        if (abs((_2458 - _2462) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2666 = ((((_2463 > 0.0) ? exp2(_2478 * _2463) : (2.0 - exp2(_2480 * _2463))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2473;
        }
        else
        {
            float _2610 = 1.0 / cbSceneParam._m0[80u].x;
            float _2611 = isnan(_2464) ? _2463 : (isnan(_2463) ? _2464 : max(_2463, _2464));
            float _2612 = isnan(_2464) ? _2463 : (isnan(_2463) ? _2464 : min(_2463, _2464));
            float _2621 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : min(_2611, 0.0));
            float _2622 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : min(_2612, 0.0));
            _2666 = ((abs(_2470 / _2458) * cbSceneParam._m0[80u].y) * ((((_2621 - _2622) * 2.0) - ((exp2(_2478 * (isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0)))) - exp2(_2478 * (isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0))))) * _2610)) - ((exp2(_2480 * _2621) - exp2(_2480 * _2622)) * _2610))) + (_2473 * cbSceneParam._m0[80u].z);
        }
        vec4 _2668 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2369, _2370, 1.0), 0.0);
        float _2677 = exp2((_2666 * (-1.44269502162933349609375)) * (1.0 - _2668.w));
        float _2678 = log2(_2677);
        float _2694 = log2(_2389);
        _2482 = (exp2(_2694 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2678 * cbSceneParam._m0[78u].x)) * _2668.x) / cbSceneParam._m0[78u].x)) + _2386;
        _2484 = (exp2(_2694 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2678 * cbSceneParam._m0[78u].y)) * _2668.y) / cbSceneParam._m0[78u].y)) + _2387;
        _2486 = (exp2(_2694 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2678 * cbSceneParam._m0[78u].z)) * _2668.z) / cbSceneParam._m0[78u].z)) + _2388;
        _2488 = _2677 * _2389;
    }
    else
    {
        _2482 = _2386;
        _2484 = _2387;
        _2486 = _2388;
        _2488 = _2389;
    }
    bool _2704;
    vec4 _2498;
    vec4 _2520;
    float _2522;
    float _2526;
    float _2527;
    float _2528;
    float _2531;
    float _2534;
    float _2537;
    float _2538;
    bool _2548;
    for (;;)
    {
        _2498 = cbMatDynParam._m0[0u];
        float _2500 = roundEven(_2498.y);
        bool _2501 = _2500 == 3.0;
        float _2502 = log2(_2488);
        float _2506 = exp2(_2502 * cbSceneParam._m0[78u].x);
        float _2507 = exp2(_2502 * cbSceneParam._m0[78u].y);
        float _2508 = exp2(_2502 * cbSceneParam._m0[78u].z);
        float _2509 = _2506 * _2348;
        float _2510 = _2507 * _2349;
        float _2511 = _2508 * _2350;
        float _2518 = _430 + (-0.5);
        _2520 = cbMtdParam._m0[1u];
        _2522 = _2520.y * _2518;
        float _2525 = (_2500 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2526 = _2525 * (_2501 ? _2509 : (_2509 + (cbSceneParam._m0[72u].w * _2482)));
        _2527 = _2525 * (_2501 ? _2510 : (_2510 + (cbSceneParam._m0[72u].w * _2484)));
        _2528 = _2525 * (_2501 ? _2511 : (_2511 + (cbSceneParam._m0[72u].w * _2486)));
        _2531 = ((_2356 * _2360) * _2506) * _2525;
        _2534 = ((_2357 * _2360) * _2507) * _2525;
        _2537 = ((_2358 * _2360) * _2508) * _2525;
        _2538 = _2518 * 0.999000012874603271484375;
        _2548 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2548)
        {
            if ((cbInstanceData._m0[_482 + 7u].x + _2538) < 0.5)
            {
                _2704 = true;
                break;
            }
        }
        uint _2645 = _484 + uint(_2498.w);
        if ((cbInstanceData._m0[_2645].w < 1.0) && ((cbInstanceData._m0[_2645].w + _2538) < 0.5))
        {
            _2704 = true;
            break;
        }
        if ((_2522 + 1.0) < _2520.x)
        {
            _2704 = true;
            break;
        }
        _2704 = false;
        break;
    }
    float _2909;
    if (_2704)
    {
        discard_state = true;
        _2909 = 0.0;
    }
    else
    {
        _2909 = cbInstanceData._m0[_2361].w;
    }
    SV_Target.x = _2526;
    SV_Target.y = _2527;
    SV_Target.z = _2528;
    SV_Target.w = _2909;
    SV_Target_1.x = _2531;
    SV_Target_1.y = _2534;
    SV_Target_1.z = _2537;
    SV_Target_1.w = cbInstanceData._m0[_2361].w;
    discard_exit();
}


