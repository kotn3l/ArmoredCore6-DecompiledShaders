#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _902;
float _3316;
float _3317;
float _3318;
float _3319;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _228.x * cbMtdParam._m0[9u].x;
    float _235 = _228.y * cbMtdParam._m0[9u].y;
    float _236 = _228.z * cbMtdParam._m0[9u].z;
    vec4 _248 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _252 = _248.z;
    float _256 = (_248.x * 2.0) + (-1.0);
    float _258 = (_248.y * 2.0) + (-1.0);
    float _259 = dot(vec2(_256, _258), vec2(_256, _258));
    float _3328 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _265 = sqrt(1.0 - (isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0))));
    vec4 _302 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _313 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3339 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _314 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
    float _322 = (((_314 * _314) * (3.0 - (_314 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _325 = fma(_265, _199 * NORMAL.x, fma(_258, _206 * TANGENT.x, (_192 * _185) * _256));
    float _328 = fma(_265, _199 * NORMAL.y, fma(_258, _206 * TANGENT.y, (_192 * _186) * _256));
    float _331 = fma(_265, _199 * NORMAL.z, fma(_258, _206 * TANGENT.z, (_192 * _187) * _256));
    float _335 = inversesqrt(dot(vec3(_325, _328, _331), vec3(_325, _328, _331)));
    float _336 = _335 * _325;
    float _337 = _335 * _328;
    float _338 = _335 * _331;
    float _3350 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _339 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
    float _3361 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3372 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3383 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _358 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _399 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _409 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _399);
    float _410 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _399);
    float _411 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _399);
    float _415 = inversesqrt(dot(vec3(_409, _410, _411), vec3(_409, _410, _411)));
    float _416 = _409 * _415;
    float _417 = _410 * _415;
    float _418 = _411 * _415;
    vec4 _423 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _425 = _423.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _581 = sqrt(((_409 * _409) + (_410 * _410)) + (_411 * _411));
        float _587 = (cbMatDynParam._m0[5u].x * _581) + cbMatDynParam._m0[5u].y;
        float _3394 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
        float _588 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _592 = (cbMatDynParam._m0[5u].z * _581) + cbMatDynParam._m0[5u].w;
        float _3405 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) - _588)) + _588) < ((_425 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _437 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _438 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _458 = fma(_338, cbSceneParam._m0[5u].z, fma(_337, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _336));
    float _461 = fma(_338, cbSceneParam._m0[6u].z, fma(_337, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _336));
    float _464 = fma(_338, cbSceneParam._m0[7u].z, fma(_337, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _336));
    uint _477 = uint(roundEven(NORMAL.w)) * 13u;
    uint _478 = _477 + 9u;
    uint _479 = _478 + uint(cbMatDynParam._m0[0u].w);
    float _485 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0)))) * cbInstanceData._m0[_479].x;
    float _486 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0)))) * cbInstanceData._m0[_479].y;
    float _487 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0)))) * cbInstanceData._m0[_479].z;
    float _3416 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _488 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
    float _3427 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _489 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
    float _3438 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _490 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
    vec4 _499 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _437, cbSceneParam._m0[86u].y * _438));
    float _502 = _499.x * TEXCOORD.z;
    float _503 = dot(vec3(_336, _337, _338), vec3(_416, _417, _418));
    float _506 = _503 * 2.0;
    float _510 = (_506 * _336) - _416;
    float _511 = (_506 * _337) - _417;
    float _512 = (_506 * _338) - _418;
    float _516 = abs(dot(vec3(_416, _417, _418), vec3(_336, _337, _338)));
    float _3449 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _518 = sqrt(_339);
    float _530 = exp2((_518 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_518 * 3.0));
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _901;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _626 = fma(_570, cbModelParam._m0[26u].z, fma(_566, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _562));
        float _630 = fma(_570, cbModelParam._m0[27u].z, fma(_566, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _562));
        float _634 = fma(_570, cbModelParam._m0[28u].z, fma(_566, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _562));
        float _659 = _562 + _336;
        float _660 = _566 + _337;
        float _661 = _570 + _338;
        float _671 = fma(_661, cbModelParam._m0[26u].z, fma(_660, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _659)) - _626;
        float _672 = fma(_661, cbModelParam._m0[27u].z, fma(_660, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _659)) - _630;
        float _673 = fma(_661, cbModelParam._m0[28u].z, fma(_660, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _659)) - _634;
        float _677 = inversesqrt(dot(vec3(_671, _672, _673), vec3(_671, _672, _673)));
        float _690 = ((_677 * _671) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_626 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _691 = ((_677 * _672) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_630 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _692 = ((_677 * _673) / cbModelParam._m0[34u].z) + ((((((_634 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        vec4 _716 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        float _729 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _730 = _729 * (_695.x + (-0.5));
        float _731 = _729 * (_695.y + (-0.5));
        float _732 = _729 * (_695.z + (-0.5));
        float _739 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _740 = _739 * (_702.x + (-0.5));
        float _741 = _739 * (_702.y + (-0.5));
        float _742 = _739 * (_702.z + (-0.5));
        float _749 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _750 = _749 * (_709.x + (-0.5));
        float _751 = _749 * (_709.y + (-0.5));
        float _752 = _749 * (_709.z + (-0.5));
        float _759 = exp2((_716.w + (-0.5)) * 20.0) * 2.0;
        float _760 = _759 * (_716.x + (-0.5));
        float _761 = _759 * (_716.y + (-0.5));
        float _762 = _759 * (_716.z + (-0.5));
        float _763 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _764 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _765 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _766 = _730 * 0.5;
        float _767 = _740 * 0.5;
        float _768 = _750 * 0.5;
        float _769 = dot(vec3(_766, _767, _768), vec3(_766, _767, _768));
        float _774 = (_769 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_769);
        float _783 = (dot(vec3(_336, _337, _338), vec3(_774 * _766, _774 * _767, _774 * _768)) + 1.0) * 0.5;
        float _3475 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _793 = sqrt(((_767 * _767) + (_766 * _766)) + (_768 * _768)) / (_763 + 9.9999997473787516355514526367188e-06);
        float _3486 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _795 = _794 * 2.0;
        float _799 = (1.0 - _794) / (_794 + 1.0);
        float _3497 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _809 = ((((1.0 - _800) * (_795 + 2.0)) * exp2(log2(isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * (_795 + 1.0))) + _800) * _763;
        float _810 = _731 * 0.5;
        float _811 = _741 * 0.5;
        float _812 = _751 * 0.5;
        float _813 = dot(vec3(_810, _811, _812), vec3(_810, _811, _812));
        float _818 = (_813 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_813);
        float _826 = (dot(vec3(_336, _337, _338), vec3(_818 * _810, _818 * _811, _818 * _812)) + 1.0) * 0.5;
        float _3508 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _835 = sqrt(((_811 * _811) + (_810 * _810)) + (_812 * _812)) / (_764 + 9.9999997473787516355514526367188e-06);
        float _3519 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _837 = _836 * 2.0;
        float _841 = (1.0 - _836) / (_836 + 1.0);
        float _3530 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _851 = ((((1.0 - _842) * (_837 + 2.0)) * exp2(log2(isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * (_837 + 1.0))) + _842) * _764;
        float _852 = _732 * 0.5;
        float _853 = _742 * 0.5;
        float _854 = _752 * 0.5;
        float _855 = dot(vec3(_852, _853, _854), vec3(_852, _853, _854));
        float _860 = (_855 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_855);
        float _868 = (dot(vec3(_336, _337, _338), vec3(_860 * _852, _860 * _853, _860 * _854)) + 1.0) * 0.5;
        float _3541 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _877 = sqrt(((_853 * _853) + (_852 * _852)) + (_854 * _854)) / (_765 + 9.9999997473787516355514526367188e-06);
        float _3552 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _879 = _878 * 2.0;
        float _883 = (1.0 - _878) / (_878 + 1.0);
        float _3563 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _893 = ((((1.0 - _884) * (_879 + 2.0)) * exp2(log2(isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * (_879 + 1.0))) + _884) * _765;
        _901 = _732;
        _903 = _731;
        _904 = _730;
        _905 = _742;
        _906 = _741;
        _907 = _740;
        _908 = _752;
        _909 = _751;
        _910 = _750;
        _911 = _765;
        _912 = _764;
        _913 = _763;
        _914 = cbModelParam._m0[36u].z * (isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0)));
        _915 = cbModelParam._m0[36u].z * (isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0)));
        _916 = cbModelParam._m0[36u].z * (isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0)));
    }
    else
    {
        _901 = _902;
        _903 = _902;
        _904 = _902;
        _905 = _902;
        _906 = _902;
        _907 = _902;
        _908 = _902;
        _909 = _902;
        _910 = _902;
        _911 = _902;
        _912 = _902;
        _913 = _902;
        _914 = 0.0;
        _915 = 0.0;
        _916 = 0.0;
    }
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _945 = fma(_570, cbModelParam._m0[30u].z, fma(_566, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _562));
        float _949 = fma(_570, cbModelParam._m0[31u].z, fma(_566, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _562));
        float _953 = fma(_570, cbModelParam._m0[32u].z, fma(_566, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _562));
        float _976 = _562 + _336;
        float _977 = _566 + _337;
        float _978 = _570 + _338;
        float _988 = fma(_978, cbModelParam._m0[30u].z, fma(_977, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _976)) - _945;
        float _989 = fma(_978, cbModelParam._m0[31u].z, fma(_977, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _976)) - _949;
        float _990 = fma(_978, cbModelParam._m0[32u].z, fma(_977, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _976)) - _953;
        float _994 = inversesqrt(dot(vec3(_988, _989, _990), vec3(_988, _989, _990)));
        float _1007 = ((_994 * _988) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_945 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1008 = ((_994 * _989) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_949 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1009 = ((_994 * _990) / cbModelParam._m0[35u].z) + ((((((_953 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        float _1044 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1011.x + (-0.5));
        float _1046 = _1044 * (_1011.y + (-0.5));
        float _1047 = _1044 * (_1011.z + (-0.5));
        float _1054 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1018.x + (-0.5));
        float _1056 = _1054 * (_1018.y + (-0.5));
        float _1057 = _1054 * (_1018.z + (-0.5));
        float _1064 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1025.x + (-0.5));
        float _1066 = _1064 * (_1025.y + (-0.5));
        float _1067 = _1064 * (_1025.z + (-0.5));
        float _1074 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1032.x + (-0.5));
        float _1076 = _1074 * (_1032.y + (-0.5));
        float _1077 = _1074 * (_1032.z + (-0.5));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = _1045 * 0.5;
        float _1082 = _1055 * 0.5;
        float _1083 = _1065 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_336, _337, _338), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3604 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3615 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3626 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) * (_1108 + 1.0))) + _1113) * _1078;
        float _1123 = _1046 * 0.5;
        float _1124 = _1056 * 0.5;
        float _1125 = _1066 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_336, _337, _338), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3637 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3648 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3659 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * (_1150 + 1.0))) + _1155) * _1079;
        float _1165 = _1047 * 0.5;
        float _1166 = _1057 * 0.5;
        float _1167 = _1067 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1181 = (dot(vec3(_336, _337, _338), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _3670 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1190 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3681 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _3692 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_1192 + 1.0))) + _1197) * _1080;
        _1214 = _1047;
        _1215 = _1046;
        _1216 = _1045;
        _1217 = _1057;
        _1218 = _1056;
        _1219 = _1055;
        _1220 = _1067;
        _1221 = _1066;
        _1222 = _1065;
        _1223 = _1080;
        _1224 = _1079;
        _1225 = _1078;
        _1226 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
        _1227 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
        _1228 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
    }
    else
    {
        _1214 = _902;
        _1215 = _902;
        _1216 = _902;
        _1217 = _902;
        _1218 = _902;
        _1219 = _902;
        _1220 = _902;
        _1221 = _902;
        _1222 = _902;
        _1223 = _902;
        _1224 = _902;
        _1225 = _902;
        _1226 = 0.0;
        _1227 = 0.0;
        _1228 = 0.0;
    }
    float _1238 = (cbModelParam._m0[1u].x * (_1226 - _914)) + _914;
    float _1239 = (cbModelParam._m0[1u].x * (_1227 - _915)) + _915;
    float _1240 = (cbModelParam._m0[1u].x * (_1228 - _916)) + _916;
    float _1261 = fma(_1240, cbSceneParam._m0[89u].z, fma(_1239, cbSceneParam._m0[89u].y, _1238 * cbSceneParam._m0[89u].x));
    float _1264 = fma(_1240, cbSceneParam._m0[90u].z, fma(_1239, cbSceneParam._m0[90u].y, _1238 * cbSceneParam._m0[90u].x));
    float _1267 = fma(_1240, cbSceneParam._m0[91u].z, fma(_1239, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1238));
    float _1282 = _510 * 0.5;
    float _1283 = _511 * 0.5;
    float _1284 = _512 * 0.5;
    float _1285 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_1216, _1219, _1222, _1225));
    float _1288 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_1215, _1218, _1221, _1224));
    float _1291 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_1214, _1217, _1220, _1223));
    float _1325;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1298 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_901, _905, _908, _911));
        float _1302 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_903, _906, _909, _912));
        float _1306 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_904, _907, _910, _913));
        float _1313 = dot(vec4(cbModelParam._m0[39u]), vec4(_1282, _1283, _1284, 1.0));
        _1325 = dot(vec3(isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)), isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)), isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1313) ? 0.0 : (isnan(0.0) ? _1313 : max(0.0, _1313))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1325 = 1.0;
    }
    float _1336;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1327 = dot(vec4(cbModelParam._m0[40u]), vec4(_1282, _1283, _1284, 1.0));
        _1336 = dot(vec3(isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)), isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)), isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1327) ? 0.0 : (isnan(0.0) ? _1327 : max(0.0, _1327))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1336 = 1.0;
    }
    float _1340 = (_1336 * cbModelParam._m0[1u].x) + (_1325 * (1.0 - cbModelParam._m0[1u].x));
    float _1350 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _339);
    float _1351 = isnan(_1350) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1350 : min(cbModelParam._m0[25u].z, _1350));
    float _1432;
    float _1434;
    float _1436;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1399 = fma(_570, cbModelParam._m0[13u].z, fma(_566, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _562)) + cbModelParam._m0[13u].w;
        float _1403 = fma(_570, cbModelParam._m0[14u].z, fma(_566, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _562)) + cbModelParam._m0[14u].w;
        float _1407 = fma(_570, cbModelParam._m0[15u].z, fma(_566, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _562)) + cbModelParam._m0[15u].w;
        float _1410 = fma(_512, cbModelParam._m0[13u].z, fma(_511, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _510));
        float _1413 = fma(_512, cbModelParam._m0[14u].z, fma(_511, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _510));
        float _1416 = fma(_512, cbModelParam._m0[15u].z, fma(_511, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _510));
        float _1444;
        if (_1410 > 0.0)
        {
            _1444 = abs((1.0 - _1399) / _1410);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1410 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1399 + 1.0) / _1410);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1444 = frontier_phi_17_15_ladder;
        }
        float _1648;
        if (_1413 > 0.0)
        {
            _1648 = abs((1.0 - _1403) / _1413);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1413 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1403 + 1.0) / _1413);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1648 = frontier_phi_26_22_ladder;
        }
        float _1891;
        if (_1416 > 0.0)
        {
            _1891 = abs((1.0 - _1407) / _1416);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1407 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1891 = frontier_phi_38_33_ladder;
        }
        float _1893 = isnan(_1648) ? _1444 : (isnan(_1444) ? _1648 : min(_1444, _1648));
        float _1894 = isnan(_1891) ? _1893 : (isnan(_1893) ? _1891 : min(_1893, _1891));
        float _1898 = (_1894 * _1410) + _1399;
        float _1899 = (_1894 * _1413) + _1403;
        float _1900 = (_1894 * _1416) + _1407;
        float _1901 = _1894 * 9.9999997473787516355514526367188e-05;
        float _1903 = (-1.0) - _1901;
        float _1905 = _1901 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1900 > _1905) || ((_1900 < _1903) || ((_1899 > _1905) || ((_1899 < _1903) || ((_1898 < _1903) || (_1898 > _1905))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2024 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1900, cbModelParam._m0[9u].z, fma(_1899, cbModelParam._m0[9u].y, _1898 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1900, cbModelParam._m0[10u].z, fma(_1899, cbModelParam._m0[10u].y, _1898 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1900, cbModelParam._m0[11u].z, fma(_1899, cbModelParam._m0[11u].y, _1898 * cbModelParam._m0[11u].x))), _1351);
            frontier_phi_16_38_ladder = _2024.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2024.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2024.x * cbModelParam._m0[1u].y;
        }
        _1432 = frontier_phi_16_38_ladder_2;
        _1434 = frontier_phi_16_38_ladder_1;
        _1436 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1420 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_510, _511, _512), _1351);
        _1432 = _1420.x * cbModelParam._m0[1u].y;
        _1434 = _1420.y * cbModelParam._m0[1u].y;
        _1436 = _1420.z * cbModelParam._m0[1u].y;
    }
    float _1440 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _339);
    float _1441 = isnan(_1440) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1440 : min(cbModelParam._m0[25u].w, _1440));
    float _1533;
    float _1535;
    float _1537;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1497 = fma(_570, cbModelParam._m0[21u].z, fma(_566, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _562)) + cbModelParam._m0[21u].w;
        float _1501 = fma(_570, cbModelParam._m0[22u].z, fma(_566, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _562)) + cbModelParam._m0[22u].w;
        float _1505 = fma(_570, cbModelParam._m0[23u].z, fma(_566, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _562)) + cbModelParam._m0[23u].w;
        float _1508 = fma(_512, cbModelParam._m0[21u].z, fma(_511, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _510));
        float _1511 = fma(_512, cbModelParam._m0[22u].z, fma(_511, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _510));
        float _1514 = fma(_512, cbModelParam._m0[23u].z, fma(_511, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _510));
        float _1653;
        if (_1508 > 0.0)
        {
            _1653 = abs((1.0 - _1497) / _1508);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1497 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1653 = frontier_phi_28_24_ladder;
        }
        float _1918;
        if (_1511 > 0.0)
        {
            _1918 = abs((1.0 - _1501) / _1511);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1501 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1918 = frontier_phi_40_35_ladder;
        }
        float _2123;
        if (_1514 > 0.0)
        {
            _2123 = abs((1.0 - _1505) / _1514);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1505 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2123 = frontier_phi_49_46_ladder;
        }
        float _2125 = isnan(_1918) ? _1653 : (isnan(_1653) ? _1918 : min(_1653, _1918));
        float _2126 = isnan(_2123) ? _2125 : (isnan(_2125) ? _2123 : min(_2125, _2123));
        float _2130 = (_2126 * _1508) + _1497;
        float _2131 = (_2126 * _1511) + _1501;
        float _2132 = (_2126 * _1514) + _1505;
        float _2133 = _2126 * 9.9999997473787516355514526367188e-05;
        float _2134 = (-1.0) - _2133;
        float _2136 = _2133 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2132 > _2136) || ((_2132 < _2134) || ((_2131 > _2136) || ((_2131 < _2134) || ((_2130 < _2134) || (_2130 > _2136))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2369 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2132, cbModelParam._m0[17u].z, fma(_2131, cbModelParam._m0[17u].y, _2130 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2132, cbModelParam._m0[18u].z, fma(_2131, cbModelParam._m0[18u].y, _2130 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2132, cbModelParam._m0[19u].z, fma(_2131, cbModelParam._m0[19u].y, _2130 * cbModelParam._m0[19u].x))), _1441);
            frontier_phi_25_49_ladder = _2369.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2369.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2369.x * cbModelParam._m0[1u].z;
        }
        _1533 = frontier_phi_25_49_ladder_2;
        _1535 = frontier_phi_25_49_ladder_1;
        _1537 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1517 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_510, _511, _512), _1441);
        _1533 = _1517.x * cbModelParam._m0[1u].z;
        _1535 = _1517.y * cbModelParam._m0[1u].z;
        _1537 = _1517.z * cbModelParam._m0[1u].z;
    }
    float _1549 = ((((1.0 - _530) * ((_518 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_530 * _518)) * _502;
    float _1550 = _1549 * ((cbModelParam._m0[1u].w * (_1533 - _1432)) + _1432);
    float _1551 = _1549 * ((cbModelParam._m0[1u].w * (_1535 - _1434)) + _1434);
    float _1552 = _1549 * ((cbModelParam._m0[1u].w * (_1537 - _1436)) + _1436);
    float _1555 = fma(_1552, cbSceneParam._m0[89u].z, fma(_1551, cbSceneParam._m0[89u].y, _1550 * cbSceneParam._m0[89u].x));
    float _1558 = fma(_1552, cbSceneParam._m0[90u].z, fma(_1551, cbSceneParam._m0[90u].y, _1550 * cbSceneParam._m0[90u].x));
    float _1561 = fma(_1552, cbSceneParam._m0[91u].z, fma(_1551, cbSceneParam._m0[91u].y, _1550 * cbSceneParam._m0[91u].x));
    uvec4 _1571 = floatBitsToUint(cbInstanceData._m0[_477 + 5u]);
    uint _1573 = _1571.x * 14u;
    uint _1574 = _1573 + 13u;
    float _1581 = _502 + (-1.0);
    float _1586 = (cbLight._m0[_1574].x * _1581) + 1.0;
    float _1587 = (cbLight._m0[_1574].y * _1581) + 1.0;
    float _1588 = (cbLight._m0[_1574].z * _1581) + 1.0;
    float _1589 = (cbLight._m0[_1574].w * _1581) + 1.0;
    uint _1590 = _1573 + 5u;
    float _1596 = isnan(1.0) ? _1587 : (isnan(_1587) ? 1.0 : min(_1587, 1.0));
    uint _1600 = _1573 + 4u;
    float _1607 = isnan(1.0) ? _1586 : (isnan(_1586) ? 1.0 : min(_1586, 1.0));
    uint _1611 = _1573 | 1u;
    float _1622 = dot(vec3(cbLight._m0[_1573].xyz), vec3(_336, _337, _338));
    float _1625 = dot(vec3(cbLight._m0[_1611].xyz), vec3(_336, _337, _338));
    float _3828 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
    float _3839 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
    float _1630 = (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * 0.3183098733425140380859375;
    float _1632 = (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * 0.3183098733425140380859375;
    float _1639 = ((cbLight._m0[_1590].x * _1596) * _1632) + ((cbLight._m0[_1600].x * _1607) * _1630);
    float _1640 = ((_1596 * cbLight._m0[_1590].y) * _1632) + ((_1607 * cbLight._m0[_1600].y) * _1630);
    float _1641 = ((_1596 * cbLight._m0[_1590].z) * _1632) + ((_1607 * cbLight._m0[_1600].z) * _1630);
    uvec4 _1645 = floatBitsToUint(cbLight._m0[_1573 + 12u]);
    bool _1647 = _1645.x == 0u;
    float _1658;
    float _1660;
    float _1662;
    if (_1647)
    {
        _1658 = _1639;
        _1660 = _1640;
        _1662 = _1641;
    }
    else
    {
        uint _1666 = _1573 + 6u;
        float _1682 = (dot(vec3(cbLight._m0[_1573 + 2u].xyz), vec3(_336, _337, _338)) * 0.5) + 0.5;
        float _1683 = _1682 * _1682;
        float _3850 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1685 = isnan(1.0) ? _1588 : (isnan(_1588) ? 1.0 : min(_1588, 1.0));
        _1658 = (((cbLight._m0[_1666].x * 0.3183098733425140380859375) * _1684) * _1685) + _1639;
        _1660 = (((cbLight._m0[_1666].y * 0.3183098733425140380859375) * _1684) * _1685) + _1640;
        _1662 = (((cbLight._m0[_1666].z * 0.3183098733425140380859375) * _1684) * _1685) + _1641;
    }
    bool _1665 = _1645.y == 0u;
    float _1703;
    float _1705;
    float _1707;
    if (_1665)
    {
        _1703 = _1658;
        _1705 = _1660;
        _1707 = _1662;
    }
    else
    {
        uint _1862 = _1573 + 7u;
        float _1878 = (dot(vec3(cbLight._m0[_1573 + 3u].xyz), vec3(_336, _337, _338)) * 0.5) + 0.5;
        float _1879 = _1878 * _1878;
        float _3866 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1880 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1881 = isnan(1.0) ? _1589 : (isnan(_1589) ? 1.0 : min(_1589, 1.0));
        _1703 = (((cbLight._m0[_1862].x * 0.3183098733425140380859375) * _1880) * _1881) + _1658;
        _1705 = (((cbLight._m0[_1862].y * 0.3183098733425140380859375) * _1880) * _1881) + _1660;
        _1707 = (((cbLight._m0[_1862].z * 0.3183098733425140380859375) * _1880) * _1881) + _1662;
    }
    uint _1710 = _1573 + 8u;
    float _1723 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1573].w)) * _339) * 0.949999988079071044921875);
    float _1724 = _1723 * _1723;
    float _1725 = cbLight._m0[_1573].x + _416;
    float _1726 = cbLight._m0[_1573].y + _417;
    float _1727 = cbLight._m0[_1573].z + _418;
    float _1731 = inversesqrt(dot(vec3(_1725, _1726, _1727), vec3(_1725, _1726, _1727)));
    float _1732 = _1731 * _1725;
    float _1733 = _1731 * _1726;
    float _1734 = _1731 * _1727;
    float _1735 = dot(vec3(_336, _337, _338), vec3(cbLight._m0[_1573].xyz));
    float _3882 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _1738 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _3893 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _1739 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _1740 = dot(vec3(_336, _337, _338), vec3(_1732, _1733, _1734));
    float _3904 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1743 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _1744 = dot(vec3(cbLight._m0[_1573].xyz), vec3(_1732, _1733, _1734));
    float _3915 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1748 = _1724 * _1724;
    float _1752 = ((_1743 * _1743) * (_1748 + (-1.0))) + 1.0;
    float _1763 = (exp2(log2(1.0 - (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1764 = 1.0 - _1724;
    float _1775 = (0.5 / (((_1739 * ((_1738 * _1764) + _1724)) + 9.9999999392252902907785028219223e-09) + (((_1739 * _1764) + _1724) * _1738))) * _1738;
    float _3926 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1777 = (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1748 / ((_1752 * _1752) * 3.141590118408203125));
    uint _1788 = _1573 + 9u;
    float _1799 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1611].w)) * _339) * 0.949999988079071044921875);
    float _1800 = _1799 * _1799;
    float _1801 = cbLight._m0[_1611].x + _416;
    float _1802 = cbLight._m0[_1611].y + _417;
    float _1803 = cbLight._m0[_1611].z + _418;
    float _1807 = inversesqrt(dot(vec3(_1801, _1802, _1803), vec3(_1801, _1802, _1803)));
    float _1808 = _1807 * _1801;
    float _1809 = _1807 * _1802;
    float _1810 = _1807 * _1803;
    float _1811 = dot(vec3(_336, _337, _338), vec3(cbLight._m0[_1611].xyz));
    float _3937 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1814 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _1815 = dot(vec3(_336, _337, _338), vec3(_1808, _1809, _1810));
    float _3948 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1818 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _1819 = dot(vec3(cbLight._m0[_1611].xyz), vec3(_1808, _1809, _1810));
    float _3959 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1823 = _1800 * _1800;
    float _1827 = ((_1818 * _1818) * (_1823 + (-1.0))) + 1.0;
    float _1836 = (exp2(log2(1.0 - (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1837 = 1.0 - _1800;
    float _1847 = (0.5 / (((_1739 * ((_1814 * _1837) + _1800)) + 9.9999999392252902907785028219223e-09) + (((_1739 * _1837) + _1800) * _1814))) * _1814;
    float _3970 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1849 = (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1823 / ((_1827 * _1827) * 3.141590118408203125));
    float _1859 = (((_1836 * cbLight._m0[_1788].x) * _1849) * _1596) + (((_1763 * cbLight._m0[_1710].x) * _1777) * _1607);
    float _1860 = (((_1836 * cbLight._m0[_1788].y) * _1849) * _1596) + (((_1763 * cbLight._m0[_1710].y) * _1777) * _1607);
    float _1861 = (((_1836 * cbLight._m0[_1788].z) * _1849) * _1596) + (((_1763 * cbLight._m0[_1710].z) * _1777) * _1607);
    float _1923;
    float _1925;
    float _1927;
    if (_1647)
    {
        _1923 = _1859;
        _1925 = _1860;
        _1927 = _1861;
    }
    else
    {
        uint _1929 = _1573 + 2u;
        uint _1933 = _1573 + 10u;
        float _1947 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1929].w)) * _339) * 0.949999988079071044921875);
        float _1948 = _1947 * _1947;
        float _1949 = cbLight._m0[_1929].x + _416;
        float _1950 = cbLight._m0[_1929].y + _417;
        float _1951 = cbLight._m0[_1929].z + _418;
        float _1955 = inversesqrt(dot(vec3(_1949, _1950, _1951), vec3(_1949, _1950, _1951)));
        float _1956 = _1955 * _1949;
        float _1957 = _1955 * _1950;
        float _1958 = _1955 * _1951;
        float _1959 = dot(vec3(_336, _337, _338), vec3(cbLight._m0[_1929].xyz));
        float _3981 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1962 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1963 = dot(vec3(_336, _337, _338), vec3(_1956, _1957, _1958));
        float _3992 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        float _1966 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1967 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_1956, _1957, _1958));
        float _4003 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1971 = _1948 * _1948;
        float _1975 = ((_1966 * _1966) * (_1971 + (-1.0))) + 1.0;
        float _1984 = (exp2(log2(1.0 - (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1985 = 1.0 - _1948;
        float _1995 = (0.5 / (((_1739 * ((_1962 * _1985) + _1948)) + 9.9999999392252902907785028219223e-09) + (((_1739 * _1985) + _1948) * _1962))) * _1962;
        float _4014 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1997 = (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1971 / ((_1975 * _1975) * 3.141590118408203125));
        float _1998 = isnan(1.0) ? _1588 : (isnan(_1588) ? 1.0 : min(_1588, 1.0));
        _1923 = (((_1984 * cbLight._m0[_1933].x) * _1997) * _1998) + _1859;
        _1925 = (((_1984 * cbLight._m0[_1933].y) * _1997) * _1998) + _1860;
        _1927 = (((_1984 * cbLight._m0[_1933].z) * _1997) * _1998) + _1861;
    }
    float _2033;
    float _2035;
    float _2037;
    if (_1665)
    {
        _2033 = _1923;
        _2035 = _1925;
        _2037 = _1927;
    }
    else
    {
        uint _2044 = _1573 + 3u;
        uint _2048 = _1573 + 11u;
        float _2062 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2044].w)) * _339) * 0.949999988079071044921875);
        float _2063 = _2062 * _2062;
        float _2064 = cbLight._m0[_2044].x + _416;
        float _2065 = cbLight._m0[_2044].y + _417;
        float _2066 = cbLight._m0[_2044].z + _418;
        float _2070 = inversesqrt(dot(vec3(_2064, _2065, _2066), vec3(_2064, _2065, _2066)));
        float _2071 = _2070 * _2064;
        float _2072 = _2070 * _2065;
        float _2073 = _2070 * _2066;
        float _2074 = dot(vec3(_336, _337, _338), vec3(cbLight._m0[_2044].xyz));
        float _4030 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2077 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _2078 = dot(vec3(_336, _337, _338), vec3(_2071, _2072, _2073));
        float _4041 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2081 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _2082 = dot(vec3(cbLight._m0[_2044].xyz), vec3(_2071, _2072, _2073));
        float _4052 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2086 = _2063 * _2063;
        float _2090 = ((_2081 * _2081) * (_2086 + (-1.0))) + 1.0;
        float _2099 = (exp2(log2(1.0 - (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2100 = 1.0 - _2063;
        float _2110 = (0.5 / (((_1739 * ((_2077 * _2100) + _2063)) + 9.9999999392252902907785028219223e-09) + (((_1739 * _2100) + _2063) * _2077))) * _2077;
        float _4063 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2112 = (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_2086 / ((_2090 * _2090) * 3.141590118408203125));
        float _2113 = isnan(1.0) ? _1589 : (isnan(_1589) ? 1.0 : min(_1589, 1.0));
        _2033 = (((_2099 * cbLight._m0[_2048].x) * _2112) * _2113) + _1923;
        _2035 = (((_2099 * cbLight._m0[_2048].y) * _2112) * _2113) + _1925;
        _2037 = (((_2099 * cbLight._m0[_2048].z) * _2112) * _2113) + _1927;
    }
    float _2248;
    float _2250;
    float _2252;
    float _2254;
    float _2256;
    float _2258;
    if (_1571.y == 0u)
    {
        float _2188 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2189 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2188;
        float _2190 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2188;
        float _2191 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2188;
        uvec4 _2203 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2204 = _2203.x;
        uint _2215 = uint((float(_2203.y) * floor(float(uint(cbSceneParam._m0[85u].y * _438) / _2204))) + floor(float(uint(cbSceneParam._m0[85u].x * _437) / _2204)));
        float _2225 = (log2(_2191 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2226 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        uint _2229 = uint(isnan(14.0) ? _2226 : (isnan(_2226) ? 14.0 : min(_2226, 14.0)));
        uvec4 _2234 = texelFetch(g_lightClusterGridBuffer, int(((_2229 << 2u) + (_2215 << 6u)) >> 2u));
        uint _2235 = _2234.x;
        uint _2236 = _2203.z;
        float _2374;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        float _2384;
        if (((((1u << ((_2236 >> 4u) & 15u)) + 4294967295u) & _2235) == 0u) || ((_2236 & 240u) == 0u))
        {
            _2374 = 0.0;
            _2376 = 0.0;
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
            _2384 = 0.0;
        }
        else
        {
            float _2375;
            float _2377;
            float _2379;
            float _2381;
            float _2383;
            float _2385;
            float _2536 = 0.0;
            float _2537 = 0.0;
            float _2538 = 0.0;
            float _2539 = 0.0;
            float _2540 = 0.0;
            float _2541 = 0.0;
            uint _2542 = 0u;
            uint _2551;
            bool _2552;
            for (;;)
            {
                _2551 = texelFetch(g_lightClassification, int((((_2229 << 5u) + (_2215 << 9u)) + (_2542 << 2u)) >> 2u)).x;
                _2552 = _2551 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2552)
                {
                    frontier_phi_66_pred = _2536;
                    frontier_phi_66_pred_1 = _2541;
                    frontier_phi_66_pred_2 = _2540;
                    frontier_phi_66_pred_3 = _2539;
                    frontier_phi_66_pred_4 = _2538;
                    frontier_phi_66_pred_5 = _2537;
                }
                else
                {
                    float _2681;
                    float _2682;
                    float _2683;
                    float _2684;
                    float _2685;
                    float _2686;
                    uint _2687;
                    _2681 = _2536;
                    _2682 = _2537;
                    _2683 = _2538;
                    _2684 = _2539;
                    _2685 = _2540;
                    _2686 = _2541;
                    _2687 = _2551;
                    float _2608;
                    float _2609;
                    float _2610;
                    float _2611;
                    float _2612;
                    float _2613;
                    for (;;)
                    {
                        uint _2691 = uint(findLSB(_2687)) + (_2542 << 5u);
                        uint _2688 = (_2687 + 4294967295u) & _2687;
                        uint _2693 = _2691 * 48u;
                        vec4 _2707 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2693)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 3u)).x));
                        uint _2713 = (_2691 * 48u) + 4u;
                        vec4 _2726 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2713)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 3u)).x));
                        uint _2732 = (_2691 * 48u) + 8u;
                        vec3 _2743 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2732)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 2u)).x));
                        float _2747 = _2707.x - _2189;
                        float _2748 = _2707.y - _2190;
                        float _2749 = _2707.z - _2191;
                        float _2750 = dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749));
                        float _2753 = inversesqrt(_2750);
                        float _2754 = _2753 * _2747;
                        float _2755 = _2753 * _2748;
                        float _2756 = _2753 * _2749;
                        float _2757 = dot(vec3(_458, _461, _464), vec3(_2754, _2755, _2756));
                        float _2762 = 1.0 - (_2750 * _2707.w);
                        float _4089 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                        float _2763 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                        float _2764 = sqrt(_2750) * _2726.w;
                        float _2767 = 1.39999997615814208984375 / (_2764 + 1.39999997615814208984375);
                        float _2768 = _2767 * _2767;
                        float _2771 = ((1.0 - _2768) * _2757) + _2768;
                        float _2774 = _2764 * _2764;
                        float _2778 = ((isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0))) * _2763) / ((_2774 * 0.699999988079071044921875) + 1.0);
                        float _2782 = (-0.0) - _2189;
                        float _2783 = (-0.0) - _2190;
                        float _2784 = (-0.0) - _2191;
                        float _2788 = inversesqrt(dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784)));
                        float _2789 = _2788 * _2782;
                        float _2790 = _2788 * _2783;
                        float _2791 = _2788 * _2784;
                        float _2799 = exp2(log2(1.0 / ((_2774 * 3.5) + 5.0)) * 0.25);
                        float _2800 = 1.0 - _518;
                        float _2807 = sqrt(1.0 - ((1.0 - (_2800 * _2800)) * (1.0 - (_2799 * _2799))));
                        float _2808 = _2807 * _2807;
                        float _2809 = _2808 * _2808;
                        float _2810 = _2789 + _2754;
                        float _2811 = _2790 + _2755;
                        float _2812 = _2791 + _2756;
                        float _2816 = inversesqrt(dot(vec3(_2810, _2811, _2812), vec3(_2810, _2811, _2812)));
                        float _2820 = dot(vec3(_458, _461, _464), vec3(_2789, _2790, _2791));
                        float _4105 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
                        float _2823 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
                        float _2824 = dot(vec3(_458, _461, _464), vec3(_2816 * _2810, _2816 * _2811, _2816 * _2812));
                        float _4116 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
                        float _2827 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                        float _2831 = ((_2827 * _2827) * (_2809 + (-1.0))) + 1.0;
                        float _2832 = _2767 * _2808;
                        float _2833 = _2832 * _2832;
                        float _2836 = ((1.0 - _2833) * _2757) + _2833;
                        float _4127 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                        float _2837 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                        float _2838 = 1.0 - _2808;
                        float _2848 = (0.5 / (((_2837 * ((_2823 * _2838) + _2808)) + 9.9999999392252902907785028219223e-09) + (((_2837 * _2838) + _2808) * _2823))) * _2837;
                        float _4138 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
                        float _2859 = (((_2809 * 3.1415927410125732421875) * (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) / ((_2831 * _2831) * ((_2774 * 2.1991131305694580078125) + 3.141590118408203125))) * _2763;
                        _2611 = (_2778 * _2726.x) + _2684;
                        _2612 = (_2778 * _2726.y) + _2685;
                        _2613 = (_2778 * _2726.z) + _2686;
                        _2608 = (_2859 * _2743.x) + _2681;
                        _2609 = (_2859 * _2743.y) + _2682;
                        _2610 = (_2859 * _2743.z) + _2683;
                        if (_2688 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2681 = _2608;
                            _2682 = _2609;
                            _2683 = _2610;
                            _2684 = _2611;
                            _2685 = _2612;
                            _2686 = _2613;
                            _2687 = _2688;
                        }
                    }
                    frontier_phi_66_pred = _2608;
                    frontier_phi_66_pred_1 = _2613;
                    frontier_phi_66_pred_2 = _2612;
                    frontier_phi_66_pred_3 = _2611;
                    frontier_phi_66_pred_4 = _2610;
                    frontier_phi_66_pred_5 = _2609;
                }
                _2375 = frontier_phi_66_pred;
                _2385 = frontier_phi_66_pred_1;
                _2383 = frontier_phi_66_pred_2;
                _2381 = frontier_phi_66_pred_3;
                _2379 = frontier_phi_66_pred_4;
                _2377 = frontier_phi_66_pred_5;
                uint _2543 = _2542 + 1u;
                if (_2543 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2536 = _2375;
                    _2537 = _2377;
                    _2538 = _2379;
                    _2539 = _2381;
                    _2540 = _2383;
                    _2541 = _2385;
                    _2542 = _2543;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2374 = _2375;
            _2376 = _2377;
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
            _2384 = _2385;
        }
        uvec4 _2388 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2389 = _2388.z;
        uint _2391 = (_2389 >> 8u) & 15u;
        float _2504;
        float _2506;
        float _2508;
        float _2510;
        float _2512;
        float _2514;
        if (((4294967295u << _2391) & _2235) == 0u)
        {
            _2504 = _2374;
            _2506 = _2376;
            _2508 = _2378;
            _2510 = _2380;
            _2512 = _2382;
            _2514 = _2384;
        }
        else
        {
            float _2529 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
            float _2530 = _2529 * _2189;
            float _2531 = _2529 * _2190;
            float _2532 = _2529 * _2191;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2391 < ((_2389 >> 12u) & 15u))
            {
                float _2505;
                float _2507;
                float _2509;
                float _2511;
                float _2513;
                float _2515;
                float _2664 = _2374;
                float _2665 = _2376;
                float _2666 = _2378;
                float _2667 = _2380;
                float _2668 = _2382;
                float _2669 = _2384;
                uint _2670 = _2391;
                uint _2679;
                bool _2680;
                for (;;)
                {
                    _2679 = texelFetch(g_lightClassification, int((((_2229 << 5u) + (_2215 << 9u)) + (_2670 << 2u)) >> 2u)).x;
                    _2680 = _2679 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2680)
                    {
                        frontier_phi_77_pred = _2669;
                        frontier_phi_77_pred_1 = _2668;
                        frontier_phi_77_pred_2 = _2667;
                        frontier_phi_77_pred_3 = _2666;
                        frontier_phi_77_pred_4 = _2665;
                        frontier_phi_77_pred_5 = _2664;
                    }
                    else
                    {
                        float _2873;
                        float _2874;
                        float _2875;
                        float _2876;
                        float _2877;
                        float _2878;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _2886 = _2664;
                        float _2887 = _2665;
                        float _2888 = _2666;
                        float _2889 = _2667;
                        float _2890 = _2668;
                        float _2891 = _2669;
                        uint _2892 = _2679;
                        uint _2893;
                        vec4 _2918;
                        float _2919;
                        vec4 _2934;
                        vec3 _2946;
                        vec4 _2962;
                        vec4 _2978;
                        float _3025;
                        bool _3026;
                        for (;;)
                        {
                            uint _2903 = ((_2670 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2892));
                            _2893 = (_2892 + 4294967295u) & _2892;
                            uint _2905 = _2903 * 40u;
                            _2918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 3u)).x));
                            _2919 = _2918.w;
                            uint _2921 = (_2903 * 40u) + 4u;
                            _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            uint _2936 = (_2903 * 40u) + 8u;
                            _2946 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x));
                            uint _2949 = (_2903 * 40u) + 16u;
                            _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            uint _2965 = (_2903 * 40u) + 20u;
                            _2978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 3u)).x));
                            uint _2981 = (_2903 * 40u) + 24u;
                            vec4 _2994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 3u)).x));
                            uint _3000 = (_2903 * 40u) + 28u;
                            vec4 _3013 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 3u)).x));
                            _3025 = fma(_2191, _3013.z, fma(_2190, _3013.y, _3013.x * _2189)) + _3013.w;
                            _3026 = !((fma(_2191, _2994.z, fma(_2190, _2994.y, _2994.x * _2189)) + _2994.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3026)
                            {
                                float _3053 = _2918.x - _2189;
                                float _3054 = _2918.y - _2190;
                                float _3055 = _2918.z - _2191;
                                float _3056 = dot(vec3(_3053, _3054, _3055), vec3(_3053, _3054, _3055));
                                float _3059 = inversesqrt(_3056);
                                float _3060 = _3059 * _3053;
                                float _3061 = _3059 * _3054;
                                float _3062 = _3059 * _3055;
                                float _3066 = 1.0 - (_3056 / (_2919 * _2919));
                                float _4149 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                                float _3067 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                                float _3071 = sqrt(_3056) * _2934.w;
                                float _3073 = 1.39999997615814208984375 / (_3071 + 1.39999997615814208984375);
                                float _3074 = _3073 * _3073;
                                float _3077 = ((1.0 - _3074) * dot(vec3(_3060, _3061, _3062), vec3(_458, _461, _464))) + _3074;
                                float _3080 = _3071 * _3071;
                                float _3084 = (fma(_2191, _2962.z, fma(_2190, _2962.y, _2962.x * _2189)) + _2962.w) / _3025;
                                float _3085 = (fma(_2191, _2978.z, fma(_2190, _2978.y, _2978.x * _2189)) + _2978.w) / _3025;
                                float _3089 = 1.0 - dot(vec2(_3084, _3085), vec2(_3084, _3085));
                                float _4165 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                                float _3090 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                                float _3091 = _3090 * (((isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0))) * _3067) / ((_3080 * 0.699999988079071044921875) + 1.0));
                                float _3103 = exp2(log2(1.0 / ((_3080 * 3.5) + 5.0)) * 0.25);
                                float _3104 = 1.0 - _518;
                                float _3111 = sqrt(1.0 - ((1.0 - (_3104 * _3104)) * (1.0 - (_3103 * _3103))));
                                float _3112 = _3111 * _3111;
                                float _3113 = _3112 * _3112;
                                float _3114 = _3060 - _2530;
                                float _3115 = _3061 - _2531;
                                float _3116 = _3062 - _2532;
                                float _3120 = inversesqrt(dot(vec3(_3114, _3115, _3116), vec3(_3114, _3115, _3116)));
                                float _3124 = dot(vec3(_458, _461, _464), vec3((-0.0) - _2530, (-0.0) - _2531, (-0.0) - _2532));
                                float _4176 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                                float _3127 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
                                float _3128 = dot(vec3(_458, _461, _464), vec3(_3120 * _3114, _3120 * _3115, _3120 * _3116));
                                float _4187 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                                float _3131 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                                float _3135 = ((_3131 * _3131) * (_3113 + (-1.0))) + 1.0;
                                float _3136 = _3073 * _3112;
                                float _3137 = _3136 * _3136;
                                float _3143 = ((1.0 - _3137) * dot(vec3(_458, _461, _464), vec3(_3060, _3061, _3062))) + _3137;
                                float _4198 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                                float _3144 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                                float _3145 = 1.0 - _3112;
                                float _3155 = (0.5 / (((_3144 * ((_3127 * _3145) + _3112)) + 9.9999999392252902907785028219223e-09) + (((_3144 * _3145) + _3112) * _3127))) * _3144;
                                float _4209 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                                float _3165 = (_3090 * _3067) * (((_3113 * 3.1415927410125732421875) * (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) / ((_3135 * _3135) * ((_3080 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3091 * _2934.y;
                                frontier_phi_83_pred_1 = _3091 * _2934.x;
                                frontier_phi_83_pred_2 = _3165 * _2946.z;
                                frontier_phi_83_pred_3 = _3165 * _2946.y;
                                frontier_phi_83_pred_4 = _3165 * _2946.x;
                                frontier_phi_83_pred_5 = _3091 * _2934.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3173 = frontier_phi_83_pred;
                            _3172 = frontier_phi_83_pred_1;
                            _3171 = frontier_phi_83_pred_2;
                            _3170 = frontier_phi_83_pred_3;
                            _3169 = frontier_phi_83_pred_4;
                            _3174 = frontier_phi_83_pred_5;
                            _2876 = _3172 + _2889;
                            _2877 = _3173 + _2890;
                            _2878 = _3174 + _2891;
                            _2873 = _3169 + _2886;
                            _2874 = _3170 + _2887;
                            _2875 = _3171 + _2888;
                            if (_2893 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2886 = _2873;
                                _2887 = _2874;
                                _2888 = _2875;
                                _2889 = _2876;
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2893;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2878;
                        frontier_phi_77_pred_1 = _2877;
                        frontier_phi_77_pred_2 = _2876;
                        frontier_phi_77_pred_3 = _2875;
                        frontier_phi_77_pred_4 = _2874;
                        frontier_phi_77_pred_5 = _2873;
                    }
                    _2515 = frontier_phi_77_pred;
                    _2513 = frontier_phi_77_pred_1;
                    _2511 = frontier_phi_77_pred_2;
                    _2509 = frontier_phi_77_pred_3;
                    _2507 = frontier_phi_77_pred_4;
                    _2505 = frontier_phi_77_pred_5;
                    uint _2671 = _2670 + 1u;
                    if (_2671 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2664 = _2505;
                        _2665 = _2507;
                        _2666 = _2509;
                        _2667 = _2511;
                        _2668 = _2513;
                        _2669 = _2515;
                        _2670 = _2671;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2509;
                frontier_phi_58_59_ladder_1 = _2515;
                frontier_phi_58_59_ladder_2 = _2513;
                frontier_phi_58_59_ladder_3 = _2511;
                frontier_phi_58_59_ladder_4 = _2507;
                frontier_phi_58_59_ladder_5 = _2505;
            }
            else
            {
                frontier_phi_58_59_ladder = _2378;
                frontier_phi_58_59_ladder_1 = _2384;
                frontier_phi_58_59_ladder_2 = _2382;
                frontier_phi_58_59_ladder_3 = _2380;
                frontier_phi_58_59_ladder_4 = _2376;
                frontier_phi_58_59_ladder_5 = _2374;
            }
            _2504 = frontier_phi_58_59_ladder_5;
            _2506 = frontier_phi_58_59_ladder_4;
            _2508 = frontier_phi_58_59_ladder;
            _2510 = frontier_phi_58_59_ladder_3;
            _2512 = frontier_phi_58_59_ladder_2;
            _2514 = frontier_phi_58_59_ladder_1;
        }
        float _2519 = isnan(1.0) ? _502 : (isnan(_502) ? 1.0 : min(_502, 1.0));
        _2248 = (_2519 * _2510) + _1703;
        _2250 = (_2519 * _2512) + _1705;
        _2252 = (_2519 * _2514) + _1707;
        _2254 = ((_2504 * 0.039999999105930328369140625) * _2519) + _2033;
        _2256 = ((_2506 * 0.039999999105930328369140625) * _2519) + _2035;
        _2258 = ((_2508 * 0.039999999105930328369140625) * _2519) + _2037;
    }
    else
    {
        _2248 = _1703;
        _2250 = _1705;
        _2252 = _1707;
        _2254 = _2033;
        _2256 = _2035;
        _2258 = _2037;
    }
    uint _2264 = _478 + uint(cbMatDynParam._m0[0u].w);
    float _2273 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _302.x) * _322) * cbInstanceData._m0[_2264].x;
    float _2277 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _302.y) * _322) * cbInstanceData._m0[_2264].y;
    float _2281 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _302.z) * _322) * cbInstanceData._m0[_2264].z;
    float _4225 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _4236 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _4247 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _2298 = (((isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_2248 + ((isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0))) * _502))) + ((_2254 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _1340)) * cbPerFrame._m0[3u].x)) + _2273;
    float _2300 = (_2277 + ((_2256 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _1340)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_2250 + ((isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0))) * _502)));
    float _2302 = (_2281 + ((_2258 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _1340)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_2252 + ((isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))) * _502)));
    float _2303 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2304 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2305 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2311 = cbMtdParam._m0[2u].x * _2273;
    float _2312 = cbMtdParam._m0[2u].y * _2277;
    float _2313 = cbMtdParam._m0[2u].z * _2281;
    float _4273 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2315 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    uint _2316 = _477 + 6u;
    float _2324 = _437 / cbSceneParam._m0[86u].x;
    float _2325 = _438 / cbSceneParam._m0[86u].y;
    vec4 _2339 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2324, _2325, (log2((isnan(cbSceneParam._m0[77u].w) ? _358 : (isnan(_358) ? cbSceneParam._m0[77u].w : min(_358, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2341 = _2339.x;
    float _2342 = _2339.y;
    float _2343 = _2339.z;
    float _2344 = _2339.w;
    float _2437;
    float _2439;
    float _2441;
    float _2443;
    if (_358 > cbSceneParam._m0[78u].w)
    {
        float _2399 = isnan(_358) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _358 : min(cbSceneParam._m0[80u].w, _358));
        float _2400 = _2399 / _358;
        float _2411 = _2400 * _409;
        float _2412 = _410 * _2400;
        float _2413 = (-0.0) - _2412;
        float _2415 = _2400 * _411;
        float _2417 = (cbSceneParam._m0[77u].w * _2413) / _2399;
        float _2418 = _2417 + cbSceneParam._m0[79u].w;
        float _2419 = cbSceneParam._m0[79u].w - _2412;
        float _2425 = sqrt(((_2411 * _2411) + (_2412 * _2412)) + (_2415 * _2415));
        float _2428 = (1.0 - (cbSceneParam._m0[77u].w / _2399)) * _2425;
        float _2433 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2435 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2621;
        if (abs((_2413 - _2417) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2621 = ((((_2418 > 0.0) ? exp2(_2433 * _2418) : (2.0 - exp2(_2435 * _2418))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2428;
        }
        else
        {
            float _2565 = 1.0 / cbSceneParam._m0[80u].x;
            float _2566 = isnan(_2419) ? _2418 : (isnan(_2418) ? _2419 : max(_2418, _2419));
            float _2567 = isnan(_2419) ? _2418 : (isnan(_2418) ? _2419 : min(_2418, _2419));
            float _2576 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : min(_2566, 0.0));
            float _2577 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : min(_2567, 0.0));
            _2621 = ((abs(_2425 / _2413) * cbSceneParam._m0[80u].y) * ((((_2576 - _2577) * 2.0) - ((exp2(_2433 * (isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0)))) - exp2(_2433 * (isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0))))) * _2565)) - ((exp2(_2435 * _2576) - exp2(_2435 * _2577)) * _2565))) + (_2428 * cbSceneParam._m0[80u].z);
        }
        vec4 _2623 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2324, _2325, 1.0), 0.0);
        float _2632 = exp2((_2621 * (-1.44269502162933349609375)) * (1.0 - _2623.w));
        float _2633 = log2(_2632);
        float _2649 = log2(_2344);
        _2437 = (exp2(_2649 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2633 * cbSceneParam._m0[78u].x)) * _2623.x) / cbSceneParam._m0[78u].x)) + _2341;
        _2439 = (exp2(_2649 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2633 * cbSceneParam._m0[78u].y)) * _2623.y) / cbSceneParam._m0[78u].y)) + _2342;
        _2441 = (exp2(_2649 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2633 * cbSceneParam._m0[78u].z)) * _2623.z) / cbSceneParam._m0[78u].z)) + _2343;
        _2443 = _2632 * _2344;
    }
    else
    {
        _2437 = _2341;
        _2439 = _2342;
        _2441 = _2343;
        _2443 = _2344;
    }
    bool _2659;
    vec4 _2453;
    vec4 _2475;
    float _2477;
    float _2481;
    float _2482;
    float _2483;
    float _2486;
    float _2489;
    float _2492;
    float _2493;
    bool _2503;
    for (;;)
    {
        _2453 = cbMatDynParam._m0[0u];
        float _2455 = roundEven(_2453.y);
        bool _2456 = _2455 == 3.0;
        float _2457 = log2(_2443);
        float _2461 = exp2(_2457 * cbSceneParam._m0[78u].x);
        float _2462 = exp2(_2457 * cbSceneParam._m0[78u].y);
        float _2463 = exp2(_2457 * cbSceneParam._m0[78u].z);
        float _2464 = _2461 * _2303;
        float _2465 = _2462 * _2304;
        float _2466 = _2463 * _2305;
        float _2473 = _425 + (-0.5);
        _2475 = cbMtdParam._m0[1u];
        _2477 = _2475.y * _2473;
        float _2480 = (_2455 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2481 = _2480 * (_2456 ? _2464 : (_2464 + (cbSceneParam._m0[72u].w * _2437)));
        _2482 = _2480 * (_2456 ? _2465 : (_2465 + (cbSceneParam._m0[72u].w * _2439)));
        _2483 = _2480 * (_2456 ? _2466 : (_2466 + (cbSceneParam._m0[72u].w * _2441)));
        _2486 = ((_2311 * _2315) * _2461) * _2480;
        _2489 = ((_2312 * _2315) * _2462) * _2480;
        _2492 = ((_2313 * _2315) * _2463) * _2480;
        _2493 = _2473 * 0.999000012874603271484375;
        _2503 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2503)
        {
            if ((cbInstanceData._m0[_477 + 7u].x + _2493) < 0.5)
            {
                _2659 = true;
                break;
            }
        }
        uint _2600 = _478 + uint(_2453.w);
        if ((cbInstanceData._m0[_2600].w < 1.0) && ((cbInstanceData._m0[_2600].w + _2493) < 0.5))
        {
            _2659 = true;
            break;
        }
        if ((_2477 + 1.0) < _2475.x)
        {
            _2659 = true;
            break;
        }
        _2659 = false;
        break;
    }
    float _2864;
    if (_2659)
    {
        discard_state = true;
        _2864 = 0.0;
    }
    else
    {
        _2864 = cbInstanceData._m0[_2316].w;
    }
    SV_Target.x = _2481;
    SV_Target.y = _2482;
    SV_Target.z = _2483;
    SV_Target.w = _2864;
    SV_Target_1.x = _2486;
    SV_Target_1.y = _2489;
    SV_Target_1.z = _2492;
    SV_Target_1.w = cbInstanceData._m0[_2316].w;
    discard_exit();
}


