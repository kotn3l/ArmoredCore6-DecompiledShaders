#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _883;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _228.x * cbMtdParam._m0[9u].x;
    float _235 = _228.y * cbMtdParam._m0[9u].y;
    float _236 = _228.z * cbMtdParam._m0[9u].z;
    vec4 _248 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _250 = _248.x;
    vec4 _262 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _266 = _262.z;
    float _270 = (_262.x * 2.0) + (-1.0);
    float _272 = (_262.y * 2.0) + (-1.0);
    float _273 = dot(vec2(_270, _272), vec2(_270, _272));
    float _3288 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _279 = sqrt(1.0 - (isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0))));
    vec4 _301 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _315 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3299 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _316 = isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0));
    float _324 = (((_316 * _316) * (3.0 - (_316 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _327 = fma(_279, _199 * NORMAL.x, fma(_272, _206 * TANGENT.x, (_192 * _185) * _270));
    float _330 = fma(_279, _199 * NORMAL.y, fma(_272, _206 * TANGENT.y, (_192 * _186) * _270));
    float _333 = fma(_279, _199 * NORMAL.z, fma(_272, _206 * TANGENT.z, (_192 * _187) * _270));
    float _337 = inversesqrt(dot(vec3(_327, _330, _333), vec3(_327, _330, _333)));
    float _338 = _337 * _327;
    float _339 = _337 * _330;
    float _340 = _337 * _333;
    float _3310 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _341 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
    float _3321 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3332 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3343 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3354 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _345 = isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0));
    float _361 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _402 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _412 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _402);
    float _413 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _402);
    float _414 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _402);
    float _418 = inversesqrt(dot(vec3(_412, _413, _414), vec3(_412, _413, _414)));
    float _419 = _412 * _418;
    float _420 = _413 * _418;
    float _421 = _414 * _418;
    float _427 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _428 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _449 = fma(_340, cbSceneParam._m0[5u].z, fma(_339, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _338));
    float _452 = fma(_340, cbSceneParam._m0[6u].z, fma(_339, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _338));
    float _455 = fma(_340, cbSceneParam._m0[7u].z, fma(_339, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _338));
    uint _468 = uint(roundEven(NORMAL.w)) * 13u;
    uint _470 = _468 + 9u;
    uint _471 = _470 + uint(cbMatDynParam._m0[0u].w);
    float _477 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0)))) * cbInstanceData._m0[_471].x;
    float _478 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0)))) * cbInstanceData._m0[_471].y;
    float _479 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0)))) * cbInstanceData._m0[_471].z;
    float _3365 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _480 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
    float _3376 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _481 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
    float _3387 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _482 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
    float _483 = 1.0 - _345;
    float _484 = _480 * _483;
    float _485 = _481 * _483;
    float _486 = _482 * _483;
    float _491 = (_480 + (-0.039999999105930328369140625)) * _345;
    float _492 = (_481 + (-0.039999999105930328369140625)) * _345;
    float _493 = (_482 + (-0.039999999105930328369140625)) * _345;
    float _494 = _491 + 0.039999999105930328369140625;
    float _496 = _492 + 0.039999999105930328369140625;
    float _497 = _493 + 0.039999999105930328369140625;
    vec4 _506 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _427, cbSceneParam._m0[86u].y * _428));
    float _509 = _506.x * TEXCOORD.z;
    float _510 = dot(vec3(_338, _339, _340), vec3(_419, _420, _421));
    float _513 = _510 * 2.0;
    float _517 = (_513 * _338) - _419;
    float _518 = (_513 * _339) - _420;
    float _519 = (_513 * _340) - _421;
    float _523 = abs(dot(vec3(_419, _420, _421), vec3(_338, _339, _340)));
    float _3398 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _525 = sqrt(_341);
    float _537 = exp2((_525 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_525 * 3.0));
    float _543 = (1.0 - _537) * ((_525 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _544 = _537 * _525;
    float _572 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _576 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _580 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _882;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _607 = fma(_580, cbModelParam._m0[26u].z, fma(_576, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _572));
        float _611 = fma(_580, cbModelParam._m0[27u].z, fma(_576, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _572));
        float _615 = fma(_580, cbModelParam._m0[28u].z, fma(_576, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _572));
        float _640 = _572 + _338;
        float _641 = _576 + _339;
        float _642 = _580 + _340;
        float _652 = fma(_642, cbModelParam._m0[26u].z, fma(_641, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _640)) - _607;
        float _653 = fma(_642, cbModelParam._m0[27u].z, fma(_641, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _640)) - _611;
        float _654 = fma(_642, cbModelParam._m0[28u].z, fma(_641, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _640)) - _615;
        float _658 = inversesqrt(dot(vec3(_652, _653, _654), vec3(_652, _653, _654)));
        float _671 = ((_658 * _652) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_607 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _672 = ((_658 * _653) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_611 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _673 = ((_658 * _654) / cbModelParam._m0[34u].z) + ((((((_615 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _676 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        vec4 _683 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        float _710 = exp2((_676.w + (-0.5)) * 20.0) * 2.0;
        float _711 = _710 * (_676.x + (-0.5));
        float _712 = _710 * (_676.y + (-0.5));
        float _713 = _710 * (_676.z + (-0.5));
        float _720 = exp2((_683.w + (-0.5)) * 20.0) * 2.0;
        float _721 = _720 * (_683.x + (-0.5));
        float _722 = _720 * (_683.y + (-0.5));
        float _723 = _720 * (_683.z + (-0.5));
        float _730 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _731 = _730 * (_690.x + (-0.5));
        float _732 = _730 * (_690.y + (-0.5));
        float _733 = _730 * (_690.z + (-0.5));
        float _740 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_697.x + (-0.5));
        float _742 = _740 * (_697.y + (-0.5));
        float _743 = _740 * (_697.z + (-0.5));
        float _744 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _745 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _746 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _747 = _711 * 0.5;
        float _748 = _721 * 0.5;
        float _749 = _731 * 0.5;
        float _750 = dot(vec3(_747, _748, _749), vec3(_747, _748, _749));
        float _755 = (_750 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_750);
        float _764 = (dot(vec3(_338, _339, _340), vec3(_755 * _747, _755 * _748, _755 * _749)) + 1.0) * 0.5;
        float _3424 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _774 = sqrt(((_748 * _748) + (_747 * _747)) + (_749 * _749)) / (_744 + 9.9999997473787516355514526367188e-06);
        float _3435 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
        float _776 = _775 * 2.0;
        float _780 = (1.0 - _775) / (_775 + 1.0);
        float _3446 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
        float _790 = ((((1.0 - _781) * (_776 + 2.0)) * exp2(log2(isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0))) * (_776 + 1.0))) + _781) * _744;
        float _791 = _712 * 0.5;
        float _792 = _722 * 0.5;
        float _793 = _732 * 0.5;
        float _794 = dot(vec3(_791, _792, _793), vec3(_791, _792, _793));
        float _799 = (_794 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_794);
        float _807 = (dot(vec3(_338, _339, _340), vec3(_799 * _791, _799 * _792, _799 * _793)) + 1.0) * 0.5;
        float _3457 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _816 = sqrt(((_792 * _792) + (_791 * _791)) + (_793 * _793)) / (_745 + 9.9999997473787516355514526367188e-06);
        float _3468 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
        float _818 = _817 * 2.0;
        float _822 = (1.0 - _817) / (_817 + 1.0);
        float _3479 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _832 = ((((1.0 - _823) * (_818 + 2.0)) * exp2(log2(isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0))) * (_818 + 1.0))) + _823) * _745;
        float _833 = _713 * 0.5;
        float _834 = _723 * 0.5;
        float _835 = _733 * 0.5;
        float _836 = dot(vec3(_833, _834, _835), vec3(_833, _834, _835));
        float _841 = (_836 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_836);
        float _849 = (dot(vec3(_338, _339, _340), vec3(_841 * _833, _841 * _834, _841 * _835)) + 1.0) * 0.5;
        float _3490 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _858 = sqrt(((_834 * _834) + (_833 * _833)) + (_835 * _835)) / (_746 + 9.9999997473787516355514526367188e-06);
        float _3501 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _860 = _859 * 2.0;
        float _864 = (1.0 - _859) / (_859 + 1.0);
        float _3512 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _874 = ((((1.0 - _865) * (_860 + 2.0)) * exp2(log2(isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0))) * (_860 + 1.0))) + _865) * _746;
        _882 = _713;
        _884 = _712;
        _885 = _711;
        _886 = _723;
        _887 = _722;
        _888 = _721;
        _889 = _733;
        _890 = _732;
        _891 = _731;
        _892 = _746;
        _893 = _745;
        _894 = _744;
        _895 = cbModelParam._m0[36u].z * (isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0)));
        _896 = cbModelParam._m0[36u].z * (isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0)));
        _897 = cbModelParam._m0[36u].z * (isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0)));
    }
    else
    {
        _882 = _883;
        _884 = _883;
        _885 = _883;
        _886 = _883;
        _887 = _883;
        _888 = _883;
        _889 = _883;
        _890 = _883;
        _891 = _883;
        _892 = _883;
        _893 = _883;
        _894 = _883;
        _895 = 0.0;
        _896 = 0.0;
        _897 = 0.0;
    }
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _923 = fma(_580, cbModelParam._m0[30u].z, fma(_576, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _572));
        float _927 = fma(_580, cbModelParam._m0[31u].z, fma(_576, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _572));
        float _931 = fma(_580, cbModelParam._m0[32u].z, fma(_576, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _572));
        float _954 = _572 + _338;
        float _955 = _576 + _339;
        float _956 = _580 + _340;
        float _966 = fma(_956, cbModelParam._m0[30u].z, fma(_955, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _954)) - _923;
        float _967 = fma(_956, cbModelParam._m0[31u].z, fma(_955, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _954)) - _927;
        float _968 = fma(_956, cbModelParam._m0[32u].z, fma(_955, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _954)) - _931;
        float _972 = inversesqrt(dot(vec3(_966, _967, _968), vec3(_966, _967, _968)));
        float _985 = ((_972 * _966) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_923 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_972 * _967) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_927 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_972 * _968) / cbModelParam._m0[35u].z) + ((((((_931 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        float _1022 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_989.x + (-0.5));
        float _1024 = _1022 * (_989.y + (-0.5));
        float _1025 = _1022 * (_989.z + (-0.5));
        float _1032 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_996.x + (-0.5));
        float _1034 = _1032 * (_996.y + (-0.5));
        float _1035 = _1032 * (_996.z + (-0.5));
        float _1042 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1003.x + (-0.5));
        float _1044 = _1042 * (_1003.y + (-0.5));
        float _1045 = _1042 * (_1003.z + (-0.5));
        float _1052 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1010.x + (-0.5));
        float _1054 = _1052 * (_1010.y + (-0.5));
        float _1055 = _1052 * (_1010.z + (-0.5));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = _1023 * 0.5;
        float _1060 = _1033 * 0.5;
        float _1061 = _1043 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1075 = (dot(vec3(_338, _339, _340), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3553 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1084 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3564 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3575 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) * (_1086 + 1.0))) + _1091) * _1056;
        float _1101 = _1024 * 0.5;
        float _1102 = _1034 * 0.5;
        float _1103 = _1044 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1117 = (dot(vec3(_338, _339, _340), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3586 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1126 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3597 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3608 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))) * (_1128 + 1.0))) + _1133) * _1057;
        float _1143 = _1025 * 0.5;
        float _1144 = _1035 * 0.5;
        float _1145 = _1045 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_338, _339, _340), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3619 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3630 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3641 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * (_1170 + 1.0))) + _1175) * _1058;
        _1192 = _1025;
        _1193 = _1024;
        _1194 = _1023;
        _1195 = _1035;
        _1196 = _1034;
        _1197 = _1033;
        _1198 = _1045;
        _1199 = _1044;
        _1200 = _1043;
        _1201 = _1058;
        _1202 = _1057;
        _1203 = _1056;
        _1204 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
        _1205 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1206 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
    }
    else
    {
        _1192 = _883;
        _1193 = _883;
        _1194 = _883;
        _1195 = _883;
        _1196 = _883;
        _1197 = _883;
        _1198 = _883;
        _1199 = _883;
        _1200 = _883;
        _1201 = _883;
        _1202 = _883;
        _1203 = _883;
        _1204 = 0.0;
        _1205 = 0.0;
        _1206 = 0.0;
    }
    float _1216 = (cbModelParam._m0[1u].x * (_1204 - _895)) + _895;
    float _1217 = (cbModelParam._m0[1u].x * (_1205 - _896)) + _896;
    float _1218 = (cbModelParam._m0[1u].x * (_1206 - _897)) + _897;
    float _1239 = fma(_1218, cbSceneParam._m0[89u].z, fma(_1217, cbSceneParam._m0[89u].y, _1216 * cbSceneParam._m0[89u].x));
    float _1242 = fma(_1218, cbSceneParam._m0[90u].z, fma(_1217, cbSceneParam._m0[90u].y, _1216 * cbSceneParam._m0[90u].x));
    float _1245 = fma(_1218, cbSceneParam._m0[91u].z, fma(_1217, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1216));
    float _1260 = _517 * 0.5;
    float _1261 = _518 * 0.5;
    float _1262 = _519 * 0.5;
    float _1263 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_1194, _1197, _1200, _1203));
    float _1266 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_1193, _1196, _1199, _1202));
    float _1269 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_1192, _1195, _1198, _1201));
    float _1303;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1276 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_882, _886, _889, _892));
        float _1280 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_884, _887, _890, _893));
        float _1284 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_885, _888, _891, _894));
        float _1291 = dot(vec4(cbModelParam._m0[39u]), vec4(_1260, _1261, _1262, 1.0));
        _1303 = dot(vec3(isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)), isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)), isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1291) ? 0.0 : (isnan(0.0) ? _1291 : max(0.0, _1291))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1303 = 1.0;
    }
    float _1314;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1305 = dot(vec4(cbModelParam._m0[40u]), vec4(_1260, _1261, _1262, 1.0));
        _1314 = dot(vec3(isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)), isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1305) ? 0.0 : (isnan(0.0) ? _1305 : max(0.0, _1305))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1314 = 1.0;
    }
    float _1318 = (_1314 * cbModelParam._m0[1u].x) + (_1303 * (1.0 - cbModelParam._m0[1u].x));
    float _1328 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _341);
    float _1329 = isnan(_1328) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1328 : min(cbModelParam._m0[25u].z, _1328));
    float _1410;
    float _1412;
    float _1414;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1377 = fma(_580, cbModelParam._m0[13u].z, fma(_576, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _572)) + cbModelParam._m0[13u].w;
        float _1381 = fma(_580, cbModelParam._m0[14u].z, fma(_576, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _572)) + cbModelParam._m0[14u].w;
        float _1385 = fma(_580, cbModelParam._m0[15u].z, fma(_576, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _572)) + cbModelParam._m0[15u].w;
        float _1388 = fma(_519, cbModelParam._m0[13u].z, fma(_518, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _517));
        float _1391 = fma(_519, cbModelParam._m0[14u].z, fma(_518, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _517));
        float _1394 = fma(_519, cbModelParam._m0[15u].z, fma(_518, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _517));
        float _1422;
        if (_1388 > 0.0)
        {
            _1422 = abs((1.0 - _1377) / _1388);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1388 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1377 + 1.0) / _1388);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1422 = frontier_phi_14_12_ladder;
        }
        float _1649;
        if (_1391 > 0.0)
        {
            _1649 = abs((1.0 - _1381) / _1391);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1391 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1381 + 1.0) / _1391);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1649 = frontier_phi_23_19_ladder;
        }
        float _1906;
        if (_1394 > 0.0)
        {
            _1906 = abs((1.0 - _1385) / _1394);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1394 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1385 + 1.0) / _1394);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1906 = frontier_phi_35_30_ladder;
        }
        float _1908 = isnan(_1649) ? _1422 : (isnan(_1422) ? _1649 : min(_1422, _1649));
        float _1909 = isnan(_1906) ? _1908 : (isnan(_1908) ? _1906 : min(_1908, _1906));
        float _1913 = (_1909 * _1388) + _1377;
        float _1914 = (_1909 * _1391) + _1381;
        float _1915 = (_1909 * _1394) + _1385;
        float _1916 = _1909 * 9.9999997473787516355514526367188e-05;
        float _1918 = (-1.0) - _1916;
        float _1920 = _1916 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1915 > _1920) || ((_1915 < _1918) || ((_1914 > _1920) || ((_1914 < _1918) || ((_1913 < _1918) || (_1913 > _1920))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2043 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1915, cbModelParam._m0[9u].z, fma(_1914, cbModelParam._m0[9u].y, _1913 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1915, cbModelParam._m0[10u].z, fma(_1914, cbModelParam._m0[10u].y, _1913 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1915, cbModelParam._m0[11u].z, fma(_1914, cbModelParam._m0[11u].y, _1913 * cbModelParam._m0[11u].x))), _1329);
            frontier_phi_13_35_ladder = _2043.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2043.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2043.x * cbModelParam._m0[1u].y;
        }
        _1410 = frontier_phi_13_35_ladder_2;
        _1412 = frontier_phi_13_35_ladder_1;
        _1414 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1398 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_517, _518, _519), _1329);
        _1410 = _1398.x * cbModelParam._m0[1u].y;
        _1412 = _1398.y * cbModelParam._m0[1u].y;
        _1414 = _1398.z * cbModelParam._m0[1u].y;
    }
    float _1418 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _341);
    float _1419 = isnan(_1418) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1418 : min(cbModelParam._m0[25u].w, _1418));
    float _1511;
    float _1513;
    float _1515;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1475 = fma(_580, cbModelParam._m0[21u].z, fma(_576, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _572)) + cbModelParam._m0[21u].w;
        float _1479 = fma(_580, cbModelParam._m0[22u].z, fma(_576, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _572)) + cbModelParam._m0[22u].w;
        float _1483 = fma(_580, cbModelParam._m0[23u].z, fma(_576, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _572)) + cbModelParam._m0[23u].w;
        float _1486 = fma(_519, cbModelParam._m0[21u].z, fma(_518, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _517));
        float _1489 = fma(_519, cbModelParam._m0[22u].z, fma(_518, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _517));
        float _1492 = fma(_519, cbModelParam._m0[23u].z, fma(_518, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _517));
        float _1654;
        if (_1486 > 0.0)
        {
            _1654 = abs((1.0 - _1475) / _1486);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1475 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1654 = frontier_phi_25_21_ladder;
        }
        float _1933;
        if (_1489 > 0.0)
        {
            _1933 = abs((1.0 - _1479) / _1489);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1479 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1933 = frontier_phi_37_32_ladder;
        }
        float _2146;
        if (_1492 > 0.0)
        {
            _2146 = abs((1.0 - _1483) / _1492);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1483 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2146 = frontier_phi_46_43_ladder;
        }
        float _2148 = isnan(_1933) ? _1654 : (isnan(_1654) ? _1933 : min(_1654, _1933));
        float _2149 = isnan(_2146) ? _2148 : (isnan(_2148) ? _2146 : min(_2148, _2146));
        float _2153 = (_2149 * _1486) + _1475;
        float _2154 = (_2149 * _1489) + _1479;
        float _2155 = (_2149 * _1492) + _1483;
        float _2156 = _2149 * 9.9999997473787516355514526367188e-05;
        float _2157 = (-1.0) - _2156;
        float _2159 = _2156 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2155 > _2159) || ((_2155 < _2157) || ((_2154 > _2159) || ((_2154 < _2157) || ((_2153 < _2157) || (_2153 > _2159))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2392 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2155, cbModelParam._m0[17u].z, fma(_2154, cbModelParam._m0[17u].y, _2153 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2155, cbModelParam._m0[18u].z, fma(_2154, cbModelParam._m0[18u].y, _2153 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2155, cbModelParam._m0[19u].z, fma(_2154, cbModelParam._m0[19u].y, _2153 * cbModelParam._m0[19u].x))), _1419);
            frontier_phi_22_46_ladder = _2392.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2392.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2392.x * cbModelParam._m0[1u].z;
        }
        _1511 = frontier_phi_22_46_ladder_2;
        _1513 = frontier_phi_22_46_ladder_1;
        _1515 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1495 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_517, _518, _519), _1419);
        _1511 = _1495.x * cbModelParam._m0[1u].z;
        _1513 = _1495.y * cbModelParam._m0[1u].z;
        _1515 = _1495.z * cbModelParam._m0[1u].z;
    }
    float _1528 = (((_543 * _494) + _544) * _509) * ((cbModelParam._m0[1u].w * (_1511 - _1410)) + _1410);
    float _1530 = (((_543 * _496) + _544) * _509) * ((cbModelParam._m0[1u].w * (_1513 - _1412)) + _1412);
    float _1532 = (((_543 * _497) + _544) * _509) * ((cbModelParam._m0[1u].w * (_1515 - _1414)) + _1414);
    float _1535 = fma(_1532, cbSceneParam._m0[89u].z, fma(_1530, cbSceneParam._m0[89u].y, _1528 * cbSceneParam._m0[89u].x));
    float _1538 = fma(_1532, cbSceneParam._m0[90u].z, fma(_1530, cbSceneParam._m0[90u].y, _1528 * cbSceneParam._m0[90u].x));
    float _1541 = fma(_1532, cbSceneParam._m0[91u].z, fma(_1530, cbSceneParam._m0[91u].y, _1528 * cbSceneParam._m0[91u].x));
    vec4 _1549 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_427, _428));
    float _1551 = _1549.w;
    float _1563 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1551);
    float _1564 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1551);
    float _1565 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1551);
    uvec4 _1569 = floatBitsToUint(cbInstanceData._m0[_468 + 5u]);
    uint _1571 = _1569.x * 14u;
    uint _1572 = _1571 + 13u;
    float _1579 = _509 + (-1.0);
    float _1584 = (cbLight._m0[_1572].x * _1579) + 1.0;
    float _1585 = (cbLight._m0[_1572].y * _1579) + 1.0;
    float _1586 = (cbLight._m0[_1572].z * _1579) + 1.0;
    float _1587 = (cbLight._m0[_1572].w * _1579) + 1.0;
    uint _1588 = _1571 + 5u;
    float _1594 = isnan(1.0) ? _1585 : (isnan(_1585) ? 1.0 : min(_1585, 1.0));
    uint _1598 = _1571 + 4u;
    float _1608 = isnan(1.0) ? _1584 : (isnan(_1584) ? 1.0 : min(_1584, 1.0));
    uint _1612 = _1571 | 1u;
    float _1623 = dot(vec3(cbLight._m0[_1571].xyz), vec3(_338, _339, _340));
    float _1626 = dot(vec3(cbLight._m0[_1612].xyz), vec3(_338, _339, _340));
    float _3777 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
    float _3788 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
    float _1631 = (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * 0.3183098733425140380859375;
    float _1633 = (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * 0.3183098733425140380859375;
    float _1640 = ((cbLight._m0[_1588].x * _1594) * _1633) + (((cbLight._m0[_1598].x * _1563) * _1608) * _1631);
    float _1641 = ((_1594 * cbLight._m0[_1588].y) * _1633) + (((cbLight._m0[_1598].y * _1564) * _1608) * _1631);
    float _1642 = ((_1594 * cbLight._m0[_1588].z) * _1633) + (((cbLight._m0[_1598].z * _1565) * _1608) * _1631);
    uvec4 _1646 = floatBitsToUint(cbLight._m0[_1571 + 12u]);
    bool _1648 = _1646.x == 0u;
    float _1659;
    float _1661;
    float _1663;
    if (_1648)
    {
        _1659 = _1640;
        _1661 = _1641;
        _1663 = _1642;
    }
    else
    {
        uint _1667 = _1571 + 6u;
        float _1683 = (dot(vec3(cbLight._m0[_1571 + 2u].xyz), vec3(_338, _339, _340)) * 0.5) + 0.5;
        float _1684 = _1683 * _1683;
        float _3799 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1686 = isnan(1.0) ? _1586 : (isnan(_1586) ? 1.0 : min(_1586, 1.0));
        _1659 = (((cbLight._m0[_1667].x * 0.3183098733425140380859375) * _1685) * _1686) + _1640;
        _1661 = (((cbLight._m0[_1667].y * 0.3183098733425140380859375) * _1685) * _1686) + _1641;
        _1663 = (((cbLight._m0[_1667].z * 0.3183098733425140380859375) * _1685) * _1686) + _1642;
    }
    bool _1666 = _1646.y == 0u;
    float _1704;
    float _1706;
    float _1708;
    if (_1666)
    {
        _1704 = _1659;
        _1706 = _1661;
        _1708 = _1663;
    }
    else
    {
        uint _1877 = _1571 + 7u;
        float _1893 = (dot(vec3(cbLight._m0[_1571 + 3u].xyz), vec3(_338, _339, _340)) * 0.5) + 0.5;
        float _1894 = _1893 * _1893;
        float _3815 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1895 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1896 = isnan(1.0) ? _1587 : (isnan(_1587) ? 1.0 : min(_1587, 1.0));
        _1704 = (((cbLight._m0[_1877].x * 0.3183098733425140380859375) * _1895) * _1896) + _1659;
        _1706 = (((cbLight._m0[_1877].y * 0.3183098733425140380859375) * _1895) * _1896) + _1661;
        _1708 = (((cbLight._m0[_1877].z * 0.3183098733425140380859375) * _1895) * _1896) + _1663;
    }
    uint _1711 = _1571 + 8u;
    float _1724 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1571].w)) * _341) * 0.949999988079071044921875);
    float _1725 = _1724 * _1724;
    float _1726 = cbLight._m0[_1571].x + _419;
    float _1727 = cbLight._m0[_1571].y + _420;
    float _1728 = cbLight._m0[_1571].z + _421;
    float _1732 = inversesqrt(dot(vec3(_1726, _1727, _1728), vec3(_1726, _1727, _1728)));
    float _1733 = _1732 * _1726;
    float _1734 = _1732 * _1727;
    float _1735 = _1732 * _1728;
    float _1736 = dot(vec3(_338, _339, _340), vec3(cbLight._m0[_1571].xyz));
    float _3831 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1739 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _3842 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _1740 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _1741 = dot(vec3(_338, _339, _340), vec3(_1733, _1734, _1735));
    float _3853 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _1744 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _1745 = dot(vec3(cbLight._m0[_1571].xyz), vec3(_1733, _1734, _1735));
    float _3864 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _1749 = _1725 * _1725;
    float _1753 = ((_1744 * _1744) * (_1749 + (-1.0))) + 1.0;
    float _1761 = exp2(log2(1.0 - (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) * 5.0);
    float _1762 = 0.959999978542327880859375 - _491;
    float _1764 = 0.959999978542327880859375 - _492;
    float _1765 = 0.959999978542327880859375 - _493;
    float _1772 = 1.0 - _1725;
    float _1783 = (0.5 / (((_1740 * ((_1739 * _1772) + _1725)) + 9.9999999392252902907785028219223e-09) + (((_1740 * _1772) + _1725) * _1739))) * _1739;
    float _3875 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1785 = (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1749 / ((_1753 * _1753) * 3.141590118408203125));
    uint _1799 = _1571 + 9u;
    float _1810 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1612].w)) * _341) * 0.949999988079071044921875);
    float _1811 = _1810 * _1810;
    float _1812 = cbLight._m0[_1612].x + _419;
    float _1813 = cbLight._m0[_1612].y + _420;
    float _1814 = cbLight._m0[_1612].z + _421;
    float _1818 = inversesqrt(dot(vec3(_1812, _1813, _1814), vec3(_1812, _1813, _1814)));
    float _1819 = _1818 * _1812;
    float _1820 = _1818 * _1813;
    float _1821 = _1818 * _1814;
    float _1822 = dot(vec3(_338, _339, _340), vec3(cbLight._m0[_1612].xyz));
    float _3886 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1825 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _1826 = dot(vec3(_338, _339, _340), vec3(_1819, _1820, _1821));
    float _3897 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1829 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _1830 = dot(vec3(cbLight._m0[_1612].xyz), vec3(_1819, _1820, _1821));
    float _3908 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1834 = _1811 * _1811;
    float _1838 = ((_1829 * _1829) * (_1834 + (-1.0))) + 1.0;
    float _1845 = exp2(log2(1.0 - (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) * 5.0);
    float _1852 = 1.0 - _1811;
    float _1862 = (0.5 / (((_1740 * ((_1825 * _1852) + _1811)) + 9.9999999392252902907785028219223e-09) + (((_1740 * _1852) + _1811) * _1825))) * _1825;
    float _3919 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1864 = (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1834 / ((_1838 * _1838) * 3.141590118408203125));
    float _1874 = (((((_1845 * _1762) + _494) * cbLight._m0[_1799].x) * _1864) * _1594) + ((((cbLight._m0[_1711].x * _1563) * ((_1761 * _1762) + _494)) * _1785) * _1608);
    float _1875 = (((((_1845 * _1764) + _496) * cbLight._m0[_1799].y) * _1864) * _1594) + ((((cbLight._m0[_1711].y * _1564) * ((_1761 * _1764) + _496)) * _1785) * _1608);
    float _1876 = (((((_1845 * _1765) + _497) * cbLight._m0[_1799].z) * _1864) * _1594) + ((((cbLight._m0[_1711].z * _1565) * ((_1761 * _1765) + _497)) * _1785) * _1608);
    float _1938;
    float _1940;
    float _1942;
    if (_1648)
    {
        _1938 = _1874;
        _1940 = _1875;
        _1942 = _1876;
    }
    else
    {
        uint _1944 = _1571 + 2u;
        uint _1948 = _1571 + 10u;
        float _1962 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1944].w)) * _341) * 0.949999988079071044921875);
        float _1963 = _1962 * _1962;
        float _1964 = cbLight._m0[_1944].x + _419;
        float _1965 = cbLight._m0[_1944].y + _420;
        float _1966 = cbLight._m0[_1944].z + _421;
        float _1970 = inversesqrt(dot(vec3(_1964, _1965, _1966), vec3(_1964, _1965, _1966)));
        float _1971 = _1970 * _1964;
        float _1972 = _1970 * _1965;
        float _1973 = _1970 * _1966;
        float _1974 = dot(vec3(_338, _339, _340), vec3(cbLight._m0[_1944].xyz));
        float _3930 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1977 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1978 = dot(vec3(_338, _339, _340), vec3(_1971, _1972, _1973));
        float _3941 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1981 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1982 = dot(vec3(cbLight._m0[_1944].xyz), vec3(_1971, _1972, _1973));
        float _3952 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1986 = _1963 * _1963;
        float _1990 = ((_1981 * _1981) * (_1986 + (-1.0))) + 1.0;
        float _1997 = exp2(log2(1.0 - (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) * 5.0);
        float _2004 = 1.0 - _1963;
        float _2014 = (0.5 / (((_1740 * ((_1977 * _2004) + _1963)) + 9.9999999392252902907785028219223e-09) + (((_1740 * _2004) + _1963) * _1977))) * _1977;
        float _3963 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2016 = (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1986 / ((_1990 * _1990) * 3.141590118408203125));
        float _2017 = isnan(1.0) ? _1586 : (isnan(_1586) ? 1.0 : min(_1586, 1.0));
        _1938 = (((((_1997 * _1762) + _494) * cbLight._m0[_1948].x) * _2016) * _2017) + _1874;
        _1940 = (((((_1997 * _1764) + _496) * cbLight._m0[_1948].y) * _2016) * _2017) + _1875;
        _1942 = (((((_1997 * _1765) + _497) * cbLight._m0[_1948].z) * _2016) * _2017) + _1876;
    }
    float _2052;
    float _2054;
    float _2056;
    if (_1666)
    {
        _2052 = _1938;
        _2054 = _1940;
        _2056 = _1942;
    }
    else
    {
        uint _2063 = _1571 + 3u;
        uint _2067 = _1571 + 11u;
        float _2081 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2063].w)) * _341) * 0.949999988079071044921875);
        float _2082 = _2081 * _2081;
        float _2083 = cbLight._m0[_2063].x + _419;
        float _2084 = cbLight._m0[_2063].y + _420;
        float _2085 = cbLight._m0[_2063].z + _421;
        float _2089 = inversesqrt(dot(vec3(_2083, _2084, _2085), vec3(_2083, _2084, _2085)));
        float _2090 = _2089 * _2083;
        float _2091 = _2089 * _2084;
        float _2092 = _2089 * _2085;
        float _2093 = dot(vec3(_338, _339, _340), vec3(cbLight._m0[_2063].xyz));
        float _3979 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2096 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _2097 = dot(vec3(_338, _339, _340), vec3(_2090, _2091, _2092));
        float _3990 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2100 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _2101 = dot(vec3(cbLight._m0[_2063].xyz), vec3(_2090, _2091, _2092));
        float _4001 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2105 = _2082 * _2082;
        float _2109 = ((_2100 * _2100) * (_2105 + (-1.0))) + 1.0;
        float _2116 = exp2(log2(1.0 - (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) * 5.0);
        float _2123 = 1.0 - _2082;
        float _2133 = (0.5 / (((_1740 * ((_2096 * _2123) + _2082)) + 9.9999999392252902907785028219223e-09) + (((_1740 * _2123) + _2082) * _2096))) * _2096;
        float _4012 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2135 = (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_2105 / ((_2109 * _2109) * 3.141590118408203125));
        float _2136 = isnan(1.0) ? _1587 : (isnan(_1587) ? 1.0 : min(_1587, 1.0));
        _2052 = (((((_2116 * _1762) + _494) * cbLight._m0[_2067].x) * _2135) * _2136) + _1938;
        _2054 = (((((_2116 * _1764) + _496) * cbLight._m0[_2067].y) * _2135) * _2136) + _1940;
        _2056 = (((((_2116 * _1765) + _497) * cbLight._m0[_2067].z) * _2135) * _2136) + _1942;
    }
    float _2271;
    float _2273;
    float _2275;
    float _2277;
    float _2279;
    float _2281;
    if (_1569.y == 0u)
    {
        float _2211 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2212 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2211;
        float _2213 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2211;
        float _2214 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2211;
        uvec4 _2226 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2227 = _2226.x;
        uint _2238 = uint((float(_2226.y) * floor(float(uint(cbSceneParam._m0[85u].y * _428) / _2227))) + floor(float(uint(cbSceneParam._m0[85u].x * _427) / _2227)));
        float _2248 = (log2(_2214 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2249 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        uint _2252 = uint(isnan(14.0) ? _2249 : (isnan(_2249) ? 14.0 : min(_2249, 14.0)));
        uvec4 _2257 = texelFetch(g_lightClusterGridBuffer, int(((_2252 << 2u) + (_2238 << 6u)) >> 2u));
        uint _2258 = _2257.x;
        uint _2259 = _2226.z;
        float _2397;
        float _2399;
        float _2401;
        float _2403;
        float _2405;
        float _2407;
        if (((((1u << ((_2259 >> 4u) & 15u)) + 4294967295u) & _2258) == 0u) || ((_2259 & 240u) == 0u))
        {
            _2397 = 0.0;
            _2399 = 0.0;
            _2401 = 0.0;
            _2403 = 0.0;
            _2405 = 0.0;
            _2407 = 0.0;
        }
        else
        {
            float _2398;
            float _2400;
            float _2402;
            float _2404;
            float _2406;
            float _2408;
            float _2551 = 0.0;
            float _2552 = 0.0;
            float _2553 = 0.0;
            float _2554 = 0.0;
            float _2555 = 0.0;
            float _2556 = 0.0;
            uint _2557 = 0u;
            uint _2566;
            bool _2567;
            for (;;)
            {
                _2566 = texelFetch(g_lightClassification, int((((_2252 << 5u) + (_2238 << 9u)) + (_2557 << 2u)) >> 2u)).x;
                _2567 = _2566 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2567)
                {
                    frontier_phi_61_pred = _2551;
                    frontier_phi_61_pred_1 = _2556;
                    frontier_phi_61_pred_2 = _2555;
                    frontier_phi_61_pred_3 = _2554;
                    frontier_phi_61_pred_4 = _2553;
                    frontier_phi_61_pred_5 = _2552;
                }
                else
                {
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    float _2680;
                    uint _2681;
                    _2675 = _2551;
                    _2676 = _2552;
                    _2677 = _2553;
                    _2678 = _2554;
                    _2679 = _2555;
                    _2680 = _2556;
                    _2681 = _2566;
                    float _2607;
                    float _2608;
                    float _2609;
                    float _2610;
                    float _2611;
                    float _2612;
                    for (;;)
                    {
                        uint _2685 = uint(findLSB(_2681)) + (_2557 << 5u);
                        uint _2682 = (_2681 + 4294967295u) & _2681;
                        uint _2687 = _2685 * 48u;
                        vec4 _2701 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2687)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 3u)).x));
                        uint _2707 = (_2685 * 48u) + 4u;
                        vec4 _2720 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2707)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 3u)).x));
                        uint _2726 = (_2685 * 48u) + 8u;
                        vec3 _2737 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2726)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 2u)).x));
                        float _2741 = _2701.x - _2212;
                        float _2742 = _2701.y - _2213;
                        float _2743 = _2701.z - _2214;
                        float _2744 = dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743));
                        float _2747 = inversesqrt(_2744);
                        float _2748 = _2747 * _2741;
                        float _2749 = _2747 * _2742;
                        float _2750 = _2747 * _2743;
                        float _2751 = dot(vec3(_449, _452, _455), vec3(_2748, _2749, _2750));
                        float _2756 = 1.0 - (_2744 * _2701.w);
                        float _4038 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
                        float _2757 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
                        float _2758 = sqrt(_2744) * _2720.w;
                        float _2761 = 1.39999997615814208984375 / (_2758 + 1.39999997615814208984375);
                        float _2762 = _2761 * _2761;
                        float _2765 = ((1.0 - _2762) * _2751) + _2762;
                        float _2768 = _2758 * _2758;
                        float _2772 = ((isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0))) * _2757) / ((_2768 * 0.699999988079071044921875) + 1.0);
                        float _2776 = (-0.0) - _2212;
                        float _2777 = (-0.0) - _2213;
                        float _2778 = (-0.0) - _2214;
                        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
                        float _2783 = _2782 * _2776;
                        float _2784 = _2782 * _2777;
                        float _2785 = _2782 * _2778;
                        float _2793 = exp2(log2(1.0 / ((_2768 * 3.5) + 5.0)) * 0.25);
                        float _2794 = 1.0 - _525;
                        float _2801 = sqrt(1.0 - ((1.0 - (_2794 * _2794)) * (1.0 - (_2793 * _2793))));
                        float _2802 = _2801 * _2801;
                        float _2803 = _2802 * _2802;
                        float _2804 = _2783 + _2748;
                        float _2805 = _2784 + _2749;
                        float _2806 = _2785 + _2750;
                        float _2810 = inversesqrt(dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806)));
                        float _2814 = dot(vec3(_449, _452, _455), vec3(_2783, _2784, _2785));
                        float _4054 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                        float _2817 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
                        float _2818 = dot(vec3(_449, _452, _455), vec3(_2810 * _2804, _2810 * _2805, _2810 * _2806));
                        float _4065 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2821 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                        float _2825 = ((_2821 * _2821) * (_2803 + (-1.0))) + 1.0;
                        float _2826 = _2761 * _2802;
                        float _2827 = _2826 * _2826;
                        float _2830 = ((1.0 - _2827) * _2751) + _2827;
                        float _4076 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2831 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
                        float _2832 = 1.0 - _2802;
                        float _2842 = (0.5 / (((_2831 * ((_2817 * _2832) + _2802)) + 9.9999999392252902907785028219223e-09) + (((_2831 * _2832) + _2802) * _2817))) * _2831;
                        float _4087 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                        float _2853 = (((_2803 * 3.1415927410125732421875) * (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) / ((_2825 * _2825) * ((_2768 * 2.1991131305694580078125) + 3.141590118408203125))) * _2757;
                        _2610 = (_2772 * _2720.x) + _2678;
                        _2611 = (_2772 * _2720.y) + _2679;
                        _2612 = (_2772 * _2720.z) + _2680;
                        _2607 = (_2853 * _2737.x) + _2675;
                        _2608 = (_2853 * _2737.y) + _2676;
                        _2609 = (_2853 * _2737.z) + _2677;
                        if (_2682 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2675 = _2607;
                            _2676 = _2608;
                            _2677 = _2609;
                            _2678 = _2610;
                            _2679 = _2611;
                            _2680 = _2612;
                            _2681 = _2682;
                        }
                    }
                    frontier_phi_61_pred = _2607;
                    frontier_phi_61_pred_1 = _2612;
                    frontier_phi_61_pred_2 = _2611;
                    frontier_phi_61_pred_3 = _2610;
                    frontier_phi_61_pred_4 = _2609;
                    frontier_phi_61_pred_5 = _2608;
                }
                _2398 = frontier_phi_61_pred;
                _2408 = frontier_phi_61_pred_1;
                _2406 = frontier_phi_61_pred_2;
                _2404 = frontier_phi_61_pred_3;
                _2402 = frontier_phi_61_pred_4;
                _2400 = frontier_phi_61_pred_5;
                uint _2558 = _2557 + 1u;
                if (_2558 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2551 = _2398;
                    _2552 = _2400;
                    _2553 = _2402;
                    _2554 = _2404;
                    _2555 = _2406;
                    _2556 = _2408;
                    _2557 = _2558;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2397 = _2398;
            _2399 = _2400;
            _2401 = _2402;
            _2403 = _2404;
            _2405 = _2406;
            _2407 = _2408;
        }
        uvec4 _2411 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2412 = _2411.z;
        uint _2414 = (_2412 >> 8u) & 15u;
        float _2519;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        if (((4294967295u << _2414) & _2258) == 0u)
        {
            _2519 = _2397;
            _2521 = _2399;
            _2523 = _2401;
            _2525 = _2403;
            _2527 = _2405;
            _2529 = _2407;
        }
        else
        {
            float _2544 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
            float _2545 = _2544 * _2212;
            float _2546 = _2544 * _2213;
            float _2547 = _2544 * _2214;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2414 < ((_2412 >> 12u) & 15u))
            {
                float _2520;
                float _2522;
                float _2524;
                float _2526;
                float _2528;
                float _2530;
                float _2658 = _2397;
                float _2659 = _2399;
                float _2660 = _2401;
                float _2661 = _2403;
                float _2662 = _2405;
                float _2663 = _2407;
                uint _2664 = _2414;
                uint _2673;
                bool _2674;
                for (;;)
                {
                    _2673 = texelFetch(g_lightClassification, int((((_2252 << 5u) + (_2238 << 9u)) + (_2664 << 2u)) >> 2u)).x;
                    _2674 = _2673 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2674)
                    {
                        frontier_phi_67_pred = _2661;
                        frontier_phi_67_pred_1 = _2662;
                        frontier_phi_67_pred_2 = _2663;
                        frontier_phi_67_pred_3 = _2660;
                        frontier_phi_67_pred_4 = _2659;
                        frontier_phi_67_pred_5 = _2658;
                    }
                    else
                    {
                        float _2858;
                        float _2859;
                        float _2860;
                        float _2861;
                        float _2862;
                        float _2863;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _2871 = _2658;
                        float _2872 = _2659;
                        float _2873 = _2660;
                        float _2874 = _2661;
                        float _2875 = _2662;
                        float _2876 = _2663;
                        uint _2877 = _2673;
                        uint _2878;
                        vec4 _2903;
                        float _2904;
                        vec4 _2919;
                        vec3 _2931;
                        vec4 _2947;
                        vec4 _2963;
                        float _3010;
                        bool _3011;
                        for (;;)
                        {
                            uint _2888 = ((_2664 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2877));
                            _2878 = (_2877 + 4294967295u) & _2877;
                            uint _2890 = _2888 * 40u;
                            _2903 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2890)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 3u)).x));
                            _2904 = _2903.w;
                            uint _2906 = (_2888 * 40u) + 4u;
                            _2919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 3u)).x));
                            uint _2921 = (_2888 * 40u) + 8u;
                            _2931 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x));
                            uint _2934 = (_2888 * 40u) + 16u;
                            _2947 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 3u)).x));
                            uint _2950 = (_2888 * 40u) + 20u;
                            _2963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 3u)).x));
                            uint _2966 = (_2888 * 40u) + 24u;
                            vec4 _2979 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 3u)).x));
                            uint _2985 = (_2888 * 40u) + 28u;
                            vec4 _2998 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 3u)).x));
                            _3010 = fma(_2214, _2998.z, fma(_2213, _2998.y, _2998.x * _2212)) + _2998.w;
                            _3011 = !((fma(_2214, _2979.z, fma(_2213, _2979.y, _2979.x * _2212)) + _2979.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3011)
                            {
                                float _3038 = _2903.x - _2212;
                                float _3039 = _2903.y - _2213;
                                float _3040 = _2903.z - _2214;
                                float _3041 = dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040));
                                float _3044 = inversesqrt(_3041);
                                float _3045 = _3044 * _3038;
                                float _3046 = _3044 * _3039;
                                float _3047 = _3044 * _3040;
                                float _3051 = 1.0 - (_3041 / (_2904 * _2904));
                                float _4098 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                                float _3052 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
                                float _3056 = sqrt(_3041) * _2919.w;
                                float _3058 = 1.39999997615814208984375 / (_3056 + 1.39999997615814208984375);
                                float _3059 = _3058 * _3058;
                                float _3062 = ((1.0 - _3059) * dot(vec3(_3045, _3046, _3047), vec3(_449, _452, _455))) + _3059;
                                float _3065 = _3056 * _3056;
                                float _3069 = (fma(_2214, _2947.z, fma(_2213, _2947.y, _2947.x * _2212)) + _2947.w) / _3010;
                                float _3070 = (fma(_2214, _2963.z, fma(_2213, _2963.y, _2963.x * _2212)) + _2963.w) / _3010;
                                float _3074 = 1.0 - dot(vec2(_3069, _3070), vec2(_3069, _3070));
                                float _4114 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                                float _3075 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
                                float _3076 = _3075 * (((isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0))) * _3052) / ((_3065 * 0.699999988079071044921875) + 1.0));
                                float _3088 = exp2(log2(1.0 / ((_3065 * 3.5) + 5.0)) * 0.25);
                                float _3089 = 1.0 - _525;
                                float _3096 = sqrt(1.0 - ((1.0 - (_3089 * _3089)) * (1.0 - (_3088 * _3088))));
                                float _3097 = _3096 * _3096;
                                float _3098 = _3097 * _3097;
                                float _3099 = _3045 - _2545;
                                float _3100 = _3046 - _2546;
                                float _3101 = _3047 - _2547;
                                float _3105 = inversesqrt(dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101)));
                                float _3109 = dot(vec3(_449, _452, _455), vec3((-0.0) - _2545, (-0.0) - _2546, (-0.0) - _2547));
                                float _4125 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3112 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                                float _3113 = dot(vec3(_449, _452, _455), vec3(_3105 * _3099, _3105 * _3100, _3105 * _3101));
                                float _4136 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                                float _3116 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                                float _3120 = ((_3116 * _3116) * (_3098 + (-1.0))) + 1.0;
                                float _3121 = _3058 * _3097;
                                float _3122 = _3121 * _3121;
                                float _3128 = ((1.0 - _3122) * dot(vec3(_449, _452, _455), vec3(_3045, _3046, _3047))) + _3122;
                                float _4147 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                                float _3129 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
                                float _3130 = 1.0 - _3097;
                                float _3140 = (0.5 / (((_3129 * ((_3112 * _3130) + _3097)) + 9.9999999392252902907785028219223e-09) + (((_3129 * _3130) + _3097) * _3112))) * _3129;
                                float _4158 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                                float _3150 = (_3075 * _3052) * (((_3098 * 3.1415927410125732421875) * (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) / ((_3120 * _3120) * ((_3065 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3150 * _2931.x;
                                frontier_phi_73_pred_1 = _3150 * _2931.y;
                                frontier_phi_73_pred_2 = _3076 * _2919.z;
                                frontier_phi_73_pred_3 = _3076 * _2919.y;
                                frontier_phi_73_pred_4 = _3076 * _2919.x;
                                frontier_phi_73_pred_5 = _3150 * _2931.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3154 = frontier_phi_73_pred;
                            _3155 = frontier_phi_73_pred_1;
                            _3159 = frontier_phi_73_pred_2;
                            _3158 = frontier_phi_73_pred_3;
                            _3157 = frontier_phi_73_pred_4;
                            _3156 = frontier_phi_73_pred_5;
                            _2861 = _3157 + _2874;
                            _2862 = _3158 + _2875;
                            _2863 = _3159 + _2876;
                            _2858 = _3154 + _2871;
                            _2859 = _3155 + _2872;
                            _2860 = _3156 + _2873;
                            if (_2878 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2871 = _2858;
                                _2872 = _2859;
                                _2873 = _2860;
                                _2874 = _2861;
                                _2875 = _2862;
                                _2876 = _2863;
                                _2877 = _2878;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2861;
                        frontier_phi_67_pred_1 = _2862;
                        frontier_phi_67_pred_2 = _2863;
                        frontier_phi_67_pred_3 = _2860;
                        frontier_phi_67_pred_4 = _2859;
                        frontier_phi_67_pred_5 = _2858;
                    }
                    _2526 = frontier_phi_67_pred;
                    _2528 = frontier_phi_67_pred_1;
                    _2530 = frontier_phi_67_pred_2;
                    _2524 = frontier_phi_67_pred_3;
                    _2522 = frontier_phi_67_pred_4;
                    _2520 = frontier_phi_67_pred_5;
                    uint _2665 = _2664 + 1u;
                    if (_2665 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2658 = _2520;
                        _2659 = _2522;
                        _2660 = _2524;
                        _2661 = _2526;
                        _2662 = _2528;
                        _2663 = _2530;
                        _2664 = _2665;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2528;
                frontier_phi_55_56_ladder_1 = _2530;
                frontier_phi_55_56_ladder_2 = _2526;
                frontier_phi_55_56_ladder_3 = _2524;
                frontier_phi_55_56_ladder_4 = _2522;
                frontier_phi_55_56_ladder_5 = _2520;
            }
            else
            {
                frontier_phi_55_56_ladder = _2405;
                frontier_phi_55_56_ladder_1 = _2407;
                frontier_phi_55_56_ladder_2 = _2403;
                frontier_phi_55_56_ladder_3 = _2401;
                frontier_phi_55_56_ladder_4 = _2399;
                frontier_phi_55_56_ladder_5 = _2397;
            }
            _2519 = frontier_phi_55_56_ladder_5;
            _2521 = frontier_phi_55_56_ladder_4;
            _2523 = frontier_phi_55_56_ladder_3;
            _2525 = frontier_phi_55_56_ladder_2;
            _2527 = frontier_phi_55_56_ladder;
            _2529 = frontier_phi_55_56_ladder_1;
        }
        float _2534 = isnan(1.0) ? _509 : (isnan(_509) ? 1.0 : min(_509, 1.0));
        _2271 = (_2534 * _2525) + _1704;
        _2273 = (_2534 * _2527) + _1706;
        _2275 = (_2534 * _2529) + _1708;
        _2277 = ((_2519 * _494) * _2534) + _2052;
        _2279 = ((_2521 * _496) * _2534) + _2054;
        _2281 = ((_2523 * _497) * _2534) + _2056;
    }
    else
    {
        _2271 = _1704;
        _2273 = _1706;
        _2275 = _1708;
        _2277 = _2052;
        _2279 = _2054;
        _2281 = _2056;
    }
    uint _2287 = _470 + uint(cbMatDynParam._m0[0u].w);
    float _2296 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _301.x) * _324) * cbInstanceData._m0[_2287].x;
    float _2300 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _301.y) * _324) * cbInstanceData._m0[_2287].y;
    float _2304 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _301.z) * _324) * cbInstanceData._m0[_2287].z;
    float _4174 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _4185 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _4196 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _2321 = (((isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2271 + ((isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))) * _509))) + ((_2277 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _1318)) * cbPerFrame._m0[3u].x)) + _2296;
    float _2323 = (_2300 + ((_2279 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _1318)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_2273 + ((isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))) * _509)));
    float _2325 = (_2304 + ((_2281 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _1318)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_2275 + ((isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))) * _509)));
    float _4222 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2338 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    uint _2339 = _468 + 6u;
    float _2347 = _427 / cbSceneParam._m0[86u].x;
    float _2348 = _428 / cbSceneParam._m0[86u].y;
    vec4 _2362 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2347, _2348, (log2((isnan(cbSceneParam._m0[77u].w) ? _361 : (isnan(_361) ? cbSceneParam._m0[77u].w : min(_361, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2364 = _2362.x;
    float _2365 = _2362.y;
    float _2366 = _2362.z;
    float _2367 = _2362.w;
    float _2460;
    float _2462;
    float _2464;
    float _2466;
    if (_361 > cbSceneParam._m0[78u].w)
    {
        float _2422 = isnan(_361) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _361 : min(cbSceneParam._m0[80u].w, _361));
        float _2423 = _2422 / _361;
        float _2434 = _2423 * _412;
        float _2435 = _413 * _2423;
        float _2436 = (-0.0) - _2435;
        float _2438 = _2423 * _414;
        float _2440 = (cbSceneParam._m0[77u].w * _2436) / _2422;
        float _2441 = _2440 + cbSceneParam._m0[79u].w;
        float _2442 = cbSceneParam._m0[79u].w - _2435;
        float _2448 = sqrt(((_2434 * _2434) + (_2435 * _2435)) + (_2438 * _2438));
        float _2451 = (1.0 - (cbSceneParam._m0[77u].w / _2422)) * _2448;
        float _2456 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2458 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2620;
        if (abs((_2436 - _2440) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2620 = ((((_2441 > 0.0) ? exp2(_2456 * _2441) : (2.0 - exp2(_2458 * _2441))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2451;
        }
        else
        {
            float _2580 = 1.0 / cbSceneParam._m0[80u].x;
            float _2581 = isnan(_2442) ? _2441 : (isnan(_2441) ? _2442 : max(_2441, _2442));
            float _2582 = isnan(_2442) ? _2441 : (isnan(_2441) ? _2442 : min(_2441, _2442));
            float _2591 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : min(_2581, 0.0));
            float _2592 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : min(_2582, 0.0));
            _2620 = ((abs(_2448 / _2436) * cbSceneParam._m0[80u].y) * ((((_2591 - _2592) * 2.0) - ((exp2(_2456 * (isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0)))) - exp2(_2456 * (isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0))))) * _2580)) - ((exp2(_2458 * _2591) - exp2(_2458 * _2592)) * _2580))) + (_2451 * cbSceneParam._m0[80u].z);
        }
        vec4 _2622 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2347, _2348, 1.0), 0.0);
        float _2631 = exp2((_2620 * (-1.44269502162933349609375)) * (1.0 - _2622.w));
        float _2632 = log2(_2631);
        float _2648 = log2(_2367);
        _2460 = (exp2(_2648 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2632 * cbSceneParam._m0[78u].x)) * _2622.x) / cbSceneParam._m0[78u].x)) + _2364;
        _2462 = (exp2(_2648 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2632 * cbSceneParam._m0[78u].y)) * _2622.y) / cbSceneParam._m0[78u].y)) + _2365;
        _2464 = (exp2(_2648 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2632 * cbSceneParam._m0[78u].z)) * _2622.z) / cbSceneParam._m0[78u].z)) + _2366;
        _2466 = _2631 * _2367;
    }
    else
    {
        _2460 = _2364;
        _2462 = _2365;
        _2464 = _2366;
        _2466 = _2367;
    }
    float _2478 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2479 = _2478 == 3.0;
    float _2480 = log2(_2466);
    float _2484 = exp2(_2480 * cbSceneParam._m0[78u].x);
    float _2485 = exp2(_2480 * cbSceneParam._m0[78u].y);
    float _2486 = exp2(_2480 * cbSceneParam._m0[78u].z);
    float _2487 = _2484 * (isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0)));
    float _2488 = _2485 * (isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0)));
    float _2489 = _2486 * (isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0)));
    float _2498 = (_2478 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2498 * (_2479 ? _2487 : (_2487 + (cbSceneParam._m0[72u].w * _2460)));
    SV_Target.y = _2498 * (_2479 ? _2488 : (_2488 + (cbSceneParam._m0[72u].w * _2462)));
    SV_Target.z = _2498 * (_2479 ? _2489 : (_2489 + (cbSceneParam._m0[72u].w * _2464)));
    SV_Target.w = cbInstanceData._m0[_2339].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2296) * _2338) * _2484) * _2498;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2300) * _2338) * _2485) * _2498;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2304) * _2338) * _2486) * _2498;
    SV_Target_1.w = cbInstanceData._m0[_2339].w;
}


