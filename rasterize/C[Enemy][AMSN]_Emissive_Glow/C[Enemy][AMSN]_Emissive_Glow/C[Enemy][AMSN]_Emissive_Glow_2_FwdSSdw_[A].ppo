#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _928;
float _3387;
float _3388;
float _3389;
float _3390;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _232 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _238 = _232.x * cbMtdParam._m0[9u].x;
    float _239 = _232.y * cbMtdParam._m0[9u].y;
    float _240 = _232.z * cbMtdParam._m0[9u].z;
    vec4 _252 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _254 = _252.x;
    vec4 _266 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _270 = _266.z;
    float _274 = (_266.x * 2.0) + (-1.0);
    float _276 = (_266.y * 2.0) + (-1.0);
    float _277 = dot(vec2(_274, _276), vec2(_274, _276));
    float _3399 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _283 = sqrt(1.0 - (isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))));
    vec4 _305 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _319 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3410 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _320 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
    float _328 = (((_320 * _320) * (3.0 - (_320 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _331 = fma(_283, _203 * NORMAL.x, fma(_276, _210 * TANGENT.x, (_196 * _189) * _274));
    float _334 = fma(_283, _203 * NORMAL.y, fma(_276, _210 * TANGENT.y, (_196 * _190) * _274));
    float _337 = fma(_283, _203 * NORMAL.z, fma(_276, _210 * TANGENT.z, (_196 * _191) * _274));
    float _341 = inversesqrt(dot(vec3(_331, _334, _337), vec3(_331, _334, _337)));
    float _342 = _341 * _331;
    float _343 = _341 * _334;
    float _344 = _341 * _337;
    float _3421 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _345 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
    float _3432 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3443 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3454 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3465 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _349 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
    float _365 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _406 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _416 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _406);
    float _417 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _406);
    float _418 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _406);
    float _422 = inversesqrt(dot(vec3(_416, _417, _418), vec3(_416, _417, _418)));
    float _423 = _416 * _422;
    float _424 = _417 * _422;
    float _425 = _418 * _422;
    vec4 _430 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _432 = _430.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _607 = sqrt(((_416 * _416) + (_417 * _417)) + (_418 * _418));
        float _613 = (cbMatDynParam._m0[5u].x * _607) + cbMatDynParam._m0[5u].y;
        float _3476 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
        float _614 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
        float _618 = (cbMatDynParam._m0[5u].z * _607) + cbMatDynParam._m0[5u].w;
        float _3487 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) - _614)) + _614) < ((_432 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _444 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _445 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _465 = fma(_344, cbSceneParam._m0[5u].z, fma(_343, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _342));
    float _468 = fma(_344, cbSceneParam._m0[6u].z, fma(_343, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _342));
    float _471 = fma(_344, cbSceneParam._m0[7u].z, fma(_343, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _342));
    uint _484 = uint(roundEven(NORMAL.w)) * 13u;
    uint _486 = _484 + 9u;
    uint _487 = _486 + uint(cbMatDynParam._m0[0u].w);
    float _493 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0)))) * cbInstanceData._m0[_487].x;
    float _494 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0)))) * cbInstanceData._m0[_487].y;
    float _495 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0)))) * cbInstanceData._m0[_487].z;
    float _3498 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _496 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
    float _3509 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _497 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _3520 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _498 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
    float _499 = 1.0 - _349;
    float _500 = _496 * _499;
    float _501 = _497 * _499;
    float _502 = _498 * _499;
    float _507 = (_496 + (-0.039999999105930328369140625)) * _349;
    float _508 = (_497 + (-0.039999999105930328369140625)) * _349;
    float _509 = (_498 + (-0.039999999105930328369140625)) * _349;
    float _510 = _507 + 0.039999999105930328369140625;
    float _512 = _508 + 0.039999999105930328369140625;
    float _513 = _509 + 0.039999999105930328369140625;
    vec4 _522 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _444, cbSceneParam._m0[86u].y * _445));
    float _525 = _522.x * TEXCOORD.z;
    float _526 = dot(vec3(_342, _343, _344), vec3(_423, _424, _425));
    float _529 = _526 * 2.0;
    float _533 = (_529 * _342) - _423;
    float _534 = (_529 * _343) - _424;
    float _535 = (_529 * _344) - _425;
    float _539 = abs(dot(vec3(_423, _424, _425), vec3(_342, _343, _344)));
    float _3531 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _541 = sqrt(_345);
    float _553 = exp2((_541 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_541 * 3.0));
    float _559 = (1.0 - _553) * ((_541 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _560 = _553 * _541;
    float _588 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _927;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _652 = fma(_596, cbModelParam._m0[26u].z, fma(_592, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _588));
        float _656 = fma(_596, cbModelParam._m0[27u].z, fma(_592, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _588));
        float _660 = fma(_596, cbModelParam._m0[28u].z, fma(_592, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _588));
        float _685 = _588 + _342;
        float _686 = _592 + _343;
        float _687 = _596 + _344;
        float _697 = fma(_687, cbModelParam._m0[26u].z, fma(_686, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _685)) - _652;
        float _698 = fma(_687, cbModelParam._m0[27u].z, fma(_686, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _685)) - _656;
        float _699 = fma(_687, cbModelParam._m0[28u].z, fma(_686, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _685)) - _660;
        float _703 = inversesqrt(dot(vec3(_697, _698, _699), vec3(_697, _698, _699)));
        float _716 = ((_703 * _697) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_652 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _717 = ((_703 * _698) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_656 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _718 = ((_703 * _699) / cbModelParam._m0[34u].z) + ((((((_660 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _721 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        vec4 _728 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        vec4 _735 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        vec4 _742 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        float _755 = exp2((_721.w + (-0.5)) * 20.0) * 2.0;
        float _756 = _755 * (_721.x + (-0.5));
        float _757 = _755 * (_721.y + (-0.5));
        float _758 = _755 * (_721.z + (-0.5));
        float _765 = exp2((_728.w + (-0.5)) * 20.0) * 2.0;
        float _766 = _765 * (_728.x + (-0.5));
        float _767 = _765 * (_728.y + (-0.5));
        float _768 = _765 * (_728.z + (-0.5));
        float _775 = exp2((_735.w + (-0.5)) * 20.0) * 2.0;
        float _776 = _775 * (_735.x + (-0.5));
        float _777 = _775 * (_735.y + (-0.5));
        float _778 = _775 * (_735.z + (-0.5));
        float _785 = exp2((_742.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_742.x + (-0.5));
        float _787 = _785 * (_742.y + (-0.5));
        float _788 = _785 * (_742.z + (-0.5));
        float _789 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _790 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _791 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _792 = _756 * 0.5;
        float _793 = _766 * 0.5;
        float _794 = _776 * 0.5;
        float _795 = dot(vec3(_792, _793, _794), vec3(_792, _793, _794));
        float _800 = (_795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_795);
        float _809 = (dot(vec3(_342, _343, _344), vec3(_800 * _792, _800 * _793, _800 * _794)) + 1.0) * 0.5;
        float _3557 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _819 = sqrt(((_793 * _793) + (_792 * _792)) + (_794 * _794)) / (_789 + 9.9999997473787516355514526367188e-06);
        float _3568 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _821 = _820 * 2.0;
        float _825 = (1.0 - _820) / (_820 + 1.0);
        float _3579 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _835 = ((((1.0 - _826) * (_821 + 2.0)) * exp2(log2(isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))) * (_821 + 1.0))) + _826) * _789;
        float _836 = _757 * 0.5;
        float _837 = _767 * 0.5;
        float _838 = _777 * 0.5;
        float _839 = dot(vec3(_836, _837, _838), vec3(_836, _837, _838));
        float _844 = (_839 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_839);
        float _852 = (dot(vec3(_342, _343, _344), vec3(_844 * _836, _844 * _837, _844 * _838)) + 1.0) * 0.5;
        float _3590 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _861 = sqrt(((_837 * _837) + (_836 * _836)) + (_838 * _838)) / (_790 + 9.9999997473787516355514526367188e-06);
        float _3601 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _862 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _863 = _862 * 2.0;
        float _867 = (1.0 - _862) / (_862 + 1.0);
        float _3612 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _877 = ((((1.0 - _868) * (_863 + 2.0)) * exp2(log2(isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * (_863 + 1.0))) + _868) * _790;
        float _878 = _758 * 0.5;
        float _879 = _768 * 0.5;
        float _880 = _778 * 0.5;
        float _881 = dot(vec3(_878, _879, _880), vec3(_878, _879, _880));
        float _886 = (_881 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_881);
        float _894 = (dot(vec3(_342, _343, _344), vec3(_886 * _878, _886 * _879, _886 * _880)) + 1.0) * 0.5;
        float _3623 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _903 = sqrt(((_879 * _879) + (_878 * _878)) + (_880 * _880)) / (_791 + 9.9999997473787516355514526367188e-06);
        float _3634 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _905 = _904 * 2.0;
        float _909 = (1.0 - _904) / (_904 + 1.0);
        float _3645 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _919 = ((((1.0 - _910) * (_905 + 2.0)) * exp2(log2(isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * (_905 + 1.0))) + _910) * _791;
        _927 = _758;
        _929 = _757;
        _930 = _756;
        _931 = _768;
        _932 = _767;
        _933 = _766;
        _934 = _778;
        _935 = _777;
        _936 = _776;
        _937 = _791;
        _938 = _790;
        _939 = _789;
        _940 = cbModelParam._m0[36u].z * (isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0)));
        _941 = cbModelParam._m0[36u].z * (isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0)));
        _942 = cbModelParam._m0[36u].z * (isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0)));
    }
    else
    {
        _927 = _928;
        _929 = _928;
        _930 = _928;
        _931 = _928;
        _932 = _928;
        _933 = _928;
        _934 = _928;
        _935 = _928;
        _936 = _928;
        _937 = _928;
        _938 = _928;
        _939 = _928;
        _940 = 0.0;
        _941 = 0.0;
        _942 = 0.0;
    }
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _971 = fma(_596, cbModelParam._m0[30u].z, fma(_592, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _588));
        float _975 = fma(_596, cbModelParam._m0[31u].z, fma(_592, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _588));
        float _979 = fma(_596, cbModelParam._m0[32u].z, fma(_592, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _588));
        float _1002 = _588 + _342;
        float _1003 = _592 + _343;
        float _1004 = _596 + _344;
        float _1014 = fma(_1004, cbModelParam._m0[30u].z, fma(_1003, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1002)) - _971;
        float _1015 = fma(_1004, cbModelParam._m0[31u].z, fma(_1003, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1002)) - _975;
        float _1016 = fma(_1004, cbModelParam._m0[32u].z, fma(_1003, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1002)) - _979;
        float _1020 = inversesqrt(dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016)));
        float _1033 = ((_1020 * _1014) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_971 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1034 = ((_1020 * _1015) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_975 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1035 = ((_1020 * _1016) / cbModelParam._m0[35u].z) + ((((((_979 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        float _1070 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1037.x + (-0.5));
        float _1072 = _1070 * (_1037.y + (-0.5));
        float _1073 = _1070 * (_1037.z + (-0.5));
        float _1080 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1044.x + (-0.5));
        float _1082 = _1080 * (_1044.y + (-0.5));
        float _1083 = _1080 * (_1044.z + (-0.5));
        float _1090 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1051.x + (-0.5));
        float _1092 = _1090 * (_1051.y + (-0.5));
        float _1093 = _1090 * (_1051.z + (-0.5));
        float _1100 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1058.x + (-0.5));
        float _1102 = _1100 * (_1058.y + (-0.5));
        float _1103 = _1100 * (_1058.z + (-0.5));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = _1071 * 0.5;
        float _1108 = _1081 * 0.5;
        float _1109 = _1091 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_342, _343, _344), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3686 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _3697 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3708 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (_1134 + 1.0))) + _1139) * _1104;
        float _1149 = _1072 * 0.5;
        float _1150 = _1082 * 0.5;
        float _1151 = _1092 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_342, _343, _344), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _3719 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3730 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _3741 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * (_1176 + 1.0))) + _1181) * _1105;
        float _1191 = _1073 * 0.5;
        float _1192 = _1083 * 0.5;
        float _1193 = _1093 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_342, _343, _344), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3752 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3763 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _3774 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * (_1218 + 1.0))) + _1223) * _1106;
        _1240 = _1073;
        _1241 = _1072;
        _1242 = _1071;
        _1243 = _1083;
        _1244 = _1082;
        _1245 = _1081;
        _1246 = _1093;
        _1247 = _1092;
        _1248 = _1091;
        _1249 = _1106;
        _1250 = _1105;
        _1251 = _1104;
        _1252 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
        _1253 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
        _1254 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
    }
    else
    {
        _1240 = _928;
        _1241 = _928;
        _1242 = _928;
        _1243 = _928;
        _1244 = _928;
        _1245 = _928;
        _1246 = _928;
        _1247 = _928;
        _1248 = _928;
        _1249 = _928;
        _1250 = _928;
        _1251 = _928;
        _1252 = 0.0;
        _1253 = 0.0;
        _1254 = 0.0;
    }
    float _1264 = (cbModelParam._m0[1u].x * (_1252 - _940)) + _940;
    float _1265 = (cbModelParam._m0[1u].x * (_1253 - _941)) + _941;
    float _1266 = (cbModelParam._m0[1u].x * (_1254 - _942)) + _942;
    float _1287 = fma(_1266, cbSceneParam._m0[89u].z, fma(_1265, cbSceneParam._m0[89u].y, _1264 * cbSceneParam._m0[89u].x));
    float _1290 = fma(_1266, cbSceneParam._m0[90u].z, fma(_1265, cbSceneParam._m0[90u].y, _1264 * cbSceneParam._m0[90u].x));
    float _1293 = fma(_1266, cbSceneParam._m0[91u].z, fma(_1265, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1264));
    float _1308 = _533 * 0.5;
    float _1309 = _534 * 0.5;
    float _1310 = _535 * 0.5;
    float _1311 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_1242, _1245, _1248, _1251));
    float _1314 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_1241, _1244, _1247, _1250));
    float _1317 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_1240, _1243, _1246, _1249));
    float _1351;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1324 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_927, _931, _934, _937));
        float _1328 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_929, _932, _935, _938));
        float _1332 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_930, _933, _936, _939));
        float _1339 = dot(vec4(cbModelParam._m0[39u]), vec4(_1308, _1309, _1310, 1.0));
        _1351 = dot(vec3(isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)), isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)), isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1339) ? 0.0 : (isnan(0.0) ? _1339 : max(0.0, _1339))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1351 = 1.0;
    }
    float _1362;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1353 = dot(vec4(cbModelParam._m0[40u]), vec4(_1308, _1309, _1310, 1.0));
        _1362 = dot(vec3(isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)), isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1353) ? 0.0 : (isnan(0.0) ? _1353 : max(0.0, _1353))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1362 = 1.0;
    }
    float _1366 = (_1362 * cbModelParam._m0[1u].x) + (_1351 * (1.0 - cbModelParam._m0[1u].x));
    float _1376 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _345);
    float _1377 = isnan(_1376) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1376 : min(cbModelParam._m0[25u].z, _1376));
    float _1458;
    float _1460;
    float _1462;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1425 = fma(_596, cbModelParam._m0[13u].z, fma(_592, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _588)) + cbModelParam._m0[13u].w;
        float _1429 = fma(_596, cbModelParam._m0[14u].z, fma(_592, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _588)) + cbModelParam._m0[14u].w;
        float _1433 = fma(_596, cbModelParam._m0[15u].z, fma(_592, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _588)) + cbModelParam._m0[15u].w;
        float _1436 = fma(_535, cbModelParam._m0[13u].z, fma(_534, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _533));
        float _1439 = fma(_535, cbModelParam._m0[14u].z, fma(_534, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _533));
        float _1442 = fma(_535, cbModelParam._m0[15u].z, fma(_534, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _533));
        float _1470;
        if (_1436 > 0.0)
        {
            _1470 = abs((1.0 - _1425) / _1436);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1436 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1425 + 1.0) / _1436);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1470 = frontier_phi_17_15_ladder;
        }
        float _1697;
        if (_1439 > 0.0)
        {
            _1697 = abs((1.0 - _1429) / _1439);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1429 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1697 = frontier_phi_26_22_ladder;
        }
        float _1954;
        if (_1442 > 0.0)
        {
            _1954 = abs((1.0 - _1433) / _1442);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1442 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1433 + 1.0) / _1442);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1954 = frontier_phi_38_33_ladder;
        }
        float _1956 = isnan(_1697) ? _1470 : (isnan(_1470) ? _1697 : min(_1470, _1697));
        float _1957 = isnan(_1954) ? _1956 : (isnan(_1956) ? _1954 : min(_1956, _1954));
        float _1961 = (_1957 * _1436) + _1425;
        float _1962 = (_1957 * _1439) + _1429;
        float _1963 = (_1957 * _1442) + _1433;
        float _1964 = _1957 * 9.9999997473787516355514526367188e-05;
        float _1966 = (-1.0) - _1964;
        float _1968 = _1964 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1963 > _1968) || ((_1963 < _1966) || ((_1962 > _1968) || ((_1962 < _1966) || ((_1961 < _1966) || (_1961 > _1968))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2091 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1963, cbModelParam._m0[9u].z, fma(_1962, cbModelParam._m0[9u].y, _1961 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1963, cbModelParam._m0[10u].z, fma(_1962, cbModelParam._m0[10u].y, _1961 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1963, cbModelParam._m0[11u].z, fma(_1962, cbModelParam._m0[11u].y, _1961 * cbModelParam._m0[11u].x))), _1377);
            frontier_phi_16_38_ladder = _2091.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2091.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2091.x * cbModelParam._m0[1u].y;
        }
        _1458 = frontier_phi_16_38_ladder_2;
        _1460 = frontier_phi_16_38_ladder_1;
        _1462 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1446 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_533, _534, _535), _1377);
        _1458 = _1446.x * cbModelParam._m0[1u].y;
        _1460 = _1446.y * cbModelParam._m0[1u].y;
        _1462 = _1446.z * cbModelParam._m0[1u].y;
    }
    float _1466 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _345);
    float _1467 = isnan(_1466) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1466 : min(cbModelParam._m0[25u].w, _1466));
    float _1559;
    float _1561;
    float _1563;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1523 = fma(_596, cbModelParam._m0[21u].z, fma(_592, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _588)) + cbModelParam._m0[21u].w;
        float _1527 = fma(_596, cbModelParam._m0[22u].z, fma(_592, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _588)) + cbModelParam._m0[22u].w;
        float _1531 = fma(_596, cbModelParam._m0[23u].z, fma(_592, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _588)) + cbModelParam._m0[23u].w;
        float _1534 = fma(_535, cbModelParam._m0[21u].z, fma(_534, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _533));
        float _1537 = fma(_535, cbModelParam._m0[22u].z, fma(_534, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _533));
        float _1540 = fma(_535, cbModelParam._m0[23u].z, fma(_534, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _533));
        float _1702;
        if (_1534 > 0.0)
        {
            _1702 = abs((1.0 - _1523) / _1534);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1523 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1702 = frontier_phi_28_24_ladder;
        }
        float _1981;
        if (_1537 > 0.0)
        {
            _1981 = abs((1.0 - _1527) / _1537);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1527 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1981 = frontier_phi_40_35_ladder;
        }
        float _2194;
        if (_1540 > 0.0)
        {
            _2194 = abs((1.0 - _1531) / _1540);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1531 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2194 = frontier_phi_49_46_ladder;
        }
        float _2196 = isnan(_1981) ? _1702 : (isnan(_1702) ? _1981 : min(_1702, _1981));
        float _2197 = isnan(_2194) ? _2196 : (isnan(_2196) ? _2194 : min(_2196, _2194));
        float _2201 = (_2197 * _1534) + _1523;
        float _2202 = (_2197 * _1537) + _1527;
        float _2203 = (_2197 * _1540) + _1531;
        float _2204 = _2197 * 9.9999997473787516355514526367188e-05;
        float _2205 = (-1.0) - _2204;
        float _2207 = _2204 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2203 > _2207) || ((_2203 < _2205) || ((_2202 > _2207) || ((_2202 < _2205) || ((_2201 < _2205) || (_2201 > _2207))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2440 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2203, cbModelParam._m0[17u].z, fma(_2202, cbModelParam._m0[17u].y, _2201 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2203, cbModelParam._m0[18u].z, fma(_2202, cbModelParam._m0[18u].y, _2201 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2203, cbModelParam._m0[19u].z, fma(_2202, cbModelParam._m0[19u].y, _2201 * cbModelParam._m0[19u].x))), _1467);
            frontier_phi_25_49_ladder = _2440.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2440.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2440.x * cbModelParam._m0[1u].z;
        }
        _1559 = frontier_phi_25_49_ladder_2;
        _1561 = frontier_phi_25_49_ladder_1;
        _1563 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1543 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_533, _534, _535), _1467);
        _1559 = _1543.x * cbModelParam._m0[1u].z;
        _1561 = _1543.y * cbModelParam._m0[1u].z;
        _1563 = _1543.z * cbModelParam._m0[1u].z;
    }
    float _1576 = (((_559 * _510) + _560) * _525) * ((cbModelParam._m0[1u].w * (_1559 - _1458)) + _1458);
    float _1578 = (((_559 * _512) + _560) * _525) * ((cbModelParam._m0[1u].w * (_1561 - _1460)) + _1460);
    float _1580 = (((_559 * _513) + _560) * _525) * ((cbModelParam._m0[1u].w * (_1563 - _1462)) + _1462);
    float _1583 = fma(_1580, cbSceneParam._m0[89u].z, fma(_1578, cbSceneParam._m0[89u].y, _1576 * cbSceneParam._m0[89u].x));
    float _1586 = fma(_1580, cbSceneParam._m0[90u].z, fma(_1578, cbSceneParam._m0[90u].y, _1576 * cbSceneParam._m0[90u].x));
    float _1589 = fma(_1580, cbSceneParam._m0[91u].z, fma(_1578, cbSceneParam._m0[91u].y, _1576 * cbSceneParam._m0[91u].x));
    vec4 _1597 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_444, _445));
    float _1599 = _1597.w;
    float _1611 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1599);
    float _1612 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1599);
    float _1613 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1599);
    uvec4 _1617 = floatBitsToUint(cbInstanceData._m0[_484 + 5u]);
    uint _1619 = _1617.x * 14u;
    uint _1620 = _1619 + 13u;
    float _1627 = _525 + (-1.0);
    float _1632 = (cbLight._m0[_1620].x * _1627) + 1.0;
    float _1633 = (cbLight._m0[_1620].y * _1627) + 1.0;
    float _1634 = (cbLight._m0[_1620].z * _1627) + 1.0;
    float _1635 = (cbLight._m0[_1620].w * _1627) + 1.0;
    uint _1636 = _1619 + 5u;
    float _1642 = isnan(1.0) ? _1633 : (isnan(_1633) ? 1.0 : min(_1633, 1.0));
    uint _1646 = _1619 + 4u;
    float _1656 = isnan(1.0) ? _1632 : (isnan(_1632) ? 1.0 : min(_1632, 1.0));
    uint _1660 = _1619 | 1u;
    float _1671 = dot(vec3(cbLight._m0[_1619].xyz), vec3(_342, _343, _344));
    float _1674 = dot(vec3(cbLight._m0[_1660].xyz), vec3(_342, _343, _344));
    float _3910 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
    float _3921 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
    float _1679 = (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * 0.3183098733425140380859375;
    float _1681 = (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * 0.3183098733425140380859375;
    float _1688 = ((cbLight._m0[_1636].x * _1642) * _1681) + (((cbLight._m0[_1646].x * _1611) * _1656) * _1679);
    float _1689 = ((_1642 * cbLight._m0[_1636].y) * _1681) + (((cbLight._m0[_1646].y * _1612) * _1656) * _1679);
    float _1690 = ((_1642 * cbLight._m0[_1636].z) * _1681) + (((cbLight._m0[_1646].z * _1613) * _1656) * _1679);
    uvec4 _1694 = floatBitsToUint(cbLight._m0[_1619 + 12u]);
    bool _1696 = _1694.x == 0u;
    float _1707;
    float _1709;
    float _1711;
    if (_1696)
    {
        _1707 = _1688;
        _1709 = _1689;
        _1711 = _1690;
    }
    else
    {
        uint _1715 = _1619 + 6u;
        float _1731 = (dot(vec3(cbLight._m0[_1619 + 2u].xyz), vec3(_342, _343, _344)) * 0.5) + 0.5;
        float _1732 = _1731 * _1731;
        float _3932 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1734 = isnan(1.0) ? _1634 : (isnan(_1634) ? 1.0 : min(_1634, 1.0));
        _1707 = (((cbLight._m0[_1715].x * 0.3183098733425140380859375) * _1733) * _1734) + _1688;
        _1709 = (((cbLight._m0[_1715].y * 0.3183098733425140380859375) * _1733) * _1734) + _1689;
        _1711 = (((cbLight._m0[_1715].z * 0.3183098733425140380859375) * _1733) * _1734) + _1690;
    }
    bool _1714 = _1694.y == 0u;
    float _1752;
    float _1754;
    float _1756;
    if (_1714)
    {
        _1752 = _1707;
        _1754 = _1709;
        _1756 = _1711;
    }
    else
    {
        uint _1925 = _1619 + 7u;
        float _1941 = (dot(vec3(cbLight._m0[_1619 + 3u].xyz), vec3(_342, _343, _344)) * 0.5) + 0.5;
        float _1942 = _1941 * _1941;
        float _3948 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1943 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1944 = isnan(1.0) ? _1635 : (isnan(_1635) ? 1.0 : min(_1635, 1.0));
        _1752 = (((cbLight._m0[_1925].x * 0.3183098733425140380859375) * _1943) * _1944) + _1707;
        _1754 = (((cbLight._m0[_1925].y * 0.3183098733425140380859375) * _1943) * _1944) + _1709;
        _1756 = (((cbLight._m0[_1925].z * 0.3183098733425140380859375) * _1943) * _1944) + _1711;
    }
    uint _1759 = _1619 + 8u;
    float _1772 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1619].w)) * _345) * 0.949999988079071044921875);
    float _1773 = _1772 * _1772;
    float _1774 = cbLight._m0[_1619].x + _423;
    float _1775 = cbLight._m0[_1619].y + _424;
    float _1776 = cbLight._m0[_1619].z + _425;
    float _1780 = inversesqrt(dot(vec3(_1774, _1775, _1776), vec3(_1774, _1775, _1776)));
    float _1781 = _1780 * _1774;
    float _1782 = _1780 * _1775;
    float _1783 = _1780 * _1776;
    float _1784 = dot(vec3(_342, _343, _344), vec3(cbLight._m0[_1619].xyz));
    float _3964 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1787 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _3975 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _1788 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _1789 = dot(vec3(_342, _343, _344), vec3(_1781, _1782, _1783));
    float _3986 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1792 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _1793 = dot(vec3(cbLight._m0[_1619].xyz), vec3(_1781, _1782, _1783));
    float _3997 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _1797 = _1773 * _1773;
    float _1801 = ((_1792 * _1792) * (_1797 + (-1.0))) + 1.0;
    float _1809 = exp2(log2(1.0 - (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * 5.0);
    float _1810 = 0.959999978542327880859375 - _507;
    float _1812 = 0.959999978542327880859375 - _508;
    float _1813 = 0.959999978542327880859375 - _509;
    float _1820 = 1.0 - _1773;
    float _1831 = (0.5 / (((_1788 * ((_1787 * _1820) + _1773)) + 9.9999999392252902907785028219223e-09) + (((_1788 * _1820) + _1773) * _1787))) * _1787;
    float _4008 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1833 = (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_1797 / ((_1801 * _1801) * 3.141590118408203125));
    uint _1847 = _1619 + 9u;
    float _1858 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1660].w)) * _345) * 0.949999988079071044921875);
    float _1859 = _1858 * _1858;
    float _1860 = cbLight._m0[_1660].x + _423;
    float _1861 = cbLight._m0[_1660].y + _424;
    float _1862 = cbLight._m0[_1660].z + _425;
    float _1866 = inversesqrt(dot(vec3(_1860, _1861, _1862), vec3(_1860, _1861, _1862)));
    float _1867 = _1866 * _1860;
    float _1868 = _1866 * _1861;
    float _1869 = _1866 * _1862;
    float _1870 = dot(vec3(_342, _343, _344), vec3(cbLight._m0[_1660].xyz));
    float _4019 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1873 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _1874 = dot(vec3(_342, _343, _344), vec3(_1867, _1868, _1869));
    float _4030 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1877 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _1878 = dot(vec3(cbLight._m0[_1660].xyz), vec3(_1867, _1868, _1869));
    float _4041 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1882 = _1859 * _1859;
    float _1886 = ((_1877 * _1877) * (_1882 + (-1.0))) + 1.0;
    float _1893 = exp2(log2(1.0 - (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * 5.0);
    float _1900 = 1.0 - _1859;
    float _1910 = (0.5 / (((_1788 * ((_1873 * _1900) + _1859)) + 9.9999999392252902907785028219223e-09) + (((_1788 * _1900) + _1859) * _1873))) * _1873;
    float _4052 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1912 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1882 / ((_1886 * _1886) * 3.141590118408203125));
    float _1922 = (((((_1893 * _1810) + _510) * cbLight._m0[_1847].x) * _1912) * _1642) + ((((cbLight._m0[_1759].x * _1611) * ((_1809 * _1810) + _510)) * _1833) * _1656);
    float _1923 = (((((_1893 * _1812) + _512) * cbLight._m0[_1847].y) * _1912) * _1642) + ((((cbLight._m0[_1759].y * _1612) * ((_1809 * _1812) + _512)) * _1833) * _1656);
    float _1924 = (((((_1893 * _1813) + _513) * cbLight._m0[_1847].z) * _1912) * _1642) + ((((cbLight._m0[_1759].z * _1613) * ((_1809 * _1813) + _513)) * _1833) * _1656);
    float _1986;
    float _1988;
    float _1990;
    if (_1696)
    {
        _1986 = _1922;
        _1988 = _1923;
        _1990 = _1924;
    }
    else
    {
        uint _1992 = _1619 + 2u;
        uint _1996 = _1619 + 10u;
        float _2010 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1992].w)) * _345) * 0.949999988079071044921875);
        float _2011 = _2010 * _2010;
        float _2012 = cbLight._m0[_1992].x + _423;
        float _2013 = cbLight._m0[_1992].y + _424;
        float _2014 = cbLight._m0[_1992].z + _425;
        float _2018 = inversesqrt(dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014)));
        float _2019 = _2018 * _2012;
        float _2020 = _2018 * _2013;
        float _2021 = _2018 * _2014;
        float _2022 = dot(vec3(_342, _343, _344), vec3(cbLight._m0[_1992].xyz));
        float _4063 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2025 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _2026 = dot(vec3(_342, _343, _344), vec3(_2019, _2020, _2021));
        float _4074 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2029 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _2030 = dot(vec3(cbLight._m0[_1992].xyz), vec3(_2019, _2020, _2021));
        float _4085 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        float _2034 = _2011 * _2011;
        float _2038 = ((_2029 * _2029) * (_2034 + (-1.0))) + 1.0;
        float _2045 = exp2(log2(1.0 - (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) * 5.0);
        float _2052 = 1.0 - _2011;
        float _2062 = (0.5 / (((_1788 * ((_2025 * _2052) + _2011)) + 9.9999999392252902907785028219223e-09) + (((_1788 * _2052) + _2011) * _2025))) * _2025;
        float _4096 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2064 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_2034 / ((_2038 * _2038) * 3.141590118408203125));
        float _2065 = isnan(1.0) ? _1634 : (isnan(_1634) ? 1.0 : min(_1634, 1.0));
        _1986 = (((((_2045 * _1810) + _510) * cbLight._m0[_1996].x) * _2064) * _2065) + _1922;
        _1988 = (((((_2045 * _1812) + _512) * cbLight._m0[_1996].y) * _2064) * _2065) + _1923;
        _1990 = (((((_2045 * _1813) + _513) * cbLight._m0[_1996].z) * _2064) * _2065) + _1924;
    }
    float _2100;
    float _2102;
    float _2104;
    if (_1714)
    {
        _2100 = _1986;
        _2102 = _1988;
        _2104 = _1990;
    }
    else
    {
        uint _2111 = _1619 + 3u;
        uint _2115 = _1619 + 11u;
        float _2129 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2111].w)) * _345) * 0.949999988079071044921875);
        float _2130 = _2129 * _2129;
        float _2131 = cbLight._m0[_2111].x + _423;
        float _2132 = cbLight._m0[_2111].y + _424;
        float _2133 = cbLight._m0[_2111].z + _425;
        float _2137 = inversesqrt(dot(vec3(_2131, _2132, _2133), vec3(_2131, _2132, _2133)));
        float _2138 = _2137 * _2131;
        float _2139 = _2137 * _2132;
        float _2140 = _2137 * _2133;
        float _2141 = dot(vec3(_342, _343, _344), vec3(cbLight._m0[_2111].xyz));
        float _4112 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2144 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _2145 = dot(vec3(_342, _343, _344), vec3(_2138, _2139, _2140));
        float _4123 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2148 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _2149 = dot(vec3(cbLight._m0[_2111].xyz), vec3(_2138, _2139, _2140));
        float _4134 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2153 = _2130 * _2130;
        float _2157 = ((_2148 * _2148) * (_2153 + (-1.0))) + 1.0;
        float _2164 = exp2(log2(1.0 - (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) * 5.0);
        float _2171 = 1.0 - _2130;
        float _2181 = (0.5 / (((_1788 * ((_2144 * _2171) + _2130)) + 9.9999999392252902907785028219223e-09) + (((_1788 * _2171) + _2130) * _2144))) * _2144;
        float _4145 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2183 = (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_2153 / ((_2157 * _2157) * 3.141590118408203125));
        float _2184 = isnan(1.0) ? _1635 : (isnan(_1635) ? 1.0 : min(_1635, 1.0));
        _2100 = (((((_2164 * _1810) + _510) * cbLight._m0[_2115].x) * _2183) * _2184) + _1986;
        _2102 = (((((_2164 * _1812) + _512) * cbLight._m0[_2115].y) * _2183) * _2184) + _1988;
        _2104 = (((((_2164 * _1813) + _513) * cbLight._m0[_2115].z) * _2183) * _2184) + _1990;
    }
    float _2319;
    float _2321;
    float _2323;
    float _2325;
    float _2327;
    float _2329;
    if (_1617.y == 0u)
    {
        float _2259 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2260 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2259;
        float _2261 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2259;
        float _2262 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2259;
        uvec4 _2274 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2275 = _2274.x;
        uint _2286 = uint((float(_2274.y) * floor(float(uint(cbSceneParam._m0[85u].y * _445) / _2275))) + floor(float(uint(cbSceneParam._m0[85u].x * _444) / _2275)));
        float _2296 = (log2(_2262 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2297 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        uint _2300 = uint(isnan(14.0) ? _2297 : (isnan(_2297) ? 14.0 : min(_2297, 14.0)));
        uvec4 _2305 = texelFetch(g_lightClusterGridBuffer, int(((_2300 << 2u) + (_2286 << 6u)) >> 2u));
        uint _2306 = _2305.x;
        uint _2307 = _2274.z;
        float _2445;
        float _2447;
        float _2449;
        float _2451;
        float _2453;
        float _2455;
        if (((((1u << ((_2307 >> 4u) & 15u)) + 4294967295u) & _2306) == 0u) || ((_2307 & 240u) == 0u))
        {
            _2445 = 0.0;
            _2447 = 0.0;
            _2449 = 0.0;
            _2451 = 0.0;
            _2453 = 0.0;
            _2455 = 0.0;
        }
        else
        {
            float _2446;
            float _2448;
            float _2450;
            float _2452;
            float _2454;
            float _2456;
            float _2607 = 0.0;
            float _2608 = 0.0;
            float _2609 = 0.0;
            float _2610 = 0.0;
            float _2611 = 0.0;
            float _2612 = 0.0;
            uint _2613 = 0u;
            uint _2622;
            bool _2623;
            for (;;)
            {
                _2622 = texelFetch(g_lightClassification, int((((_2300 << 5u) + (_2286 << 9u)) + (_2613 << 2u)) >> 2u)).x;
                _2623 = _2622 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2623)
                {
                    frontier_phi_66_pred = _2607;
                    frontier_phi_66_pred_1 = _2612;
                    frontier_phi_66_pred_2 = _2611;
                    frontier_phi_66_pred_3 = _2610;
                    frontier_phi_66_pred_4 = _2609;
                    frontier_phi_66_pred_5 = _2608;
                }
                else
                {
                    float _2752;
                    float _2753;
                    float _2754;
                    float _2755;
                    float _2756;
                    float _2757;
                    uint _2758;
                    _2752 = _2607;
                    _2753 = _2608;
                    _2754 = _2609;
                    _2755 = _2610;
                    _2756 = _2611;
                    _2757 = _2612;
                    _2758 = _2622;
                    float _2679;
                    float _2680;
                    float _2681;
                    float _2682;
                    float _2683;
                    float _2684;
                    for (;;)
                    {
                        uint _2762 = uint(findLSB(_2758)) + (_2613 << 5u);
                        uint _2759 = (_2758 + 4294967295u) & _2758;
                        uint _2764 = _2762 * 48u;
                        vec4 _2778 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2764)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 3u)).x));
                        uint _2784 = (_2762 * 48u) + 4u;
                        vec4 _2797 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2784)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 3u)).x));
                        uint _2803 = (_2762 * 48u) + 8u;
                        vec3 _2814 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2803)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 2u)).x));
                        float _2818 = _2778.x - _2260;
                        float _2819 = _2778.y - _2261;
                        float _2820 = _2778.z - _2262;
                        float _2821 = dot(vec3(_2818, _2819, _2820), vec3(_2818, _2819, _2820));
                        float _2824 = inversesqrt(_2821);
                        float _2825 = _2824 * _2818;
                        float _2826 = _2824 * _2819;
                        float _2827 = _2824 * _2820;
                        float _2828 = dot(vec3(_465, _468, _471), vec3(_2825, _2826, _2827));
                        float _2833 = 1.0 - (_2821 * _2778.w);
                        float _4171 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
                        float _2834 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
                        float _2835 = sqrt(_2821) * _2797.w;
                        float _2838 = 1.39999997615814208984375 / (_2835 + 1.39999997615814208984375);
                        float _2839 = _2838 * _2838;
                        float _2842 = ((1.0 - _2839) * _2828) + _2839;
                        float _2845 = _2835 * _2835;
                        float _2849 = ((isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0))) * _2834) / ((_2845 * 0.699999988079071044921875) + 1.0);
                        float _2853 = (-0.0) - _2260;
                        float _2854 = (-0.0) - _2261;
                        float _2855 = (-0.0) - _2262;
                        float _2859 = inversesqrt(dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855)));
                        float _2860 = _2859 * _2853;
                        float _2861 = _2859 * _2854;
                        float _2862 = _2859 * _2855;
                        float _2870 = exp2(log2(1.0 / ((_2845 * 3.5) + 5.0)) * 0.25);
                        float _2871 = 1.0 - _541;
                        float _2878 = sqrt(1.0 - ((1.0 - (_2871 * _2871)) * (1.0 - (_2870 * _2870))));
                        float _2879 = _2878 * _2878;
                        float _2880 = _2879 * _2879;
                        float _2881 = _2860 + _2825;
                        float _2882 = _2861 + _2826;
                        float _2883 = _2862 + _2827;
                        float _2887 = inversesqrt(dot(vec3(_2881, _2882, _2883), vec3(_2881, _2882, _2883)));
                        float _2891 = dot(vec3(_465, _468, _471), vec3(_2860, _2861, _2862));
                        float _4187 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
                        float _2894 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                        float _2895 = dot(vec3(_465, _468, _471), vec3(_2887 * _2881, _2887 * _2882, _2887 * _2883));
                        float _4198 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                        float _2898 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                        float _2902 = ((_2898 * _2898) * (_2880 + (-1.0))) + 1.0;
                        float _2903 = _2838 * _2879;
                        float _2904 = _2903 * _2903;
                        float _2907 = ((1.0 - _2904) * _2828) + _2904;
                        float _4209 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
                        float _2908 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                        float _2909 = 1.0 - _2879;
                        float _2919 = (0.5 / (((_2908 * ((_2894 * _2909) + _2879)) + 9.9999999392252902907785028219223e-09) + (((_2908 * _2909) + _2879) * _2894))) * _2908;
                        float _4220 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                        float _2930 = (((_2880 * 3.1415927410125732421875) * (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) / ((_2902 * _2902) * ((_2845 * 2.1991131305694580078125) + 3.141590118408203125))) * _2834;
                        _2682 = (_2849 * _2797.x) + _2755;
                        _2683 = (_2849 * _2797.y) + _2756;
                        _2684 = (_2849 * _2797.z) + _2757;
                        _2679 = (_2930 * _2814.x) + _2752;
                        _2680 = (_2930 * _2814.y) + _2753;
                        _2681 = (_2930 * _2814.z) + _2754;
                        if (_2759 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2752 = _2679;
                            _2753 = _2680;
                            _2754 = _2681;
                            _2755 = _2682;
                            _2756 = _2683;
                            _2757 = _2684;
                            _2758 = _2759;
                        }
                    }
                    frontier_phi_66_pred = _2679;
                    frontier_phi_66_pred_1 = _2684;
                    frontier_phi_66_pred_2 = _2683;
                    frontier_phi_66_pred_3 = _2682;
                    frontier_phi_66_pred_4 = _2681;
                    frontier_phi_66_pred_5 = _2680;
                }
                _2446 = frontier_phi_66_pred;
                _2456 = frontier_phi_66_pred_1;
                _2454 = frontier_phi_66_pred_2;
                _2452 = frontier_phi_66_pred_3;
                _2450 = frontier_phi_66_pred_4;
                _2448 = frontier_phi_66_pred_5;
                uint _2614 = _2613 + 1u;
                if (_2614 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2607 = _2446;
                    _2608 = _2448;
                    _2609 = _2450;
                    _2610 = _2452;
                    _2611 = _2454;
                    _2612 = _2456;
                    _2613 = _2614;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2445 = _2446;
            _2447 = _2448;
            _2449 = _2450;
            _2451 = _2452;
            _2453 = _2454;
            _2455 = _2456;
        }
        uvec4 _2459 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2460 = _2459.z;
        uint _2462 = (_2460 >> 8u) & 15u;
        float _2575;
        float _2577;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        if (((4294967295u << _2462) & _2306) == 0u)
        {
            _2575 = _2445;
            _2577 = _2447;
            _2579 = _2449;
            _2581 = _2451;
            _2583 = _2453;
            _2585 = _2455;
        }
        else
        {
            float _2600 = inversesqrt(dot(vec3(_2260, _2261, _2262), vec3(_2260, _2261, _2262)));
            float _2601 = _2600 * _2260;
            float _2602 = _2600 * _2261;
            float _2603 = _2600 * _2262;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2462 < ((_2460 >> 12u) & 15u))
            {
                float _2576;
                float _2578;
                float _2580;
                float _2582;
                float _2584;
                float _2586;
                float _2735 = _2445;
                float _2736 = _2447;
                float _2737 = _2449;
                float _2738 = _2451;
                float _2739 = _2453;
                float _2740 = _2455;
                uint _2741 = _2462;
                uint _2750;
                bool _2751;
                for (;;)
                {
                    _2750 = texelFetch(g_lightClassification, int((((_2300 << 5u) + (_2286 << 9u)) + (_2741 << 2u)) >> 2u)).x;
                    _2751 = _2750 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2751)
                    {
                        frontier_phi_77_pred = _2740;
                        frontier_phi_77_pred_1 = _2739;
                        frontier_phi_77_pred_2 = _2738;
                        frontier_phi_77_pred_3 = _2737;
                        frontier_phi_77_pred_4 = _2736;
                        frontier_phi_77_pred_5 = _2735;
                    }
                    else
                    {
                        float _2944;
                        float _2945;
                        float _2946;
                        float _2947;
                        float _2948;
                        float _2949;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _2957 = _2735;
                        float _2958 = _2736;
                        float _2959 = _2737;
                        float _2960 = _2738;
                        float _2961 = _2739;
                        float _2962 = _2740;
                        uint _2963 = _2750;
                        uint _2964;
                        vec4 _2989;
                        float _2990;
                        vec4 _3005;
                        vec3 _3017;
                        vec4 _3033;
                        vec4 _3049;
                        float _3096;
                        bool _3097;
                        for (;;)
                        {
                            uint _2974 = ((_2741 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2963));
                            _2964 = (_2963 + 4294967295u) & _2963;
                            uint _2976 = _2974 * 40u;
                            _2989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 3u)).x));
                            _2990 = _2989.w;
                            uint _2992 = (_2974 * 40u) + 4u;
                            _3005 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 3u)).x));
                            uint _3007 = (_2974 * 40u) + 8u;
                            _3017 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x));
                            uint _3020 = (_2974 * 40u) + 16u;
                            _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            uint _3036 = (_2974 * 40u) + 20u;
                            _3049 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 3u)).x));
                            uint _3052 = (_2974 * 40u) + 24u;
                            vec4 _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            uint _3071 = (_2974 * 40u) + 28u;
                            vec4 _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            _3096 = fma(_2262, _3084.z, fma(_2261, _3084.y, _3084.x * _2260)) + _3084.w;
                            _3097 = !((fma(_2262, _3065.z, fma(_2261, _3065.y, _3065.x * _2260)) + _3065.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3097)
                            {
                                float _3124 = _2989.x - _2260;
                                float _3125 = _2989.y - _2261;
                                float _3126 = _2989.z - _2262;
                                float _3127 = dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126));
                                float _3130 = inversesqrt(_3127);
                                float _3131 = _3130 * _3124;
                                float _3132 = _3130 * _3125;
                                float _3133 = _3130 * _3126;
                                float _3137 = 1.0 - (_3127 / (_2990 * _2990));
                                float _4231 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3138 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                                float _3142 = sqrt(_3127) * _3005.w;
                                float _3144 = 1.39999997615814208984375 / (_3142 + 1.39999997615814208984375);
                                float _3145 = _3144 * _3144;
                                float _3148 = ((1.0 - _3145) * dot(vec3(_3131, _3132, _3133), vec3(_465, _468, _471))) + _3145;
                                float _3151 = _3142 * _3142;
                                float _3155 = (fma(_2262, _3033.z, fma(_2261, _3033.y, _3033.x * _2260)) + _3033.w) / _3096;
                                float _3156 = (fma(_2262, _3049.z, fma(_2261, _3049.y, _3049.x * _2260)) + _3049.w) / _3096;
                                float _3160 = 1.0 - dot(vec2(_3155, _3156), vec2(_3155, _3156));
                                float _4247 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3161 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                                float _3162 = _3161 * (((isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0))) * _3138) / ((_3151 * 0.699999988079071044921875) + 1.0));
                                float _3174 = exp2(log2(1.0 / ((_3151 * 3.5) + 5.0)) * 0.25);
                                float _3175 = 1.0 - _541;
                                float _3182 = sqrt(1.0 - ((1.0 - (_3175 * _3175)) * (1.0 - (_3174 * _3174))));
                                float _3183 = _3182 * _3182;
                                float _3184 = _3183 * _3183;
                                float _3185 = _3131 - _2601;
                                float _3186 = _3132 - _2602;
                                float _3187 = _3133 - _2603;
                                float _3191 = inversesqrt(dot(vec3(_3185, _3186, _3187), vec3(_3185, _3186, _3187)));
                                float _3195 = dot(vec3(_465, _468, _471), vec3((-0.0) - _2601, (-0.0) - _2602, (-0.0) - _2603));
                                float _4258 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3198 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                                float _3199 = dot(vec3(_465, _468, _471), vec3(_3191 * _3185, _3191 * _3186, _3191 * _3187));
                                float _4269 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                                float _3202 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                                float _3206 = ((_3202 * _3202) * (_3184 + (-1.0))) + 1.0;
                                float _3207 = _3144 * _3183;
                                float _3208 = _3207 * _3207;
                                float _3214 = ((1.0 - _3208) * dot(vec3(_465, _468, _471), vec3(_3131, _3132, _3133))) + _3208;
                                float _4280 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3215 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                                float _3216 = 1.0 - _3183;
                                float _3226 = (0.5 / (((_3215 * ((_3198 * _3216) + _3183)) + 9.9999999392252902907785028219223e-09) + (((_3215 * _3216) + _3183) * _3198))) * _3215;
                                float _4291 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3236 = (_3161 * _3138) * (((_3184 * 3.1415927410125732421875) * (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) / ((_3206 * _3206) * ((_3151 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3162 * _3005.y;
                                frontier_phi_83_pred_1 = _3162 * _3005.x;
                                frontier_phi_83_pred_2 = _3236 * _3017.z;
                                frontier_phi_83_pred_3 = _3236 * _3017.y;
                                frontier_phi_83_pred_4 = _3236 * _3017.x;
                                frontier_phi_83_pred_5 = _3162 * _3005.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3244 = frontier_phi_83_pred;
                            _3243 = frontier_phi_83_pred_1;
                            _3242 = frontier_phi_83_pred_2;
                            _3241 = frontier_phi_83_pred_3;
                            _3240 = frontier_phi_83_pred_4;
                            _3245 = frontier_phi_83_pred_5;
                            _2947 = _3243 + _2960;
                            _2948 = _3244 + _2961;
                            _2949 = _3245 + _2962;
                            _2944 = _3240 + _2957;
                            _2945 = _3241 + _2958;
                            _2946 = _3242 + _2959;
                            if (_2964 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2957 = _2944;
                                _2958 = _2945;
                                _2959 = _2946;
                                _2960 = _2947;
                                _2961 = _2948;
                                _2962 = _2949;
                                _2963 = _2964;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2949;
                        frontier_phi_77_pred_1 = _2948;
                        frontier_phi_77_pred_2 = _2947;
                        frontier_phi_77_pred_3 = _2946;
                        frontier_phi_77_pred_4 = _2945;
                        frontier_phi_77_pred_5 = _2944;
                    }
                    _2586 = frontier_phi_77_pred;
                    _2584 = frontier_phi_77_pred_1;
                    _2582 = frontier_phi_77_pred_2;
                    _2580 = frontier_phi_77_pred_3;
                    _2578 = frontier_phi_77_pred_4;
                    _2576 = frontier_phi_77_pred_5;
                    uint _2742 = _2741 + 1u;
                    if (_2742 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2735 = _2576;
                        _2736 = _2578;
                        _2737 = _2580;
                        _2738 = _2582;
                        _2739 = _2584;
                        _2740 = _2586;
                        _2741 = _2742;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2580;
                frontier_phi_58_59_ladder_1 = _2586;
                frontier_phi_58_59_ladder_2 = _2584;
                frontier_phi_58_59_ladder_3 = _2582;
                frontier_phi_58_59_ladder_4 = _2578;
                frontier_phi_58_59_ladder_5 = _2576;
            }
            else
            {
                frontier_phi_58_59_ladder = _2449;
                frontier_phi_58_59_ladder_1 = _2455;
                frontier_phi_58_59_ladder_2 = _2453;
                frontier_phi_58_59_ladder_3 = _2451;
                frontier_phi_58_59_ladder_4 = _2447;
                frontier_phi_58_59_ladder_5 = _2445;
            }
            _2575 = frontier_phi_58_59_ladder_5;
            _2577 = frontier_phi_58_59_ladder_4;
            _2579 = frontier_phi_58_59_ladder;
            _2581 = frontier_phi_58_59_ladder_3;
            _2583 = frontier_phi_58_59_ladder_2;
            _2585 = frontier_phi_58_59_ladder_1;
        }
        float _2590 = isnan(1.0) ? _525 : (isnan(_525) ? 1.0 : min(_525, 1.0));
        _2319 = (_2590 * _2581) + _1752;
        _2321 = (_2590 * _2583) + _1754;
        _2323 = (_2590 * _2585) + _1756;
        _2325 = ((_2575 * _510) * _2590) + _2100;
        _2327 = ((_2577 * _512) * _2590) + _2102;
        _2329 = ((_2579 * _513) * _2590) + _2104;
    }
    else
    {
        _2319 = _1752;
        _2321 = _1754;
        _2323 = _1756;
        _2325 = _2100;
        _2327 = _2102;
        _2329 = _2104;
    }
    uint _2335 = _486 + uint(cbMatDynParam._m0[0u].w);
    float _2344 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _305.x) * _328) * cbInstanceData._m0[_2335].x;
    float _2348 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _305.y) * _328) * cbInstanceData._m0[_2335].y;
    float _2352 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _305.z) * _328) * cbInstanceData._m0[_2335].z;
    float _4307 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _4318 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _4329 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _2369 = (((isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_2319 + ((isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))) * _525))) + ((_2325 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _1366)) * cbPerFrame._m0[3u].x)) + _2344;
    float _2371 = (_2348 + ((_2327 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _1366)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2321 + ((isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0))) * _525)));
    float _2373 = (_2352 + ((_2329 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _1366)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2323 + ((isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))) * _525)));
    float _2374 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2375 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2376 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2382 = cbMtdParam._m0[2u].x * _2344;
    float _2383 = cbMtdParam._m0[2u].y * _2348;
    float _2384 = cbMtdParam._m0[2u].z * _2352;
    float _4355 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2386 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    uint _2387 = _484 + 6u;
    float _2395 = _444 / cbSceneParam._m0[86u].x;
    float _2396 = _445 / cbSceneParam._m0[86u].y;
    vec4 _2410 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2395, _2396, (log2((isnan(cbSceneParam._m0[77u].w) ? _365 : (isnan(_365) ? cbSceneParam._m0[77u].w : min(_365, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2412 = _2410.x;
    float _2413 = _2410.y;
    float _2414 = _2410.z;
    float _2415 = _2410.w;
    float _2508;
    float _2510;
    float _2512;
    float _2514;
    if (_365 > cbSceneParam._m0[78u].w)
    {
        float _2470 = isnan(_365) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _365 : min(cbSceneParam._m0[80u].w, _365));
        float _2471 = _2470 / _365;
        float _2482 = _2471 * _416;
        float _2483 = _417 * _2471;
        float _2484 = (-0.0) - _2483;
        float _2486 = _2471 * _418;
        float _2488 = (cbSceneParam._m0[77u].w * _2484) / _2470;
        float _2489 = _2488 + cbSceneParam._m0[79u].w;
        float _2490 = cbSceneParam._m0[79u].w - _2483;
        float _2496 = sqrt(((_2482 * _2482) + (_2483 * _2483)) + (_2486 * _2486));
        float _2499 = (1.0 - (cbSceneParam._m0[77u].w / _2470)) * _2496;
        float _2504 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2506 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2692;
        if (abs((_2484 - _2488) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2692 = ((((_2489 > 0.0) ? exp2(_2504 * _2489) : (2.0 - exp2(_2506 * _2489))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2499;
        }
        else
        {
            float _2636 = 1.0 / cbSceneParam._m0[80u].x;
            float _2637 = isnan(_2490) ? _2489 : (isnan(_2489) ? _2490 : max(_2489, _2490));
            float _2638 = isnan(_2490) ? _2489 : (isnan(_2489) ? _2490 : min(_2489, _2490));
            float _2647 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : min(_2637, 0.0));
            float _2648 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : min(_2638, 0.0));
            _2692 = ((abs(_2496 / _2484) * cbSceneParam._m0[80u].y) * ((((_2647 - _2648) * 2.0) - ((exp2(_2504 * (isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0)))) - exp2(_2504 * (isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0))))) * _2636)) - ((exp2(_2506 * _2647) - exp2(_2506 * _2648)) * _2636))) + (_2499 * cbSceneParam._m0[80u].z);
        }
        vec4 _2694 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2395, _2396, 1.0), 0.0);
        float _2703 = exp2((_2692 * (-1.44269502162933349609375)) * (1.0 - _2694.w));
        float _2704 = log2(_2703);
        float _2720 = log2(_2415);
        _2508 = (exp2(_2720 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2704 * cbSceneParam._m0[78u].x)) * _2694.x) / cbSceneParam._m0[78u].x)) + _2412;
        _2510 = (exp2(_2720 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2704 * cbSceneParam._m0[78u].y)) * _2694.y) / cbSceneParam._m0[78u].y)) + _2413;
        _2512 = (exp2(_2720 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2704 * cbSceneParam._m0[78u].z)) * _2694.z) / cbSceneParam._m0[78u].z)) + _2414;
        _2514 = _2703 * _2415;
    }
    else
    {
        _2508 = _2412;
        _2510 = _2413;
        _2512 = _2414;
        _2514 = _2415;
    }
    bool _2730;
    vec4 _2524;
    vec4 _2546;
    float _2548;
    float _2552;
    float _2553;
    float _2554;
    float _2557;
    float _2560;
    float _2563;
    float _2564;
    bool _2574;
    for (;;)
    {
        _2524 = cbMatDynParam._m0[0u];
        float _2526 = roundEven(_2524.y);
        bool _2527 = _2526 == 3.0;
        float _2528 = log2(_2514);
        float _2532 = exp2(_2528 * cbSceneParam._m0[78u].x);
        float _2533 = exp2(_2528 * cbSceneParam._m0[78u].y);
        float _2534 = exp2(_2528 * cbSceneParam._m0[78u].z);
        float _2535 = _2532 * _2374;
        float _2536 = _2533 * _2375;
        float _2537 = _2534 * _2376;
        float _2544 = _432 + (-0.5);
        _2546 = cbMtdParam._m0[1u];
        _2548 = _2546.y * _2544;
        float _2551 = (_2526 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2552 = _2551 * (_2527 ? _2535 : (_2535 + (cbSceneParam._m0[72u].w * _2508)));
        _2553 = _2551 * (_2527 ? _2536 : (_2536 + (cbSceneParam._m0[72u].w * _2510)));
        _2554 = _2551 * (_2527 ? _2537 : (_2537 + (cbSceneParam._m0[72u].w * _2512)));
        _2557 = ((_2382 * _2386) * _2532) * _2551;
        _2560 = ((_2383 * _2386) * _2533) * _2551;
        _2563 = ((_2384 * _2386) * _2534) * _2551;
        _2564 = _2544 * 0.999000012874603271484375;
        _2574 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2574)
        {
            if ((cbInstanceData._m0[_484 + 7u].x + _2564) < 0.5)
            {
                _2730 = true;
                break;
            }
        }
        uint _2671 = _486 + uint(_2524.w);
        if ((cbInstanceData._m0[_2671].w < 1.0) && ((cbInstanceData._m0[_2671].w + _2564) < 0.5))
        {
            _2730 = true;
            break;
        }
        if ((_2548 + 1.0) < _2546.x)
        {
            _2730 = true;
            break;
        }
        _2730 = false;
        break;
    }
    float _2935;
    if (_2730)
    {
        discard_state = true;
        _2935 = 0.0;
    }
    else
    {
        _2935 = cbInstanceData._m0[_2387].w;
    }
    SV_Target.x = _2552;
    SV_Target.y = _2553;
    SV_Target.z = _2554;
    SV_Target.w = _2935;
    SV_Target_1.x = _2557;
    SV_Target_1.y = _2560;
    SV_Target_1.z = _2563;
    SV_Target_1.w = cbInstanceData._m0[_2387].w;
    discard_exit();
}


