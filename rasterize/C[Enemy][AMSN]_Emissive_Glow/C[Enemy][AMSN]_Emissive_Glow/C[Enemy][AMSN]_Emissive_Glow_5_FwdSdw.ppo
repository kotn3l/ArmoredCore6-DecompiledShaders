#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _846;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _228.x * cbMtdParam._m0[9u].x;
    float _235 = _228.y * cbMtdParam._m0[9u].y;
    float _236 = _228.z * cbMtdParam._m0[9u].z;
    vec4 _248 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _252 = _248.z;
    float _256 = (_248.x * 2.0) + (-1.0);
    float _258 = (_248.y * 2.0) + (-1.0);
    float _259 = dot(vec2(_256, _258), vec2(_256, _258));
    float _3486 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _265 = sqrt(1.0 - (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0))));
    vec4 _302 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _309 = fma(_265, _199 * NORMAL.x, fma(_258, _206 * TANGENT.x, (_192 * _185) * _256));
    float _312 = fma(_265, _199 * NORMAL.y, fma(_258, _206 * TANGENT.y, (_192 * _186) * _256));
    float _315 = fma(_265, _199 * NORMAL.z, fma(_258, _206 * TANGENT.z, (_192 * _187) * _256));
    float _319 = inversesqrt(dot(vec3(_309, _312, _315), vec3(_309, _312, _315)));
    float _320 = _319 * _309;
    float _321 = _319 * _312;
    float _322 = _319 * _315;
    float _3497 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _323 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    float _3508 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3519 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3530 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _342 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _383 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _393 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _383);
    float _394 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _383);
    float _395 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _383);
    float _399 = inversesqrt(dot(vec3(_393, _394, _395), vec3(_393, _394, _395)));
    float _400 = _393 * _399;
    float _401 = _394 * _399;
    float _402 = _395 * _399;
    float _408 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _409 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _430 = fma(_322, cbSceneParam._m0[5u].z, fma(_321, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _320));
    float _433 = fma(_322, cbSceneParam._m0[6u].z, fma(_321, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _320));
    float _436 = fma(_322, cbSceneParam._m0[7u].z, fma(_321, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _320));
    uint _449 = uint(roundEven(NORMAL.w)) * 13u;
    uint _450 = _449 + 9u;
    uint _451 = _450 + uint(cbMatDynParam._m0[0u].w);
    float _457 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0)))) * cbInstanceData._m0[_451].x;
    float _458 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0)))) * cbInstanceData._m0[_451].y;
    float _459 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0)))) * cbInstanceData._m0[_451].z;
    float _3541 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _3552 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _3563 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    vec4 _471 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _408, cbSceneParam._m0[86u].y * _409));
    float _474 = _471.x * TEXCOORD.z;
    float _475 = dot(vec3(_320, _321, _322), vec3(_400, _401, _402));
    float _478 = _475 * 2.0;
    float _482 = (_478 * _320) - _400;
    float _483 = (_478 * _321) - _401;
    float _484 = (_478 * _322) - _402;
    float _488 = abs(dot(vec3(_400, _401, _402), vec3(_320, _321, _322)));
    float _3574 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _490 = sqrt(_323);
    float _503 = exp2((_490 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_490 * 3.0));
    float _535 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _845;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _570 = fma(_543, cbModelParam._m0[26u].z, fma(_539, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _535));
        float _574 = fma(_543, cbModelParam._m0[27u].z, fma(_539, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _535));
        float _578 = fma(_543, cbModelParam._m0[28u].z, fma(_539, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _535));
        float _603 = _535 + _320;
        float _604 = _539 + _321;
        float _605 = _543 + _322;
        float _615 = fma(_605, cbModelParam._m0[26u].z, fma(_604, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _603)) - _570;
        float _616 = fma(_605, cbModelParam._m0[27u].z, fma(_604, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _603)) - _574;
        float _617 = fma(_605, cbModelParam._m0[28u].z, fma(_604, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _603)) - _578;
        float _621 = inversesqrt(dot(vec3(_615, _616, _617), vec3(_615, _616, _617)));
        float _634 = ((_621 * _615) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_570 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _635 = ((_621 * _616) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_574 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _636 = ((_621 * _617) / cbModelParam._m0[34u].z) + ((((((_578 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _639 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _646 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _653 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        float _673 = exp2((_639.w + (-0.5)) * 20.0) * 2.0;
        float _674 = _673 * (_639.x + (-0.5));
        float _675 = _673 * (_639.y + (-0.5));
        float _676 = _673 * (_639.z + (-0.5));
        float _683 = exp2((_646.w + (-0.5)) * 20.0) * 2.0;
        float _684 = _683 * (_646.x + (-0.5));
        float _685 = _683 * (_646.y + (-0.5));
        float _686 = _683 * (_646.z + (-0.5));
        float _693 = exp2((_653.w + (-0.5)) * 20.0) * 2.0;
        float _694 = _693 * (_653.x + (-0.5));
        float _695 = _693 * (_653.y + (-0.5));
        float _696 = _693 * (_653.z + (-0.5));
        float _703 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _704 = _703 * (_660.x + (-0.5));
        float _705 = _703 * (_660.y + (-0.5));
        float _706 = _703 * (_660.z + (-0.5));
        float _707 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _708 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _709 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _710 = _674 * 0.5;
        float _711 = _684 * 0.5;
        float _712 = _694 * 0.5;
        float _713 = dot(vec3(_710, _711, _712), vec3(_710, _711, _712));
        float _718 = (_713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_713);
        float _727 = (dot(vec3(_320, _321, _322), vec3(_718 * _710, _718 * _711, _718 * _712)) + 1.0) * 0.5;
        float _3600 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _737 = sqrt(((_711 * _711) + (_710 * _710)) + (_712 * _712)) / (_707 + 9.9999997473787516355514526367188e-06);
        float _3611 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _738 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _739 = _738 * 2.0;
        float _743 = (1.0 - _738) / (_738 + 1.0);
        float _3622 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _744 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _753 = ((((1.0 - _744) * (_739 + 2.0)) * exp2(log2(isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_739 + 1.0))) + _744) * _707;
        float _754 = _675 * 0.5;
        float _755 = _685 * 0.5;
        float _756 = _695 * 0.5;
        float _757 = dot(vec3(_754, _755, _756), vec3(_754, _755, _756));
        float _762 = (_757 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_757);
        float _770 = (dot(vec3(_320, _321, _322), vec3(_762 * _754, _762 * _755, _762 * _756)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _779 = sqrt(((_755 * _755) + (_754 * _754)) + (_756 * _756)) / (_708 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _781 = _780 * 2.0;
        float _785 = (1.0 - _780) / (_780 + 1.0);
        float _3655 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _795 = ((((1.0 - _786) * (_781 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_781 + 1.0))) + _786) * _708;
        float _796 = _676 * 0.5;
        float _797 = _686 * 0.5;
        float _798 = _696 * 0.5;
        float _799 = dot(vec3(_796, _797, _798), vec3(_796, _797, _798));
        float _804 = (_799 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_799);
        float _812 = (dot(vec3(_320, _321, _322), vec3(_804 * _796, _804 * _797, _804 * _798)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _821 = sqrt(((_797 * _797) + (_796 * _796)) + (_798 * _798)) / (_709 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _823 = _822 * 2.0;
        float _827 = (1.0 - _822) / (_822 + 1.0);
        float _3688 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _837 = ((((1.0 - _828) * (_823 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_823 + 1.0))) + _828) * _709;
        _845 = _676;
        _847 = _675;
        _848 = _674;
        _849 = _686;
        _850 = _685;
        _851 = _684;
        _852 = _696;
        _853 = _695;
        _854 = _694;
        _855 = _709;
        _856 = _708;
        _857 = _707;
        _858 = cbModelParam._m0[36u].z * (isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0)));
        _859 = cbModelParam._m0[36u].z * (isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0)));
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0)));
    }
    else
    {
        _845 = _846;
        _847 = _846;
        _848 = _846;
        _849 = _846;
        _850 = _846;
        _851 = _846;
        _852 = _846;
        _853 = _846;
        _854 = _846;
        _855 = _846;
        _856 = _846;
        _857 = _846;
        _858 = 0.0;
        _859 = 0.0;
        _860 = 0.0;
    }
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _886 = fma(_543, cbModelParam._m0[30u].z, fma(_539, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _535));
        float _890 = fma(_543, cbModelParam._m0[31u].z, fma(_539, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _535));
        float _894 = fma(_543, cbModelParam._m0[32u].z, fma(_539, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _535));
        float _917 = _535 + _320;
        float _918 = _539 + _321;
        float _919 = _543 + _322;
        float _929 = fma(_919, cbModelParam._m0[30u].z, fma(_918, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _917)) - _886;
        float _930 = fma(_919, cbModelParam._m0[31u].z, fma(_918, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _917)) - _890;
        float _931 = fma(_919, cbModelParam._m0[32u].z, fma(_918, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _917)) - _894;
        float _935 = inversesqrt(dot(vec3(_929, _930, _931), vec3(_929, _930, _931)));
        float _948 = ((_935 * _929) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_886 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_935 * _930) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_890 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _950 = ((_935 * _931) / cbModelParam._m0[35u].z) + ((((((_894 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        float _985 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_952.x + (-0.5));
        float _987 = _985 * (_952.y + (-0.5));
        float _988 = _985 * (_952.z + (-0.5));
        float _995 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_959.x + (-0.5));
        float _997 = _995 * (_959.y + (-0.5));
        float _998 = _995 * (_959.z + (-0.5));
        float _1005 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_966.x + (-0.5));
        float _1007 = _1005 * (_966.y + (-0.5));
        float _1008 = _1005 * (_966.z + (-0.5));
        float _1015 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_973.x + (-0.5));
        float _1017 = _1015 * (_973.y + (-0.5));
        float _1018 = _1015 * (_973.z + (-0.5));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = _986 * 0.5;
        float _1023 = _996 * 0.5;
        float _1024 = _1006 * 0.5;
        float _1025 = dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024));
        float _1030 = (_1025 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1025);
        float _1038 = (dot(vec3(_320, _321, _322), vec3(_1030 * _1022, _1030 * _1023, _1030 * _1024)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1047 = sqrt(((_1023 * _1023) + (_1022 * _1022)) + (_1024 * _1024)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _3751 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1049 + 1.0))) + _1054) * _1019;
        float _1064 = _987 * 0.5;
        float _1065 = _997 * 0.5;
        float _1066 = _1007 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_320, _321, _322), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3784 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1091 + 1.0))) + _1096) * _1020;
        float _1106 = _988 * 0.5;
        float _1107 = _998 * 0.5;
        float _1108 = _1008 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_320, _321, _322), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3817 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1133 + 1.0))) + _1138) * _1021;
        _1155 = _988;
        _1156 = _987;
        _1157 = _986;
        _1158 = _998;
        _1159 = _997;
        _1160 = _996;
        _1161 = _1008;
        _1162 = _1007;
        _1163 = _1006;
        _1164 = _1021;
        _1165 = _1020;
        _1166 = _1019;
        _1167 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
        _1168 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
    }
    else
    {
        _1155 = _846;
        _1156 = _846;
        _1157 = _846;
        _1158 = _846;
        _1159 = _846;
        _1160 = _846;
        _1161 = _846;
        _1162 = _846;
        _1163 = _846;
        _1164 = _846;
        _1165 = _846;
        _1166 = _846;
        _1167 = 0.0;
        _1168 = 0.0;
        _1169 = 0.0;
    }
    float _1179 = (cbModelParam._m0[1u].x * (_1167 - _858)) + _858;
    float _1180 = (cbModelParam._m0[1u].x * (_1168 - _859)) + _859;
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _860)) + _860;
    float _1202 = fma(_1181, cbSceneParam._m0[89u].z, fma(_1180, cbSceneParam._m0[89u].y, _1179 * cbSceneParam._m0[89u].x));
    float _1205 = fma(_1181, cbSceneParam._m0[90u].z, fma(_1180, cbSceneParam._m0[90u].y, _1179 * cbSceneParam._m0[90u].x));
    float _1208 = fma(_1181, cbSceneParam._m0[91u].z, fma(_1180, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1179));
    float _1223 = _482 * 0.5;
    float _1224 = _483 * 0.5;
    float _1225 = _484 * 0.5;
    float _1226 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1229 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_1156, _1159, _1162, _1165));
    float _1232 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_1155, _1158, _1161, _1164));
    float _1266;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1239 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_845, _849, _852, _855));
        float _1243 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_847, _850, _853, _856));
        float _1247 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_848, _851, _854, _857));
        float _1254 = dot(vec4(cbModelParam._m0[39u]), vec4(_1223, _1224, _1225, 1.0));
        _1266 = dot(vec3(isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1254) ? 0.0 : (isnan(0.0) ? _1254 : max(0.0, _1254))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1266 = 1.0;
    }
    float _1277;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1268 = dot(vec4(cbModelParam._m0[40u]), vec4(_1223, _1224, _1225, 1.0));
        _1277 = dot(vec3(isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)), isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)), isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1268) ? 0.0 : (isnan(0.0) ? _1268 : max(0.0, _1268))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1277 = 1.0;
    }
    float _1281 = (_1277 * cbModelParam._m0[1u].x) + (_1266 * (1.0 - cbModelParam._m0[1u].x));
    float _1291 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _323);
    float _1292 = isnan(_1291) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1291 : min(cbModelParam._m0[25u].z, _1291));
    float _1373;
    float _1375;
    float _1377;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1340 = fma(_543, cbModelParam._m0[13u].z, fma(_539, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _535)) + cbModelParam._m0[13u].w;
        float _1344 = fma(_543, cbModelParam._m0[14u].z, fma(_539, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _535)) + cbModelParam._m0[14u].w;
        float _1348 = fma(_543, cbModelParam._m0[15u].z, fma(_539, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _535)) + cbModelParam._m0[15u].w;
        float _1351 = fma(_484, cbModelParam._m0[13u].z, fma(_483, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _482));
        float _1354 = fma(_484, cbModelParam._m0[14u].z, fma(_483, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _482));
        float _1357 = fma(_484, cbModelParam._m0[15u].z, fma(_483, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _482));
        float _1385;
        if (_1351 > 0.0)
        {
            _1385 = abs((1.0 - _1340) / _1351);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1351 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1340 + 1.0) / _1351);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1385 = frontier_phi_14_12_ladder;
        }
        float _1557;
        if (_1354 > 0.0)
        {
            _1557 = abs((1.0 - _1344) / _1354);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1344 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1557 = frontier_phi_23_19_ladder;
        }
        float _1853;
        if (_1357 > 0.0)
        {
            _1853 = abs((1.0 - _1348) / _1357);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1348 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1853 = frontier_phi_35_30_ladder;
        }
        float _1855 = isnan(_1557) ? _1385 : (isnan(_1385) ? _1557 : min(_1385, _1557));
        float _1856 = isnan(_1853) ? _1855 : (isnan(_1855) ? _1853 : min(_1855, _1853));
        float _1860 = (_1856 * _1351) + _1340;
        float _1861 = (_1856 * _1354) + _1344;
        float _1862 = (_1856 * _1357) + _1348;
        float _1863 = _1856 * 9.9999997473787516355514526367188e-05;
        float _1865 = (-1.0) - _1863;
        float _1867 = _1863 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1862 > _1867) || ((_1862 < _1865) || ((_1861 > _1867) || ((_1861 < _1865) || ((_1860 < _1865) || (_1860 > _1867))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2007 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1862, cbModelParam._m0[9u].z, fma(_1861, cbModelParam._m0[9u].y, _1860 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1862, cbModelParam._m0[10u].z, fma(_1861, cbModelParam._m0[10u].y, _1860 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1862, cbModelParam._m0[11u].z, fma(_1861, cbModelParam._m0[11u].y, _1860 * cbModelParam._m0[11u].x))), _1292);
            frontier_phi_13_35_ladder = _2007.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2007.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2007.x * cbModelParam._m0[1u].y;
        }
        _1373 = frontier_phi_13_35_ladder_2;
        _1375 = frontier_phi_13_35_ladder_1;
        _1377 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1361 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_482, _483, _484), _1292);
        _1373 = _1361.x * cbModelParam._m0[1u].y;
        _1375 = _1361.y * cbModelParam._m0[1u].y;
        _1377 = _1361.z * cbModelParam._m0[1u].y;
    }
    float _1381 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _323);
    float _1382 = isnan(_1381) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1381 : min(cbModelParam._m0[25u].w, _1381));
    float _1474;
    float _1476;
    float _1478;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1438 = fma(_543, cbModelParam._m0[21u].z, fma(_539, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _535)) + cbModelParam._m0[21u].w;
        float _1442 = fma(_543, cbModelParam._m0[22u].z, fma(_539, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _535)) + cbModelParam._m0[22u].w;
        float _1446 = fma(_543, cbModelParam._m0[23u].z, fma(_539, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _535)) + cbModelParam._m0[23u].w;
        float _1449 = fma(_484, cbModelParam._m0[21u].z, fma(_483, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _482));
        float _1452 = fma(_484, cbModelParam._m0[22u].z, fma(_483, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _482));
        float _1455 = fma(_484, cbModelParam._m0[23u].z, fma(_483, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _482));
        float _1562;
        if (_1449 > 0.0)
        {
            _1562 = abs((1.0 - _1438) / _1449);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1438 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1562 = frontier_phi_25_21_ladder;
        }
        float _1880;
        if (_1452 > 0.0)
        {
            _1880 = abs((1.0 - _1442) / _1452);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1452 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1442 + 1.0) / _1452);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1880 = frontier_phi_37_32_ladder;
        }
        float _2207;
        if (_1455 > 0.0)
        {
            _2207 = abs((1.0 - _1446) / _1455);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1446 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2207 = frontier_phi_47_44_ladder;
        }
        float _2209 = isnan(_1880) ? _1562 : (isnan(_1562) ? _1880 : min(_1562, _1880));
        float _2210 = isnan(_2207) ? _2209 : (isnan(_2209) ? _2207 : min(_2209, _2207));
        float _2214 = (_2210 * _1449) + _1438;
        float _2215 = (_2210 * _1452) + _1442;
        float _2216 = (_2210 * _1455) + _1446;
        float _2217 = _2210 * 9.9999997473787516355514526367188e-05;
        float _2218 = (-1.0) - _2217;
        float _2220 = _2217 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2216 > _2220) || ((_2216 < _2218) || ((_2215 > _2220) || ((_2215 < _2218) || ((_2214 < _2218) || (_2214 > _2220))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2334 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2216, cbModelParam._m0[17u].z, fma(_2215, cbModelParam._m0[17u].y, _2214 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2216, cbModelParam._m0[18u].z, fma(_2215, cbModelParam._m0[18u].y, _2214 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2216, cbModelParam._m0[19u].z, fma(_2215, cbModelParam._m0[19u].y, _2214 * cbModelParam._m0[19u].x))), _1382);
            frontier_phi_22_47_ladder = _2334.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2334.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2334.x * cbModelParam._m0[1u].z;
        }
        _1474 = frontier_phi_22_47_ladder_2;
        _1476 = frontier_phi_22_47_ladder_1;
        _1478 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1458 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_482, _483, _484), _1382);
        _1474 = _1458.x * cbModelParam._m0[1u].z;
        _1476 = _1458.y * cbModelParam._m0[1u].z;
        _1478 = _1458.z * cbModelParam._m0[1u].z;
    }
    float _1490 = ((((1.0 - _503) * ((_490 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_503 * _490)) * _474;
    float _1491 = _1490 * ((cbModelParam._m0[1u].w * (_1474 - _1373)) + _1373);
    float _1492 = _1490 * ((cbModelParam._m0[1u].w * (_1476 - _1375)) + _1375);
    float _1493 = _1490 * ((cbModelParam._m0[1u].w * (_1478 - _1377)) + _1377);
    float _1496 = fma(_1493, cbSceneParam._m0[89u].z, fma(_1492, cbSceneParam._m0[89u].y, _1491 * cbSceneParam._m0[89u].x));
    float _1499 = fma(_1493, cbSceneParam._m0[90u].z, fma(_1492, cbSceneParam._m0[90u].y, _1491 * cbSceneParam._m0[90u].x));
    float _1502 = fma(_1493, cbSceneParam._m0[91u].z, fma(_1492, cbSceneParam._m0[91u].y, _1491 * cbSceneParam._m0[91u].x));
    float _1536 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1540 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1544 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1548 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1549 = _1536 / _1548;
    float _1550 = _1540 / _1548;
    float _1551 = _1544 / _1548;
    float _1698;
    float _1699;
    float _1700;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1578 = ((uint(_1551 > cbSceneParam._m0[59u].y) + uint(_1551 > cbSceneParam._m0[59u].x)) + uint(_1551 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1579 = _1578 + 43u;
        uint _1587 = _1578 + 44u;
        uint _1595 = _1578 + 45u;
        uint _1603 = _1578 + 46u;
        float _1614 = fma(_1548, cbSceneParam._m0[_1579].w, fma(_1544, cbSceneParam._m0[_1579].z, fma(_1540, cbSceneParam._m0[_1579].y, _1536 * cbSceneParam._m0[_1579].x)));
        float _1618 = fma(_1548, cbSceneParam._m0[_1587].w, fma(_1544, cbSceneParam._m0[_1587].z, fma(_1540, cbSceneParam._m0[_1587].y, _1536 * cbSceneParam._m0[_1587].x)));
        float _1626 = fma(_1548, cbSceneParam._m0[_1603].w, fma(_1544, cbSceneParam._m0[_1603].z, fma(_1540, cbSceneParam._m0[_1603].y, _1536 * cbSceneParam._m0[_1603].x)));
        float _1631 = cbSceneParam._m0[33u].z * _1626;
        float _1633 = cbSceneParam._m0[33u].w * _1626;
        float _1636 = fma(_1548, cbSceneParam._m0[_1595].w, fma(_1544, cbSceneParam._m0[_1595].z, fma(_1540, cbSceneParam._m0[_1595].y, _1536 * cbSceneParam._m0[_1595].x))) / _1626;
        float _1684 = (cbSceneParam._m0[33u].x - sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551))) * cbSceneParam._m0[33u].y;
        float _3943 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1691 = (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1631 + _1614) / _1626, (_1633 + _1618) / _1626), _1636), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1633 + _1614) / _1626, (_1618 - _1631) / _1626), _1636), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1614 - _1631) / _1626, (_1618 - _1633) / _1626), _1636), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1614 - _1633) / _1626, (_1631 + _1618) / _1626), _1636), 0.0)).x), vec4(0.25)));
        _1698 = 1.0 - (_1691 * cbSceneParam._m0[34u].x);
        _1699 = 1.0 - (_1691 * cbSceneParam._m0[34u].y);
        _1700 = 1.0 - (_1691 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1698 = 1.0;
        _1699 = 1.0;
        _1700 = 1.0;
    }
    float _1764;
    float _1766;
    float _1768;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1752 = fma(_1548, cbSceneParam._m0[63u].w, fma(_1544, cbSceneParam._m0[63u].z, fma(_1540, cbSceneParam._m0[63u].y, _1536 * cbSceneParam._m0[63u].x)));
        float _1753 = fma(_1548, cbSceneParam._m0[60u].w, fma(_1544, cbSceneParam._m0[60u].z, fma(_1540, cbSceneParam._m0[60u].y, _1536 * cbSceneParam._m0[60u].x))) / _1752;
        float _1754 = fma(_1548, cbSceneParam._m0[61u].w, fma(_1544, cbSceneParam._m0[61u].z, fma(_1540, cbSceneParam._m0[61u].y, _1536 * cbSceneParam._m0[61u].x))) / _1752;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1753 >= cbSceneParam._m0[64u].x) && (_1754 >= cbSceneParam._m0[64u].y)) && (_1753 <= cbSceneParam._m0[64u].z)) && (_1754 <= cbSceneParam._m0[64u].w))
        {
            float _1893 = fma(_1548, cbSceneParam._m0[62u].w, fma(_1544, cbSceneParam._m0[62u].z, fma(_1540, cbSceneParam._m0[62u].y, _1536 * cbSceneParam._m0[62u].x))) / _1752;
            float _1897 = isnan(cbSceneParam._m0[41u].w) ? _1893 : (isnan(_1893) ? cbSceneParam._m0[41u].w : max(_1893, cbSceneParam._m0[41u].w));
            float _1940 = (cbSceneParam._m0[33u].x - sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551))) * cbSceneParam._m0[33u].y;
            float _3959 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
            float _1947 = (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1753, cbSceneParam._m0[33u].w + _1754), _1897), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1753, _1754 - cbSceneParam._m0[33u].z), _1897), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1753 - cbSceneParam._m0[33u].z, _1754 - cbSceneParam._m0[33u].w), _1897), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1753 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1754), _1897), 0.0)).x), vec4(0.25)));
            float _1951 = 1.0 - (_1947 * cbSceneParam._m0[34u].x);
            float _1952 = 1.0 - (_1947 * cbSceneParam._m0[34u].y);
            float _1953 = 1.0 - (_1947 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1953) ? _1700 : (isnan(_1700) ? _1953 : min(_1700, _1953));
            frontier_phi_34_33_ladder_1 = isnan(_1952) ? _1699 : (isnan(_1699) ? _1952 : min(_1699, _1952));
            frontier_phi_34_33_ladder_2 = isnan(_1951) ? _1698 : (isnan(_1698) ? _1951 : min(_1698, _1951));
        }
        else
        {
            frontier_phi_34_33_ladder = _1700;
            frontier_phi_34_33_ladder_1 = _1699;
            frontier_phi_34_33_ladder_2 = _1698;
        }
        _1764 = frontier_phi_34_33_ladder_2;
        _1766 = frontier_phi_34_33_ladder_1;
        _1768 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1764 = _1698;
        _1766 = _1699;
        _1768 = _1700;
    }
    uvec4 _1773 = floatBitsToUint(cbInstanceData._m0[_449 + 5u]);
    uint _1775 = _1773.x * 14u;
    uint _1776 = _1775 + 13u;
    float _1783 = _474 + (-1.0);
    float _1788 = (cbLight._m0[_1776].x * _1783) + 1.0;
    float _1789 = (cbLight._m0[_1776].y * _1783) + 1.0;
    float _1790 = (cbLight._m0[_1776].z * _1783) + 1.0;
    float _1791 = (cbLight._m0[_1776].w * _1783) + 1.0;
    uint _1792 = _1775 + 5u;
    float _1798 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
    uint _1802 = _1775 + 4u;
    float _1812 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
    uint _1816 = _1775 | 1u;
    float _1827 = dot(vec3(cbLight._m0[_1775].xyz), vec3(_320, _321, _322));
    float _1830 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_320, _321, _322));
    float _3995 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _4006 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1835 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * 0.3183098733425140380859375;
    float _1837 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * 0.3183098733425140380859375;
    float _1844 = ((cbLight._m0[_1792].x * _1798) * _1837) + (((cbLight._m0[_1802].x * _1764) * _1812) * _1835);
    float _1845 = ((_1798 * cbLight._m0[_1792].y) * _1837) + (((cbLight._m0[_1802].y * _1766) * _1812) * _1835);
    float _1846 = ((_1798 * cbLight._m0[_1792].z) * _1837) + (((cbLight._m0[_1802].z * _1768) * _1812) * _1835);
    uvec4 _1850 = floatBitsToUint(cbLight._m0[_1775 + 12u]);
    bool _1852 = _1850.x == 0u;
    float _1954;
    float _1956;
    float _1958;
    if (_1852)
    {
        _1954 = _1844;
        _1956 = _1845;
        _1958 = _1846;
    }
    else
    {
        uint _1962 = _1775 + 6u;
        float _1978 = (dot(vec3(cbLight._m0[_1775 + 2u].xyz), vec3(_320, _321, _322)) * 0.5) + 0.5;
        float _1979 = _1978 * _1978;
        float _4017 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
        float _1980 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1981 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
        _1954 = (((cbLight._m0[_1962].x * 0.3183098733425140380859375) * _1980) * _1981) + _1844;
        _1956 = (((cbLight._m0[_1962].y * 0.3183098733425140380859375) * _1980) * _1981) + _1845;
        _1958 = (((cbLight._m0[_1962].z * 0.3183098733425140380859375) * _1980) * _1981) + _1846;
    }
    bool _1961 = _1850.y == 0u;
    float _2016;
    float _2018;
    float _2020;
    if (_1961)
    {
        _2016 = _1954;
        _2018 = _1956;
        _2020 = _1958;
    }
    else
    {
        uint _2178 = _1775 + 7u;
        float _2194 = (dot(vec3(cbLight._m0[_1775 + 3u].xyz), vec3(_320, _321, _322)) * 0.5) + 0.5;
        float _2195 = _2194 * _2194;
        float _4033 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2196 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _2197 = isnan(1.0) ? _1791 : (isnan(_1791) ? 1.0 : min(_1791, 1.0));
        _2016 = (((cbLight._m0[_2178].x * 0.3183098733425140380859375) * _2196) * _2197) + _1954;
        _2018 = (((cbLight._m0[_2178].y * 0.3183098733425140380859375) * _2196) * _2197) + _1956;
        _2020 = (((cbLight._m0[_2178].z * 0.3183098733425140380859375) * _2196) * _2197) + _1958;
    }
    uint _2023 = _1775 + 8u;
    float _2036 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1775].w)) * _323) * 0.949999988079071044921875);
    float _2037 = _2036 * _2036;
    float _2038 = cbLight._m0[_1775].x + _400;
    float _2039 = cbLight._m0[_1775].y + _401;
    float _2040 = cbLight._m0[_1775].z + _402;
    float _2044 = inversesqrt(dot(vec3(_2038, _2039, _2040), vec3(_2038, _2039, _2040)));
    float _2045 = _2044 * _2038;
    float _2046 = _2044 * _2039;
    float _2047 = _2044 * _2040;
    float _2048 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1775].xyz));
    float _4049 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2051 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _4060 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _2052 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _2053 = dot(vec3(_320, _321, _322), vec3(_2045, _2046, _2047));
    float _4071 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2056 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _2057 = dot(vec3(cbLight._m0[_1775].xyz), vec3(_2045, _2046, _2047));
    float _4082 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2061 = _2037 * _2037;
    float _2065 = ((_2056 * _2056) * (_2061 + (-1.0))) + 1.0;
    float _2076 = (exp2(log2(1.0 - (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2077 = 1.0 - _2037;
    float _2088 = (0.5 / (((_2052 * ((_2051 * _2077) + _2037)) + 9.9999999392252902907785028219223e-09) + (((_2052 * _2077) + _2037) * _2051))) * _2051;
    float _4093 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2090 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_2061 / ((_2065 * _2065) * 3.141590118408203125));
    uint _2104 = _1775 + 9u;
    float _2115 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1816].w)) * _323) * 0.949999988079071044921875);
    float _2116 = _2115 * _2115;
    float _2117 = cbLight._m0[_1816].x + _400;
    float _2118 = cbLight._m0[_1816].y + _401;
    float _2119 = cbLight._m0[_1816].z + _402;
    float _2123 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
    float _2124 = _2123 * _2117;
    float _2125 = _2123 * _2118;
    float _2126 = _2123 * _2119;
    float _2127 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1816].xyz));
    float _4104 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2130 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _2131 = dot(vec3(_320, _321, _322), vec3(_2124, _2125, _2126));
    float _4115 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2134 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _2135 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_2124, _2125, _2126));
    float _4126 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2139 = _2116 * _2116;
    float _2143 = ((_2134 * _2134) * (_2139 + (-1.0))) + 1.0;
    float _2152 = (exp2(log2(1.0 - (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2153 = 1.0 - _2116;
    float _2163 = (0.5 / (((_2052 * ((_2130 * _2153) + _2116)) + 9.9999999392252902907785028219223e-09) + (((_2052 * _2153) + _2116) * _2130))) * _2130;
    float _4137 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2165 = (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_2139 / ((_2143 * _2143) * 3.141590118408203125));
    float _2175 = (((_2152 * cbLight._m0[_2104].x) * _2165) * _1798) + ((((cbLight._m0[_2023].x * _1764) * _2076) * _2090) * _1812);
    float _2176 = (((_2152 * cbLight._m0[_2104].y) * _2165) * _1798) + ((((cbLight._m0[_2023].y * _1766) * _2076) * _2090) * _1812);
    float _2177 = (((_2152 * cbLight._m0[_2104].z) * _2165) * _1798) + ((((cbLight._m0[_2023].z * _1768) * _2076) * _2090) * _1812);
    float _2233;
    float _2235;
    float _2237;
    if (_1852)
    {
        _2233 = _2175;
        _2235 = _2176;
        _2237 = _2177;
    }
    else
    {
        uint _2239 = _1775 + 2u;
        uint _2243 = _1775 + 10u;
        float _2257 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2239].w)) * _323) * 0.949999988079071044921875);
        float _2258 = _2257 * _2257;
        float _2259 = cbLight._m0[_2239].x + _400;
        float _2260 = cbLight._m0[_2239].y + _401;
        float _2261 = cbLight._m0[_2239].z + _402;
        float _2265 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
        float _2266 = _2265 * _2259;
        float _2267 = _2265 * _2260;
        float _2268 = _2265 * _2261;
        float _2269 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_2239].xyz));
        float _4148 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2272 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _2273 = dot(vec3(_320, _321, _322), vec3(_2266, _2267, _2268));
        float _4159 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2276 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _2277 = dot(vec3(cbLight._m0[_2239].xyz), vec3(_2266, _2267, _2268));
        float _4170 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2281 = _2258 * _2258;
        float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
        float _2294 = (exp2(log2(1.0 - (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2295 = 1.0 - _2258;
        float _2305 = (0.5 / (((_2052 * ((_2272 * _2295) + _2258)) + 9.9999999392252902907785028219223e-09) + (((_2052 * _2295) + _2258) * _2272))) * _2272;
        float _4181 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2307 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
        float _2308 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
        _2233 = (((_2294 * cbLight._m0[_2243].x) * _2307) * _2308) + _2175;
        _2235 = (((_2294 * cbLight._m0[_2243].y) * _2307) * _2308) + _2176;
        _2237 = (((_2294 * cbLight._m0[_2243].z) * _2307) * _2308) + _2177;
    }
    float _2339;
    float _2341;
    float _2343;
    if (_1961)
    {
        _2339 = _2233;
        _2341 = _2235;
        _2343 = _2237;
    }
    else
    {
        uint _2350 = _1775 + 3u;
        uint _2354 = _1775 + 11u;
        float _2368 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2350].w)) * _323) * 0.949999988079071044921875);
        float _2369 = _2368 * _2368;
        float _2370 = cbLight._m0[_2350].x + _400;
        float _2371 = cbLight._m0[_2350].y + _401;
        float _2372 = cbLight._m0[_2350].z + _402;
        float _2376 = inversesqrt(dot(vec3(_2370, _2371, _2372), vec3(_2370, _2371, _2372)));
        float _2377 = _2376 * _2370;
        float _2378 = _2376 * _2371;
        float _2379 = _2376 * _2372;
        float _2380 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_2350].xyz));
        float _4197 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2383 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _2384 = dot(vec3(_320, _321, _322), vec3(_2377, _2378, _2379));
        float _4208 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2387 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _2388 = dot(vec3(cbLight._m0[_2350].xyz), vec3(_2377, _2378, _2379));
        float _4219 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2392 = _2369 * _2369;
        float _2396 = ((_2387 * _2387) * (_2392 + (-1.0))) + 1.0;
        float _2405 = (exp2(log2(1.0 - (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2406 = 1.0 - _2369;
        float _2416 = (0.5 / (((_2052 * ((_2383 * _2406) + _2369)) + 9.9999999392252902907785028219223e-09) + (((_2052 * _2406) + _2369) * _2383))) * _2383;
        float _4230 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2418 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_2392 / ((_2396 * _2396) * 3.141590118408203125));
        float _2419 = isnan(1.0) ? _1791 : (isnan(_1791) ? 1.0 : min(_1791, 1.0));
        _2339 = (((_2405 * cbLight._m0[_2354].x) * _2418) * _2419) + _2233;
        _2341 = (((_2405 * cbLight._m0[_2354].y) * _2418) * _2419) + _2235;
        _2343 = (((_2405 * cbLight._m0[_2354].z) * _2418) * _2419) + _2237;
    }
    float _2485;
    float _2487;
    float _2489;
    float _2491;
    float _2493;
    float _2495;
    if (_1773.y == 0u)
    {
        uvec4 _2440 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2441 = _2440.x;
        uint _2452 = uint((float(_2440.y) * floor(float(uint(cbSceneParam._m0[85u].y * _409) / _2441))) + floor(float(uint(cbSceneParam._m0[85u].x * _408) / _2441)));
        float _2462 = (log2(_1551 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2463 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        uint _2466 = uint(isnan(14.0) ? _2463 : (isnan(_2463) ? 14.0 : min(_2463, 14.0)));
        uvec4 _2471 = texelFetch(g_lightClusterGridBuffer, int(((_2466 << 2u) + (_2452 << 6u)) >> 2u));
        uint _2472 = _2471.x;
        uint _2473 = _2440.z;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        float _2597;
        if (((((1u << ((_2473 >> 4u) & 15u)) + 4294967295u) & _2472) == 0u) || ((_2473 & 240u) == 0u))
        {
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
            _2593 = 0.0;
            _2595 = 0.0;
            _2597 = 0.0;
        }
        else
        {
            float _2588;
            float _2590;
            float _2592;
            float _2594;
            float _2596;
            float _2598;
            float _2741 = 0.0;
            float _2742 = 0.0;
            float _2743 = 0.0;
            float _2744 = 0.0;
            float _2745 = 0.0;
            float _2746 = 0.0;
            uint _2747 = 0u;
            uint _2756;
            bool _2757;
            for (;;)
            {
                _2756 = texelFetch(g_lightClassification, int((((_2466 << 5u) + (_2452 << 9u)) + (_2747 << 2u)) >> 2u)).x;
                _2757 = _2756 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2757)
                {
                    frontier_phi_66_pred = _2746;
                    frontier_phi_66_pred_1 = _2745;
                    frontier_phi_66_pred_2 = _2744;
                    frontier_phi_66_pred_3 = _2743;
                    frontier_phi_66_pred_4 = _2742;
                    frontier_phi_66_pred_5 = _2741;
                }
                else
                {
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    uint _2871;
                    _2865 = _2741;
                    _2866 = _2742;
                    _2867 = _2743;
                    _2868 = _2744;
                    _2869 = _2745;
                    _2870 = _2746;
                    _2871 = _2756;
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    for (;;)
                    {
                        uint _2875 = uint(findLSB(_2871)) + (_2747 << 5u);
                        uint _2872 = (_2871 + 4294967295u) & _2871;
                        uint _2877 = _2875 * 48u;
                        vec4 _2891 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2877)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 3u)).x));
                        uint _2897 = (_2875 * 48u) + 4u;
                        vec4 _2910 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2897)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 3u)).x));
                        uint _2916 = (_2875 * 48u) + 8u;
                        vec3 _2927 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2916)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 2u)).x));
                        float _2931 = _2891.x - _1549;
                        float _2932 = _2891.y - _1550;
                        float _2933 = _2891.z - _1551;
                        float _2934 = dot(vec3(_2931, _2932, _2933), vec3(_2931, _2932, _2933));
                        float _2937 = inversesqrt(_2934);
                        float _2938 = _2937 * _2931;
                        float _2939 = _2937 * _2932;
                        float _2940 = _2937 * _2933;
                        float _2941 = dot(vec3(_430, _433, _436), vec3(_2938, _2939, _2940));
                        float _2946 = 1.0 - (_2934 * _2891.w);
                        float _4256 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                        float _2947 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                        float _2948 = sqrt(_2934) * _2910.w;
                        float _2951 = 1.39999997615814208984375 / (_2948 + 1.39999997615814208984375);
                        float _2952 = _2951 * _2951;
                        float _2955 = ((1.0 - _2952) * _2941) + _2952;
                        float _2958 = _2948 * _2948;
                        float _2962 = ((isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0))) * _2947) / ((_2958 * 0.699999988079071044921875) + 1.0);
                        float _2966 = (-0.0) - _1549;
                        float _2967 = (-0.0) - _1550;
                        float _2968 = (-0.0) - _1551;
                        float _2972 = inversesqrt(dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968)));
                        float _2973 = _2972 * _2966;
                        float _2974 = _2972 * _2967;
                        float _2975 = _2972 * _2968;
                        float _2982 = exp2(log2(1.0 / ((_2958 * 3.5) + 5.0)) * 0.25);
                        float _2983 = 1.0 - _490;
                        float _2990 = sqrt(1.0 - ((1.0 - (_2983 * _2983)) * (1.0 - (_2982 * _2982))));
                        float _2991 = _2990 * _2990;
                        float _2992 = _2991 * _2991;
                        float _2993 = _2973 + _2938;
                        float _2994 = _2974 + _2939;
                        float _2995 = _2975 + _2940;
                        float _2999 = inversesqrt(dot(vec3(_2993, _2994, _2995), vec3(_2993, _2994, _2995)));
                        float _3003 = dot(vec3(_430, _433, _436), vec3(_2973, _2974, _2975));
                        float _4272 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                        float _3006 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                        float _3007 = dot(vec3(_430, _433, _436), vec3(_2999 * _2993, _2999 * _2994, _2999 * _2995));
                        float _4283 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3010 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                        float _3014 = ((_3010 * _3010) * (_2992 + (-1.0))) + 1.0;
                        float _3015 = _2951 * _2991;
                        float _3016 = _3015 * _3015;
                        float _3019 = ((1.0 - _3016) * _2941) + _3016;
                        float _4294 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                        float _3020 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                        float _3021 = 1.0 - _2991;
                        float _3031 = (0.5 / (((_3020 * ((_3006 * _3021) + _2991)) + 9.9999999392252902907785028219223e-09) + (((_3020 * _3021) + _2991) * _3006))) * _3020;
                        float _4305 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                        float _3042 = (((_2992 * 3.1415927410125732421875) * (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) / ((_3014 * _3014) * ((_2958 * 2.1991131305694580078125) + 3.141590118408203125))) * _2947;
                        _2800 = (_2962 * _2910.x) + _2868;
                        _2801 = (_2962 * _2910.y) + _2869;
                        _2802 = (_2962 * _2910.z) + _2870;
                        _2797 = (_3042 * _2927.x) + _2865;
                        _2798 = (_3042 * _2927.y) + _2866;
                        _2799 = (_3042 * _2927.z) + _2867;
                        if (_2872 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2865 = _2797;
                            _2866 = _2798;
                            _2867 = _2799;
                            _2868 = _2800;
                            _2869 = _2801;
                            _2870 = _2802;
                            _2871 = _2872;
                        }
                    }
                    frontier_phi_66_pred = _2802;
                    frontier_phi_66_pred_1 = _2801;
                    frontier_phi_66_pred_2 = _2800;
                    frontier_phi_66_pred_3 = _2799;
                    frontier_phi_66_pred_4 = _2798;
                    frontier_phi_66_pred_5 = _2797;
                }
                _2598 = frontier_phi_66_pred;
                _2596 = frontier_phi_66_pred_1;
                _2594 = frontier_phi_66_pred_2;
                _2592 = frontier_phi_66_pred_3;
                _2590 = frontier_phi_66_pred_4;
                _2588 = frontier_phi_66_pred_5;
                uint _2748 = _2747 + 1u;
                if (_2748 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2741 = _2588;
                    _2742 = _2590;
                    _2743 = _2592;
                    _2744 = _2594;
                    _2745 = _2596;
                    _2746 = _2598;
                    _2747 = _2748;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
            _2593 = _2594;
            _2595 = _2596;
            _2597 = _2598;
        }
        uvec4 _2601 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2602 = _2601.z;
        uint _2604 = (_2602 >> 8u) & 15u;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        if (((4294967295u << _2604) & _2472) == 0u)
        {
            _2709 = _2587;
            _2711 = _2589;
            _2713 = _2591;
            _2715 = _2593;
            _2717 = _2595;
            _2719 = _2597;
        }
        else
        {
            float _2734 = inversesqrt(dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551)));
            float _2735 = _2734 * _1549;
            float _2736 = _2734 * _1550;
            float _2737 = _2734 * _1551;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2604 < ((_2602 >> 12u) & 15u))
            {
                float _2710;
                float _2712;
                float _2714;
                float _2716;
                float _2718;
                float _2720;
                float _2848 = _2587;
                float _2849 = _2589;
                float _2850 = _2591;
                float _2851 = _2593;
                float _2852 = _2595;
                float _2853 = _2597;
                uint _2854 = _2604;
                uint _2863;
                bool _2864;
                for (;;)
                {
                    _2863 = texelFetch(g_lightClassification, int((((_2466 << 5u) + (_2452 << 9u)) + (_2854 << 2u)) >> 2u)).x;
                    _2864 = _2863 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2864)
                    {
                        frontier_phi_72_pred = _2853;
                        frontier_phi_72_pred_1 = _2852;
                        frontier_phi_72_pred_2 = _2851;
                        frontier_phi_72_pred_3 = _2850;
                        frontier_phi_72_pred_4 = _2849;
                        frontier_phi_72_pred_5 = _2848;
                    }
                    else
                    {
                        float _3047;
                        float _3048;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3060 = _2848;
                        float _3061 = _2849;
                        float _3062 = _2850;
                        float _3063 = _2851;
                        float _3064 = _2852;
                        float _3065 = _2853;
                        uint _3066 = _2863;
                        uint _3067;
                        vec4 _3092;
                        float _3093;
                        vec4 _3108;
                        vec3 _3120;
                        vec4 _3136;
                        vec4 _3152;
                        float _3199;
                        bool _3200;
                        for (;;)
                        {
                            uint _3077 = ((_2854 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3066));
                            _3067 = (_3066 + 4294967295u) & _3066;
                            uint _3079 = _3077 * 40u;
                            _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            _3093 = _3092.w;
                            uint _3095 = (_3077 * 40u) + 4u;
                            _3108 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3095)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 3u)).x));
                            uint _3110 = (_3077 * 40u) + 8u;
                            _3120 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x));
                            uint _3123 = (_3077 * 40u) + 16u;
                            _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            uint _3139 = (_3077 * 40u) + 20u;
                            _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3155 = (_3077 * 40u) + 24u;
                            vec4 _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            uint _3174 = (_3077 * 40u) + 28u;
                            vec4 _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            _3199 = fma(_1551, _3187.z, fma(_1550, _3187.y, _3187.x * _1549)) + _3187.w;
                            _3200 = !((fma(_1551, _3168.z, fma(_1550, _3168.y, _3168.x * _1549)) + _3168.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3200)
                            {
                                float _3227 = _3092.x - _1549;
                                float _3228 = _3092.y - _1550;
                                float _3229 = _3092.z - _1551;
                                float _3230 = dot(vec3(_3227, _3228, _3229), vec3(_3227, _3228, _3229));
                                float _3233 = inversesqrt(_3230);
                                float _3234 = _3233 * _3227;
                                float _3235 = _3233 * _3228;
                                float _3236 = _3233 * _3229;
                                float _3240 = 1.0 - (_3230 / (_3093 * _3093));
                                float _4316 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3241 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                                float _3245 = sqrt(_3230) * _3108.w;
                                float _3247 = 1.39999997615814208984375 / (_3245 + 1.39999997615814208984375);
                                float _3248 = _3247 * _3247;
                                float _3251 = ((1.0 - _3248) * dot(vec3(_3234, _3235, _3236), vec3(_430, _433, _436))) + _3248;
                                float _3254 = _3245 * _3245;
                                float _3258 = (fma(_1551, _3136.z, fma(_1550, _3136.y, _3136.x * _1549)) + _3136.w) / _3199;
                                float _3259 = (fma(_1551, _3152.z, fma(_1550, _3152.y, _3152.x * _1549)) + _3152.w) / _3199;
                                float _3263 = 1.0 - dot(vec2(_3258, _3259), vec2(_3258, _3259));
                                float _4332 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3264 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                                float _3265 = _3264 * (((isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0))) * _3241) / ((_3254 * 0.699999988079071044921875) + 1.0));
                                float _3277 = exp2(log2(1.0 / ((_3254 * 3.5) + 5.0)) * 0.25);
                                float _3278 = 1.0 - _490;
                                float _3285 = sqrt(1.0 - ((1.0 - (_3278 * _3278)) * (1.0 - (_3277 * _3277))));
                                float _3286 = _3285 * _3285;
                                float _3287 = _3286 * _3286;
                                float _3288 = _3234 - _2735;
                                float _3289 = _3235 - _2736;
                                float _3290 = _3236 - _2737;
                                float _3294 = inversesqrt(dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290)));
                                float _3298 = dot(vec3(_430, _433, _436), vec3((-0.0) - _2735, (-0.0) - _2736, (-0.0) - _2737));
                                float _4343 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3301 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                                float _3302 = dot(vec3(_430, _433, _436), vec3(_3294 * _3288, _3294 * _3289, _3294 * _3290));
                                float _4354 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3305 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                                float _3309 = ((_3305 * _3305) * (_3287 + (-1.0))) + 1.0;
                                float _3310 = _3247 * _3286;
                                float _3311 = _3310 * _3310;
                                float _3317 = ((1.0 - _3311) * dot(vec3(_430, _433, _436), vec3(_3234, _3235, _3236))) + _3311;
                                float _4365 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3318 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                                float _3319 = 1.0 - _3286;
                                float _3329 = (0.5 / (((_3318 * ((_3301 * _3319) + _3286)) + 9.9999999392252902907785028219223e-09) + (((_3318 * _3319) + _3286) * _3301))) * _3318;
                                float _4376 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3339 = (_3264 * _3241) * (((_3287 * 3.1415927410125732421875) * (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0)))) / ((_3309 * _3309) * ((_3254 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3265 * _3108.y;
                                frontier_phi_78_pred_1 = _3265 * _3108.x;
                                frontier_phi_78_pred_2 = _3339 * _3120.z;
                                frontier_phi_78_pred_3 = _3339 * _3120.y;
                                frontier_phi_78_pred_4 = _3339 * _3120.x;
                                frontier_phi_78_pred_5 = _3265 * _3108.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3347 = frontier_phi_78_pred;
                            _3346 = frontier_phi_78_pred_1;
                            _3345 = frontier_phi_78_pred_2;
                            _3344 = frontier_phi_78_pred_3;
                            _3343 = frontier_phi_78_pred_4;
                            _3348 = frontier_phi_78_pred_5;
                            _3050 = _3346 + _3063;
                            _3051 = _3347 + _3064;
                            _3052 = _3348 + _3065;
                            _3047 = _3343 + _3060;
                            _3048 = _3344 + _3061;
                            _3049 = _3345 + _3062;
                            if (_3067 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3060 = _3047;
                                _3061 = _3048;
                                _3062 = _3049;
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3067;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3052;
                        frontier_phi_72_pred_1 = _3051;
                        frontier_phi_72_pred_2 = _3050;
                        frontier_phi_72_pred_3 = _3049;
                        frontier_phi_72_pred_4 = _3048;
                        frontier_phi_72_pred_5 = _3047;
                    }
                    _2720 = frontier_phi_72_pred;
                    _2718 = frontier_phi_72_pred_1;
                    _2716 = frontier_phi_72_pred_2;
                    _2714 = frontier_phi_72_pred_3;
                    _2712 = frontier_phi_72_pred_4;
                    _2710 = frontier_phi_72_pred_5;
                    uint _2855 = _2854 + 1u;
                    if (_2855 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2848 = _2710;
                        _2849 = _2712;
                        _2850 = _2714;
                        _2851 = _2716;
                        _2852 = _2718;
                        _2853 = _2720;
                        _2854 = _2855;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2720;
                frontier_phi_60_61_ladder_1 = _2718;
                frontier_phi_60_61_ladder_2 = _2714;
                frontier_phi_60_61_ladder_3 = _2712;
                frontier_phi_60_61_ladder_4 = _2710;
                frontier_phi_60_61_ladder_5 = _2716;
            }
            else
            {
                frontier_phi_60_61_ladder = _2597;
                frontier_phi_60_61_ladder_1 = _2595;
                frontier_phi_60_61_ladder_2 = _2591;
                frontier_phi_60_61_ladder_3 = _2589;
                frontier_phi_60_61_ladder_4 = _2587;
                frontier_phi_60_61_ladder_5 = _2593;
            }
            _2709 = frontier_phi_60_61_ladder_4;
            _2711 = frontier_phi_60_61_ladder_3;
            _2713 = frontier_phi_60_61_ladder_2;
            _2715 = frontier_phi_60_61_ladder_5;
            _2717 = frontier_phi_60_61_ladder_1;
            _2719 = frontier_phi_60_61_ladder;
        }
        float _2724 = isnan(1.0) ? _474 : (isnan(_474) ? 1.0 : min(_474, 1.0));
        _2485 = (_2724 * _2715) + _2016;
        _2487 = (_2724 * _2717) + _2018;
        _2489 = (_2724 * _2719) + _2020;
        _2491 = ((_2709 * 0.039999999105930328369140625) * _2724) + _2339;
        _2493 = ((_2711 * 0.039999999105930328369140625) * _2724) + _2341;
        _2495 = ((_2713 * 0.039999999105930328369140625) * _2724) + _2343;
    }
    else
    {
        _2485 = _2016;
        _2487 = _2018;
        _2489 = _2020;
        _2491 = _2339;
        _2493 = _2341;
        _2495 = _2343;
    }
    uint _2501 = _450 + uint(cbMatDynParam._m0[0u].w);
    float _2509 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _302.x) * cbInstanceData._m0[_2501].x;
    float _2512 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _302.y) * cbInstanceData._m0[_2501].y;
    float _2515 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _302.z) * cbInstanceData._m0[_2501].z;
    float _4392 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _4403 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _4414 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _2532 = (((isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2485 + ((isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0))) * _474))) + ((_2491 + ((isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))) * _1281)) * cbPerFrame._m0[3u].x)) + _2509;
    float _2534 = (_2512 + ((_2493 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _1281)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_2487 + ((isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0))) * _474)));
    float _2536 = (_2515 + ((_2495 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _1281)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_2489 + ((isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))) * _474)));
    float _4440 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2549 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    uint _2550 = _449 + 6u;
    float _2558 = _408 / cbSceneParam._m0[86u].x;
    float _2559 = _409 / cbSceneParam._m0[86u].y;
    vec4 _2573 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2558, _2559, (log2((isnan(cbSceneParam._m0[77u].w) ? _342 : (isnan(_342) ? cbSceneParam._m0[77u].w : min(_342, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2575 = _2573.x;
    float _2576 = _2573.y;
    float _2577 = _2573.z;
    float _2578 = _2573.w;
    float _2650;
    float _2652;
    float _2654;
    float _2656;
    if (_342 > cbSceneParam._m0[78u].w)
    {
        float _2612 = isnan(_342) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _342 : min(cbSceneParam._m0[80u].w, _342));
        float _2613 = _2612 / _342;
        float _2624 = _2613 * _393;
        float _2625 = _394 * _2613;
        float _2626 = (-0.0) - _2625;
        float _2628 = _2613 * _395;
        float _2630 = (cbSceneParam._m0[77u].w * _2626) / _2612;
        float _2631 = _2630 + cbSceneParam._m0[79u].w;
        float _2632 = cbSceneParam._m0[79u].w - _2625;
        float _2638 = sqrt(((_2624 * _2624) + (_2625 * _2625)) + (_2628 * _2628));
        float _2641 = (1.0 - (cbSceneParam._m0[77u].w / _2612)) * _2638;
        float _2646 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2648 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2810;
        if (abs((_2626 - _2630) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2810 = ((((_2631 > 0.0) ? exp2(_2646 * _2631) : (2.0 - exp2(_2648 * _2631))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2641;
        }
        else
        {
            float _2770 = 1.0 / cbSceneParam._m0[80u].x;
            float _2771 = isnan(_2632) ? _2631 : (isnan(_2631) ? _2632 : max(_2631, _2632));
            float _2772 = isnan(_2632) ? _2631 : (isnan(_2631) ? _2632 : min(_2631, _2632));
            float _2781 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : min(_2771, 0.0));
            float _2782 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : min(_2772, 0.0));
            _2810 = ((abs(_2638 / _2626) * cbSceneParam._m0[80u].y) * ((((_2781 - _2782) * 2.0) - ((exp2(_2646 * (isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0)))) - exp2(_2646 * (isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0))))) * _2770)) - ((exp2(_2648 * _2781) - exp2(_2648 * _2782)) * _2770))) + (_2641 * cbSceneParam._m0[80u].z);
        }
        vec4 _2812 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2558, _2559, 1.0), 0.0);
        float _2821 = exp2((_2810 * (-1.44269502162933349609375)) * (1.0 - _2812.w));
        float _2822 = log2(_2821);
        float _2838 = log2(_2578);
        _2650 = (exp2(_2838 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2822 * cbSceneParam._m0[78u].x)) * _2812.x) / cbSceneParam._m0[78u].x)) + _2575;
        _2652 = (exp2(_2838 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2822 * cbSceneParam._m0[78u].y)) * _2812.y) / cbSceneParam._m0[78u].y)) + _2576;
        _2654 = (exp2(_2838 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2822 * cbSceneParam._m0[78u].z)) * _2812.z) / cbSceneParam._m0[78u].z)) + _2577;
        _2656 = _2821 * _2578;
    }
    else
    {
        _2650 = _2575;
        _2652 = _2576;
        _2654 = _2577;
        _2656 = _2578;
    }
    float _2668 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2669 = _2668 == 3.0;
    float _2670 = log2(_2656);
    float _2674 = exp2(_2670 * cbSceneParam._m0[78u].x);
    float _2675 = exp2(_2670 * cbSceneParam._m0[78u].y);
    float _2676 = exp2(_2670 * cbSceneParam._m0[78u].z);
    float _2677 = _2674 * (isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0)));
    float _2678 = _2675 * (isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0)));
    float _2679 = _2676 * (isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0)));
    float _2688 = (_2668 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2688 * (_2669 ? _2677 : (_2677 + (cbSceneParam._m0[72u].w * _2650)));
    SV_Target.y = _2688 * (_2669 ? _2678 : (_2678 + (cbSceneParam._m0[72u].w * _2652)));
    SV_Target.z = _2688 * (_2669 ? _2679 : (_2679 + (cbSceneParam._m0[72u].w * _2654)));
    SV_Target.w = cbInstanceData._m0[_2550].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2509) * _2549) * _2674) * _2688;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2512) * _2549) * _2675) * _2688;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2515) * _2549) * _2676) * _2688;
    SV_Target_1.w = cbInstanceData._m0[_2550].w;
}


