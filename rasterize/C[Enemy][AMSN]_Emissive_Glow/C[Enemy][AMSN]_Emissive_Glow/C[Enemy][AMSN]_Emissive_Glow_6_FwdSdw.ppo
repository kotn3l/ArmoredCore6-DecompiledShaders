#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _896;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _230 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _236 = _230.x * cbMtdParam._m0[9u].x;
    float _237 = _230.y * cbMtdParam._m0[9u].y;
    float _238 = _230.z * cbMtdParam._m0[9u].z;
    vec4 _250 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _252 = _250.x;
    vec4 _264 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _268 = _264.z;
    float _272 = (_264.x * 2.0) + (-1.0);
    float _274 = (_264.y * 2.0) + (-1.0);
    float _275 = dot(vec2(_272, _274), vec2(_272, _274));
    float _3560 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _281 = sqrt(1.0 - (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))));
    vec4 _318 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _329 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3571 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _330 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    float _338 = (((_330 * _330) * (3.0 - (_330 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _341 = fma(_281, _201 * NORMAL.x, fma(_274, _208 * TANGENT.x, (_194 * _187) * _272));
    float _344 = fma(_281, _201 * NORMAL.y, fma(_274, _208 * TANGENT.y, (_194 * _188) * _272));
    float _347 = fma(_281, _201 * NORMAL.z, fma(_274, _208 * TANGENT.z, (_194 * _189) * _272));
    float _351 = inversesqrt(dot(vec3(_341, _344, _347), vec3(_341, _344, _347)));
    float _352 = _351 * _341;
    float _353 = _351 * _344;
    float _354 = _351 * _347;
    float _3582 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _355 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
    float _3593 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3604 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3615 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3626 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _359 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _375 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _416 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _426 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _416);
    float _427 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _416);
    float _428 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _416);
    float _432 = inversesqrt(dot(vec3(_426, _427, _428), vec3(_426, _427, _428)));
    float _433 = _426 * _432;
    float _434 = _427 * _432;
    float _435 = _428 * _432;
    float _441 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _442 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _463 = fma(_354, cbSceneParam._m0[5u].z, fma(_353, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _352));
    float _466 = fma(_354, cbSceneParam._m0[6u].z, fma(_353, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _352));
    float _469 = fma(_354, cbSceneParam._m0[7u].z, fma(_353, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _352));
    uint _482 = uint(roundEven(NORMAL.w)) * 13u;
    uint _483 = _482 + 9u;
    uint _484 = _483 + uint(cbMatDynParam._m0[0u].w);
    float _490 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0)))) * cbInstanceData._m0[_484].x;
    float _491 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0)))) * cbInstanceData._m0[_484].y;
    float _492 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))) * cbInstanceData._m0[_484].z;
    float _3637 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _493 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    float _3648 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _494 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _3659 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _495 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _496 = 1.0 - _359;
    float _497 = _493 * _496;
    float _498 = _494 * _496;
    float _499 = _495 * _496;
    float _504 = (_493 + (-0.039999999105930328369140625)) * _359;
    float _505 = (_494 + (-0.039999999105930328369140625)) * _359;
    float _506 = (_495 + (-0.039999999105930328369140625)) * _359;
    float _507 = _504 + 0.039999999105930328369140625;
    float _509 = _505 + 0.039999999105930328369140625;
    float _510 = _506 + 0.039999999105930328369140625;
    vec4 _519 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _441, cbSceneParam._m0[86u].y * _442));
    float _522 = _519.x * TEXCOORD.z;
    float _523 = dot(vec3(_352, _353, _354), vec3(_433, _434, _435));
    float _526 = _523 * 2.0;
    float _530 = (_526 * _352) - _433;
    float _531 = (_526 * _353) - _434;
    float _532 = (_526 * _354) - _435;
    float _536 = abs(dot(vec3(_433, _434, _435), vec3(_352, _353, _354)));
    float _3670 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _538 = sqrt(_355);
    float _550 = exp2((_538 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_538 * 3.0));
    float _556 = (1.0 - _550) * ((_538 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _557 = _550 * _538;
    float _585 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _589 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _593 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _895;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _620 = fma(_593, cbModelParam._m0[26u].z, fma(_589, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _585));
        float _624 = fma(_593, cbModelParam._m0[27u].z, fma(_589, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _585));
        float _628 = fma(_593, cbModelParam._m0[28u].z, fma(_589, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _585));
        float _653 = _585 + _352;
        float _654 = _589 + _353;
        float _655 = _593 + _354;
        float _665 = fma(_655, cbModelParam._m0[26u].z, fma(_654, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _653)) - _620;
        float _666 = fma(_655, cbModelParam._m0[27u].z, fma(_654, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _653)) - _624;
        float _667 = fma(_655, cbModelParam._m0[28u].z, fma(_654, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _653)) - _628;
        float _671 = inversesqrt(dot(vec3(_665, _666, _667), vec3(_665, _666, _667)));
        float _684 = ((_671 * _665) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_620 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _685 = ((_671 * _666) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_624 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _686 = ((_671 * _667) / cbModelParam._m0[34u].z) + ((((((_628 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _689 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        vec4 _696 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        vec4 _703 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        vec4 _710 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        float _723 = exp2((_689.w + (-0.5)) * 20.0) * 2.0;
        float _724 = _723 * (_689.x + (-0.5));
        float _725 = _723 * (_689.y + (-0.5));
        float _726 = _723 * (_689.z + (-0.5));
        float _733 = exp2((_696.w + (-0.5)) * 20.0) * 2.0;
        float _734 = _733 * (_696.x + (-0.5));
        float _735 = _733 * (_696.y + (-0.5));
        float _736 = _733 * (_696.z + (-0.5));
        float _743 = exp2((_703.w + (-0.5)) * 20.0) * 2.0;
        float _744 = _743 * (_703.x + (-0.5));
        float _745 = _743 * (_703.y + (-0.5));
        float _746 = _743 * (_703.z + (-0.5));
        float _753 = exp2((_710.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _753 * (_710.x + (-0.5));
        float _755 = _753 * (_710.y + (-0.5));
        float _756 = _753 * (_710.z + (-0.5));
        float _757 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _758 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _759 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _760 = _724 * 0.5;
        float _761 = _734 * 0.5;
        float _762 = _744 * 0.5;
        float _763 = dot(vec3(_760, _761, _762), vec3(_760, _761, _762));
        float _768 = (_763 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_763);
        float _777 = (dot(vec3(_352, _353, _354), vec3(_768 * _760, _768 * _761, _768 * _762)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _787 = sqrt(((_761 * _761) + (_760 * _760)) + (_762 * _762)) / (_757 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _789 = _788 * 2.0;
        float _793 = (1.0 - _788) / (_788 + 1.0);
        float _3718 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _803 = ((((1.0 - _794) * (_789 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_789 + 1.0))) + _794) * _757;
        float _804 = _725 * 0.5;
        float _805 = _735 * 0.5;
        float _806 = _745 * 0.5;
        float _807 = dot(vec3(_804, _805, _806), vec3(_804, _805, _806));
        float _812 = (_807 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_807);
        float _820 = (dot(vec3(_352, _353, _354), vec3(_812 * _804, _812 * _805, _812 * _806)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _829 = sqrt(((_805 * _805) + (_804 * _804)) + (_806 * _806)) / (_758 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _831 = _830 * 2.0;
        float _835 = (1.0 - _830) / (_830 + 1.0);
        float _3751 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _845 = ((((1.0 - _836) * (_831 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_831 + 1.0))) + _836) * _758;
        float _846 = _726 * 0.5;
        float _847 = _736 * 0.5;
        float _848 = _746 * 0.5;
        float _849 = dot(vec3(_846, _847, _848), vec3(_846, _847, _848));
        float _854 = (_849 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_849);
        float _862 = (dot(vec3(_352, _353, _354), vec3(_854 * _846, _854 * _847, _854 * _848)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _871 = sqrt(((_847 * _847) + (_846 * _846)) + (_848 * _848)) / (_759 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _873 = _872 * 2.0;
        float _877 = (1.0 - _872) / (_872 + 1.0);
        float _3784 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _887 = ((((1.0 - _878) * (_873 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_873 + 1.0))) + _878) * _759;
        _895 = _726;
        _897 = _725;
        _898 = _724;
        _899 = _736;
        _900 = _735;
        _901 = _734;
        _902 = _746;
        _903 = _745;
        _904 = _744;
        _905 = _759;
        _906 = _758;
        _907 = _757;
        _908 = cbModelParam._m0[36u].z * (isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0)));
        _909 = cbModelParam._m0[36u].z * (isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0)));
        _910 = cbModelParam._m0[36u].z * (isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0)));
    }
    else
    {
        _895 = _896;
        _897 = _896;
        _898 = _896;
        _899 = _896;
        _900 = _896;
        _901 = _896;
        _902 = _896;
        _903 = _896;
        _904 = _896;
        _905 = _896;
        _906 = _896;
        _907 = _896;
        _908 = 0.0;
        _909 = 0.0;
        _910 = 0.0;
    }
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _936 = fma(_593, cbModelParam._m0[30u].z, fma(_589, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _585));
        float _940 = fma(_593, cbModelParam._m0[31u].z, fma(_589, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _585));
        float _944 = fma(_593, cbModelParam._m0[32u].z, fma(_589, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _585));
        float _967 = _585 + _352;
        float _968 = _589 + _353;
        float _969 = _593 + _354;
        float _979 = fma(_969, cbModelParam._m0[30u].z, fma(_968, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _967)) - _936;
        float _980 = fma(_969, cbModelParam._m0[31u].z, fma(_968, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _967)) - _940;
        float _981 = fma(_969, cbModelParam._m0[32u].z, fma(_968, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _967)) - _944;
        float _985 = inversesqrt(dot(vec3(_979, _980, _981), vec3(_979, _980, _981)));
        float _998 = ((_985 * _979) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_936 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _999 = ((_985 * _980) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_940 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1000 = ((_985 * _981) / cbModelParam._m0[35u].z) + ((((((_944 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        float _1035 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_1002.x + (-0.5));
        float _1037 = _1035 * (_1002.y + (-0.5));
        float _1038 = _1035 * (_1002.z + (-0.5));
        float _1045 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1009.x + (-0.5));
        float _1047 = _1045 * (_1009.y + (-0.5));
        float _1048 = _1045 * (_1009.z + (-0.5));
        float _1055 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1016.x + (-0.5));
        float _1057 = _1055 * (_1016.y + (-0.5));
        float _1058 = _1055 * (_1016.z + (-0.5));
        float _1065 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1023.x + (-0.5));
        float _1067 = _1065 * (_1023.y + (-0.5));
        float _1068 = _1065 * (_1023.z + (-0.5));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = _1036 * 0.5;
        float _1073 = _1046 * 0.5;
        float _1074 = _1056 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1088 = (dot(vec3(_352, _353, _354), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3825 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1097 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3836 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3847 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_1099 + 1.0))) + _1104) * _1069;
        float _1114 = _1037 * 0.5;
        float _1115 = _1047 * 0.5;
        float _1116 = _1057 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_352, _353, _354), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3880 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1141 + 1.0))) + _1146) * _1070;
        float _1156 = _1038 * 0.5;
        float _1157 = _1048 * 0.5;
        float _1158 = _1058 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_352, _353, _354), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3913 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1183 + 1.0))) + _1188) * _1071;
        _1205 = _1038;
        _1206 = _1037;
        _1207 = _1036;
        _1208 = _1048;
        _1209 = _1047;
        _1210 = _1046;
        _1211 = _1058;
        _1212 = _1057;
        _1213 = _1056;
        _1214 = _1071;
        _1215 = _1070;
        _1216 = _1069;
        _1217 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
        _1218 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
        _1219 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
    }
    else
    {
        _1205 = _896;
        _1206 = _896;
        _1207 = _896;
        _1208 = _896;
        _1209 = _896;
        _1210 = _896;
        _1211 = _896;
        _1212 = _896;
        _1213 = _896;
        _1214 = _896;
        _1215 = _896;
        _1216 = _896;
        _1217 = 0.0;
        _1218 = 0.0;
        _1219 = 0.0;
    }
    float _1229 = (cbModelParam._m0[1u].x * (_1217 - _908)) + _908;
    float _1230 = (cbModelParam._m0[1u].x * (_1218 - _909)) + _909;
    float _1231 = (cbModelParam._m0[1u].x * (_1219 - _910)) + _910;
    float _1252 = fma(_1231, cbSceneParam._m0[89u].z, fma(_1230, cbSceneParam._m0[89u].y, _1229 * cbSceneParam._m0[89u].x));
    float _1255 = fma(_1231, cbSceneParam._m0[90u].z, fma(_1230, cbSceneParam._m0[90u].y, _1229 * cbSceneParam._m0[90u].x));
    float _1258 = fma(_1231, cbSceneParam._m0[91u].z, fma(_1230, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1229));
    float _1273 = _530 * 0.5;
    float _1274 = _531 * 0.5;
    float _1275 = _532 * 0.5;
    float _1276 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_1207, _1210, _1213, _1216));
    float _1279 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_1206, _1209, _1212, _1215));
    float _1282 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_1205, _1208, _1211, _1214));
    float _1316;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1289 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_895, _899, _902, _905));
        float _1293 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_897, _900, _903, _906));
        float _1297 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_898, _901, _904, _907));
        float _1304 = dot(vec4(cbModelParam._m0[39u]), vec4(_1273, _1274, _1275, 1.0));
        _1316 = dot(vec3(isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1304) ? 0.0 : (isnan(0.0) ? _1304 : max(0.0, _1304))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1316 = 1.0;
    }
    float _1327;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1318 = dot(vec4(cbModelParam._m0[40u]), vec4(_1273, _1274, _1275, 1.0));
        _1327 = dot(vec3(isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)), isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)), isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1318) ? 0.0 : (isnan(0.0) ? _1318 : max(0.0, _1318))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1327 = 1.0;
    }
    float _1331 = (_1327 * cbModelParam._m0[1u].x) + (_1316 * (1.0 - cbModelParam._m0[1u].x));
    float _1341 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _355);
    float _1342 = isnan(_1341) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1341 : min(cbModelParam._m0[25u].z, _1341));
    float _1423;
    float _1425;
    float _1427;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1390 = fma(_593, cbModelParam._m0[13u].z, fma(_589, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _585)) + cbModelParam._m0[13u].w;
        float _1394 = fma(_593, cbModelParam._m0[14u].z, fma(_589, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _585)) + cbModelParam._m0[14u].w;
        float _1398 = fma(_593, cbModelParam._m0[15u].z, fma(_589, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _585)) + cbModelParam._m0[15u].w;
        float _1401 = fma(_532, cbModelParam._m0[13u].z, fma(_531, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _530));
        float _1404 = fma(_532, cbModelParam._m0[14u].z, fma(_531, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _530));
        float _1407 = fma(_532, cbModelParam._m0[15u].z, fma(_531, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _530));
        float _1435;
        if (_1401 > 0.0)
        {
            _1435 = abs((1.0 - _1390) / _1401);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1401 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1390 + 1.0) / _1401);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1435 = frontier_phi_14_12_ladder;
        }
        float _1609;
        if (_1404 > 0.0)
        {
            _1609 = abs((1.0 - _1394) / _1404);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1394 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1609 = frontier_phi_23_19_ladder;
        }
        float _1905;
        if (_1407 > 0.0)
        {
            _1905 = abs((1.0 - _1398) / _1407);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1407 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1398 + 1.0) / _1407);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1905 = frontier_phi_35_30_ladder;
        }
        float _1907 = isnan(_1609) ? _1435 : (isnan(_1435) ? _1609 : min(_1435, _1609));
        float _1908 = isnan(_1905) ? _1907 : (isnan(_1907) ? _1905 : min(_1907, _1905));
        float _1912 = (_1908 * _1401) + _1390;
        float _1913 = (_1908 * _1404) + _1394;
        float _1914 = (_1908 * _1407) + _1398;
        float _1915 = _1908 * 9.9999997473787516355514526367188e-05;
        float _1917 = (-1.0) - _1915;
        float _1919 = _1915 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1914 > _1919) || ((_1914 < _1917) || ((_1913 > _1919) || ((_1913 < _1917) || ((_1912 < _1917) || (_1912 > _1919))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2059 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1914, cbModelParam._m0[9u].z, fma(_1913, cbModelParam._m0[9u].y, _1912 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1914, cbModelParam._m0[10u].z, fma(_1913, cbModelParam._m0[10u].y, _1912 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1914, cbModelParam._m0[11u].z, fma(_1913, cbModelParam._m0[11u].y, _1912 * cbModelParam._m0[11u].x))), _1342);
            frontier_phi_13_35_ladder = _2059.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2059.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2059.x * cbModelParam._m0[1u].y;
        }
        _1423 = frontier_phi_13_35_ladder_2;
        _1425 = frontier_phi_13_35_ladder_1;
        _1427 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1411 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_530, _531, _532), _1342);
        _1423 = _1411.x * cbModelParam._m0[1u].y;
        _1425 = _1411.y * cbModelParam._m0[1u].y;
        _1427 = _1411.z * cbModelParam._m0[1u].y;
    }
    float _1431 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _355);
    float _1432 = isnan(_1431) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1431 : min(cbModelParam._m0[25u].w, _1431));
    float _1524;
    float _1526;
    float _1528;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1488 = fma(_593, cbModelParam._m0[21u].z, fma(_589, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _585)) + cbModelParam._m0[21u].w;
        float _1492 = fma(_593, cbModelParam._m0[22u].z, fma(_589, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _585)) + cbModelParam._m0[22u].w;
        float _1496 = fma(_593, cbModelParam._m0[23u].z, fma(_589, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _585)) + cbModelParam._m0[23u].w;
        float _1499 = fma(_532, cbModelParam._m0[21u].z, fma(_531, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _530));
        float _1502 = fma(_532, cbModelParam._m0[22u].z, fma(_531, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _530));
        float _1505 = fma(_532, cbModelParam._m0[23u].z, fma(_531, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _530));
        float _1614;
        if (_1499 > 0.0)
        {
            _1614 = abs((1.0 - _1488) / _1499);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1488 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1614 = frontier_phi_25_21_ladder;
        }
        float _1932;
        if (_1502 > 0.0)
        {
            _1932 = abs((1.0 - _1492) / _1502);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1492 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1932 = frontier_phi_37_32_ladder;
        }
        float _2270;
        if (_1505 > 0.0)
        {
            _2270 = abs((1.0 - _1496) / _1505);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1496 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2270 = frontier_phi_47_44_ladder;
        }
        float _2272 = isnan(_1932) ? _1614 : (isnan(_1614) ? _1932 : min(_1614, _1932));
        float _2273 = isnan(_2270) ? _2272 : (isnan(_2272) ? _2270 : min(_2272, _2270));
        float _2277 = (_2273 * _1499) + _1488;
        float _2278 = (_2273 * _1502) + _1492;
        float _2279 = (_2273 * _1505) + _1496;
        float _2280 = _2273 * 9.9999997473787516355514526367188e-05;
        float _2281 = (-1.0) - _2280;
        float _2283 = _2280 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2279 > _2283) || ((_2279 < _2281) || ((_2278 > _2283) || ((_2278 < _2281) || ((_2277 < _2281) || (_2277 > _2283))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2401 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2279, cbModelParam._m0[17u].z, fma(_2278, cbModelParam._m0[17u].y, _2277 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2279, cbModelParam._m0[18u].z, fma(_2278, cbModelParam._m0[18u].y, _2277 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2279, cbModelParam._m0[19u].z, fma(_2278, cbModelParam._m0[19u].y, _2277 * cbModelParam._m0[19u].x))), _1432);
            frontier_phi_22_47_ladder = _2401.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2401.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2401.x * cbModelParam._m0[1u].z;
        }
        _1524 = frontier_phi_22_47_ladder_2;
        _1526 = frontier_phi_22_47_ladder_1;
        _1528 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1508 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_530, _531, _532), _1432);
        _1524 = _1508.x * cbModelParam._m0[1u].z;
        _1526 = _1508.y * cbModelParam._m0[1u].z;
        _1528 = _1508.z * cbModelParam._m0[1u].z;
    }
    float _1541 = (((_556 * _507) + _557) * _522) * ((cbModelParam._m0[1u].w * (_1524 - _1423)) + _1423);
    float _1543 = (((_556 * _509) + _557) * _522) * ((cbModelParam._m0[1u].w * (_1526 - _1425)) + _1425);
    float _1545 = (((_556 * _510) + _557) * _522) * ((cbModelParam._m0[1u].w * (_1528 - _1427)) + _1427);
    float _1548 = fma(_1545, cbSceneParam._m0[89u].z, fma(_1543, cbSceneParam._m0[89u].y, _1541 * cbSceneParam._m0[89u].x));
    float _1551 = fma(_1545, cbSceneParam._m0[90u].z, fma(_1543, cbSceneParam._m0[90u].y, _1541 * cbSceneParam._m0[90u].x));
    float _1554 = fma(_1545, cbSceneParam._m0[91u].z, fma(_1543, cbSceneParam._m0[91u].y, _1541 * cbSceneParam._m0[91u].x));
    float _1588 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1592 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1596 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1600 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1601 = _1588 / _1600;
    float _1602 = _1592 / _1600;
    float _1603 = _1596 / _1600;
    float _1750;
    float _1751;
    float _1752;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1630 = ((uint(_1603 > cbSceneParam._m0[59u].y) + uint(_1603 > cbSceneParam._m0[59u].x)) + uint(_1603 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1631 = _1630 + 43u;
        uint _1639 = _1630 + 44u;
        uint _1647 = _1630 + 45u;
        uint _1655 = _1630 + 46u;
        float _1666 = fma(_1600, cbSceneParam._m0[_1631].w, fma(_1596, cbSceneParam._m0[_1631].z, fma(_1592, cbSceneParam._m0[_1631].y, _1588 * cbSceneParam._m0[_1631].x)));
        float _1670 = fma(_1600, cbSceneParam._m0[_1639].w, fma(_1596, cbSceneParam._m0[_1639].z, fma(_1592, cbSceneParam._m0[_1639].y, _1588 * cbSceneParam._m0[_1639].x)));
        float _1678 = fma(_1600, cbSceneParam._m0[_1655].w, fma(_1596, cbSceneParam._m0[_1655].z, fma(_1592, cbSceneParam._m0[_1655].y, _1588 * cbSceneParam._m0[_1655].x)));
        float _1683 = cbSceneParam._m0[33u].z * _1678;
        float _1685 = cbSceneParam._m0[33u].w * _1678;
        float _1688 = fma(_1600, cbSceneParam._m0[_1647].w, fma(_1596, cbSceneParam._m0[_1647].z, fma(_1592, cbSceneParam._m0[_1647].y, _1588 * cbSceneParam._m0[_1647].x))) / _1678;
        float _1736 = (cbSceneParam._m0[33u].x - sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603))) * cbSceneParam._m0[33u].y;
        float _4039 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1743 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1683 + _1666) / _1678, (_1685 + _1670) / _1678), _1688), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1685 + _1666) / _1678, (_1670 - _1683) / _1678), _1688), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1666 - _1683) / _1678, (_1670 - _1685) / _1678), _1688), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1666 - _1685) / _1678, (_1683 + _1670) / _1678), _1688), 0.0)).x), vec4(0.25)));
        _1750 = 1.0 - (_1743 * cbSceneParam._m0[34u].x);
        _1751 = 1.0 - (_1743 * cbSceneParam._m0[34u].y);
        _1752 = 1.0 - (_1743 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1750 = 1.0;
        _1751 = 1.0;
        _1752 = 1.0;
    }
    float _1816;
    float _1818;
    float _1820;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1804 = fma(_1600, cbSceneParam._m0[63u].w, fma(_1596, cbSceneParam._m0[63u].z, fma(_1592, cbSceneParam._m0[63u].y, _1588 * cbSceneParam._m0[63u].x)));
        float _1805 = fma(_1600, cbSceneParam._m0[60u].w, fma(_1596, cbSceneParam._m0[60u].z, fma(_1592, cbSceneParam._m0[60u].y, _1588 * cbSceneParam._m0[60u].x))) / _1804;
        float _1806 = fma(_1600, cbSceneParam._m0[61u].w, fma(_1596, cbSceneParam._m0[61u].z, fma(_1592, cbSceneParam._m0[61u].y, _1588 * cbSceneParam._m0[61u].x))) / _1804;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1805 >= cbSceneParam._m0[64u].x) && (_1806 >= cbSceneParam._m0[64u].y)) && (_1805 <= cbSceneParam._m0[64u].z)) && (_1806 <= cbSceneParam._m0[64u].w))
        {
            float _1945 = fma(_1600, cbSceneParam._m0[62u].w, fma(_1596, cbSceneParam._m0[62u].z, fma(_1592, cbSceneParam._m0[62u].y, _1588 * cbSceneParam._m0[62u].x))) / _1804;
            float _1949 = isnan(cbSceneParam._m0[41u].w) ? _1945 : (isnan(_1945) ? cbSceneParam._m0[41u].w : max(_1945, cbSceneParam._m0[41u].w));
            float _1992 = (cbSceneParam._m0[33u].x - sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603))) * cbSceneParam._m0[33u].y;
            float _4055 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
            float _1999 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1805, cbSceneParam._m0[33u].w + _1806), _1949), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1805, _1806 - cbSceneParam._m0[33u].z), _1949), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1805 - cbSceneParam._m0[33u].z, _1806 - cbSceneParam._m0[33u].w), _1949), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1805 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1806), _1949), 0.0)).x), vec4(0.25)));
            float _2003 = 1.0 - (_1999 * cbSceneParam._m0[34u].x);
            float _2004 = 1.0 - (_1999 * cbSceneParam._m0[34u].y);
            float _2005 = 1.0 - (_1999 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2005) ? _1752 : (isnan(_1752) ? _2005 : min(_1752, _2005));
            frontier_phi_34_33_ladder_1 = isnan(_2004) ? _1751 : (isnan(_1751) ? _2004 : min(_1751, _2004));
            frontier_phi_34_33_ladder_2 = isnan(_2003) ? _1750 : (isnan(_1750) ? _2003 : min(_1750, _2003));
        }
        else
        {
            frontier_phi_34_33_ladder = _1752;
            frontier_phi_34_33_ladder_1 = _1751;
            frontier_phi_34_33_ladder_2 = _1750;
        }
        _1816 = frontier_phi_34_33_ladder_2;
        _1818 = frontier_phi_34_33_ladder_1;
        _1820 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1816 = _1750;
        _1818 = _1751;
        _1820 = _1752;
    }
    uvec4 _1825 = floatBitsToUint(cbInstanceData._m0[_482 + 5u]);
    uint _1827 = _1825.x * 14u;
    uint _1828 = _1827 + 13u;
    float _1835 = _522 + (-1.0);
    float _1840 = (cbLight._m0[_1828].x * _1835) + 1.0;
    float _1841 = (cbLight._m0[_1828].y * _1835) + 1.0;
    float _1842 = (cbLight._m0[_1828].z * _1835) + 1.0;
    float _1843 = (cbLight._m0[_1828].w * _1835) + 1.0;
    uint _1844 = _1827 + 5u;
    float _1850 = isnan(1.0) ? _1841 : (isnan(_1841) ? 1.0 : min(_1841, 1.0));
    uint _1854 = _1827 + 4u;
    float _1864 = isnan(1.0) ? _1840 : (isnan(_1840) ? 1.0 : min(_1840, 1.0));
    uint _1868 = _1827 | 1u;
    float _1879 = dot(vec3(cbLight._m0[_1827].xyz), vec3(_352, _353, _354));
    float _1882 = dot(vec3(cbLight._m0[_1868].xyz), vec3(_352, _353, _354));
    float _4091 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _4102 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1887 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * 0.3183098733425140380859375;
    float _1889 = (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * 0.3183098733425140380859375;
    float _1896 = ((cbLight._m0[_1844].x * _1850) * _1889) + (((cbLight._m0[_1854].x * _1816) * _1864) * _1887);
    float _1897 = ((_1850 * cbLight._m0[_1844].y) * _1889) + (((cbLight._m0[_1854].y * _1818) * _1864) * _1887);
    float _1898 = ((_1850 * cbLight._m0[_1844].z) * _1889) + (((cbLight._m0[_1854].z * _1820) * _1864) * _1887);
    uvec4 _1902 = floatBitsToUint(cbLight._m0[_1827 + 12u]);
    bool _1904 = _1902.x == 0u;
    float _2006;
    float _2008;
    float _2010;
    if (_1904)
    {
        _2006 = _1896;
        _2008 = _1897;
        _2010 = _1898;
    }
    else
    {
        uint _2014 = _1827 + 6u;
        float _2030 = (dot(vec3(cbLight._m0[_1827 + 2u].xyz), vec3(_352, _353, _354)) * 0.5) + 0.5;
        float _2031 = _2030 * _2030;
        float _4113 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2032 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _2033 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
        _2006 = (((cbLight._m0[_2014].x * 0.3183098733425140380859375) * _2032) * _2033) + _1896;
        _2008 = (((cbLight._m0[_2014].y * 0.3183098733425140380859375) * _2032) * _2033) + _1897;
        _2010 = (((cbLight._m0[_2014].z * 0.3183098733425140380859375) * _2032) * _2033) + _1898;
    }
    bool _2013 = _1902.y == 0u;
    float _2068;
    float _2070;
    float _2072;
    if (_2013)
    {
        _2068 = _2006;
        _2070 = _2008;
        _2072 = _2010;
    }
    else
    {
        uint _2241 = _1827 + 7u;
        float _2257 = (dot(vec3(cbLight._m0[_1827 + 3u].xyz), vec3(_352, _353, _354)) * 0.5) + 0.5;
        float _2258 = _2257 * _2257;
        float _4129 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2259 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _2260 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
        _2068 = (((cbLight._m0[_2241].x * 0.3183098733425140380859375) * _2259) * _2260) + _2006;
        _2070 = (((cbLight._m0[_2241].y * 0.3183098733425140380859375) * _2259) * _2260) + _2008;
        _2072 = (((cbLight._m0[_2241].z * 0.3183098733425140380859375) * _2259) * _2260) + _2010;
    }
    uint _2075 = _1827 + 8u;
    float _2088 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1827].w)) * _355) * 0.949999988079071044921875);
    float _2089 = _2088 * _2088;
    float _2090 = cbLight._m0[_1827].x + _433;
    float _2091 = cbLight._m0[_1827].y + _434;
    float _2092 = cbLight._m0[_1827].z + _435;
    float _2096 = inversesqrt(dot(vec3(_2090, _2091, _2092), vec3(_2090, _2091, _2092)));
    float _2097 = _2096 * _2090;
    float _2098 = _2096 * _2091;
    float _2099 = _2096 * _2092;
    float _2100 = dot(vec3(_352, _353, _354), vec3(cbLight._m0[_1827].xyz));
    float _4145 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2103 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _4156 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _2104 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _2105 = dot(vec3(_352, _353, _354), vec3(_2097, _2098, _2099));
    float _4167 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2108 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _2109 = dot(vec3(cbLight._m0[_1827].xyz), vec3(_2097, _2098, _2099));
    float _4178 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2113 = _2089 * _2089;
    float _2117 = ((_2108 * _2108) * (_2113 + (-1.0))) + 1.0;
    float _2125 = exp2(log2(1.0 - (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) * 5.0);
    float _2126 = 0.959999978542327880859375 - _504;
    float _2128 = 0.959999978542327880859375 - _505;
    float _2129 = 0.959999978542327880859375 - _506;
    float _2136 = 1.0 - _2089;
    float _2147 = (0.5 / (((_2104 * ((_2103 * _2136) + _2089)) + 9.9999999392252902907785028219223e-09) + (((_2104 * _2136) + _2089) * _2103))) * _2103;
    float _4189 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2149 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2113 / ((_2117 * _2117) * 3.141590118408203125));
    uint _2163 = _1827 + 9u;
    float _2174 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1868].w)) * _355) * 0.949999988079071044921875);
    float _2175 = _2174 * _2174;
    float _2176 = cbLight._m0[_1868].x + _433;
    float _2177 = cbLight._m0[_1868].y + _434;
    float _2178 = cbLight._m0[_1868].z + _435;
    float _2182 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
    float _2183 = _2182 * _2176;
    float _2184 = _2182 * _2177;
    float _2185 = _2182 * _2178;
    float _2186 = dot(vec3(_352, _353, _354), vec3(cbLight._m0[_1868].xyz));
    float _4200 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _2190 = dot(vec3(_352, _353, _354), vec3(_2183, _2184, _2185));
    float _4211 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2193 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _2194 = dot(vec3(cbLight._m0[_1868].xyz), vec3(_2183, _2184, _2185));
    float _4222 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2198 = _2175 * _2175;
    float _2202 = ((_2193 * _2193) * (_2198 + (-1.0))) + 1.0;
    float _2209 = exp2(log2(1.0 - (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) * 5.0);
    float _2216 = 1.0 - _2175;
    float _2226 = (0.5 / (((_2104 * ((_2189 * _2216) + _2175)) + 9.9999999392252902907785028219223e-09) + (((_2104 * _2216) + _2175) * _2189))) * _2189;
    float _4233 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2228 = (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_2198 / ((_2202 * _2202) * 3.141590118408203125));
    float _2238 = (((((_2209 * _2126) + _507) * cbLight._m0[_2163].x) * _2228) * _1850) + ((((cbLight._m0[_2075].x * _1816) * ((_2125 * _2126) + _507)) * _2149) * _1864);
    float _2239 = (((((_2209 * _2128) + _509) * cbLight._m0[_2163].y) * _2228) * _1850) + ((((cbLight._m0[_2075].y * _1818) * ((_2125 * _2128) + _509)) * _2149) * _1864);
    float _2240 = (((((_2209 * _2129) + _510) * cbLight._m0[_2163].z) * _2228) * _1850) + ((((cbLight._m0[_2075].z * _1820) * ((_2125 * _2129) + _510)) * _2149) * _1864);
    float _2296;
    float _2298;
    float _2300;
    if (_1904)
    {
        _2296 = _2238;
        _2298 = _2239;
        _2300 = _2240;
    }
    else
    {
        uint _2302 = _1827 + 2u;
        uint _2306 = _1827 + 10u;
        float _2320 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2302].w)) * _355) * 0.949999988079071044921875);
        float _2321 = _2320 * _2320;
        float _2322 = cbLight._m0[_2302].x + _433;
        float _2323 = cbLight._m0[_2302].y + _434;
        float _2324 = cbLight._m0[_2302].z + _435;
        float _2328 = inversesqrt(dot(vec3(_2322, _2323, _2324), vec3(_2322, _2323, _2324)));
        float _2329 = _2328 * _2322;
        float _2330 = _2328 * _2323;
        float _2331 = _2328 * _2324;
        float _2332 = dot(vec3(_352, _353, _354), vec3(cbLight._m0[_2302].xyz));
        float _4244 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2335 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _2336 = dot(vec3(_352, _353, _354), vec3(_2329, _2330, _2331));
        float _4255 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2339 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2340 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_2329, _2330, _2331));
        float _4266 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2344 = _2321 * _2321;
        float _2348 = ((_2339 * _2339) * (_2344 + (-1.0))) + 1.0;
        float _2355 = exp2(log2(1.0 - (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) * 5.0);
        float _2362 = 1.0 - _2321;
        float _2372 = (0.5 / (((_2104 * ((_2335 * _2362) + _2321)) + 9.9999999392252902907785028219223e-09) + (((_2104 * _2362) + _2321) * _2335))) * _2335;
        float _4277 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2374 = (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_2344 / ((_2348 * _2348) * 3.141590118408203125));
        float _2375 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
        _2296 = (((((_2355 * _2126) + _507) * cbLight._m0[_2306].x) * _2374) * _2375) + _2238;
        _2298 = (((((_2355 * _2128) + _509) * cbLight._m0[_2306].y) * _2374) * _2375) + _2239;
        _2300 = (((((_2355 * _2129) + _510) * cbLight._m0[_2306].z) * _2374) * _2375) + _2240;
    }
    float _2406;
    float _2408;
    float _2410;
    if (_2013)
    {
        _2406 = _2296;
        _2408 = _2298;
        _2410 = _2300;
    }
    else
    {
        uint _2417 = _1827 + 3u;
        uint _2421 = _1827 + 11u;
        float _2435 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2417].w)) * _355) * 0.949999988079071044921875);
        float _2436 = _2435 * _2435;
        float _2437 = cbLight._m0[_2417].x + _433;
        float _2438 = cbLight._m0[_2417].y + _434;
        float _2439 = cbLight._m0[_2417].z + _435;
        float _2443 = inversesqrt(dot(vec3(_2437, _2438, _2439), vec3(_2437, _2438, _2439)));
        float _2444 = _2443 * _2437;
        float _2445 = _2443 * _2438;
        float _2446 = _2443 * _2439;
        float _2447 = dot(vec3(_352, _353, _354), vec3(cbLight._m0[_2417].xyz));
        float _4293 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2450 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _2451 = dot(vec3(_352, _353, _354), vec3(_2444, _2445, _2446));
        float _4304 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2454 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _2455 = dot(vec3(cbLight._m0[_2417].xyz), vec3(_2444, _2445, _2446));
        float _4315 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2459 = _2436 * _2436;
        float _2463 = ((_2454 * _2454) * (_2459 + (-1.0))) + 1.0;
        float _2470 = exp2(log2(1.0 - (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) * 5.0);
        float _2477 = 1.0 - _2436;
        float _2487 = (0.5 / (((_2104 * ((_2450 * _2477) + _2436)) + 9.9999999392252902907785028219223e-09) + (((_2104 * _2477) + _2436) * _2450))) * _2450;
        float _4326 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2489 = (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_2459 / ((_2463 * _2463) * 3.141590118408203125));
        float _2490 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
        _2406 = (((((_2470 * _2126) + _507) * cbLight._m0[_2421].x) * _2489) * _2490) + _2296;
        _2408 = (((((_2470 * _2128) + _509) * cbLight._m0[_2421].y) * _2489) * _2490) + _2298;
        _2410 = (((((_2470 * _2129) + _510) * cbLight._m0[_2421].z) * _2489) * _2490) + _2300;
    }
    float _2556;
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    float _2566;
    if (_1825.y == 0u)
    {
        uvec4 _2511 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2512 = _2511.x;
        uint _2523 = uint((float(_2511.y) * floor(float(uint(cbSceneParam._m0[85u].y * _442) / _2512))) + floor(float(uint(cbSceneParam._m0[85u].x * _441) / _2512)));
        float _2533 = (log2(_1603 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2534 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        uint _2537 = uint(isnan(14.0) ? _2534 : (isnan(_2534) ? 14.0 : min(_2534, 14.0)));
        uvec4 _2542 = texelFetch(g_lightClusterGridBuffer, int(((_2537 << 2u) + (_2523 << 6u)) >> 2u));
        uint _2543 = _2542.x;
        uint _2544 = _2511.z;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        float _2669;
        float _2671;
        if (((((1u << ((_2544 >> 4u) & 15u)) + 4294967295u) & _2543) == 0u) || ((_2544 & 240u) == 0u))
        {
            _2661 = 0.0;
            _2663 = 0.0;
            _2665 = 0.0;
            _2667 = 0.0;
            _2669 = 0.0;
            _2671 = 0.0;
        }
        else
        {
            float _2662;
            float _2664;
            float _2666;
            float _2668;
            float _2670;
            float _2672;
            float _2815 = 0.0;
            float _2816 = 0.0;
            float _2817 = 0.0;
            float _2818 = 0.0;
            float _2819 = 0.0;
            float _2820 = 0.0;
            uint _2821 = 0u;
            uint _2830;
            bool _2831;
            for (;;)
            {
                _2830 = texelFetch(g_lightClassification, int((((_2537 << 5u) + (_2523 << 9u)) + (_2821 << 2u)) >> 2u)).x;
                _2831 = _2830 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2831)
                {
                    frontier_phi_66_pred = _2820;
                    frontier_phi_66_pred_1 = _2819;
                    frontier_phi_66_pred_2 = _2818;
                    frontier_phi_66_pred_3 = _2817;
                    frontier_phi_66_pred_4 = _2816;
                    frontier_phi_66_pred_5 = _2815;
                }
                else
                {
                    float _2939;
                    float _2940;
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    uint _2945;
                    _2939 = _2815;
                    _2940 = _2816;
                    _2941 = _2817;
                    _2942 = _2818;
                    _2943 = _2819;
                    _2944 = _2820;
                    _2945 = _2830;
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    for (;;)
                    {
                        uint _2949 = uint(findLSB(_2945)) + (_2821 << 5u);
                        uint _2946 = (_2945 + 4294967295u) & _2945;
                        uint _2951 = _2949 * 48u;
                        vec4 _2965 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2951)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 3u)).x));
                        uint _2971 = (_2949 * 48u) + 4u;
                        vec4 _2984 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2971)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 3u)).x));
                        uint _2990 = (_2949 * 48u) + 8u;
                        vec3 _3001 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2990)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 2u)).x));
                        float _3005 = _2965.x - _1601;
                        float _3006 = _2965.y - _1602;
                        float _3007 = _2965.z - _1603;
                        float _3008 = dot(vec3(_3005, _3006, _3007), vec3(_3005, _3006, _3007));
                        float _3011 = inversesqrt(_3008);
                        float _3012 = _3011 * _3005;
                        float _3013 = _3011 * _3006;
                        float _3014 = _3011 * _3007;
                        float _3015 = dot(vec3(_463, _466, _469), vec3(_3012, _3013, _3014));
                        float _3020 = 1.0 - (_3008 * _2965.w);
                        float _4352 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                        float _3021 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                        float _3022 = sqrt(_3008) * _2984.w;
                        float _3025 = 1.39999997615814208984375 / (_3022 + 1.39999997615814208984375);
                        float _3026 = _3025 * _3025;
                        float _3029 = ((1.0 - _3026) * _3015) + _3026;
                        float _3032 = _3022 * _3022;
                        float _3036 = ((isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0))) * _3021) / ((_3032 * 0.699999988079071044921875) + 1.0);
                        float _3040 = (-0.0) - _1601;
                        float _3041 = (-0.0) - _1602;
                        float _3042 = (-0.0) - _1603;
                        float _3046 = inversesqrt(dot(vec3(_3040, _3041, _3042), vec3(_3040, _3041, _3042)));
                        float _3047 = _3046 * _3040;
                        float _3048 = _3046 * _3041;
                        float _3049 = _3046 * _3042;
                        float _3056 = exp2(log2(1.0 / ((_3032 * 3.5) + 5.0)) * 0.25);
                        float _3057 = 1.0 - _538;
                        float _3064 = sqrt(1.0 - ((1.0 - (_3057 * _3057)) * (1.0 - (_3056 * _3056))));
                        float _3065 = _3064 * _3064;
                        float _3066 = _3065 * _3065;
                        float _3067 = _3047 + _3012;
                        float _3068 = _3048 + _3013;
                        float _3069 = _3049 + _3014;
                        float _3073 = inversesqrt(dot(vec3(_3067, _3068, _3069), vec3(_3067, _3068, _3069)));
                        float _3077 = dot(vec3(_463, _466, _469), vec3(_3047, _3048, _3049));
                        float _4368 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                        float _3080 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                        float _3081 = dot(vec3(_463, _466, _469), vec3(_3073 * _3067, _3073 * _3068, _3073 * _3069));
                        float _4379 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                        float _3084 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                        float _3088 = ((_3084 * _3084) * (_3066 + (-1.0))) + 1.0;
                        float _3089 = _3025 * _3065;
                        float _3090 = _3089 * _3089;
                        float _3093 = ((1.0 - _3090) * _3015) + _3090;
                        float _4390 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                        float _3094 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                        float _3095 = 1.0 - _3065;
                        float _3105 = (0.5 / (((_3094 * ((_3080 * _3095) + _3065)) + 9.9999999392252902907785028219223e-09) + (((_3094 * _3095) + _3065) * _3080))) * _3094;
                        float _4401 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                        float _3116 = (((_3066 * 3.1415927410125732421875) * (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) / ((_3088 * _3088) * ((_3032 * 2.1991131305694580078125) + 3.141590118408203125))) * _3021;
                        _2874 = (_3036 * _2984.x) + _2942;
                        _2875 = (_3036 * _2984.y) + _2943;
                        _2876 = (_3036 * _2984.z) + _2944;
                        _2871 = (_3116 * _3001.x) + _2939;
                        _2872 = (_3116 * _3001.y) + _2940;
                        _2873 = (_3116 * _3001.z) + _2941;
                        if (_2946 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2939 = _2871;
                            _2940 = _2872;
                            _2941 = _2873;
                            _2942 = _2874;
                            _2943 = _2875;
                            _2944 = _2876;
                            _2945 = _2946;
                        }
                    }
                    frontier_phi_66_pred = _2876;
                    frontier_phi_66_pred_1 = _2875;
                    frontier_phi_66_pred_2 = _2874;
                    frontier_phi_66_pred_3 = _2873;
                    frontier_phi_66_pred_4 = _2872;
                    frontier_phi_66_pred_5 = _2871;
                }
                _2672 = frontier_phi_66_pred;
                _2670 = frontier_phi_66_pred_1;
                _2668 = frontier_phi_66_pred_2;
                _2666 = frontier_phi_66_pred_3;
                _2664 = frontier_phi_66_pred_4;
                _2662 = frontier_phi_66_pred_5;
                uint _2822 = _2821 + 1u;
                if (_2822 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2815 = _2662;
                    _2816 = _2664;
                    _2817 = _2666;
                    _2818 = _2668;
                    _2819 = _2670;
                    _2820 = _2672;
                    _2821 = _2822;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2661 = _2662;
            _2663 = _2664;
            _2665 = _2666;
            _2667 = _2668;
            _2669 = _2670;
            _2671 = _2672;
        }
        uvec4 _2675 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2676 = _2675.z;
        uint _2678 = (_2676 >> 8u) & 15u;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        if (((4294967295u << _2678) & _2543) == 0u)
        {
            _2783 = _2661;
            _2785 = _2663;
            _2787 = _2665;
            _2789 = _2667;
            _2791 = _2669;
            _2793 = _2671;
        }
        else
        {
            float _2808 = inversesqrt(dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603)));
            float _2809 = _2808 * _1601;
            float _2810 = _2808 * _1602;
            float _2811 = _2808 * _1603;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2678 < ((_2676 >> 12u) & 15u))
            {
                float _2784;
                float _2786;
                float _2788;
                float _2790;
                float _2792;
                float _2794;
                float _2922 = _2661;
                float _2923 = _2663;
                float _2924 = _2665;
                float _2925 = _2667;
                float _2926 = _2669;
                float _2927 = _2671;
                uint _2928 = _2678;
                uint _2937;
                bool _2938;
                for (;;)
                {
                    _2937 = texelFetch(g_lightClassification, int((((_2537 << 5u) + (_2523 << 9u)) + (_2928 << 2u)) >> 2u)).x;
                    _2938 = _2937 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2938)
                    {
                        frontier_phi_72_pred = _2927;
                        frontier_phi_72_pred_1 = _2926;
                        frontier_phi_72_pred_2 = _2925;
                        frontier_phi_72_pred_3 = _2924;
                        frontier_phi_72_pred_4 = _2923;
                        frontier_phi_72_pred_5 = _2922;
                    }
                    else
                    {
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3134 = _2922;
                        float _3135 = _2923;
                        float _3136 = _2924;
                        float _3137 = _2925;
                        float _3138 = _2926;
                        float _3139 = _2927;
                        uint _3140 = _2937;
                        uint _3141;
                        vec4 _3166;
                        float _3167;
                        vec4 _3182;
                        vec3 _3194;
                        vec4 _3210;
                        vec4 _3226;
                        float _3273;
                        bool _3274;
                        for (;;)
                        {
                            uint _3151 = ((_2928 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3140));
                            _3141 = (_3140 + 4294967295u) & _3140;
                            uint _3153 = _3151 * 40u;
                            _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            _3167 = _3166.w;
                            uint _3169 = (_3151 * 40u) + 4u;
                            _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            uint _3184 = (_3151 * 40u) + 8u;
                            _3194 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x));
                            uint _3197 = (_3151 * 40u) + 16u;
                            _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            uint _3213 = (_3151 * 40u) + 20u;
                            _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            uint _3229 = (_3151 * 40u) + 24u;
                            vec4 _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            uint _3248 = (_3151 * 40u) + 28u;
                            vec4 _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            _3273 = fma(_1603, _3261.z, fma(_1602, _3261.y, _3261.x * _1601)) + _3261.w;
                            _3274 = !((fma(_1603, _3242.z, fma(_1602, _3242.y, _3242.x * _1601)) + _3242.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3274)
                            {
                                float _3301 = _3166.x - _1601;
                                float _3302 = _3166.y - _1602;
                                float _3303 = _3166.z - _1603;
                                float _3304 = dot(vec3(_3301, _3302, _3303), vec3(_3301, _3302, _3303));
                                float _3307 = inversesqrt(_3304);
                                float _3308 = _3307 * _3301;
                                float _3309 = _3307 * _3302;
                                float _3310 = _3307 * _3303;
                                float _3314 = 1.0 - (_3304 / (_3167 * _3167));
                                float _4412 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3315 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3319 = sqrt(_3304) * _3182.w;
                                float _3321 = 1.39999997615814208984375 / (_3319 + 1.39999997615814208984375);
                                float _3322 = _3321 * _3321;
                                float _3325 = ((1.0 - _3322) * dot(vec3(_3308, _3309, _3310), vec3(_463, _466, _469))) + _3322;
                                float _3328 = _3319 * _3319;
                                float _3332 = (fma(_1603, _3210.z, fma(_1602, _3210.y, _3210.x * _1601)) + _3210.w) / _3273;
                                float _3333 = (fma(_1603, _3226.z, fma(_1602, _3226.y, _3226.x * _1601)) + _3226.w) / _3273;
                                float _3337 = 1.0 - dot(vec2(_3332, _3333), vec2(_3332, _3333));
                                float _4428 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3338 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                                float _3339 = _3338 * (((isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0))) * _3315) / ((_3328 * 0.699999988079071044921875) + 1.0));
                                float _3351 = exp2(log2(1.0 / ((_3328 * 3.5) + 5.0)) * 0.25);
                                float _3352 = 1.0 - _538;
                                float _3359 = sqrt(1.0 - ((1.0 - (_3352 * _3352)) * (1.0 - (_3351 * _3351))));
                                float _3360 = _3359 * _3359;
                                float _3361 = _3360 * _3360;
                                float _3362 = _3308 - _2809;
                                float _3363 = _3309 - _2810;
                                float _3364 = _3310 - _2811;
                                float _3368 = inversesqrt(dot(vec3(_3362, _3363, _3364), vec3(_3362, _3363, _3364)));
                                float _3372 = dot(vec3(_463, _466, _469), vec3((-0.0) - _2809, (-0.0) - _2810, (-0.0) - _2811));
                                float _4439 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3375 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                                float _3376 = dot(vec3(_463, _466, _469), vec3(_3368 * _3362, _3368 * _3363, _3368 * _3364));
                                float _4450 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3379 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                                float _3383 = ((_3379 * _3379) * (_3361 + (-1.0))) + 1.0;
                                float _3384 = _3321 * _3360;
                                float _3385 = _3384 * _3384;
                                float _3391 = ((1.0 - _3385) * dot(vec3(_463, _466, _469), vec3(_3308, _3309, _3310))) + _3385;
                                float _4461 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                                float _3392 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                                float _3393 = 1.0 - _3360;
                                float _3403 = (0.5 / (((_3392 * ((_3375 * _3393) + _3360)) + 9.9999999392252902907785028219223e-09) + (((_3392 * _3393) + _3360) * _3375))) * _3392;
                                float _4472 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                                float _3413 = (_3338 * _3315) * (((_3361 * 3.1415927410125732421875) * (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0)))) / ((_3383 * _3383) * ((_3328 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3339 * _3182.y;
                                frontier_phi_78_pred_1 = _3339 * _3182.x;
                                frontier_phi_78_pred_2 = _3413 * _3194.z;
                                frontier_phi_78_pred_3 = _3413 * _3194.y;
                                frontier_phi_78_pred_4 = _3413 * _3194.x;
                                frontier_phi_78_pred_5 = _3339 * _3182.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3421 = frontier_phi_78_pred;
                            _3420 = frontier_phi_78_pred_1;
                            _3419 = frontier_phi_78_pred_2;
                            _3418 = frontier_phi_78_pred_3;
                            _3417 = frontier_phi_78_pred_4;
                            _3422 = frontier_phi_78_pred_5;
                            _3124 = _3420 + _3137;
                            _3125 = _3421 + _3138;
                            _3126 = _3422 + _3139;
                            _3121 = _3417 + _3134;
                            _3122 = _3418 + _3135;
                            _3123 = _3419 + _3136;
                            if (_3141 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3134 = _3121;
                                _3135 = _3122;
                                _3136 = _3123;
                                _3137 = _3124;
                                _3138 = _3125;
                                _3139 = _3126;
                                _3140 = _3141;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3126;
                        frontier_phi_72_pred_1 = _3125;
                        frontier_phi_72_pred_2 = _3124;
                        frontier_phi_72_pred_3 = _3123;
                        frontier_phi_72_pred_4 = _3122;
                        frontier_phi_72_pred_5 = _3121;
                    }
                    _2794 = frontier_phi_72_pred;
                    _2792 = frontier_phi_72_pred_1;
                    _2790 = frontier_phi_72_pred_2;
                    _2788 = frontier_phi_72_pred_3;
                    _2786 = frontier_phi_72_pred_4;
                    _2784 = frontier_phi_72_pred_5;
                    uint _2929 = _2928 + 1u;
                    if (_2929 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2922 = _2784;
                        _2923 = _2786;
                        _2924 = _2788;
                        _2925 = _2790;
                        _2926 = _2792;
                        _2927 = _2794;
                        _2928 = _2929;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2794;
                frontier_phi_60_61_ladder_1 = _2792;
                frontier_phi_60_61_ladder_2 = _2788;
                frontier_phi_60_61_ladder_3 = _2786;
                frontier_phi_60_61_ladder_4 = _2784;
                frontier_phi_60_61_ladder_5 = _2790;
            }
            else
            {
                frontier_phi_60_61_ladder = _2671;
                frontier_phi_60_61_ladder_1 = _2669;
                frontier_phi_60_61_ladder_2 = _2665;
                frontier_phi_60_61_ladder_3 = _2663;
                frontier_phi_60_61_ladder_4 = _2661;
                frontier_phi_60_61_ladder_5 = _2667;
            }
            _2783 = frontier_phi_60_61_ladder_4;
            _2785 = frontier_phi_60_61_ladder_3;
            _2787 = frontier_phi_60_61_ladder_2;
            _2789 = frontier_phi_60_61_ladder_5;
            _2791 = frontier_phi_60_61_ladder_1;
            _2793 = frontier_phi_60_61_ladder;
        }
        float _2798 = isnan(1.0) ? _522 : (isnan(_522) ? 1.0 : min(_522, 1.0));
        _2556 = (_2798 * _2789) + _2068;
        _2558 = (_2798 * _2791) + _2070;
        _2560 = (_2798 * _2793) + _2072;
        _2562 = ((_2783 * _507) * _2798) + _2406;
        _2564 = ((_2785 * _509) * _2798) + _2408;
        _2566 = ((_2787 * _510) * _2798) + _2410;
    }
    else
    {
        _2556 = _2068;
        _2558 = _2070;
        _2560 = _2072;
        _2562 = _2406;
        _2564 = _2408;
        _2566 = _2410;
    }
    uint _2572 = _483 + uint(cbMatDynParam._m0[0u].w);
    float _2581 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _318.x) * _338) * cbInstanceData._m0[_2572].x;
    float _2585 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _318.y) * _338) * cbInstanceData._m0[_2572].y;
    float _2589 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _318.z) * _338) * cbInstanceData._m0[_2572].z;
    float _4488 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _4499 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _4510 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _2606 = (((isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2556 + ((isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))) * _522))) + ((_2562 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _1331)) * cbPerFrame._m0[3u].x)) + _2581;
    float _2608 = (_2585 + ((_2564 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _1331)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2558 + ((isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))) * _522)));
    float _2610 = (_2589 + ((_2566 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _1331)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_2560 + ((isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))) * _522)));
    float _4536 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2623 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    uint _2624 = _482 + 6u;
    float _2632 = _441 / cbSceneParam._m0[86u].x;
    float _2633 = _442 / cbSceneParam._m0[86u].y;
    vec4 _2647 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2632, _2633, (log2((isnan(cbSceneParam._m0[77u].w) ? _375 : (isnan(_375) ? cbSceneParam._m0[77u].w : min(_375, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2649 = _2647.x;
    float _2650 = _2647.y;
    float _2651 = _2647.z;
    float _2652 = _2647.w;
    float _2724;
    float _2726;
    float _2728;
    float _2730;
    if (_375 > cbSceneParam._m0[78u].w)
    {
        float _2686 = isnan(_375) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _375 : min(cbSceneParam._m0[80u].w, _375));
        float _2687 = _2686 / _375;
        float _2698 = _2687 * _426;
        float _2699 = _427 * _2687;
        float _2700 = (-0.0) - _2699;
        float _2702 = _2687 * _428;
        float _2704 = (cbSceneParam._m0[77u].w * _2700) / _2686;
        float _2705 = _2704 + cbSceneParam._m0[79u].w;
        float _2706 = cbSceneParam._m0[79u].w - _2699;
        float _2712 = sqrt(((_2698 * _2698) + (_2699 * _2699)) + (_2702 * _2702));
        float _2715 = (1.0 - (cbSceneParam._m0[77u].w / _2686)) * _2712;
        float _2720 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2722 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2884;
        if (abs((_2700 - _2704) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2884 = ((((_2705 > 0.0) ? exp2(_2720 * _2705) : (2.0 - exp2(_2722 * _2705))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2715;
        }
        else
        {
            float _2844 = 1.0 / cbSceneParam._m0[80u].x;
            float _2845 = isnan(_2706) ? _2705 : (isnan(_2705) ? _2706 : max(_2705, _2706));
            float _2846 = isnan(_2706) ? _2705 : (isnan(_2705) ? _2706 : min(_2705, _2706));
            float _2855 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : min(_2845, 0.0));
            float _2856 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : min(_2846, 0.0));
            _2884 = ((abs(_2712 / _2700) * cbSceneParam._m0[80u].y) * ((((_2855 - _2856) * 2.0) - ((exp2(_2720 * (isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0)))) - exp2(_2720 * (isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0))))) * _2844)) - ((exp2(_2722 * _2855) - exp2(_2722 * _2856)) * _2844))) + (_2715 * cbSceneParam._m0[80u].z);
        }
        vec4 _2886 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2632, _2633, 1.0), 0.0);
        float _2895 = exp2((_2884 * (-1.44269502162933349609375)) * (1.0 - _2886.w));
        float _2896 = log2(_2895);
        float _2912 = log2(_2652);
        _2724 = (exp2(_2912 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2896 * cbSceneParam._m0[78u].x)) * _2886.x) / cbSceneParam._m0[78u].x)) + _2649;
        _2726 = (exp2(_2912 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2896 * cbSceneParam._m0[78u].y)) * _2886.y) / cbSceneParam._m0[78u].y)) + _2650;
        _2728 = (exp2(_2912 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2896 * cbSceneParam._m0[78u].z)) * _2886.z) / cbSceneParam._m0[78u].z)) + _2651;
        _2730 = _2895 * _2652;
    }
    else
    {
        _2724 = _2649;
        _2726 = _2650;
        _2728 = _2651;
        _2730 = _2652;
    }
    float _2742 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2743 = _2742 == 3.0;
    float _2744 = log2(_2730);
    float _2748 = exp2(_2744 * cbSceneParam._m0[78u].x);
    float _2749 = exp2(_2744 * cbSceneParam._m0[78u].y);
    float _2750 = exp2(_2744 * cbSceneParam._m0[78u].z);
    float _2751 = _2748 * (isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0)));
    float _2752 = _2749 * (isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0)));
    float _2753 = _2750 * (isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0)));
    float _2762 = (_2742 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2762 * (_2743 ? _2751 : (_2751 + (cbSceneParam._m0[72u].w * _2724)));
    SV_Target.y = _2762 * (_2743 ? _2752 : (_2752 + (cbSceneParam._m0[72u].w * _2726)));
    SV_Target.z = _2762 * (_2743 ? _2753 : (_2753 + (cbSceneParam._m0[72u].w * _2728)));
    SV_Target.w = cbInstanceData._m0[_2624].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2581) * _2623) * _2748) * _2762;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2585) * _2623) * _2749) * _2762;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2589) * _2623) * _2750) * _2762;
    SV_Target_1.w = cbInstanceData._m0[_2624].w;
}


