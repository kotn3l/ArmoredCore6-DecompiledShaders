#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _893;
float _3331;
float _3332;
float _3333;
float _3334;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _230 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _236 = _230.x * cbMtdParam._m0[9u].x;
    float _237 = _230.y * cbMtdParam._m0[9u].y;
    float _238 = _230.z * cbMtdParam._m0[9u].z;
    vec4 _250 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _254 = _250.z;
    float _258 = (_250.x * 2.0) + (-1.0);
    float _260 = (_250.y * 2.0) + (-1.0);
    float _261 = dot(vec2(_258, _260), vec2(_258, _260));
    float _3343 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _267 = sqrt(1.0 - (isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0))));
    vec4 _289 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _303 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3354 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _304 = isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0));
    float _312 = (((_304 * _304) * (3.0 - (_304 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _315 = fma(_267, _201 * NORMAL.x, fma(_260, _208 * TANGENT.x, (_194 * _187) * _258));
    float _318 = fma(_267, _201 * NORMAL.y, fma(_260, _208 * TANGENT.y, (_194 * _188) * _258));
    float _321 = fma(_267, _201 * NORMAL.z, fma(_260, _208 * TANGENT.z, (_194 * _189) * _258));
    float _325 = inversesqrt(dot(vec3(_315, _318, _321), vec3(_315, _318, _321)));
    float _326 = _325 * _315;
    float _327 = _325 * _318;
    float _328 = _325 * _321;
    float _3365 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _329 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
    float _3376 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3387 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3398 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _348 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _389 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _399 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _389);
    float _400 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _389);
    float _401 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _389);
    float _405 = inversesqrt(dot(vec3(_399, _400, _401), vec3(_399, _400, _401)));
    float _406 = _399 * _405;
    float _407 = _400 * _405;
    float _408 = _401 * _405;
    vec4 _413 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _415 = _413.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _572 = sqrt(((_399 * _399) + (_400 * _400)) + (_401 * _401));
        float _578 = (cbMatDynParam._m0[5u].x * _572) + cbMatDynParam._m0[5u].y;
        float _3409 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
        float _579 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _583 = (cbMatDynParam._m0[5u].z * _572) + cbMatDynParam._m0[5u].w;
        float _3420 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0))) - _579)) + _579) < ((_415 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _427 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _428 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _448 = fma(_328, cbSceneParam._m0[5u].z, fma(_327, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _326));
    float _451 = fma(_328, cbSceneParam._m0[6u].z, fma(_327, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _326));
    float _454 = fma(_328, cbSceneParam._m0[7u].z, fma(_327, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _326));
    uint _467 = uint(roundEven(NORMAL.w)) * 13u;
    uint _469 = _467 + 9u;
    uint _470 = _469 + uint(cbMatDynParam._m0[0u].w);
    float _476 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0)))) * cbInstanceData._m0[_470].x;
    float _477 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0)))) * cbInstanceData._m0[_470].y;
    float _478 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0)))) * cbInstanceData._m0[_470].z;
    float _3431 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
    float _3442 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _480 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    float _3453 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _481 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
    vec4 _490 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _427, cbSceneParam._m0[86u].y * _428));
    float _493 = _490.x * TEXCOORD.z;
    float _494 = dot(vec3(_326, _327, _328), vec3(_406, _407, _408));
    float _497 = _494 * 2.0;
    float _501 = (_497 * _326) - _406;
    float _502 = (_497 * _327) - _407;
    float _503 = (_497 * _328) - _408;
    float _507 = abs(dot(vec3(_406, _407, _408), vec3(_326, _327, _328)));
    float _3464 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _509 = sqrt(_329);
    float _521 = exp2((_509 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_509 * 3.0));
    float _553 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _892;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _617 = fma(_561, cbModelParam._m0[26u].z, fma(_557, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _553));
        float _621 = fma(_561, cbModelParam._m0[27u].z, fma(_557, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _553));
        float _625 = fma(_561, cbModelParam._m0[28u].z, fma(_557, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _553));
        float _650 = _553 + _326;
        float _651 = _557 + _327;
        float _652 = _561 + _328;
        float _662 = fma(_652, cbModelParam._m0[26u].z, fma(_651, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _650)) - _617;
        float _663 = fma(_652, cbModelParam._m0[27u].z, fma(_651, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _650)) - _621;
        float _664 = fma(_652, cbModelParam._m0[28u].z, fma(_651, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _650)) - _625;
        float _668 = inversesqrt(dot(vec3(_662, _663, _664), vec3(_662, _663, _664)));
        float _681 = ((_668 * _662) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_617 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _682 = ((_668 * _663) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_621 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _683 = ((_668 * _664) / cbModelParam._m0[34u].z) + ((((((_625 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _686 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        vec4 _693 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        vec4 _700 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        vec4 _707 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        float _720 = exp2((_686.w + (-0.5)) * 20.0) * 2.0;
        float _721 = _720 * (_686.x + (-0.5));
        float _722 = _720 * (_686.y + (-0.5));
        float _723 = _720 * (_686.z + (-0.5));
        float _730 = exp2((_693.w + (-0.5)) * 20.0) * 2.0;
        float _731 = _730 * (_693.x + (-0.5));
        float _732 = _730 * (_693.y + (-0.5));
        float _733 = _730 * (_693.z + (-0.5));
        float _740 = exp2((_700.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_700.x + (-0.5));
        float _742 = _740 * (_700.y + (-0.5));
        float _743 = _740 * (_700.z + (-0.5));
        float _750 = exp2((_707.w + (-0.5)) * 20.0) * 2.0;
        float _751 = _750 * (_707.x + (-0.5));
        float _752 = _750 * (_707.y + (-0.5));
        float _753 = _750 * (_707.z + (-0.5));
        float _754 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _755 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _756 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _757 = _721 * 0.5;
        float _758 = _731 * 0.5;
        float _759 = _741 * 0.5;
        float _760 = dot(vec3(_757, _758, _759), vec3(_757, _758, _759));
        float _765 = (_760 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_760);
        float _774 = (dot(vec3(_326, _327, _328), vec3(_765 * _757, _765 * _758, _765 * _759)) + 1.0) * 0.5;
        float _3490 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _784 = sqrt(((_758 * _758) + (_757 * _757)) + (_759 * _759)) / (_754 + 9.9999997473787516355514526367188e-06);
        float _3501 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _786 = _785 * 2.0;
        float _790 = (1.0 - _785) / (_785 + 1.0);
        float _3512 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _800 = ((((1.0 - _791) * (_786 + 2.0)) * exp2(log2(isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0))) * (_786 + 1.0))) + _791) * _754;
        float _801 = _722 * 0.5;
        float _802 = _732 * 0.5;
        float _803 = _742 * 0.5;
        float _804 = dot(vec3(_801, _802, _803), vec3(_801, _802, _803));
        float _809 = (_804 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_804);
        float _817 = (dot(vec3(_326, _327, _328), vec3(_809 * _801, _809 * _802, _809 * _803)) + 1.0) * 0.5;
        float _3523 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _826 = sqrt(((_802 * _802) + (_801 * _801)) + (_803 * _803)) / (_755 + 9.9999997473787516355514526367188e-06);
        float _3534 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _828 = _827 * 2.0;
        float _832 = (1.0 - _827) / (_827 + 1.0);
        float _3545 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _842 = ((((1.0 - _833) * (_828 + 2.0)) * exp2(log2(isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * (_828 + 1.0))) + _833) * _755;
        float _843 = _723 * 0.5;
        float _844 = _733 * 0.5;
        float _845 = _743 * 0.5;
        float _846 = dot(vec3(_843, _844, _845), vec3(_843, _844, _845));
        float _851 = (_846 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_846);
        float _859 = (dot(vec3(_326, _327, _328), vec3(_851 * _843, _851 * _844, _851 * _845)) + 1.0) * 0.5;
        float _3556 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _868 = sqrt(((_844 * _844) + (_843 * _843)) + (_845 * _845)) / (_756 + 9.9999997473787516355514526367188e-06);
        float _3567 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _870 = _869 * 2.0;
        float _874 = (1.0 - _869) / (_869 + 1.0);
        float _3578 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _884 = ((((1.0 - _875) * (_870 + 2.0)) * exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * (_870 + 1.0))) + _875) * _756;
        _892 = _723;
        _894 = _722;
        _895 = _721;
        _896 = _733;
        _897 = _732;
        _898 = _731;
        _899 = _743;
        _900 = _742;
        _901 = _741;
        _902 = _756;
        _903 = _755;
        _904 = _754;
        _905 = cbModelParam._m0[36u].z * (isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0)));
        _906 = cbModelParam._m0[36u].z * (isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0)));
        _907 = cbModelParam._m0[36u].z * (isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0)));
    }
    else
    {
        _892 = _893;
        _894 = _893;
        _895 = _893;
        _896 = _893;
        _897 = _893;
        _898 = _893;
        _899 = _893;
        _900 = _893;
        _901 = _893;
        _902 = _893;
        _903 = _893;
        _904 = _893;
        _905 = 0.0;
        _906 = 0.0;
        _907 = 0.0;
    }
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _936 = fma(_561, cbModelParam._m0[30u].z, fma(_557, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _553));
        float _940 = fma(_561, cbModelParam._m0[31u].z, fma(_557, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _553));
        float _944 = fma(_561, cbModelParam._m0[32u].z, fma(_557, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _553));
        float _967 = _553 + _326;
        float _968 = _557 + _327;
        float _969 = _561 + _328;
        float _979 = fma(_969, cbModelParam._m0[30u].z, fma(_968, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _967)) - _936;
        float _980 = fma(_969, cbModelParam._m0[31u].z, fma(_968, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _967)) - _940;
        float _981 = fma(_969, cbModelParam._m0[32u].z, fma(_968, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _967)) - _944;
        float _985 = inversesqrt(dot(vec3(_979, _980, _981), vec3(_979, _980, _981)));
        float _998 = ((_985 * _979) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_936 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _999 = ((_985 * _980) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_940 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1000 = ((_985 * _981) / cbModelParam._m0[35u].z) + ((((((_944 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        float _1035 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_1002.x + (-0.5));
        float _1037 = _1035 * (_1002.y + (-0.5));
        float _1038 = _1035 * (_1002.z + (-0.5));
        float _1045 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1009.x + (-0.5));
        float _1047 = _1045 * (_1009.y + (-0.5));
        float _1048 = _1045 * (_1009.z + (-0.5));
        float _1055 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1016.x + (-0.5));
        float _1057 = _1055 * (_1016.y + (-0.5));
        float _1058 = _1055 * (_1016.z + (-0.5));
        float _1065 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1023.x + (-0.5));
        float _1067 = _1065 * (_1023.y + (-0.5));
        float _1068 = _1065 * (_1023.z + (-0.5));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = _1036 * 0.5;
        float _1073 = _1046 * 0.5;
        float _1074 = _1056 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1088 = (dot(vec3(_326, _327, _328), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3619 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1097 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3630 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3641 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * (_1099 + 1.0))) + _1104) * _1069;
        float _1114 = _1037 * 0.5;
        float _1115 = _1047 * 0.5;
        float _1116 = _1057 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_326, _327, _328), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3652 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3663 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3674 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))) * (_1141 + 1.0))) + _1146) * _1070;
        float _1156 = _1038 * 0.5;
        float _1157 = _1048 * 0.5;
        float _1158 = _1058 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_326, _327, _328), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3685 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3696 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3707 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * (_1183 + 1.0))) + _1188) * _1071;
        _1205 = _1038;
        _1206 = _1037;
        _1207 = _1036;
        _1208 = _1048;
        _1209 = _1047;
        _1210 = _1046;
        _1211 = _1058;
        _1212 = _1057;
        _1213 = _1056;
        _1214 = _1071;
        _1215 = _1070;
        _1216 = _1069;
        _1217 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
        _1218 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
        _1219 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
    }
    else
    {
        _1205 = _893;
        _1206 = _893;
        _1207 = _893;
        _1208 = _893;
        _1209 = _893;
        _1210 = _893;
        _1211 = _893;
        _1212 = _893;
        _1213 = _893;
        _1214 = _893;
        _1215 = _893;
        _1216 = _893;
        _1217 = 0.0;
        _1218 = 0.0;
        _1219 = 0.0;
    }
    float _1229 = (cbModelParam._m0[1u].x * (_1217 - _905)) + _905;
    float _1230 = (cbModelParam._m0[1u].x * (_1218 - _906)) + _906;
    float _1231 = (cbModelParam._m0[1u].x * (_1219 - _907)) + _907;
    float _1252 = fma(_1231, cbSceneParam._m0[89u].z, fma(_1230, cbSceneParam._m0[89u].y, _1229 * cbSceneParam._m0[89u].x));
    float _1255 = fma(_1231, cbSceneParam._m0[90u].z, fma(_1230, cbSceneParam._m0[90u].y, _1229 * cbSceneParam._m0[90u].x));
    float _1258 = fma(_1231, cbSceneParam._m0[91u].z, fma(_1230, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1229));
    float _1273 = _501 * 0.5;
    float _1274 = _502 * 0.5;
    float _1275 = _503 * 0.5;
    float _1276 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_1207, _1210, _1213, _1216));
    float _1279 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_1206, _1209, _1212, _1215));
    float _1282 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_1205, _1208, _1211, _1214));
    float _1316;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1289 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_892, _896, _899, _902));
        float _1293 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_894, _897, _900, _903));
        float _1297 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_895, _898, _901, _904));
        float _1304 = dot(vec4(cbModelParam._m0[39u]), vec4(_1273, _1274, _1275, 1.0));
        _1316 = dot(vec3(isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1304) ? 0.0 : (isnan(0.0) ? _1304 : max(0.0, _1304))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1316 = 1.0;
    }
    float _1327;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1318 = dot(vec4(cbModelParam._m0[40u]), vec4(_1273, _1274, _1275, 1.0));
        _1327 = dot(vec3(isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)), isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)), isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1318) ? 0.0 : (isnan(0.0) ? _1318 : max(0.0, _1318))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1327 = 1.0;
    }
    float _1331 = (_1327 * cbModelParam._m0[1u].x) + (_1316 * (1.0 - cbModelParam._m0[1u].x));
    float _1341 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _329);
    float _1342 = isnan(_1341) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1341 : min(cbModelParam._m0[25u].z, _1341));
    float _1423;
    float _1425;
    float _1427;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1390 = fma(_561, cbModelParam._m0[13u].z, fma(_557, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _553)) + cbModelParam._m0[13u].w;
        float _1394 = fma(_561, cbModelParam._m0[14u].z, fma(_557, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _553)) + cbModelParam._m0[14u].w;
        float _1398 = fma(_561, cbModelParam._m0[15u].z, fma(_557, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _553)) + cbModelParam._m0[15u].w;
        float _1401 = fma(_503, cbModelParam._m0[13u].z, fma(_502, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _501));
        float _1404 = fma(_503, cbModelParam._m0[14u].z, fma(_502, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _501));
        float _1407 = fma(_503, cbModelParam._m0[15u].z, fma(_502, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _501));
        float _1435;
        if (_1401 > 0.0)
        {
            _1435 = abs((1.0 - _1390) / _1401);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1401 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1390 + 1.0) / _1401);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1435 = frontier_phi_17_15_ladder;
        }
        float _1660;
        if (_1404 > 0.0)
        {
            _1660 = abs((1.0 - _1394) / _1404);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1394 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1660 = frontier_phi_26_22_ladder;
        }
        float _1906;
        if (_1407 > 0.0)
        {
            _1906 = abs((1.0 - _1398) / _1407);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1407 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1398 + 1.0) / _1407);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1906 = frontier_phi_38_33_ladder;
        }
        float _1908 = isnan(_1660) ? _1435 : (isnan(_1435) ? _1660 : min(_1435, _1660));
        float _1909 = isnan(_1906) ? _1908 : (isnan(_1908) ? _1906 : min(_1908, _1906));
        float _1913 = (_1909 * _1401) + _1390;
        float _1914 = (_1909 * _1404) + _1394;
        float _1915 = (_1909 * _1407) + _1398;
        float _1916 = _1909 * 9.9999997473787516355514526367188e-05;
        float _1918 = (-1.0) - _1916;
        float _1920 = _1916 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1915 > _1920) || ((_1915 < _1918) || ((_1914 > _1920) || ((_1914 < _1918) || ((_1913 < _1918) || (_1913 > _1920))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2039 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1915, cbModelParam._m0[9u].z, fma(_1914, cbModelParam._m0[9u].y, _1913 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1915, cbModelParam._m0[10u].z, fma(_1914, cbModelParam._m0[10u].y, _1913 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1915, cbModelParam._m0[11u].z, fma(_1914, cbModelParam._m0[11u].y, _1913 * cbModelParam._m0[11u].x))), _1342);
            frontier_phi_16_38_ladder = _2039.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2039.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2039.x * cbModelParam._m0[1u].y;
        }
        _1423 = frontier_phi_16_38_ladder_2;
        _1425 = frontier_phi_16_38_ladder_1;
        _1427 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1411 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_501, _502, _503), _1342);
        _1423 = _1411.x * cbModelParam._m0[1u].y;
        _1425 = _1411.y * cbModelParam._m0[1u].y;
        _1427 = _1411.z * cbModelParam._m0[1u].y;
    }
    float _1431 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _329);
    float _1432 = isnan(_1431) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1431 : min(cbModelParam._m0[25u].w, _1431));
    float _1524;
    float _1526;
    float _1528;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1488 = fma(_561, cbModelParam._m0[21u].z, fma(_557, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _553)) + cbModelParam._m0[21u].w;
        float _1492 = fma(_561, cbModelParam._m0[22u].z, fma(_557, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _553)) + cbModelParam._m0[22u].w;
        float _1496 = fma(_561, cbModelParam._m0[23u].z, fma(_557, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _553)) + cbModelParam._m0[23u].w;
        float _1499 = fma(_503, cbModelParam._m0[21u].z, fma(_502, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _501));
        float _1502 = fma(_503, cbModelParam._m0[22u].z, fma(_502, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _501));
        float _1505 = fma(_503, cbModelParam._m0[23u].z, fma(_502, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _501));
        float _1665;
        if (_1499 > 0.0)
        {
            _1665 = abs((1.0 - _1488) / _1499);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1488 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1665 = frontier_phi_28_24_ladder;
        }
        float _1933;
        if (_1502 > 0.0)
        {
            _1933 = abs((1.0 - _1492) / _1502);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1492 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1933 = frontier_phi_40_35_ladder;
        }
        float _2138;
        if (_1505 > 0.0)
        {
            _2138 = abs((1.0 - _1496) / _1505);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1496 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2138 = frontier_phi_49_46_ladder;
        }
        float _2140 = isnan(_1933) ? _1665 : (isnan(_1665) ? _1933 : min(_1665, _1933));
        float _2141 = isnan(_2138) ? _2140 : (isnan(_2140) ? _2138 : min(_2140, _2138));
        float _2145 = (_2141 * _1499) + _1488;
        float _2146 = (_2141 * _1502) + _1492;
        float _2147 = (_2141 * _1505) + _1496;
        float _2148 = _2141 * 9.9999997473787516355514526367188e-05;
        float _2149 = (-1.0) - _2148;
        float _2151 = _2148 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2147 > _2151) || ((_2147 < _2149) || ((_2146 > _2151) || ((_2146 < _2149) || ((_2145 < _2149) || (_2145 > _2151))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2384 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2147, cbModelParam._m0[17u].z, fma(_2146, cbModelParam._m0[17u].y, _2145 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2147, cbModelParam._m0[18u].z, fma(_2146, cbModelParam._m0[18u].y, _2145 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2147, cbModelParam._m0[19u].z, fma(_2146, cbModelParam._m0[19u].y, _2145 * cbModelParam._m0[19u].x))), _1432);
            frontier_phi_25_49_ladder = _2384.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2384.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2384.x * cbModelParam._m0[1u].z;
        }
        _1524 = frontier_phi_25_49_ladder_2;
        _1526 = frontier_phi_25_49_ladder_1;
        _1528 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1508 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_501, _502, _503), _1432);
        _1524 = _1508.x * cbModelParam._m0[1u].z;
        _1526 = _1508.y * cbModelParam._m0[1u].z;
        _1528 = _1508.z * cbModelParam._m0[1u].z;
    }
    float _1540 = ((((1.0 - _521) * ((_509 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_521 * _509)) * _493;
    float _1541 = _1540 * ((cbModelParam._m0[1u].w * (_1524 - _1423)) + _1423);
    float _1542 = _1540 * ((cbModelParam._m0[1u].w * (_1526 - _1425)) + _1425);
    float _1543 = _1540 * ((cbModelParam._m0[1u].w * (_1528 - _1427)) + _1427);
    float _1546 = fma(_1543, cbSceneParam._m0[89u].z, fma(_1542, cbSceneParam._m0[89u].y, _1541 * cbSceneParam._m0[89u].x));
    float _1549 = fma(_1543, cbSceneParam._m0[90u].z, fma(_1542, cbSceneParam._m0[90u].y, _1541 * cbSceneParam._m0[90u].x));
    float _1552 = fma(_1543, cbSceneParam._m0[91u].z, fma(_1542, cbSceneParam._m0[91u].y, _1541 * cbSceneParam._m0[91u].x));
    vec4 _1560 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_427, _428));
    float _1562 = _1560.w;
    float _1574 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1562);
    float _1575 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1562);
    float _1576 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1562);
    uvec4 _1580 = floatBitsToUint(cbInstanceData._m0[_467 + 5u]);
    uint _1582 = _1580.x * 14u;
    uint _1583 = _1582 + 13u;
    float _1590 = _493 + (-1.0);
    float _1595 = (cbLight._m0[_1583].x * _1590) + 1.0;
    float _1596 = (cbLight._m0[_1583].y * _1590) + 1.0;
    float _1597 = (cbLight._m0[_1583].z * _1590) + 1.0;
    float _1598 = (cbLight._m0[_1583].w * _1590) + 1.0;
    uint _1599 = _1582 + 5u;
    float _1605 = isnan(1.0) ? _1596 : (isnan(_1596) ? 1.0 : min(_1596, 1.0));
    uint _1609 = _1582 + 4u;
    float _1619 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
    uint _1623 = _1582 | 1u;
    float _1634 = dot(vec3(cbLight._m0[_1582].xyz), vec3(_326, _327, _328));
    float _1637 = dot(vec3(cbLight._m0[_1623].xyz), vec3(_326, _327, _328));
    float _3843 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
    float _3854 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
    float _1642 = (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * 0.3183098733425140380859375;
    float _1644 = (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * 0.3183098733425140380859375;
    float _1651 = ((cbLight._m0[_1599].x * _1605) * _1644) + (((cbLight._m0[_1609].x * _1574) * _1619) * _1642);
    float _1652 = ((_1605 * cbLight._m0[_1599].y) * _1644) + (((cbLight._m0[_1609].y * _1575) * _1619) * _1642);
    float _1653 = ((_1605 * cbLight._m0[_1599].z) * _1644) + (((cbLight._m0[_1609].z * _1576) * _1619) * _1642);
    uvec4 _1657 = floatBitsToUint(cbLight._m0[_1582 + 12u]);
    bool _1659 = _1657.x == 0u;
    float _1670;
    float _1672;
    float _1674;
    if (_1659)
    {
        _1670 = _1651;
        _1672 = _1652;
        _1674 = _1653;
    }
    else
    {
        uint _1678 = _1582 + 6u;
        float _1694 = (dot(vec3(cbLight._m0[_1582 + 2u].xyz), vec3(_326, _327, _328)) * 0.5) + 0.5;
        float _1695 = _1694 * _1694;
        float _3865 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1697 = isnan(1.0) ? _1597 : (isnan(_1597) ? 1.0 : min(_1597, 1.0));
        _1670 = (((cbLight._m0[_1678].x * 0.3183098733425140380859375) * _1696) * _1697) + _1651;
        _1672 = (((cbLight._m0[_1678].y * 0.3183098733425140380859375) * _1696) * _1697) + _1652;
        _1674 = (((cbLight._m0[_1678].z * 0.3183098733425140380859375) * _1696) * _1697) + _1653;
    }
    bool _1677 = _1657.y == 0u;
    float _1715;
    float _1717;
    float _1719;
    if (_1677)
    {
        _1715 = _1670;
        _1717 = _1672;
        _1719 = _1674;
    }
    else
    {
        uint _1877 = _1582 + 7u;
        float _1893 = (dot(vec3(cbLight._m0[_1582 + 3u].xyz), vec3(_326, _327, _328)) * 0.5) + 0.5;
        float _1894 = _1893 * _1893;
        float _3881 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1895 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1896 = isnan(1.0) ? _1598 : (isnan(_1598) ? 1.0 : min(_1598, 1.0));
        _1715 = (((cbLight._m0[_1877].x * 0.3183098733425140380859375) * _1895) * _1896) + _1670;
        _1717 = (((cbLight._m0[_1877].y * 0.3183098733425140380859375) * _1895) * _1896) + _1672;
        _1719 = (((cbLight._m0[_1877].z * 0.3183098733425140380859375) * _1895) * _1896) + _1674;
    }
    uint _1722 = _1582 + 8u;
    float _1735 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1582].w)) * _329) * 0.949999988079071044921875);
    float _1736 = _1735 * _1735;
    float _1737 = cbLight._m0[_1582].x + _406;
    float _1738 = cbLight._m0[_1582].y + _407;
    float _1739 = cbLight._m0[_1582].z + _408;
    float _1743 = inversesqrt(dot(vec3(_1737, _1738, _1739), vec3(_1737, _1738, _1739)));
    float _1744 = _1743 * _1737;
    float _1745 = _1743 * _1738;
    float _1746 = _1743 * _1739;
    float _1747 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1582].xyz));
    float _3897 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1750 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _1751 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _1752 = dot(vec3(_326, _327, _328), vec3(_1744, _1745, _1746));
    float _3919 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1755 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _1756 = dot(vec3(cbLight._m0[_1582].xyz), vec3(_1744, _1745, _1746));
    float _3930 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1760 = _1736 * _1736;
    float _1764 = ((_1755 * _1755) * (_1760 + (-1.0))) + 1.0;
    float _1775 = (exp2(log2(1.0 - (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1776 = 1.0 - _1736;
    float _1787 = (0.5 / (((_1751 * ((_1750 * _1776) + _1736)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _1776) + _1736) * _1750))) * _1750;
    float _3941 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1789 = (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_1760 / ((_1764 * _1764) * 3.141590118408203125));
    uint _1803 = _1582 + 9u;
    float _1814 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1623].w)) * _329) * 0.949999988079071044921875);
    float _1815 = _1814 * _1814;
    float _1816 = cbLight._m0[_1623].x + _406;
    float _1817 = cbLight._m0[_1623].y + _407;
    float _1818 = cbLight._m0[_1623].z + _408;
    float _1822 = inversesqrt(dot(vec3(_1816, _1817, _1818), vec3(_1816, _1817, _1818)));
    float _1823 = _1822 * _1816;
    float _1824 = _1822 * _1817;
    float _1825 = _1822 * _1818;
    float _1826 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1623].xyz));
    float _3952 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1829 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _1830 = dot(vec3(_326, _327, _328), vec3(_1823, _1824, _1825));
    float _3963 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1833 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _1834 = dot(vec3(cbLight._m0[_1623].xyz), vec3(_1823, _1824, _1825));
    float _3974 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1838 = _1815 * _1815;
    float _1842 = ((_1833 * _1833) * (_1838 + (-1.0))) + 1.0;
    float _1851 = (exp2(log2(1.0 - (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1852 = 1.0 - _1815;
    float _1862 = (0.5 / (((_1751 * ((_1829 * _1852) + _1815)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _1852) + _1815) * _1829))) * _1829;
    float _3985 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1864 = (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1838 / ((_1842 * _1842) * 3.141590118408203125));
    float _1874 = (((_1851 * cbLight._m0[_1803].x) * _1864) * _1605) + ((((cbLight._m0[_1722].x * _1574) * _1775) * _1789) * _1619);
    float _1875 = (((_1851 * cbLight._m0[_1803].y) * _1864) * _1605) + ((((cbLight._m0[_1722].y * _1575) * _1775) * _1789) * _1619);
    float _1876 = (((_1851 * cbLight._m0[_1803].z) * _1864) * _1605) + ((((cbLight._m0[_1722].z * _1576) * _1775) * _1789) * _1619);
    float _1938;
    float _1940;
    float _1942;
    if (_1659)
    {
        _1938 = _1874;
        _1940 = _1875;
        _1942 = _1876;
    }
    else
    {
        uint _1944 = _1582 + 2u;
        uint _1948 = _1582 + 10u;
        float _1962 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1944].w)) * _329) * 0.949999988079071044921875);
        float _1963 = _1962 * _1962;
        float _1964 = cbLight._m0[_1944].x + _406;
        float _1965 = cbLight._m0[_1944].y + _407;
        float _1966 = cbLight._m0[_1944].z + _408;
        float _1970 = inversesqrt(dot(vec3(_1964, _1965, _1966), vec3(_1964, _1965, _1966)));
        float _1971 = _1970 * _1964;
        float _1972 = _1970 * _1965;
        float _1973 = _1970 * _1966;
        float _1974 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1944].xyz));
        float _3996 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1977 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1978 = dot(vec3(_326, _327, _328), vec3(_1971, _1972, _1973));
        float _4007 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1981 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1982 = dot(vec3(cbLight._m0[_1944].xyz), vec3(_1971, _1972, _1973));
        float _4018 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1986 = _1963 * _1963;
        float _1990 = ((_1981 * _1981) * (_1986 + (-1.0))) + 1.0;
        float _1999 = (exp2(log2(1.0 - (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2000 = 1.0 - _1963;
        float _2010 = (0.5 / (((_1751 * ((_1977 * _2000) + _1963)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _2000) + _1963) * _1977))) * _1977;
        float _4029 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2012 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1986 / ((_1990 * _1990) * 3.141590118408203125));
        float _2013 = isnan(1.0) ? _1597 : (isnan(_1597) ? 1.0 : min(_1597, 1.0));
        _1938 = (((_1999 * cbLight._m0[_1948].x) * _2012) * _2013) + _1874;
        _1940 = (((_1999 * cbLight._m0[_1948].y) * _2012) * _2013) + _1875;
        _1942 = (((_1999 * cbLight._m0[_1948].z) * _2012) * _2013) + _1876;
    }
    float _2048;
    float _2050;
    float _2052;
    if (_1677)
    {
        _2048 = _1938;
        _2050 = _1940;
        _2052 = _1942;
    }
    else
    {
        uint _2059 = _1582 + 3u;
        uint _2063 = _1582 + 11u;
        float _2077 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2059].w)) * _329) * 0.949999988079071044921875);
        float _2078 = _2077 * _2077;
        float _2079 = cbLight._m0[_2059].x + _406;
        float _2080 = cbLight._m0[_2059].y + _407;
        float _2081 = cbLight._m0[_2059].z + _408;
        float _2085 = inversesqrt(dot(vec3(_2079, _2080, _2081), vec3(_2079, _2080, _2081)));
        float _2086 = _2085 * _2079;
        float _2087 = _2085 * _2080;
        float _2088 = _2085 * _2081;
        float _2089 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_2059].xyz));
        float _4045 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2092 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _2093 = dot(vec3(_326, _327, _328), vec3(_2086, _2087, _2088));
        float _4056 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2096 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _2097 = dot(vec3(cbLight._m0[_2059].xyz), vec3(_2086, _2087, _2088));
        float _4067 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2101 = _2078 * _2078;
        float _2105 = ((_2096 * _2096) * (_2101 + (-1.0))) + 1.0;
        float _2114 = (exp2(log2(1.0 - (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2115 = 1.0 - _2078;
        float _2125 = (0.5 / (((_1751 * ((_2092 * _2115) + _2078)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _2115) + _2078) * _2092))) * _2092;
        float _4078 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2127 = (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_2101 / ((_2105 * _2105) * 3.141590118408203125));
        float _2128 = isnan(1.0) ? _1598 : (isnan(_1598) ? 1.0 : min(_1598, 1.0));
        _2048 = (((_2114 * cbLight._m0[_2063].x) * _2127) * _2128) + _1938;
        _2050 = (((_2114 * cbLight._m0[_2063].y) * _2127) * _2128) + _1940;
        _2052 = (((_2114 * cbLight._m0[_2063].z) * _2127) * _2128) + _1942;
    }
    float _2263;
    float _2265;
    float _2267;
    float _2269;
    float _2271;
    float _2273;
    if (_1580.y == 0u)
    {
        float _2203 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2204 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2203;
        float _2205 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2203;
        float _2206 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2203;
        uvec4 _2218 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2219 = _2218.x;
        uint _2230 = uint((float(_2218.y) * floor(float(uint(cbSceneParam._m0[85u].y * _428) / _2219))) + floor(float(uint(cbSceneParam._m0[85u].x * _427) / _2219)));
        float _2240 = (log2(_2206 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2241 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        uint _2244 = uint(isnan(14.0) ? _2241 : (isnan(_2241) ? 14.0 : min(_2241, 14.0)));
        uvec4 _2249 = texelFetch(g_lightClusterGridBuffer, int(((_2244 << 2u) + (_2230 << 6u)) >> 2u));
        uint _2250 = _2249.x;
        uint _2251 = _2218.z;
        float _2389;
        float _2391;
        float _2393;
        float _2395;
        float _2397;
        float _2399;
        if (((((1u << ((_2251 >> 4u) & 15u)) + 4294967295u) & _2250) == 0u) || ((_2251 & 240u) == 0u))
        {
            _2389 = 0.0;
            _2391 = 0.0;
            _2393 = 0.0;
            _2395 = 0.0;
            _2397 = 0.0;
            _2399 = 0.0;
        }
        else
        {
            float _2390;
            float _2392;
            float _2394;
            float _2396;
            float _2398;
            float _2400;
            float _2551 = 0.0;
            float _2552 = 0.0;
            float _2553 = 0.0;
            float _2554 = 0.0;
            float _2555 = 0.0;
            float _2556 = 0.0;
            uint _2557 = 0u;
            uint _2566;
            bool _2567;
            for (;;)
            {
                _2566 = texelFetch(g_lightClassification, int((((_2244 << 5u) + (_2230 << 9u)) + (_2557 << 2u)) >> 2u)).x;
                _2567 = _2566 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2567)
                {
                    frontier_phi_66_pred = _2551;
                    frontier_phi_66_pred_1 = _2556;
                    frontier_phi_66_pred_2 = _2555;
                    frontier_phi_66_pred_3 = _2554;
                    frontier_phi_66_pred_4 = _2553;
                    frontier_phi_66_pred_5 = _2552;
                }
                else
                {
                    float _2696;
                    float _2697;
                    float _2698;
                    float _2699;
                    float _2700;
                    float _2701;
                    uint _2702;
                    _2696 = _2551;
                    _2697 = _2552;
                    _2698 = _2553;
                    _2699 = _2554;
                    _2700 = _2555;
                    _2701 = _2556;
                    _2702 = _2566;
                    float _2623;
                    float _2624;
                    float _2625;
                    float _2626;
                    float _2627;
                    float _2628;
                    for (;;)
                    {
                        uint _2706 = uint(findLSB(_2702)) + (_2557 << 5u);
                        uint _2703 = (_2702 + 4294967295u) & _2702;
                        uint _2708 = _2706 * 48u;
                        vec4 _2722 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2708)).x, texelFetch(g_PointLightRenderingBuffer, int(_2708 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2708 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2708 + 3u)).x));
                        uint _2728 = (_2706 * 48u) + 4u;
                        vec4 _2741 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2728)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 3u)).x));
                        uint _2747 = (_2706 * 48u) + 8u;
                        vec3 _2758 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2747)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 2u)).x));
                        float _2762 = _2722.x - _2204;
                        float _2763 = _2722.y - _2205;
                        float _2764 = _2722.z - _2206;
                        float _2765 = dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764));
                        float _2768 = inversesqrt(_2765);
                        float _2769 = _2768 * _2762;
                        float _2770 = _2768 * _2763;
                        float _2771 = _2768 * _2764;
                        float _2772 = dot(vec3(_448, _451, _454), vec3(_2769, _2770, _2771));
                        float _2777 = 1.0 - (_2765 * _2722.w);
                        float _4104 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                        float _2778 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                        float _2779 = sqrt(_2765) * _2741.w;
                        float _2782 = 1.39999997615814208984375 / (_2779 + 1.39999997615814208984375);
                        float _2783 = _2782 * _2782;
                        float _2786 = ((1.0 - _2783) * _2772) + _2783;
                        float _2789 = _2779 * _2779;
                        float _2793 = ((isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0))) * _2778) / ((_2789 * 0.699999988079071044921875) + 1.0);
                        float _2797 = (-0.0) - _2204;
                        float _2798 = (-0.0) - _2205;
                        float _2799 = (-0.0) - _2206;
                        float _2803 = inversesqrt(dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799)));
                        float _2804 = _2803 * _2797;
                        float _2805 = _2803 * _2798;
                        float _2806 = _2803 * _2799;
                        float _2814 = exp2(log2(1.0 / ((_2789 * 3.5) + 5.0)) * 0.25);
                        float _2815 = 1.0 - _509;
                        float _2822 = sqrt(1.0 - ((1.0 - (_2815 * _2815)) * (1.0 - (_2814 * _2814))));
                        float _2823 = _2822 * _2822;
                        float _2824 = _2823 * _2823;
                        float _2825 = _2804 + _2769;
                        float _2826 = _2805 + _2770;
                        float _2827 = _2806 + _2771;
                        float _2831 = inversesqrt(dot(vec3(_2825, _2826, _2827), vec3(_2825, _2826, _2827)));
                        float _2835 = dot(vec3(_448, _451, _454), vec3(_2804, _2805, _2806));
                        float _4120 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
                        float _2838 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
                        float _2839 = dot(vec3(_448, _451, _454), vec3(_2831 * _2825, _2831 * _2826, _2831 * _2827));
                        float _4131 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
                        float _2842 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
                        float _2846 = ((_2842 * _2842) * (_2824 + (-1.0))) + 1.0;
                        float _2847 = _2782 * _2823;
                        float _2848 = _2847 * _2847;
                        float _2851 = ((1.0 - _2848) * _2772) + _2848;
                        float _4142 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                        float _2852 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                        float _2853 = 1.0 - _2823;
                        float _2863 = (0.5 / (((_2852 * ((_2838 * _2853) + _2823)) + 9.9999999392252902907785028219223e-09) + (((_2852 * _2853) + _2823) * _2838))) * _2852;
                        float _4153 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                        float _2874 = (((_2824 * 3.1415927410125732421875) * (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) / ((_2846 * _2846) * ((_2789 * 2.1991131305694580078125) + 3.141590118408203125))) * _2778;
                        _2626 = (_2793 * _2741.x) + _2699;
                        _2627 = (_2793 * _2741.y) + _2700;
                        _2628 = (_2793 * _2741.z) + _2701;
                        _2623 = (_2874 * _2758.x) + _2696;
                        _2624 = (_2874 * _2758.y) + _2697;
                        _2625 = (_2874 * _2758.z) + _2698;
                        if (_2703 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2696 = _2623;
                            _2697 = _2624;
                            _2698 = _2625;
                            _2699 = _2626;
                            _2700 = _2627;
                            _2701 = _2628;
                            _2702 = _2703;
                        }
                    }
                    frontier_phi_66_pred = _2623;
                    frontier_phi_66_pred_1 = _2628;
                    frontier_phi_66_pred_2 = _2627;
                    frontier_phi_66_pred_3 = _2626;
                    frontier_phi_66_pred_4 = _2625;
                    frontier_phi_66_pred_5 = _2624;
                }
                _2390 = frontier_phi_66_pred;
                _2400 = frontier_phi_66_pred_1;
                _2398 = frontier_phi_66_pred_2;
                _2396 = frontier_phi_66_pred_3;
                _2394 = frontier_phi_66_pred_4;
                _2392 = frontier_phi_66_pred_5;
                uint _2558 = _2557 + 1u;
                if (_2558 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2551 = _2390;
                    _2552 = _2392;
                    _2553 = _2394;
                    _2554 = _2396;
                    _2555 = _2398;
                    _2556 = _2400;
                    _2557 = _2558;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2389 = _2390;
            _2391 = _2392;
            _2393 = _2394;
            _2395 = _2396;
            _2397 = _2398;
            _2399 = _2400;
        }
        uvec4 _2403 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2404 = _2403.z;
        uint _2406 = (_2404 >> 8u) & 15u;
        float _2519;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        if (((4294967295u << _2406) & _2250) == 0u)
        {
            _2519 = _2389;
            _2521 = _2391;
            _2523 = _2393;
            _2525 = _2395;
            _2527 = _2397;
            _2529 = _2399;
        }
        else
        {
            float _2544 = inversesqrt(dot(vec3(_2204, _2205, _2206), vec3(_2204, _2205, _2206)));
            float _2545 = _2544 * _2204;
            float _2546 = _2544 * _2205;
            float _2547 = _2544 * _2206;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2406 < ((_2404 >> 12u) & 15u))
            {
                float _2520;
                float _2522;
                float _2524;
                float _2526;
                float _2528;
                float _2530;
                float _2679 = _2389;
                float _2680 = _2391;
                float _2681 = _2393;
                float _2682 = _2395;
                float _2683 = _2397;
                float _2684 = _2399;
                uint _2685 = _2406;
                uint _2694;
                bool _2695;
                for (;;)
                {
                    _2694 = texelFetch(g_lightClassification, int((((_2244 << 5u) + (_2230 << 9u)) + (_2685 << 2u)) >> 2u)).x;
                    _2695 = _2694 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2695)
                    {
                        frontier_phi_77_pred = _2684;
                        frontier_phi_77_pred_1 = _2683;
                        frontier_phi_77_pred_2 = _2682;
                        frontier_phi_77_pred_3 = _2681;
                        frontier_phi_77_pred_4 = _2680;
                        frontier_phi_77_pred_5 = _2679;
                    }
                    else
                    {
                        float _2888;
                        float _2889;
                        float _2890;
                        float _2891;
                        float _2892;
                        float _2893;
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3189;
                        float _2901 = _2679;
                        float _2902 = _2680;
                        float _2903 = _2681;
                        float _2904 = _2682;
                        float _2905 = _2683;
                        float _2906 = _2684;
                        uint _2907 = _2694;
                        uint _2908;
                        vec4 _2933;
                        float _2934;
                        vec4 _2949;
                        vec3 _2961;
                        vec4 _2977;
                        vec4 _2993;
                        float _3040;
                        bool _3041;
                        for (;;)
                        {
                            uint _2918 = ((_2685 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2907));
                            _2908 = (_2907 + 4294967295u) & _2907;
                            uint _2920 = _2918 * 40u;
                            _2933 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 3u)).x));
                            _2934 = _2933.w;
                            uint _2936 = (_2918 * 40u) + 4u;
                            _2949 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 3u)).x));
                            uint _2951 = (_2918 * 40u) + 8u;
                            _2961 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x));
                            uint _2964 = (_2918 * 40u) + 16u;
                            _2977 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 3u)).x));
                            uint _2980 = (_2918 * 40u) + 20u;
                            _2993 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2980)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 3u)).x));
                            uint _2996 = (_2918 * 40u) + 24u;
                            vec4 _3009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 3u)).x));
                            uint _3015 = (_2918 * 40u) + 28u;
                            vec4 _3028 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 3u)).x));
                            _3040 = fma(_2206, _3028.z, fma(_2205, _3028.y, _3028.x * _2204)) + _3028.w;
                            _3041 = !((fma(_2206, _3009.z, fma(_2205, _3009.y, _3009.x * _2204)) + _3009.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3041)
                            {
                                float _3068 = _2933.x - _2204;
                                float _3069 = _2933.y - _2205;
                                float _3070 = _2933.z - _2206;
                                float _3071 = dot(vec3(_3068, _3069, _3070), vec3(_3068, _3069, _3070));
                                float _3074 = inversesqrt(_3071);
                                float _3075 = _3074 * _3068;
                                float _3076 = _3074 * _3069;
                                float _3077 = _3074 * _3070;
                                float _3081 = 1.0 - (_3071 / (_2934 * _2934));
                                float _4164 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                                float _3082 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                                float _3086 = sqrt(_3071) * _2949.w;
                                float _3088 = 1.39999997615814208984375 / (_3086 + 1.39999997615814208984375);
                                float _3089 = _3088 * _3088;
                                float _3092 = ((1.0 - _3089) * dot(vec3(_3075, _3076, _3077), vec3(_448, _451, _454))) + _3089;
                                float _3095 = _3086 * _3086;
                                float _3099 = (fma(_2206, _2977.z, fma(_2205, _2977.y, _2977.x * _2204)) + _2977.w) / _3040;
                                float _3100 = (fma(_2206, _2993.z, fma(_2205, _2993.y, _2993.x * _2204)) + _2993.w) / _3040;
                                float _3104 = 1.0 - dot(vec2(_3099, _3100), vec2(_3099, _3100));
                                float _4180 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                                float _3105 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
                                float _3106 = _3105 * (((isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0))) * _3082) / ((_3095 * 0.699999988079071044921875) + 1.0));
                                float _3118 = exp2(log2(1.0 / ((_3095 * 3.5) + 5.0)) * 0.25);
                                float _3119 = 1.0 - _509;
                                float _3126 = sqrt(1.0 - ((1.0 - (_3119 * _3119)) * (1.0 - (_3118 * _3118))));
                                float _3127 = _3126 * _3126;
                                float _3128 = _3127 * _3127;
                                float _3129 = _3075 - _2545;
                                float _3130 = _3076 - _2546;
                                float _3131 = _3077 - _2547;
                                float _3135 = inversesqrt(dot(vec3(_3129, _3130, _3131), vec3(_3129, _3130, _3131)));
                                float _3139 = dot(vec3(_448, _451, _454), vec3((-0.0) - _2545, (-0.0) - _2546, (-0.0) - _2547));
                                float _4191 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                                float _3142 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
                                float _3143 = dot(vec3(_448, _451, _454), vec3(_3135 * _3129, _3135 * _3130, _3135 * _3131));
                                float _4202 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                                float _3146 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
                                float _3150 = ((_3146 * _3146) * (_3128 + (-1.0))) + 1.0;
                                float _3151 = _3088 * _3127;
                                float _3152 = _3151 * _3151;
                                float _3158 = ((1.0 - _3152) * dot(vec3(_448, _451, _454), vec3(_3075, _3076, _3077))) + _3152;
                                float _4213 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                                float _3159 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                                float _3160 = 1.0 - _3127;
                                float _3170 = (0.5 / (((_3159 * ((_3142 * _3160) + _3127)) + 9.9999999392252902907785028219223e-09) + (((_3159 * _3160) + _3127) * _3142))) * _3159;
                                float _4224 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                                float _3180 = (_3105 * _3082) * (((_3128 * 3.1415927410125732421875) * (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) / ((_3150 * _3150) * ((_3095 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3106 * _2949.y;
                                frontier_phi_83_pred_1 = _3106 * _2949.x;
                                frontier_phi_83_pred_2 = _3180 * _2961.z;
                                frontier_phi_83_pred_3 = _3180 * _2961.y;
                                frontier_phi_83_pred_4 = _3180 * _2961.x;
                                frontier_phi_83_pred_5 = _3106 * _2949.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3188 = frontier_phi_83_pred;
                            _3187 = frontier_phi_83_pred_1;
                            _3186 = frontier_phi_83_pred_2;
                            _3185 = frontier_phi_83_pred_3;
                            _3184 = frontier_phi_83_pred_4;
                            _3189 = frontier_phi_83_pred_5;
                            _2891 = _3187 + _2904;
                            _2892 = _3188 + _2905;
                            _2893 = _3189 + _2906;
                            _2888 = _3184 + _2901;
                            _2889 = _3185 + _2902;
                            _2890 = _3186 + _2903;
                            if (_2908 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2901 = _2888;
                                _2902 = _2889;
                                _2903 = _2890;
                                _2904 = _2891;
                                _2905 = _2892;
                                _2906 = _2893;
                                _2907 = _2908;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2893;
                        frontier_phi_77_pred_1 = _2892;
                        frontier_phi_77_pred_2 = _2891;
                        frontier_phi_77_pred_3 = _2890;
                        frontier_phi_77_pred_4 = _2889;
                        frontier_phi_77_pred_5 = _2888;
                    }
                    _2530 = frontier_phi_77_pred;
                    _2528 = frontier_phi_77_pred_1;
                    _2526 = frontier_phi_77_pred_2;
                    _2524 = frontier_phi_77_pred_3;
                    _2522 = frontier_phi_77_pred_4;
                    _2520 = frontier_phi_77_pred_5;
                    uint _2686 = _2685 + 1u;
                    if (_2686 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2679 = _2520;
                        _2680 = _2522;
                        _2681 = _2524;
                        _2682 = _2526;
                        _2683 = _2528;
                        _2684 = _2530;
                        _2685 = _2686;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2524;
                frontier_phi_58_59_ladder_1 = _2530;
                frontier_phi_58_59_ladder_2 = _2528;
                frontier_phi_58_59_ladder_3 = _2526;
                frontier_phi_58_59_ladder_4 = _2522;
                frontier_phi_58_59_ladder_5 = _2520;
            }
            else
            {
                frontier_phi_58_59_ladder = _2393;
                frontier_phi_58_59_ladder_1 = _2399;
                frontier_phi_58_59_ladder_2 = _2397;
                frontier_phi_58_59_ladder_3 = _2395;
                frontier_phi_58_59_ladder_4 = _2391;
                frontier_phi_58_59_ladder_5 = _2389;
            }
            _2519 = frontier_phi_58_59_ladder_5;
            _2521 = frontier_phi_58_59_ladder_4;
            _2523 = frontier_phi_58_59_ladder;
            _2525 = frontier_phi_58_59_ladder_3;
            _2527 = frontier_phi_58_59_ladder_2;
            _2529 = frontier_phi_58_59_ladder_1;
        }
        float _2534 = isnan(1.0) ? _493 : (isnan(_493) ? 1.0 : min(_493, 1.0));
        _2263 = (_2534 * _2525) + _1715;
        _2265 = (_2534 * _2527) + _1717;
        _2267 = (_2534 * _2529) + _1719;
        _2269 = ((_2519 * 0.039999999105930328369140625) * _2534) + _2048;
        _2271 = ((_2521 * 0.039999999105930328369140625) * _2534) + _2050;
        _2273 = ((_2523 * 0.039999999105930328369140625) * _2534) + _2052;
    }
    else
    {
        _2263 = _1715;
        _2265 = _1717;
        _2267 = _1719;
        _2269 = _2048;
        _2271 = _2050;
        _2273 = _2052;
    }
    uint _2279 = _469 + uint(cbMatDynParam._m0[0u].w);
    float _2288 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _289.x) * _312) * cbInstanceData._m0[_2279].x;
    float _2292 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _289.y) * _312) * cbInstanceData._m0[_2279].y;
    float _2296 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _289.z) * _312) * cbInstanceData._m0[_2279].z;
    float _4240 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _4251 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _4262 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _2313 = (((isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_2263 + ((isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))) * _493))) + ((_2269 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _1331)) * cbPerFrame._m0[3u].x)) + _2288;
    float _2315 = (_2292 + ((_2271 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _1331)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_2265 + ((isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))) * _493)));
    float _2317 = (_2296 + ((_2273 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _1331)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_2267 + ((isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))) * _493)));
    float _2318 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2319 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2320 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2326 = cbMtdParam._m0[2u].x * _2288;
    float _2327 = cbMtdParam._m0[2u].y * _2292;
    float _2328 = cbMtdParam._m0[2u].z * _2296;
    float _4288 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2330 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    uint _2331 = _467 + 6u;
    float _2339 = _427 / cbSceneParam._m0[86u].x;
    float _2340 = _428 / cbSceneParam._m0[86u].y;
    vec4 _2354 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2339, _2340, (log2((isnan(cbSceneParam._m0[77u].w) ? _348 : (isnan(_348) ? cbSceneParam._m0[77u].w : min(_348, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2356 = _2354.x;
    float _2357 = _2354.y;
    float _2358 = _2354.z;
    float _2359 = _2354.w;
    float _2452;
    float _2454;
    float _2456;
    float _2458;
    if (_348 > cbSceneParam._m0[78u].w)
    {
        float _2414 = isnan(_348) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _348 : min(cbSceneParam._m0[80u].w, _348));
        float _2415 = _2414 / _348;
        float _2426 = _2415 * _399;
        float _2427 = _400 * _2415;
        float _2428 = (-0.0) - _2427;
        float _2430 = _2415 * _401;
        float _2432 = (cbSceneParam._m0[77u].w * _2428) / _2414;
        float _2433 = _2432 + cbSceneParam._m0[79u].w;
        float _2434 = cbSceneParam._m0[79u].w - _2427;
        float _2440 = sqrt(((_2426 * _2426) + (_2427 * _2427)) + (_2430 * _2430));
        float _2443 = (1.0 - (cbSceneParam._m0[77u].w / _2414)) * _2440;
        float _2448 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2450 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2636;
        if (abs((_2428 - _2432) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2636 = ((((_2433 > 0.0) ? exp2(_2448 * _2433) : (2.0 - exp2(_2450 * _2433))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2443;
        }
        else
        {
            float _2580 = 1.0 / cbSceneParam._m0[80u].x;
            float _2581 = isnan(_2434) ? _2433 : (isnan(_2433) ? _2434 : max(_2433, _2434));
            float _2582 = isnan(_2434) ? _2433 : (isnan(_2433) ? _2434 : min(_2433, _2434));
            float _2591 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : min(_2581, 0.0));
            float _2592 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : min(_2582, 0.0));
            _2636 = ((abs(_2440 / _2428) * cbSceneParam._m0[80u].y) * ((((_2591 - _2592) * 2.0) - ((exp2(_2448 * (isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0)))) - exp2(_2448 * (isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0))))) * _2580)) - ((exp2(_2450 * _2591) - exp2(_2450 * _2592)) * _2580))) + (_2443 * cbSceneParam._m0[80u].z);
        }
        vec4 _2638 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2339, _2340, 1.0), 0.0);
        float _2647 = exp2((_2636 * (-1.44269502162933349609375)) * (1.0 - _2638.w));
        float _2648 = log2(_2647);
        float _2664 = log2(_2359);
        _2452 = (exp2(_2664 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2648 * cbSceneParam._m0[78u].x)) * _2638.x) / cbSceneParam._m0[78u].x)) + _2356;
        _2454 = (exp2(_2664 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2648 * cbSceneParam._m0[78u].y)) * _2638.y) / cbSceneParam._m0[78u].y)) + _2357;
        _2456 = (exp2(_2664 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2648 * cbSceneParam._m0[78u].z)) * _2638.z) / cbSceneParam._m0[78u].z)) + _2358;
        _2458 = _2647 * _2359;
    }
    else
    {
        _2452 = _2356;
        _2454 = _2357;
        _2456 = _2358;
        _2458 = _2359;
    }
    bool _2674;
    vec4 _2468;
    vec4 _2490;
    float _2492;
    float _2496;
    float _2497;
    float _2498;
    float _2501;
    float _2504;
    float _2507;
    float _2508;
    bool _2518;
    for (;;)
    {
        _2468 = cbMatDynParam._m0[0u];
        float _2470 = roundEven(_2468.y);
        bool _2471 = _2470 == 3.0;
        float _2472 = log2(_2458);
        float _2476 = exp2(_2472 * cbSceneParam._m0[78u].x);
        float _2477 = exp2(_2472 * cbSceneParam._m0[78u].y);
        float _2478 = exp2(_2472 * cbSceneParam._m0[78u].z);
        float _2479 = _2476 * _2318;
        float _2480 = _2477 * _2319;
        float _2481 = _2478 * _2320;
        float _2488 = _415 + (-0.5);
        _2490 = cbMtdParam._m0[1u];
        _2492 = _2490.y * _2488;
        float _2495 = (_2470 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2496 = _2495 * (_2471 ? _2479 : (_2479 + (cbSceneParam._m0[72u].w * _2452)));
        _2497 = _2495 * (_2471 ? _2480 : (_2480 + (cbSceneParam._m0[72u].w * _2454)));
        _2498 = _2495 * (_2471 ? _2481 : (_2481 + (cbSceneParam._m0[72u].w * _2456)));
        _2501 = ((_2326 * _2330) * _2476) * _2495;
        _2504 = ((_2327 * _2330) * _2477) * _2495;
        _2507 = ((_2328 * _2330) * _2478) * _2495;
        _2508 = _2488 * 0.999000012874603271484375;
        _2518 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2518)
        {
            if ((cbInstanceData._m0[_467 + 7u].x + _2508) < 0.5)
            {
                _2674 = true;
                break;
            }
        }
        uint _2615 = _469 + uint(_2468.w);
        if ((cbInstanceData._m0[_2615].w < 1.0) && ((cbInstanceData._m0[_2615].w + _2508) < 0.5))
        {
            _2674 = true;
            break;
        }
        if ((_2492 + 1.0) < _2490.x)
        {
            _2674 = true;
            break;
        }
        _2674 = false;
        break;
    }
    float _2879;
    if (_2674)
    {
        discard_state = true;
        _2879 = 0.0;
    }
    else
    {
        _2879 = cbInstanceData._m0[_2331].w;
    }
    SV_Target.x = _2496;
    SV_Target.y = _2497;
    SV_Target.z = _2498;
    SV_Target.w = _2879;
    SV_Target_1.x = _2501;
    SV_Target_1.y = _2504;
    SV_Target_1.z = _2507;
    SV_Target_1.w = cbInstanceData._m0[_2331].w;
    discard_exit();
}


