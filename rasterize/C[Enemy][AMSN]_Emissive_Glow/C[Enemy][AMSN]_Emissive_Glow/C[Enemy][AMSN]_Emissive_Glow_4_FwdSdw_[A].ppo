#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _926;
float _3641;
float _3642;
float _3643;
float _3644;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _234 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _240 = _234.x * cbMtdParam._m0[9u].x;
    float _241 = _234.y * cbMtdParam._m0[9u].y;
    float _242 = _234.z * cbMtdParam._m0[9u].z;
    vec4 _254 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _256 = _254.x;
    vec4 _268 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _272 = _268.z;
    float _276 = (_268.x * 2.0) + (-1.0);
    float _278 = (_268.y * 2.0) + (-1.0);
    float _279 = dot(vec2(_276, _278), vec2(_276, _278));
    float _3653 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _285 = sqrt(1.0 - (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))));
    vec4 _322 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _329 = fma(_285, _205 * NORMAL.x, fma(_278, _212 * TANGENT.x, (_198 * _191) * _276));
    float _332 = fma(_285, _205 * NORMAL.y, fma(_278, _212 * TANGENT.y, (_198 * _192) * _276));
    float _335 = fma(_285, _205 * NORMAL.z, fma(_278, _212 * TANGENT.z, (_198 * _193) * _276));
    float _339 = inversesqrt(dot(vec3(_329, _332, _335), vec3(_329, _332, _335)));
    float _340 = _339 * _329;
    float _341 = _339 * _332;
    float _342 = _339 * _335;
    float _3664 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _343 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _3675 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3686 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3697 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3708 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _347 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _363 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _404 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _414 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _404);
    float _415 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _404);
    float _416 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _404);
    float _420 = inversesqrt(dot(vec3(_414, _415, _416), vec3(_414, _415, _416)));
    float _421 = _414 * _420;
    float _422 = _415 * _420;
    float _423 = _416 * _420;
    vec4 _428 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _430 = _428.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _605 = sqrt(((_414 * _414) + (_415 * _415)) + (_416 * _416));
        float _611 = (cbMatDynParam._m0[5u].x * _605) + cbMatDynParam._m0[5u].y;
        float _3719 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
        float _612 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _616 = (cbMatDynParam._m0[5u].z * _605) + cbMatDynParam._m0[5u].w;
        float _3730 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) - _612)) + _612) < ((_430 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _442 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _443 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _463 = fma(_342, cbSceneParam._m0[5u].z, fma(_341, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _340));
    float _466 = fma(_342, cbSceneParam._m0[6u].z, fma(_341, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _340));
    float _469 = fma(_342, cbSceneParam._m0[7u].z, fma(_341, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _340));
    uint _482 = uint(roundEven(NORMAL.w)) * 13u;
    uint _483 = _482 + 9u;
    uint _484 = _483 + uint(cbMatDynParam._m0[0u].w);
    float _490 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0)))) * cbInstanceData._m0[_484].x;
    float _491 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0)))) * cbInstanceData._m0[_484].y;
    float _492 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0)))) * cbInstanceData._m0[_484].z;
    float _3741 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _493 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _3752 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _494 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _3763 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _495 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _496 = 1.0 - _347;
    float _497 = _493 * _496;
    float _498 = _494 * _496;
    float _499 = _495 * _496;
    float _504 = (_493 + (-0.039999999105930328369140625)) * _347;
    float _505 = (_494 + (-0.039999999105930328369140625)) * _347;
    float _506 = (_495 + (-0.039999999105930328369140625)) * _347;
    float _507 = _504 + 0.039999999105930328369140625;
    float _509 = _505 + 0.039999999105930328369140625;
    float _510 = _506 + 0.039999999105930328369140625;
    vec4 _519 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _442, cbSceneParam._m0[86u].y * _443));
    float _522 = _519.x * TEXCOORD.z;
    float _523 = dot(vec3(_340, _341, _342), vec3(_421, _422, _423));
    float _526 = _523 * 2.0;
    float _530 = (_526 * _340) - _421;
    float _531 = (_526 * _341) - _422;
    float _532 = (_526 * _342) - _423;
    float _536 = abs(dot(vec3(_421, _422, _423), vec3(_340, _341, _342)));
    float _3774 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _538 = sqrt(_343);
    float _551 = exp2((_538 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_538 * 3.0));
    float _557 = (1.0 - _551) * ((_538 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _558 = _551 * _538;
    float _586 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _590 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _925;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _650 = fma(_594, cbModelParam._m0[26u].z, fma(_590, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _586));
        float _654 = fma(_594, cbModelParam._m0[27u].z, fma(_590, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _586));
        float _658 = fma(_594, cbModelParam._m0[28u].z, fma(_590, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _586));
        float _683 = _586 + _340;
        float _684 = _590 + _341;
        float _685 = _594 + _342;
        float _695 = fma(_685, cbModelParam._m0[26u].z, fma(_684, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _683)) - _650;
        float _696 = fma(_685, cbModelParam._m0[27u].z, fma(_684, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _683)) - _654;
        float _697 = fma(_685, cbModelParam._m0[28u].z, fma(_684, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _683)) - _658;
        float _701 = inversesqrt(dot(vec3(_695, _696, _697), vec3(_695, _696, _697)));
        float _714 = ((_701 * _695) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_650 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _715 = ((_701 * _696) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_654 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _716 = ((_701 * _697) / cbModelParam._m0[34u].z) + ((((((_658 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _719 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        vec4 _726 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        vec4 _733 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        vec4 _740 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        float _753 = exp2((_719.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _753 * (_719.x + (-0.5));
        float _755 = _753 * (_719.y + (-0.5));
        float _756 = _753 * (_719.z + (-0.5));
        float _763 = exp2((_726.w + (-0.5)) * 20.0) * 2.0;
        float _764 = _763 * (_726.x + (-0.5));
        float _765 = _763 * (_726.y + (-0.5));
        float _766 = _763 * (_726.z + (-0.5));
        float _773 = exp2((_733.w + (-0.5)) * 20.0) * 2.0;
        float _774 = _773 * (_733.x + (-0.5));
        float _775 = _773 * (_733.y + (-0.5));
        float _776 = _773 * (_733.z + (-0.5));
        float _783 = exp2((_740.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_740.x + (-0.5));
        float _785 = _783 * (_740.y + (-0.5));
        float _786 = _783 * (_740.z + (-0.5));
        float _787 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _788 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _789 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _790 = _754 * 0.5;
        float _791 = _764 * 0.5;
        float _792 = _774 * 0.5;
        float _793 = dot(vec3(_790, _791, _792), vec3(_790, _791, _792));
        float _798 = (_793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_793);
        float _807 = (dot(vec3(_340, _341, _342), vec3(_798 * _790, _798 * _791, _798 * _792)) + 1.0) * 0.5;
        float _3800 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _817 = sqrt(((_791 * _791) + (_790 * _790)) + (_792 * _792)) / (_787 + 9.9999997473787516355514526367188e-06);
        float _3811 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _819 = _818 * 2.0;
        float _823 = (1.0 - _818) / (_818 + 1.0);
        float _3822 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _833 = ((((1.0 - _824) * (_819 + 2.0)) * exp2(log2(isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_819 + 1.0))) + _824) * _787;
        float _834 = _755 * 0.5;
        float _835 = _765 * 0.5;
        float _836 = _775 * 0.5;
        float _837 = dot(vec3(_834, _835, _836), vec3(_834, _835, _836));
        float _842 = (_837 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_837);
        float _850 = (dot(vec3(_340, _341, _342), vec3(_842 * _834, _842 * _835, _842 * _836)) + 1.0) * 0.5;
        float _3833 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _859 = sqrt(((_835 * _835) + (_834 * _834)) + (_836 * _836)) / (_788 + 9.9999997473787516355514526367188e-06);
        float _3844 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _861 = _860 * 2.0;
        float _865 = (1.0 - _860) / (_860 + 1.0);
        float _3855 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _875 = ((((1.0 - _866) * (_861 + 2.0)) * exp2(log2(isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_861 + 1.0))) + _866) * _788;
        float _876 = _756 * 0.5;
        float _877 = _766 * 0.5;
        float _878 = _776 * 0.5;
        float _879 = dot(vec3(_876, _877, _878), vec3(_876, _877, _878));
        float _884 = (_879 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_879);
        float _892 = (dot(vec3(_340, _341, _342), vec3(_884 * _876, _884 * _877, _884 * _878)) + 1.0) * 0.5;
        float _3866 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _901 = sqrt(((_877 * _877) + (_876 * _876)) + (_878 * _878)) / (_789 + 9.9999997473787516355514526367188e-06);
        float _3877 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _903 = _902 * 2.0;
        float _907 = (1.0 - _902) / (_902 + 1.0);
        float _3888 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _917 = ((((1.0 - _908) * (_903 + 2.0)) * exp2(log2(isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_903 + 1.0))) + _908) * _789;
        _925 = _756;
        _927 = _755;
        _928 = _754;
        _929 = _766;
        _930 = _765;
        _931 = _764;
        _932 = _776;
        _933 = _775;
        _934 = _774;
        _935 = _789;
        _936 = _788;
        _937 = _787;
        _938 = cbModelParam._m0[36u].z * (isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0)));
        _939 = cbModelParam._m0[36u].z * (isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0)));
        _940 = cbModelParam._m0[36u].z * (isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0)));
    }
    else
    {
        _925 = _926;
        _927 = _926;
        _928 = _926;
        _929 = _926;
        _930 = _926;
        _931 = _926;
        _932 = _926;
        _933 = _926;
        _934 = _926;
        _935 = _926;
        _936 = _926;
        _937 = _926;
        _938 = 0.0;
        _939 = 0.0;
        _940 = 0.0;
    }
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _969 = fma(_594, cbModelParam._m0[30u].z, fma(_590, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _586));
        float _973 = fma(_594, cbModelParam._m0[31u].z, fma(_590, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _586));
        float _977 = fma(_594, cbModelParam._m0[32u].z, fma(_590, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _586));
        float _1000 = _586 + _340;
        float _1001 = _590 + _341;
        float _1002 = _594 + _342;
        float _1012 = fma(_1002, cbModelParam._m0[30u].z, fma(_1001, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1000)) - _969;
        float _1013 = fma(_1002, cbModelParam._m0[31u].z, fma(_1001, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1000)) - _973;
        float _1014 = fma(_1002, cbModelParam._m0[32u].z, fma(_1001, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1000)) - _977;
        float _1018 = inversesqrt(dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014)));
        float _1031 = ((_1018 * _1012) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_969 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1032 = ((_1018 * _1013) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_973 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1033 = ((_1018 * _1014) / cbModelParam._m0[35u].z) + ((((((_977 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        float _1068 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1035.x + (-0.5));
        float _1070 = _1068 * (_1035.y + (-0.5));
        float _1071 = _1068 * (_1035.z + (-0.5));
        float _1078 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1042.x + (-0.5));
        float _1080 = _1078 * (_1042.y + (-0.5));
        float _1081 = _1078 * (_1042.z + (-0.5));
        float _1088 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1049.x + (-0.5));
        float _1090 = _1088 * (_1049.y + (-0.5));
        float _1091 = _1088 * (_1049.z + (-0.5));
        float _1098 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1056.x + (-0.5));
        float _1100 = _1098 * (_1056.y + (-0.5));
        float _1101 = _1098 * (_1056.z + (-0.5));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = _1069 * 0.5;
        float _1106 = _1079 * 0.5;
        float _1107 = _1089 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_340, _341, _342), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3951 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1132 + 1.0))) + _1137) * _1102;
        float _1147 = _1070 * 0.5;
        float _1148 = _1080 * 0.5;
        float _1149 = _1090 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_340, _341, _342), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3984 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1174 + 1.0))) + _1179) * _1103;
        float _1189 = _1071 * 0.5;
        float _1190 = _1081 * 0.5;
        float _1191 = _1091 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_340, _341, _342), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _4017 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1216 + 1.0))) + _1221) * _1104;
        _1238 = _1071;
        _1239 = _1070;
        _1240 = _1069;
        _1241 = _1081;
        _1242 = _1080;
        _1243 = _1079;
        _1244 = _1091;
        _1245 = _1090;
        _1246 = _1089;
        _1247 = _1104;
        _1248 = _1103;
        _1249 = _1102;
        _1250 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
        _1251 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
        _1252 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
    }
    else
    {
        _1238 = _926;
        _1239 = _926;
        _1240 = _926;
        _1241 = _926;
        _1242 = _926;
        _1243 = _926;
        _1244 = _926;
        _1245 = _926;
        _1246 = _926;
        _1247 = _926;
        _1248 = _926;
        _1249 = _926;
        _1250 = 0.0;
        _1251 = 0.0;
        _1252 = 0.0;
    }
    float _1262 = (cbModelParam._m0[1u].x * (_1250 - _938)) + _938;
    float _1263 = (cbModelParam._m0[1u].x * (_1251 - _939)) + _939;
    float _1264 = (cbModelParam._m0[1u].x * (_1252 - _940)) + _940;
    float _1285 = fma(_1264, cbSceneParam._m0[89u].z, fma(_1263, cbSceneParam._m0[89u].y, _1262 * cbSceneParam._m0[89u].x));
    float _1288 = fma(_1264, cbSceneParam._m0[90u].z, fma(_1263, cbSceneParam._m0[90u].y, _1262 * cbSceneParam._m0[90u].x));
    float _1291 = fma(_1264, cbSceneParam._m0[91u].z, fma(_1263, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1262));
    float _1306 = _530 * 0.5;
    float _1307 = _531 * 0.5;
    float _1308 = _532 * 0.5;
    float _1309 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_1240, _1243, _1246, _1249));
    float _1312 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_1239, _1242, _1245, _1248));
    float _1315 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_1238, _1241, _1244, _1247));
    float _1349;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1322 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_925, _929, _932, _935));
        float _1326 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_927, _930, _933, _936));
        float _1330 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_928, _931, _934, _937));
        float _1337 = dot(vec4(cbModelParam._m0[39u]), vec4(_1306, _1307, _1308, 1.0));
        _1349 = dot(vec3(isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)), isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)), isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1337) ? 0.0 : (isnan(0.0) ? _1337 : max(0.0, _1337))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1349 = 1.0;
    }
    float _1360;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1351 = dot(vec4(cbModelParam._m0[40u]), vec4(_1306, _1307, _1308, 1.0));
        _1360 = dot(vec3(isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)), isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1351) ? 0.0 : (isnan(0.0) ? _1351 : max(0.0, _1351))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1360 = 1.0;
    }
    float _1364 = (_1360 * cbModelParam._m0[1u].x) + (_1349 * (1.0 - cbModelParam._m0[1u].x));
    float _1374 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _343);
    float _1375 = isnan(_1374) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1374 : min(cbModelParam._m0[25u].z, _1374));
    float _1456;
    float _1458;
    float _1460;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1423 = fma(_594, cbModelParam._m0[13u].z, fma(_590, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _586)) + cbModelParam._m0[13u].w;
        float _1427 = fma(_594, cbModelParam._m0[14u].z, fma(_590, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _586)) + cbModelParam._m0[14u].w;
        float _1431 = fma(_594, cbModelParam._m0[15u].z, fma(_590, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _586)) + cbModelParam._m0[15u].w;
        float _1434 = fma(_532, cbModelParam._m0[13u].z, fma(_531, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _530));
        float _1437 = fma(_532, cbModelParam._m0[14u].z, fma(_531, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _530));
        float _1440 = fma(_532, cbModelParam._m0[15u].z, fma(_531, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _530));
        float _1468;
        if (_1434 > 0.0)
        {
            _1468 = abs((1.0 - _1423) / _1434);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1434 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1423 + 1.0) / _1434);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1468 = frontier_phi_17_15_ladder;
        }
        float _1642;
        if (_1437 > 0.0)
        {
            _1642 = abs((1.0 - _1427) / _1437);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1437 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1427 + 1.0) / _1437);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1642 = frontier_phi_26_22_ladder;
        }
        float _1938;
        if (_1440 > 0.0)
        {
            _1938 = abs((1.0 - _1431) / _1440);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1440 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1431 + 1.0) / _1440);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1938 = frontier_phi_38_33_ladder;
        }
        float _1940 = isnan(_1642) ? _1468 : (isnan(_1468) ? _1642 : min(_1468, _1642));
        float _1941 = isnan(_1938) ? _1940 : (isnan(_1940) ? _1938 : min(_1940, _1938));
        float _1945 = (_1941 * _1434) + _1423;
        float _1946 = (_1941 * _1437) + _1427;
        float _1947 = (_1941 * _1440) + _1431;
        float _1948 = _1941 * 9.9999997473787516355514526367188e-05;
        float _1950 = (-1.0) - _1948;
        float _1952 = _1948 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1947 > _1952) || ((_1947 < _1950) || ((_1946 > _1952) || ((_1946 < _1950) || ((_1945 < _1950) || (_1945 > _1952))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2092 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1947, cbModelParam._m0[9u].z, fma(_1946, cbModelParam._m0[9u].y, _1945 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1947, cbModelParam._m0[10u].z, fma(_1946, cbModelParam._m0[10u].y, _1945 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1947, cbModelParam._m0[11u].z, fma(_1946, cbModelParam._m0[11u].y, _1945 * cbModelParam._m0[11u].x))), _1375);
            frontier_phi_16_38_ladder = _2092.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2092.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2092.x * cbModelParam._m0[1u].y;
        }
        _1456 = frontier_phi_16_38_ladder_2;
        _1458 = frontier_phi_16_38_ladder_1;
        _1460 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1444 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_530, _531, _532), _1375);
        _1456 = _1444.x * cbModelParam._m0[1u].y;
        _1458 = _1444.y * cbModelParam._m0[1u].y;
        _1460 = _1444.z * cbModelParam._m0[1u].y;
    }
    float _1464 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _343);
    float _1465 = isnan(_1464) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1464 : min(cbModelParam._m0[25u].w, _1464));
    float _1557;
    float _1559;
    float _1561;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1521 = fma(_594, cbModelParam._m0[21u].z, fma(_590, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _586)) + cbModelParam._m0[21u].w;
        float _1525 = fma(_594, cbModelParam._m0[22u].z, fma(_590, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _586)) + cbModelParam._m0[22u].w;
        float _1529 = fma(_594, cbModelParam._m0[23u].z, fma(_590, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _586)) + cbModelParam._m0[23u].w;
        float _1532 = fma(_532, cbModelParam._m0[21u].z, fma(_531, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _530));
        float _1535 = fma(_532, cbModelParam._m0[22u].z, fma(_531, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _530));
        float _1538 = fma(_532, cbModelParam._m0[23u].z, fma(_531, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _530));
        float _1647;
        if (_1532 > 0.0)
        {
            _1647 = abs((1.0 - _1521) / _1532);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1521 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1647 = frontier_phi_28_24_ladder;
        }
        float _1965;
        if (_1535 > 0.0)
        {
            _1965 = abs((1.0 - _1525) / _1535);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1525 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1965 = frontier_phi_40_35_ladder;
        }
        float _2303;
        if (_1538 > 0.0)
        {
            _2303 = abs((1.0 - _1529) / _1538);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1529 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2303 = frontier_phi_50_47_ladder;
        }
        float _2305 = isnan(_1965) ? _1647 : (isnan(_1647) ? _1965 : min(_1647, _1965));
        float _2306 = isnan(_2303) ? _2305 : (isnan(_2305) ? _2303 : min(_2305, _2303));
        float _2310 = (_2306 * _1532) + _1521;
        float _2311 = (_2306 * _1535) + _1525;
        float _2312 = (_2306 * _1538) + _1529;
        float _2313 = _2306 * 9.9999997473787516355514526367188e-05;
        float _2314 = (-1.0) - _2313;
        float _2316 = _2313 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2312 > _2316) || ((_2312 < _2314) || ((_2311 > _2316) || ((_2311 < _2314) || ((_2310 < _2314) || (_2310 > _2316))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2434 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2312, cbModelParam._m0[17u].z, fma(_2311, cbModelParam._m0[17u].y, _2310 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2312, cbModelParam._m0[18u].z, fma(_2311, cbModelParam._m0[18u].y, _2310 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2312, cbModelParam._m0[19u].z, fma(_2311, cbModelParam._m0[19u].y, _2310 * cbModelParam._m0[19u].x))), _1465);
            frontier_phi_25_50_ladder = _2434.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2434.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2434.x * cbModelParam._m0[1u].z;
        }
        _1557 = frontier_phi_25_50_ladder_2;
        _1559 = frontier_phi_25_50_ladder_1;
        _1561 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1541 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_530, _531, _532), _1465);
        _1557 = _1541.x * cbModelParam._m0[1u].z;
        _1559 = _1541.y * cbModelParam._m0[1u].z;
        _1561 = _1541.z * cbModelParam._m0[1u].z;
    }
    float _1574 = (((_557 * _507) + _558) * _522) * ((cbModelParam._m0[1u].w * (_1557 - _1456)) + _1456);
    float _1576 = (((_557 * _509) + _558) * _522) * ((cbModelParam._m0[1u].w * (_1559 - _1458)) + _1458);
    float _1578 = (((_557 * _510) + _558) * _522) * ((cbModelParam._m0[1u].w * (_1561 - _1460)) + _1460);
    float _1581 = fma(_1578, cbSceneParam._m0[89u].z, fma(_1576, cbSceneParam._m0[89u].y, _1574 * cbSceneParam._m0[89u].x));
    float _1584 = fma(_1578, cbSceneParam._m0[90u].z, fma(_1576, cbSceneParam._m0[90u].y, _1574 * cbSceneParam._m0[90u].x));
    float _1587 = fma(_1578, cbSceneParam._m0[91u].z, fma(_1576, cbSceneParam._m0[91u].y, _1574 * cbSceneParam._m0[91u].x));
    float _1621 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1625 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1629 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1633 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1634 = _1621 / _1633;
    float _1635 = _1625 / _1633;
    float _1636 = _1629 / _1633;
    float _1783;
    float _1784;
    float _1785;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1663 = ((uint(_1636 > cbSceneParam._m0[59u].y) + uint(_1636 > cbSceneParam._m0[59u].x)) + uint(_1636 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1664 = _1663 + 43u;
        uint _1672 = _1663 + 44u;
        uint _1680 = _1663 + 45u;
        uint _1688 = _1663 + 46u;
        float _1699 = fma(_1633, cbSceneParam._m0[_1664].w, fma(_1629, cbSceneParam._m0[_1664].z, fma(_1625, cbSceneParam._m0[_1664].y, _1621 * cbSceneParam._m0[_1664].x)));
        float _1703 = fma(_1633, cbSceneParam._m0[_1672].w, fma(_1629, cbSceneParam._m0[_1672].z, fma(_1625, cbSceneParam._m0[_1672].y, _1621 * cbSceneParam._m0[_1672].x)));
        float _1711 = fma(_1633, cbSceneParam._m0[_1688].w, fma(_1629, cbSceneParam._m0[_1688].z, fma(_1625, cbSceneParam._m0[_1688].y, _1621 * cbSceneParam._m0[_1688].x)));
        float _1716 = cbSceneParam._m0[33u].z * _1711;
        float _1718 = cbSceneParam._m0[33u].w * _1711;
        float _1721 = fma(_1633, cbSceneParam._m0[_1680].w, fma(_1629, cbSceneParam._m0[_1680].z, fma(_1625, cbSceneParam._m0[_1680].y, _1621 * cbSceneParam._m0[_1680].x))) / _1711;
        float _1769 = (cbSceneParam._m0[33u].x - sqrt(((_1635 * _1635) + (_1634 * _1634)) + (_1636 * _1636))) * cbSceneParam._m0[33u].y;
        float _4143 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1776 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1716 + _1699) / _1711, (_1718 + _1703) / _1711), _1721), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1718 + _1699) / _1711, (_1703 - _1716) / _1711), _1721), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1699 - _1716) / _1711, (_1703 - _1718) / _1711), _1721), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1699 - _1718) / _1711, (_1716 + _1703) / _1711), _1721), 0.0)).x), vec4(0.25)));
        _1783 = 1.0 - (_1776 * cbSceneParam._m0[34u].x);
        _1784 = 1.0 - (_1776 * cbSceneParam._m0[34u].y);
        _1785 = 1.0 - (_1776 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1783 = 1.0;
        _1784 = 1.0;
        _1785 = 1.0;
    }
    float _1849;
    float _1851;
    float _1853;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1837 = fma(_1633, cbSceneParam._m0[63u].w, fma(_1629, cbSceneParam._m0[63u].z, fma(_1625, cbSceneParam._m0[63u].y, _1621 * cbSceneParam._m0[63u].x)));
        float _1838 = fma(_1633, cbSceneParam._m0[60u].w, fma(_1629, cbSceneParam._m0[60u].z, fma(_1625, cbSceneParam._m0[60u].y, _1621 * cbSceneParam._m0[60u].x))) / _1837;
        float _1839 = fma(_1633, cbSceneParam._m0[61u].w, fma(_1629, cbSceneParam._m0[61u].z, fma(_1625, cbSceneParam._m0[61u].y, _1621 * cbSceneParam._m0[61u].x))) / _1837;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1838 >= cbSceneParam._m0[64u].x) && (_1839 >= cbSceneParam._m0[64u].y)) && (_1838 <= cbSceneParam._m0[64u].z)) && (_1839 <= cbSceneParam._m0[64u].w))
        {
            float _1978 = fma(_1633, cbSceneParam._m0[62u].w, fma(_1629, cbSceneParam._m0[62u].z, fma(_1625, cbSceneParam._m0[62u].y, _1621 * cbSceneParam._m0[62u].x))) / _1837;
            float _1982 = isnan(cbSceneParam._m0[41u].w) ? _1978 : (isnan(_1978) ? cbSceneParam._m0[41u].w : max(_1978, cbSceneParam._m0[41u].w));
            float _2025 = (cbSceneParam._m0[33u].x - sqrt(((_1635 * _1635) + (_1634 * _1634)) + (_1636 * _1636))) * cbSceneParam._m0[33u].y;
            float _4159 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
            float _2032 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1838, cbSceneParam._m0[33u].w + _1839), _1982), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1838, _1839 - cbSceneParam._m0[33u].z), _1982), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1838 - cbSceneParam._m0[33u].z, _1839 - cbSceneParam._m0[33u].w), _1982), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1838 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1839), _1982), 0.0)).x), vec4(0.25)));
            float _2036 = 1.0 - (_2032 * cbSceneParam._m0[34u].x);
            float _2037 = 1.0 - (_2032 * cbSceneParam._m0[34u].y);
            float _2038 = 1.0 - (_2032 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2038) ? _1785 : (isnan(_1785) ? _2038 : min(_1785, _2038));
            frontier_phi_37_36_ladder_1 = isnan(_2037) ? _1784 : (isnan(_1784) ? _2037 : min(_1784, _2037));
            frontier_phi_37_36_ladder_2 = isnan(_2036) ? _1783 : (isnan(_1783) ? _2036 : min(_1783, _2036));
        }
        else
        {
            frontier_phi_37_36_ladder = _1785;
            frontier_phi_37_36_ladder_1 = _1784;
            frontier_phi_37_36_ladder_2 = _1783;
        }
        _1849 = frontier_phi_37_36_ladder_2;
        _1851 = frontier_phi_37_36_ladder_1;
        _1853 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1849 = _1783;
        _1851 = _1784;
        _1853 = _1785;
    }
    uvec4 _1858 = floatBitsToUint(cbInstanceData._m0[_482 + 5u]);
    uint _1860 = _1858.x * 14u;
    uint _1861 = _1860 + 13u;
    float _1868 = _522 + (-1.0);
    float _1873 = (cbLight._m0[_1861].x * _1868) + 1.0;
    float _1874 = (cbLight._m0[_1861].y * _1868) + 1.0;
    float _1875 = (cbLight._m0[_1861].z * _1868) + 1.0;
    float _1876 = (cbLight._m0[_1861].w * _1868) + 1.0;
    uint _1877 = _1860 + 5u;
    float _1883 = isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0));
    uint _1887 = _1860 + 4u;
    float _1897 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
    uint _1901 = _1860 | 1u;
    float _1912 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_340, _341, _342));
    float _1915 = dot(vec3(cbLight._m0[_1901].xyz), vec3(_340, _341, _342));
    float _4195 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _4206 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1920 = (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * 0.3183098733425140380859375;
    float _1922 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * 0.3183098733425140380859375;
    float _1929 = ((cbLight._m0[_1877].x * _1883) * _1922) + (((cbLight._m0[_1887].x * _1849) * _1897) * _1920);
    float _1930 = ((_1883 * cbLight._m0[_1877].y) * _1922) + (((cbLight._m0[_1887].y * _1851) * _1897) * _1920);
    float _1931 = ((_1883 * cbLight._m0[_1877].z) * _1922) + (((cbLight._m0[_1887].z * _1853) * _1897) * _1920);
    uvec4 _1935 = floatBitsToUint(cbLight._m0[_1860 + 12u]);
    bool _1937 = _1935.x == 0u;
    float _2039;
    float _2041;
    float _2043;
    if (_1937)
    {
        _2039 = _1929;
        _2041 = _1930;
        _2043 = _1931;
    }
    else
    {
        uint _2047 = _1860 + 6u;
        float _2063 = (dot(vec3(cbLight._m0[_1860 + 2u].xyz), vec3(_340, _341, _342)) * 0.5) + 0.5;
        float _2064 = _2063 * _2063;
        float _4217 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2065 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _2066 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
        _2039 = (((cbLight._m0[_2047].x * 0.3183098733425140380859375) * _2065) * _2066) + _1929;
        _2041 = (((cbLight._m0[_2047].y * 0.3183098733425140380859375) * _2065) * _2066) + _1930;
        _2043 = (((cbLight._m0[_2047].z * 0.3183098733425140380859375) * _2065) * _2066) + _1931;
    }
    bool _2046 = _1935.y == 0u;
    float _2101;
    float _2103;
    float _2105;
    if (_2046)
    {
        _2101 = _2039;
        _2103 = _2041;
        _2105 = _2043;
    }
    else
    {
        uint _2274 = _1860 + 7u;
        float _2290 = (dot(vec3(cbLight._m0[_1860 + 3u].xyz), vec3(_340, _341, _342)) * 0.5) + 0.5;
        float _2291 = _2290 * _2290;
        float _4233 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2292 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _2293 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
        _2101 = (((cbLight._m0[_2274].x * 0.3183098733425140380859375) * _2292) * _2293) + _2039;
        _2103 = (((cbLight._m0[_2274].y * 0.3183098733425140380859375) * _2292) * _2293) + _2041;
        _2105 = (((cbLight._m0[_2274].z * 0.3183098733425140380859375) * _2292) * _2293) + _2043;
    }
    uint _2108 = _1860 + 8u;
    float _2121 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1860].w)) * _343) * 0.949999988079071044921875);
    float _2122 = _2121 * _2121;
    float _2123 = cbLight._m0[_1860].x + _421;
    float _2124 = cbLight._m0[_1860].y + _422;
    float _2125 = cbLight._m0[_1860].z + _423;
    float _2129 = inversesqrt(dot(vec3(_2123, _2124, _2125), vec3(_2123, _2124, _2125)));
    float _2130 = _2129 * _2123;
    float _2131 = _2129 * _2124;
    float _2132 = _2129 * _2125;
    float _2133 = dot(vec3(_340, _341, _342), vec3(cbLight._m0[_1860].xyz));
    float _4249 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2136 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _4260 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _2137 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _2138 = dot(vec3(_340, _341, _342), vec3(_2130, _2131, _2132));
    float _4271 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2141 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _2142 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_2130, _2131, _2132));
    float _4282 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2146 = _2122 * _2122;
    float _2150 = ((_2141 * _2141) * (_2146 + (-1.0))) + 1.0;
    float _2158 = exp2(log2(1.0 - (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) * 5.0);
    float _2159 = 0.959999978542327880859375 - _504;
    float _2161 = 0.959999978542327880859375 - _505;
    float _2162 = 0.959999978542327880859375 - _506;
    float _2169 = 1.0 - _2122;
    float _2180 = (0.5 / (((_2137 * ((_2136 * _2169) + _2122)) + 9.9999999392252902907785028219223e-09) + (((_2137 * _2169) + _2122) * _2136))) * _2136;
    float _4293 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2182 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_2146 / ((_2150 * _2150) * 3.141590118408203125));
    uint _2196 = _1860 + 9u;
    float _2207 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1901].w)) * _343) * 0.949999988079071044921875);
    float _2208 = _2207 * _2207;
    float _2209 = cbLight._m0[_1901].x + _421;
    float _2210 = cbLight._m0[_1901].y + _422;
    float _2211 = cbLight._m0[_1901].z + _423;
    float _2215 = inversesqrt(dot(vec3(_2209, _2210, _2211), vec3(_2209, _2210, _2211)));
    float _2216 = _2215 * _2209;
    float _2217 = _2215 * _2210;
    float _2218 = _2215 * _2211;
    float _2219 = dot(vec3(_340, _341, _342), vec3(cbLight._m0[_1901].xyz));
    float _4304 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2222 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _2223 = dot(vec3(_340, _341, _342), vec3(_2216, _2217, _2218));
    float _4315 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2226 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _2227 = dot(vec3(cbLight._m0[_1901].xyz), vec3(_2216, _2217, _2218));
    float _4326 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2231 = _2208 * _2208;
    float _2235 = ((_2226 * _2226) * (_2231 + (-1.0))) + 1.0;
    float _2242 = exp2(log2(1.0 - (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) * 5.0);
    float _2249 = 1.0 - _2208;
    float _2259 = (0.5 / (((_2137 * ((_2222 * _2249) + _2208)) + 9.9999999392252902907785028219223e-09) + (((_2137 * _2249) + _2208) * _2222))) * _2222;
    float _4337 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2261 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_2231 / ((_2235 * _2235) * 3.141590118408203125));
    float _2271 = (((((_2242 * _2159) + _507) * cbLight._m0[_2196].x) * _2261) * _1883) + ((((cbLight._m0[_2108].x * _1849) * ((_2158 * _2159) + _507)) * _2182) * _1897);
    float _2272 = (((((_2242 * _2161) + _509) * cbLight._m0[_2196].y) * _2261) * _1883) + ((((cbLight._m0[_2108].y * _1851) * ((_2158 * _2161) + _509)) * _2182) * _1897);
    float _2273 = (((((_2242 * _2162) + _510) * cbLight._m0[_2196].z) * _2261) * _1883) + ((((cbLight._m0[_2108].z * _1853) * ((_2158 * _2162) + _510)) * _2182) * _1897);
    float _2329;
    float _2331;
    float _2333;
    if (_1937)
    {
        _2329 = _2271;
        _2331 = _2272;
        _2333 = _2273;
    }
    else
    {
        uint _2335 = _1860 + 2u;
        uint _2339 = _1860 + 10u;
        float _2353 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2335].w)) * _343) * 0.949999988079071044921875);
        float _2354 = _2353 * _2353;
        float _2355 = cbLight._m0[_2335].x + _421;
        float _2356 = cbLight._m0[_2335].y + _422;
        float _2357 = cbLight._m0[_2335].z + _423;
        float _2361 = inversesqrt(dot(vec3(_2355, _2356, _2357), vec3(_2355, _2356, _2357)));
        float _2362 = _2361 * _2355;
        float _2363 = _2361 * _2356;
        float _2364 = _2361 * _2357;
        float _2365 = dot(vec3(_340, _341, _342), vec3(cbLight._m0[_2335].xyz));
        float _4348 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2368 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _2369 = dot(vec3(_340, _341, _342), vec3(_2362, _2363, _2364));
        float _4359 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2372 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2373 = dot(vec3(cbLight._m0[_2335].xyz), vec3(_2362, _2363, _2364));
        float _4370 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2377 = _2354 * _2354;
        float _2381 = ((_2372 * _2372) * (_2377 + (-1.0))) + 1.0;
        float _2388 = exp2(log2(1.0 - (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) * 5.0);
        float _2395 = 1.0 - _2354;
        float _2405 = (0.5 / (((_2137 * ((_2368 * _2395) + _2354)) + 9.9999999392252902907785028219223e-09) + (((_2137 * _2395) + _2354) * _2368))) * _2368;
        float _4381 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2407 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2377 / ((_2381 * _2381) * 3.141590118408203125));
        float _2408 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
        _2329 = (((((_2388 * _2159) + _507) * cbLight._m0[_2339].x) * _2407) * _2408) + _2271;
        _2331 = (((((_2388 * _2161) + _509) * cbLight._m0[_2339].y) * _2407) * _2408) + _2272;
        _2333 = (((((_2388 * _2162) + _510) * cbLight._m0[_2339].z) * _2407) * _2408) + _2273;
    }
    float _2439;
    float _2441;
    float _2443;
    if (_2046)
    {
        _2439 = _2329;
        _2441 = _2331;
        _2443 = _2333;
    }
    else
    {
        uint _2450 = _1860 + 3u;
        uint _2454 = _1860 + 11u;
        float _2468 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2450].w)) * _343) * 0.949999988079071044921875);
        float _2469 = _2468 * _2468;
        float _2470 = cbLight._m0[_2450].x + _421;
        float _2471 = cbLight._m0[_2450].y + _422;
        float _2472 = cbLight._m0[_2450].z + _423;
        float _2476 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
        float _2477 = _2476 * _2470;
        float _2478 = _2476 * _2471;
        float _2479 = _2476 * _2472;
        float _2480 = dot(vec3(_340, _341, _342), vec3(cbLight._m0[_2450].xyz));
        float _4397 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2483 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _2484 = dot(vec3(_340, _341, _342), vec3(_2477, _2478, _2479));
        float _4408 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2487 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2488 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_2477, _2478, _2479));
        float _4419 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2492 = _2469 * _2469;
        float _2496 = ((_2487 * _2487) * (_2492 + (-1.0))) + 1.0;
        float _2503 = exp2(log2(1.0 - (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)))) * 5.0);
        float _2510 = 1.0 - _2469;
        float _2520 = (0.5 / (((_2137 * ((_2483 * _2510) + _2469)) + 9.9999999392252902907785028219223e-09) + (((_2137 * _2510) + _2469) * _2483))) * _2483;
        float _4430 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2522 = (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2492 / ((_2496 * _2496) * 3.141590118408203125));
        float _2523 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
        _2439 = (((((_2503 * _2159) + _507) * cbLight._m0[_2454].x) * _2522) * _2523) + _2329;
        _2441 = (((((_2503 * _2161) + _509) * cbLight._m0[_2454].y) * _2522) * _2523) + _2331;
        _2443 = (((((_2503 * _2162) + _510) * cbLight._m0[_2454].z) * _2522) * _2523) + _2333;
    }
    float _2589;
    float _2591;
    float _2593;
    float _2595;
    float _2597;
    float _2599;
    if (_1858.y == 0u)
    {
        uvec4 _2544 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2545 = _2544.x;
        uint _2556 = uint((float(_2544.y) * floor(float(uint(cbSceneParam._m0[85u].y * _443) / _2545))) + floor(float(uint(cbSceneParam._m0[85u].x * _442) / _2545)));
        float _2566 = (log2(_1636 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2567 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        uint _2570 = uint(isnan(14.0) ? _2567 : (isnan(_2567) ? 14.0 : min(_2567, 14.0)));
        uvec4 _2575 = texelFetch(g_lightClusterGridBuffer, int(((_2570 << 2u) + (_2556 << 6u)) >> 2u));
        uint _2576 = _2575.x;
        uint _2577 = _2544.z;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        if (((((1u << ((_2577 >> 4u) & 15u)) + 4294967295u) & _2576) == 0u) || ((_2577 & 240u) == 0u))
        {
            _2691 = 0.0;
            _2693 = 0.0;
            _2695 = 0.0;
            _2697 = 0.0;
            _2699 = 0.0;
            _2701 = 0.0;
        }
        else
        {
            float _2692;
            float _2694;
            float _2696;
            float _2698;
            float _2700;
            float _2702;
            float _2853 = 0.0;
            float _2854 = 0.0;
            float _2855 = 0.0;
            float _2856 = 0.0;
            float _2857 = 0.0;
            float _2858 = 0.0;
            uint _2859 = 0u;
            uint _2868;
            bool _2869;
            for (;;)
            {
                _2868 = texelFetch(g_lightClassification, int((((_2570 << 5u) + (_2556 << 9u)) + (_2859 << 2u)) >> 2u)).x;
                _2869 = _2868 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2869)
                {
                    frontier_phi_71_pred = _2858;
                    frontier_phi_71_pred_1 = _2857;
                    frontier_phi_71_pred_2 = _2856;
                    frontier_phi_71_pred_3 = _2855;
                    frontier_phi_71_pred_4 = _2854;
                    frontier_phi_71_pred_5 = _2853;
                }
                else
                {
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    uint _3004;
                    _2998 = _2853;
                    _2999 = _2854;
                    _3000 = _2855;
                    _3001 = _2856;
                    _3002 = _2857;
                    _3003 = _2858;
                    _3004 = _2868;
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    for (;;)
                    {
                        uint _3008 = uint(findLSB(_3004)) + (_2859 << 5u);
                        uint _3005 = (_3004 + 4294967295u) & _3004;
                        uint _3010 = _3008 * 48u;
                        vec4 _3024 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3010)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 3u)).x));
                        uint _3030 = (_3008 * 48u) + 4u;
                        vec4 _3043 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3030)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 3u)).x));
                        uint _3049 = (_3008 * 48u) + 8u;
                        vec3 _3060 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3049)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 2u)).x));
                        float _3064 = _3024.x - _1634;
                        float _3065 = _3024.y - _1635;
                        float _3066 = _3024.z - _1636;
                        float _3067 = dot(vec3(_3064, _3065, _3066), vec3(_3064, _3065, _3066));
                        float _3070 = inversesqrt(_3067);
                        float _3071 = _3070 * _3064;
                        float _3072 = _3070 * _3065;
                        float _3073 = _3070 * _3066;
                        float _3074 = dot(vec3(_463, _466, _469), vec3(_3071, _3072, _3073));
                        float _3079 = 1.0 - (_3067 * _3024.w);
                        float _4456 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                        float _3080 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                        float _3081 = sqrt(_3067) * _3043.w;
                        float _3084 = 1.39999997615814208984375 / (_3081 + 1.39999997615814208984375);
                        float _3085 = _3084 * _3084;
                        float _3088 = ((1.0 - _3085) * _3074) + _3085;
                        float _3091 = _3081 * _3081;
                        float _3095 = ((isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0))) * _3080) / ((_3091 * 0.699999988079071044921875) + 1.0);
                        float _3099 = (-0.0) - _1634;
                        float _3100 = (-0.0) - _1635;
                        float _3101 = (-0.0) - _1636;
                        float _3105 = inversesqrt(dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101)));
                        float _3106 = _3105 * _3099;
                        float _3107 = _3105 * _3100;
                        float _3108 = _3105 * _3101;
                        float _3115 = exp2(log2(1.0 / ((_3091 * 3.5) + 5.0)) * 0.25);
                        float _3116 = 1.0 - _538;
                        float _3123 = sqrt(1.0 - ((1.0 - (_3116 * _3116)) * (1.0 - (_3115 * _3115))));
                        float _3124 = _3123 * _3123;
                        float _3125 = _3124 * _3124;
                        float _3126 = _3106 + _3071;
                        float _3127 = _3107 + _3072;
                        float _3128 = _3108 + _3073;
                        float _3132 = inversesqrt(dot(vec3(_3126, _3127, _3128), vec3(_3126, _3127, _3128)));
                        float _3136 = dot(vec3(_463, _466, _469), vec3(_3106, _3107, _3108));
                        float _4472 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3139 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                        float _3140 = dot(vec3(_463, _466, _469), vec3(_3132 * _3126, _3132 * _3127, _3132 * _3128));
                        float _4483 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3143 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                        float _3147 = ((_3143 * _3143) * (_3125 + (-1.0))) + 1.0;
                        float _3148 = _3084 * _3124;
                        float _3149 = _3148 * _3148;
                        float _3152 = ((1.0 - _3149) * _3074) + _3149;
                        float _4494 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3153 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                        float _3154 = 1.0 - _3124;
                        float _3164 = (0.5 / (((_3153 * ((_3139 * _3154) + _3124)) + 9.9999999392252902907785028219223e-09) + (((_3153 * _3154) + _3124) * _3139))) * _3153;
                        float _4505 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3175 = (((_3125 * 3.1415927410125732421875) * (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) / ((_3147 * _3147) * ((_3091 * 2.1991131305694580078125) + 3.141590118408203125))) * _3080;
                        _2928 = (_3095 * _3043.x) + _3001;
                        _2929 = (_3095 * _3043.y) + _3002;
                        _2930 = (_3095 * _3043.z) + _3003;
                        _2925 = (_3175 * _3060.x) + _2998;
                        _2926 = (_3175 * _3060.y) + _2999;
                        _2927 = (_3175 * _3060.z) + _3000;
                        if (_3005 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2998 = _2925;
                            _2999 = _2926;
                            _3000 = _2927;
                            _3001 = _2928;
                            _3002 = _2929;
                            _3003 = _2930;
                            _3004 = _3005;
                        }
                    }
                    frontier_phi_71_pred = _2930;
                    frontier_phi_71_pred_1 = _2929;
                    frontier_phi_71_pred_2 = _2928;
                    frontier_phi_71_pred_3 = _2927;
                    frontier_phi_71_pred_4 = _2926;
                    frontier_phi_71_pred_5 = _2925;
                }
                _2702 = frontier_phi_71_pred;
                _2700 = frontier_phi_71_pred_1;
                _2698 = frontier_phi_71_pred_2;
                _2696 = frontier_phi_71_pred_3;
                _2694 = frontier_phi_71_pred_4;
                _2692 = frontier_phi_71_pred_5;
                uint _2860 = _2859 + 1u;
                if (_2860 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2853 = _2692;
                    _2854 = _2694;
                    _2855 = _2696;
                    _2856 = _2698;
                    _2857 = _2700;
                    _2858 = _2702;
                    _2859 = _2860;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2691 = _2692;
            _2693 = _2694;
            _2695 = _2696;
            _2697 = _2698;
            _2699 = _2700;
            _2701 = _2702;
        }
        uvec4 _2705 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2706 = _2705.z;
        uint _2708 = (_2706 >> 8u) & 15u;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        if (((4294967295u << _2708) & _2576) == 0u)
        {
            _2821 = _2691;
            _2823 = _2693;
            _2825 = _2695;
            _2827 = _2697;
            _2829 = _2699;
            _2831 = _2701;
        }
        else
        {
            float _2846 = inversesqrt(dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636)));
            float _2847 = _2846 * _1634;
            float _2848 = _2846 * _1635;
            float _2849 = _2846 * _1636;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2708 < ((_2706 >> 12u) & 15u))
            {
                float _2822;
                float _2824;
                float _2826;
                float _2828;
                float _2830;
                float _2832;
                float _2981 = _2691;
                float _2982 = _2693;
                float _2983 = _2695;
                float _2984 = _2697;
                float _2985 = _2699;
                float _2986 = _2701;
                uint _2987 = _2708;
                uint _2996;
                bool _2997;
                for (;;)
                {
                    _2996 = texelFetch(g_lightClassification, int((((_2570 << 5u) + (_2556 << 9u)) + (_2987 << 2u)) >> 2u)).x;
                    _2997 = _2996 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2997)
                    {
                        frontier_phi_82_pred = _2986;
                        frontier_phi_82_pred_1 = _2985;
                        frontier_phi_82_pred_2 = _2984;
                        frontier_phi_82_pred_3 = _2983;
                        frontier_phi_82_pred_4 = _2982;
                        frontier_phi_82_pred_5 = _2981;
                    }
                    else
                    {
                        float _3189;
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3202 = _2981;
                        float _3203 = _2982;
                        float _3204 = _2983;
                        float _3205 = _2984;
                        float _3206 = _2985;
                        float _3207 = _2986;
                        uint _3208 = _2996;
                        uint _3209;
                        vec4 _3234;
                        float _3235;
                        vec4 _3250;
                        vec3 _3262;
                        vec4 _3278;
                        vec4 _3294;
                        float _3341;
                        bool _3342;
                        for (;;)
                        {
                            uint _3219 = ((_2987 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3208));
                            _3209 = (_3208 + 4294967295u) & _3208;
                            uint _3221 = _3219 * 40u;
                            _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            _3235 = _3234.w;
                            uint _3237 = (_3219 * 40u) + 4u;
                            _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            uint _3252 = (_3219 * 40u) + 8u;
                            _3262 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x));
                            uint _3265 = (_3219 * 40u) + 16u;
                            _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3281 = (_3219 * 40u) + 20u;
                            _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            uint _3297 = (_3219 * 40u) + 24u;
                            vec4 _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            uint _3316 = (_3219 * 40u) + 28u;
                            vec4 _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            _3341 = fma(_1636, _3329.z, fma(_1635, _3329.y, _3329.x * _1634)) + _3329.w;
                            _3342 = !((fma(_1636, _3310.z, fma(_1635, _3310.y, _3310.x * _1634)) + _3310.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3342)
                            {
                                float _3369 = _3234.x - _1634;
                                float _3370 = _3234.y - _1635;
                                float _3371 = _3234.z - _1636;
                                float _3372 = dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371));
                                float _3375 = inversesqrt(_3372);
                                float _3376 = _3375 * _3369;
                                float _3377 = _3375 * _3370;
                                float _3378 = _3375 * _3371;
                                float _3382 = 1.0 - (_3372 / (_3235 * _3235));
                                float _4516 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3383 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                                float _3387 = sqrt(_3372) * _3250.w;
                                float _3389 = 1.39999997615814208984375 / (_3387 + 1.39999997615814208984375);
                                float _3390 = _3389 * _3389;
                                float _3393 = ((1.0 - _3390) * dot(vec3(_3376, _3377, _3378), vec3(_463, _466, _469))) + _3390;
                                float _3396 = _3387 * _3387;
                                float _3400 = (fma(_1636, _3278.z, fma(_1635, _3278.y, _3278.x * _1634)) + _3278.w) / _3341;
                                float _3401 = (fma(_1636, _3294.z, fma(_1635, _3294.y, _3294.x * _1634)) + _3294.w) / _3341;
                                float _3405 = 1.0 - dot(vec2(_3400, _3401), vec2(_3400, _3401));
                                float _4532 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3406 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                                float _3407 = _3406 * (((isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0))) * _3383) / ((_3396 * 0.699999988079071044921875) + 1.0));
                                float _3419 = exp2(log2(1.0 / ((_3396 * 3.5) + 5.0)) * 0.25);
                                float _3420 = 1.0 - _538;
                                float _3427 = sqrt(1.0 - ((1.0 - (_3420 * _3420)) * (1.0 - (_3419 * _3419))));
                                float _3428 = _3427 * _3427;
                                float _3429 = _3428 * _3428;
                                float _3430 = _3376 - _2847;
                                float _3431 = _3377 - _2848;
                                float _3432 = _3378 - _2849;
                                float _3436 = inversesqrt(dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432)));
                                float _3440 = dot(vec3(_463, _466, _469), vec3((-0.0) - _2847, (-0.0) - _2848, (-0.0) - _2849));
                                float _4543 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3443 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                                float _3444 = dot(vec3(_463, _466, _469), vec3(_3436 * _3430, _3436 * _3431, _3436 * _3432));
                                float _4554 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3447 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                                float _3451 = ((_3447 * _3447) * (_3429 + (-1.0))) + 1.0;
                                float _3452 = _3389 * _3428;
                                float _3453 = _3452 * _3452;
                                float _3459 = ((1.0 - _3453) * dot(vec3(_463, _466, _469), vec3(_3376, _3377, _3378))) + _3453;
                                float _4565 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3460 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                                float _3461 = 1.0 - _3428;
                                float _3471 = (0.5 / (((_3460 * ((_3443 * _3461) + _3428)) + 9.9999999392252902907785028219223e-09) + (((_3460 * _3461) + _3428) * _3443))) * _3460;
                                float _4576 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3481 = (_3406 * _3383) * (((_3429 * 3.1415927410125732421875) * (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) / ((_3451 * _3451) * ((_3396 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3407 * _3250.z;
                                frontier_phi_88_pred_1 = _3407 * _3250.y;
                                frontier_phi_88_pred_2 = _3407 * _3250.x;
                                frontier_phi_88_pred_3 = _3481 * _3262.z;
                                frontier_phi_88_pred_4 = _3481 * _3262.y;
                                frontier_phi_88_pred_5 = _3481 * _3262.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3490 = frontier_phi_88_pred;
                            _3489 = frontier_phi_88_pred_1;
                            _3488 = frontier_phi_88_pred_2;
                            _3487 = frontier_phi_88_pred_3;
                            _3486 = frontier_phi_88_pred_4;
                            _3485 = frontier_phi_88_pred_5;
                            _3192 = _3488 + _3205;
                            _3193 = _3489 + _3206;
                            _3194 = _3490 + _3207;
                            _3189 = _3485 + _3202;
                            _3190 = _3486 + _3203;
                            _3191 = _3487 + _3204;
                            if (_3209 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3202 = _3189;
                                _3203 = _3190;
                                _3204 = _3191;
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3209;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3194;
                        frontier_phi_82_pred_1 = _3193;
                        frontier_phi_82_pred_2 = _3192;
                        frontier_phi_82_pred_3 = _3191;
                        frontier_phi_82_pred_4 = _3190;
                        frontier_phi_82_pred_5 = _3189;
                    }
                    _2832 = frontier_phi_82_pred;
                    _2830 = frontier_phi_82_pred_1;
                    _2828 = frontier_phi_82_pred_2;
                    _2826 = frontier_phi_82_pred_3;
                    _2824 = frontier_phi_82_pred_4;
                    _2822 = frontier_phi_82_pred_5;
                    uint _2988 = _2987 + 1u;
                    if (_2988 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2981 = _2822;
                        _2982 = _2824;
                        _2983 = _2826;
                        _2984 = _2828;
                        _2985 = _2830;
                        _2986 = _2832;
                        _2987 = _2988;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2828;
                frontier_phi_63_64_ladder_1 = _2832;
                frontier_phi_63_64_ladder_2 = _2830;
                frontier_phi_63_64_ladder_3 = _2826;
                frontier_phi_63_64_ladder_4 = _2824;
                frontier_phi_63_64_ladder_5 = _2822;
            }
            else
            {
                frontier_phi_63_64_ladder = _2697;
                frontier_phi_63_64_ladder_1 = _2701;
                frontier_phi_63_64_ladder_2 = _2699;
                frontier_phi_63_64_ladder_3 = _2695;
                frontier_phi_63_64_ladder_4 = _2693;
                frontier_phi_63_64_ladder_5 = _2691;
            }
            _2821 = frontier_phi_63_64_ladder_5;
            _2823 = frontier_phi_63_64_ladder_4;
            _2825 = frontier_phi_63_64_ladder_3;
            _2827 = frontier_phi_63_64_ladder;
            _2829 = frontier_phi_63_64_ladder_2;
            _2831 = frontier_phi_63_64_ladder_1;
        }
        float _2836 = isnan(1.0) ? _522 : (isnan(_522) ? 1.0 : min(_522, 1.0));
        _2589 = (_2836 * _2827) + _2101;
        _2591 = (_2836 * _2829) + _2103;
        _2593 = (_2836 * _2831) + _2105;
        _2595 = ((_2821 * _507) * _2836) + _2439;
        _2597 = ((_2823 * _509) * _2836) + _2441;
        _2599 = ((_2825 * _510) * _2836) + _2443;
    }
    else
    {
        _2589 = _2101;
        _2591 = _2103;
        _2593 = _2105;
        _2595 = _2439;
        _2597 = _2441;
        _2599 = _2443;
    }
    uint _2605 = _483 + uint(cbMatDynParam._m0[0u].w);
    float _2613 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _322.x) * cbInstanceData._m0[_2605].x;
    float _2616 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _322.y) * cbInstanceData._m0[_2605].y;
    float _2619 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _322.z) * cbInstanceData._m0[_2605].z;
    float _4592 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _4603 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _4614 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _2636 = (((isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2589 + ((isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))) * _522))) + ((_2595 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _1364)) * cbPerFrame._m0[3u].x)) + _2613;
    float _2638 = (_2616 + ((_2597 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _1364)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2591 + ((isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0))) * _522)));
    float _2640 = (_2619 + ((_2599 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _1364)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2593 + ((isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))) * _522)));
    float _2641 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
    float _2642 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
    float _2643 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
    float _2649 = cbMtdParam._m0[2u].x * _2613;
    float _2650 = cbMtdParam._m0[2u].y * _2616;
    float _2651 = cbMtdParam._m0[2u].z * _2619;
    float _4640 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2653 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
    uint _2654 = _482 + 6u;
    float _2662 = _442 / cbSceneParam._m0[86u].x;
    float _2663 = _443 / cbSceneParam._m0[86u].y;
    vec4 _2677 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2662, _2663, (log2((isnan(cbSceneParam._m0[77u].w) ? _363 : (isnan(_363) ? cbSceneParam._m0[77u].w : min(_363, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2679 = _2677.x;
    float _2680 = _2677.y;
    float _2681 = _2677.z;
    float _2682 = _2677.w;
    float _2754;
    float _2756;
    float _2758;
    float _2760;
    if (_363 > cbSceneParam._m0[78u].w)
    {
        float _2716 = isnan(_363) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _363 : min(cbSceneParam._m0[80u].w, _363));
        float _2717 = _2716 / _363;
        float _2728 = _2717 * _414;
        float _2729 = _415 * _2717;
        float _2730 = (-0.0) - _2729;
        float _2732 = _2717 * _416;
        float _2734 = (cbSceneParam._m0[77u].w * _2730) / _2716;
        float _2735 = _2734 + cbSceneParam._m0[79u].w;
        float _2736 = cbSceneParam._m0[79u].w - _2729;
        float _2742 = sqrt(((_2728 * _2728) + (_2729 * _2729)) + (_2732 * _2732));
        float _2745 = (1.0 - (cbSceneParam._m0[77u].w / _2716)) * _2742;
        float _2750 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2752 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2938;
        if (abs((_2730 - _2734) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2938 = ((((_2735 > 0.0) ? exp2(_2750 * _2735) : (2.0 - exp2(_2752 * _2735))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2745;
        }
        else
        {
            float _2882 = 1.0 / cbSceneParam._m0[80u].x;
            float _2883 = isnan(_2736) ? _2735 : (isnan(_2735) ? _2736 : max(_2735, _2736));
            float _2884 = isnan(_2736) ? _2735 : (isnan(_2735) ? _2736 : min(_2735, _2736));
            float _2893 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : min(_2883, 0.0));
            float _2894 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : min(_2884, 0.0));
            _2938 = ((abs(_2742 / _2730) * cbSceneParam._m0[80u].y) * ((((_2893 - _2894) * 2.0) - ((exp2(_2750 * (isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0)))) - exp2(_2750 * (isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0))))) * _2882)) - ((exp2(_2752 * _2893) - exp2(_2752 * _2894)) * _2882))) + (_2745 * cbSceneParam._m0[80u].z);
        }
        vec4 _2940 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2662, _2663, 1.0), 0.0);
        float _2949 = exp2((_2938 * (-1.44269502162933349609375)) * (1.0 - _2940.w));
        float _2950 = log2(_2949);
        float _2966 = log2(_2682);
        _2754 = (exp2(_2966 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2950 * cbSceneParam._m0[78u].x)) * _2940.x) / cbSceneParam._m0[78u].x)) + _2679;
        _2756 = (exp2(_2966 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2950 * cbSceneParam._m0[78u].y)) * _2940.y) / cbSceneParam._m0[78u].y)) + _2680;
        _2758 = (exp2(_2966 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2950 * cbSceneParam._m0[78u].z)) * _2940.z) / cbSceneParam._m0[78u].z)) + _2681;
        _2760 = _2949 * _2682;
    }
    else
    {
        _2754 = _2679;
        _2756 = _2680;
        _2758 = _2681;
        _2760 = _2682;
    }
    bool _2976;
    vec4 _2770;
    vec4 _2792;
    float _2794;
    float _2798;
    float _2799;
    float _2800;
    float _2803;
    float _2806;
    float _2809;
    float _2810;
    bool _2820;
    for (;;)
    {
        _2770 = cbMatDynParam._m0[0u];
        float _2772 = roundEven(_2770.y);
        bool _2773 = _2772 == 3.0;
        float _2774 = log2(_2760);
        float _2778 = exp2(_2774 * cbSceneParam._m0[78u].x);
        float _2779 = exp2(_2774 * cbSceneParam._m0[78u].y);
        float _2780 = exp2(_2774 * cbSceneParam._m0[78u].z);
        float _2781 = _2778 * _2641;
        float _2782 = _2779 * _2642;
        float _2783 = _2780 * _2643;
        float _2790 = _430 + (-0.5);
        _2792 = cbMtdParam._m0[1u];
        _2794 = _2792.y * _2790;
        float _2797 = (_2772 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2798 = _2797 * (_2773 ? _2781 : (_2781 + (cbSceneParam._m0[72u].w * _2754)));
        _2799 = _2797 * (_2773 ? _2782 : (_2782 + (cbSceneParam._m0[72u].w * _2756)));
        _2800 = _2797 * (_2773 ? _2783 : (_2783 + (cbSceneParam._m0[72u].w * _2758)));
        _2803 = ((_2649 * _2653) * _2778) * _2797;
        _2806 = ((_2650 * _2653) * _2779) * _2797;
        _2809 = ((_2651 * _2653) * _2780) * _2797;
        _2810 = _2790 * 0.999000012874603271484375;
        _2820 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2820)
        {
            if ((cbInstanceData._m0[_482 + 7u].x + _2810) < 0.5)
            {
                _2976 = true;
                break;
            }
        }
        uint _2917 = _483 + uint(_2770.w);
        if ((cbInstanceData._m0[_2917].w < 1.0) && ((cbInstanceData._m0[_2917].w + _2810) < 0.5))
        {
            _2976 = true;
            break;
        }
        if ((_2794 + 1.0) < _2792.x)
        {
            _2976 = true;
            break;
        }
        _2976 = false;
        break;
    }
    float _3180;
    if (_2976)
    {
        discard_state = true;
        _3180 = 0.0;
    }
    else
    {
        _3180 = cbInstanceData._m0[_2654].w;
    }
    SV_Target.x = _2798;
    SV_Target.y = _2799;
    SV_Target.z = _2800;
    SV_Target.w = _3180;
    SV_Target_1.x = _2803;
    SV_Target_1.y = _2806;
    SV_Target_1.z = _2809;
    SV_Target_1.w = cbInstanceData._m0[_2654].w;
    discard_exit();
}


