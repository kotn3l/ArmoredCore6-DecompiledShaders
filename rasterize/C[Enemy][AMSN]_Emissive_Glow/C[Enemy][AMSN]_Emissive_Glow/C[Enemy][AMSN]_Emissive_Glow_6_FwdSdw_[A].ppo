#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _941;
float _3659;
float _3660;
float _3661;
float _3662;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _234 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _240 = _234.x * cbMtdParam._m0[9u].x;
    float _241 = _234.y * cbMtdParam._m0[9u].y;
    float _242 = _234.z * cbMtdParam._m0[9u].z;
    vec4 _254 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _256 = _254.x;
    vec4 _268 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _272 = _268.z;
    float _276 = (_268.x * 2.0) + (-1.0);
    float _278 = (_268.y * 2.0) + (-1.0);
    float _279 = dot(vec2(_276, _278), vec2(_276, _278));
    float _3671 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _285 = sqrt(1.0 - (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))));
    vec4 _322 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _333 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3682 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _334 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _342 = (((_334 * _334) * (3.0 - (_334 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _345 = fma(_285, _205 * NORMAL.x, fma(_278, _212 * TANGENT.x, (_198 * _191) * _276));
    float _348 = fma(_285, _205 * NORMAL.y, fma(_278, _212 * TANGENT.y, (_198 * _192) * _276));
    float _351 = fma(_285, _205 * NORMAL.z, fma(_278, _212 * TANGENT.z, (_198 * _193) * _276));
    float _355 = inversesqrt(dot(vec3(_345, _348, _351), vec3(_345, _348, _351)));
    float _356 = _355 * _345;
    float _357 = _355 * _348;
    float _358 = _355 * _351;
    float _3693 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _359 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _3704 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3715 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3726 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3737 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _363 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _379 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _420 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _430 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _420);
    float _431 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _420);
    float _432 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _420);
    float _436 = inversesqrt(dot(vec3(_430, _431, _432), vec3(_430, _431, _432)));
    float _437 = _430 * _436;
    float _438 = _431 * _436;
    float _439 = _432 * _436;
    vec4 _444 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _446 = _444.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _620 = sqrt(((_430 * _430) + (_431 * _431)) + (_432 * _432));
        float _626 = (cbMatDynParam._m0[5u].x * _620) + cbMatDynParam._m0[5u].y;
        float _3748 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
        float _627 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _631 = (cbMatDynParam._m0[5u].z * _620) + cbMatDynParam._m0[5u].w;
        float _3759 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) - _627)) + _627) < ((_446 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _458 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _459 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _479 = fma(_358, cbSceneParam._m0[5u].z, fma(_357, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _356));
    float _482 = fma(_358, cbSceneParam._m0[6u].z, fma(_357, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _356));
    float _485 = fma(_358, cbSceneParam._m0[7u].z, fma(_357, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _356));
    uint _498 = uint(roundEven(NORMAL.w)) * 13u;
    uint _499 = _498 + 9u;
    uint _500 = _499 + uint(cbMatDynParam._m0[0u].w);
    float _506 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0)))) * cbInstanceData._m0[_500].x;
    float _507 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0)))) * cbInstanceData._m0[_500].y;
    float _508 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) * cbInstanceData._m0[_500].z;
    float _3770 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _509 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _3781 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _510 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _3792 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _511 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _512 = 1.0 - _363;
    float _513 = _509 * _512;
    float _514 = _510 * _512;
    float _515 = _511 * _512;
    float _520 = (_509 + (-0.039999999105930328369140625)) * _363;
    float _521 = (_510 + (-0.039999999105930328369140625)) * _363;
    float _522 = (_511 + (-0.039999999105930328369140625)) * _363;
    float _523 = _520 + 0.039999999105930328369140625;
    float _525 = _521 + 0.039999999105930328369140625;
    float _526 = _522 + 0.039999999105930328369140625;
    vec4 _535 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _458, cbSceneParam._m0[86u].y * _459));
    float _538 = _535.x * TEXCOORD.z;
    float _539 = dot(vec3(_356, _357, _358), vec3(_437, _438, _439));
    float _542 = _539 * 2.0;
    float _546 = (_542 * _356) - _437;
    float _547 = (_542 * _357) - _438;
    float _548 = (_542 * _358) - _439;
    float _552 = abs(dot(vec3(_437, _438, _439), vec3(_356, _357, _358)));
    float _3803 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _554 = sqrt(_359);
    float _566 = exp2((_554 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_554 * 3.0));
    float _572 = (1.0 - _566) * ((_554 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _573 = _566 * _554;
    float _601 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _605 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _609 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _940;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _665 = fma(_609, cbModelParam._m0[26u].z, fma(_605, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _601));
        float _669 = fma(_609, cbModelParam._m0[27u].z, fma(_605, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _601));
        float _673 = fma(_609, cbModelParam._m0[28u].z, fma(_605, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _601));
        float _698 = _601 + _356;
        float _699 = _605 + _357;
        float _700 = _609 + _358;
        float _710 = fma(_700, cbModelParam._m0[26u].z, fma(_699, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _698)) - _665;
        float _711 = fma(_700, cbModelParam._m0[27u].z, fma(_699, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _698)) - _669;
        float _712 = fma(_700, cbModelParam._m0[28u].z, fma(_699, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _698)) - _673;
        float _716 = inversesqrt(dot(vec3(_710, _711, _712), vec3(_710, _711, _712)));
        float _729 = ((_716 * _710) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_665 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _730 = ((_716 * _711) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_669 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _731 = ((_716 * _712) / cbModelParam._m0[34u].z) + ((((((_673 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _734 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_729, _730, _731), 0.0);
        vec4 _741 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_729, _730, _731), 0.0);
        vec4 _748 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_729, _730, _731), 0.0);
        vec4 _755 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_729, _730, _731), 0.0);
        float _768 = exp2((_734.w + (-0.5)) * 20.0) * 2.0;
        float _769 = _768 * (_734.x + (-0.5));
        float _770 = _768 * (_734.y + (-0.5));
        float _771 = _768 * (_734.z + (-0.5));
        float _778 = exp2((_741.w + (-0.5)) * 20.0) * 2.0;
        float _779 = _778 * (_741.x + (-0.5));
        float _780 = _778 * (_741.y + (-0.5));
        float _781 = _778 * (_741.z + (-0.5));
        float _788 = exp2((_748.w + (-0.5)) * 20.0) * 2.0;
        float _789 = _788 * (_748.x + (-0.5));
        float _790 = _788 * (_748.y + (-0.5));
        float _791 = _788 * (_748.z + (-0.5));
        float _798 = exp2((_755.w + (-0.5)) * 20.0) * 2.0;
        float _799 = _798 * (_755.x + (-0.5));
        float _800 = _798 * (_755.y + (-0.5));
        float _801 = _798 * (_755.z + (-0.5));
        float _802 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _803 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _804 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _805 = _769 * 0.5;
        float _806 = _779 * 0.5;
        float _807 = _789 * 0.5;
        float _808 = dot(vec3(_805, _806, _807), vec3(_805, _806, _807));
        float _813 = (_808 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_808);
        float _822 = (dot(vec3(_356, _357, _358), vec3(_813 * _805, _813 * _806, _813 * _807)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _832 = sqrt(((_806 * _806) + (_805 * _805)) + (_807 * _807)) / (_802 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _834 = _833 * 2.0;
        float _838 = (1.0 - _833) / (_833 + 1.0);
        float _3851 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _848 = ((((1.0 - _839) * (_834 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_834 + 1.0))) + _839) * _802;
        float _849 = _770 * 0.5;
        float _850 = _780 * 0.5;
        float _851 = _790 * 0.5;
        float _852 = dot(vec3(_849, _850, _851), vec3(_849, _850, _851));
        float _857 = (_852 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_852);
        float _865 = (dot(vec3(_356, _357, _358), vec3(_857 * _849, _857 * _850, _857 * _851)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _874 = sqrt(((_850 * _850) + (_849 * _849)) + (_851 * _851)) / (_803 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _876 = _875 * 2.0;
        float _880 = (1.0 - _875) / (_875 + 1.0);
        float _3884 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _890 = ((((1.0 - _881) * (_876 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_876 + 1.0))) + _881) * _803;
        float _891 = _771 * 0.5;
        float _892 = _781 * 0.5;
        float _893 = _791 * 0.5;
        float _894 = dot(vec3(_891, _892, _893), vec3(_891, _892, _893));
        float _899 = (_894 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_894);
        float _907 = (dot(vec3(_356, _357, _358), vec3(_899 * _891, _899 * _892, _899 * _893)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _916 = sqrt(((_892 * _892) + (_891 * _891)) + (_893 * _893)) / (_804 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _918 = _917 * 2.0;
        float _922 = (1.0 - _917) / (_917 + 1.0);
        float _3917 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _932 = ((((1.0 - _923) * (_918 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_918 + 1.0))) + _923) * _804;
        _940 = _771;
        _942 = _770;
        _943 = _769;
        _944 = _781;
        _945 = _780;
        _946 = _779;
        _947 = _791;
        _948 = _790;
        _949 = _789;
        _950 = _804;
        _951 = _803;
        _952 = _802;
        _953 = cbModelParam._m0[36u].z * (isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0)));
        _954 = cbModelParam._m0[36u].z * (isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0)));
        _955 = cbModelParam._m0[36u].z * (isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0)));
    }
    else
    {
        _940 = _941;
        _942 = _941;
        _943 = _941;
        _944 = _941;
        _945 = _941;
        _946 = _941;
        _947 = _941;
        _948 = _941;
        _949 = _941;
        _950 = _941;
        _951 = _941;
        _952 = _941;
        _953 = 0.0;
        _954 = 0.0;
        _955 = 0.0;
    }
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _984 = fma(_609, cbModelParam._m0[30u].z, fma(_605, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _601));
        float _988 = fma(_609, cbModelParam._m0[31u].z, fma(_605, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _601));
        float _992 = fma(_609, cbModelParam._m0[32u].z, fma(_605, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _601));
        float _1015 = _601 + _356;
        float _1016 = _605 + _357;
        float _1017 = _609 + _358;
        float _1027 = fma(_1017, cbModelParam._m0[30u].z, fma(_1016, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1015)) - _984;
        float _1028 = fma(_1017, cbModelParam._m0[31u].z, fma(_1016, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1015)) - _988;
        float _1029 = fma(_1017, cbModelParam._m0[32u].z, fma(_1016, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1015)) - _992;
        float _1033 = inversesqrt(dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029)));
        float _1046 = ((_1033 * _1027) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_984 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1047 = ((_1033 * _1028) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_988 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1048 = ((_1033 * _1029) / cbModelParam._m0[35u].z) + ((((((_992 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        float _1083 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1050.x + (-0.5));
        float _1085 = _1083 * (_1050.y + (-0.5));
        float _1086 = _1083 * (_1050.z + (-0.5));
        float _1093 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1057.x + (-0.5));
        float _1095 = _1093 * (_1057.y + (-0.5));
        float _1096 = _1093 * (_1057.z + (-0.5));
        float _1103 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1064.x + (-0.5));
        float _1105 = _1103 * (_1064.y + (-0.5));
        float _1106 = _1103 * (_1064.z + (-0.5));
        float _1113 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1071.x + (-0.5));
        float _1115 = _1113 * (_1071.y + (-0.5));
        float _1116 = _1113 * (_1071.z + (-0.5));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = _1084 * 0.5;
        float _1121 = _1094 * 0.5;
        float _1122 = _1104 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1136 = (dot(vec3(_356, _357, _358), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _3958 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1145 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _3969 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _3980 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1147 + 1.0))) + _1152) * _1117;
        float _1162 = _1085 * 0.5;
        float _1163 = _1095 * 0.5;
        float _1164 = _1105 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1178 = (dot(vec3(_356, _357, _358), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1187 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _4013 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1189 + 1.0))) + _1194) * _1118;
        float _1204 = _1086 * 0.5;
        float _1205 = _1096 * 0.5;
        float _1206 = _1106 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_356, _357, _358), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _4024 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _4035 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _4046 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1231 + 1.0))) + _1236) * _1119;
        _1253 = _1086;
        _1254 = _1085;
        _1255 = _1084;
        _1256 = _1096;
        _1257 = _1095;
        _1258 = _1094;
        _1259 = _1106;
        _1260 = _1105;
        _1261 = _1104;
        _1262 = _1119;
        _1263 = _1118;
        _1264 = _1117;
        _1265 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
        _1266 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
        _1267 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
    }
    else
    {
        _1253 = _941;
        _1254 = _941;
        _1255 = _941;
        _1256 = _941;
        _1257 = _941;
        _1258 = _941;
        _1259 = _941;
        _1260 = _941;
        _1261 = _941;
        _1262 = _941;
        _1263 = _941;
        _1264 = _941;
        _1265 = 0.0;
        _1266 = 0.0;
        _1267 = 0.0;
    }
    float _1277 = (cbModelParam._m0[1u].x * (_1265 - _953)) + _953;
    float _1278 = (cbModelParam._m0[1u].x * (_1266 - _954)) + _954;
    float _1279 = (cbModelParam._m0[1u].x * (_1267 - _955)) + _955;
    float _1300 = fma(_1279, cbSceneParam._m0[89u].z, fma(_1278, cbSceneParam._m0[89u].y, _1277 * cbSceneParam._m0[89u].x));
    float _1303 = fma(_1279, cbSceneParam._m0[90u].z, fma(_1278, cbSceneParam._m0[90u].y, _1277 * cbSceneParam._m0[90u].x));
    float _1306 = fma(_1279, cbSceneParam._m0[91u].z, fma(_1278, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1277));
    float _1321 = _546 * 0.5;
    float _1322 = _547 * 0.5;
    float _1323 = _548 * 0.5;
    float _1324 = dot(vec4(_1321, _1322, _1323, 1.0), vec4(_1255, _1258, _1261, _1264));
    float _1327 = dot(vec4(_1321, _1322, _1323, 1.0), vec4(_1254, _1257, _1260, _1263));
    float _1330 = dot(vec4(_1321, _1322, _1323, 1.0), vec4(_1253, _1256, _1259, _1262));
    float _1364;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1337 = dot(vec4(_1321, _1322, _1323, 1.0), vec4(_940, _944, _947, _950));
        float _1341 = dot(vec4(_1321, _1322, _1323, 1.0), vec4(_942, _945, _948, _951));
        float _1345 = dot(vec4(_1321, _1322, _1323, 1.0), vec4(_943, _946, _949, _952));
        float _1352 = dot(vec4(cbModelParam._m0[39u]), vec4(_1321, _1322, _1323, 1.0));
        _1364 = dot(vec3(isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)), isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)), isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1352) ? 0.0 : (isnan(0.0) ? _1352 : max(0.0, _1352))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1364 = 1.0;
    }
    float _1375;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1366 = dot(vec4(cbModelParam._m0[40u]), vec4(_1321, _1322, _1323, 1.0));
        _1375 = dot(vec3(isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)), isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)), isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1366) ? 0.0 : (isnan(0.0) ? _1366 : max(0.0, _1366))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1375 = 1.0;
    }
    float _1379 = (_1375 * cbModelParam._m0[1u].x) + (_1364 * (1.0 - cbModelParam._m0[1u].x));
    float _1389 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _359);
    float _1390 = isnan(_1389) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1389 : min(cbModelParam._m0[25u].z, _1389));
    float _1471;
    float _1473;
    float _1475;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1438 = fma(_609, cbModelParam._m0[13u].z, fma(_605, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _601)) + cbModelParam._m0[13u].w;
        float _1442 = fma(_609, cbModelParam._m0[14u].z, fma(_605, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _601)) + cbModelParam._m0[14u].w;
        float _1446 = fma(_609, cbModelParam._m0[15u].z, fma(_605, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _601)) + cbModelParam._m0[15u].w;
        float _1449 = fma(_548, cbModelParam._m0[13u].z, fma(_547, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _546));
        float _1452 = fma(_548, cbModelParam._m0[14u].z, fma(_547, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _546));
        float _1455 = fma(_548, cbModelParam._m0[15u].z, fma(_547, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _546));
        float _1483;
        if (_1449 > 0.0)
        {
            _1483 = abs((1.0 - _1438) / _1449);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1438 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1483 = frontier_phi_17_15_ladder;
        }
        float _1657;
        if (_1452 > 0.0)
        {
            _1657 = abs((1.0 - _1442) / _1452);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1452 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1442 + 1.0) / _1452);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1657 = frontier_phi_26_22_ladder;
        }
        float _1953;
        if (_1455 > 0.0)
        {
            _1953 = abs((1.0 - _1446) / _1455);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1446 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1953 = frontier_phi_38_33_ladder;
        }
        float _1955 = isnan(_1657) ? _1483 : (isnan(_1483) ? _1657 : min(_1483, _1657));
        float _1956 = isnan(_1953) ? _1955 : (isnan(_1955) ? _1953 : min(_1955, _1953));
        float _1960 = (_1956 * _1449) + _1438;
        float _1961 = (_1956 * _1452) + _1442;
        float _1962 = (_1956 * _1455) + _1446;
        float _1963 = _1956 * 9.9999997473787516355514526367188e-05;
        float _1965 = (-1.0) - _1963;
        float _1967 = _1963 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1962 > _1967) || ((_1962 < _1965) || ((_1961 > _1967) || ((_1961 < _1965) || ((_1960 < _1965) || (_1960 > _1967))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2107 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1962, cbModelParam._m0[9u].z, fma(_1961, cbModelParam._m0[9u].y, _1960 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1962, cbModelParam._m0[10u].z, fma(_1961, cbModelParam._m0[10u].y, _1960 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1962, cbModelParam._m0[11u].z, fma(_1961, cbModelParam._m0[11u].y, _1960 * cbModelParam._m0[11u].x))), _1390);
            frontier_phi_16_38_ladder = _2107.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2107.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2107.x * cbModelParam._m0[1u].y;
        }
        _1471 = frontier_phi_16_38_ladder_2;
        _1473 = frontier_phi_16_38_ladder_1;
        _1475 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1459 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_546, _547, _548), _1390);
        _1471 = _1459.x * cbModelParam._m0[1u].y;
        _1473 = _1459.y * cbModelParam._m0[1u].y;
        _1475 = _1459.z * cbModelParam._m0[1u].y;
    }
    float _1479 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _359);
    float _1480 = isnan(_1479) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1479 : min(cbModelParam._m0[25u].w, _1479));
    float _1572;
    float _1574;
    float _1576;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1536 = fma(_609, cbModelParam._m0[21u].z, fma(_605, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _601)) + cbModelParam._m0[21u].w;
        float _1540 = fma(_609, cbModelParam._m0[22u].z, fma(_605, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _601)) + cbModelParam._m0[22u].w;
        float _1544 = fma(_609, cbModelParam._m0[23u].z, fma(_605, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _601)) + cbModelParam._m0[23u].w;
        float _1547 = fma(_548, cbModelParam._m0[21u].z, fma(_547, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _546));
        float _1550 = fma(_548, cbModelParam._m0[22u].z, fma(_547, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _546));
        float _1553 = fma(_548, cbModelParam._m0[23u].z, fma(_547, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _546));
        float _1662;
        if (_1547 > 0.0)
        {
            _1662 = abs((1.0 - _1536) / _1547);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1536 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1662 = frontier_phi_28_24_ladder;
        }
        float _1980;
        if (_1550 > 0.0)
        {
            _1980 = abs((1.0 - _1540) / _1550);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1540 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1980 = frontier_phi_40_35_ladder;
        }
        float _2318;
        if (_1553 > 0.0)
        {
            _2318 = abs((1.0 - _1544) / _1553);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1544 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2318 = frontier_phi_50_47_ladder;
        }
        float _2320 = isnan(_1980) ? _1662 : (isnan(_1662) ? _1980 : min(_1662, _1980));
        float _2321 = isnan(_2318) ? _2320 : (isnan(_2320) ? _2318 : min(_2320, _2318));
        float _2325 = (_2321 * _1547) + _1536;
        float _2326 = (_2321 * _1550) + _1540;
        float _2327 = (_2321 * _1553) + _1544;
        float _2328 = _2321 * 9.9999997473787516355514526367188e-05;
        float _2329 = (-1.0) - _2328;
        float _2331 = _2328 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2327 > _2331) || ((_2327 < _2329) || ((_2326 > _2331) || ((_2326 < _2329) || ((_2325 < _2329) || (_2325 > _2331))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2449 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2327, cbModelParam._m0[17u].z, fma(_2326, cbModelParam._m0[17u].y, _2325 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2327, cbModelParam._m0[18u].z, fma(_2326, cbModelParam._m0[18u].y, _2325 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2327, cbModelParam._m0[19u].z, fma(_2326, cbModelParam._m0[19u].y, _2325 * cbModelParam._m0[19u].x))), _1480);
            frontier_phi_25_50_ladder = _2449.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2449.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2449.x * cbModelParam._m0[1u].z;
        }
        _1572 = frontier_phi_25_50_ladder_2;
        _1574 = frontier_phi_25_50_ladder_1;
        _1576 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1556 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_546, _547, _548), _1480);
        _1572 = _1556.x * cbModelParam._m0[1u].z;
        _1574 = _1556.y * cbModelParam._m0[1u].z;
        _1576 = _1556.z * cbModelParam._m0[1u].z;
    }
    float _1589 = (((_572 * _523) + _573) * _538) * ((cbModelParam._m0[1u].w * (_1572 - _1471)) + _1471);
    float _1591 = (((_572 * _525) + _573) * _538) * ((cbModelParam._m0[1u].w * (_1574 - _1473)) + _1473);
    float _1593 = (((_572 * _526) + _573) * _538) * ((cbModelParam._m0[1u].w * (_1576 - _1475)) + _1475);
    float _1596 = fma(_1593, cbSceneParam._m0[89u].z, fma(_1591, cbSceneParam._m0[89u].y, _1589 * cbSceneParam._m0[89u].x));
    float _1599 = fma(_1593, cbSceneParam._m0[90u].z, fma(_1591, cbSceneParam._m0[90u].y, _1589 * cbSceneParam._m0[90u].x));
    float _1602 = fma(_1593, cbSceneParam._m0[91u].z, fma(_1591, cbSceneParam._m0[91u].y, _1589 * cbSceneParam._m0[91u].x));
    float _1636 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1640 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1644 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1648 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1649 = _1636 / _1648;
    float _1650 = _1640 / _1648;
    float _1651 = _1644 / _1648;
    float _1798;
    float _1799;
    float _1800;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1678 = ((uint(_1651 > cbSceneParam._m0[59u].y) + uint(_1651 > cbSceneParam._m0[59u].x)) + uint(_1651 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1679 = _1678 + 43u;
        uint _1687 = _1678 + 44u;
        uint _1695 = _1678 + 45u;
        uint _1703 = _1678 + 46u;
        float _1714 = fma(_1648, cbSceneParam._m0[_1679].w, fma(_1644, cbSceneParam._m0[_1679].z, fma(_1640, cbSceneParam._m0[_1679].y, _1636 * cbSceneParam._m0[_1679].x)));
        float _1718 = fma(_1648, cbSceneParam._m0[_1687].w, fma(_1644, cbSceneParam._m0[_1687].z, fma(_1640, cbSceneParam._m0[_1687].y, _1636 * cbSceneParam._m0[_1687].x)));
        float _1726 = fma(_1648, cbSceneParam._m0[_1703].w, fma(_1644, cbSceneParam._m0[_1703].z, fma(_1640, cbSceneParam._m0[_1703].y, _1636 * cbSceneParam._m0[_1703].x)));
        float _1731 = cbSceneParam._m0[33u].z * _1726;
        float _1733 = cbSceneParam._m0[33u].w * _1726;
        float _1736 = fma(_1648, cbSceneParam._m0[_1695].w, fma(_1644, cbSceneParam._m0[_1695].z, fma(_1640, cbSceneParam._m0[_1695].y, _1636 * cbSceneParam._m0[_1695].x))) / _1726;
        float _1784 = (cbSceneParam._m0[33u].x - sqrt(((_1650 * _1650) + (_1649 * _1649)) + (_1651 * _1651))) * cbSceneParam._m0[33u].y;
        float _4172 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1791 = (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1731 + _1714) / _1726, (_1733 + _1718) / _1726), _1736), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1733 + _1714) / _1726, (_1718 - _1731) / _1726), _1736), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1714 - _1731) / _1726, (_1718 - _1733) / _1726), _1736), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1714 - _1733) / _1726, (_1731 + _1718) / _1726), _1736), 0.0)).x), vec4(0.25)));
        _1798 = 1.0 - (_1791 * cbSceneParam._m0[34u].x);
        _1799 = 1.0 - (_1791 * cbSceneParam._m0[34u].y);
        _1800 = 1.0 - (_1791 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1798 = 1.0;
        _1799 = 1.0;
        _1800 = 1.0;
    }
    float _1864;
    float _1866;
    float _1868;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1852 = fma(_1648, cbSceneParam._m0[63u].w, fma(_1644, cbSceneParam._m0[63u].z, fma(_1640, cbSceneParam._m0[63u].y, _1636 * cbSceneParam._m0[63u].x)));
        float _1853 = fma(_1648, cbSceneParam._m0[60u].w, fma(_1644, cbSceneParam._m0[60u].z, fma(_1640, cbSceneParam._m0[60u].y, _1636 * cbSceneParam._m0[60u].x))) / _1852;
        float _1854 = fma(_1648, cbSceneParam._m0[61u].w, fma(_1644, cbSceneParam._m0[61u].z, fma(_1640, cbSceneParam._m0[61u].y, _1636 * cbSceneParam._m0[61u].x))) / _1852;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1853 >= cbSceneParam._m0[64u].x) && (_1854 >= cbSceneParam._m0[64u].y)) && (_1853 <= cbSceneParam._m0[64u].z)) && (_1854 <= cbSceneParam._m0[64u].w))
        {
            float _1993 = fma(_1648, cbSceneParam._m0[62u].w, fma(_1644, cbSceneParam._m0[62u].z, fma(_1640, cbSceneParam._m0[62u].y, _1636 * cbSceneParam._m0[62u].x))) / _1852;
            float _1997 = isnan(cbSceneParam._m0[41u].w) ? _1993 : (isnan(_1993) ? cbSceneParam._m0[41u].w : max(_1993, cbSceneParam._m0[41u].w));
            float _2040 = (cbSceneParam._m0[33u].x - sqrt(((_1650 * _1650) + (_1649 * _1649)) + (_1651 * _1651))) * cbSceneParam._m0[33u].y;
            float _4188 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
            float _2047 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1853, cbSceneParam._m0[33u].w + _1854), _1997), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1853, _1854 - cbSceneParam._m0[33u].z), _1997), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1853 - cbSceneParam._m0[33u].z, _1854 - cbSceneParam._m0[33u].w), _1997), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1853 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1854), _1997), 0.0)).x), vec4(0.25)));
            float _2051 = 1.0 - (_2047 * cbSceneParam._m0[34u].x);
            float _2052 = 1.0 - (_2047 * cbSceneParam._m0[34u].y);
            float _2053 = 1.0 - (_2047 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2053) ? _1800 : (isnan(_1800) ? _2053 : min(_1800, _2053));
            frontier_phi_37_36_ladder_1 = isnan(_2052) ? _1799 : (isnan(_1799) ? _2052 : min(_1799, _2052));
            frontier_phi_37_36_ladder_2 = isnan(_2051) ? _1798 : (isnan(_1798) ? _2051 : min(_1798, _2051));
        }
        else
        {
            frontier_phi_37_36_ladder = _1800;
            frontier_phi_37_36_ladder_1 = _1799;
            frontier_phi_37_36_ladder_2 = _1798;
        }
        _1864 = frontier_phi_37_36_ladder_2;
        _1866 = frontier_phi_37_36_ladder_1;
        _1868 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1864 = _1798;
        _1866 = _1799;
        _1868 = _1800;
    }
    uvec4 _1873 = floatBitsToUint(cbInstanceData._m0[_498 + 5u]);
    uint _1875 = _1873.x * 14u;
    uint _1876 = _1875 + 13u;
    float _1883 = _538 + (-1.0);
    float _1888 = (cbLight._m0[_1876].x * _1883) + 1.0;
    float _1889 = (cbLight._m0[_1876].y * _1883) + 1.0;
    float _1890 = (cbLight._m0[_1876].z * _1883) + 1.0;
    float _1891 = (cbLight._m0[_1876].w * _1883) + 1.0;
    uint _1892 = _1875 + 5u;
    float _1898 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
    uint _1902 = _1875 + 4u;
    float _1912 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
    uint _1916 = _1875 | 1u;
    float _1927 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_356, _357, _358));
    float _1930 = dot(vec3(cbLight._m0[_1916].xyz), vec3(_356, _357, _358));
    float _4224 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _4235 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1935 = (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * 0.3183098733425140380859375;
    float _1937 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * 0.3183098733425140380859375;
    float _1944 = ((cbLight._m0[_1892].x * _1898) * _1937) + (((cbLight._m0[_1902].x * _1864) * _1912) * _1935);
    float _1945 = ((_1898 * cbLight._m0[_1892].y) * _1937) + (((cbLight._m0[_1902].y * _1866) * _1912) * _1935);
    float _1946 = ((_1898 * cbLight._m0[_1892].z) * _1937) + (((cbLight._m0[_1902].z * _1868) * _1912) * _1935);
    uvec4 _1950 = floatBitsToUint(cbLight._m0[_1875 + 12u]);
    bool _1952 = _1950.x == 0u;
    float _2054;
    float _2056;
    float _2058;
    if (_1952)
    {
        _2054 = _1944;
        _2056 = _1945;
        _2058 = _1946;
    }
    else
    {
        uint _2062 = _1875 + 6u;
        float _2078 = (dot(vec3(cbLight._m0[_1875 + 2u].xyz), vec3(_356, _357, _358)) * 0.5) + 0.5;
        float _2079 = _2078 * _2078;
        float _4246 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2080 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2081 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _2054 = (((cbLight._m0[_2062].x * 0.3183098733425140380859375) * _2080) * _2081) + _1944;
        _2056 = (((cbLight._m0[_2062].y * 0.3183098733425140380859375) * _2080) * _2081) + _1945;
        _2058 = (((cbLight._m0[_2062].z * 0.3183098733425140380859375) * _2080) * _2081) + _1946;
    }
    bool _2061 = _1950.y == 0u;
    float _2116;
    float _2118;
    float _2120;
    if (_2061)
    {
        _2116 = _2054;
        _2118 = _2056;
        _2120 = _2058;
    }
    else
    {
        uint _2289 = _1875 + 7u;
        float _2305 = (dot(vec3(cbLight._m0[_1875 + 3u].xyz), vec3(_356, _357, _358)) * 0.5) + 0.5;
        float _2306 = _2305 * _2305;
        float _4262 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2307 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2308 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
        _2116 = (((cbLight._m0[_2289].x * 0.3183098733425140380859375) * _2307) * _2308) + _2054;
        _2118 = (((cbLight._m0[_2289].y * 0.3183098733425140380859375) * _2307) * _2308) + _2056;
        _2120 = (((cbLight._m0[_2289].z * 0.3183098733425140380859375) * _2307) * _2308) + _2058;
    }
    uint _2123 = _1875 + 8u;
    float _2136 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1875].w)) * _359) * 0.949999988079071044921875);
    float _2137 = _2136 * _2136;
    float _2138 = cbLight._m0[_1875].x + _437;
    float _2139 = cbLight._m0[_1875].y + _438;
    float _2140 = cbLight._m0[_1875].z + _439;
    float _2144 = inversesqrt(dot(vec3(_2138, _2139, _2140), vec3(_2138, _2139, _2140)));
    float _2145 = _2144 * _2138;
    float _2146 = _2144 * _2139;
    float _2147 = _2144 * _2140;
    float _2148 = dot(vec3(_356, _357, _358), vec3(cbLight._m0[_1875].xyz));
    float _4278 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2151 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _4289 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _2152 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _2153 = dot(vec3(_356, _357, _358), vec3(_2145, _2146, _2147));
    float _4300 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2156 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _2157 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_2145, _2146, _2147));
    float _4311 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2161 = _2137 * _2137;
    float _2165 = ((_2156 * _2156) * (_2161 + (-1.0))) + 1.0;
    float _2173 = exp2(log2(1.0 - (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) * 5.0);
    float _2174 = 0.959999978542327880859375 - _520;
    float _2176 = 0.959999978542327880859375 - _521;
    float _2177 = 0.959999978542327880859375 - _522;
    float _2184 = 1.0 - _2137;
    float _2195 = (0.5 / (((_2152 * ((_2151 * _2184) + _2137)) + 9.9999999392252902907785028219223e-09) + (((_2152 * _2184) + _2137) * _2151))) * _2151;
    float _4322 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2197 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2161 / ((_2165 * _2165) * 3.141590118408203125));
    uint _2211 = _1875 + 9u;
    float _2222 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1916].w)) * _359) * 0.949999988079071044921875);
    float _2223 = _2222 * _2222;
    float _2224 = cbLight._m0[_1916].x + _437;
    float _2225 = cbLight._m0[_1916].y + _438;
    float _2226 = cbLight._m0[_1916].z + _439;
    float _2230 = inversesqrt(dot(vec3(_2224, _2225, _2226), vec3(_2224, _2225, _2226)));
    float _2231 = _2230 * _2224;
    float _2232 = _2230 * _2225;
    float _2233 = _2230 * _2226;
    float _2234 = dot(vec3(_356, _357, _358), vec3(cbLight._m0[_1916].xyz));
    float _4333 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2238 = dot(vec3(_356, _357, _358), vec3(_2231, _2232, _2233));
    float _4344 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2241 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _2242 = dot(vec3(cbLight._m0[_1916].xyz), vec3(_2231, _2232, _2233));
    float _4355 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2246 = _2223 * _2223;
    float _2250 = ((_2241 * _2241) * (_2246 + (-1.0))) + 1.0;
    float _2257 = exp2(log2(1.0 - (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) * 5.0);
    float _2264 = 1.0 - _2223;
    float _2274 = (0.5 / (((_2152 * ((_2237 * _2264) + _2223)) + 9.9999999392252902907785028219223e-09) + (((_2152 * _2264) + _2223) * _2237))) * _2237;
    float _4366 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2276 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_2246 / ((_2250 * _2250) * 3.141590118408203125));
    float _2286 = (((((_2257 * _2174) + _523) * cbLight._m0[_2211].x) * _2276) * _1898) + ((((cbLight._m0[_2123].x * _1864) * ((_2173 * _2174) + _523)) * _2197) * _1912);
    float _2287 = (((((_2257 * _2176) + _525) * cbLight._m0[_2211].y) * _2276) * _1898) + ((((cbLight._m0[_2123].y * _1866) * ((_2173 * _2176) + _525)) * _2197) * _1912);
    float _2288 = (((((_2257 * _2177) + _526) * cbLight._m0[_2211].z) * _2276) * _1898) + ((((cbLight._m0[_2123].z * _1868) * ((_2173 * _2177) + _526)) * _2197) * _1912);
    float _2344;
    float _2346;
    float _2348;
    if (_1952)
    {
        _2344 = _2286;
        _2346 = _2287;
        _2348 = _2288;
    }
    else
    {
        uint _2350 = _1875 + 2u;
        uint _2354 = _1875 + 10u;
        float _2368 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2350].w)) * _359) * 0.949999988079071044921875);
        float _2369 = _2368 * _2368;
        float _2370 = cbLight._m0[_2350].x + _437;
        float _2371 = cbLight._m0[_2350].y + _438;
        float _2372 = cbLight._m0[_2350].z + _439;
        float _2376 = inversesqrt(dot(vec3(_2370, _2371, _2372), vec3(_2370, _2371, _2372)));
        float _2377 = _2376 * _2370;
        float _2378 = _2376 * _2371;
        float _2379 = _2376 * _2372;
        float _2380 = dot(vec3(_356, _357, _358), vec3(cbLight._m0[_2350].xyz));
        float _4377 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2383 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2384 = dot(vec3(_356, _357, _358), vec3(_2377, _2378, _2379));
        float _4388 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2387 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2388 = dot(vec3(cbLight._m0[_2350].xyz), vec3(_2377, _2378, _2379));
        float _4399 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2392 = _2369 * _2369;
        float _2396 = ((_2387 * _2387) * (_2392 + (-1.0))) + 1.0;
        float _2403 = exp2(log2(1.0 - (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) * 5.0);
        float _2410 = 1.0 - _2369;
        float _2420 = (0.5 / (((_2152 * ((_2383 * _2410) + _2369)) + 9.9999999392252902907785028219223e-09) + (((_2152 * _2410) + _2369) * _2383))) * _2383;
        float _4410 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2422 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2392 / ((_2396 * _2396) * 3.141590118408203125));
        float _2423 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _2344 = (((((_2403 * _2174) + _523) * cbLight._m0[_2354].x) * _2422) * _2423) + _2286;
        _2346 = (((((_2403 * _2176) + _525) * cbLight._m0[_2354].y) * _2422) * _2423) + _2287;
        _2348 = (((((_2403 * _2177) + _526) * cbLight._m0[_2354].z) * _2422) * _2423) + _2288;
    }
    float _2454;
    float _2456;
    float _2458;
    if (_2061)
    {
        _2454 = _2344;
        _2456 = _2346;
        _2458 = _2348;
    }
    else
    {
        uint _2465 = _1875 + 3u;
        uint _2469 = _1875 + 11u;
        float _2483 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2465].w)) * _359) * 0.949999988079071044921875);
        float _2484 = _2483 * _2483;
        float _2485 = cbLight._m0[_2465].x + _437;
        float _2486 = cbLight._m0[_2465].y + _438;
        float _2487 = cbLight._m0[_2465].z + _439;
        float _2491 = inversesqrt(dot(vec3(_2485, _2486, _2487), vec3(_2485, _2486, _2487)));
        float _2492 = _2491 * _2485;
        float _2493 = _2491 * _2486;
        float _2494 = _2491 * _2487;
        float _2495 = dot(vec3(_356, _357, _358), vec3(cbLight._m0[_2465].xyz));
        float _4426 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2498 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2499 = dot(vec3(_356, _357, _358), vec3(_2492, _2493, _2494));
        float _4437 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2502 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _2503 = dot(vec3(cbLight._m0[_2465].xyz), vec3(_2492, _2493, _2494));
        float _4448 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2507 = _2484 * _2484;
        float _2511 = ((_2502 * _2502) * (_2507 + (-1.0))) + 1.0;
        float _2518 = exp2(log2(1.0 - (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) * 5.0);
        float _2525 = 1.0 - _2484;
        float _2535 = (0.5 / (((_2152 * ((_2498 * _2525) + _2484)) + 9.9999999392252902907785028219223e-09) + (((_2152 * _2525) + _2484) * _2498))) * _2498;
        float _4459 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2537 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2507 / ((_2511 * _2511) * 3.141590118408203125));
        float _2538 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
        _2454 = (((((_2518 * _2174) + _523) * cbLight._m0[_2469].x) * _2537) * _2538) + _2344;
        _2456 = (((((_2518 * _2176) + _525) * cbLight._m0[_2469].y) * _2537) * _2538) + _2346;
        _2458 = (((((_2518 * _2177) + _526) * cbLight._m0[_2469].z) * _2537) * _2538) + _2348;
    }
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    float _2612;
    float _2614;
    if (_1873.y == 0u)
    {
        uvec4 _2559 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2560 = _2559.x;
        uint _2571 = uint((float(_2559.y) * floor(float(uint(cbSceneParam._m0[85u].y * _459) / _2560))) + floor(float(uint(cbSceneParam._m0[85u].x * _458) / _2560)));
        float _2581 = (log2(_1651 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2582 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        uint _2585 = uint(isnan(14.0) ? _2582 : (isnan(_2582) ? 14.0 : min(_2582, 14.0)));
        uvec4 _2590 = texelFetch(g_lightClusterGridBuffer, int(((_2585 << 2u) + (_2571 << 6u)) >> 2u));
        uint _2591 = _2590.x;
        uint _2592 = _2559.z;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        if (((((1u << ((_2592 >> 4u) & 15u)) + 4294967295u) & _2591) == 0u) || ((_2592 & 240u) == 0u))
        {
            _2709 = 0.0;
            _2711 = 0.0;
            _2713 = 0.0;
            _2715 = 0.0;
            _2717 = 0.0;
            _2719 = 0.0;
        }
        else
        {
            float _2710;
            float _2712;
            float _2714;
            float _2716;
            float _2718;
            float _2720;
            float _2871 = 0.0;
            float _2872 = 0.0;
            float _2873 = 0.0;
            float _2874 = 0.0;
            float _2875 = 0.0;
            float _2876 = 0.0;
            uint _2877 = 0u;
            uint _2886;
            bool _2887;
            for (;;)
            {
                _2886 = texelFetch(g_lightClassification, int((((_2585 << 5u) + (_2571 << 9u)) + (_2877 << 2u)) >> 2u)).x;
                _2887 = _2886 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2887)
                {
                    frontier_phi_71_pred = _2876;
                    frontier_phi_71_pred_1 = _2875;
                    frontier_phi_71_pred_2 = _2874;
                    frontier_phi_71_pred_3 = _2873;
                    frontier_phi_71_pred_4 = _2872;
                    frontier_phi_71_pred_5 = _2871;
                }
                else
                {
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    uint _3022;
                    _3016 = _2871;
                    _3017 = _2872;
                    _3018 = _2873;
                    _3019 = _2874;
                    _3020 = _2875;
                    _3021 = _2876;
                    _3022 = _2886;
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    for (;;)
                    {
                        uint _3026 = uint(findLSB(_3022)) + (_2877 << 5u);
                        uint _3023 = (_3022 + 4294967295u) & _3022;
                        uint _3028 = _3026 * 48u;
                        vec4 _3042 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3028)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 3u)).x));
                        uint _3048 = (_3026 * 48u) + 4u;
                        vec4 _3061 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3048)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 3u)).x));
                        uint _3067 = (_3026 * 48u) + 8u;
                        vec3 _3078 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3067)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 2u)).x));
                        float _3082 = _3042.x - _1649;
                        float _3083 = _3042.y - _1650;
                        float _3084 = _3042.z - _1651;
                        float _3085 = dot(vec3(_3082, _3083, _3084), vec3(_3082, _3083, _3084));
                        float _3088 = inversesqrt(_3085);
                        float _3089 = _3088 * _3082;
                        float _3090 = _3088 * _3083;
                        float _3091 = _3088 * _3084;
                        float _3092 = dot(vec3(_479, _482, _485), vec3(_3089, _3090, _3091));
                        float _3097 = 1.0 - (_3085 * _3042.w);
                        float _4485 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                        float _3098 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3099 = sqrt(_3085) * _3061.w;
                        float _3102 = 1.39999997615814208984375 / (_3099 + 1.39999997615814208984375);
                        float _3103 = _3102 * _3102;
                        float _3106 = ((1.0 - _3103) * _3092) + _3103;
                        float _3109 = _3099 * _3099;
                        float _3113 = ((isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0))) * _3098) / ((_3109 * 0.699999988079071044921875) + 1.0);
                        float _3117 = (-0.0) - _1649;
                        float _3118 = (-0.0) - _1650;
                        float _3119 = (-0.0) - _1651;
                        float _3123 = inversesqrt(dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119)));
                        float _3124 = _3123 * _3117;
                        float _3125 = _3123 * _3118;
                        float _3126 = _3123 * _3119;
                        float _3133 = exp2(log2(1.0 / ((_3109 * 3.5) + 5.0)) * 0.25);
                        float _3134 = 1.0 - _554;
                        float _3141 = sqrt(1.0 - ((1.0 - (_3134 * _3134)) * (1.0 - (_3133 * _3133))));
                        float _3142 = _3141 * _3141;
                        float _3143 = _3142 * _3142;
                        float _3144 = _3124 + _3089;
                        float _3145 = _3125 + _3090;
                        float _3146 = _3126 + _3091;
                        float _3150 = inversesqrt(dot(vec3(_3144, _3145, _3146), vec3(_3144, _3145, _3146)));
                        float _3154 = dot(vec3(_479, _482, _485), vec3(_3124, _3125, _3126));
                        float _4501 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3157 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                        float _3158 = dot(vec3(_479, _482, _485), vec3(_3150 * _3144, _3150 * _3145, _3150 * _3146));
                        float _4512 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                        float _3161 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                        float _3165 = ((_3161 * _3161) * (_3143 + (-1.0))) + 1.0;
                        float _3166 = _3102 * _3142;
                        float _3167 = _3166 * _3166;
                        float _3170 = ((1.0 - _3167) * _3092) + _3167;
                        float _4523 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                        float _3171 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                        float _3172 = 1.0 - _3142;
                        float _3182 = (0.5 / (((_3171 * ((_3157 * _3172) + _3142)) + 9.9999999392252902907785028219223e-09) + (((_3171 * _3172) + _3142) * _3157))) * _3171;
                        float _4534 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3193 = (((_3143 * 3.1415927410125732421875) * (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0)))) / ((_3165 * _3165) * ((_3109 * 2.1991131305694580078125) + 3.141590118408203125))) * _3098;
                        _2946 = (_3113 * _3061.x) + _3019;
                        _2947 = (_3113 * _3061.y) + _3020;
                        _2948 = (_3113 * _3061.z) + _3021;
                        _2943 = (_3193 * _3078.x) + _3016;
                        _2944 = (_3193 * _3078.y) + _3017;
                        _2945 = (_3193 * _3078.z) + _3018;
                        if (_3023 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3016 = _2943;
                            _3017 = _2944;
                            _3018 = _2945;
                            _3019 = _2946;
                            _3020 = _2947;
                            _3021 = _2948;
                            _3022 = _3023;
                        }
                    }
                    frontier_phi_71_pred = _2948;
                    frontier_phi_71_pred_1 = _2947;
                    frontier_phi_71_pred_2 = _2946;
                    frontier_phi_71_pred_3 = _2945;
                    frontier_phi_71_pred_4 = _2944;
                    frontier_phi_71_pred_5 = _2943;
                }
                _2720 = frontier_phi_71_pred;
                _2718 = frontier_phi_71_pred_1;
                _2716 = frontier_phi_71_pred_2;
                _2714 = frontier_phi_71_pred_3;
                _2712 = frontier_phi_71_pred_4;
                _2710 = frontier_phi_71_pred_5;
                uint _2878 = _2877 + 1u;
                if (_2878 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2871 = _2710;
                    _2872 = _2712;
                    _2873 = _2714;
                    _2874 = _2716;
                    _2875 = _2718;
                    _2876 = _2720;
                    _2877 = _2878;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2709 = _2710;
            _2711 = _2712;
            _2713 = _2714;
            _2715 = _2716;
            _2717 = _2718;
            _2719 = _2720;
        }
        uvec4 _2723 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2724 = _2723.z;
        uint _2726 = (_2724 >> 8u) & 15u;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        if (((4294967295u << _2726) & _2591) == 0u)
        {
            _2839 = _2709;
            _2841 = _2711;
            _2843 = _2713;
            _2845 = _2715;
            _2847 = _2717;
            _2849 = _2719;
        }
        else
        {
            float _2864 = inversesqrt(dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651)));
            float _2865 = _2864 * _1649;
            float _2866 = _2864 * _1650;
            float _2867 = _2864 * _1651;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2726 < ((_2724 >> 12u) & 15u))
            {
                float _2840;
                float _2842;
                float _2844;
                float _2846;
                float _2848;
                float _2850;
                float _2999 = _2709;
                float _3000 = _2711;
                float _3001 = _2713;
                float _3002 = _2715;
                float _3003 = _2717;
                float _3004 = _2719;
                uint _3005 = _2726;
                uint _3014;
                bool _3015;
                for (;;)
                {
                    _3014 = texelFetch(g_lightClassification, int((((_2585 << 5u) + (_2571 << 9u)) + (_3005 << 2u)) >> 2u)).x;
                    _3015 = _3014 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3015)
                    {
                        frontier_phi_82_pred = _3004;
                        frontier_phi_82_pred_1 = _3003;
                        frontier_phi_82_pred_2 = _3002;
                        frontier_phi_82_pred_3 = _3001;
                        frontier_phi_82_pred_4 = _3000;
                        frontier_phi_82_pred_5 = _2999;
                    }
                    else
                    {
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3220 = _2999;
                        float _3221 = _3000;
                        float _3222 = _3001;
                        float _3223 = _3002;
                        float _3224 = _3003;
                        float _3225 = _3004;
                        uint _3226 = _3014;
                        uint _3227;
                        vec4 _3252;
                        float _3253;
                        vec4 _3268;
                        vec3 _3280;
                        vec4 _3296;
                        vec4 _3312;
                        float _3359;
                        bool _3360;
                        for (;;)
                        {
                            uint _3237 = ((_3005 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3226));
                            _3227 = (_3226 + 4294967295u) & _3226;
                            uint _3239 = _3237 * 40u;
                            _3252 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 3u)).x));
                            _3253 = _3252.w;
                            uint _3255 = (_3237 * 40u) + 4u;
                            _3268 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 3u)).x));
                            uint _3270 = (_3237 * 40u) + 8u;
                            _3280 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x));
                            uint _3283 = (_3237 * 40u) + 16u;
                            _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            uint _3299 = (_3237 * 40u) + 20u;
                            _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            uint _3315 = (_3237 * 40u) + 24u;
                            vec4 _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            uint _3334 = (_3237 * 40u) + 28u;
                            vec4 _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            _3359 = fma(_1651, _3347.z, fma(_1650, _3347.y, _3347.x * _1649)) + _3347.w;
                            _3360 = !((fma(_1651, _3328.z, fma(_1650, _3328.y, _3328.x * _1649)) + _3328.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3360)
                            {
                                float _3387 = _3252.x - _1649;
                                float _3388 = _3252.y - _1650;
                                float _3389 = _3252.z - _1651;
                                float _3390 = dot(vec3(_3387, _3388, _3389), vec3(_3387, _3388, _3389));
                                float _3393 = inversesqrt(_3390);
                                float _3394 = _3393 * _3387;
                                float _3395 = _3393 * _3388;
                                float _3396 = _3393 * _3389;
                                float _3400 = 1.0 - (_3390 / (_3253 * _3253));
                                float _4545 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3401 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3405 = sqrt(_3390) * _3268.w;
                                float _3407 = 1.39999997615814208984375 / (_3405 + 1.39999997615814208984375);
                                float _3408 = _3407 * _3407;
                                float _3411 = ((1.0 - _3408) * dot(vec3(_3394, _3395, _3396), vec3(_479, _482, _485))) + _3408;
                                float _3414 = _3405 * _3405;
                                float _3418 = (fma(_1651, _3296.z, fma(_1650, _3296.y, _3296.x * _1649)) + _3296.w) / _3359;
                                float _3419 = (fma(_1651, _3312.z, fma(_1650, _3312.y, _3312.x * _1649)) + _3312.w) / _3359;
                                float _3423 = 1.0 - dot(vec2(_3418, _3419), vec2(_3418, _3419));
                                float _4561 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3424 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3425 = _3424 * (((isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0))) * _3401) / ((_3414 * 0.699999988079071044921875) + 1.0));
                                float _3437 = exp2(log2(1.0 / ((_3414 * 3.5) + 5.0)) * 0.25);
                                float _3438 = 1.0 - _554;
                                float _3445 = sqrt(1.0 - ((1.0 - (_3438 * _3438)) * (1.0 - (_3437 * _3437))));
                                float _3446 = _3445 * _3445;
                                float _3447 = _3446 * _3446;
                                float _3448 = _3394 - _2865;
                                float _3449 = _3395 - _2866;
                                float _3450 = _3396 - _2867;
                                float _3454 = inversesqrt(dot(vec3(_3448, _3449, _3450), vec3(_3448, _3449, _3450)));
                                float _3458 = dot(vec3(_479, _482, _485), vec3((-0.0) - _2865, (-0.0) - _2866, (-0.0) - _2867));
                                float _4572 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3461 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3462 = dot(vec3(_479, _482, _485), vec3(_3454 * _3448, _3454 * _3449, _3454 * _3450));
                                float _4583 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3465 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3469 = ((_3465 * _3465) * (_3447 + (-1.0))) + 1.0;
                                float _3470 = _3407 * _3446;
                                float _3471 = _3470 * _3470;
                                float _3477 = ((1.0 - _3471) * dot(vec3(_479, _482, _485), vec3(_3394, _3395, _3396))) + _3471;
                                float _4594 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3478 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3479 = 1.0 - _3446;
                                float _3489 = (0.5 / (((_3478 * ((_3461 * _3479) + _3446)) + 9.9999999392252902907785028219223e-09) + (((_3478 * _3479) + _3446) * _3461))) * _3478;
                                float _4605 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3499 = (_3424 * _3401) * (((_3447 * 3.1415927410125732421875) * (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) / ((_3469 * _3469) * ((_3414 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3425 * _3268.z;
                                frontier_phi_88_pred_1 = _3425 * _3268.y;
                                frontier_phi_88_pred_2 = _3425 * _3268.x;
                                frontier_phi_88_pred_3 = _3499 * _3280.z;
                                frontier_phi_88_pred_4 = _3499 * _3280.y;
                                frontier_phi_88_pred_5 = _3499 * _3280.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3508 = frontier_phi_88_pred;
                            _3507 = frontier_phi_88_pred_1;
                            _3506 = frontier_phi_88_pred_2;
                            _3505 = frontier_phi_88_pred_3;
                            _3504 = frontier_phi_88_pred_4;
                            _3503 = frontier_phi_88_pred_5;
                            _3210 = _3506 + _3223;
                            _3211 = _3507 + _3224;
                            _3212 = _3508 + _3225;
                            _3207 = _3503 + _3220;
                            _3208 = _3504 + _3221;
                            _3209 = _3505 + _3222;
                            if (_3227 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3220 = _3207;
                                _3221 = _3208;
                                _3222 = _3209;
                                _3223 = _3210;
                                _3224 = _3211;
                                _3225 = _3212;
                                _3226 = _3227;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3212;
                        frontier_phi_82_pred_1 = _3211;
                        frontier_phi_82_pred_2 = _3210;
                        frontier_phi_82_pred_3 = _3209;
                        frontier_phi_82_pred_4 = _3208;
                        frontier_phi_82_pred_5 = _3207;
                    }
                    _2850 = frontier_phi_82_pred;
                    _2848 = frontier_phi_82_pred_1;
                    _2846 = frontier_phi_82_pred_2;
                    _2844 = frontier_phi_82_pred_3;
                    _2842 = frontier_phi_82_pred_4;
                    _2840 = frontier_phi_82_pred_5;
                    uint _3006 = _3005 + 1u;
                    if (_3006 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2999 = _2840;
                        _3000 = _2842;
                        _3001 = _2844;
                        _3002 = _2846;
                        _3003 = _2848;
                        _3004 = _2850;
                        _3005 = _3006;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2846;
                frontier_phi_63_64_ladder_1 = _2850;
                frontier_phi_63_64_ladder_2 = _2848;
                frontier_phi_63_64_ladder_3 = _2844;
                frontier_phi_63_64_ladder_4 = _2842;
                frontier_phi_63_64_ladder_5 = _2840;
            }
            else
            {
                frontier_phi_63_64_ladder = _2715;
                frontier_phi_63_64_ladder_1 = _2719;
                frontier_phi_63_64_ladder_2 = _2717;
                frontier_phi_63_64_ladder_3 = _2713;
                frontier_phi_63_64_ladder_4 = _2711;
                frontier_phi_63_64_ladder_5 = _2709;
            }
            _2839 = frontier_phi_63_64_ladder_5;
            _2841 = frontier_phi_63_64_ladder_4;
            _2843 = frontier_phi_63_64_ladder_3;
            _2845 = frontier_phi_63_64_ladder;
            _2847 = frontier_phi_63_64_ladder_2;
            _2849 = frontier_phi_63_64_ladder_1;
        }
        float _2854 = isnan(1.0) ? _538 : (isnan(_538) ? 1.0 : min(_538, 1.0));
        _2604 = (_2854 * _2845) + _2116;
        _2606 = (_2854 * _2847) + _2118;
        _2608 = (_2854 * _2849) + _2120;
        _2610 = ((_2839 * _523) * _2854) + _2454;
        _2612 = ((_2841 * _525) * _2854) + _2456;
        _2614 = ((_2843 * _526) * _2854) + _2458;
    }
    else
    {
        _2604 = _2116;
        _2606 = _2118;
        _2608 = _2120;
        _2610 = _2454;
        _2612 = _2456;
        _2614 = _2458;
    }
    uint _2620 = _499 + uint(cbMatDynParam._m0[0u].w);
    float _2629 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _322.x) * _342) * cbInstanceData._m0[_2620].x;
    float _2633 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _322.y) * _342) * cbInstanceData._m0[_2620].y;
    float _2637 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _322.z) * _342) * cbInstanceData._m0[_2620].z;
    float _4621 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _4632 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _4643 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _2654 = (((isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2604 + ((isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0))) * _538))) + ((_2610 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _1379)) * cbPerFrame._m0[3u].x)) + _2629;
    float _2656 = (_2633 + ((_2612 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _1379)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2606 + ((isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0))) * _538)));
    float _2658 = (_2637 + ((_2614 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _1379)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2608 + ((isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))) * _538)));
    float _2659 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2660 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
    float _2661 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
    float _2667 = cbMtdParam._m0[2u].x * _2629;
    float _2668 = cbMtdParam._m0[2u].y * _2633;
    float _2669 = cbMtdParam._m0[2u].z * _2637;
    float _4669 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2671 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
    uint _2672 = _498 + 6u;
    float _2680 = _458 / cbSceneParam._m0[86u].x;
    float _2681 = _459 / cbSceneParam._m0[86u].y;
    vec4 _2695 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2680, _2681, (log2((isnan(cbSceneParam._m0[77u].w) ? _379 : (isnan(_379) ? cbSceneParam._m0[77u].w : min(_379, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2697 = _2695.x;
    float _2698 = _2695.y;
    float _2699 = _2695.z;
    float _2700 = _2695.w;
    float _2772;
    float _2774;
    float _2776;
    float _2778;
    if (_379 > cbSceneParam._m0[78u].w)
    {
        float _2734 = isnan(_379) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _379 : min(cbSceneParam._m0[80u].w, _379));
        float _2735 = _2734 / _379;
        float _2746 = _2735 * _430;
        float _2747 = _431 * _2735;
        float _2748 = (-0.0) - _2747;
        float _2750 = _2735 * _432;
        float _2752 = (cbSceneParam._m0[77u].w * _2748) / _2734;
        float _2753 = _2752 + cbSceneParam._m0[79u].w;
        float _2754 = cbSceneParam._m0[79u].w - _2747;
        float _2760 = sqrt(((_2746 * _2746) + (_2747 * _2747)) + (_2750 * _2750));
        float _2763 = (1.0 - (cbSceneParam._m0[77u].w / _2734)) * _2760;
        float _2768 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2770 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2956;
        if (abs((_2748 - _2752) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2956 = ((((_2753 > 0.0) ? exp2(_2768 * _2753) : (2.0 - exp2(_2770 * _2753))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2763;
        }
        else
        {
            float _2900 = 1.0 / cbSceneParam._m0[80u].x;
            float _2901 = isnan(_2754) ? _2753 : (isnan(_2753) ? _2754 : max(_2753, _2754));
            float _2902 = isnan(_2754) ? _2753 : (isnan(_2753) ? _2754 : min(_2753, _2754));
            float _2911 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : min(_2901, 0.0));
            float _2912 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : min(_2902, 0.0));
            _2956 = ((abs(_2760 / _2748) * cbSceneParam._m0[80u].y) * ((((_2911 - _2912) * 2.0) - ((exp2(_2768 * (isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0)))) - exp2(_2768 * (isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0))))) * _2900)) - ((exp2(_2770 * _2911) - exp2(_2770 * _2912)) * _2900))) + (_2763 * cbSceneParam._m0[80u].z);
        }
        vec4 _2958 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2680, _2681, 1.0), 0.0);
        float _2967 = exp2((_2956 * (-1.44269502162933349609375)) * (1.0 - _2958.w));
        float _2968 = log2(_2967);
        float _2984 = log2(_2700);
        _2772 = (exp2(_2984 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2968 * cbSceneParam._m0[78u].x)) * _2958.x) / cbSceneParam._m0[78u].x)) + _2697;
        _2774 = (exp2(_2984 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2968 * cbSceneParam._m0[78u].y)) * _2958.y) / cbSceneParam._m0[78u].y)) + _2698;
        _2776 = (exp2(_2984 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2968 * cbSceneParam._m0[78u].z)) * _2958.z) / cbSceneParam._m0[78u].z)) + _2699;
        _2778 = _2967 * _2700;
    }
    else
    {
        _2772 = _2697;
        _2774 = _2698;
        _2776 = _2699;
        _2778 = _2700;
    }
    bool _2994;
    vec4 _2788;
    vec4 _2810;
    float _2812;
    float _2816;
    float _2817;
    float _2818;
    float _2821;
    float _2824;
    float _2827;
    float _2828;
    bool _2838;
    for (;;)
    {
        _2788 = cbMatDynParam._m0[0u];
        float _2790 = roundEven(_2788.y);
        bool _2791 = _2790 == 3.0;
        float _2792 = log2(_2778);
        float _2796 = exp2(_2792 * cbSceneParam._m0[78u].x);
        float _2797 = exp2(_2792 * cbSceneParam._m0[78u].y);
        float _2798 = exp2(_2792 * cbSceneParam._m0[78u].z);
        float _2799 = _2796 * _2659;
        float _2800 = _2797 * _2660;
        float _2801 = _2798 * _2661;
        float _2808 = _446 + (-0.5);
        _2810 = cbMtdParam._m0[1u];
        _2812 = _2810.y * _2808;
        float _2815 = (_2790 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2816 = _2815 * (_2791 ? _2799 : (_2799 + (cbSceneParam._m0[72u].w * _2772)));
        _2817 = _2815 * (_2791 ? _2800 : (_2800 + (cbSceneParam._m0[72u].w * _2774)));
        _2818 = _2815 * (_2791 ? _2801 : (_2801 + (cbSceneParam._m0[72u].w * _2776)));
        _2821 = ((_2667 * _2671) * _2796) * _2815;
        _2824 = ((_2668 * _2671) * _2797) * _2815;
        _2827 = ((_2669 * _2671) * _2798) * _2815;
        _2828 = _2808 * 0.999000012874603271484375;
        _2838 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2838)
        {
            if ((cbInstanceData._m0[_498 + 7u].x + _2828) < 0.5)
            {
                _2994 = true;
                break;
            }
        }
        uint _2935 = _499 + uint(_2788.w);
        if ((cbInstanceData._m0[_2935].w < 1.0) && ((cbInstanceData._m0[_2935].w + _2828) < 0.5))
        {
            _2994 = true;
            break;
        }
        if ((_2812 + 1.0) < _2810.x)
        {
            _2994 = true;
            break;
        }
        _2994 = false;
        break;
    }
    float _3198;
    if (_2994)
    {
        discard_state = true;
        _3198 = 0.0;
    }
    else
    {
        _3198 = cbInstanceData._m0[_2672].w;
    }
    SV_Target.x = _2816;
    SV_Target.y = _2817;
    SV_Target.z = _2818;
    SV_Target.w = _3198;
    SV_Target_1.x = _2821;
    SV_Target_1.y = _2824;
    SV_Target_1.z = _2827;
    SV_Target_1.w = cbInstanceData._m0[_2672].w;
    discard_exit();
}


