#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _922;
float _3354;
float _3355;
float _3356;
float _3357;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _230 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _236 = _230.x * cbMtdParam._m0[9u].x;
    float _237 = _230.y * cbMtdParam._m0[9u].y;
    float _238 = _230.z * cbMtdParam._m0[9u].z;
    vec4 _250 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _252 = _250.x;
    vec4 _264 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _268 = _264.z;
    float _272 = (_264.x * 2.0) + (-1.0);
    float _274 = (_264.y * 2.0) + (-1.0);
    float _275 = dot(vec2(_272, _274), vec2(_272, _274));
    float _3366 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _281 = sqrt(1.0 - (isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0))));
    vec4 _318 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _325 = fma(_281, _201 * NORMAL.x, fma(_274, _208 * TANGENT.x, (_194 * _187) * _272));
    float _328 = fma(_281, _201 * NORMAL.y, fma(_274, _208 * TANGENT.y, (_194 * _188) * _272));
    float _331 = fma(_281, _201 * NORMAL.z, fma(_274, _208 * TANGENT.z, (_194 * _189) * _272));
    float _335 = inversesqrt(dot(vec3(_325, _328, _331), vec3(_325, _328, _331)));
    float _336 = _335 * _325;
    float _337 = _335 * _328;
    float _338 = _335 * _331;
    float _3377 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _339 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
    float _3388 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3399 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3410 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3421 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _343 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
    float _359 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _400 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _410 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _400);
    float _411 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _400);
    float _412 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _400);
    float _416 = inversesqrt(dot(vec3(_410, _411, _412), vec3(_410, _411, _412)));
    float _417 = _410 * _416;
    float _418 = _411 * _416;
    float _419 = _412 * _416;
    vec4 _424 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _426 = _424.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _601 = sqrt(((_410 * _410) + (_411 * _411)) + (_412 * _412));
        float _607 = (cbMatDynParam._m0[5u].x * _601) + cbMatDynParam._m0[5u].y;
        float _3432 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
        float _608 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _612 = (cbMatDynParam._m0[5u].z * _601) + cbMatDynParam._m0[5u].w;
        float _3443 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) - _608)) + _608) < ((_426 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _438 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _439 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _459 = fma(_338, cbSceneParam._m0[5u].z, fma(_337, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _336));
    float _462 = fma(_338, cbSceneParam._m0[6u].z, fma(_337, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _336));
    float _465 = fma(_338, cbSceneParam._m0[7u].z, fma(_337, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _336));
    uint _478 = uint(roundEven(NORMAL.w)) * 13u;
    uint _479 = _478 + 9u;
    uint _480 = _479 + uint(cbMatDynParam._m0[0u].w);
    float _486 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0)))) * cbInstanceData._m0[_480].x;
    float _487 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0)))) * cbInstanceData._m0[_480].y;
    float _488 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0)))) * cbInstanceData._m0[_480].z;
    float _3454 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _489 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
    float _3465 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _490 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
    float _3476 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _491 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    float _492 = 1.0 - _343;
    float _493 = _489 * _492;
    float _494 = _490 * _492;
    float _495 = _491 * _492;
    float _500 = (_489 + (-0.039999999105930328369140625)) * _343;
    float _501 = (_490 + (-0.039999999105930328369140625)) * _343;
    float _502 = (_491 + (-0.039999999105930328369140625)) * _343;
    float _503 = _500 + 0.039999999105930328369140625;
    float _505 = _501 + 0.039999999105930328369140625;
    float _506 = _502 + 0.039999999105930328369140625;
    vec4 _515 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _438, cbSceneParam._m0[86u].y * _439));
    float _518 = _515.x * TEXCOORD.z;
    float _519 = dot(vec3(_336, _337, _338), vec3(_417, _418, _419));
    float _522 = _519 * 2.0;
    float _526 = (_522 * _336) - _417;
    float _527 = (_522 * _337) - _418;
    float _528 = (_522 * _338) - _419;
    float _532 = abs(dot(vec3(_417, _418, _419), vec3(_336, _337, _338)));
    float _3487 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _534 = sqrt(_339);
    float _547 = exp2((_534 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_534 * 3.0));
    float _553 = (1.0 - _547) * ((_534 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _554 = _547 * _534;
    float _582 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _586 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _590 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _921;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _646 = fma(_590, cbModelParam._m0[26u].z, fma(_586, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _582));
        float _650 = fma(_590, cbModelParam._m0[27u].z, fma(_586, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _582));
        float _654 = fma(_590, cbModelParam._m0[28u].z, fma(_586, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _582));
        float _679 = _582 + _336;
        float _680 = _586 + _337;
        float _681 = _590 + _338;
        float _691 = fma(_681, cbModelParam._m0[26u].z, fma(_680, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _679)) - _646;
        float _692 = fma(_681, cbModelParam._m0[27u].z, fma(_680, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _679)) - _650;
        float _693 = fma(_681, cbModelParam._m0[28u].z, fma(_680, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _679)) - _654;
        float _697 = inversesqrt(dot(vec3(_691, _692, _693), vec3(_691, _692, _693)));
        float _710 = ((_697 * _691) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_646 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _711 = ((_697 * _692) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_650 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _712 = ((_697 * _693) / cbModelParam._m0[34u].z) + ((((((_654 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _715 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_710, _711, _712), 0.0);
        vec4 _722 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_710, _711, _712), 0.0);
        vec4 _729 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_710, _711, _712), 0.0);
        vec4 _736 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_710, _711, _712), 0.0);
        float _749 = exp2((_715.w + (-0.5)) * 20.0) * 2.0;
        float _750 = _749 * (_715.x + (-0.5));
        float _751 = _749 * (_715.y + (-0.5));
        float _752 = _749 * (_715.z + (-0.5));
        float _759 = exp2((_722.w + (-0.5)) * 20.0) * 2.0;
        float _760 = _759 * (_722.x + (-0.5));
        float _761 = _759 * (_722.y + (-0.5));
        float _762 = _759 * (_722.z + (-0.5));
        float _769 = exp2((_729.w + (-0.5)) * 20.0) * 2.0;
        float _770 = _769 * (_729.x + (-0.5));
        float _771 = _769 * (_729.y + (-0.5));
        float _772 = _769 * (_729.z + (-0.5));
        float _779 = exp2((_736.w + (-0.5)) * 20.0) * 2.0;
        float _780 = _779 * (_736.x + (-0.5));
        float _781 = _779 * (_736.y + (-0.5));
        float _782 = _779 * (_736.z + (-0.5));
        float _783 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _784 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _785 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _786 = _750 * 0.5;
        float _787 = _760 * 0.5;
        float _788 = _770 * 0.5;
        float _789 = dot(vec3(_786, _787, _788), vec3(_786, _787, _788));
        float _794 = (_789 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_789);
        float _803 = (dot(vec3(_336, _337, _338), vec3(_794 * _786, _794 * _787, _794 * _788)) + 1.0) * 0.5;
        float _3513 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _813 = sqrt(((_787 * _787) + (_786 * _786)) + (_788 * _788)) / (_783 + 9.9999997473787516355514526367188e-06);
        float _3524 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _815 = _814 * 2.0;
        float _819 = (1.0 - _814) / (_814 + 1.0);
        float _3535 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _829 = ((((1.0 - _820) * (_815 + 2.0)) * exp2(log2(isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * (_815 + 1.0))) + _820) * _783;
        float _830 = _751 * 0.5;
        float _831 = _761 * 0.5;
        float _832 = _771 * 0.5;
        float _833 = dot(vec3(_830, _831, _832), vec3(_830, _831, _832));
        float _838 = (_833 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_833);
        float _846 = (dot(vec3(_336, _337, _338), vec3(_838 * _830, _838 * _831, _838 * _832)) + 1.0) * 0.5;
        float _3546 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _855 = sqrt(((_831 * _831) + (_830 * _830)) + (_832 * _832)) / (_784 + 9.9999997473787516355514526367188e-06);
        float _3557 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _857 = _856 * 2.0;
        float _861 = (1.0 - _856) / (_856 + 1.0);
        float _3568 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _862 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _871 = ((((1.0 - _862) * (_857 + 2.0)) * exp2(log2(isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * (_857 + 1.0))) + _862) * _784;
        float _872 = _752 * 0.5;
        float _873 = _762 * 0.5;
        float _874 = _772 * 0.5;
        float _875 = dot(vec3(_872, _873, _874), vec3(_872, _873, _874));
        float _880 = (_875 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_875);
        float _888 = (dot(vec3(_336, _337, _338), vec3(_880 * _872, _880 * _873, _880 * _874)) + 1.0) * 0.5;
        float _3579 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _897 = sqrt(((_873 * _873) + (_872 * _872)) + (_874 * _874)) / (_785 + 9.9999997473787516355514526367188e-06);
        float _3590 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _899 = _898 * 2.0;
        float _903 = (1.0 - _898) / (_898 + 1.0);
        float _3601 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _913 = ((((1.0 - _904) * (_899 + 2.0)) * exp2(log2(isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * (_899 + 1.0))) + _904) * _785;
        _921 = _752;
        _923 = _751;
        _924 = _750;
        _925 = _762;
        _926 = _761;
        _927 = _760;
        _928 = _772;
        _929 = _771;
        _930 = _770;
        _931 = _785;
        _932 = _784;
        _933 = _783;
        _934 = cbModelParam._m0[36u].z * (isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0)));
        _935 = cbModelParam._m0[36u].z * (isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0)));
        _936 = cbModelParam._m0[36u].z * (isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0)));
    }
    else
    {
        _921 = _922;
        _923 = _922;
        _924 = _922;
        _925 = _922;
        _926 = _922;
        _927 = _922;
        _928 = _922;
        _929 = _922;
        _930 = _922;
        _931 = _922;
        _932 = _922;
        _933 = _922;
        _934 = 0.0;
        _935 = 0.0;
        _936 = 0.0;
    }
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _965 = fma(_590, cbModelParam._m0[30u].z, fma(_586, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _582));
        float _969 = fma(_590, cbModelParam._m0[31u].z, fma(_586, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _582));
        float _973 = fma(_590, cbModelParam._m0[32u].z, fma(_586, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _582));
        float _996 = _582 + _336;
        float _997 = _586 + _337;
        float _998 = _590 + _338;
        float _1008 = fma(_998, cbModelParam._m0[30u].z, fma(_997, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _996)) - _965;
        float _1009 = fma(_998, cbModelParam._m0[31u].z, fma(_997, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _996)) - _969;
        float _1010 = fma(_998, cbModelParam._m0[32u].z, fma(_997, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _996)) - _973;
        float _1014 = inversesqrt(dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010)));
        float _1027 = ((_1014 * _1008) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_965 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1028 = ((_1014 * _1009) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_969 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1029 = ((_1014 * _1010) / cbModelParam._m0[35u].z) + ((((((_973 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        float _1064 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1031.x + (-0.5));
        float _1066 = _1064 * (_1031.y + (-0.5));
        float _1067 = _1064 * (_1031.z + (-0.5));
        float _1074 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1038.x + (-0.5));
        float _1076 = _1074 * (_1038.y + (-0.5));
        float _1077 = _1074 * (_1038.z + (-0.5));
        float _1084 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1045.x + (-0.5));
        float _1086 = _1084 * (_1045.y + (-0.5));
        float _1087 = _1084 * (_1045.z + (-0.5));
        float _1094 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1052.x + (-0.5));
        float _1096 = _1094 * (_1052.y + (-0.5));
        float _1097 = _1094 * (_1052.z + (-0.5));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = _1065 * 0.5;
        float _1102 = _1075 * 0.5;
        float _1103 = _1085 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1117 = (dot(vec3(_336, _337, _338), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1126 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3664 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_1128 + 1.0))) + _1133) * _1098;
        float _1143 = _1066 * 0.5;
        float _1144 = _1076 * 0.5;
        float _1145 = _1086 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_336, _337, _338), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3697 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1170 + 1.0))) + _1175) * _1099;
        float _1185 = _1067 * 0.5;
        float _1186 = _1077 * 0.5;
        float _1187 = _1087 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_336, _337, _338), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3730 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1212 + 1.0))) + _1217) * _1100;
        _1234 = _1067;
        _1235 = _1066;
        _1236 = _1065;
        _1237 = _1077;
        _1238 = _1076;
        _1239 = _1075;
        _1240 = _1087;
        _1241 = _1086;
        _1242 = _1085;
        _1243 = _1100;
        _1244 = _1099;
        _1245 = _1098;
        _1246 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1247 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
        _1248 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
    }
    else
    {
        _1234 = _922;
        _1235 = _922;
        _1236 = _922;
        _1237 = _922;
        _1238 = _922;
        _1239 = _922;
        _1240 = _922;
        _1241 = _922;
        _1242 = _922;
        _1243 = _922;
        _1244 = _922;
        _1245 = _922;
        _1246 = 0.0;
        _1247 = 0.0;
        _1248 = 0.0;
    }
    float _1258 = (cbModelParam._m0[1u].x * (_1246 - _934)) + _934;
    float _1259 = (cbModelParam._m0[1u].x * (_1247 - _935)) + _935;
    float _1260 = (cbModelParam._m0[1u].x * (_1248 - _936)) + _936;
    float _1281 = fma(_1260, cbSceneParam._m0[89u].z, fma(_1259, cbSceneParam._m0[89u].y, _1258 * cbSceneParam._m0[89u].x));
    float _1284 = fma(_1260, cbSceneParam._m0[90u].z, fma(_1259, cbSceneParam._m0[90u].y, _1258 * cbSceneParam._m0[90u].x));
    float _1287 = fma(_1260, cbSceneParam._m0[91u].z, fma(_1259, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1258));
    float _1302 = _526 * 0.5;
    float _1303 = _527 * 0.5;
    float _1304 = _528 * 0.5;
    float _1305 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_1236, _1239, _1242, _1245));
    float _1308 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_1235, _1238, _1241, _1244));
    float _1311 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_1234, _1237, _1240, _1243));
    float _1345;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1318 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_921, _925, _928, _931));
        float _1322 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_923, _926, _929, _932));
        float _1326 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_924, _927, _930, _933));
        float _1333 = dot(vec4(cbModelParam._m0[39u]), vec4(_1302, _1303, _1304, 1.0));
        _1345 = dot(vec3(isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)), isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)), isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1333) ? 0.0 : (isnan(0.0) ? _1333 : max(0.0, _1333))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1345 = 1.0;
    }
    float _1356;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1347 = dot(vec4(cbModelParam._m0[40u]), vec4(_1302, _1303, _1304, 1.0));
        _1356 = dot(vec3(isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)), isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1347) ? 0.0 : (isnan(0.0) ? _1347 : max(0.0, _1347))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1356 = 1.0;
    }
    float _1360 = (_1356 * cbModelParam._m0[1u].x) + (_1345 * (1.0 - cbModelParam._m0[1u].x));
    float _1370 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _339);
    float _1371 = isnan(_1370) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1370 : min(cbModelParam._m0[25u].z, _1370));
    float _1452;
    float _1454;
    float _1456;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1419 = fma(_590, cbModelParam._m0[13u].z, fma(_586, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _582)) + cbModelParam._m0[13u].w;
        float _1423 = fma(_590, cbModelParam._m0[14u].z, fma(_586, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _582)) + cbModelParam._m0[14u].w;
        float _1427 = fma(_590, cbModelParam._m0[15u].z, fma(_586, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _582)) + cbModelParam._m0[15u].w;
        float _1430 = fma(_528, cbModelParam._m0[13u].z, fma(_527, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _526));
        float _1433 = fma(_528, cbModelParam._m0[14u].z, fma(_527, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _526));
        float _1436 = fma(_528, cbModelParam._m0[15u].z, fma(_527, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _526));
        float _1464;
        if (_1430 > 0.0)
        {
            _1464 = abs((1.0 - _1419) / _1430);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1430 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1419 + 1.0) / _1430);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1464 = frontier_phi_17_15_ladder;
        }
        float _1670;
        if (_1433 > 0.0)
        {
            _1670 = abs((1.0 - _1423) / _1433);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1433 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1423 + 1.0) / _1433);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1670 = frontier_phi_26_22_ladder;
        }
        float _1924;
        if (_1436 > 0.0)
        {
            _1924 = abs((1.0 - _1427) / _1436);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1436 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1427 + 1.0) / _1436);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1924 = frontier_phi_38_33_ladder;
        }
        float _1926 = isnan(_1670) ? _1464 : (isnan(_1464) ? _1670 : min(_1464, _1670));
        float _1927 = isnan(_1924) ? _1926 : (isnan(_1926) ? _1924 : min(_1926, _1924));
        float _1931 = (_1927 * _1430) + _1419;
        float _1932 = (_1927 * _1433) + _1423;
        float _1933 = (_1927 * _1436) + _1427;
        float _1934 = _1927 * 9.9999997473787516355514526367188e-05;
        float _1936 = (-1.0) - _1934;
        float _1938 = _1934 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1933 > _1938) || ((_1933 < _1936) || ((_1932 > _1938) || ((_1932 < _1936) || ((_1931 < _1936) || (_1931 > _1938))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2061 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1933, cbModelParam._m0[9u].z, fma(_1932, cbModelParam._m0[9u].y, _1931 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1933, cbModelParam._m0[10u].z, fma(_1932, cbModelParam._m0[10u].y, _1931 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1933, cbModelParam._m0[11u].z, fma(_1932, cbModelParam._m0[11u].y, _1931 * cbModelParam._m0[11u].x))), _1371);
            frontier_phi_16_38_ladder = _2061.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2061.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2061.x * cbModelParam._m0[1u].y;
        }
        _1452 = frontier_phi_16_38_ladder_2;
        _1454 = frontier_phi_16_38_ladder_1;
        _1456 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1440 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_526, _527, _528), _1371);
        _1452 = _1440.x * cbModelParam._m0[1u].y;
        _1454 = _1440.y * cbModelParam._m0[1u].y;
        _1456 = _1440.z * cbModelParam._m0[1u].y;
    }
    float _1460 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _339);
    float _1461 = isnan(_1460) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1460 : min(cbModelParam._m0[25u].w, _1460));
    float _1553;
    float _1555;
    float _1557;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1517 = fma(_590, cbModelParam._m0[21u].z, fma(_586, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _582)) + cbModelParam._m0[21u].w;
        float _1521 = fma(_590, cbModelParam._m0[22u].z, fma(_586, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _582)) + cbModelParam._m0[22u].w;
        float _1525 = fma(_590, cbModelParam._m0[23u].z, fma(_586, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _582)) + cbModelParam._m0[23u].w;
        float _1528 = fma(_528, cbModelParam._m0[21u].z, fma(_527, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _526));
        float _1531 = fma(_528, cbModelParam._m0[22u].z, fma(_527, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _526));
        float _1534 = fma(_528, cbModelParam._m0[23u].z, fma(_527, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _526));
        float _1675;
        if (_1528 > 0.0)
        {
            _1675 = abs((1.0 - _1517) / _1528);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1517 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1675 = frontier_phi_28_24_ladder;
        }
        float _1951;
        if (_1531 > 0.0)
        {
            _1951 = abs((1.0 - _1521) / _1531);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1521 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1951 = frontier_phi_40_35_ladder;
        }
        float _2164;
        if (_1534 > 0.0)
        {
            _2164 = abs((1.0 - _1525) / _1534);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1525 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2164 = frontier_phi_49_46_ladder;
        }
        float _2166 = isnan(_1951) ? _1675 : (isnan(_1675) ? _1951 : min(_1675, _1951));
        float _2167 = isnan(_2164) ? _2166 : (isnan(_2166) ? _2164 : min(_2166, _2164));
        float _2171 = (_2167 * _1528) + _1517;
        float _2172 = (_2167 * _1531) + _1521;
        float _2173 = (_2167 * _1534) + _1525;
        float _2174 = _2167 * 9.9999997473787516355514526367188e-05;
        float _2175 = (-1.0) - _2174;
        float _2177 = _2174 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2173 > _2177) || ((_2173 < _2175) || ((_2172 > _2177) || ((_2172 < _2175) || ((_2171 < _2175) || (_2171 > _2177))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2407 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2173, cbModelParam._m0[17u].z, fma(_2172, cbModelParam._m0[17u].y, _2171 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2173, cbModelParam._m0[18u].z, fma(_2172, cbModelParam._m0[18u].y, _2171 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2173, cbModelParam._m0[19u].z, fma(_2172, cbModelParam._m0[19u].y, _2171 * cbModelParam._m0[19u].x))), _1461);
            frontier_phi_25_49_ladder = _2407.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2407.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2407.x * cbModelParam._m0[1u].z;
        }
        _1553 = frontier_phi_25_49_ladder_2;
        _1555 = frontier_phi_25_49_ladder_1;
        _1557 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1537 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_526, _527, _528), _1461);
        _1553 = _1537.x * cbModelParam._m0[1u].z;
        _1555 = _1537.y * cbModelParam._m0[1u].z;
        _1557 = _1537.z * cbModelParam._m0[1u].z;
    }
    float _1570 = (((_553 * _503) + _554) * _518) * ((cbModelParam._m0[1u].w * (_1553 - _1452)) + _1452);
    float _1572 = (((_553 * _505) + _554) * _518) * ((cbModelParam._m0[1u].w * (_1555 - _1454)) + _1454);
    float _1574 = (((_553 * _506) + _554) * _518) * ((cbModelParam._m0[1u].w * (_1557 - _1456)) + _1456);
    float _1577 = fma(_1574, cbSceneParam._m0[89u].z, fma(_1572, cbSceneParam._m0[89u].y, _1570 * cbSceneParam._m0[89u].x));
    float _1580 = fma(_1574, cbSceneParam._m0[90u].z, fma(_1572, cbSceneParam._m0[90u].y, _1570 * cbSceneParam._m0[90u].x));
    float _1583 = fma(_1574, cbSceneParam._m0[91u].z, fma(_1572, cbSceneParam._m0[91u].y, _1570 * cbSceneParam._m0[91u].x));
    uvec4 _1593 = floatBitsToUint(cbInstanceData._m0[_478 + 5u]);
    uint _1595 = _1593.x * 14u;
    uint _1596 = _1595 + 13u;
    float _1603 = _518 + (-1.0);
    float _1608 = (cbLight._m0[_1596].x * _1603) + 1.0;
    float _1609 = (cbLight._m0[_1596].y * _1603) + 1.0;
    float _1610 = (cbLight._m0[_1596].z * _1603) + 1.0;
    float _1611 = (cbLight._m0[_1596].w * _1603) + 1.0;
    uint _1612 = _1595 + 5u;
    float _1618 = isnan(1.0) ? _1609 : (isnan(_1609) ? 1.0 : min(_1609, 1.0));
    uint _1622 = _1595 + 4u;
    float _1629 = isnan(1.0) ? _1608 : (isnan(_1608) ? 1.0 : min(_1608, 1.0));
    uint _1633 = _1595 | 1u;
    float _1644 = dot(vec3(cbLight._m0[_1595].xyz), vec3(_336, _337, _338));
    float _1647 = dot(vec3(cbLight._m0[_1633].xyz), vec3(_336, _337, _338));
    float _3866 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
    float _3877 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
    float _1652 = (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * 0.3183098733425140380859375;
    float _1654 = (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * 0.3183098733425140380859375;
    float _1661 = ((cbLight._m0[_1612].x * _1618) * _1654) + ((cbLight._m0[_1622].x * _1629) * _1652);
    float _1662 = ((_1618 * cbLight._m0[_1612].y) * _1654) + ((_1629 * cbLight._m0[_1622].y) * _1652);
    float _1663 = ((_1618 * cbLight._m0[_1612].z) * _1654) + ((_1629 * cbLight._m0[_1622].z) * _1652);
    uvec4 _1667 = floatBitsToUint(cbLight._m0[_1595 + 12u]);
    bool _1669 = _1667.x == 0u;
    float _1680;
    float _1682;
    float _1684;
    if (_1669)
    {
        _1680 = _1661;
        _1682 = _1662;
        _1684 = _1663;
    }
    else
    {
        uint _1688 = _1595 + 6u;
        float _1704 = (dot(vec3(cbLight._m0[_1595 + 2u].xyz), vec3(_336, _337, _338)) * 0.5) + 0.5;
        float _1705 = _1704 * _1704;
        float _3888 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1707 = isnan(1.0) ? _1610 : (isnan(_1610) ? 1.0 : min(_1610, 1.0));
        _1680 = (((cbLight._m0[_1688].x * 0.3183098733425140380859375) * _1706) * _1707) + _1661;
        _1682 = (((cbLight._m0[_1688].y * 0.3183098733425140380859375) * _1706) * _1707) + _1662;
        _1684 = (((cbLight._m0[_1688].z * 0.3183098733425140380859375) * _1706) * _1707) + _1663;
    }
    bool _1687 = _1667.y == 0u;
    float _1725;
    float _1727;
    float _1729;
    if (_1687)
    {
        _1725 = _1680;
        _1727 = _1682;
        _1729 = _1684;
    }
    else
    {
        uint _1895 = _1595 + 7u;
        float _1911 = (dot(vec3(cbLight._m0[_1595 + 3u].xyz), vec3(_336, _337, _338)) * 0.5) + 0.5;
        float _1912 = _1911 * _1911;
        float _3904 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
        float _1913 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1914 = isnan(1.0) ? _1611 : (isnan(_1611) ? 1.0 : min(_1611, 1.0));
        _1725 = (((cbLight._m0[_1895].x * 0.3183098733425140380859375) * _1913) * _1914) + _1680;
        _1727 = (((cbLight._m0[_1895].y * 0.3183098733425140380859375) * _1913) * _1914) + _1682;
        _1729 = (((cbLight._m0[_1895].z * 0.3183098733425140380859375) * _1913) * _1914) + _1684;
    }
    uint _1732 = _1595 + 8u;
    float _1745 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1595].w)) * _339) * 0.949999988079071044921875);
    float _1746 = _1745 * _1745;
    float _1747 = cbLight._m0[_1595].x + _417;
    float _1748 = cbLight._m0[_1595].y + _418;
    float _1749 = cbLight._m0[_1595].z + _419;
    float _1753 = inversesqrt(dot(vec3(_1747, _1748, _1749), vec3(_1747, _1748, _1749)));
    float _1754 = _1753 * _1747;
    float _1755 = _1753 * _1748;
    float _1756 = _1753 * _1749;
    float _1757 = dot(vec3(_336, _337, _338), vec3(cbLight._m0[_1595].xyz));
    float _3920 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1760 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _3931 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _1761 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _1762 = dot(vec3(_336, _337, _338), vec3(_1754, _1755, _1756));
    float _3942 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1765 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _1766 = dot(vec3(cbLight._m0[_1595].xyz), vec3(_1754, _1755, _1756));
    float _3953 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1770 = _1746 * _1746;
    float _1774 = ((_1765 * _1765) * (_1770 + (-1.0))) + 1.0;
    float _1782 = exp2(log2(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * 5.0);
    float _1783 = 0.959999978542327880859375 - _500;
    float _1785 = 0.959999978542327880859375 - _501;
    float _1786 = 0.959999978542327880859375 - _502;
    float _1793 = 1.0 - _1746;
    float _1804 = (0.5 / (((_1761 * ((_1760 * _1793) + _1746)) + 9.9999999392252902907785028219223e-09) + (((_1761 * _1793) + _1746) * _1760))) * _1760;
    float _3964 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1806 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1770 / ((_1774 * _1774) * 3.141590118408203125));
    uint _1817 = _1595 + 9u;
    float _1828 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1633].w)) * _339) * 0.949999988079071044921875);
    float _1829 = _1828 * _1828;
    float _1830 = cbLight._m0[_1633].x + _417;
    float _1831 = cbLight._m0[_1633].y + _418;
    float _1832 = cbLight._m0[_1633].z + _419;
    float _1836 = inversesqrt(dot(vec3(_1830, _1831, _1832), vec3(_1830, _1831, _1832)));
    float _1837 = _1836 * _1830;
    float _1838 = _1836 * _1831;
    float _1839 = _1836 * _1832;
    float _1840 = dot(vec3(_336, _337, _338), vec3(cbLight._m0[_1633].xyz));
    float _3975 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1843 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _1844 = dot(vec3(_336, _337, _338), vec3(_1837, _1838, _1839));
    float _3986 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1847 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _1848 = dot(vec3(cbLight._m0[_1633].xyz), vec3(_1837, _1838, _1839));
    float _3997 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1852 = _1829 * _1829;
    float _1856 = ((_1847 * _1847) * (_1852 + (-1.0))) + 1.0;
    float _1863 = exp2(log2(1.0 - (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * 5.0);
    float _1870 = 1.0 - _1829;
    float _1880 = (0.5 / (((_1761 * ((_1843 * _1870) + _1829)) + 9.9999999392252902907785028219223e-09) + (((_1761 * _1870) + _1829) * _1843))) * _1843;
    float _4008 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1882 = (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_1852 / ((_1856 * _1856) * 3.141590118408203125));
    float _1892 = (((((_1863 * _1783) + _503) * cbLight._m0[_1817].x) * _1882) * _1618) + (((((_1782 * _1783) + _503) * cbLight._m0[_1732].x) * _1806) * _1629);
    float _1893 = (((((_1863 * _1785) + _505) * cbLight._m0[_1817].y) * _1882) * _1618) + (((((_1782 * _1785) + _505) * cbLight._m0[_1732].y) * _1806) * _1629);
    float _1894 = (((((_1863 * _1786) + _506) * cbLight._m0[_1817].z) * _1882) * _1618) + (((((_1782 * _1786) + _506) * cbLight._m0[_1732].z) * _1806) * _1629);
    float _1956;
    float _1958;
    float _1960;
    if (_1669)
    {
        _1956 = _1892;
        _1958 = _1893;
        _1960 = _1894;
    }
    else
    {
        uint _1962 = _1595 + 2u;
        uint _1966 = _1595 + 10u;
        float _1980 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1962].w)) * _339) * 0.949999988079071044921875);
        float _1981 = _1980 * _1980;
        float _1982 = cbLight._m0[_1962].x + _417;
        float _1983 = cbLight._m0[_1962].y + _418;
        float _1984 = cbLight._m0[_1962].z + _419;
        float _1988 = inversesqrt(dot(vec3(_1982, _1983, _1984), vec3(_1982, _1983, _1984)));
        float _1989 = _1988 * _1982;
        float _1990 = _1988 * _1983;
        float _1991 = _1988 * _1984;
        float _1992 = dot(vec3(_336, _337, _338), vec3(cbLight._m0[_1962].xyz));
        float _4019 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1995 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1996 = dot(vec3(_336, _337, _338), vec3(_1989, _1990, _1991));
        float _4030 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _1999 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _2000 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_1989, _1990, _1991));
        float _4041 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        float _2004 = _1981 * _1981;
        float _2008 = ((_1999 * _1999) * (_2004 + (-1.0))) + 1.0;
        float _2015 = exp2(log2(1.0 - (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * 5.0);
        float _2022 = 1.0 - _1981;
        float _2032 = (0.5 / (((_1761 * ((_1995 * _2022) + _1981)) + 9.9999999392252902907785028219223e-09) + (((_1761 * _2022) + _1981) * _1995))) * _1995;
        float _4052 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2034 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_2004 / ((_2008 * _2008) * 3.141590118408203125));
        float _2035 = isnan(1.0) ? _1610 : (isnan(_1610) ? 1.0 : min(_1610, 1.0));
        _1956 = (((((_2015 * _1783) + _503) * cbLight._m0[_1966].x) * _2034) * _2035) + _1892;
        _1958 = (((((_2015 * _1785) + _505) * cbLight._m0[_1966].y) * _2034) * _2035) + _1893;
        _1960 = (((((_2015 * _1786) + _506) * cbLight._m0[_1966].z) * _2034) * _2035) + _1894;
    }
    float _2070;
    float _2072;
    float _2074;
    if (_1687)
    {
        _2070 = _1956;
        _2072 = _1958;
        _2074 = _1960;
    }
    else
    {
        uint _2081 = _1595 + 3u;
        uint _2085 = _1595 + 11u;
        float _2099 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2081].w)) * _339) * 0.949999988079071044921875);
        float _2100 = _2099 * _2099;
        float _2101 = cbLight._m0[_2081].x + _417;
        float _2102 = cbLight._m0[_2081].y + _418;
        float _2103 = cbLight._m0[_2081].z + _419;
        float _2107 = inversesqrt(dot(vec3(_2101, _2102, _2103), vec3(_2101, _2102, _2103)));
        float _2108 = _2107 * _2101;
        float _2109 = _2107 * _2102;
        float _2110 = _2107 * _2103;
        float _2111 = dot(vec3(_336, _337, _338), vec3(cbLight._m0[_2081].xyz));
        float _4068 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2114 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _2115 = dot(vec3(_336, _337, _338), vec3(_2108, _2109, _2110));
        float _4079 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2118 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _2119 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_2108, _2109, _2110));
        float _4090 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2123 = _2100 * _2100;
        float _2127 = ((_2118 * _2118) * (_2123 + (-1.0))) + 1.0;
        float _2134 = exp2(log2(1.0 - (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) * 5.0);
        float _2141 = 1.0 - _2100;
        float _2151 = (0.5 / (((_1761 * ((_2114 * _2141) + _2100)) + 9.9999999392252902907785028219223e-09) + (((_1761 * _2141) + _2100) * _2114))) * _2114;
        float _4101 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2153 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_2123 / ((_2127 * _2127) * 3.141590118408203125));
        float _2154 = isnan(1.0) ? _1611 : (isnan(_1611) ? 1.0 : min(_1611, 1.0));
        _2070 = (((((_2134 * _1783) + _503) * cbLight._m0[_2085].x) * _2153) * _2154) + _1956;
        _2072 = (((((_2134 * _1785) + _505) * cbLight._m0[_2085].y) * _2153) * _2154) + _1958;
        _2074 = (((((_2134 * _1786) + _506) * cbLight._m0[_2085].z) * _2153) * _2154) + _1960;
    }
    float _2289;
    float _2291;
    float _2293;
    float _2295;
    float _2297;
    float _2299;
    if (_1593.y == 0u)
    {
        float _2229 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2230 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2229;
        float _2231 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2229;
        float _2232 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2229;
        uvec4 _2244 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2245 = _2244.x;
        uint _2256 = uint((float(_2244.y) * floor(float(uint(cbSceneParam._m0[85u].y * _439) / _2245))) + floor(float(uint(cbSceneParam._m0[85u].x * _438) / _2245)));
        float _2266 = (log2(_2232 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2267 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        uint _2270 = uint(isnan(14.0) ? _2267 : (isnan(_2267) ? 14.0 : min(_2267, 14.0)));
        uvec4 _2275 = texelFetch(g_lightClusterGridBuffer, int(((_2270 << 2u) + (_2256 << 6u)) >> 2u));
        uint _2276 = _2275.x;
        uint _2277 = _2244.z;
        float _2412;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        if (((((1u << ((_2277 >> 4u) & 15u)) + 4294967295u) & _2276) == 0u) || ((_2277 & 240u) == 0u))
        {
            _2412 = 0.0;
            _2414 = 0.0;
            _2416 = 0.0;
            _2418 = 0.0;
            _2420 = 0.0;
            _2422 = 0.0;
        }
        else
        {
            float _2413;
            float _2415;
            float _2417;
            float _2419;
            float _2421;
            float _2423;
            float _2574 = 0.0;
            float _2575 = 0.0;
            float _2576 = 0.0;
            float _2577 = 0.0;
            float _2578 = 0.0;
            float _2579 = 0.0;
            uint _2580 = 0u;
            uint _2589;
            bool _2590;
            for (;;)
            {
                _2589 = texelFetch(g_lightClassification, int((((_2270 << 5u) + (_2256 << 9u)) + (_2580 << 2u)) >> 2u)).x;
                _2590 = _2589 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2590)
                {
                    frontier_phi_66_pred = _2574;
                    frontier_phi_66_pred_1 = _2579;
                    frontier_phi_66_pred_2 = _2578;
                    frontier_phi_66_pred_3 = _2577;
                    frontier_phi_66_pred_4 = _2576;
                    frontier_phi_66_pred_5 = _2575;
                }
                else
                {
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    uint _2725;
                    _2719 = _2574;
                    _2720 = _2575;
                    _2721 = _2576;
                    _2722 = _2577;
                    _2723 = _2578;
                    _2724 = _2579;
                    _2725 = _2589;
                    float _2646;
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    for (;;)
                    {
                        uint _2729 = uint(findLSB(_2725)) + (_2580 << 5u);
                        uint _2726 = (_2725 + 4294967295u) & _2725;
                        uint _2731 = _2729 * 48u;
                        vec4 _2745 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2731)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 3u)).x));
                        uint _2751 = (_2729 * 48u) + 4u;
                        vec4 _2764 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2751)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 3u)).x));
                        uint _2770 = (_2729 * 48u) + 8u;
                        vec3 _2781 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2770)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 2u)).x));
                        float _2785 = _2745.x - _2230;
                        float _2786 = _2745.y - _2231;
                        float _2787 = _2745.z - _2232;
                        float _2788 = dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787));
                        float _2791 = inversesqrt(_2788);
                        float _2792 = _2791 * _2785;
                        float _2793 = _2791 * _2786;
                        float _2794 = _2791 * _2787;
                        float _2795 = dot(vec3(_459, _462, _465), vec3(_2792, _2793, _2794));
                        float _2800 = 1.0 - (_2788 * _2745.w);
                        float _4127 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                        float _2801 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                        float _2802 = sqrt(_2788) * _2764.w;
                        float _2805 = 1.39999997615814208984375 / (_2802 + 1.39999997615814208984375);
                        float _2806 = _2805 * _2805;
                        float _2809 = ((1.0 - _2806) * _2795) + _2806;
                        float _2812 = _2802 * _2802;
                        float _2816 = ((isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0))) * _2801) / ((_2812 * 0.699999988079071044921875) + 1.0);
                        float _2820 = (-0.0) - _2230;
                        float _2821 = (-0.0) - _2231;
                        float _2822 = (-0.0) - _2232;
                        float _2826 = inversesqrt(dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822)));
                        float _2827 = _2826 * _2820;
                        float _2828 = _2826 * _2821;
                        float _2829 = _2826 * _2822;
                        float _2837 = exp2(log2(1.0 / ((_2812 * 3.5) + 5.0)) * 0.25);
                        float _2838 = 1.0 - _534;
                        float _2845 = sqrt(1.0 - ((1.0 - (_2838 * _2838)) * (1.0 - (_2837 * _2837))));
                        float _2846 = _2845 * _2845;
                        float _2847 = _2846 * _2846;
                        float _2848 = _2827 + _2792;
                        float _2849 = _2828 + _2793;
                        float _2850 = _2829 + _2794;
                        float _2854 = inversesqrt(dot(vec3(_2848, _2849, _2850), vec3(_2848, _2849, _2850)));
                        float _2858 = dot(vec3(_459, _462, _465), vec3(_2827, _2828, _2829));
                        float _4143 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                        float _2861 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
                        float _2862 = dot(vec3(_459, _462, _465), vec3(_2854 * _2848, _2854 * _2849, _2854 * _2850));
                        float _4154 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                        float _2865 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
                        float _2869 = ((_2865 * _2865) * (_2847 + (-1.0))) + 1.0;
                        float _2870 = _2805 * _2846;
                        float _2871 = _2870 * _2870;
                        float _2874 = ((1.0 - _2871) * _2795) + _2871;
                        float _4165 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                        float _2875 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                        float _2876 = 1.0 - _2846;
                        float _2886 = (0.5 / (((_2875 * ((_2861 * _2876) + _2846)) + 9.9999999392252902907785028219223e-09) + (((_2875 * _2876) + _2846) * _2861))) * _2875;
                        float _4176 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
                        float _2897 = (((_2847 * 3.1415927410125732421875) * (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) / ((_2869 * _2869) * ((_2812 * 2.1991131305694580078125) + 3.141590118408203125))) * _2801;
                        _2649 = (_2816 * _2764.x) + _2722;
                        _2650 = (_2816 * _2764.y) + _2723;
                        _2651 = (_2816 * _2764.z) + _2724;
                        _2646 = (_2897 * _2781.x) + _2719;
                        _2647 = (_2897 * _2781.y) + _2720;
                        _2648 = (_2897 * _2781.z) + _2721;
                        if (_2726 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2719 = _2646;
                            _2720 = _2647;
                            _2721 = _2648;
                            _2722 = _2649;
                            _2723 = _2650;
                            _2724 = _2651;
                            _2725 = _2726;
                        }
                    }
                    frontier_phi_66_pred = _2646;
                    frontier_phi_66_pred_1 = _2651;
                    frontier_phi_66_pred_2 = _2650;
                    frontier_phi_66_pred_3 = _2649;
                    frontier_phi_66_pred_4 = _2648;
                    frontier_phi_66_pred_5 = _2647;
                }
                _2413 = frontier_phi_66_pred;
                _2423 = frontier_phi_66_pred_1;
                _2421 = frontier_phi_66_pred_2;
                _2419 = frontier_phi_66_pred_3;
                _2417 = frontier_phi_66_pred_4;
                _2415 = frontier_phi_66_pred_5;
                uint _2581 = _2580 + 1u;
                if (_2581 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2574 = _2413;
                    _2575 = _2415;
                    _2576 = _2417;
                    _2577 = _2419;
                    _2578 = _2421;
                    _2579 = _2423;
                    _2580 = _2581;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2412 = _2413;
            _2414 = _2415;
            _2416 = _2417;
            _2418 = _2419;
            _2420 = _2421;
            _2422 = _2423;
        }
        uvec4 _2426 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2427 = _2426.z;
        uint _2429 = (_2427 >> 8u) & 15u;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        if (((4294967295u << _2429) & _2276) == 0u)
        {
            _2542 = _2412;
            _2544 = _2414;
            _2546 = _2416;
            _2548 = _2418;
            _2550 = _2420;
            _2552 = _2422;
        }
        else
        {
            float _2567 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
            float _2568 = _2567 * _2230;
            float _2569 = _2567 * _2231;
            float _2570 = _2567 * _2232;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2429 < ((_2427 >> 12u) & 15u))
            {
                float _2543;
                float _2545;
                float _2547;
                float _2549;
                float _2551;
                float _2553;
                float _2702 = _2412;
                float _2703 = _2414;
                float _2704 = _2416;
                float _2705 = _2418;
                float _2706 = _2420;
                float _2707 = _2422;
                uint _2708 = _2429;
                uint _2717;
                bool _2718;
                for (;;)
                {
                    _2717 = texelFetch(g_lightClassification, int((((_2270 << 5u) + (_2256 << 9u)) + (_2708 << 2u)) >> 2u)).x;
                    _2718 = _2717 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2718)
                    {
                        frontier_phi_77_pred = _2707;
                        frontier_phi_77_pred_1 = _2706;
                        frontier_phi_77_pred_2 = _2705;
                        frontier_phi_77_pred_3 = _2704;
                        frontier_phi_77_pred_4 = _2703;
                        frontier_phi_77_pred_5 = _2702;
                    }
                    else
                    {
                        float _2911;
                        float _2912;
                        float _2913;
                        float _2914;
                        float _2915;
                        float _2916;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _2924 = _2702;
                        float _2925 = _2703;
                        float _2926 = _2704;
                        float _2927 = _2705;
                        float _2928 = _2706;
                        float _2929 = _2707;
                        uint _2930 = _2717;
                        uint _2931;
                        vec4 _2956;
                        float _2957;
                        vec4 _2972;
                        vec3 _2984;
                        vec4 _3000;
                        vec4 _3016;
                        float _3063;
                        bool _3064;
                        for (;;)
                        {
                            uint _2941 = ((_2708 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2930));
                            _2931 = (_2930 + 4294967295u) & _2930;
                            uint _2943 = _2941 * 40u;
                            _2956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 3u)).x));
                            _2957 = _2956.w;
                            uint _2959 = (_2941 * 40u) + 4u;
                            _2972 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 3u)).x));
                            uint _2974 = (_2941 * 40u) + 8u;
                            _2984 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x));
                            uint _2987 = (_2941 * 40u) + 16u;
                            _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            uint _3003 = (_2941 * 40u) + 20u;
                            _3016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 3u)).x));
                            uint _3019 = (_2941 * 40u) + 24u;
                            vec4 _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            uint _3038 = (_2941 * 40u) + 28u;
                            vec4 _3051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 3u)).x));
                            _3063 = fma(_2232, _3051.z, fma(_2231, _3051.y, _3051.x * _2230)) + _3051.w;
                            _3064 = !((fma(_2232, _3032.z, fma(_2231, _3032.y, _3032.x * _2230)) + _3032.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3064)
                            {
                                float _3091 = _2956.x - _2230;
                                float _3092 = _2956.y - _2231;
                                float _3093 = _2956.z - _2232;
                                float _3094 = dot(vec3(_3091, _3092, _3093), vec3(_3091, _3092, _3093));
                                float _3097 = inversesqrt(_3094);
                                float _3098 = _3097 * _3091;
                                float _3099 = _3097 * _3092;
                                float _3100 = _3097 * _3093;
                                float _3104 = 1.0 - (_3094 / (_2957 * _2957));
                                float _4187 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                                float _3105 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                                float _3109 = sqrt(_3094) * _2972.w;
                                float _3111 = 1.39999997615814208984375 / (_3109 + 1.39999997615814208984375);
                                float _3112 = _3111 * _3111;
                                float _3115 = ((1.0 - _3112) * dot(vec3(_3098, _3099, _3100), vec3(_459, _462, _465))) + _3112;
                                float _3118 = _3109 * _3109;
                                float _3122 = (fma(_2232, _3000.z, fma(_2231, _3000.y, _3000.x * _2230)) + _3000.w) / _3063;
                                float _3123 = (fma(_2232, _3016.z, fma(_2231, _3016.y, _3016.x * _2230)) + _3016.w) / _3063;
                                float _3127 = 1.0 - dot(vec2(_3122, _3123), vec2(_3122, _3123));
                                float _4203 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                                float _3128 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                                float _3129 = _3128 * (((isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0))) * _3105) / ((_3118 * 0.699999988079071044921875) + 1.0));
                                float _3141 = exp2(log2(1.0 / ((_3118 * 3.5) + 5.0)) * 0.25);
                                float _3142 = 1.0 - _534;
                                float _3149 = sqrt(1.0 - ((1.0 - (_3142 * _3142)) * (1.0 - (_3141 * _3141))));
                                float _3150 = _3149 * _3149;
                                float _3151 = _3150 * _3150;
                                float _3152 = _3098 - _2568;
                                float _3153 = _3099 - _2569;
                                float _3154 = _3100 - _2570;
                                float _3158 = inversesqrt(dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154)));
                                float _3162 = dot(vec3(_459, _462, _465), vec3((-0.0) - _2568, (-0.0) - _2569, (-0.0) - _2570));
                                float _4214 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                                float _3165 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                                float _3166 = dot(vec3(_459, _462, _465), vec3(_3158 * _3152, _3158 * _3153, _3158 * _3154));
                                float _4225 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                                float _3169 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                                float _3173 = ((_3169 * _3169) * (_3151 + (-1.0))) + 1.0;
                                float _3174 = _3111 * _3150;
                                float _3175 = _3174 * _3174;
                                float _3181 = ((1.0 - _3175) * dot(vec3(_459, _462, _465), vec3(_3098, _3099, _3100))) + _3175;
                                float _4236 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3182 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                                float _3183 = 1.0 - _3150;
                                float _3193 = (0.5 / (((_3182 * ((_3165 * _3183) + _3150)) + 9.9999999392252902907785028219223e-09) + (((_3182 * _3183) + _3150) * _3165))) * _3182;
                                float _4247 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3203 = (_3128 * _3105) * (((_3151 * 3.1415927410125732421875) * (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) / ((_3173 * _3173) * ((_3118 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3129 * _2972.y;
                                frontier_phi_83_pred_1 = _3129 * _2972.x;
                                frontier_phi_83_pred_2 = _3203 * _2984.z;
                                frontier_phi_83_pred_3 = _3203 * _2984.y;
                                frontier_phi_83_pred_4 = _3203 * _2984.x;
                                frontier_phi_83_pred_5 = _3129 * _2972.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3211 = frontier_phi_83_pred;
                            _3210 = frontier_phi_83_pred_1;
                            _3209 = frontier_phi_83_pred_2;
                            _3208 = frontier_phi_83_pred_3;
                            _3207 = frontier_phi_83_pred_4;
                            _3212 = frontier_phi_83_pred_5;
                            _2914 = _3210 + _2927;
                            _2915 = _3211 + _2928;
                            _2916 = _3212 + _2929;
                            _2911 = _3207 + _2924;
                            _2912 = _3208 + _2925;
                            _2913 = _3209 + _2926;
                            if (_2931 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2924 = _2911;
                                _2925 = _2912;
                                _2926 = _2913;
                                _2927 = _2914;
                                _2928 = _2915;
                                _2929 = _2916;
                                _2930 = _2931;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2916;
                        frontier_phi_77_pred_1 = _2915;
                        frontier_phi_77_pred_2 = _2914;
                        frontier_phi_77_pred_3 = _2913;
                        frontier_phi_77_pred_4 = _2912;
                        frontier_phi_77_pred_5 = _2911;
                    }
                    _2553 = frontier_phi_77_pred;
                    _2551 = frontier_phi_77_pred_1;
                    _2549 = frontier_phi_77_pred_2;
                    _2547 = frontier_phi_77_pred_3;
                    _2545 = frontier_phi_77_pred_4;
                    _2543 = frontier_phi_77_pred_5;
                    uint _2709 = _2708 + 1u;
                    if (_2709 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2702 = _2543;
                        _2703 = _2545;
                        _2704 = _2547;
                        _2705 = _2549;
                        _2706 = _2551;
                        _2707 = _2553;
                        _2708 = _2709;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2547;
                frontier_phi_58_59_ladder_1 = _2553;
                frontier_phi_58_59_ladder_2 = _2551;
                frontier_phi_58_59_ladder_3 = _2549;
                frontier_phi_58_59_ladder_4 = _2545;
                frontier_phi_58_59_ladder_5 = _2543;
            }
            else
            {
                frontier_phi_58_59_ladder = _2416;
                frontier_phi_58_59_ladder_1 = _2422;
                frontier_phi_58_59_ladder_2 = _2420;
                frontier_phi_58_59_ladder_3 = _2418;
                frontier_phi_58_59_ladder_4 = _2414;
                frontier_phi_58_59_ladder_5 = _2412;
            }
            _2542 = frontier_phi_58_59_ladder_5;
            _2544 = frontier_phi_58_59_ladder_4;
            _2546 = frontier_phi_58_59_ladder;
            _2548 = frontier_phi_58_59_ladder_3;
            _2550 = frontier_phi_58_59_ladder_2;
            _2552 = frontier_phi_58_59_ladder_1;
        }
        float _2557 = isnan(1.0) ? _518 : (isnan(_518) ? 1.0 : min(_518, 1.0));
        _2289 = (_2557 * _2548) + _1725;
        _2291 = (_2557 * _2550) + _1727;
        _2293 = (_2557 * _2552) + _1729;
        _2295 = ((_2542 * _503) * _2557) + _2070;
        _2297 = ((_2544 * _505) * _2557) + _2072;
        _2299 = ((_2546 * _506) * _2557) + _2074;
    }
    else
    {
        _2289 = _1725;
        _2291 = _1727;
        _2293 = _1729;
        _2295 = _2070;
        _2297 = _2072;
        _2299 = _2074;
    }
    uint _2305 = _479 + uint(cbMatDynParam._m0[0u].w);
    float _2313 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _318.x) * cbInstanceData._m0[_2305].x;
    float _2316 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _318.y) * cbInstanceData._m0[_2305].y;
    float _2319 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _318.z) * cbInstanceData._m0[_2305].z;
    float _4263 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _4274 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _4285 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _2336 = (((isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_2289 + ((isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0))) * _518))) + ((_2295 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _1360)) * cbPerFrame._m0[3u].x)) + _2313;
    float _2338 = (_2316 + ((_2297 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _1360)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_2291 + ((isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0))) * _518)));
    float _2340 = (_2319 + ((_2299 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _1360)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2293 + ((isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))) * _518)));
    float _2341 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2342 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2343 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2349 = cbMtdParam._m0[2u].x * _2313;
    float _2350 = cbMtdParam._m0[2u].y * _2316;
    float _2351 = cbMtdParam._m0[2u].z * _2319;
    float _4311 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2353 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    uint _2354 = _478 + 6u;
    float _2362 = _438 / cbSceneParam._m0[86u].x;
    float _2363 = _439 / cbSceneParam._m0[86u].y;
    vec4 _2377 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2362, _2363, (log2((isnan(cbSceneParam._m0[77u].w) ? _359 : (isnan(_359) ? cbSceneParam._m0[77u].w : min(_359, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2379 = _2377.x;
    float _2380 = _2377.y;
    float _2381 = _2377.z;
    float _2382 = _2377.w;
    float _2475;
    float _2477;
    float _2479;
    float _2481;
    if (_359 > cbSceneParam._m0[78u].w)
    {
        float _2437 = isnan(_359) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _359 : min(cbSceneParam._m0[80u].w, _359));
        float _2438 = _2437 / _359;
        float _2449 = _2438 * _410;
        float _2450 = _411 * _2438;
        float _2451 = (-0.0) - _2450;
        float _2453 = _2438 * _412;
        float _2455 = (cbSceneParam._m0[77u].w * _2451) / _2437;
        float _2456 = _2455 + cbSceneParam._m0[79u].w;
        float _2457 = cbSceneParam._m0[79u].w - _2450;
        float _2463 = sqrt(((_2449 * _2449) + (_2450 * _2450)) + (_2453 * _2453));
        float _2466 = (1.0 - (cbSceneParam._m0[77u].w / _2437)) * _2463;
        float _2471 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2473 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2659;
        if (abs((_2451 - _2455) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2659 = ((((_2456 > 0.0) ? exp2(_2471 * _2456) : (2.0 - exp2(_2473 * _2456))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2466;
        }
        else
        {
            float _2603 = 1.0 / cbSceneParam._m0[80u].x;
            float _2604 = isnan(_2457) ? _2456 : (isnan(_2456) ? _2457 : max(_2456, _2457));
            float _2605 = isnan(_2457) ? _2456 : (isnan(_2456) ? _2457 : min(_2456, _2457));
            float _2614 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : min(_2604, 0.0));
            float _2615 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : min(_2605, 0.0));
            _2659 = ((abs(_2463 / _2451) * cbSceneParam._m0[80u].y) * ((((_2614 - _2615) * 2.0) - ((exp2(_2471 * (isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0)))) - exp2(_2471 * (isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0))))) * _2603)) - ((exp2(_2473 * _2614) - exp2(_2473 * _2615)) * _2603))) + (_2466 * cbSceneParam._m0[80u].z);
        }
        vec4 _2661 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2362, _2363, 1.0), 0.0);
        float _2670 = exp2((_2659 * (-1.44269502162933349609375)) * (1.0 - _2661.w));
        float _2671 = log2(_2670);
        float _2687 = log2(_2382);
        _2475 = (exp2(_2687 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2671 * cbSceneParam._m0[78u].x)) * _2661.x) / cbSceneParam._m0[78u].x)) + _2379;
        _2477 = (exp2(_2687 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2671 * cbSceneParam._m0[78u].y)) * _2661.y) / cbSceneParam._m0[78u].y)) + _2380;
        _2479 = (exp2(_2687 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2671 * cbSceneParam._m0[78u].z)) * _2661.z) / cbSceneParam._m0[78u].z)) + _2381;
        _2481 = _2670 * _2382;
    }
    else
    {
        _2475 = _2379;
        _2477 = _2380;
        _2479 = _2381;
        _2481 = _2382;
    }
    bool _2697;
    vec4 _2491;
    vec4 _2513;
    float _2515;
    float _2519;
    float _2520;
    float _2521;
    float _2524;
    float _2527;
    float _2530;
    float _2531;
    bool _2541;
    for (;;)
    {
        _2491 = cbMatDynParam._m0[0u];
        float _2493 = roundEven(_2491.y);
        bool _2494 = _2493 == 3.0;
        float _2495 = log2(_2481);
        float _2499 = exp2(_2495 * cbSceneParam._m0[78u].x);
        float _2500 = exp2(_2495 * cbSceneParam._m0[78u].y);
        float _2501 = exp2(_2495 * cbSceneParam._m0[78u].z);
        float _2502 = _2499 * _2341;
        float _2503 = _2500 * _2342;
        float _2504 = _2501 * _2343;
        float _2511 = _426 + (-0.5);
        _2513 = cbMtdParam._m0[1u];
        _2515 = _2513.y * _2511;
        float _2518 = (_2493 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2519 = _2518 * (_2494 ? _2502 : (_2502 + (cbSceneParam._m0[72u].w * _2475)));
        _2520 = _2518 * (_2494 ? _2503 : (_2503 + (cbSceneParam._m0[72u].w * _2477)));
        _2521 = _2518 * (_2494 ? _2504 : (_2504 + (cbSceneParam._m0[72u].w * _2479)));
        _2524 = ((_2349 * _2353) * _2499) * _2518;
        _2527 = ((_2350 * _2353) * _2500) * _2518;
        _2530 = ((_2351 * _2353) * _2501) * _2518;
        _2531 = _2511 * 0.999000012874603271484375;
        _2541 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2541)
        {
            if ((cbInstanceData._m0[_478 + 7u].x + _2531) < 0.5)
            {
                _2697 = true;
                break;
            }
        }
        uint _2638 = _479 + uint(_2491.w);
        if ((cbInstanceData._m0[_2638].w < 1.0) && ((cbInstanceData._m0[_2638].w + _2531) < 0.5))
        {
            _2697 = true;
            break;
        }
        if ((_2515 + 1.0) < _2513.x)
        {
            _2697 = true;
            break;
        }
        _2697 = false;
        break;
    }
    float _2902;
    if (_2697)
    {
        discard_state = true;
        _2902 = 0.0;
    }
    else
    {
        _2902 = cbInstanceData._m0[_2354].w;
    }
    SV_Target.x = _2519;
    SV_Target.y = _2520;
    SV_Target.z = _2521;
    SV_Target.w = _2902;
    SV_Target_1.x = _2524;
    SV_Target_1.y = _2527;
    SV_Target_1.z = _2530;
    SV_Target_1.w = cbInstanceData._m0[_2354].w;
    discard_exit();
}


