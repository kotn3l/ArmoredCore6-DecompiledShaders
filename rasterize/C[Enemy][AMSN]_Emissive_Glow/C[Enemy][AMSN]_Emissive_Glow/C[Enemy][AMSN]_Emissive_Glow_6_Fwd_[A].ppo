#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _937;
float _3372;
float _3373;
float _3374;
float _3375;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _230 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _236 = _230.x * cbMtdParam._m0[9u].x;
    float _237 = _230.y * cbMtdParam._m0[9u].y;
    float _238 = _230.z * cbMtdParam._m0[9u].z;
    vec4 _250 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _252 = _250.x;
    vec4 _264 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _268 = _264.z;
    float _272 = (_264.x * 2.0) + (-1.0);
    float _274 = (_264.y * 2.0) + (-1.0);
    float _275 = dot(vec2(_272, _274), vec2(_272, _274));
    float _3384 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _281 = sqrt(1.0 - (isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0))));
    vec4 _318 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _329 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3395 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _330 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
    float _338 = (((_330 * _330) * (3.0 - (_330 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _341 = fma(_281, _201 * NORMAL.x, fma(_274, _208 * TANGENT.x, (_194 * _187) * _272));
    float _344 = fma(_281, _201 * NORMAL.y, fma(_274, _208 * TANGENT.y, (_194 * _188) * _272));
    float _347 = fma(_281, _201 * NORMAL.z, fma(_274, _208 * TANGENT.z, (_194 * _189) * _272));
    float _351 = inversesqrt(dot(vec3(_341, _344, _347), vec3(_341, _344, _347)));
    float _352 = _351 * _341;
    float _353 = _351 * _344;
    float _354 = _351 * _347;
    float _3406 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _355 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
    float _3417 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3428 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3439 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3450 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _359 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
    float _375 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _416 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _426 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _416);
    float _427 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _416);
    float _428 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _416);
    float _432 = inversesqrt(dot(vec3(_426, _427, _428), vec3(_426, _427, _428)));
    float _433 = _426 * _432;
    float _434 = _427 * _432;
    float _435 = _428 * _432;
    vec4 _440 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _442 = _440.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _616 = sqrt(((_426 * _426) + (_427 * _427)) + (_428 * _428));
        float _622 = (cbMatDynParam._m0[5u].x * _616) + cbMatDynParam._m0[5u].y;
        float _3461 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
        float _623 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _627 = (cbMatDynParam._m0[5u].z * _616) + cbMatDynParam._m0[5u].w;
        float _3472 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))) - _623)) + _623) < ((_442 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _454 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _455 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _475 = fma(_354, cbSceneParam._m0[5u].z, fma(_353, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _352));
    float _478 = fma(_354, cbSceneParam._m0[6u].z, fma(_353, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _352));
    float _481 = fma(_354, cbSceneParam._m0[7u].z, fma(_353, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _352));
    uint _494 = uint(roundEven(NORMAL.w)) * 13u;
    uint _495 = _494 + 9u;
    uint _496 = _495 + uint(cbMatDynParam._m0[0u].w);
    float _502 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0)))) * cbInstanceData._m0[_496].x;
    float _503 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0)))) * cbInstanceData._m0[_496].y;
    float _504 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0)))) * cbInstanceData._m0[_496].z;
    float _3483 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _505 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
    float _3494 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _506 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
    float _3505 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _507 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
    float _508 = 1.0 - _359;
    float _509 = _505 * _508;
    float _510 = _506 * _508;
    float _511 = _507 * _508;
    float _516 = (_505 + (-0.039999999105930328369140625)) * _359;
    float _517 = (_506 + (-0.039999999105930328369140625)) * _359;
    float _518 = (_507 + (-0.039999999105930328369140625)) * _359;
    float _519 = _516 + 0.039999999105930328369140625;
    float _521 = _517 + 0.039999999105930328369140625;
    float _522 = _518 + 0.039999999105930328369140625;
    vec4 _531 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _454, cbSceneParam._m0[86u].y * _455));
    float _534 = _531.x * TEXCOORD.z;
    float _535 = dot(vec3(_352, _353, _354), vec3(_433, _434, _435));
    float _538 = _535 * 2.0;
    float _542 = (_538 * _352) - _433;
    float _543 = (_538 * _353) - _434;
    float _544 = (_538 * _354) - _435;
    float _548 = abs(dot(vec3(_433, _434, _435), vec3(_352, _353, _354)));
    float _3516 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _550 = sqrt(_355);
    float _562 = exp2((_550 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_550 * 3.0));
    float _568 = (1.0 - _562) * ((_550 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _569 = _562 * _550;
    float _597 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _601 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _605 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _936;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _661 = fma(_605, cbModelParam._m0[26u].z, fma(_601, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _597));
        float _665 = fma(_605, cbModelParam._m0[27u].z, fma(_601, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _597));
        float _669 = fma(_605, cbModelParam._m0[28u].z, fma(_601, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _597));
        float _694 = _597 + _352;
        float _695 = _601 + _353;
        float _696 = _605 + _354;
        float _706 = fma(_696, cbModelParam._m0[26u].z, fma(_695, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _694)) - _661;
        float _707 = fma(_696, cbModelParam._m0[27u].z, fma(_695, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _694)) - _665;
        float _708 = fma(_696, cbModelParam._m0[28u].z, fma(_695, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _694)) - _669;
        float _712 = inversesqrt(dot(vec3(_706, _707, _708), vec3(_706, _707, _708)));
        float _725 = ((_712 * _706) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_661 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _726 = ((_712 * _707) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_665 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _727 = ((_712 * _708) / cbModelParam._m0[34u].z) + ((((((_669 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _730 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_725, _726, _727), 0.0);
        vec4 _737 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_725, _726, _727), 0.0);
        vec4 _744 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_725, _726, _727), 0.0);
        vec4 _751 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_725, _726, _727), 0.0);
        float _764 = exp2((_730.w + (-0.5)) * 20.0) * 2.0;
        float _765 = _764 * (_730.x + (-0.5));
        float _766 = _764 * (_730.y + (-0.5));
        float _767 = _764 * (_730.z + (-0.5));
        float _774 = exp2((_737.w + (-0.5)) * 20.0) * 2.0;
        float _775 = _774 * (_737.x + (-0.5));
        float _776 = _774 * (_737.y + (-0.5));
        float _777 = _774 * (_737.z + (-0.5));
        float _784 = exp2((_744.w + (-0.5)) * 20.0) * 2.0;
        float _785 = _784 * (_744.x + (-0.5));
        float _786 = _784 * (_744.y + (-0.5));
        float _787 = _784 * (_744.z + (-0.5));
        float _794 = exp2((_751.w + (-0.5)) * 20.0) * 2.0;
        float _795 = _794 * (_751.x + (-0.5));
        float _796 = _794 * (_751.y + (-0.5));
        float _797 = _794 * (_751.z + (-0.5));
        float _798 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _799 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _800 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _801 = _765 * 0.5;
        float _802 = _775 * 0.5;
        float _803 = _785 * 0.5;
        float _804 = dot(vec3(_801, _802, _803), vec3(_801, _802, _803));
        float _809 = (_804 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_804);
        float _818 = (dot(vec3(_352, _353, _354), vec3(_809 * _801, _809 * _802, _809 * _803)) + 1.0) * 0.5;
        float _3542 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _828 = sqrt(((_802 * _802) + (_801 * _801)) + (_803 * _803)) / (_798 + 9.9999997473787516355514526367188e-06);
        float _3553 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _830 = _829 * 2.0;
        float _834 = (1.0 - _829) / (_829 + 1.0);
        float _3564 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _844 = ((((1.0 - _835) * (_830 + 2.0)) * exp2(log2(isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * (_830 + 1.0))) + _835) * _798;
        float _845 = _766 * 0.5;
        float _846 = _776 * 0.5;
        float _847 = _786 * 0.5;
        float _848 = dot(vec3(_845, _846, _847), vec3(_845, _846, _847));
        float _853 = (_848 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_848);
        float _861 = (dot(vec3(_352, _353, _354), vec3(_853 * _845, _853 * _846, _853 * _847)) + 1.0) * 0.5;
        float _3575 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _870 = sqrt(((_846 * _846) + (_845 * _845)) + (_847 * _847)) / (_799 + 9.9999997473787516355514526367188e-06);
        float _3586 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _872 = _871 * 2.0;
        float _876 = (1.0 - _871) / (_871 + 1.0);
        float _3597 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _886 = ((((1.0 - _877) * (_872 + 2.0)) * exp2(log2(isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * (_872 + 1.0))) + _877) * _799;
        float _887 = _767 * 0.5;
        float _888 = _777 * 0.5;
        float _889 = _787 * 0.5;
        float _890 = dot(vec3(_887, _888, _889), vec3(_887, _888, _889));
        float _895 = (_890 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_890);
        float _903 = (dot(vec3(_352, _353, _354), vec3(_895 * _887, _895 * _888, _895 * _889)) + 1.0) * 0.5;
        float _3608 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _912 = sqrt(((_888 * _888) + (_887 * _887)) + (_889 * _889)) / (_800 + 9.9999997473787516355514526367188e-06);
        float _3619 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _914 = _913 * 2.0;
        float _918 = (1.0 - _913) / (_913 + 1.0);
        float _3630 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _928 = ((((1.0 - _919) * (_914 + 2.0)) * exp2(log2(isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * (_914 + 1.0))) + _919) * _800;
        _936 = _767;
        _938 = _766;
        _939 = _765;
        _940 = _777;
        _941 = _776;
        _942 = _775;
        _943 = _787;
        _944 = _786;
        _945 = _785;
        _946 = _800;
        _947 = _799;
        _948 = _798;
        _949 = cbModelParam._m0[36u].z * (isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0)));
        _950 = cbModelParam._m0[36u].z * (isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0)));
        _951 = cbModelParam._m0[36u].z * (isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0)));
    }
    else
    {
        _936 = _937;
        _938 = _937;
        _939 = _937;
        _940 = _937;
        _941 = _937;
        _942 = _937;
        _943 = _937;
        _944 = _937;
        _945 = _937;
        _946 = _937;
        _947 = _937;
        _948 = _937;
        _949 = 0.0;
        _950 = 0.0;
        _951 = 0.0;
    }
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _980 = fma(_605, cbModelParam._m0[30u].z, fma(_601, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _597));
        float _984 = fma(_605, cbModelParam._m0[31u].z, fma(_601, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _597));
        float _988 = fma(_605, cbModelParam._m0[32u].z, fma(_601, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _597));
        float _1011 = _597 + _352;
        float _1012 = _601 + _353;
        float _1013 = _605 + _354;
        float _1023 = fma(_1013, cbModelParam._m0[30u].z, fma(_1012, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1011)) - _980;
        float _1024 = fma(_1013, cbModelParam._m0[31u].z, fma(_1012, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1011)) - _984;
        float _1025 = fma(_1013, cbModelParam._m0[32u].z, fma(_1012, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1011)) - _988;
        float _1029 = inversesqrt(dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025)));
        float _1042 = ((_1029 * _1023) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_980 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1043 = ((_1029 * _1024) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_984 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1044 = ((_1029 * _1025) / cbModelParam._m0[35u].z) + ((((((_988 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        float _1079 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1046.x + (-0.5));
        float _1081 = _1079 * (_1046.y + (-0.5));
        float _1082 = _1079 * (_1046.z + (-0.5));
        float _1089 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1053.x + (-0.5));
        float _1091 = _1089 * (_1053.y + (-0.5));
        float _1092 = _1089 * (_1053.z + (-0.5));
        float _1099 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1060.x + (-0.5));
        float _1101 = _1099 * (_1060.y + (-0.5));
        float _1102 = _1099 * (_1060.z + (-0.5));
        float _1109 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1067.x + (-0.5));
        float _1111 = _1109 * (_1067.y + (-0.5));
        float _1112 = _1109 * (_1067.z + (-0.5));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = _1080 * 0.5;
        float _1117 = _1090 * 0.5;
        float _1118 = _1100 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_352, _353, _354), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3671 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _3682 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3693 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * (_1143 + 1.0))) + _1148) * _1113;
        float _1158 = _1081 * 0.5;
        float _1159 = _1091 * 0.5;
        float _1160 = _1101 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_352, _353, _354), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _3704 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _3715 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _3726 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * (_1185 + 1.0))) + _1190) * _1114;
        float _1200 = _1082 * 0.5;
        float _1201 = _1092 * 0.5;
        float _1202 = _1102 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1216 = (dot(vec3(_352, _353, _354), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _3737 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1225 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _3748 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _3759 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (_1227 + 1.0))) + _1232) * _1115;
        _1249 = _1082;
        _1250 = _1081;
        _1251 = _1080;
        _1252 = _1092;
        _1253 = _1091;
        _1254 = _1090;
        _1255 = _1102;
        _1256 = _1101;
        _1257 = _1100;
        _1258 = _1115;
        _1259 = _1114;
        _1260 = _1113;
        _1261 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
        _1262 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
        _1263 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
    }
    else
    {
        _1249 = _937;
        _1250 = _937;
        _1251 = _937;
        _1252 = _937;
        _1253 = _937;
        _1254 = _937;
        _1255 = _937;
        _1256 = _937;
        _1257 = _937;
        _1258 = _937;
        _1259 = _937;
        _1260 = _937;
        _1261 = 0.0;
        _1262 = 0.0;
        _1263 = 0.0;
    }
    float _1273 = (cbModelParam._m0[1u].x * (_1261 - _949)) + _949;
    float _1274 = (cbModelParam._m0[1u].x * (_1262 - _950)) + _950;
    float _1275 = (cbModelParam._m0[1u].x * (_1263 - _951)) + _951;
    float _1296 = fma(_1275, cbSceneParam._m0[89u].z, fma(_1274, cbSceneParam._m0[89u].y, _1273 * cbSceneParam._m0[89u].x));
    float _1299 = fma(_1275, cbSceneParam._m0[90u].z, fma(_1274, cbSceneParam._m0[90u].y, _1273 * cbSceneParam._m0[90u].x));
    float _1302 = fma(_1275, cbSceneParam._m0[91u].z, fma(_1274, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1273));
    float _1317 = _542 * 0.5;
    float _1318 = _543 * 0.5;
    float _1319 = _544 * 0.5;
    float _1320 = dot(vec4(_1317, _1318, _1319, 1.0), vec4(_1251, _1254, _1257, _1260));
    float _1323 = dot(vec4(_1317, _1318, _1319, 1.0), vec4(_1250, _1253, _1256, _1259));
    float _1326 = dot(vec4(_1317, _1318, _1319, 1.0), vec4(_1249, _1252, _1255, _1258));
    float _1360;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1333 = dot(vec4(_1317, _1318, _1319, 1.0), vec4(_936, _940, _943, _946));
        float _1337 = dot(vec4(_1317, _1318, _1319, 1.0), vec4(_938, _941, _944, _947));
        float _1341 = dot(vec4(_1317, _1318, _1319, 1.0), vec4(_939, _942, _945, _948));
        float _1348 = dot(vec4(cbModelParam._m0[39u]), vec4(_1317, _1318, _1319, 1.0));
        _1360 = dot(vec3(isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)), isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)), isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1348) ? 0.0 : (isnan(0.0) ? _1348 : max(0.0, _1348))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1360 = 1.0;
    }
    float _1371;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1362 = dot(vec4(cbModelParam._m0[40u]), vec4(_1317, _1318, _1319, 1.0));
        _1371 = dot(vec3(isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)), isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)), isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1362) ? 0.0 : (isnan(0.0) ? _1362 : max(0.0, _1362))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1371 = 1.0;
    }
    float _1375 = (_1371 * cbModelParam._m0[1u].x) + (_1360 * (1.0 - cbModelParam._m0[1u].x));
    float _1385 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _355);
    float _1386 = isnan(_1385) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1385 : min(cbModelParam._m0[25u].z, _1385));
    float _1467;
    float _1469;
    float _1471;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1434 = fma(_605, cbModelParam._m0[13u].z, fma(_601, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _597)) + cbModelParam._m0[13u].w;
        float _1438 = fma(_605, cbModelParam._m0[14u].z, fma(_601, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _597)) + cbModelParam._m0[14u].w;
        float _1442 = fma(_605, cbModelParam._m0[15u].z, fma(_601, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _597)) + cbModelParam._m0[15u].w;
        float _1445 = fma(_544, cbModelParam._m0[13u].z, fma(_543, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _542));
        float _1448 = fma(_544, cbModelParam._m0[14u].z, fma(_543, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _542));
        float _1451 = fma(_544, cbModelParam._m0[15u].z, fma(_543, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _542));
        float _1479;
        if (_1445 > 0.0)
        {
            _1479 = abs((1.0 - _1434) / _1445);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1434 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1479 = frontier_phi_17_15_ladder;
        }
        float _1685;
        if (_1448 > 0.0)
        {
            _1685 = abs((1.0 - _1438) / _1448);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1448 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1438 + 1.0) / _1448);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1685 = frontier_phi_26_22_ladder;
        }
        float _1939;
        if (_1451 > 0.0)
        {
            _1939 = abs((1.0 - _1442) / _1451);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1442 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1939 = frontier_phi_38_33_ladder;
        }
        float _1941 = isnan(_1685) ? _1479 : (isnan(_1479) ? _1685 : min(_1479, _1685));
        float _1942 = isnan(_1939) ? _1941 : (isnan(_1941) ? _1939 : min(_1941, _1939));
        float _1946 = (_1942 * _1445) + _1434;
        float _1947 = (_1942 * _1448) + _1438;
        float _1948 = (_1942 * _1451) + _1442;
        float _1949 = _1942 * 9.9999997473787516355514526367188e-05;
        float _1951 = (-1.0) - _1949;
        float _1953 = _1949 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1948 > _1953) || ((_1948 < _1951) || ((_1947 > _1953) || ((_1947 < _1951) || ((_1946 < _1951) || (_1946 > _1953))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2076 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1948, cbModelParam._m0[9u].z, fma(_1947, cbModelParam._m0[9u].y, _1946 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1948, cbModelParam._m0[10u].z, fma(_1947, cbModelParam._m0[10u].y, _1946 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1948, cbModelParam._m0[11u].z, fma(_1947, cbModelParam._m0[11u].y, _1946 * cbModelParam._m0[11u].x))), _1386);
            frontier_phi_16_38_ladder = _2076.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2076.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2076.x * cbModelParam._m0[1u].y;
        }
        _1467 = frontier_phi_16_38_ladder_2;
        _1469 = frontier_phi_16_38_ladder_1;
        _1471 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1455 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_542, _543, _544), _1386);
        _1467 = _1455.x * cbModelParam._m0[1u].y;
        _1469 = _1455.y * cbModelParam._m0[1u].y;
        _1471 = _1455.z * cbModelParam._m0[1u].y;
    }
    float _1475 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _355);
    float _1476 = isnan(_1475) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1475 : min(cbModelParam._m0[25u].w, _1475));
    float _1568;
    float _1570;
    float _1572;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1532 = fma(_605, cbModelParam._m0[21u].z, fma(_601, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _597)) + cbModelParam._m0[21u].w;
        float _1536 = fma(_605, cbModelParam._m0[22u].z, fma(_601, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _597)) + cbModelParam._m0[22u].w;
        float _1540 = fma(_605, cbModelParam._m0[23u].z, fma(_601, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _597)) + cbModelParam._m0[23u].w;
        float _1543 = fma(_544, cbModelParam._m0[21u].z, fma(_543, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _542));
        float _1546 = fma(_544, cbModelParam._m0[22u].z, fma(_543, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _542));
        float _1549 = fma(_544, cbModelParam._m0[23u].z, fma(_543, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _542));
        float _1690;
        if (_1543 > 0.0)
        {
            _1690 = abs((1.0 - _1532) / _1543);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1532 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1690 = frontier_phi_28_24_ladder;
        }
        float _1966;
        if (_1546 > 0.0)
        {
            _1966 = abs((1.0 - _1536) / _1546);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1536 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1966 = frontier_phi_40_35_ladder;
        }
        float _2179;
        if (_1549 > 0.0)
        {
            _2179 = abs((1.0 - _1540) / _1549);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1540 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2179 = frontier_phi_49_46_ladder;
        }
        float _2181 = isnan(_1966) ? _1690 : (isnan(_1690) ? _1966 : min(_1690, _1966));
        float _2182 = isnan(_2179) ? _2181 : (isnan(_2181) ? _2179 : min(_2181, _2179));
        float _2186 = (_2182 * _1543) + _1532;
        float _2187 = (_2182 * _1546) + _1536;
        float _2188 = (_2182 * _1549) + _1540;
        float _2189 = _2182 * 9.9999997473787516355514526367188e-05;
        float _2190 = (-1.0) - _2189;
        float _2192 = _2189 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2188 > _2192) || ((_2188 < _2190) || ((_2187 > _2192) || ((_2187 < _2190) || ((_2186 < _2190) || (_2186 > _2192))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2425 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2188, cbModelParam._m0[17u].z, fma(_2187, cbModelParam._m0[17u].y, _2186 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2188, cbModelParam._m0[18u].z, fma(_2187, cbModelParam._m0[18u].y, _2186 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2188, cbModelParam._m0[19u].z, fma(_2187, cbModelParam._m0[19u].y, _2186 * cbModelParam._m0[19u].x))), _1476);
            frontier_phi_25_49_ladder = _2425.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2425.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2425.x * cbModelParam._m0[1u].z;
        }
        _1568 = frontier_phi_25_49_ladder_2;
        _1570 = frontier_phi_25_49_ladder_1;
        _1572 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1552 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_542, _543, _544), _1476);
        _1568 = _1552.x * cbModelParam._m0[1u].z;
        _1570 = _1552.y * cbModelParam._m0[1u].z;
        _1572 = _1552.z * cbModelParam._m0[1u].z;
    }
    float _1585 = (((_568 * _519) + _569) * _534) * ((cbModelParam._m0[1u].w * (_1568 - _1467)) + _1467);
    float _1587 = (((_568 * _521) + _569) * _534) * ((cbModelParam._m0[1u].w * (_1570 - _1469)) + _1469);
    float _1589 = (((_568 * _522) + _569) * _534) * ((cbModelParam._m0[1u].w * (_1572 - _1471)) + _1471);
    float _1592 = fma(_1589, cbSceneParam._m0[89u].z, fma(_1587, cbSceneParam._m0[89u].y, _1585 * cbSceneParam._m0[89u].x));
    float _1595 = fma(_1589, cbSceneParam._m0[90u].z, fma(_1587, cbSceneParam._m0[90u].y, _1585 * cbSceneParam._m0[90u].x));
    float _1598 = fma(_1589, cbSceneParam._m0[91u].z, fma(_1587, cbSceneParam._m0[91u].y, _1585 * cbSceneParam._m0[91u].x));
    uvec4 _1608 = floatBitsToUint(cbInstanceData._m0[_494 + 5u]);
    uint _1610 = _1608.x * 14u;
    uint _1611 = _1610 + 13u;
    float _1618 = _534 + (-1.0);
    float _1623 = (cbLight._m0[_1611].x * _1618) + 1.0;
    float _1624 = (cbLight._m0[_1611].y * _1618) + 1.0;
    float _1625 = (cbLight._m0[_1611].z * _1618) + 1.0;
    float _1626 = (cbLight._m0[_1611].w * _1618) + 1.0;
    uint _1627 = _1610 + 5u;
    float _1633 = isnan(1.0) ? _1624 : (isnan(_1624) ? 1.0 : min(_1624, 1.0));
    uint _1637 = _1610 + 4u;
    float _1644 = isnan(1.0) ? _1623 : (isnan(_1623) ? 1.0 : min(_1623, 1.0));
    uint _1648 = _1610 | 1u;
    float _1659 = dot(vec3(cbLight._m0[_1610].xyz), vec3(_352, _353, _354));
    float _1662 = dot(vec3(cbLight._m0[_1648].xyz), vec3(_352, _353, _354));
    float _3895 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
    float _3906 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
    float _1667 = (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * 0.3183098733425140380859375;
    float _1669 = (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * 0.3183098733425140380859375;
    float _1676 = ((cbLight._m0[_1627].x * _1633) * _1669) + ((cbLight._m0[_1637].x * _1644) * _1667);
    float _1677 = ((_1633 * cbLight._m0[_1627].y) * _1669) + ((_1644 * cbLight._m0[_1637].y) * _1667);
    float _1678 = ((_1633 * cbLight._m0[_1627].z) * _1669) + ((_1644 * cbLight._m0[_1637].z) * _1667);
    uvec4 _1682 = floatBitsToUint(cbLight._m0[_1610 + 12u]);
    bool _1684 = _1682.x == 0u;
    float _1695;
    float _1697;
    float _1699;
    if (_1684)
    {
        _1695 = _1676;
        _1697 = _1677;
        _1699 = _1678;
    }
    else
    {
        uint _1703 = _1610 + 6u;
        float _1719 = (dot(vec3(cbLight._m0[_1610 + 2u].xyz), vec3(_352, _353, _354)) * 0.5) + 0.5;
        float _1720 = _1719 * _1719;
        float _3917 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1722 = isnan(1.0) ? _1625 : (isnan(_1625) ? 1.0 : min(_1625, 1.0));
        _1695 = (((cbLight._m0[_1703].x * 0.3183098733425140380859375) * _1721) * _1722) + _1676;
        _1697 = (((cbLight._m0[_1703].y * 0.3183098733425140380859375) * _1721) * _1722) + _1677;
        _1699 = (((cbLight._m0[_1703].z * 0.3183098733425140380859375) * _1721) * _1722) + _1678;
    }
    bool _1702 = _1682.y == 0u;
    float _1740;
    float _1742;
    float _1744;
    if (_1702)
    {
        _1740 = _1695;
        _1742 = _1697;
        _1744 = _1699;
    }
    else
    {
        uint _1910 = _1610 + 7u;
        float _1926 = (dot(vec3(cbLight._m0[_1610 + 3u].xyz), vec3(_352, _353, _354)) * 0.5) + 0.5;
        float _1927 = _1926 * _1926;
        float _3933 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
        float _1928 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1929 = isnan(1.0) ? _1626 : (isnan(_1626) ? 1.0 : min(_1626, 1.0));
        _1740 = (((cbLight._m0[_1910].x * 0.3183098733425140380859375) * _1928) * _1929) + _1695;
        _1742 = (((cbLight._m0[_1910].y * 0.3183098733425140380859375) * _1928) * _1929) + _1697;
        _1744 = (((cbLight._m0[_1910].z * 0.3183098733425140380859375) * _1928) * _1929) + _1699;
    }
    uint _1747 = _1610 + 8u;
    float _1760 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1610].w)) * _355) * 0.949999988079071044921875);
    float _1761 = _1760 * _1760;
    float _1762 = cbLight._m0[_1610].x + _433;
    float _1763 = cbLight._m0[_1610].y + _434;
    float _1764 = cbLight._m0[_1610].z + _435;
    float _1768 = inversesqrt(dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764)));
    float _1769 = _1768 * _1762;
    float _1770 = _1768 * _1763;
    float _1771 = _1768 * _1764;
    float _1772 = dot(vec3(_352, _353, _354), vec3(cbLight._m0[_1610].xyz));
    float _3949 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1775 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _3960 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _1776 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _1777 = dot(vec3(_352, _353, _354), vec3(_1769, _1770, _1771));
    float _3971 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1780 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _1781 = dot(vec3(cbLight._m0[_1610].xyz), vec3(_1769, _1770, _1771));
    float _3982 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1785 = _1761 * _1761;
    float _1789 = ((_1780 * _1780) * (_1785 + (-1.0))) + 1.0;
    float _1797 = exp2(log2(1.0 - (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) * 5.0);
    float _1798 = 0.959999978542327880859375 - _516;
    float _1800 = 0.959999978542327880859375 - _517;
    float _1801 = 0.959999978542327880859375 - _518;
    float _1808 = 1.0 - _1761;
    float _1819 = (0.5 / (((_1776 * ((_1775 * _1808) + _1761)) + 9.9999999392252902907785028219223e-09) + (((_1776 * _1808) + _1761) * _1775))) * _1775;
    float _3993 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1821 = (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1785 / ((_1789 * _1789) * 3.141590118408203125));
    uint _1832 = _1610 + 9u;
    float _1843 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1648].w)) * _355) * 0.949999988079071044921875);
    float _1844 = _1843 * _1843;
    float _1845 = cbLight._m0[_1648].x + _433;
    float _1846 = cbLight._m0[_1648].y + _434;
    float _1847 = cbLight._m0[_1648].z + _435;
    float _1851 = inversesqrt(dot(vec3(_1845, _1846, _1847), vec3(_1845, _1846, _1847)));
    float _1852 = _1851 * _1845;
    float _1853 = _1851 * _1846;
    float _1854 = _1851 * _1847;
    float _1855 = dot(vec3(_352, _353, _354), vec3(cbLight._m0[_1648].xyz));
    float _4004 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1858 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _1859 = dot(vec3(_352, _353, _354), vec3(_1852, _1853, _1854));
    float _4015 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1862 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _1863 = dot(vec3(cbLight._m0[_1648].xyz), vec3(_1852, _1853, _1854));
    float _4026 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1867 = _1844 * _1844;
    float _1871 = ((_1862 * _1862) * (_1867 + (-1.0))) + 1.0;
    float _1878 = exp2(log2(1.0 - (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) * 5.0);
    float _1885 = 1.0 - _1844;
    float _1895 = (0.5 / (((_1776 * ((_1858 * _1885) + _1844)) + 9.9999999392252902907785028219223e-09) + (((_1776 * _1885) + _1844) * _1858))) * _1858;
    float _4037 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1897 = (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1867 / ((_1871 * _1871) * 3.141590118408203125));
    float _1907 = (((((_1878 * _1798) + _519) * cbLight._m0[_1832].x) * _1897) * _1633) + (((((_1797 * _1798) + _519) * cbLight._m0[_1747].x) * _1821) * _1644);
    float _1908 = (((((_1878 * _1800) + _521) * cbLight._m0[_1832].y) * _1897) * _1633) + (((((_1797 * _1800) + _521) * cbLight._m0[_1747].y) * _1821) * _1644);
    float _1909 = (((((_1878 * _1801) + _522) * cbLight._m0[_1832].z) * _1897) * _1633) + (((((_1797 * _1801) + _522) * cbLight._m0[_1747].z) * _1821) * _1644);
    float _1971;
    float _1973;
    float _1975;
    if (_1684)
    {
        _1971 = _1907;
        _1973 = _1908;
        _1975 = _1909;
    }
    else
    {
        uint _1977 = _1610 + 2u;
        uint _1981 = _1610 + 10u;
        float _1995 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1977].w)) * _355) * 0.949999988079071044921875);
        float _1996 = _1995 * _1995;
        float _1997 = cbLight._m0[_1977].x + _433;
        float _1998 = cbLight._m0[_1977].y + _434;
        float _1999 = cbLight._m0[_1977].z + _435;
        float _2003 = inversesqrt(dot(vec3(_1997, _1998, _1999), vec3(_1997, _1998, _1999)));
        float _2004 = _2003 * _1997;
        float _2005 = _2003 * _1998;
        float _2006 = _2003 * _1999;
        float _2007 = dot(vec3(_352, _353, _354), vec3(cbLight._m0[_1977].xyz));
        float _4048 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2010 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _2011 = dot(vec3(_352, _353, _354), vec3(_2004, _2005, _2006));
        float _4059 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2014 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _2015 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_2004, _2005, _2006));
        float _4070 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2019 = _1996 * _1996;
        float _2023 = ((_2014 * _2014) * (_2019 + (-1.0))) + 1.0;
        float _2030 = exp2(log2(1.0 - (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) * 5.0);
        float _2037 = 1.0 - _1996;
        float _2047 = (0.5 / (((_1776 * ((_2010 * _2037) + _1996)) + 9.9999999392252902907785028219223e-09) + (((_1776 * _2037) + _1996) * _2010))) * _2010;
        float _4081 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2049 = (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_2019 / ((_2023 * _2023) * 3.141590118408203125));
        float _2050 = isnan(1.0) ? _1625 : (isnan(_1625) ? 1.0 : min(_1625, 1.0));
        _1971 = (((((_2030 * _1798) + _519) * cbLight._m0[_1981].x) * _2049) * _2050) + _1907;
        _1973 = (((((_2030 * _1800) + _521) * cbLight._m0[_1981].y) * _2049) * _2050) + _1908;
        _1975 = (((((_2030 * _1801) + _522) * cbLight._m0[_1981].z) * _2049) * _2050) + _1909;
    }
    float _2085;
    float _2087;
    float _2089;
    if (_1702)
    {
        _2085 = _1971;
        _2087 = _1973;
        _2089 = _1975;
    }
    else
    {
        uint _2096 = _1610 + 3u;
        uint _2100 = _1610 + 11u;
        float _2114 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2096].w)) * _355) * 0.949999988079071044921875);
        float _2115 = _2114 * _2114;
        float _2116 = cbLight._m0[_2096].x + _433;
        float _2117 = cbLight._m0[_2096].y + _434;
        float _2118 = cbLight._m0[_2096].z + _435;
        float _2122 = inversesqrt(dot(vec3(_2116, _2117, _2118), vec3(_2116, _2117, _2118)));
        float _2123 = _2122 * _2116;
        float _2124 = _2122 * _2117;
        float _2125 = _2122 * _2118;
        float _2126 = dot(vec3(_352, _353, _354), vec3(cbLight._m0[_2096].xyz));
        float _4097 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2129 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _2130 = dot(vec3(_352, _353, _354), vec3(_2123, _2124, _2125));
        float _4108 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2133 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _2134 = dot(vec3(cbLight._m0[_2096].xyz), vec3(_2123, _2124, _2125));
        float _4119 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2138 = _2115 * _2115;
        float _2142 = ((_2133 * _2133) * (_2138 + (-1.0))) + 1.0;
        float _2149 = exp2(log2(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * 5.0);
        float _2156 = 1.0 - _2115;
        float _2166 = (0.5 / (((_1776 * ((_2129 * _2156) + _2115)) + 9.9999999392252902907785028219223e-09) + (((_1776 * _2156) + _2115) * _2129))) * _2129;
        float _4130 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2168 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_2138 / ((_2142 * _2142) * 3.141590118408203125));
        float _2169 = isnan(1.0) ? _1626 : (isnan(_1626) ? 1.0 : min(_1626, 1.0));
        _2085 = (((((_2149 * _1798) + _519) * cbLight._m0[_2100].x) * _2168) * _2169) + _1971;
        _2087 = (((((_2149 * _1800) + _521) * cbLight._m0[_2100].y) * _2168) * _2169) + _1973;
        _2089 = (((((_2149 * _1801) + _522) * cbLight._m0[_2100].z) * _2168) * _2169) + _1975;
    }
    float _2304;
    float _2306;
    float _2308;
    float _2310;
    float _2312;
    float _2314;
    if (_1608.y == 0u)
    {
        float _2244 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2245 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2244;
        float _2246 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2244;
        float _2247 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2244;
        uvec4 _2259 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2260 = _2259.x;
        uint _2271 = uint((float(_2259.y) * floor(float(uint(cbSceneParam._m0[85u].y * _455) / _2260))) + floor(float(uint(cbSceneParam._m0[85u].x * _454) / _2260)));
        float _2281 = (log2(_2247 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2282 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        uint _2285 = uint(isnan(14.0) ? _2282 : (isnan(_2282) ? 14.0 : min(_2282, 14.0)));
        uvec4 _2290 = texelFetch(g_lightClusterGridBuffer, int(((_2285 << 2u) + (_2271 << 6u)) >> 2u));
        uint _2291 = _2290.x;
        uint _2292 = _2259.z;
        float _2430;
        float _2432;
        float _2434;
        float _2436;
        float _2438;
        float _2440;
        if (((((1u << ((_2292 >> 4u) & 15u)) + 4294967295u) & _2291) == 0u) || ((_2292 & 240u) == 0u))
        {
            _2430 = 0.0;
            _2432 = 0.0;
            _2434 = 0.0;
            _2436 = 0.0;
            _2438 = 0.0;
            _2440 = 0.0;
        }
        else
        {
            float _2431;
            float _2433;
            float _2435;
            float _2437;
            float _2439;
            float _2441;
            float _2592 = 0.0;
            float _2593 = 0.0;
            float _2594 = 0.0;
            float _2595 = 0.0;
            float _2596 = 0.0;
            float _2597 = 0.0;
            uint _2598 = 0u;
            uint _2607;
            bool _2608;
            for (;;)
            {
                _2607 = texelFetch(g_lightClassification, int((((_2285 << 5u) + (_2271 << 9u)) + (_2598 << 2u)) >> 2u)).x;
                _2608 = _2607 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2608)
                {
                    frontier_phi_66_pred = _2592;
                    frontier_phi_66_pred_1 = _2597;
                    frontier_phi_66_pred_2 = _2596;
                    frontier_phi_66_pred_3 = _2595;
                    frontier_phi_66_pred_4 = _2594;
                    frontier_phi_66_pred_5 = _2593;
                }
                else
                {
                    float _2737;
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    float _2742;
                    uint _2743;
                    _2737 = _2592;
                    _2738 = _2593;
                    _2739 = _2594;
                    _2740 = _2595;
                    _2741 = _2596;
                    _2742 = _2597;
                    _2743 = _2607;
                    float _2664;
                    float _2665;
                    float _2666;
                    float _2667;
                    float _2668;
                    float _2669;
                    for (;;)
                    {
                        uint _2747 = uint(findLSB(_2743)) + (_2598 << 5u);
                        uint _2744 = (_2743 + 4294967295u) & _2743;
                        uint _2749 = _2747 * 48u;
                        vec4 _2763 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2749)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 3u)).x));
                        uint _2769 = (_2747 * 48u) + 4u;
                        vec4 _2782 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2769)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 3u)).x));
                        uint _2788 = (_2747 * 48u) + 8u;
                        vec3 _2799 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2788)).x, texelFetch(g_PointLightRenderingBuffer, int(_2788 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2788 + 2u)).x));
                        float _2803 = _2763.x - _2245;
                        float _2804 = _2763.y - _2246;
                        float _2805 = _2763.z - _2247;
                        float _2806 = dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805));
                        float _2809 = inversesqrt(_2806);
                        float _2810 = _2809 * _2803;
                        float _2811 = _2809 * _2804;
                        float _2812 = _2809 * _2805;
                        float _2813 = dot(vec3(_475, _478, _481), vec3(_2810, _2811, _2812));
                        float _2818 = 1.0 - (_2806 * _2763.w);
                        float _4156 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2819 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                        float _2820 = sqrt(_2806) * _2782.w;
                        float _2823 = 1.39999997615814208984375 / (_2820 + 1.39999997615814208984375);
                        float _2824 = _2823 * _2823;
                        float _2827 = ((1.0 - _2824) * _2813) + _2824;
                        float _2830 = _2820 * _2820;
                        float _2834 = ((isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0))) * _2819) / ((_2830 * 0.699999988079071044921875) + 1.0);
                        float _2838 = (-0.0) - _2245;
                        float _2839 = (-0.0) - _2246;
                        float _2840 = (-0.0) - _2247;
                        float _2844 = inversesqrt(dot(vec3(_2838, _2839, _2840), vec3(_2838, _2839, _2840)));
                        float _2845 = _2844 * _2838;
                        float _2846 = _2844 * _2839;
                        float _2847 = _2844 * _2840;
                        float _2855 = exp2(log2(1.0 / ((_2830 * 3.5) + 5.0)) * 0.25);
                        float _2856 = 1.0 - _550;
                        float _2863 = sqrt(1.0 - ((1.0 - (_2856 * _2856)) * (1.0 - (_2855 * _2855))));
                        float _2864 = _2863 * _2863;
                        float _2865 = _2864 * _2864;
                        float _2866 = _2845 + _2810;
                        float _2867 = _2846 + _2811;
                        float _2868 = _2847 + _2812;
                        float _2872 = inversesqrt(dot(vec3(_2866, _2867, _2868), vec3(_2866, _2867, _2868)));
                        float _2876 = dot(vec3(_475, _478, _481), vec3(_2845, _2846, _2847));
                        float _4172 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                        float _2879 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                        float _2880 = dot(vec3(_475, _478, _481), vec3(_2872 * _2866, _2872 * _2867, _2872 * _2868));
                        float _4183 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
                        float _2883 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                        float _2887 = ((_2883 * _2883) * (_2865 + (-1.0))) + 1.0;
                        float _2888 = _2823 * _2864;
                        float _2889 = _2888 * _2888;
                        float _2892 = ((1.0 - _2889) * _2813) + _2889;
                        float _4194 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
                        float _2893 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                        float _2894 = 1.0 - _2864;
                        float _2904 = (0.5 / (((_2893 * ((_2879 * _2894) + _2864)) + 9.9999999392252902907785028219223e-09) + (((_2893 * _2894) + _2864) * _2879))) * _2893;
                        float _4205 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
                        float _2915 = (((_2865 * 3.1415927410125732421875) * (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) / ((_2887 * _2887) * ((_2830 * 2.1991131305694580078125) + 3.141590118408203125))) * _2819;
                        _2667 = (_2834 * _2782.x) + _2740;
                        _2668 = (_2834 * _2782.y) + _2741;
                        _2669 = (_2834 * _2782.z) + _2742;
                        _2664 = (_2915 * _2799.x) + _2737;
                        _2665 = (_2915 * _2799.y) + _2738;
                        _2666 = (_2915 * _2799.z) + _2739;
                        if (_2744 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2737 = _2664;
                            _2738 = _2665;
                            _2739 = _2666;
                            _2740 = _2667;
                            _2741 = _2668;
                            _2742 = _2669;
                            _2743 = _2744;
                        }
                    }
                    frontier_phi_66_pred = _2664;
                    frontier_phi_66_pred_1 = _2669;
                    frontier_phi_66_pred_2 = _2668;
                    frontier_phi_66_pred_3 = _2667;
                    frontier_phi_66_pred_4 = _2666;
                    frontier_phi_66_pred_5 = _2665;
                }
                _2431 = frontier_phi_66_pred;
                _2441 = frontier_phi_66_pred_1;
                _2439 = frontier_phi_66_pred_2;
                _2437 = frontier_phi_66_pred_3;
                _2435 = frontier_phi_66_pred_4;
                _2433 = frontier_phi_66_pred_5;
                uint _2599 = _2598 + 1u;
                if (_2599 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2592 = _2431;
                    _2593 = _2433;
                    _2594 = _2435;
                    _2595 = _2437;
                    _2596 = _2439;
                    _2597 = _2441;
                    _2598 = _2599;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2430 = _2431;
            _2432 = _2433;
            _2434 = _2435;
            _2436 = _2437;
            _2438 = _2439;
            _2440 = _2441;
        }
        uvec4 _2444 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2445 = _2444.z;
        uint _2447 = (_2445 >> 8u) & 15u;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        if (((4294967295u << _2447) & _2291) == 0u)
        {
            _2560 = _2430;
            _2562 = _2432;
            _2564 = _2434;
            _2566 = _2436;
            _2568 = _2438;
            _2570 = _2440;
        }
        else
        {
            float _2585 = inversesqrt(dot(vec3(_2245, _2246, _2247), vec3(_2245, _2246, _2247)));
            float _2586 = _2585 * _2245;
            float _2587 = _2585 * _2246;
            float _2588 = _2585 * _2247;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2447 < ((_2445 >> 12u) & 15u))
            {
                float _2561;
                float _2563;
                float _2565;
                float _2567;
                float _2569;
                float _2571;
                float _2720 = _2430;
                float _2721 = _2432;
                float _2722 = _2434;
                float _2723 = _2436;
                float _2724 = _2438;
                float _2725 = _2440;
                uint _2726 = _2447;
                uint _2735;
                bool _2736;
                for (;;)
                {
                    _2735 = texelFetch(g_lightClassification, int((((_2285 << 5u) + (_2271 << 9u)) + (_2726 << 2u)) >> 2u)).x;
                    _2736 = _2735 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2736)
                    {
                        frontier_phi_77_pred = _2725;
                        frontier_phi_77_pred_1 = _2724;
                        frontier_phi_77_pred_2 = _2723;
                        frontier_phi_77_pred_3 = _2722;
                        frontier_phi_77_pred_4 = _2721;
                        frontier_phi_77_pred_5 = _2720;
                    }
                    else
                    {
                        float _2929;
                        float _2930;
                        float _2931;
                        float _2932;
                        float _2933;
                        float _2934;
                        float _3225;
                        float _3226;
                        float _3227;
                        float _3228;
                        float _3229;
                        float _3230;
                        float _2942 = _2720;
                        float _2943 = _2721;
                        float _2944 = _2722;
                        float _2945 = _2723;
                        float _2946 = _2724;
                        float _2947 = _2725;
                        uint _2948 = _2735;
                        uint _2949;
                        vec4 _2974;
                        float _2975;
                        vec4 _2990;
                        vec3 _3002;
                        vec4 _3018;
                        vec4 _3034;
                        float _3081;
                        bool _3082;
                        for (;;)
                        {
                            uint _2959 = ((_2726 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2948));
                            _2949 = (_2948 + 4294967295u) & _2948;
                            uint _2961 = _2959 * 40u;
                            _2974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 3u)).x));
                            _2975 = _2974.w;
                            uint _2977 = (_2959 * 40u) + 4u;
                            _2990 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 3u)).x));
                            uint _2992 = (_2959 * 40u) + 8u;
                            _3002 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 2u)).x));
                            uint _3005 = (_2959 * 40u) + 16u;
                            _3018 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 3u)).x));
                            uint _3021 = (_2959 * 40u) + 20u;
                            _3034 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 3u)).x));
                            uint _3037 = (_2959 * 40u) + 24u;
                            vec4 _3050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 3u)).x));
                            uint _3056 = (_2959 * 40u) + 28u;
                            vec4 _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            _3081 = fma(_2247, _3069.z, fma(_2246, _3069.y, _3069.x * _2245)) + _3069.w;
                            _3082 = !((fma(_2247, _3050.z, fma(_2246, _3050.y, _3050.x * _2245)) + _3050.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3082)
                            {
                                float _3109 = _2974.x - _2245;
                                float _3110 = _2974.y - _2246;
                                float _3111 = _2974.z - _2247;
                                float _3112 = dot(vec3(_3109, _3110, _3111), vec3(_3109, _3110, _3111));
                                float _3115 = inversesqrt(_3112);
                                float _3116 = _3115 * _3109;
                                float _3117 = _3115 * _3110;
                                float _3118 = _3115 * _3111;
                                float _3122 = 1.0 - (_3112 / (_2975 * _2975));
                                float _4216 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                                float _3123 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                                float _3127 = sqrt(_3112) * _2990.w;
                                float _3129 = 1.39999997615814208984375 / (_3127 + 1.39999997615814208984375);
                                float _3130 = _3129 * _3129;
                                float _3133 = ((1.0 - _3130) * dot(vec3(_3116, _3117, _3118), vec3(_475, _478, _481))) + _3130;
                                float _3136 = _3127 * _3127;
                                float _3140 = (fma(_2247, _3018.z, fma(_2246, _3018.y, _3018.x * _2245)) + _3018.w) / _3081;
                                float _3141 = (fma(_2247, _3034.z, fma(_2246, _3034.y, _3034.x * _2245)) + _3034.w) / _3081;
                                float _3145 = 1.0 - dot(vec2(_3140, _3141), vec2(_3140, _3141));
                                float _4232 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3146 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
                                float _3147 = _3146 * (((isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0))) * _3123) / ((_3136 * 0.699999988079071044921875) + 1.0));
                                float _3159 = exp2(log2(1.0 / ((_3136 * 3.5) + 5.0)) * 0.25);
                                float _3160 = 1.0 - _550;
                                float _3167 = sqrt(1.0 - ((1.0 - (_3160 * _3160)) * (1.0 - (_3159 * _3159))));
                                float _3168 = _3167 * _3167;
                                float _3169 = _3168 * _3168;
                                float _3170 = _3116 - _2586;
                                float _3171 = _3117 - _2587;
                                float _3172 = _3118 - _2588;
                                float _3176 = inversesqrt(dot(vec3(_3170, _3171, _3172), vec3(_3170, _3171, _3172)));
                                float _3180 = dot(vec3(_475, _478, _481), vec3((-0.0) - _2586, (-0.0) - _2587, (-0.0) - _2588));
                                float _4243 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                                float _3183 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                                float _3184 = dot(vec3(_475, _478, _481), vec3(_3176 * _3170, _3176 * _3171, _3176 * _3172));
                                float _4254 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                                float _3187 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                                float _3191 = ((_3187 * _3187) * (_3169 + (-1.0))) + 1.0;
                                float _3192 = _3129 * _3168;
                                float _3193 = _3192 * _3192;
                                float _3199 = ((1.0 - _3193) * dot(vec3(_475, _478, _481), vec3(_3116, _3117, _3118))) + _3193;
                                float _4265 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                                float _3200 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                                float _3201 = 1.0 - _3168;
                                float _3211 = (0.5 / (((_3200 * ((_3183 * _3201) + _3168)) + 9.9999999392252902907785028219223e-09) + (((_3200 * _3201) + _3168) * _3183))) * _3200;
                                float _4276 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                                float _3221 = (_3146 * _3123) * (((_3169 * 3.1415927410125732421875) * (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0)))) / ((_3191 * _3191) * ((_3136 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3147 * _2990.y;
                                frontier_phi_83_pred_1 = _3147 * _2990.x;
                                frontier_phi_83_pred_2 = _3221 * _3002.z;
                                frontier_phi_83_pred_3 = _3221 * _3002.y;
                                frontier_phi_83_pred_4 = _3221 * _3002.x;
                                frontier_phi_83_pred_5 = _3147 * _2990.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3229 = frontier_phi_83_pred;
                            _3228 = frontier_phi_83_pred_1;
                            _3227 = frontier_phi_83_pred_2;
                            _3226 = frontier_phi_83_pred_3;
                            _3225 = frontier_phi_83_pred_4;
                            _3230 = frontier_phi_83_pred_5;
                            _2932 = _3228 + _2945;
                            _2933 = _3229 + _2946;
                            _2934 = _3230 + _2947;
                            _2929 = _3225 + _2942;
                            _2930 = _3226 + _2943;
                            _2931 = _3227 + _2944;
                            if (_2949 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2942 = _2929;
                                _2943 = _2930;
                                _2944 = _2931;
                                _2945 = _2932;
                                _2946 = _2933;
                                _2947 = _2934;
                                _2948 = _2949;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2934;
                        frontier_phi_77_pred_1 = _2933;
                        frontier_phi_77_pred_2 = _2932;
                        frontier_phi_77_pred_3 = _2931;
                        frontier_phi_77_pred_4 = _2930;
                        frontier_phi_77_pred_5 = _2929;
                    }
                    _2571 = frontier_phi_77_pred;
                    _2569 = frontier_phi_77_pred_1;
                    _2567 = frontier_phi_77_pred_2;
                    _2565 = frontier_phi_77_pred_3;
                    _2563 = frontier_phi_77_pred_4;
                    _2561 = frontier_phi_77_pred_5;
                    uint _2727 = _2726 + 1u;
                    if (_2727 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2720 = _2561;
                        _2721 = _2563;
                        _2722 = _2565;
                        _2723 = _2567;
                        _2724 = _2569;
                        _2725 = _2571;
                        _2726 = _2727;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2565;
                frontier_phi_58_59_ladder_1 = _2571;
                frontier_phi_58_59_ladder_2 = _2569;
                frontier_phi_58_59_ladder_3 = _2567;
                frontier_phi_58_59_ladder_4 = _2563;
                frontier_phi_58_59_ladder_5 = _2561;
            }
            else
            {
                frontier_phi_58_59_ladder = _2434;
                frontier_phi_58_59_ladder_1 = _2440;
                frontier_phi_58_59_ladder_2 = _2438;
                frontier_phi_58_59_ladder_3 = _2436;
                frontier_phi_58_59_ladder_4 = _2432;
                frontier_phi_58_59_ladder_5 = _2430;
            }
            _2560 = frontier_phi_58_59_ladder_5;
            _2562 = frontier_phi_58_59_ladder_4;
            _2564 = frontier_phi_58_59_ladder;
            _2566 = frontier_phi_58_59_ladder_3;
            _2568 = frontier_phi_58_59_ladder_2;
            _2570 = frontier_phi_58_59_ladder_1;
        }
        float _2575 = isnan(1.0) ? _534 : (isnan(_534) ? 1.0 : min(_534, 1.0));
        _2304 = (_2575 * _2566) + _1740;
        _2306 = (_2575 * _2568) + _1742;
        _2308 = (_2575 * _2570) + _1744;
        _2310 = ((_2560 * _519) * _2575) + _2085;
        _2312 = ((_2562 * _521) * _2575) + _2087;
        _2314 = ((_2564 * _522) * _2575) + _2089;
    }
    else
    {
        _2304 = _1740;
        _2306 = _1742;
        _2308 = _1744;
        _2310 = _2085;
        _2312 = _2087;
        _2314 = _2089;
    }
    uint _2320 = _495 + uint(cbMatDynParam._m0[0u].w);
    float _2329 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _318.x) * _338) * cbInstanceData._m0[_2320].x;
    float _2333 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _318.y) * _338) * cbInstanceData._m0[_2320].y;
    float _2337 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _318.z) * _338) * cbInstanceData._m0[_2320].z;
    float _4292 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _4303 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _4314 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _2354 = (((isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2304 + ((isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))) * _534))) + ((_2310 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _1375)) * cbPerFrame._m0[3u].x)) + _2329;
    float _2356 = (_2333 + ((_2312 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _1375)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_2306 + ((isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))) * _534)));
    float _2358 = (_2337 + ((_2314 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _1375)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_2308 + ((isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0))) * _534)));
    float _2359 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2360 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2361 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2367 = cbMtdParam._m0[2u].x * _2329;
    float _2368 = cbMtdParam._m0[2u].y * _2333;
    float _2369 = cbMtdParam._m0[2u].z * _2337;
    float _4340 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2371 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    uint _2372 = _494 + 6u;
    float _2380 = _454 / cbSceneParam._m0[86u].x;
    float _2381 = _455 / cbSceneParam._m0[86u].y;
    vec4 _2395 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2380, _2381, (log2((isnan(cbSceneParam._m0[77u].w) ? _375 : (isnan(_375) ? cbSceneParam._m0[77u].w : min(_375, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2397 = _2395.x;
    float _2398 = _2395.y;
    float _2399 = _2395.z;
    float _2400 = _2395.w;
    float _2493;
    float _2495;
    float _2497;
    float _2499;
    if (_375 > cbSceneParam._m0[78u].w)
    {
        float _2455 = isnan(_375) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _375 : min(cbSceneParam._m0[80u].w, _375));
        float _2456 = _2455 / _375;
        float _2467 = _2456 * _426;
        float _2468 = _427 * _2456;
        float _2469 = (-0.0) - _2468;
        float _2471 = _2456 * _428;
        float _2473 = (cbSceneParam._m0[77u].w * _2469) / _2455;
        float _2474 = _2473 + cbSceneParam._m0[79u].w;
        float _2475 = cbSceneParam._m0[79u].w - _2468;
        float _2481 = sqrt(((_2467 * _2467) + (_2468 * _2468)) + (_2471 * _2471));
        float _2484 = (1.0 - (cbSceneParam._m0[77u].w / _2455)) * _2481;
        float _2489 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2491 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2677;
        if (abs((_2469 - _2473) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2677 = ((((_2474 > 0.0) ? exp2(_2489 * _2474) : (2.0 - exp2(_2491 * _2474))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2484;
        }
        else
        {
            float _2621 = 1.0 / cbSceneParam._m0[80u].x;
            float _2622 = isnan(_2475) ? _2474 : (isnan(_2474) ? _2475 : max(_2474, _2475));
            float _2623 = isnan(_2475) ? _2474 : (isnan(_2474) ? _2475 : min(_2474, _2475));
            float _2632 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : min(_2622, 0.0));
            float _2633 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : min(_2623, 0.0));
            _2677 = ((abs(_2481 / _2469) * cbSceneParam._m0[80u].y) * ((((_2632 - _2633) * 2.0) - ((exp2(_2489 * (isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0)))) - exp2(_2489 * (isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0))))) * _2621)) - ((exp2(_2491 * _2632) - exp2(_2491 * _2633)) * _2621))) + (_2484 * cbSceneParam._m0[80u].z);
        }
        vec4 _2679 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2380, _2381, 1.0), 0.0);
        float _2688 = exp2((_2677 * (-1.44269502162933349609375)) * (1.0 - _2679.w));
        float _2689 = log2(_2688);
        float _2705 = log2(_2400);
        _2493 = (exp2(_2705 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2689 * cbSceneParam._m0[78u].x)) * _2679.x) / cbSceneParam._m0[78u].x)) + _2397;
        _2495 = (exp2(_2705 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2689 * cbSceneParam._m0[78u].y)) * _2679.y) / cbSceneParam._m0[78u].y)) + _2398;
        _2497 = (exp2(_2705 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2689 * cbSceneParam._m0[78u].z)) * _2679.z) / cbSceneParam._m0[78u].z)) + _2399;
        _2499 = _2688 * _2400;
    }
    else
    {
        _2493 = _2397;
        _2495 = _2398;
        _2497 = _2399;
        _2499 = _2400;
    }
    bool _2715;
    vec4 _2509;
    vec4 _2531;
    float _2533;
    float _2537;
    float _2538;
    float _2539;
    float _2542;
    float _2545;
    float _2548;
    float _2549;
    bool _2559;
    for (;;)
    {
        _2509 = cbMatDynParam._m0[0u];
        float _2511 = roundEven(_2509.y);
        bool _2512 = _2511 == 3.0;
        float _2513 = log2(_2499);
        float _2517 = exp2(_2513 * cbSceneParam._m0[78u].x);
        float _2518 = exp2(_2513 * cbSceneParam._m0[78u].y);
        float _2519 = exp2(_2513 * cbSceneParam._m0[78u].z);
        float _2520 = _2517 * _2359;
        float _2521 = _2518 * _2360;
        float _2522 = _2519 * _2361;
        float _2529 = _442 + (-0.5);
        _2531 = cbMtdParam._m0[1u];
        _2533 = _2531.y * _2529;
        float _2536 = (_2511 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2537 = _2536 * (_2512 ? _2520 : (_2520 + (cbSceneParam._m0[72u].w * _2493)));
        _2538 = _2536 * (_2512 ? _2521 : (_2521 + (cbSceneParam._m0[72u].w * _2495)));
        _2539 = _2536 * (_2512 ? _2522 : (_2522 + (cbSceneParam._m0[72u].w * _2497)));
        _2542 = ((_2367 * _2371) * _2517) * _2536;
        _2545 = ((_2368 * _2371) * _2518) * _2536;
        _2548 = ((_2369 * _2371) * _2519) * _2536;
        _2549 = _2529 * 0.999000012874603271484375;
        _2559 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2559)
        {
            if ((cbInstanceData._m0[_494 + 7u].x + _2549) < 0.5)
            {
                _2715 = true;
                break;
            }
        }
        uint _2656 = _495 + uint(_2509.w);
        if ((cbInstanceData._m0[_2656].w < 1.0) && ((cbInstanceData._m0[_2656].w + _2549) < 0.5))
        {
            _2715 = true;
            break;
        }
        if ((_2533 + 1.0) < _2531.x)
        {
            _2715 = true;
            break;
        }
        _2715 = false;
        break;
    }
    float _2920;
    if (_2715)
    {
        discard_state = true;
        _2920 = 0.0;
    }
    else
    {
        _2920 = cbInstanceData._m0[_2372].w;
    }
    SV_Target.x = _2537;
    SV_Target.y = _2538;
    SV_Target.z = _2539;
    SV_Target.w = _2920;
    SV_Target_1.x = _2542;
    SV_Target_1.y = _2545;
    SV_Target_1.z = _2548;
    SV_Target_1.w = cbInstanceData._m0[_2372].w;
    discard_exit();
}


