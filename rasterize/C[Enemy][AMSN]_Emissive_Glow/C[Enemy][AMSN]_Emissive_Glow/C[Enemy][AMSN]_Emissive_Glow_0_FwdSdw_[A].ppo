#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _908;
float _3625;
float _3626;
float _3627;
float _3628;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _230 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _236 = _230.x * cbMtdParam._m0[9u].x;
    float _237 = _230.y * cbMtdParam._m0[9u].y;
    float _238 = _230.z * cbMtdParam._m0[9u].z;
    vec4 _250 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _252 = _250.x;
    vec4 _264 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _268 = _264.z;
    float _272 = (_264.x * 2.0) + (-1.0);
    float _274 = (_264.y * 2.0) + (-1.0);
    float _275 = dot(vec2(_272, _274), vec2(_272, _274));
    float _3637 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _281 = sqrt(1.0 - (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))));
    vec4 _303 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _310 = fma(_281, _200 * NORMAL.x, fma(_274, _207 * TANGENT.x, (_193 * _186) * _272));
    float _313 = fma(_281, _200 * NORMAL.y, fma(_274, _207 * TANGENT.y, (_193 * _187) * _272));
    float _316 = fma(_281, _200 * NORMAL.z, fma(_274, _207 * TANGENT.z, (_193 * _188) * _272));
    float _320 = inversesqrt(dot(vec3(_310, _313, _316), vec3(_310, _313, _316)));
    float _321 = _320 * _310;
    float _322 = _320 * _313;
    float _323 = _320 * _316;
    float _3648 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _324 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _3659 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3670 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3681 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3692 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _328 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _344 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _385 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _395 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _385);
    float _396 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _385);
    float _397 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _385);
    float _401 = inversesqrt(dot(vec3(_395, _396, _397), vec3(_395, _396, _397)));
    float _402 = _395 * _401;
    float _403 = _396 * _401;
    float _404 = _397 * _401;
    vec4 _409 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _411 = _409.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _587 = sqrt(((_395 * _395) + (_396 * _396)) + (_397 * _397));
        float _593 = (cbMatDynParam._m0[5u].x * _587) + cbMatDynParam._m0[5u].y;
        float _3703 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
        float _594 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _598 = (cbMatDynParam._m0[5u].z * _587) + cbMatDynParam._m0[5u].w;
        float _3714 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) - _594)) + _594) < ((_411 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _423 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _424 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _444 = fma(_323, cbSceneParam._m0[5u].z, fma(_322, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _321));
    float _447 = fma(_323, cbSceneParam._m0[6u].z, fma(_322, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _321));
    float _450 = fma(_323, cbSceneParam._m0[7u].z, fma(_322, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _321));
    uint _463 = uint(roundEven(NORMAL.w)) * 13u;
    uint _465 = _463 + 9u;
    uint _466 = _465 + uint(cbMatDynParam._m0[0u].w);
    float _472 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) * cbInstanceData._m0[_466].x;
    float _473 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) * cbInstanceData._m0[_466].y;
    float _474 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0)))) * cbInstanceData._m0[_466].z;
    float _3725 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _3736 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _476 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _3747 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _478 = 1.0 - _328;
    float _479 = _475 * _478;
    float _480 = _476 * _478;
    float _481 = _477 * _478;
    float _486 = (_475 + (-0.039999999105930328369140625)) * _328;
    float _487 = (_476 + (-0.039999999105930328369140625)) * _328;
    float _488 = (_477 + (-0.039999999105930328369140625)) * _328;
    float _489 = _486 + 0.039999999105930328369140625;
    float _491 = _487 + 0.039999999105930328369140625;
    float _492 = _488 + 0.039999999105930328369140625;
    vec4 _501 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _423, cbSceneParam._m0[86u].y * _424));
    float _504 = _501.x * TEXCOORD.z;
    float _505 = dot(vec3(_321, _322, _323), vec3(_402, _403, _404));
    float _508 = _505 * 2.0;
    float _512 = (_508 * _321) - _402;
    float _513 = (_508 * _322) - _403;
    float _514 = (_508 * _323) - _404;
    float _518 = abs(dot(vec3(_402, _403, _404), vec3(_321, _322, _323)));
    float _3758 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _520 = sqrt(_324);
    float _533 = exp2((_520 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_520 * 3.0));
    float _539 = (1.0 - _533) * ((_520 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _540 = _533 * _520;
    float _568 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _572 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _576 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _907;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _632 = fma(_576, cbModelParam._m0[26u].z, fma(_572, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _568));
        float _636 = fma(_576, cbModelParam._m0[27u].z, fma(_572, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _568));
        float _640 = fma(_576, cbModelParam._m0[28u].z, fma(_572, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _568));
        float _665 = _568 + _321;
        float _666 = _572 + _322;
        float _667 = _576 + _323;
        float _677 = fma(_667, cbModelParam._m0[26u].z, fma(_666, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _665)) - _632;
        float _678 = fma(_667, cbModelParam._m0[27u].z, fma(_666, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _665)) - _636;
        float _679 = fma(_667, cbModelParam._m0[28u].z, fma(_666, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _665)) - _640;
        float _683 = inversesqrt(dot(vec3(_677, _678, _679), vec3(_677, _678, _679)));
        float _696 = ((_683 * _677) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_632 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _697 = ((_683 * _678) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_636 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _698 = ((_683 * _679) / cbModelParam._m0[34u].z) + ((((((_640 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _701 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_696, _697, _698), 0.0);
        vec4 _708 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_696, _697, _698), 0.0);
        vec4 _715 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_696, _697, _698), 0.0);
        vec4 _722 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_696, _697, _698), 0.0);
        float _735 = exp2((_701.w + (-0.5)) * 20.0) * 2.0;
        float _736 = _735 * (_701.x + (-0.5));
        float _737 = _735 * (_701.y + (-0.5));
        float _738 = _735 * (_701.z + (-0.5));
        float _745 = exp2((_708.w + (-0.5)) * 20.0) * 2.0;
        float _746 = _745 * (_708.x + (-0.5));
        float _747 = _745 * (_708.y + (-0.5));
        float _748 = _745 * (_708.z + (-0.5));
        float _755 = exp2((_715.w + (-0.5)) * 20.0) * 2.0;
        float _756 = _755 * (_715.x + (-0.5));
        float _757 = _755 * (_715.y + (-0.5));
        float _758 = _755 * (_715.z + (-0.5));
        float _765 = exp2((_722.w + (-0.5)) * 20.0) * 2.0;
        float _766 = _765 * (_722.x + (-0.5));
        float _767 = _765 * (_722.y + (-0.5));
        float _768 = _765 * (_722.z + (-0.5));
        float _769 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _770 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _771 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _772 = _736 * 0.5;
        float _773 = _746 * 0.5;
        float _774 = _756 * 0.5;
        float _775 = dot(vec3(_772, _773, _774), vec3(_772, _773, _774));
        float _780 = (_775 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_775);
        float _789 = (dot(vec3(_321, _322, _323), vec3(_780 * _772, _780 * _773, _780 * _774)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _799 = sqrt(((_773 * _773) + (_772 * _772)) + (_774 * _774)) / (_769 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _801 = _800 * 2.0;
        float _805 = (1.0 - _800) / (_800 + 1.0);
        float _3806 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _806 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _815 = ((((1.0 - _806) * (_801 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_801 + 1.0))) + _806) * _769;
        float _816 = _737 * 0.5;
        float _817 = _747 * 0.5;
        float _818 = _757 * 0.5;
        float _819 = dot(vec3(_816, _817, _818), vec3(_816, _817, _818));
        float _824 = (_819 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_819);
        float _832 = (dot(vec3(_321, _322, _323), vec3(_824 * _816, _824 * _817, _824 * _818)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _841 = sqrt(((_817 * _817) + (_816 * _816)) + (_818 * _818)) / (_770 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _843 = _842 * 2.0;
        float _847 = (1.0 - _842) / (_842 + 1.0);
        float _3839 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _857 = ((((1.0 - _848) * (_843 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_843 + 1.0))) + _848) * _770;
        float _858 = _738 * 0.5;
        float _859 = _748 * 0.5;
        float _860 = _758 * 0.5;
        float _861 = dot(vec3(_858, _859, _860), vec3(_858, _859, _860));
        float _866 = (_861 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_861);
        float _874 = (dot(vec3(_321, _322, _323), vec3(_866 * _858, _866 * _859, _866 * _860)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _883 = sqrt(((_859 * _859) + (_858 * _858)) + (_860 * _860)) / (_771 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _885 = _884 * 2.0;
        float _889 = (1.0 - _884) / (_884 + 1.0);
        float _3872 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _899 = ((((1.0 - _890) * (_885 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_885 + 1.0))) + _890) * _771;
        _907 = _738;
        _909 = _737;
        _910 = _736;
        _911 = _748;
        _912 = _747;
        _913 = _746;
        _914 = _758;
        _915 = _757;
        _916 = _756;
        _917 = _771;
        _918 = _770;
        _919 = _769;
        _920 = cbModelParam._m0[36u].z * (isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0)));
        _921 = cbModelParam._m0[36u].z * (isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0)));
        _922 = cbModelParam._m0[36u].z * (isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0)));
    }
    else
    {
        _907 = _908;
        _909 = _908;
        _910 = _908;
        _911 = _908;
        _912 = _908;
        _913 = _908;
        _914 = _908;
        _915 = _908;
        _916 = _908;
        _917 = _908;
        _918 = _908;
        _919 = _908;
        _920 = 0.0;
        _921 = 0.0;
        _922 = 0.0;
    }
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _951 = fma(_576, cbModelParam._m0[30u].z, fma(_572, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _568));
        float _955 = fma(_576, cbModelParam._m0[31u].z, fma(_572, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _568));
        float _959 = fma(_576, cbModelParam._m0[32u].z, fma(_572, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _568));
        float _982 = _568 + _321;
        float _983 = _572 + _322;
        float _984 = _576 + _323;
        float _994 = fma(_984, cbModelParam._m0[30u].z, fma(_983, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _982)) - _951;
        float _995 = fma(_984, cbModelParam._m0[31u].z, fma(_983, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _982)) - _955;
        float _996 = fma(_984, cbModelParam._m0[32u].z, fma(_983, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _982)) - _959;
        float _1000 = inversesqrt(dot(vec3(_994, _995, _996), vec3(_994, _995, _996)));
        float _1013 = ((_1000 * _994) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_951 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1014 = ((_1000 * _995) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_955 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1000 * _996) / cbModelParam._m0[35u].z) + ((((((_959 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        float _1050 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1017.x + (-0.5));
        float _1052 = _1050 * (_1017.y + (-0.5));
        float _1053 = _1050 * (_1017.z + (-0.5));
        float _1060 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1024.x + (-0.5));
        float _1062 = _1060 * (_1024.y + (-0.5));
        float _1063 = _1060 * (_1024.z + (-0.5));
        float _1070 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1031.x + (-0.5));
        float _1072 = _1070 * (_1031.y + (-0.5));
        float _1073 = _1070 * (_1031.z + (-0.5));
        float _1080 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1038.x + (-0.5));
        float _1082 = _1080 * (_1038.y + (-0.5));
        float _1083 = _1080 * (_1038.z + (-0.5));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = _1051 * 0.5;
        float _1088 = _1061 * 0.5;
        float _1089 = _1071 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_321, _322, _323), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3913 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3924 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3935 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1114 + 1.0))) + _1119) * _1084;
        float _1129 = _1052 * 0.5;
        float _1130 = _1062 * 0.5;
        float _1131 = _1072 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_321, _322, _323), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3946 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3957 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3968 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1156 + 1.0))) + _1161) * _1085;
        float _1171 = _1053 * 0.5;
        float _1172 = _1063 * 0.5;
        float _1173 = _1073 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_321, _322, _323), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3979 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3990 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _4001 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1198 + 1.0))) + _1203) * _1086;
        _1220 = _1053;
        _1221 = _1052;
        _1222 = _1051;
        _1223 = _1063;
        _1224 = _1062;
        _1225 = _1061;
        _1226 = _1073;
        _1227 = _1072;
        _1228 = _1071;
        _1229 = _1086;
        _1230 = _1085;
        _1231 = _1084;
        _1232 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1233 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
    }
    else
    {
        _1220 = _908;
        _1221 = _908;
        _1222 = _908;
        _1223 = _908;
        _1224 = _908;
        _1225 = _908;
        _1226 = _908;
        _1227 = _908;
        _1228 = _908;
        _1229 = _908;
        _1230 = _908;
        _1231 = _908;
        _1232 = 0.0;
        _1233 = 0.0;
        _1234 = 0.0;
    }
    float _1244 = (cbModelParam._m0[1u].x * (_1232 - _920)) + _920;
    float _1245 = (cbModelParam._m0[1u].x * (_1233 - _921)) + _921;
    float _1246 = (cbModelParam._m0[1u].x * (_1234 - _922)) + _922;
    float _1267 = fma(_1246, cbSceneParam._m0[89u].z, fma(_1245, cbSceneParam._m0[89u].y, _1244 * cbSceneParam._m0[89u].x));
    float _1270 = fma(_1246, cbSceneParam._m0[90u].z, fma(_1245, cbSceneParam._m0[90u].y, _1244 * cbSceneParam._m0[90u].x));
    float _1273 = fma(_1246, cbSceneParam._m0[91u].z, fma(_1245, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1244));
    float _1288 = _512 * 0.5;
    float _1289 = _513 * 0.5;
    float _1290 = _514 * 0.5;
    float _1291 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1222, _1225, _1228, _1231));
    float _1294 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1221, _1224, _1227, _1230));
    float _1297 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1220, _1223, _1226, _1229));
    float _1331;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1304 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_907, _911, _914, _917));
        float _1308 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_909, _912, _915, _918));
        float _1312 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_910, _913, _916, _919));
        float _1319 = dot(vec4(cbModelParam._m0[39u]), vec4(_1288, _1289, _1290, 1.0));
        _1331 = dot(vec3(isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1319) ? 0.0 : (isnan(0.0) ? _1319 : max(0.0, _1319))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1331 = 1.0;
    }
    float _1342;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1333 = dot(vec4(cbModelParam._m0[40u]), vec4(_1288, _1289, _1290, 1.0));
        _1342 = dot(vec3(isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)), isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1333) ? 0.0 : (isnan(0.0) ? _1333 : max(0.0, _1333))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1342 = 1.0;
    }
    float _1346 = (_1342 * cbModelParam._m0[1u].x) + (_1331 * (1.0 - cbModelParam._m0[1u].x));
    float _1356 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _324);
    float _1357 = isnan(_1356) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1356 : min(cbModelParam._m0[25u].z, _1356));
    float _1438;
    float _1440;
    float _1442;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1405 = fma(_576, cbModelParam._m0[13u].z, fma(_572, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _568)) + cbModelParam._m0[13u].w;
        float _1409 = fma(_576, cbModelParam._m0[14u].z, fma(_572, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _568)) + cbModelParam._m0[14u].w;
        float _1413 = fma(_576, cbModelParam._m0[15u].z, fma(_572, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _568)) + cbModelParam._m0[15u].w;
        float _1416 = fma(_514, cbModelParam._m0[13u].z, fma(_513, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _512));
        float _1419 = fma(_514, cbModelParam._m0[14u].z, fma(_513, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _512));
        float _1422 = fma(_514, cbModelParam._m0[15u].z, fma(_513, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _512));
        float _1450;
        if (_1416 > 0.0)
        {
            _1450 = abs((1.0 - _1405) / _1416);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1405 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1450 = frontier_phi_17_15_ladder;
        }
        float _1626;
        if (_1419 > 0.0)
        {
            _1626 = abs((1.0 - _1409) / _1419);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1409 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1626 = frontier_phi_26_22_ladder;
        }
        float _1922;
        if (_1422 > 0.0)
        {
            _1922 = abs((1.0 - _1413) / _1422);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1422 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1413 + 1.0) / _1422);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1922 = frontier_phi_38_33_ladder;
        }
        float _1924 = isnan(_1626) ? _1450 : (isnan(_1450) ? _1626 : min(_1450, _1626));
        float _1925 = isnan(_1922) ? _1924 : (isnan(_1924) ? _1922 : min(_1924, _1922));
        float _1929 = (_1925 * _1416) + _1405;
        float _1930 = (_1925 * _1419) + _1409;
        float _1931 = (_1925 * _1422) + _1413;
        float _1932 = _1925 * 9.9999997473787516355514526367188e-05;
        float _1934 = (-1.0) - _1932;
        float _1936 = _1932 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1931 > _1936) || ((_1931 < _1934) || ((_1930 > _1936) || ((_1930 < _1934) || ((_1929 < _1934) || (_1929 > _1936))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2076 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1931, cbModelParam._m0[9u].z, fma(_1930, cbModelParam._m0[9u].y, _1929 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1931, cbModelParam._m0[10u].z, fma(_1930, cbModelParam._m0[10u].y, _1929 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1931, cbModelParam._m0[11u].z, fma(_1930, cbModelParam._m0[11u].y, _1929 * cbModelParam._m0[11u].x))), _1357);
            frontier_phi_16_38_ladder = _2076.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2076.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2076.x * cbModelParam._m0[1u].y;
        }
        _1438 = frontier_phi_16_38_ladder_2;
        _1440 = frontier_phi_16_38_ladder_1;
        _1442 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1426 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_512, _513, _514), _1357);
        _1438 = _1426.x * cbModelParam._m0[1u].y;
        _1440 = _1426.y * cbModelParam._m0[1u].y;
        _1442 = _1426.z * cbModelParam._m0[1u].y;
    }
    float _1446 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _324);
    float _1447 = isnan(_1446) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1446 : min(cbModelParam._m0[25u].w, _1446));
    float _1540;
    float _1542;
    float _1544;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1504 = fma(_576, cbModelParam._m0[21u].z, fma(_572, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _568)) + cbModelParam._m0[21u].w;
        float _1508 = fma(_576, cbModelParam._m0[22u].z, fma(_572, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _568)) + cbModelParam._m0[22u].w;
        float _1512 = fma(_576, cbModelParam._m0[23u].z, fma(_572, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _568)) + cbModelParam._m0[23u].w;
        float _1515 = fma(_514, cbModelParam._m0[21u].z, fma(_513, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _512));
        float _1518 = fma(_514, cbModelParam._m0[22u].z, fma(_513, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _512));
        float _1521 = fma(_514, cbModelParam._m0[23u].z, fma(_513, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _512));
        float _1631;
        if (_1515 > 0.0)
        {
            _1631 = abs((1.0 - _1504) / _1515);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1504 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1631 = frontier_phi_28_24_ladder;
        }
        float _1949;
        if (_1518 > 0.0)
        {
            _1949 = abs((1.0 - _1508) / _1518);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1508 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1949 = frontier_phi_40_35_ladder;
        }
        float _2287;
        if (_1521 > 0.0)
        {
            _2287 = abs((1.0 - _1512) / _1521);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1512 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2287 = frontier_phi_50_47_ladder;
        }
        float _2289 = isnan(_1949) ? _1631 : (isnan(_1631) ? _1949 : min(_1631, _1949));
        float _2290 = isnan(_2287) ? _2289 : (isnan(_2289) ? _2287 : min(_2289, _2287));
        float _2294 = (_2290 * _1515) + _1504;
        float _2295 = (_2290 * _1518) + _1508;
        float _2296 = (_2290 * _1521) + _1512;
        float _2297 = _2290 * 9.9999997473787516355514526367188e-05;
        float _2298 = (-1.0) - _2297;
        float _2300 = _2297 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2296 > _2300) || ((_2296 < _2298) || ((_2295 > _2300) || ((_2295 < _2298) || ((_2294 < _2298) || (_2294 > _2300))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2418 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2296, cbModelParam._m0[17u].z, fma(_2295, cbModelParam._m0[17u].y, _2294 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2296, cbModelParam._m0[18u].z, fma(_2295, cbModelParam._m0[18u].y, _2294 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2296, cbModelParam._m0[19u].z, fma(_2295, cbModelParam._m0[19u].y, _2294 * cbModelParam._m0[19u].x))), _1447);
            frontier_phi_25_50_ladder = _2418.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2418.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2418.x * cbModelParam._m0[1u].z;
        }
        _1540 = frontier_phi_25_50_ladder_2;
        _1542 = frontier_phi_25_50_ladder_1;
        _1544 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1524 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_512, _513, _514), _1447);
        _1540 = _1524.x * cbModelParam._m0[1u].z;
        _1542 = _1524.y * cbModelParam._m0[1u].z;
        _1544 = _1524.z * cbModelParam._m0[1u].z;
    }
    float _1557 = (((_539 * _489) + _540) * _504) * ((cbModelParam._m0[1u].w * (_1540 - _1438)) + _1438);
    float _1559 = (((_539 * _491) + _540) * _504) * ((cbModelParam._m0[1u].w * (_1542 - _1440)) + _1440);
    float _1561 = (((_539 * _492) + _540) * _504) * ((cbModelParam._m0[1u].w * (_1544 - _1442)) + _1442);
    float _1564 = fma(_1561, cbSceneParam._m0[89u].z, fma(_1559, cbSceneParam._m0[89u].y, _1557 * cbSceneParam._m0[89u].x));
    float _1567 = fma(_1561, cbSceneParam._m0[90u].z, fma(_1559, cbSceneParam._m0[90u].y, _1557 * cbSceneParam._m0[90u].x));
    float _1570 = fma(_1561, cbSceneParam._m0[91u].z, fma(_1559, cbSceneParam._m0[91u].y, _1557 * cbSceneParam._m0[91u].x));
    float _1605 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1609 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1613 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1617 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1618 = _1605 / _1617;
    float _1619 = _1609 / _1617;
    float _1620 = _1613 / _1617;
    float _1767;
    float _1768;
    float _1769;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1647 = ((uint(_1620 > cbSceneParam._m0[59u].y) + uint(_1620 > cbSceneParam._m0[59u].x)) + uint(_1620 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1648 = _1647 + 43u;
        uint _1656 = _1647 + 44u;
        uint _1664 = _1647 + 45u;
        uint _1672 = _1647 + 46u;
        float _1683 = fma(_1617, cbSceneParam._m0[_1648].w, fma(_1613, cbSceneParam._m0[_1648].z, fma(_1609, cbSceneParam._m0[_1648].y, _1605 * cbSceneParam._m0[_1648].x)));
        float _1687 = fma(_1617, cbSceneParam._m0[_1656].w, fma(_1613, cbSceneParam._m0[_1656].z, fma(_1609, cbSceneParam._m0[_1656].y, _1605 * cbSceneParam._m0[_1656].x)));
        float _1695 = fma(_1617, cbSceneParam._m0[_1672].w, fma(_1613, cbSceneParam._m0[_1672].z, fma(_1609, cbSceneParam._m0[_1672].y, _1605 * cbSceneParam._m0[_1672].x)));
        float _1700 = cbSceneParam._m0[33u].z * _1695;
        float _1702 = cbSceneParam._m0[33u].w * _1695;
        float _1705 = fma(_1617, cbSceneParam._m0[_1664].w, fma(_1613, cbSceneParam._m0[_1664].z, fma(_1609, cbSceneParam._m0[_1664].y, _1605 * cbSceneParam._m0[_1664].x))) / _1695;
        float _1753 = (cbSceneParam._m0[33u].x - sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620))) * cbSceneParam._m0[33u].y;
        float _4127 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1760 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1700 + _1683) / _1695, (_1702 + _1687) / _1695), _1705), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1702 + _1683) / _1695, (_1687 - _1700) / _1695), _1705), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1683 - _1700) / _1695, (_1687 - _1702) / _1695), _1705), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1683 - _1702) / _1695, (_1700 + _1687) / _1695), _1705), 0.0)).x), vec4(0.25)));
        _1767 = 1.0 - (_1760 * cbSceneParam._m0[34u].x);
        _1768 = 1.0 - (_1760 * cbSceneParam._m0[34u].y);
        _1769 = 1.0 - (_1760 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1767 = 1.0;
        _1768 = 1.0;
        _1769 = 1.0;
    }
    float _1833;
    float _1835;
    float _1837;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1821 = fma(_1617, cbSceneParam._m0[63u].w, fma(_1613, cbSceneParam._m0[63u].z, fma(_1609, cbSceneParam._m0[63u].y, _1605 * cbSceneParam._m0[63u].x)));
        float _1822 = fma(_1617, cbSceneParam._m0[60u].w, fma(_1613, cbSceneParam._m0[60u].z, fma(_1609, cbSceneParam._m0[60u].y, _1605 * cbSceneParam._m0[60u].x))) / _1821;
        float _1823 = fma(_1617, cbSceneParam._m0[61u].w, fma(_1613, cbSceneParam._m0[61u].z, fma(_1609, cbSceneParam._m0[61u].y, _1605 * cbSceneParam._m0[61u].x))) / _1821;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1822 >= cbSceneParam._m0[64u].x) && (_1823 >= cbSceneParam._m0[64u].y)) && (_1822 <= cbSceneParam._m0[64u].z)) && (_1823 <= cbSceneParam._m0[64u].w))
        {
            float _1962 = fma(_1617, cbSceneParam._m0[62u].w, fma(_1613, cbSceneParam._m0[62u].z, fma(_1609, cbSceneParam._m0[62u].y, _1605 * cbSceneParam._m0[62u].x))) / _1821;
            float _1966 = isnan(cbSceneParam._m0[41u].w) ? _1962 : (isnan(_1962) ? cbSceneParam._m0[41u].w : max(_1962, cbSceneParam._m0[41u].w));
            float _2009 = (cbSceneParam._m0[33u].x - sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620))) * cbSceneParam._m0[33u].y;
            float _4143 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
            float _2016 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1822, cbSceneParam._m0[33u].w + _1823), _1966), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1822, _1823 - cbSceneParam._m0[33u].z), _1966), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1822 - cbSceneParam._m0[33u].z, _1823 - cbSceneParam._m0[33u].w), _1966), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1822 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1823), _1966), 0.0)).x), vec4(0.25)));
            float _2020 = 1.0 - (_2016 * cbSceneParam._m0[34u].x);
            float _2021 = 1.0 - (_2016 * cbSceneParam._m0[34u].y);
            float _2022 = 1.0 - (_2016 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2022) ? _1769 : (isnan(_1769) ? _2022 : min(_1769, _2022));
            frontier_phi_37_36_ladder_1 = isnan(_2021) ? _1768 : (isnan(_1768) ? _2021 : min(_1768, _2021));
            frontier_phi_37_36_ladder_2 = isnan(_2020) ? _1767 : (isnan(_1767) ? _2020 : min(_1767, _2020));
        }
        else
        {
            frontier_phi_37_36_ladder = _1769;
            frontier_phi_37_36_ladder_1 = _1768;
            frontier_phi_37_36_ladder_2 = _1767;
        }
        _1833 = frontier_phi_37_36_ladder_2;
        _1835 = frontier_phi_37_36_ladder_1;
        _1837 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1833 = _1767;
        _1835 = _1768;
        _1837 = _1769;
    }
    uvec4 _1842 = floatBitsToUint(cbInstanceData._m0[_463 + 5u]);
    uint _1844 = _1842.x * 14u;
    uint _1845 = _1844 + 13u;
    float _1852 = _504 + (-1.0);
    float _1857 = (cbLight._m0[_1845].x * _1852) + 1.0;
    float _1858 = (cbLight._m0[_1845].y * _1852) + 1.0;
    float _1859 = (cbLight._m0[_1845].z * _1852) + 1.0;
    float _1860 = (cbLight._m0[_1845].w * _1852) + 1.0;
    uint _1861 = _1844 + 5u;
    float _1867 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
    uint _1871 = _1844 + 4u;
    float _1881 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
    uint _1885 = _1844 | 1u;
    float _1896 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_321, _322, _323));
    float _1899 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_321, _322, _323));
    float _4179 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _4190 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1904 = (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * 0.3183098733425140380859375;
    float _1906 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * 0.3183098733425140380859375;
    float _1913 = ((cbLight._m0[_1861].x * _1867) * _1906) + (((cbLight._m0[_1871].x * _1833) * _1881) * _1904);
    float _1914 = ((_1867 * cbLight._m0[_1861].y) * _1906) + (((cbLight._m0[_1871].y * _1835) * _1881) * _1904);
    float _1915 = ((_1867 * cbLight._m0[_1861].z) * _1906) + (((cbLight._m0[_1871].z * _1837) * _1881) * _1904);
    uvec4 _1919 = floatBitsToUint(cbLight._m0[_1844 + 12u]);
    bool _1921 = _1919.x == 0u;
    float _2023;
    float _2025;
    float _2027;
    if (_1921)
    {
        _2023 = _1913;
        _2025 = _1914;
        _2027 = _1915;
    }
    else
    {
        uint _2031 = _1844 + 6u;
        float _2047 = (dot(vec3(cbLight._m0[_1844 + 2u].xyz), vec3(_321, _322, _323)) * 0.5) + 0.5;
        float _2048 = _2047 * _2047;
        float _4201 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2049 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _2050 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _2023 = (((cbLight._m0[_2031].x * 0.3183098733425140380859375) * _2049) * _2050) + _1913;
        _2025 = (((cbLight._m0[_2031].y * 0.3183098733425140380859375) * _2049) * _2050) + _1914;
        _2027 = (((cbLight._m0[_2031].z * 0.3183098733425140380859375) * _2049) * _2050) + _1915;
    }
    bool _2030 = _1919.y == 0u;
    float _2085;
    float _2087;
    float _2089;
    if (_2030)
    {
        _2085 = _2023;
        _2087 = _2025;
        _2089 = _2027;
    }
    else
    {
        uint _2258 = _1844 + 7u;
        float _2274 = (dot(vec3(cbLight._m0[_1844 + 3u].xyz), vec3(_321, _322, _323)) * 0.5) + 0.5;
        float _2275 = _2274 * _2274;
        float _4217 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2276 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _2277 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _2085 = (((cbLight._m0[_2258].x * 0.3183098733425140380859375) * _2276) * _2277) + _2023;
        _2087 = (((cbLight._m0[_2258].y * 0.3183098733425140380859375) * _2276) * _2277) + _2025;
        _2089 = (((cbLight._m0[_2258].z * 0.3183098733425140380859375) * _2276) * _2277) + _2027;
    }
    uint _2092 = _1844 + 8u;
    float _2105 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1844].w)) * _324) * 0.949999988079071044921875);
    float _2106 = _2105 * _2105;
    float _2107 = cbLight._m0[_1844].x + _402;
    float _2108 = cbLight._m0[_1844].y + _403;
    float _2109 = cbLight._m0[_1844].z + _404;
    float _2113 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
    float _2114 = _2113 * _2107;
    float _2115 = _2113 * _2108;
    float _2116 = _2113 * _2109;
    float _2117 = dot(vec3(_321, _322, _323), vec3(cbLight._m0[_1844].xyz));
    float _4233 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2120 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _4244 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _2121 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _2122 = dot(vec3(_321, _322, _323), vec3(_2114, _2115, _2116));
    float _4255 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2125 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _2126 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_2114, _2115, _2116));
    float _4266 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2130 = _2106 * _2106;
    float _2134 = ((_2125 * _2125) * (_2130 + (-1.0))) + 1.0;
    float _2142 = exp2(log2(1.0 - (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) * 5.0);
    float _2143 = 0.959999978542327880859375 - _486;
    float _2145 = 0.959999978542327880859375 - _487;
    float _2146 = 0.959999978542327880859375 - _488;
    float _2153 = 1.0 - _2106;
    float _2164 = (0.5 / (((_2121 * ((_2120 * _2153) + _2106)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2153) + _2106) * _2120))) * _2120;
    float _4277 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2166 = (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_2130 / ((_2134 * _2134) * 3.141590118408203125));
    uint _2180 = _1844 + 9u;
    float _2191 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1885].w)) * _324) * 0.949999988079071044921875);
    float _2192 = _2191 * _2191;
    float _2193 = cbLight._m0[_1885].x + _402;
    float _2194 = cbLight._m0[_1885].y + _403;
    float _2195 = cbLight._m0[_1885].z + _404;
    float _2199 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
    float _2200 = _2199 * _2193;
    float _2201 = _2199 * _2194;
    float _2202 = _2199 * _2195;
    float _2203 = dot(vec3(_321, _322, _323), vec3(cbLight._m0[_1885].xyz));
    float _4288 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _2207 = dot(vec3(_321, _322, _323), vec3(_2200, _2201, _2202));
    float _4299 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2210 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _2211 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_2200, _2201, _2202));
    float _4310 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2215 = _2192 * _2192;
    float _2219 = ((_2210 * _2210) * (_2215 + (-1.0))) + 1.0;
    float _2226 = exp2(log2(1.0 - (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) * 5.0);
    float _2233 = 1.0 - _2192;
    float _2243 = (0.5 / (((_2121 * ((_2206 * _2233) + _2192)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2233) + _2192) * _2206))) * _2206;
    float _4321 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2245 = (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_2215 / ((_2219 * _2219) * 3.141590118408203125));
    float _2255 = (((((_2226 * _2143) + _489) * cbLight._m0[_2180].x) * _2245) * _1867) + ((((cbLight._m0[_2092].x * _1833) * ((_2142 * _2143) + _489)) * _2166) * _1881);
    float _2256 = (((((_2226 * _2145) + _491) * cbLight._m0[_2180].y) * _2245) * _1867) + ((((cbLight._m0[_2092].y * _1835) * ((_2142 * _2145) + _491)) * _2166) * _1881);
    float _2257 = (((((_2226 * _2146) + _492) * cbLight._m0[_2180].z) * _2245) * _1867) + ((((cbLight._m0[_2092].z * _1837) * ((_2142 * _2146) + _492)) * _2166) * _1881);
    float _2313;
    float _2315;
    float _2317;
    if (_1921)
    {
        _2313 = _2255;
        _2315 = _2256;
        _2317 = _2257;
    }
    else
    {
        uint _2319 = _1844 + 2u;
        uint _2323 = _1844 + 10u;
        float _2337 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2319].w)) * _324) * 0.949999988079071044921875);
        float _2338 = _2337 * _2337;
        float _2339 = cbLight._m0[_2319].x + _402;
        float _2340 = cbLight._m0[_2319].y + _403;
        float _2341 = cbLight._m0[_2319].z + _404;
        float _2345 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
        float _2346 = _2345 * _2339;
        float _2347 = _2345 * _2340;
        float _2348 = _2345 * _2341;
        float _2349 = dot(vec3(_321, _322, _323), vec3(cbLight._m0[_2319].xyz));
        float _4332 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2352 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _2353 = dot(vec3(_321, _322, _323), vec3(_2346, _2347, _2348));
        float _4343 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2356 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _2357 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_2346, _2347, _2348));
        float _4354 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2361 = _2338 * _2338;
        float _2365 = ((_2356 * _2356) * (_2361 + (-1.0))) + 1.0;
        float _2372 = exp2(log2(1.0 - (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0)))) * 5.0);
        float _2379 = 1.0 - _2338;
        float _2389 = (0.5 / (((_2121 * ((_2352 * _2379) + _2338)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2379) + _2338) * _2352))) * _2352;
        float _4365 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2391 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_2361 / ((_2365 * _2365) * 3.141590118408203125));
        float _2392 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _2313 = (((((_2372 * _2143) + _489) * cbLight._m0[_2323].x) * _2391) * _2392) + _2255;
        _2315 = (((((_2372 * _2145) + _491) * cbLight._m0[_2323].y) * _2391) * _2392) + _2256;
        _2317 = (((((_2372 * _2146) + _492) * cbLight._m0[_2323].z) * _2391) * _2392) + _2257;
    }
    float _2423;
    float _2425;
    float _2427;
    if (_2030)
    {
        _2423 = _2313;
        _2425 = _2315;
        _2427 = _2317;
    }
    else
    {
        uint _2434 = _1844 + 3u;
        uint _2438 = _1844 + 11u;
        float _2452 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2434].w)) * _324) * 0.949999988079071044921875);
        float _2453 = _2452 * _2452;
        float _2454 = cbLight._m0[_2434].x + _402;
        float _2455 = cbLight._m0[_2434].y + _403;
        float _2456 = cbLight._m0[_2434].z + _404;
        float _2460 = inversesqrt(dot(vec3(_2454, _2455, _2456), vec3(_2454, _2455, _2456)));
        float _2461 = _2460 * _2454;
        float _2462 = _2460 * _2455;
        float _2463 = _2460 * _2456;
        float _2464 = dot(vec3(_321, _322, _323), vec3(cbLight._m0[_2434].xyz));
        float _4381 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2467 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _2468 = dot(vec3(_321, _322, _323), vec3(_2461, _2462, _2463));
        float _4392 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2471 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _2472 = dot(vec3(cbLight._m0[_2434].xyz), vec3(_2461, _2462, _2463));
        float _4403 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2476 = _2453 * _2453;
        float _2480 = ((_2471 * _2471) * (_2476 + (-1.0))) + 1.0;
        float _2487 = exp2(log2(1.0 - (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0)))) * 5.0);
        float _2494 = 1.0 - _2453;
        float _2504 = (0.5 / (((_2121 * ((_2467 * _2494) + _2453)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2494) + _2453) * _2467))) * _2467;
        float _4414 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2506 = (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_2476 / ((_2480 * _2480) * 3.141590118408203125));
        float _2507 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _2423 = (((((_2487 * _2143) + _489) * cbLight._m0[_2438].x) * _2506) * _2507) + _2313;
        _2425 = (((((_2487 * _2145) + _491) * cbLight._m0[_2438].y) * _2506) * _2507) + _2315;
        _2427 = (((((_2487 * _2146) + _492) * cbLight._m0[_2438].z) * _2506) * _2507) + _2317;
    }
    float _2573;
    float _2575;
    float _2577;
    float _2579;
    float _2581;
    float _2583;
    if (_1842.y == 0u)
    {
        uvec4 _2528 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2529 = _2528.x;
        uint _2540 = uint((float(_2528.y) * floor(float(uint(cbSceneParam._m0[85u].y * _424) / _2529))) + floor(float(uint(cbSceneParam._m0[85u].x * _423) / _2529)));
        float _2550 = (log2(_1620 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2551 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        uint _2554 = uint(isnan(14.0) ? _2551 : (isnan(_2551) ? 14.0 : min(_2551, 14.0)));
        uvec4 _2559 = texelFetch(g_lightClusterGridBuffer, int(((_2554 << 2u) + (_2540 << 6u)) >> 2u));
        uint _2560 = _2559.x;
        uint _2561 = _2528.z;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        if (((((1u << ((_2561 >> 4u) & 15u)) + 4294967295u) & _2560) == 0u) || ((_2561 & 240u) == 0u))
        {
            _2675 = 0.0;
            _2677 = 0.0;
            _2679 = 0.0;
            _2681 = 0.0;
            _2683 = 0.0;
            _2685 = 0.0;
        }
        else
        {
            float _2676;
            float _2678;
            float _2680;
            float _2682;
            float _2684;
            float _2686;
            float _2837 = 0.0;
            float _2838 = 0.0;
            float _2839 = 0.0;
            float _2840 = 0.0;
            float _2841 = 0.0;
            float _2842 = 0.0;
            uint _2843 = 0u;
            uint _2852;
            bool _2853;
            for (;;)
            {
                _2852 = texelFetch(g_lightClassification, int((((_2554 << 5u) + (_2540 << 9u)) + (_2843 << 2u)) >> 2u)).x;
                _2853 = _2852 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2853)
                {
                    frontier_phi_71_pred = _2842;
                    frontier_phi_71_pred_1 = _2841;
                    frontier_phi_71_pred_2 = _2840;
                    frontier_phi_71_pred_3 = _2839;
                    frontier_phi_71_pred_4 = _2838;
                    frontier_phi_71_pred_5 = _2837;
                }
                else
                {
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    uint _2988;
                    _2982 = _2837;
                    _2983 = _2838;
                    _2984 = _2839;
                    _2985 = _2840;
                    _2986 = _2841;
                    _2987 = _2842;
                    _2988 = _2852;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    for (;;)
                    {
                        uint _2992 = uint(findLSB(_2988)) + (_2843 << 5u);
                        uint _2989 = (_2988 + 4294967295u) & _2988;
                        uint _2994 = _2992 * 48u;
                        vec4 _3008 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2994)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 3u)).x));
                        uint _3014 = (_2992 * 48u) + 4u;
                        vec4 _3027 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3014)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 3u)).x));
                        uint _3033 = (_2992 * 48u) + 8u;
                        vec3 _3044 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3033)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 2u)).x));
                        float _3048 = _3008.x - _1618;
                        float _3049 = _3008.y - _1619;
                        float _3050 = _3008.z - _1620;
                        float _3051 = dot(vec3(_3048, _3049, _3050), vec3(_3048, _3049, _3050));
                        float _3054 = inversesqrt(_3051);
                        float _3055 = _3054 * _3048;
                        float _3056 = _3054 * _3049;
                        float _3057 = _3054 * _3050;
                        float _3058 = dot(vec3(_444, _447, _450), vec3(_3055, _3056, _3057));
                        float _3063 = 1.0 - (_3051 * _3008.w);
                        float _4440 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3064 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                        float _3065 = sqrt(_3051) * _3027.w;
                        float _3068 = 1.39999997615814208984375 / (_3065 + 1.39999997615814208984375);
                        float _3069 = _3068 * _3068;
                        float _3072 = ((1.0 - _3069) * _3058) + _3069;
                        float _3075 = _3065 * _3065;
                        float _3079 = ((isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0))) * _3064) / ((_3075 * 0.699999988079071044921875) + 1.0);
                        float _3083 = (-0.0) - _1618;
                        float _3084 = (-0.0) - _1619;
                        float _3085 = (-0.0) - _1620;
                        float _3089 = inversesqrt(dot(vec3(_3083, _3084, _3085), vec3(_3083, _3084, _3085)));
                        float _3090 = _3089 * _3083;
                        float _3091 = _3089 * _3084;
                        float _3092 = _3089 * _3085;
                        float _3099 = exp2(log2(1.0 / ((_3075 * 3.5) + 5.0)) * 0.25);
                        float _3100 = 1.0 - _520;
                        float _3107 = sqrt(1.0 - ((1.0 - (_3100 * _3100)) * (1.0 - (_3099 * _3099))));
                        float _3108 = _3107 * _3107;
                        float _3109 = _3108 * _3108;
                        float _3110 = _3090 + _3055;
                        float _3111 = _3091 + _3056;
                        float _3112 = _3092 + _3057;
                        float _3116 = inversesqrt(dot(vec3(_3110, _3111, _3112), vec3(_3110, _3111, _3112)));
                        float _3120 = dot(vec3(_444, _447, _450), vec3(_3090, _3091, _3092));
                        float _4456 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                        float _3123 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                        float _3124 = dot(vec3(_444, _447, _450), vec3(_3116 * _3110, _3116 * _3111, _3116 * _3112));
                        float _4467 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                        float _3127 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                        float _3131 = ((_3127 * _3127) * (_3109 + (-1.0))) + 1.0;
                        float _3132 = _3068 * _3108;
                        float _3133 = _3132 * _3132;
                        float _3136 = ((1.0 - _3133) * _3058) + _3133;
                        float _4478 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3137 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                        float _3138 = 1.0 - _3108;
                        float _3148 = (0.5 / (((_3137 * ((_3123 * _3138) + _3108)) + 9.9999999392252902907785028219223e-09) + (((_3137 * _3138) + _3108) * _3123))) * _3137;
                        float _4489 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3159 = (((_3109 * 3.1415927410125732421875) * (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) / ((_3131 * _3131) * ((_3075 * 2.1991131305694580078125) + 3.141590118408203125))) * _3064;
                        _2912 = (_3079 * _3027.x) + _2985;
                        _2913 = (_3079 * _3027.y) + _2986;
                        _2914 = (_3079 * _3027.z) + _2987;
                        _2909 = (_3159 * _3044.x) + _2982;
                        _2910 = (_3159 * _3044.y) + _2983;
                        _2911 = (_3159 * _3044.z) + _2984;
                        if (_2989 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2982 = _2909;
                            _2983 = _2910;
                            _2984 = _2911;
                            _2985 = _2912;
                            _2986 = _2913;
                            _2987 = _2914;
                            _2988 = _2989;
                        }
                    }
                    frontier_phi_71_pred = _2914;
                    frontier_phi_71_pred_1 = _2913;
                    frontier_phi_71_pred_2 = _2912;
                    frontier_phi_71_pred_3 = _2911;
                    frontier_phi_71_pred_4 = _2910;
                    frontier_phi_71_pred_5 = _2909;
                }
                _2686 = frontier_phi_71_pred;
                _2684 = frontier_phi_71_pred_1;
                _2682 = frontier_phi_71_pred_2;
                _2680 = frontier_phi_71_pred_3;
                _2678 = frontier_phi_71_pred_4;
                _2676 = frontier_phi_71_pred_5;
                uint _2844 = _2843 + 1u;
                if (_2844 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2837 = _2676;
                    _2838 = _2678;
                    _2839 = _2680;
                    _2840 = _2682;
                    _2841 = _2684;
                    _2842 = _2686;
                    _2843 = _2844;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2675 = _2676;
            _2677 = _2678;
            _2679 = _2680;
            _2681 = _2682;
            _2683 = _2684;
            _2685 = _2686;
        }
        uvec4 _2689 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2690 = _2689.z;
        uint _2692 = (_2690 >> 8u) & 15u;
        float _2805;
        float _2807;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        if (((4294967295u << _2692) & _2560) == 0u)
        {
            _2805 = _2675;
            _2807 = _2677;
            _2809 = _2679;
            _2811 = _2681;
            _2813 = _2683;
            _2815 = _2685;
        }
        else
        {
            float _2830 = inversesqrt(dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620)));
            float _2831 = _2830 * _1618;
            float _2832 = _2830 * _1619;
            float _2833 = _2830 * _1620;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2692 < ((_2690 >> 12u) & 15u))
            {
                float _2806;
                float _2808;
                float _2810;
                float _2812;
                float _2814;
                float _2816;
                float _2965 = _2675;
                float _2966 = _2677;
                float _2967 = _2679;
                float _2968 = _2681;
                float _2969 = _2683;
                float _2970 = _2685;
                uint _2971 = _2692;
                uint _2980;
                bool _2981;
                for (;;)
                {
                    _2980 = texelFetch(g_lightClassification, int((((_2554 << 5u) + (_2540 << 9u)) + (_2971 << 2u)) >> 2u)).x;
                    _2981 = _2980 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2981)
                    {
                        frontier_phi_82_pred = _2970;
                        frontier_phi_82_pred_1 = _2969;
                        frontier_phi_82_pred_2 = _2968;
                        frontier_phi_82_pred_3 = _2967;
                        frontier_phi_82_pred_4 = _2966;
                        frontier_phi_82_pred_5 = _2965;
                    }
                    else
                    {
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3186 = _2965;
                        float _3187 = _2966;
                        float _3188 = _2967;
                        float _3189 = _2968;
                        float _3190 = _2969;
                        float _3191 = _2970;
                        uint _3192 = _2980;
                        uint _3193;
                        vec4 _3218;
                        float _3219;
                        vec4 _3234;
                        vec3 _3246;
                        vec4 _3262;
                        vec4 _3278;
                        float _3325;
                        bool _3326;
                        for (;;)
                        {
                            uint _3203 = ((_2971 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3192));
                            _3193 = (_3192 + 4294967295u) & _3192;
                            uint _3205 = _3203 * 40u;
                            _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            _3219 = _3218.w;
                            uint _3221 = (_3203 * 40u) + 4u;
                            _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            uint _3236 = (_3203 * 40u) + 8u;
                            _3246 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x));
                            uint _3249 = (_3203 * 40u) + 16u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            uint _3265 = (_3203 * 40u) + 20u;
                            _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3281 = (_3203 * 40u) + 24u;
                            vec4 _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            uint _3300 = (_3203 * 40u) + 28u;
                            vec4 _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            _3325 = fma(_1620, _3313.z, fma(_1619, _3313.y, _3313.x * _1618)) + _3313.w;
                            _3326 = !((fma(_1620, _3294.z, fma(_1619, _3294.y, _3294.x * _1618)) + _3294.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3326)
                            {
                                float _3353 = _3218.x - _1618;
                                float _3354 = _3218.y - _1619;
                                float _3355 = _3218.z - _1620;
                                float _3356 = dot(vec3(_3353, _3354, _3355), vec3(_3353, _3354, _3355));
                                float _3359 = inversesqrt(_3356);
                                float _3360 = _3359 * _3353;
                                float _3361 = _3359 * _3354;
                                float _3362 = _3359 * _3355;
                                float _3366 = 1.0 - (_3356 / (_3219 * _3219));
                                float _4500 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                                float _3367 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                                float _3371 = sqrt(_3356) * _3234.w;
                                float _3373 = 1.39999997615814208984375 / (_3371 + 1.39999997615814208984375);
                                float _3374 = _3373 * _3373;
                                float _3377 = ((1.0 - _3374) * dot(vec3(_3360, _3361, _3362), vec3(_444, _447, _450))) + _3374;
                                float _3380 = _3371 * _3371;
                                float _3384 = (fma(_1620, _3262.z, fma(_1619, _3262.y, _3262.x * _1618)) + _3262.w) / _3325;
                                float _3385 = (fma(_1620, _3278.z, fma(_1619, _3278.y, _3278.x * _1618)) + _3278.w) / _3325;
                                float _3389 = 1.0 - dot(vec2(_3384, _3385), vec2(_3384, _3385));
                                float _4516 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3390 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                                float _3391 = _3390 * (((isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0))) * _3367) / ((_3380 * 0.699999988079071044921875) + 1.0));
                                float _3403 = exp2(log2(1.0 / ((_3380 * 3.5) + 5.0)) * 0.25);
                                float _3404 = 1.0 - _520;
                                float _3411 = sqrt(1.0 - ((1.0 - (_3404 * _3404)) * (1.0 - (_3403 * _3403))));
                                float _3412 = _3411 * _3411;
                                float _3413 = _3412 * _3412;
                                float _3414 = _3360 - _2831;
                                float _3415 = _3361 - _2832;
                                float _3416 = _3362 - _2833;
                                float _3420 = inversesqrt(dot(vec3(_3414, _3415, _3416), vec3(_3414, _3415, _3416)));
                                float _3424 = dot(vec3(_444, _447, _450), vec3((-0.0) - _2831, (-0.0) - _2832, (-0.0) - _2833));
                                float _4527 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                                float _3427 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                                float _3428 = dot(vec3(_444, _447, _450), vec3(_3420 * _3414, _3420 * _3415, _3420 * _3416));
                                float _4538 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3431 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                                float _3435 = ((_3431 * _3431) * (_3413 + (-1.0))) + 1.0;
                                float _3436 = _3373 * _3412;
                                float _3437 = _3436 * _3436;
                                float _3443 = ((1.0 - _3437) * dot(vec3(_444, _447, _450), vec3(_3360, _3361, _3362))) + _3437;
                                float _4549 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3444 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                                float _3445 = 1.0 - _3412;
                                float _3455 = (0.5 / (((_3444 * ((_3427 * _3445) + _3412)) + 9.9999999392252902907785028219223e-09) + (((_3444 * _3445) + _3412) * _3427))) * _3444;
                                float _4560 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3465 = (_3390 * _3367) * (((_3413 * 3.1415927410125732421875) * (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0)))) / ((_3435 * _3435) * ((_3380 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3391 * _3234.z;
                                frontier_phi_88_pred_1 = _3391 * _3234.y;
                                frontier_phi_88_pred_2 = _3391 * _3234.x;
                                frontier_phi_88_pred_3 = _3465 * _3246.z;
                                frontier_phi_88_pred_4 = _3465 * _3246.y;
                                frontier_phi_88_pred_5 = _3465 * _3246.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3474 = frontier_phi_88_pred;
                            _3473 = frontier_phi_88_pred_1;
                            _3472 = frontier_phi_88_pred_2;
                            _3471 = frontier_phi_88_pred_3;
                            _3470 = frontier_phi_88_pred_4;
                            _3469 = frontier_phi_88_pred_5;
                            _3176 = _3472 + _3189;
                            _3177 = _3473 + _3190;
                            _3178 = _3474 + _3191;
                            _3173 = _3469 + _3186;
                            _3174 = _3470 + _3187;
                            _3175 = _3471 + _3188;
                            if (_3193 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3193;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3178;
                        frontier_phi_82_pred_1 = _3177;
                        frontier_phi_82_pred_2 = _3176;
                        frontier_phi_82_pred_3 = _3175;
                        frontier_phi_82_pred_4 = _3174;
                        frontier_phi_82_pred_5 = _3173;
                    }
                    _2816 = frontier_phi_82_pred;
                    _2814 = frontier_phi_82_pred_1;
                    _2812 = frontier_phi_82_pred_2;
                    _2810 = frontier_phi_82_pred_3;
                    _2808 = frontier_phi_82_pred_4;
                    _2806 = frontier_phi_82_pred_5;
                    uint _2972 = _2971 + 1u;
                    if (_2972 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2965 = _2806;
                        _2966 = _2808;
                        _2967 = _2810;
                        _2968 = _2812;
                        _2969 = _2814;
                        _2970 = _2816;
                        _2971 = _2972;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2812;
                frontier_phi_63_64_ladder_1 = _2816;
                frontier_phi_63_64_ladder_2 = _2814;
                frontier_phi_63_64_ladder_3 = _2810;
                frontier_phi_63_64_ladder_4 = _2808;
                frontier_phi_63_64_ladder_5 = _2806;
            }
            else
            {
                frontier_phi_63_64_ladder = _2681;
                frontier_phi_63_64_ladder_1 = _2685;
                frontier_phi_63_64_ladder_2 = _2683;
                frontier_phi_63_64_ladder_3 = _2679;
                frontier_phi_63_64_ladder_4 = _2677;
                frontier_phi_63_64_ladder_5 = _2675;
            }
            _2805 = frontier_phi_63_64_ladder_5;
            _2807 = frontier_phi_63_64_ladder_4;
            _2809 = frontier_phi_63_64_ladder_3;
            _2811 = frontier_phi_63_64_ladder;
            _2813 = frontier_phi_63_64_ladder_2;
            _2815 = frontier_phi_63_64_ladder_1;
        }
        float _2820 = isnan(1.0) ? _504 : (isnan(_504) ? 1.0 : min(_504, 1.0));
        _2573 = (_2820 * _2811) + _2085;
        _2575 = (_2820 * _2813) + _2087;
        _2577 = (_2820 * _2815) + _2089;
        _2579 = ((_2805 * _489) * _2820) + _2423;
        _2581 = ((_2807 * _491) * _2820) + _2425;
        _2583 = ((_2809 * _492) * _2820) + _2427;
    }
    else
    {
        _2573 = _2085;
        _2575 = _2087;
        _2577 = _2089;
        _2579 = _2423;
        _2581 = _2425;
        _2583 = _2427;
    }
    uint _2589 = _465 + uint(cbMatDynParam._m0[0u].w);
    float _2597 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _303.x) * cbInstanceData._m0[_2589].x;
    float _2600 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _303.y) * cbInstanceData._m0[_2589].y;
    float _2603 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _303.z) * cbInstanceData._m0[_2589].z;
    float _4576 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _4587 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _4598 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _2620 = (((isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2573 + ((isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))) * _504))) + ((_2579 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _1346)) * cbPerFrame._m0[3u].x)) + _2597;
    float _2622 = (_2600 + ((_2581 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1346)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2575 + ((isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0))) * _504)));
    float _2624 = (_2603 + ((_2583 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _1346)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2577 + ((isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0))) * _504)));
    float _2625 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
    float _2626 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2627 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _2633 = cbMtdParam._m0[2u].x * _2597;
    float _2634 = cbMtdParam._m0[2u].y * _2600;
    float _2635 = cbMtdParam._m0[2u].z * _2603;
    float _4624 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2637 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
    uint _2638 = _463 + 6u;
    float _2646 = _423 / cbSceneParam._m0[86u].x;
    float _2647 = _424 / cbSceneParam._m0[86u].y;
    vec4 _2661 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2646, _2647, (log2((isnan(cbSceneParam._m0[77u].w) ? _344 : (isnan(_344) ? cbSceneParam._m0[77u].w : min(_344, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2663 = _2661.x;
    float _2664 = _2661.y;
    float _2665 = _2661.z;
    float _2666 = _2661.w;
    float _2738;
    float _2740;
    float _2742;
    float _2744;
    if (_344 > cbSceneParam._m0[78u].w)
    {
        float _2700 = isnan(_344) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _344 : min(cbSceneParam._m0[80u].w, _344));
        float _2701 = _2700 / _344;
        float _2712 = _2701 * _395;
        float _2713 = _396 * _2701;
        float _2714 = (-0.0) - _2713;
        float _2716 = _2701 * _397;
        float _2718 = (cbSceneParam._m0[77u].w * _2714) / _2700;
        float _2719 = _2718 + cbSceneParam._m0[79u].w;
        float _2720 = cbSceneParam._m0[79u].w - _2713;
        float _2726 = sqrt(((_2712 * _2712) + (_2713 * _2713)) + (_2716 * _2716));
        float _2729 = (1.0 - (cbSceneParam._m0[77u].w / _2700)) * _2726;
        float _2734 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2736 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2922;
        if (abs((_2714 - _2718) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2922 = ((((_2719 > 0.0) ? exp2(_2734 * _2719) : (2.0 - exp2(_2736 * _2719))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2729;
        }
        else
        {
            float _2866 = 1.0 / cbSceneParam._m0[80u].x;
            float _2867 = isnan(_2720) ? _2719 : (isnan(_2719) ? _2720 : max(_2719, _2720));
            float _2868 = isnan(_2720) ? _2719 : (isnan(_2719) ? _2720 : min(_2719, _2720));
            float _2877 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : min(_2867, 0.0));
            float _2878 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : min(_2868, 0.0));
            _2922 = ((abs(_2726 / _2714) * cbSceneParam._m0[80u].y) * ((((_2877 - _2878) * 2.0) - ((exp2(_2734 * (isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0)))) - exp2(_2734 * (isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0))))) * _2866)) - ((exp2(_2736 * _2877) - exp2(_2736 * _2878)) * _2866))) + (_2729 * cbSceneParam._m0[80u].z);
        }
        vec4 _2924 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2646, _2647, 1.0), 0.0);
        float _2933 = exp2((_2922 * (-1.44269502162933349609375)) * (1.0 - _2924.w));
        float _2934 = log2(_2933);
        float _2950 = log2(_2666);
        _2738 = (exp2(_2950 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2934 * cbSceneParam._m0[78u].x)) * _2924.x) / cbSceneParam._m0[78u].x)) + _2663;
        _2740 = (exp2(_2950 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2934 * cbSceneParam._m0[78u].y)) * _2924.y) / cbSceneParam._m0[78u].y)) + _2664;
        _2742 = (exp2(_2950 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2934 * cbSceneParam._m0[78u].z)) * _2924.z) / cbSceneParam._m0[78u].z)) + _2665;
        _2744 = _2933 * _2666;
    }
    else
    {
        _2738 = _2663;
        _2740 = _2664;
        _2742 = _2665;
        _2744 = _2666;
    }
    bool _2960;
    vec4 _2754;
    vec4 _2776;
    float _2778;
    float _2782;
    float _2783;
    float _2784;
    float _2787;
    float _2790;
    float _2793;
    float _2794;
    bool _2804;
    for (;;)
    {
        _2754 = cbMatDynParam._m0[0u];
        float _2756 = roundEven(_2754.y);
        bool _2757 = _2756 == 3.0;
        float _2758 = log2(_2744);
        float _2762 = exp2(_2758 * cbSceneParam._m0[78u].x);
        float _2763 = exp2(_2758 * cbSceneParam._m0[78u].y);
        float _2764 = exp2(_2758 * cbSceneParam._m0[78u].z);
        float _2765 = _2762 * _2625;
        float _2766 = _2763 * _2626;
        float _2767 = _2764 * _2627;
        float _2774 = _411 + (-0.5);
        _2776 = cbMtdParam._m0[1u];
        _2778 = _2776.y * _2774;
        float _2781 = (_2756 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2782 = _2781 * (_2757 ? _2765 : (_2765 + (cbSceneParam._m0[72u].w * _2738)));
        _2783 = _2781 * (_2757 ? _2766 : (_2766 + (cbSceneParam._m0[72u].w * _2740)));
        _2784 = _2781 * (_2757 ? _2767 : (_2767 + (cbSceneParam._m0[72u].w * _2742)));
        _2787 = ((_2633 * _2637) * _2762) * _2781;
        _2790 = ((_2634 * _2637) * _2763) * _2781;
        _2793 = ((_2635 * _2637) * _2764) * _2781;
        _2794 = _2774 * 0.999000012874603271484375;
        _2804 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2804)
        {
            if ((cbInstanceData._m0[_463 + 7u].x + _2794) < 0.5)
            {
                _2960 = true;
                break;
            }
        }
        uint _2901 = _465 + uint(_2754.w);
        if ((cbInstanceData._m0[_2901].w < 1.0) && ((cbInstanceData._m0[_2901].w + _2794) < 0.5))
        {
            _2960 = true;
            break;
        }
        if ((_2778 + 1.0) < _2776.x)
        {
            _2960 = true;
            break;
        }
        _2960 = false;
        break;
    }
    float _3164;
    if (_2960)
    {
        discard_state = true;
        _3164 = 0.0;
    }
    else
    {
        _3164 = cbInstanceData._m0[_2638].w;
    }
    SV_Target.x = _2782;
    SV_Target.y = _2783;
    SV_Target.z = _2784;
    SV_Target.w = _3164;
    SV_Target_1.x = _2787;
    SV_Target_1.y = _2790;
    SV_Target_1.z = _2793;
    SV_Target_1.w = cbInstanceData._m0[_2638].w;
    discard_exit();
}


