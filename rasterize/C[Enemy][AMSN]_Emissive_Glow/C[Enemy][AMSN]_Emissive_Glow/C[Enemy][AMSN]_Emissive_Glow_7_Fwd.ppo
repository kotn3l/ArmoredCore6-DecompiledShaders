#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _857;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _181 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _182 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _183 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_181, _182, _183), vec3(_181, _182, _183)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _224.x * cbMtdParam._m0[9u].x;
    float _231 = _224.y * cbMtdParam._m0[9u].y;
    float _232 = _224.z * cbMtdParam._m0[9u].z;
    vec4 _244 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _248 = _244.z;
    float _252 = (_244.x * 2.0) + (-1.0);
    float _254 = (_244.y * 2.0) + (-1.0);
    float _255 = dot(vec2(_252, _254), vec2(_252, _254));
    float _3217 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _261 = sqrt(1.0 - (isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0))));
    vec4 _298 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _309 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3228 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _310 = isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0));
    float _318 = (((_310 * _310) * (3.0 - (_310 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _321 = fma(_261, _195 * NORMAL.x, fma(_254, _202 * TANGENT.x, (_188 * _181) * _252));
    float _324 = fma(_261, _195 * NORMAL.y, fma(_254, _202 * TANGENT.y, (_188 * _182) * _252));
    float _327 = fma(_261, _195 * NORMAL.z, fma(_254, _202 * TANGENT.z, (_188 * _183) * _252));
    float _331 = inversesqrt(dot(vec3(_321, _324, _327), vec3(_321, _324, _327)));
    float _332 = _331 * _321;
    float _333 = _331 * _324;
    float _334 = _331 * _327;
    float _3239 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _335 = isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0));
    float _3250 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3261 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3272 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _354 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _395 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _405 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _395);
    float _406 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _395);
    float _407 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _395);
    float _411 = inversesqrt(dot(vec3(_405, _406, _407), vec3(_405, _406, _407)));
    float _412 = _405 * _411;
    float _413 = _406 * _411;
    float _414 = _407 * _411;
    float _420 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _421 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _442 = fma(_334, cbSceneParam._m0[5u].z, fma(_333, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _332));
    float _445 = fma(_334, cbSceneParam._m0[6u].z, fma(_333, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _332));
    float _448 = fma(_334, cbSceneParam._m0[7u].z, fma(_333, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _332));
    uint _461 = uint(roundEven(NORMAL.w)) * 13u;
    uint _462 = _461 + 9u;
    uint _463 = _462 + uint(cbMatDynParam._m0[0u].w);
    float _469 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0)))) * cbInstanceData._m0[_463].x;
    float _470 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0)))) * cbInstanceData._m0[_463].y;
    float _471 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0)))) * cbInstanceData._m0[_463].z;
    float _3283 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _472 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
    float _3294 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
    float _3305 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
    vec4 _483 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _420, cbSceneParam._m0[86u].y * _421));
    float _486 = _483.x * TEXCOORD.z;
    float _487 = dot(vec3(_332, _333, _334), vec3(_412, _413, _414));
    float _490 = _487 * 2.0;
    float _494 = (_490 * _332) - _412;
    float _495 = (_490 * _333) - _413;
    float _496 = (_490 * _334) - _414;
    float _500 = abs(dot(vec3(_412, _413, _414), vec3(_332, _333, _334)));
    float _3316 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _502 = sqrt(_335);
    float _514 = exp2((_502 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_502 * 3.0));
    float _546 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _550 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _554 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _856;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _581 = fma(_554, cbModelParam._m0[26u].z, fma(_550, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _546));
        float _585 = fma(_554, cbModelParam._m0[27u].z, fma(_550, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _546));
        float _589 = fma(_554, cbModelParam._m0[28u].z, fma(_550, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _546));
        float _614 = _546 + _332;
        float _615 = _550 + _333;
        float _616 = _554 + _334;
        float _626 = fma(_616, cbModelParam._m0[26u].z, fma(_615, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _614)) - _581;
        float _627 = fma(_616, cbModelParam._m0[27u].z, fma(_615, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _614)) - _585;
        float _628 = fma(_616, cbModelParam._m0[28u].z, fma(_615, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _614)) - _589;
        float _632 = inversesqrt(dot(vec3(_626, _627, _628), vec3(_626, _627, _628)));
        float _645 = ((_632 * _626) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_581 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _646 = ((_632 * _627) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_585 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _647 = ((_632 * _628) / cbModelParam._m0[34u].z) + ((((((_589 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _650 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _657 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _671 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        float _684 = exp2((_650.w + (-0.5)) * 20.0) * 2.0;
        float _685 = _684 * (_650.x + (-0.5));
        float _686 = _684 * (_650.y + (-0.5));
        float _687 = _684 * (_650.z + (-0.5));
        float _694 = exp2((_657.w + (-0.5)) * 20.0) * 2.0;
        float _695 = _694 * (_657.x + (-0.5));
        float _696 = _694 * (_657.y + (-0.5));
        float _697 = _694 * (_657.z + (-0.5));
        float _704 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_664.x + (-0.5));
        float _706 = _704 * (_664.y + (-0.5));
        float _707 = _704 * (_664.z + (-0.5));
        float _714 = exp2((_671.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_671.x + (-0.5));
        float _716 = _714 * (_671.y + (-0.5));
        float _717 = _714 * (_671.z + (-0.5));
        float _718 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _719 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _720 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _721 = _685 * 0.5;
        float _722 = _695 * 0.5;
        float _723 = _705 * 0.5;
        float _724 = dot(vec3(_721, _722, _723), vec3(_721, _722, _723));
        float _729 = (_724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_724);
        float _738 = (dot(vec3(_332, _333, _334), vec3(_729 * _721, _729 * _722, _729 * _723)) + 1.0) * 0.5;
        float _3342 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _748 = sqrt(((_722 * _722) + (_721 * _721)) + (_723 * _723)) / (_718 + 9.9999997473787516355514526367188e-06);
        float _3353 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
        float _750 = _749 * 2.0;
        float _754 = (1.0 - _749) / (_749 + 1.0);
        float _3364 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
        float _764 = ((((1.0 - _755) * (_750 + 2.0)) * exp2(log2(isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0))) * (_750 + 1.0))) + _755) * _718;
        float _765 = _686 * 0.5;
        float _766 = _696 * 0.5;
        float _767 = _706 * 0.5;
        float _768 = dot(vec3(_765, _766, _767), vec3(_765, _766, _767));
        float _773 = (_768 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_768);
        float _781 = (dot(vec3(_332, _333, _334), vec3(_773 * _765, _773 * _766, _773 * _767)) + 1.0) * 0.5;
        float _3375 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _790 = sqrt(((_766 * _766) + (_765 * _765)) + (_767 * _767)) / (_719 + 9.9999997473787516355514526367188e-06);
        float _3386 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _792 = _791 * 2.0;
        float _796 = (1.0 - _791) / (_791 + 1.0);
        float _3397 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _806 = ((((1.0 - _797) * (_792 + 2.0)) * exp2(log2(isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))) * (_792 + 1.0))) + _797) * _719;
        float _807 = _687 * 0.5;
        float _808 = _697 * 0.5;
        float _809 = _707 * 0.5;
        float _810 = dot(vec3(_807, _808, _809), vec3(_807, _808, _809));
        float _815 = (_810 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_810);
        float _823 = (dot(vec3(_332, _333, _334), vec3(_815 * _807, _815 * _808, _815 * _809)) + 1.0) * 0.5;
        float _3408 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _832 = sqrt(((_808 * _808) + (_807 * _807)) + (_809 * _809)) / (_720 + 9.9999997473787516355514526367188e-06);
        float _3419 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _834 = _833 * 2.0;
        float _838 = (1.0 - _833) / (_833 + 1.0);
        float _3430 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _848 = ((((1.0 - _839) * (_834 + 2.0)) * exp2(log2(isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))) * (_834 + 1.0))) + _839) * _720;
        _856 = _687;
        _858 = _686;
        _859 = _685;
        _860 = _697;
        _861 = _696;
        _862 = _695;
        _863 = _707;
        _864 = _706;
        _865 = _705;
        _866 = _720;
        _867 = _719;
        _868 = _718;
        _869 = cbModelParam._m0[36u].z * (isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0)));
        _870 = cbModelParam._m0[36u].z * (isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0)));
        _871 = cbModelParam._m0[36u].z * (isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0)));
    }
    else
    {
        _856 = _857;
        _858 = _857;
        _859 = _857;
        _860 = _857;
        _861 = _857;
        _862 = _857;
        _863 = _857;
        _864 = _857;
        _865 = _857;
        _866 = _857;
        _867 = _857;
        _868 = _857;
        _869 = 0.0;
        _870 = 0.0;
        _871 = 0.0;
    }
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _897 = fma(_554, cbModelParam._m0[30u].z, fma(_550, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _546));
        float _901 = fma(_554, cbModelParam._m0[31u].z, fma(_550, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _546));
        float _905 = fma(_554, cbModelParam._m0[32u].z, fma(_550, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _546));
        float _928 = _546 + _332;
        float _929 = _550 + _333;
        float _930 = _554 + _334;
        float _940 = fma(_930, cbModelParam._m0[30u].z, fma(_929, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _928)) - _897;
        float _941 = fma(_930, cbModelParam._m0[31u].z, fma(_929, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _928)) - _901;
        float _942 = fma(_930, cbModelParam._m0[32u].z, fma(_929, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _928)) - _905;
        float _946 = inversesqrt(dot(vec3(_940, _941, _942), vec3(_940, _941, _942)));
        float _959 = ((_946 * _940) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_897 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_946 * _941) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_901 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_946 * _942) / cbModelParam._m0[35u].z) + ((((((_905 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        float _996 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_963.x + (-0.5));
        float _998 = _996 * (_963.y + (-0.5));
        float _999 = _996 * (_963.z + (-0.5));
        float _1006 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_970.x + (-0.5));
        float _1008 = _1006 * (_970.y + (-0.5));
        float _1009 = _1006 * (_970.z + (-0.5));
        float _1016 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_977.x + (-0.5));
        float _1018 = _1016 * (_977.y + (-0.5));
        float _1019 = _1016 * (_977.z + (-0.5));
        float _1026 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_984.x + (-0.5));
        float _1028 = _1026 * (_984.y + (-0.5));
        float _1029 = _1026 * (_984.z + (-0.5));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = _997 * 0.5;
        float _1034 = _1007 * 0.5;
        float _1035 = _1017 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1049 = (dot(vec3(_332, _333, _334), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3471 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1058 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3482 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3493 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))) * (_1060 + 1.0))) + _1065) * _1030;
        float _1075 = _998 * 0.5;
        float _1076 = _1008 * 0.5;
        float _1077 = _1018 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_332, _333, _334), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3504 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3515 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3526 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * (_1102 + 1.0))) + _1107) * _1031;
        float _1117 = _999 * 0.5;
        float _1118 = _1009 * 0.5;
        float _1119 = _1019 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_332, _333, _334), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3537 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3548 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3559 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * (_1144 + 1.0))) + _1149) * _1032;
        _1166 = _999;
        _1167 = _998;
        _1168 = _997;
        _1169 = _1009;
        _1170 = _1008;
        _1171 = _1007;
        _1172 = _1019;
        _1173 = _1018;
        _1174 = _1017;
        _1175 = _1032;
        _1176 = _1031;
        _1177 = _1030;
        _1178 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1179 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1180 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
    }
    else
    {
        _1166 = _857;
        _1167 = _857;
        _1168 = _857;
        _1169 = _857;
        _1170 = _857;
        _1171 = _857;
        _1172 = _857;
        _1173 = _857;
        _1174 = _857;
        _1175 = _857;
        _1176 = _857;
        _1177 = _857;
        _1178 = 0.0;
        _1179 = 0.0;
        _1180 = 0.0;
    }
    float _1190 = (cbModelParam._m0[1u].x * (_1178 - _869)) + _869;
    float _1191 = (cbModelParam._m0[1u].x * (_1179 - _870)) + _870;
    float _1192 = (cbModelParam._m0[1u].x * (_1180 - _871)) + _871;
    float _1213 = fma(_1192, cbSceneParam._m0[89u].z, fma(_1191, cbSceneParam._m0[89u].y, _1190 * cbSceneParam._m0[89u].x));
    float _1216 = fma(_1192, cbSceneParam._m0[90u].z, fma(_1191, cbSceneParam._m0[90u].y, _1190 * cbSceneParam._m0[90u].x));
    float _1219 = fma(_1192, cbSceneParam._m0[91u].z, fma(_1191, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1190));
    float _1234 = _494 * 0.5;
    float _1235 = _495 * 0.5;
    float _1236 = _496 * 0.5;
    float _1237 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1168, _1171, _1174, _1177));
    float _1240 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1167, _1170, _1173, _1176));
    float _1243 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1166, _1169, _1172, _1175));
    float _1277;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1250 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_856, _860, _863, _866));
        float _1254 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_858, _861, _864, _867));
        float _1258 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_859, _862, _865, _868));
        float _1265 = dot(vec4(cbModelParam._m0[39u]), vec4(_1234, _1235, _1236, 1.0));
        _1277 = dot(vec3(isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)), isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1265) ? 0.0 : (isnan(0.0) ? _1265 : max(0.0, _1265))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1277 = 1.0;
    }
    float _1288;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1279 = dot(vec4(cbModelParam._m0[40u]), vec4(_1234, _1235, _1236, 1.0));
        _1288 = dot(vec3(isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)), isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1279) ? 0.0 : (isnan(0.0) ? _1279 : max(0.0, _1279))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1288 = 1.0;
    }
    float _1292 = (_1288 * cbModelParam._m0[1u].x) + (_1277 * (1.0 - cbModelParam._m0[1u].x));
    float _1302 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _335);
    float _1303 = isnan(_1302) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1302 : min(cbModelParam._m0[25u].z, _1302));
    float _1384;
    float _1386;
    float _1388;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1351 = fma(_554, cbModelParam._m0[13u].z, fma(_550, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _546)) + cbModelParam._m0[13u].w;
        float _1355 = fma(_554, cbModelParam._m0[14u].z, fma(_550, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _546)) + cbModelParam._m0[14u].w;
        float _1359 = fma(_554, cbModelParam._m0[15u].z, fma(_550, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _546)) + cbModelParam._m0[15u].w;
        float _1362 = fma(_496, cbModelParam._m0[13u].z, fma(_495, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _494));
        float _1365 = fma(_496, cbModelParam._m0[14u].z, fma(_495, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _494));
        float _1368 = fma(_496, cbModelParam._m0[15u].z, fma(_495, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _494));
        float _1396;
        if (_1362 > 0.0)
        {
            _1396 = abs((1.0 - _1351) / _1362);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1362 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1351 + 1.0) / _1362);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1396 = frontier_phi_14_12_ladder;
        }
        float _1600;
        if (_1365 > 0.0)
        {
            _1600 = abs((1.0 - _1355) / _1365);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1365 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1355 + 1.0) / _1365);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1600 = frontier_phi_23_19_ladder;
        }
        float _1843;
        if (_1368 > 0.0)
        {
            _1843 = abs((1.0 - _1359) / _1368);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1368 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1359 + 1.0) / _1368);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1843 = frontier_phi_35_30_ladder;
        }
        float _1845 = isnan(_1600) ? _1396 : (isnan(_1396) ? _1600 : min(_1396, _1600));
        float _1846 = isnan(_1843) ? _1845 : (isnan(_1845) ? _1843 : min(_1845, _1843));
        float _1850 = (_1846 * _1362) + _1351;
        float _1851 = (_1846 * _1365) + _1355;
        float _1852 = (_1846 * _1368) + _1359;
        float _1853 = _1846 * 9.9999997473787516355514526367188e-05;
        float _1855 = (-1.0) - _1853;
        float _1857 = _1853 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1852 > _1857) || ((_1852 < _1855) || ((_1851 > _1857) || ((_1851 < _1855) || ((_1850 < _1855) || (_1850 > _1857))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1976 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1852, cbModelParam._m0[9u].z, fma(_1851, cbModelParam._m0[9u].y, _1850 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1852, cbModelParam._m0[10u].z, fma(_1851, cbModelParam._m0[10u].y, _1850 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1852, cbModelParam._m0[11u].z, fma(_1851, cbModelParam._m0[11u].y, _1850 * cbModelParam._m0[11u].x))), _1303);
            frontier_phi_13_35_ladder = _1976.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1976.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1976.x * cbModelParam._m0[1u].y;
        }
        _1384 = frontier_phi_13_35_ladder_2;
        _1386 = frontier_phi_13_35_ladder_1;
        _1388 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1372 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_494, _495, _496), _1303);
        _1384 = _1372.x * cbModelParam._m0[1u].y;
        _1386 = _1372.y * cbModelParam._m0[1u].y;
        _1388 = _1372.z * cbModelParam._m0[1u].y;
    }
    float _1392 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _335);
    float _1393 = isnan(_1392) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1392 : min(cbModelParam._m0[25u].w, _1392));
    float _1485;
    float _1487;
    float _1489;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1449 = fma(_554, cbModelParam._m0[21u].z, fma(_550, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _546)) + cbModelParam._m0[21u].w;
        float _1453 = fma(_554, cbModelParam._m0[22u].z, fma(_550, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _546)) + cbModelParam._m0[22u].w;
        float _1457 = fma(_554, cbModelParam._m0[23u].z, fma(_550, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _546)) + cbModelParam._m0[23u].w;
        float _1460 = fma(_496, cbModelParam._m0[21u].z, fma(_495, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _494));
        float _1463 = fma(_496, cbModelParam._m0[22u].z, fma(_495, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _494));
        float _1466 = fma(_496, cbModelParam._m0[23u].z, fma(_495, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _494));
        float _1605;
        if (_1460 > 0.0)
        {
            _1605 = abs((1.0 - _1449) / _1460);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1449 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1605 = frontier_phi_25_21_ladder;
        }
        float _1870;
        if (_1463 > 0.0)
        {
            _1870 = abs((1.0 - _1453) / _1463);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1453 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1870 = frontier_phi_37_32_ladder;
        }
        float _2075;
        if (_1466 > 0.0)
        {
            _2075 = abs((1.0 - _1457) / _1466);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1457 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2075 = frontier_phi_46_43_ladder;
        }
        float _2077 = isnan(_1870) ? _1605 : (isnan(_1605) ? _1870 : min(_1605, _1870));
        float _2078 = isnan(_2075) ? _2077 : (isnan(_2077) ? _2075 : min(_2077, _2075));
        float _2082 = (_2078 * _1460) + _1449;
        float _2083 = (_2078 * _1463) + _1453;
        float _2084 = (_2078 * _1466) + _1457;
        float _2085 = _2078 * 9.9999997473787516355514526367188e-05;
        float _2086 = (-1.0) - _2085;
        float _2088 = _2085 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2084 > _2088) || ((_2084 < _2086) || ((_2083 > _2088) || ((_2083 < _2086) || ((_2082 < _2086) || (_2082 > _2088))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2321 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2084, cbModelParam._m0[17u].z, fma(_2083, cbModelParam._m0[17u].y, _2082 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2084, cbModelParam._m0[18u].z, fma(_2083, cbModelParam._m0[18u].y, _2082 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2084, cbModelParam._m0[19u].z, fma(_2083, cbModelParam._m0[19u].y, _2082 * cbModelParam._m0[19u].x))), _1393);
            frontier_phi_22_46_ladder = _2321.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2321.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2321.x * cbModelParam._m0[1u].z;
        }
        _1485 = frontier_phi_22_46_ladder_2;
        _1487 = frontier_phi_22_46_ladder_1;
        _1489 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1469 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_494, _495, _496), _1393);
        _1485 = _1469.x * cbModelParam._m0[1u].z;
        _1487 = _1469.y * cbModelParam._m0[1u].z;
        _1489 = _1469.z * cbModelParam._m0[1u].z;
    }
    float _1501 = ((((1.0 - _514) * ((_502 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_514 * _502)) * _486;
    float _1502 = _1501 * ((cbModelParam._m0[1u].w * (_1485 - _1384)) + _1384);
    float _1503 = _1501 * ((cbModelParam._m0[1u].w * (_1487 - _1386)) + _1386);
    float _1504 = _1501 * ((cbModelParam._m0[1u].w * (_1489 - _1388)) + _1388);
    float _1507 = fma(_1504, cbSceneParam._m0[89u].z, fma(_1503, cbSceneParam._m0[89u].y, _1502 * cbSceneParam._m0[89u].x));
    float _1510 = fma(_1504, cbSceneParam._m0[90u].z, fma(_1503, cbSceneParam._m0[90u].y, _1502 * cbSceneParam._m0[90u].x));
    float _1513 = fma(_1504, cbSceneParam._m0[91u].z, fma(_1503, cbSceneParam._m0[91u].y, _1502 * cbSceneParam._m0[91u].x));
    uvec4 _1523 = floatBitsToUint(cbInstanceData._m0[_461 + 5u]);
    uint _1525 = _1523.x * 14u;
    uint _1526 = _1525 + 13u;
    float _1533 = _486 + (-1.0);
    float _1538 = (cbLight._m0[_1526].x * _1533) + 1.0;
    float _1539 = (cbLight._m0[_1526].y * _1533) + 1.0;
    float _1540 = (cbLight._m0[_1526].z * _1533) + 1.0;
    float _1541 = (cbLight._m0[_1526].w * _1533) + 1.0;
    uint _1542 = _1525 + 5u;
    float _1548 = isnan(1.0) ? _1539 : (isnan(_1539) ? 1.0 : min(_1539, 1.0));
    uint _1552 = _1525 + 4u;
    float _1559 = isnan(1.0) ? _1538 : (isnan(_1538) ? 1.0 : min(_1538, 1.0));
    uint _1563 = _1525 | 1u;
    float _1574 = dot(vec3(cbLight._m0[_1525].xyz), vec3(_332, _333, _334));
    float _1577 = dot(vec3(cbLight._m0[_1563].xyz), vec3(_332, _333, _334));
    float _3695 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
    float _3706 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
    float _1582 = (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * 0.3183098733425140380859375;
    float _1584 = (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * 0.3183098733425140380859375;
    float _1591 = ((cbLight._m0[_1542].x * _1548) * _1584) + ((cbLight._m0[_1552].x * _1559) * _1582);
    float _1592 = ((_1548 * cbLight._m0[_1542].y) * _1584) + ((_1559 * cbLight._m0[_1552].y) * _1582);
    float _1593 = ((_1548 * cbLight._m0[_1542].z) * _1584) + ((_1559 * cbLight._m0[_1552].z) * _1582);
    uvec4 _1597 = floatBitsToUint(cbLight._m0[_1525 + 12u]);
    bool _1599 = _1597.x == 0u;
    float _1610;
    float _1612;
    float _1614;
    if (_1599)
    {
        _1610 = _1591;
        _1612 = _1592;
        _1614 = _1593;
    }
    else
    {
        uint _1618 = _1525 + 6u;
        float _1634 = (dot(vec3(cbLight._m0[_1525 + 2u].xyz), vec3(_332, _333, _334)) * 0.5) + 0.5;
        float _1635 = _1634 * _1634;
        float _3717 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1637 = isnan(1.0) ? _1540 : (isnan(_1540) ? 1.0 : min(_1540, 1.0));
        _1610 = (((cbLight._m0[_1618].x * 0.3183098733425140380859375) * _1636) * _1637) + _1591;
        _1612 = (((cbLight._m0[_1618].y * 0.3183098733425140380859375) * _1636) * _1637) + _1592;
        _1614 = (((cbLight._m0[_1618].z * 0.3183098733425140380859375) * _1636) * _1637) + _1593;
    }
    bool _1617 = _1597.y == 0u;
    float _1655;
    float _1657;
    float _1659;
    if (_1617)
    {
        _1655 = _1610;
        _1657 = _1612;
        _1659 = _1614;
    }
    else
    {
        uint _1814 = _1525 + 7u;
        float _1830 = (dot(vec3(cbLight._m0[_1525 + 3u].xyz), vec3(_332, _333, _334)) * 0.5) + 0.5;
        float _1831 = _1830 * _1830;
        float _3733 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1832 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1833 = isnan(1.0) ? _1541 : (isnan(_1541) ? 1.0 : min(_1541, 1.0));
        _1655 = (((cbLight._m0[_1814].x * 0.3183098733425140380859375) * _1832) * _1833) + _1610;
        _1657 = (((cbLight._m0[_1814].y * 0.3183098733425140380859375) * _1832) * _1833) + _1612;
        _1659 = (((cbLight._m0[_1814].z * 0.3183098733425140380859375) * _1832) * _1833) + _1614;
    }
    uint _1662 = _1525 + 8u;
    float _1675 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1525].w)) * _335) * 0.949999988079071044921875);
    float _1676 = _1675 * _1675;
    float _1677 = cbLight._m0[_1525].x + _412;
    float _1678 = cbLight._m0[_1525].y + _413;
    float _1679 = cbLight._m0[_1525].z + _414;
    float _1683 = inversesqrt(dot(vec3(_1677, _1678, _1679), vec3(_1677, _1678, _1679)));
    float _1684 = _1683 * _1677;
    float _1685 = _1683 * _1678;
    float _1686 = _1683 * _1679;
    float _1687 = dot(vec3(_332, _333, _334), vec3(cbLight._m0[_1525].xyz));
    float _3749 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    float _1690 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _3760 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _1691 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _1692 = dot(vec3(_332, _333, _334), vec3(_1684, _1685, _1686));
    float _3771 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
    float _1695 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _1696 = dot(vec3(cbLight._m0[_1525].xyz), vec3(_1684, _1685, _1686));
    float _3782 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
    float _1700 = _1676 * _1676;
    float _1704 = ((_1695 * _1695) * (_1700 + (-1.0))) + 1.0;
    float _1715 = (exp2(log2(1.0 - (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1716 = 1.0 - _1676;
    float _1727 = (0.5 / (((_1691 * ((_1690 * _1716) + _1676)) + 9.9999999392252902907785028219223e-09) + (((_1691 * _1716) + _1676) * _1690))) * _1690;
    float _3793 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
    float _1729 = (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1700 / ((_1704 * _1704) * 3.141590118408203125));
    uint _1740 = _1525 + 9u;
    float _1751 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1563].w)) * _335) * 0.949999988079071044921875);
    float _1752 = _1751 * _1751;
    float _1753 = cbLight._m0[_1563].x + _412;
    float _1754 = cbLight._m0[_1563].y + _413;
    float _1755 = cbLight._m0[_1563].z + _414;
    float _1759 = inversesqrt(dot(vec3(_1753, _1754, _1755), vec3(_1753, _1754, _1755)));
    float _1760 = _1759 * _1753;
    float _1761 = _1759 * _1754;
    float _1762 = _1759 * _1755;
    float _1763 = dot(vec3(_332, _333, _334), vec3(cbLight._m0[_1563].xyz));
    float _3804 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1766 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _1767 = dot(vec3(_332, _333, _334), vec3(_1760, _1761, _1762));
    float _3815 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1770 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _1771 = dot(vec3(cbLight._m0[_1563].xyz), vec3(_1760, _1761, _1762));
    float _3826 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1775 = _1752 * _1752;
    float _1779 = ((_1770 * _1770) * (_1775 + (-1.0))) + 1.0;
    float _1788 = (exp2(log2(1.0 - (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1789 = 1.0 - _1752;
    float _1799 = (0.5 / (((_1691 * ((_1766 * _1789) + _1752)) + 9.9999999392252902907785028219223e-09) + (((_1691 * _1789) + _1752) * _1766))) * _1766;
    float _3837 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1801 = (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1775 / ((_1779 * _1779) * 3.141590118408203125));
    float _1811 = (((_1788 * cbLight._m0[_1740].x) * _1801) * _1548) + (((_1715 * cbLight._m0[_1662].x) * _1729) * _1559);
    float _1812 = (((_1788 * cbLight._m0[_1740].y) * _1801) * _1548) + (((_1715 * cbLight._m0[_1662].y) * _1729) * _1559);
    float _1813 = (((_1788 * cbLight._m0[_1740].z) * _1801) * _1548) + (((_1715 * cbLight._m0[_1662].z) * _1729) * _1559);
    float _1875;
    float _1877;
    float _1879;
    if (_1599)
    {
        _1875 = _1811;
        _1877 = _1812;
        _1879 = _1813;
    }
    else
    {
        uint _1881 = _1525 + 2u;
        uint _1885 = _1525 + 10u;
        float _1899 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1881].w)) * _335) * 0.949999988079071044921875);
        float _1900 = _1899 * _1899;
        float _1901 = cbLight._m0[_1881].x + _412;
        float _1902 = cbLight._m0[_1881].y + _413;
        float _1903 = cbLight._m0[_1881].z + _414;
        float _1907 = inversesqrt(dot(vec3(_1901, _1902, _1903), vec3(_1901, _1902, _1903)));
        float _1908 = _1907 * _1901;
        float _1909 = _1907 * _1902;
        float _1910 = _1907 * _1903;
        float _1911 = dot(vec3(_332, _333, _334), vec3(cbLight._m0[_1881].xyz));
        float _3848 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
        float _1914 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1915 = dot(vec3(_332, _333, _334), vec3(_1908, _1909, _1910));
        float _3859 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
        float _1918 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1919 = dot(vec3(cbLight._m0[_1881].xyz), vec3(_1908, _1909, _1910));
        float _3870 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1923 = _1900 * _1900;
        float _1927 = ((_1918 * _1918) * (_1923 + (-1.0))) + 1.0;
        float _1936 = (exp2(log2(1.0 - (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1937 = 1.0 - _1900;
        float _1947 = (0.5 / (((_1691 * ((_1914 * _1937) + _1900)) + 9.9999999392252902907785028219223e-09) + (((_1691 * _1937) + _1900) * _1914))) * _1914;
        float _3881 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        float _1949 = (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_1923 / ((_1927 * _1927) * 3.141590118408203125));
        float _1950 = isnan(1.0) ? _1540 : (isnan(_1540) ? 1.0 : min(_1540, 1.0));
        _1875 = (((_1936 * cbLight._m0[_1885].x) * _1949) * _1950) + _1811;
        _1877 = (((_1936 * cbLight._m0[_1885].y) * _1949) * _1950) + _1812;
        _1879 = (((_1936 * cbLight._m0[_1885].z) * _1949) * _1950) + _1813;
    }
    float _1985;
    float _1987;
    float _1989;
    if (_1617)
    {
        _1985 = _1875;
        _1987 = _1877;
        _1989 = _1879;
    }
    else
    {
        uint _1996 = _1525 + 3u;
        uint _2000 = _1525 + 11u;
        float _2014 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1996].w)) * _335) * 0.949999988079071044921875);
        float _2015 = _2014 * _2014;
        float _2016 = cbLight._m0[_1996].x + _412;
        float _2017 = cbLight._m0[_1996].y + _413;
        float _2018 = cbLight._m0[_1996].z + _414;
        float _2022 = inversesqrt(dot(vec3(_2016, _2017, _2018), vec3(_2016, _2017, _2018)));
        float _2023 = _2022 * _2016;
        float _2024 = _2022 * _2017;
        float _2025 = _2022 * _2018;
        float _2026 = dot(vec3(_332, _333, _334), vec3(cbLight._m0[_1996].xyz));
        float _3897 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2029 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _2030 = dot(vec3(_332, _333, _334), vec3(_2023, _2024, _2025));
        float _3908 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        float _2033 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _2034 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_2023, _2024, _2025));
        float _3919 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
        float _2038 = _2015 * _2015;
        float _2042 = ((_2033 * _2033) * (_2038 + (-1.0))) + 1.0;
        float _2051 = (exp2(log2(1.0 - (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2052 = 1.0 - _2015;
        float _2062 = (0.5 / (((_1691 * ((_2029 * _2052) + _2015)) + 9.9999999392252902907785028219223e-09) + (((_1691 * _2052) + _2015) * _2029))) * _2029;
        float _3930 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2064 = (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_2038 / ((_2042 * _2042) * 3.141590118408203125));
        float _2065 = isnan(1.0) ? _1541 : (isnan(_1541) ? 1.0 : min(_1541, 1.0));
        _1985 = (((_2051 * cbLight._m0[_2000].x) * _2064) * _2065) + _1875;
        _1987 = (((_2051 * cbLight._m0[_2000].y) * _2064) * _2065) + _1877;
        _1989 = (((_2051 * cbLight._m0[_2000].z) * _2064) * _2065) + _1879;
    }
    float _2200;
    float _2202;
    float _2204;
    float _2206;
    float _2208;
    float _2210;
    if (_1523.y == 0u)
    {
        float _2140 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2141 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2140;
        float _2142 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2140;
        float _2143 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2140;
        uvec4 _2155 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2156 = _2155.x;
        uint _2167 = uint((float(_2155.y) * floor(float(uint(cbSceneParam._m0[85u].y * _421) / _2156))) + floor(float(uint(cbSceneParam._m0[85u].x * _420) / _2156)));
        float _2177 = (log2(_2143 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2178 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        uint _2181 = uint(isnan(14.0) ? _2178 : (isnan(_2178) ? 14.0 : min(_2178, 14.0)));
        uvec4 _2186 = texelFetch(g_lightClusterGridBuffer, int(((_2181 << 2u) + (_2167 << 6u)) >> 2u));
        uint _2187 = _2186.x;
        uint _2188 = _2155.z;
        float _2326;
        float _2328;
        float _2330;
        float _2332;
        float _2334;
        float _2336;
        if (((((1u << ((_2188 >> 4u) & 15u)) + 4294967295u) & _2187) == 0u) || ((_2188 & 240u) == 0u))
        {
            _2326 = 0.0;
            _2328 = 0.0;
            _2330 = 0.0;
            _2332 = 0.0;
            _2334 = 0.0;
            _2336 = 0.0;
        }
        else
        {
            float _2327;
            float _2329;
            float _2331;
            float _2333;
            float _2335;
            float _2337;
            float _2480 = 0.0;
            float _2481 = 0.0;
            float _2482 = 0.0;
            float _2483 = 0.0;
            float _2484 = 0.0;
            float _2485 = 0.0;
            uint _2486 = 0u;
            uint _2495;
            bool _2496;
            for (;;)
            {
                _2495 = texelFetch(g_lightClassification, int((((_2181 << 5u) + (_2167 << 9u)) + (_2486 << 2u)) >> 2u)).x;
                _2496 = _2495 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2496)
                {
                    frontier_phi_61_pred = _2480;
                    frontier_phi_61_pred_1 = _2485;
                    frontier_phi_61_pred_2 = _2484;
                    frontier_phi_61_pred_3 = _2483;
                    frontier_phi_61_pred_4 = _2482;
                    frontier_phi_61_pred_5 = _2481;
                }
                else
                {
                    float _2604;
                    float _2605;
                    float _2606;
                    float _2607;
                    float _2608;
                    float _2609;
                    uint _2610;
                    _2604 = _2480;
                    _2605 = _2481;
                    _2606 = _2482;
                    _2607 = _2483;
                    _2608 = _2484;
                    _2609 = _2485;
                    _2610 = _2495;
                    float _2536;
                    float _2537;
                    float _2538;
                    float _2539;
                    float _2540;
                    float _2541;
                    for (;;)
                    {
                        uint _2614 = uint(findLSB(_2610)) + (_2486 << 5u);
                        uint _2611 = (_2610 + 4294967295u) & _2610;
                        uint _2616 = _2614 * 48u;
                        vec4 _2630 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2616)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 3u)).x));
                        uint _2636 = (_2614 * 48u) + 4u;
                        vec4 _2649 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2636)).x, texelFetch(g_PointLightRenderingBuffer, int(_2636 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2636 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2636 + 3u)).x));
                        uint _2655 = (_2614 * 48u) + 8u;
                        vec3 _2666 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2655)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 2u)).x));
                        float _2670 = _2630.x - _2141;
                        float _2671 = _2630.y - _2142;
                        float _2672 = _2630.z - _2143;
                        float _2673 = dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672));
                        float _2676 = inversesqrt(_2673);
                        float _2677 = _2676 * _2670;
                        float _2678 = _2676 * _2671;
                        float _2679 = _2676 * _2672;
                        float _2680 = dot(vec3(_442, _445, _448), vec3(_2677, _2678, _2679));
                        float _2685 = 1.0 - (_2673 * _2630.w);
                        float _3956 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
                        float _2686 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
                        float _2687 = sqrt(_2673) * _2649.w;
                        float _2690 = 1.39999997615814208984375 / (_2687 + 1.39999997615814208984375);
                        float _2691 = _2690 * _2690;
                        float _2694 = ((1.0 - _2691) * _2680) + _2691;
                        float _2697 = _2687 * _2687;
                        float _2701 = ((isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0))) * _2686) / ((_2697 * 0.699999988079071044921875) + 1.0);
                        float _2705 = (-0.0) - _2141;
                        float _2706 = (-0.0) - _2142;
                        float _2707 = (-0.0) - _2143;
                        float _2711 = inversesqrt(dot(vec3(_2705, _2706, _2707), vec3(_2705, _2706, _2707)));
                        float _2712 = _2711 * _2705;
                        float _2713 = _2711 * _2706;
                        float _2714 = _2711 * _2707;
                        float _2722 = exp2(log2(1.0 / ((_2697 * 3.5) + 5.0)) * 0.25);
                        float _2723 = 1.0 - _502;
                        float _2730 = sqrt(1.0 - ((1.0 - (_2723 * _2723)) * (1.0 - (_2722 * _2722))));
                        float _2731 = _2730 * _2730;
                        float _2732 = _2731 * _2731;
                        float _2733 = _2712 + _2677;
                        float _2734 = _2713 + _2678;
                        float _2735 = _2714 + _2679;
                        float _2739 = inversesqrt(dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735)));
                        float _2743 = dot(vec3(_442, _445, _448), vec3(_2712, _2713, _2714));
                        float _3972 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
                        float _2746 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
                        float _2747 = dot(vec3(_442, _445, _448), vec3(_2739 * _2733, _2739 * _2734, _2739 * _2735));
                        float _3983 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
                        float _2750 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
                        float _2754 = ((_2750 * _2750) * (_2732 + (-1.0))) + 1.0;
                        float _2755 = _2690 * _2731;
                        float _2756 = _2755 * _2755;
                        float _2759 = ((1.0 - _2756) * _2680) + _2756;
                        float _3994 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                        float _2760 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
                        float _2761 = 1.0 - _2731;
                        float _2771 = (0.5 / (((_2760 * ((_2746 * _2761) + _2731)) + 9.9999999392252902907785028219223e-09) + (((_2760 * _2761) + _2731) * _2746))) * _2760;
                        float _4005 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
                        float _2782 = (((_2732 * 3.1415927410125732421875) * (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) / ((_2754 * _2754) * ((_2697 * 2.1991131305694580078125) + 3.141590118408203125))) * _2686;
                        _2539 = (_2701 * _2649.x) + _2607;
                        _2540 = (_2701 * _2649.y) + _2608;
                        _2541 = (_2701 * _2649.z) + _2609;
                        _2536 = (_2782 * _2666.x) + _2604;
                        _2537 = (_2782 * _2666.y) + _2605;
                        _2538 = (_2782 * _2666.z) + _2606;
                        if (_2611 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2604 = _2536;
                            _2605 = _2537;
                            _2606 = _2538;
                            _2607 = _2539;
                            _2608 = _2540;
                            _2609 = _2541;
                            _2610 = _2611;
                        }
                    }
                    frontier_phi_61_pred = _2536;
                    frontier_phi_61_pred_1 = _2541;
                    frontier_phi_61_pred_2 = _2540;
                    frontier_phi_61_pred_3 = _2539;
                    frontier_phi_61_pred_4 = _2538;
                    frontier_phi_61_pred_5 = _2537;
                }
                _2327 = frontier_phi_61_pred;
                _2337 = frontier_phi_61_pred_1;
                _2335 = frontier_phi_61_pred_2;
                _2333 = frontier_phi_61_pred_3;
                _2331 = frontier_phi_61_pred_4;
                _2329 = frontier_phi_61_pred_5;
                uint _2487 = _2486 + 1u;
                if (_2487 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2480 = _2327;
                    _2481 = _2329;
                    _2482 = _2331;
                    _2483 = _2333;
                    _2484 = _2335;
                    _2485 = _2337;
                    _2486 = _2487;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2326 = _2327;
            _2328 = _2329;
            _2330 = _2331;
            _2332 = _2333;
            _2334 = _2335;
            _2336 = _2337;
        }
        uvec4 _2340 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2341 = _2340.z;
        uint _2343 = (_2341 >> 8u) & 15u;
        float _2448;
        float _2450;
        float _2452;
        float _2454;
        float _2456;
        float _2458;
        if (((4294967295u << _2343) & _2187) == 0u)
        {
            _2448 = _2326;
            _2450 = _2328;
            _2452 = _2330;
            _2454 = _2332;
            _2456 = _2334;
            _2458 = _2336;
        }
        else
        {
            float _2473 = inversesqrt(dot(vec3(_2141, _2142, _2143), vec3(_2141, _2142, _2143)));
            float _2474 = _2473 * _2141;
            float _2475 = _2473 * _2142;
            float _2476 = _2473 * _2143;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2343 < ((_2341 >> 12u) & 15u))
            {
                float _2449;
                float _2451;
                float _2453;
                float _2455;
                float _2457;
                float _2459;
                float _2587 = _2326;
                float _2588 = _2328;
                float _2589 = _2330;
                float _2590 = _2332;
                float _2591 = _2334;
                float _2592 = _2336;
                uint _2593 = _2343;
                uint _2602;
                bool _2603;
                for (;;)
                {
                    _2602 = texelFetch(g_lightClassification, int((((_2181 << 5u) + (_2167 << 9u)) + (_2593 << 2u)) >> 2u)).x;
                    _2603 = _2602 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2603)
                    {
                        frontier_phi_67_pred = _2590;
                        frontier_phi_67_pred_1 = _2591;
                        frontier_phi_67_pred_2 = _2592;
                        frontier_phi_67_pred_3 = _2589;
                        frontier_phi_67_pred_4 = _2588;
                        frontier_phi_67_pred_5 = _2587;
                    }
                    else
                    {
                        float _2787;
                        float _2788;
                        float _2789;
                        float _2790;
                        float _2791;
                        float _2792;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _2800 = _2587;
                        float _2801 = _2588;
                        float _2802 = _2589;
                        float _2803 = _2590;
                        float _2804 = _2591;
                        float _2805 = _2592;
                        uint _2806 = _2602;
                        uint _2807;
                        vec4 _2832;
                        float _2833;
                        vec4 _2848;
                        vec3 _2860;
                        vec4 _2876;
                        vec4 _2892;
                        float _2939;
                        bool _2940;
                        for (;;)
                        {
                            uint _2817 = ((_2593 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2806));
                            _2807 = (_2806 + 4294967295u) & _2806;
                            uint _2819 = _2817 * 40u;
                            _2832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 3u)).x));
                            _2833 = _2832.w;
                            uint _2835 = (_2817 * 40u) + 4u;
                            _2848 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2835)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 3u)).x));
                            uint _2850 = (_2817 * 40u) + 8u;
                            _2860 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2850)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 2u)).x));
                            uint _2863 = (_2817 * 40u) + 16u;
                            _2876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 3u)).x));
                            uint _2879 = (_2817 * 40u) + 20u;
                            _2892 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 3u)).x));
                            uint _2895 = (_2817 * 40u) + 24u;
                            vec4 _2908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 3u)).x));
                            uint _2914 = (_2817 * 40u) + 28u;
                            vec4 _2927 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 3u)).x));
                            _2939 = fma(_2143, _2927.z, fma(_2142, _2927.y, _2927.x * _2141)) + _2927.w;
                            _2940 = !((fma(_2143, _2908.z, fma(_2142, _2908.y, _2908.x * _2141)) + _2908.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2940)
                            {
                                float _2967 = _2832.x - _2141;
                                float _2968 = _2832.y - _2142;
                                float _2969 = _2832.z - _2143;
                                float _2970 = dot(vec3(_2967, _2968, _2969), vec3(_2967, _2968, _2969));
                                float _2973 = inversesqrt(_2970);
                                float _2974 = _2973 * _2967;
                                float _2975 = _2973 * _2968;
                                float _2976 = _2973 * _2969;
                                float _2980 = 1.0 - (_2970 / (_2833 * _2833));
                                float _4016 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                                float _2981 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
                                float _2985 = sqrt(_2970) * _2848.w;
                                float _2987 = 1.39999997615814208984375 / (_2985 + 1.39999997615814208984375);
                                float _2988 = _2987 * _2987;
                                float _2991 = ((1.0 - _2988) * dot(vec3(_2974, _2975, _2976), vec3(_442, _445, _448))) + _2988;
                                float _2994 = _2985 * _2985;
                                float _2998 = (fma(_2143, _2876.z, fma(_2142, _2876.y, _2876.x * _2141)) + _2876.w) / _2939;
                                float _2999 = (fma(_2143, _2892.z, fma(_2142, _2892.y, _2892.x * _2141)) + _2892.w) / _2939;
                                float _3003 = 1.0 - dot(vec2(_2998, _2999), vec2(_2998, _2999));
                                float _4032 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                                float _3004 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
                                float _3005 = _3004 * (((isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0))) * _2981) / ((_2994 * 0.699999988079071044921875) + 1.0));
                                float _3017 = exp2(log2(1.0 / ((_2994 * 3.5) + 5.0)) * 0.25);
                                float _3018 = 1.0 - _502;
                                float _3025 = sqrt(1.0 - ((1.0 - (_3018 * _3018)) * (1.0 - (_3017 * _3017))));
                                float _3026 = _3025 * _3025;
                                float _3027 = _3026 * _3026;
                                float _3028 = _2974 - _2474;
                                float _3029 = _2975 - _2475;
                                float _3030 = _2976 - _2476;
                                float _3034 = inversesqrt(dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030)));
                                float _3038 = dot(vec3(_442, _445, _448), vec3((-0.0) - _2474, (-0.0) - _2475, (-0.0) - _2476));
                                float _4043 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                                float _3041 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
                                float _3042 = dot(vec3(_442, _445, _448), vec3(_3034 * _3028, _3034 * _3029, _3034 * _3030));
                                float _4054 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                                float _3045 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
                                float _3049 = ((_3045 * _3045) * (_3027 + (-1.0))) + 1.0;
                                float _3050 = _2987 * _3026;
                                float _3051 = _3050 * _3050;
                                float _3057 = ((1.0 - _3051) * dot(vec3(_442, _445, _448), vec3(_2974, _2975, _2976))) + _3051;
                                float _4065 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                                float _3058 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                                float _3059 = 1.0 - _3026;
                                float _3069 = (0.5 / (((_3058 * ((_3041 * _3059) + _3026)) + 9.9999999392252902907785028219223e-09) + (((_3058 * _3059) + _3026) * _3041))) * _3058;
                                float _4076 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                                float _3079 = (_3004 * _2981) * (((_3027 * 3.1415927410125732421875) * (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) / ((_3049 * _3049) * ((_2994 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3079 * _2860.x;
                                frontier_phi_73_pred_1 = _3079 * _2860.y;
                                frontier_phi_73_pred_2 = _3005 * _2848.z;
                                frontier_phi_73_pred_3 = _3005 * _2848.y;
                                frontier_phi_73_pred_4 = _3005 * _2848.x;
                                frontier_phi_73_pred_5 = _3079 * _2860.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3083 = frontier_phi_73_pred;
                            _3084 = frontier_phi_73_pred_1;
                            _3088 = frontier_phi_73_pred_2;
                            _3087 = frontier_phi_73_pred_3;
                            _3086 = frontier_phi_73_pred_4;
                            _3085 = frontier_phi_73_pred_5;
                            _2790 = _3086 + _2803;
                            _2791 = _3087 + _2804;
                            _2792 = _3088 + _2805;
                            _2787 = _3083 + _2800;
                            _2788 = _3084 + _2801;
                            _2789 = _3085 + _2802;
                            if (_2807 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2800 = _2787;
                                _2801 = _2788;
                                _2802 = _2789;
                                _2803 = _2790;
                                _2804 = _2791;
                                _2805 = _2792;
                                _2806 = _2807;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2790;
                        frontier_phi_67_pred_1 = _2791;
                        frontier_phi_67_pred_2 = _2792;
                        frontier_phi_67_pred_3 = _2789;
                        frontier_phi_67_pred_4 = _2788;
                        frontier_phi_67_pred_5 = _2787;
                    }
                    _2455 = frontier_phi_67_pred;
                    _2457 = frontier_phi_67_pred_1;
                    _2459 = frontier_phi_67_pred_2;
                    _2453 = frontier_phi_67_pred_3;
                    _2451 = frontier_phi_67_pred_4;
                    _2449 = frontier_phi_67_pred_5;
                    uint _2594 = _2593 + 1u;
                    if (_2594 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2587 = _2449;
                        _2588 = _2451;
                        _2589 = _2453;
                        _2590 = _2455;
                        _2591 = _2457;
                        _2592 = _2459;
                        _2593 = _2594;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2457;
                frontier_phi_55_56_ladder_1 = _2459;
                frontier_phi_55_56_ladder_2 = _2455;
                frontier_phi_55_56_ladder_3 = _2453;
                frontier_phi_55_56_ladder_4 = _2451;
                frontier_phi_55_56_ladder_5 = _2449;
            }
            else
            {
                frontier_phi_55_56_ladder = _2334;
                frontier_phi_55_56_ladder_1 = _2336;
                frontier_phi_55_56_ladder_2 = _2332;
                frontier_phi_55_56_ladder_3 = _2330;
                frontier_phi_55_56_ladder_4 = _2328;
                frontier_phi_55_56_ladder_5 = _2326;
            }
            _2448 = frontier_phi_55_56_ladder_5;
            _2450 = frontier_phi_55_56_ladder_4;
            _2452 = frontier_phi_55_56_ladder_3;
            _2454 = frontier_phi_55_56_ladder_2;
            _2456 = frontier_phi_55_56_ladder;
            _2458 = frontier_phi_55_56_ladder_1;
        }
        float _2463 = isnan(1.0) ? _486 : (isnan(_486) ? 1.0 : min(_486, 1.0));
        _2200 = (_2463 * _2454) + _1655;
        _2202 = (_2463 * _2456) + _1657;
        _2204 = (_2463 * _2458) + _1659;
        _2206 = ((_2448 * 0.039999999105930328369140625) * _2463) + _1985;
        _2208 = ((_2450 * 0.039999999105930328369140625) * _2463) + _1987;
        _2210 = ((_2452 * 0.039999999105930328369140625) * _2463) + _1989;
    }
    else
    {
        _2200 = _1655;
        _2202 = _1657;
        _2204 = _1659;
        _2206 = _1985;
        _2208 = _1987;
        _2210 = _1989;
    }
    uint _2216 = _462 + uint(cbMatDynParam._m0[0u].w);
    float _2225 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _298.x) * _318) * cbInstanceData._m0[_2216].x;
    float _2229 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _298.y) * _318) * cbInstanceData._m0[_2216].y;
    float _2233 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _298.z) * _318) * cbInstanceData._m0[_2216].z;
    float _4092 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _4103 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _4114 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _2250 = (((isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_2200 + ((isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0))) * _486))) + ((_2206 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _1292)) * cbPerFrame._m0[3u].x)) + _2225;
    float _2252 = (_2229 + ((_2208 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _1292)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_2202 + ((isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0))) * _486)));
    float _2254 = (_2233 + ((_2210 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _1292)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_2204 + ((isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))) * _486)));
    float _4140 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2267 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    uint _2268 = _461 + 6u;
    float _2276 = _420 / cbSceneParam._m0[86u].x;
    float _2277 = _421 / cbSceneParam._m0[86u].y;
    vec4 _2291 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2276, _2277, (log2((isnan(cbSceneParam._m0[77u].w) ? _354 : (isnan(_354) ? cbSceneParam._m0[77u].w : min(_354, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2293 = _2291.x;
    float _2294 = _2291.y;
    float _2295 = _2291.z;
    float _2296 = _2291.w;
    float _2389;
    float _2391;
    float _2393;
    float _2395;
    if (_354 > cbSceneParam._m0[78u].w)
    {
        float _2351 = isnan(_354) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _354 : min(cbSceneParam._m0[80u].w, _354));
        float _2352 = _2351 / _354;
        float _2363 = _2352 * _405;
        float _2364 = _406 * _2352;
        float _2365 = (-0.0) - _2364;
        float _2367 = _2352 * _407;
        float _2369 = (cbSceneParam._m0[77u].w * _2365) / _2351;
        float _2370 = _2369 + cbSceneParam._m0[79u].w;
        float _2371 = cbSceneParam._m0[79u].w - _2364;
        float _2377 = sqrt(((_2363 * _2363) + (_2364 * _2364)) + (_2367 * _2367));
        float _2380 = (1.0 - (cbSceneParam._m0[77u].w / _2351)) * _2377;
        float _2385 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2387 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2549;
        if (abs((_2365 - _2369) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2549 = ((((_2370 > 0.0) ? exp2(_2385 * _2370) : (2.0 - exp2(_2387 * _2370))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2380;
        }
        else
        {
            float _2509 = 1.0 / cbSceneParam._m0[80u].x;
            float _2510 = isnan(_2371) ? _2370 : (isnan(_2370) ? _2371 : max(_2370, _2371));
            float _2511 = isnan(_2371) ? _2370 : (isnan(_2370) ? _2371 : min(_2370, _2371));
            float _2520 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : min(_2510, 0.0));
            float _2521 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : min(_2511, 0.0));
            _2549 = ((abs(_2377 / _2365) * cbSceneParam._m0[80u].y) * ((((_2520 - _2521) * 2.0) - ((exp2(_2385 * (isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0)))) - exp2(_2385 * (isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0))))) * _2509)) - ((exp2(_2387 * _2520) - exp2(_2387 * _2521)) * _2509))) + (_2380 * cbSceneParam._m0[80u].z);
        }
        vec4 _2551 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2276, _2277, 1.0), 0.0);
        float _2560 = exp2((_2549 * (-1.44269502162933349609375)) * (1.0 - _2551.w));
        float _2561 = log2(_2560);
        float _2577 = log2(_2296);
        _2389 = (exp2(_2577 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2561 * cbSceneParam._m0[78u].x)) * _2551.x) / cbSceneParam._m0[78u].x)) + _2293;
        _2391 = (exp2(_2577 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2561 * cbSceneParam._m0[78u].y)) * _2551.y) / cbSceneParam._m0[78u].y)) + _2294;
        _2393 = (exp2(_2577 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2561 * cbSceneParam._m0[78u].z)) * _2551.z) / cbSceneParam._m0[78u].z)) + _2295;
        _2395 = _2560 * _2296;
    }
    else
    {
        _2389 = _2293;
        _2391 = _2294;
        _2393 = _2295;
        _2395 = _2296;
    }
    float _2407 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2408 = _2407 == 3.0;
    float _2409 = log2(_2395);
    float _2413 = exp2(_2409 * cbSceneParam._m0[78u].x);
    float _2414 = exp2(_2409 * cbSceneParam._m0[78u].y);
    float _2415 = exp2(_2409 * cbSceneParam._m0[78u].z);
    float _2416 = _2413 * (isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0)));
    float _2417 = _2414 * (isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0)));
    float _2418 = _2415 * (isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0)));
    float _2427 = (_2407 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2427 * (_2408 ? _2416 : (_2416 + (cbSceneParam._m0[72u].w * _2389)));
    SV_Target.y = _2427 * (_2408 ? _2417 : (_2417 + (cbSceneParam._m0[72u].w * _2391)));
    SV_Target.z = _2427 * (_2408 ? _2418 : (_2418 + (cbSceneParam._m0[72u].w * _2393)));
    SV_Target.w = cbInstanceData._m0[_2268].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2225) * _2267) * _2413) * _2427;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2229) * _2267) * _2414) * _2427;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2233) * _2267) * _2415) * _2427;
    SV_Target_1.w = cbInstanceData._m0[_2268].w;
}


