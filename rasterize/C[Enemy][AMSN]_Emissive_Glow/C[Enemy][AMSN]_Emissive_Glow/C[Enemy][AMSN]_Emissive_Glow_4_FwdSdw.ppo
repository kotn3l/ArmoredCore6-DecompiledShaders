#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _881;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _230 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _236 = _230.x * cbMtdParam._m0[9u].x;
    float _237 = _230.y * cbMtdParam._m0[9u].y;
    float _238 = _230.z * cbMtdParam._m0[9u].z;
    vec4 _250 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _252 = _250.x;
    vec4 _264 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _268 = _264.z;
    float _272 = (_264.x * 2.0) + (-1.0);
    float _274 = (_264.y * 2.0) + (-1.0);
    float _275 = dot(vec2(_272, _274), vec2(_272, _274));
    float _3542 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _281 = sqrt(1.0 - (isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))));
    vec4 _318 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _325 = fma(_281, _201 * NORMAL.x, fma(_274, _208 * TANGENT.x, (_194 * _187) * _272));
    float _328 = fma(_281, _201 * NORMAL.y, fma(_274, _208 * TANGENT.y, (_194 * _188) * _272));
    float _331 = fma(_281, _201 * NORMAL.z, fma(_274, _208 * TANGENT.z, (_194 * _189) * _272));
    float _335 = inversesqrt(dot(vec3(_325, _328, _331), vec3(_325, _328, _331)));
    float _336 = _335 * _325;
    float _337 = _335 * _328;
    float _338 = _335 * _331;
    float _3553 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _339 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
    float _3564 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3575 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3586 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3597 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _343 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _359 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _400 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _410 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _400);
    float _411 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _400);
    float _412 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _400);
    float _416 = inversesqrt(dot(vec3(_410, _411, _412), vec3(_410, _411, _412)));
    float _417 = _410 * _416;
    float _418 = _411 * _416;
    float _419 = _412 * _416;
    float _425 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _426 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _447 = fma(_338, cbSceneParam._m0[5u].z, fma(_337, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _336));
    float _450 = fma(_338, cbSceneParam._m0[6u].z, fma(_337, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _336));
    float _453 = fma(_338, cbSceneParam._m0[7u].z, fma(_337, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _336));
    uint _466 = uint(roundEven(NORMAL.w)) * 13u;
    uint _467 = _466 + 9u;
    uint _468 = _467 + uint(cbMatDynParam._m0[0u].w);
    float _474 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0)))) * cbInstanceData._m0[_468].x;
    float _475 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0)))) * cbInstanceData._m0[_468].y;
    float _476 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0)))) * cbInstanceData._m0[_468].z;
    float _3608 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _3619 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _478 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    float _3630 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    float _480 = 1.0 - _343;
    float _481 = _477 * _480;
    float _482 = _478 * _480;
    float _483 = _479 * _480;
    float _488 = (_477 + (-0.039999999105930328369140625)) * _343;
    float _489 = (_478 + (-0.039999999105930328369140625)) * _343;
    float _490 = (_479 + (-0.039999999105930328369140625)) * _343;
    float _491 = _488 + 0.039999999105930328369140625;
    float _493 = _489 + 0.039999999105930328369140625;
    float _494 = _490 + 0.039999999105930328369140625;
    vec4 _503 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _425, cbSceneParam._m0[86u].y * _426));
    float _506 = _503.x * TEXCOORD.z;
    float _507 = dot(vec3(_336, _337, _338), vec3(_417, _418, _419));
    float _510 = _507 * 2.0;
    float _514 = (_510 * _336) - _417;
    float _515 = (_510 * _337) - _418;
    float _516 = (_510 * _338) - _419;
    float _520 = abs(dot(vec3(_417, _418, _419), vec3(_336, _337, _338)));
    float _3641 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _522 = sqrt(_339);
    float _535 = exp2((_522 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_522 * 3.0));
    float _541 = (1.0 - _535) * ((_522 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _542 = _535 * _522;
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _880;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _605 = fma(_578, cbModelParam._m0[26u].z, fma(_574, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _570));
        float _609 = fma(_578, cbModelParam._m0[27u].z, fma(_574, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _570));
        float _613 = fma(_578, cbModelParam._m0[28u].z, fma(_574, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _570));
        float _638 = _570 + _336;
        float _639 = _574 + _337;
        float _640 = _578 + _338;
        float _650 = fma(_640, cbModelParam._m0[26u].z, fma(_639, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _638)) - _605;
        float _651 = fma(_640, cbModelParam._m0[27u].z, fma(_639, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _638)) - _609;
        float _652 = fma(_640, cbModelParam._m0[28u].z, fma(_639, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _638)) - _613;
        float _656 = inversesqrt(dot(vec3(_650, _651, _652), vec3(_650, _651, _652)));
        float _669 = ((_656 * _650) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_605 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _670 = ((_656 * _651) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_609 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _671 = ((_656 * _652) / cbModelParam._m0[34u].z) + ((((((_613 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _674 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _681 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        float _708 = exp2((_674.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _708 * (_674.x + (-0.5));
        float _710 = _708 * (_674.y + (-0.5));
        float _711 = _708 * (_674.z + (-0.5));
        float _718 = exp2((_681.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_681.x + (-0.5));
        float _720 = _718 * (_681.y + (-0.5));
        float _721 = _718 * (_681.z + (-0.5));
        float _728 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_688.x + (-0.5));
        float _730 = _728 * (_688.y + (-0.5));
        float _731 = _728 * (_688.z + (-0.5));
        float _738 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_695.x + (-0.5));
        float _740 = _738 * (_695.y + (-0.5));
        float _741 = _738 * (_695.z + (-0.5));
        float _742 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _743 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _744 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _745 = _709 * 0.5;
        float _746 = _719 * 0.5;
        float _747 = _729 * 0.5;
        float _748 = dot(vec3(_745, _746, _747), vec3(_745, _746, _747));
        float _753 = (_748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_748);
        float _762 = (dot(vec3(_336, _337, _338), vec3(_753 * _745, _753 * _746, _753 * _747)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _772 = sqrt(((_746 * _746) + (_745 * _745)) + (_747 * _747)) / (_742 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _774 = _773 * 2.0;
        float _778 = (1.0 - _773) / (_773 + 1.0);
        float _3689 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _788 = ((((1.0 - _779) * (_774 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_774 + 1.0))) + _779) * _742;
        float _789 = _710 * 0.5;
        float _790 = _720 * 0.5;
        float _791 = _730 * 0.5;
        float _792 = dot(vec3(_789, _790, _791), vec3(_789, _790, _791));
        float _797 = (_792 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_792);
        float _805 = (dot(vec3(_336, _337, _338), vec3(_797 * _789, _797 * _790, _797 * _791)) + 1.0) * 0.5;
        float _3700 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _814 = sqrt(((_790 * _790) + (_789 * _789)) + (_791 * _791)) / (_743 + 9.9999997473787516355514526367188e-06);
        float _3711 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _816 = _815 * 2.0;
        float _820 = (1.0 - _815) / (_815 + 1.0);
        float _3722 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _830 = ((((1.0 - _821) * (_816 + 2.0)) * exp2(log2(isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_816 + 1.0))) + _821) * _743;
        float _831 = _711 * 0.5;
        float _832 = _721 * 0.5;
        float _833 = _731 * 0.5;
        float _834 = dot(vec3(_831, _832, _833), vec3(_831, _832, _833));
        float _839 = (_834 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_834);
        float _847 = (dot(vec3(_336, _337, _338), vec3(_839 * _831, _839 * _832, _839 * _833)) + 1.0) * 0.5;
        float _3733 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _856 = sqrt(((_832 * _832) + (_831 * _831)) + (_833 * _833)) / (_744 + 9.9999997473787516355514526367188e-06);
        float _3744 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _858 = _857 * 2.0;
        float _862 = (1.0 - _857) / (_857 + 1.0);
        float _3755 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _872 = ((((1.0 - _863) * (_858 + 2.0)) * exp2(log2(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_858 + 1.0))) + _863) * _744;
        _880 = _711;
        _882 = _710;
        _883 = _709;
        _884 = _721;
        _885 = _720;
        _886 = _719;
        _887 = _731;
        _888 = _730;
        _889 = _729;
        _890 = _744;
        _891 = _743;
        _892 = _742;
        _893 = cbModelParam._m0[36u].z * (isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0)));
        _894 = cbModelParam._m0[36u].z * (isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0)));
        _895 = cbModelParam._m0[36u].z * (isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0)));
    }
    else
    {
        _880 = _881;
        _882 = _881;
        _883 = _881;
        _884 = _881;
        _885 = _881;
        _886 = _881;
        _887 = _881;
        _888 = _881;
        _889 = _881;
        _890 = _881;
        _891 = _881;
        _892 = _881;
        _893 = 0.0;
        _894 = 0.0;
        _895 = 0.0;
    }
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _921 = fma(_578, cbModelParam._m0[30u].z, fma(_574, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _570));
        float _925 = fma(_578, cbModelParam._m0[31u].z, fma(_574, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _570));
        float _929 = fma(_578, cbModelParam._m0[32u].z, fma(_574, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _570));
        float _952 = _570 + _336;
        float _953 = _574 + _337;
        float _954 = _578 + _338;
        float _964 = fma(_954, cbModelParam._m0[30u].z, fma(_953, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _952)) - _921;
        float _965 = fma(_954, cbModelParam._m0[31u].z, fma(_953, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _952)) - _925;
        float _966 = fma(_954, cbModelParam._m0[32u].z, fma(_953, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _952)) - _929;
        float _970 = inversesqrt(dot(vec3(_964, _965, _966), vec3(_964, _965, _966)));
        float _983 = ((_970 * _964) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_921 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _984 = ((_970 * _965) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_925 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_970 * _966) / cbModelParam._m0[35u].z) + ((((((_929 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        float _1020 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_987.x + (-0.5));
        float _1022 = _1020 * (_987.y + (-0.5));
        float _1023 = _1020 * (_987.z + (-0.5));
        float _1030 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_994.x + (-0.5));
        float _1032 = _1030 * (_994.y + (-0.5));
        float _1033 = _1030 * (_994.z + (-0.5));
        float _1040 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1001.x + (-0.5));
        float _1042 = _1040 * (_1001.y + (-0.5));
        float _1043 = _1040 * (_1001.z + (-0.5));
        float _1050 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1008.x + (-0.5));
        float _1052 = _1050 * (_1008.y + (-0.5));
        float _1053 = _1050 * (_1008.z + (-0.5));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = _1021 * 0.5;
        float _1058 = _1031 * 0.5;
        float _1059 = _1041 * 0.5;
        float _1060 = dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059));
        float _1065 = (_1060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1060);
        float _1073 = (dot(vec3(_336, _337, _338), vec3(_1065 * _1057, _1065 * _1058, _1065 * _1059)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1082 = sqrt(((_1058 * _1058) + (_1057 * _1057)) + (_1059 * _1059)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1084 = _1083 * 2.0;
        float _1088 = (1.0 - _1083) / (_1083 + 1.0);
        float _3818 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1098 = ((((1.0 - _1089) * (_1084 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1084 + 1.0))) + _1089) * _1054;
        float _1099 = _1022 * 0.5;
        float _1100 = _1032 * 0.5;
        float _1101 = _1042 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1115 = (dot(vec3(_336, _337, _338), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1124 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _3851 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1126 + 1.0))) + _1131) * _1055;
        float _1141 = _1023 * 0.5;
        float _1142 = _1033 * 0.5;
        float _1143 = _1043 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_336, _337, _338), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _3884 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1168 + 1.0))) + _1173) * _1056;
        _1190 = _1023;
        _1191 = _1022;
        _1192 = _1021;
        _1193 = _1033;
        _1194 = _1032;
        _1195 = _1031;
        _1196 = _1043;
        _1197 = _1042;
        _1198 = _1041;
        _1199 = _1056;
        _1200 = _1055;
        _1201 = _1054;
        _1202 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)));
        _1203 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
        _1204 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
    }
    else
    {
        _1190 = _881;
        _1191 = _881;
        _1192 = _881;
        _1193 = _881;
        _1194 = _881;
        _1195 = _881;
        _1196 = _881;
        _1197 = _881;
        _1198 = _881;
        _1199 = _881;
        _1200 = _881;
        _1201 = _881;
        _1202 = 0.0;
        _1203 = 0.0;
        _1204 = 0.0;
    }
    float _1214 = (cbModelParam._m0[1u].x * (_1202 - _893)) + _893;
    float _1215 = (cbModelParam._m0[1u].x * (_1203 - _894)) + _894;
    float _1216 = (cbModelParam._m0[1u].x * (_1204 - _895)) + _895;
    float _1237 = fma(_1216, cbSceneParam._m0[89u].z, fma(_1215, cbSceneParam._m0[89u].y, _1214 * cbSceneParam._m0[89u].x));
    float _1240 = fma(_1216, cbSceneParam._m0[90u].z, fma(_1215, cbSceneParam._m0[90u].y, _1214 * cbSceneParam._m0[90u].x));
    float _1243 = fma(_1216, cbSceneParam._m0[91u].z, fma(_1215, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1214));
    float _1258 = _514 * 0.5;
    float _1259 = _515 * 0.5;
    float _1260 = _516 * 0.5;
    float _1261 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_1192, _1195, _1198, _1201));
    float _1264 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_1191, _1194, _1197, _1200));
    float _1267 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_1190, _1193, _1196, _1199));
    float _1301;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1274 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_880, _884, _887, _890));
        float _1278 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_882, _885, _888, _891));
        float _1282 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_883, _886, _889, _892));
        float _1289 = dot(vec4(cbModelParam._m0[39u]), vec4(_1258, _1259, _1260, 1.0));
        _1301 = dot(vec3(isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)), isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)), isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1289) ? 0.0 : (isnan(0.0) ? _1289 : max(0.0, _1289))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1301 = 1.0;
    }
    float _1312;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1303 = dot(vec4(cbModelParam._m0[40u]), vec4(_1258, _1259, _1260, 1.0));
        _1312 = dot(vec3(isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1303) ? 0.0 : (isnan(0.0) ? _1303 : max(0.0, _1303))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1312 = 1.0;
    }
    float _1316 = (_1312 * cbModelParam._m0[1u].x) + (_1301 * (1.0 - cbModelParam._m0[1u].x));
    float _1326 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _339);
    float _1327 = isnan(_1326) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1326 : min(cbModelParam._m0[25u].z, _1326));
    float _1408;
    float _1410;
    float _1412;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1375 = fma(_578, cbModelParam._m0[13u].z, fma(_574, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _570)) + cbModelParam._m0[13u].w;
        float _1379 = fma(_578, cbModelParam._m0[14u].z, fma(_574, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _570)) + cbModelParam._m0[14u].w;
        float _1383 = fma(_578, cbModelParam._m0[15u].z, fma(_574, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _570)) + cbModelParam._m0[15u].w;
        float _1386 = fma(_516, cbModelParam._m0[13u].z, fma(_515, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _514));
        float _1389 = fma(_516, cbModelParam._m0[14u].z, fma(_515, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _514));
        float _1392 = fma(_516, cbModelParam._m0[15u].z, fma(_515, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _514));
        float _1420;
        if (_1386 > 0.0)
        {
            _1420 = abs((1.0 - _1375) / _1386);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1386 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1375 + 1.0) / _1386);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1420 = frontier_phi_14_12_ladder;
        }
        float _1594;
        if (_1389 > 0.0)
        {
            _1594 = abs((1.0 - _1379) / _1389);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1389 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1379 + 1.0) / _1389);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1594 = frontier_phi_23_19_ladder;
        }
        float _1890;
        if (_1392 > 0.0)
        {
            _1890 = abs((1.0 - _1383) / _1392);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1392 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1383 + 1.0) / _1392);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1890 = frontier_phi_35_30_ladder;
        }
        float _1892 = isnan(_1594) ? _1420 : (isnan(_1420) ? _1594 : min(_1420, _1594));
        float _1893 = isnan(_1890) ? _1892 : (isnan(_1892) ? _1890 : min(_1892, _1890));
        float _1897 = (_1893 * _1386) + _1375;
        float _1898 = (_1893 * _1389) + _1379;
        float _1899 = (_1893 * _1392) + _1383;
        float _1900 = _1893 * 9.9999997473787516355514526367188e-05;
        float _1902 = (-1.0) - _1900;
        float _1904 = _1900 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1899 > _1904) || ((_1899 < _1902) || ((_1898 > _1904) || ((_1898 < _1902) || ((_1897 < _1902) || (_1897 > _1904))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2044 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1899, cbModelParam._m0[9u].z, fma(_1898, cbModelParam._m0[9u].y, _1897 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1899, cbModelParam._m0[10u].z, fma(_1898, cbModelParam._m0[10u].y, _1897 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1899, cbModelParam._m0[11u].z, fma(_1898, cbModelParam._m0[11u].y, _1897 * cbModelParam._m0[11u].x))), _1327);
            frontier_phi_13_35_ladder = _2044.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2044.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2044.x * cbModelParam._m0[1u].y;
        }
        _1408 = frontier_phi_13_35_ladder_2;
        _1410 = frontier_phi_13_35_ladder_1;
        _1412 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1396 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_514, _515, _516), _1327);
        _1408 = _1396.x * cbModelParam._m0[1u].y;
        _1410 = _1396.y * cbModelParam._m0[1u].y;
        _1412 = _1396.z * cbModelParam._m0[1u].y;
    }
    float _1416 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _339);
    float _1417 = isnan(_1416) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1416 : min(cbModelParam._m0[25u].w, _1416));
    float _1509;
    float _1511;
    float _1513;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1473 = fma(_578, cbModelParam._m0[21u].z, fma(_574, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _570)) + cbModelParam._m0[21u].w;
        float _1477 = fma(_578, cbModelParam._m0[22u].z, fma(_574, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _570)) + cbModelParam._m0[22u].w;
        float _1481 = fma(_578, cbModelParam._m0[23u].z, fma(_574, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _570)) + cbModelParam._m0[23u].w;
        float _1484 = fma(_516, cbModelParam._m0[21u].z, fma(_515, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _514));
        float _1487 = fma(_516, cbModelParam._m0[22u].z, fma(_515, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _514));
        float _1490 = fma(_516, cbModelParam._m0[23u].z, fma(_515, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _514));
        float _1599;
        if (_1484 > 0.0)
        {
            _1599 = abs((1.0 - _1473) / _1484);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1473 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1599 = frontier_phi_25_21_ladder;
        }
        float _1917;
        if (_1487 > 0.0)
        {
            _1917 = abs((1.0 - _1477) / _1487);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1477 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1917 = frontier_phi_37_32_ladder;
        }
        float _2255;
        if (_1490 > 0.0)
        {
            _2255 = abs((1.0 - _1481) / _1490);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1481 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2255 = frontier_phi_47_44_ladder;
        }
        float _2257 = isnan(_1917) ? _1599 : (isnan(_1599) ? _1917 : min(_1599, _1917));
        float _2258 = isnan(_2255) ? _2257 : (isnan(_2257) ? _2255 : min(_2257, _2255));
        float _2262 = (_2258 * _1484) + _1473;
        float _2263 = (_2258 * _1487) + _1477;
        float _2264 = (_2258 * _1490) + _1481;
        float _2265 = _2258 * 9.9999997473787516355514526367188e-05;
        float _2266 = (-1.0) - _2265;
        float _2268 = _2265 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2264 > _2268) || ((_2264 < _2266) || ((_2263 > _2268) || ((_2263 < _2266) || ((_2262 < _2266) || (_2262 > _2268))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2386 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2264, cbModelParam._m0[17u].z, fma(_2263, cbModelParam._m0[17u].y, _2262 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2264, cbModelParam._m0[18u].z, fma(_2263, cbModelParam._m0[18u].y, _2262 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2264, cbModelParam._m0[19u].z, fma(_2263, cbModelParam._m0[19u].y, _2262 * cbModelParam._m0[19u].x))), _1417);
            frontier_phi_22_47_ladder = _2386.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2386.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2386.x * cbModelParam._m0[1u].z;
        }
        _1509 = frontier_phi_22_47_ladder_2;
        _1511 = frontier_phi_22_47_ladder_1;
        _1513 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1493 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_514, _515, _516), _1417);
        _1509 = _1493.x * cbModelParam._m0[1u].z;
        _1511 = _1493.y * cbModelParam._m0[1u].z;
        _1513 = _1493.z * cbModelParam._m0[1u].z;
    }
    float _1526 = (((_541 * _491) + _542) * _506) * ((cbModelParam._m0[1u].w * (_1509 - _1408)) + _1408);
    float _1528 = (((_541 * _493) + _542) * _506) * ((cbModelParam._m0[1u].w * (_1511 - _1410)) + _1410);
    float _1530 = (((_541 * _494) + _542) * _506) * ((cbModelParam._m0[1u].w * (_1513 - _1412)) + _1412);
    float _1533 = fma(_1530, cbSceneParam._m0[89u].z, fma(_1528, cbSceneParam._m0[89u].y, _1526 * cbSceneParam._m0[89u].x));
    float _1536 = fma(_1530, cbSceneParam._m0[90u].z, fma(_1528, cbSceneParam._m0[90u].y, _1526 * cbSceneParam._m0[90u].x));
    float _1539 = fma(_1530, cbSceneParam._m0[91u].z, fma(_1528, cbSceneParam._m0[91u].y, _1526 * cbSceneParam._m0[91u].x));
    float _1573 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1577 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1581 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1585 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1586 = _1573 / _1585;
    float _1587 = _1577 / _1585;
    float _1588 = _1581 / _1585;
    float _1735;
    float _1736;
    float _1737;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1615 = ((uint(_1588 > cbSceneParam._m0[59u].y) + uint(_1588 > cbSceneParam._m0[59u].x)) + uint(_1588 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1616 = _1615 + 43u;
        uint _1624 = _1615 + 44u;
        uint _1632 = _1615 + 45u;
        uint _1640 = _1615 + 46u;
        float _1651 = fma(_1585, cbSceneParam._m0[_1616].w, fma(_1581, cbSceneParam._m0[_1616].z, fma(_1577, cbSceneParam._m0[_1616].y, _1573 * cbSceneParam._m0[_1616].x)));
        float _1655 = fma(_1585, cbSceneParam._m0[_1624].w, fma(_1581, cbSceneParam._m0[_1624].z, fma(_1577, cbSceneParam._m0[_1624].y, _1573 * cbSceneParam._m0[_1624].x)));
        float _1663 = fma(_1585, cbSceneParam._m0[_1640].w, fma(_1581, cbSceneParam._m0[_1640].z, fma(_1577, cbSceneParam._m0[_1640].y, _1573 * cbSceneParam._m0[_1640].x)));
        float _1668 = cbSceneParam._m0[33u].z * _1663;
        float _1670 = cbSceneParam._m0[33u].w * _1663;
        float _1673 = fma(_1585, cbSceneParam._m0[_1632].w, fma(_1581, cbSceneParam._m0[_1632].z, fma(_1577, cbSceneParam._m0[_1632].y, _1573 * cbSceneParam._m0[_1632].x))) / _1663;
        float _1721 = (cbSceneParam._m0[33u].x - sqrt(((_1587 * _1587) + (_1586 * _1586)) + (_1588 * _1588))) * cbSceneParam._m0[33u].y;
        float _4010 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1728 = (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1668 + _1651) / _1663, (_1670 + _1655) / _1663), _1673), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1670 + _1651) / _1663, (_1655 - _1668) / _1663), _1673), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1651 - _1668) / _1663, (_1655 - _1670) / _1663), _1673), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1651 - _1670) / _1663, (_1668 + _1655) / _1663), _1673), 0.0)).x), vec4(0.25)));
        _1735 = 1.0 - (_1728 * cbSceneParam._m0[34u].x);
        _1736 = 1.0 - (_1728 * cbSceneParam._m0[34u].y);
        _1737 = 1.0 - (_1728 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1735 = 1.0;
        _1736 = 1.0;
        _1737 = 1.0;
    }
    float _1801;
    float _1803;
    float _1805;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1789 = fma(_1585, cbSceneParam._m0[63u].w, fma(_1581, cbSceneParam._m0[63u].z, fma(_1577, cbSceneParam._m0[63u].y, _1573 * cbSceneParam._m0[63u].x)));
        float _1790 = fma(_1585, cbSceneParam._m0[60u].w, fma(_1581, cbSceneParam._m0[60u].z, fma(_1577, cbSceneParam._m0[60u].y, _1573 * cbSceneParam._m0[60u].x))) / _1789;
        float _1791 = fma(_1585, cbSceneParam._m0[61u].w, fma(_1581, cbSceneParam._m0[61u].z, fma(_1577, cbSceneParam._m0[61u].y, _1573 * cbSceneParam._m0[61u].x))) / _1789;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1790 >= cbSceneParam._m0[64u].x) && (_1791 >= cbSceneParam._m0[64u].y)) && (_1790 <= cbSceneParam._m0[64u].z)) && (_1791 <= cbSceneParam._m0[64u].w))
        {
            float _1930 = fma(_1585, cbSceneParam._m0[62u].w, fma(_1581, cbSceneParam._m0[62u].z, fma(_1577, cbSceneParam._m0[62u].y, _1573 * cbSceneParam._m0[62u].x))) / _1789;
            float _1934 = isnan(cbSceneParam._m0[41u].w) ? _1930 : (isnan(_1930) ? cbSceneParam._m0[41u].w : max(_1930, cbSceneParam._m0[41u].w));
            float _1977 = (cbSceneParam._m0[33u].x - sqrt(((_1587 * _1587) + (_1586 * _1586)) + (_1588 * _1588))) * cbSceneParam._m0[33u].y;
            float _4026 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
            float _1984 = (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1790, cbSceneParam._m0[33u].w + _1791), _1934), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1790, _1791 - cbSceneParam._m0[33u].z), _1934), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1790 - cbSceneParam._m0[33u].z, _1791 - cbSceneParam._m0[33u].w), _1934), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1790 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1791), _1934), 0.0)).x), vec4(0.25)));
            float _1988 = 1.0 - (_1984 * cbSceneParam._m0[34u].x);
            float _1989 = 1.0 - (_1984 * cbSceneParam._m0[34u].y);
            float _1990 = 1.0 - (_1984 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1990) ? _1737 : (isnan(_1737) ? _1990 : min(_1737, _1990));
            frontier_phi_34_33_ladder_1 = isnan(_1989) ? _1736 : (isnan(_1736) ? _1989 : min(_1736, _1989));
            frontier_phi_34_33_ladder_2 = isnan(_1988) ? _1735 : (isnan(_1735) ? _1988 : min(_1735, _1988));
        }
        else
        {
            frontier_phi_34_33_ladder = _1737;
            frontier_phi_34_33_ladder_1 = _1736;
            frontier_phi_34_33_ladder_2 = _1735;
        }
        _1801 = frontier_phi_34_33_ladder_2;
        _1803 = frontier_phi_34_33_ladder_1;
        _1805 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1801 = _1735;
        _1803 = _1736;
        _1805 = _1737;
    }
    uvec4 _1810 = floatBitsToUint(cbInstanceData._m0[_466 + 5u]);
    uint _1812 = _1810.x * 14u;
    uint _1813 = _1812 + 13u;
    float _1820 = _506 + (-1.0);
    float _1825 = (cbLight._m0[_1813].x * _1820) + 1.0;
    float _1826 = (cbLight._m0[_1813].y * _1820) + 1.0;
    float _1827 = (cbLight._m0[_1813].z * _1820) + 1.0;
    float _1828 = (cbLight._m0[_1813].w * _1820) + 1.0;
    uint _1829 = _1812 + 5u;
    float _1835 = isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0));
    uint _1839 = _1812 + 4u;
    float _1849 = isnan(1.0) ? _1825 : (isnan(_1825) ? 1.0 : min(_1825, 1.0));
    uint _1853 = _1812 | 1u;
    float _1864 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_336, _337, _338));
    float _1867 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_336, _337, _338));
    float _4062 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _4073 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1872 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * 0.3183098733425140380859375;
    float _1874 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * 0.3183098733425140380859375;
    float _1881 = ((cbLight._m0[_1829].x * _1835) * _1874) + (((cbLight._m0[_1839].x * _1801) * _1849) * _1872);
    float _1882 = ((_1835 * cbLight._m0[_1829].y) * _1874) + (((cbLight._m0[_1839].y * _1803) * _1849) * _1872);
    float _1883 = ((_1835 * cbLight._m0[_1829].z) * _1874) + (((cbLight._m0[_1839].z * _1805) * _1849) * _1872);
    uvec4 _1887 = floatBitsToUint(cbLight._m0[_1812 + 12u]);
    bool _1889 = _1887.x == 0u;
    float _1991;
    float _1993;
    float _1995;
    if (_1889)
    {
        _1991 = _1881;
        _1993 = _1882;
        _1995 = _1883;
    }
    else
    {
        uint _1999 = _1812 + 6u;
        float _2015 = (dot(vec3(cbLight._m0[_1812 + 2u].xyz), vec3(_336, _337, _338)) * 0.5) + 0.5;
        float _2016 = _2015 * _2015;
        float _4084 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2017 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2018 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _1991 = (((cbLight._m0[_1999].x * 0.3183098733425140380859375) * _2017) * _2018) + _1881;
        _1993 = (((cbLight._m0[_1999].y * 0.3183098733425140380859375) * _2017) * _2018) + _1882;
        _1995 = (((cbLight._m0[_1999].z * 0.3183098733425140380859375) * _2017) * _2018) + _1883;
    }
    bool _1998 = _1887.y == 0u;
    float _2053;
    float _2055;
    float _2057;
    if (_1998)
    {
        _2053 = _1991;
        _2055 = _1993;
        _2057 = _1995;
    }
    else
    {
        uint _2226 = _1812 + 7u;
        float _2242 = (dot(vec3(cbLight._m0[_1812 + 3u].xyz), vec3(_336, _337, _338)) * 0.5) + 0.5;
        float _2243 = _2242 * _2242;
        float _4100 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2244 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _2245 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
        _2053 = (((cbLight._m0[_2226].x * 0.3183098733425140380859375) * _2244) * _2245) + _1991;
        _2055 = (((cbLight._m0[_2226].y * 0.3183098733425140380859375) * _2244) * _2245) + _1993;
        _2057 = (((cbLight._m0[_2226].z * 0.3183098733425140380859375) * _2244) * _2245) + _1995;
    }
    uint _2060 = _1812 + 8u;
    float _2073 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1812].w)) * _339) * 0.949999988079071044921875);
    float _2074 = _2073 * _2073;
    float _2075 = cbLight._m0[_1812].x + _417;
    float _2076 = cbLight._m0[_1812].y + _418;
    float _2077 = cbLight._m0[_1812].z + _419;
    float _2081 = inversesqrt(dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077)));
    float _2082 = _2081 * _2075;
    float _2083 = _2081 * _2076;
    float _2084 = _2081 * _2077;
    float _2085 = dot(vec3(_336, _337, _338), vec3(cbLight._m0[_1812].xyz));
    float _4116 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _4127 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _2089 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _2090 = dot(vec3(_336, _337, _338), vec3(_2082, _2083, _2084));
    float _4138 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2093 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _2094 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_2082, _2083, _2084));
    float _4149 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2098 = _2074 * _2074;
    float _2102 = ((_2093 * _2093) * (_2098 + (-1.0))) + 1.0;
    float _2110 = exp2(log2(1.0 - (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * 5.0);
    float _2111 = 0.959999978542327880859375 - _488;
    float _2113 = 0.959999978542327880859375 - _489;
    float _2114 = 0.959999978542327880859375 - _490;
    float _2121 = 1.0 - _2074;
    float _2132 = (0.5 / (((_2089 * ((_2088 * _2121) + _2074)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2121) + _2074) * _2088))) * _2088;
    float _4160 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2134 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_2098 / ((_2102 * _2102) * 3.141590118408203125));
    uint _2148 = _1812 + 9u;
    float _2159 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1853].w)) * _339) * 0.949999988079071044921875);
    float _2160 = _2159 * _2159;
    float _2161 = cbLight._m0[_1853].x + _417;
    float _2162 = cbLight._m0[_1853].y + _418;
    float _2163 = cbLight._m0[_1853].z + _419;
    float _2167 = inversesqrt(dot(vec3(_2161, _2162, _2163), vec3(_2161, _2162, _2163)));
    float _2168 = _2167 * _2161;
    float _2169 = _2167 * _2162;
    float _2170 = _2167 * _2163;
    float _2171 = dot(vec3(_336, _337, _338), vec3(cbLight._m0[_1853].xyz));
    float _4171 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2174 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _2175 = dot(vec3(_336, _337, _338), vec3(_2168, _2169, _2170));
    float _4182 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2178 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _2179 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_2168, _2169, _2170));
    float _4193 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2183 = _2160 * _2160;
    float _2187 = ((_2178 * _2178) * (_2183 + (-1.0))) + 1.0;
    float _2194 = exp2(log2(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * 5.0);
    float _2201 = 1.0 - _2160;
    float _2211 = (0.5 / (((_2089 * ((_2174 * _2201) + _2160)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2201) + _2160) * _2174))) * _2174;
    float _4204 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2213 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_2183 / ((_2187 * _2187) * 3.141590118408203125));
    float _2223 = (((((_2194 * _2111) + _491) * cbLight._m0[_2148].x) * _2213) * _1835) + ((((cbLight._m0[_2060].x * _1801) * ((_2110 * _2111) + _491)) * _2134) * _1849);
    float _2224 = (((((_2194 * _2113) + _493) * cbLight._m0[_2148].y) * _2213) * _1835) + ((((cbLight._m0[_2060].y * _1803) * ((_2110 * _2113) + _493)) * _2134) * _1849);
    float _2225 = (((((_2194 * _2114) + _494) * cbLight._m0[_2148].z) * _2213) * _1835) + ((((cbLight._m0[_2060].z * _1805) * ((_2110 * _2114) + _494)) * _2134) * _1849);
    float _2281;
    float _2283;
    float _2285;
    if (_1889)
    {
        _2281 = _2223;
        _2283 = _2224;
        _2285 = _2225;
    }
    else
    {
        uint _2287 = _1812 + 2u;
        uint _2291 = _1812 + 10u;
        float _2305 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2287].w)) * _339) * 0.949999988079071044921875);
        float _2306 = _2305 * _2305;
        float _2307 = cbLight._m0[_2287].x + _417;
        float _2308 = cbLight._m0[_2287].y + _418;
        float _2309 = cbLight._m0[_2287].z + _419;
        float _2313 = inversesqrt(dot(vec3(_2307, _2308, _2309), vec3(_2307, _2308, _2309)));
        float _2314 = _2313 * _2307;
        float _2315 = _2313 * _2308;
        float _2316 = _2313 * _2309;
        float _2317 = dot(vec3(_336, _337, _338), vec3(cbLight._m0[_2287].xyz));
        float _4215 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2320 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _2321 = dot(vec3(_336, _337, _338), vec3(_2314, _2315, _2316));
        float _4226 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2324 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _2325 = dot(vec3(cbLight._m0[_2287].xyz), vec3(_2314, _2315, _2316));
        float _4237 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2329 = _2306 * _2306;
        float _2333 = ((_2324 * _2324) * (_2329 + (-1.0))) + 1.0;
        float _2340 = exp2(log2(1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * 5.0);
        float _2347 = 1.0 - _2306;
        float _2357 = (0.5 / (((_2089 * ((_2320 * _2347) + _2306)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2347) + _2306) * _2320))) * _2320;
        float _4248 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2359 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_2329 / ((_2333 * _2333) * 3.141590118408203125));
        float _2360 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _2281 = (((((_2340 * _2111) + _491) * cbLight._m0[_2291].x) * _2359) * _2360) + _2223;
        _2283 = (((((_2340 * _2113) + _493) * cbLight._m0[_2291].y) * _2359) * _2360) + _2224;
        _2285 = (((((_2340 * _2114) + _494) * cbLight._m0[_2291].z) * _2359) * _2360) + _2225;
    }
    float _2391;
    float _2393;
    float _2395;
    if (_1998)
    {
        _2391 = _2281;
        _2393 = _2283;
        _2395 = _2285;
    }
    else
    {
        uint _2402 = _1812 + 3u;
        uint _2406 = _1812 + 11u;
        float _2420 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2402].w)) * _339) * 0.949999988079071044921875);
        float _2421 = _2420 * _2420;
        float _2422 = cbLight._m0[_2402].x + _417;
        float _2423 = cbLight._m0[_2402].y + _418;
        float _2424 = cbLight._m0[_2402].z + _419;
        float _2428 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
        float _2429 = _2428 * _2422;
        float _2430 = _2428 * _2423;
        float _2431 = _2428 * _2424;
        float _2432 = dot(vec3(_336, _337, _338), vec3(cbLight._m0[_2402].xyz));
        float _4264 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2435 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2436 = dot(vec3(_336, _337, _338), vec3(_2429, _2430, _2431));
        float _4275 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2439 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2440 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_2429, _2430, _2431));
        float _4286 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2444 = _2421 * _2421;
        float _2448 = ((_2439 * _2439) * (_2444 + (-1.0))) + 1.0;
        float _2455 = exp2(log2(1.0 - (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) * 5.0);
        float _2462 = 1.0 - _2421;
        float _2472 = (0.5 / (((_2089 * ((_2435 * _2462) + _2421)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2462) + _2421) * _2435))) * _2435;
        float _4297 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2474 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2444 / ((_2448 * _2448) * 3.141590118408203125));
        float _2475 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
        _2391 = (((((_2455 * _2111) + _491) * cbLight._m0[_2406].x) * _2474) * _2475) + _2281;
        _2393 = (((((_2455 * _2113) + _493) * cbLight._m0[_2406].y) * _2474) * _2475) + _2283;
        _2395 = (((((_2455 * _2114) + _494) * cbLight._m0[_2406].z) * _2474) * _2475) + _2285;
    }
    float _2541;
    float _2543;
    float _2545;
    float _2547;
    float _2549;
    float _2551;
    if (_1810.y == 0u)
    {
        uvec4 _2496 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2497 = _2496.x;
        uint _2508 = uint((float(_2496.y) * floor(float(uint(cbSceneParam._m0[85u].y * _426) / _2497))) + floor(float(uint(cbSceneParam._m0[85u].x * _425) / _2497)));
        float _2518 = (log2(_1588 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2519 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        uint _2522 = uint(isnan(14.0) ? _2519 : (isnan(_2519) ? 14.0 : min(_2519, 14.0)));
        uvec4 _2527 = texelFetch(g_lightClusterGridBuffer, int(((_2522 << 2u) + (_2508 << 6u)) >> 2u));
        uint _2528 = _2527.x;
        uint _2529 = _2496.z;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        if (((((1u << ((_2529 >> 4u) & 15u)) + 4294967295u) & _2528) == 0u) || ((_2529 & 240u) == 0u))
        {
            _2643 = 0.0;
            _2645 = 0.0;
            _2647 = 0.0;
            _2649 = 0.0;
            _2651 = 0.0;
            _2653 = 0.0;
        }
        else
        {
            float _2644;
            float _2646;
            float _2648;
            float _2650;
            float _2652;
            float _2654;
            float _2797 = 0.0;
            float _2798 = 0.0;
            float _2799 = 0.0;
            float _2800 = 0.0;
            float _2801 = 0.0;
            float _2802 = 0.0;
            uint _2803 = 0u;
            uint _2812;
            bool _2813;
            for (;;)
            {
                _2812 = texelFetch(g_lightClassification, int((((_2522 << 5u) + (_2508 << 9u)) + (_2803 << 2u)) >> 2u)).x;
                _2813 = _2812 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2813)
                {
                    frontier_phi_66_pred = _2802;
                    frontier_phi_66_pred_1 = _2801;
                    frontier_phi_66_pred_2 = _2800;
                    frontier_phi_66_pred_3 = _2799;
                    frontier_phi_66_pred_4 = _2798;
                    frontier_phi_66_pred_5 = _2797;
                }
                else
                {
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    uint _2927;
                    _2921 = _2797;
                    _2922 = _2798;
                    _2923 = _2799;
                    _2924 = _2800;
                    _2925 = _2801;
                    _2926 = _2802;
                    _2927 = _2812;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    for (;;)
                    {
                        uint _2931 = uint(findLSB(_2927)) + (_2803 << 5u);
                        uint _2928 = (_2927 + 4294967295u) & _2927;
                        uint _2933 = _2931 * 48u;
                        vec4 _2947 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2933)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 3u)).x));
                        uint _2953 = (_2931 * 48u) + 4u;
                        vec4 _2966 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2953)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 3u)).x));
                        uint _2972 = (_2931 * 48u) + 8u;
                        vec3 _2983 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2972)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 2u)).x));
                        float _2987 = _2947.x - _1586;
                        float _2988 = _2947.y - _1587;
                        float _2989 = _2947.z - _1588;
                        float _2990 = dot(vec3(_2987, _2988, _2989), vec3(_2987, _2988, _2989));
                        float _2993 = inversesqrt(_2990);
                        float _2994 = _2993 * _2987;
                        float _2995 = _2993 * _2988;
                        float _2996 = _2993 * _2989;
                        float _2997 = dot(vec3(_447, _450, _453), vec3(_2994, _2995, _2996));
                        float _3002 = 1.0 - (_2990 * _2947.w);
                        float _4323 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                        float _3003 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                        float _3004 = sqrt(_2990) * _2966.w;
                        float _3007 = 1.39999997615814208984375 / (_3004 + 1.39999997615814208984375);
                        float _3008 = _3007 * _3007;
                        float _3011 = ((1.0 - _3008) * _2997) + _3008;
                        float _3014 = _3004 * _3004;
                        float _3018 = ((isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0))) * _3003) / ((_3014 * 0.699999988079071044921875) + 1.0);
                        float _3022 = (-0.0) - _1586;
                        float _3023 = (-0.0) - _1587;
                        float _3024 = (-0.0) - _1588;
                        float _3028 = inversesqrt(dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024)));
                        float _3029 = _3028 * _3022;
                        float _3030 = _3028 * _3023;
                        float _3031 = _3028 * _3024;
                        float _3038 = exp2(log2(1.0 / ((_3014 * 3.5) + 5.0)) * 0.25);
                        float _3039 = 1.0 - _522;
                        float _3046 = sqrt(1.0 - ((1.0 - (_3039 * _3039)) * (1.0 - (_3038 * _3038))));
                        float _3047 = _3046 * _3046;
                        float _3048 = _3047 * _3047;
                        float _3049 = _3029 + _2994;
                        float _3050 = _3030 + _2995;
                        float _3051 = _3031 + _2996;
                        float _3055 = inversesqrt(dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051)));
                        float _3059 = dot(vec3(_447, _450, _453), vec3(_3029, _3030, _3031));
                        float _4339 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                        float _3062 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                        float _3063 = dot(vec3(_447, _450, _453), vec3(_3055 * _3049, _3055 * _3050, _3055 * _3051));
                        float _4350 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3066 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                        float _3070 = ((_3066 * _3066) * (_3048 + (-1.0))) + 1.0;
                        float _3071 = _3007 * _3047;
                        float _3072 = _3071 * _3071;
                        float _3075 = ((1.0 - _3072) * _2997) + _3072;
                        float _4361 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3076 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                        float _3077 = 1.0 - _3047;
                        float _3087 = (0.5 / (((_3076 * ((_3062 * _3077) + _3047)) + 9.9999999392252902907785028219223e-09) + (((_3076 * _3077) + _3047) * _3062))) * _3076;
                        float _4372 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                        float _3098 = (((_3048 * 3.1415927410125732421875) * (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) / ((_3070 * _3070) * ((_3014 * 2.1991131305694580078125) + 3.141590118408203125))) * _3003;
                        _2856 = (_3018 * _2966.x) + _2924;
                        _2857 = (_3018 * _2966.y) + _2925;
                        _2858 = (_3018 * _2966.z) + _2926;
                        _2853 = (_3098 * _2983.x) + _2921;
                        _2854 = (_3098 * _2983.y) + _2922;
                        _2855 = (_3098 * _2983.z) + _2923;
                        if (_2928 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2921 = _2853;
                            _2922 = _2854;
                            _2923 = _2855;
                            _2924 = _2856;
                            _2925 = _2857;
                            _2926 = _2858;
                            _2927 = _2928;
                        }
                    }
                    frontier_phi_66_pred = _2858;
                    frontier_phi_66_pred_1 = _2857;
                    frontier_phi_66_pred_2 = _2856;
                    frontier_phi_66_pred_3 = _2855;
                    frontier_phi_66_pred_4 = _2854;
                    frontier_phi_66_pred_5 = _2853;
                }
                _2654 = frontier_phi_66_pred;
                _2652 = frontier_phi_66_pred_1;
                _2650 = frontier_phi_66_pred_2;
                _2648 = frontier_phi_66_pred_3;
                _2646 = frontier_phi_66_pred_4;
                _2644 = frontier_phi_66_pred_5;
                uint _2804 = _2803 + 1u;
                if (_2804 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2797 = _2644;
                    _2798 = _2646;
                    _2799 = _2648;
                    _2800 = _2650;
                    _2801 = _2652;
                    _2802 = _2654;
                    _2803 = _2804;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2643 = _2644;
            _2645 = _2646;
            _2647 = _2648;
            _2649 = _2650;
            _2651 = _2652;
            _2653 = _2654;
        }
        uvec4 _2657 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2658 = _2657.z;
        uint _2660 = (_2658 >> 8u) & 15u;
        float _2765;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        if (((4294967295u << _2660) & _2528) == 0u)
        {
            _2765 = _2643;
            _2767 = _2645;
            _2769 = _2647;
            _2771 = _2649;
            _2773 = _2651;
            _2775 = _2653;
        }
        else
        {
            float _2790 = inversesqrt(dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588)));
            float _2791 = _2790 * _1586;
            float _2792 = _2790 * _1587;
            float _2793 = _2790 * _1588;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2660 < ((_2658 >> 12u) & 15u))
            {
                float _2766;
                float _2768;
                float _2770;
                float _2772;
                float _2774;
                float _2776;
                float _2904 = _2643;
                float _2905 = _2645;
                float _2906 = _2647;
                float _2907 = _2649;
                float _2908 = _2651;
                float _2909 = _2653;
                uint _2910 = _2660;
                uint _2919;
                bool _2920;
                for (;;)
                {
                    _2919 = texelFetch(g_lightClassification, int((((_2522 << 5u) + (_2508 << 9u)) + (_2910 << 2u)) >> 2u)).x;
                    _2920 = _2919 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2920)
                    {
                        frontier_phi_72_pred = _2909;
                        frontier_phi_72_pred_1 = _2908;
                        frontier_phi_72_pred_2 = _2907;
                        frontier_phi_72_pred_3 = _2906;
                        frontier_phi_72_pred_4 = _2905;
                        frontier_phi_72_pred_5 = _2904;
                    }
                    else
                    {
                        float _3103;
                        float _3104;
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3116 = _2904;
                        float _3117 = _2905;
                        float _3118 = _2906;
                        float _3119 = _2907;
                        float _3120 = _2908;
                        float _3121 = _2909;
                        uint _3122 = _2919;
                        uint _3123;
                        vec4 _3148;
                        float _3149;
                        vec4 _3164;
                        vec3 _3176;
                        vec4 _3192;
                        vec4 _3208;
                        float _3255;
                        bool _3256;
                        for (;;)
                        {
                            uint _3133 = ((_2910 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3122));
                            _3123 = (_3122 + 4294967295u) & _3122;
                            uint _3135 = _3133 * 40u;
                            _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            _3149 = _3148.w;
                            uint _3151 = (_3133 * 40u) + 4u;
                            _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            uint _3166 = (_3133 * 40u) + 8u;
                            _3176 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x));
                            uint _3179 = (_3133 * 40u) + 16u;
                            _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            uint _3195 = (_3133 * 40u) + 20u;
                            _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            uint _3211 = (_3133 * 40u) + 24u;
                            vec4 _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            uint _3230 = (_3133 * 40u) + 28u;
                            vec4 _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            _3255 = fma(_1588, _3243.z, fma(_1587, _3243.y, _3243.x * _1586)) + _3243.w;
                            _3256 = !((fma(_1588, _3224.z, fma(_1587, _3224.y, _3224.x * _1586)) + _3224.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3256)
                            {
                                float _3283 = _3148.x - _1586;
                                float _3284 = _3148.y - _1587;
                                float _3285 = _3148.z - _1588;
                                float _3286 = dot(vec3(_3283, _3284, _3285), vec3(_3283, _3284, _3285));
                                float _3289 = inversesqrt(_3286);
                                float _3290 = _3289 * _3283;
                                float _3291 = _3289 * _3284;
                                float _3292 = _3289 * _3285;
                                float _3296 = 1.0 - (_3286 / (_3149 * _3149));
                                float _4383 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3297 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                                float _3301 = sqrt(_3286) * _3164.w;
                                float _3303 = 1.39999997615814208984375 / (_3301 + 1.39999997615814208984375);
                                float _3304 = _3303 * _3303;
                                float _3307 = ((1.0 - _3304) * dot(vec3(_3290, _3291, _3292), vec3(_447, _450, _453))) + _3304;
                                float _3310 = _3301 * _3301;
                                float _3314 = (fma(_1588, _3192.z, fma(_1587, _3192.y, _3192.x * _1586)) + _3192.w) / _3255;
                                float _3315 = (fma(_1588, _3208.z, fma(_1587, _3208.y, _3208.x * _1586)) + _3208.w) / _3255;
                                float _3319 = 1.0 - dot(vec2(_3314, _3315), vec2(_3314, _3315));
                                float _4399 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3320 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                                float _3321 = _3320 * (((isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0))) * _3297) / ((_3310 * 0.699999988079071044921875) + 1.0));
                                float _3333 = exp2(log2(1.0 / ((_3310 * 3.5) + 5.0)) * 0.25);
                                float _3334 = 1.0 - _522;
                                float _3341 = sqrt(1.0 - ((1.0 - (_3334 * _3334)) * (1.0 - (_3333 * _3333))));
                                float _3342 = _3341 * _3341;
                                float _3343 = _3342 * _3342;
                                float _3344 = _3290 - _2791;
                                float _3345 = _3291 - _2792;
                                float _3346 = _3292 - _2793;
                                float _3350 = inversesqrt(dot(vec3(_3344, _3345, _3346), vec3(_3344, _3345, _3346)));
                                float _3354 = dot(vec3(_447, _450, _453), vec3((-0.0) - _2791, (-0.0) - _2792, (-0.0) - _2793));
                                float _4410 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3357 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                                float _3358 = dot(vec3(_447, _450, _453), vec3(_3350 * _3344, _3350 * _3345, _3350 * _3346));
                                float _4421 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3361 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                                float _3365 = ((_3361 * _3361) * (_3343 + (-1.0))) + 1.0;
                                float _3366 = _3303 * _3342;
                                float _3367 = _3366 * _3366;
                                float _3373 = ((1.0 - _3367) * dot(vec3(_447, _450, _453), vec3(_3290, _3291, _3292))) + _3367;
                                float _4432 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3374 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3375 = 1.0 - _3342;
                                float _3385 = (0.5 / (((_3374 * ((_3357 * _3375) + _3342)) + 9.9999999392252902907785028219223e-09) + (((_3374 * _3375) + _3342) * _3357))) * _3374;
                                float _4443 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3395 = (_3320 * _3297) * (((_3343 * 3.1415927410125732421875) * (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0)))) / ((_3365 * _3365) * ((_3310 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3321 * _3164.y;
                                frontier_phi_78_pred_1 = _3321 * _3164.x;
                                frontier_phi_78_pred_2 = _3395 * _3176.z;
                                frontier_phi_78_pred_3 = _3395 * _3176.y;
                                frontier_phi_78_pred_4 = _3395 * _3176.x;
                                frontier_phi_78_pred_5 = _3321 * _3164.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3403 = frontier_phi_78_pred;
                            _3402 = frontier_phi_78_pred_1;
                            _3401 = frontier_phi_78_pred_2;
                            _3400 = frontier_phi_78_pred_3;
                            _3399 = frontier_phi_78_pred_4;
                            _3404 = frontier_phi_78_pred_5;
                            _3106 = _3402 + _3119;
                            _3107 = _3403 + _3120;
                            _3108 = _3404 + _3121;
                            _3103 = _3399 + _3116;
                            _3104 = _3400 + _3117;
                            _3105 = _3401 + _3118;
                            if (_3123 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3116 = _3103;
                                _3117 = _3104;
                                _3118 = _3105;
                                _3119 = _3106;
                                _3120 = _3107;
                                _3121 = _3108;
                                _3122 = _3123;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3108;
                        frontier_phi_72_pred_1 = _3107;
                        frontier_phi_72_pred_2 = _3106;
                        frontier_phi_72_pred_3 = _3105;
                        frontier_phi_72_pred_4 = _3104;
                        frontier_phi_72_pred_5 = _3103;
                    }
                    _2776 = frontier_phi_72_pred;
                    _2774 = frontier_phi_72_pred_1;
                    _2772 = frontier_phi_72_pred_2;
                    _2770 = frontier_phi_72_pred_3;
                    _2768 = frontier_phi_72_pred_4;
                    _2766 = frontier_phi_72_pred_5;
                    uint _2911 = _2910 + 1u;
                    if (_2911 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2904 = _2766;
                        _2905 = _2768;
                        _2906 = _2770;
                        _2907 = _2772;
                        _2908 = _2774;
                        _2909 = _2776;
                        _2910 = _2911;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2776;
                frontier_phi_60_61_ladder_1 = _2774;
                frontier_phi_60_61_ladder_2 = _2770;
                frontier_phi_60_61_ladder_3 = _2768;
                frontier_phi_60_61_ladder_4 = _2766;
                frontier_phi_60_61_ladder_5 = _2772;
            }
            else
            {
                frontier_phi_60_61_ladder = _2653;
                frontier_phi_60_61_ladder_1 = _2651;
                frontier_phi_60_61_ladder_2 = _2647;
                frontier_phi_60_61_ladder_3 = _2645;
                frontier_phi_60_61_ladder_4 = _2643;
                frontier_phi_60_61_ladder_5 = _2649;
            }
            _2765 = frontier_phi_60_61_ladder_4;
            _2767 = frontier_phi_60_61_ladder_3;
            _2769 = frontier_phi_60_61_ladder_2;
            _2771 = frontier_phi_60_61_ladder_5;
            _2773 = frontier_phi_60_61_ladder_1;
            _2775 = frontier_phi_60_61_ladder;
        }
        float _2780 = isnan(1.0) ? _506 : (isnan(_506) ? 1.0 : min(_506, 1.0));
        _2541 = (_2780 * _2771) + _2053;
        _2543 = (_2780 * _2773) + _2055;
        _2545 = (_2780 * _2775) + _2057;
        _2547 = ((_2765 * _491) * _2780) + _2391;
        _2549 = ((_2767 * _493) * _2780) + _2393;
        _2551 = ((_2769 * _494) * _2780) + _2395;
    }
    else
    {
        _2541 = _2053;
        _2543 = _2055;
        _2545 = _2057;
        _2547 = _2391;
        _2549 = _2393;
        _2551 = _2395;
    }
    uint _2557 = _467 + uint(cbMatDynParam._m0[0u].w);
    float _2565 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _318.x) * cbInstanceData._m0[_2557].x;
    float _2568 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _318.y) * cbInstanceData._m0[_2557].y;
    float _2571 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _318.z) * cbInstanceData._m0[_2557].z;
    float _4459 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _4470 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _4481 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _2588 = (((isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2541 + ((isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0))) * _506))) + ((_2547 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _1316)) * cbPerFrame._m0[3u].x)) + _2565;
    float _2590 = (_2568 + ((_2549 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _1316)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2543 + ((isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))) * _506)));
    float _2592 = (_2571 + ((_2551 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _1316)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2545 + ((isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))) * _506)));
    float _4507 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2605 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    uint _2606 = _466 + 6u;
    float _2614 = _425 / cbSceneParam._m0[86u].x;
    float _2615 = _426 / cbSceneParam._m0[86u].y;
    vec4 _2629 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2614, _2615, (log2((isnan(cbSceneParam._m0[77u].w) ? _359 : (isnan(_359) ? cbSceneParam._m0[77u].w : min(_359, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2631 = _2629.x;
    float _2632 = _2629.y;
    float _2633 = _2629.z;
    float _2634 = _2629.w;
    float _2706;
    float _2708;
    float _2710;
    float _2712;
    if (_359 > cbSceneParam._m0[78u].w)
    {
        float _2668 = isnan(_359) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _359 : min(cbSceneParam._m0[80u].w, _359));
        float _2669 = _2668 / _359;
        float _2680 = _2669 * _410;
        float _2681 = _411 * _2669;
        float _2682 = (-0.0) - _2681;
        float _2684 = _2669 * _412;
        float _2686 = (cbSceneParam._m0[77u].w * _2682) / _2668;
        float _2687 = _2686 + cbSceneParam._m0[79u].w;
        float _2688 = cbSceneParam._m0[79u].w - _2681;
        float _2694 = sqrt(((_2680 * _2680) + (_2681 * _2681)) + (_2684 * _2684));
        float _2697 = (1.0 - (cbSceneParam._m0[77u].w / _2668)) * _2694;
        float _2702 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2704 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2866;
        if (abs((_2682 - _2686) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2866 = ((((_2687 > 0.0) ? exp2(_2702 * _2687) : (2.0 - exp2(_2704 * _2687))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2697;
        }
        else
        {
            float _2826 = 1.0 / cbSceneParam._m0[80u].x;
            float _2827 = isnan(_2688) ? _2687 : (isnan(_2687) ? _2688 : max(_2687, _2688));
            float _2828 = isnan(_2688) ? _2687 : (isnan(_2687) ? _2688 : min(_2687, _2688));
            float _2837 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : min(_2827, 0.0));
            float _2838 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : min(_2828, 0.0));
            _2866 = ((abs(_2694 / _2682) * cbSceneParam._m0[80u].y) * ((((_2837 - _2838) * 2.0) - ((exp2(_2702 * (isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0)))) - exp2(_2702 * (isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0))))) * _2826)) - ((exp2(_2704 * _2837) - exp2(_2704 * _2838)) * _2826))) + (_2697 * cbSceneParam._m0[80u].z);
        }
        vec4 _2868 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2614, _2615, 1.0), 0.0);
        float _2877 = exp2((_2866 * (-1.44269502162933349609375)) * (1.0 - _2868.w));
        float _2878 = log2(_2877);
        float _2894 = log2(_2634);
        _2706 = (exp2(_2894 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].x)) * _2868.x) / cbSceneParam._m0[78u].x)) + _2631;
        _2708 = (exp2(_2894 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].y)) * _2868.y) / cbSceneParam._m0[78u].y)) + _2632;
        _2710 = (exp2(_2894 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].z)) * _2868.z) / cbSceneParam._m0[78u].z)) + _2633;
        _2712 = _2877 * _2634;
    }
    else
    {
        _2706 = _2631;
        _2708 = _2632;
        _2710 = _2633;
        _2712 = _2634;
    }
    float _2724 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2725 = _2724 == 3.0;
    float _2726 = log2(_2712);
    float _2730 = exp2(_2726 * cbSceneParam._m0[78u].x);
    float _2731 = exp2(_2726 * cbSceneParam._m0[78u].y);
    float _2732 = exp2(_2726 * cbSceneParam._m0[78u].z);
    float _2733 = _2730 * (isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0)));
    float _2734 = _2731 * (isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0)));
    float _2735 = _2732 * (isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0)));
    float _2744 = (_2724 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2744 * (_2725 ? _2733 : (_2733 + (cbSceneParam._m0[72u].w * _2706)));
    SV_Target.y = _2744 * (_2725 ? _2734 : (_2734 + (cbSceneParam._m0[72u].w * _2708)));
    SV_Target.z = _2744 * (_2725 ? _2735 : (_2735 + (cbSceneParam._m0[72u].w * _2710)));
    SV_Target.w = cbInstanceData._m0[_2606].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2565) * _2605) * _2730) * _2744;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2568) * _2605) * _2731) * _2744;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2571) * _2605) * _2732) * _2744;
    SV_Target_1.w = cbInstanceData._m0[_2606].w;
}


