#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _894;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _228.x * cbMtdParam._m0[9u].x;
    float _235 = _228.y * cbMtdParam._m0[9u].y;
    float _236 = _228.z * cbMtdParam._m0[9u].z;
    vec4 _248 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _250 = _248.x;
    vec4 _262 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _266 = _262.z;
    float _270 = (_262.x * 2.0) + (-1.0);
    float _272 = (_262.y * 2.0) + (-1.0);
    float _273 = dot(vec2(_270, _272), vec2(_270, _272));
    float _3299 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _279 = sqrt(1.0 - (isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0))));
    vec4 _316 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _327 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3310 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _328 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
    float _336 = (((_328 * _328) * (3.0 - (_328 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _339 = fma(_279, _199 * NORMAL.x, fma(_272, _206 * TANGENT.x, (_192 * _185) * _270));
    float _342 = fma(_279, _199 * NORMAL.y, fma(_272, _206 * TANGENT.y, (_192 * _186) * _270));
    float _345 = fma(_279, _199 * NORMAL.z, fma(_272, _206 * TANGENT.z, (_192 * _187) * _270));
    float _349 = inversesqrt(dot(vec3(_339, _342, _345), vec3(_339, _342, _345)));
    float _350 = _349 * _339;
    float _351 = _349 * _342;
    float _352 = _349 * _345;
    float _3321 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _353 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
    float _3332 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3343 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3354 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3365 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _357 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
    float _373 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _414 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _424 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _414);
    float _425 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _414);
    float _426 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _414);
    float _430 = inversesqrt(dot(vec3(_424, _425, _426), vec3(_424, _425, _426)));
    float _431 = _424 * _430;
    float _432 = _425 * _430;
    float _433 = _426 * _430;
    float _439 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _440 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _461 = fma(_352, cbSceneParam._m0[5u].z, fma(_351, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _350));
    float _464 = fma(_352, cbSceneParam._m0[6u].z, fma(_351, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _350));
    float _467 = fma(_352, cbSceneParam._m0[7u].z, fma(_351, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _350));
    uint _480 = uint(roundEven(NORMAL.w)) * 13u;
    uint _481 = _480 + 9u;
    uint _482 = _481 + uint(cbMatDynParam._m0[0u].w);
    float _488 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0)))) * cbInstanceData._m0[_482].x;
    float _489 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0)))) * cbInstanceData._m0[_482].y;
    float _490 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0)))) * cbInstanceData._m0[_482].z;
    float _3376 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _491 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
    float _3387 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _492 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
    float _3398 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _493 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
    float _494 = 1.0 - _357;
    float _495 = _491 * _494;
    float _496 = _492 * _494;
    float _497 = _493 * _494;
    float _502 = (_491 + (-0.039999999105930328369140625)) * _357;
    float _503 = (_492 + (-0.039999999105930328369140625)) * _357;
    float _504 = (_493 + (-0.039999999105930328369140625)) * _357;
    float _505 = _502 + 0.039999999105930328369140625;
    float _507 = _503 + 0.039999999105930328369140625;
    float _508 = _504 + 0.039999999105930328369140625;
    vec4 _517 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _439, cbSceneParam._m0[86u].y * _440));
    float _520 = _517.x * TEXCOORD.z;
    float _521 = dot(vec3(_350, _351, _352), vec3(_431, _432, _433));
    float _524 = _521 * 2.0;
    float _528 = (_524 * _350) - _431;
    float _529 = (_524 * _351) - _432;
    float _530 = (_524 * _352) - _433;
    float _534 = abs(dot(vec3(_431, _432, _433), vec3(_350, _351, _352)));
    float _3409 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _536 = sqrt(_353);
    float _548 = exp2((_536 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_536 * 3.0));
    float _554 = (1.0 - _548) * ((_536 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _555 = _548 * _536;
    float _583 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _587 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _591 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _893;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _618 = fma(_591, cbModelParam._m0[26u].z, fma(_587, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _583));
        float _622 = fma(_591, cbModelParam._m0[27u].z, fma(_587, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _583));
        float _626 = fma(_591, cbModelParam._m0[28u].z, fma(_587, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _583));
        float _651 = _583 + _350;
        float _652 = _587 + _351;
        float _653 = _591 + _352;
        float _663 = fma(_653, cbModelParam._m0[26u].z, fma(_652, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _651)) - _618;
        float _664 = fma(_653, cbModelParam._m0[27u].z, fma(_652, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _651)) - _622;
        float _665 = fma(_653, cbModelParam._m0[28u].z, fma(_652, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _651)) - _626;
        float _669 = inversesqrt(dot(vec3(_663, _664, _665), vec3(_663, _664, _665)));
        float _682 = ((_669 * _663) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_618 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _683 = ((_669 * _664) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_622 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _684 = ((_669 * _665) / cbModelParam._m0[34u].z) + ((((((_626 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _687 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_682, _683, _684), 0.0);
        vec4 _694 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_682, _683, _684), 0.0);
        vec4 _701 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_682, _683, _684), 0.0);
        vec4 _708 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_682, _683, _684), 0.0);
        float _721 = exp2((_687.w + (-0.5)) * 20.0) * 2.0;
        float _722 = _721 * (_687.x + (-0.5));
        float _723 = _721 * (_687.y + (-0.5));
        float _724 = _721 * (_687.z + (-0.5));
        float _731 = exp2((_694.w + (-0.5)) * 20.0) * 2.0;
        float _732 = _731 * (_694.x + (-0.5));
        float _733 = _731 * (_694.y + (-0.5));
        float _734 = _731 * (_694.z + (-0.5));
        float _741 = exp2((_701.w + (-0.5)) * 20.0) * 2.0;
        float _742 = _741 * (_701.x + (-0.5));
        float _743 = _741 * (_701.y + (-0.5));
        float _744 = _741 * (_701.z + (-0.5));
        float _751 = exp2((_708.w + (-0.5)) * 20.0) * 2.0;
        float _752 = _751 * (_708.x + (-0.5));
        float _753 = _751 * (_708.y + (-0.5));
        float _754 = _751 * (_708.z + (-0.5));
        float _755 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _756 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _757 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _758 = _722 * 0.5;
        float _759 = _732 * 0.5;
        float _760 = _742 * 0.5;
        float _761 = dot(vec3(_758, _759, _760), vec3(_758, _759, _760));
        float _766 = (_761 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_761);
        float _775 = (dot(vec3(_350, _351, _352), vec3(_766 * _758, _766 * _759, _766 * _760)) + 1.0) * 0.5;
        float _3435 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _785 = sqrt(((_759 * _759) + (_758 * _758)) + (_760 * _760)) / (_755 + 9.9999997473787516355514526367188e-06);
        float _3446 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
        float _787 = _786 * 2.0;
        float _791 = (1.0 - _786) / (_786 + 1.0);
        float _3457 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
        float _801 = ((((1.0 - _792) * (_787 + 2.0)) * exp2(log2(isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0))) * (_787 + 1.0))) + _792) * _755;
        float _802 = _723 * 0.5;
        float _803 = _733 * 0.5;
        float _804 = _743 * 0.5;
        float _805 = dot(vec3(_802, _803, _804), vec3(_802, _803, _804));
        float _810 = (_805 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_805);
        float _818 = (dot(vec3(_350, _351, _352), vec3(_810 * _802, _810 * _803, _810 * _804)) + 1.0) * 0.5;
        float _3468 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _827 = sqrt(((_803 * _803) + (_802 * _802)) + (_804 * _804)) / (_756 + 9.9999997473787516355514526367188e-06);
        float _3479 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _829 = _828 * 2.0;
        float _833 = (1.0 - _828) / (_828 + 1.0);
        float _3490 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _843 = ((((1.0 - _834) * (_829 + 2.0)) * exp2(log2(isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))) * (_829 + 1.0))) + _834) * _756;
        float _844 = _724 * 0.5;
        float _845 = _734 * 0.5;
        float _846 = _744 * 0.5;
        float _847 = dot(vec3(_844, _845, _846), vec3(_844, _845, _846));
        float _852 = (_847 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_847);
        float _860 = (dot(vec3(_350, _351, _352), vec3(_852 * _844, _852 * _845, _852 * _846)) + 1.0) * 0.5;
        float _3501 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _869 = sqrt(((_845 * _845) + (_844 * _844)) + (_846 * _846)) / (_757 + 9.9999997473787516355514526367188e-06);
        float _3512 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _871 = _870 * 2.0;
        float _875 = (1.0 - _870) / (_870 + 1.0);
        float _3523 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _885 = ((((1.0 - _876) * (_871 + 2.0)) * exp2(log2(isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * (_871 + 1.0))) + _876) * _757;
        _893 = _724;
        _895 = _723;
        _896 = _722;
        _897 = _734;
        _898 = _733;
        _899 = _732;
        _900 = _744;
        _901 = _743;
        _902 = _742;
        _903 = _757;
        _904 = _756;
        _905 = _755;
        _906 = cbModelParam._m0[36u].z * (isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0)));
        _907 = cbModelParam._m0[36u].z * (isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0)));
        _908 = cbModelParam._m0[36u].z * (isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0)));
    }
    else
    {
        _893 = _894;
        _895 = _894;
        _896 = _894;
        _897 = _894;
        _898 = _894;
        _899 = _894;
        _900 = _894;
        _901 = _894;
        _902 = _894;
        _903 = _894;
        _904 = _894;
        _905 = _894;
        _906 = 0.0;
        _907 = 0.0;
        _908 = 0.0;
    }
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _934 = fma(_591, cbModelParam._m0[30u].z, fma(_587, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _583));
        float _938 = fma(_591, cbModelParam._m0[31u].z, fma(_587, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _583));
        float _942 = fma(_591, cbModelParam._m0[32u].z, fma(_587, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _583));
        float _965 = _583 + _350;
        float _966 = _587 + _351;
        float _967 = _591 + _352;
        float _977 = fma(_967, cbModelParam._m0[30u].z, fma(_966, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _965)) - _934;
        float _978 = fma(_967, cbModelParam._m0[31u].z, fma(_966, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _965)) - _938;
        float _979 = fma(_967, cbModelParam._m0[32u].z, fma(_966, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _965)) - _942;
        float _983 = inversesqrt(dot(vec3(_977, _978, _979), vec3(_977, _978, _979)));
        float _996 = ((_983 * _977) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_934 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _997 = ((_983 * _978) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_938 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _998 = ((_983 * _979) / cbModelParam._m0[35u].z) + ((((((_942 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        float _1033 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_1000.x + (-0.5));
        float _1035 = _1033 * (_1000.y + (-0.5));
        float _1036 = _1033 * (_1000.z + (-0.5));
        float _1043 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1007.x + (-0.5));
        float _1045 = _1043 * (_1007.y + (-0.5));
        float _1046 = _1043 * (_1007.z + (-0.5));
        float _1053 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1014.x + (-0.5));
        float _1055 = _1053 * (_1014.y + (-0.5));
        float _1056 = _1053 * (_1014.z + (-0.5));
        float _1063 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1021.x + (-0.5));
        float _1065 = _1063 * (_1021.y + (-0.5));
        float _1066 = _1063 * (_1021.z + (-0.5));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = _1034 * 0.5;
        float _1071 = _1044 * 0.5;
        float _1072 = _1054 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1086 = (dot(vec3(_350, _351, _352), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3564 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1095 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3575 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _3586 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))) * (_1097 + 1.0))) + _1102) * _1067;
        float _1112 = _1035 * 0.5;
        float _1113 = _1045 * 0.5;
        float _1114 = _1055 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1128 = (dot(vec3(_350, _351, _352), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3597 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1137 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _3608 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3619 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * (_1139 + 1.0))) + _1144) * _1068;
        float _1154 = _1036 * 0.5;
        float _1155 = _1046 * 0.5;
        float _1156 = _1056 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_350, _351, _352), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3630 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3641 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3652 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * (_1181 + 1.0))) + _1186) * _1069;
        _1203 = _1036;
        _1204 = _1035;
        _1205 = _1034;
        _1206 = _1046;
        _1207 = _1045;
        _1208 = _1044;
        _1209 = _1056;
        _1210 = _1055;
        _1211 = _1054;
        _1212 = _1069;
        _1213 = _1068;
        _1214 = _1067;
        _1215 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
        _1216 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
        _1217 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
    }
    else
    {
        _1203 = _894;
        _1204 = _894;
        _1205 = _894;
        _1206 = _894;
        _1207 = _894;
        _1208 = _894;
        _1209 = _894;
        _1210 = _894;
        _1211 = _894;
        _1212 = _894;
        _1213 = _894;
        _1214 = _894;
        _1215 = 0.0;
        _1216 = 0.0;
        _1217 = 0.0;
    }
    float _1227 = (cbModelParam._m0[1u].x * (_1215 - _906)) + _906;
    float _1228 = (cbModelParam._m0[1u].x * (_1216 - _907)) + _907;
    float _1229 = (cbModelParam._m0[1u].x * (_1217 - _908)) + _908;
    float _1250 = fma(_1229, cbSceneParam._m0[89u].z, fma(_1228, cbSceneParam._m0[89u].y, _1227 * cbSceneParam._m0[89u].x));
    float _1253 = fma(_1229, cbSceneParam._m0[90u].z, fma(_1228, cbSceneParam._m0[90u].y, _1227 * cbSceneParam._m0[90u].x));
    float _1256 = fma(_1229, cbSceneParam._m0[91u].z, fma(_1228, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1227));
    float _1271 = _528 * 0.5;
    float _1272 = _529 * 0.5;
    float _1273 = _530 * 0.5;
    float _1274 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_1205, _1208, _1211, _1214));
    float _1277 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_1204, _1207, _1210, _1213));
    float _1280 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_1203, _1206, _1209, _1212));
    float _1314;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1287 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_893, _897, _900, _903));
        float _1291 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_895, _898, _901, _904));
        float _1295 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_896, _899, _902, _905));
        float _1302 = dot(vec4(cbModelParam._m0[39u]), vec4(_1271, _1272, _1273, 1.0));
        _1314 = dot(vec3(isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1302) ? 0.0 : (isnan(0.0) ? _1302 : max(0.0, _1302))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1314 = 1.0;
    }
    float _1325;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1316 = dot(vec4(cbModelParam._m0[40u]), vec4(_1271, _1272, _1273, 1.0));
        _1325 = dot(vec3(isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)), isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)), isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1316) ? 0.0 : (isnan(0.0) ? _1316 : max(0.0, _1316))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1325 = 1.0;
    }
    float _1329 = (_1325 * cbModelParam._m0[1u].x) + (_1314 * (1.0 - cbModelParam._m0[1u].x));
    float _1339 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _353);
    float _1340 = isnan(_1339) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1339 : min(cbModelParam._m0[25u].z, _1339));
    float _1421;
    float _1423;
    float _1425;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1388 = fma(_591, cbModelParam._m0[13u].z, fma(_587, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _583)) + cbModelParam._m0[13u].w;
        float _1392 = fma(_591, cbModelParam._m0[14u].z, fma(_587, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _583)) + cbModelParam._m0[14u].w;
        float _1396 = fma(_591, cbModelParam._m0[15u].z, fma(_587, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _583)) + cbModelParam._m0[15u].w;
        float _1399 = fma(_530, cbModelParam._m0[13u].z, fma(_529, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _528));
        float _1402 = fma(_530, cbModelParam._m0[14u].z, fma(_529, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _528));
        float _1405 = fma(_530, cbModelParam._m0[15u].z, fma(_529, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _528));
        float _1433;
        if (_1399 > 0.0)
        {
            _1433 = abs((1.0 - _1388) / _1399);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1399 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1388 + 1.0) / _1399);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1433 = frontier_phi_14_12_ladder;
        }
        float _1660;
        if (_1402 > 0.0)
        {
            _1660 = abs((1.0 - _1392) / _1402);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1392 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1660 = frontier_phi_23_19_ladder;
        }
        float _1917;
        if (_1405 > 0.0)
        {
            _1917 = abs((1.0 - _1396) / _1405);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1396 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1917 = frontier_phi_35_30_ladder;
        }
        float _1919 = isnan(_1660) ? _1433 : (isnan(_1433) ? _1660 : min(_1433, _1660));
        float _1920 = isnan(_1917) ? _1919 : (isnan(_1919) ? _1917 : min(_1919, _1917));
        float _1924 = (_1920 * _1399) + _1388;
        float _1925 = (_1920 * _1402) + _1392;
        float _1926 = (_1920 * _1405) + _1396;
        float _1927 = _1920 * 9.9999997473787516355514526367188e-05;
        float _1929 = (-1.0) - _1927;
        float _1931 = _1927 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1926 > _1931) || ((_1926 < _1929) || ((_1925 > _1931) || ((_1925 < _1929) || ((_1924 < _1929) || (_1924 > _1931))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2054 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1926, cbModelParam._m0[9u].z, fma(_1925, cbModelParam._m0[9u].y, _1924 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1926, cbModelParam._m0[10u].z, fma(_1925, cbModelParam._m0[10u].y, _1924 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1926, cbModelParam._m0[11u].z, fma(_1925, cbModelParam._m0[11u].y, _1924 * cbModelParam._m0[11u].x))), _1340);
            frontier_phi_13_35_ladder = _2054.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2054.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2054.x * cbModelParam._m0[1u].y;
        }
        _1421 = frontier_phi_13_35_ladder_2;
        _1423 = frontier_phi_13_35_ladder_1;
        _1425 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1409 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_528, _529, _530), _1340);
        _1421 = _1409.x * cbModelParam._m0[1u].y;
        _1423 = _1409.y * cbModelParam._m0[1u].y;
        _1425 = _1409.z * cbModelParam._m0[1u].y;
    }
    float _1429 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _353);
    float _1430 = isnan(_1429) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1429 : min(cbModelParam._m0[25u].w, _1429));
    float _1522;
    float _1524;
    float _1526;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1486 = fma(_591, cbModelParam._m0[21u].z, fma(_587, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _583)) + cbModelParam._m0[21u].w;
        float _1490 = fma(_591, cbModelParam._m0[22u].z, fma(_587, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _583)) + cbModelParam._m0[22u].w;
        float _1494 = fma(_591, cbModelParam._m0[23u].z, fma(_587, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _583)) + cbModelParam._m0[23u].w;
        float _1497 = fma(_530, cbModelParam._m0[21u].z, fma(_529, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _528));
        float _1500 = fma(_530, cbModelParam._m0[22u].z, fma(_529, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _528));
        float _1503 = fma(_530, cbModelParam._m0[23u].z, fma(_529, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _528));
        float _1665;
        if (_1497 > 0.0)
        {
            _1665 = abs((1.0 - _1486) / _1497);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1486 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1665 = frontier_phi_25_21_ladder;
        }
        float _1944;
        if (_1500 > 0.0)
        {
            _1944 = abs((1.0 - _1490) / _1500);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1500 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1490 + 1.0) / _1500);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1944 = frontier_phi_37_32_ladder;
        }
        float _2157;
        if (_1503 > 0.0)
        {
            _2157 = abs((1.0 - _1494) / _1503);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1494 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2157 = frontier_phi_46_43_ladder;
        }
        float _2159 = isnan(_1944) ? _1665 : (isnan(_1665) ? _1944 : min(_1665, _1944));
        float _2160 = isnan(_2157) ? _2159 : (isnan(_2159) ? _2157 : min(_2159, _2157));
        float _2164 = (_2160 * _1497) + _1486;
        float _2165 = (_2160 * _1500) + _1490;
        float _2166 = (_2160 * _1503) + _1494;
        float _2167 = _2160 * 9.9999997473787516355514526367188e-05;
        float _2168 = (-1.0) - _2167;
        float _2170 = _2167 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2166 > _2170) || ((_2166 < _2168) || ((_2165 > _2170) || ((_2165 < _2168) || ((_2164 < _2168) || (_2164 > _2170))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2403 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2166, cbModelParam._m0[17u].z, fma(_2165, cbModelParam._m0[17u].y, _2164 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2166, cbModelParam._m0[18u].z, fma(_2165, cbModelParam._m0[18u].y, _2164 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2166, cbModelParam._m0[19u].z, fma(_2165, cbModelParam._m0[19u].y, _2164 * cbModelParam._m0[19u].x))), _1430);
            frontier_phi_22_46_ladder = _2403.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2403.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2403.x * cbModelParam._m0[1u].z;
        }
        _1522 = frontier_phi_22_46_ladder_2;
        _1524 = frontier_phi_22_46_ladder_1;
        _1526 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1506 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_528, _529, _530), _1430);
        _1522 = _1506.x * cbModelParam._m0[1u].z;
        _1524 = _1506.y * cbModelParam._m0[1u].z;
        _1526 = _1506.z * cbModelParam._m0[1u].z;
    }
    float _1539 = (((_554 * _505) + _555) * _520) * ((cbModelParam._m0[1u].w * (_1522 - _1421)) + _1421);
    float _1541 = (((_554 * _507) + _555) * _520) * ((cbModelParam._m0[1u].w * (_1524 - _1423)) + _1423);
    float _1543 = (((_554 * _508) + _555) * _520) * ((cbModelParam._m0[1u].w * (_1526 - _1425)) + _1425);
    float _1546 = fma(_1543, cbSceneParam._m0[89u].z, fma(_1541, cbSceneParam._m0[89u].y, _1539 * cbSceneParam._m0[89u].x));
    float _1549 = fma(_1543, cbSceneParam._m0[90u].z, fma(_1541, cbSceneParam._m0[90u].y, _1539 * cbSceneParam._m0[90u].x));
    float _1552 = fma(_1543, cbSceneParam._m0[91u].z, fma(_1541, cbSceneParam._m0[91u].y, _1539 * cbSceneParam._m0[91u].x));
    vec4 _1560 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_439, _440));
    float _1562 = _1560.w;
    float _1574 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1562);
    float _1575 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1562);
    float _1576 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1562);
    uvec4 _1580 = floatBitsToUint(cbInstanceData._m0[_480 + 5u]);
    uint _1582 = _1580.x * 14u;
    uint _1583 = _1582 + 13u;
    float _1590 = _520 + (-1.0);
    float _1595 = (cbLight._m0[_1583].x * _1590) + 1.0;
    float _1596 = (cbLight._m0[_1583].y * _1590) + 1.0;
    float _1597 = (cbLight._m0[_1583].z * _1590) + 1.0;
    float _1598 = (cbLight._m0[_1583].w * _1590) + 1.0;
    uint _1599 = _1582 + 5u;
    float _1605 = isnan(1.0) ? _1596 : (isnan(_1596) ? 1.0 : min(_1596, 1.0));
    uint _1609 = _1582 + 4u;
    float _1619 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
    uint _1623 = _1582 | 1u;
    float _1634 = dot(vec3(cbLight._m0[_1582].xyz), vec3(_350, _351, _352));
    float _1637 = dot(vec3(cbLight._m0[_1623].xyz), vec3(_350, _351, _352));
    float _3788 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
    float _3799 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
    float _1642 = (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * 0.3183098733425140380859375;
    float _1644 = (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * 0.3183098733425140380859375;
    float _1651 = ((cbLight._m0[_1599].x * _1605) * _1644) + (((cbLight._m0[_1609].x * _1574) * _1619) * _1642);
    float _1652 = ((_1605 * cbLight._m0[_1599].y) * _1644) + (((cbLight._m0[_1609].y * _1575) * _1619) * _1642);
    float _1653 = ((_1605 * cbLight._m0[_1599].z) * _1644) + (((cbLight._m0[_1609].z * _1576) * _1619) * _1642);
    uvec4 _1657 = floatBitsToUint(cbLight._m0[_1582 + 12u]);
    bool _1659 = _1657.x == 0u;
    float _1670;
    float _1672;
    float _1674;
    if (_1659)
    {
        _1670 = _1651;
        _1672 = _1652;
        _1674 = _1653;
    }
    else
    {
        uint _1678 = _1582 + 6u;
        float _1694 = (dot(vec3(cbLight._m0[_1582 + 2u].xyz), vec3(_350, _351, _352)) * 0.5) + 0.5;
        float _1695 = _1694 * _1694;
        float _3810 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1697 = isnan(1.0) ? _1597 : (isnan(_1597) ? 1.0 : min(_1597, 1.0));
        _1670 = (((cbLight._m0[_1678].x * 0.3183098733425140380859375) * _1696) * _1697) + _1651;
        _1672 = (((cbLight._m0[_1678].y * 0.3183098733425140380859375) * _1696) * _1697) + _1652;
        _1674 = (((cbLight._m0[_1678].z * 0.3183098733425140380859375) * _1696) * _1697) + _1653;
    }
    bool _1677 = _1657.y == 0u;
    float _1715;
    float _1717;
    float _1719;
    if (_1677)
    {
        _1715 = _1670;
        _1717 = _1672;
        _1719 = _1674;
    }
    else
    {
        uint _1888 = _1582 + 7u;
        float _1904 = (dot(vec3(cbLight._m0[_1582 + 3u].xyz), vec3(_350, _351, _352)) * 0.5) + 0.5;
        float _1905 = _1904 * _1904;
        float _3826 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1906 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1907 = isnan(1.0) ? _1598 : (isnan(_1598) ? 1.0 : min(_1598, 1.0));
        _1715 = (((cbLight._m0[_1888].x * 0.3183098733425140380859375) * _1906) * _1907) + _1670;
        _1717 = (((cbLight._m0[_1888].y * 0.3183098733425140380859375) * _1906) * _1907) + _1672;
        _1719 = (((cbLight._m0[_1888].z * 0.3183098733425140380859375) * _1906) * _1907) + _1674;
    }
    uint _1722 = _1582 + 8u;
    float _1735 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1582].w)) * _353) * 0.949999988079071044921875);
    float _1736 = _1735 * _1735;
    float _1737 = cbLight._m0[_1582].x + _431;
    float _1738 = cbLight._m0[_1582].y + _432;
    float _1739 = cbLight._m0[_1582].z + _433;
    float _1743 = inversesqrt(dot(vec3(_1737, _1738, _1739), vec3(_1737, _1738, _1739)));
    float _1744 = _1743 * _1737;
    float _1745 = _1743 * _1738;
    float _1746 = _1743 * _1739;
    float _1747 = dot(vec3(_350, _351, _352), vec3(cbLight._m0[_1582].xyz));
    float _3842 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1750 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _3853 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _1751 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _1752 = dot(vec3(_350, _351, _352), vec3(_1744, _1745, _1746));
    float _3864 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1755 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _1756 = dot(vec3(cbLight._m0[_1582].xyz), vec3(_1744, _1745, _1746));
    float _3875 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1760 = _1736 * _1736;
    float _1764 = ((_1755 * _1755) * (_1760 + (-1.0))) + 1.0;
    float _1772 = exp2(log2(1.0 - (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) * 5.0);
    float _1773 = 0.959999978542327880859375 - _502;
    float _1775 = 0.959999978542327880859375 - _503;
    float _1776 = 0.959999978542327880859375 - _504;
    float _1783 = 1.0 - _1736;
    float _1794 = (0.5 / (((_1751 * ((_1750 * _1783) + _1736)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _1783) + _1736) * _1750))) * _1750;
    float _3886 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1796 = (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1760 / ((_1764 * _1764) * 3.141590118408203125));
    uint _1810 = _1582 + 9u;
    float _1821 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1623].w)) * _353) * 0.949999988079071044921875);
    float _1822 = _1821 * _1821;
    float _1823 = cbLight._m0[_1623].x + _431;
    float _1824 = cbLight._m0[_1623].y + _432;
    float _1825 = cbLight._m0[_1623].z + _433;
    float _1829 = inversesqrt(dot(vec3(_1823, _1824, _1825), vec3(_1823, _1824, _1825)));
    float _1830 = _1829 * _1823;
    float _1831 = _1829 * _1824;
    float _1832 = _1829 * _1825;
    float _1833 = dot(vec3(_350, _351, _352), vec3(cbLight._m0[_1623].xyz));
    float _3897 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1836 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _1837 = dot(vec3(_350, _351, _352), vec3(_1830, _1831, _1832));
    float _3908 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1840 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _1841 = dot(vec3(cbLight._m0[_1623].xyz), vec3(_1830, _1831, _1832));
    float _3919 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1845 = _1822 * _1822;
    float _1849 = ((_1840 * _1840) * (_1845 + (-1.0))) + 1.0;
    float _1856 = exp2(log2(1.0 - (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) * 5.0);
    float _1863 = 1.0 - _1822;
    float _1873 = (0.5 / (((_1751 * ((_1836 * _1863) + _1822)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _1863) + _1822) * _1836))) * _1836;
    float _3930 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1875 = (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1845 / ((_1849 * _1849) * 3.141590118408203125));
    float _1885 = (((((_1856 * _1773) + _505) * cbLight._m0[_1810].x) * _1875) * _1605) + ((((cbLight._m0[_1722].x * _1574) * ((_1772 * _1773) + _505)) * _1796) * _1619);
    float _1886 = (((((_1856 * _1775) + _507) * cbLight._m0[_1810].y) * _1875) * _1605) + ((((cbLight._m0[_1722].y * _1575) * ((_1772 * _1775) + _507)) * _1796) * _1619);
    float _1887 = (((((_1856 * _1776) + _508) * cbLight._m0[_1810].z) * _1875) * _1605) + ((((cbLight._m0[_1722].z * _1576) * ((_1772 * _1776) + _508)) * _1796) * _1619);
    float _1949;
    float _1951;
    float _1953;
    if (_1659)
    {
        _1949 = _1885;
        _1951 = _1886;
        _1953 = _1887;
    }
    else
    {
        uint _1955 = _1582 + 2u;
        uint _1959 = _1582 + 10u;
        float _1973 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1955].w)) * _353) * 0.949999988079071044921875);
        float _1974 = _1973 * _1973;
        float _1975 = cbLight._m0[_1955].x + _431;
        float _1976 = cbLight._m0[_1955].y + _432;
        float _1977 = cbLight._m0[_1955].z + _433;
        float _1981 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
        float _1982 = _1981 * _1975;
        float _1983 = _1981 * _1976;
        float _1984 = _1981 * _1977;
        float _1985 = dot(vec3(_350, _351, _352), vec3(cbLight._m0[_1955].xyz));
        float _3941 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1988 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1989 = dot(vec3(_350, _351, _352), vec3(_1982, _1983, _1984));
        float _3952 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1992 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1993 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_1982, _1983, _1984));
        float _3963 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _1997 = _1974 * _1974;
        float _2001 = ((_1992 * _1992) * (_1997 + (-1.0))) + 1.0;
        float _2008 = exp2(log2(1.0 - (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) * 5.0);
        float _2015 = 1.0 - _1974;
        float _2025 = (0.5 / (((_1751 * ((_1988 * _2015) + _1974)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _2015) + _1974) * _1988))) * _1988;
        float _3974 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2027 = (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1997 / ((_2001 * _2001) * 3.141590118408203125));
        float _2028 = isnan(1.0) ? _1597 : (isnan(_1597) ? 1.0 : min(_1597, 1.0));
        _1949 = (((((_2008 * _1773) + _505) * cbLight._m0[_1959].x) * _2027) * _2028) + _1885;
        _1951 = (((((_2008 * _1775) + _507) * cbLight._m0[_1959].y) * _2027) * _2028) + _1886;
        _1953 = (((((_2008 * _1776) + _508) * cbLight._m0[_1959].z) * _2027) * _2028) + _1887;
    }
    float _2063;
    float _2065;
    float _2067;
    if (_1677)
    {
        _2063 = _1949;
        _2065 = _1951;
        _2067 = _1953;
    }
    else
    {
        uint _2074 = _1582 + 3u;
        uint _2078 = _1582 + 11u;
        float _2092 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2074].w)) * _353) * 0.949999988079071044921875);
        float _2093 = _2092 * _2092;
        float _2094 = cbLight._m0[_2074].x + _431;
        float _2095 = cbLight._m0[_2074].y + _432;
        float _2096 = cbLight._m0[_2074].z + _433;
        float _2100 = inversesqrt(dot(vec3(_2094, _2095, _2096), vec3(_2094, _2095, _2096)));
        float _2101 = _2100 * _2094;
        float _2102 = _2100 * _2095;
        float _2103 = _2100 * _2096;
        float _2104 = dot(vec3(_350, _351, _352), vec3(cbLight._m0[_2074].xyz));
        float _3990 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2107 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _2108 = dot(vec3(_350, _351, _352), vec3(_2101, _2102, _2103));
        float _4001 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2111 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _2112 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_2101, _2102, _2103));
        float _4012 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2116 = _2093 * _2093;
        float _2120 = ((_2111 * _2111) * (_2116 + (-1.0))) + 1.0;
        float _2127 = exp2(log2(1.0 - (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * 5.0);
        float _2134 = 1.0 - _2093;
        float _2144 = (0.5 / (((_1751 * ((_2107 * _2134) + _2093)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _2134) + _2093) * _2107))) * _2107;
        float _4023 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2146 = (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_2116 / ((_2120 * _2120) * 3.141590118408203125));
        float _2147 = isnan(1.0) ? _1598 : (isnan(_1598) ? 1.0 : min(_1598, 1.0));
        _2063 = (((((_2127 * _1773) + _505) * cbLight._m0[_2078].x) * _2146) * _2147) + _1949;
        _2065 = (((((_2127 * _1775) + _507) * cbLight._m0[_2078].y) * _2146) * _2147) + _1951;
        _2067 = (((((_2127 * _1776) + _508) * cbLight._m0[_2078].z) * _2146) * _2147) + _1953;
    }
    float _2282;
    float _2284;
    float _2286;
    float _2288;
    float _2290;
    float _2292;
    if (_1580.y == 0u)
    {
        float _2222 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2223 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2222;
        float _2224 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2222;
        float _2225 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2222;
        uvec4 _2237 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2238 = _2237.x;
        uint _2249 = uint((float(_2237.y) * floor(float(uint(cbSceneParam._m0[85u].y * _440) / _2238))) + floor(float(uint(cbSceneParam._m0[85u].x * _439) / _2238)));
        float _2259 = (log2(_2225 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2260 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        uint _2263 = uint(isnan(14.0) ? _2260 : (isnan(_2260) ? 14.0 : min(_2260, 14.0)));
        uvec4 _2268 = texelFetch(g_lightClusterGridBuffer, int(((_2263 << 2u) + (_2249 << 6u)) >> 2u));
        uint _2269 = _2268.x;
        uint _2270 = _2237.z;
        float _2408;
        float _2410;
        float _2412;
        float _2414;
        float _2416;
        float _2418;
        if (((((1u << ((_2270 >> 4u) & 15u)) + 4294967295u) & _2269) == 0u) || ((_2270 & 240u) == 0u))
        {
            _2408 = 0.0;
            _2410 = 0.0;
            _2412 = 0.0;
            _2414 = 0.0;
            _2416 = 0.0;
            _2418 = 0.0;
        }
        else
        {
            float _2409;
            float _2411;
            float _2413;
            float _2415;
            float _2417;
            float _2419;
            float _2562 = 0.0;
            float _2563 = 0.0;
            float _2564 = 0.0;
            float _2565 = 0.0;
            float _2566 = 0.0;
            float _2567 = 0.0;
            uint _2568 = 0u;
            uint _2577;
            bool _2578;
            for (;;)
            {
                _2577 = texelFetch(g_lightClassification, int((((_2263 << 5u) + (_2249 << 9u)) + (_2568 << 2u)) >> 2u)).x;
                _2578 = _2577 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2578)
                {
                    frontier_phi_61_pred = _2562;
                    frontier_phi_61_pred_1 = _2567;
                    frontier_phi_61_pred_2 = _2566;
                    frontier_phi_61_pred_3 = _2565;
                    frontier_phi_61_pred_4 = _2564;
                    frontier_phi_61_pred_5 = _2563;
                }
                else
                {
                    float _2686;
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    uint _2692;
                    _2686 = _2562;
                    _2687 = _2563;
                    _2688 = _2564;
                    _2689 = _2565;
                    _2690 = _2566;
                    _2691 = _2567;
                    _2692 = _2577;
                    float _2618;
                    float _2619;
                    float _2620;
                    float _2621;
                    float _2622;
                    float _2623;
                    for (;;)
                    {
                        uint _2696 = uint(findLSB(_2692)) + (_2568 << 5u);
                        uint _2693 = (_2692 + 4294967295u) & _2692;
                        uint _2698 = _2696 * 48u;
                        vec4 _2712 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2698)).x, texelFetch(g_PointLightRenderingBuffer, int(_2698 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2698 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2698 + 3u)).x));
                        uint _2718 = (_2696 * 48u) + 4u;
                        vec4 _2731 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2718)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 3u)).x));
                        uint _2737 = (_2696 * 48u) + 8u;
                        vec3 _2748 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2737)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 2u)).x));
                        float _2752 = _2712.x - _2223;
                        float _2753 = _2712.y - _2224;
                        float _2754 = _2712.z - _2225;
                        float _2755 = dot(vec3(_2752, _2753, _2754), vec3(_2752, _2753, _2754));
                        float _2758 = inversesqrt(_2755);
                        float _2759 = _2758 * _2752;
                        float _2760 = _2758 * _2753;
                        float _2761 = _2758 * _2754;
                        float _2762 = dot(vec3(_461, _464, _467), vec3(_2759, _2760, _2761));
                        float _2767 = 1.0 - (_2755 * _2712.w);
                        float _4049 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
                        float _2768 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                        float _2769 = sqrt(_2755) * _2731.w;
                        float _2772 = 1.39999997615814208984375 / (_2769 + 1.39999997615814208984375);
                        float _2773 = _2772 * _2772;
                        float _2776 = ((1.0 - _2773) * _2762) + _2773;
                        float _2779 = _2769 * _2769;
                        float _2783 = ((isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0))) * _2768) / ((_2779 * 0.699999988079071044921875) + 1.0);
                        float _2787 = (-0.0) - _2223;
                        float _2788 = (-0.0) - _2224;
                        float _2789 = (-0.0) - _2225;
                        float _2793 = inversesqrt(dot(vec3(_2787, _2788, _2789), vec3(_2787, _2788, _2789)));
                        float _2794 = _2793 * _2787;
                        float _2795 = _2793 * _2788;
                        float _2796 = _2793 * _2789;
                        float _2804 = exp2(log2(1.0 / ((_2779 * 3.5) + 5.0)) * 0.25);
                        float _2805 = 1.0 - _536;
                        float _2812 = sqrt(1.0 - ((1.0 - (_2805 * _2805)) * (1.0 - (_2804 * _2804))));
                        float _2813 = _2812 * _2812;
                        float _2814 = _2813 * _2813;
                        float _2815 = _2794 + _2759;
                        float _2816 = _2795 + _2760;
                        float _2817 = _2796 + _2761;
                        float _2821 = inversesqrt(dot(vec3(_2815, _2816, _2817), vec3(_2815, _2816, _2817)));
                        float _2825 = dot(vec3(_461, _464, _467), vec3(_2794, _2795, _2796));
                        float _4065 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
                        float _2828 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                        float _2829 = dot(vec3(_461, _464, _467), vec3(_2821 * _2815, _2821 * _2816, _2821 * _2817));
                        float _4076 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
                        float _2832 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
                        float _2836 = ((_2832 * _2832) * (_2814 + (-1.0))) + 1.0;
                        float _2837 = _2772 * _2813;
                        float _2838 = _2837 * _2837;
                        float _2841 = ((1.0 - _2838) * _2762) + _2838;
                        float _4087 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
                        float _2842 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                        float _2843 = 1.0 - _2813;
                        float _2853 = (0.5 / (((_2842 * ((_2828 * _2843) + _2813)) + 9.9999999392252902907785028219223e-09) + (((_2842 * _2843) + _2813) * _2828))) * _2842;
                        float _4098 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
                        float _2864 = (((_2814 * 3.1415927410125732421875) * (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) / ((_2836 * _2836) * ((_2779 * 2.1991131305694580078125) + 3.141590118408203125))) * _2768;
                        _2621 = (_2783 * _2731.x) + _2689;
                        _2622 = (_2783 * _2731.y) + _2690;
                        _2623 = (_2783 * _2731.z) + _2691;
                        _2618 = (_2864 * _2748.x) + _2686;
                        _2619 = (_2864 * _2748.y) + _2687;
                        _2620 = (_2864 * _2748.z) + _2688;
                        if (_2693 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2686 = _2618;
                            _2687 = _2619;
                            _2688 = _2620;
                            _2689 = _2621;
                            _2690 = _2622;
                            _2691 = _2623;
                            _2692 = _2693;
                        }
                    }
                    frontier_phi_61_pred = _2618;
                    frontier_phi_61_pred_1 = _2623;
                    frontier_phi_61_pred_2 = _2622;
                    frontier_phi_61_pred_3 = _2621;
                    frontier_phi_61_pred_4 = _2620;
                    frontier_phi_61_pred_5 = _2619;
                }
                _2409 = frontier_phi_61_pred;
                _2419 = frontier_phi_61_pred_1;
                _2417 = frontier_phi_61_pred_2;
                _2415 = frontier_phi_61_pred_3;
                _2413 = frontier_phi_61_pred_4;
                _2411 = frontier_phi_61_pred_5;
                uint _2569 = _2568 + 1u;
                if (_2569 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2562 = _2409;
                    _2563 = _2411;
                    _2564 = _2413;
                    _2565 = _2415;
                    _2566 = _2417;
                    _2567 = _2419;
                    _2568 = _2569;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2408 = _2409;
            _2410 = _2411;
            _2412 = _2413;
            _2414 = _2415;
            _2416 = _2417;
            _2418 = _2419;
        }
        uvec4 _2422 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2423 = _2422.z;
        uint _2425 = (_2423 >> 8u) & 15u;
        float _2530;
        float _2532;
        float _2534;
        float _2536;
        float _2538;
        float _2540;
        if (((4294967295u << _2425) & _2269) == 0u)
        {
            _2530 = _2408;
            _2532 = _2410;
            _2534 = _2412;
            _2536 = _2414;
            _2538 = _2416;
            _2540 = _2418;
        }
        else
        {
            float _2555 = inversesqrt(dot(vec3(_2223, _2224, _2225), vec3(_2223, _2224, _2225)));
            float _2556 = _2555 * _2223;
            float _2557 = _2555 * _2224;
            float _2558 = _2555 * _2225;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2425 < ((_2423 >> 12u) & 15u))
            {
                float _2531;
                float _2533;
                float _2535;
                float _2537;
                float _2539;
                float _2541;
                float _2669 = _2408;
                float _2670 = _2410;
                float _2671 = _2412;
                float _2672 = _2414;
                float _2673 = _2416;
                float _2674 = _2418;
                uint _2675 = _2425;
                uint _2684;
                bool _2685;
                for (;;)
                {
                    _2684 = texelFetch(g_lightClassification, int((((_2263 << 5u) + (_2249 << 9u)) + (_2675 << 2u)) >> 2u)).x;
                    _2685 = _2684 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2685)
                    {
                        frontier_phi_67_pred = _2672;
                        frontier_phi_67_pred_1 = _2673;
                        frontier_phi_67_pred_2 = _2674;
                        frontier_phi_67_pred_3 = _2671;
                        frontier_phi_67_pred_4 = _2670;
                        frontier_phi_67_pred_5 = _2669;
                    }
                    else
                    {
                        float _2869;
                        float _2870;
                        float _2871;
                        float _2872;
                        float _2873;
                        float _2874;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3170;
                        float _2882 = _2669;
                        float _2883 = _2670;
                        float _2884 = _2671;
                        float _2885 = _2672;
                        float _2886 = _2673;
                        float _2887 = _2674;
                        uint _2888 = _2684;
                        uint _2889;
                        vec4 _2914;
                        float _2915;
                        vec4 _2930;
                        vec3 _2942;
                        vec4 _2958;
                        vec4 _2974;
                        float _3021;
                        bool _3022;
                        for (;;)
                        {
                            uint _2899 = ((_2675 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2888));
                            _2889 = (_2888 + 4294967295u) & _2888;
                            uint _2901 = _2899 * 40u;
                            _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            _2915 = _2914.w;
                            uint _2917 = (_2899 * 40u) + 4u;
                            _2930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 3u)).x));
                            uint _2932 = (_2899 * 40u) + 8u;
                            _2942 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x));
                            uint _2945 = (_2899 * 40u) + 16u;
                            _2958 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 3u)).x));
                            uint _2961 = (_2899 * 40u) + 20u;
                            _2974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 3u)).x));
                            uint _2977 = (_2899 * 40u) + 24u;
                            vec4 _2990 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 3u)).x));
                            uint _2996 = (_2899 * 40u) + 28u;
                            vec4 _3009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 3u)).x));
                            _3021 = fma(_2225, _3009.z, fma(_2224, _3009.y, _3009.x * _2223)) + _3009.w;
                            _3022 = !((fma(_2225, _2990.z, fma(_2224, _2990.y, _2990.x * _2223)) + _2990.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3022)
                            {
                                float _3049 = _2914.x - _2223;
                                float _3050 = _2914.y - _2224;
                                float _3051 = _2914.z - _2225;
                                float _3052 = dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051));
                                float _3055 = inversesqrt(_3052);
                                float _3056 = _3055 * _3049;
                                float _3057 = _3055 * _3050;
                                float _3058 = _3055 * _3051;
                                float _3062 = 1.0 - (_3052 / (_2915 * _2915));
                                float _4109 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                                float _3063 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
                                float _3067 = sqrt(_3052) * _2930.w;
                                float _3069 = 1.39999997615814208984375 / (_3067 + 1.39999997615814208984375);
                                float _3070 = _3069 * _3069;
                                float _3073 = ((1.0 - _3070) * dot(vec3(_3056, _3057, _3058), vec3(_461, _464, _467))) + _3070;
                                float _3076 = _3067 * _3067;
                                float _3080 = (fma(_2225, _2958.z, fma(_2224, _2958.y, _2958.x * _2223)) + _2958.w) / _3021;
                                float _3081 = (fma(_2225, _2974.z, fma(_2224, _2974.y, _2974.x * _2223)) + _2974.w) / _3021;
                                float _3085 = 1.0 - dot(vec2(_3080, _3081), vec2(_3080, _3081));
                                float _4125 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                                float _3086 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                                float _3087 = _3086 * (((isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0))) * _3063) / ((_3076 * 0.699999988079071044921875) + 1.0));
                                float _3099 = exp2(log2(1.0 / ((_3076 * 3.5) + 5.0)) * 0.25);
                                float _3100 = 1.0 - _536;
                                float _3107 = sqrt(1.0 - ((1.0 - (_3100 * _3100)) * (1.0 - (_3099 * _3099))));
                                float _3108 = _3107 * _3107;
                                float _3109 = _3108 * _3108;
                                float _3110 = _3056 - _2556;
                                float _3111 = _3057 - _2557;
                                float _3112 = _3058 - _2558;
                                float _3116 = inversesqrt(dot(vec3(_3110, _3111, _3112), vec3(_3110, _3111, _3112)));
                                float _3120 = dot(vec3(_461, _464, _467), vec3((-0.0) - _2556, (-0.0) - _2557, (-0.0) - _2558));
                                float _4136 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3123 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                                float _3124 = dot(vec3(_461, _464, _467), vec3(_3116 * _3110, _3116 * _3111, _3116 * _3112));
                                float _4147 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                                float _3127 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
                                float _3131 = ((_3127 * _3127) * (_3109 + (-1.0))) + 1.0;
                                float _3132 = _3069 * _3108;
                                float _3133 = _3132 * _3132;
                                float _3139 = ((1.0 - _3133) * dot(vec3(_461, _464, _467), vec3(_3056, _3057, _3058))) + _3133;
                                float _4158 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                                float _3140 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                                float _3141 = 1.0 - _3108;
                                float _3151 = (0.5 / (((_3140 * ((_3123 * _3141) + _3108)) + 9.9999999392252902907785028219223e-09) + (((_3140 * _3141) + _3108) * _3123))) * _3140;
                                float _4169 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                                float _3161 = (_3086 * _3063) * (((_3109 * 3.1415927410125732421875) * (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) / ((_3131 * _3131) * ((_3076 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3161 * _2942.x;
                                frontier_phi_73_pred_1 = _3161 * _2942.y;
                                frontier_phi_73_pred_2 = _3087 * _2930.z;
                                frontier_phi_73_pred_3 = _3087 * _2930.y;
                                frontier_phi_73_pred_4 = _3087 * _2930.x;
                                frontier_phi_73_pred_5 = _3161 * _2942.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3165 = frontier_phi_73_pred;
                            _3166 = frontier_phi_73_pred_1;
                            _3170 = frontier_phi_73_pred_2;
                            _3169 = frontier_phi_73_pred_3;
                            _3168 = frontier_phi_73_pred_4;
                            _3167 = frontier_phi_73_pred_5;
                            _2872 = _3168 + _2885;
                            _2873 = _3169 + _2886;
                            _2874 = _3170 + _2887;
                            _2869 = _3165 + _2882;
                            _2870 = _3166 + _2883;
                            _2871 = _3167 + _2884;
                            if (_2889 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2882 = _2869;
                                _2883 = _2870;
                                _2884 = _2871;
                                _2885 = _2872;
                                _2886 = _2873;
                                _2887 = _2874;
                                _2888 = _2889;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2872;
                        frontier_phi_67_pred_1 = _2873;
                        frontier_phi_67_pred_2 = _2874;
                        frontier_phi_67_pred_3 = _2871;
                        frontier_phi_67_pred_4 = _2870;
                        frontier_phi_67_pred_5 = _2869;
                    }
                    _2537 = frontier_phi_67_pred;
                    _2539 = frontier_phi_67_pred_1;
                    _2541 = frontier_phi_67_pred_2;
                    _2535 = frontier_phi_67_pred_3;
                    _2533 = frontier_phi_67_pred_4;
                    _2531 = frontier_phi_67_pred_5;
                    uint _2676 = _2675 + 1u;
                    if (_2676 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2669 = _2531;
                        _2670 = _2533;
                        _2671 = _2535;
                        _2672 = _2537;
                        _2673 = _2539;
                        _2674 = _2541;
                        _2675 = _2676;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2539;
                frontier_phi_55_56_ladder_1 = _2541;
                frontier_phi_55_56_ladder_2 = _2537;
                frontier_phi_55_56_ladder_3 = _2535;
                frontier_phi_55_56_ladder_4 = _2533;
                frontier_phi_55_56_ladder_5 = _2531;
            }
            else
            {
                frontier_phi_55_56_ladder = _2416;
                frontier_phi_55_56_ladder_1 = _2418;
                frontier_phi_55_56_ladder_2 = _2414;
                frontier_phi_55_56_ladder_3 = _2412;
                frontier_phi_55_56_ladder_4 = _2410;
                frontier_phi_55_56_ladder_5 = _2408;
            }
            _2530 = frontier_phi_55_56_ladder_5;
            _2532 = frontier_phi_55_56_ladder_4;
            _2534 = frontier_phi_55_56_ladder_3;
            _2536 = frontier_phi_55_56_ladder_2;
            _2538 = frontier_phi_55_56_ladder;
            _2540 = frontier_phi_55_56_ladder_1;
        }
        float _2545 = isnan(1.0) ? _520 : (isnan(_520) ? 1.0 : min(_520, 1.0));
        _2282 = (_2545 * _2536) + _1715;
        _2284 = (_2545 * _2538) + _1717;
        _2286 = (_2545 * _2540) + _1719;
        _2288 = ((_2530 * _505) * _2545) + _2063;
        _2290 = ((_2532 * _507) * _2545) + _2065;
        _2292 = ((_2534 * _508) * _2545) + _2067;
    }
    else
    {
        _2282 = _1715;
        _2284 = _1717;
        _2286 = _1719;
        _2288 = _2063;
        _2290 = _2065;
        _2292 = _2067;
    }
    uint _2298 = _481 + uint(cbMatDynParam._m0[0u].w);
    float _2307 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _316.x) * _336) * cbInstanceData._m0[_2298].x;
    float _2311 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _316.y) * _336) * cbInstanceData._m0[_2298].y;
    float _2315 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _316.z) * _336) * cbInstanceData._m0[_2298].z;
    float _4185 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _4196 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _4207 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _2332 = (((isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_2282 + ((isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))) * _520))) + ((_2288 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _1329)) * cbPerFrame._m0[3u].x)) + _2307;
    float _2334 = (_2311 + ((_2290 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _1329)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_2284 + ((isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))) * _520)));
    float _2336 = (_2315 + ((_2292 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _1329)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_2286 + ((isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))) * _520)));
    float _4233 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2349 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    uint _2350 = _480 + 6u;
    float _2358 = _439 / cbSceneParam._m0[86u].x;
    float _2359 = _440 / cbSceneParam._m0[86u].y;
    vec4 _2373 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2358, _2359, (log2((isnan(cbSceneParam._m0[77u].w) ? _373 : (isnan(_373) ? cbSceneParam._m0[77u].w : min(_373, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2375 = _2373.x;
    float _2376 = _2373.y;
    float _2377 = _2373.z;
    float _2378 = _2373.w;
    float _2471;
    float _2473;
    float _2475;
    float _2477;
    if (_373 > cbSceneParam._m0[78u].w)
    {
        float _2433 = isnan(_373) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _373 : min(cbSceneParam._m0[80u].w, _373));
        float _2434 = _2433 / _373;
        float _2445 = _2434 * _424;
        float _2446 = _425 * _2434;
        float _2447 = (-0.0) - _2446;
        float _2449 = _2434 * _426;
        float _2451 = (cbSceneParam._m0[77u].w * _2447) / _2433;
        float _2452 = _2451 + cbSceneParam._m0[79u].w;
        float _2453 = cbSceneParam._m0[79u].w - _2446;
        float _2459 = sqrt(((_2445 * _2445) + (_2446 * _2446)) + (_2449 * _2449));
        float _2462 = (1.0 - (cbSceneParam._m0[77u].w / _2433)) * _2459;
        float _2467 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2469 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2631;
        if (abs((_2447 - _2451) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2631 = ((((_2452 > 0.0) ? exp2(_2467 * _2452) : (2.0 - exp2(_2469 * _2452))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2462;
        }
        else
        {
            float _2591 = 1.0 / cbSceneParam._m0[80u].x;
            float _2592 = isnan(_2453) ? _2452 : (isnan(_2452) ? _2453 : max(_2452, _2453));
            float _2593 = isnan(_2453) ? _2452 : (isnan(_2452) ? _2453 : min(_2452, _2453));
            float _2602 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : min(_2592, 0.0));
            float _2603 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : min(_2593, 0.0));
            _2631 = ((abs(_2459 / _2447) * cbSceneParam._m0[80u].y) * ((((_2602 - _2603) * 2.0) - ((exp2(_2467 * (isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0)))) - exp2(_2467 * (isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0))))) * _2591)) - ((exp2(_2469 * _2602) - exp2(_2469 * _2603)) * _2591))) + (_2462 * cbSceneParam._m0[80u].z);
        }
        vec4 _2633 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2358, _2359, 1.0), 0.0);
        float _2642 = exp2((_2631 * (-1.44269502162933349609375)) * (1.0 - _2633.w));
        float _2643 = log2(_2642);
        float _2659 = log2(_2378);
        _2471 = (exp2(_2659 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2643 * cbSceneParam._m0[78u].x)) * _2633.x) / cbSceneParam._m0[78u].x)) + _2375;
        _2473 = (exp2(_2659 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2643 * cbSceneParam._m0[78u].y)) * _2633.y) / cbSceneParam._m0[78u].y)) + _2376;
        _2475 = (exp2(_2659 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2643 * cbSceneParam._m0[78u].z)) * _2633.z) / cbSceneParam._m0[78u].z)) + _2377;
        _2477 = _2642 * _2378;
    }
    else
    {
        _2471 = _2375;
        _2473 = _2376;
        _2475 = _2377;
        _2477 = _2378;
    }
    float _2489 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2490 = _2489 == 3.0;
    float _2491 = log2(_2477);
    float _2495 = exp2(_2491 * cbSceneParam._m0[78u].x);
    float _2496 = exp2(_2491 * cbSceneParam._m0[78u].y);
    float _2497 = exp2(_2491 * cbSceneParam._m0[78u].z);
    float _2498 = _2495 * (isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0)));
    float _2499 = _2496 * (isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0)));
    float _2500 = _2497 * (isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0)));
    float _2509 = (_2489 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2509 * (_2490 ? _2498 : (_2498 + (cbSceneParam._m0[72u].w * _2471)));
    SV_Target.y = _2509 * (_2490 ? _2499 : (_2499 + (cbSceneParam._m0[72u].w * _2473)));
    SV_Target.z = _2509 * (_2490 ? _2500 : (_2500 + (cbSceneParam._m0[72u].w * _2475)));
    SV_Target.w = cbInstanceData._m0[_2350].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2307) * _2349) * _2495) * _2509;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2311) * _2349) * _2496) * _2509;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2315) * _2349) * _2497) * _2509;
    SV_Target_1.w = cbInstanceData._m0[_2350].w;
}


