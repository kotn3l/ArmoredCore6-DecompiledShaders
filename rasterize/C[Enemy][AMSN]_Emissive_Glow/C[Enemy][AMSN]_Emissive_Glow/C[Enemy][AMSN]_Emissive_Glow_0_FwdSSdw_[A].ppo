#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _906;
float _3364;
float _3365;
float _3366;
float _3367;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _228.x * cbMtdParam._m0[9u].x;
    float _235 = _228.y * cbMtdParam._m0[9u].y;
    float _236 = _228.z * cbMtdParam._m0[9u].z;
    vec4 _248 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _250 = _248.x;
    vec4 _262 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _266 = _262.z;
    float _270 = (_262.x * 2.0) + (-1.0);
    float _272 = (_262.y * 2.0) + (-1.0);
    float _273 = dot(vec2(_270, _272), vec2(_270, _272));
    float _3376 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _279 = sqrt(1.0 - (isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0))));
    vec4 _301 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _308 = fma(_279, _198 * NORMAL.x, fma(_272, _205 * TANGENT.x, (_191 * _184) * _270));
    float _311 = fma(_279, _198 * NORMAL.y, fma(_272, _205 * TANGENT.y, (_191 * _185) * _270));
    float _314 = fma(_279, _198 * NORMAL.z, fma(_272, _205 * TANGENT.z, (_191 * _186) * _270));
    float _318 = inversesqrt(dot(vec3(_308, _311, _314), vec3(_308, _311, _314)));
    float _319 = _318 * _308;
    float _320 = _318 * _311;
    float _321 = _318 * _314;
    float _3387 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _322 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
    float _3398 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3409 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3420 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3431 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _326 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
    float _342 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _383 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _393 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _383);
    float _394 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _383);
    float _395 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _383);
    float _399 = inversesqrt(dot(vec3(_393, _394, _395), vec3(_393, _394, _395)));
    float _400 = _393 * _399;
    float _401 = _394 * _399;
    float _402 = _395 * _399;
    vec4 _407 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _409 = _407.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _585 = sqrt(((_393 * _393) + (_394 * _394)) + (_395 * _395));
        float _591 = (cbMatDynParam._m0[5u].x * _585) + cbMatDynParam._m0[5u].y;
        float _3442 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
        float _592 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
        float _596 = (cbMatDynParam._m0[5u].z * _585) + cbMatDynParam._m0[5u].w;
        float _3453 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))) - _592)) + _592) < ((_409 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _421 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _422 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _442 = fma(_321, cbSceneParam._m0[5u].z, fma(_320, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _319));
    float _445 = fma(_321, cbSceneParam._m0[6u].z, fma(_320, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _319));
    float _448 = fma(_321, cbSceneParam._m0[7u].z, fma(_320, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _319));
    uint _461 = uint(roundEven(NORMAL.w)) * 13u;
    uint _463 = _461 + 9u;
    uint _464 = _463 + uint(cbMatDynParam._m0[0u].w);
    float _470 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0)))) * cbInstanceData._m0[_464].x;
    float _471 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0)))) * cbInstanceData._m0[_464].y;
    float _472 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0)))) * cbInstanceData._m0[_464].z;
    float _3464 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
    float _3475 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    float _3486 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _476 = 1.0 - _326;
    float _477 = _473 * _476;
    float _478 = _474 * _476;
    float _479 = _475 * _476;
    float _484 = (_473 + (-0.039999999105930328369140625)) * _326;
    float _485 = (_474 + (-0.039999999105930328369140625)) * _326;
    float _486 = (_475 + (-0.039999999105930328369140625)) * _326;
    float _487 = _484 + 0.039999999105930328369140625;
    float _489 = _485 + 0.039999999105930328369140625;
    float _490 = _486 + 0.039999999105930328369140625;
    vec4 _499 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _421, cbSceneParam._m0[86u].y * _422));
    float _502 = _499.x * TEXCOORD.z;
    float _503 = dot(vec3(_319, _320, _321), vec3(_400, _401, _402));
    float _506 = _503 * 2.0;
    float _510 = (_506 * _319) - _400;
    float _511 = (_506 * _320) - _401;
    float _512 = (_506 * _321) - _402;
    float _516 = abs(dot(vec3(_400, _401, _402), vec3(_319, _320, _321)));
    float _3497 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _518 = sqrt(_322);
    float _531 = exp2((_518 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_518 * 3.0));
    float _537 = (1.0 - _531) * ((_518 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _538 = _531 * _518;
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _905;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _630 = fma(_574, cbModelParam._m0[26u].z, fma(_570, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _566));
        float _634 = fma(_574, cbModelParam._m0[27u].z, fma(_570, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _566));
        float _638 = fma(_574, cbModelParam._m0[28u].z, fma(_570, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _566));
        float _663 = _566 + _319;
        float _664 = _570 + _320;
        float _665 = _574 + _321;
        float _675 = fma(_665, cbModelParam._m0[26u].z, fma(_664, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _663)) - _630;
        float _676 = fma(_665, cbModelParam._m0[27u].z, fma(_664, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _663)) - _634;
        float _677 = fma(_665, cbModelParam._m0[28u].z, fma(_664, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _663)) - _638;
        float _681 = inversesqrt(dot(vec3(_675, _676, _677), vec3(_675, _676, _677)));
        float _694 = ((_681 * _675) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_630 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _695 = ((_681 * _676) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_634 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _696 = ((_681 * _677) / cbModelParam._m0[34u].z) + ((((((_638 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _699 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_694, _695, _696), 0.0);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_694, _695, _696), 0.0);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_694, _695, _696), 0.0);
        vec4 _720 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_694, _695, _696), 0.0);
        float _733 = exp2((_699.w + (-0.5)) * 20.0) * 2.0;
        float _734 = _733 * (_699.x + (-0.5));
        float _735 = _733 * (_699.y + (-0.5));
        float _736 = _733 * (_699.z + (-0.5));
        float _743 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _744 = _743 * (_706.x + (-0.5));
        float _745 = _743 * (_706.y + (-0.5));
        float _746 = _743 * (_706.z + (-0.5));
        float _753 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _753 * (_713.x + (-0.5));
        float _755 = _753 * (_713.y + (-0.5));
        float _756 = _753 * (_713.z + (-0.5));
        float _763 = exp2((_720.w + (-0.5)) * 20.0) * 2.0;
        float _764 = _763 * (_720.x + (-0.5));
        float _765 = _763 * (_720.y + (-0.5));
        float _766 = _763 * (_720.z + (-0.5));
        float _767 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _768 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _769 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _770 = _734 * 0.5;
        float _771 = _744 * 0.5;
        float _772 = _754 * 0.5;
        float _773 = dot(vec3(_770, _771, _772), vec3(_770, _771, _772));
        float _778 = (_773 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_773);
        float _787 = (dot(vec3(_319, _320, _321), vec3(_778 * _770, _778 * _771, _778 * _772)) + 1.0) * 0.5;
        float _3523 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _797 = sqrt(((_771 * _771) + (_770 * _770)) + (_772 * _772)) / (_767 + 9.9999997473787516355514526367188e-06);
        float _3534 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _799 = _798 * 2.0;
        float _803 = (1.0 - _798) / (_798 + 1.0);
        float _3545 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _804 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _813 = ((((1.0 - _804) * (_799 + 2.0)) * exp2(log2(isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * (_799 + 1.0))) + _804) * _767;
        float _814 = _735 * 0.5;
        float _815 = _745 * 0.5;
        float _816 = _755 * 0.5;
        float _817 = dot(vec3(_814, _815, _816), vec3(_814, _815, _816));
        float _822 = (_817 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_817);
        float _830 = (dot(vec3(_319, _320, _321), vec3(_822 * _814, _822 * _815, _822 * _816)) + 1.0) * 0.5;
        float _3556 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _839 = sqrt(((_815 * _815) + (_814 * _814)) + (_816 * _816)) / (_768 + 9.9999997473787516355514526367188e-06);
        float _3567 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _841 = _840 * 2.0;
        float _845 = (1.0 - _840) / (_840 + 1.0);
        float _3578 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _855 = ((((1.0 - _846) * (_841 + 2.0)) * exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * (_841 + 1.0))) + _846) * _768;
        float _856 = _736 * 0.5;
        float _857 = _746 * 0.5;
        float _858 = _756 * 0.5;
        float _859 = dot(vec3(_856, _857, _858), vec3(_856, _857, _858));
        float _864 = (_859 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_859);
        float _872 = (dot(vec3(_319, _320, _321), vec3(_864 * _856, _864 * _857, _864 * _858)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _881 = sqrt(((_857 * _857) + (_856 * _856)) + (_858 * _858)) / (_769 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _883 = _882 * 2.0;
        float _887 = (1.0 - _882) / (_882 + 1.0);
        float _3611 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _897 = ((((1.0 - _888) * (_883 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_883 + 1.0))) + _888) * _769;
        _905 = _736;
        _907 = _735;
        _908 = _734;
        _909 = _746;
        _910 = _745;
        _911 = _744;
        _912 = _756;
        _913 = _755;
        _914 = _754;
        _915 = _769;
        _916 = _768;
        _917 = _767;
        _918 = cbModelParam._m0[36u].z * (isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0)));
        _919 = cbModelParam._m0[36u].z * (isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0)));
        _920 = cbModelParam._m0[36u].z * (isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0)));
    }
    else
    {
        _905 = _906;
        _907 = _906;
        _908 = _906;
        _909 = _906;
        _910 = _906;
        _911 = _906;
        _912 = _906;
        _913 = _906;
        _914 = _906;
        _915 = _906;
        _916 = _906;
        _917 = _906;
        _918 = 0.0;
        _919 = 0.0;
        _920 = 0.0;
    }
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _949 = fma(_574, cbModelParam._m0[30u].z, fma(_570, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _566));
        float _953 = fma(_574, cbModelParam._m0[31u].z, fma(_570, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _566));
        float _957 = fma(_574, cbModelParam._m0[32u].z, fma(_570, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _566));
        float _980 = _566 + _319;
        float _981 = _570 + _320;
        float _982 = _574 + _321;
        float _992 = fma(_982, cbModelParam._m0[30u].z, fma(_981, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _980)) - _949;
        float _993 = fma(_982, cbModelParam._m0[31u].z, fma(_981, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _980)) - _953;
        float _994 = fma(_982, cbModelParam._m0[32u].z, fma(_981, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _980)) - _957;
        float _998 = inversesqrt(dot(vec3(_992, _993, _994), vec3(_992, _993, _994)));
        float _1011 = ((_998 * _992) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_949 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1012 = ((_998 * _993) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_953 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1013 = ((_998 * _994) / cbModelParam._m0[35u].z) + ((((((_957 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        float _1048 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1015.x + (-0.5));
        float _1050 = _1048 * (_1015.y + (-0.5));
        float _1051 = _1048 * (_1015.z + (-0.5));
        float _1058 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1022.x + (-0.5));
        float _1060 = _1058 * (_1022.y + (-0.5));
        float _1061 = _1058 * (_1022.z + (-0.5));
        float _1068 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1029.x + (-0.5));
        float _1070 = _1068 * (_1029.y + (-0.5));
        float _1071 = _1068 * (_1029.z + (-0.5));
        float _1078 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1036.x + (-0.5));
        float _1080 = _1078 * (_1036.y + (-0.5));
        float _1081 = _1078 * (_1036.z + (-0.5));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = _1049 * 0.5;
        float _1086 = _1059 * 0.5;
        float _1087 = _1069 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_319, _320, _321), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3652 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3663 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3674 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))) * (_1112 + 1.0))) + _1117) * _1082;
        float _1127 = _1050 * 0.5;
        float _1128 = _1060 * 0.5;
        float _1129 = _1070 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_319, _320, _321), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3685 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _3696 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3707 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * (_1154 + 1.0))) + _1159) * _1083;
        float _1169 = _1051 * 0.5;
        float _1170 = _1061 * 0.5;
        float _1171 = _1071 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1185 = (dot(vec3(_319, _320, _321), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _3718 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1194 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3729 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _3740 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * (_1196 + 1.0))) + _1201) * _1084;
        _1218 = _1051;
        _1219 = _1050;
        _1220 = _1049;
        _1221 = _1061;
        _1222 = _1060;
        _1223 = _1059;
        _1224 = _1071;
        _1225 = _1070;
        _1226 = _1069;
        _1227 = _1084;
        _1228 = _1083;
        _1229 = _1082;
        _1230 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1231 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
        _1232 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
    }
    else
    {
        _1218 = _906;
        _1219 = _906;
        _1220 = _906;
        _1221 = _906;
        _1222 = _906;
        _1223 = _906;
        _1224 = _906;
        _1225 = _906;
        _1226 = _906;
        _1227 = _906;
        _1228 = _906;
        _1229 = _906;
        _1230 = 0.0;
        _1231 = 0.0;
        _1232 = 0.0;
    }
    float _1242 = (cbModelParam._m0[1u].x * (_1230 - _918)) + _918;
    float _1243 = (cbModelParam._m0[1u].x * (_1231 - _919)) + _919;
    float _1244 = (cbModelParam._m0[1u].x * (_1232 - _920)) + _920;
    float _1265 = fma(_1244, cbSceneParam._m0[89u].z, fma(_1243, cbSceneParam._m0[89u].y, _1242 * cbSceneParam._m0[89u].x));
    float _1268 = fma(_1244, cbSceneParam._m0[90u].z, fma(_1243, cbSceneParam._m0[90u].y, _1242 * cbSceneParam._m0[90u].x));
    float _1271 = fma(_1244, cbSceneParam._m0[91u].z, fma(_1243, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1242));
    float _1286 = _510 * 0.5;
    float _1287 = _511 * 0.5;
    float _1288 = _512 * 0.5;
    float _1289 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1220, _1223, _1226, _1229));
    float _1292 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1219, _1222, _1225, _1228));
    float _1295 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1218, _1221, _1224, _1227));
    float _1329;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1302 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_905, _909, _912, _915));
        float _1306 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_907, _910, _913, _916));
        float _1310 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_908, _911, _914, _917));
        float _1317 = dot(vec4(cbModelParam._m0[39u]), vec4(_1286, _1287, _1288, 1.0));
        _1329 = dot(vec3(isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)), isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1317) ? 0.0 : (isnan(0.0) ? _1317 : max(0.0, _1317))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1329 = 1.0;
    }
    float _1340;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1331 = dot(vec4(cbModelParam._m0[40u]), vec4(_1286, _1287, _1288, 1.0));
        _1340 = dot(vec3(isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)), isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1331) ? 0.0 : (isnan(0.0) ? _1331 : max(0.0, _1331))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1340 = 1.0;
    }
    float _1344 = (_1340 * cbModelParam._m0[1u].x) + (_1329 * (1.0 - cbModelParam._m0[1u].x));
    float _1354 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _322);
    float _1355 = isnan(_1354) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1354 : min(cbModelParam._m0[25u].z, _1354));
    float _1436;
    float _1438;
    float _1440;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1403 = fma(_574, cbModelParam._m0[13u].z, fma(_570, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _566)) + cbModelParam._m0[13u].w;
        float _1407 = fma(_574, cbModelParam._m0[14u].z, fma(_570, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _566)) + cbModelParam._m0[14u].w;
        float _1411 = fma(_574, cbModelParam._m0[15u].z, fma(_570, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _566)) + cbModelParam._m0[15u].w;
        float _1414 = fma(_512, cbModelParam._m0[13u].z, fma(_511, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _510));
        float _1417 = fma(_512, cbModelParam._m0[14u].z, fma(_511, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _510));
        float _1420 = fma(_512, cbModelParam._m0[15u].z, fma(_511, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _510));
        float _1448;
        if (_1414 > 0.0)
        {
            _1448 = abs((1.0 - _1403) / _1414);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1414 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1403 + 1.0) / _1414);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1448 = frontier_phi_17_15_ladder;
        }
        float _1677;
        if (_1417 > 0.0)
        {
            _1677 = abs((1.0 - _1407) / _1417);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1417 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1407 + 1.0) / _1417);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1677 = frontier_phi_26_22_ladder;
        }
        float _1934;
        if (_1420 > 0.0)
        {
            _1934 = abs((1.0 - _1411) / _1420);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1420 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1411 + 1.0) / _1420);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1934 = frontier_phi_38_33_ladder;
        }
        float _1936 = isnan(_1677) ? _1448 : (isnan(_1448) ? _1677 : min(_1448, _1677));
        float _1937 = isnan(_1934) ? _1936 : (isnan(_1936) ? _1934 : min(_1936, _1934));
        float _1941 = (_1937 * _1414) + _1403;
        float _1942 = (_1937 * _1417) + _1407;
        float _1943 = (_1937 * _1420) + _1411;
        float _1944 = _1937 * 9.9999997473787516355514526367188e-05;
        float _1946 = (-1.0) - _1944;
        float _1948 = _1944 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1943 > _1948) || ((_1943 < _1946) || ((_1942 > _1948) || ((_1942 < _1946) || ((_1941 < _1946) || (_1941 > _1948))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2071 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1943, cbModelParam._m0[9u].z, fma(_1942, cbModelParam._m0[9u].y, _1941 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1943, cbModelParam._m0[10u].z, fma(_1942, cbModelParam._m0[10u].y, _1941 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1943, cbModelParam._m0[11u].z, fma(_1942, cbModelParam._m0[11u].y, _1941 * cbModelParam._m0[11u].x))), _1355);
            frontier_phi_16_38_ladder = _2071.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2071.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2071.x * cbModelParam._m0[1u].y;
        }
        _1436 = frontier_phi_16_38_ladder_2;
        _1438 = frontier_phi_16_38_ladder_1;
        _1440 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1424 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_510, _511, _512), _1355);
        _1436 = _1424.x * cbModelParam._m0[1u].y;
        _1438 = _1424.y * cbModelParam._m0[1u].y;
        _1440 = _1424.z * cbModelParam._m0[1u].y;
    }
    float _1444 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _322);
    float _1445 = isnan(_1444) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1444 : min(cbModelParam._m0[25u].w, _1444));
    float _1538;
    float _1540;
    float _1542;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1502 = fma(_574, cbModelParam._m0[21u].z, fma(_570, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _566)) + cbModelParam._m0[21u].w;
        float _1506 = fma(_574, cbModelParam._m0[22u].z, fma(_570, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _566)) + cbModelParam._m0[22u].w;
        float _1510 = fma(_574, cbModelParam._m0[23u].z, fma(_570, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _566)) + cbModelParam._m0[23u].w;
        float _1513 = fma(_512, cbModelParam._m0[21u].z, fma(_511, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _510));
        float _1516 = fma(_512, cbModelParam._m0[22u].z, fma(_511, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _510));
        float _1519 = fma(_512, cbModelParam._m0[23u].z, fma(_511, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _510));
        float _1682;
        if (_1513 > 0.0)
        {
            _1682 = abs((1.0 - _1502) / _1513);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1502 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1682 = frontier_phi_28_24_ladder;
        }
        float _1961;
        if (_1516 > 0.0)
        {
            _1961 = abs((1.0 - _1506) / _1516);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1506 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1961 = frontier_phi_40_35_ladder;
        }
        float _2174;
        if (_1519 > 0.0)
        {
            _2174 = abs((1.0 - _1510) / _1519);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1510 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2174 = frontier_phi_49_46_ladder;
        }
        float _2176 = isnan(_1961) ? _1682 : (isnan(_1682) ? _1961 : min(_1682, _1961));
        float _2177 = isnan(_2174) ? _2176 : (isnan(_2176) ? _2174 : min(_2176, _2174));
        float _2181 = (_2177 * _1513) + _1502;
        float _2182 = (_2177 * _1516) + _1506;
        float _2183 = (_2177 * _1519) + _1510;
        float _2184 = _2177 * 9.9999997473787516355514526367188e-05;
        float _2185 = (-1.0) - _2184;
        float _2187 = _2184 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2183 > _2187) || ((_2183 < _2185) || ((_2182 > _2187) || ((_2182 < _2185) || ((_2181 < _2185) || (_2181 > _2187))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2417 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2183, cbModelParam._m0[17u].z, fma(_2182, cbModelParam._m0[17u].y, _2181 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2183, cbModelParam._m0[18u].z, fma(_2182, cbModelParam._m0[18u].y, _2181 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2183, cbModelParam._m0[19u].z, fma(_2182, cbModelParam._m0[19u].y, _2181 * cbModelParam._m0[19u].x))), _1445);
            frontier_phi_25_49_ladder = _2417.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2417.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2417.x * cbModelParam._m0[1u].z;
        }
        _1538 = frontier_phi_25_49_ladder_2;
        _1540 = frontier_phi_25_49_ladder_1;
        _1542 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1522 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_510, _511, _512), _1445);
        _1538 = _1522.x * cbModelParam._m0[1u].z;
        _1540 = _1522.y * cbModelParam._m0[1u].z;
        _1542 = _1522.z * cbModelParam._m0[1u].z;
    }
    float _1555 = (((_537 * _487) + _538) * _502) * ((cbModelParam._m0[1u].w * (_1538 - _1436)) + _1436);
    float _1557 = (((_537 * _489) + _538) * _502) * ((cbModelParam._m0[1u].w * (_1540 - _1438)) + _1438);
    float _1559 = (((_537 * _490) + _538) * _502) * ((cbModelParam._m0[1u].w * (_1542 - _1440)) + _1440);
    float _1562 = fma(_1559, cbSceneParam._m0[89u].z, fma(_1557, cbSceneParam._m0[89u].y, _1555 * cbSceneParam._m0[89u].x));
    float _1565 = fma(_1559, cbSceneParam._m0[90u].z, fma(_1557, cbSceneParam._m0[90u].y, _1555 * cbSceneParam._m0[90u].x));
    float _1568 = fma(_1559, cbSceneParam._m0[91u].z, fma(_1557, cbSceneParam._m0[91u].y, _1555 * cbSceneParam._m0[91u].x));
    vec4 _1576 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_421, _422));
    float _1578 = _1576.w;
    float _1590 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1578);
    float _1591 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1578);
    float _1592 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1578);
    uvec4 _1596 = floatBitsToUint(cbInstanceData._m0[_461 + 5u]);
    uint _1598 = _1596.x * 14u;
    uint _1599 = _1598 + 13u;
    float _1606 = _502 + (-1.0);
    float _1611 = (cbLight._m0[_1599].x * _1606) + 1.0;
    float _1612 = (cbLight._m0[_1599].y * _1606) + 1.0;
    float _1613 = (cbLight._m0[_1599].z * _1606) + 1.0;
    float _1614 = (cbLight._m0[_1599].w * _1606) + 1.0;
    uint _1615 = _1598 + 5u;
    float _1621 = isnan(1.0) ? _1612 : (isnan(_1612) ? 1.0 : min(_1612, 1.0));
    uint _1625 = _1598 + 4u;
    float _1635 = isnan(1.0) ? _1611 : (isnan(_1611) ? 1.0 : min(_1611, 1.0));
    uint _1639 = _1598 | 1u;
    float _1650 = dot(vec3(cbLight._m0[_1598].xyz), vec3(_319, _320, _321));
    float _1653 = dot(vec3(cbLight._m0[_1639].xyz), vec3(_319, _320, _321));
    float _3876 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
    float _3887 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
    float _1658 = (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * 0.3183098733425140380859375;
    float _1660 = (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * 0.3183098733425140380859375;
    float _1667 = ((cbLight._m0[_1615].x * _1621) * _1660) + (((cbLight._m0[_1625].x * _1590) * _1635) * _1658);
    float _1668 = ((_1621 * cbLight._m0[_1615].y) * _1660) + (((cbLight._m0[_1625].y * _1591) * _1635) * _1658);
    float _1669 = ((_1621 * cbLight._m0[_1615].z) * _1660) + (((cbLight._m0[_1625].z * _1592) * _1635) * _1658);
    uvec4 _1674 = floatBitsToUint(cbLight._m0[_1598 + 12u]);
    bool _1676 = _1674.x == 0u;
    float _1687;
    float _1689;
    float _1691;
    if (_1676)
    {
        _1687 = _1667;
        _1689 = _1668;
        _1691 = _1669;
    }
    else
    {
        uint _1695 = _1598 + 6u;
        float _1711 = (dot(vec3(cbLight._m0[_1598 + 2u].xyz), vec3(_319, _320, _321)) * 0.5) + 0.5;
        float _1712 = _1711 * _1711;
        float _3898 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1714 = isnan(1.0) ? _1613 : (isnan(_1613) ? 1.0 : min(_1613, 1.0));
        _1687 = (((cbLight._m0[_1695].x * 0.3183098733425140380859375) * _1713) * _1714) + _1667;
        _1689 = (((cbLight._m0[_1695].y * 0.3183098733425140380859375) * _1713) * _1714) + _1668;
        _1691 = (((cbLight._m0[_1695].z * 0.3183098733425140380859375) * _1713) * _1714) + _1669;
    }
    bool _1694 = _1674.y == 0u;
    float _1732;
    float _1734;
    float _1736;
    if (_1694)
    {
        _1732 = _1687;
        _1734 = _1689;
        _1736 = _1691;
    }
    else
    {
        uint _1905 = _1598 + 7u;
        float _1921 = (dot(vec3(cbLight._m0[_1598 + 3u].xyz), vec3(_319, _320, _321)) * 0.5) + 0.5;
        float _1922 = _1921 * _1921;
        float _3914 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1923 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1924 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
        _1732 = (((cbLight._m0[_1905].x * 0.3183098733425140380859375) * _1923) * _1924) + _1687;
        _1734 = (((cbLight._m0[_1905].y * 0.3183098733425140380859375) * _1923) * _1924) + _1689;
        _1736 = (((cbLight._m0[_1905].z * 0.3183098733425140380859375) * _1923) * _1924) + _1691;
    }
    uint _1739 = _1598 + 8u;
    float _1752 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1598].w)) * _322) * 0.949999988079071044921875);
    float _1753 = _1752 * _1752;
    float _1754 = cbLight._m0[_1598].x + _400;
    float _1755 = cbLight._m0[_1598].y + _401;
    float _1756 = cbLight._m0[_1598].z + _402;
    float _1760 = inversesqrt(dot(vec3(_1754, _1755, _1756), vec3(_1754, _1755, _1756)));
    float _1761 = _1760 * _1754;
    float _1762 = _1760 * _1755;
    float _1763 = _1760 * _1756;
    float _1764 = dot(vec3(_319, _320, _321), vec3(cbLight._m0[_1598].xyz));
    float _3930 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _1767 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _3941 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _1768 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _1769 = dot(vec3(_319, _320, _321), vec3(_1761, _1762, _1763));
    float _3952 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1772 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _1773 = dot(vec3(cbLight._m0[_1598].xyz), vec3(_1761, _1762, _1763));
    float _3963 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1777 = _1753 * _1753;
    float _1781 = ((_1772 * _1772) * (_1777 + (-1.0))) + 1.0;
    float _1789 = exp2(log2(1.0 - (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) * 5.0);
    float _1790 = 0.959999978542327880859375 - _484;
    float _1792 = 0.959999978542327880859375 - _485;
    float _1793 = 0.959999978542327880859375 - _486;
    float _1800 = 1.0 - _1753;
    float _1811 = (0.5 / (((_1768 * ((_1767 * _1800) + _1753)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _1800) + _1753) * _1767))) * _1767;
    float _3974 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1813 = (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1777 / ((_1781 * _1781) * 3.141590118408203125));
    uint _1827 = _1598 + 9u;
    float _1838 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1639].w)) * _322) * 0.949999988079071044921875);
    float _1839 = _1838 * _1838;
    float _1840 = cbLight._m0[_1639].x + _400;
    float _1841 = cbLight._m0[_1639].y + _401;
    float _1842 = cbLight._m0[_1639].z + _402;
    float _1846 = inversesqrt(dot(vec3(_1840, _1841, _1842), vec3(_1840, _1841, _1842)));
    float _1847 = _1846 * _1840;
    float _1848 = _1846 * _1841;
    float _1849 = _1846 * _1842;
    float _1850 = dot(vec3(_319, _320, _321), vec3(cbLight._m0[_1639].xyz));
    float _3985 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1853 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _1854 = dot(vec3(_319, _320, _321), vec3(_1847, _1848, _1849));
    float _3996 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1857 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _1858 = dot(vec3(cbLight._m0[_1639].xyz), vec3(_1847, _1848, _1849));
    float _4007 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1862 = _1839 * _1839;
    float _1866 = ((_1857 * _1857) * (_1862 + (-1.0))) + 1.0;
    float _1873 = exp2(log2(1.0 - (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) * 5.0);
    float _1880 = 1.0 - _1839;
    float _1890 = (0.5 / (((_1768 * ((_1853 * _1880) + _1839)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _1880) + _1839) * _1853))) * _1853;
    float _4018 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1892 = (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1862 / ((_1866 * _1866) * 3.141590118408203125));
    float _1902 = (((((_1873 * _1790) + _487) * cbLight._m0[_1827].x) * _1892) * _1621) + ((((cbLight._m0[_1739].x * _1590) * ((_1789 * _1790) + _487)) * _1813) * _1635);
    float _1903 = (((((_1873 * _1792) + _489) * cbLight._m0[_1827].y) * _1892) * _1621) + ((((cbLight._m0[_1739].y * _1591) * ((_1789 * _1792) + _489)) * _1813) * _1635);
    float _1904 = (((((_1873 * _1793) + _490) * cbLight._m0[_1827].z) * _1892) * _1621) + ((((cbLight._m0[_1739].z * _1592) * ((_1789 * _1793) + _490)) * _1813) * _1635);
    float _1966;
    float _1968;
    float _1970;
    if (_1676)
    {
        _1966 = _1902;
        _1968 = _1903;
        _1970 = _1904;
    }
    else
    {
        uint _1972 = _1598 + 2u;
        uint _1976 = _1598 + 10u;
        float _1990 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1972].w)) * _322) * 0.949999988079071044921875);
        float _1991 = _1990 * _1990;
        float _1992 = cbLight._m0[_1972].x + _400;
        float _1993 = cbLight._m0[_1972].y + _401;
        float _1994 = cbLight._m0[_1972].z + _402;
        float _1998 = inversesqrt(dot(vec3(_1992, _1993, _1994), vec3(_1992, _1993, _1994)));
        float _1999 = _1998 * _1992;
        float _2000 = _1998 * _1993;
        float _2001 = _1998 * _1994;
        float _2002 = dot(vec3(_319, _320, _321), vec3(cbLight._m0[_1972].xyz));
        float _4029 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2005 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _2006 = dot(vec3(_319, _320, _321), vec3(_1999, _2000, _2001));
        float _4040 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2009 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _2010 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_1999, _2000, _2001));
        float _4051 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2014 = _1991 * _1991;
        float _2018 = ((_2009 * _2009) * (_2014 + (-1.0))) + 1.0;
        float _2025 = exp2(log2(1.0 - (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) * 5.0);
        float _2032 = 1.0 - _1991;
        float _2042 = (0.5 / (((_1768 * ((_2005 * _2032) + _1991)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _2032) + _1991) * _2005))) * _2005;
        float _4062 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        float _2044 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_2014 / ((_2018 * _2018) * 3.141590118408203125));
        float _2045 = isnan(1.0) ? _1613 : (isnan(_1613) ? 1.0 : min(_1613, 1.0));
        _1966 = (((((_2025 * _1790) + _487) * cbLight._m0[_1976].x) * _2044) * _2045) + _1902;
        _1968 = (((((_2025 * _1792) + _489) * cbLight._m0[_1976].y) * _2044) * _2045) + _1903;
        _1970 = (((((_2025 * _1793) + _490) * cbLight._m0[_1976].z) * _2044) * _2045) + _1904;
    }
    float _2080;
    float _2082;
    float _2084;
    if (_1694)
    {
        _2080 = _1966;
        _2082 = _1968;
        _2084 = _1970;
    }
    else
    {
        uint _2091 = _1598 + 3u;
        uint _2095 = _1598 + 11u;
        float _2109 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2091].w)) * _322) * 0.949999988079071044921875);
        float _2110 = _2109 * _2109;
        float _2111 = cbLight._m0[_2091].x + _400;
        float _2112 = cbLight._m0[_2091].y + _401;
        float _2113 = cbLight._m0[_2091].z + _402;
        float _2117 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
        float _2118 = _2117 * _2111;
        float _2119 = _2117 * _2112;
        float _2120 = _2117 * _2113;
        float _2121 = dot(vec3(_319, _320, _321), vec3(cbLight._m0[_2091].xyz));
        float _4078 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2124 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _2125 = dot(vec3(_319, _320, _321), vec3(_2118, _2119, _2120));
        float _4089 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2128 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _2129 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_2118, _2119, _2120));
        float _4100 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2133 = _2110 * _2110;
        float _2137 = ((_2128 * _2128) * (_2133 + (-1.0))) + 1.0;
        float _2144 = exp2(log2(1.0 - (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) * 5.0);
        float _2151 = 1.0 - _2110;
        float _2161 = (0.5 / (((_1768 * ((_2124 * _2151) + _2110)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _2151) + _2110) * _2124))) * _2124;
        float _4111 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2163 = (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_2133 / ((_2137 * _2137) * 3.141590118408203125));
        float _2164 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
        _2080 = (((((_2144 * _1790) + _487) * cbLight._m0[_2095].x) * _2163) * _2164) + _1966;
        _2082 = (((((_2144 * _1792) + _489) * cbLight._m0[_2095].y) * _2163) * _2164) + _1968;
        _2084 = (((((_2144 * _1793) + _490) * cbLight._m0[_2095].z) * _2163) * _2164) + _1970;
    }
    float _2299;
    float _2301;
    float _2303;
    float _2305;
    float _2307;
    float _2309;
    if (_1596.y == 0u)
    {
        float _2239 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2240 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2239;
        float _2241 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2239;
        float _2242 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2239;
        uvec4 _2254 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2255 = _2254.x;
        uint _2266 = uint((float(_2254.y) * floor(float(uint(cbSceneParam._m0[85u].y * _422) / _2255))) + floor(float(uint(cbSceneParam._m0[85u].x * _421) / _2255)));
        float _2276 = (log2(_2242 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2277 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        uint _2280 = uint(isnan(14.0) ? _2277 : (isnan(_2277) ? 14.0 : min(_2277, 14.0)));
        uvec4 _2285 = texelFetch(g_lightClusterGridBuffer, int(((_2280 << 2u) + (_2266 << 6u)) >> 2u));
        uint _2286 = _2285.x;
        uint _2287 = _2254.z;
        float _2422;
        float _2424;
        float _2426;
        float _2428;
        float _2430;
        float _2432;
        if (((((1u << ((_2287 >> 4u) & 15u)) + 4294967295u) & _2286) == 0u) || ((_2287 & 240u) == 0u))
        {
            _2422 = 0.0;
            _2424 = 0.0;
            _2426 = 0.0;
            _2428 = 0.0;
            _2430 = 0.0;
            _2432 = 0.0;
        }
        else
        {
            float _2423;
            float _2425;
            float _2427;
            float _2429;
            float _2431;
            float _2433;
            float _2584 = 0.0;
            float _2585 = 0.0;
            float _2586 = 0.0;
            float _2587 = 0.0;
            float _2588 = 0.0;
            float _2589 = 0.0;
            uint _2590 = 0u;
            uint _2599;
            bool _2600;
            for (;;)
            {
                _2599 = texelFetch(g_lightClassification, int((((_2280 << 5u) + (_2266 << 9u)) + (_2590 << 2u)) >> 2u)).x;
                _2600 = _2599 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2600)
                {
                    frontier_phi_66_pred = _2584;
                    frontier_phi_66_pred_1 = _2589;
                    frontier_phi_66_pred_2 = _2588;
                    frontier_phi_66_pred_3 = _2587;
                    frontier_phi_66_pred_4 = _2586;
                    frontier_phi_66_pred_5 = _2585;
                }
                else
                {
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    uint _2735;
                    _2729 = _2584;
                    _2730 = _2585;
                    _2731 = _2586;
                    _2732 = _2587;
                    _2733 = _2588;
                    _2734 = _2589;
                    _2735 = _2599;
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    for (;;)
                    {
                        uint _2739 = uint(findLSB(_2735)) + (_2590 << 5u);
                        uint _2736 = (_2735 + 4294967295u) & _2735;
                        uint _2741 = _2739 * 48u;
                        vec4 _2755 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2741)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 3u)).x));
                        uint _2761 = (_2739 * 48u) + 4u;
                        vec4 _2774 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2761)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 3u)).x));
                        uint _2780 = (_2739 * 48u) + 8u;
                        vec3 _2791 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2780)).x, texelFetch(g_PointLightRenderingBuffer, int(_2780 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2780 + 2u)).x));
                        float _2795 = _2755.x - _2240;
                        float _2796 = _2755.y - _2241;
                        float _2797 = _2755.z - _2242;
                        float _2798 = dot(vec3(_2795, _2796, _2797), vec3(_2795, _2796, _2797));
                        float _2801 = inversesqrt(_2798);
                        float _2802 = _2801 * _2795;
                        float _2803 = _2801 * _2796;
                        float _2804 = _2801 * _2797;
                        float _2805 = dot(vec3(_442, _445, _448), vec3(_2802, _2803, _2804));
                        float _2810 = 1.0 - (_2798 * _2755.w);
                        float _4137 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                        float _2811 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
                        float _2812 = sqrt(_2798) * _2774.w;
                        float _2815 = 1.39999997615814208984375 / (_2812 + 1.39999997615814208984375);
                        float _2816 = _2815 * _2815;
                        float _2819 = ((1.0 - _2816) * _2805) + _2816;
                        float _2822 = _2812 * _2812;
                        float _2826 = ((isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0))) * _2811) / ((_2822 * 0.699999988079071044921875) + 1.0);
                        float _2830 = (-0.0) - _2240;
                        float _2831 = (-0.0) - _2241;
                        float _2832 = (-0.0) - _2242;
                        float _2836 = inversesqrt(dot(vec3(_2830, _2831, _2832), vec3(_2830, _2831, _2832)));
                        float _2837 = _2836 * _2830;
                        float _2838 = _2836 * _2831;
                        float _2839 = _2836 * _2832;
                        float _2847 = exp2(log2(1.0 / ((_2822 * 3.5) + 5.0)) * 0.25);
                        float _2848 = 1.0 - _518;
                        float _2855 = sqrt(1.0 - ((1.0 - (_2848 * _2848)) * (1.0 - (_2847 * _2847))));
                        float _2856 = _2855 * _2855;
                        float _2857 = _2856 * _2856;
                        float _2858 = _2837 + _2802;
                        float _2859 = _2838 + _2803;
                        float _2860 = _2839 + _2804;
                        float _2864 = inversesqrt(dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860)));
                        float _2868 = dot(vec3(_442, _445, _448), vec3(_2837, _2838, _2839));
                        float _4153 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
                        float _2871 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                        float _2872 = dot(vec3(_442, _445, _448), vec3(_2864 * _2858, _2864 * _2859, _2864 * _2860));
                        float _4164 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
                        float _2875 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                        float _2879 = ((_2875 * _2875) * (_2857 + (-1.0))) + 1.0;
                        float _2880 = _2815 * _2856;
                        float _2881 = _2880 * _2880;
                        float _2884 = ((1.0 - _2881) * _2805) + _2881;
                        float _4175 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
                        float _2885 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                        float _2886 = 1.0 - _2856;
                        float _2896 = (0.5 / (((_2885 * ((_2871 * _2886) + _2856)) + 9.9999999392252902907785028219223e-09) + (((_2885 * _2886) + _2856) * _2871))) * _2885;
                        float _4186 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
                        float _2907 = (((_2857 * 3.1415927410125732421875) * (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) / ((_2879 * _2879) * ((_2822 * 2.1991131305694580078125) + 3.141590118408203125))) * _2811;
                        _2659 = (_2826 * _2774.x) + _2732;
                        _2660 = (_2826 * _2774.y) + _2733;
                        _2661 = (_2826 * _2774.z) + _2734;
                        _2656 = (_2907 * _2791.x) + _2729;
                        _2657 = (_2907 * _2791.y) + _2730;
                        _2658 = (_2907 * _2791.z) + _2731;
                        if (_2736 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2729 = _2656;
                            _2730 = _2657;
                            _2731 = _2658;
                            _2732 = _2659;
                            _2733 = _2660;
                            _2734 = _2661;
                            _2735 = _2736;
                        }
                    }
                    frontier_phi_66_pred = _2656;
                    frontier_phi_66_pred_1 = _2661;
                    frontier_phi_66_pred_2 = _2660;
                    frontier_phi_66_pred_3 = _2659;
                    frontier_phi_66_pred_4 = _2658;
                    frontier_phi_66_pred_5 = _2657;
                }
                _2423 = frontier_phi_66_pred;
                _2433 = frontier_phi_66_pred_1;
                _2431 = frontier_phi_66_pred_2;
                _2429 = frontier_phi_66_pred_3;
                _2427 = frontier_phi_66_pred_4;
                _2425 = frontier_phi_66_pred_5;
                uint _2591 = _2590 + 1u;
                if (_2591 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2584 = _2423;
                    _2585 = _2425;
                    _2586 = _2427;
                    _2587 = _2429;
                    _2588 = _2431;
                    _2589 = _2433;
                    _2590 = _2591;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2422 = _2423;
            _2424 = _2425;
            _2426 = _2427;
            _2428 = _2429;
            _2430 = _2431;
            _2432 = _2433;
        }
        uvec4 _2436 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2437 = _2436.z;
        uint _2439 = (_2437 >> 8u) & 15u;
        float _2552;
        float _2554;
        float _2556;
        float _2558;
        float _2560;
        float _2562;
        if (((4294967295u << _2439) & _2286) == 0u)
        {
            _2552 = _2422;
            _2554 = _2424;
            _2556 = _2426;
            _2558 = _2428;
            _2560 = _2430;
            _2562 = _2432;
        }
        else
        {
            float _2577 = inversesqrt(dot(vec3(_2240, _2241, _2242), vec3(_2240, _2241, _2242)));
            float _2578 = _2577 * _2240;
            float _2579 = _2577 * _2241;
            float _2580 = _2577 * _2242;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2439 < ((_2437 >> 12u) & 15u))
            {
                float _2553;
                float _2555;
                float _2557;
                float _2559;
                float _2561;
                float _2563;
                float _2712 = _2422;
                float _2713 = _2424;
                float _2714 = _2426;
                float _2715 = _2428;
                float _2716 = _2430;
                float _2717 = _2432;
                uint _2718 = _2439;
                uint _2727;
                bool _2728;
                for (;;)
                {
                    _2727 = texelFetch(g_lightClassification, int((((_2280 << 5u) + (_2266 << 9u)) + (_2718 << 2u)) >> 2u)).x;
                    _2728 = _2727 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2728)
                    {
                        frontier_phi_77_pred = _2717;
                        frontier_phi_77_pred_1 = _2716;
                        frontier_phi_77_pred_2 = _2715;
                        frontier_phi_77_pred_3 = _2714;
                        frontier_phi_77_pred_4 = _2713;
                        frontier_phi_77_pred_5 = _2712;
                    }
                    else
                    {
                        float _2921;
                        float _2922;
                        float _2923;
                        float _2924;
                        float _2925;
                        float _2926;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _2934 = _2712;
                        float _2935 = _2713;
                        float _2936 = _2714;
                        float _2937 = _2715;
                        float _2938 = _2716;
                        float _2939 = _2717;
                        uint _2940 = _2727;
                        uint _2941;
                        vec4 _2966;
                        float _2967;
                        vec4 _2982;
                        vec3 _2994;
                        vec4 _3010;
                        vec4 _3026;
                        float _3073;
                        bool _3074;
                        for (;;)
                        {
                            uint _2951 = ((_2718 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2940));
                            _2941 = (_2940 + 4294967295u) & _2940;
                            uint _2953 = _2951 * 40u;
                            _2966 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 3u)).x));
                            _2967 = _2966.w;
                            uint _2969 = (_2951 * 40u) + 4u;
                            _2982 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 3u)).x));
                            uint _2984 = (_2951 * 40u) + 8u;
                            _2994 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x));
                            uint _2997 = (_2951 * 40u) + 16u;
                            _3010 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 3u)).x));
                            uint _3013 = (_2951 * 40u) + 20u;
                            _3026 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 3u)).x));
                            uint _3029 = (_2951 * 40u) + 24u;
                            vec4 _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            uint _3048 = (_2951 * 40u) + 28u;
                            vec4 _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            _3073 = fma(_2242, _3061.z, fma(_2241, _3061.y, _3061.x * _2240)) + _3061.w;
                            _3074 = !((fma(_2242, _3042.z, fma(_2241, _3042.y, _3042.x * _2240)) + _3042.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3074)
                            {
                                float _3101 = _2966.x - _2240;
                                float _3102 = _2966.y - _2241;
                                float _3103 = _2966.z - _2242;
                                float _3104 = dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103));
                                float _3107 = inversesqrt(_3104);
                                float _3108 = _3107 * _3101;
                                float _3109 = _3107 * _3102;
                                float _3110 = _3107 * _3103;
                                float _3114 = 1.0 - (_3104 / (_2967 * _2967));
                                float _4197 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                                float _3115 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                                float _3119 = sqrt(_3104) * _2982.w;
                                float _3121 = 1.39999997615814208984375 / (_3119 + 1.39999997615814208984375);
                                float _3122 = _3121 * _3121;
                                float _3125 = ((1.0 - _3122) * dot(vec3(_3108, _3109, _3110), vec3(_442, _445, _448))) + _3122;
                                float _3128 = _3119 * _3119;
                                float _3132 = (fma(_2242, _3010.z, fma(_2241, _3010.y, _3010.x * _2240)) + _3010.w) / _3073;
                                float _3133 = (fma(_2242, _3026.z, fma(_2241, _3026.y, _3026.x * _2240)) + _3026.w) / _3073;
                                float _3137 = 1.0 - dot(vec2(_3132, _3133), vec2(_3132, _3133));
                                float _4213 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3138 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                                float _3139 = _3138 * (((isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0))) * _3115) / ((_3128 * 0.699999988079071044921875) + 1.0));
                                float _3151 = exp2(log2(1.0 / ((_3128 * 3.5) + 5.0)) * 0.25);
                                float _3152 = 1.0 - _518;
                                float _3159 = sqrt(1.0 - ((1.0 - (_3152 * _3152)) * (1.0 - (_3151 * _3151))));
                                float _3160 = _3159 * _3159;
                                float _3161 = _3160 * _3160;
                                float _3162 = _3108 - _2578;
                                float _3163 = _3109 - _2579;
                                float _3164 = _3110 - _2580;
                                float _3168 = inversesqrt(dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164)));
                                float _3172 = dot(vec3(_442, _445, _448), vec3((-0.0) - _2578, (-0.0) - _2579, (-0.0) - _2580));
                                float _4224 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3175 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                                float _3176 = dot(vec3(_442, _445, _448), vec3(_3168 * _3162, _3168 * _3163, _3168 * _3164));
                                float _4235 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3179 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
                                float _3183 = ((_3179 * _3179) * (_3161 + (-1.0))) + 1.0;
                                float _3184 = _3121 * _3160;
                                float _3185 = _3184 * _3184;
                                float _3191 = ((1.0 - _3185) * dot(vec3(_442, _445, _448), vec3(_3108, _3109, _3110))) + _3185;
                                float _4246 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                                float _3192 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                                float _3193 = 1.0 - _3160;
                                float _3203 = (0.5 / (((_3192 * ((_3175 * _3193) + _3160)) + 9.9999999392252902907785028219223e-09) + (((_3192 * _3193) + _3160) * _3175))) * _3192;
                                float _4257 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                                float _3213 = (_3138 * _3115) * (((_3161 * 3.1415927410125732421875) * (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0)))) / ((_3183 * _3183) * ((_3128 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3139 * _2982.y;
                                frontier_phi_83_pred_1 = _3139 * _2982.x;
                                frontier_phi_83_pred_2 = _3213 * _2994.z;
                                frontier_phi_83_pred_3 = _3213 * _2994.y;
                                frontier_phi_83_pred_4 = _3213 * _2994.x;
                                frontier_phi_83_pred_5 = _3139 * _2982.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3221 = frontier_phi_83_pred;
                            _3220 = frontier_phi_83_pred_1;
                            _3219 = frontier_phi_83_pred_2;
                            _3218 = frontier_phi_83_pred_3;
                            _3217 = frontier_phi_83_pred_4;
                            _3222 = frontier_phi_83_pred_5;
                            _2924 = _3220 + _2937;
                            _2925 = _3221 + _2938;
                            _2926 = _3222 + _2939;
                            _2921 = _3217 + _2934;
                            _2922 = _3218 + _2935;
                            _2923 = _3219 + _2936;
                            if (_2941 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2934 = _2921;
                                _2935 = _2922;
                                _2936 = _2923;
                                _2937 = _2924;
                                _2938 = _2925;
                                _2939 = _2926;
                                _2940 = _2941;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2926;
                        frontier_phi_77_pred_1 = _2925;
                        frontier_phi_77_pred_2 = _2924;
                        frontier_phi_77_pred_3 = _2923;
                        frontier_phi_77_pred_4 = _2922;
                        frontier_phi_77_pred_5 = _2921;
                    }
                    _2563 = frontier_phi_77_pred;
                    _2561 = frontier_phi_77_pred_1;
                    _2559 = frontier_phi_77_pred_2;
                    _2557 = frontier_phi_77_pred_3;
                    _2555 = frontier_phi_77_pred_4;
                    _2553 = frontier_phi_77_pred_5;
                    uint _2719 = _2718 + 1u;
                    if (_2719 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2712 = _2553;
                        _2713 = _2555;
                        _2714 = _2557;
                        _2715 = _2559;
                        _2716 = _2561;
                        _2717 = _2563;
                        _2718 = _2719;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2557;
                frontier_phi_58_59_ladder_1 = _2563;
                frontier_phi_58_59_ladder_2 = _2561;
                frontier_phi_58_59_ladder_3 = _2559;
                frontier_phi_58_59_ladder_4 = _2555;
                frontier_phi_58_59_ladder_5 = _2553;
            }
            else
            {
                frontier_phi_58_59_ladder = _2426;
                frontier_phi_58_59_ladder_1 = _2432;
                frontier_phi_58_59_ladder_2 = _2430;
                frontier_phi_58_59_ladder_3 = _2428;
                frontier_phi_58_59_ladder_4 = _2424;
                frontier_phi_58_59_ladder_5 = _2422;
            }
            _2552 = frontier_phi_58_59_ladder_5;
            _2554 = frontier_phi_58_59_ladder_4;
            _2556 = frontier_phi_58_59_ladder;
            _2558 = frontier_phi_58_59_ladder_3;
            _2560 = frontier_phi_58_59_ladder_2;
            _2562 = frontier_phi_58_59_ladder_1;
        }
        float _2567 = isnan(1.0) ? _502 : (isnan(_502) ? 1.0 : min(_502, 1.0));
        _2299 = (_2567 * _2558) + _1732;
        _2301 = (_2567 * _2560) + _1734;
        _2303 = (_2567 * _2562) + _1736;
        _2305 = ((_2552 * _487) * _2567) + _2080;
        _2307 = ((_2554 * _489) * _2567) + _2082;
        _2309 = ((_2556 * _490) * _2567) + _2084;
    }
    else
    {
        _2299 = _1732;
        _2301 = _1734;
        _2303 = _1736;
        _2305 = _2080;
        _2307 = _2082;
        _2309 = _2084;
    }
    uint _2315 = _463 + uint(cbMatDynParam._m0[0u].w);
    float _2323 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _301.x) * cbInstanceData._m0[_2315].x;
    float _2326 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _301.y) * cbInstanceData._m0[_2315].y;
    float _2329 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _301.z) * cbInstanceData._m0[_2315].z;
    float _4273 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _4284 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _4295 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _2346 = (((isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_2299 + ((isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))) * _502))) + ((_2305 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _1344)) * cbPerFrame._m0[3u].x)) + _2323;
    float _2348 = (_2326 + ((_2307 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _1344)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2301 + ((isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0))) * _502)));
    float _2350 = (_2329 + ((_2309 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _1344)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2303 + ((isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))) * _502)));
    float _2351 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2352 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2353 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2359 = cbMtdParam._m0[2u].x * _2323;
    float _2360 = cbMtdParam._m0[2u].y * _2326;
    float _2361 = cbMtdParam._m0[2u].z * _2329;
    float _4321 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2363 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
    uint _2364 = _461 + 6u;
    float _2372 = _421 / cbSceneParam._m0[86u].x;
    float _2373 = _422 / cbSceneParam._m0[86u].y;
    vec4 _2387 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2372, _2373, (log2((isnan(cbSceneParam._m0[77u].w) ? _342 : (isnan(_342) ? cbSceneParam._m0[77u].w : min(_342, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2389 = _2387.x;
    float _2390 = _2387.y;
    float _2391 = _2387.z;
    float _2392 = _2387.w;
    float _2485;
    float _2487;
    float _2489;
    float _2491;
    if (_342 > cbSceneParam._m0[78u].w)
    {
        float _2447 = isnan(_342) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _342 : min(cbSceneParam._m0[80u].w, _342));
        float _2448 = _2447 / _342;
        float _2459 = _2448 * _393;
        float _2460 = _394 * _2448;
        float _2461 = (-0.0) - _2460;
        float _2463 = _2448 * _395;
        float _2465 = (cbSceneParam._m0[77u].w * _2461) / _2447;
        float _2466 = _2465 + cbSceneParam._m0[79u].w;
        float _2467 = cbSceneParam._m0[79u].w - _2460;
        float _2473 = sqrt(((_2459 * _2459) + (_2460 * _2460)) + (_2463 * _2463));
        float _2476 = (1.0 - (cbSceneParam._m0[77u].w / _2447)) * _2473;
        float _2481 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2483 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2669;
        if (abs((_2461 - _2465) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2669 = ((((_2466 > 0.0) ? exp2(_2481 * _2466) : (2.0 - exp2(_2483 * _2466))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2476;
        }
        else
        {
            float _2613 = 1.0 / cbSceneParam._m0[80u].x;
            float _2614 = isnan(_2467) ? _2466 : (isnan(_2466) ? _2467 : max(_2466, _2467));
            float _2615 = isnan(_2467) ? _2466 : (isnan(_2466) ? _2467 : min(_2466, _2467));
            float _2624 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : min(_2614, 0.0));
            float _2625 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : min(_2615, 0.0));
            _2669 = ((abs(_2473 / _2461) * cbSceneParam._m0[80u].y) * ((((_2624 - _2625) * 2.0) - ((exp2(_2481 * (isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0)))) - exp2(_2481 * (isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0))))) * _2613)) - ((exp2(_2483 * _2624) - exp2(_2483 * _2625)) * _2613))) + (_2476 * cbSceneParam._m0[80u].z);
        }
        vec4 _2671 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2372, _2373, 1.0), 0.0);
        float _2680 = exp2((_2669 * (-1.44269502162933349609375)) * (1.0 - _2671.w));
        float _2681 = log2(_2680);
        float _2697 = log2(_2392);
        _2485 = (exp2(_2697 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2681 * cbSceneParam._m0[78u].x)) * _2671.x) / cbSceneParam._m0[78u].x)) + _2389;
        _2487 = (exp2(_2697 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2681 * cbSceneParam._m0[78u].y)) * _2671.y) / cbSceneParam._m0[78u].y)) + _2390;
        _2489 = (exp2(_2697 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2681 * cbSceneParam._m0[78u].z)) * _2671.z) / cbSceneParam._m0[78u].z)) + _2391;
        _2491 = _2680 * _2392;
    }
    else
    {
        _2485 = _2389;
        _2487 = _2390;
        _2489 = _2391;
        _2491 = _2392;
    }
    bool _2707;
    vec4 _2501;
    vec4 _2523;
    float _2525;
    float _2529;
    float _2530;
    float _2531;
    float _2534;
    float _2537;
    float _2540;
    float _2541;
    bool _2551;
    for (;;)
    {
        _2501 = cbMatDynParam._m0[0u];
        float _2503 = roundEven(_2501.y);
        bool _2504 = _2503 == 3.0;
        float _2505 = log2(_2491);
        float _2509 = exp2(_2505 * cbSceneParam._m0[78u].x);
        float _2510 = exp2(_2505 * cbSceneParam._m0[78u].y);
        float _2511 = exp2(_2505 * cbSceneParam._m0[78u].z);
        float _2512 = _2509 * _2351;
        float _2513 = _2510 * _2352;
        float _2514 = _2511 * _2353;
        float _2521 = _409 + (-0.5);
        _2523 = cbMtdParam._m0[1u];
        _2525 = _2523.y * _2521;
        float _2528 = (_2503 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2529 = _2528 * (_2504 ? _2512 : (_2512 + (cbSceneParam._m0[72u].w * _2485)));
        _2530 = _2528 * (_2504 ? _2513 : (_2513 + (cbSceneParam._m0[72u].w * _2487)));
        _2531 = _2528 * (_2504 ? _2514 : (_2514 + (cbSceneParam._m0[72u].w * _2489)));
        _2534 = ((_2359 * _2363) * _2509) * _2528;
        _2537 = ((_2360 * _2363) * _2510) * _2528;
        _2540 = ((_2361 * _2363) * _2511) * _2528;
        _2541 = _2521 * 0.999000012874603271484375;
        _2551 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2551)
        {
            if ((cbInstanceData._m0[_461 + 7u].x + _2541) < 0.5)
            {
                _2707 = true;
                break;
            }
        }
        uint _2648 = _463 + uint(_2501.w);
        if ((cbInstanceData._m0[_2648].w < 1.0) && ((cbInstanceData._m0[_2648].w + _2541) < 0.5))
        {
            _2707 = true;
            break;
        }
        if ((_2525 + 1.0) < _2523.x)
        {
            _2707 = true;
            break;
        }
        _2707 = false;
        break;
    }
    float _2912;
    if (_2707)
    {
        discard_state = true;
        _2912 = 0.0;
    }
    else
    {
        _2912 = cbInstanceData._m0[_2364].w;
    }
    SV_Target.x = _2529;
    SV_Target.y = _2530;
    SV_Target.z = _2531;
    SV_Target.w = _2912;
    SV_Target_1.x = _2534;
    SV_Target_1.y = _2537;
    SV_Target_1.z = _2540;
    SV_Target_1.w = cbInstanceData._m0[_2364].w;
    discard_exit();
}


