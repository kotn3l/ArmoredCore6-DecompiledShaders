#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _924;
float _3380;
float _3381;
float _3382;
float _3383;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _232 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _238 = _232.x * cbMtdParam._m0[9u].x;
    float _239 = _232.y * cbMtdParam._m0[9u].y;
    float _240 = _232.z * cbMtdParam._m0[9u].z;
    vec4 _252 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _254 = _252.x;
    vec4 _266 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _270 = _266.z;
    float _274 = (_266.x * 2.0) + (-1.0);
    float _276 = (_266.y * 2.0) + (-1.0);
    float _277 = dot(vec2(_274, _276), vec2(_274, _276));
    float _3392 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _283 = sqrt(1.0 - (isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))));
    vec4 _320 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _327 = fma(_283, _203 * NORMAL.x, fma(_276, _210 * TANGENT.x, (_196 * _189) * _274));
    float _330 = fma(_283, _203 * NORMAL.y, fma(_276, _210 * TANGENT.y, (_196 * _190) * _274));
    float _333 = fma(_283, _203 * NORMAL.z, fma(_276, _210 * TANGENT.z, (_196 * _191) * _274));
    float _337 = inversesqrt(dot(vec3(_327, _330, _333), vec3(_327, _330, _333)));
    float _338 = _337 * _327;
    float _339 = _337 * _330;
    float _340 = _337 * _333;
    float _3403 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _341 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
    float _3414 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3425 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3436 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3447 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _345 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    float _361 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _402 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _412 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _402);
    float _413 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _402);
    float _414 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _402);
    float _418 = inversesqrt(dot(vec3(_412, _413, _414), vec3(_412, _413, _414)));
    float _419 = _412 * _418;
    float _420 = _413 * _418;
    float _421 = _414 * _418;
    vec4 _426 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _428 = _426.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _603 = sqrt(((_412 * _412) + (_413 * _413)) + (_414 * _414));
        float _609 = (cbMatDynParam._m0[5u].x * _603) + cbMatDynParam._m0[5u].y;
        float _3458 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
        float _610 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _614 = (cbMatDynParam._m0[5u].z * _603) + cbMatDynParam._m0[5u].w;
        float _3469 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) - _610)) + _610) < ((_428 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _440 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _441 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _461 = fma(_340, cbSceneParam._m0[5u].z, fma(_339, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _338));
    float _464 = fma(_340, cbSceneParam._m0[6u].z, fma(_339, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _338));
    float _467 = fma(_340, cbSceneParam._m0[7u].z, fma(_339, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _338));
    uint _480 = uint(roundEven(NORMAL.w)) * 13u;
    uint _481 = _480 + 9u;
    uint _482 = _481 + uint(cbMatDynParam._m0[0u].w);
    float _488 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0)))) * cbInstanceData._m0[_482].x;
    float _489 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0)))) * cbInstanceData._m0[_482].y;
    float _490 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0)))) * cbInstanceData._m0[_482].z;
    float _3480 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _491 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    float _3491 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _492 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _3502 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _493 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
    float _494 = 1.0 - _345;
    float _495 = _491 * _494;
    float _496 = _492 * _494;
    float _497 = _493 * _494;
    float _502 = (_491 + (-0.039999999105930328369140625)) * _345;
    float _503 = (_492 + (-0.039999999105930328369140625)) * _345;
    float _504 = (_493 + (-0.039999999105930328369140625)) * _345;
    float _505 = _502 + 0.039999999105930328369140625;
    float _507 = _503 + 0.039999999105930328369140625;
    float _508 = _504 + 0.039999999105930328369140625;
    vec4 _517 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _440, cbSceneParam._m0[86u].y * _441));
    float _520 = _517.x * TEXCOORD.z;
    float _521 = dot(vec3(_338, _339, _340), vec3(_419, _420, _421));
    float _524 = _521 * 2.0;
    float _528 = (_524 * _338) - _419;
    float _529 = (_524 * _339) - _420;
    float _530 = (_524 * _340) - _421;
    float _534 = abs(dot(vec3(_419, _420, _421), vec3(_338, _339, _340)));
    float _3513 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _536 = sqrt(_341);
    float _549 = exp2((_536 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_536 * 3.0));
    float _555 = (1.0 - _549) * ((_536 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _556 = _549 * _536;
    float _584 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _588 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _923;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _648 = fma(_592, cbModelParam._m0[26u].z, fma(_588, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _584));
        float _652 = fma(_592, cbModelParam._m0[27u].z, fma(_588, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _584));
        float _656 = fma(_592, cbModelParam._m0[28u].z, fma(_588, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _584));
        float _681 = _584 + _338;
        float _682 = _588 + _339;
        float _683 = _592 + _340;
        float _693 = fma(_683, cbModelParam._m0[26u].z, fma(_682, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _681)) - _648;
        float _694 = fma(_683, cbModelParam._m0[27u].z, fma(_682, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _681)) - _652;
        float _695 = fma(_683, cbModelParam._m0[28u].z, fma(_682, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _681)) - _656;
        float _699 = inversesqrt(dot(vec3(_693, _694, _695), vec3(_693, _694, _695)));
        float _712 = ((_699 * _693) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_648 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _713 = ((_699 * _694) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_652 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _714 = ((_699 * _695) / cbModelParam._m0[34u].z) + ((((((_656 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _717 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        vec4 _724 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        vec4 _731 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        vec4 _738 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        float _751 = exp2((_717.w + (-0.5)) * 20.0) * 2.0;
        float _752 = _751 * (_717.x + (-0.5));
        float _753 = _751 * (_717.y + (-0.5));
        float _754 = _751 * (_717.z + (-0.5));
        float _761 = exp2((_724.w + (-0.5)) * 20.0) * 2.0;
        float _762 = _761 * (_724.x + (-0.5));
        float _763 = _761 * (_724.y + (-0.5));
        float _764 = _761 * (_724.z + (-0.5));
        float _771 = exp2((_731.w + (-0.5)) * 20.0) * 2.0;
        float _772 = _771 * (_731.x + (-0.5));
        float _773 = _771 * (_731.y + (-0.5));
        float _774 = _771 * (_731.z + (-0.5));
        float _781 = exp2((_738.w + (-0.5)) * 20.0) * 2.0;
        float _782 = _781 * (_738.x + (-0.5));
        float _783 = _781 * (_738.y + (-0.5));
        float _784 = _781 * (_738.z + (-0.5));
        float _785 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _786 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _787 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _788 = _752 * 0.5;
        float _789 = _762 * 0.5;
        float _790 = _772 * 0.5;
        float _791 = dot(vec3(_788, _789, _790), vec3(_788, _789, _790));
        float _796 = (_791 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_791);
        float _805 = (dot(vec3(_338, _339, _340), vec3(_796 * _788, _796 * _789, _796 * _790)) + 1.0) * 0.5;
        float _3539 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _815 = sqrt(((_789 * _789) + (_788 * _788)) + (_790 * _790)) / (_785 + 9.9999997473787516355514526367188e-06);
        float _3550 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _817 = _816 * 2.0;
        float _821 = (1.0 - _816) / (_816 + 1.0);
        float _3561 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _831 = ((((1.0 - _822) * (_817 + 2.0)) * exp2(log2(isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * (_817 + 1.0))) + _822) * _785;
        float _832 = _753 * 0.5;
        float _833 = _763 * 0.5;
        float _834 = _773 * 0.5;
        float _835 = dot(vec3(_832, _833, _834), vec3(_832, _833, _834));
        float _840 = (_835 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_835);
        float _848 = (dot(vec3(_338, _339, _340), vec3(_840 * _832, _840 * _833, _840 * _834)) + 1.0) * 0.5;
        float _3572 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _857 = sqrt(((_833 * _833) + (_832 * _832)) + (_834 * _834)) / (_786 + 9.9999997473787516355514526367188e-06);
        float _3583 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _859 = _858 * 2.0;
        float _863 = (1.0 - _858) / (_858 + 1.0);
        float _3594 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _873 = ((((1.0 - _864) * (_859 + 2.0)) * exp2(log2(isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * (_859 + 1.0))) + _864) * _786;
        float _874 = _754 * 0.5;
        float _875 = _764 * 0.5;
        float _876 = _774 * 0.5;
        float _877 = dot(vec3(_874, _875, _876), vec3(_874, _875, _876));
        float _882 = (_877 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_877);
        float _890 = (dot(vec3(_338, _339, _340), vec3(_882 * _874, _882 * _875, _882 * _876)) + 1.0) * 0.5;
        float _3605 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _899 = sqrt(((_875 * _875) + (_874 * _874)) + (_876 * _876)) / (_787 + 9.9999997473787516355514526367188e-06);
        float _3616 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _901 = _900 * 2.0;
        float _905 = (1.0 - _900) / (_900 + 1.0);
        float _3627 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _915 = ((((1.0 - _906) * (_901 + 2.0)) * exp2(log2(isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_901 + 1.0))) + _906) * _787;
        _923 = _754;
        _925 = _753;
        _926 = _752;
        _927 = _764;
        _928 = _763;
        _929 = _762;
        _930 = _774;
        _931 = _773;
        _932 = _772;
        _933 = _787;
        _934 = _786;
        _935 = _785;
        _936 = cbModelParam._m0[36u].z * (isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0)));
        _937 = cbModelParam._m0[36u].z * (isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0)));
        _938 = cbModelParam._m0[36u].z * (isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0)));
    }
    else
    {
        _923 = _924;
        _925 = _924;
        _926 = _924;
        _927 = _924;
        _928 = _924;
        _929 = _924;
        _930 = _924;
        _931 = _924;
        _932 = _924;
        _933 = _924;
        _934 = _924;
        _935 = _924;
        _936 = 0.0;
        _937 = 0.0;
        _938 = 0.0;
    }
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _967 = fma(_592, cbModelParam._m0[30u].z, fma(_588, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _584));
        float _971 = fma(_592, cbModelParam._m0[31u].z, fma(_588, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _584));
        float _975 = fma(_592, cbModelParam._m0[32u].z, fma(_588, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _584));
        float _998 = _584 + _338;
        float _999 = _588 + _339;
        float _1000 = _592 + _340;
        float _1010 = fma(_1000, cbModelParam._m0[30u].z, fma(_999, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _998)) - _967;
        float _1011 = fma(_1000, cbModelParam._m0[31u].z, fma(_999, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _998)) - _971;
        float _1012 = fma(_1000, cbModelParam._m0[32u].z, fma(_999, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _998)) - _975;
        float _1016 = inversesqrt(dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012)));
        float _1029 = ((_1016 * _1010) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_967 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1030 = ((_1016 * _1011) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_971 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1031 = ((_1016 * _1012) / cbModelParam._m0[35u].z) + ((((((_975 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        float _1066 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1033.x + (-0.5));
        float _1068 = _1066 * (_1033.y + (-0.5));
        float _1069 = _1066 * (_1033.z + (-0.5));
        float _1076 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1040.x + (-0.5));
        float _1078 = _1076 * (_1040.y + (-0.5));
        float _1079 = _1076 * (_1040.z + (-0.5));
        float _1086 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1047.x + (-0.5));
        float _1088 = _1086 * (_1047.y + (-0.5));
        float _1089 = _1086 * (_1047.z + (-0.5));
        float _1096 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1054.x + (-0.5));
        float _1098 = _1096 * (_1054.y + (-0.5));
        float _1099 = _1096 * (_1054.z + (-0.5));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = _1067 * 0.5;
        float _1104 = _1077 * 0.5;
        float _1105 = _1087 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1119 = (dot(vec3(_338, _339, _340), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3668 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1128 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3679 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3690 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_1130 + 1.0))) + _1135) * _1100;
        float _1145 = _1068 * 0.5;
        float _1146 = _1078 * 0.5;
        float _1147 = _1088 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_338, _339, _340), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3723 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_1172 + 1.0))) + _1177) * _1101;
        float _1187 = _1069 * 0.5;
        float _1188 = _1079 * 0.5;
        float _1189 = _1089 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_338, _339, _340), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3756 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1214 + 1.0))) + _1219) * _1102;
        _1236 = _1069;
        _1237 = _1068;
        _1238 = _1067;
        _1239 = _1079;
        _1240 = _1078;
        _1241 = _1077;
        _1242 = _1089;
        _1243 = _1088;
        _1244 = _1087;
        _1245 = _1102;
        _1246 = _1101;
        _1247 = _1100;
        _1248 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
        _1249 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
        _1250 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
    }
    else
    {
        _1236 = _924;
        _1237 = _924;
        _1238 = _924;
        _1239 = _924;
        _1240 = _924;
        _1241 = _924;
        _1242 = _924;
        _1243 = _924;
        _1244 = _924;
        _1245 = _924;
        _1246 = _924;
        _1247 = _924;
        _1248 = 0.0;
        _1249 = 0.0;
        _1250 = 0.0;
    }
    float _1260 = (cbModelParam._m0[1u].x * (_1248 - _936)) + _936;
    float _1261 = (cbModelParam._m0[1u].x * (_1249 - _937)) + _937;
    float _1262 = (cbModelParam._m0[1u].x * (_1250 - _938)) + _938;
    float _1283 = fma(_1262, cbSceneParam._m0[89u].z, fma(_1261, cbSceneParam._m0[89u].y, _1260 * cbSceneParam._m0[89u].x));
    float _1286 = fma(_1262, cbSceneParam._m0[90u].z, fma(_1261, cbSceneParam._m0[90u].y, _1260 * cbSceneParam._m0[90u].x));
    float _1289 = fma(_1262, cbSceneParam._m0[91u].z, fma(_1261, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1260));
    float _1304 = _528 * 0.5;
    float _1305 = _529 * 0.5;
    float _1306 = _530 * 0.5;
    float _1307 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_1238, _1241, _1244, _1247));
    float _1310 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_1237, _1240, _1243, _1246));
    float _1313 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_1236, _1239, _1242, _1245));
    float _1347;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1320 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_923, _927, _930, _933));
        float _1324 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_925, _928, _931, _934));
        float _1328 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_926, _929, _932, _935));
        float _1335 = dot(vec4(cbModelParam._m0[39u]), vec4(_1304, _1305, _1306, 1.0));
        _1347 = dot(vec3(isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)), isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)), isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1335) ? 0.0 : (isnan(0.0) ? _1335 : max(0.0, _1335))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1347 = 1.0;
    }
    float _1358;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1349 = dot(vec4(cbModelParam._m0[40u]), vec4(_1304, _1305, _1306, 1.0));
        _1358 = dot(vec3(isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1349) ? 0.0 : (isnan(0.0) ? _1349 : max(0.0, _1349))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1358 = 1.0;
    }
    float _1362 = (_1358 * cbModelParam._m0[1u].x) + (_1347 * (1.0 - cbModelParam._m0[1u].x));
    float _1372 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _341);
    float _1373 = isnan(_1372) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1372 : min(cbModelParam._m0[25u].z, _1372));
    float _1454;
    float _1456;
    float _1458;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1421 = fma(_592, cbModelParam._m0[13u].z, fma(_588, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _584)) + cbModelParam._m0[13u].w;
        float _1425 = fma(_592, cbModelParam._m0[14u].z, fma(_588, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _584)) + cbModelParam._m0[14u].w;
        float _1429 = fma(_592, cbModelParam._m0[15u].z, fma(_588, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _584)) + cbModelParam._m0[15u].w;
        float _1432 = fma(_530, cbModelParam._m0[13u].z, fma(_529, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _528));
        float _1435 = fma(_530, cbModelParam._m0[14u].z, fma(_529, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _528));
        float _1438 = fma(_530, cbModelParam._m0[15u].z, fma(_529, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _528));
        float _1466;
        if (_1432 > 0.0)
        {
            _1466 = abs((1.0 - _1421) / _1432);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1432 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1421 + 1.0) / _1432);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1466 = frontier_phi_17_15_ladder;
        }
        float _1693;
        if (_1435 > 0.0)
        {
            _1693 = abs((1.0 - _1425) / _1435);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1435 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1425 + 1.0) / _1435);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1693 = frontier_phi_26_22_ladder;
        }
        float _1950;
        if (_1438 > 0.0)
        {
            _1950 = abs((1.0 - _1429) / _1438);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1438 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1429 + 1.0) / _1438);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1950 = frontier_phi_38_33_ladder;
        }
        float _1952 = isnan(_1693) ? _1466 : (isnan(_1466) ? _1693 : min(_1466, _1693));
        float _1953 = isnan(_1950) ? _1952 : (isnan(_1952) ? _1950 : min(_1952, _1950));
        float _1957 = (_1953 * _1432) + _1421;
        float _1958 = (_1953 * _1435) + _1425;
        float _1959 = (_1953 * _1438) + _1429;
        float _1960 = _1953 * 9.9999997473787516355514526367188e-05;
        float _1962 = (-1.0) - _1960;
        float _1964 = _1960 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1959 > _1964) || ((_1959 < _1962) || ((_1958 > _1964) || ((_1958 < _1962) || ((_1957 < _1962) || (_1957 > _1964))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2087 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1959, cbModelParam._m0[9u].z, fma(_1958, cbModelParam._m0[9u].y, _1957 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1959, cbModelParam._m0[10u].z, fma(_1958, cbModelParam._m0[10u].y, _1957 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1959, cbModelParam._m0[11u].z, fma(_1958, cbModelParam._m0[11u].y, _1957 * cbModelParam._m0[11u].x))), _1373);
            frontier_phi_16_38_ladder = _2087.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2087.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2087.x * cbModelParam._m0[1u].y;
        }
        _1454 = frontier_phi_16_38_ladder_2;
        _1456 = frontier_phi_16_38_ladder_1;
        _1458 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1442 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_528, _529, _530), _1373);
        _1454 = _1442.x * cbModelParam._m0[1u].y;
        _1456 = _1442.y * cbModelParam._m0[1u].y;
        _1458 = _1442.z * cbModelParam._m0[1u].y;
    }
    float _1462 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _341);
    float _1463 = isnan(_1462) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1462 : min(cbModelParam._m0[25u].w, _1462));
    float _1555;
    float _1557;
    float _1559;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1519 = fma(_592, cbModelParam._m0[21u].z, fma(_588, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _584)) + cbModelParam._m0[21u].w;
        float _1523 = fma(_592, cbModelParam._m0[22u].z, fma(_588, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _584)) + cbModelParam._m0[22u].w;
        float _1527 = fma(_592, cbModelParam._m0[23u].z, fma(_588, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _584)) + cbModelParam._m0[23u].w;
        float _1530 = fma(_530, cbModelParam._m0[21u].z, fma(_529, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _528));
        float _1533 = fma(_530, cbModelParam._m0[22u].z, fma(_529, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _528));
        float _1536 = fma(_530, cbModelParam._m0[23u].z, fma(_529, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _528));
        float _1698;
        if (_1530 > 0.0)
        {
            _1698 = abs((1.0 - _1519) / _1530);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1519 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1698 = frontier_phi_28_24_ladder;
        }
        float _1977;
        if (_1533 > 0.0)
        {
            _1977 = abs((1.0 - _1523) / _1533);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1523 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1977 = frontier_phi_40_35_ladder;
        }
        float _2190;
        if (_1536 > 0.0)
        {
            _2190 = abs((1.0 - _1527) / _1536);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1527 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2190 = frontier_phi_49_46_ladder;
        }
        float _2192 = isnan(_1977) ? _1698 : (isnan(_1698) ? _1977 : min(_1698, _1977));
        float _2193 = isnan(_2190) ? _2192 : (isnan(_2192) ? _2190 : min(_2192, _2190));
        float _2197 = (_2193 * _1530) + _1519;
        float _2198 = (_2193 * _1533) + _1523;
        float _2199 = (_2193 * _1536) + _1527;
        float _2200 = _2193 * 9.9999997473787516355514526367188e-05;
        float _2201 = (-1.0) - _2200;
        float _2203 = _2200 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2199 > _2203) || ((_2199 < _2201) || ((_2198 > _2203) || ((_2198 < _2201) || ((_2197 < _2201) || (_2197 > _2203))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2433 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2199, cbModelParam._m0[17u].z, fma(_2198, cbModelParam._m0[17u].y, _2197 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2199, cbModelParam._m0[18u].z, fma(_2198, cbModelParam._m0[18u].y, _2197 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2199, cbModelParam._m0[19u].z, fma(_2198, cbModelParam._m0[19u].y, _2197 * cbModelParam._m0[19u].x))), _1463);
            frontier_phi_25_49_ladder = _2433.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2433.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2433.x * cbModelParam._m0[1u].z;
        }
        _1555 = frontier_phi_25_49_ladder_2;
        _1557 = frontier_phi_25_49_ladder_1;
        _1559 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1539 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_528, _529, _530), _1463);
        _1555 = _1539.x * cbModelParam._m0[1u].z;
        _1557 = _1539.y * cbModelParam._m0[1u].z;
        _1559 = _1539.z * cbModelParam._m0[1u].z;
    }
    float _1572 = (((_555 * _505) + _556) * _520) * ((cbModelParam._m0[1u].w * (_1555 - _1454)) + _1454);
    float _1574 = (((_555 * _507) + _556) * _520) * ((cbModelParam._m0[1u].w * (_1557 - _1456)) + _1456);
    float _1576 = (((_555 * _508) + _556) * _520) * ((cbModelParam._m0[1u].w * (_1559 - _1458)) + _1458);
    float _1579 = fma(_1576, cbSceneParam._m0[89u].z, fma(_1574, cbSceneParam._m0[89u].y, _1572 * cbSceneParam._m0[89u].x));
    float _1582 = fma(_1576, cbSceneParam._m0[90u].z, fma(_1574, cbSceneParam._m0[90u].y, _1572 * cbSceneParam._m0[90u].x));
    float _1585 = fma(_1576, cbSceneParam._m0[91u].z, fma(_1574, cbSceneParam._m0[91u].y, _1572 * cbSceneParam._m0[91u].x));
    vec4 _1593 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_440, _441));
    float _1595 = _1593.w;
    float _1607 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1595);
    float _1608 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1595);
    float _1609 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1595);
    uvec4 _1613 = floatBitsToUint(cbInstanceData._m0[_480 + 5u]);
    uint _1615 = _1613.x * 14u;
    uint _1616 = _1615 + 13u;
    float _1623 = _520 + (-1.0);
    float _1628 = (cbLight._m0[_1616].x * _1623) + 1.0;
    float _1629 = (cbLight._m0[_1616].y * _1623) + 1.0;
    float _1630 = (cbLight._m0[_1616].z * _1623) + 1.0;
    float _1631 = (cbLight._m0[_1616].w * _1623) + 1.0;
    uint _1632 = _1615 + 5u;
    float _1638 = isnan(1.0) ? _1629 : (isnan(_1629) ? 1.0 : min(_1629, 1.0));
    uint _1642 = _1615 + 4u;
    float _1652 = isnan(1.0) ? _1628 : (isnan(_1628) ? 1.0 : min(_1628, 1.0));
    uint _1656 = _1615 | 1u;
    float _1667 = dot(vec3(cbLight._m0[_1615].xyz), vec3(_338, _339, _340));
    float _1670 = dot(vec3(cbLight._m0[_1656].xyz), vec3(_338, _339, _340));
    float _3892 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
    float _3903 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
    float _1675 = (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * 0.3183098733425140380859375;
    float _1677 = (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * 0.3183098733425140380859375;
    float _1684 = ((cbLight._m0[_1632].x * _1638) * _1677) + (((cbLight._m0[_1642].x * _1607) * _1652) * _1675);
    float _1685 = ((_1638 * cbLight._m0[_1632].y) * _1677) + (((cbLight._m0[_1642].y * _1608) * _1652) * _1675);
    float _1686 = ((_1638 * cbLight._m0[_1632].z) * _1677) + (((cbLight._m0[_1642].z * _1609) * _1652) * _1675);
    uvec4 _1690 = floatBitsToUint(cbLight._m0[_1615 + 12u]);
    bool _1692 = _1690.x == 0u;
    float _1703;
    float _1705;
    float _1707;
    if (_1692)
    {
        _1703 = _1684;
        _1705 = _1685;
        _1707 = _1686;
    }
    else
    {
        uint _1711 = _1615 + 6u;
        float _1727 = (dot(vec3(cbLight._m0[_1615 + 2u].xyz), vec3(_338, _339, _340)) * 0.5) + 0.5;
        float _1728 = _1727 * _1727;
        float _3914 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1730 = isnan(1.0) ? _1630 : (isnan(_1630) ? 1.0 : min(_1630, 1.0));
        _1703 = (((cbLight._m0[_1711].x * 0.3183098733425140380859375) * _1729) * _1730) + _1684;
        _1705 = (((cbLight._m0[_1711].y * 0.3183098733425140380859375) * _1729) * _1730) + _1685;
        _1707 = (((cbLight._m0[_1711].z * 0.3183098733425140380859375) * _1729) * _1730) + _1686;
    }
    bool _1710 = _1690.y == 0u;
    float _1748;
    float _1750;
    float _1752;
    if (_1710)
    {
        _1748 = _1703;
        _1750 = _1705;
        _1752 = _1707;
    }
    else
    {
        uint _1921 = _1615 + 7u;
        float _1937 = (dot(vec3(cbLight._m0[_1615 + 3u].xyz), vec3(_338, _339, _340)) * 0.5) + 0.5;
        float _1938 = _1937 * _1937;
        float _3930 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1939 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1940 = isnan(1.0) ? _1631 : (isnan(_1631) ? 1.0 : min(_1631, 1.0));
        _1748 = (((cbLight._m0[_1921].x * 0.3183098733425140380859375) * _1939) * _1940) + _1703;
        _1750 = (((cbLight._m0[_1921].y * 0.3183098733425140380859375) * _1939) * _1940) + _1705;
        _1752 = (((cbLight._m0[_1921].z * 0.3183098733425140380859375) * _1939) * _1940) + _1707;
    }
    uint _1755 = _1615 + 8u;
    float _1768 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1615].w)) * _341) * 0.949999988079071044921875);
    float _1769 = _1768 * _1768;
    float _1770 = cbLight._m0[_1615].x + _419;
    float _1771 = cbLight._m0[_1615].y + _420;
    float _1772 = cbLight._m0[_1615].z + _421;
    float _1776 = inversesqrt(dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772)));
    float _1777 = _1776 * _1770;
    float _1778 = _1776 * _1771;
    float _1779 = _1776 * _1772;
    float _1780 = dot(vec3(_338, _339, _340), vec3(cbLight._m0[_1615].xyz));
    float _3946 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1783 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _3957 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _1784 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _1785 = dot(vec3(_338, _339, _340), vec3(_1777, _1778, _1779));
    float _3968 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1788 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _1789 = dot(vec3(cbLight._m0[_1615].xyz), vec3(_1777, _1778, _1779));
    float _3979 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1793 = _1769 * _1769;
    float _1797 = ((_1788 * _1788) * (_1793 + (-1.0))) + 1.0;
    float _1805 = exp2(log2(1.0 - (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) * 5.0);
    float _1806 = 0.959999978542327880859375 - _502;
    float _1808 = 0.959999978542327880859375 - _503;
    float _1809 = 0.959999978542327880859375 - _504;
    float _1816 = 1.0 - _1769;
    float _1827 = (0.5 / (((_1784 * ((_1783 * _1816) + _1769)) + 9.9999999392252902907785028219223e-09) + (((_1784 * _1816) + _1769) * _1783))) * _1783;
    float _3990 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1829 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1793 / ((_1797 * _1797) * 3.141590118408203125));
    uint _1843 = _1615 + 9u;
    float _1854 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1656].w)) * _341) * 0.949999988079071044921875);
    float _1855 = _1854 * _1854;
    float _1856 = cbLight._m0[_1656].x + _419;
    float _1857 = cbLight._m0[_1656].y + _420;
    float _1858 = cbLight._m0[_1656].z + _421;
    float _1862 = inversesqrt(dot(vec3(_1856, _1857, _1858), vec3(_1856, _1857, _1858)));
    float _1863 = _1862 * _1856;
    float _1864 = _1862 * _1857;
    float _1865 = _1862 * _1858;
    float _1866 = dot(vec3(_338, _339, _340), vec3(cbLight._m0[_1656].xyz));
    float _4001 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1869 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _1870 = dot(vec3(_338, _339, _340), vec3(_1863, _1864, _1865));
    float _4012 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1873 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _1874 = dot(vec3(cbLight._m0[_1656].xyz), vec3(_1863, _1864, _1865));
    float _4023 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1878 = _1855 * _1855;
    float _1882 = ((_1873 * _1873) * (_1878 + (-1.0))) + 1.0;
    float _1889 = exp2(log2(1.0 - (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * 5.0);
    float _1896 = 1.0 - _1855;
    float _1906 = (0.5 / (((_1784 * ((_1869 * _1896) + _1855)) + 9.9999999392252902907785028219223e-09) + (((_1784 * _1896) + _1855) * _1869))) * _1869;
    float _4034 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1908 = (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1878 / ((_1882 * _1882) * 3.141590118408203125));
    float _1918 = (((((_1889 * _1806) + _505) * cbLight._m0[_1843].x) * _1908) * _1638) + ((((cbLight._m0[_1755].x * _1607) * ((_1805 * _1806) + _505)) * _1829) * _1652);
    float _1919 = (((((_1889 * _1808) + _507) * cbLight._m0[_1843].y) * _1908) * _1638) + ((((cbLight._m0[_1755].y * _1608) * ((_1805 * _1808) + _507)) * _1829) * _1652);
    float _1920 = (((((_1889 * _1809) + _508) * cbLight._m0[_1843].z) * _1908) * _1638) + ((((cbLight._m0[_1755].z * _1609) * ((_1805 * _1809) + _508)) * _1829) * _1652);
    float _1982;
    float _1984;
    float _1986;
    if (_1692)
    {
        _1982 = _1918;
        _1984 = _1919;
        _1986 = _1920;
    }
    else
    {
        uint _1988 = _1615 + 2u;
        uint _1992 = _1615 + 10u;
        float _2006 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1988].w)) * _341) * 0.949999988079071044921875);
        float _2007 = _2006 * _2006;
        float _2008 = cbLight._m0[_1988].x + _419;
        float _2009 = cbLight._m0[_1988].y + _420;
        float _2010 = cbLight._m0[_1988].z + _421;
        float _2014 = inversesqrt(dot(vec3(_2008, _2009, _2010), vec3(_2008, _2009, _2010)));
        float _2015 = _2014 * _2008;
        float _2016 = _2014 * _2009;
        float _2017 = _2014 * _2010;
        float _2018 = dot(vec3(_338, _339, _340), vec3(cbLight._m0[_1988].xyz));
        float _4045 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2021 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _2022 = dot(vec3(_338, _339, _340), vec3(_2015, _2016, _2017));
        float _4056 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2025 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _2026 = dot(vec3(cbLight._m0[_1988].xyz), vec3(_2015, _2016, _2017));
        float _4067 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2030 = _2007 * _2007;
        float _2034 = ((_2025 * _2025) * (_2030 + (-1.0))) + 1.0;
        float _2041 = exp2(log2(1.0 - (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) * 5.0);
        float _2048 = 1.0 - _2007;
        float _2058 = (0.5 / (((_1784 * ((_2021 * _2048) + _2007)) + 9.9999999392252902907785028219223e-09) + (((_1784 * _2048) + _2007) * _2021))) * _2021;
        float _4078 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2060 = (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_2030 / ((_2034 * _2034) * 3.141590118408203125));
        float _2061 = isnan(1.0) ? _1630 : (isnan(_1630) ? 1.0 : min(_1630, 1.0));
        _1982 = (((((_2041 * _1806) + _505) * cbLight._m0[_1992].x) * _2060) * _2061) + _1918;
        _1984 = (((((_2041 * _1808) + _507) * cbLight._m0[_1992].y) * _2060) * _2061) + _1919;
        _1986 = (((((_2041 * _1809) + _508) * cbLight._m0[_1992].z) * _2060) * _2061) + _1920;
    }
    float _2096;
    float _2098;
    float _2100;
    if (_1710)
    {
        _2096 = _1982;
        _2098 = _1984;
        _2100 = _1986;
    }
    else
    {
        uint _2107 = _1615 + 3u;
        uint _2111 = _1615 + 11u;
        float _2125 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2107].w)) * _341) * 0.949999988079071044921875);
        float _2126 = _2125 * _2125;
        float _2127 = cbLight._m0[_2107].x + _419;
        float _2128 = cbLight._m0[_2107].y + _420;
        float _2129 = cbLight._m0[_2107].z + _421;
        float _2133 = inversesqrt(dot(vec3(_2127, _2128, _2129), vec3(_2127, _2128, _2129)));
        float _2134 = _2133 * _2127;
        float _2135 = _2133 * _2128;
        float _2136 = _2133 * _2129;
        float _2137 = dot(vec3(_338, _339, _340), vec3(cbLight._m0[_2107].xyz));
        float _4094 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2140 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _2141 = dot(vec3(_338, _339, _340), vec3(_2134, _2135, _2136));
        float _4105 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2144 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _2145 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_2134, _2135, _2136));
        float _4116 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2149 = _2126 * _2126;
        float _2153 = ((_2144 * _2144) * (_2149 + (-1.0))) + 1.0;
        float _2160 = exp2(log2(1.0 - (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)))) * 5.0);
        float _2167 = 1.0 - _2126;
        float _2177 = (0.5 / (((_1784 * ((_2140 * _2167) + _2126)) + 9.9999999392252902907785028219223e-09) + (((_1784 * _2167) + _2126) * _2140))) * _2140;
        float _4127 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2179 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_2149 / ((_2153 * _2153) * 3.141590118408203125));
        float _2180 = isnan(1.0) ? _1631 : (isnan(_1631) ? 1.0 : min(_1631, 1.0));
        _2096 = (((((_2160 * _1806) + _505) * cbLight._m0[_2111].x) * _2179) * _2180) + _1982;
        _2098 = (((((_2160 * _1808) + _507) * cbLight._m0[_2111].y) * _2179) * _2180) + _1984;
        _2100 = (((((_2160 * _1809) + _508) * cbLight._m0[_2111].z) * _2179) * _2180) + _1986;
    }
    float _2315;
    float _2317;
    float _2319;
    float _2321;
    float _2323;
    float _2325;
    if (_1613.y == 0u)
    {
        float _2255 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2256 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2255;
        float _2257 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2255;
        float _2258 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2255;
        uvec4 _2270 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2271 = _2270.x;
        uint _2282 = uint((float(_2270.y) * floor(float(uint(cbSceneParam._m0[85u].y * _441) / _2271))) + floor(float(uint(cbSceneParam._m0[85u].x * _440) / _2271)));
        float _2292 = (log2(_2258 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2293 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        uint _2296 = uint(isnan(14.0) ? _2293 : (isnan(_2293) ? 14.0 : min(_2293, 14.0)));
        uvec4 _2301 = texelFetch(g_lightClusterGridBuffer, int(((_2296 << 2u) + (_2282 << 6u)) >> 2u));
        uint _2302 = _2301.x;
        uint _2303 = _2270.z;
        float _2438;
        float _2440;
        float _2442;
        float _2444;
        float _2446;
        float _2448;
        if (((((1u << ((_2303 >> 4u) & 15u)) + 4294967295u) & _2302) == 0u) || ((_2303 & 240u) == 0u))
        {
            _2438 = 0.0;
            _2440 = 0.0;
            _2442 = 0.0;
            _2444 = 0.0;
            _2446 = 0.0;
            _2448 = 0.0;
        }
        else
        {
            float _2439;
            float _2441;
            float _2443;
            float _2445;
            float _2447;
            float _2449;
            float _2600 = 0.0;
            float _2601 = 0.0;
            float _2602 = 0.0;
            float _2603 = 0.0;
            float _2604 = 0.0;
            float _2605 = 0.0;
            uint _2606 = 0u;
            uint _2615;
            bool _2616;
            for (;;)
            {
                _2615 = texelFetch(g_lightClassification, int((((_2296 << 5u) + (_2282 << 9u)) + (_2606 << 2u)) >> 2u)).x;
                _2616 = _2615 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2616)
                {
                    frontier_phi_66_pred = _2600;
                    frontier_phi_66_pred_1 = _2605;
                    frontier_phi_66_pred_2 = _2604;
                    frontier_phi_66_pred_3 = _2603;
                    frontier_phi_66_pred_4 = _2602;
                    frontier_phi_66_pred_5 = _2601;
                }
                else
                {
                    float _2745;
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    uint _2751;
                    _2745 = _2600;
                    _2746 = _2601;
                    _2747 = _2602;
                    _2748 = _2603;
                    _2749 = _2604;
                    _2750 = _2605;
                    _2751 = _2615;
                    float _2672;
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    for (;;)
                    {
                        uint _2755 = uint(findLSB(_2751)) + (_2606 << 5u);
                        uint _2752 = (_2751 + 4294967295u) & _2751;
                        uint _2757 = _2755 * 48u;
                        vec4 _2771 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2757)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 3u)).x));
                        uint _2777 = (_2755 * 48u) + 4u;
                        vec4 _2790 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2777)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 3u)).x));
                        uint _2796 = (_2755 * 48u) + 8u;
                        vec3 _2807 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2796)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 2u)).x));
                        float _2811 = _2771.x - _2256;
                        float _2812 = _2771.y - _2257;
                        float _2813 = _2771.z - _2258;
                        float _2814 = dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813));
                        float _2817 = inversesqrt(_2814);
                        float _2818 = _2817 * _2811;
                        float _2819 = _2817 * _2812;
                        float _2820 = _2817 * _2813;
                        float _2821 = dot(vec3(_461, _464, _467), vec3(_2818, _2819, _2820));
                        float _2826 = 1.0 - (_2814 * _2771.w);
                        float _4153 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                        float _2827 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                        float _2828 = sqrt(_2814) * _2790.w;
                        float _2831 = 1.39999997615814208984375 / (_2828 + 1.39999997615814208984375);
                        float _2832 = _2831 * _2831;
                        float _2835 = ((1.0 - _2832) * _2821) + _2832;
                        float _2838 = _2828 * _2828;
                        float _2842 = ((isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0))) * _2827) / ((_2838 * 0.699999988079071044921875) + 1.0);
                        float _2846 = (-0.0) - _2256;
                        float _2847 = (-0.0) - _2257;
                        float _2848 = (-0.0) - _2258;
                        float _2852 = inversesqrt(dot(vec3(_2846, _2847, _2848), vec3(_2846, _2847, _2848)));
                        float _2853 = _2852 * _2846;
                        float _2854 = _2852 * _2847;
                        float _2855 = _2852 * _2848;
                        float _2863 = exp2(log2(1.0 / ((_2838 * 3.5) + 5.0)) * 0.25);
                        float _2864 = 1.0 - _536;
                        float _2871 = sqrt(1.0 - ((1.0 - (_2864 * _2864)) * (1.0 - (_2863 * _2863))));
                        float _2872 = _2871 * _2871;
                        float _2873 = _2872 * _2872;
                        float _2874 = _2853 + _2818;
                        float _2875 = _2854 + _2819;
                        float _2876 = _2855 + _2820;
                        float _2880 = inversesqrt(dot(vec3(_2874, _2875, _2876), vec3(_2874, _2875, _2876)));
                        float _2884 = dot(vec3(_461, _464, _467), vec3(_2853, _2854, _2855));
                        float _4169 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
                        float _2887 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                        float _2888 = dot(vec3(_461, _464, _467), vec3(_2880 * _2874, _2880 * _2875, _2880 * _2876));
                        float _4180 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                        float _2891 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
                        float _2895 = ((_2891 * _2891) * (_2873 + (-1.0))) + 1.0;
                        float _2896 = _2831 * _2872;
                        float _2897 = _2896 * _2896;
                        float _2900 = ((1.0 - _2897) * _2821) + _2897;
                        float _4191 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                        float _2901 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
                        float _2902 = 1.0 - _2872;
                        float _2912 = (0.5 / (((_2901 * ((_2887 * _2902) + _2872)) + 9.9999999392252902907785028219223e-09) + (((_2901 * _2902) + _2872) * _2887))) * _2901;
                        float _4202 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                        float _2923 = (((_2873 * 3.1415927410125732421875) * (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) / ((_2895 * _2895) * ((_2838 * 2.1991131305694580078125) + 3.141590118408203125))) * _2827;
                        _2675 = (_2842 * _2790.x) + _2748;
                        _2676 = (_2842 * _2790.y) + _2749;
                        _2677 = (_2842 * _2790.z) + _2750;
                        _2672 = (_2923 * _2807.x) + _2745;
                        _2673 = (_2923 * _2807.y) + _2746;
                        _2674 = (_2923 * _2807.z) + _2747;
                        if (_2752 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2745 = _2672;
                            _2746 = _2673;
                            _2747 = _2674;
                            _2748 = _2675;
                            _2749 = _2676;
                            _2750 = _2677;
                            _2751 = _2752;
                        }
                    }
                    frontier_phi_66_pred = _2672;
                    frontier_phi_66_pred_1 = _2677;
                    frontier_phi_66_pred_2 = _2676;
                    frontier_phi_66_pred_3 = _2675;
                    frontier_phi_66_pred_4 = _2674;
                    frontier_phi_66_pred_5 = _2673;
                }
                _2439 = frontier_phi_66_pred;
                _2449 = frontier_phi_66_pred_1;
                _2447 = frontier_phi_66_pred_2;
                _2445 = frontier_phi_66_pred_3;
                _2443 = frontier_phi_66_pred_4;
                _2441 = frontier_phi_66_pred_5;
                uint _2607 = _2606 + 1u;
                if (_2607 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2600 = _2439;
                    _2601 = _2441;
                    _2602 = _2443;
                    _2603 = _2445;
                    _2604 = _2447;
                    _2605 = _2449;
                    _2606 = _2607;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2438 = _2439;
            _2440 = _2441;
            _2442 = _2443;
            _2444 = _2445;
            _2446 = _2447;
            _2448 = _2449;
        }
        uvec4 _2452 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2453 = _2452.z;
        uint _2455 = (_2453 >> 8u) & 15u;
        float _2568;
        float _2570;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        if (((4294967295u << _2455) & _2302) == 0u)
        {
            _2568 = _2438;
            _2570 = _2440;
            _2572 = _2442;
            _2574 = _2444;
            _2576 = _2446;
            _2578 = _2448;
        }
        else
        {
            float _2593 = inversesqrt(dot(vec3(_2256, _2257, _2258), vec3(_2256, _2257, _2258)));
            float _2594 = _2593 * _2256;
            float _2595 = _2593 * _2257;
            float _2596 = _2593 * _2258;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2455 < ((_2453 >> 12u) & 15u))
            {
                float _2569;
                float _2571;
                float _2573;
                float _2575;
                float _2577;
                float _2579;
                float _2728 = _2438;
                float _2729 = _2440;
                float _2730 = _2442;
                float _2731 = _2444;
                float _2732 = _2446;
                float _2733 = _2448;
                uint _2734 = _2455;
                uint _2743;
                bool _2744;
                for (;;)
                {
                    _2743 = texelFetch(g_lightClassification, int((((_2296 << 5u) + (_2282 << 9u)) + (_2734 << 2u)) >> 2u)).x;
                    _2744 = _2743 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2744)
                    {
                        frontier_phi_77_pred = _2733;
                        frontier_phi_77_pred_1 = _2732;
                        frontier_phi_77_pred_2 = _2731;
                        frontier_phi_77_pred_3 = _2730;
                        frontier_phi_77_pred_4 = _2729;
                        frontier_phi_77_pred_5 = _2728;
                    }
                    else
                    {
                        float _2937;
                        float _2938;
                        float _2939;
                        float _2940;
                        float _2941;
                        float _2942;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _2950 = _2728;
                        float _2951 = _2729;
                        float _2952 = _2730;
                        float _2953 = _2731;
                        float _2954 = _2732;
                        float _2955 = _2733;
                        uint _2956 = _2743;
                        uint _2957;
                        vec4 _2982;
                        float _2983;
                        vec4 _2998;
                        vec3 _3010;
                        vec4 _3026;
                        vec4 _3042;
                        float _3089;
                        bool _3090;
                        for (;;)
                        {
                            uint _2967 = ((_2734 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2956));
                            _2957 = (_2956 + 4294967295u) & _2956;
                            uint _2969 = _2967 * 40u;
                            _2982 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 3u)).x));
                            _2983 = _2982.w;
                            uint _2985 = (_2967 * 40u) + 4u;
                            _2998 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 3u)).x));
                            uint _3000 = (_2967 * 40u) + 8u;
                            _3010 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 2u)).x));
                            uint _3013 = (_2967 * 40u) + 16u;
                            _3026 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 3u)).x));
                            uint _3029 = (_2967 * 40u) + 20u;
                            _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            uint _3045 = (_2967 * 40u) + 24u;
                            vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            uint _3064 = (_2967 * 40u) + 28u;
                            vec4 _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            _3089 = fma(_2258, _3077.z, fma(_2257, _3077.y, _3077.x * _2256)) + _3077.w;
                            _3090 = !((fma(_2258, _3058.z, fma(_2257, _3058.y, _3058.x * _2256)) + _3058.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3090)
                            {
                                float _3117 = _2982.x - _2256;
                                float _3118 = _2982.y - _2257;
                                float _3119 = _2982.z - _2258;
                                float _3120 = dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119));
                                float _3123 = inversesqrt(_3120);
                                float _3124 = _3123 * _3117;
                                float _3125 = _3123 * _3118;
                                float _3126 = _3123 * _3119;
                                float _3130 = 1.0 - (_3120 / (_2983 * _2983));
                                float _4213 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3131 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                                float _3135 = sqrt(_3120) * _2998.w;
                                float _3137 = 1.39999997615814208984375 / (_3135 + 1.39999997615814208984375);
                                float _3138 = _3137 * _3137;
                                float _3141 = ((1.0 - _3138) * dot(vec3(_3124, _3125, _3126), vec3(_461, _464, _467))) + _3138;
                                float _3144 = _3135 * _3135;
                                float _3148 = (fma(_2258, _3026.z, fma(_2257, _3026.y, _3026.x * _2256)) + _3026.w) / _3089;
                                float _3149 = (fma(_2258, _3042.z, fma(_2257, _3042.y, _3042.x * _2256)) + _3042.w) / _3089;
                                float _3153 = 1.0 - dot(vec2(_3148, _3149), vec2(_3148, _3149));
                                float _4229 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3154 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                                float _3155 = _3154 * (((isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0))) * _3131) / ((_3144 * 0.699999988079071044921875) + 1.0));
                                float _3167 = exp2(log2(1.0 / ((_3144 * 3.5) + 5.0)) * 0.25);
                                float _3168 = 1.0 - _536;
                                float _3175 = sqrt(1.0 - ((1.0 - (_3168 * _3168)) * (1.0 - (_3167 * _3167))));
                                float _3176 = _3175 * _3175;
                                float _3177 = _3176 * _3176;
                                float _3178 = _3124 - _2594;
                                float _3179 = _3125 - _2595;
                                float _3180 = _3126 - _2596;
                                float _3184 = inversesqrt(dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180)));
                                float _3188 = dot(vec3(_461, _464, _467), vec3((-0.0) - _2594, (-0.0) - _2595, (-0.0) - _2596));
                                float _4240 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3191 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                                float _3192 = dot(vec3(_461, _464, _467), vec3(_3184 * _3178, _3184 * _3179, _3184 * _3180));
                                float _4251 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3195 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                                float _3199 = ((_3195 * _3195) * (_3177 + (-1.0))) + 1.0;
                                float _3200 = _3137 * _3176;
                                float _3201 = _3200 * _3200;
                                float _3207 = ((1.0 - _3201) * dot(vec3(_461, _464, _467), vec3(_3124, _3125, _3126))) + _3201;
                                float _4262 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3208 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
                                float _3209 = 1.0 - _3176;
                                float _3219 = (0.5 / (((_3208 * ((_3191 * _3209) + _3176)) + 9.9999999392252902907785028219223e-09) + (((_3208 * _3209) + _3176) * _3191))) * _3208;
                                float _4273 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3229 = (_3154 * _3131) * (((_3177 * 3.1415927410125732421875) * (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) / ((_3199 * _3199) * ((_3144 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3155 * _2998.y;
                                frontier_phi_83_pred_1 = _3155 * _2998.x;
                                frontier_phi_83_pred_2 = _3229 * _3010.z;
                                frontier_phi_83_pred_3 = _3229 * _3010.y;
                                frontier_phi_83_pred_4 = _3229 * _3010.x;
                                frontier_phi_83_pred_5 = _3155 * _2998.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3237 = frontier_phi_83_pred;
                            _3236 = frontier_phi_83_pred_1;
                            _3235 = frontier_phi_83_pred_2;
                            _3234 = frontier_phi_83_pred_3;
                            _3233 = frontier_phi_83_pred_4;
                            _3238 = frontier_phi_83_pred_5;
                            _2940 = _3236 + _2953;
                            _2941 = _3237 + _2954;
                            _2942 = _3238 + _2955;
                            _2937 = _3233 + _2950;
                            _2938 = _3234 + _2951;
                            _2939 = _3235 + _2952;
                            if (_2957 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2950 = _2937;
                                _2951 = _2938;
                                _2952 = _2939;
                                _2953 = _2940;
                                _2954 = _2941;
                                _2955 = _2942;
                                _2956 = _2957;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2942;
                        frontier_phi_77_pred_1 = _2941;
                        frontier_phi_77_pred_2 = _2940;
                        frontier_phi_77_pred_3 = _2939;
                        frontier_phi_77_pred_4 = _2938;
                        frontier_phi_77_pred_5 = _2937;
                    }
                    _2579 = frontier_phi_77_pred;
                    _2577 = frontier_phi_77_pred_1;
                    _2575 = frontier_phi_77_pred_2;
                    _2573 = frontier_phi_77_pred_3;
                    _2571 = frontier_phi_77_pred_4;
                    _2569 = frontier_phi_77_pred_5;
                    uint _2735 = _2734 + 1u;
                    if (_2735 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2728 = _2569;
                        _2729 = _2571;
                        _2730 = _2573;
                        _2731 = _2575;
                        _2732 = _2577;
                        _2733 = _2579;
                        _2734 = _2735;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2573;
                frontier_phi_58_59_ladder_1 = _2579;
                frontier_phi_58_59_ladder_2 = _2577;
                frontier_phi_58_59_ladder_3 = _2575;
                frontier_phi_58_59_ladder_4 = _2571;
                frontier_phi_58_59_ladder_5 = _2569;
            }
            else
            {
                frontier_phi_58_59_ladder = _2442;
                frontier_phi_58_59_ladder_1 = _2448;
                frontier_phi_58_59_ladder_2 = _2446;
                frontier_phi_58_59_ladder_3 = _2444;
                frontier_phi_58_59_ladder_4 = _2440;
                frontier_phi_58_59_ladder_5 = _2438;
            }
            _2568 = frontier_phi_58_59_ladder_5;
            _2570 = frontier_phi_58_59_ladder_4;
            _2572 = frontier_phi_58_59_ladder;
            _2574 = frontier_phi_58_59_ladder_3;
            _2576 = frontier_phi_58_59_ladder_2;
            _2578 = frontier_phi_58_59_ladder_1;
        }
        float _2583 = isnan(1.0) ? _520 : (isnan(_520) ? 1.0 : min(_520, 1.0));
        _2315 = (_2583 * _2574) + _1748;
        _2317 = (_2583 * _2576) + _1750;
        _2319 = (_2583 * _2578) + _1752;
        _2321 = ((_2568 * _505) * _2583) + _2096;
        _2323 = ((_2570 * _507) * _2583) + _2098;
        _2325 = ((_2572 * _508) * _2583) + _2100;
    }
    else
    {
        _2315 = _1748;
        _2317 = _1750;
        _2319 = _1752;
        _2321 = _2096;
        _2323 = _2098;
        _2325 = _2100;
    }
    uint _2331 = _481 + uint(cbMatDynParam._m0[0u].w);
    float _2339 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _320.x) * cbInstanceData._m0[_2331].x;
    float _2342 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _320.y) * cbInstanceData._m0[_2331].y;
    float _2345 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _320.z) * cbInstanceData._m0[_2331].z;
    float _4289 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _4300 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _4311 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _2362 = (((isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_2315 + ((isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))) * _520))) + ((_2321 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _1362)) * cbPerFrame._m0[3u].x)) + _2339;
    float _2364 = (_2342 + ((_2323 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _1362)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_2317 + ((isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0))) * _520)));
    float _2366 = (_2345 + ((_2325 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _1362)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2319 + ((isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))) * _520)));
    float _2367 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2368 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2369 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2375 = cbMtdParam._m0[2u].x * _2339;
    float _2376 = cbMtdParam._m0[2u].y * _2342;
    float _2377 = cbMtdParam._m0[2u].z * _2345;
    float _4337 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2379 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    uint _2380 = _480 + 6u;
    float _2388 = _440 / cbSceneParam._m0[86u].x;
    float _2389 = _441 / cbSceneParam._m0[86u].y;
    vec4 _2403 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2388, _2389, (log2((isnan(cbSceneParam._m0[77u].w) ? _361 : (isnan(_361) ? cbSceneParam._m0[77u].w : min(_361, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2405 = _2403.x;
    float _2406 = _2403.y;
    float _2407 = _2403.z;
    float _2408 = _2403.w;
    float _2501;
    float _2503;
    float _2505;
    float _2507;
    if (_361 > cbSceneParam._m0[78u].w)
    {
        float _2463 = isnan(_361) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _361 : min(cbSceneParam._m0[80u].w, _361));
        float _2464 = _2463 / _361;
        float _2475 = _2464 * _412;
        float _2476 = _413 * _2464;
        float _2477 = (-0.0) - _2476;
        float _2479 = _2464 * _414;
        float _2481 = (cbSceneParam._m0[77u].w * _2477) / _2463;
        float _2482 = _2481 + cbSceneParam._m0[79u].w;
        float _2483 = cbSceneParam._m0[79u].w - _2476;
        float _2489 = sqrt(((_2475 * _2475) + (_2476 * _2476)) + (_2479 * _2479));
        float _2492 = (1.0 - (cbSceneParam._m0[77u].w / _2463)) * _2489;
        float _2497 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2499 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2685;
        if (abs((_2477 - _2481) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2685 = ((((_2482 > 0.0) ? exp2(_2497 * _2482) : (2.0 - exp2(_2499 * _2482))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2492;
        }
        else
        {
            float _2629 = 1.0 / cbSceneParam._m0[80u].x;
            float _2630 = isnan(_2483) ? _2482 : (isnan(_2482) ? _2483 : max(_2482, _2483));
            float _2631 = isnan(_2483) ? _2482 : (isnan(_2482) ? _2483 : min(_2482, _2483));
            float _2640 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : min(_2630, 0.0));
            float _2641 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : min(_2631, 0.0));
            _2685 = ((abs(_2489 / _2477) * cbSceneParam._m0[80u].y) * ((((_2640 - _2641) * 2.0) - ((exp2(_2497 * (isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0)))) - exp2(_2497 * (isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0))))) * _2629)) - ((exp2(_2499 * _2640) - exp2(_2499 * _2641)) * _2629))) + (_2492 * cbSceneParam._m0[80u].z);
        }
        vec4 _2687 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2388, _2389, 1.0), 0.0);
        float _2696 = exp2((_2685 * (-1.44269502162933349609375)) * (1.0 - _2687.w));
        float _2697 = log2(_2696);
        float _2713 = log2(_2408);
        _2501 = (exp2(_2713 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2697 * cbSceneParam._m0[78u].x)) * _2687.x) / cbSceneParam._m0[78u].x)) + _2405;
        _2503 = (exp2(_2713 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2697 * cbSceneParam._m0[78u].y)) * _2687.y) / cbSceneParam._m0[78u].y)) + _2406;
        _2505 = (exp2(_2713 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2697 * cbSceneParam._m0[78u].z)) * _2687.z) / cbSceneParam._m0[78u].z)) + _2407;
        _2507 = _2696 * _2408;
    }
    else
    {
        _2501 = _2405;
        _2503 = _2406;
        _2505 = _2407;
        _2507 = _2408;
    }
    bool _2723;
    vec4 _2517;
    vec4 _2539;
    float _2541;
    float _2545;
    float _2546;
    float _2547;
    float _2550;
    float _2553;
    float _2556;
    float _2557;
    bool _2567;
    for (;;)
    {
        _2517 = cbMatDynParam._m0[0u];
        float _2519 = roundEven(_2517.y);
        bool _2520 = _2519 == 3.0;
        float _2521 = log2(_2507);
        float _2525 = exp2(_2521 * cbSceneParam._m0[78u].x);
        float _2526 = exp2(_2521 * cbSceneParam._m0[78u].y);
        float _2527 = exp2(_2521 * cbSceneParam._m0[78u].z);
        float _2528 = _2525 * _2367;
        float _2529 = _2526 * _2368;
        float _2530 = _2527 * _2369;
        float _2537 = _428 + (-0.5);
        _2539 = cbMtdParam._m0[1u];
        _2541 = _2539.y * _2537;
        float _2544 = (_2519 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2545 = _2544 * (_2520 ? _2528 : (_2528 + (cbSceneParam._m0[72u].w * _2501)));
        _2546 = _2544 * (_2520 ? _2529 : (_2529 + (cbSceneParam._m0[72u].w * _2503)));
        _2547 = _2544 * (_2520 ? _2530 : (_2530 + (cbSceneParam._m0[72u].w * _2505)));
        _2550 = ((_2375 * _2379) * _2525) * _2544;
        _2553 = ((_2376 * _2379) * _2526) * _2544;
        _2556 = ((_2377 * _2379) * _2527) * _2544;
        _2557 = _2537 * 0.999000012874603271484375;
        _2567 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2567)
        {
            if ((cbInstanceData._m0[_480 + 7u].x + _2557) < 0.5)
            {
                _2723 = true;
                break;
            }
        }
        uint _2664 = _481 + uint(_2517.w);
        if ((cbInstanceData._m0[_2664].w < 1.0) && ((cbInstanceData._m0[_2664].w + _2557) < 0.5))
        {
            _2723 = true;
            break;
        }
        if ((_2541 + 1.0) < _2539.x)
        {
            _2723 = true;
            break;
        }
        _2723 = false;
        break;
    }
    float _2928;
    if (_2723)
    {
        discard_state = true;
        _2928 = 0.0;
    }
    else
    {
        _2928 = cbInstanceData._m0[_2380].w;
    }
    SV_Target.x = _2545;
    SV_Target.y = _2546;
    SV_Target.z = _2547;
    SV_Target.w = _2928;
    SV_Target_1.x = _2550;
    SV_Target_1.y = _2553;
    SV_Target_1.z = _2556;
    SV_Target_1.w = cbInstanceData._m0[_2380].w;
    discard_exit();
}


