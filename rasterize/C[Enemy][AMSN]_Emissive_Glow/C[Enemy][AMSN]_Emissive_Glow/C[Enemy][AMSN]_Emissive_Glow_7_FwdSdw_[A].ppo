#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _906;
float _3603;
float _3604;
float _3605;
float _3606;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _232 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _238 = _232.x * cbMtdParam._m0[9u].x;
    float _239 = _232.y * cbMtdParam._m0[9u].y;
    float _240 = _232.z * cbMtdParam._m0[9u].z;
    vec4 _252 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _256 = _252.z;
    float _260 = (_252.x * 2.0) + (-1.0);
    float _262 = (_252.y * 2.0) + (-1.0);
    float _263 = dot(vec2(_260, _262), vec2(_260, _262));
    float _3615 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _269 = sqrt(1.0 - (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))));
    vec4 _306 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _317 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3626 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _318 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _326 = (((_318 * _318) * (3.0 - (_318 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _329 = fma(_269, _203 * NORMAL.x, fma(_262, _210 * TANGENT.x, (_196 * _189) * _260));
    float _332 = fma(_269, _203 * NORMAL.y, fma(_262, _210 * TANGENT.y, (_196 * _190) * _260));
    float _335 = fma(_269, _203 * NORMAL.z, fma(_262, _210 * TANGENT.z, (_196 * _191) * _260));
    float _339 = inversesqrt(dot(vec3(_329, _332, _335), vec3(_329, _332, _335)));
    float _340 = _339 * _329;
    float _341 = _339 * _332;
    float _342 = _339 * _335;
    float _3637 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _343 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    float _3648 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3659 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3670 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _362 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _403 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _413 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _403);
    float _414 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _403);
    float _415 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _403);
    float _419 = inversesqrt(dot(vec3(_413, _414, _415), vec3(_413, _414, _415)));
    float _420 = _413 * _419;
    float _421 = _414 * _419;
    float _422 = _415 * _419;
    vec4 _427 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _429 = _427.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _585 = sqrt(((_413 * _413) + (_414 * _414)) + (_415 * _415));
        float _591 = (cbMatDynParam._m0[5u].x * _585) + cbMatDynParam._m0[5u].y;
        float _3681 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
        float _592 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _596 = (cbMatDynParam._m0[5u].z * _585) + cbMatDynParam._m0[5u].w;
        float _3692 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) - _592)) + _592) < ((_429 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _441 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _442 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _462 = fma(_342, cbSceneParam._m0[5u].z, fma(_341, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _340));
    float _465 = fma(_342, cbSceneParam._m0[6u].z, fma(_341, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _340));
    float _468 = fma(_342, cbSceneParam._m0[7u].z, fma(_341, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _340));
    uint _481 = uint(roundEven(NORMAL.w)) * 13u;
    uint _482 = _481 + 9u;
    uint _483 = _482 + uint(cbMatDynParam._m0[0u].w);
    float _489 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0)))) * cbInstanceData._m0[_483].x;
    float _490 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) * cbInstanceData._m0[_483].y;
    float _491 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) * cbInstanceData._m0[_483].z;
    float _3703 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _492 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _3714 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _493 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _3725 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _494 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    vec4 _503 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _441, cbSceneParam._m0[86u].y * _442));
    float _506 = _503.x * TEXCOORD.z;
    float _507 = dot(vec3(_340, _341, _342), vec3(_420, _421, _422));
    float _510 = _507 * 2.0;
    float _514 = (_510 * _340) - _420;
    float _515 = (_510 * _341) - _421;
    float _516 = (_510 * _342) - _422;
    float _520 = abs(dot(vec3(_420, _421, _422), vec3(_340, _341, _342)));
    float _3736 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _522 = sqrt(_343);
    float _534 = exp2((_522 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_522 * 3.0));
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _905;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _630 = fma(_574, cbModelParam._m0[26u].z, fma(_570, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _566));
        float _634 = fma(_574, cbModelParam._m0[27u].z, fma(_570, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _566));
        float _638 = fma(_574, cbModelParam._m0[28u].z, fma(_570, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _566));
        float _663 = _566 + _340;
        float _664 = _570 + _341;
        float _665 = _574 + _342;
        float _675 = fma(_665, cbModelParam._m0[26u].z, fma(_664, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _663)) - _630;
        float _676 = fma(_665, cbModelParam._m0[27u].z, fma(_664, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _663)) - _634;
        float _677 = fma(_665, cbModelParam._m0[28u].z, fma(_664, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _663)) - _638;
        float _681 = inversesqrt(dot(vec3(_675, _676, _677), vec3(_675, _676, _677)));
        float _694 = ((_681 * _675) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_630 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _695 = ((_681 * _676) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_634 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _696 = ((_681 * _677) / cbModelParam._m0[34u].z) + ((((((_638 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _699 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_694, _695, _696), 0.0);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_694, _695, _696), 0.0);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_694, _695, _696), 0.0);
        vec4 _720 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_694, _695, _696), 0.0);
        float _733 = exp2((_699.w + (-0.5)) * 20.0) * 2.0;
        float _734 = _733 * (_699.x + (-0.5));
        float _735 = _733 * (_699.y + (-0.5));
        float _736 = _733 * (_699.z + (-0.5));
        float _743 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _744 = _743 * (_706.x + (-0.5));
        float _745 = _743 * (_706.y + (-0.5));
        float _746 = _743 * (_706.z + (-0.5));
        float _753 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _753 * (_713.x + (-0.5));
        float _755 = _753 * (_713.y + (-0.5));
        float _756 = _753 * (_713.z + (-0.5));
        float _763 = exp2((_720.w + (-0.5)) * 20.0) * 2.0;
        float _764 = _763 * (_720.x + (-0.5));
        float _765 = _763 * (_720.y + (-0.5));
        float _766 = _763 * (_720.z + (-0.5));
        float _767 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _768 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _769 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _770 = _734 * 0.5;
        float _771 = _744 * 0.5;
        float _772 = _754 * 0.5;
        float _773 = dot(vec3(_770, _771, _772), vec3(_770, _771, _772));
        float _778 = (_773 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_773);
        float _787 = (dot(vec3(_340, _341, _342), vec3(_778 * _770, _778 * _771, _778 * _772)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _797 = sqrt(((_771 * _771) + (_770 * _770)) + (_772 * _772)) / (_767 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _799 = _798 * 2.0;
        float _803 = (1.0 - _798) / (_798 + 1.0);
        float _3784 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _804 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _813 = ((((1.0 - _804) * (_799 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_799 + 1.0))) + _804) * _767;
        float _814 = _735 * 0.5;
        float _815 = _745 * 0.5;
        float _816 = _755 * 0.5;
        float _817 = dot(vec3(_814, _815, _816), vec3(_814, _815, _816));
        float _822 = (_817 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_817);
        float _830 = (dot(vec3(_340, _341, _342), vec3(_822 * _814, _822 * _815, _822 * _816)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _839 = sqrt(((_815 * _815) + (_814 * _814)) + (_816 * _816)) / (_768 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _841 = _840 * 2.0;
        float _845 = (1.0 - _840) / (_840 + 1.0);
        float _3817 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _855 = ((((1.0 - _846) * (_841 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_841 + 1.0))) + _846) * _768;
        float _856 = _736 * 0.5;
        float _857 = _746 * 0.5;
        float _858 = _756 * 0.5;
        float _859 = dot(vec3(_856, _857, _858), vec3(_856, _857, _858));
        float _864 = (_859 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_859);
        float _872 = (dot(vec3(_340, _341, _342), vec3(_864 * _856, _864 * _857, _864 * _858)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _881 = sqrt(((_857 * _857) + (_856 * _856)) + (_858 * _858)) / (_769 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _883 = _882 * 2.0;
        float _887 = (1.0 - _882) / (_882 + 1.0);
        float _3850 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _897 = ((((1.0 - _888) * (_883 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_883 + 1.0))) + _888) * _769;
        _905 = _736;
        _907 = _735;
        _908 = _734;
        _909 = _746;
        _910 = _745;
        _911 = _744;
        _912 = _756;
        _913 = _755;
        _914 = _754;
        _915 = _769;
        _916 = _768;
        _917 = _767;
        _918 = cbModelParam._m0[36u].z * (isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0)));
        _919 = cbModelParam._m0[36u].z * (isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0)));
        _920 = cbModelParam._m0[36u].z * (isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0)));
    }
    else
    {
        _905 = _906;
        _907 = _906;
        _908 = _906;
        _909 = _906;
        _910 = _906;
        _911 = _906;
        _912 = _906;
        _913 = _906;
        _914 = _906;
        _915 = _906;
        _916 = _906;
        _917 = _906;
        _918 = 0.0;
        _919 = 0.0;
        _920 = 0.0;
    }
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _949 = fma(_574, cbModelParam._m0[30u].z, fma(_570, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _566));
        float _953 = fma(_574, cbModelParam._m0[31u].z, fma(_570, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _566));
        float _957 = fma(_574, cbModelParam._m0[32u].z, fma(_570, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _566));
        float _980 = _566 + _340;
        float _981 = _570 + _341;
        float _982 = _574 + _342;
        float _992 = fma(_982, cbModelParam._m0[30u].z, fma(_981, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _980)) - _949;
        float _993 = fma(_982, cbModelParam._m0[31u].z, fma(_981, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _980)) - _953;
        float _994 = fma(_982, cbModelParam._m0[32u].z, fma(_981, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _980)) - _957;
        float _998 = inversesqrt(dot(vec3(_992, _993, _994), vec3(_992, _993, _994)));
        float _1011 = ((_998 * _992) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_949 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1012 = ((_998 * _993) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_953 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1013 = ((_998 * _994) / cbModelParam._m0[35u].z) + ((((((_957 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        float _1048 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1015.x + (-0.5));
        float _1050 = _1048 * (_1015.y + (-0.5));
        float _1051 = _1048 * (_1015.z + (-0.5));
        float _1058 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1022.x + (-0.5));
        float _1060 = _1058 * (_1022.y + (-0.5));
        float _1061 = _1058 * (_1022.z + (-0.5));
        float _1068 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1029.x + (-0.5));
        float _1070 = _1068 * (_1029.y + (-0.5));
        float _1071 = _1068 * (_1029.z + (-0.5));
        float _1078 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1036.x + (-0.5));
        float _1080 = _1078 * (_1036.y + (-0.5));
        float _1081 = _1078 * (_1036.z + (-0.5));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = _1049 * 0.5;
        float _1086 = _1059 * 0.5;
        float _1087 = _1069 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_340, _341, _342), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3913 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1112 + 1.0))) + _1117) * _1082;
        float _1127 = _1050 * 0.5;
        float _1128 = _1060 * 0.5;
        float _1129 = _1070 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_340, _341, _342), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3946 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1154 + 1.0))) + _1159) * _1083;
        float _1169 = _1051 * 0.5;
        float _1170 = _1061 * 0.5;
        float _1171 = _1071 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1185 = (dot(vec3(_340, _341, _342), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1194 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _3979 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1196 + 1.0))) + _1201) * _1084;
        _1218 = _1051;
        _1219 = _1050;
        _1220 = _1049;
        _1221 = _1061;
        _1222 = _1060;
        _1223 = _1059;
        _1224 = _1071;
        _1225 = _1070;
        _1226 = _1069;
        _1227 = _1084;
        _1228 = _1083;
        _1229 = _1082;
        _1230 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1231 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
        _1232 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
    }
    else
    {
        _1218 = _906;
        _1219 = _906;
        _1220 = _906;
        _1221 = _906;
        _1222 = _906;
        _1223 = _906;
        _1224 = _906;
        _1225 = _906;
        _1226 = _906;
        _1227 = _906;
        _1228 = _906;
        _1229 = _906;
        _1230 = 0.0;
        _1231 = 0.0;
        _1232 = 0.0;
    }
    float _1242 = (cbModelParam._m0[1u].x * (_1230 - _918)) + _918;
    float _1243 = (cbModelParam._m0[1u].x * (_1231 - _919)) + _919;
    float _1244 = (cbModelParam._m0[1u].x * (_1232 - _920)) + _920;
    float _1265 = fma(_1244, cbSceneParam._m0[89u].z, fma(_1243, cbSceneParam._m0[89u].y, _1242 * cbSceneParam._m0[89u].x));
    float _1268 = fma(_1244, cbSceneParam._m0[90u].z, fma(_1243, cbSceneParam._m0[90u].y, _1242 * cbSceneParam._m0[90u].x));
    float _1271 = fma(_1244, cbSceneParam._m0[91u].z, fma(_1243, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1242));
    float _1286 = _514 * 0.5;
    float _1287 = _515 * 0.5;
    float _1288 = _516 * 0.5;
    float _1289 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1220, _1223, _1226, _1229));
    float _1292 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1219, _1222, _1225, _1228));
    float _1295 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1218, _1221, _1224, _1227));
    float _1329;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1302 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_905, _909, _912, _915));
        float _1306 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_907, _910, _913, _916));
        float _1310 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_908, _911, _914, _917));
        float _1317 = dot(vec4(cbModelParam._m0[39u]), vec4(_1286, _1287, _1288, 1.0));
        _1329 = dot(vec3(isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)), isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1317) ? 0.0 : (isnan(0.0) ? _1317 : max(0.0, _1317))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1329 = 1.0;
    }
    float _1340;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1331 = dot(vec4(cbModelParam._m0[40u]), vec4(_1286, _1287, _1288, 1.0));
        _1340 = dot(vec3(isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)), isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1331) ? 0.0 : (isnan(0.0) ? _1331 : max(0.0, _1331))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1340 = 1.0;
    }
    float _1344 = (_1340 * cbModelParam._m0[1u].x) + (_1329 * (1.0 - cbModelParam._m0[1u].x));
    float _1354 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _343);
    float _1355 = isnan(_1354) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1354 : min(cbModelParam._m0[25u].z, _1354));
    float _1436;
    float _1438;
    float _1440;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1403 = fma(_574, cbModelParam._m0[13u].z, fma(_570, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _566)) + cbModelParam._m0[13u].w;
        float _1407 = fma(_574, cbModelParam._m0[14u].z, fma(_570, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _566)) + cbModelParam._m0[14u].w;
        float _1411 = fma(_574, cbModelParam._m0[15u].z, fma(_570, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _566)) + cbModelParam._m0[15u].w;
        float _1414 = fma(_516, cbModelParam._m0[13u].z, fma(_515, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _514));
        float _1417 = fma(_516, cbModelParam._m0[14u].z, fma(_515, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _514));
        float _1420 = fma(_516, cbModelParam._m0[15u].z, fma(_515, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _514));
        float _1448;
        if (_1414 > 0.0)
        {
            _1448 = abs((1.0 - _1403) / _1414);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1414 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1403 + 1.0) / _1414);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1448 = frontier_phi_17_15_ladder;
        }
        float _1620;
        if (_1417 > 0.0)
        {
            _1620 = abs((1.0 - _1407) / _1417);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1417 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1407 + 1.0) / _1417);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1620 = frontier_phi_26_22_ladder;
        }
        float _1916;
        if (_1420 > 0.0)
        {
            _1916 = abs((1.0 - _1411) / _1420);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1420 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1411 + 1.0) / _1420);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1916 = frontier_phi_38_33_ladder;
        }
        float _1918 = isnan(_1620) ? _1448 : (isnan(_1448) ? _1620 : min(_1448, _1620));
        float _1919 = isnan(_1916) ? _1918 : (isnan(_1918) ? _1916 : min(_1918, _1916));
        float _1923 = (_1919 * _1414) + _1403;
        float _1924 = (_1919 * _1417) + _1407;
        float _1925 = (_1919 * _1420) + _1411;
        float _1926 = _1919 * 9.9999997473787516355514526367188e-05;
        float _1928 = (-1.0) - _1926;
        float _1930 = _1926 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1925 > _1930) || ((_1925 < _1928) || ((_1924 > _1930) || ((_1924 < _1928) || ((_1923 < _1928) || (_1923 > _1930))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2070 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1925, cbModelParam._m0[9u].z, fma(_1924, cbModelParam._m0[9u].y, _1923 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1925, cbModelParam._m0[10u].z, fma(_1924, cbModelParam._m0[10u].y, _1923 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1925, cbModelParam._m0[11u].z, fma(_1924, cbModelParam._m0[11u].y, _1923 * cbModelParam._m0[11u].x))), _1355);
            frontier_phi_16_38_ladder = _2070.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2070.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2070.x * cbModelParam._m0[1u].y;
        }
        _1436 = frontier_phi_16_38_ladder_2;
        _1438 = frontier_phi_16_38_ladder_1;
        _1440 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1424 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_514, _515, _516), _1355);
        _1436 = _1424.x * cbModelParam._m0[1u].y;
        _1438 = _1424.y * cbModelParam._m0[1u].y;
        _1440 = _1424.z * cbModelParam._m0[1u].y;
    }
    float _1444 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _343);
    float _1445 = isnan(_1444) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1444 : min(cbModelParam._m0[25u].w, _1444));
    float _1537;
    float _1539;
    float _1541;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1501 = fma(_574, cbModelParam._m0[21u].z, fma(_570, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _566)) + cbModelParam._m0[21u].w;
        float _1505 = fma(_574, cbModelParam._m0[22u].z, fma(_570, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _566)) + cbModelParam._m0[22u].w;
        float _1509 = fma(_574, cbModelParam._m0[23u].z, fma(_570, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _566)) + cbModelParam._m0[23u].w;
        float _1512 = fma(_516, cbModelParam._m0[21u].z, fma(_515, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _514));
        float _1515 = fma(_516, cbModelParam._m0[22u].z, fma(_515, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _514));
        float _1518 = fma(_516, cbModelParam._m0[23u].z, fma(_515, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _514));
        float _1625;
        if (_1512 > 0.0)
        {
            _1625 = abs((1.0 - _1501) / _1512);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1501 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1625 = frontier_phi_28_24_ladder;
        }
        float _1943;
        if (_1515 > 0.0)
        {
            _1943 = abs((1.0 - _1505) / _1515);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1505 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1943 = frontier_phi_40_35_ladder;
        }
        float _2270;
        if (_1518 > 0.0)
        {
            _2270 = abs((1.0 - _1509) / _1518);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1509 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2270 = frontier_phi_50_47_ladder;
        }
        float _2272 = isnan(_1943) ? _1625 : (isnan(_1625) ? _1943 : min(_1625, _1943));
        float _2273 = isnan(_2270) ? _2272 : (isnan(_2272) ? _2270 : min(_2272, _2270));
        float _2277 = (_2273 * _1512) + _1501;
        float _2278 = (_2273 * _1515) + _1505;
        float _2279 = (_2273 * _1518) + _1509;
        float _2280 = _2273 * 9.9999997473787516355514526367188e-05;
        float _2281 = (-1.0) - _2280;
        float _2283 = _2280 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2279 > _2283) || ((_2279 < _2281) || ((_2278 > _2283) || ((_2278 < _2281) || ((_2277 < _2281) || (_2277 > _2283))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2397 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2279, cbModelParam._m0[17u].z, fma(_2278, cbModelParam._m0[17u].y, _2277 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2279, cbModelParam._m0[18u].z, fma(_2278, cbModelParam._m0[18u].y, _2277 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2279, cbModelParam._m0[19u].z, fma(_2278, cbModelParam._m0[19u].y, _2277 * cbModelParam._m0[19u].x))), _1445);
            frontier_phi_25_50_ladder = _2397.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2397.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2397.x * cbModelParam._m0[1u].z;
        }
        _1537 = frontier_phi_25_50_ladder_2;
        _1539 = frontier_phi_25_50_ladder_1;
        _1541 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1521 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_514, _515, _516), _1445);
        _1537 = _1521.x * cbModelParam._m0[1u].z;
        _1539 = _1521.y * cbModelParam._m0[1u].z;
        _1541 = _1521.z * cbModelParam._m0[1u].z;
    }
    float _1553 = ((((1.0 - _534) * ((_522 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_534 * _522)) * _506;
    float _1554 = _1553 * ((cbModelParam._m0[1u].w * (_1537 - _1436)) + _1436);
    float _1555 = _1553 * ((cbModelParam._m0[1u].w * (_1539 - _1438)) + _1438);
    float _1556 = _1553 * ((cbModelParam._m0[1u].w * (_1541 - _1440)) + _1440);
    float _1559 = fma(_1556, cbSceneParam._m0[89u].z, fma(_1555, cbSceneParam._m0[89u].y, _1554 * cbSceneParam._m0[89u].x));
    float _1562 = fma(_1556, cbSceneParam._m0[90u].z, fma(_1555, cbSceneParam._m0[90u].y, _1554 * cbSceneParam._m0[90u].x));
    float _1565 = fma(_1556, cbSceneParam._m0[91u].z, fma(_1555, cbSceneParam._m0[91u].y, _1554 * cbSceneParam._m0[91u].x));
    float _1599 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1603 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1607 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1611 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1612 = _1599 / _1611;
    float _1613 = _1603 / _1611;
    float _1614 = _1607 / _1611;
    float _1761;
    float _1762;
    float _1763;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1641 = ((uint(_1614 > cbSceneParam._m0[59u].y) + uint(_1614 > cbSceneParam._m0[59u].x)) + uint(_1614 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1642 = _1641 + 43u;
        uint _1650 = _1641 + 44u;
        uint _1658 = _1641 + 45u;
        uint _1666 = _1641 + 46u;
        float _1677 = fma(_1611, cbSceneParam._m0[_1642].w, fma(_1607, cbSceneParam._m0[_1642].z, fma(_1603, cbSceneParam._m0[_1642].y, _1599 * cbSceneParam._m0[_1642].x)));
        float _1681 = fma(_1611, cbSceneParam._m0[_1650].w, fma(_1607, cbSceneParam._m0[_1650].z, fma(_1603, cbSceneParam._m0[_1650].y, _1599 * cbSceneParam._m0[_1650].x)));
        float _1689 = fma(_1611, cbSceneParam._m0[_1666].w, fma(_1607, cbSceneParam._m0[_1666].z, fma(_1603, cbSceneParam._m0[_1666].y, _1599 * cbSceneParam._m0[_1666].x)));
        float _1694 = cbSceneParam._m0[33u].z * _1689;
        float _1696 = cbSceneParam._m0[33u].w * _1689;
        float _1699 = fma(_1611, cbSceneParam._m0[_1658].w, fma(_1607, cbSceneParam._m0[_1658].z, fma(_1603, cbSceneParam._m0[_1658].y, _1599 * cbSceneParam._m0[_1658].x))) / _1689;
        float _1747 = (cbSceneParam._m0[33u].x - sqrt(((_1613 * _1613) + (_1612 * _1612)) + (_1614 * _1614))) * cbSceneParam._m0[33u].y;
        float _4105 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1754 = (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1694 + _1677) / _1689, (_1696 + _1681) / _1689), _1699), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1696 + _1677) / _1689, (_1681 - _1694) / _1689), _1699), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1677 - _1694) / _1689, (_1681 - _1696) / _1689), _1699), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1677 - _1696) / _1689, (_1694 + _1681) / _1689), _1699), 0.0)).x), vec4(0.25)));
        _1761 = 1.0 - (_1754 * cbSceneParam._m0[34u].x);
        _1762 = 1.0 - (_1754 * cbSceneParam._m0[34u].y);
        _1763 = 1.0 - (_1754 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1761 = 1.0;
        _1762 = 1.0;
        _1763 = 1.0;
    }
    float _1827;
    float _1829;
    float _1831;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1815 = fma(_1611, cbSceneParam._m0[63u].w, fma(_1607, cbSceneParam._m0[63u].z, fma(_1603, cbSceneParam._m0[63u].y, _1599 * cbSceneParam._m0[63u].x)));
        float _1816 = fma(_1611, cbSceneParam._m0[60u].w, fma(_1607, cbSceneParam._m0[60u].z, fma(_1603, cbSceneParam._m0[60u].y, _1599 * cbSceneParam._m0[60u].x))) / _1815;
        float _1817 = fma(_1611, cbSceneParam._m0[61u].w, fma(_1607, cbSceneParam._m0[61u].z, fma(_1603, cbSceneParam._m0[61u].y, _1599 * cbSceneParam._m0[61u].x))) / _1815;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1816 >= cbSceneParam._m0[64u].x) && (_1817 >= cbSceneParam._m0[64u].y)) && (_1816 <= cbSceneParam._m0[64u].z)) && (_1817 <= cbSceneParam._m0[64u].w))
        {
            float _1956 = fma(_1611, cbSceneParam._m0[62u].w, fma(_1607, cbSceneParam._m0[62u].z, fma(_1603, cbSceneParam._m0[62u].y, _1599 * cbSceneParam._m0[62u].x))) / _1815;
            float _1960 = isnan(cbSceneParam._m0[41u].w) ? _1956 : (isnan(_1956) ? cbSceneParam._m0[41u].w : max(_1956, cbSceneParam._m0[41u].w));
            float _2003 = (cbSceneParam._m0[33u].x - sqrt(((_1613 * _1613) + (_1612 * _1612)) + (_1614 * _1614))) * cbSceneParam._m0[33u].y;
            float _4121 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
            float _2010 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1816, cbSceneParam._m0[33u].w + _1817), _1960), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1816, _1817 - cbSceneParam._m0[33u].z), _1960), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1816 - cbSceneParam._m0[33u].z, _1817 - cbSceneParam._m0[33u].w), _1960), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1816 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1817), _1960), 0.0)).x), vec4(0.25)));
            float _2014 = 1.0 - (_2010 * cbSceneParam._m0[34u].x);
            float _2015 = 1.0 - (_2010 * cbSceneParam._m0[34u].y);
            float _2016 = 1.0 - (_2010 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2016) ? _1763 : (isnan(_1763) ? _2016 : min(_1763, _2016));
            frontier_phi_37_36_ladder_1 = isnan(_2015) ? _1762 : (isnan(_1762) ? _2015 : min(_1762, _2015));
            frontier_phi_37_36_ladder_2 = isnan(_2014) ? _1761 : (isnan(_1761) ? _2014 : min(_1761, _2014));
        }
        else
        {
            frontier_phi_37_36_ladder = _1763;
            frontier_phi_37_36_ladder_1 = _1762;
            frontier_phi_37_36_ladder_2 = _1761;
        }
        _1827 = frontier_phi_37_36_ladder_2;
        _1829 = frontier_phi_37_36_ladder_1;
        _1831 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1827 = _1761;
        _1829 = _1762;
        _1831 = _1763;
    }
    uvec4 _1836 = floatBitsToUint(cbInstanceData._m0[_481 + 5u]);
    uint _1838 = _1836.x * 14u;
    uint _1839 = _1838 + 13u;
    float _1846 = _506 + (-1.0);
    float _1851 = (cbLight._m0[_1839].x * _1846) + 1.0;
    float _1852 = (cbLight._m0[_1839].y * _1846) + 1.0;
    float _1853 = (cbLight._m0[_1839].z * _1846) + 1.0;
    float _1854 = (cbLight._m0[_1839].w * _1846) + 1.0;
    uint _1855 = _1838 + 5u;
    float _1861 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
    uint _1865 = _1838 + 4u;
    float _1875 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
    uint _1879 = _1838 | 1u;
    float _1890 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_340, _341, _342));
    float _1893 = dot(vec3(cbLight._m0[_1879].xyz), vec3(_340, _341, _342));
    float _4157 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _4168 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1898 = (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * 0.3183098733425140380859375;
    float _1900 = (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * 0.3183098733425140380859375;
    float _1907 = ((cbLight._m0[_1855].x * _1861) * _1900) + (((cbLight._m0[_1865].x * _1827) * _1875) * _1898);
    float _1908 = ((_1861 * cbLight._m0[_1855].y) * _1900) + (((cbLight._m0[_1865].y * _1829) * _1875) * _1898);
    float _1909 = ((_1861 * cbLight._m0[_1855].z) * _1900) + (((cbLight._m0[_1865].z * _1831) * _1875) * _1898);
    uvec4 _1913 = floatBitsToUint(cbLight._m0[_1838 + 12u]);
    bool _1915 = _1913.x == 0u;
    float _2017;
    float _2019;
    float _2021;
    if (_1915)
    {
        _2017 = _1907;
        _2019 = _1908;
        _2021 = _1909;
    }
    else
    {
        uint _2025 = _1838 + 6u;
        float _2041 = (dot(vec3(cbLight._m0[_1838 + 2u].xyz), vec3(_340, _341, _342)) * 0.5) + 0.5;
        float _2042 = _2041 * _2041;
        float _4179 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        float _2043 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _2044 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
        _2017 = (((cbLight._m0[_2025].x * 0.3183098733425140380859375) * _2043) * _2044) + _1907;
        _2019 = (((cbLight._m0[_2025].y * 0.3183098733425140380859375) * _2043) * _2044) + _1908;
        _2021 = (((cbLight._m0[_2025].z * 0.3183098733425140380859375) * _2043) * _2044) + _1909;
    }
    bool _2024 = _1913.y == 0u;
    float _2079;
    float _2081;
    float _2083;
    if (_2024)
    {
        _2079 = _2017;
        _2081 = _2019;
        _2083 = _2021;
    }
    else
    {
        uint _2241 = _1838 + 7u;
        float _2257 = (dot(vec3(cbLight._m0[_1838 + 3u].xyz), vec3(_340, _341, _342)) * 0.5) + 0.5;
        float _2258 = _2257 * _2257;
        float _4195 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2259 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _2260 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
        _2079 = (((cbLight._m0[_2241].x * 0.3183098733425140380859375) * _2259) * _2260) + _2017;
        _2081 = (((cbLight._m0[_2241].y * 0.3183098733425140380859375) * _2259) * _2260) + _2019;
        _2083 = (((cbLight._m0[_2241].z * 0.3183098733425140380859375) * _2259) * _2260) + _2021;
    }
    uint _2086 = _1838 + 8u;
    float _2099 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1838].w)) * _343) * 0.949999988079071044921875);
    float _2100 = _2099 * _2099;
    float _2101 = cbLight._m0[_1838].x + _420;
    float _2102 = cbLight._m0[_1838].y + _421;
    float _2103 = cbLight._m0[_1838].z + _422;
    float _2107 = inversesqrt(dot(vec3(_2101, _2102, _2103), vec3(_2101, _2102, _2103)));
    float _2108 = _2107 * _2101;
    float _2109 = _2107 * _2102;
    float _2110 = _2107 * _2103;
    float _2111 = dot(vec3(_340, _341, _342), vec3(cbLight._m0[_1838].xyz));
    float _4211 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2114 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _4222 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _2115 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _2116 = dot(vec3(_340, _341, _342), vec3(_2108, _2109, _2110));
    float _4233 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2119 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _2120 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_2108, _2109, _2110));
    float _4244 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2124 = _2100 * _2100;
    float _2128 = ((_2119 * _2119) * (_2124 + (-1.0))) + 1.0;
    float _2139 = (exp2(log2(1.0 - (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2140 = 1.0 - _2100;
    float _2151 = (0.5 / (((_2115 * ((_2114 * _2140) + _2100)) + 9.9999999392252902907785028219223e-09) + (((_2115 * _2140) + _2100) * _2114))) * _2114;
    float _4255 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2153 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2124 / ((_2128 * _2128) * 3.141590118408203125));
    uint _2167 = _1838 + 9u;
    float _2178 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1879].w)) * _343) * 0.949999988079071044921875);
    float _2179 = _2178 * _2178;
    float _2180 = cbLight._m0[_1879].x + _420;
    float _2181 = cbLight._m0[_1879].y + _421;
    float _2182 = cbLight._m0[_1879].z + _422;
    float _2186 = inversesqrt(dot(vec3(_2180, _2181, _2182), vec3(_2180, _2181, _2182)));
    float _2187 = _2186 * _2180;
    float _2188 = _2186 * _2181;
    float _2189 = _2186 * _2182;
    float _2190 = dot(vec3(_340, _341, _342), vec3(cbLight._m0[_1879].xyz));
    float _4266 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2193 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _2194 = dot(vec3(_340, _341, _342), vec3(_2187, _2188, _2189));
    float _4277 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2197 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    float _2198 = dot(vec3(cbLight._m0[_1879].xyz), vec3(_2187, _2188, _2189));
    float _4288 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2202 = _2179 * _2179;
    float _2206 = ((_2197 * _2197) * (_2202 + (-1.0))) + 1.0;
    float _2215 = (exp2(log2(1.0 - (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2216 = 1.0 - _2179;
    float _2226 = (0.5 / (((_2115 * ((_2193 * _2216) + _2179)) + 9.9999999392252902907785028219223e-09) + (((_2115 * _2216) + _2179) * _2193))) * _2193;
    float _4299 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2228 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_2202 / ((_2206 * _2206) * 3.141590118408203125));
    float _2238 = (((_2215 * cbLight._m0[_2167].x) * _2228) * _1861) + ((((cbLight._m0[_2086].x * _1827) * _2139) * _2153) * _1875);
    float _2239 = (((_2215 * cbLight._m0[_2167].y) * _2228) * _1861) + ((((cbLight._m0[_2086].y * _1829) * _2139) * _2153) * _1875);
    float _2240 = (((_2215 * cbLight._m0[_2167].z) * _2228) * _1861) + ((((cbLight._m0[_2086].z * _1831) * _2139) * _2153) * _1875);
    float _2296;
    float _2298;
    float _2300;
    if (_1915)
    {
        _2296 = _2238;
        _2298 = _2239;
        _2300 = _2240;
    }
    else
    {
        uint _2302 = _1838 + 2u;
        uint _2306 = _1838 + 10u;
        float _2320 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2302].w)) * _343) * 0.949999988079071044921875);
        float _2321 = _2320 * _2320;
        float _2322 = cbLight._m0[_2302].x + _420;
        float _2323 = cbLight._m0[_2302].y + _421;
        float _2324 = cbLight._m0[_2302].z + _422;
        float _2328 = inversesqrt(dot(vec3(_2322, _2323, _2324), vec3(_2322, _2323, _2324)));
        float _2329 = _2328 * _2322;
        float _2330 = _2328 * _2323;
        float _2331 = _2328 * _2324;
        float _2332 = dot(vec3(_340, _341, _342), vec3(cbLight._m0[_2302].xyz));
        float _4310 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2335 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2336 = dot(vec3(_340, _341, _342), vec3(_2329, _2330, _2331));
        float _4321 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2339 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2340 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_2329, _2330, _2331));
        float _4332 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2344 = _2321 * _2321;
        float _2348 = ((_2339 * _2339) * (_2344 + (-1.0))) + 1.0;
        float _2357 = (exp2(log2(1.0 - (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2358 = 1.0 - _2321;
        float _2368 = (0.5 / (((_2115 * ((_2335 * _2358) + _2321)) + 9.9999999392252902907785028219223e-09) + (((_2115 * _2358) + _2321) * _2335))) * _2335;
        float _4343 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2370 = (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2344 / ((_2348 * _2348) * 3.141590118408203125));
        float _2371 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
        _2296 = (((_2357 * cbLight._m0[_2306].x) * _2370) * _2371) + _2238;
        _2298 = (((_2357 * cbLight._m0[_2306].y) * _2370) * _2371) + _2239;
        _2300 = (((_2357 * cbLight._m0[_2306].z) * _2370) * _2371) + _2240;
    }
    float _2402;
    float _2404;
    float _2406;
    if (_2024)
    {
        _2402 = _2296;
        _2404 = _2298;
        _2406 = _2300;
    }
    else
    {
        uint _2413 = _1838 + 3u;
        uint _2417 = _1838 + 11u;
        float _2431 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2413].w)) * _343) * 0.949999988079071044921875);
        float _2432 = _2431 * _2431;
        float _2433 = cbLight._m0[_2413].x + _420;
        float _2434 = cbLight._m0[_2413].y + _421;
        float _2435 = cbLight._m0[_2413].z + _422;
        float _2439 = inversesqrt(dot(vec3(_2433, _2434, _2435), vec3(_2433, _2434, _2435)));
        float _2440 = _2439 * _2433;
        float _2441 = _2439 * _2434;
        float _2442 = _2439 * _2435;
        float _2443 = dot(vec3(_340, _341, _342), vec3(cbLight._m0[_2413].xyz));
        float _4359 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2447 = dot(vec3(_340, _341, _342), vec3(_2440, _2441, _2442));
        float _4370 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2450 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2451 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_2440, _2441, _2442));
        float _4381 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2455 = _2432 * _2432;
        float _2459 = ((_2450 * _2450) * (_2455 + (-1.0))) + 1.0;
        float _2468 = (exp2(log2(1.0 - (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2469 = 1.0 - _2432;
        float _2479 = (0.5 / (((_2115 * ((_2446 * _2469) + _2432)) + 9.9999999392252902907785028219223e-09) + (((_2115 * _2469) + _2432) * _2446))) * _2446;
        float _4392 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2481 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2455 / ((_2459 * _2459) * 3.141590118408203125));
        float _2482 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
        _2402 = (((_2468 * cbLight._m0[_2417].x) * _2481) * _2482) + _2296;
        _2404 = (((_2468 * cbLight._m0[_2417].y) * _2481) * _2482) + _2298;
        _2406 = (((_2468 * cbLight._m0[_2417].z) * _2481) * _2482) + _2300;
    }
    float _2548;
    float _2550;
    float _2552;
    float _2554;
    float _2556;
    float _2558;
    if (_1836.y == 0u)
    {
        uvec4 _2503 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2504 = _2503.x;
        uint _2515 = uint((float(_2503.y) * floor(float(uint(cbSceneParam._m0[85u].y * _442) / _2504))) + floor(float(uint(cbSceneParam._m0[85u].x * _441) / _2504)));
        float _2525 = (log2(_1614 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2526 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        uint _2529 = uint(isnan(14.0) ? _2526 : (isnan(_2526) ? 14.0 : min(_2526, 14.0)));
        uvec4 _2534 = texelFetch(g_lightClusterGridBuffer, int(((_2529 << 2u) + (_2515 << 6u)) >> 2u));
        uint _2535 = _2534.x;
        uint _2536 = _2503.z;
        float _2653;
        float _2655;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        if (((((1u << ((_2536 >> 4u) & 15u)) + 4294967295u) & _2535) == 0u) || ((_2536 & 240u) == 0u))
        {
            _2653 = 0.0;
            _2655 = 0.0;
            _2657 = 0.0;
            _2659 = 0.0;
            _2661 = 0.0;
            _2663 = 0.0;
        }
        else
        {
            float _2654;
            float _2656;
            float _2658;
            float _2660;
            float _2662;
            float _2664;
            float _2815 = 0.0;
            float _2816 = 0.0;
            float _2817 = 0.0;
            float _2818 = 0.0;
            float _2819 = 0.0;
            float _2820 = 0.0;
            uint _2821 = 0u;
            uint _2830;
            bool _2831;
            for (;;)
            {
                _2830 = texelFetch(g_lightClassification, int((((_2529 << 5u) + (_2515 << 9u)) + (_2821 << 2u)) >> 2u)).x;
                _2831 = _2830 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2831)
                {
                    frontier_phi_71_pred = _2820;
                    frontier_phi_71_pred_1 = _2819;
                    frontier_phi_71_pred_2 = _2818;
                    frontier_phi_71_pred_3 = _2817;
                    frontier_phi_71_pred_4 = _2816;
                    frontier_phi_71_pred_5 = _2815;
                }
                else
                {
                    float _2960;
                    float _2961;
                    float _2962;
                    float _2963;
                    float _2964;
                    float _2965;
                    uint _2966;
                    _2960 = _2815;
                    _2961 = _2816;
                    _2962 = _2817;
                    _2963 = _2818;
                    _2964 = _2819;
                    _2965 = _2820;
                    _2966 = _2830;
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    for (;;)
                    {
                        uint _2970 = uint(findLSB(_2966)) + (_2821 << 5u);
                        uint _2967 = (_2966 + 4294967295u) & _2966;
                        uint _2972 = _2970 * 48u;
                        vec4 _2986 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2972)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 3u)).x));
                        uint _2992 = (_2970 * 48u) + 4u;
                        vec4 _3005 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2992)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 3u)).x));
                        uint _3011 = (_2970 * 48u) + 8u;
                        vec3 _3022 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3011)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 2u)).x));
                        float _3026 = _2986.x - _1612;
                        float _3027 = _2986.y - _1613;
                        float _3028 = _2986.z - _1614;
                        float _3029 = dot(vec3(_3026, _3027, _3028), vec3(_3026, _3027, _3028));
                        float _3032 = inversesqrt(_3029);
                        float _3033 = _3032 * _3026;
                        float _3034 = _3032 * _3027;
                        float _3035 = _3032 * _3028;
                        float _3036 = dot(vec3(_462, _465, _468), vec3(_3033, _3034, _3035));
                        float _3041 = 1.0 - (_3029 * _2986.w);
                        float _4418 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                        float _3042 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                        float _3043 = sqrt(_3029) * _3005.w;
                        float _3046 = 1.39999997615814208984375 / (_3043 + 1.39999997615814208984375);
                        float _3047 = _3046 * _3046;
                        float _3050 = ((1.0 - _3047) * _3036) + _3047;
                        float _3053 = _3043 * _3043;
                        float _3057 = ((isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0))) * _3042) / ((_3053 * 0.699999988079071044921875) + 1.0);
                        float _3061 = (-0.0) - _1612;
                        float _3062 = (-0.0) - _1613;
                        float _3063 = (-0.0) - _1614;
                        float _3067 = inversesqrt(dot(vec3(_3061, _3062, _3063), vec3(_3061, _3062, _3063)));
                        float _3068 = _3067 * _3061;
                        float _3069 = _3067 * _3062;
                        float _3070 = _3067 * _3063;
                        float _3077 = exp2(log2(1.0 / ((_3053 * 3.5) + 5.0)) * 0.25);
                        float _3078 = 1.0 - _522;
                        float _3085 = sqrt(1.0 - ((1.0 - (_3078 * _3078)) * (1.0 - (_3077 * _3077))));
                        float _3086 = _3085 * _3085;
                        float _3087 = _3086 * _3086;
                        float _3088 = _3068 + _3033;
                        float _3089 = _3069 + _3034;
                        float _3090 = _3070 + _3035;
                        float _3094 = inversesqrt(dot(vec3(_3088, _3089, _3090), vec3(_3088, _3089, _3090)));
                        float _3098 = dot(vec3(_462, _465, _468), vec3(_3068, _3069, _3070));
                        float _4434 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                        float _3101 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                        float _3102 = dot(vec3(_462, _465, _468), vec3(_3094 * _3088, _3094 * _3089, _3094 * _3090));
                        float _4445 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                        float _3105 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                        float _3109 = ((_3105 * _3105) * (_3087 + (-1.0))) + 1.0;
                        float _3110 = _3046 * _3086;
                        float _3111 = _3110 * _3110;
                        float _3114 = ((1.0 - _3111) * _3036) + _3111;
                        float _4456 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3115 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                        float _3116 = 1.0 - _3086;
                        float _3126 = (0.5 / (((_3115 * ((_3101 * _3116) + _3086)) + 9.9999999392252902907785028219223e-09) + (((_3115 * _3116) + _3086) * _3101))) * _3115;
                        float _4467 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                        float _3137 = (((_3087 * 3.1415927410125732421875) * (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0)))) / ((_3109 * _3109) * ((_3053 * 2.1991131305694580078125) + 3.141590118408203125))) * _3042;
                        _2890 = (_3057 * _3005.x) + _2963;
                        _2891 = (_3057 * _3005.y) + _2964;
                        _2892 = (_3057 * _3005.z) + _2965;
                        _2887 = (_3137 * _3022.x) + _2960;
                        _2888 = (_3137 * _3022.y) + _2961;
                        _2889 = (_3137 * _3022.z) + _2962;
                        if (_2967 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2960 = _2887;
                            _2961 = _2888;
                            _2962 = _2889;
                            _2963 = _2890;
                            _2964 = _2891;
                            _2965 = _2892;
                            _2966 = _2967;
                        }
                    }
                    frontier_phi_71_pred = _2892;
                    frontier_phi_71_pred_1 = _2891;
                    frontier_phi_71_pred_2 = _2890;
                    frontier_phi_71_pred_3 = _2889;
                    frontier_phi_71_pred_4 = _2888;
                    frontier_phi_71_pred_5 = _2887;
                }
                _2664 = frontier_phi_71_pred;
                _2662 = frontier_phi_71_pred_1;
                _2660 = frontier_phi_71_pred_2;
                _2658 = frontier_phi_71_pred_3;
                _2656 = frontier_phi_71_pred_4;
                _2654 = frontier_phi_71_pred_5;
                uint _2822 = _2821 + 1u;
                if (_2822 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2815 = _2654;
                    _2816 = _2656;
                    _2817 = _2658;
                    _2818 = _2660;
                    _2819 = _2662;
                    _2820 = _2664;
                    _2821 = _2822;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2653 = _2654;
            _2655 = _2656;
            _2657 = _2658;
            _2659 = _2660;
            _2661 = _2662;
            _2663 = _2664;
        }
        uvec4 _2667 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2668 = _2667.z;
        uint _2670 = (_2668 >> 8u) & 15u;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        if (((4294967295u << _2670) & _2535) == 0u)
        {
            _2783 = _2653;
            _2785 = _2655;
            _2787 = _2657;
            _2789 = _2659;
            _2791 = _2661;
            _2793 = _2663;
        }
        else
        {
            float _2808 = inversesqrt(dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614)));
            float _2809 = _2808 * _1612;
            float _2810 = _2808 * _1613;
            float _2811 = _2808 * _1614;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2670 < ((_2668 >> 12u) & 15u))
            {
                float _2784;
                float _2786;
                float _2788;
                float _2790;
                float _2792;
                float _2794;
                float _2943 = _2653;
                float _2944 = _2655;
                float _2945 = _2657;
                float _2946 = _2659;
                float _2947 = _2661;
                float _2948 = _2663;
                uint _2949 = _2670;
                uint _2958;
                bool _2959;
                for (;;)
                {
                    _2958 = texelFetch(g_lightClassification, int((((_2529 << 5u) + (_2515 << 9u)) + (_2949 << 2u)) >> 2u)).x;
                    _2959 = _2958 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2959)
                    {
                        frontier_phi_82_pred = _2948;
                        frontier_phi_82_pred_1 = _2947;
                        frontier_phi_82_pred_2 = _2946;
                        frontier_phi_82_pred_3 = _2945;
                        frontier_phi_82_pred_4 = _2944;
                        frontier_phi_82_pred_5 = _2943;
                    }
                    else
                    {
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3164 = _2943;
                        float _3165 = _2944;
                        float _3166 = _2945;
                        float _3167 = _2946;
                        float _3168 = _2947;
                        float _3169 = _2948;
                        uint _3170 = _2958;
                        uint _3171;
                        vec4 _3196;
                        float _3197;
                        vec4 _3212;
                        vec3 _3224;
                        vec4 _3240;
                        vec4 _3256;
                        float _3303;
                        bool _3304;
                        for (;;)
                        {
                            uint _3181 = ((_2949 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3170));
                            _3171 = (_3170 + 4294967295u) & _3170;
                            uint _3183 = _3181 * 40u;
                            _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            _3197 = _3196.w;
                            uint _3199 = (_3181 * 40u) + 4u;
                            _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            uint _3214 = (_3181 * 40u) + 8u;
                            _3224 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x));
                            uint _3227 = (_3181 * 40u) + 16u;
                            _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3243 = (_3181 * 40u) + 20u;
                            _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            uint _3259 = (_3181 * 40u) + 24u;
                            vec4 _3272 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 3u)).x));
                            uint _3278 = (_3181 * 40u) + 28u;
                            vec4 _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            _3303 = fma(_1614, _3291.z, fma(_1613, _3291.y, _3291.x * _1612)) + _3291.w;
                            _3304 = !((fma(_1614, _3272.z, fma(_1613, _3272.y, _3272.x * _1612)) + _3272.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3304)
                            {
                                float _3331 = _3196.x - _1612;
                                float _3332 = _3196.y - _1613;
                                float _3333 = _3196.z - _1614;
                                float _3334 = dot(vec3(_3331, _3332, _3333), vec3(_3331, _3332, _3333));
                                float _3337 = inversesqrt(_3334);
                                float _3338 = _3337 * _3331;
                                float _3339 = _3337 * _3332;
                                float _3340 = _3337 * _3333;
                                float _3344 = 1.0 - (_3334 / (_3197 * _3197));
                                float _4478 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3345 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                                float _3349 = sqrt(_3334) * _3212.w;
                                float _3351 = 1.39999997615814208984375 / (_3349 + 1.39999997615814208984375);
                                float _3352 = _3351 * _3351;
                                float _3355 = ((1.0 - _3352) * dot(vec3(_3338, _3339, _3340), vec3(_462, _465, _468))) + _3352;
                                float _3358 = _3349 * _3349;
                                float _3362 = (fma(_1614, _3240.z, fma(_1613, _3240.y, _3240.x * _1612)) + _3240.w) / _3303;
                                float _3363 = (fma(_1614, _3256.z, fma(_1613, _3256.y, _3256.x * _1612)) + _3256.w) / _3303;
                                float _3367 = 1.0 - dot(vec2(_3362, _3363), vec2(_3362, _3363));
                                float _4494 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3368 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3369 = _3368 * (((isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0))) * _3345) / ((_3358 * 0.699999988079071044921875) + 1.0));
                                float _3381 = exp2(log2(1.0 / ((_3358 * 3.5) + 5.0)) * 0.25);
                                float _3382 = 1.0 - _522;
                                float _3389 = sqrt(1.0 - ((1.0 - (_3382 * _3382)) * (1.0 - (_3381 * _3381))));
                                float _3390 = _3389 * _3389;
                                float _3391 = _3390 * _3390;
                                float _3392 = _3338 - _2809;
                                float _3393 = _3339 - _2810;
                                float _3394 = _3340 - _2811;
                                float _3398 = inversesqrt(dot(vec3(_3392, _3393, _3394), vec3(_3392, _3393, _3394)));
                                float _3402 = dot(vec3(_462, _465, _468), vec3((-0.0) - _2809, (-0.0) - _2810, (-0.0) - _2811));
                                float _4505 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3405 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                                float _3406 = dot(vec3(_462, _465, _468), vec3(_3398 * _3392, _3398 * _3393, _3398 * _3394));
                                float _4516 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3409 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                                float _3413 = ((_3409 * _3409) * (_3391 + (-1.0))) + 1.0;
                                float _3414 = _3351 * _3390;
                                float _3415 = _3414 * _3414;
                                float _3421 = ((1.0 - _3415) * dot(vec3(_462, _465, _468), vec3(_3338, _3339, _3340))) + _3415;
                                float _4527 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3422 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                                float _3423 = 1.0 - _3390;
                                float _3433 = (0.5 / (((_3422 * ((_3405 * _3423) + _3390)) + 9.9999999392252902907785028219223e-09) + (((_3422 * _3423) + _3390) * _3405))) * _3422;
                                float _4538 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                                float _3443 = (_3368 * _3345) * (((_3391 * 3.1415927410125732421875) * (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0)))) / ((_3413 * _3413) * ((_3358 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3369 * _3212.z;
                                frontier_phi_88_pred_1 = _3369 * _3212.y;
                                frontier_phi_88_pred_2 = _3369 * _3212.x;
                                frontier_phi_88_pred_3 = _3443 * _3224.z;
                                frontier_phi_88_pred_4 = _3443 * _3224.y;
                                frontier_phi_88_pred_5 = _3443 * _3224.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3452 = frontier_phi_88_pred;
                            _3451 = frontier_phi_88_pred_1;
                            _3450 = frontier_phi_88_pred_2;
                            _3449 = frontier_phi_88_pred_3;
                            _3448 = frontier_phi_88_pred_4;
                            _3447 = frontier_phi_88_pred_5;
                            _3154 = _3450 + _3167;
                            _3155 = _3451 + _3168;
                            _3156 = _3452 + _3169;
                            _3151 = _3447 + _3164;
                            _3152 = _3448 + _3165;
                            _3153 = _3449 + _3166;
                            if (_3171 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3164 = _3151;
                                _3165 = _3152;
                                _3166 = _3153;
                                _3167 = _3154;
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3171;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3156;
                        frontier_phi_82_pred_1 = _3155;
                        frontier_phi_82_pred_2 = _3154;
                        frontier_phi_82_pred_3 = _3153;
                        frontier_phi_82_pred_4 = _3152;
                        frontier_phi_82_pred_5 = _3151;
                    }
                    _2794 = frontier_phi_82_pred;
                    _2792 = frontier_phi_82_pred_1;
                    _2790 = frontier_phi_82_pred_2;
                    _2788 = frontier_phi_82_pred_3;
                    _2786 = frontier_phi_82_pred_4;
                    _2784 = frontier_phi_82_pred_5;
                    uint _2950 = _2949 + 1u;
                    if (_2950 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2943 = _2784;
                        _2944 = _2786;
                        _2945 = _2788;
                        _2946 = _2790;
                        _2947 = _2792;
                        _2948 = _2794;
                        _2949 = _2950;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2790;
                frontier_phi_63_64_ladder_1 = _2794;
                frontier_phi_63_64_ladder_2 = _2792;
                frontier_phi_63_64_ladder_3 = _2788;
                frontier_phi_63_64_ladder_4 = _2786;
                frontier_phi_63_64_ladder_5 = _2784;
            }
            else
            {
                frontier_phi_63_64_ladder = _2659;
                frontier_phi_63_64_ladder_1 = _2663;
                frontier_phi_63_64_ladder_2 = _2661;
                frontier_phi_63_64_ladder_3 = _2657;
                frontier_phi_63_64_ladder_4 = _2655;
                frontier_phi_63_64_ladder_5 = _2653;
            }
            _2783 = frontier_phi_63_64_ladder_5;
            _2785 = frontier_phi_63_64_ladder_4;
            _2787 = frontier_phi_63_64_ladder_3;
            _2789 = frontier_phi_63_64_ladder;
            _2791 = frontier_phi_63_64_ladder_2;
            _2793 = frontier_phi_63_64_ladder_1;
        }
        float _2798 = isnan(1.0) ? _506 : (isnan(_506) ? 1.0 : min(_506, 1.0));
        _2548 = (_2798 * _2789) + _2079;
        _2550 = (_2798 * _2791) + _2081;
        _2552 = (_2798 * _2793) + _2083;
        _2554 = ((_2783 * 0.039999999105930328369140625) * _2798) + _2402;
        _2556 = ((_2785 * 0.039999999105930328369140625) * _2798) + _2404;
        _2558 = ((_2787 * 0.039999999105930328369140625) * _2798) + _2406;
    }
    else
    {
        _2548 = _2079;
        _2550 = _2081;
        _2552 = _2083;
        _2554 = _2402;
        _2556 = _2404;
        _2558 = _2406;
    }
    uint _2564 = _482 + uint(cbMatDynParam._m0[0u].w);
    float _2573 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _306.x) * _326) * cbInstanceData._m0[_2564].x;
    float _2577 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _306.y) * _326) * cbInstanceData._m0[_2564].y;
    float _2581 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _306.z) * _326) * cbInstanceData._m0[_2564].z;
    float _4554 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _4565 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _4576 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _2598 = (((isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2548 + ((isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))) * _506))) + ((_2554 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _1344)) * cbPerFrame._m0[3u].x)) + _2573;
    float _2600 = (_2577 + ((_2556 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _1344)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2550 + ((isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0))) * _506)));
    float _2602 = (_2581 + ((_2558 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _1344)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2552 + ((isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))) * _506)));
    float _2603 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
    float _2604 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
    float _2605 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
    float _2611 = cbMtdParam._m0[2u].x * _2573;
    float _2612 = cbMtdParam._m0[2u].y * _2577;
    float _2613 = cbMtdParam._m0[2u].z * _2581;
    float _4602 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2615 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
    uint _2616 = _481 + 6u;
    float _2624 = _441 / cbSceneParam._m0[86u].x;
    float _2625 = _442 / cbSceneParam._m0[86u].y;
    vec4 _2639 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2624, _2625, (log2((isnan(cbSceneParam._m0[77u].w) ? _362 : (isnan(_362) ? cbSceneParam._m0[77u].w : min(_362, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2641 = _2639.x;
    float _2642 = _2639.y;
    float _2643 = _2639.z;
    float _2644 = _2639.w;
    float _2716;
    float _2718;
    float _2720;
    float _2722;
    if (_362 > cbSceneParam._m0[78u].w)
    {
        float _2678 = isnan(_362) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _362 : min(cbSceneParam._m0[80u].w, _362));
        float _2679 = _2678 / _362;
        float _2690 = _2679 * _413;
        float _2691 = _414 * _2679;
        float _2692 = (-0.0) - _2691;
        float _2694 = _2679 * _415;
        float _2696 = (cbSceneParam._m0[77u].w * _2692) / _2678;
        float _2697 = _2696 + cbSceneParam._m0[79u].w;
        float _2698 = cbSceneParam._m0[79u].w - _2691;
        float _2704 = sqrt(((_2690 * _2690) + (_2691 * _2691)) + (_2694 * _2694));
        float _2707 = (1.0 - (cbSceneParam._m0[77u].w / _2678)) * _2704;
        float _2712 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2714 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2900;
        if (abs((_2692 - _2696) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2900 = ((((_2697 > 0.0) ? exp2(_2712 * _2697) : (2.0 - exp2(_2714 * _2697))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2707;
        }
        else
        {
            float _2844 = 1.0 / cbSceneParam._m0[80u].x;
            float _2845 = isnan(_2698) ? _2697 : (isnan(_2697) ? _2698 : max(_2697, _2698));
            float _2846 = isnan(_2698) ? _2697 : (isnan(_2697) ? _2698 : min(_2697, _2698));
            float _2855 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : min(_2845, 0.0));
            float _2856 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : min(_2846, 0.0));
            _2900 = ((abs(_2704 / _2692) * cbSceneParam._m0[80u].y) * ((((_2855 - _2856) * 2.0) - ((exp2(_2712 * (isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0)))) - exp2(_2712 * (isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0))))) * _2844)) - ((exp2(_2714 * _2855) - exp2(_2714 * _2856)) * _2844))) + (_2707 * cbSceneParam._m0[80u].z);
        }
        vec4 _2902 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2624, _2625, 1.0), 0.0);
        float _2911 = exp2((_2900 * (-1.44269502162933349609375)) * (1.0 - _2902.w));
        float _2912 = log2(_2911);
        float _2928 = log2(_2644);
        _2716 = (exp2(_2928 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2912 * cbSceneParam._m0[78u].x)) * _2902.x) / cbSceneParam._m0[78u].x)) + _2641;
        _2718 = (exp2(_2928 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2912 * cbSceneParam._m0[78u].y)) * _2902.y) / cbSceneParam._m0[78u].y)) + _2642;
        _2720 = (exp2(_2928 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2912 * cbSceneParam._m0[78u].z)) * _2902.z) / cbSceneParam._m0[78u].z)) + _2643;
        _2722 = _2911 * _2644;
    }
    else
    {
        _2716 = _2641;
        _2718 = _2642;
        _2720 = _2643;
        _2722 = _2644;
    }
    bool _2938;
    vec4 _2732;
    vec4 _2754;
    float _2756;
    float _2760;
    float _2761;
    float _2762;
    float _2765;
    float _2768;
    float _2771;
    float _2772;
    bool _2782;
    for (;;)
    {
        _2732 = cbMatDynParam._m0[0u];
        float _2734 = roundEven(_2732.y);
        bool _2735 = _2734 == 3.0;
        float _2736 = log2(_2722);
        float _2740 = exp2(_2736 * cbSceneParam._m0[78u].x);
        float _2741 = exp2(_2736 * cbSceneParam._m0[78u].y);
        float _2742 = exp2(_2736 * cbSceneParam._m0[78u].z);
        float _2743 = _2740 * _2603;
        float _2744 = _2741 * _2604;
        float _2745 = _2742 * _2605;
        float _2752 = _429 + (-0.5);
        _2754 = cbMtdParam._m0[1u];
        _2756 = _2754.y * _2752;
        float _2759 = (_2734 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2760 = _2759 * (_2735 ? _2743 : (_2743 + (cbSceneParam._m0[72u].w * _2716)));
        _2761 = _2759 * (_2735 ? _2744 : (_2744 + (cbSceneParam._m0[72u].w * _2718)));
        _2762 = _2759 * (_2735 ? _2745 : (_2745 + (cbSceneParam._m0[72u].w * _2720)));
        _2765 = ((_2611 * _2615) * _2740) * _2759;
        _2768 = ((_2612 * _2615) * _2741) * _2759;
        _2771 = ((_2613 * _2615) * _2742) * _2759;
        _2772 = _2752 * 0.999000012874603271484375;
        _2782 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2782)
        {
            if ((cbInstanceData._m0[_481 + 7u].x + _2772) < 0.5)
            {
                _2938 = true;
                break;
            }
        }
        uint _2879 = _482 + uint(_2732.w);
        if ((cbInstanceData._m0[_2879].w < 1.0) && ((cbInstanceData._m0[_2879].w + _2772) < 0.5))
        {
            _2938 = true;
            break;
        }
        if ((_2756 + 1.0) < _2754.x)
        {
            _2938 = true;
            break;
        }
        _2938 = false;
        break;
    }
    float _3142;
    if (_2938)
    {
        discard_state = true;
        _3142 = 0.0;
    }
    else
    {
        _3142 = cbInstanceData._m0[_2616].w;
    }
    SV_Target.x = _2760;
    SV_Target.y = _2761;
    SV_Target.z = _2762;
    SV_Target.w = _3142;
    SV_Target_1.x = _2765;
    SV_Target_1.y = _2768;
    SV_Target_1.z = _2771;
    SV_Target_1.w = cbInstanceData._m0[_2616].w;
    discard_exit();
}


