#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _892;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _183 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _184 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _185 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_183, _184, _185), vec3(_183, _184, _185)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _226 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _226.x * cbMtdParam._m0[9u].x;
    float _233 = _226.y * cbMtdParam._m0[9u].y;
    float _234 = _226.z * cbMtdParam._m0[9u].z;
    vec4 _246 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _248 = _246.x;
    vec4 _260 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _264 = _260.z;
    float _268 = (_260.x * 2.0) + (-1.0);
    float _270 = (_260.y * 2.0) + (-1.0);
    float _271 = dot(vec2(_268, _270), vec2(_268, _270));
    float _3273 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _277 = sqrt(1.0 - (isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0))));
    vec4 _314 = texture(sampler2D(C_Enemy_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _325 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3284 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _326 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
    float _334 = (((_326 * _326) * (3.0 - (_326 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _337 = fma(_277, _197 * NORMAL.x, fma(_270, _204 * TANGENT.x, (_190 * _183) * _268));
    float _340 = fma(_277, _197 * NORMAL.y, fma(_270, _204 * TANGENT.y, (_190 * _184) * _268));
    float _343 = fma(_277, _197 * NORMAL.z, fma(_270, _204 * TANGENT.z, (_190 * _185) * _268));
    float _347 = inversesqrt(dot(vec3(_337, _340, _343), vec3(_337, _340, _343)));
    float _348 = _347 * _337;
    float _349 = _347 * _340;
    float _350 = _347 * _343;
    float _3295 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _351 = isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0));
    float _3306 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3317 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3328 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3339 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _355 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
    float _371 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _412 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _422 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _412);
    float _423 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _412);
    float _424 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _412);
    float _428 = inversesqrt(dot(vec3(_422, _423, _424), vec3(_422, _423, _424)));
    float _429 = _422 * _428;
    float _430 = _423 * _428;
    float _431 = _424 * _428;
    float _437 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _438 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _459 = fma(_350, cbSceneParam._m0[5u].z, fma(_349, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _348));
    float _462 = fma(_350, cbSceneParam._m0[6u].z, fma(_349, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _348));
    float _465 = fma(_350, cbSceneParam._m0[7u].z, fma(_349, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _348));
    uint _478 = uint(roundEven(NORMAL.w)) * 13u;
    uint _479 = _478 + 9u;
    uint _480 = _479 + uint(cbMatDynParam._m0[0u].w);
    float _486 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0)))) * cbInstanceData._m0[_480].x;
    float _487 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0)))) * cbInstanceData._m0[_480].y;
    float _488 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0)))) * cbInstanceData._m0[_480].z;
    float _3350 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _489 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
    float _3361 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _490 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
    float _3372 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _491 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
    float _492 = 1.0 - _355;
    float _493 = _489 * _492;
    float _494 = _490 * _492;
    float _495 = _491 * _492;
    float _500 = (_489 + (-0.039999999105930328369140625)) * _355;
    float _501 = (_490 + (-0.039999999105930328369140625)) * _355;
    float _502 = (_491 + (-0.039999999105930328369140625)) * _355;
    float _503 = _500 + 0.039999999105930328369140625;
    float _505 = _501 + 0.039999999105930328369140625;
    float _506 = _502 + 0.039999999105930328369140625;
    vec4 _515 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _437, cbSceneParam._m0[86u].y * _438));
    float _518 = _515.x * TEXCOORD.z;
    float _519 = dot(vec3(_348, _349, _350), vec3(_429, _430, _431));
    float _522 = _519 * 2.0;
    float _526 = (_522 * _348) - _429;
    float _527 = (_522 * _349) - _430;
    float _528 = (_522 * _350) - _431;
    float _532 = abs(dot(vec3(_429, _430, _431), vec3(_348, _349, _350)));
    float _3383 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _534 = sqrt(_351);
    float _546 = exp2((_534 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_534 * 3.0));
    float _552 = (1.0 - _546) * ((_534 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _553 = _546 * _534;
    float _581 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _585 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _589 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _891;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _616 = fma(_589, cbModelParam._m0[26u].z, fma(_585, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _581));
        float _620 = fma(_589, cbModelParam._m0[27u].z, fma(_585, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _581));
        float _624 = fma(_589, cbModelParam._m0[28u].z, fma(_585, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _581));
        float _649 = _581 + _348;
        float _650 = _585 + _349;
        float _651 = _589 + _350;
        float _661 = fma(_651, cbModelParam._m0[26u].z, fma(_650, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _649)) - _616;
        float _662 = fma(_651, cbModelParam._m0[27u].z, fma(_650, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _649)) - _620;
        float _663 = fma(_651, cbModelParam._m0[28u].z, fma(_650, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _649)) - _624;
        float _667 = inversesqrt(dot(vec3(_661, _662, _663), vec3(_661, _662, _663)));
        float _680 = ((_667 * _661) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_616 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _681 = ((_667 * _662) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_620 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _682 = ((_667 * _663) / cbModelParam._m0[34u].z) + ((((((_624 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _685 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_680, _681, _682), 0.0);
        vec4 _692 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_680, _681, _682), 0.0);
        vec4 _699 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_680, _681, _682), 0.0);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_680, _681, _682), 0.0);
        float _719 = exp2((_685.w + (-0.5)) * 20.0) * 2.0;
        float _720 = _719 * (_685.x + (-0.5));
        float _721 = _719 * (_685.y + (-0.5));
        float _722 = _719 * (_685.z + (-0.5));
        float _729 = exp2((_692.w + (-0.5)) * 20.0) * 2.0;
        float _730 = _729 * (_692.x + (-0.5));
        float _731 = _729 * (_692.y + (-0.5));
        float _732 = _729 * (_692.z + (-0.5));
        float _739 = exp2((_699.w + (-0.5)) * 20.0) * 2.0;
        float _740 = _739 * (_699.x + (-0.5));
        float _741 = _739 * (_699.y + (-0.5));
        float _742 = _739 * (_699.z + (-0.5));
        float _749 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _750 = _749 * (_706.x + (-0.5));
        float _751 = _749 * (_706.y + (-0.5));
        float _752 = _749 * (_706.z + (-0.5));
        float _753 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _754 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _755 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _756 = _720 * 0.5;
        float _757 = _730 * 0.5;
        float _758 = _740 * 0.5;
        float _759 = dot(vec3(_756, _757, _758), vec3(_756, _757, _758));
        float _764 = (_759 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_759);
        float _773 = (dot(vec3(_348, _349, _350), vec3(_764 * _756, _764 * _757, _764 * _758)) + 1.0) * 0.5;
        float _3409 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _783 = sqrt(((_757 * _757) + (_756 * _756)) + (_758 * _758)) / (_753 + 9.9999997473787516355514526367188e-06);
        float _3420 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _785 = _784 * 2.0;
        float _789 = (1.0 - _784) / (_784 + 1.0);
        float _3431 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
        float _799 = ((((1.0 - _790) * (_785 + 2.0)) * exp2(log2(isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))) * (_785 + 1.0))) + _790) * _753;
        float _800 = _721 * 0.5;
        float _801 = _731 * 0.5;
        float _802 = _741 * 0.5;
        float _803 = dot(vec3(_800, _801, _802), vec3(_800, _801, _802));
        float _808 = (_803 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_803);
        float _816 = (dot(vec3(_348, _349, _350), vec3(_808 * _800, _808 * _801, _808 * _802)) + 1.0) * 0.5;
        float _3442 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _825 = sqrt(((_801 * _801) + (_800 * _800)) + (_802 * _802)) / (_754 + 9.9999997473787516355514526367188e-06);
        float _3453 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _827 = _826 * 2.0;
        float _831 = (1.0 - _826) / (_826 + 1.0);
        float _3464 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _841 = ((((1.0 - _832) * (_827 + 2.0)) * exp2(log2(isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * (_827 + 1.0))) + _832) * _754;
        float _842 = _722 * 0.5;
        float _843 = _732 * 0.5;
        float _844 = _742 * 0.5;
        float _845 = dot(vec3(_842, _843, _844), vec3(_842, _843, _844));
        float _850 = (_845 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_845);
        float _858 = (dot(vec3(_348, _349, _350), vec3(_850 * _842, _850 * _843, _850 * _844)) + 1.0) * 0.5;
        float _3475 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _867 = sqrt(((_843 * _843) + (_842 * _842)) + (_844 * _844)) / (_755 + 9.9999997473787516355514526367188e-06);
        float _3486 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _869 = _868 * 2.0;
        float _873 = (1.0 - _868) / (_868 + 1.0);
        float _3497 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _883 = ((((1.0 - _874) * (_869 + 2.0)) * exp2(log2(isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * (_869 + 1.0))) + _874) * _755;
        _891 = _722;
        _893 = _721;
        _894 = _720;
        _895 = _732;
        _896 = _731;
        _897 = _730;
        _898 = _742;
        _899 = _741;
        _900 = _740;
        _901 = _755;
        _902 = _754;
        _903 = _753;
        _904 = cbModelParam._m0[36u].z * (isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0)));
        _905 = cbModelParam._m0[36u].z * (isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0)));
        _906 = cbModelParam._m0[36u].z * (isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0)));
    }
    else
    {
        _891 = _892;
        _893 = _892;
        _894 = _892;
        _895 = _892;
        _896 = _892;
        _897 = _892;
        _898 = _892;
        _899 = _892;
        _900 = _892;
        _901 = _892;
        _902 = _892;
        _903 = _892;
        _904 = 0.0;
        _905 = 0.0;
        _906 = 0.0;
    }
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _932 = fma(_589, cbModelParam._m0[30u].z, fma(_585, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _581));
        float _936 = fma(_589, cbModelParam._m0[31u].z, fma(_585, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _581));
        float _940 = fma(_589, cbModelParam._m0[32u].z, fma(_585, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _581));
        float _963 = _581 + _348;
        float _964 = _585 + _349;
        float _965 = _589 + _350;
        float _975 = fma(_965, cbModelParam._m0[30u].z, fma(_964, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _963)) - _932;
        float _976 = fma(_965, cbModelParam._m0[31u].z, fma(_964, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _963)) - _936;
        float _977 = fma(_965, cbModelParam._m0[32u].z, fma(_964, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _963)) - _940;
        float _981 = inversesqrt(dot(vec3(_975, _976, _977), vec3(_975, _976, _977)));
        float _994 = ((_981 * _975) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_932 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _995 = ((_981 * _976) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_936 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _996 = ((_981 * _977) / cbModelParam._m0[35u].z) + ((((((_940 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        float _1031 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_998.x + (-0.5));
        float _1033 = _1031 * (_998.y + (-0.5));
        float _1034 = _1031 * (_998.z + (-0.5));
        float _1041 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1005.x + (-0.5));
        float _1043 = _1041 * (_1005.y + (-0.5));
        float _1044 = _1041 * (_1005.z + (-0.5));
        float _1051 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1012.x + (-0.5));
        float _1053 = _1051 * (_1012.y + (-0.5));
        float _1054 = _1051 * (_1012.z + (-0.5));
        float _1061 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1019.x + (-0.5));
        float _1063 = _1061 * (_1019.y + (-0.5));
        float _1064 = _1061 * (_1019.z + (-0.5));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = _1032 * 0.5;
        float _1069 = _1042 * 0.5;
        float _1070 = _1052 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_348, _349, _350), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3538 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3549 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3560 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * (_1095 + 1.0))) + _1100) * _1065;
        float _1110 = _1033 * 0.5;
        float _1111 = _1043 * 0.5;
        float _1112 = _1053 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_348, _349, _350), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3571 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _3582 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3593 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * (_1137 + 1.0))) + _1142) * _1066;
        float _1152 = _1034 * 0.5;
        float _1153 = _1044 * 0.5;
        float _1154 = _1054 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_348, _349, _350), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3604 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3615 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3626 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) * (_1179 + 1.0))) + _1184) * _1067;
        _1201 = _1034;
        _1202 = _1033;
        _1203 = _1032;
        _1204 = _1044;
        _1205 = _1043;
        _1206 = _1042;
        _1207 = _1054;
        _1208 = _1053;
        _1209 = _1052;
        _1210 = _1067;
        _1211 = _1066;
        _1212 = _1065;
        _1213 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
        _1214 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
        _1215 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
    }
    else
    {
        _1201 = _892;
        _1202 = _892;
        _1203 = _892;
        _1204 = _892;
        _1205 = _892;
        _1206 = _892;
        _1207 = _892;
        _1208 = _892;
        _1209 = _892;
        _1210 = _892;
        _1211 = _892;
        _1212 = _892;
        _1213 = 0.0;
        _1214 = 0.0;
        _1215 = 0.0;
    }
    float _1225 = (cbModelParam._m0[1u].x * (_1213 - _904)) + _904;
    float _1226 = (cbModelParam._m0[1u].x * (_1214 - _905)) + _905;
    float _1227 = (cbModelParam._m0[1u].x * (_1215 - _906)) + _906;
    float _1248 = fma(_1227, cbSceneParam._m0[89u].z, fma(_1226, cbSceneParam._m0[89u].y, _1225 * cbSceneParam._m0[89u].x));
    float _1251 = fma(_1227, cbSceneParam._m0[90u].z, fma(_1226, cbSceneParam._m0[90u].y, _1225 * cbSceneParam._m0[90u].x));
    float _1254 = fma(_1227, cbSceneParam._m0[91u].z, fma(_1226, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1225));
    float _1269 = _526 * 0.5;
    float _1270 = _527 * 0.5;
    float _1271 = _528 * 0.5;
    float _1272 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_1203, _1206, _1209, _1212));
    float _1275 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_1202, _1205, _1208, _1211));
    float _1278 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_1201, _1204, _1207, _1210));
    float _1312;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1285 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_891, _895, _898, _901));
        float _1289 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_893, _896, _899, _902));
        float _1293 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_894, _897, _900, _903));
        float _1300 = dot(vec4(cbModelParam._m0[39u]), vec4(_1269, _1270, _1271, 1.0));
        _1312 = dot(vec3(isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1300) ? 0.0 : (isnan(0.0) ? _1300 : max(0.0, _1300))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1312 = 1.0;
    }
    float _1323;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1314 = dot(vec4(cbModelParam._m0[40u]), vec4(_1269, _1270, _1271, 1.0));
        _1323 = dot(vec3(isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)), isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)), isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1314) ? 0.0 : (isnan(0.0) ? _1314 : max(0.0, _1314))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1323 = 1.0;
    }
    float _1327 = (_1323 * cbModelParam._m0[1u].x) + (_1312 * (1.0 - cbModelParam._m0[1u].x));
    float _1337 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _351);
    float _1338 = isnan(_1337) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1337 : min(cbModelParam._m0[25u].z, _1337));
    float _1419;
    float _1421;
    float _1423;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1386 = fma(_589, cbModelParam._m0[13u].z, fma(_585, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _581)) + cbModelParam._m0[13u].w;
        float _1390 = fma(_589, cbModelParam._m0[14u].z, fma(_585, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _581)) + cbModelParam._m0[14u].w;
        float _1394 = fma(_589, cbModelParam._m0[15u].z, fma(_585, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _581)) + cbModelParam._m0[15u].w;
        float _1397 = fma(_528, cbModelParam._m0[13u].z, fma(_527, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _526));
        float _1400 = fma(_528, cbModelParam._m0[14u].z, fma(_527, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _526));
        float _1403 = fma(_528, cbModelParam._m0[15u].z, fma(_527, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _526));
        float _1431;
        if (_1397 > 0.0)
        {
            _1431 = abs((1.0 - _1386) / _1397);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1397 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1386 + 1.0) / _1397);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1431 = frontier_phi_14_12_ladder;
        }
        float _1637;
        if (_1400 > 0.0)
        {
            _1637 = abs((1.0 - _1390) / _1400);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1400 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1390 + 1.0) / _1400);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1637 = frontier_phi_23_19_ladder;
        }
        float _1891;
        if (_1403 > 0.0)
        {
            _1891 = abs((1.0 - _1394) / _1403);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1394 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1891 = frontier_phi_35_30_ladder;
        }
        float _1893 = isnan(_1637) ? _1431 : (isnan(_1431) ? _1637 : min(_1431, _1637));
        float _1894 = isnan(_1891) ? _1893 : (isnan(_1893) ? _1891 : min(_1893, _1891));
        float _1898 = (_1894 * _1397) + _1386;
        float _1899 = (_1894 * _1400) + _1390;
        float _1900 = (_1894 * _1403) + _1394;
        float _1901 = _1894 * 9.9999997473787516355514526367188e-05;
        float _1903 = (-1.0) - _1901;
        float _1905 = _1901 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1900 > _1905) || ((_1900 < _1903) || ((_1899 > _1905) || ((_1899 < _1903) || ((_1898 < _1903) || (_1898 > _1905))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2028 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1900, cbModelParam._m0[9u].z, fma(_1899, cbModelParam._m0[9u].y, _1898 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1900, cbModelParam._m0[10u].z, fma(_1899, cbModelParam._m0[10u].y, _1898 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1900, cbModelParam._m0[11u].z, fma(_1899, cbModelParam._m0[11u].y, _1898 * cbModelParam._m0[11u].x))), _1338);
            frontier_phi_13_35_ladder = _2028.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2028.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2028.x * cbModelParam._m0[1u].y;
        }
        _1419 = frontier_phi_13_35_ladder_2;
        _1421 = frontier_phi_13_35_ladder_1;
        _1423 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1407 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_526, _527, _528), _1338);
        _1419 = _1407.x * cbModelParam._m0[1u].y;
        _1421 = _1407.y * cbModelParam._m0[1u].y;
        _1423 = _1407.z * cbModelParam._m0[1u].y;
    }
    float _1427 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _351);
    float _1428 = isnan(_1427) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1427 : min(cbModelParam._m0[25u].w, _1427));
    float _1520;
    float _1522;
    float _1524;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1484 = fma(_589, cbModelParam._m0[21u].z, fma(_585, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _581)) + cbModelParam._m0[21u].w;
        float _1488 = fma(_589, cbModelParam._m0[22u].z, fma(_585, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _581)) + cbModelParam._m0[22u].w;
        float _1492 = fma(_589, cbModelParam._m0[23u].z, fma(_585, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _581)) + cbModelParam._m0[23u].w;
        float _1495 = fma(_528, cbModelParam._m0[21u].z, fma(_527, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _526));
        float _1498 = fma(_528, cbModelParam._m0[22u].z, fma(_527, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _526));
        float _1501 = fma(_528, cbModelParam._m0[23u].z, fma(_527, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _526));
        float _1642;
        if (_1495 > 0.0)
        {
            _1642 = abs((1.0 - _1484) / _1495);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1484 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1642 = frontier_phi_25_21_ladder;
        }
        float _1918;
        if (_1498 > 0.0)
        {
            _1918 = abs((1.0 - _1488) / _1498);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1498 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1488 + 1.0) / _1498);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1918 = frontier_phi_37_32_ladder;
        }
        float _2131;
        if (_1501 > 0.0)
        {
            _2131 = abs((1.0 - _1492) / _1501);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1492 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2131 = frontier_phi_46_43_ladder;
        }
        float _2133 = isnan(_1918) ? _1642 : (isnan(_1642) ? _1918 : min(_1642, _1918));
        float _2134 = isnan(_2131) ? _2133 : (isnan(_2133) ? _2131 : min(_2133, _2131));
        float _2138 = (_2134 * _1495) + _1484;
        float _2139 = (_2134 * _1498) + _1488;
        float _2140 = (_2134 * _1501) + _1492;
        float _2141 = _2134 * 9.9999997473787516355514526367188e-05;
        float _2142 = (-1.0) - _2141;
        float _2144 = _2141 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2140 > _2144) || ((_2140 < _2142) || ((_2139 > _2144) || ((_2139 < _2142) || ((_2138 < _2142) || (_2138 > _2144))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2377 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2140, cbModelParam._m0[17u].z, fma(_2139, cbModelParam._m0[17u].y, _2138 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2140, cbModelParam._m0[18u].z, fma(_2139, cbModelParam._m0[18u].y, _2138 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2140, cbModelParam._m0[19u].z, fma(_2139, cbModelParam._m0[19u].y, _2138 * cbModelParam._m0[19u].x))), _1428);
            frontier_phi_22_46_ladder = _2377.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2377.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2377.x * cbModelParam._m0[1u].z;
        }
        _1520 = frontier_phi_22_46_ladder_2;
        _1522 = frontier_phi_22_46_ladder_1;
        _1524 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1504 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_526, _527, _528), _1428);
        _1520 = _1504.x * cbModelParam._m0[1u].z;
        _1522 = _1504.y * cbModelParam._m0[1u].z;
        _1524 = _1504.z * cbModelParam._m0[1u].z;
    }
    float _1537 = (((_552 * _503) + _553) * _518) * ((cbModelParam._m0[1u].w * (_1520 - _1419)) + _1419);
    float _1539 = (((_552 * _505) + _553) * _518) * ((cbModelParam._m0[1u].w * (_1522 - _1421)) + _1421);
    float _1541 = (((_552 * _506) + _553) * _518) * ((cbModelParam._m0[1u].w * (_1524 - _1423)) + _1423);
    float _1544 = fma(_1541, cbSceneParam._m0[89u].z, fma(_1539, cbSceneParam._m0[89u].y, _1537 * cbSceneParam._m0[89u].x));
    float _1547 = fma(_1541, cbSceneParam._m0[90u].z, fma(_1539, cbSceneParam._m0[90u].y, _1537 * cbSceneParam._m0[90u].x));
    float _1550 = fma(_1541, cbSceneParam._m0[91u].z, fma(_1539, cbSceneParam._m0[91u].y, _1537 * cbSceneParam._m0[91u].x));
    uvec4 _1560 = floatBitsToUint(cbInstanceData._m0[_478 + 5u]);
    uint _1562 = _1560.x * 14u;
    uint _1563 = _1562 + 13u;
    float _1570 = _518 + (-1.0);
    float _1575 = (cbLight._m0[_1563].x * _1570) + 1.0;
    float _1576 = (cbLight._m0[_1563].y * _1570) + 1.0;
    float _1577 = (cbLight._m0[_1563].z * _1570) + 1.0;
    float _1578 = (cbLight._m0[_1563].w * _1570) + 1.0;
    uint _1579 = _1562 + 5u;
    float _1585 = isnan(1.0) ? _1576 : (isnan(_1576) ? 1.0 : min(_1576, 1.0));
    uint _1589 = _1562 + 4u;
    float _1596 = isnan(1.0) ? _1575 : (isnan(_1575) ? 1.0 : min(_1575, 1.0));
    uint _1600 = _1562 | 1u;
    float _1611 = dot(vec3(cbLight._m0[_1562].xyz), vec3(_348, _349, _350));
    float _1614 = dot(vec3(cbLight._m0[_1600].xyz), vec3(_348, _349, _350));
    float _3762 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
    float _3773 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
    float _1619 = (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * 0.3183098733425140380859375;
    float _1621 = (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * 0.3183098733425140380859375;
    float _1628 = ((cbLight._m0[_1579].x * _1585) * _1621) + ((cbLight._m0[_1589].x * _1596) * _1619);
    float _1629 = ((_1585 * cbLight._m0[_1579].y) * _1621) + ((_1596 * cbLight._m0[_1589].y) * _1619);
    float _1630 = ((_1585 * cbLight._m0[_1579].z) * _1621) + ((_1596 * cbLight._m0[_1589].z) * _1619);
    uvec4 _1634 = floatBitsToUint(cbLight._m0[_1562 + 12u]);
    bool _1636 = _1634.x == 0u;
    float _1647;
    float _1649;
    float _1651;
    if (_1636)
    {
        _1647 = _1628;
        _1649 = _1629;
        _1651 = _1630;
    }
    else
    {
        uint _1655 = _1562 + 6u;
        float _1671 = (dot(vec3(cbLight._m0[_1562 + 2u].xyz), vec3(_348, _349, _350)) * 0.5) + 0.5;
        float _1672 = _1671 * _1671;
        float _3784 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1674 = isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0));
        _1647 = (((cbLight._m0[_1655].x * 0.3183098733425140380859375) * _1673) * _1674) + _1628;
        _1649 = (((cbLight._m0[_1655].y * 0.3183098733425140380859375) * _1673) * _1674) + _1629;
        _1651 = (((cbLight._m0[_1655].z * 0.3183098733425140380859375) * _1673) * _1674) + _1630;
    }
    bool _1654 = _1634.y == 0u;
    float _1692;
    float _1694;
    float _1696;
    if (_1654)
    {
        _1692 = _1647;
        _1694 = _1649;
        _1696 = _1651;
    }
    else
    {
        uint _1862 = _1562 + 7u;
        float _1878 = (dot(vec3(cbLight._m0[_1562 + 3u].xyz), vec3(_348, _349, _350)) * 0.5) + 0.5;
        float _1879 = _1878 * _1878;
        float _3800 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1880 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1881 = isnan(1.0) ? _1578 : (isnan(_1578) ? 1.0 : min(_1578, 1.0));
        _1692 = (((cbLight._m0[_1862].x * 0.3183098733425140380859375) * _1880) * _1881) + _1647;
        _1694 = (((cbLight._m0[_1862].y * 0.3183098733425140380859375) * _1880) * _1881) + _1649;
        _1696 = (((cbLight._m0[_1862].z * 0.3183098733425140380859375) * _1880) * _1881) + _1651;
    }
    uint _1699 = _1562 + 8u;
    float _1712 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1562].w)) * _351) * 0.949999988079071044921875);
    float _1713 = _1712 * _1712;
    float _1714 = cbLight._m0[_1562].x + _429;
    float _1715 = cbLight._m0[_1562].y + _430;
    float _1716 = cbLight._m0[_1562].z + _431;
    float _1720 = inversesqrt(dot(vec3(_1714, _1715, _1716), vec3(_1714, _1715, _1716)));
    float _1721 = _1720 * _1714;
    float _1722 = _1720 * _1715;
    float _1723 = _1720 * _1716;
    float _1724 = dot(vec3(_348, _349, _350), vec3(cbLight._m0[_1562].xyz));
    float _3816 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
    float _1727 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _3827 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _1728 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _1729 = dot(vec3(_348, _349, _350), vec3(_1721, _1722, _1723));
    float _3838 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _1732 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _1733 = dot(vec3(cbLight._m0[_1562].xyz), vec3(_1721, _1722, _1723));
    float _3849 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
    float _1737 = _1713 * _1713;
    float _1741 = ((_1732 * _1732) * (_1737 + (-1.0))) + 1.0;
    float _1749 = exp2(log2(1.0 - (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) * 5.0);
    float _1750 = 0.959999978542327880859375 - _500;
    float _1752 = 0.959999978542327880859375 - _501;
    float _1753 = 0.959999978542327880859375 - _502;
    float _1760 = 1.0 - _1713;
    float _1771 = (0.5 / (((_1728 * ((_1727 * _1760) + _1713)) + 9.9999999392252902907785028219223e-09) + (((_1728 * _1760) + _1713) * _1727))) * _1727;
    float _3860 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1773 = (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1737 / ((_1741 * _1741) * 3.141590118408203125));
    uint _1784 = _1562 + 9u;
    float _1795 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1600].w)) * _351) * 0.949999988079071044921875);
    float _1796 = _1795 * _1795;
    float _1797 = cbLight._m0[_1600].x + _429;
    float _1798 = cbLight._m0[_1600].y + _430;
    float _1799 = cbLight._m0[_1600].z + _431;
    float _1803 = inversesqrt(dot(vec3(_1797, _1798, _1799), vec3(_1797, _1798, _1799)));
    float _1804 = _1803 * _1797;
    float _1805 = _1803 * _1798;
    float _1806 = _1803 * _1799;
    float _1807 = dot(vec3(_348, _349, _350), vec3(cbLight._m0[_1600].xyz));
    float _3871 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1810 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _1811 = dot(vec3(_348, _349, _350), vec3(_1804, _1805, _1806));
    float _3882 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1814 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _1815 = dot(vec3(cbLight._m0[_1600].xyz), vec3(_1804, _1805, _1806));
    float _3893 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1819 = _1796 * _1796;
    float _1823 = ((_1814 * _1814) * (_1819 + (-1.0))) + 1.0;
    float _1830 = exp2(log2(1.0 - (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) * 5.0);
    float _1837 = 1.0 - _1796;
    float _1847 = (0.5 / (((_1728 * ((_1810 * _1837) + _1796)) + 9.9999999392252902907785028219223e-09) + (((_1728 * _1837) + _1796) * _1810))) * _1810;
    float _3904 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1849 = (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1819 / ((_1823 * _1823) * 3.141590118408203125));
    float _1859 = (((((_1830 * _1750) + _503) * cbLight._m0[_1784].x) * _1849) * _1585) + (((((_1749 * _1750) + _503) * cbLight._m0[_1699].x) * _1773) * _1596);
    float _1860 = (((((_1830 * _1752) + _505) * cbLight._m0[_1784].y) * _1849) * _1585) + (((((_1749 * _1752) + _505) * cbLight._m0[_1699].y) * _1773) * _1596);
    float _1861 = (((((_1830 * _1753) + _506) * cbLight._m0[_1784].z) * _1849) * _1585) + (((((_1749 * _1753) + _506) * cbLight._m0[_1699].z) * _1773) * _1596);
    float _1923;
    float _1925;
    float _1927;
    if (_1636)
    {
        _1923 = _1859;
        _1925 = _1860;
        _1927 = _1861;
    }
    else
    {
        uint _1929 = _1562 + 2u;
        uint _1933 = _1562 + 10u;
        float _1947 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1929].w)) * _351) * 0.949999988079071044921875);
        float _1948 = _1947 * _1947;
        float _1949 = cbLight._m0[_1929].x + _429;
        float _1950 = cbLight._m0[_1929].y + _430;
        float _1951 = cbLight._m0[_1929].z + _431;
        float _1955 = inversesqrt(dot(vec3(_1949, _1950, _1951), vec3(_1949, _1950, _1951)));
        float _1956 = _1955 * _1949;
        float _1957 = _1955 * _1950;
        float _1958 = _1955 * _1951;
        float _1959 = dot(vec3(_348, _349, _350), vec3(cbLight._m0[_1929].xyz));
        float _3915 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1962 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1963 = dot(vec3(_348, _349, _350), vec3(_1956, _1957, _1958));
        float _3926 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        float _1966 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1967 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_1956, _1957, _1958));
        float _3937 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1971 = _1948 * _1948;
        float _1975 = ((_1966 * _1966) * (_1971 + (-1.0))) + 1.0;
        float _1982 = exp2(log2(1.0 - (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) * 5.0);
        float _1989 = 1.0 - _1948;
        float _1999 = (0.5 / (((_1728 * ((_1962 * _1989) + _1948)) + 9.9999999392252902907785028219223e-09) + (((_1728 * _1989) + _1948) * _1962))) * _1962;
        float _3948 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2001 = (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1971 / ((_1975 * _1975) * 3.141590118408203125));
        float _2002 = isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0));
        _1923 = (((((_1982 * _1750) + _503) * cbLight._m0[_1933].x) * _2001) * _2002) + _1859;
        _1925 = (((((_1982 * _1752) + _505) * cbLight._m0[_1933].y) * _2001) * _2002) + _1860;
        _1927 = (((((_1982 * _1753) + _506) * cbLight._m0[_1933].z) * _2001) * _2002) + _1861;
    }
    float _2037;
    float _2039;
    float _2041;
    if (_1654)
    {
        _2037 = _1923;
        _2039 = _1925;
        _2041 = _1927;
    }
    else
    {
        uint _2048 = _1562 + 3u;
        uint _2052 = _1562 + 11u;
        float _2066 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2048].w)) * _351) * 0.949999988079071044921875);
        float _2067 = _2066 * _2066;
        float _2068 = cbLight._m0[_2048].x + _429;
        float _2069 = cbLight._m0[_2048].y + _430;
        float _2070 = cbLight._m0[_2048].z + _431;
        float _2074 = inversesqrt(dot(vec3(_2068, _2069, _2070), vec3(_2068, _2069, _2070)));
        float _2075 = _2074 * _2068;
        float _2076 = _2074 * _2069;
        float _2077 = _2074 * _2070;
        float _2078 = dot(vec3(_348, _349, _350), vec3(cbLight._m0[_2048].xyz));
        float _3964 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2081 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _2082 = dot(vec3(_348, _349, _350), vec3(_2075, _2076, _2077));
        float _3975 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2085 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _2086 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_2075, _2076, _2077));
        float _3986 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2090 = _2067 * _2067;
        float _2094 = ((_2085 * _2085) * (_2090 + (-1.0))) + 1.0;
        float _2101 = exp2(log2(1.0 - (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) * 5.0);
        float _2108 = 1.0 - _2067;
        float _2118 = (0.5 / (((_1728 * ((_2081 * _2108) + _2067)) + 9.9999999392252902907785028219223e-09) + (((_1728 * _2108) + _2067) * _2081))) * _2081;
        float _3997 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2120 = (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_2090 / ((_2094 * _2094) * 3.141590118408203125));
        float _2121 = isnan(1.0) ? _1578 : (isnan(_1578) ? 1.0 : min(_1578, 1.0));
        _2037 = (((((_2101 * _1750) + _503) * cbLight._m0[_2052].x) * _2120) * _2121) + _1923;
        _2039 = (((((_2101 * _1752) + _505) * cbLight._m0[_2052].y) * _2120) * _2121) + _1925;
        _2041 = (((((_2101 * _1753) + _506) * cbLight._m0[_2052].z) * _2120) * _2121) + _1927;
    }
    float _2256;
    float _2258;
    float _2260;
    float _2262;
    float _2264;
    float _2266;
    if (_1560.y == 0u)
    {
        float _2196 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2197 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2196;
        float _2198 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2196;
        float _2199 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2196;
        uvec4 _2211 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2212 = _2211.x;
        uint _2223 = uint((float(_2211.y) * floor(float(uint(cbSceneParam._m0[85u].y * _438) / _2212))) + floor(float(uint(cbSceneParam._m0[85u].x * _437) / _2212)));
        float _2233 = (log2(_2199 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2234 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        uint _2237 = uint(isnan(14.0) ? _2234 : (isnan(_2234) ? 14.0 : min(_2234, 14.0)));
        uvec4 _2242 = texelFetch(g_lightClusterGridBuffer, int(((_2237 << 2u) + (_2223 << 6u)) >> 2u));
        uint _2243 = _2242.x;
        uint _2244 = _2211.z;
        float _2382;
        float _2384;
        float _2386;
        float _2388;
        float _2390;
        float _2392;
        if (((((1u << ((_2244 >> 4u) & 15u)) + 4294967295u) & _2243) == 0u) || ((_2244 & 240u) == 0u))
        {
            _2382 = 0.0;
            _2384 = 0.0;
            _2386 = 0.0;
            _2388 = 0.0;
            _2390 = 0.0;
            _2392 = 0.0;
        }
        else
        {
            float _2383;
            float _2385;
            float _2387;
            float _2389;
            float _2391;
            float _2393;
            float _2536 = 0.0;
            float _2537 = 0.0;
            float _2538 = 0.0;
            float _2539 = 0.0;
            float _2540 = 0.0;
            float _2541 = 0.0;
            uint _2542 = 0u;
            uint _2551;
            bool _2552;
            for (;;)
            {
                _2551 = texelFetch(g_lightClassification, int((((_2237 << 5u) + (_2223 << 9u)) + (_2542 << 2u)) >> 2u)).x;
                _2552 = _2551 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2552)
                {
                    frontier_phi_61_pred = _2536;
                    frontier_phi_61_pred_1 = _2541;
                    frontier_phi_61_pred_2 = _2540;
                    frontier_phi_61_pred_3 = _2539;
                    frontier_phi_61_pred_4 = _2538;
                    frontier_phi_61_pred_5 = _2537;
                }
                else
                {
                    float _2660;
                    float _2661;
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    uint _2666;
                    _2660 = _2536;
                    _2661 = _2537;
                    _2662 = _2538;
                    _2663 = _2539;
                    _2664 = _2540;
                    _2665 = _2541;
                    _2666 = _2551;
                    float _2592;
                    float _2593;
                    float _2594;
                    float _2595;
                    float _2596;
                    float _2597;
                    for (;;)
                    {
                        uint _2670 = uint(findLSB(_2666)) + (_2542 << 5u);
                        uint _2667 = (_2666 + 4294967295u) & _2666;
                        uint _2672 = _2670 * 48u;
                        vec4 _2686 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2672)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 3u)).x));
                        uint _2692 = (_2670 * 48u) + 4u;
                        vec4 _2705 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2692)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 3u)).x));
                        uint _2711 = (_2670 * 48u) + 8u;
                        vec3 _2722 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2711)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 2u)).x));
                        float _2726 = _2686.x - _2197;
                        float _2727 = _2686.y - _2198;
                        float _2728 = _2686.z - _2199;
                        float _2729 = dot(vec3(_2726, _2727, _2728), vec3(_2726, _2727, _2728));
                        float _2732 = inversesqrt(_2729);
                        float _2733 = _2732 * _2726;
                        float _2734 = _2732 * _2727;
                        float _2735 = _2732 * _2728;
                        float _2736 = dot(vec3(_459, _462, _465), vec3(_2733, _2734, _2735));
                        float _2741 = 1.0 - (_2729 * _2686.w);
                        float _4023 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
                        float _2742 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
                        float _2743 = sqrt(_2729) * _2705.w;
                        float _2746 = 1.39999997615814208984375 / (_2743 + 1.39999997615814208984375);
                        float _2747 = _2746 * _2746;
                        float _2750 = ((1.0 - _2747) * _2736) + _2747;
                        float _2753 = _2743 * _2743;
                        float _2757 = ((isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0))) * _2742) / ((_2753 * 0.699999988079071044921875) + 1.0);
                        float _2761 = (-0.0) - _2197;
                        float _2762 = (-0.0) - _2198;
                        float _2763 = (-0.0) - _2199;
                        float _2767 = inversesqrt(dot(vec3(_2761, _2762, _2763), vec3(_2761, _2762, _2763)));
                        float _2768 = _2767 * _2761;
                        float _2769 = _2767 * _2762;
                        float _2770 = _2767 * _2763;
                        float _2778 = exp2(log2(1.0 / ((_2753 * 3.5) + 5.0)) * 0.25);
                        float _2779 = 1.0 - _534;
                        float _2786 = sqrt(1.0 - ((1.0 - (_2779 * _2779)) * (1.0 - (_2778 * _2778))));
                        float _2787 = _2786 * _2786;
                        float _2788 = _2787 * _2787;
                        float _2789 = _2768 + _2733;
                        float _2790 = _2769 + _2734;
                        float _2791 = _2770 + _2735;
                        float _2795 = inversesqrt(dot(vec3(_2789, _2790, _2791), vec3(_2789, _2790, _2791)));
                        float _2799 = dot(vec3(_459, _462, _465), vec3(_2768, _2769, _2770));
                        float _4039 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
                        float _2802 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                        float _2803 = dot(vec3(_459, _462, _465), vec3(_2795 * _2789, _2795 * _2790, _2795 * _2791));
                        float _4050 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
                        float _2806 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                        float _2810 = ((_2806 * _2806) * (_2788 + (-1.0))) + 1.0;
                        float _2811 = _2746 * _2787;
                        float _2812 = _2811 * _2811;
                        float _2815 = ((1.0 - _2812) * _2736) + _2812;
                        float _4061 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
                        float _2816 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                        float _2817 = 1.0 - _2787;
                        float _2827 = (0.5 / (((_2816 * ((_2802 * _2817) + _2787)) + 9.9999999392252902907785028219223e-09) + (((_2816 * _2817) + _2787) * _2802))) * _2816;
                        float _4072 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
                        float _2838 = (((_2788 * 3.1415927410125732421875) * (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) / ((_2810 * _2810) * ((_2753 * 2.1991131305694580078125) + 3.141590118408203125))) * _2742;
                        _2595 = (_2757 * _2705.x) + _2663;
                        _2596 = (_2757 * _2705.y) + _2664;
                        _2597 = (_2757 * _2705.z) + _2665;
                        _2592 = (_2838 * _2722.x) + _2660;
                        _2593 = (_2838 * _2722.y) + _2661;
                        _2594 = (_2838 * _2722.z) + _2662;
                        if (_2667 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2660 = _2592;
                            _2661 = _2593;
                            _2662 = _2594;
                            _2663 = _2595;
                            _2664 = _2596;
                            _2665 = _2597;
                            _2666 = _2667;
                        }
                    }
                    frontier_phi_61_pred = _2592;
                    frontier_phi_61_pred_1 = _2597;
                    frontier_phi_61_pred_2 = _2596;
                    frontier_phi_61_pred_3 = _2595;
                    frontier_phi_61_pred_4 = _2594;
                    frontier_phi_61_pred_5 = _2593;
                }
                _2383 = frontier_phi_61_pred;
                _2393 = frontier_phi_61_pred_1;
                _2391 = frontier_phi_61_pred_2;
                _2389 = frontier_phi_61_pred_3;
                _2387 = frontier_phi_61_pred_4;
                _2385 = frontier_phi_61_pred_5;
                uint _2543 = _2542 + 1u;
                if (_2543 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2536 = _2383;
                    _2537 = _2385;
                    _2538 = _2387;
                    _2539 = _2389;
                    _2540 = _2391;
                    _2541 = _2393;
                    _2542 = _2543;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2382 = _2383;
            _2384 = _2385;
            _2386 = _2387;
            _2388 = _2389;
            _2390 = _2391;
            _2392 = _2393;
        }
        uvec4 _2396 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2397 = _2396.z;
        uint _2399 = (_2397 >> 8u) & 15u;
        float _2504;
        float _2506;
        float _2508;
        float _2510;
        float _2512;
        float _2514;
        if (((4294967295u << _2399) & _2243) == 0u)
        {
            _2504 = _2382;
            _2506 = _2384;
            _2508 = _2386;
            _2510 = _2388;
            _2512 = _2390;
            _2514 = _2392;
        }
        else
        {
            float _2529 = inversesqrt(dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199)));
            float _2530 = _2529 * _2197;
            float _2531 = _2529 * _2198;
            float _2532 = _2529 * _2199;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2399 < ((_2397 >> 12u) & 15u))
            {
                float _2505;
                float _2507;
                float _2509;
                float _2511;
                float _2513;
                float _2515;
                float _2643 = _2382;
                float _2644 = _2384;
                float _2645 = _2386;
                float _2646 = _2388;
                float _2647 = _2390;
                float _2648 = _2392;
                uint _2649 = _2399;
                uint _2658;
                bool _2659;
                for (;;)
                {
                    _2658 = texelFetch(g_lightClassification, int((((_2237 << 5u) + (_2223 << 9u)) + (_2649 << 2u)) >> 2u)).x;
                    _2659 = _2658 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2659)
                    {
                        frontier_phi_67_pred = _2646;
                        frontier_phi_67_pred_1 = _2647;
                        frontier_phi_67_pred_2 = _2648;
                        frontier_phi_67_pred_3 = _2645;
                        frontier_phi_67_pred_4 = _2644;
                        frontier_phi_67_pred_5 = _2643;
                    }
                    else
                    {
                        float _2843;
                        float _2844;
                        float _2845;
                        float _2846;
                        float _2847;
                        float _2848;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _2856 = _2643;
                        float _2857 = _2644;
                        float _2858 = _2645;
                        float _2859 = _2646;
                        float _2860 = _2647;
                        float _2861 = _2648;
                        uint _2862 = _2658;
                        uint _2863;
                        vec4 _2888;
                        float _2889;
                        vec4 _2904;
                        vec3 _2916;
                        vec4 _2932;
                        vec4 _2948;
                        float _2995;
                        bool _2996;
                        for (;;)
                        {
                            uint _2873 = ((_2649 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2862));
                            _2863 = (_2862 + 4294967295u) & _2862;
                            uint _2875 = _2873 * 40u;
                            _2888 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2875)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 3u)).x));
                            _2889 = _2888.w;
                            uint _2891 = (_2873 * 40u) + 4u;
                            _2904 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2891)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 3u)).x));
                            uint _2906 = (_2873 * 40u) + 8u;
                            _2916 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x));
                            uint _2919 = (_2873 * 40u) + 16u;
                            _2932 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 3u)).x));
                            uint _2935 = (_2873 * 40u) + 20u;
                            _2948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 3u)).x));
                            uint _2951 = (_2873 * 40u) + 24u;
                            vec4 _2964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 3u)).x));
                            uint _2970 = (_2873 * 40u) + 28u;
                            vec4 _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            _2995 = fma(_2199, _2983.z, fma(_2198, _2983.y, _2983.x * _2197)) + _2983.w;
                            _2996 = !((fma(_2199, _2964.z, fma(_2198, _2964.y, _2964.x * _2197)) + _2964.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2996)
                            {
                                float _3023 = _2888.x - _2197;
                                float _3024 = _2888.y - _2198;
                                float _3025 = _2888.z - _2199;
                                float _3026 = dot(vec3(_3023, _3024, _3025), vec3(_3023, _3024, _3025));
                                float _3029 = inversesqrt(_3026);
                                float _3030 = _3029 * _3023;
                                float _3031 = _3029 * _3024;
                                float _3032 = _3029 * _3025;
                                float _3036 = 1.0 - (_3026 / (_2889 * _2889));
                                float _4083 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                                float _3037 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                                float _3041 = sqrt(_3026) * _2904.w;
                                float _3043 = 1.39999997615814208984375 / (_3041 + 1.39999997615814208984375);
                                float _3044 = _3043 * _3043;
                                float _3047 = ((1.0 - _3044) * dot(vec3(_3030, _3031, _3032), vec3(_459, _462, _465))) + _3044;
                                float _3050 = _3041 * _3041;
                                float _3054 = (fma(_2199, _2932.z, fma(_2198, _2932.y, _2932.x * _2197)) + _2932.w) / _2995;
                                float _3055 = (fma(_2199, _2948.z, fma(_2198, _2948.y, _2948.x * _2197)) + _2948.w) / _2995;
                                float _3059 = 1.0 - dot(vec2(_3054, _3055), vec2(_3054, _3055));
                                float _4099 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                                float _3060 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                                float _3061 = _3060 * (((isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0))) * _3037) / ((_3050 * 0.699999988079071044921875) + 1.0));
                                float _3073 = exp2(log2(1.0 / ((_3050 * 3.5) + 5.0)) * 0.25);
                                float _3074 = 1.0 - _534;
                                float _3081 = sqrt(1.0 - ((1.0 - (_3074 * _3074)) * (1.0 - (_3073 * _3073))));
                                float _3082 = _3081 * _3081;
                                float _3083 = _3082 * _3082;
                                float _3084 = _3030 - _2530;
                                float _3085 = _3031 - _2531;
                                float _3086 = _3032 - _2532;
                                float _3090 = inversesqrt(dot(vec3(_3084, _3085, _3086), vec3(_3084, _3085, _3086)));
                                float _3094 = dot(vec3(_459, _462, _465), vec3((-0.0) - _2530, (-0.0) - _2531, (-0.0) - _2532));
                                float _4110 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                                float _3097 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
                                float _3098 = dot(vec3(_459, _462, _465), vec3(_3090 * _3084, _3090 * _3085, _3090 * _3086));
                                float _4121 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                                float _3101 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                                float _3105 = ((_3101 * _3101) * (_3083 + (-1.0))) + 1.0;
                                float _3106 = _3043 * _3082;
                                float _3107 = _3106 * _3106;
                                float _3113 = ((1.0 - _3107) * dot(vec3(_459, _462, _465), vec3(_3030, _3031, _3032))) + _3107;
                                float _4132 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                                float _3114 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
                                float _3115 = 1.0 - _3082;
                                float _3125 = (0.5 / (((_3114 * ((_3097 * _3115) + _3082)) + 9.9999999392252902907785028219223e-09) + (((_3114 * _3115) + _3082) * _3097))) * _3114;
                                float _4143 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                                float _3135 = (_3060 * _3037) * (((_3083 * 3.1415927410125732421875) * (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) / ((_3105 * _3105) * ((_3050 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3135 * _2916.x;
                                frontier_phi_73_pred_1 = _3135 * _2916.y;
                                frontier_phi_73_pred_2 = _3061 * _2904.z;
                                frontier_phi_73_pred_3 = _3061 * _2904.y;
                                frontier_phi_73_pred_4 = _3061 * _2904.x;
                                frontier_phi_73_pred_5 = _3135 * _2916.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3139 = frontier_phi_73_pred;
                            _3140 = frontier_phi_73_pred_1;
                            _3144 = frontier_phi_73_pred_2;
                            _3143 = frontier_phi_73_pred_3;
                            _3142 = frontier_phi_73_pred_4;
                            _3141 = frontier_phi_73_pred_5;
                            _2846 = _3142 + _2859;
                            _2847 = _3143 + _2860;
                            _2848 = _3144 + _2861;
                            _2843 = _3139 + _2856;
                            _2844 = _3140 + _2857;
                            _2845 = _3141 + _2858;
                            if (_2863 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2856 = _2843;
                                _2857 = _2844;
                                _2858 = _2845;
                                _2859 = _2846;
                                _2860 = _2847;
                                _2861 = _2848;
                                _2862 = _2863;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2846;
                        frontier_phi_67_pred_1 = _2847;
                        frontier_phi_67_pred_2 = _2848;
                        frontier_phi_67_pred_3 = _2845;
                        frontier_phi_67_pred_4 = _2844;
                        frontier_phi_67_pred_5 = _2843;
                    }
                    _2511 = frontier_phi_67_pred;
                    _2513 = frontier_phi_67_pred_1;
                    _2515 = frontier_phi_67_pred_2;
                    _2509 = frontier_phi_67_pred_3;
                    _2507 = frontier_phi_67_pred_4;
                    _2505 = frontier_phi_67_pred_5;
                    uint _2650 = _2649 + 1u;
                    if (_2650 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2643 = _2505;
                        _2644 = _2507;
                        _2645 = _2509;
                        _2646 = _2511;
                        _2647 = _2513;
                        _2648 = _2515;
                        _2649 = _2650;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2513;
                frontier_phi_55_56_ladder_1 = _2515;
                frontier_phi_55_56_ladder_2 = _2511;
                frontier_phi_55_56_ladder_3 = _2509;
                frontier_phi_55_56_ladder_4 = _2507;
                frontier_phi_55_56_ladder_5 = _2505;
            }
            else
            {
                frontier_phi_55_56_ladder = _2390;
                frontier_phi_55_56_ladder_1 = _2392;
                frontier_phi_55_56_ladder_2 = _2388;
                frontier_phi_55_56_ladder_3 = _2386;
                frontier_phi_55_56_ladder_4 = _2384;
                frontier_phi_55_56_ladder_5 = _2382;
            }
            _2504 = frontier_phi_55_56_ladder_5;
            _2506 = frontier_phi_55_56_ladder_4;
            _2508 = frontier_phi_55_56_ladder_3;
            _2510 = frontier_phi_55_56_ladder_2;
            _2512 = frontier_phi_55_56_ladder;
            _2514 = frontier_phi_55_56_ladder_1;
        }
        float _2519 = isnan(1.0) ? _518 : (isnan(_518) ? 1.0 : min(_518, 1.0));
        _2256 = (_2519 * _2510) + _1692;
        _2258 = (_2519 * _2512) + _1694;
        _2260 = (_2519 * _2514) + _1696;
        _2262 = ((_2504 * _503) * _2519) + _2037;
        _2264 = ((_2506 * _505) * _2519) + _2039;
        _2266 = ((_2508 * _506) * _2519) + _2041;
    }
    else
    {
        _2256 = _1692;
        _2258 = _1694;
        _2260 = _1696;
        _2262 = _2037;
        _2264 = _2039;
        _2266 = _2041;
    }
    uint _2272 = _479 + uint(cbMatDynParam._m0[0u].w);
    float _2281 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _314.x) * _334) * cbInstanceData._m0[_2272].x;
    float _2285 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _314.y) * _334) * cbInstanceData._m0[_2272].y;
    float _2289 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _314.z) * _334) * cbInstanceData._m0[_2272].z;
    float _4159 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _4170 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _4181 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _2306 = (((isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_2256 + ((isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))) * _518))) + ((_2262 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _1327)) * cbPerFrame._m0[3u].x)) + _2281;
    float _2308 = (_2285 + ((_2264 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _1327)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_2258 + ((isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))) * _518)));
    float _2310 = (_2289 + ((_2266 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _1327)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_2260 + ((isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))) * _518)));
    float _4207 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2323 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    uint _2324 = _478 + 6u;
    float _2332 = _437 / cbSceneParam._m0[86u].x;
    float _2333 = _438 / cbSceneParam._m0[86u].y;
    vec4 _2347 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2332, _2333, (log2((isnan(cbSceneParam._m0[77u].w) ? _371 : (isnan(_371) ? cbSceneParam._m0[77u].w : min(_371, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2349 = _2347.x;
    float _2350 = _2347.y;
    float _2351 = _2347.z;
    float _2352 = _2347.w;
    float _2445;
    float _2447;
    float _2449;
    float _2451;
    if (_371 > cbSceneParam._m0[78u].w)
    {
        float _2407 = isnan(_371) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _371 : min(cbSceneParam._m0[80u].w, _371));
        float _2408 = _2407 / _371;
        float _2419 = _2408 * _422;
        float _2420 = _423 * _2408;
        float _2421 = (-0.0) - _2420;
        float _2423 = _2408 * _424;
        float _2425 = (cbSceneParam._m0[77u].w * _2421) / _2407;
        float _2426 = _2425 + cbSceneParam._m0[79u].w;
        float _2427 = cbSceneParam._m0[79u].w - _2420;
        float _2433 = sqrt(((_2419 * _2419) + (_2420 * _2420)) + (_2423 * _2423));
        float _2436 = (1.0 - (cbSceneParam._m0[77u].w / _2407)) * _2433;
        float _2441 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2443 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2605;
        if (abs((_2421 - _2425) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2605 = ((((_2426 > 0.0) ? exp2(_2441 * _2426) : (2.0 - exp2(_2443 * _2426))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2436;
        }
        else
        {
            float _2565 = 1.0 / cbSceneParam._m0[80u].x;
            float _2566 = isnan(_2427) ? _2426 : (isnan(_2426) ? _2427 : max(_2426, _2427));
            float _2567 = isnan(_2427) ? _2426 : (isnan(_2426) ? _2427 : min(_2426, _2427));
            float _2576 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : min(_2566, 0.0));
            float _2577 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : min(_2567, 0.0));
            _2605 = ((abs(_2433 / _2421) * cbSceneParam._m0[80u].y) * ((((_2576 - _2577) * 2.0) - ((exp2(_2441 * (isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0)))) - exp2(_2441 * (isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0))))) * _2565)) - ((exp2(_2443 * _2576) - exp2(_2443 * _2577)) * _2565))) + (_2436 * cbSceneParam._m0[80u].z);
        }
        vec4 _2607 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2332, _2333, 1.0), 0.0);
        float _2616 = exp2((_2605 * (-1.44269502162933349609375)) * (1.0 - _2607.w));
        float _2617 = log2(_2616);
        float _2633 = log2(_2352);
        _2445 = (exp2(_2633 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2617 * cbSceneParam._m0[78u].x)) * _2607.x) / cbSceneParam._m0[78u].x)) + _2349;
        _2447 = (exp2(_2633 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2617 * cbSceneParam._m0[78u].y)) * _2607.y) / cbSceneParam._m0[78u].y)) + _2350;
        _2449 = (exp2(_2633 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2617 * cbSceneParam._m0[78u].z)) * _2607.z) / cbSceneParam._m0[78u].z)) + _2351;
        _2451 = _2616 * _2352;
    }
    else
    {
        _2445 = _2349;
        _2447 = _2350;
        _2449 = _2351;
        _2451 = _2352;
    }
    float _2463 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2464 = _2463 == 3.0;
    float _2465 = log2(_2451);
    float _2469 = exp2(_2465 * cbSceneParam._m0[78u].x);
    float _2470 = exp2(_2465 * cbSceneParam._m0[78u].y);
    float _2471 = exp2(_2465 * cbSceneParam._m0[78u].z);
    float _2472 = _2469 * (isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0)));
    float _2473 = _2470 * (isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0)));
    float _2474 = _2471 * (isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0)));
    float _2483 = (_2463 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2483 * (_2464 ? _2472 : (_2472 + (cbSceneParam._m0[72u].w * _2445)));
    SV_Target.y = _2483 * (_2464 ? _2473 : (_2473 + (cbSceneParam._m0[72u].w * _2447)));
    SV_Target.z = _2483 * (_2464 ? _2474 : (_2474 + (cbSceneParam._m0[72u].w * _2449)));
    SV_Target.w = cbInstanceData._m0[_2324].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2281) * _2323) * _2469) * _2483;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2285) * _2323) * _2470) * _2483;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2289) * _2323) * _2471) * _2483;
    SV_Target_1.w = cbInstanceData._m0[_2324].w;
}


