#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[45];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_oceanA_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_oceanA_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_oceanA_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_oceanA_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_oceanA_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Water_oceanA_snp_0_Texture2D_5;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in vec4 TEXCOORD_8;
layout(location = 7) in float TEXCOORD_11;
layout(location = 7, component = 1) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1857;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _228 = _227 * _219;
    float _229 = _227 * _220;
    float _230 = _227 * _221;
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249;
    float _250;
    float _251;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _249 = (-0.0) - _235;
        _250 = (-0.0) - _236;
        _251 = (-0.0) - _237;
    }
    else
    {
        _249 = _235;
        _250 = _236;
        _251 = _237;
    }
    float _297 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _307 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _297);
    float _308 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _297);
    float _309 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _297);
    float _324 = cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x;
    vec4 _341 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_2, SS_BumpMap), vec2((((_324 * cbMtdParam._m0[27u].x) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_324 * cbMtdParam._m0[27u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _344 = _341.x;
    float _345 = _341.y;
    float _346 = _341.z;
    float _347 = _341.w;
    float _360 = cbMtdParam._m0[14u].y - cbMtdParam._m0[14u].x;
    float _363 = (sqrt(((_307 * _307) + (_308 * _308)) + (_309 * _309)) - cbMtdParam._m0[14u].x) / (isnan(0.001000000047497451305389404296875) ? _360 : (isnan(_360) ? 0.001000000047497451305389404296875 : max(_360, 0.001000000047497451305389404296875)));
    float _364 = _363 + 0.180000007152557373046875;
    float _366 = _364 * 12.0;
    float _4067 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _369 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    vec4 _381 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _383 = _381.x;
    float _405 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _383)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _383))) - POSITION_1.w;
    float _406 = _405 / ((_369 * 0.0599999986588954925537109375) + 0.0599999986588954925537109375);
    float _4078 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _407 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _408 = isnan(0.5) ? _407 : (isnan(_407) ? 0.5 : max(_407, 0.5));
    float _410 = 1.0 - _408;
    float _411 = _364 * 7.0;
    float _4094 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _413 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _424 = (_346 * 0.00200000009499490261077880859375) + TEXCOORD.x;
    float _425 = (_346 * 0.00999999977648258209228515625) + TEXCOORD.y;
    vec4 _439 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_3, SS_WrapLinear), vec2((((cbMtdParam._m0[25u].z * _324) + _424) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[25u].w * _324) + _425) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _441 = _439.x;
    float _463 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_3, SS_WrapLinear), vec2((((cbMtdParam._m0[23u].z * _424) + (cbMtdParam._m0[26u].z * _324)) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[23u].w * _425) + (cbMtdParam._m0[26u].w * _324)) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x + (-0.0500000007450580596923828125);
    float _466 = (isnan(_463) ? _441 : (isnan(_441) ? _463 : max(_441, _463))) - _413;
    float _4110 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _467 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _468 = _413 + 0.5;
    float _4121 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _479 = cbMtdParam._m0[16u].w * _324;
    float _480 = cos(_479);
    float _481 = sin(_479);
    vec4 _505 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2(((((_481 * cbMtdParam._m0[31u].x) + TEXCOORD.x) + (cbMtdParam._m0[22u].x * _324)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((_480 * cbMtdParam._m0[31u].y) + TEXCOORD.y) + (cbMtdParam._m0[22u].y * _324)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _509 = _505.z;
    vec4 _524 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[21u].z * _324) + TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[21u].w * _324) + TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _528 = _524.z;
    float _531 = (isnan(_528) ? _509 : (isnan(_509) ? _528 : max(_509, _528))) * (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)));
    float _4137 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _532 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _535 = (_410 - _347) + (isnan(_532) ? _467 : (isnan(_467) ? _532 : max(_467, _532)));
    float _4153 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _536 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _537 = _536 * _408;
    float _4164 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _546 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _547 = _346 - _546;
    float _4175 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _548 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    vec4 _601 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[23u].x * _324) + (cbMtdParam._m0[30u].z * _481)) + (cbMtdParam._m0[34u].z * TEXCOORD.x)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[23u].y * _324) + (cbMtdParam._m0[30u].w * _480)) + (cbMtdParam._m0[34u].w * TEXCOORD.y)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _625 = cbMtdParam._m0[37u].w * TEXCOORD_5.x;
    float _681 = ((((((_601.w + (-0.5)) * cbMtdParam._m0[43u].w) + (cbMtdParam._m0[39u].y * (_505.w + (-0.5)))) + (cbMtdParam._m0[40u].x * (_524.w + (-0.5)))) + (((_625 + cbMtdParam._m0[41u].z) * cos(cbMtdParam._m0[13u].y * _324)) * (texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_5, SS_WrapLinear), vec2(((cbMtdParam._m0[32u].z * TEXCOORD.x) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, ((cbMtdParam._m0[32u].w * TEXCOORD.y) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w)).y + (-0.5)))) + ((sin(cbMtdParam._m0[13u].x * _324) * (cbMtdParam._m0[40u].w + _625)) * (texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_5, SS_WrapLinear), vec2(((cbMtdParam._m0[31u].z * TEXCOORD.x) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, ((cbMtdParam._m0[31u].w * TEXCOORD.y) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w)).y + (-0.5)))) * (1.0 - TEXCOORD_5.y);
    float _711 = 1.0 - _347;
    float _716 = ((isnan(0.550000011920928955078125) ? _711 : (isnan(_711) ? 0.550000011920928955078125 : max(_711, 0.550000011920928955078125))) + (-0.550000011920928955078125)) * cbMtdParam._m0[16u].z;
    float _719 = ((TEXCOORD_5.y * (-0.5)) * _716) + _716;
    float _723 = ((TEXCOORD_5.z * (-0.699999988079071044921875)) * _719) + _719;
    float _736 = (((_681 + ((cbMtdParam._m0[37u].x - (cbMtdParam._m0[37u].x * TEXCOORD_5.y)) * _346)) + ((texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[35u].z * TEXCOORD.x) + (cbMtdParam._m0[22u].z * _324)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[35u].w * TEXCOORD.y) + (cbMtdParam._m0[22u].w * _324)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).w + (-0.5)) * cbMtdParam._m0[44u].z)) + ((sin(cbMtdParam._m0[21u].y * _324) * cbMtdParam._m0[38u].z) * (isnan(0.300000011920928955078125) ? TEXCOORD_5.z : (isnan(TEXCOORD_5.z) ? 0.300000011920928955078125 : max(TEXCOORD_5.z, 0.300000011920928955078125))))) + _723;
    float _739 = (_736 + cbMtdParam._m0[20u].z) * cbMtdParam._m0[20u].w;
    float _4196 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _740 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _752 = inversesqrt(dot(vec3(_307, _308, _309), vec3(_307, _308, _309)));
    float _756 = dot(vec4(_752 * _307, _752 * _308, _752 * _309, 0.0), vec4(_249, _250, _251, 0.0));
    float _4207 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _764 = exp2(log2((1.0 - (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) * cbMtdParam._m0[12u].z) * cbMtdParam._m0[12u].w);
    float _4218 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _765 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _769 = ((_537 + cbMtdParam._m0[9u].x) + (_548 * cbMtdParam._m0[10u].x)) + ((_740 * cbMtdParam._m0[11u].x) * _765);
    float _770 = ((_537 + cbMtdParam._m0[9u].y) + (_548 * cbMtdParam._m0[10u].y)) + ((_740 * cbMtdParam._m0[11u].y) * _765);
    float _771 = ((_537 + cbMtdParam._m0[9u].z) + (_548 * cbMtdParam._m0[10u].z)) + ((_740 * cbMtdParam._m0[11u].z) * _765);
    float _4229 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _772 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _4240 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _782 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _785 = (_369 * (-0.87999999523162841796875)) * _782;
    float _788 = (((((1.0 - _769) - _772) * _546) + _769) + _782) + _785;
    float _791 = (((((1.0 - _770) - _772) * _546) + _770) + _782) + _785;
    float _794 = (((((1.0 - _771) - _772) * _546) + _771) + _782) + _785;
    float _795 = _346 * 0.01200000010430812835693359375;
    float _820 = (_346 * 0.300000011920928955078125) * texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[35u].x * _324) + _795) + (cbMtdParam._m0[24u].x * TEXCOORD.x)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[35u].y * _324) + _795) + (cbMtdParam._m0[24u].y * TEXCOORD.y)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z;
    float _4251 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _821 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _831 = (((1.0 - _788) * TEXCOORD_5.x) * _821) + _788;
    float _832 = (((1.0 - _791) * TEXCOORD_5.x) * _821) + _791;
    float _833 = (((1.0 - _794) * TEXCOORD_5.x) * _821) + _794;
    vec4 _867 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_4, SS_WrapLinear), vec2(((((cbMtdParam._m0[27u].z * _324) + (cbMtdParam._m0[30u].x * _481)) + (cbMtdParam._m0[29u].x * _424)) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, ((((cbMtdParam._m0[27u].w * _324) + (cbMtdParam._m0[30u].y * _480)) + (cbMtdParam._m0[29u].y * _425)) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _870 = _867.y;
    float _877 = 1.0 - (_405 / cbMtdParam._m0[18u].w);
    float _881 = ((_867.x * TEXCOORD_8.x) * cbMtdParam._m0[18u].z) * (isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0)));
    float _887 = _870 * TEXCOORD_8.y;
    float _890 = ((isnan(cbMtdParam._m0[19u].x) ? _887 : (isnan(_887) ? cbMtdParam._m0[19u].x : max(_887, cbMtdParam._m0[19u].x))) - cbMtdParam._m0[19u].x) * cbMtdParam._m0[19u].y;
    float _891 = isnan(_890) ? _881 : (isnan(_881) ? _890 : max(_881, _890));
    float _4277 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _892 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    float _899 = (_892 * (1.0 - _831)) + _831;
    float _900 = (_892 * (1.0 - _832)) + _832;
    float _901 = (_892 * (1.0 - _833)) + _833;
    float _938 = exp2(log2(cbMtdParam._m0[15u].w * _711) * cbMtdParam._m0[17u].x);
    float _4288 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _939 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _940 = _939 * texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_4, SS_WrapLinear), vec2(((((cbMtdParam._m0[28u].x * _324) + (cbMtdParam._m0[28u].z * _711)) + (cbMtdParam._m0[29u].z * _424)) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, ((((cbMtdParam._m0[28u].y * _324) + (cbMtdParam._m0[28u].w * _711)) + (cbMtdParam._m0[29u].w * _425)) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).z;
    float _943 = ((_939 - _940) * cbMtdParam._m0[17u].w) + _940;
    float _947 = _413 * TEXCOORD_8.z;
    float _954 = ((_947 * (1.0 - _899)) * _943) + _899;
    float _955 = ((_947 * (1.0 - _900)) * _943) + _900;
    float _956 = ((_947 * (1.0 - _901)) * _943) + _901;
    float _960 = 1.0 - (_405 / cbMtdParam._m0[18u].x);
    float _966 = (cbMtdParam._m0[18u].y * _870) * (isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0)));
    float _970 = (_966 * (1.0 - _954)) + _954;
    float _971 = (_966 * (1.0 - _955)) + _955;
    float _972 = (_966 * (1.0 - _956)) + _956;
    float _975 = _363 / cbMtdParam._m0[15u].y;
    float _4304 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _978 = (1.0 - (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) * cbMtdParam._m0[15u].x;
    float _984 = _363 + 0.20000000298023223876953125;
    float _986 = _984 * 9.0;
    float _4315 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _991 = ((cbMtdParam._m0[13u].w - cbMtdParam._m0[12u].x) * (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) + cbMtdParam._m0[12u].x;
    float _994 = (_363 + 0.099999986588954925537109375) * 2.5;
    float _4326 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _999 = ((cbMtdParam._m0[14u].z - _991) * (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) + _991;
    float _1000 = _970 + _536;
    float _4337 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1005 = ((0.3499999940395355224609375 - _999) * (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) + _999;
    float _1006 = TEXCOORD_5.z * 0.5;
    float _1018 = (_363 + 0.100000001490116119384765625) * 0.89999997615814208984375;
    float _4348 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _1023 = ((cbMtdParam._m0[17u].y - cbMtdParam._m0[20u].x) * (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) + cbMtdParam._m0[20u].x;
    float _1028 = (_1023 * (_344 + (-0.5))) + 0.5;
    float _1029 = (_1023 * (_345 + (-0.5))) + 0.5;
    float _4359 = isnan(0.0) ? TEXCOORD_5.y : (isnan(TEXCOORD_5.y) ? 0.0 : max(TEXCOORD_5.y, 0.0));
    float _1030 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    vec4 _1060 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[26u].x * TEXCOORD.z) + (cbMtdParam._m0[32u].x * _324)) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[26u].y * TEXCOORD.w) + (cbMtdParam._m0[32u].y * _324)) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _1068 = ((_524.x + (-0.5)) * 0.5) + _505.x;
    float _1069 = ((_524.y + (-0.5)) * 0.5) + _505.y;
    vec4 _1093 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[24u].z * TEXCOORD.x) + (cbMtdParam._m0[25u].x * _324)) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[24u].w * TEXCOORD.y) + (cbMtdParam._m0[25u].y * _324)) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _1102 = _984 * 12.0;
    float _4370 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _1104 = 1.0 - (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)));
    float _1118 = cbMtdParam._m0[33u].z * TEXCOORD.x;
    float _1119 = cbMtdParam._m0[33u].w * TEXCOORD.y;
    vec4 _1132 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2(((_1118 + (cbMtdParam._m0[33u].x * _324)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_1119 + (cbMtdParam._m0[33u].y * _324)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1153 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2((((_1118 + ((cbMtdParam._m0[27u].x * 0.4000000059604644775390625) * _548)) + (cbMtdParam._m0[34u].x * _324)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1119 + ((cbMtdParam._m0[27u].y * 0.4000000059604644775390625) * _548)) + (cbMtdParam._m0[34u].y * _324)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1167 = (((0.5 - _1068) * 0.10999999940395355224609375) + _1068) + (((((((_1093.z + (-0.5)) * cbMtdParam._m0[16u].x) * _1104) + (-1.0)) + _1132.x) + _1153.x) * cbMtdParam._m0[15u].z);
    float _1168 = (((0.5 - _1069) * 0.10999999940395355224609375) + _1069) + (((((((_1093.w + (-0.5)) * cbMtdParam._m0[16u].x) * _1104) + (-1.0)) + _1132.y) + _1153.y) * cbMtdParam._m0[15u].z);
    float _1173 = ((_1060.x - _1167) * _363) + _1167;
    float _1174 = ((_1060.y - _1168) * _363) + _1168;
    float _1175 = _363 * 0.5;
    float _4381 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
    float _1176 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _1187 = cbMtdParam._m0[17u].z - (cbMtdParam._m0[17u].z * _723);
    float _1194 = cbMtdParam._m0[19u].z - (cbMtdParam._m0[19u].z * TEXCOORD_5.y);
    float _1196 = _1194 - (_1194 * _1176);
    float _1200 = (((((((0.5 - _344) * 0.60000002384185791015625) + _344) - _1028) * _1030) + _1028) + (_1196 * (_601.x + (-0.5)))) + (((_1173 + (-0.5)) + ((0.5 - _1173) * _1176)) * _1187);
    float _1202 = (((((((0.5 - _345) * 0.60000002384185791015625) + _345) - _1029) * _1030) + _1029) + (_1196 * (_601.y + (-0.5)))) + (((_1174 + (-0.5)) + ((0.5 - _1174) * _1176)) * _1187);
    float _1212 = (((_1006 * (0.5 - _1200)) + _1200) * 2.0) + (-1.0);
    float _1213 = (((_1006 * (0.5 - _1202)) + _1202) * 2.0) + (-1.0);
    float _1214 = dot(vec2(_1212, _1213), vec2(_1212, _1213));
    float _4392 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
    float _1219 = sqrt(1.0 - (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))));
    float _1222 = _984 * 6.0;
    float _4403 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
    float _1225 = cbMtdParam._m0[16u].y * (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0)));
    float _4414 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
    float _1226 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _1229 = ((1.0 - _1226) * _1000) + _1226;
    uint _1243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1244 = _1243 + 5u;
    float _1255 = (-0.0) - _307;
    float _1256 = (-0.0) - _308;
    float _1257 = (-0.0) - _309;
    float _1261 = inversesqrt(dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257)));
    float _1265 = dot(vec3(_1261 * _1255, _1261 * _1256, _1261 * _1257), vec3(cbLight._m0[floatBitsToUint(cbInstanceData._m0[_1244]).x * 14u].xyz));
    float _1275 = 0.90999996662139892578125 / exp2(log2(1.091000080108642578125 - (_1265 * 0.60000002384185791015625)) * 1.5);
    float _1288 = ((((0.959999978542327880859375 / exp2(log2((_1265 * 0.4000000059604644775390625) + 1.04100000858306884765625) * 1.5)) - _1275) * 0.5) + _1275) * 0.079577468335628509521484375;
    float _1292 = fma(_1219, _249, fma(_1213, _241 * TANGENT.x, _1212 * _228));
    float _1295 = fma(_1219, _250, fma(_1213, _241 * TANGENT.y, _1212 * _229));
    float _1298 = fma(_1219, _251, fma(_1213, _241 * TANGENT.z, _1212 * _230));
    float _1302 = inversesqrt(dot(vec3(_1292, _1295, _1298), vec3(_1292, _1295, _1298)));
    float _1303 = _1302 * _1292;
    float _1304 = _1302 * _1295;
    float _1305 = _1302 * _1298;
    float _4425 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _4436 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1307 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _4447 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _4458 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _4469 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _1322 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1362 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1371 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1362);
    float _1372 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1362);
    float _1373 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1362);
    float _1377 = inversesqrt(dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373)));
    float _1378 = _1371 * _1377;
    float _1379 = _1372 * _1377;
    float _1380 = _1373 * _1377;
    float _1385 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1386 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1388 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD_11, TEXCOORD_12));
    float _1397 = (_1388.x * 2.0) + (-1.0);
    float _1398 = (_1388.y * 2.0) + (-1.0);
    float _1399 = (_1388.z * 2.0) + (-1.0);
    float _1403 = inversesqrt(dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399)));
    float _1414 = ((TEXCOORD_12 >= 1.0) || ((TEXCOORD_12 <= 0.0) || ((TEXCOORD_11 <= 0.0) || (TEXCOORD_11 >= 1.0)))) ? 0.0 : _1388.w;
    float _1421 = (((_1397 * _1403) - _1303) * _1414) + _1303;
    float _1422 = (((_1398 * _1403) - _1304) * _1414) + _1304;
    float _1423 = (((_1399 * _1403) - _1305) * _1414) + _1305;
    float _1443 = fma(_1423, cbSceneParam._m0[5u].z, fma(_1422, cbSceneParam._m0[5u].y, _1421 * cbSceneParam._m0[5u].x));
    float _1446 = fma(_1423, cbSceneParam._m0[6u].z, fma(_1422, cbSceneParam._m0[6u].y, _1421 * cbSceneParam._m0[6u].x));
    float _1449 = fma(_1423, cbSceneParam._m0[7u].z, fma(_1422, cbSceneParam._m0[7u].y, _1421 * cbSceneParam._m0[7u].x));
    uint _1463 = (_1243 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1469 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) * cbInstanceData._m0[_1463].x;
    float _1470 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * cbInstanceData._m0[_1463].y;
    float _1471 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) * cbInstanceData._m0[_1463].z;
    float _4480 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
    float _1472 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
    float _4491 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
    float _1473 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _4502 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
    float _1474 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
    vec4 _1483 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1385, cbSceneParam._m0[86u].y * _1386));
    float _1486 = _1483.x * TEXCOORD_5.w;
    float _1487 = dot(vec3(_1421, _1422, _1423), vec3(_1378, _1379, _1380));
    float _1490 = _1487 * 2.0;
    float _1494 = (_1490 * _1421) - _1378;
    float _1495 = (_1490 * _1422) - _1379;
    float _1496 = (_1490 * _1423) - _1380;
    float _1500 = abs(dot(vec3(_1378, _1379, _1380), vec3(_1421, _1422, _1423)));
    float _4513 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
    float _1501 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
    float _1510 = sqrt(_1307);
    float _1522 = exp2((_1510 * 5.0) * log2(1.0 - (_1501 * 0.999000012874603271484375))) / (4.0 - (_1510 * 3.0));
    float _1552 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1556 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1560 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1856;
    float _1858;
    float _1859;
    float _1860;
    float _1861;
    float _1862;
    float _1863;
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1585 = fma(_1560, cbModelParam._m0[26u].z, fma(_1556, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1552));
        float _1589 = fma(_1560, cbModelParam._m0[27u].z, fma(_1556, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1552));
        float _1593 = fma(_1560, cbModelParam._m0[28u].z, fma(_1556, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1552));
        float _1615 = _1552 + _1421;
        float _1616 = _1556 + _1422;
        float _1617 = _1560 + _1423;
        float _1627 = fma(_1617, cbModelParam._m0[26u].z, fma(_1616, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1615)) - _1585;
        float _1628 = fma(_1617, cbModelParam._m0[27u].z, fma(_1616, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1615)) - _1589;
        float _1629 = fma(_1617, cbModelParam._m0[28u].z, fma(_1616, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1615)) - _1593;
        float _1633 = inversesqrt(dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629)));
        float _1645 = ((_1633 * _1627) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1585 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1646 = ((_1633 * _1628) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1589 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1647 = ((_1633 * _1629) / cbModelParam._m0[34u].z) + ((((((_1593 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1650 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1645, _1646, _1647), 0.0);
        vec4 _1657 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1645, _1646, _1647), 0.0);
        vec4 _1664 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1645, _1646, _1647), 0.0);
        vec4 _1671 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1645, _1646, _1647), 0.0);
        float _1684 = exp2((_1650.w + (-0.5)) * 20.0) * 2.0;
        float _1685 = _1684 * (_1650.x + (-0.5));
        float _1686 = _1684 * (_1650.y + (-0.5));
        float _1687 = _1684 * (_1650.z + (-0.5));
        float _1694 = exp2((_1657.w + (-0.5)) * 20.0) * 2.0;
        float _1695 = _1694 * (_1657.x + (-0.5));
        float _1696 = _1694 * (_1657.y + (-0.5));
        float _1697 = _1694 * (_1657.z + (-0.5));
        float _1704 = exp2((_1664.w + (-0.5)) * 20.0) * 2.0;
        float _1705 = _1704 * (_1664.x + (-0.5));
        float _1706 = _1704 * (_1664.y + (-0.5));
        float _1707 = _1704 * (_1664.z + (-0.5));
        float _1714 = exp2((_1671.w + (-0.5)) * 20.0) * 2.0;
        float _1715 = _1714 * (_1671.x + (-0.5));
        float _1716 = _1714 * (_1671.y + (-0.5));
        float _1717 = _1714 * (_1671.z + (-0.5));
        float _1718 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1719 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1720 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1721 = _1685 * 0.5;
        float _1722 = _1695 * 0.5;
        float _1723 = _1705 * 0.5;
        float _1724 = dot(vec3(_1721, _1722, _1723), vec3(_1721, _1722, _1723));
        float _1729 = (_1724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1724);
        float _1738 = (dot(vec3(_1421, _1422, _1423), vec3(_1729 * _1721, _1729 * _1722, _1729 * _1723)) + 1.0) * 0.5;
        float _4539 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1748 = sqrt(((_1722 * _1722) + (_1721 * _1721)) + (_1723 * _1723)) / (_1718 + 9.9999997473787516355514526367188e-06);
        float _4550 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _1750 = _1749 * 2.0;
        float _1754 = (1.0 - _1749) / (_1749 + 1.0);
        float _4561 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1755 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _1764 = ((((1.0 - _1755) * (_1750 + 2.0)) * exp2(log2(isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_1750 + 1.0))) + _1755) * _1718;
        float _1765 = _1686 * 0.5;
        float _1766 = _1696 * 0.5;
        float _1767 = _1706 * 0.5;
        float _1768 = dot(vec3(_1765, _1766, _1767), vec3(_1765, _1766, _1767));
        float _1773 = (_1768 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1768);
        float _1781 = (dot(vec3(_1421, _1422, _1423), vec3(_1773 * _1765, _1773 * _1766, _1773 * _1767)) + 1.0) * 0.5;
        float _4572 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1790 = sqrt(((_1766 * _1766) + (_1765 * _1765)) + (_1767 * _1767)) / (_1719 + 9.9999997473787516355514526367188e-06);
        float _4583 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1791 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _1792 = _1791 * 2.0;
        float _1796 = (1.0 - _1791) / (_1791 + 1.0);
        float _4594 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1797 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _1806 = ((((1.0 - _1797) * (_1792 + 2.0)) * exp2(log2(isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_1792 + 1.0))) + _1797) * _1719;
        float _1807 = _1687 * 0.5;
        float _1808 = _1697 * 0.5;
        float _1809 = _1707 * 0.5;
        float _1810 = dot(vec3(_1807, _1808, _1809), vec3(_1807, _1808, _1809));
        float _1815 = (_1810 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1810);
        float _1823 = (dot(vec3(_1421, _1422, _1423), vec3(_1815 * _1807, _1815 * _1808, _1815 * _1809)) + 1.0) * 0.5;
        float _4605 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1832 = sqrt(((_1808 * _1808) + (_1807 * _1807)) + (_1809 * _1809)) / (_1720 + 9.9999997473787516355514526367188e-06);
        float _4616 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1833 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _1834 = _1833 * 2.0;
        float _1838 = (1.0 - _1833) / (_1833 + 1.0);
        float _4627 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1839 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _1848 = ((((1.0 - _1839) * (_1834 + 2.0)) * exp2(log2(isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_1834 + 1.0))) + _1839) * _1720;
        _1856 = _1687;
        _1858 = _1686;
        _1859 = _1685;
        _1860 = _1697;
        _1861 = _1696;
        _1862 = _1695;
        _1863 = _1707;
        _1864 = _1706;
        _1865 = _1705;
        _1866 = _1720;
        _1867 = _1719;
        _1868 = _1718;
        _1869 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)));
        _1870 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)));
        _1871 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0)));
    }
    else
    {
        _1856 = _1857;
        _1858 = _1857;
        _1859 = _1857;
        _1860 = _1857;
        _1861 = _1857;
        _1862 = _1857;
        _1863 = _1857;
        _1864 = _1857;
        _1865 = _1857;
        _1866 = _1857;
        _1867 = _1857;
        _1868 = _1857;
        _1869 = 0.0;
        _1870 = 0.0;
        _1871 = 0.0;
    }
    float _2161;
    float _2162;
    float _2163;
    float _2164;
    float _2165;
    float _2166;
    float _2167;
    float _2168;
    float _2169;
    float _2170;
    float _2171;
    float _2172;
    float _2173;
    float _2174;
    float _2175;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1894 = fma(_1560, cbModelParam._m0[30u].z, fma(_1556, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1552));
        float _1898 = fma(_1560, cbModelParam._m0[31u].z, fma(_1556, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1552));
        float _1902 = fma(_1560, cbModelParam._m0[32u].z, fma(_1556, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1552));
        float _1924 = _1552 + _1421;
        float _1925 = _1556 + _1422;
        float _1926 = _1560 + _1423;
        float _1936 = fma(_1926, cbModelParam._m0[30u].z, fma(_1925, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1924)) - _1894;
        float _1937 = fma(_1926, cbModelParam._m0[31u].z, fma(_1925, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1924)) - _1898;
        float _1938 = fma(_1926, cbModelParam._m0[32u].z, fma(_1925, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1924)) - _1902;
        float _1942 = inversesqrt(dot(vec3(_1936, _1937, _1938), vec3(_1936, _1937, _1938)));
        float _1954 = ((_1942 * _1936) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1894 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1955 = ((_1942 * _1937) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1898 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1956 = ((_1942 * _1938) / cbModelParam._m0[35u].z) + ((((((_1902 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1958 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1954, _1955, _1956), 0.0);
        vec4 _1965 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1954, _1955, _1956), 0.0);
        vec4 _1972 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1954, _1955, _1956), 0.0);
        vec4 _1979 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1954, _1955, _1956), 0.0);
        float _1991 = exp2((_1958.w + (-0.5)) * 20.0) * 2.0;
        float _1992 = _1991 * (_1958.x + (-0.5));
        float _1993 = _1991 * (_1958.y + (-0.5));
        float _1994 = _1991 * (_1958.z + (-0.5));
        float _2001 = exp2((_1965.w + (-0.5)) * 20.0) * 2.0;
        float _2002 = _2001 * (_1965.x + (-0.5));
        float _2003 = _2001 * (_1965.y + (-0.5));
        float _2004 = _2001 * (_1965.z + (-0.5));
        float _2011 = exp2((_1972.w + (-0.5)) * 20.0) * 2.0;
        float _2012 = _2011 * (_1972.x + (-0.5));
        float _2013 = _2011 * (_1972.y + (-0.5));
        float _2014 = _2011 * (_1972.z + (-0.5));
        float _2021 = exp2((_1979.w + (-0.5)) * 20.0) * 2.0;
        float _2022 = _2021 * (_1979.x + (-0.5));
        float _2023 = _2021 * (_1979.y + (-0.5));
        float _2024 = _2021 * (_1979.z + (-0.5));
        float _2025 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2026 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2027 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2028 = _1992 * 0.5;
        float _2029 = _2002 * 0.5;
        float _2030 = _2012 * 0.5;
        float _2031 = dot(vec3(_2028, _2029, _2030), vec3(_2028, _2029, _2030));
        float _2036 = (_2031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2031);
        float _2044 = (dot(vec3(_1421, _1422, _1423), vec3(_2036 * _2028, _2036 * _2029, _2036 * _2030)) + 1.0) * 0.5;
        float _4668 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2053 = sqrt(((_2029 * _2029) + (_2028 * _2028)) + (_2030 * _2030)) / (_2025 + 9.9999997473787516355514526367188e-06);
        float _4679 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2054 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _2055 = _2054 * 2.0;
        float _2059 = (1.0 - _2054) / (_2054 + 1.0);
        float _4690 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2060 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
        float _2069 = ((((1.0 - _2060) * (_2055 + 2.0)) * exp2(log2(isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2055 + 1.0))) + _2060) * _2025;
        float _2070 = _1993 * 0.5;
        float _2071 = _2003 * 0.5;
        float _2072 = _2013 * 0.5;
        float _2073 = dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072));
        float _2078 = (_2073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2073);
        float _2086 = (dot(vec3(_1421, _1422, _1423), vec3(_2078 * _2070, _2078 * _2071, _2078 * _2072)) + 1.0) * 0.5;
        float _4701 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2095 = sqrt(((_2071 * _2071) + (_2070 * _2070)) + (_2072 * _2072)) / (_2026 + 9.9999997473787516355514526367188e-06);
        float _4712 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2096 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _2097 = _2096 * 2.0;
        float _2101 = (1.0 - _2096) / (_2096 + 1.0);
        float _4723 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2102 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2111 = ((((1.0 - _2102) * (_2097 + 2.0)) * exp2(log2(isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2097 + 1.0))) + _2102) * _2026;
        float _2112 = _1994 * 0.5;
        float _2113 = _2004 * 0.5;
        float _2114 = _2014 * 0.5;
        float _2115 = dot(vec3(_2112, _2113, _2114), vec3(_2112, _2113, _2114));
        float _2120 = (_2115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2115);
        float _2128 = (dot(vec3(_1421, _1422, _1423), vec3(_2120 * _2112, _2120 * _2113, _2120 * _2114)) + 1.0) * 0.5;
        float _4734 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2137 = sqrt(((_2113 * _2113) + (_2112 * _2112)) + (_2114 * _2114)) / (_2027 + 9.9999997473787516355514526367188e-06);
        float _4745 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2138 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
        float _2139 = _2138 * 2.0;
        float _2143 = (1.0 - _2138) / (_2138 + 1.0);
        float _4756 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2144 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
        float _2153 = ((((1.0 - _2144) * (_2139 + 2.0)) * exp2(log2(isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (_2139 + 1.0))) + _2144) * _2027;
        _2161 = _1994;
        _2162 = _1993;
        _2163 = _1992;
        _2164 = _2004;
        _2165 = _2003;
        _2166 = _2002;
        _2167 = _2014;
        _2168 = _2013;
        _2169 = _2012;
        _2170 = _2027;
        _2171 = _2026;
        _2172 = _2025;
        _2173 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0)));
        _2174 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0)));
        _2175 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0)));
    }
    else
    {
        _2161 = _1857;
        _2162 = _1857;
        _2163 = _1857;
        _2164 = _1857;
        _2165 = _1857;
        _2166 = _1857;
        _2167 = _1857;
        _2168 = _1857;
        _2169 = _1857;
        _2170 = _1857;
        _2171 = _1857;
        _2172 = _1857;
        _2173 = 0.0;
        _2174 = 0.0;
        _2175 = 0.0;
    }
    float _2185 = (cbModelParam._m0[1u].x * (_2173 - _1869)) + _1869;
    float _2186 = (cbModelParam._m0[1u].x * (_2174 - _1870)) + _1870;
    float _2187 = (cbModelParam._m0[1u].x * (_2175 - _1871)) + _1871;
    float _2208 = fma(_2187, cbSceneParam._m0[89u].z, fma(_2186, cbSceneParam._m0[89u].y, _2185 * cbSceneParam._m0[89u].x));
    float _2211 = fma(_2187, cbSceneParam._m0[90u].z, fma(_2186, cbSceneParam._m0[90u].y, _2185 * cbSceneParam._m0[90u].x));
    float _2214 = fma(_2187, cbSceneParam._m0[91u].z, fma(_2186, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2185));
    float _2227 = _1494 * 0.5;
    float _2228 = _1495 * 0.5;
    float _2229 = _1496 * 0.5;
    float _2230 = dot(vec4(_2227, _2228, _2229, 1.0), vec4(_2163, _2166, _2169, _2172));
    float _2233 = dot(vec4(_2227, _2228, _2229, 1.0), vec4(_2162, _2165, _2168, _2171));
    float _2236 = dot(vec4(_2227, _2228, _2229, 1.0), vec4(_2161, _2164, _2167, _2170));
    float _2270;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2243 = dot(vec4(_2227, _2228, _2229, 1.0), vec4(_1856, _1860, _1863, _1866));
        float _2247 = dot(vec4(_2227, _2228, _2229, 1.0), vec4(_1858, _1861, _1864, _1867));
        float _2251 = dot(vec4(_2227, _2228, _2229, 1.0), vec4(_1859, _1862, _1865, _1868));
        float _2258 = dot(vec4(cbModelParam._m0[39u]), vec4(_2227, _2228, _2229, 1.0));
        _2270 = dot(vec3(isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0)), isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0)), isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2258) ? 0.0 : (isnan(0.0) ? _2258 : max(0.0, _2258))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2270 = 1.0;
    }
    float _2281;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2272 = dot(vec4(cbModelParam._m0[40u]), vec4(_2227, _2228, _2229, 1.0));
        _2281 = dot(vec3(isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0)), isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0)), isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2272) ? 0.0 : (isnan(0.0) ? _2272 : max(0.0, _2272))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2281 = 1.0;
    }
    float _2285 = (_2281 * cbModelParam._m0[1u].x) + (_2270 * (1.0 - cbModelParam._m0[1u].x));
    float _2295 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1307);
    float _2296 = isnan(_2295) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2295 : min(cbModelParam._m0[25u].z, _2295));
    float _2376;
    float _2378;
    float _2380;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2343 = fma(_1560, cbModelParam._m0[13u].z, fma(_1556, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1552)) + cbModelParam._m0[13u].w;
        float _2347 = fma(_1560, cbModelParam._m0[14u].z, fma(_1556, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1552)) + cbModelParam._m0[14u].w;
        float _2351 = fma(_1560, cbModelParam._m0[15u].z, fma(_1556, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1552)) + cbModelParam._m0[15u].w;
        float _2354 = fma(_1496, cbModelParam._m0[13u].z, fma(_1495, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1494));
        float _2357 = fma(_1496, cbModelParam._m0[14u].z, fma(_1495, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1494));
        float _2360 = fma(_1496, cbModelParam._m0[15u].z, fma(_1495, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1494));
        float _2388;
        if (_2354 > 0.0)
        {
            _2388 = abs((1.0 - _2343) / _2354);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_2354 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_2343 + 1.0) / _2354);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _2388 = frontier_phi_16_14_ladder;
        }
        float _2666;
        if (_2357 > 0.0)
        {
            _2666 = abs((1.0 - _2347) / _2357);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2357 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2347 + 1.0) / _2357);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2666 = frontier_phi_25_21_ladder;
        }
        float _3075;
        if (_2360 > 0.0)
        {
            _3075 = abs((1.0 - _2351) / _2360);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_2360 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_2351 + 1.0) / _2360);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _3075 = frontier_phi_39_32_ladder;
        }
        float _3077 = isnan(_2666) ? _2388 : (isnan(_2388) ? _2666 : min(_2388, _2666));
        float _3078 = isnan(_3075) ? _3077 : (isnan(_3077) ? _3075 : min(_3077, _3075));
        float _3082 = (_3078 * _2354) + _2343;
        float _3083 = (_3078 * _2357) + _2347;
        float _3084 = (_3078 * _2360) + _2351;
        float _3085 = _3078 * 9.9999997473787516355514526367188e-05;
        float _3087 = (-1.0) - _3085;
        float _3089 = _3085 + 1.0;
        float frontier_phi_15_39_ladder;
        float frontier_phi_15_39_ladder_1;
        float frontier_phi_15_39_ladder_2;
        if ((_3084 > _3089) || ((_3084 < _3087) || ((_3083 > _3089) || ((_3083 < _3087) || ((_3082 < _3087) || (_3082 > _3089))))))
        {
            frontier_phi_15_39_ladder = 0.0;
            frontier_phi_15_39_ladder_1 = 0.0;
            frontier_phi_15_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3293 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_3084, cbModelParam._m0[9u].z, fma(_3083, cbModelParam._m0[9u].y, _3082 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_3084, cbModelParam._m0[10u].z, fma(_3083, cbModelParam._m0[10u].y, _3082 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_3084, cbModelParam._m0[11u].z, fma(_3083, cbModelParam._m0[11u].y, _3082 * cbModelParam._m0[11u].x))), _2296);
            frontier_phi_15_39_ladder = _3293.z * cbModelParam._m0[1u].y;
            frontier_phi_15_39_ladder_1 = _3293.y * cbModelParam._m0[1u].y;
            frontier_phi_15_39_ladder_2 = _3293.x * cbModelParam._m0[1u].y;
        }
        _2376 = frontier_phi_15_39_ladder_2;
        _2378 = frontier_phi_15_39_ladder_1;
        _2380 = frontier_phi_15_39_ladder;
    }
    else
    {
        vec4 _2364 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1494, _1495, _1496), _2296);
        _2376 = _2364.x * cbModelParam._m0[1u].y;
        _2378 = _2364.y * cbModelParam._m0[1u].y;
        _2380 = _2364.z * cbModelParam._m0[1u].y;
    }
    float _2384 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1307);
    float _2385 = isnan(_2384) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2384 : min(cbModelParam._m0[25u].w, _2384));
    float _2474;
    float _2476;
    float _2478;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2438 = fma(_1560, cbModelParam._m0[21u].z, fma(_1556, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1552)) + cbModelParam._m0[21u].w;
        float _2442 = fma(_1560, cbModelParam._m0[22u].z, fma(_1556, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1552)) + cbModelParam._m0[22u].w;
        float _2446 = fma(_1560, cbModelParam._m0[23u].z, fma(_1556, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1552)) + cbModelParam._m0[23u].w;
        float _2449 = fma(_1496, cbModelParam._m0[21u].z, fma(_1495, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1494));
        float _2452 = fma(_1496, cbModelParam._m0[22u].z, fma(_1495, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1494));
        float _2455 = fma(_1496, cbModelParam._m0[23u].z, fma(_1495, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1494));
        float _2671;
        if (_2449 > 0.0)
        {
            _2671 = abs((1.0 - _2438) / _2449);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_2449 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_2438 + 1.0) / _2449);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2671 = frontier_phi_27_23_ladder;
        }
        float _3102;
        if (_2452 > 0.0)
        {
            _3102 = abs((1.0 - _2442) / _2452);
        }
        else
        {
            float frontier_phi_41_34_ladder;
            if (_2452 < 0.0)
            {
                frontier_phi_41_34_ladder = abs((_2442 + 1.0) / _2452);
            }
            else
            {
                frontier_phi_41_34_ladder = 5000.0;
            }
            _3102 = frontier_phi_41_34_ladder;
        }
        float _3354;
        if (_2455 > 0.0)
        {
            _3354 = abs((1.0 - _2446) / _2455);
        }
        else
        {
            float frontier_phi_56_50_ladder;
            if (_2455 < 0.0)
            {
                frontier_phi_56_50_ladder = abs((_2446 + 1.0) / _2455);
            }
            else
            {
                frontier_phi_56_50_ladder = 5000.0;
            }
            _3354 = frontier_phi_56_50_ladder;
        }
        float _3356 = isnan(_3102) ? _2671 : (isnan(_2671) ? _3102 : min(_2671, _3102));
        float _3357 = isnan(_3354) ? _3356 : (isnan(_3356) ? _3354 : min(_3356, _3354));
        float _3361 = (_3357 * _2449) + _2438;
        float _3362 = (_3357 * _2452) + _2442;
        float _3363 = (_3357 * _2455) + _2446;
        float _3364 = _3357 * 9.9999997473787516355514526367188e-05;
        float _3365 = (-1.0) - _3364;
        float _3367 = _3364 + 1.0;
        float frontier_phi_24_56_ladder;
        float frontier_phi_24_56_ladder_1;
        float frontier_phi_24_56_ladder_2;
        if ((_3363 > _3367) || ((_3363 < _3365) || ((_3362 > _3367) || ((_3362 < _3365) || ((_3361 < _3365) || (_3361 > _3367))))))
        {
            frontier_phi_24_56_ladder = 0.0;
            frontier_phi_24_56_ladder_1 = 0.0;
            frontier_phi_24_56_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3634 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3363, cbModelParam._m0[17u].z, fma(_3362, cbModelParam._m0[17u].y, _3361 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3363, cbModelParam._m0[18u].z, fma(_3362, cbModelParam._m0[18u].y, _3361 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3363, cbModelParam._m0[19u].z, fma(_3362, cbModelParam._m0[19u].y, _3361 * cbModelParam._m0[19u].x))), _2385);
            frontier_phi_24_56_ladder = _3634.y * cbModelParam._m0[1u].z;
            frontier_phi_24_56_ladder_1 = _3634.z * cbModelParam._m0[1u].z;
            frontier_phi_24_56_ladder_2 = _3634.x * cbModelParam._m0[1u].z;
        }
        _2474 = frontier_phi_24_56_ladder_2;
        _2476 = frontier_phi_24_56_ladder;
        _2478 = frontier_phi_24_56_ladder_1;
    }
    else
    {
        vec4 _2458 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1494, _1495, _1496), _2385);
        _2474 = _2458.x * cbModelParam._m0[1u].z;
        _2476 = _2458.y * cbModelParam._m0[1u].z;
        _2478 = _2458.z * cbModelParam._m0[1u].z;
    }
    float _2490 = ((((1.0 - _1522) * ((_1510 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1522 * _1510)) * _1486;
    float _2491 = _2490 * ((cbModelParam._m0[1u].w * (_2474 - _2376)) + _2376);
    float _2492 = _2490 * ((cbModelParam._m0[1u].w * (_2476 - _2378)) + _2378);
    float _2493 = _2490 * ((cbModelParam._m0[1u].w * (_2478 - _2380)) + _2380);
    float _2496 = fma(_2493, cbSceneParam._m0[89u].z, fma(_2492, cbSceneParam._m0[89u].y, _2491 * cbSceneParam._m0[89u].x));
    float _2499 = fma(_2493, cbSceneParam._m0[90u].z, fma(_2492, cbSceneParam._m0[90u].y, _2491 * cbSceneParam._m0[90u].x));
    float _2502 = fma(_2493, cbSceneParam._m0[91u].z, fma(_2492, cbSceneParam._m0[91u].y, _2491 * cbSceneParam._m0[91u].x));
    float _2521 = (cbSceneParam._m0[88u].y * (1.0 - _1307)) + cbSceneParam._m0[88u].z;
    float _4882 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    vec4 _2525 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(_1385, _1386), (isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0))) * 5.0);
    float _2541 = 1.0 - _2525.w;
    uvec4 _2550 = floatBitsToUint(cbInstanceData._m0[_1244]);
    uint _2552 = _2550.x * 14u;
    float _2559 = (cbLight._m0[_2552 + 13u].x * (_1486 + (-1.0))) + 1.0;
    uint _2560 = _2552 + 4u;
    float _2566 = isnan(1.0) ? _2559 : (isnan(_2559) ? 1.0 : min(_2559, 1.0));
    float _2575 = dot(vec3(cbLight._m0[_2552].xyz), vec3(_1421, _1422, _1423));
    float _4898 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2579 = (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * 0.3183098733425140380859375;
    float _2581 = (cbLight._m0[_2560].x * _2566) * _2579;
    float _2582 = (_2566 * cbLight._m0[_2560].y) * _2579;
    float _2583 = (_2566 * cbLight._m0[_2560].z) * _2579;
    uint _2585 = _2552 + 8u;
    float _2598 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2552].w)) * _1307) * 0.949999988079071044921875);
    float _2599 = _2598 * _2598;
    float _2600 = cbLight._m0[_2552].x + _1378;
    float _2601 = cbLight._m0[_2552].y + _1379;
    float _2602 = cbLight._m0[_2552].z + _1380;
    float _2606 = inversesqrt(dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602)));
    float _2607 = _2606 * _2600;
    float _2608 = _2606 * _2601;
    float _2609 = _2606 * _2602;
    float _2610 = dot(vec3(_1421, _1422, _1423), vec3(cbLight._m0[_2552].xyz));
    float _4909 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _2613 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
    float _4920 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
    float _2614 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
    float _2615 = dot(vec3(_1421, _1422, _1423), vec3(_2607, _2608, _2609));
    float _4931 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2618 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
    float _2619 = dot(vec3(cbLight._m0[_2552].xyz), vec3(_2607, _2608, _2609));
    float _4942 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
    float _2623 = _2599 * _2599;
    float _2627 = ((_2618 * _2618) * (_2623 + (-1.0))) + 1.0;
    float _2637 = (exp2(log2(1.0 - (isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2638 = 1.0 - _2599;
    float _2649 = (0.5 / (((_2614 * ((_2613 * _2638) + _2599)) + 9.9999999392252902907785028219223e-09) + (((_2614 * _2638) + _2599) * _2613))) * _2613;
    float _4953 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
    float _2651 = (isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0))) * (_2623 / ((_2627 * _2627) * 3.141590118408203125));
    float _2654 = ((_2637 * cbLight._m0[_2585].x) * _2651) * _2566;
    float _2657 = ((_2637 * cbLight._m0[_2585].y) * _2651) * _2566;
    float _2660 = ((_2637 * cbLight._m0[_2585].z) * _2651) * _2566;
    float _2774;
    float _2776;
    float _2778;
    float _2780;
    float _2782;
    float _2784;
    if (_2550.y == 0u)
    {
        float _2715 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2716 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2715;
        float _2717 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2715;
        float _2718 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2715;
        uvec4 _2730 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2731 = _2730.x;
        uint _2742 = uint((float(_2730.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1386) / _2731))) + floor(float(uint(cbSceneParam._m0[85u].x * _1385) / _2731)));
        float _2752 = (log2(_2718 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2753 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        uint _2756 = uint(isnan(14.0) ? _2753 : (isnan(_2753) ? 14.0 : min(_2753, 14.0)));
        uvec4 _2761 = texelFetch(g_lightClusterGridBuffer, int(((_2756 << 2u) + (_2742 << 6u)) >> 2u));
        uint _2762 = _2761.x;
        uint _2763 = _2730.z;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        if (((((1u << ((_2763 >> 4u) & 15u)) + 4294967295u) & _2762) == 0u) || ((_2763 & 240u) == 0u))
        {
            _2901 = 0.0;
            _2903 = 0.0;
            _2905 = 0.0;
            _2907 = 0.0;
            _2909 = 0.0;
            _2911 = 0.0;
        }
        else
        {
            float _2902;
            float _2904;
            float _2906;
            float _2908;
            float _2910;
            float _2912;
            float _3139 = 0.0;
            float _3140 = 0.0;
            float _3141 = 0.0;
            float _3142 = 0.0;
            float _3143 = 0.0;
            float _3144 = 0.0;
            uint _3145 = 0u;
            uint _3154;
            bool _3155;
            for (;;)
            {
                _3154 = texelFetch(g_lightClassification, int((((_2756 << 5u) + (_2742 << 9u)) + (_3145 << 2u)) >> 2u)).x;
                _3155 = _3154 == 0u;
                float frontier_phi_52_pred;
                float frontier_phi_52_pred_1;
                float frontier_phi_52_pred_2;
                float frontier_phi_52_pred_3;
                float frontier_phi_52_pred_4;
                float frontier_phi_52_pred_5;
                if (_3155)
                {
                    frontier_phi_52_pred = _3141;
                    frontier_phi_52_pred_1 = _3144;
                    frontier_phi_52_pred_2 = _3143;
                    frontier_phi_52_pred_3 = _3142;
                    frontier_phi_52_pred_4 = _3140;
                    frontier_phi_52_pred_5 = _3139;
                }
                else
                {
                    float _3397;
                    float _3398;
                    float _3399;
                    float _3400;
                    float _3401;
                    float _3402;
                    uint _3403;
                    _3397 = _3139;
                    _3398 = _3140;
                    _3399 = _3141;
                    _3400 = _3142;
                    _3401 = _3143;
                    _3402 = _3144;
                    _3403 = _3154;
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    for (;;)
                    {
                        uint _3407 = uint(findLSB(_3403)) + (_3145 << 5u);
                        uint _3404 = (_3403 + 4294967295u) & _3403;
                        uint _3409 = _3407 * 48u;
                        vec4 _3423 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3409)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 3u)).x));
                        uint _3429 = (_3407 * 48u) + 4u;
                        vec4 _3442 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3429)).x, texelFetch(g_PointLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3429 + 3u)).x));
                        uint _3448 = (_3407 * 48u) + 8u;
                        vec3 _3459 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3448)).x, texelFetch(g_PointLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3448 + 2u)).x));
                        float _3463 = _3423.x - _2716;
                        float _3464 = _3423.y - _2717;
                        float _3465 = _3423.z - _2718;
                        float _3466 = dot(vec3(_3463, _3464, _3465), vec3(_3463, _3464, _3465));
                        float _3469 = inversesqrt(_3466);
                        float _3470 = _3469 * _3463;
                        float _3471 = _3469 * _3464;
                        float _3472 = _3469 * _3465;
                        float _3473 = dot(vec3(_1443, _1446, _1449), vec3(_3470, _3471, _3472));
                        float _3478 = 1.0 - (_3466 * _3423.w);
                        float _4974 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                        float _3479 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                        float _3480 = sqrt(_3466) * _3442.w;
                        float _3483 = 1.39999997615814208984375 / (_3480 + 1.39999997615814208984375);
                        float _3484 = _3483 * _3483;
                        float _3487 = ((1.0 - _3484) * _3473) + _3484;
                        float _3490 = _3480 * _3480;
                        float _3494 = ((isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0))) * _3479) / ((_3490 * 0.699999988079071044921875) + 1.0);
                        float _3498 = (-0.0) - _2716;
                        float _3499 = (-0.0) - _2717;
                        float _3500 = (-0.0) - _2718;
                        float _3504 = inversesqrt(dot(vec3(_3498, _3499, _3500), vec3(_3498, _3499, _3500)));
                        float _3505 = _3504 * _3498;
                        float _3506 = _3504 * _3499;
                        float _3507 = _3504 * _3500;
                        float _3515 = exp2(log2(1.0 / ((_3490 * 3.5) + 5.0)) * 0.25);
                        float _3516 = 1.0 - _1510;
                        float _3523 = sqrt(1.0 - ((1.0 - (_3516 * _3516)) * (1.0 - (_3515 * _3515))));
                        float _3524 = _3523 * _3523;
                        float _3525 = _3524 * _3524;
                        float _3526 = _3505 + _3470;
                        float _3527 = _3506 + _3471;
                        float _3528 = _3507 + _3472;
                        float _3532 = inversesqrt(dot(vec3(_3526, _3527, _3528), vec3(_3526, _3527, _3528)));
                        float _3536 = dot(vec3(_1443, _1446, _1449), vec3(_3505, _3506, _3507));
                        float _4990 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                        float _3539 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
                        float _3540 = dot(vec3(_1443, _1446, _1449), vec3(_3532 * _3526, _3532 * _3527, _3532 * _3528));
                        float _5001 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                        float _3543 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                        float _3547 = ((_3543 * _3543) * (_3525 + (-1.0))) + 1.0;
                        float _3548 = _3483 * _3524;
                        float _3549 = _3548 * _3548;
                        float _3552 = ((1.0 - _3549) * _3473) + _3549;
                        float _5012 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                        float _3553 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
                        float _3554 = 1.0 - _3524;
                        float _3564 = (0.5 / (((_3553 * ((_3539 * _3554) + _3524)) + 9.9999999392252902907785028219223e-09) + (((_3553 * _3554) + _3524) * _3539))) * _3553;
                        float _5023 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                        float _3575 = (((_3525 * 3.1415927410125732421875) * (isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0)))) / ((_3547 * _3547) * ((_3490 * 2.1991131305694580078125) + 3.141590118408203125))) * _3479;
                        _3305 = (_3494 * _3442.x) + _3400;
                        _3306 = (_3494 * _3442.y) + _3401;
                        _3307 = (_3494 * _3442.z) + _3402;
                        _3302 = (_3575 * _3459.x) + _3397;
                        _3303 = (_3575 * _3459.y) + _3398;
                        _3304 = (_3575 * _3459.z) + _3399;
                        if (_3404 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3397 = _3302;
                            _3398 = _3303;
                            _3399 = _3304;
                            _3400 = _3305;
                            _3401 = _3306;
                            _3402 = _3307;
                            _3403 = _3404;
                        }
                    }
                    frontier_phi_52_pred = _3304;
                    frontier_phi_52_pred_1 = _3307;
                    frontier_phi_52_pred_2 = _3306;
                    frontier_phi_52_pred_3 = _3305;
                    frontier_phi_52_pred_4 = _3303;
                    frontier_phi_52_pred_5 = _3302;
                }
                _2906 = frontier_phi_52_pred;
                _2912 = frontier_phi_52_pred_1;
                _2910 = frontier_phi_52_pred_2;
                _2908 = frontier_phi_52_pred_3;
                _2904 = frontier_phi_52_pred_4;
                _2902 = frontier_phi_52_pred_5;
                uint _3146 = _3145 + 1u;
                if (_3146 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3139 = _2902;
                    _3140 = _2904;
                    _3141 = _2906;
                    _3142 = _2908;
                    _3143 = _2910;
                    _3144 = _2912;
                    _3145 = _3146;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2901 = _2902;
            _2903 = _2904;
            _2905 = _2906;
            _2907 = _2908;
            _2909 = _2910;
            _2911 = _2912;
        }
        uvec4 _2915 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2916 = _2915.z;
        uint _2918 = (_2916 >> 8u) & 15u;
        float _3107;
        float _3109;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        if (((4294967295u << _2918) & _2762) == 0u)
        {
            _3107 = _2901;
            _3109 = _2903;
            _3111 = _2905;
            _3113 = _2907;
            _3115 = _2909;
            _3117 = _2911;
        }
        else
        {
            float _3132 = inversesqrt(dot(vec3(_2716, _2717, _2718), vec3(_2716, _2717, _2718)));
            float _3133 = _3132 * _2716;
            float _3134 = _3132 * _2717;
            float _3135 = _3132 * _2718;
            float frontier_phi_43_44_ladder;
            float frontier_phi_43_44_ladder_1;
            float frontier_phi_43_44_ladder_2;
            float frontier_phi_43_44_ladder_3;
            float frontier_phi_43_44_ladder_4;
            float frontier_phi_43_44_ladder_5;
            if (_2918 < ((_2916 >> 12u) & 15u))
            {
                float _3108;
                float _3110;
                float _3112;
                float _3114;
                float _3116;
                float _3118;
                float _3380 = _2901;
                float _3381 = _2903;
                float _3382 = _2905;
                float _3383 = _2907;
                float _3384 = _2909;
                float _3385 = _2911;
                uint _3386 = _2918;
                uint _3395;
                bool _3396;
                for (;;)
                {
                    _3395 = texelFetch(g_lightClassification, int((((_2756 << 5u) + (_2742 << 9u)) + (_3386 << 2u)) >> 2u)).x;
                    _3396 = _3395 == 0u;
                    float frontier_phi_63_pred;
                    float frontier_phi_63_pred_1;
                    float frontier_phi_63_pred_2;
                    float frontier_phi_63_pred_3;
                    float frontier_phi_63_pred_4;
                    float frontier_phi_63_pred_5;
                    if (_3396)
                    {
                        frontier_phi_63_pred = _3385;
                        frontier_phi_63_pred_1 = _3384;
                        frontier_phi_63_pred_2 = _3383;
                        frontier_phi_63_pred_3 = _3382;
                        frontier_phi_63_pred_4 = _3381;
                        frontier_phi_63_pred_5 = _3380;
                    }
                    else
                    {
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3932;
                        float _3933;
                        float _3934;
                        float _3935;
                        float _3936;
                        float _3937;
                        float _3652 = _3380;
                        float _3653 = _3381;
                        float _3654 = _3382;
                        float _3655 = _3383;
                        float _3656 = _3384;
                        float _3657 = _3385;
                        uint _3658 = _3395;
                        uint _3659;
                        vec4 _3684;
                        float _3685;
                        vec4 _3700;
                        vec3 _3712;
                        vec4 _3727;
                        vec4 _3742;
                        float _3788;
                        bool _3789;
                        for (;;)
                        {
                            uint _3669 = ((_3386 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3658));
                            _3659 = (_3658 + 4294967295u) & _3658;
                            uint _3671 = _3669 * 40u;
                            _3684 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3671)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 3u)).x));
                            _3685 = _3684.w;
                            uint _3687 = (_3669 * 40u) + 4u;
                            _3700 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 3u)).x));
                            uint _3702 = (_3669 * 40u) + 8u;
                            _3712 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3702)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 2u)).x));
                            uint _3714 = (_3669 * 40u) + 16u;
                            _3727 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3714)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 3u)).x));
                            uint _3729 = (_3669 * 40u) + 20u;
                            _3742 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3729)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 3u)).x));
                            uint _3744 = (_3669 * 40u) + 24u;
                            vec4 _3757 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3744)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 3u)).x));
                            uint _3763 = (_3669 * 40u) + 28u;
                            vec4 _3776 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3763)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3763 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3763 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3763 + 3u)).x));
                            _3788 = fma(_2718, _3776.z, fma(_2717, _3776.y, _3776.x * _2716)) + _3776.w;
                            _3789 = !((fma(_2718, _3757.z, fma(_2717, _3757.y, _3757.x * _2716)) + _3757.w) <= 0.0);
                            float frontier_phi_69_pred;
                            float frontier_phi_69_pred_1;
                            float frontier_phi_69_pred_2;
                            float frontier_phi_69_pred_3;
                            float frontier_phi_69_pred_4;
                            float frontier_phi_69_pred_5;
                            if (_3789)
                            {
                                float _3816 = _3684.x - _2716;
                                float _3817 = _3684.y - _2717;
                                float _3818 = _3684.z - _2718;
                                float _3819 = dot(vec3(_3816, _3817, _3818), vec3(_3816, _3817, _3818));
                                float _3822 = inversesqrt(_3819);
                                float _3823 = _3822 * _3816;
                                float _3824 = _3822 * _3817;
                                float _3825 = _3822 * _3818;
                                float _3829 = 1.0 - (_3819 / (_3685 * _3685));
                                float _5034 = isnan(0.0) ? _3829 : (isnan(_3829) ? 0.0 : max(_3829, 0.0));
                                float _3830 = isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0));
                                float _3834 = sqrt(_3819) * _3700.w;
                                float _3836 = 1.39999997615814208984375 / (_3834 + 1.39999997615814208984375);
                                float _3837 = _3836 * _3836;
                                float _3840 = ((1.0 - _3837) * dot(vec3(_3823, _3824, _3825), vec3(_1443, _1446, _1449))) + _3837;
                                float _3843 = _3834 * _3834;
                                float _3847 = (fma(_2718, _3727.z, fma(_2717, _3727.y, _3727.x * _2716)) + _3727.w) / _3788;
                                float _3848 = (fma(_2718, _3742.z, fma(_2717, _3742.y, _3742.x * _2716)) + _3742.w) / _3788;
                                float _3852 = 1.0 - dot(vec2(_3847, _3848), vec2(_3847, _3848));
                                float _5050 = isnan(0.0) ? _3852 : (isnan(_3852) ? 0.0 : max(_3852, 0.0));
                                float _3853 = isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0));
                                float _3854 = _3853 * (((isnan(0.0) ? _3840 : (isnan(_3840) ? 0.0 : max(_3840, 0.0))) * _3830) / ((_3843 * 0.699999988079071044921875) + 1.0));
                                float _3866 = exp2(log2(1.0 / ((_3843 * 3.5) + 5.0)) * 0.25);
                                float _3867 = 1.0 - _1510;
                                float _3874 = sqrt(1.0 - ((1.0 - (_3867 * _3867)) * (1.0 - (_3866 * _3866))));
                                float _3875 = _3874 * _3874;
                                float _3876 = _3875 * _3875;
                                float _3877 = _3823 - _3133;
                                float _3878 = _3824 - _3134;
                                float _3879 = _3825 - _3135;
                                float _3883 = inversesqrt(dot(vec3(_3877, _3878, _3879), vec3(_3877, _3878, _3879)));
                                float _3887 = dot(vec3(_1443, _1446, _1449), vec3((-0.0) - _3133, (-0.0) - _3134, (-0.0) - _3135));
                                float _5061 = isnan(0.0) ? _3887 : (isnan(_3887) ? 0.0 : max(_3887, 0.0));
                                float _3890 = isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0));
                                float _3891 = dot(vec3(_1443, _1446, _1449), vec3(_3883 * _3877, _3883 * _3878, _3883 * _3879));
                                float _5072 = isnan(0.0) ? _3891 : (isnan(_3891) ? 0.0 : max(_3891, 0.0));
                                float _3894 = isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0));
                                float _3898 = ((_3894 * _3894) * (_3876 + (-1.0))) + 1.0;
                                float _3899 = _3836 * _3875;
                                float _3900 = _3899 * _3899;
                                float _3906 = ((1.0 - _3900) * dot(vec3(_1443, _1446, _1449), vec3(_3823, _3824, _3825))) + _3900;
                                float _5083 = isnan(0.0) ? _3906 : (isnan(_3906) ? 0.0 : max(_3906, 0.0));
                                float _3907 = isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0));
                                float _3908 = 1.0 - _3875;
                                float _3918 = (0.5 / (((_3907 * ((_3890 * _3908) + _3875)) + 9.9999999392252902907785028219223e-09) + (((_3907 * _3908) + _3875) * _3890))) * _3907;
                                float _5094 = isnan(0.0) ? _3918 : (isnan(_3918) ? 0.0 : max(_3918, 0.0));
                                float _3928 = (_3853 * _3830) * (((_3876 * 3.1415927410125732421875) * (isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0)))) / ((_3898 * _3898) * ((_3843 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_69_pred = _3928 * _3712.z;
                                frontier_phi_69_pred_1 = _3854 * _3700.z;
                                frontier_phi_69_pred_2 = _3854 * _3700.y;
                                frontier_phi_69_pred_3 = _3854 * _3700.x;
                                frontier_phi_69_pred_4 = _3928 * _3712.y;
                                frontier_phi_69_pred_5 = _3928 * _3712.x;
                            }
                            else
                            {
                                frontier_phi_69_pred = 0.0;
                                frontier_phi_69_pred_1 = 0.0;
                                frontier_phi_69_pred_2 = 0.0;
                                frontier_phi_69_pred_3 = 0.0;
                                frontier_phi_69_pred_4 = 0.0;
                                frontier_phi_69_pred_5 = 0.0;
                            }
                            _3934 = frontier_phi_69_pred;
                            _3937 = frontier_phi_69_pred_1;
                            _3936 = frontier_phi_69_pred_2;
                            _3935 = frontier_phi_69_pred_3;
                            _3933 = frontier_phi_69_pred_4;
                            _3932 = frontier_phi_69_pred_5;
                            _3642 = _3935 + _3655;
                            _3643 = _3936 + _3656;
                            _3644 = _3937 + _3657;
                            _3639 = _3932 + _3652;
                            _3640 = _3933 + _3653;
                            _3641 = _3934 + _3654;
                            if (_3659 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3652 = _3639;
                                _3653 = _3640;
                                _3654 = _3641;
                                _3655 = _3642;
                                _3656 = _3643;
                                _3657 = _3644;
                                _3658 = _3659;
                                continue;
                            }
                        }
                        frontier_phi_63_pred = _3644;
                        frontier_phi_63_pred_1 = _3643;
                        frontier_phi_63_pred_2 = _3642;
                        frontier_phi_63_pred_3 = _3641;
                        frontier_phi_63_pred_4 = _3640;
                        frontier_phi_63_pred_5 = _3639;
                    }
                    _3118 = frontier_phi_63_pred;
                    _3116 = frontier_phi_63_pred_1;
                    _3114 = frontier_phi_63_pred_2;
                    _3112 = frontier_phi_63_pred_3;
                    _3110 = frontier_phi_63_pred_4;
                    _3108 = frontier_phi_63_pred_5;
                    uint _3387 = _3386 + 1u;
                    if (_3387 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3380 = _3108;
                        _3381 = _3110;
                        _3382 = _3112;
                        _3383 = _3114;
                        _3384 = _3116;
                        _3385 = _3118;
                        _3386 = _3387;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_43_44_ladder = _3118;
                frontier_phi_43_44_ladder_1 = _3108;
                frontier_phi_43_44_ladder_2 = _3116;
                frontier_phi_43_44_ladder_3 = _3114;
                frontier_phi_43_44_ladder_4 = _3112;
                frontier_phi_43_44_ladder_5 = _3110;
            }
            else
            {
                frontier_phi_43_44_ladder = _2911;
                frontier_phi_43_44_ladder_1 = _2901;
                frontier_phi_43_44_ladder_2 = _2909;
                frontier_phi_43_44_ladder_3 = _2907;
                frontier_phi_43_44_ladder_4 = _2905;
                frontier_phi_43_44_ladder_5 = _2903;
            }
            _3107 = frontier_phi_43_44_ladder_1;
            _3109 = frontier_phi_43_44_ladder_5;
            _3111 = frontier_phi_43_44_ladder_4;
            _3113 = frontier_phi_43_44_ladder_3;
            _3115 = frontier_phi_43_44_ladder_2;
            _3117 = frontier_phi_43_44_ladder;
        }
        float _3122 = isnan(1.0) ? _1486 : (isnan(_1486) ? 1.0 : min(_1486, 1.0));
        _2774 = (_3122 * _3113) + _2581;
        _2776 = (_3122 * _3115) + _2582;
        _2778 = (_3122 * _3117) + _2583;
        _2780 = ((_3107 * 0.039999999105930328369140625) * _3122) + _2654;
        _2782 = ((_3109 * 0.039999999105930328369140625) * _3122) + _2657;
        _2784 = ((_3111 * 0.039999999105930328369140625) * _3122) + _2660;
    }
    else
    {
        _2774 = _2581;
        _2776 = _2582;
        _2778 = _2583;
        _2780 = _2654;
        _2782 = _2657;
        _2784 = _2660;
    }
    float _2798 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2799 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2800 = cbSceneParam._m0[86u].x * ((_1385 / cbSceneParam._m0[86u].x) + (((10.0 / (_1322 + 10.0)) * cbMtdParam._m0[12u].y) * dot(vec3(_1421, _1422, _1423), vec3(_228, _229, _230))));
    float _2801 = isnan(_2798) ? _2800 : (isnan(_2800) ? _2798 : min(_2800, _2798));
    float _2802 = isnan(_2799) ? _1386 : (isnan(_1386) ? _2799 : min(_1386, _2799));
    vec4 _2804 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2801, _2802), 0.0);
    float _2806 = _2804.x;
    bool _2826 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2806)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2806))) > _1322;
    float _2827 = _2826 ? _2801 : _1385;
    float _2828 = _2826 ? _2802 : _1386;
    vec4 _2830 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2827, _2828));
    vec4 _2835 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2827, _2828));
    float _2837 = _2835.x;
    bool _2842 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _2851 = (-0.0) - cbSceneParam._m0[2u].z;
    float _2857 = (_2842 ? (_2851 / (cbSceneParam._m0[2u].x - _2837)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2837))) - _1322;
    float _2859 = cbMtdParam._m0[42u].x + cbMtdParam._m0[36u].x;
    float _2860 = cbMtdParam._m0[42u].y + cbMtdParam._m0[36u].y;
    float _2861 = cbMtdParam._m0[42u].z + cbMtdParam._m0[36u].z;
    bool _2867 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2871 = (isnan(_2857) ? 0.0 : (isnan(0.0) ? _2857 : max(0.0, _2857))) * (-1.44269502162933349609375);
    float _5125 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
    float _5136 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
    float _5147 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
    float _3002;
    float _3003;
    float _3004;
    if ((1.0 - _1229) > 0.00999999977648258209228515625)
    {
        vec4 _2923 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2827, _2828), 0.0);
        float _2925 = _2923.x;
        float _2931 = (_2842 ? (_2851 / (cbSceneParam._m0[2u].x - _2925)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2925))) - _1322;
        uint _2937 = floatBitsToUint(cbInstanceData._m0[_1244]).x * 14u;
        uint _2943 = _2937 + 4u;
        float _2952 = dot(vec3(cbLight._m0[_2937].xyz), vec3(_249, _250, _251));
        float _2959 = dot(vec3((-0.0) - _1378, (-0.0) - _1379, (-0.0) - _1380), vec3((-0.0) - _249, (-0.0) - _250, (-0.0) - _251));
        float _2964 = ((isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0))) / (isnan(0.001000000047497451305389404296875) ? _2952 : (isnan(_2952) ? 0.001000000047497451305389404296875 : max(_2952, 0.001000000047497451305389404296875)))) + 1.0;
        float _2966 = (-0.0) - ((isnan(_2931) ? 0.0 : (isnan(0.0) ? _2931 : max(0.0, _2931))) * _2964);
        _3002 = _2867 ? 0.0 : ((((_1288 * cbMtdParam._m0[36u].x) * cbLight._m0[_2943].x) / ((_2964 * _2859) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2859 * 1.44269502162933349609375) * _2966)));
        _3003 = _2867 ? 0.0 : ((((_1288 * cbMtdParam._m0[36u].y) * cbLight._m0[_2943].y) / ((_2964 * _2860) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2860 * 1.44269502162933349609375) * _2966)));
        _3004 = _2867 ? 0.0 : ((((_1288 * cbMtdParam._m0[36u].z) * cbLight._m0[_2943].z) / ((_2964 * _2861) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2861 * 1.44269502162933349609375) * _2966)));
    }
    else
    {
        _3002 = 0.0;
        _3003 = 0.0;
        _3004 = 0.0;
    }
    float _3021 = 0.959999978542327880859375 - (exp2(log2(1.0 - _1501) * 5.0) * 0.959999978542327880859375);
    float _3022 = (_3002 + ((exp2(_2871 * (_2867 ? 0.0 : _2859)) * _2830.x) * cbSceneParam._m0[72u].w)) * _3021;
    float _3023 = (_3003 + ((exp2(_2871 * (_2867 ? 0.0 : _2860)) * _2830.y) * cbSceneParam._m0[72u].w)) * _3021;
    float _3024 = (_3004 + ((exp2(_2871 * (_2867 ? 0.0 : _2861)) * _2830.z) * cbSceneParam._m0[72u].w)) * _3021;
    float _3046 = _1385 / cbSceneParam._m0[86u].x;
    float _3047 = _1386 / cbSceneParam._m0[86u].y;
    vec4 _3061 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3046, _3047, (log2((isnan(cbSceneParam._m0[77u].w) ? _1322 : (isnan(_1322) ? cbSceneParam._m0[77u].w : min(_1322, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3063 = _3061.x;
    float _3064 = _3061.y;
    float _3065 = _3061.z;
    float _3066 = _3061.w;
    float _3195;
    float _3197;
    float _3199;
    float _3201;
    if (_1322 > cbSceneParam._m0[78u].w)
    {
        float _3160 = isnan(_1322) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1322 : min(cbSceneParam._m0[80u].w, _1322));
        float _3161 = _3160 / _1322;
        float _3172 = _3161 * _1371;
        float _3173 = _1372 * _3161;
        float _3174 = (-0.0) - _3173;
        float _3175 = _3161 * _1373;
        float _3177 = (cbSceneParam._m0[77u].w * _3174) / _3160;
        float _3178 = _3177 + cbSceneParam._m0[79u].w;
        float _3179 = cbSceneParam._m0[79u].w - _3173;
        float _3185 = sqrt(((_3172 * _3172) + (_3173 * _3173)) + (_3175 * _3175));
        float _3188 = (1.0 - (cbSceneParam._m0[77u].w / _3160)) * _3185;
        float _3193 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3194 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3580;
        if (abs((_3174 - _3177) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3580 = ((((_3178 > 0.0) ? exp2(_3193 * _3178) : (2.0 - exp2(_3194 * _3178))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3188;
        }
        else
        {
            float _3327 = 1.0 / cbSceneParam._m0[80u].x;
            float _3328 = isnan(_3179) ? _3178 : (isnan(_3178) ? _3179 : max(_3178, _3179));
            float _3329 = isnan(_3179) ? _3178 : (isnan(_3178) ? _3179 : min(_3178, _3179));
            float _3338 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : min(_3328, 0.0));
            float _3339 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : min(_3329, 0.0));
            _3580 = ((abs(_3185 / _3174) * cbSceneParam._m0[80u].y) * ((((_3338 - _3339) * 2.0) - ((exp2(_3193 * (isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0)))) - exp2(_3193 * (isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0))))) * _3327)) - ((exp2(_3194 * _3338) - exp2(_3194 * _3339)) * _3327))) + (_3188 * cbSceneParam._m0[80u].z);
        }
        vec4 _3582 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3046, _3047, 1.0), 0.0);
        float _3591 = exp2((_3580 * (-1.44269502162933349609375)) * (1.0 - _3582.w));
        float _3592 = log2(_3591);
        float _3608 = log2(_3066);
        _3195 = (exp2(_3608 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3592 * cbSceneParam._m0[78u].x)) * _3582.x) / cbSceneParam._m0[78u].x)) + _3063;
        _3197 = (exp2(_3608 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3592 * cbSceneParam._m0[78u].y)) * _3582.y) / cbSceneParam._m0[78u].y)) + _3064;
        _3199 = (exp2(_3608 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3592 * cbSceneParam._m0[78u].z)) * _3582.z) / cbSceneParam._m0[78u].z)) + _3065;
        _3201 = _3591 * _3066;
    }
    else
    {
        _3195 = _3063;
        _3197 = _3064;
        _3199 = _3065;
        _3201 = _3066;
    }
    bool _3213 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _3214 = log2(_3201);
    float _3221 = exp2(_3214 * cbSceneParam._m0[78u].x) * ((_3022 + (((((_2490 * _2525.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0))) * _2285) * _2541)) + _2780) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _5125 : (isnan(_5125) ? 1.0 : min(_5125, 1.0))) * (_2774 + ((isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0))) * _1486))) - _3022) * _1229));
    float _3222 = exp2(_3214 * cbSceneParam._m0[78u].y) * ((_3023 + (((((_2490 * _2525.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0))) * _2285) * _2541)) + _2782) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _5136 : (isnan(_5136) ? 1.0 : min(_5136, 1.0))) * (_2776 + ((isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0))) * _1486))) - _3023) * _1229));
    float _3223 = exp2(_3214 * cbSceneParam._m0[78u].z) * ((_3024 + (((((_2490 * _2525.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0))) * _2285) * _2541)) + _2784) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _5147 : (isnan(_5147) ? 1.0 : min(_5147, 1.0))) * (_2778 + ((isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0))) * _1486))) - _3024) * _1229));
    vec4 _3231 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1385, _1386));
    float _3233 = _3231.x;
    float _3254 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3233)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3233))) - _1322) * cbMtdParam._m0[14u].w;
    float _5213 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
    float _3256 = (cbInstanceData._m0[_1243 + 6u].w * (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) * (isnan(1.0) ? _5213 : (isnan(_5213) ? 1.0 : min(_5213, 1.0)));
    float _3265 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3265 * (_3213 ? _3221 : (_3221 + (cbSceneParam._m0[72u].w * _3195)));
    SV_Target.y = _3265 * (_3213 ? _3222 : (_3222 + (cbSceneParam._m0[72u].w * _3197)));
    SV_Target.z = _3265 * (_3213 ? _3223 : (_3223 + (cbSceneParam._m0[72u].w * _3199)));
    SV_Target.w = _3256;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3256;
}


