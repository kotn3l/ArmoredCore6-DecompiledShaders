#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[45];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_oceanA_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_oceanA_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_oceanA_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_oceanA_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_oceanA_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Water_oceanA_snp_0_Texture2D_5;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in vec4 TEXCOORD_8;
layout(location = 7) in float TEXCOORD_11;
layout(location = 7, component = 1) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1859;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _230 = _229 * _221;
    float _231 = _229 * _222;
    float _232 = _229 * _223;
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251;
    float _252;
    float _253;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _251 = (-0.0) - _237;
        _252 = (-0.0) - _238;
        _253 = (-0.0) - _239;
    }
    else
    {
        _251 = _237;
        _252 = _238;
        _253 = _239;
    }
    float _299 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _309 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _299);
    float _310 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _299);
    float _311 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _299);
    float _326 = cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x;
    vec4 _343 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_2, SS_BumpMap), vec2((((_326 * cbMtdParam._m0[27u].x) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_326 * cbMtdParam._m0[27u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _346 = _343.x;
    float _347 = _343.y;
    float _348 = _343.z;
    float _349 = _343.w;
    float _362 = cbMtdParam._m0[14u].y - cbMtdParam._m0[14u].x;
    float _365 = (sqrt(((_309 * _309) + (_310 * _310)) + (_311 * _311)) - cbMtdParam._m0[14u].x) / (isnan(0.001000000047497451305389404296875) ? _362 : (isnan(_362) ? 0.001000000047497451305389404296875 : max(_362, 0.001000000047497451305389404296875)));
    float _366 = _365 + 0.180000007152557373046875;
    float _368 = _366 * 12.0;
    float _4099 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _371 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    vec4 _383 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _385 = _383.x;
    float _407 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _385)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _385))) - POSITION_1.w;
    float _408 = _407 / ((_371 * 0.0599999986588954925537109375) + 0.0599999986588954925537109375);
    float _4110 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _410 = isnan(0.5) ? _409 : (isnan(_409) ? 0.5 : max(_409, 0.5));
    float _412 = 1.0 - _410;
    float _413 = _366 * 7.0;
    float _4126 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _415 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _426 = (_348 * 0.00200000009499490261077880859375) + TEXCOORD.x;
    float _427 = (_348 * 0.00999999977648258209228515625) + TEXCOORD.y;
    vec4 _441 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_3, SS_WrapLinear), vec2((((cbMtdParam._m0[25u].z * _326) + _426) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[25u].w * _326) + _427) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _443 = _441.x;
    float _465 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_3, SS_WrapLinear), vec2((((cbMtdParam._m0[23u].z * _426) + (cbMtdParam._m0[26u].z * _326)) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[23u].w * _427) + (cbMtdParam._m0[26u].w * _326)) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x + (-0.0500000007450580596923828125);
    float _468 = (isnan(_465) ? _443 : (isnan(_443) ? _465 : max(_443, _465))) - _415;
    float _4142 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _469 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _470 = _415 + 0.5;
    float _4153 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _481 = cbMtdParam._m0[16u].w * _326;
    float _482 = cos(_481);
    float _483 = sin(_481);
    vec4 _507 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2(((((_483 * cbMtdParam._m0[31u].x) + TEXCOORD.x) + (cbMtdParam._m0[22u].x * _326)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((_482 * cbMtdParam._m0[31u].y) + TEXCOORD.y) + (cbMtdParam._m0[22u].y * _326)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _511 = _507.z;
    vec4 _526 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[21u].z * _326) + TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[21u].w * _326) + TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _530 = _526.z;
    float _533 = (isnan(_530) ? _511 : (isnan(_511) ? _530 : max(_511, _530))) * (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)));
    float _4169 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _534 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _537 = (_412 - _349) + (isnan(_534) ? _469 : (isnan(_469) ? _534 : max(_469, _534)));
    float _4185 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _538 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _539 = _538 * _410;
    float _4196 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _548 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _549 = _348 - _548;
    float _4207 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _550 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    vec4 _603 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[23u].x * _326) + (cbMtdParam._m0[30u].z * _483)) + (cbMtdParam._m0[34u].z * TEXCOORD.x)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[23u].y * _326) + (cbMtdParam._m0[30u].w * _482)) + (cbMtdParam._m0[34u].w * TEXCOORD.y)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _627 = cbMtdParam._m0[37u].w * TEXCOORD_5.x;
    float _683 = ((((((_603.w + (-0.5)) * cbMtdParam._m0[43u].w) + (cbMtdParam._m0[39u].y * (_507.w + (-0.5)))) + (cbMtdParam._m0[40u].x * (_526.w + (-0.5)))) + (((_627 + cbMtdParam._m0[41u].z) * cos(cbMtdParam._m0[13u].y * _326)) * (texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_5, SS_WrapLinear), vec2(((cbMtdParam._m0[32u].z * TEXCOORD.x) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, ((cbMtdParam._m0[32u].w * TEXCOORD.y) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w)).y + (-0.5)))) + ((sin(cbMtdParam._m0[13u].x * _326) * (cbMtdParam._m0[40u].w + _627)) * (texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_5, SS_WrapLinear), vec2(((cbMtdParam._m0[31u].z * TEXCOORD.x) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, ((cbMtdParam._m0[31u].w * TEXCOORD.y) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w)).y + (-0.5)))) * (1.0 - TEXCOORD_5.y);
    float _713 = 1.0 - _349;
    float _718 = ((isnan(0.550000011920928955078125) ? _713 : (isnan(_713) ? 0.550000011920928955078125 : max(_713, 0.550000011920928955078125))) + (-0.550000011920928955078125)) * cbMtdParam._m0[16u].z;
    float _721 = ((TEXCOORD_5.y * (-0.5)) * _718) + _718;
    float _725 = ((TEXCOORD_5.z * (-0.699999988079071044921875)) * _721) + _721;
    float _738 = (((_683 + ((cbMtdParam._m0[37u].x - (cbMtdParam._m0[37u].x * TEXCOORD_5.y)) * _348)) + ((texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[35u].z * TEXCOORD.x) + (cbMtdParam._m0[22u].z * _326)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[35u].w * TEXCOORD.y) + (cbMtdParam._m0[22u].w * _326)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).w + (-0.5)) * cbMtdParam._m0[44u].z)) + ((sin(cbMtdParam._m0[21u].y * _326) * cbMtdParam._m0[38u].z) * (isnan(0.300000011920928955078125) ? TEXCOORD_5.z : (isnan(TEXCOORD_5.z) ? 0.300000011920928955078125 : max(TEXCOORD_5.z, 0.300000011920928955078125))))) + _725;
    float _741 = (_738 + cbMtdParam._m0[20u].z) * cbMtdParam._m0[20u].w;
    float _4228 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _742 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _754 = inversesqrt(dot(vec3(_309, _310, _311), vec3(_309, _310, _311)));
    float _758 = dot(vec4(_754 * _309, _754 * _310, _754 * _311, 0.0), vec4(_251, _252, _253, 0.0));
    float _4239 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _766 = exp2(log2((1.0 - (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) * cbMtdParam._m0[12u].z) * cbMtdParam._m0[12u].w);
    float _4250 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _767 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _771 = ((_539 + cbMtdParam._m0[9u].x) + (_550 * cbMtdParam._m0[10u].x)) + ((_742 * cbMtdParam._m0[11u].x) * _767);
    float _772 = ((_539 + cbMtdParam._m0[9u].y) + (_550 * cbMtdParam._m0[10u].y)) + ((_742 * cbMtdParam._m0[11u].y) * _767);
    float _773 = ((_539 + cbMtdParam._m0[9u].z) + (_550 * cbMtdParam._m0[10u].z)) + ((_742 * cbMtdParam._m0[11u].z) * _767);
    float _4261 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _774 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _4272 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _784 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _787 = (_371 * (-0.87999999523162841796875)) * _784;
    float _790 = (((((1.0 - _771) - _774) * _548) + _771) + _784) + _787;
    float _793 = (((((1.0 - _772) - _774) * _548) + _772) + _784) + _787;
    float _796 = (((((1.0 - _773) - _774) * _548) + _773) + _784) + _787;
    float _797 = _348 * 0.01200000010430812835693359375;
    float _822 = (_348 * 0.300000011920928955078125) * texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[35u].x * _326) + _797) + (cbMtdParam._m0[24u].x * TEXCOORD.x)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[35u].y * _326) + _797) + (cbMtdParam._m0[24u].y * TEXCOORD.y)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z;
    float _4283 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _823 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _833 = (((1.0 - _790) * TEXCOORD_5.x) * _823) + _790;
    float _834 = (((1.0 - _793) * TEXCOORD_5.x) * _823) + _793;
    float _835 = (((1.0 - _796) * TEXCOORD_5.x) * _823) + _796;
    vec4 _869 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_4, SS_WrapLinear), vec2(((((cbMtdParam._m0[27u].z * _326) + (cbMtdParam._m0[30u].x * _483)) + (cbMtdParam._m0[29u].x * _426)) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, ((((cbMtdParam._m0[27u].w * _326) + (cbMtdParam._m0[30u].y * _482)) + (cbMtdParam._m0[29u].y * _427)) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _872 = _869.y;
    float _879 = 1.0 - (_407 / cbMtdParam._m0[18u].w);
    float _883 = ((_869.x * TEXCOORD_8.x) * cbMtdParam._m0[18u].z) * (isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0)));
    float _889 = _872 * TEXCOORD_8.y;
    float _892 = ((isnan(cbMtdParam._m0[19u].x) ? _889 : (isnan(_889) ? cbMtdParam._m0[19u].x : max(_889, cbMtdParam._m0[19u].x))) - cbMtdParam._m0[19u].x) * cbMtdParam._m0[19u].y;
    float _893 = isnan(_892) ? _883 : (isnan(_883) ? _892 : max(_883, _892));
    float _4309 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _894 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _901 = (_894 * (1.0 - _833)) + _833;
    float _902 = (_894 * (1.0 - _834)) + _834;
    float _903 = (_894 * (1.0 - _835)) + _835;
    float _940 = exp2(log2(cbMtdParam._m0[15u].w * _713) * cbMtdParam._m0[17u].x);
    float _4320 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _941 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _942 = _941 * texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_4, SS_WrapLinear), vec2(((((cbMtdParam._m0[28u].x * _326) + (cbMtdParam._m0[28u].z * _713)) + (cbMtdParam._m0[29u].z * _426)) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, ((((cbMtdParam._m0[28u].y * _326) + (cbMtdParam._m0[28u].w * _713)) + (cbMtdParam._m0[29u].w * _427)) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).z;
    float _945 = ((_941 - _942) * cbMtdParam._m0[17u].w) + _942;
    float _949 = _415 * TEXCOORD_8.z;
    float _956 = ((_949 * (1.0 - _901)) * _945) + _901;
    float _957 = ((_949 * (1.0 - _902)) * _945) + _902;
    float _958 = ((_949 * (1.0 - _903)) * _945) + _903;
    float _962 = 1.0 - (_407 / cbMtdParam._m0[18u].x);
    float _968 = (cbMtdParam._m0[18u].y * _872) * (isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0)));
    float _972 = (_968 * (1.0 - _956)) + _956;
    float _973 = (_968 * (1.0 - _957)) + _957;
    float _974 = (_968 * (1.0 - _958)) + _958;
    float _977 = _365 / cbMtdParam._m0[15u].y;
    float _4336 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _980 = (1.0 - (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) * cbMtdParam._m0[15u].x;
    float _986 = _365 + 0.20000000298023223876953125;
    float _988 = _986 * 9.0;
    float _4347 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _993 = ((cbMtdParam._m0[13u].w - cbMtdParam._m0[12u].x) * (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) + cbMtdParam._m0[12u].x;
    float _996 = (_365 + 0.099999986588954925537109375) * 2.5;
    float _4358 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _1001 = ((cbMtdParam._m0[14u].z - _993) * (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) + _993;
    float _1002 = _972 + _538;
    float _4369 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1007 = ((0.3499999940395355224609375 - _1001) * (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) + _1001;
    float _1008 = TEXCOORD_5.z * 0.5;
    float _1020 = (_365 + 0.100000001490116119384765625) * 0.89999997615814208984375;
    float _4380 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1025 = ((cbMtdParam._m0[17u].y - cbMtdParam._m0[20u].x) * (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0)))) + cbMtdParam._m0[20u].x;
    float _1030 = (_1025 * (_346 + (-0.5))) + 0.5;
    float _1031 = (_1025 * (_347 + (-0.5))) + 0.5;
    float _4391 = isnan(0.0) ? TEXCOORD_5.y : (isnan(TEXCOORD_5.y) ? 0.0 : max(TEXCOORD_5.y, 0.0));
    float _1032 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    vec4 _1062 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[26u].x * TEXCOORD.z) + (cbMtdParam._m0[32u].x * _326)) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[26u].y * TEXCOORD.w) + (cbMtdParam._m0[32u].y * _326)) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _1070 = ((_526.x + (-0.5)) * 0.5) + _507.x;
    float _1071 = ((_526.y + (-0.5)) * 0.5) + _507.y;
    vec4 _1095 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[24u].z * TEXCOORD.x) + (cbMtdParam._m0[25u].x * _326)) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[24u].w * TEXCOORD.y) + (cbMtdParam._m0[25u].y * _326)) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _1104 = _986 * 12.0;
    float _4402 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _1106 = 1.0 - (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0)));
    float _1120 = cbMtdParam._m0[33u].z * TEXCOORD.x;
    float _1121 = cbMtdParam._m0[33u].w * TEXCOORD.y;
    vec4 _1134 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2(((_1120 + (cbMtdParam._m0[33u].x * _326)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_1121 + (cbMtdParam._m0[33u].y * _326)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1155 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2((((_1120 + ((cbMtdParam._m0[27u].x * 0.4000000059604644775390625) * _550)) + (cbMtdParam._m0[34u].x * _326)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1121 + ((cbMtdParam._m0[27u].y * 0.4000000059604644775390625) * _550)) + (cbMtdParam._m0[34u].y * _326)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1169 = (((0.5 - _1070) * 0.10999999940395355224609375) + _1070) + (((((((_1095.z + (-0.5)) * cbMtdParam._m0[16u].x) * _1106) + (-1.0)) + _1134.x) + _1155.x) * cbMtdParam._m0[15u].z);
    float _1170 = (((0.5 - _1071) * 0.10999999940395355224609375) + _1071) + (((((((_1095.w + (-0.5)) * cbMtdParam._m0[16u].x) * _1106) + (-1.0)) + _1134.y) + _1155.y) * cbMtdParam._m0[15u].z);
    float _1175 = ((_1062.x - _1169) * _365) + _1169;
    float _1176 = ((_1062.y - _1170) * _365) + _1170;
    float _1177 = _365 * 0.5;
    float _4413 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _1178 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
    float _1189 = cbMtdParam._m0[17u].z - (cbMtdParam._m0[17u].z * _725);
    float _1196 = cbMtdParam._m0[19u].z - (cbMtdParam._m0[19u].z * TEXCOORD_5.y);
    float _1198 = _1196 - (_1196 * _1178);
    float _1202 = (((((((0.5 - _346) * 0.60000002384185791015625) + _346) - _1030) * _1032) + _1030) + (_1198 * (_603.x + (-0.5)))) + (((_1175 + (-0.5)) + ((0.5 - _1175) * _1178)) * _1189);
    float _1204 = (((((((0.5 - _347) * 0.60000002384185791015625) + _347) - _1031) * _1032) + _1031) + (_1198 * (_603.y + (-0.5)))) + (((_1176 + (-0.5)) + ((0.5 - _1176) * _1178)) * _1189);
    float _1214 = (((_1008 * (0.5 - _1202)) + _1202) * 2.0) + (-1.0);
    float _1215 = (((_1008 * (0.5 - _1204)) + _1204) * 2.0) + (-1.0);
    float _1216 = dot(vec2(_1214, _1215), vec2(_1214, _1215));
    float _4424 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
    float _1221 = sqrt(1.0 - (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))));
    float _1224 = _986 * 6.0;
    float _4435 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
    float _1227 = cbMtdParam._m0[16u].y * (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)));
    float _4446 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
    float _1228 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _1231 = ((1.0 - _1228) * _1002) + _1228;
    uint _1245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1246 = _1245 + 5u;
    float _1257 = (-0.0) - _309;
    float _1258 = (-0.0) - _310;
    float _1259 = (-0.0) - _311;
    float _1263 = inversesqrt(dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259)));
    float _1267 = dot(vec3(_1263 * _1257, _1263 * _1258, _1263 * _1259), vec3(cbLight._m0[floatBitsToUint(cbInstanceData._m0[_1246]).x * 14u].xyz));
    float _1277 = 0.90999996662139892578125 / exp2(log2(1.091000080108642578125 - (_1267 * 0.60000002384185791015625)) * 1.5);
    float _1290 = ((((0.959999978542327880859375 / exp2(log2((_1267 * 0.4000000059604644775390625) + 1.04100000858306884765625) * 1.5)) - _1277) * 0.5) + _1277) * 0.079577468335628509521484375;
    float _1294 = fma(_1221, _251, fma(_1215, _243 * TANGENT.x, _1214 * _230));
    float _1297 = fma(_1221, _252, fma(_1215, _243 * TANGENT.y, _1214 * _231));
    float _1300 = fma(_1221, _253, fma(_1215, _243 * TANGENT.z, _1214 * _232));
    float _1304 = inversesqrt(dot(vec3(_1294, _1297, _1300), vec3(_1294, _1297, _1300)));
    float _1305 = _1304 * _1294;
    float _1306 = _1304 * _1297;
    float _1307 = _1304 * _1300;
    float _4457 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _4468 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1309 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _4479 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _4490 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _4501 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _1324 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1364 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1373 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1364);
    float _1374 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1364);
    float _1375 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1364);
    float _1379 = inversesqrt(dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375)));
    float _1380 = _1373 * _1379;
    float _1381 = _1374 * _1379;
    float _1382 = _1375 * _1379;
    float _1387 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1388 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1390 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD_11, TEXCOORD_12));
    float _1399 = (_1390.x * 2.0) + (-1.0);
    float _1400 = (_1390.y * 2.0) + (-1.0);
    float _1401 = (_1390.z * 2.0) + (-1.0);
    float _1405 = inversesqrt(dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401)));
    float _1416 = ((TEXCOORD_12 >= 1.0) || ((TEXCOORD_12 <= 0.0) || ((TEXCOORD_11 <= 0.0) || (TEXCOORD_11 >= 1.0)))) ? 0.0 : _1390.w;
    float _1423 = (((_1399 * _1405) - _1305) * _1416) + _1305;
    float _1424 = (((_1400 * _1405) - _1306) * _1416) + _1306;
    float _1425 = (((_1401 * _1405) - _1307) * _1416) + _1307;
    float _1445 = fma(_1425, cbSceneParam._m0[5u].z, fma(_1424, cbSceneParam._m0[5u].y, _1423 * cbSceneParam._m0[5u].x));
    float _1448 = fma(_1425, cbSceneParam._m0[6u].z, fma(_1424, cbSceneParam._m0[6u].y, _1423 * cbSceneParam._m0[6u].x));
    float _1451 = fma(_1425, cbSceneParam._m0[7u].z, fma(_1424, cbSceneParam._m0[7u].y, _1423 * cbSceneParam._m0[7u].x));
    uint _1465 = (_1245 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1471 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) * cbInstanceData._m0[_1465].x;
    float _1472 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0)))) * cbInstanceData._m0[_1465].y;
    float _1473 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) * cbInstanceData._m0[_1465].z;
    float _4512 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
    float _1474 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
    float _4523 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
    float _1475 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
    float _4534 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
    float _1476 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
    vec4 _1485 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1387, cbSceneParam._m0[86u].y * _1388));
    float _1488 = _1485.x * TEXCOORD_5.w;
    float _1489 = dot(vec3(_1423, _1424, _1425), vec3(_1380, _1381, _1382));
    float _1492 = _1489 * 2.0;
    float _1496 = (_1492 * _1423) - _1380;
    float _1497 = (_1492 * _1424) - _1381;
    float _1498 = (_1492 * _1425) - _1382;
    float _1502 = abs(dot(vec3(_1380, _1381, _1382), vec3(_1423, _1424, _1425)));
    float _4545 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
    float _1503 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
    float _1512 = sqrt(_1309);
    float _1524 = exp2((_1512 * 5.0) * log2(1.0 - (_1503 * 0.999000012874603271484375))) / (4.0 - (_1512 * 3.0));
    float _1554 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1558 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1562 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1858;
    float _1860;
    float _1861;
    float _1862;
    float _1863;
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1587 = fma(_1562, cbModelParam._m0[26u].z, fma(_1558, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1554));
        float _1591 = fma(_1562, cbModelParam._m0[27u].z, fma(_1558, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1554));
        float _1595 = fma(_1562, cbModelParam._m0[28u].z, fma(_1558, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1554));
        float _1617 = _1554 + _1423;
        float _1618 = _1558 + _1424;
        float _1619 = _1562 + _1425;
        float _1629 = fma(_1619, cbModelParam._m0[26u].z, fma(_1618, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1617)) - _1587;
        float _1630 = fma(_1619, cbModelParam._m0[27u].z, fma(_1618, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1617)) - _1591;
        float _1631 = fma(_1619, cbModelParam._m0[28u].z, fma(_1618, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1617)) - _1595;
        float _1635 = inversesqrt(dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631)));
        float _1647 = ((_1635 * _1629) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1587 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1648 = ((_1635 * _1630) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1591 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1649 = ((_1635 * _1631) / cbModelParam._m0[34u].z) + ((((((_1595 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1652 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1647, _1648, _1649), 0.0);
        vec4 _1659 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1647, _1648, _1649), 0.0);
        vec4 _1666 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1647, _1648, _1649), 0.0);
        vec4 _1673 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1647, _1648, _1649), 0.0);
        float _1686 = exp2((_1652.w + (-0.5)) * 20.0) * 2.0;
        float _1687 = _1686 * (_1652.x + (-0.5));
        float _1688 = _1686 * (_1652.y + (-0.5));
        float _1689 = _1686 * (_1652.z + (-0.5));
        float _1696 = exp2((_1659.w + (-0.5)) * 20.0) * 2.0;
        float _1697 = _1696 * (_1659.x + (-0.5));
        float _1698 = _1696 * (_1659.y + (-0.5));
        float _1699 = _1696 * (_1659.z + (-0.5));
        float _1706 = exp2((_1666.w + (-0.5)) * 20.0) * 2.0;
        float _1707 = _1706 * (_1666.x + (-0.5));
        float _1708 = _1706 * (_1666.y + (-0.5));
        float _1709 = _1706 * (_1666.z + (-0.5));
        float _1716 = exp2((_1673.w + (-0.5)) * 20.0) * 2.0;
        float _1717 = _1716 * (_1673.x + (-0.5));
        float _1718 = _1716 * (_1673.y + (-0.5));
        float _1719 = _1716 * (_1673.z + (-0.5));
        float _1720 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1721 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1722 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1723 = _1687 * 0.5;
        float _1724 = _1697 * 0.5;
        float _1725 = _1707 * 0.5;
        float _1726 = dot(vec3(_1723, _1724, _1725), vec3(_1723, _1724, _1725));
        float _1731 = (_1726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1726);
        float _1740 = (dot(vec3(_1423, _1424, _1425), vec3(_1731 * _1723, _1731 * _1724, _1731 * _1725)) + 1.0) * 0.5;
        float _4571 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1750 = sqrt(((_1724 * _1724) + (_1723 * _1723)) + (_1725 * _1725)) / (_1720 + 9.9999997473787516355514526367188e-06);
        float _4582 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1751 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _1752 = _1751 * 2.0;
        float _1756 = (1.0 - _1751) / (_1751 + 1.0);
        float _4593 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _1766 = ((((1.0 - _1757) * (_1752 + 2.0)) * exp2(log2(isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_1752 + 1.0))) + _1757) * _1720;
        float _1767 = _1688 * 0.5;
        float _1768 = _1698 * 0.5;
        float _1769 = _1708 * 0.5;
        float _1770 = dot(vec3(_1767, _1768, _1769), vec3(_1767, _1768, _1769));
        float _1775 = (_1770 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1770);
        float _1783 = (dot(vec3(_1423, _1424, _1425), vec3(_1775 * _1767, _1775 * _1768, _1775 * _1769)) + 1.0) * 0.5;
        float _4604 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1792 = sqrt(((_1768 * _1768) + (_1767 * _1767)) + (_1769 * _1769)) / (_1721 + 9.9999997473787516355514526367188e-06);
        float _4615 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1793 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _1794 = _1793 * 2.0;
        float _1798 = (1.0 - _1793) / (_1793 + 1.0);
        float _4626 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1799 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
        float _1808 = ((((1.0 - _1799) * (_1794 + 2.0)) * exp2(log2(isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_1794 + 1.0))) + _1799) * _1721;
        float _1809 = _1689 * 0.5;
        float _1810 = _1699 * 0.5;
        float _1811 = _1709 * 0.5;
        float _1812 = dot(vec3(_1809, _1810, _1811), vec3(_1809, _1810, _1811));
        float _1817 = (_1812 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1812);
        float _1825 = (dot(vec3(_1423, _1424, _1425), vec3(_1817 * _1809, _1817 * _1810, _1817 * _1811)) + 1.0) * 0.5;
        float _4637 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1834 = sqrt(((_1810 * _1810) + (_1809 * _1809)) + (_1811 * _1811)) / (_1722 + 9.9999997473787516355514526367188e-06);
        float _4648 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1835 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _1836 = _1835 * 2.0;
        float _1840 = (1.0 - _1835) / (_1835 + 1.0);
        float _4659 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1841 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _1850 = ((((1.0 - _1841) * (_1836 + 2.0)) * exp2(log2(isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_1836 + 1.0))) + _1841) * _1722;
        _1858 = _1689;
        _1860 = _1688;
        _1861 = _1687;
        _1862 = _1699;
        _1863 = _1698;
        _1864 = _1697;
        _1865 = _1709;
        _1866 = _1708;
        _1867 = _1707;
        _1868 = _1722;
        _1869 = _1721;
        _1870 = _1720;
        _1871 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)));
        _1872 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)));
        _1873 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0)));
    }
    else
    {
        _1858 = _1859;
        _1860 = _1859;
        _1861 = _1859;
        _1862 = _1859;
        _1863 = _1859;
        _1864 = _1859;
        _1865 = _1859;
        _1866 = _1859;
        _1867 = _1859;
        _1868 = _1859;
        _1869 = _1859;
        _1870 = _1859;
        _1871 = 0.0;
        _1872 = 0.0;
        _1873 = 0.0;
    }
    float _2163;
    float _2164;
    float _2165;
    float _2166;
    float _2167;
    float _2168;
    float _2169;
    float _2170;
    float _2171;
    float _2172;
    float _2173;
    float _2174;
    float _2175;
    float _2176;
    float _2177;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1896 = fma(_1562, cbModelParam._m0[30u].z, fma(_1558, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1554));
        float _1900 = fma(_1562, cbModelParam._m0[31u].z, fma(_1558, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1554));
        float _1904 = fma(_1562, cbModelParam._m0[32u].z, fma(_1558, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1554));
        float _1926 = _1554 + _1423;
        float _1927 = _1558 + _1424;
        float _1928 = _1562 + _1425;
        float _1938 = fma(_1928, cbModelParam._m0[30u].z, fma(_1927, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1926)) - _1896;
        float _1939 = fma(_1928, cbModelParam._m0[31u].z, fma(_1927, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1926)) - _1900;
        float _1940 = fma(_1928, cbModelParam._m0[32u].z, fma(_1927, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1926)) - _1904;
        float _1944 = inversesqrt(dot(vec3(_1938, _1939, _1940), vec3(_1938, _1939, _1940)));
        float _1956 = ((_1944 * _1938) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1896 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1957 = ((_1944 * _1939) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1900 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1958 = ((_1944 * _1940) / cbModelParam._m0[35u].z) + ((((((_1904 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1960 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1956, _1957, _1958), 0.0);
        vec4 _1967 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1956, _1957, _1958), 0.0);
        vec4 _1974 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1956, _1957, _1958), 0.0);
        vec4 _1981 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1956, _1957, _1958), 0.0);
        float _1993 = exp2((_1960.w + (-0.5)) * 20.0) * 2.0;
        float _1994 = _1993 * (_1960.x + (-0.5));
        float _1995 = _1993 * (_1960.y + (-0.5));
        float _1996 = _1993 * (_1960.z + (-0.5));
        float _2003 = exp2((_1967.w + (-0.5)) * 20.0) * 2.0;
        float _2004 = _2003 * (_1967.x + (-0.5));
        float _2005 = _2003 * (_1967.y + (-0.5));
        float _2006 = _2003 * (_1967.z + (-0.5));
        float _2013 = exp2((_1974.w + (-0.5)) * 20.0) * 2.0;
        float _2014 = _2013 * (_1974.x + (-0.5));
        float _2015 = _2013 * (_1974.y + (-0.5));
        float _2016 = _2013 * (_1974.z + (-0.5));
        float _2023 = exp2((_1981.w + (-0.5)) * 20.0) * 2.0;
        float _2024 = _2023 * (_1981.x + (-0.5));
        float _2025 = _2023 * (_1981.y + (-0.5));
        float _2026 = _2023 * (_1981.z + (-0.5));
        float _2027 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2028 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2029 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2030 = _1994 * 0.5;
        float _2031 = _2004 * 0.5;
        float _2032 = _2014 * 0.5;
        float _2033 = dot(vec3(_2030, _2031, _2032), vec3(_2030, _2031, _2032));
        float _2038 = (_2033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2033);
        float _2046 = (dot(vec3(_1423, _1424, _1425), vec3(_2038 * _2030, _2038 * _2031, _2038 * _2032)) + 1.0) * 0.5;
        float _4700 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2055 = sqrt(((_2031 * _2031) + (_2030 * _2030)) + (_2032 * _2032)) / (_2027 + 9.9999997473787516355514526367188e-06);
        float _4711 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2056 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
        float _2057 = _2056 * 2.0;
        float _2061 = (1.0 - _2056) / (_2056 + 1.0);
        float _4722 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2062 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
        float _2071 = ((((1.0 - _2062) * (_2057 + 2.0)) * exp2(log2(isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * (_2057 + 1.0))) + _2062) * _2027;
        float _2072 = _1995 * 0.5;
        float _2073 = _2005 * 0.5;
        float _2074 = _2015 * 0.5;
        float _2075 = dot(vec3(_2072, _2073, _2074), vec3(_2072, _2073, _2074));
        float _2080 = (_2075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2075);
        float _2088 = (dot(vec3(_1423, _1424, _1425), vec3(_2080 * _2072, _2080 * _2073, _2080 * _2074)) + 1.0) * 0.5;
        float _4733 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2097 = sqrt(((_2073 * _2073) + (_2072 * _2072)) + (_2074 * _2074)) / (_2028 + 9.9999997473787516355514526367188e-06);
        float _4744 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2098 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
        float _2099 = _2098 * 2.0;
        float _2103 = (1.0 - _2098) / (_2098 + 1.0);
        float _4755 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2104 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
        float _2113 = ((((1.0 - _2104) * (_2099 + 2.0)) * exp2(log2(isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_2099 + 1.0))) + _2104) * _2028;
        float _2114 = _1996 * 0.5;
        float _2115 = _2006 * 0.5;
        float _2116 = _2016 * 0.5;
        float _2117 = dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116));
        float _2122 = (_2117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2117);
        float _2130 = (dot(vec3(_1423, _1424, _1425), vec3(_2122 * _2114, _2122 * _2115, _2122 * _2116)) + 1.0) * 0.5;
        float _4766 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2139 = sqrt(((_2115 * _2115) + (_2114 * _2114)) + (_2116 * _2116)) / (_2029 + 9.9999997473787516355514526367188e-06);
        float _4777 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2140 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
        float _2141 = _2140 * 2.0;
        float _2145 = (1.0 - _2140) / (_2140 + 1.0);
        float _4788 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2146 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
        float _2155 = ((((1.0 - _2146) * (_2141 + 2.0)) * exp2(log2(isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2141 + 1.0))) + _2146) * _2029;
        _2163 = _1996;
        _2164 = _1995;
        _2165 = _1994;
        _2166 = _2006;
        _2167 = _2005;
        _2168 = _2004;
        _2169 = _2016;
        _2170 = _2015;
        _2171 = _2014;
        _2172 = _2029;
        _2173 = _2028;
        _2174 = _2027;
        _2175 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0)));
        _2176 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0)));
        _2177 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0)));
    }
    else
    {
        _2163 = _1859;
        _2164 = _1859;
        _2165 = _1859;
        _2166 = _1859;
        _2167 = _1859;
        _2168 = _1859;
        _2169 = _1859;
        _2170 = _1859;
        _2171 = _1859;
        _2172 = _1859;
        _2173 = _1859;
        _2174 = _1859;
        _2175 = 0.0;
        _2176 = 0.0;
        _2177 = 0.0;
    }
    float _2187 = (cbModelParam._m0[1u].x * (_2175 - _1871)) + _1871;
    float _2188 = (cbModelParam._m0[1u].x * (_2176 - _1872)) + _1872;
    float _2189 = (cbModelParam._m0[1u].x * (_2177 - _1873)) + _1873;
    float _2210 = fma(_2189, cbSceneParam._m0[89u].z, fma(_2188, cbSceneParam._m0[89u].y, _2187 * cbSceneParam._m0[89u].x));
    float _2213 = fma(_2189, cbSceneParam._m0[90u].z, fma(_2188, cbSceneParam._m0[90u].y, _2187 * cbSceneParam._m0[90u].x));
    float _2216 = fma(_2189, cbSceneParam._m0[91u].z, fma(_2188, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2187));
    float _2229 = _1496 * 0.5;
    float _2230 = _1497 * 0.5;
    float _2231 = _1498 * 0.5;
    float _2232 = dot(vec4(_2229, _2230, _2231, 1.0), vec4(_2165, _2168, _2171, _2174));
    float _2235 = dot(vec4(_2229, _2230, _2231, 1.0), vec4(_2164, _2167, _2170, _2173));
    float _2238 = dot(vec4(_2229, _2230, _2231, 1.0), vec4(_2163, _2166, _2169, _2172));
    float _2272;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2245 = dot(vec4(_2229, _2230, _2231, 1.0), vec4(_1858, _1862, _1865, _1868));
        float _2249 = dot(vec4(_2229, _2230, _2231, 1.0), vec4(_1860, _1863, _1866, _1869));
        float _2253 = dot(vec4(_2229, _2230, _2231, 1.0), vec4(_1861, _1864, _1867, _1870));
        float _2260 = dot(vec4(cbModelParam._m0[39u]), vec4(_2229, _2230, _2231, 1.0));
        _2272 = dot(vec3(isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0)), isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0)), isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2260) ? 0.0 : (isnan(0.0) ? _2260 : max(0.0, _2260))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2272 = 1.0;
    }
    float _2283;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2274 = dot(vec4(cbModelParam._m0[40u]), vec4(_2229, _2230, _2231, 1.0));
        _2283 = dot(vec3(isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0)), isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0)), isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2274) ? 0.0 : (isnan(0.0) ? _2274 : max(0.0, _2274))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2283 = 1.0;
    }
    float _2287 = (_2283 * cbModelParam._m0[1u].x) + (_2272 * (1.0 - cbModelParam._m0[1u].x));
    float _2297 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1309);
    float _2298 = isnan(_2297) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2297 : min(cbModelParam._m0[25u].z, _2297));
    float _2378;
    float _2380;
    float _2382;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2345 = fma(_1562, cbModelParam._m0[13u].z, fma(_1558, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1554)) + cbModelParam._m0[13u].w;
        float _2349 = fma(_1562, cbModelParam._m0[14u].z, fma(_1558, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1554)) + cbModelParam._m0[14u].w;
        float _2353 = fma(_1562, cbModelParam._m0[15u].z, fma(_1558, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1554)) + cbModelParam._m0[15u].w;
        float _2356 = fma(_1498, cbModelParam._m0[13u].z, fma(_1497, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1496));
        float _2359 = fma(_1498, cbModelParam._m0[14u].z, fma(_1497, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1496));
        float _2362 = fma(_1498, cbModelParam._m0[15u].z, fma(_1497, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1496));
        float _2390;
        if (_2356 > 0.0)
        {
            _2390 = abs((1.0 - _2345) / _2356);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_2356 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_2345 + 1.0) / _2356);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _2390 = frontier_phi_16_14_ladder;
        }
        float _2692;
        if (_2359 > 0.0)
        {
            _2692 = abs((1.0 - _2349) / _2359);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2359 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2349 + 1.0) / _2359);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2692 = frontier_phi_25_21_ladder;
        }
        float _3107;
        if (_2362 > 0.0)
        {
            _3107 = abs((1.0 - _2353) / _2362);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_2362 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_2353 + 1.0) / _2362);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _3107 = frontier_phi_39_32_ladder;
        }
        float _3109 = isnan(_2692) ? _2390 : (isnan(_2390) ? _2692 : min(_2390, _2692));
        float _3110 = isnan(_3107) ? _3109 : (isnan(_3109) ? _3107 : min(_3109, _3107));
        float _3114 = (_3110 * _2356) + _2345;
        float _3115 = (_3110 * _2359) + _2349;
        float _3116 = (_3110 * _2362) + _2353;
        float _3117 = _3110 * 9.9999997473787516355514526367188e-05;
        float _3119 = (-1.0) - _3117;
        float _3121 = _3117 + 1.0;
        float frontier_phi_15_39_ladder;
        float frontier_phi_15_39_ladder_1;
        float frontier_phi_15_39_ladder_2;
        if ((_3116 > _3121) || ((_3116 < _3119) || ((_3115 > _3121) || ((_3115 < _3119) || ((_3114 < _3119) || (_3114 > _3121))))))
        {
            frontier_phi_15_39_ladder = 0.0;
            frontier_phi_15_39_ladder_1 = 0.0;
            frontier_phi_15_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3325 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_3116, cbModelParam._m0[9u].z, fma(_3115, cbModelParam._m0[9u].y, _3114 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_3116, cbModelParam._m0[10u].z, fma(_3115, cbModelParam._m0[10u].y, _3114 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_3116, cbModelParam._m0[11u].z, fma(_3115, cbModelParam._m0[11u].y, _3114 * cbModelParam._m0[11u].x))), _2298);
            frontier_phi_15_39_ladder = _3325.z * cbModelParam._m0[1u].y;
            frontier_phi_15_39_ladder_1 = _3325.y * cbModelParam._m0[1u].y;
            frontier_phi_15_39_ladder_2 = _3325.x * cbModelParam._m0[1u].y;
        }
        _2378 = frontier_phi_15_39_ladder_2;
        _2380 = frontier_phi_15_39_ladder_1;
        _2382 = frontier_phi_15_39_ladder;
    }
    else
    {
        vec4 _2366 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1496, _1497, _1498), _2298);
        _2378 = _2366.x * cbModelParam._m0[1u].y;
        _2380 = _2366.y * cbModelParam._m0[1u].y;
        _2382 = _2366.z * cbModelParam._m0[1u].y;
    }
    float _2386 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1309);
    float _2387 = isnan(_2386) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2386 : min(cbModelParam._m0[25u].w, _2386));
    float _2476;
    float _2478;
    float _2480;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2440 = fma(_1562, cbModelParam._m0[21u].z, fma(_1558, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1554)) + cbModelParam._m0[21u].w;
        float _2444 = fma(_1562, cbModelParam._m0[22u].z, fma(_1558, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1554)) + cbModelParam._m0[22u].w;
        float _2448 = fma(_1562, cbModelParam._m0[23u].z, fma(_1558, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1554)) + cbModelParam._m0[23u].w;
        float _2451 = fma(_1498, cbModelParam._m0[21u].z, fma(_1497, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1496));
        float _2454 = fma(_1498, cbModelParam._m0[22u].z, fma(_1497, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1496));
        float _2457 = fma(_1498, cbModelParam._m0[23u].z, fma(_1497, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1496));
        float _2697;
        if (_2451 > 0.0)
        {
            _2697 = abs((1.0 - _2440) / _2451);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_2451 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_2440 + 1.0) / _2451);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2697 = frontier_phi_27_23_ladder;
        }
        float _3134;
        if (_2454 > 0.0)
        {
            _3134 = abs((1.0 - _2444) / _2454);
        }
        else
        {
            float frontier_phi_41_34_ladder;
            if (_2454 < 0.0)
            {
                frontier_phi_41_34_ladder = abs((_2444 + 1.0) / _2454);
            }
            else
            {
                frontier_phi_41_34_ladder = 5000.0;
            }
            _3134 = frontier_phi_41_34_ladder;
        }
        float _3386;
        if (_2457 > 0.0)
        {
            _3386 = abs((1.0 - _2448) / _2457);
        }
        else
        {
            float frontier_phi_56_50_ladder;
            if (_2457 < 0.0)
            {
                frontier_phi_56_50_ladder = abs((_2448 + 1.0) / _2457);
            }
            else
            {
                frontier_phi_56_50_ladder = 5000.0;
            }
            _3386 = frontier_phi_56_50_ladder;
        }
        float _3388 = isnan(_3134) ? _2697 : (isnan(_2697) ? _3134 : min(_2697, _3134));
        float _3389 = isnan(_3386) ? _3388 : (isnan(_3388) ? _3386 : min(_3388, _3386));
        float _3393 = (_3389 * _2451) + _2440;
        float _3394 = (_3389 * _2454) + _2444;
        float _3395 = (_3389 * _2457) + _2448;
        float _3396 = _3389 * 9.9999997473787516355514526367188e-05;
        float _3397 = (-1.0) - _3396;
        float _3399 = _3396 + 1.0;
        float frontier_phi_24_56_ladder;
        float frontier_phi_24_56_ladder_1;
        float frontier_phi_24_56_ladder_2;
        if ((_3395 > _3399) || ((_3395 < _3397) || ((_3394 > _3399) || ((_3394 < _3397) || ((_3393 < _3397) || (_3393 > _3399))))))
        {
            frontier_phi_24_56_ladder = 0.0;
            frontier_phi_24_56_ladder_1 = 0.0;
            frontier_phi_24_56_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3666 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3395, cbModelParam._m0[17u].z, fma(_3394, cbModelParam._m0[17u].y, _3393 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3395, cbModelParam._m0[18u].z, fma(_3394, cbModelParam._m0[18u].y, _3393 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3395, cbModelParam._m0[19u].z, fma(_3394, cbModelParam._m0[19u].y, _3393 * cbModelParam._m0[19u].x))), _2387);
            frontier_phi_24_56_ladder = _3666.y * cbModelParam._m0[1u].z;
            frontier_phi_24_56_ladder_1 = _3666.z * cbModelParam._m0[1u].z;
            frontier_phi_24_56_ladder_2 = _3666.x * cbModelParam._m0[1u].z;
        }
        _2476 = frontier_phi_24_56_ladder_2;
        _2478 = frontier_phi_24_56_ladder;
        _2480 = frontier_phi_24_56_ladder_1;
    }
    else
    {
        vec4 _2460 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1496, _1497, _1498), _2387);
        _2476 = _2460.x * cbModelParam._m0[1u].z;
        _2478 = _2460.y * cbModelParam._m0[1u].z;
        _2480 = _2460.z * cbModelParam._m0[1u].z;
    }
    float _2492 = ((((1.0 - _1524) * ((_1512 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1524 * _1512)) * _1488;
    float _2493 = _2492 * ((cbModelParam._m0[1u].w * (_2476 - _2378)) + _2378);
    float _2494 = _2492 * ((cbModelParam._m0[1u].w * (_2478 - _2380)) + _2380);
    float _2495 = _2492 * ((cbModelParam._m0[1u].w * (_2480 - _2382)) + _2382);
    float _2498 = fma(_2495, cbSceneParam._m0[89u].z, fma(_2494, cbSceneParam._m0[89u].y, _2493 * cbSceneParam._m0[89u].x));
    float _2501 = fma(_2495, cbSceneParam._m0[90u].z, fma(_2494, cbSceneParam._m0[90u].y, _2493 * cbSceneParam._m0[90u].x));
    float _2504 = fma(_2495, cbSceneParam._m0[91u].z, fma(_2494, cbSceneParam._m0[91u].y, _2493 * cbSceneParam._m0[91u].x));
    float _2523 = (cbSceneParam._m0[88u].y * (1.0 - _1309)) + cbSceneParam._m0[88u].z;
    float _4914 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    vec4 _2527 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(_1387, _1388), (isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0))) * 5.0);
    float _2543 = 1.0 - _2527.w;
    vec4 _2551 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1387, _1388));
    float _2553 = _2551.w;
    float _2565 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2553);
    float _2566 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2553);
    float _2567 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2553);
    uvec4 _2570 = floatBitsToUint(cbInstanceData._m0[_1246]);
    uint _2572 = _2570.x * 14u;
    float _2579 = (cbLight._m0[_2572 + 13u].x * (_1488 + (-1.0))) + 1.0;
    uint _2580 = _2572 + 4u;
    float _2589 = isnan(1.0) ? _2579 : (isnan(_2579) ? 1.0 : min(_2579, 1.0));
    float _2598 = dot(vec3(cbLight._m0[_2572].xyz), vec3(_1423, _1424, _1425));
    float _4930 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
    float _2602 = (isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0))) * 0.3183098733425140380859375;
    float _2604 = ((cbLight._m0[_2580].x * _2565) * _2589) * _2602;
    float _2605 = ((cbLight._m0[_2580].y * _2566) * _2589) * _2602;
    float _2606 = ((cbLight._m0[_2580].z * _2567) * _2589) * _2602;
    uint _2608 = _2572 + 8u;
    float _2621 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2572].w)) * _1309) * 0.949999988079071044921875);
    float _2622 = _2621 * _2621;
    float _2623 = cbLight._m0[_2572].x + _1380;
    float _2624 = cbLight._m0[_2572].y + _1381;
    float _2625 = cbLight._m0[_2572].z + _1382;
    float _2629 = inversesqrt(dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625)));
    float _2630 = _2629 * _2623;
    float _2631 = _2629 * _2624;
    float _2632 = _2629 * _2625;
    float _2633 = dot(vec3(_1423, _1424, _1425), vec3(cbLight._m0[_2572].xyz));
    float _4941 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2636 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
    float _4952 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
    float _2637 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
    float _2638 = dot(vec3(_1423, _1424, _1425), vec3(_2630, _2631, _2632));
    float _4963 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
    float _2641 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
    float _2642 = dot(vec3(cbLight._m0[_2572].xyz), vec3(_2630, _2631, _2632));
    float _4974 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
    float _2646 = _2622 * _2622;
    float _2650 = ((_2641 * _2641) * (_2646 + (-1.0))) + 1.0;
    float _2660 = (exp2(log2(1.0 - (isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2661 = 1.0 - _2622;
    float _2672 = (0.5 / (((_2637 * ((_2636 * _2661) + _2622)) + 9.9999999392252902907785028219223e-09) + (((_2637 * _2661) + _2622) * _2636))) * _2636;
    float _4985 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2674 = (isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0))) * (_2646 / ((_2650 * _2650) * 3.141590118408203125));
    float _2678 = (((cbLight._m0[_2608].x * _2565) * _2660) * _2674) * _2589;
    float _2682 = (((cbLight._m0[_2608].y * _2566) * _2660) * _2674) * _2589;
    float _2686 = (((cbLight._m0[_2608].z * _2567) * _2660) * _2674) * _2589;
    float _2800;
    float _2802;
    float _2804;
    float _2806;
    float _2808;
    float _2810;
    if (_2570.y == 0u)
    {
        float _2741 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2742 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2741;
        float _2743 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2741;
        float _2744 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2741;
        uvec4 _2756 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2757 = _2756.x;
        uint _2768 = uint((float(_2756.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1388) / _2757))) + floor(float(uint(cbSceneParam._m0[85u].x * _1387) / _2757)));
        float _2778 = (log2(_2744 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2779 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        uint _2782 = uint(isnan(14.0) ? _2779 : (isnan(_2779) ? 14.0 : min(_2779, 14.0)));
        uvec4 _2787 = texelFetch(g_lightClusterGridBuffer, int(((_2782 << 2u) + (_2768 << 6u)) >> 2u));
        uint _2788 = _2787.x;
        uint _2789 = _2756.z;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        float _2941;
        float _2943;
        if (((((1u << ((_2789 >> 4u) & 15u)) + 4294967295u) & _2788) == 0u) || ((_2789 & 240u) == 0u))
        {
            _2933 = 0.0;
            _2935 = 0.0;
            _2937 = 0.0;
            _2939 = 0.0;
            _2941 = 0.0;
            _2943 = 0.0;
        }
        else
        {
            float _2934;
            float _2936;
            float _2938;
            float _2940;
            float _2942;
            float _2944;
            float _3171 = 0.0;
            float _3172 = 0.0;
            float _3173 = 0.0;
            float _3174 = 0.0;
            float _3175 = 0.0;
            float _3176 = 0.0;
            uint _3177 = 0u;
            uint _3186;
            bool _3187;
            for (;;)
            {
                _3186 = texelFetch(g_lightClassification, int((((_2782 << 5u) + (_2768 << 9u)) + (_3177 << 2u)) >> 2u)).x;
                _3187 = _3186 == 0u;
                float frontier_phi_52_pred;
                float frontier_phi_52_pred_1;
                float frontier_phi_52_pred_2;
                float frontier_phi_52_pred_3;
                float frontier_phi_52_pred_4;
                float frontier_phi_52_pred_5;
                if (_3187)
                {
                    frontier_phi_52_pred = _3173;
                    frontier_phi_52_pred_1 = _3176;
                    frontier_phi_52_pred_2 = _3175;
                    frontier_phi_52_pred_3 = _3174;
                    frontier_phi_52_pred_4 = _3172;
                    frontier_phi_52_pred_5 = _3171;
                }
                else
                {
                    float _3429;
                    float _3430;
                    float _3431;
                    float _3432;
                    float _3433;
                    float _3434;
                    uint _3435;
                    _3429 = _3171;
                    _3430 = _3172;
                    _3431 = _3173;
                    _3432 = _3174;
                    _3433 = _3175;
                    _3434 = _3176;
                    _3435 = _3186;
                    float _3334;
                    float _3335;
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    for (;;)
                    {
                        uint _3439 = uint(findLSB(_3435)) + (_3177 << 5u);
                        uint _3436 = (_3435 + 4294967295u) & _3435;
                        uint _3441 = _3439 * 48u;
                        vec4 _3455 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3441)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 3u)).x));
                        uint _3461 = (_3439 * 48u) + 4u;
                        vec4 _3474 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3461)).x, texelFetch(g_PointLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3461 + 3u)).x));
                        uint _3480 = (_3439 * 48u) + 8u;
                        vec3 _3491 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3480)).x, texelFetch(g_PointLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3480 + 2u)).x));
                        float _3495 = _3455.x - _2742;
                        float _3496 = _3455.y - _2743;
                        float _3497 = _3455.z - _2744;
                        float _3498 = dot(vec3(_3495, _3496, _3497), vec3(_3495, _3496, _3497));
                        float _3501 = inversesqrt(_3498);
                        float _3502 = _3501 * _3495;
                        float _3503 = _3501 * _3496;
                        float _3504 = _3501 * _3497;
                        float _3505 = dot(vec3(_1445, _1448, _1451), vec3(_3502, _3503, _3504));
                        float _3510 = 1.0 - (_3498 * _3455.w);
                        float _5006 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                        float _3511 = isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0));
                        float _3512 = sqrt(_3498) * _3474.w;
                        float _3515 = 1.39999997615814208984375 / (_3512 + 1.39999997615814208984375);
                        float _3516 = _3515 * _3515;
                        float _3519 = ((1.0 - _3516) * _3505) + _3516;
                        float _3522 = _3512 * _3512;
                        float _3526 = ((isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0))) * _3511) / ((_3522 * 0.699999988079071044921875) + 1.0);
                        float _3530 = (-0.0) - _2742;
                        float _3531 = (-0.0) - _2743;
                        float _3532 = (-0.0) - _2744;
                        float _3536 = inversesqrt(dot(vec3(_3530, _3531, _3532), vec3(_3530, _3531, _3532)));
                        float _3537 = _3536 * _3530;
                        float _3538 = _3536 * _3531;
                        float _3539 = _3536 * _3532;
                        float _3547 = exp2(log2(1.0 / ((_3522 * 3.5) + 5.0)) * 0.25);
                        float _3548 = 1.0 - _1512;
                        float _3555 = sqrt(1.0 - ((1.0 - (_3548 * _3548)) * (1.0 - (_3547 * _3547))));
                        float _3556 = _3555 * _3555;
                        float _3557 = _3556 * _3556;
                        float _3558 = _3537 + _3502;
                        float _3559 = _3538 + _3503;
                        float _3560 = _3539 + _3504;
                        float _3564 = inversesqrt(dot(vec3(_3558, _3559, _3560), vec3(_3558, _3559, _3560)));
                        float _3568 = dot(vec3(_1445, _1448, _1451), vec3(_3537, _3538, _3539));
                        float _5022 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                        float _3571 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
                        float _3572 = dot(vec3(_1445, _1448, _1451), vec3(_3564 * _3558, _3564 * _3559, _3564 * _3560));
                        float _5033 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                        float _3575 = isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0));
                        float _3579 = ((_3575 * _3575) * (_3557 + (-1.0))) + 1.0;
                        float _3580 = _3515 * _3556;
                        float _3581 = _3580 * _3580;
                        float _3584 = ((1.0 - _3581) * _3505) + _3581;
                        float _5044 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                        float _3585 = isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0));
                        float _3586 = 1.0 - _3556;
                        float _3596 = (0.5 / (((_3585 * ((_3571 * _3586) + _3556)) + 9.9999999392252902907785028219223e-09) + (((_3585 * _3586) + _3556) * _3571))) * _3585;
                        float _5055 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                        float _3607 = (((_3557 * 3.1415927410125732421875) * (isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0)))) / ((_3579 * _3579) * ((_3522 * 2.1991131305694580078125) + 3.141590118408203125))) * _3511;
                        _3337 = (_3526 * _3474.x) + _3432;
                        _3338 = (_3526 * _3474.y) + _3433;
                        _3339 = (_3526 * _3474.z) + _3434;
                        _3334 = (_3607 * _3491.x) + _3429;
                        _3335 = (_3607 * _3491.y) + _3430;
                        _3336 = (_3607 * _3491.z) + _3431;
                        if (_3436 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3429 = _3334;
                            _3430 = _3335;
                            _3431 = _3336;
                            _3432 = _3337;
                            _3433 = _3338;
                            _3434 = _3339;
                            _3435 = _3436;
                        }
                    }
                    frontier_phi_52_pred = _3336;
                    frontier_phi_52_pred_1 = _3339;
                    frontier_phi_52_pred_2 = _3338;
                    frontier_phi_52_pred_3 = _3337;
                    frontier_phi_52_pred_4 = _3335;
                    frontier_phi_52_pred_5 = _3334;
                }
                _2938 = frontier_phi_52_pred;
                _2944 = frontier_phi_52_pred_1;
                _2942 = frontier_phi_52_pred_2;
                _2940 = frontier_phi_52_pred_3;
                _2936 = frontier_phi_52_pred_4;
                _2934 = frontier_phi_52_pred_5;
                uint _3178 = _3177 + 1u;
                if (_3178 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3171 = _2934;
                    _3172 = _2936;
                    _3173 = _2938;
                    _3174 = _2940;
                    _3175 = _2942;
                    _3176 = _2944;
                    _3177 = _3178;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2933 = _2934;
            _2935 = _2936;
            _2937 = _2938;
            _2939 = _2940;
            _2941 = _2942;
            _2943 = _2944;
        }
        uvec4 _2947 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2948 = _2947.z;
        uint _2950 = (_2948 >> 8u) & 15u;
        float _3139;
        float _3141;
        float _3143;
        float _3145;
        float _3147;
        float _3149;
        if (((4294967295u << _2950) & _2788) == 0u)
        {
            _3139 = _2933;
            _3141 = _2935;
            _3143 = _2937;
            _3145 = _2939;
            _3147 = _2941;
            _3149 = _2943;
        }
        else
        {
            float _3164 = inversesqrt(dot(vec3(_2742, _2743, _2744), vec3(_2742, _2743, _2744)));
            float _3165 = _3164 * _2742;
            float _3166 = _3164 * _2743;
            float _3167 = _3164 * _2744;
            float frontier_phi_43_44_ladder;
            float frontier_phi_43_44_ladder_1;
            float frontier_phi_43_44_ladder_2;
            float frontier_phi_43_44_ladder_3;
            float frontier_phi_43_44_ladder_4;
            float frontier_phi_43_44_ladder_5;
            if (_2950 < ((_2948 >> 12u) & 15u))
            {
                float _3140;
                float _3142;
                float _3144;
                float _3146;
                float _3148;
                float _3150;
                float _3412 = _2933;
                float _3413 = _2935;
                float _3414 = _2937;
                float _3415 = _2939;
                float _3416 = _2941;
                float _3417 = _2943;
                uint _3418 = _2950;
                uint _3427;
                bool _3428;
                for (;;)
                {
                    _3427 = texelFetch(g_lightClassification, int((((_2782 << 5u) + (_2768 << 9u)) + (_3418 << 2u)) >> 2u)).x;
                    _3428 = _3427 == 0u;
                    float frontier_phi_63_pred;
                    float frontier_phi_63_pred_1;
                    float frontier_phi_63_pred_2;
                    float frontier_phi_63_pred_3;
                    float frontier_phi_63_pred_4;
                    float frontier_phi_63_pred_5;
                    if (_3428)
                    {
                        frontier_phi_63_pred = _3417;
                        frontier_phi_63_pred_1 = _3416;
                        frontier_phi_63_pred_2 = _3415;
                        frontier_phi_63_pred_3 = _3414;
                        frontier_phi_63_pred_4 = _3413;
                        frontier_phi_63_pred_5 = _3412;
                    }
                    else
                    {
                        float _3671;
                        float _3672;
                        float _3673;
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3964;
                        float _3965;
                        float _3966;
                        float _3967;
                        float _3968;
                        float _3969;
                        float _3684 = _3412;
                        float _3685 = _3413;
                        float _3686 = _3414;
                        float _3687 = _3415;
                        float _3688 = _3416;
                        float _3689 = _3417;
                        uint _3690 = _3427;
                        uint _3691;
                        vec4 _3716;
                        float _3717;
                        vec4 _3732;
                        vec3 _3744;
                        vec4 _3759;
                        vec4 _3774;
                        float _3820;
                        bool _3821;
                        for (;;)
                        {
                            uint _3701 = ((_3418 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3690));
                            _3691 = (_3690 + 4294967295u) & _3690;
                            uint _3703 = _3701 * 40u;
                            _3716 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3703)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 3u)).x));
                            _3717 = _3716.w;
                            uint _3719 = (_3701 * 40u) + 4u;
                            _3732 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 3u)).x));
                            uint _3734 = (_3701 * 40u) + 8u;
                            _3744 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3734)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 2u)).x));
                            uint _3746 = (_3701 * 40u) + 16u;
                            _3759 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3746)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 3u)).x));
                            uint _3761 = (_3701 * 40u) + 20u;
                            _3774 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3761)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 3u)).x));
                            uint _3776 = (_3701 * 40u) + 24u;
                            vec4 _3789 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3776)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 3u)).x));
                            uint _3795 = (_3701 * 40u) + 28u;
                            vec4 _3808 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3795)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 3u)).x));
                            _3820 = fma(_2744, _3808.z, fma(_2743, _3808.y, _3808.x * _2742)) + _3808.w;
                            _3821 = !((fma(_2744, _3789.z, fma(_2743, _3789.y, _3789.x * _2742)) + _3789.w) <= 0.0);
                            float frontier_phi_69_pred;
                            float frontier_phi_69_pred_1;
                            float frontier_phi_69_pred_2;
                            float frontier_phi_69_pred_3;
                            float frontier_phi_69_pred_4;
                            float frontier_phi_69_pred_5;
                            if (_3821)
                            {
                                float _3848 = _3716.x - _2742;
                                float _3849 = _3716.y - _2743;
                                float _3850 = _3716.z - _2744;
                                float _3851 = dot(vec3(_3848, _3849, _3850), vec3(_3848, _3849, _3850));
                                float _3854 = inversesqrt(_3851);
                                float _3855 = _3854 * _3848;
                                float _3856 = _3854 * _3849;
                                float _3857 = _3854 * _3850;
                                float _3861 = 1.0 - (_3851 / (_3717 * _3717));
                                float _5066 = isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0));
                                float _3862 = isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0));
                                float _3866 = sqrt(_3851) * _3732.w;
                                float _3868 = 1.39999997615814208984375 / (_3866 + 1.39999997615814208984375);
                                float _3869 = _3868 * _3868;
                                float _3872 = ((1.0 - _3869) * dot(vec3(_3855, _3856, _3857), vec3(_1445, _1448, _1451))) + _3869;
                                float _3875 = _3866 * _3866;
                                float _3879 = (fma(_2744, _3759.z, fma(_2743, _3759.y, _3759.x * _2742)) + _3759.w) / _3820;
                                float _3880 = (fma(_2744, _3774.z, fma(_2743, _3774.y, _3774.x * _2742)) + _3774.w) / _3820;
                                float _3884 = 1.0 - dot(vec2(_3879, _3880), vec2(_3879, _3880));
                                float _5082 = isnan(0.0) ? _3884 : (isnan(_3884) ? 0.0 : max(_3884, 0.0));
                                float _3885 = isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0));
                                float _3886 = _3885 * (((isnan(0.0) ? _3872 : (isnan(_3872) ? 0.0 : max(_3872, 0.0))) * _3862) / ((_3875 * 0.699999988079071044921875) + 1.0));
                                float _3898 = exp2(log2(1.0 / ((_3875 * 3.5) + 5.0)) * 0.25);
                                float _3899 = 1.0 - _1512;
                                float _3906 = sqrt(1.0 - ((1.0 - (_3899 * _3899)) * (1.0 - (_3898 * _3898))));
                                float _3907 = _3906 * _3906;
                                float _3908 = _3907 * _3907;
                                float _3909 = _3855 - _3165;
                                float _3910 = _3856 - _3166;
                                float _3911 = _3857 - _3167;
                                float _3915 = inversesqrt(dot(vec3(_3909, _3910, _3911), vec3(_3909, _3910, _3911)));
                                float _3919 = dot(vec3(_1445, _1448, _1451), vec3((-0.0) - _3165, (-0.0) - _3166, (-0.0) - _3167));
                                float _5093 = isnan(0.0) ? _3919 : (isnan(_3919) ? 0.0 : max(_3919, 0.0));
                                float _3922 = isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0));
                                float _3923 = dot(vec3(_1445, _1448, _1451), vec3(_3915 * _3909, _3915 * _3910, _3915 * _3911));
                                float _5104 = isnan(0.0) ? _3923 : (isnan(_3923) ? 0.0 : max(_3923, 0.0));
                                float _3926 = isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0));
                                float _3930 = ((_3926 * _3926) * (_3908 + (-1.0))) + 1.0;
                                float _3931 = _3868 * _3907;
                                float _3932 = _3931 * _3931;
                                float _3938 = ((1.0 - _3932) * dot(vec3(_1445, _1448, _1451), vec3(_3855, _3856, _3857))) + _3932;
                                float _5115 = isnan(0.0) ? _3938 : (isnan(_3938) ? 0.0 : max(_3938, 0.0));
                                float _3939 = isnan(1.0) ? _5115 : (isnan(_5115) ? 1.0 : min(_5115, 1.0));
                                float _3940 = 1.0 - _3907;
                                float _3950 = (0.5 / (((_3939 * ((_3922 * _3940) + _3907)) + 9.9999999392252902907785028219223e-09) + (((_3939 * _3940) + _3907) * _3922))) * _3939;
                                float _5126 = isnan(0.0) ? _3950 : (isnan(_3950) ? 0.0 : max(_3950, 0.0));
                                float _3960 = (_3885 * _3862) * (((_3908 * 3.1415927410125732421875) * (isnan(1.0) ? _5126 : (isnan(_5126) ? 1.0 : min(_5126, 1.0)))) / ((_3930 * _3930) * ((_3875 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_69_pred = _3960 * _3744.z;
                                frontier_phi_69_pred_1 = _3886 * _3732.z;
                                frontier_phi_69_pred_2 = _3886 * _3732.y;
                                frontier_phi_69_pred_3 = _3886 * _3732.x;
                                frontier_phi_69_pred_4 = _3960 * _3744.y;
                                frontier_phi_69_pred_5 = _3960 * _3744.x;
                            }
                            else
                            {
                                frontier_phi_69_pred = 0.0;
                                frontier_phi_69_pred_1 = 0.0;
                                frontier_phi_69_pred_2 = 0.0;
                                frontier_phi_69_pred_3 = 0.0;
                                frontier_phi_69_pred_4 = 0.0;
                                frontier_phi_69_pred_5 = 0.0;
                            }
                            _3966 = frontier_phi_69_pred;
                            _3969 = frontier_phi_69_pred_1;
                            _3968 = frontier_phi_69_pred_2;
                            _3967 = frontier_phi_69_pred_3;
                            _3965 = frontier_phi_69_pred_4;
                            _3964 = frontier_phi_69_pred_5;
                            _3674 = _3967 + _3687;
                            _3675 = _3968 + _3688;
                            _3676 = _3969 + _3689;
                            _3671 = _3964 + _3684;
                            _3672 = _3965 + _3685;
                            _3673 = _3966 + _3686;
                            if (_3691 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3684 = _3671;
                                _3685 = _3672;
                                _3686 = _3673;
                                _3687 = _3674;
                                _3688 = _3675;
                                _3689 = _3676;
                                _3690 = _3691;
                                continue;
                            }
                        }
                        frontier_phi_63_pred = _3676;
                        frontier_phi_63_pred_1 = _3675;
                        frontier_phi_63_pred_2 = _3674;
                        frontier_phi_63_pred_3 = _3673;
                        frontier_phi_63_pred_4 = _3672;
                        frontier_phi_63_pred_5 = _3671;
                    }
                    _3150 = frontier_phi_63_pred;
                    _3148 = frontier_phi_63_pred_1;
                    _3146 = frontier_phi_63_pred_2;
                    _3144 = frontier_phi_63_pred_3;
                    _3142 = frontier_phi_63_pred_4;
                    _3140 = frontier_phi_63_pred_5;
                    uint _3419 = _3418 + 1u;
                    if (_3419 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3412 = _3140;
                        _3413 = _3142;
                        _3414 = _3144;
                        _3415 = _3146;
                        _3416 = _3148;
                        _3417 = _3150;
                        _3418 = _3419;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_43_44_ladder = _3150;
                frontier_phi_43_44_ladder_1 = _3140;
                frontier_phi_43_44_ladder_2 = _3148;
                frontier_phi_43_44_ladder_3 = _3146;
                frontier_phi_43_44_ladder_4 = _3144;
                frontier_phi_43_44_ladder_5 = _3142;
            }
            else
            {
                frontier_phi_43_44_ladder = _2943;
                frontier_phi_43_44_ladder_1 = _2933;
                frontier_phi_43_44_ladder_2 = _2941;
                frontier_phi_43_44_ladder_3 = _2939;
                frontier_phi_43_44_ladder_4 = _2937;
                frontier_phi_43_44_ladder_5 = _2935;
            }
            _3139 = frontier_phi_43_44_ladder_1;
            _3141 = frontier_phi_43_44_ladder_5;
            _3143 = frontier_phi_43_44_ladder_4;
            _3145 = frontier_phi_43_44_ladder_3;
            _3147 = frontier_phi_43_44_ladder_2;
            _3149 = frontier_phi_43_44_ladder;
        }
        float _3154 = isnan(1.0) ? _1488 : (isnan(_1488) ? 1.0 : min(_1488, 1.0));
        _2800 = (_3154 * _3145) + _2604;
        _2802 = (_3154 * _3147) + _2605;
        _2804 = (_3154 * _3149) + _2606;
        _2806 = ((_3139 * 0.039999999105930328369140625) * _3154) + _2678;
        _2808 = ((_3141 * 0.039999999105930328369140625) * _3154) + _2682;
        _2810 = ((_3143 * 0.039999999105930328369140625) * _3154) + _2686;
    }
    else
    {
        _2800 = _2604;
        _2802 = _2605;
        _2804 = _2606;
        _2806 = _2678;
        _2808 = _2682;
        _2810 = _2686;
    }
    float _2830 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2831 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2832 = cbSceneParam._m0[86u].x * ((_1387 / cbSceneParam._m0[86u].x) + (((10.0 / (_1324 + 10.0)) * cbMtdParam._m0[12u].y) * dot(vec3(_1423, _1424, _1425), vec3(_230, _231, _232))));
    float _2833 = isnan(_2830) ? _2832 : (isnan(_2832) ? _2830 : min(_2832, _2830));
    float _2834 = isnan(_2831) ? _1388 : (isnan(_1388) ? _2831 : min(_1388, _2831));
    vec4 _2836 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2833, _2834), 0.0);
    float _2838 = _2836.x;
    bool _2858 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2838)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2838))) > _1324;
    float _2859 = _2858 ? _2833 : _1387;
    float _2860 = _2858 ? _2834 : _1388;
    vec4 _2862 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2859, _2860));
    vec4 _2867 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2859, _2860));
    float _2869 = _2867.x;
    bool _2874 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _2883 = (-0.0) - cbSceneParam._m0[2u].z;
    float _2889 = (_2874 ? (_2883 / (cbSceneParam._m0[2u].x - _2869)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2869))) - _1324;
    float _2891 = cbMtdParam._m0[42u].x + cbMtdParam._m0[36u].x;
    float _2892 = cbMtdParam._m0[42u].y + cbMtdParam._m0[36u].y;
    float _2893 = cbMtdParam._m0[42u].z + cbMtdParam._m0[36u].z;
    bool _2899 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2903 = (isnan(_2889) ? 0.0 : (isnan(0.0) ? _2889 : max(0.0, _2889))) * (-1.44269502162933349609375);
    float _5157 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
    float _5168 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
    float _5179 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
    float _3034;
    float _3035;
    float _3036;
    if ((1.0 - _1231) > 0.00999999977648258209228515625)
    {
        vec4 _2955 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2859, _2860), 0.0);
        float _2957 = _2955.x;
        float _2963 = (_2874 ? (_2883 / (cbSceneParam._m0[2u].x - _2957)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2957))) - _1324;
        uint _2969 = floatBitsToUint(cbInstanceData._m0[_1246]).x * 14u;
        uint _2975 = _2969 + 4u;
        float _2984 = dot(vec3(cbLight._m0[_2969].xyz), vec3(_251, _252, _253));
        float _2991 = dot(vec3((-0.0) - _1380, (-0.0) - _1381, (-0.0) - _1382), vec3((-0.0) - _251, (-0.0) - _252, (-0.0) - _253));
        float _2996 = ((isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0))) / (isnan(0.001000000047497451305389404296875) ? _2984 : (isnan(_2984) ? 0.001000000047497451305389404296875 : max(_2984, 0.001000000047497451305389404296875)))) + 1.0;
        float _2998 = (-0.0) - ((isnan(_2963) ? 0.0 : (isnan(0.0) ? _2963 : max(0.0, _2963))) * _2996);
        _3034 = _2899 ? 0.0 : ((((_1290 * cbMtdParam._m0[36u].x) * cbLight._m0[_2975].x) / ((_2996 * _2891) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2891 * 1.44269502162933349609375) * _2998)));
        _3035 = _2899 ? 0.0 : ((((_1290 * cbMtdParam._m0[36u].y) * cbLight._m0[_2975].y) / ((_2996 * _2892) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2892 * 1.44269502162933349609375) * _2998)));
        _3036 = _2899 ? 0.0 : ((((_1290 * cbMtdParam._m0[36u].z) * cbLight._m0[_2975].z) / ((_2996 * _2893) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2893 * 1.44269502162933349609375) * _2998)));
    }
    else
    {
        _3034 = 0.0;
        _3035 = 0.0;
        _3036 = 0.0;
    }
    float _3053 = 0.959999978542327880859375 - (exp2(log2(1.0 - _1503) * 5.0) * 0.959999978542327880859375);
    float _3054 = (_3034 + ((exp2(_2903 * (_2899 ? 0.0 : _2891)) * _2862.x) * cbSceneParam._m0[72u].w)) * _3053;
    float _3055 = (_3035 + ((exp2(_2903 * (_2899 ? 0.0 : _2892)) * _2862.y) * cbSceneParam._m0[72u].w)) * _3053;
    float _3056 = (_3036 + ((exp2(_2903 * (_2899 ? 0.0 : _2893)) * _2862.z) * cbSceneParam._m0[72u].w)) * _3053;
    float _3078 = _1387 / cbSceneParam._m0[86u].x;
    float _3079 = _1388 / cbSceneParam._m0[86u].y;
    vec4 _3093 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3078, _3079, (log2((isnan(cbSceneParam._m0[77u].w) ? _1324 : (isnan(_1324) ? cbSceneParam._m0[77u].w : min(_1324, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3095 = _3093.x;
    float _3096 = _3093.y;
    float _3097 = _3093.z;
    float _3098 = _3093.w;
    float _3227;
    float _3229;
    float _3231;
    float _3233;
    if (_1324 > cbSceneParam._m0[78u].w)
    {
        float _3192 = isnan(_1324) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1324 : min(cbSceneParam._m0[80u].w, _1324));
        float _3193 = _3192 / _1324;
        float _3204 = _3193 * _1373;
        float _3205 = _1374 * _3193;
        float _3206 = (-0.0) - _3205;
        float _3207 = _3193 * _1375;
        float _3209 = (cbSceneParam._m0[77u].w * _3206) / _3192;
        float _3210 = _3209 + cbSceneParam._m0[79u].w;
        float _3211 = cbSceneParam._m0[79u].w - _3205;
        float _3217 = sqrt(((_3204 * _3204) + (_3205 * _3205)) + (_3207 * _3207));
        float _3220 = (1.0 - (cbSceneParam._m0[77u].w / _3192)) * _3217;
        float _3225 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3226 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3612;
        if (abs((_3206 - _3209) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3612 = ((((_3210 > 0.0) ? exp2(_3225 * _3210) : (2.0 - exp2(_3226 * _3210))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3220;
        }
        else
        {
            float _3359 = 1.0 / cbSceneParam._m0[80u].x;
            float _3360 = isnan(_3211) ? _3210 : (isnan(_3210) ? _3211 : max(_3210, _3211));
            float _3361 = isnan(_3211) ? _3210 : (isnan(_3210) ? _3211 : min(_3210, _3211));
            float _3370 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : min(_3360, 0.0));
            float _3371 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : min(_3361, 0.0));
            _3612 = ((abs(_3217 / _3206) * cbSceneParam._m0[80u].y) * ((((_3370 - _3371) * 2.0) - ((exp2(_3225 * (isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0)))) - exp2(_3225 * (isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0))))) * _3359)) - ((exp2(_3226 * _3370) - exp2(_3226 * _3371)) * _3359))) + (_3220 * cbSceneParam._m0[80u].z);
        }
        vec4 _3614 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3078, _3079, 1.0), 0.0);
        float _3623 = exp2((_3612 * (-1.44269502162933349609375)) * (1.0 - _3614.w));
        float _3624 = log2(_3623);
        float _3640 = log2(_3098);
        _3227 = (exp2(_3640 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3624 * cbSceneParam._m0[78u].x)) * _3614.x) / cbSceneParam._m0[78u].x)) + _3095;
        _3229 = (exp2(_3640 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3624 * cbSceneParam._m0[78u].y)) * _3614.y) / cbSceneParam._m0[78u].y)) + _3096;
        _3231 = (exp2(_3640 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3624 * cbSceneParam._m0[78u].z)) * _3614.z) / cbSceneParam._m0[78u].z)) + _3097;
        _3233 = _3623 * _3098;
    }
    else
    {
        _3227 = _3095;
        _3229 = _3096;
        _3231 = _3097;
        _3233 = _3098;
    }
    bool _3245 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _3246 = log2(_3233);
    float _3253 = exp2(_3246 * cbSceneParam._m0[78u].x) * ((_3054 + (((((_2492 * _2527.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0))) * _2287) * _2543)) + _2806) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _5157 : (isnan(_5157) ? 1.0 : min(_5157, 1.0))) * (_2800 + ((isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0))) * _1488))) - _3054) * _1231));
    float _3254 = exp2(_3246 * cbSceneParam._m0[78u].y) * ((_3055 + (((((_2492 * _2527.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0))) * _2287) * _2543)) + _2808) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _5168 : (isnan(_5168) ? 1.0 : min(_5168, 1.0))) * (_2802 + ((isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0))) * _1488))) - _3055) * _1231));
    float _3255 = exp2(_3246 * cbSceneParam._m0[78u].z) * ((_3056 + (((((_2492 * _2527.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0))) * _2287) * _2543)) + _2810) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _5179 : (isnan(_5179) ? 1.0 : min(_5179, 1.0))) * (_2804 + ((isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0))) * _1488))) - _3056) * _1231));
    vec4 _3263 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1387, _1388));
    float _3265 = _3263.x;
    float _3286 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3265)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3265))) - _1324) * cbMtdParam._m0[14u].w;
    float _5245 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
    float _3288 = (cbInstanceData._m0[_1245 + 6u].w * (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * (isnan(1.0) ? _5245 : (isnan(_5245) ? 1.0 : min(_5245, 1.0)));
    float _3297 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3297 * (_3245 ? _3253 : (_3253 + (cbSceneParam._m0[72u].w * _3227)));
    SV_Target.y = _3297 * (_3245 ? _3254 : (_3254 + (cbSceneParam._m0[72u].w * _3229)));
    SV_Target.z = _3297 * (_3245 ? _3255 : (_3255 + (cbSceneParam._m0[72u].w * _3231)));
    SV_Target.w = _3288;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3288;
}


