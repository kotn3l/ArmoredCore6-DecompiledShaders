#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[45];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_oceanA_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_oceanA_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_oceanA_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_oceanA_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_oceanA_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Water_oceanA_snp_0_Texture2D_5;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in vec4 TEXCOORD_8;
layout(location = 7) in float TEXCOORD_11;
layout(location = 7, component = 1) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1905;
float _4443;
float _4444;
float _4445;
float _4446;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257;
    float _258;
    float _259;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _257 = (-0.0) - _243;
        _258 = (-0.0) - _244;
        _259 = (-0.0) - _245;
    }
    else
    {
        _257 = _243;
        _258 = _244;
        _259 = _245;
    }
    float _305 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _315 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _305);
    float _316 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _305);
    float _317 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _305);
    float _332 = cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x;
    vec4 _349 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_2, SS_BumpMap), vec2((((_332 * cbMtdParam._m0[27u].x) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_332 * cbMtdParam._m0[27u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _352 = _349.x;
    float _353 = _349.y;
    float _354 = _349.z;
    float _355 = _349.w;
    float _368 = cbMtdParam._m0[14u].y - cbMtdParam._m0[14u].x;
    float _371 = (sqrt(((_315 * _315) + (_316 * _316)) + (_317 * _317)) - cbMtdParam._m0[14u].x) / (isnan(0.001000000047497451305389404296875) ? _368 : (isnan(_368) ? 0.001000000047497451305389404296875 : max(_368, 0.001000000047497451305389404296875)));
    float _372 = _371 + 0.180000007152557373046875;
    float _374 = _372 * 12.0;
    float _4460 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _377 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
    vec4 _389 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _391 = _389.x;
    float _413 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _391)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _391))) - POSITION_1.w;
    float _414 = _413 / ((_377 * 0.0599999986588954925537109375) + 0.0599999986588954925537109375);
    float _4471 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
    float _416 = isnan(0.5) ? _415 : (isnan(_415) ? 0.5 : max(_415, 0.5));
    float _418 = 1.0 - _416;
    float _419 = _372 * 7.0;
    float _4487 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _421 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _432 = (_354 * 0.00200000009499490261077880859375) + TEXCOORD.x;
    float _433 = (_354 * 0.00999999977648258209228515625) + TEXCOORD.y;
    vec4 _447 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_3, SS_WrapLinear), vec2((((cbMtdParam._m0[25u].z * _332) + _432) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[25u].w * _332) + _433) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _449 = _447.x;
    float _471 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_3, SS_WrapLinear), vec2((((cbMtdParam._m0[23u].z * _432) + (cbMtdParam._m0[26u].z * _332)) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[23u].w * _433) + (cbMtdParam._m0[26u].w * _332)) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x + (-0.0500000007450580596923828125);
    float _474 = (isnan(_471) ? _449 : (isnan(_449) ? _471 : max(_449, _471))) - _421;
    float _4503 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _475 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _476 = _421 + 0.5;
    float _4514 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _487 = cbMtdParam._m0[16u].w * _332;
    float _488 = cos(_487);
    float _489 = sin(_487);
    vec4 _513 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2(((((_489 * cbMtdParam._m0[31u].x) + TEXCOORD.x) + (cbMtdParam._m0[22u].x * _332)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((_488 * cbMtdParam._m0[31u].y) + TEXCOORD.y) + (cbMtdParam._m0[22u].y * _332)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _517 = _513.z;
    vec4 _532 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[21u].z * _332) + TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[21u].w * _332) + TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _536 = _532.z;
    float _539 = (isnan(_536) ? _517 : (isnan(_517) ? _536 : max(_517, _536))) * (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)));
    float _4530 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _540 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
    float _543 = (_418 - _355) + (isnan(_540) ? _475 : (isnan(_475) ? _540 : max(_475, _540)));
    float _4546 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _544 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
    float _545 = _544 * _416;
    float _4557 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _554 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _555 = _354 - _554;
    float _4568 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _556 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
    vec4 _609 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[23u].x * _332) + (cbMtdParam._m0[30u].z * _489)) + (cbMtdParam._m0[34u].z * TEXCOORD.x)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[23u].y * _332) + (cbMtdParam._m0[30u].w * _488)) + (cbMtdParam._m0[34u].w * TEXCOORD.y)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _633 = cbMtdParam._m0[37u].w * TEXCOORD_5.x;
    float _689 = ((((((_609.w + (-0.5)) * cbMtdParam._m0[43u].w) + (cbMtdParam._m0[39u].y * (_513.w + (-0.5)))) + (cbMtdParam._m0[40u].x * (_532.w + (-0.5)))) + (((_633 + cbMtdParam._m0[41u].z) * cos(cbMtdParam._m0[13u].y * _332)) * (texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_5, SS_WrapLinear), vec2(((cbMtdParam._m0[32u].z * TEXCOORD.x) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, ((cbMtdParam._m0[32u].w * TEXCOORD.y) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w)).y + (-0.5)))) + ((sin(cbMtdParam._m0[13u].x * _332) * (cbMtdParam._m0[40u].w + _633)) * (texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_5, SS_WrapLinear), vec2(((cbMtdParam._m0[31u].z * TEXCOORD.x) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, ((cbMtdParam._m0[31u].w * TEXCOORD.y) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w)).y + (-0.5)))) * (1.0 - TEXCOORD_5.y);
    float _719 = 1.0 - _355;
    float _724 = ((isnan(0.550000011920928955078125) ? _719 : (isnan(_719) ? 0.550000011920928955078125 : max(_719, 0.550000011920928955078125))) + (-0.550000011920928955078125)) * cbMtdParam._m0[16u].z;
    float _727 = ((TEXCOORD_5.y * (-0.5)) * _724) + _724;
    float _731 = ((TEXCOORD_5.z * (-0.699999988079071044921875)) * _727) + _727;
    float _744 = (((_689 + ((cbMtdParam._m0[37u].x - (cbMtdParam._m0[37u].x * TEXCOORD_5.y)) * _354)) + ((texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[35u].z * TEXCOORD.x) + (cbMtdParam._m0[22u].z * _332)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[35u].w * TEXCOORD.y) + (cbMtdParam._m0[22u].w * _332)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).w + (-0.5)) * cbMtdParam._m0[44u].z)) + ((sin(cbMtdParam._m0[21u].y * _332) * cbMtdParam._m0[38u].z) * (isnan(0.300000011920928955078125) ? TEXCOORD_5.z : (isnan(TEXCOORD_5.z) ? 0.300000011920928955078125 : max(TEXCOORD_5.z, 0.300000011920928955078125))))) + _731;
    float _747 = (_744 + cbMtdParam._m0[20u].z) * cbMtdParam._m0[20u].w;
    float _4589 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _748 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
    float _760 = inversesqrt(dot(vec3(_315, _316, _317), vec3(_315, _316, _317)));
    float _764 = dot(vec4(_760 * _315, _760 * _316, _760 * _317, 0.0), vec4(_257, _258, _259, 0.0));
    float _4600 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _772 = exp2(log2((1.0 - (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0)))) * cbMtdParam._m0[12u].z) * cbMtdParam._m0[12u].w);
    float _4611 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _773 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
    float _777 = ((_545 + cbMtdParam._m0[9u].x) + (_556 * cbMtdParam._m0[10u].x)) + ((_748 * cbMtdParam._m0[11u].x) * _773);
    float _778 = ((_545 + cbMtdParam._m0[9u].y) + (_556 * cbMtdParam._m0[10u].y)) + ((_748 * cbMtdParam._m0[11u].y) * _773);
    float _779 = ((_545 + cbMtdParam._m0[9u].z) + (_556 * cbMtdParam._m0[10u].z)) + ((_748 * cbMtdParam._m0[11u].z) * _773);
    float _4622 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _780 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
    float _4633 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _790 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
    float _793 = (_377 * (-0.87999999523162841796875)) * _790;
    float _796 = (((((1.0 - _777) - _780) * _554) + _777) + _790) + _793;
    float _799 = (((((1.0 - _778) - _780) * _554) + _778) + _790) + _793;
    float _802 = (((((1.0 - _779) - _780) * _554) + _779) + _790) + _793;
    float _803 = _354 * 0.01200000010430812835693359375;
    float _828 = (_354 * 0.300000011920928955078125) * texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[35u].x * _332) + _803) + (cbMtdParam._m0[24u].x * TEXCOORD.x)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[35u].y * _332) + _803) + (cbMtdParam._m0[24u].y * TEXCOORD.y)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z;
    float _4644 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _829 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
    float _839 = (((1.0 - _796) * TEXCOORD_5.x) * _829) + _796;
    float _840 = (((1.0 - _799) * TEXCOORD_5.x) * _829) + _799;
    float _841 = (((1.0 - _802) * TEXCOORD_5.x) * _829) + _802;
    vec4 _875 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_4, SS_WrapLinear), vec2(((((cbMtdParam._m0[27u].z * _332) + (cbMtdParam._m0[30u].x * _489)) + (cbMtdParam._m0[29u].x * _432)) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, ((((cbMtdParam._m0[27u].w * _332) + (cbMtdParam._m0[30u].y * _488)) + (cbMtdParam._m0[29u].y * _433)) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _878 = _875.y;
    float _885 = 1.0 - (_413 / cbMtdParam._m0[18u].w);
    float _889 = ((_875.x * TEXCOORD_8.x) * cbMtdParam._m0[18u].z) * (isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0)));
    float _895 = _878 * TEXCOORD_8.y;
    float _898 = ((isnan(cbMtdParam._m0[19u].x) ? _895 : (isnan(_895) ? cbMtdParam._m0[19u].x : max(_895, cbMtdParam._m0[19u].x))) - cbMtdParam._m0[19u].x) * cbMtdParam._m0[19u].y;
    float _899 = isnan(_898) ? _889 : (isnan(_889) ? _898 : max(_889, _898));
    float _4670 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _900 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
    float _907 = (_900 * (1.0 - _839)) + _839;
    float _908 = (_900 * (1.0 - _840)) + _840;
    float _909 = (_900 * (1.0 - _841)) + _841;
    float _946 = exp2(log2(cbMtdParam._m0[15u].w * _719) * cbMtdParam._m0[17u].x);
    float _4681 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _947 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
    float _948 = _947 * texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_4, SS_WrapLinear), vec2(((((cbMtdParam._m0[28u].x * _332) + (cbMtdParam._m0[28u].z * _719)) + (cbMtdParam._m0[29u].z * _432)) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, ((((cbMtdParam._m0[28u].y * _332) + (cbMtdParam._m0[28u].w * _719)) + (cbMtdParam._m0[29u].w * _433)) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).z;
    float _951 = ((_947 - _948) * cbMtdParam._m0[17u].w) + _948;
    float _955 = _421 * TEXCOORD_8.z;
    float _962 = ((_955 * (1.0 - _907)) * _951) + _907;
    float _963 = ((_955 * (1.0 - _908)) * _951) + _908;
    float _964 = ((_955 * (1.0 - _909)) * _951) + _909;
    float _968 = 1.0 - (_413 / cbMtdParam._m0[18u].x);
    float _974 = (cbMtdParam._m0[18u].y * _878) * (isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0)));
    float _978 = (_974 * (1.0 - _962)) + _962;
    float _979 = (_974 * (1.0 - _963)) + _963;
    float _980 = (_974 * (1.0 - _964)) + _964;
    float _983 = _371 / cbMtdParam._m0[15u].y;
    float _4697 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _986 = (1.0 - (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0)))) * cbMtdParam._m0[15u].x;
    float _992 = _371 + 0.20000000298023223876953125;
    float _994 = _992 * 9.0;
    float _4708 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _999 = ((cbMtdParam._m0[13u].w - cbMtdParam._m0[12u].x) * (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) + cbMtdParam._m0[12u].x;
    float _1002 = (_371 + 0.099999986588954925537109375) * 2.5;
    float _4719 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1007 = ((cbMtdParam._m0[14u].z - _999) * (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) + _999;
    float _1008 = _978 + _544;
    float _4730 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1013 = ((0.3499999940395355224609375 - _1007) * (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0)))) + _1007;
    float _1014 = TEXCOORD_5.z * 0.5;
    float _1026 = (_371 + 0.100000001490116119384765625) * 0.89999997615814208984375;
    float _4741 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1031 = ((cbMtdParam._m0[17u].y - cbMtdParam._m0[20u].x) * (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0)))) + cbMtdParam._m0[20u].x;
    float _1036 = (_1031 * (_352 + (-0.5))) + 0.5;
    float _1037 = (_1031 * (_353 + (-0.5))) + 0.5;
    float _4752 = isnan(0.0) ? TEXCOORD_5.y : (isnan(TEXCOORD_5.y) ? 0.0 : max(TEXCOORD_5.y, 0.0));
    float _1038 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
    vec4 _1068 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[26u].x * TEXCOORD.z) + (cbMtdParam._m0[32u].x * _332)) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[26u].y * TEXCOORD.w) + (cbMtdParam._m0[32u].y * _332)) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _1076 = ((_532.x + (-0.5)) * 0.5) + _513.x;
    float _1077 = ((_532.y + (-0.5)) * 0.5) + _513.y;
    vec4 _1101 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[24u].z * TEXCOORD.x) + (cbMtdParam._m0[25u].x * _332)) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[24u].w * TEXCOORD.y) + (cbMtdParam._m0[25u].y * _332)) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _1110 = _992 * 12.0;
    float _4763 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _1112 = 1.0 - (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)));
    float _1126 = cbMtdParam._m0[33u].z * TEXCOORD.x;
    float _1127 = cbMtdParam._m0[33u].w * TEXCOORD.y;
    vec4 _1140 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2(((_1126 + (cbMtdParam._m0[33u].x * _332)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_1127 + (cbMtdParam._m0[33u].y * _332)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1161 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2((((_1126 + ((cbMtdParam._m0[27u].x * 0.4000000059604644775390625) * _556)) + (cbMtdParam._m0[34u].x * _332)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1127 + ((cbMtdParam._m0[27u].y * 0.4000000059604644775390625) * _556)) + (cbMtdParam._m0[34u].y * _332)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1175 = (((0.5 - _1076) * 0.10999999940395355224609375) + _1076) + (((((((_1101.z + (-0.5)) * cbMtdParam._m0[16u].x) * _1112) + (-1.0)) + _1140.x) + _1161.x) * cbMtdParam._m0[15u].z);
    float _1176 = (((0.5 - _1077) * 0.10999999940395355224609375) + _1077) + (((((((_1101.w + (-0.5)) * cbMtdParam._m0[16u].x) * _1112) + (-1.0)) + _1140.y) + _1161.y) * cbMtdParam._m0[15u].z);
    float _1181 = ((_1068.x - _1175) * _371) + _1175;
    float _1182 = ((_1068.y - _1176) * _371) + _1176;
    float _1183 = _371 * 0.5;
    float _4774 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
    float _1184 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
    float _1195 = cbMtdParam._m0[17u].z - (cbMtdParam._m0[17u].z * _731);
    float _1202 = cbMtdParam._m0[19u].z - (cbMtdParam._m0[19u].z * TEXCOORD_5.y);
    float _1204 = _1202 - (_1202 * _1184);
    float _1208 = (((((((0.5 - _352) * 0.60000002384185791015625) + _352) - _1036) * _1038) + _1036) + (_1204 * (_609.x + (-0.5)))) + (((_1181 + (-0.5)) + ((0.5 - _1181) * _1184)) * _1195);
    float _1210 = (((((((0.5 - _353) * 0.60000002384185791015625) + _353) - _1037) * _1038) + _1037) + (_1204 * (_609.y + (-0.5)))) + (((_1182 + (-0.5)) + ((0.5 - _1182) * _1184)) * _1195);
    float _1220 = (((_1014 * (0.5 - _1208)) + _1208) * 2.0) + (-1.0);
    float _1221 = (((_1014 * (0.5 - _1210)) + _1210) * 2.0) + (-1.0);
    float _1222 = dot(vec2(_1220, _1221), vec2(_1220, _1221));
    float _4785 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
    float _1227 = sqrt(1.0 - (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))));
    float _1230 = _992 * 6.0;
    float _4796 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
    float _1233 = cbMtdParam._m0[16u].y * (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0)));
    float _4807 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
    float _1234 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
    float _1237 = ((1.0 - _1234) * _1008) + _1234;
    uint _1251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1252 = _1251 + 5u;
    float _1263 = (-0.0) - _315;
    float _1264 = (-0.0) - _316;
    float _1265 = (-0.0) - _317;
    float _1269 = inversesqrt(dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265)));
    float _1273 = dot(vec3(_1269 * _1263, _1269 * _1264, _1269 * _1265), vec3(cbLight._m0[floatBitsToUint(cbInstanceData._m0[_1252]).x * 14u].xyz));
    float _1283 = 0.90999996662139892578125 / exp2(log2(1.091000080108642578125 - (_1273 * 0.60000002384185791015625)) * 1.5);
    float _1296 = ((((0.959999978542327880859375 / exp2(log2((_1273 * 0.4000000059604644775390625) + 1.04100000858306884765625) * 1.5)) - _1283) * 0.5) + _1283) * 0.079577468335628509521484375;
    float _1300 = fma(_1227, _257, fma(_1221, _249 * TANGENT.x, _1220 * _236));
    float _1303 = fma(_1227, _258, fma(_1221, _249 * TANGENT.y, _1220 * _237));
    float _1306 = fma(_1227, _259, fma(_1221, _249 * TANGENT.z, _1220 * _238));
    float _1310 = inversesqrt(dot(vec3(_1300, _1303, _1306), vec3(_1300, _1303, _1306)));
    float _1311 = _1310 * _1300;
    float _1312 = _1310 * _1303;
    float _1313 = _1310 * _1306;
    float _4818 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _4829 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _1315 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
    float _4840 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _4851 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _4862 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _1330 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1370 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1379 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1370);
    float _1380 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1370);
    float _1381 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1370);
    float _1385 = inversesqrt(dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381)));
    float _1386 = _1379 * _1385;
    float _1387 = _1380 * _1385;
    float _1388 = _1381 * _1385;
    vec4 _1393 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1395 = _1393.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1590 = sqrt(((_1379 * _1379) + (_1380 * _1380)) + (_1381 * _1381));
        float _1596 = (cbMatDynParam._m0[5u].x * _1590) + cbMatDynParam._m0[5u].y;
        float _4873 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
        float _1601 = (cbMatDynParam._m0[5u].z * _1590) + cbMatDynParam._m0[5u].w;
        float _4884 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) - _1597)) + _1597) < ((_1395 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1406 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1407 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1409 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD_11, TEXCOORD_12));
    float _1418 = (_1409.x * 2.0) + (-1.0);
    float _1419 = (_1409.y * 2.0) + (-1.0);
    float _1420 = (_1409.z * 2.0) + (-1.0);
    float _1424 = inversesqrt(dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420)));
    float _1435 = ((TEXCOORD_12 >= 1.0) || ((TEXCOORD_12 <= 0.0) || ((TEXCOORD_11 <= 0.0) || (TEXCOORD_11 >= 1.0)))) ? 0.0 : _1409.w;
    float _1442 = (((_1418 * _1424) - _1311) * _1435) + _1311;
    float _1443 = (((_1419 * _1424) - _1312) * _1435) + _1312;
    float _1444 = (((_1420 * _1424) - _1313) * _1435) + _1313;
    float _1463 = fma(_1444, cbSceneParam._m0[5u].z, fma(_1443, cbSceneParam._m0[5u].y, _1442 * cbSceneParam._m0[5u].x));
    float _1466 = fma(_1444, cbSceneParam._m0[6u].z, fma(_1443, cbSceneParam._m0[6u].y, _1442 * cbSceneParam._m0[6u].x));
    float _1469 = fma(_1444, cbSceneParam._m0[7u].z, fma(_1443, cbSceneParam._m0[7u].y, _1442 * cbSceneParam._m0[7u].x));
    uint _1482 = _1251 + 9u;
    uint _1483 = _1482 + uint(cbMatDynParam._m0[0u].w);
    float _1489 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0)))) * cbInstanceData._m0[_1483].x;
    float _1490 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0)))) * cbInstanceData._m0[_1483].y;
    float _1491 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0)))) * cbInstanceData._m0[_1483].z;
    float _4895 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
    float _1492 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
    float _4906 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
    float _1493 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
    float _4917 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
    float _1494 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
    vec4 _1503 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1406, cbSceneParam._m0[86u].y * _1407));
    float _1506 = _1503.x * TEXCOORD_5.w;
    float _1507 = dot(vec3(_1442, _1443, _1444), vec3(_1386, _1387, _1388));
    float _1510 = _1507 * 2.0;
    float _1514 = (_1510 * _1442) - _1386;
    float _1515 = (_1510 * _1443) - _1387;
    float _1516 = (_1510 * _1444) - _1388;
    float _1520 = abs(dot(vec3(_1386, _1387, _1388), vec3(_1442, _1443, _1444)));
    float _4928 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
    float _1521 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
    float _1530 = sqrt(_1315);
    float _1542 = exp2((_1530 * 5.0) * log2(1.0 - (_1521 * 0.999000012874603271484375))) / (4.0 - (_1530 * 3.0));
    float _1572 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1576 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1580 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1904;
    float _1906;
    float _1907;
    float _1908;
    float _1909;
    float _1910;
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1633 = fma(_1580, cbModelParam._m0[26u].z, fma(_1576, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1572));
        float _1637 = fma(_1580, cbModelParam._m0[27u].z, fma(_1576, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1572));
        float _1641 = fma(_1580, cbModelParam._m0[28u].z, fma(_1576, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1572));
        float _1663 = _1572 + _1442;
        float _1664 = _1576 + _1443;
        float _1665 = _1580 + _1444;
        float _1675 = fma(_1665, cbModelParam._m0[26u].z, fma(_1664, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1663)) - _1633;
        float _1676 = fma(_1665, cbModelParam._m0[27u].z, fma(_1664, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1663)) - _1637;
        float _1677 = fma(_1665, cbModelParam._m0[28u].z, fma(_1664, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1663)) - _1641;
        float _1681 = inversesqrt(dot(vec3(_1675, _1676, _1677), vec3(_1675, _1676, _1677)));
        float _1693 = ((_1681 * _1675) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1633 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1694 = ((_1681 * _1676) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1637 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1695 = ((_1681 * _1677) / cbModelParam._m0[34u].z) + ((((((_1641 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1698 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1693, _1694, _1695), 0.0);
        vec4 _1705 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1693, _1694, _1695), 0.0);
        vec4 _1712 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1693, _1694, _1695), 0.0);
        vec4 _1719 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1693, _1694, _1695), 0.0);
        float _1732 = exp2((_1698.w + (-0.5)) * 20.0) * 2.0;
        float _1733 = _1732 * (_1698.x + (-0.5));
        float _1734 = _1732 * (_1698.y + (-0.5));
        float _1735 = _1732 * (_1698.z + (-0.5));
        float _1742 = exp2((_1705.w + (-0.5)) * 20.0) * 2.0;
        float _1743 = _1742 * (_1705.x + (-0.5));
        float _1744 = _1742 * (_1705.y + (-0.5));
        float _1745 = _1742 * (_1705.z + (-0.5));
        float _1752 = exp2((_1712.w + (-0.5)) * 20.0) * 2.0;
        float _1753 = _1752 * (_1712.x + (-0.5));
        float _1754 = _1752 * (_1712.y + (-0.5));
        float _1755 = _1752 * (_1712.z + (-0.5));
        float _1762 = exp2((_1719.w + (-0.5)) * 20.0) * 2.0;
        float _1763 = _1762 * (_1719.x + (-0.5));
        float _1764 = _1762 * (_1719.y + (-0.5));
        float _1765 = _1762 * (_1719.z + (-0.5));
        float _1766 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1767 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1768 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1769 = _1733 * 0.5;
        float _1770 = _1743 * 0.5;
        float _1771 = _1753 * 0.5;
        float _1772 = dot(vec3(_1769, _1770, _1771), vec3(_1769, _1770, _1771));
        float _1777 = (_1772 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1772);
        float _1786 = (dot(vec3(_1442, _1443, _1444), vec3(_1777 * _1769, _1777 * _1770, _1777 * _1771)) + 1.0) * 0.5;
        float _4954 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1796 = sqrt(((_1770 * _1770) + (_1769 * _1769)) + (_1771 * _1771)) / (_1766 + 9.9999997473787516355514526367188e-06);
        float _4965 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1797 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
        float _1798 = _1797 * 2.0;
        float _1802 = (1.0 - _1797) / (_1797 + 1.0);
        float _4976 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1803 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
        float _1812 = ((((1.0 - _1803) * (_1798 + 2.0)) * exp2(log2(isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0))) * (_1798 + 1.0))) + _1803) * _1766;
        float _1813 = _1734 * 0.5;
        float _1814 = _1744 * 0.5;
        float _1815 = _1754 * 0.5;
        float _1816 = dot(vec3(_1813, _1814, _1815), vec3(_1813, _1814, _1815));
        float _1821 = (_1816 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1816);
        float _1829 = (dot(vec3(_1442, _1443, _1444), vec3(_1821 * _1813, _1821 * _1814, _1821 * _1815)) + 1.0) * 0.5;
        float _4987 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1838 = sqrt(((_1814 * _1814) + (_1813 * _1813)) + (_1815 * _1815)) / (_1767 + 9.9999997473787516355514526367188e-06);
        float _4998 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1839 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
        float _1840 = _1839 * 2.0;
        float _1844 = (1.0 - _1839) / (_1839 + 1.0);
        float _5009 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1845 = isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0));
        float _1854 = ((((1.0 - _1845) * (_1840 + 2.0)) * exp2(log2(isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0))) * (_1840 + 1.0))) + _1845) * _1767;
        float _1855 = _1735 * 0.5;
        float _1856 = _1745 * 0.5;
        float _1857 = _1755 * 0.5;
        float _1858 = dot(vec3(_1855, _1856, _1857), vec3(_1855, _1856, _1857));
        float _1863 = (_1858 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1858);
        float _1871 = (dot(vec3(_1442, _1443, _1444), vec3(_1863 * _1855, _1863 * _1856, _1863 * _1857)) + 1.0) * 0.5;
        float _5020 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1880 = sqrt(((_1856 * _1856) + (_1855 * _1855)) + (_1857 * _1857)) / (_1768 + 9.9999997473787516355514526367188e-06);
        float _5031 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1881 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
        float _1882 = _1881 * 2.0;
        float _1886 = (1.0 - _1881) / (_1881 + 1.0);
        float _5042 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1887 = isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0));
        float _1896 = ((((1.0 - _1887) * (_1882 + 2.0)) * exp2(log2(isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0))) * (_1882 + 1.0))) + _1887) * _1768;
        _1904 = _1735;
        _1906 = _1734;
        _1907 = _1733;
        _1908 = _1745;
        _1909 = _1744;
        _1910 = _1743;
        _1911 = _1755;
        _1912 = _1754;
        _1913 = _1753;
        _1914 = _1768;
        _1915 = _1767;
        _1916 = _1766;
        _1917 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)));
        _1918 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)));
        _1919 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0)));
    }
    else
    {
        _1904 = _1905;
        _1906 = _1905;
        _1907 = _1905;
        _1908 = _1905;
        _1909 = _1905;
        _1910 = _1905;
        _1911 = _1905;
        _1912 = _1905;
        _1913 = _1905;
        _1914 = _1905;
        _1915 = _1905;
        _1916 = _1905;
        _1917 = 0.0;
        _1918 = 0.0;
        _1919 = 0.0;
    }
    float _2212;
    float _2213;
    float _2214;
    float _2215;
    float _2216;
    float _2217;
    float _2218;
    float _2219;
    float _2220;
    float _2221;
    float _2222;
    float _2223;
    float _2224;
    float _2225;
    float _2226;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1945 = fma(_1580, cbModelParam._m0[30u].z, fma(_1576, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1572));
        float _1949 = fma(_1580, cbModelParam._m0[31u].z, fma(_1576, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1572));
        float _1953 = fma(_1580, cbModelParam._m0[32u].z, fma(_1576, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1572));
        float _1975 = _1572 + _1442;
        float _1976 = _1576 + _1443;
        float _1977 = _1580 + _1444;
        float _1987 = fma(_1977, cbModelParam._m0[30u].z, fma(_1976, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1975)) - _1945;
        float _1988 = fma(_1977, cbModelParam._m0[31u].z, fma(_1976, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1975)) - _1949;
        float _1989 = fma(_1977, cbModelParam._m0[32u].z, fma(_1976, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1975)) - _1953;
        float _1993 = inversesqrt(dot(vec3(_1987, _1988, _1989), vec3(_1987, _1988, _1989)));
        float _2005 = ((_1993 * _1987) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1945 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _2006 = ((_1993 * _1988) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1949 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _2007 = ((_1993 * _1989) / cbModelParam._m0[35u].z) + ((((((_1953 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _2009 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_2005, _2006, _2007), 0.0);
        vec4 _2016 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_2005, _2006, _2007), 0.0);
        vec4 _2023 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_2005, _2006, _2007), 0.0);
        vec4 _2030 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_2005, _2006, _2007), 0.0);
        float _2042 = exp2((_2009.w + (-0.5)) * 20.0) * 2.0;
        float _2043 = _2042 * (_2009.x + (-0.5));
        float _2044 = _2042 * (_2009.y + (-0.5));
        float _2045 = _2042 * (_2009.z + (-0.5));
        float _2052 = exp2((_2016.w + (-0.5)) * 20.0) * 2.0;
        float _2053 = _2052 * (_2016.x + (-0.5));
        float _2054 = _2052 * (_2016.y + (-0.5));
        float _2055 = _2052 * (_2016.z + (-0.5));
        float _2062 = exp2((_2023.w + (-0.5)) * 20.0) * 2.0;
        float _2063 = _2062 * (_2023.x + (-0.5));
        float _2064 = _2062 * (_2023.y + (-0.5));
        float _2065 = _2062 * (_2023.z + (-0.5));
        float _2072 = exp2((_2030.w + (-0.5)) * 20.0) * 2.0;
        float _2073 = _2072 * (_2030.x + (-0.5));
        float _2074 = _2072 * (_2030.y + (-0.5));
        float _2075 = _2072 * (_2030.z + (-0.5));
        float _2076 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2077 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2078 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2079 = _2043 * 0.5;
        float _2080 = _2053 * 0.5;
        float _2081 = _2063 * 0.5;
        float _2082 = dot(vec3(_2079, _2080, _2081), vec3(_2079, _2080, _2081));
        float _2087 = (_2082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2082);
        float _2095 = (dot(vec3(_1442, _1443, _1444), vec3(_2087 * _2079, _2087 * _2080, _2087 * _2081)) + 1.0) * 0.5;
        float _5083 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2104 = sqrt(((_2080 * _2080) + (_2079 * _2079)) + (_2081 * _2081)) / (_2076 + 9.9999997473787516355514526367188e-06);
        float _5094 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2105 = isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0));
        float _2106 = _2105 * 2.0;
        float _2110 = (1.0 - _2105) / (_2105 + 1.0);
        float _5105 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2111 = isnan(1.0) ? _5105 : (isnan(_5105) ? 1.0 : min(_5105, 1.0));
        float _2120 = ((((1.0 - _2111) * (_2106 + 2.0)) * exp2(log2(isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0))) * (_2106 + 1.0))) + _2111) * _2076;
        float _2121 = _2044 * 0.5;
        float _2122 = _2054 * 0.5;
        float _2123 = _2064 * 0.5;
        float _2124 = dot(vec3(_2121, _2122, _2123), vec3(_2121, _2122, _2123));
        float _2129 = (_2124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2124);
        float _2137 = (dot(vec3(_1442, _1443, _1444), vec3(_2129 * _2121, _2129 * _2122, _2129 * _2123)) + 1.0) * 0.5;
        float _5116 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2146 = sqrt(((_2122 * _2122) + (_2121 * _2121)) + (_2123 * _2123)) / (_2077 + 9.9999997473787516355514526367188e-06);
        float _5127 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2147 = isnan(1.0) ? _5127 : (isnan(_5127) ? 1.0 : min(_5127, 1.0));
        float _2148 = _2147 * 2.0;
        float _2152 = (1.0 - _2147) / (_2147 + 1.0);
        float _5138 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2153 = isnan(1.0) ? _5138 : (isnan(_5138) ? 1.0 : min(_5138, 1.0));
        float _2162 = ((((1.0 - _2153) * (_2148 + 2.0)) * exp2(log2(isnan(1.0) ? _5116 : (isnan(_5116) ? 1.0 : min(_5116, 1.0))) * (_2148 + 1.0))) + _2153) * _2077;
        float _2163 = _2045 * 0.5;
        float _2164 = _2055 * 0.5;
        float _2165 = _2065 * 0.5;
        float _2166 = dot(vec3(_2163, _2164, _2165), vec3(_2163, _2164, _2165));
        float _2171 = (_2166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2166);
        float _2179 = (dot(vec3(_1442, _1443, _1444), vec3(_2171 * _2163, _2171 * _2164, _2171 * _2165)) + 1.0) * 0.5;
        float _5149 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2188 = sqrt(((_2164 * _2164) + (_2163 * _2163)) + (_2165 * _2165)) / (_2078 + 9.9999997473787516355514526367188e-06);
        float _5160 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2189 = isnan(1.0) ? _5160 : (isnan(_5160) ? 1.0 : min(_5160, 1.0));
        float _2190 = _2189 * 2.0;
        float _2194 = (1.0 - _2189) / (_2189 + 1.0);
        float _5171 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2195 = isnan(1.0) ? _5171 : (isnan(_5171) ? 1.0 : min(_5171, 1.0));
        float _2204 = ((((1.0 - _2195) * (_2190 + 2.0)) * exp2(log2(isnan(1.0) ? _5149 : (isnan(_5149) ? 1.0 : min(_5149, 1.0))) * (_2190 + 1.0))) + _2195) * _2078;
        _2212 = _2045;
        _2213 = _2044;
        _2214 = _2043;
        _2215 = _2055;
        _2216 = _2054;
        _2217 = _2053;
        _2218 = _2065;
        _2219 = _2064;
        _2220 = _2063;
        _2221 = _2078;
        _2222 = _2077;
        _2223 = _2076;
        _2224 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0)));
        _2225 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0)));
        _2226 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0)));
    }
    else
    {
        _2212 = _1905;
        _2213 = _1905;
        _2214 = _1905;
        _2215 = _1905;
        _2216 = _1905;
        _2217 = _1905;
        _2218 = _1905;
        _2219 = _1905;
        _2220 = _1905;
        _2221 = _1905;
        _2222 = _1905;
        _2223 = _1905;
        _2224 = 0.0;
        _2225 = 0.0;
        _2226 = 0.0;
    }
    float _2236 = (cbModelParam._m0[1u].x * (_2224 - _1917)) + _1917;
    float _2237 = (cbModelParam._m0[1u].x * (_2225 - _1918)) + _1918;
    float _2238 = (cbModelParam._m0[1u].x * (_2226 - _1919)) + _1919;
    float _2259 = fma(_2238, cbSceneParam._m0[89u].z, fma(_2237, cbSceneParam._m0[89u].y, _2236 * cbSceneParam._m0[89u].x));
    float _2262 = fma(_2238, cbSceneParam._m0[90u].z, fma(_2237, cbSceneParam._m0[90u].y, _2236 * cbSceneParam._m0[90u].x));
    float _2265 = fma(_2238, cbSceneParam._m0[91u].z, fma(_2237, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2236));
    float _2278 = _1514 * 0.5;
    float _2279 = _1515 * 0.5;
    float _2280 = _1516 * 0.5;
    float _2281 = dot(vec4(_2278, _2279, _2280, 1.0), vec4(_2214, _2217, _2220, _2223));
    float _2284 = dot(vec4(_2278, _2279, _2280, 1.0), vec4(_2213, _2216, _2219, _2222));
    float _2287 = dot(vec4(_2278, _2279, _2280, 1.0), vec4(_2212, _2215, _2218, _2221));
    float _2321;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2294 = dot(vec4(_2278, _2279, _2280, 1.0), vec4(_1904, _1908, _1911, _1914));
        float _2298 = dot(vec4(_2278, _2279, _2280, 1.0), vec4(_1906, _1909, _1912, _1915));
        float _2302 = dot(vec4(_2278, _2279, _2280, 1.0), vec4(_1907, _1910, _1913, _1916));
        float _2309 = dot(vec4(cbModelParam._m0[39u]), vec4(_2278, _2279, _2280, 1.0));
        _2321 = dot(vec3(isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0)), isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0)), isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2309) ? 0.0 : (isnan(0.0) ? _2309 : max(0.0, _2309))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2321 = 1.0;
    }
    float _2332;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2323 = dot(vec4(cbModelParam._m0[40u]), vec4(_2278, _2279, _2280, 1.0));
        _2332 = dot(vec3(isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0)), isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0)), isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2323) ? 0.0 : (isnan(0.0) ? _2323 : max(0.0, _2323))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2332 = 1.0;
    }
    float _2336 = (_2332 * cbModelParam._m0[1u].x) + (_2321 * (1.0 - cbModelParam._m0[1u].x));
    float _2346 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1315);
    float _2347 = isnan(_2346) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2346 : min(cbModelParam._m0[25u].z, _2346));
    float _2427;
    float _2429;
    float _2431;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2394 = fma(_1580, cbModelParam._m0[13u].z, fma(_1576, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1572)) + cbModelParam._m0[13u].w;
        float _2398 = fma(_1580, cbModelParam._m0[14u].z, fma(_1576, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1572)) + cbModelParam._m0[14u].w;
        float _2402 = fma(_1580, cbModelParam._m0[15u].z, fma(_1576, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1572)) + cbModelParam._m0[15u].w;
        float _2405 = fma(_1516, cbModelParam._m0[13u].z, fma(_1515, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1514));
        float _2408 = fma(_1516, cbModelParam._m0[14u].z, fma(_1515, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1514));
        float _2411 = fma(_1516, cbModelParam._m0[15u].z, fma(_1515, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1514));
        float _2439;
        if (_2405 > 0.0)
        {
            _2439 = abs((1.0 - _2394) / _2405);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2405 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2394 + 1.0) / _2405);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2439 = frontier_phi_19_17_ladder;
        }
        float _2647;
        if (_2408 > 0.0)
        {
            _2647 = abs((1.0 - _2398) / _2408);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2408 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2398 + 1.0) / _2408);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2647 = frontier_phi_28_24_ladder;
        }
        float _2980;
        if (_2411 > 0.0)
        {
            _2980 = abs((1.0 - _2402) / _2411);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2411 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2402 + 1.0) / _2411);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2980 = frontier_phi_40_35_ladder;
        }
        float _2982 = isnan(_2647) ? _2439 : (isnan(_2439) ? _2647 : min(_2439, _2647));
        float _2983 = isnan(_2980) ? _2982 : (isnan(_2982) ? _2980 : min(_2982, _2980));
        float _2987 = (_2983 * _2405) + _2394;
        float _2988 = (_2983 * _2408) + _2398;
        float _2989 = (_2983 * _2411) + _2402;
        float _2990 = _2983 * 9.9999997473787516355514526367188e-05;
        float _2992 = (-1.0) - _2990;
        float _2994 = _2990 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2989 > _2994) || ((_2989 < _2992) || ((_2988 > _2994) || ((_2988 < _2992) || ((_2987 < _2992) || (_2987 > _2994))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3271 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2989, cbModelParam._m0[9u].z, fma(_2988, cbModelParam._m0[9u].y, _2987 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2989, cbModelParam._m0[10u].z, fma(_2988, cbModelParam._m0[10u].y, _2987 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2989, cbModelParam._m0[11u].z, fma(_2988, cbModelParam._m0[11u].y, _2987 * cbModelParam._m0[11u].x))), _2347);
            frontier_phi_18_40_ladder = _3271.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _3271.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _3271.x * cbModelParam._m0[1u].y;
        }
        _2427 = frontier_phi_18_40_ladder_2;
        _2429 = frontier_phi_18_40_ladder_1;
        _2431 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2415 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1514, _1515, _1516), _2347);
        _2427 = _2415.x * cbModelParam._m0[1u].y;
        _2429 = _2415.y * cbModelParam._m0[1u].y;
        _2431 = _2415.z * cbModelParam._m0[1u].y;
    }
    float _2435 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1315);
    float _2436 = isnan(_2435) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2435 : min(cbModelParam._m0[25u].w, _2435));
    float _2525;
    float _2527;
    float _2529;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2489 = fma(_1580, cbModelParam._m0[21u].z, fma(_1576, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1572)) + cbModelParam._m0[21u].w;
        float _2493 = fma(_1580, cbModelParam._m0[22u].z, fma(_1576, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1572)) + cbModelParam._m0[22u].w;
        float _2497 = fma(_1580, cbModelParam._m0[23u].z, fma(_1576, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1572)) + cbModelParam._m0[23u].w;
        float _2500 = fma(_1516, cbModelParam._m0[21u].z, fma(_1515, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1514));
        float _2503 = fma(_1516, cbModelParam._m0[22u].z, fma(_1515, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1514));
        float _2506 = fma(_1516, cbModelParam._m0[23u].z, fma(_1515, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1514));
        float _2652;
        if (_2500 > 0.0)
        {
            _2652 = abs((1.0 - _2489) / _2500);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2500 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2489 + 1.0) / _2500);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2652 = frontier_phi_30_26_ladder;
        }
        float _3007;
        if (_2503 > 0.0)
        {
            _3007 = abs((1.0 - _2493) / _2503);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2503 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2493 + 1.0) / _2503);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _3007 = frontier_phi_42_37_ladder;
        }
        float _3454;
        if (_2506 > 0.0)
        {
            _3454 = abs((1.0 - _2497) / _2506);
        }
        else
        {
            float frontier_phi_54_49_ladder;
            if (_2506 < 0.0)
            {
                frontier_phi_54_49_ladder = abs((_2497 + 1.0) / _2506);
            }
            else
            {
                frontier_phi_54_49_ladder = 5000.0;
            }
            _3454 = frontier_phi_54_49_ladder;
        }
        float _3456 = isnan(_3007) ? _2652 : (isnan(_2652) ? _3007 : min(_2652, _3007));
        float _3457 = isnan(_3454) ? _3456 : (isnan(_3456) ? _3454 : min(_3456, _3454));
        float _3461 = (_3457 * _2500) + _2489;
        float _3462 = (_3457 * _2503) + _2493;
        float _3463 = (_3457 * _2506) + _2497;
        float _3464 = _3457 * 9.9999997473787516355514526367188e-05;
        float _3465 = (-1.0) - _3464;
        float _3467 = _3464 + 1.0;
        float frontier_phi_27_54_ladder;
        float frontier_phi_27_54_ladder_1;
        float frontier_phi_27_54_ladder_2;
        if ((_3463 > _3467) || ((_3463 < _3465) || ((_3462 > _3467) || ((_3462 < _3465) || ((_3461 < _3465) || (_3461 > _3467))))))
        {
            frontier_phi_27_54_ladder = 0.0;
            frontier_phi_27_54_ladder_1 = 0.0;
            frontier_phi_27_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3674 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3463, cbModelParam._m0[17u].z, fma(_3462, cbModelParam._m0[17u].y, _3461 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3463, cbModelParam._m0[18u].z, fma(_3462, cbModelParam._m0[18u].y, _3461 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3463, cbModelParam._m0[19u].z, fma(_3462, cbModelParam._m0[19u].y, _3461 * cbModelParam._m0[19u].x))), _2436);
            frontier_phi_27_54_ladder = _3674.z * cbModelParam._m0[1u].z;
            frontier_phi_27_54_ladder_1 = _3674.y * cbModelParam._m0[1u].z;
            frontier_phi_27_54_ladder_2 = _3674.x * cbModelParam._m0[1u].z;
        }
        _2525 = frontier_phi_27_54_ladder_2;
        _2527 = frontier_phi_27_54_ladder_1;
        _2529 = frontier_phi_27_54_ladder;
    }
    else
    {
        vec4 _2509 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1514, _1515, _1516), _2436);
        _2525 = _2509.x * cbModelParam._m0[1u].z;
        _2527 = _2509.y * cbModelParam._m0[1u].z;
        _2529 = _2509.z * cbModelParam._m0[1u].z;
    }
    float _2541 = ((((1.0 - _1542) * ((_1530 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1542 * _1530)) * _1506;
    float _2542 = _2541 * ((cbModelParam._m0[1u].w * (_2525 - _2427)) + _2427);
    float _2543 = _2541 * ((cbModelParam._m0[1u].w * (_2527 - _2429)) + _2429);
    float _2544 = _2541 * ((cbModelParam._m0[1u].w * (_2529 - _2431)) + _2431);
    float _2547 = fma(_2544, cbSceneParam._m0[89u].z, fma(_2543, cbSceneParam._m0[89u].y, _2542 * cbSceneParam._m0[89u].x));
    float _2550 = fma(_2544, cbSceneParam._m0[90u].z, fma(_2543, cbSceneParam._m0[90u].y, _2542 * cbSceneParam._m0[90u].x));
    float _2553 = fma(_2544, cbSceneParam._m0[91u].z, fma(_2543, cbSceneParam._m0[91u].y, _2542 * cbSceneParam._m0[91u].x));
    float _2572 = (cbSceneParam._m0[88u].y * (1.0 - _1315)) + cbSceneParam._m0[88u].z;
    float _5297 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
    vec4 _2576 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(_1406, _1407), (isnan(1.0) ? _5297 : (isnan(_5297) ? 1.0 : min(_5297, 1.0))) * 5.0);
    float _2592 = 1.0 - _2576.w;
    float _2626 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2630 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2634 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2638 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2639 = _2626 / _2638;
    float _2640 = _2630 / _2638;
    float _2641 = _2634 / _2638;
    float _2784;
    float _2785;
    float _2786;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2668 = ((uint(_2641 > cbSceneParam._m0[59u].y) + uint(_2641 > cbSceneParam._m0[59u].x)) + uint(_2641 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2669 = _2668 + 43u;
        uint _2676 = _2668 + 44u;
        uint _2683 = _2668 + 45u;
        uint _2690 = _2668 + 46u;
        float _2701 = fma(_2638, cbSceneParam._m0[_2669].w, fma(_2634, cbSceneParam._m0[_2669].z, fma(_2630, cbSceneParam._m0[_2669].y, _2626 * cbSceneParam._m0[_2669].x)));
        float _2705 = fma(_2638, cbSceneParam._m0[_2676].w, fma(_2634, cbSceneParam._m0[_2676].z, fma(_2630, cbSceneParam._m0[_2676].y, _2626 * cbSceneParam._m0[_2676].x)));
        float _2713 = fma(_2638, cbSceneParam._m0[_2690].w, fma(_2634, cbSceneParam._m0[_2690].z, fma(_2630, cbSceneParam._m0[_2690].y, _2626 * cbSceneParam._m0[_2690].x)));
        float _2717 = cbSceneParam._m0[33u].z * _2713;
        float _2719 = cbSceneParam._m0[33u].w * _2713;
        float _2722 = fma(_2638, cbSceneParam._m0[_2683].w, fma(_2634, cbSceneParam._m0[_2683].z, fma(_2630, cbSceneParam._m0[_2683].y, _2626 * cbSceneParam._m0[_2683].x))) / _2713;
        float _2770 = (cbSceneParam._m0[33u].x - sqrt(((_2640 * _2640) + (_2639 * _2639)) + (_2641 * _2641))) * cbSceneParam._m0[33u].y;
        float _5308 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2777 = (isnan(1.0) ? _5308 : (isnan(_5308) ? 1.0 : min(_5308, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2717 + _2701) / _2713, (_2719 + _2705) / _2713), _2722), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2719 + _2701) / _2713, (_2705 - _2717) / _2713), _2722), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2701 - _2717) / _2713, (_2705 - _2719) / _2713), _2722), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2701 - _2719) / _2713, (_2717 + _2705) / _2713), _2722), 0.0)).x), vec4(0.25)));
        _2784 = 1.0 - (_2777 * cbSceneParam._m0[34u].x);
        _2785 = 1.0 - (_2777 * cbSceneParam._m0[34u].y);
        _2786 = 1.0 - (_2777 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2784 = 1.0;
        _2785 = 1.0;
        _2786 = 1.0;
    }
    float _2850;
    float _2852;
    float _2854;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2838 = fma(_2638, cbSceneParam._m0[63u].w, fma(_2634, cbSceneParam._m0[63u].z, fma(_2630, cbSceneParam._m0[63u].y, _2626 * cbSceneParam._m0[63u].x)));
        float _2839 = fma(_2638, cbSceneParam._m0[60u].w, fma(_2634, cbSceneParam._m0[60u].z, fma(_2630, cbSceneParam._m0[60u].y, _2626 * cbSceneParam._m0[60u].x))) / _2838;
        float _2840 = fma(_2638, cbSceneParam._m0[61u].w, fma(_2634, cbSceneParam._m0[61u].z, fma(_2630, cbSceneParam._m0[61u].y, _2626 * cbSceneParam._m0[61u].x))) / _2838;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2839 >= cbSceneParam._m0[64u].x) && (_2840 >= cbSceneParam._m0[64u].y)) && (_2839 <= cbSceneParam._m0[64u].z)) && (_2840 <= cbSceneParam._m0[64u].w))
        {
            float _3020 = fma(_2638, cbSceneParam._m0[62u].w, fma(_2634, cbSceneParam._m0[62u].z, fma(_2630, cbSceneParam._m0[62u].y, _2626 * cbSceneParam._m0[62u].x))) / _2838;
            float _3024 = isnan(cbSceneParam._m0[41u].w) ? _3020 : (isnan(_3020) ? cbSceneParam._m0[41u].w : max(_3020, cbSceneParam._m0[41u].w));
            float _3067 = (cbSceneParam._m0[33u].x - sqrt(((_2640 * _2640) + (_2639 * _2639)) + (_2641 * _2641))) * cbSceneParam._m0[33u].y;
            float _5324 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
            float _3074 = (isnan(1.0) ? _5324 : (isnan(_5324) ? 1.0 : min(_5324, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2839, cbSceneParam._m0[33u].w + _2840), _3024), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2839, _2840 - cbSceneParam._m0[33u].z), _3024), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2839 - cbSceneParam._m0[33u].z, _2840 - cbSceneParam._m0[33u].w), _3024), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2839 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2840), _3024), 0.0)).x), vec4(0.25)));
            float _3078 = 1.0 - (_3074 * cbSceneParam._m0[34u].x);
            float _3079 = 1.0 - (_3074 * cbSceneParam._m0[34u].y);
            float _3080 = 1.0 - (_3074 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_3080) ? _2786 : (isnan(_2786) ? _3080 : min(_2786, _3080));
            frontier_phi_39_38_ladder_1 = isnan(_3079) ? _2785 : (isnan(_2785) ? _3079 : min(_2785, _3079));
            frontier_phi_39_38_ladder_2 = isnan(_3078) ? _2784 : (isnan(_2784) ? _3078 : min(_2784, _3078));
        }
        else
        {
            frontier_phi_39_38_ladder = _2786;
            frontier_phi_39_38_ladder_1 = _2785;
            frontier_phi_39_38_ladder_2 = _2784;
        }
        _2850 = frontier_phi_39_38_ladder_2;
        _2852 = frontier_phi_39_38_ladder_1;
        _2854 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2850 = _2784;
        _2852 = _2785;
        _2854 = _2786;
    }
    uvec4 _2858 = floatBitsToUint(cbInstanceData._m0[_1252]);
    uint _2860 = _2858.x * 14u;
    float _2867 = (cbLight._m0[_2860 + 13u].x * (_1506 + (-1.0))) + 1.0;
    uint _2868 = _2860 + 4u;
    float _2877 = isnan(1.0) ? _2867 : (isnan(_2867) ? 1.0 : min(_2867, 1.0));
    float _2886 = dot(vec3(cbLight._m0[_2860].xyz), vec3(_1442, _1443, _1444));
    float _5355 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
    float _2890 = (isnan(1.0) ? _5355 : (isnan(_5355) ? 1.0 : min(_5355, 1.0))) * 0.3183098733425140380859375;
    float _2892 = ((cbLight._m0[_2868].x * _2850) * _2877) * _2890;
    float _2893 = ((cbLight._m0[_2868].y * _2852) * _2877) * _2890;
    float _2894 = ((cbLight._m0[_2868].z * _2854) * _2877) * _2890;
    uint _2896 = _2860 + 8u;
    float _2909 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2860].w)) * _1315) * 0.949999988079071044921875);
    float _2910 = _2909 * _2909;
    float _2911 = cbLight._m0[_2860].x + _1386;
    float _2912 = cbLight._m0[_2860].y + _1387;
    float _2913 = cbLight._m0[_2860].z + _1388;
    float _2917 = inversesqrt(dot(vec3(_2911, _2912, _2913), vec3(_2911, _2912, _2913)));
    float _2918 = _2917 * _2911;
    float _2919 = _2917 * _2912;
    float _2920 = _2917 * _2913;
    float _2921 = dot(vec3(_1442, _1443, _1444), vec3(cbLight._m0[_2860].xyz));
    float _5366 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
    float _2924 = isnan(1.0) ? _5366 : (isnan(_5366) ? 1.0 : min(_5366, 1.0));
    float _5377 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
    float _2925 = isnan(1.0) ? _5377 : (isnan(_5377) ? 1.0 : min(_5377, 1.0));
    float _2926 = dot(vec3(_1442, _1443, _1444), vec3(_2918, _2919, _2920));
    float _5388 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
    float _2929 = isnan(1.0) ? _5388 : (isnan(_5388) ? 1.0 : min(_5388, 1.0));
    float _2930 = dot(vec3(cbLight._m0[_2860].xyz), vec3(_2918, _2919, _2920));
    float _5399 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
    float _2934 = _2910 * _2910;
    float _2938 = ((_2929 * _2929) * (_2934 + (-1.0))) + 1.0;
    float _2948 = (exp2(log2(1.0 - (isnan(1.0) ? _5399 : (isnan(_5399) ? 1.0 : min(_5399, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2949 = 1.0 - _2910;
    float _2960 = (0.5 / (((_2925 * ((_2924 * _2949) + _2910)) + 9.9999999392252902907785028219223e-09) + (((_2925 * _2949) + _2910) * _2924))) * _2924;
    float _5410 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
    float _2962 = (isnan(1.0) ? _5410 : (isnan(_5410) ? 1.0 : min(_5410, 1.0))) * (_2934 / ((_2938 * _2938) * 3.141590118408203125));
    float _2966 = (((cbLight._m0[_2896].x * _2850) * _2948) * _2962) * _2877;
    float _2970 = (((cbLight._m0[_2896].y * _2852) * _2948) * _2962) * _2877;
    float _2974 = (((cbLight._m0[_2896].z * _2854) * _2948) * _2962) * _2877;
    float _3136;
    float _3138;
    float _3140;
    float _3142;
    float _3144;
    float _3146;
    if (_2858.y == 0u)
    {
        uvec4 _3092 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3093 = _3092.x;
        uint _3104 = uint((float(_3092.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1407) / _3093))) + floor(float(uint(cbSceneParam._m0[85u].x * _1406) / _3093)));
        float _3114 = (log2(_2641 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3115 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
        uint _3118 = uint(isnan(14.0) ? _3115 : (isnan(_3115) ? 14.0 : min(_3115, 14.0)));
        uvec4 _3123 = texelFetch(g_lightClusterGridBuffer, int(((_3118 << 2u) + (_3104 << 6u)) >> 2u));
        uint _3124 = _3123.x;
        uint _3125 = _3092.z;
        float _3280;
        float _3282;
        float _3284;
        float _3286;
        float _3288;
        float _3290;
        if (((((1u << ((_3125 >> 4u) & 15u)) + 4294967295u) & _3124) == 0u) || ((_3125 & 240u) == 0u))
        {
            _3280 = 0.0;
            _3282 = 0.0;
            _3284 = 0.0;
            _3286 = 0.0;
            _3288 = 0.0;
            _3290 = 0.0;
        }
        else
        {
            float _3281;
            float _3283;
            float _3285;
            float _3287;
            float _3289;
            float _3291;
            float _3512 = 0.0;
            float _3513 = 0.0;
            float _3514 = 0.0;
            float _3515 = 0.0;
            float _3516 = 0.0;
            float _3517 = 0.0;
            uint _3518 = 0u;
            uint _3527;
            bool _3528;
            for (;;)
            {
                _3527 = texelFetch(g_lightClassification, int((((_3118 << 5u) + (_3104 << 9u)) + (_3518 << 2u)) >> 2u)).x;
                _3528 = _3527 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3528)
                {
                    frontier_phi_63_pred = _3517;
                    frontier_phi_63_pred_1 = _3516;
                    frontier_phi_63_pred_2 = _3515;
                    frontier_phi_63_pred_3 = _3514;
                    frontier_phi_63_pred_4 = _3513;
                    frontier_phi_63_pred_5 = _3512;
                }
                else
                {
                    float _3764;
                    float _3765;
                    float _3766;
                    float _3767;
                    float _3768;
                    float _3769;
                    uint _3770;
                    _3764 = _3512;
                    _3765 = _3513;
                    _3766 = _3514;
                    _3767 = _3515;
                    _3768 = _3516;
                    _3769 = _3517;
                    _3770 = _3527;
                    float _3679;
                    float _3680;
                    float _3681;
                    float _3682;
                    float _3683;
                    float _3684;
                    for (;;)
                    {
                        uint _3774 = uint(findLSB(_3770)) + (_3518 << 5u);
                        uint _3771 = (_3770 + 4294967295u) & _3770;
                        uint _3776 = _3774 * 48u;
                        vec4 _3790 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3776)).x, texelFetch(g_PointLightRenderingBuffer, int(_3776 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3776 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3776 + 3u)).x));
                        uint _3796 = (_3774 * 48u) + 4u;
                        vec4 _3809 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3796)).x, texelFetch(g_PointLightRenderingBuffer, int(_3796 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3796 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3796 + 3u)).x));
                        uint _3815 = (_3774 * 48u) + 8u;
                        vec3 _3826 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3815)).x, texelFetch(g_PointLightRenderingBuffer, int(_3815 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3815 + 2u)).x));
                        float _3830 = _3790.x - _2639;
                        float _3831 = _3790.y - _2640;
                        float _3832 = _3790.z - _2641;
                        float _3833 = dot(vec3(_3830, _3831, _3832), vec3(_3830, _3831, _3832));
                        float _3836 = inversesqrt(_3833);
                        float _3837 = _3836 * _3830;
                        float _3838 = _3836 * _3831;
                        float _3839 = _3836 * _3832;
                        float _3840 = dot(vec3(_1463, _1466, _1469), vec3(_3837, _3838, _3839));
                        float _3845 = 1.0 - (_3833 * _3790.w);
                        float _5431 = isnan(0.0) ? _3845 : (isnan(_3845) ? 0.0 : max(_3845, 0.0));
                        float _3846 = isnan(1.0) ? _5431 : (isnan(_5431) ? 1.0 : min(_5431, 1.0));
                        float _3847 = sqrt(_3833) * _3809.w;
                        float _3850 = 1.39999997615814208984375 / (_3847 + 1.39999997615814208984375);
                        float _3851 = _3850 * _3850;
                        float _3854 = ((1.0 - _3851) * _3840) + _3851;
                        float _3857 = _3847 * _3847;
                        float _3861 = ((isnan(0.0) ? _3854 : (isnan(_3854) ? 0.0 : max(_3854, 0.0))) * _3846) / ((_3857 * 0.699999988079071044921875) + 1.0);
                        float _3865 = (-0.0) - _2639;
                        float _3866 = (-0.0) - _2640;
                        float _3867 = (-0.0) - _2641;
                        float _3871 = inversesqrt(dot(vec3(_3865, _3866, _3867), vec3(_3865, _3866, _3867)));
                        float _3872 = _3871 * _3865;
                        float _3873 = _3871 * _3866;
                        float _3874 = _3871 * _3867;
                        float _3881 = exp2(log2(1.0 / ((_3857 * 3.5) + 5.0)) * 0.25);
                        float _3882 = 1.0 - _1530;
                        float _3889 = sqrt(1.0 - ((1.0 - (_3882 * _3882)) * (1.0 - (_3881 * _3881))));
                        float _3890 = _3889 * _3889;
                        float _3891 = _3890 * _3890;
                        float _3892 = _3872 + _3837;
                        float _3893 = _3873 + _3838;
                        float _3894 = _3874 + _3839;
                        float _3898 = inversesqrt(dot(vec3(_3892, _3893, _3894), vec3(_3892, _3893, _3894)));
                        float _3902 = dot(vec3(_1463, _1466, _1469), vec3(_3872, _3873, _3874));
                        float _5447 = isnan(0.0) ? _3902 : (isnan(_3902) ? 0.0 : max(_3902, 0.0));
                        float _3905 = isnan(1.0) ? _5447 : (isnan(_5447) ? 1.0 : min(_5447, 1.0));
                        float _3906 = dot(vec3(_1463, _1466, _1469), vec3(_3898 * _3892, _3898 * _3893, _3898 * _3894));
                        float _5458 = isnan(0.0) ? _3906 : (isnan(_3906) ? 0.0 : max(_3906, 0.0));
                        float _3909 = isnan(1.0) ? _5458 : (isnan(_5458) ? 1.0 : min(_5458, 1.0));
                        float _3913 = ((_3909 * _3909) * (_3891 + (-1.0))) + 1.0;
                        float _3914 = _3850 * _3890;
                        float _3915 = _3914 * _3914;
                        float _3918 = ((1.0 - _3915) * _3840) + _3915;
                        float _5469 = isnan(0.0) ? _3918 : (isnan(_3918) ? 0.0 : max(_3918, 0.0));
                        float _3919 = isnan(1.0) ? _5469 : (isnan(_5469) ? 1.0 : min(_5469, 1.0));
                        float _3920 = 1.0 - _3890;
                        float _3930 = (0.5 / (((_3919 * ((_3905 * _3920) + _3890)) + 9.9999999392252902907785028219223e-09) + (((_3919 * _3920) + _3890) * _3905))) * _3919;
                        float _5480 = isnan(0.0) ? _3930 : (isnan(_3930) ? 0.0 : max(_3930, 0.0));
                        float _3941 = (((_3891 * 3.1415927410125732421875) * (isnan(1.0) ? _5480 : (isnan(_5480) ? 1.0 : min(_5480, 1.0)))) / ((_3913 * _3913) * ((_3857 * 2.1991131305694580078125) + 3.141590118408203125))) * _3846;
                        _3682 = (_3861 * _3809.x) + _3767;
                        _3683 = (_3861 * _3809.y) + _3768;
                        _3684 = (_3861 * _3809.z) + _3769;
                        _3679 = (_3941 * _3826.x) + _3764;
                        _3680 = (_3941 * _3826.y) + _3765;
                        _3681 = (_3941 * _3826.z) + _3766;
                        if (_3771 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3764 = _3679;
                            _3765 = _3680;
                            _3766 = _3681;
                            _3767 = _3682;
                            _3768 = _3683;
                            _3769 = _3684;
                            _3770 = _3771;
                        }
                    }
                    frontier_phi_63_pred = _3684;
                    frontier_phi_63_pred_1 = _3683;
                    frontier_phi_63_pred_2 = _3682;
                    frontier_phi_63_pred_3 = _3681;
                    frontier_phi_63_pred_4 = _3680;
                    frontier_phi_63_pred_5 = _3679;
                }
                _3291 = frontier_phi_63_pred;
                _3289 = frontier_phi_63_pred_1;
                _3287 = frontier_phi_63_pred_2;
                _3285 = frontier_phi_63_pred_3;
                _3283 = frontier_phi_63_pred_4;
                _3281 = frontier_phi_63_pred_5;
                uint _3519 = _3518 + 1u;
                if (_3519 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3512 = _3281;
                    _3513 = _3283;
                    _3514 = _3285;
                    _3515 = _3287;
                    _3516 = _3289;
                    _3517 = _3291;
                    _3518 = _3519;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3280 = _3281;
            _3282 = _3283;
            _3284 = _3285;
            _3286 = _3287;
            _3288 = _3289;
            _3290 = _3291;
        }
        uvec4 _3294 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3295 = _3294.z;
        uint _3297 = (_3295 >> 8u) & 15u;
        float _3480;
        float _3482;
        float _3484;
        float _3486;
        float _3488;
        float _3490;
        if (((4294967295u << _3297) & _3124) == 0u)
        {
            _3480 = _3280;
            _3482 = _3282;
            _3484 = _3284;
            _3486 = _3286;
            _3488 = _3288;
            _3490 = _3290;
        }
        else
        {
            float _3505 = inversesqrt(dot(vec3(_2639, _2640, _2641), vec3(_2639, _2640, _2641)));
            float _3506 = _3505 * _2639;
            float _3507 = _3505 * _2640;
            float _3508 = _3505 * _2641;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_3297 < ((_3295 >> 12u) & 15u))
            {
                float _3481;
                float _3483;
                float _3485;
                float _3487;
                float _3489;
                float _3491;
                float _3747 = _3280;
                float _3748 = _3282;
                float _3749 = _3284;
                float _3750 = _3286;
                float _3751 = _3288;
                float _3752 = _3290;
                uint _3753 = _3297;
                uint _3762;
                bool _3763;
                for (;;)
                {
                    _3762 = texelFetch(g_lightClassification, int((((_3118 << 5u) + (_3104 << 9u)) + (_3753 << 2u)) >> 2u)).x;
                    _3763 = _3762 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    float frontier_phi_75_pred_3;
                    float frontier_phi_75_pred_4;
                    float frontier_phi_75_pred_5;
                    if (_3763)
                    {
                        frontier_phi_75_pred = _3751;
                        frontier_phi_75_pred_1 = _3750;
                        frontier_phi_75_pred_2 = _3749;
                        frontier_phi_75_pred_3 = _3748;
                        frontier_phi_75_pred_4 = _3747;
                        frontier_phi_75_pred_5 = _3752;
                    }
                    else
                    {
                        float _3989;
                        float _3990;
                        float _3991;
                        float _3992;
                        float _3993;
                        float _3994;
                        float _4291;
                        float _4292;
                        float _4293;
                        float _4294;
                        float _4295;
                        float _4296;
                        float _4011 = _3747;
                        float _4012 = _3748;
                        float _4013 = _3749;
                        float _4014 = _3750;
                        float _4015 = _3751;
                        float _4016 = _3752;
                        uint _4017 = _3762;
                        uint _4018;
                        vec4 _4043;
                        float _4044;
                        vec4 _4059;
                        vec3 _4071;
                        vec4 _4086;
                        vec4 _4101;
                        float _4147;
                        bool _4148;
                        for (;;)
                        {
                            uint _4028 = ((_3753 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_4017));
                            _4018 = (_4017 + 4294967295u) & _4017;
                            uint _4030 = _4028 * 40u;
                            _4043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4030 + 3u)).x));
                            _4044 = _4043.w;
                            uint _4046 = (_4028 * 40u) + 4u;
                            _4059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4046 + 3u)).x));
                            uint _4061 = (_4028 * 40u) + 8u;
                            _4071 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_4061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4061 + 2u)).x));
                            uint _4073 = (_4028 * 40u) + 16u;
                            _4086 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4073 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4073 + 3u)).x));
                            uint _4088 = (_4028 * 40u) + 20u;
                            _4101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4088 + 3u)).x));
                            uint _4103 = (_4028 * 40u) + 24u;
                            vec4 _4116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4103 + 3u)).x));
                            uint _4122 = (_4028 * 40u) + 28u;
                            vec4 _4135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4122 + 3u)).x));
                            _4147 = fma(_2641, _4135.z, fma(_2640, _4135.y, _4135.x * _2639)) + _4135.w;
                            _4148 = !((fma(_2641, _4116.z, fma(_2640, _4116.y, _4116.x * _2639)) + _4116.w) <= 0.0);
                            float frontier_phi_84_pred;
                            float frontier_phi_84_pred_1;
                            float frontier_phi_84_pred_2;
                            float frontier_phi_84_pred_3;
                            float frontier_phi_84_pred_4;
                            float frontier_phi_84_pred_5;
                            if (_4148)
                            {
                                float _4175 = _4043.x - _2639;
                                float _4176 = _4043.y - _2640;
                                float _4177 = _4043.z - _2641;
                                float _4178 = dot(vec3(_4175, _4176, _4177), vec3(_4175, _4176, _4177));
                                float _4181 = inversesqrt(_4178);
                                float _4182 = _4181 * _4175;
                                float _4183 = _4181 * _4176;
                                float _4184 = _4181 * _4177;
                                float _4188 = 1.0 - (_4178 / (_4044 * _4044));
                                float _5491 = isnan(0.0) ? _4188 : (isnan(_4188) ? 0.0 : max(_4188, 0.0));
                                float _4189 = isnan(1.0) ? _5491 : (isnan(_5491) ? 1.0 : min(_5491, 1.0));
                                float _4193 = sqrt(_4178) * _4059.w;
                                float _4195 = 1.39999997615814208984375 / (_4193 + 1.39999997615814208984375);
                                float _4196 = _4195 * _4195;
                                float _4199 = ((1.0 - _4196) * dot(vec3(_4182, _4183, _4184), vec3(_1463, _1466, _1469))) + _4196;
                                float _4202 = _4193 * _4193;
                                float _4206 = (fma(_2641, _4086.z, fma(_2640, _4086.y, _4086.x * _2639)) + _4086.w) / _4147;
                                float _4207 = (fma(_2641, _4101.z, fma(_2640, _4101.y, _4101.x * _2639)) + _4101.w) / _4147;
                                float _4211 = 1.0 - dot(vec2(_4206, _4207), vec2(_4206, _4207));
                                float _5507 = isnan(0.0) ? _4211 : (isnan(_4211) ? 0.0 : max(_4211, 0.0));
                                float _4212 = isnan(1.0) ? _5507 : (isnan(_5507) ? 1.0 : min(_5507, 1.0));
                                float _4213 = _4212 * (((isnan(0.0) ? _4199 : (isnan(_4199) ? 0.0 : max(_4199, 0.0))) * _4189) / ((_4202 * 0.699999988079071044921875) + 1.0));
                                float _4225 = exp2(log2(1.0 / ((_4202 * 3.5) + 5.0)) * 0.25);
                                float _4226 = 1.0 - _1530;
                                float _4233 = sqrt(1.0 - ((1.0 - (_4226 * _4226)) * (1.0 - (_4225 * _4225))));
                                float _4234 = _4233 * _4233;
                                float _4235 = _4234 * _4234;
                                float _4236 = _4182 - _3506;
                                float _4237 = _4183 - _3507;
                                float _4238 = _4184 - _3508;
                                float _4242 = inversesqrt(dot(vec3(_4236, _4237, _4238), vec3(_4236, _4237, _4238)));
                                float _4246 = dot(vec3(_1463, _1466, _1469), vec3((-0.0) - _3506, (-0.0) - _3507, (-0.0) - _3508));
                                float _5518 = isnan(0.0) ? _4246 : (isnan(_4246) ? 0.0 : max(_4246, 0.0));
                                float _4249 = isnan(1.0) ? _5518 : (isnan(_5518) ? 1.0 : min(_5518, 1.0));
                                float _4250 = dot(vec3(_1463, _1466, _1469), vec3(_4242 * _4236, _4242 * _4237, _4242 * _4238));
                                float _5529 = isnan(0.0) ? _4250 : (isnan(_4250) ? 0.0 : max(_4250, 0.0));
                                float _4253 = isnan(1.0) ? _5529 : (isnan(_5529) ? 1.0 : min(_5529, 1.0));
                                float _4257 = ((_4253 * _4253) * (_4235 + (-1.0))) + 1.0;
                                float _4258 = _4195 * _4234;
                                float _4259 = _4258 * _4258;
                                float _4265 = ((1.0 - _4259) * dot(vec3(_1463, _1466, _1469), vec3(_4182, _4183, _4184))) + _4259;
                                float _5540 = isnan(0.0) ? _4265 : (isnan(_4265) ? 0.0 : max(_4265, 0.0));
                                float _4266 = isnan(1.0) ? _5540 : (isnan(_5540) ? 1.0 : min(_5540, 1.0));
                                float _4267 = 1.0 - _4234;
                                float _4277 = (0.5 / (((_4266 * ((_4249 * _4267) + _4234)) + 9.9999999392252902907785028219223e-09) + (((_4266 * _4267) + _4234) * _4249))) * _4266;
                                float _5551 = isnan(0.0) ? _4277 : (isnan(_4277) ? 0.0 : max(_4277, 0.0));
                                float _4287 = (_4212 * _4189) * (((_4235 * 3.1415927410125732421875) * (isnan(1.0) ? _5551 : (isnan(_5551) ? 1.0 : min(_5551, 1.0)))) / ((_4257 * _4257) * ((_4202 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_84_pred = _4213 * _4059.z;
                                frontier_phi_84_pred_1 = _4213 * _4059.y;
                                frontier_phi_84_pred_2 = _4213 * _4059.x;
                                frontier_phi_84_pred_3 = _4287 * _4071.z;
                                frontier_phi_84_pred_4 = _4287 * _4071.y;
                                frontier_phi_84_pred_5 = _4287 * _4071.x;
                            }
                            else
                            {
                                frontier_phi_84_pred = 0.0;
                                frontier_phi_84_pred_1 = 0.0;
                                frontier_phi_84_pred_2 = 0.0;
                                frontier_phi_84_pred_3 = 0.0;
                                frontier_phi_84_pred_4 = 0.0;
                                frontier_phi_84_pred_5 = 0.0;
                            }
                            _4296 = frontier_phi_84_pred;
                            _4295 = frontier_phi_84_pred_1;
                            _4294 = frontier_phi_84_pred_2;
                            _4293 = frontier_phi_84_pred_3;
                            _4292 = frontier_phi_84_pred_4;
                            _4291 = frontier_phi_84_pred_5;
                            _3992 = _4294 + _4014;
                            _3993 = _4295 + _4015;
                            _3994 = _4296 + _4016;
                            _3989 = _4291 + _4011;
                            _3990 = _4292 + _4012;
                            _3991 = _4293 + _4013;
                            if (_4018 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _4011 = _3989;
                                _4012 = _3990;
                                _4013 = _3991;
                                _4014 = _3992;
                                _4015 = _3993;
                                _4016 = _3994;
                                _4017 = _4018;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _3993;
                        frontier_phi_75_pred_1 = _3992;
                        frontier_phi_75_pred_2 = _3991;
                        frontier_phi_75_pred_3 = _3990;
                        frontier_phi_75_pred_4 = _3989;
                        frontier_phi_75_pred_5 = _3994;
                    }
                    _3489 = frontier_phi_75_pred;
                    _3487 = frontier_phi_75_pred_1;
                    _3485 = frontier_phi_75_pred_2;
                    _3483 = frontier_phi_75_pred_3;
                    _3481 = frontier_phi_75_pred_4;
                    _3491 = frontier_phi_75_pred_5;
                    uint _3754 = _3753 + 1u;
                    if (_3754 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3747 = _3481;
                        _3748 = _3483;
                        _3749 = _3485;
                        _3750 = _3487;
                        _3751 = _3489;
                        _3752 = _3491;
                        _3753 = _3754;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _3491;
                frontier_phi_56_57_ladder_1 = _3489;
                frontier_phi_56_57_ladder_2 = _3487;
                frontier_phi_56_57_ladder_3 = _3485;
                frontier_phi_56_57_ladder_4 = _3483;
                frontier_phi_56_57_ladder_5 = _3481;
            }
            else
            {
                frontier_phi_56_57_ladder = _3290;
                frontier_phi_56_57_ladder_1 = _3288;
                frontier_phi_56_57_ladder_2 = _3286;
                frontier_phi_56_57_ladder_3 = _3284;
                frontier_phi_56_57_ladder_4 = _3282;
                frontier_phi_56_57_ladder_5 = _3280;
            }
            _3480 = frontier_phi_56_57_ladder_5;
            _3482 = frontier_phi_56_57_ladder_4;
            _3484 = frontier_phi_56_57_ladder_3;
            _3486 = frontier_phi_56_57_ladder_2;
            _3488 = frontier_phi_56_57_ladder_1;
            _3490 = frontier_phi_56_57_ladder;
        }
        float _3495 = isnan(1.0) ? _1506 : (isnan(_1506) ? 1.0 : min(_1506, 1.0));
        _3136 = (_3495 * _3486) + _2892;
        _3138 = (_3495 * _3488) + _2893;
        _3140 = (_3495 * _3490) + _2894;
        _3142 = ((_3480 * 0.039999999105930328369140625) * _3495) + _2966;
        _3144 = ((_3482 * 0.039999999105930328369140625) * _3495) + _2970;
        _3146 = ((_3484 * 0.039999999105930328369140625) * _3495) + _2974;
    }
    else
    {
        _3136 = _2892;
        _3138 = _2893;
        _3140 = _2894;
        _3142 = _2966;
        _3144 = _2970;
        _3146 = _2974;
    }
    float _3160 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _3161 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _3162 = cbSceneParam._m0[86u].x * ((_1406 / cbSceneParam._m0[86u].x) + (((10.0 / (_1330 + 10.0)) * cbMtdParam._m0[12u].y) * dot(vec3(_1442, _1443, _1444), vec3(_236, _237, _238))));
    float _3163 = isnan(_3160) ? _3162 : (isnan(_3162) ? _3160 : min(_3162, _3160));
    float _3164 = isnan(_3161) ? _1407 : (isnan(_1407) ? _3161 : min(_1407, _3161));
    vec4 _3166 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_3163, _3164), 0.0);
    float _3168 = _3166.x;
    bool _3188 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3168)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3168))) > _1330;
    float _3189 = _3188 ? _3163 : _1406;
    float _3190 = _3188 ? _3164 : _1407;
    vec4 _3192 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_3189, _3190));
    vec4 _3197 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_3189, _3190));
    float _3199 = _3197.x;
    bool _3204 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _3213 = (-0.0) - cbSceneParam._m0[2u].z;
    float _3219 = (_3204 ? (_3213 / (cbSceneParam._m0[2u].x - _3199)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3199))) - _1330;
    float _3221 = cbMtdParam._m0[42u].x + cbMtdParam._m0[36u].x;
    float _3222 = cbMtdParam._m0[42u].y + cbMtdParam._m0[36u].y;
    float _3223 = cbMtdParam._m0[42u].z + cbMtdParam._m0[36u].z;
    bool _3229 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _3233 = (isnan(_3219) ? 0.0 : (isnan(0.0) ? _3219 : max(0.0, _3219))) * (-1.44269502162933349609375);
    float _5582 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
    float _5593 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
    float _5604 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
    float _3381;
    float _3382;
    float _3383;
    if ((1.0 - _1237) > 0.00999999977648258209228515625)
    {
        vec4 _3302 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_3189, _3190), 0.0);
        float _3304 = _3302.x;
        float _3310 = (_3204 ? (_3213 / (cbSceneParam._m0[2u].x - _3304)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3304))) - _1330;
        uint _3316 = floatBitsToUint(cbInstanceData._m0[_1252]).x * 14u;
        uint _3322 = _3316 + 4u;
        float _3331 = dot(vec3(cbLight._m0[_3316].xyz), vec3(_257, _258, _259));
        float _3338 = dot(vec3((-0.0) - _1386, (-0.0) - _1387, (-0.0) - _1388), vec3((-0.0) - _257, (-0.0) - _258, (-0.0) - _259));
        float _3343 = ((isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0))) / (isnan(0.001000000047497451305389404296875) ? _3331 : (isnan(_3331) ? 0.001000000047497451305389404296875 : max(_3331, 0.001000000047497451305389404296875)))) + 1.0;
        float _3345 = (-0.0) - ((isnan(_3310) ? 0.0 : (isnan(0.0) ? _3310 : max(0.0, _3310))) * _3343);
        _3381 = _3229 ? 0.0 : ((((_1296 * cbMtdParam._m0[36u].x) * cbLight._m0[_3322].x) / ((_3343 * _3221) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_3221 * 1.44269502162933349609375) * _3345)));
        _3382 = _3229 ? 0.0 : ((((_1296 * cbMtdParam._m0[36u].y) * cbLight._m0[_3322].y) / ((_3343 * _3222) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_3222 * 1.44269502162933349609375) * _3345)));
        _3383 = _3229 ? 0.0 : ((((_1296 * cbMtdParam._m0[36u].z) * cbLight._m0[_3322].z) / ((_3343 * _3223) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_3223 * 1.44269502162933349609375) * _3345)));
    }
    else
    {
        _3381 = 0.0;
        _3382 = 0.0;
        _3383 = 0.0;
    }
    float _3400 = 0.959999978542327880859375 - (exp2(log2(1.0 - _1521) * 5.0) * 0.959999978542327880859375);
    float _3401 = (_3381 + ((exp2(_3233 * (_3229 ? 0.0 : _3221)) * _3192.x) * cbSceneParam._m0[72u].w)) * _3400;
    float _3402 = (_3382 + ((exp2(_3233 * (_3229 ? 0.0 : _3222)) * _3192.y) * cbSceneParam._m0[72u].w)) * _3400;
    float _3403 = (_3383 + ((exp2(_3233 * (_3229 ? 0.0 : _3223)) * _3192.z) * cbSceneParam._m0[72u].w)) * _3400;
    float _3411 = (_3401 + (((((_2541 * _2576.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0))) * _2336) * _2592)) + _3142) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _5582 : (isnan(_5582) ? 1.0 : min(_5582, 1.0))) * (_3136 + ((isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0))) * _1506))) - _3401) * _1237);
    float _3413 = (_3402 + (((((_2541 * _2576.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0))) * _2336) * _2592)) + _3144) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _5593 : (isnan(_5593) ? 1.0 : min(_5593, 1.0))) * (_3138 + ((isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0))) * _1506))) - _3402) * _1237);
    float _3415 = (_3403 + (((((_2541 * _2576.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0))) * _2336) * _2592)) + _3146) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _5604 : (isnan(_5604) ? 1.0 : min(_5604, 1.0))) * (_3140 + ((isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0))) * _1506))) - _3403) * _1237);
    float _3420 = cbInstanceData._m0[_1251 + 6u].w * (isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0)));
    float _3425 = _1406 / cbSceneParam._m0[86u].x;
    float _3426 = _1407 / cbSceneParam._m0[86u].y;
    vec4 _3440 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3425, _3426, (log2((isnan(cbSceneParam._m0[77u].w) ? _1330 : (isnan(_1330) ? cbSceneParam._m0[77u].w : min(_1330, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3442 = _3440.x;
    float _3443 = _3440.y;
    float _3444 = _3440.z;
    float _3445 = _3440.w;
    float _3568;
    float _3570;
    float _3572;
    float _3574;
    if (_1330 > cbSceneParam._m0[78u].w)
    {
        float _3533 = isnan(_1330) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1330 : min(cbSceneParam._m0[80u].w, _1330));
        float _3534 = _3533 / _1330;
        float _3545 = _3534 * _1379;
        float _3546 = _1380 * _3534;
        float _3547 = (-0.0) - _3546;
        float _3548 = _3534 * _1381;
        float _3550 = (cbSceneParam._m0[77u].w * _3547) / _3533;
        float _3551 = _3550 + cbSceneParam._m0[79u].w;
        float _3552 = cbSceneParam._m0[79u].w - _3546;
        float _3558 = sqrt(((_3545 * _3545) + (_3546 * _3546)) + (_3548 * _3548));
        float _3561 = (1.0 - (cbSceneParam._m0[77u].w / _3533)) * _3558;
        float _3566 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3567 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3946;
        if (abs((_3547 - _3550) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3946 = ((((_3551 > 0.0) ? exp2(_3566 * _3551) : (2.0 - exp2(_3567 * _3551))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3561;
        }
        else
        {
            float _3704 = 1.0 / cbSceneParam._m0[80u].x;
            float _3705 = isnan(_3552) ? _3551 : (isnan(_3551) ? _3552 : max(_3551, _3552));
            float _3706 = isnan(_3552) ? _3551 : (isnan(_3551) ? _3552 : min(_3551, _3552));
            float _3715 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : min(_3705, 0.0));
            float _3716 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : min(_3706, 0.0));
            _3946 = ((abs(_3558 / _3547) * cbSceneParam._m0[80u].y) * ((((_3715 - _3716) * 2.0) - ((exp2(_3566 * (isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0)))) - exp2(_3566 * (isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0))))) * _3704)) - ((exp2(_3567 * _3715) - exp2(_3567 * _3716)) * _3704))) + (_3561 * cbSceneParam._m0[80u].z);
        }
        vec4 _3948 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3425, _3426, 1.0), 0.0);
        float _3957 = exp2((_3946 * (-1.44269502162933349609375)) * (1.0 - _3948.w));
        float _3958 = log2(_3957);
        float _3974 = log2(_3445);
        _3568 = (exp2(_3974 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3958 * cbSceneParam._m0[78u].x)) * _3948.x) / cbSceneParam._m0[78u].x)) + _3442;
        _3570 = (exp2(_3974 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3958 * cbSceneParam._m0[78u].y)) * _3948.y) / cbSceneParam._m0[78u].y)) + _3443;
        _3572 = (exp2(_3974 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3958 * cbSceneParam._m0[78u].z)) * _3948.z) / cbSceneParam._m0[78u].z)) + _3444;
        _3574 = _3957 * _3445;
    }
    else
    {
        _3568 = _3442;
        _3570 = _3443;
        _3572 = _3444;
        _3574 = _3445;
    }
    bool _3984;
    float _3629;
    vec4 _3632;
    float _3634;
    vec4 _3636;
    float _3644;
    float _3645;
    float _3646;
    float _3647;
    bool _3657;
    for (;;)
    {
        bool _3586 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _3587 = log2(_3574);
        float _3594 = exp2(_3587 * cbSceneParam._m0[78u].x) * _3411;
        float _3595 = exp2(_3587 * cbSceneParam._m0[78u].y) * _3413;
        float _3596 = exp2(_3587 * cbSceneParam._m0[78u].z) * _3415;
        vec4 _3604 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1406, _1407));
        float _3606 = _3604.x;
        float _3627 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3606)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3606))) - _1330) * cbMtdParam._m0[14u].w;
        float _5670 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
        _3629 = _3420 * (isnan(1.0) ? _5670 : (isnan(_5670) ? 1.0 : min(_5670, 1.0)));
        float _3630 = _1395 + (-0.5);
        _3632 = cbMtdParam._m0[1u];
        _3634 = _3632.y * _3630;
        _3636 = cbMatDynParam._m0[0u];
        float _3643 = (roundEven(_3636.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3644 = _3643 * (_3586 ? _3594 : (_3594 + (cbSceneParam._m0[72u].w * _3568)));
        _3645 = _3643 * (_3586 ? _3595 : (_3595 + (cbSceneParam._m0[72u].w * _3570)));
        _3646 = _3643 * (_3586 ? _3596 : (_3596 + (cbSceneParam._m0[72u].w * _3572)));
        _3647 = _3630 * 0.999000012874603271484375;
        _3657 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3657)
        {
            if ((cbInstanceData._m0[_1251 + 7u].x + _3647) < 0.5)
            {
                _3984 = true;
                break;
            }
        }
        uint _3739 = _1482 + uint(_3636.w);
        if ((cbInstanceData._m0[_3739].w < 1.0) && ((cbInstanceData._m0[_3739].w + _3647) < 0.5))
        {
            _3984 = true;
            break;
        }
        if ((_3634 + 1.0) < _3632.x)
        {
            _3984 = true;
            break;
        }
        _3984 = false;
        break;
    }
    float _4002;
    if (_3984)
    {
        discard_state = true;
        _4002 = 0.0;
    }
    else
    {
        _4002 = _3629;
    }
    SV_Target.x = _3644;
    SV_Target.y = _3645;
    SV_Target.z = _3646;
    SV_Target.w = _4002;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3629;
    discard_exit();
}


