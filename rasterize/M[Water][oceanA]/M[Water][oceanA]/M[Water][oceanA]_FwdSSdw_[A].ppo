#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[45];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_oceanA_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_oceanA_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_oceanA_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_oceanA_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_oceanA_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Water_oceanA_snp_0_Texture2D_5;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in vec4 TEXCOORD_8;
layout(location = 7) in float TEXCOORD_11;
layout(location = 7, component = 1) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1903;
float _4192;
float _4193;
float _4194;
float _4195;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _234 = _233 * _225;
    float _235 = _233 * _226;
    float _236 = _233 * _227;
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255;
    float _256;
    float _257;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _255 = (-0.0) - _241;
        _256 = (-0.0) - _242;
        _257 = (-0.0) - _243;
    }
    else
    {
        _255 = _241;
        _256 = _242;
        _257 = _243;
    }
    float _303 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _313 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _303);
    float _314 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _303);
    float _315 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _303);
    float _330 = cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x;
    vec4 _347 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_2, SS_BumpMap), vec2((((_330 * cbMtdParam._m0[27u].x) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_330 * cbMtdParam._m0[27u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _350 = _347.x;
    float _351 = _347.y;
    float _352 = _347.z;
    float _353 = _347.w;
    float _366 = cbMtdParam._m0[14u].y - cbMtdParam._m0[14u].x;
    float _369 = (sqrt(((_313 * _313) + (_314 * _314)) + (_315 * _315)) - cbMtdParam._m0[14u].x) / (isnan(0.001000000047497451305389404296875) ? _366 : (isnan(_366) ? 0.001000000047497451305389404296875 : max(_366, 0.001000000047497451305389404296875)));
    float _370 = _369 + 0.180000007152557373046875;
    float _372 = _370 * 12.0;
    float _4209 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _375 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    vec4 _387 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _389 = _387.x;
    float _411 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _389)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _389))) - POSITION_1.w;
    float _412 = _411 / ((_375 * 0.0599999986588954925537109375) + 0.0599999986588954925537109375);
    float _4220 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _413 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _414 = isnan(0.5) ? _413 : (isnan(_413) ? 0.5 : max(_413, 0.5));
    float _416 = 1.0 - _414;
    float _417 = _370 * 7.0;
    float _4236 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _419 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _430 = (_352 * 0.00200000009499490261077880859375) + TEXCOORD.x;
    float _431 = (_352 * 0.00999999977648258209228515625) + TEXCOORD.y;
    vec4 _445 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_3, SS_WrapLinear), vec2((((cbMtdParam._m0[25u].z * _330) + _430) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[25u].w * _330) + _431) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _447 = _445.x;
    float _469 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_3, SS_WrapLinear), vec2((((cbMtdParam._m0[23u].z * _430) + (cbMtdParam._m0[26u].z * _330)) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[23u].w * _431) + (cbMtdParam._m0[26u].w * _330)) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x + (-0.0500000007450580596923828125);
    float _472 = (isnan(_469) ? _447 : (isnan(_447) ? _469 : max(_447, _469))) - _419;
    float _4252 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _473 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _474 = _419 + 0.5;
    float _4263 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _485 = cbMtdParam._m0[16u].w * _330;
    float _486 = cos(_485);
    float _487 = sin(_485);
    vec4 _511 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2(((((_487 * cbMtdParam._m0[31u].x) + TEXCOORD.x) + (cbMtdParam._m0[22u].x * _330)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((_486 * cbMtdParam._m0[31u].y) + TEXCOORD.y) + (cbMtdParam._m0[22u].y * _330)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _515 = _511.z;
    vec4 _530 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[21u].z * _330) + TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[21u].w * _330) + TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _534 = _530.z;
    float _537 = (isnan(_534) ? _515 : (isnan(_515) ? _534 : max(_515, _534))) * (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)));
    float _4279 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _538 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
    float _541 = (_416 - _353) + (isnan(_538) ? _473 : (isnan(_473) ? _538 : max(_473, _538)));
    float _4295 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _542 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _543 = _542 * _414;
    float _4306 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _552 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _553 = _352 - _552;
    float _4317 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _554 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    vec4 _607 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[23u].x * _330) + (cbMtdParam._m0[30u].z * _487)) + (cbMtdParam._m0[34u].z * TEXCOORD.x)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[23u].y * _330) + (cbMtdParam._m0[30u].w * _486)) + (cbMtdParam._m0[34u].w * TEXCOORD.y)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _631 = cbMtdParam._m0[37u].w * TEXCOORD_5.x;
    float _687 = ((((((_607.w + (-0.5)) * cbMtdParam._m0[43u].w) + (cbMtdParam._m0[39u].y * (_511.w + (-0.5)))) + (cbMtdParam._m0[40u].x * (_530.w + (-0.5)))) + (((_631 + cbMtdParam._m0[41u].z) * cos(cbMtdParam._m0[13u].y * _330)) * (texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_5, SS_WrapLinear), vec2(((cbMtdParam._m0[32u].z * TEXCOORD.x) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, ((cbMtdParam._m0[32u].w * TEXCOORD.y) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w)).y + (-0.5)))) + ((sin(cbMtdParam._m0[13u].x * _330) * (cbMtdParam._m0[40u].w + _631)) * (texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_5, SS_WrapLinear), vec2(((cbMtdParam._m0[31u].z * TEXCOORD.x) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, ((cbMtdParam._m0[31u].w * TEXCOORD.y) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w)).y + (-0.5)))) * (1.0 - TEXCOORD_5.y);
    float _717 = 1.0 - _353;
    float _722 = ((isnan(0.550000011920928955078125) ? _717 : (isnan(_717) ? 0.550000011920928955078125 : max(_717, 0.550000011920928955078125))) + (-0.550000011920928955078125)) * cbMtdParam._m0[16u].z;
    float _725 = ((TEXCOORD_5.y * (-0.5)) * _722) + _722;
    float _729 = ((TEXCOORD_5.z * (-0.699999988079071044921875)) * _725) + _725;
    float _742 = (((_687 + ((cbMtdParam._m0[37u].x - (cbMtdParam._m0[37u].x * TEXCOORD_5.y)) * _352)) + ((texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[35u].z * TEXCOORD.x) + (cbMtdParam._m0[22u].z * _330)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[35u].w * TEXCOORD.y) + (cbMtdParam._m0[22u].w * _330)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).w + (-0.5)) * cbMtdParam._m0[44u].z)) + ((sin(cbMtdParam._m0[21u].y * _330) * cbMtdParam._m0[38u].z) * (isnan(0.300000011920928955078125) ? TEXCOORD_5.z : (isnan(TEXCOORD_5.z) ? 0.300000011920928955078125 : max(TEXCOORD_5.z, 0.300000011920928955078125))))) + _729;
    float _745 = (_742 + cbMtdParam._m0[20u].z) * cbMtdParam._m0[20u].w;
    float _4338 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _746 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _758 = inversesqrt(dot(vec3(_313, _314, _315), vec3(_313, _314, _315)));
    float _762 = dot(vec4(_758 * _313, _758 * _314, _758 * _315, 0.0), vec4(_255, _256, _257, 0.0));
    float _4349 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _770 = exp2(log2((1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * cbMtdParam._m0[12u].z) * cbMtdParam._m0[12u].w);
    float _4360 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _771 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
    float _775 = ((_543 + cbMtdParam._m0[9u].x) + (_554 * cbMtdParam._m0[10u].x)) + ((_746 * cbMtdParam._m0[11u].x) * _771);
    float _776 = ((_543 + cbMtdParam._m0[9u].y) + (_554 * cbMtdParam._m0[10u].y)) + ((_746 * cbMtdParam._m0[11u].y) * _771);
    float _777 = ((_543 + cbMtdParam._m0[9u].z) + (_554 * cbMtdParam._m0[10u].z)) + ((_746 * cbMtdParam._m0[11u].z) * _771);
    float _4371 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _778 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
    float _4382 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _788 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
    float _791 = (_375 * (-0.87999999523162841796875)) * _788;
    float _794 = (((((1.0 - _775) - _778) * _552) + _775) + _788) + _791;
    float _797 = (((((1.0 - _776) - _778) * _552) + _776) + _788) + _791;
    float _800 = (((((1.0 - _777) - _778) * _552) + _777) + _788) + _791;
    float _801 = _352 * 0.01200000010430812835693359375;
    float _826 = (_352 * 0.300000011920928955078125) * texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[35u].x * _330) + _801) + (cbMtdParam._m0[24u].x * TEXCOORD.x)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[35u].y * _330) + _801) + (cbMtdParam._m0[24u].y * TEXCOORD.y)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z;
    float _4393 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _827 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
    float _837 = (((1.0 - _794) * TEXCOORD_5.x) * _827) + _794;
    float _838 = (((1.0 - _797) * TEXCOORD_5.x) * _827) + _797;
    float _839 = (((1.0 - _800) * TEXCOORD_5.x) * _827) + _800;
    vec4 _873 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_4, SS_WrapLinear), vec2(((((cbMtdParam._m0[27u].z * _330) + (cbMtdParam._m0[30u].x * _487)) + (cbMtdParam._m0[29u].x * _430)) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, ((((cbMtdParam._m0[27u].w * _330) + (cbMtdParam._m0[30u].y * _486)) + (cbMtdParam._m0[29u].y * _431)) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _876 = _873.y;
    float _883 = 1.0 - (_411 / cbMtdParam._m0[18u].w);
    float _887 = ((_873.x * TEXCOORD_8.x) * cbMtdParam._m0[18u].z) * (isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0)));
    float _893 = _876 * TEXCOORD_8.y;
    float _896 = ((isnan(cbMtdParam._m0[19u].x) ? _893 : (isnan(_893) ? cbMtdParam._m0[19u].x : max(_893, cbMtdParam._m0[19u].x))) - cbMtdParam._m0[19u].x) * cbMtdParam._m0[19u].y;
    float _897 = isnan(_896) ? _887 : (isnan(_887) ? _896 : max(_887, _896));
    float _4419 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _898 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
    float _905 = (_898 * (1.0 - _837)) + _837;
    float _906 = (_898 * (1.0 - _838)) + _838;
    float _907 = (_898 * (1.0 - _839)) + _839;
    float _944 = exp2(log2(cbMtdParam._m0[15u].w * _717) * cbMtdParam._m0[17u].x);
    float _4430 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _945 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
    float _946 = _945 * texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_4, SS_WrapLinear), vec2(((((cbMtdParam._m0[28u].x * _330) + (cbMtdParam._m0[28u].z * _717)) + (cbMtdParam._m0[29u].z * _430)) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, ((((cbMtdParam._m0[28u].y * _330) + (cbMtdParam._m0[28u].w * _717)) + (cbMtdParam._m0[29u].w * _431)) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).z;
    float _949 = ((_945 - _946) * cbMtdParam._m0[17u].w) + _946;
    float _953 = _419 * TEXCOORD_8.z;
    float _960 = ((_953 * (1.0 - _905)) * _949) + _905;
    float _961 = ((_953 * (1.0 - _906)) * _949) + _906;
    float _962 = ((_953 * (1.0 - _907)) * _949) + _907;
    float _966 = 1.0 - (_411 / cbMtdParam._m0[18u].x);
    float _972 = (cbMtdParam._m0[18u].y * _876) * (isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0)));
    float _976 = (_972 * (1.0 - _960)) + _960;
    float _977 = (_972 * (1.0 - _961)) + _961;
    float _978 = (_972 * (1.0 - _962)) + _962;
    float _981 = _369 / cbMtdParam._m0[15u].y;
    float _4446 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _984 = (1.0 - (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0)))) * cbMtdParam._m0[15u].x;
    float _990 = _369 + 0.20000000298023223876953125;
    float _992 = _990 * 9.0;
    float _4457 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _997 = ((cbMtdParam._m0[13u].w - cbMtdParam._m0[12u].x) * (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) + cbMtdParam._m0[12u].x;
    float _1000 = (_369 + 0.099999986588954925537109375) * 2.5;
    float _4468 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1005 = ((cbMtdParam._m0[14u].z - _997) * (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) + _997;
    float _1006 = _976 + _542;
    float _4479 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1011 = ((0.3499999940395355224609375 - _1005) * (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) + _1005;
    float _1012 = TEXCOORD_5.z * 0.5;
    float _1024 = (_369 + 0.100000001490116119384765625) * 0.89999997615814208984375;
    float _4490 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1029 = ((cbMtdParam._m0[17u].y - cbMtdParam._m0[20u].x) * (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0)))) + cbMtdParam._m0[20u].x;
    float _1034 = (_1029 * (_350 + (-0.5))) + 0.5;
    float _1035 = (_1029 * (_351 + (-0.5))) + 0.5;
    float _4501 = isnan(0.0) ? TEXCOORD_5.y : (isnan(TEXCOORD_5.y) ? 0.0 : max(TEXCOORD_5.y, 0.0));
    float _1036 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
    vec4 _1066 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[26u].x * TEXCOORD.z) + (cbMtdParam._m0[32u].x * _330)) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[26u].y * TEXCOORD.w) + (cbMtdParam._m0[32u].y * _330)) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _1074 = ((_530.x + (-0.5)) * 0.5) + _511.x;
    float _1075 = ((_530.y + (-0.5)) * 0.5) + _511.y;
    vec4 _1099 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[24u].z * TEXCOORD.x) + (cbMtdParam._m0[25u].x * _330)) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[24u].w * TEXCOORD.y) + (cbMtdParam._m0[25u].y * _330)) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _1108 = _990 * 12.0;
    float _4512 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _1110 = 1.0 - (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0)));
    float _1124 = cbMtdParam._m0[33u].z * TEXCOORD.x;
    float _1125 = cbMtdParam._m0[33u].w * TEXCOORD.y;
    vec4 _1138 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2(((_1124 + (cbMtdParam._m0[33u].x * _330)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_1125 + (cbMtdParam._m0[33u].y * _330)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1159 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2((((_1124 + ((cbMtdParam._m0[27u].x * 0.4000000059604644775390625) * _554)) + (cbMtdParam._m0[34u].x * _330)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1125 + ((cbMtdParam._m0[27u].y * 0.4000000059604644775390625) * _554)) + (cbMtdParam._m0[34u].y * _330)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1173 = (((0.5 - _1074) * 0.10999999940395355224609375) + _1074) + (((((((_1099.z + (-0.5)) * cbMtdParam._m0[16u].x) * _1110) + (-1.0)) + _1138.x) + _1159.x) * cbMtdParam._m0[15u].z);
    float _1174 = (((0.5 - _1075) * 0.10999999940395355224609375) + _1075) + (((((((_1099.w + (-0.5)) * cbMtdParam._m0[16u].x) * _1110) + (-1.0)) + _1138.y) + _1159.y) * cbMtdParam._m0[15u].z);
    float _1179 = ((_1066.x - _1173) * _369) + _1173;
    float _1180 = ((_1066.y - _1174) * _369) + _1174;
    float _1181 = _369 * 0.5;
    float _4523 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
    float _1182 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
    float _1193 = cbMtdParam._m0[17u].z - (cbMtdParam._m0[17u].z * _729);
    float _1200 = cbMtdParam._m0[19u].z - (cbMtdParam._m0[19u].z * TEXCOORD_5.y);
    float _1202 = _1200 - (_1200 * _1182);
    float _1206 = (((((((0.5 - _350) * 0.60000002384185791015625) + _350) - _1034) * _1036) + _1034) + (_1202 * (_607.x + (-0.5)))) + (((_1179 + (-0.5)) + ((0.5 - _1179) * _1182)) * _1193);
    float _1208 = (((((((0.5 - _351) * 0.60000002384185791015625) + _351) - _1035) * _1036) + _1035) + (_1202 * (_607.y + (-0.5)))) + (((_1180 + (-0.5)) + ((0.5 - _1180) * _1182)) * _1193);
    float _1218 = (((_1012 * (0.5 - _1206)) + _1206) * 2.0) + (-1.0);
    float _1219 = (((_1012 * (0.5 - _1208)) + _1208) * 2.0) + (-1.0);
    float _1220 = dot(vec2(_1218, _1219), vec2(_1218, _1219));
    float _4534 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    float _1225 = sqrt(1.0 - (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))));
    float _1228 = _990 * 6.0;
    float _4545 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
    float _1231 = cbMtdParam._m0[16u].y * (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)));
    float _4556 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
    float _1232 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
    float _1235 = ((1.0 - _1232) * _1006) + _1232;
    uint _1249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1250 = _1249 + 5u;
    float _1261 = (-0.0) - _313;
    float _1262 = (-0.0) - _314;
    float _1263 = (-0.0) - _315;
    float _1267 = inversesqrt(dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263)));
    float _1271 = dot(vec3(_1267 * _1261, _1267 * _1262, _1267 * _1263), vec3(cbLight._m0[floatBitsToUint(cbInstanceData._m0[_1250]).x * 14u].xyz));
    float _1281 = 0.90999996662139892578125 / exp2(log2(1.091000080108642578125 - (_1271 * 0.60000002384185791015625)) * 1.5);
    float _1294 = ((((0.959999978542327880859375 / exp2(log2((_1271 * 0.4000000059604644775390625) + 1.04100000858306884765625) * 1.5)) - _1281) * 0.5) + _1281) * 0.079577468335628509521484375;
    float _1298 = fma(_1225, _255, fma(_1219, _247 * TANGENT.x, _1218 * _234));
    float _1301 = fma(_1225, _256, fma(_1219, _247 * TANGENT.y, _1218 * _235));
    float _1304 = fma(_1225, _257, fma(_1219, _247 * TANGENT.z, _1218 * _236));
    float _1308 = inversesqrt(dot(vec3(_1298, _1301, _1304), vec3(_1298, _1301, _1304)));
    float _1309 = _1308 * _1298;
    float _1310 = _1308 * _1301;
    float _1311 = _1308 * _1304;
    float _4567 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _4578 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _1313 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    float _4589 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _4600 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _4611 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _1328 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1368 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1377 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1368);
    float _1378 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1368);
    float _1379 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1368);
    float _1383 = inversesqrt(dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379)));
    float _1384 = _1377 * _1383;
    float _1385 = _1378 * _1383;
    float _1386 = _1379 * _1383;
    vec4 _1391 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1393 = _1391.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1588 = sqrt(((_1377 * _1377) + (_1378 * _1378)) + (_1379 * _1379));
        float _1594 = (cbMatDynParam._m0[5u].x * _1588) + cbMatDynParam._m0[5u].y;
        float _4622 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _1599 = (cbMatDynParam._m0[5u].z * _1588) + cbMatDynParam._m0[5u].w;
        float _4633 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) - _1595)) + _1595) < ((_1393 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1404 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1405 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1407 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD_11, TEXCOORD_12));
    float _1416 = (_1407.x * 2.0) + (-1.0);
    float _1417 = (_1407.y * 2.0) + (-1.0);
    float _1418 = (_1407.z * 2.0) + (-1.0);
    float _1422 = inversesqrt(dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418)));
    float _1433 = ((TEXCOORD_12 >= 1.0) || ((TEXCOORD_12 <= 0.0) || ((TEXCOORD_11 <= 0.0) || (TEXCOORD_11 >= 1.0)))) ? 0.0 : _1407.w;
    float _1440 = (((_1416 * _1422) - _1309) * _1433) + _1309;
    float _1441 = (((_1417 * _1422) - _1310) * _1433) + _1310;
    float _1442 = (((_1418 * _1422) - _1311) * _1433) + _1311;
    float _1461 = fma(_1442, cbSceneParam._m0[5u].z, fma(_1441, cbSceneParam._m0[5u].y, _1440 * cbSceneParam._m0[5u].x));
    float _1464 = fma(_1442, cbSceneParam._m0[6u].z, fma(_1441, cbSceneParam._m0[6u].y, _1440 * cbSceneParam._m0[6u].x));
    float _1467 = fma(_1442, cbSceneParam._m0[7u].z, fma(_1441, cbSceneParam._m0[7u].y, _1440 * cbSceneParam._m0[7u].x));
    uint _1480 = _1249 + 9u;
    uint _1481 = _1480 + uint(cbMatDynParam._m0[0u].w);
    float _1487 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) * cbInstanceData._m0[_1481].x;
    float _1488 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0)))) * cbInstanceData._m0[_1481].y;
    float _1489 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) * cbInstanceData._m0[_1481].z;
    float _4644 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
    float _1490 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
    float _4655 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
    float _1491 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
    float _4666 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
    float _1492 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
    vec4 _1501 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1404, cbSceneParam._m0[86u].y * _1405));
    float _1504 = _1501.x * TEXCOORD_5.w;
    float _1505 = dot(vec3(_1440, _1441, _1442), vec3(_1384, _1385, _1386));
    float _1508 = _1505 * 2.0;
    float _1512 = (_1508 * _1440) - _1384;
    float _1513 = (_1508 * _1441) - _1385;
    float _1514 = (_1508 * _1442) - _1386;
    float _1518 = abs(dot(vec3(_1384, _1385, _1386), vec3(_1440, _1441, _1442)));
    float _4677 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
    float _1519 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
    float _1528 = sqrt(_1313);
    float _1540 = exp2((_1528 * 5.0) * log2(1.0 - (_1519 * 0.999000012874603271484375))) / (4.0 - (_1528 * 3.0));
    float _1570 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1574 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1578 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1902;
    float _1904;
    float _1905;
    float _1906;
    float _1907;
    float _1908;
    float _1909;
    float _1910;
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1631 = fma(_1578, cbModelParam._m0[26u].z, fma(_1574, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1570));
        float _1635 = fma(_1578, cbModelParam._m0[27u].z, fma(_1574, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1570));
        float _1639 = fma(_1578, cbModelParam._m0[28u].z, fma(_1574, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1570));
        float _1661 = _1570 + _1440;
        float _1662 = _1574 + _1441;
        float _1663 = _1578 + _1442;
        float _1673 = fma(_1663, cbModelParam._m0[26u].z, fma(_1662, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1661)) - _1631;
        float _1674 = fma(_1663, cbModelParam._m0[27u].z, fma(_1662, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1661)) - _1635;
        float _1675 = fma(_1663, cbModelParam._m0[28u].z, fma(_1662, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1661)) - _1639;
        float _1679 = inversesqrt(dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675)));
        float _1691 = ((_1679 * _1673) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1631 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1692 = ((_1679 * _1674) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1635 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1693 = ((_1679 * _1675) / cbModelParam._m0[34u].z) + ((((((_1639 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1696 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1691, _1692, _1693), 0.0);
        vec4 _1703 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1691, _1692, _1693), 0.0);
        vec4 _1710 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1691, _1692, _1693), 0.0);
        vec4 _1717 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1691, _1692, _1693), 0.0);
        float _1730 = exp2((_1696.w + (-0.5)) * 20.0) * 2.0;
        float _1731 = _1730 * (_1696.x + (-0.5));
        float _1732 = _1730 * (_1696.y + (-0.5));
        float _1733 = _1730 * (_1696.z + (-0.5));
        float _1740 = exp2((_1703.w + (-0.5)) * 20.0) * 2.0;
        float _1741 = _1740 * (_1703.x + (-0.5));
        float _1742 = _1740 * (_1703.y + (-0.5));
        float _1743 = _1740 * (_1703.z + (-0.5));
        float _1750 = exp2((_1710.w + (-0.5)) * 20.0) * 2.0;
        float _1751 = _1750 * (_1710.x + (-0.5));
        float _1752 = _1750 * (_1710.y + (-0.5));
        float _1753 = _1750 * (_1710.z + (-0.5));
        float _1760 = exp2((_1717.w + (-0.5)) * 20.0) * 2.0;
        float _1761 = _1760 * (_1717.x + (-0.5));
        float _1762 = _1760 * (_1717.y + (-0.5));
        float _1763 = _1760 * (_1717.z + (-0.5));
        float _1764 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1765 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1766 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1767 = _1731 * 0.5;
        float _1768 = _1741 * 0.5;
        float _1769 = _1751 * 0.5;
        float _1770 = dot(vec3(_1767, _1768, _1769), vec3(_1767, _1768, _1769));
        float _1775 = (_1770 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1770);
        float _1784 = (dot(vec3(_1440, _1441, _1442), vec3(_1775 * _1767, _1775 * _1768, _1775 * _1769)) + 1.0) * 0.5;
        float _4703 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1794 = sqrt(((_1768 * _1768) + (_1767 * _1767)) + (_1769 * _1769)) / (_1764 + 9.9999997473787516355514526367188e-06);
        float _4714 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1795 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
        float _1796 = _1795 * 2.0;
        float _1800 = (1.0 - _1795) / (_1795 + 1.0);
        float _4725 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
        float _1810 = ((((1.0 - _1801) * (_1796 + 2.0)) * exp2(log2(isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * (_1796 + 1.0))) + _1801) * _1764;
        float _1811 = _1732 * 0.5;
        float _1812 = _1742 * 0.5;
        float _1813 = _1752 * 0.5;
        float _1814 = dot(vec3(_1811, _1812, _1813), vec3(_1811, _1812, _1813));
        float _1819 = (_1814 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1814);
        float _1827 = (dot(vec3(_1440, _1441, _1442), vec3(_1819 * _1811, _1819 * _1812, _1819 * _1813)) + 1.0) * 0.5;
        float _4736 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1836 = sqrt(((_1812 * _1812) + (_1811 * _1811)) + (_1813 * _1813)) / (_1765 + 9.9999997473787516355514526367188e-06);
        float _4747 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1837 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
        float _1838 = _1837 * 2.0;
        float _1842 = (1.0 - _1837) / (_1837 + 1.0);
        float _4758 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1843 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
        float _1852 = ((((1.0 - _1843) * (_1838 + 2.0)) * exp2(log2(isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0))) * (_1838 + 1.0))) + _1843) * _1765;
        float _1853 = _1733 * 0.5;
        float _1854 = _1743 * 0.5;
        float _1855 = _1753 * 0.5;
        float _1856 = dot(vec3(_1853, _1854, _1855), vec3(_1853, _1854, _1855));
        float _1861 = (_1856 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1856);
        float _1869 = (dot(vec3(_1440, _1441, _1442), vec3(_1861 * _1853, _1861 * _1854, _1861 * _1855)) + 1.0) * 0.5;
        float _4769 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1878 = sqrt(((_1854 * _1854) + (_1853 * _1853)) + (_1855 * _1855)) / (_1766 + 9.9999997473787516355514526367188e-06);
        float _4780 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1879 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
        float _1880 = _1879 * 2.0;
        float _1884 = (1.0 - _1879) / (_1879 + 1.0);
        float _4791 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1885 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
        float _1894 = ((((1.0 - _1885) * (_1880 + 2.0)) * exp2(log2(isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_1880 + 1.0))) + _1885) * _1766;
        _1902 = _1733;
        _1904 = _1732;
        _1905 = _1731;
        _1906 = _1743;
        _1907 = _1742;
        _1908 = _1741;
        _1909 = _1753;
        _1910 = _1752;
        _1911 = _1751;
        _1912 = _1766;
        _1913 = _1765;
        _1914 = _1764;
        _1915 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)));
        _1916 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0)));
        _1917 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0)));
    }
    else
    {
        _1902 = _1903;
        _1904 = _1903;
        _1905 = _1903;
        _1906 = _1903;
        _1907 = _1903;
        _1908 = _1903;
        _1909 = _1903;
        _1910 = _1903;
        _1911 = _1903;
        _1912 = _1903;
        _1913 = _1903;
        _1914 = _1903;
        _1915 = 0.0;
        _1916 = 0.0;
        _1917 = 0.0;
    }
    float _2210;
    float _2211;
    float _2212;
    float _2213;
    float _2214;
    float _2215;
    float _2216;
    float _2217;
    float _2218;
    float _2219;
    float _2220;
    float _2221;
    float _2222;
    float _2223;
    float _2224;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1943 = fma(_1578, cbModelParam._m0[30u].z, fma(_1574, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1570));
        float _1947 = fma(_1578, cbModelParam._m0[31u].z, fma(_1574, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1570));
        float _1951 = fma(_1578, cbModelParam._m0[32u].z, fma(_1574, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1570));
        float _1973 = _1570 + _1440;
        float _1974 = _1574 + _1441;
        float _1975 = _1578 + _1442;
        float _1985 = fma(_1975, cbModelParam._m0[30u].z, fma(_1974, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1973)) - _1943;
        float _1986 = fma(_1975, cbModelParam._m0[31u].z, fma(_1974, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1973)) - _1947;
        float _1987 = fma(_1975, cbModelParam._m0[32u].z, fma(_1974, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1973)) - _1951;
        float _1991 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
        float _2003 = ((_1991 * _1985) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1943 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _2004 = ((_1991 * _1986) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1947 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _2005 = ((_1991 * _1987) / cbModelParam._m0[35u].z) + ((((((_1951 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _2007 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_2003, _2004, _2005), 0.0);
        vec4 _2014 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_2003, _2004, _2005), 0.0);
        vec4 _2021 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_2003, _2004, _2005), 0.0);
        vec4 _2028 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_2003, _2004, _2005), 0.0);
        float _2040 = exp2((_2007.w + (-0.5)) * 20.0) * 2.0;
        float _2041 = _2040 * (_2007.x + (-0.5));
        float _2042 = _2040 * (_2007.y + (-0.5));
        float _2043 = _2040 * (_2007.z + (-0.5));
        float _2050 = exp2((_2014.w + (-0.5)) * 20.0) * 2.0;
        float _2051 = _2050 * (_2014.x + (-0.5));
        float _2052 = _2050 * (_2014.y + (-0.5));
        float _2053 = _2050 * (_2014.z + (-0.5));
        float _2060 = exp2((_2021.w + (-0.5)) * 20.0) * 2.0;
        float _2061 = _2060 * (_2021.x + (-0.5));
        float _2062 = _2060 * (_2021.y + (-0.5));
        float _2063 = _2060 * (_2021.z + (-0.5));
        float _2070 = exp2((_2028.w + (-0.5)) * 20.0) * 2.0;
        float _2071 = _2070 * (_2028.x + (-0.5));
        float _2072 = _2070 * (_2028.y + (-0.5));
        float _2073 = _2070 * (_2028.z + (-0.5));
        float _2074 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2075 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2076 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2077 = _2041 * 0.5;
        float _2078 = _2051 * 0.5;
        float _2079 = _2061 * 0.5;
        float _2080 = dot(vec3(_2077, _2078, _2079), vec3(_2077, _2078, _2079));
        float _2085 = (_2080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2080);
        float _2093 = (dot(vec3(_1440, _1441, _1442), vec3(_2085 * _2077, _2085 * _2078, _2085 * _2079)) + 1.0) * 0.5;
        float _4832 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2102 = sqrt(((_2078 * _2078) + (_2077 * _2077)) + (_2079 * _2079)) / (_2074 + 9.9999997473787516355514526367188e-06);
        float _4843 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2103 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
        float _2104 = _2103 * 2.0;
        float _2108 = (1.0 - _2103) / (_2103 + 1.0);
        float _4854 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2109 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
        float _2118 = ((((1.0 - _2109) * (_2104 + 2.0)) * exp2(log2(isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0))) * (_2104 + 1.0))) + _2109) * _2074;
        float _2119 = _2042 * 0.5;
        float _2120 = _2052 * 0.5;
        float _2121 = _2062 * 0.5;
        float _2122 = dot(vec3(_2119, _2120, _2121), vec3(_2119, _2120, _2121));
        float _2127 = (_2122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2122);
        float _2135 = (dot(vec3(_1440, _1441, _1442), vec3(_2127 * _2119, _2127 * _2120, _2127 * _2121)) + 1.0) * 0.5;
        float _4865 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2144 = sqrt(((_2120 * _2120) + (_2119 * _2119)) + (_2121 * _2121)) / (_2075 + 9.9999997473787516355514526367188e-06);
        float _4876 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2145 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
        float _2146 = _2145 * 2.0;
        float _2150 = (1.0 - _2145) / (_2145 + 1.0);
        float _4887 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2151 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
        float _2160 = ((((1.0 - _2151) * (_2146 + 2.0)) * exp2(log2(isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (_2146 + 1.0))) + _2151) * _2075;
        float _2161 = _2043 * 0.5;
        float _2162 = _2053 * 0.5;
        float _2163 = _2063 * 0.5;
        float _2164 = dot(vec3(_2161, _2162, _2163), vec3(_2161, _2162, _2163));
        float _2169 = (_2164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2164);
        float _2177 = (dot(vec3(_1440, _1441, _1442), vec3(_2169 * _2161, _2169 * _2162, _2169 * _2163)) + 1.0) * 0.5;
        float _4898 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2186 = sqrt(((_2162 * _2162) + (_2161 * _2161)) + (_2163 * _2163)) / (_2076 + 9.9999997473787516355514526367188e-06);
        float _4909 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2187 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
        float _2188 = _2187 * 2.0;
        float _2192 = (1.0 - _2187) / (_2187 + 1.0);
        float _4920 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2193 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
        float _2202 = ((((1.0 - _2193) * (_2188 + 2.0)) * exp2(log2(isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (_2188 + 1.0))) + _2193) * _2076;
        _2210 = _2043;
        _2211 = _2042;
        _2212 = _2041;
        _2213 = _2053;
        _2214 = _2052;
        _2215 = _2051;
        _2216 = _2063;
        _2217 = _2062;
        _2218 = _2061;
        _2219 = _2076;
        _2220 = _2075;
        _2221 = _2074;
        _2222 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0)));
        _2223 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0)));
        _2224 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0)));
    }
    else
    {
        _2210 = _1903;
        _2211 = _1903;
        _2212 = _1903;
        _2213 = _1903;
        _2214 = _1903;
        _2215 = _1903;
        _2216 = _1903;
        _2217 = _1903;
        _2218 = _1903;
        _2219 = _1903;
        _2220 = _1903;
        _2221 = _1903;
        _2222 = 0.0;
        _2223 = 0.0;
        _2224 = 0.0;
    }
    float _2234 = (cbModelParam._m0[1u].x * (_2222 - _1915)) + _1915;
    float _2235 = (cbModelParam._m0[1u].x * (_2223 - _1916)) + _1916;
    float _2236 = (cbModelParam._m0[1u].x * (_2224 - _1917)) + _1917;
    float _2257 = fma(_2236, cbSceneParam._m0[89u].z, fma(_2235, cbSceneParam._m0[89u].y, _2234 * cbSceneParam._m0[89u].x));
    float _2260 = fma(_2236, cbSceneParam._m0[90u].z, fma(_2235, cbSceneParam._m0[90u].y, _2234 * cbSceneParam._m0[90u].x));
    float _2263 = fma(_2236, cbSceneParam._m0[91u].z, fma(_2235, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2234));
    float _2276 = _1512 * 0.5;
    float _2277 = _1513 * 0.5;
    float _2278 = _1514 * 0.5;
    float _2279 = dot(vec4(_2276, _2277, _2278, 1.0), vec4(_2212, _2215, _2218, _2221));
    float _2282 = dot(vec4(_2276, _2277, _2278, 1.0), vec4(_2211, _2214, _2217, _2220));
    float _2285 = dot(vec4(_2276, _2277, _2278, 1.0), vec4(_2210, _2213, _2216, _2219));
    float _2319;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2292 = dot(vec4(_2276, _2277, _2278, 1.0), vec4(_1902, _1906, _1909, _1912));
        float _2296 = dot(vec4(_2276, _2277, _2278, 1.0), vec4(_1904, _1907, _1910, _1913));
        float _2300 = dot(vec4(_2276, _2277, _2278, 1.0), vec4(_1905, _1908, _1911, _1914));
        float _2307 = dot(vec4(cbModelParam._m0[39u]), vec4(_2276, _2277, _2278, 1.0));
        _2319 = dot(vec3(isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0)), isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0)), isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2307) ? 0.0 : (isnan(0.0) ? _2307 : max(0.0, _2307))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2319 = 1.0;
    }
    float _2330;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2321 = dot(vec4(cbModelParam._m0[40u]), vec4(_2276, _2277, _2278, 1.0));
        _2330 = dot(vec3(isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0)), isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0)), isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2321) ? 0.0 : (isnan(0.0) ? _2321 : max(0.0, _2321))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2330 = 1.0;
    }
    float _2334 = (_2330 * cbModelParam._m0[1u].x) + (_2319 * (1.0 - cbModelParam._m0[1u].x));
    float _2344 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1313);
    float _2345 = isnan(_2344) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2344 : min(cbModelParam._m0[25u].z, _2344));
    float _2425;
    float _2427;
    float _2429;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2392 = fma(_1578, cbModelParam._m0[13u].z, fma(_1574, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1570)) + cbModelParam._m0[13u].w;
        float _2396 = fma(_1578, cbModelParam._m0[14u].z, fma(_1574, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1570)) + cbModelParam._m0[14u].w;
        float _2400 = fma(_1578, cbModelParam._m0[15u].z, fma(_1574, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1570)) + cbModelParam._m0[15u].w;
        float _2403 = fma(_1514, cbModelParam._m0[13u].z, fma(_1513, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1512));
        float _2406 = fma(_1514, cbModelParam._m0[14u].z, fma(_1513, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1512));
        float _2409 = fma(_1514, cbModelParam._m0[15u].z, fma(_1513, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1512));
        float _2437;
        if (_2403 > 0.0)
        {
            _2437 = abs((1.0 - _2392) / _2403);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2403 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2392 + 1.0) / _2403);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2437 = frontier_phi_19_17_ladder;
        }
        float _2739;
        if (_2406 > 0.0)
        {
            _2739 = abs((1.0 - _2396) / _2406);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2406 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2396 + 1.0) / _2406);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2739 = frontier_phi_28_24_ladder;
        }
        float _3154;
        if (_2409 > 0.0)
        {
            _3154 = abs((1.0 - _2400) / _2409);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_2409 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_2400 + 1.0) / _2409);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _3154 = frontier_phi_42_35_ladder;
        }
        float _3156 = isnan(_2739) ? _2437 : (isnan(_2437) ? _2739 : min(_2437, _2739));
        float _3157 = isnan(_3154) ? _3156 : (isnan(_3156) ? _3154 : min(_3156, _3154));
        float _3161 = (_3157 * _2403) + _2392;
        float _3162 = (_3157 * _2406) + _2396;
        float _3163 = (_3157 * _2409) + _2400;
        float _3164 = _3157 * 9.9999997473787516355514526367188e-05;
        float _3166 = (-1.0) - _3164;
        float _3168 = _3164 + 1.0;
        float frontier_phi_18_42_ladder;
        float frontier_phi_18_42_ladder_1;
        float frontier_phi_18_42_ladder_2;
        if ((_3163 > _3168) || ((_3163 < _3166) || ((_3162 > _3168) || ((_3162 < _3166) || ((_3161 < _3166) || (_3161 > _3168))))))
        {
            frontier_phi_18_42_ladder = 0.0;
            frontier_phi_18_42_ladder_1 = 0.0;
            frontier_phi_18_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3380 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_3163, cbModelParam._m0[9u].z, fma(_3162, cbModelParam._m0[9u].y, _3161 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_3163, cbModelParam._m0[10u].z, fma(_3162, cbModelParam._m0[10u].y, _3161 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_3163, cbModelParam._m0[11u].z, fma(_3162, cbModelParam._m0[11u].y, _3161 * cbModelParam._m0[11u].x))), _2345);
            frontier_phi_18_42_ladder = _3380.z * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_1 = _3380.y * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_2 = _3380.x * cbModelParam._m0[1u].y;
        }
        _2425 = frontier_phi_18_42_ladder_2;
        _2427 = frontier_phi_18_42_ladder_1;
        _2429 = frontier_phi_18_42_ladder;
    }
    else
    {
        vec4 _2413 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1512, _1513, _1514), _2345);
        _2425 = _2413.x * cbModelParam._m0[1u].y;
        _2427 = _2413.y * cbModelParam._m0[1u].y;
        _2429 = _2413.z * cbModelParam._m0[1u].y;
    }
    float _2433 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1313);
    float _2434 = isnan(_2433) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2433 : min(cbModelParam._m0[25u].w, _2433));
    float _2523;
    float _2525;
    float _2527;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2487 = fma(_1578, cbModelParam._m0[21u].z, fma(_1574, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1570)) + cbModelParam._m0[21u].w;
        float _2491 = fma(_1578, cbModelParam._m0[22u].z, fma(_1574, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1570)) + cbModelParam._m0[22u].w;
        float _2495 = fma(_1578, cbModelParam._m0[23u].z, fma(_1574, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1570)) + cbModelParam._m0[23u].w;
        float _2498 = fma(_1514, cbModelParam._m0[21u].z, fma(_1513, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1512));
        float _2501 = fma(_1514, cbModelParam._m0[22u].z, fma(_1513, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1512));
        float _2504 = fma(_1514, cbModelParam._m0[23u].z, fma(_1513, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1512));
        float _2744;
        if (_2498 > 0.0)
        {
            _2744 = abs((1.0 - _2487) / _2498);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2498 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2487 + 1.0) / _2498);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2744 = frontier_phi_30_26_ladder;
        }
        float _3181;
        if (_2501 > 0.0)
        {
            _3181 = abs((1.0 - _2491) / _2501);
        }
        else
        {
            float frontier_phi_44_37_ladder;
            if (_2501 < 0.0)
            {
                frontier_phi_44_37_ladder = abs((_2491 + 1.0) / _2501);
            }
            else
            {
                frontier_phi_44_37_ladder = 5000.0;
            }
            _3181 = frontier_phi_44_37_ladder;
        }
        float _3457;
        if (_2504 > 0.0)
        {
            _3457 = abs((1.0 - _2495) / _2504);
        }
        else
        {
            float frontier_phi_61_53_ladder;
            if (_2504 < 0.0)
            {
                frontier_phi_61_53_ladder = abs((_2495 + 1.0) / _2504);
            }
            else
            {
                frontier_phi_61_53_ladder = 5000.0;
            }
            _3457 = frontier_phi_61_53_ladder;
        }
        float _3459 = isnan(_3181) ? _2744 : (isnan(_2744) ? _3181 : min(_2744, _3181));
        float _3460 = isnan(_3457) ? _3459 : (isnan(_3459) ? _3457 : min(_3459, _3457));
        float _3464 = (_3460 * _2498) + _2487;
        float _3465 = (_3460 * _2501) + _2491;
        float _3466 = (_3460 * _2504) + _2495;
        float _3467 = _3460 * 9.9999997473787516355514526367188e-05;
        float _3468 = (-1.0) - _3467;
        float _3470 = _3467 + 1.0;
        float frontier_phi_27_61_ladder;
        float frontier_phi_27_61_ladder_1;
        float frontier_phi_27_61_ladder_2;
        if ((_3466 > _3470) || ((_3466 < _3468) || ((_3465 > _3470) || ((_3465 < _3468) || ((_3464 < _3468) || (_3464 > _3470))))))
        {
            frontier_phi_27_61_ladder = 0.0;
            frontier_phi_27_61_ladder_1 = 0.0;
            frontier_phi_27_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3742 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3466, cbModelParam._m0[17u].z, fma(_3465, cbModelParam._m0[17u].y, _3464 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3466, cbModelParam._m0[18u].z, fma(_3465, cbModelParam._m0[18u].y, _3464 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3466, cbModelParam._m0[19u].z, fma(_3465, cbModelParam._m0[19u].y, _3464 * cbModelParam._m0[19u].x))), _2434);
            frontier_phi_27_61_ladder = _3742.y * cbModelParam._m0[1u].z;
            frontier_phi_27_61_ladder_1 = _3742.z * cbModelParam._m0[1u].z;
            frontier_phi_27_61_ladder_2 = _3742.x * cbModelParam._m0[1u].z;
        }
        _2523 = frontier_phi_27_61_ladder_2;
        _2525 = frontier_phi_27_61_ladder;
        _2527 = frontier_phi_27_61_ladder_1;
    }
    else
    {
        vec4 _2507 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1512, _1513, _1514), _2434);
        _2523 = _2507.x * cbModelParam._m0[1u].z;
        _2525 = _2507.y * cbModelParam._m0[1u].z;
        _2527 = _2507.z * cbModelParam._m0[1u].z;
    }
    float _2539 = ((((1.0 - _1540) * ((_1528 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1540 * _1528)) * _1504;
    float _2540 = _2539 * ((cbModelParam._m0[1u].w * (_2523 - _2425)) + _2425);
    float _2541 = _2539 * ((cbModelParam._m0[1u].w * (_2525 - _2427)) + _2427);
    float _2542 = _2539 * ((cbModelParam._m0[1u].w * (_2527 - _2429)) + _2429);
    float _2545 = fma(_2542, cbSceneParam._m0[89u].z, fma(_2541, cbSceneParam._m0[89u].y, _2540 * cbSceneParam._m0[89u].x));
    float _2548 = fma(_2542, cbSceneParam._m0[90u].z, fma(_2541, cbSceneParam._m0[90u].y, _2540 * cbSceneParam._m0[90u].x));
    float _2551 = fma(_2542, cbSceneParam._m0[91u].z, fma(_2541, cbSceneParam._m0[91u].y, _2540 * cbSceneParam._m0[91u].x));
    float _2570 = (cbSceneParam._m0[88u].y * (1.0 - _1313)) + cbSceneParam._m0[88u].z;
    float _5046 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    vec4 _2574 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(_1404, _1405), (isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0))) * 5.0);
    float _2590 = 1.0 - _2574.w;
    vec4 _2598 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1404, _1405));
    float _2600 = _2598.w;
    float _2612 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2600);
    float _2613 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2600);
    float _2614 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2600);
    uvec4 _2617 = floatBitsToUint(cbInstanceData._m0[_1250]);
    uint _2619 = _2617.x * 14u;
    float _2626 = (cbLight._m0[_2619 + 13u].x * (_1504 + (-1.0))) + 1.0;
    uint _2627 = _2619 + 4u;
    float _2636 = isnan(1.0) ? _2626 : (isnan(_2626) ? 1.0 : min(_2626, 1.0));
    float _2645 = dot(vec3(cbLight._m0[_2619].xyz), vec3(_1440, _1441, _1442));
    float _5062 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2649 = (isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0))) * 0.3183098733425140380859375;
    float _2651 = ((cbLight._m0[_2627].x * _2612) * _2636) * _2649;
    float _2652 = ((cbLight._m0[_2627].y * _2613) * _2636) * _2649;
    float _2653 = ((cbLight._m0[_2627].z * _2614) * _2636) * _2649;
    uint _2655 = _2619 + 8u;
    float _2668 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2619].w)) * _1313) * 0.949999988079071044921875);
    float _2669 = _2668 * _2668;
    float _2670 = cbLight._m0[_2619].x + _1384;
    float _2671 = cbLight._m0[_2619].y + _1385;
    float _2672 = cbLight._m0[_2619].z + _1386;
    float _2676 = inversesqrt(dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672)));
    float _2677 = _2676 * _2670;
    float _2678 = _2676 * _2671;
    float _2679 = _2676 * _2672;
    float _2680 = dot(vec3(_1440, _1441, _1442), vec3(cbLight._m0[_2619].xyz));
    float _5073 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
    float _2683 = isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0));
    float _5084 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
    float _2684 = isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0));
    float _2685 = dot(vec3(_1440, _1441, _1442), vec3(_2677, _2678, _2679));
    float _5095 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
    float _2688 = isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0));
    float _2689 = dot(vec3(cbLight._m0[_2619].xyz), vec3(_2677, _2678, _2679));
    float _5106 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
    float _2693 = _2669 * _2669;
    float _2697 = ((_2688 * _2688) * (_2693 + (-1.0))) + 1.0;
    float _2707 = (exp2(log2(1.0 - (isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2708 = 1.0 - _2669;
    float _2719 = (0.5 / (((_2684 * ((_2683 * _2708) + _2669)) + 9.9999999392252902907785028219223e-09) + (((_2684 * _2708) + _2669) * _2683))) * _2683;
    float _5117 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
    float _2721 = (isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0))) * (_2693 / ((_2697 * _2697) * 3.141590118408203125));
    float _2725 = (((cbLight._m0[_2655].x * _2612) * _2707) * _2721) * _2636;
    float _2729 = (((cbLight._m0[_2655].y * _2613) * _2707) * _2721) * _2636;
    float _2733 = (((cbLight._m0[_2655].z * _2614) * _2707) * _2721) * _2636;
    float _2847;
    float _2849;
    float _2851;
    float _2853;
    float _2855;
    float _2857;
    if (_2617.y == 0u)
    {
        float _2788 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2789 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2788;
        float _2790 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2788;
        float _2791 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2788;
        uvec4 _2803 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2804 = _2803.x;
        uint _2815 = uint((float(_2803.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1405) / _2804))) + floor(float(uint(cbSceneParam._m0[85u].x * _1404) / _2804)));
        float _2825 = (log2(_2791 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2826 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        uint _2829 = uint(isnan(14.0) ? _2826 : (isnan(_2826) ? 14.0 : min(_2826, 14.0)));
        uvec4 _2834 = texelFetch(g_lightClusterGridBuffer, int(((_2829 << 2u) + (_2815 << 6u)) >> 2u));
        uint _2835 = _2834.x;
        uint _2836 = _2803.z;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        if (((((1u << ((_2836 >> 4u) & 15u)) + 4294967295u) & _2835) == 0u) || ((_2836 & 240u) == 0u))
        {
            _2980 = 0.0;
            _2982 = 0.0;
            _2984 = 0.0;
            _2986 = 0.0;
            _2988 = 0.0;
            _2990 = 0.0;
        }
        else
        {
            float _2981;
            float _2983;
            float _2985;
            float _2987;
            float _2989;
            float _2991;
            float _3218 = 0.0;
            float _3219 = 0.0;
            float _3220 = 0.0;
            float _3221 = 0.0;
            float _3222 = 0.0;
            float _3223 = 0.0;
            uint _3224 = 0u;
            uint _3233;
            bool _3234;
            for (;;)
            {
                _3233 = texelFetch(g_lightClassification, int((((_2829 << 5u) + (_2815 << 9u)) + (_3224 << 2u)) >> 2u)).x;
                _3234 = _3233 == 0u;
                float frontier_phi_55_pred;
                float frontier_phi_55_pred_1;
                float frontier_phi_55_pred_2;
                float frontier_phi_55_pred_3;
                float frontier_phi_55_pred_4;
                float frontier_phi_55_pred_5;
                if (_3234)
                {
                    frontier_phi_55_pred = _3222;
                    frontier_phi_55_pred_1 = _3223;
                    frontier_phi_55_pred_2 = _3221;
                    frontier_phi_55_pred_3 = _3220;
                    frontier_phi_55_pred_4 = _3219;
                    frontier_phi_55_pred_5 = _3218;
                }
                else
                {
                    float _3500;
                    float _3501;
                    float _3502;
                    float _3503;
                    float _3504;
                    float _3505;
                    uint _3506;
                    _3500 = _3218;
                    _3501 = _3219;
                    _3502 = _3220;
                    _3503 = _3221;
                    _3504 = _3222;
                    _3505 = _3223;
                    _3506 = _3233;
                    float _3389;
                    float _3390;
                    float _3391;
                    float _3392;
                    float _3393;
                    float _3394;
                    for (;;)
                    {
                        uint _3510 = uint(findLSB(_3506)) + (_3224 << 5u);
                        uint _3507 = (_3506 + 4294967295u) & _3506;
                        uint _3512 = _3510 * 48u;
                        vec4 _3526 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3512)).x, texelFetch(g_PointLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3512 + 3u)).x));
                        uint _3532 = (_3510 * 48u) + 4u;
                        vec4 _3545 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3532)).x, texelFetch(g_PointLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3532 + 3u)).x));
                        uint _3551 = (_3510 * 48u) + 8u;
                        vec3 _3562 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3551)).x, texelFetch(g_PointLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3551 + 2u)).x));
                        float _3566 = _3526.x - _2789;
                        float _3567 = _3526.y - _2790;
                        float _3568 = _3526.z - _2791;
                        float _3569 = dot(vec3(_3566, _3567, _3568), vec3(_3566, _3567, _3568));
                        float _3572 = inversesqrt(_3569);
                        float _3573 = _3572 * _3566;
                        float _3574 = _3572 * _3567;
                        float _3575 = _3572 * _3568;
                        float _3576 = dot(vec3(_1461, _1464, _1467), vec3(_3573, _3574, _3575));
                        float _3581 = 1.0 - (_3569 * _3526.w);
                        float _5138 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                        float _3582 = isnan(1.0) ? _5138 : (isnan(_5138) ? 1.0 : min(_5138, 1.0));
                        float _3583 = sqrt(_3569) * _3545.w;
                        float _3586 = 1.39999997615814208984375 / (_3583 + 1.39999997615814208984375);
                        float _3587 = _3586 * _3586;
                        float _3590 = ((1.0 - _3587) * _3576) + _3587;
                        float _3593 = _3583 * _3583;
                        float _3597 = ((isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0))) * _3582) / ((_3593 * 0.699999988079071044921875) + 1.0);
                        float _3601 = (-0.0) - _2789;
                        float _3602 = (-0.0) - _2790;
                        float _3603 = (-0.0) - _2791;
                        float _3607 = inversesqrt(dot(vec3(_3601, _3602, _3603), vec3(_3601, _3602, _3603)));
                        float _3608 = _3607 * _3601;
                        float _3609 = _3607 * _3602;
                        float _3610 = _3607 * _3603;
                        float _3618 = exp2(log2(1.0 / ((_3593 * 3.5) + 5.0)) * 0.25);
                        float _3619 = 1.0 - _1528;
                        float _3626 = sqrt(1.0 - ((1.0 - (_3619 * _3619)) * (1.0 - (_3618 * _3618))));
                        float _3627 = _3626 * _3626;
                        float _3628 = _3627 * _3627;
                        float _3629 = _3608 + _3573;
                        float _3630 = _3609 + _3574;
                        float _3631 = _3610 + _3575;
                        float _3635 = inversesqrt(dot(vec3(_3629, _3630, _3631), vec3(_3629, _3630, _3631)));
                        float _3639 = dot(vec3(_1461, _1464, _1467), vec3(_3608, _3609, _3610));
                        float _5154 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                        float _3642 = isnan(1.0) ? _5154 : (isnan(_5154) ? 1.0 : min(_5154, 1.0));
                        float _3643 = dot(vec3(_1461, _1464, _1467), vec3(_3635 * _3629, _3635 * _3630, _3635 * _3631));
                        float _5165 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                        float _3646 = isnan(1.0) ? _5165 : (isnan(_5165) ? 1.0 : min(_5165, 1.0));
                        float _3650 = ((_3646 * _3646) * (_3628 + (-1.0))) + 1.0;
                        float _3651 = _3586 * _3627;
                        float _3652 = _3651 * _3651;
                        float _3655 = ((1.0 - _3652) * _3576) + _3652;
                        float _5176 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                        float _3656 = isnan(1.0) ? _5176 : (isnan(_5176) ? 1.0 : min(_5176, 1.0));
                        float _3657 = 1.0 - _3627;
                        float _3667 = (0.5 / (((_3656 * ((_3642 * _3657) + _3627)) + 9.9999999392252902907785028219223e-09) + (((_3656 * _3657) + _3627) * _3642))) * _3656;
                        float _5187 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                        float _3678 = (((_3628 * 3.1415927410125732421875) * (isnan(1.0) ? _5187 : (isnan(_5187) ? 1.0 : min(_5187, 1.0)))) / ((_3650 * _3650) * ((_3593 * 2.1991131305694580078125) + 3.141590118408203125))) * _3582;
                        _3392 = (_3597 * _3545.x) + _3503;
                        _3393 = (_3597 * _3545.y) + _3504;
                        _3394 = (_3597 * _3545.z) + _3505;
                        _3389 = (_3678 * _3562.x) + _3500;
                        _3390 = (_3678 * _3562.y) + _3501;
                        _3391 = (_3678 * _3562.z) + _3502;
                        if (_3507 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3500 = _3389;
                            _3501 = _3390;
                            _3502 = _3391;
                            _3503 = _3392;
                            _3504 = _3393;
                            _3505 = _3394;
                            _3506 = _3507;
                        }
                    }
                    frontier_phi_55_pred = _3393;
                    frontier_phi_55_pred_1 = _3394;
                    frontier_phi_55_pred_2 = _3392;
                    frontier_phi_55_pred_3 = _3391;
                    frontier_phi_55_pred_4 = _3390;
                    frontier_phi_55_pred_5 = _3389;
                }
                _2989 = frontier_phi_55_pred;
                _2991 = frontier_phi_55_pred_1;
                _2987 = frontier_phi_55_pred_2;
                _2985 = frontier_phi_55_pred_3;
                _2983 = frontier_phi_55_pred_4;
                _2981 = frontier_phi_55_pred_5;
                uint _3225 = _3224 + 1u;
                if (_3225 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3218 = _2981;
                    _3219 = _2983;
                    _3220 = _2985;
                    _3221 = _2987;
                    _3222 = _2989;
                    _3223 = _2991;
                    _3224 = _3225;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2980 = _2981;
            _2982 = _2983;
            _2984 = _2985;
            _2986 = _2987;
            _2988 = _2989;
            _2990 = _2991;
        }
        uvec4 _2994 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2995 = _2994.z;
        uint _2997 = (_2995 >> 8u) & 15u;
        float _3186;
        float _3188;
        float _3190;
        float _3192;
        float _3194;
        float _3196;
        if (((4294967295u << _2997) & _2835) == 0u)
        {
            _3186 = _2980;
            _3188 = _2982;
            _3190 = _2984;
            _3192 = _2986;
            _3194 = _2988;
            _3196 = _2990;
        }
        else
        {
            float _3211 = inversesqrt(dot(vec3(_2789, _2790, _2791), vec3(_2789, _2790, _2791)));
            float _3212 = _3211 * _2789;
            float _3213 = _3211 * _2790;
            float _3214 = _3211 * _2791;
            float frontier_phi_46_47_ladder;
            float frontier_phi_46_47_ladder_1;
            float frontier_phi_46_47_ladder_2;
            float frontier_phi_46_47_ladder_3;
            float frontier_phi_46_47_ladder_4;
            float frontier_phi_46_47_ladder_5;
            if (_2997 < ((_2995 >> 12u) & 15u))
            {
                float _3187;
                float _3189;
                float _3191;
                float _3193;
                float _3195;
                float _3197;
                float _3483 = _2980;
                float _3484 = _2982;
                float _3485 = _2984;
                float _3486 = _2986;
                float _3487 = _2988;
                float _3488 = _2990;
                uint _3489 = _2997;
                uint _3498;
                bool _3499;
                for (;;)
                {
                    _3498 = texelFetch(g_lightClassification, int((((_2829 << 5u) + (_2815 << 9u)) + (_3489 << 2u)) >> 2u)).x;
                    _3499 = _3498 == 0u;
                    float frontier_phi_70_pred;
                    float frontier_phi_70_pred_1;
                    float frontier_phi_70_pred_2;
                    float frontier_phi_70_pred_3;
                    float frontier_phi_70_pred_4;
                    float frontier_phi_70_pred_5;
                    if (_3499)
                    {
                        frontier_phi_70_pred = _3483;
                        frontier_phi_70_pred_1 = _3488;
                        frontier_phi_70_pred_2 = _3487;
                        frontier_phi_70_pred_3 = _3486;
                        frontier_phi_70_pred_4 = _3485;
                        frontier_phi_70_pred_5 = _3484;
                    }
                    else
                    {
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _4049;
                        float _4050;
                        float _4051;
                        float _4052;
                        float _4053;
                        float _4054;
                        float _3769 = _3483;
                        float _3770 = _3484;
                        float _3771 = _3485;
                        float _3772 = _3486;
                        float _3773 = _3487;
                        float _3774 = _3488;
                        uint _3775 = _3498;
                        uint _3776;
                        vec4 _3801;
                        float _3802;
                        vec4 _3817;
                        vec3 _3829;
                        vec4 _3844;
                        vec4 _3859;
                        float _3905;
                        bool _3906;
                        for (;;)
                        {
                            uint _3786 = ((_3489 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3775));
                            _3776 = (_3775 + 4294967295u) & _3775;
                            uint _3788 = _3786 * 40u;
                            _3801 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3788)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3788 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3788 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3788 + 3u)).x));
                            _3802 = _3801.w;
                            uint _3804 = (_3786 * 40u) + 4u;
                            _3817 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3804)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 3u)).x));
                            uint _3819 = (_3786 * 40u) + 8u;
                            _3829 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 2u)).x));
                            uint _3831 = (_3786 * 40u) + 16u;
                            _3844 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3831)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3831 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3831 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3831 + 3u)).x));
                            uint _3846 = (_3786 * 40u) + 20u;
                            _3859 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3846)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3846 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3846 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3846 + 3u)).x));
                            uint _3861 = (_3786 * 40u) + 24u;
                            vec4 _3874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3861 + 3u)).x));
                            uint _3880 = (_3786 * 40u) + 28u;
                            vec4 _3893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3880 + 3u)).x));
                            _3905 = fma(_2791, _3893.z, fma(_2790, _3893.y, _3893.x * _2789)) + _3893.w;
                            _3906 = !((fma(_2791, _3874.z, fma(_2790, _3874.y, _3874.x * _2789)) + _3874.w) <= 0.0);
                            float frontier_phi_79_pred;
                            float frontier_phi_79_pred_1;
                            float frontier_phi_79_pred_2;
                            float frontier_phi_79_pred_3;
                            float frontier_phi_79_pred_4;
                            float frontier_phi_79_pred_5;
                            if (_3906)
                            {
                                float _3933 = _3801.x - _2789;
                                float _3934 = _3801.y - _2790;
                                float _3935 = _3801.z - _2791;
                                float _3936 = dot(vec3(_3933, _3934, _3935), vec3(_3933, _3934, _3935));
                                float _3939 = inversesqrt(_3936);
                                float _3940 = _3939 * _3933;
                                float _3941 = _3939 * _3934;
                                float _3942 = _3939 * _3935;
                                float _3946 = 1.0 - (_3936 / (_3802 * _3802));
                                float _5198 = isnan(0.0) ? _3946 : (isnan(_3946) ? 0.0 : max(_3946, 0.0));
                                float _3947 = isnan(1.0) ? _5198 : (isnan(_5198) ? 1.0 : min(_5198, 1.0));
                                float _3951 = sqrt(_3936) * _3817.w;
                                float _3953 = 1.39999997615814208984375 / (_3951 + 1.39999997615814208984375);
                                float _3954 = _3953 * _3953;
                                float _3957 = ((1.0 - _3954) * dot(vec3(_3940, _3941, _3942), vec3(_1461, _1464, _1467))) + _3954;
                                float _3960 = _3951 * _3951;
                                float _3964 = (fma(_2791, _3844.z, fma(_2790, _3844.y, _3844.x * _2789)) + _3844.w) / _3905;
                                float _3965 = (fma(_2791, _3859.z, fma(_2790, _3859.y, _3859.x * _2789)) + _3859.w) / _3905;
                                float _3969 = 1.0 - dot(vec2(_3964, _3965), vec2(_3964, _3965));
                                float _5214 = isnan(0.0) ? _3969 : (isnan(_3969) ? 0.0 : max(_3969, 0.0));
                                float _3970 = isnan(1.0) ? _5214 : (isnan(_5214) ? 1.0 : min(_5214, 1.0));
                                float _3971 = _3970 * (((isnan(0.0) ? _3957 : (isnan(_3957) ? 0.0 : max(_3957, 0.0))) * _3947) / ((_3960 * 0.699999988079071044921875) + 1.0));
                                float _3983 = exp2(log2(1.0 / ((_3960 * 3.5) + 5.0)) * 0.25);
                                float _3984 = 1.0 - _1528;
                                float _3991 = sqrt(1.0 - ((1.0 - (_3984 * _3984)) * (1.0 - (_3983 * _3983))));
                                float _3992 = _3991 * _3991;
                                float _3993 = _3992 * _3992;
                                float _3994 = _3940 - _3212;
                                float _3995 = _3941 - _3213;
                                float _3996 = _3942 - _3214;
                                float _4000 = inversesqrt(dot(vec3(_3994, _3995, _3996), vec3(_3994, _3995, _3996)));
                                float _4004 = dot(vec3(_1461, _1464, _1467), vec3((-0.0) - _3212, (-0.0) - _3213, (-0.0) - _3214));
                                float _5225 = isnan(0.0) ? _4004 : (isnan(_4004) ? 0.0 : max(_4004, 0.0));
                                float _4007 = isnan(1.0) ? _5225 : (isnan(_5225) ? 1.0 : min(_5225, 1.0));
                                float _4008 = dot(vec3(_1461, _1464, _1467), vec3(_4000 * _3994, _4000 * _3995, _4000 * _3996));
                                float _5236 = isnan(0.0) ? _4008 : (isnan(_4008) ? 0.0 : max(_4008, 0.0));
                                float _4011 = isnan(1.0) ? _5236 : (isnan(_5236) ? 1.0 : min(_5236, 1.0));
                                float _4015 = ((_4011 * _4011) * (_3993 + (-1.0))) + 1.0;
                                float _4016 = _3953 * _3992;
                                float _4017 = _4016 * _4016;
                                float _4023 = ((1.0 - _4017) * dot(vec3(_1461, _1464, _1467), vec3(_3940, _3941, _3942))) + _4017;
                                float _5247 = isnan(0.0) ? _4023 : (isnan(_4023) ? 0.0 : max(_4023, 0.0));
                                float _4024 = isnan(1.0) ? _5247 : (isnan(_5247) ? 1.0 : min(_5247, 1.0));
                                float _4025 = 1.0 - _3992;
                                float _4035 = (0.5 / (((_4024 * ((_4007 * _4025) + _3992)) + 9.9999999392252902907785028219223e-09) + (((_4024 * _4025) + _3992) * _4007))) * _4024;
                                float _5258 = isnan(0.0) ? _4035 : (isnan(_4035) ? 0.0 : max(_4035, 0.0));
                                float _4045 = (_3970 * _3947) * (((_3993 * 3.1415927410125732421875) * (isnan(1.0) ? _5258 : (isnan(_5258) ? 1.0 : min(_5258, 1.0)))) / ((_4015 * _4015) * ((_3960 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_79_pred = _4045 * _3829.z;
                                frontier_phi_79_pred_1 = _3971 * _3817.z;
                                frontier_phi_79_pred_2 = _3971 * _3817.y;
                                frontier_phi_79_pred_3 = _3971 * _3817.x;
                                frontier_phi_79_pred_4 = _4045 * _3829.y;
                                frontier_phi_79_pred_5 = _4045 * _3829.x;
                            }
                            else
                            {
                                frontier_phi_79_pred = 0.0;
                                frontier_phi_79_pred_1 = 0.0;
                                frontier_phi_79_pred_2 = 0.0;
                                frontier_phi_79_pred_3 = 0.0;
                                frontier_phi_79_pred_4 = 0.0;
                                frontier_phi_79_pred_5 = 0.0;
                            }
                            _4051 = frontier_phi_79_pred;
                            _4054 = frontier_phi_79_pred_1;
                            _4053 = frontier_phi_79_pred_2;
                            _4052 = frontier_phi_79_pred_3;
                            _4050 = frontier_phi_79_pred_4;
                            _4049 = frontier_phi_79_pred_5;
                            _3750 = _4052 + _3772;
                            _3751 = _4053 + _3773;
                            _3752 = _4054 + _3774;
                            _3747 = _4049 + _3769;
                            _3748 = _4050 + _3770;
                            _3749 = _4051 + _3771;
                            if (_3776 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3769 = _3747;
                                _3770 = _3748;
                                _3771 = _3749;
                                _3772 = _3750;
                                _3773 = _3751;
                                _3774 = _3752;
                                _3775 = _3776;
                                continue;
                            }
                        }
                        frontier_phi_70_pred = _3747;
                        frontier_phi_70_pred_1 = _3752;
                        frontier_phi_70_pred_2 = _3751;
                        frontier_phi_70_pred_3 = _3750;
                        frontier_phi_70_pred_4 = _3749;
                        frontier_phi_70_pred_5 = _3748;
                    }
                    _3187 = frontier_phi_70_pred;
                    _3197 = frontier_phi_70_pred_1;
                    _3195 = frontier_phi_70_pred_2;
                    _3193 = frontier_phi_70_pred_3;
                    _3191 = frontier_phi_70_pred_4;
                    _3189 = frontier_phi_70_pred_5;
                    uint _3490 = _3489 + 1u;
                    if (_3490 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3483 = _3187;
                        _3484 = _3189;
                        _3485 = _3191;
                        _3486 = _3193;
                        _3487 = _3195;
                        _3488 = _3197;
                        _3489 = _3490;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_46_47_ladder = _3191;
                frontier_phi_46_47_ladder_1 = _3193;
                frontier_phi_46_47_ladder_2 = _3195;
                frontier_phi_46_47_ladder_3 = _3197;
                frontier_phi_46_47_ladder_4 = _3189;
                frontier_phi_46_47_ladder_5 = _3187;
            }
            else
            {
                frontier_phi_46_47_ladder = _2984;
                frontier_phi_46_47_ladder_1 = _2986;
                frontier_phi_46_47_ladder_2 = _2988;
                frontier_phi_46_47_ladder_3 = _2990;
                frontier_phi_46_47_ladder_4 = _2982;
                frontier_phi_46_47_ladder_5 = _2980;
            }
            _3186 = frontier_phi_46_47_ladder_5;
            _3188 = frontier_phi_46_47_ladder_4;
            _3190 = frontier_phi_46_47_ladder;
            _3192 = frontier_phi_46_47_ladder_1;
            _3194 = frontier_phi_46_47_ladder_2;
            _3196 = frontier_phi_46_47_ladder_3;
        }
        float _3201 = isnan(1.0) ? _1504 : (isnan(_1504) ? 1.0 : min(_1504, 1.0));
        _2847 = (_3201 * _3192) + _2651;
        _2849 = (_3201 * _3194) + _2652;
        _2851 = (_3201 * _3196) + _2653;
        _2853 = ((_3186 * 0.039999999105930328369140625) * _3201) + _2725;
        _2855 = ((_3188 * 0.039999999105930328369140625) * _3201) + _2729;
        _2857 = ((_3190 * 0.039999999105930328369140625) * _3201) + _2733;
    }
    else
    {
        _2847 = _2651;
        _2849 = _2652;
        _2851 = _2653;
        _2853 = _2725;
        _2855 = _2729;
        _2857 = _2733;
    }
    float _2877 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2878 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2879 = cbSceneParam._m0[86u].x * ((_1404 / cbSceneParam._m0[86u].x) + (((10.0 / (_1328 + 10.0)) * cbMtdParam._m0[12u].y) * dot(vec3(_1440, _1441, _1442), vec3(_234, _235, _236))));
    float _2880 = isnan(_2877) ? _2879 : (isnan(_2879) ? _2877 : min(_2879, _2877));
    float _2881 = isnan(_2878) ? _1405 : (isnan(_1405) ? _2878 : min(_1405, _2878));
    vec4 _2883 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2880, _2881), 0.0);
    float _2885 = _2883.x;
    bool _2905 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2885)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2885))) > _1328;
    float _2906 = _2905 ? _2880 : _1404;
    float _2907 = _2905 ? _2881 : _1405;
    vec4 _2909 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2906, _2907));
    vec4 _2914 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2906, _2907));
    float _2916 = _2914.x;
    bool _2921 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _2930 = (-0.0) - cbSceneParam._m0[2u].z;
    float _2936 = (_2921 ? (_2930 / (cbSceneParam._m0[2u].x - _2916)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2916))) - _1328;
    float _2938 = cbMtdParam._m0[42u].x + cbMtdParam._m0[36u].x;
    float _2939 = cbMtdParam._m0[42u].y + cbMtdParam._m0[36u].y;
    float _2940 = cbMtdParam._m0[42u].z + cbMtdParam._m0[36u].z;
    bool _2946 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2950 = (isnan(_2936) ? 0.0 : (isnan(0.0) ? _2936 : max(0.0, _2936))) * (-1.44269502162933349609375);
    float _5289 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
    float _5300 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
    float _5311 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
    float _3081;
    float _3082;
    float _3083;
    if ((1.0 - _1235) > 0.00999999977648258209228515625)
    {
        vec4 _3002 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2906, _2907), 0.0);
        float _3004 = _3002.x;
        float _3010 = (_2921 ? (_2930 / (cbSceneParam._m0[2u].x - _3004)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3004))) - _1328;
        uint _3016 = floatBitsToUint(cbInstanceData._m0[_1250]).x * 14u;
        uint _3022 = _3016 + 4u;
        float _3031 = dot(vec3(cbLight._m0[_3016].xyz), vec3(_255, _256, _257));
        float _3038 = dot(vec3((-0.0) - _1384, (-0.0) - _1385, (-0.0) - _1386), vec3((-0.0) - _255, (-0.0) - _256, (-0.0) - _257));
        float _3043 = ((isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0))) / (isnan(0.001000000047497451305389404296875) ? _3031 : (isnan(_3031) ? 0.001000000047497451305389404296875 : max(_3031, 0.001000000047497451305389404296875)))) + 1.0;
        float _3045 = (-0.0) - ((isnan(_3010) ? 0.0 : (isnan(0.0) ? _3010 : max(0.0, _3010))) * _3043);
        _3081 = _2946 ? 0.0 : ((((_1294 * cbMtdParam._m0[36u].x) * cbLight._m0[_3022].x) / ((_3043 * _2938) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2938 * 1.44269502162933349609375) * _3045)));
        _3082 = _2946 ? 0.0 : ((((_1294 * cbMtdParam._m0[36u].y) * cbLight._m0[_3022].y) / ((_3043 * _2939) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2939 * 1.44269502162933349609375) * _3045)));
        _3083 = _2946 ? 0.0 : ((((_1294 * cbMtdParam._m0[36u].z) * cbLight._m0[_3022].z) / ((_3043 * _2940) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2940 * 1.44269502162933349609375) * _3045)));
    }
    else
    {
        _3081 = 0.0;
        _3082 = 0.0;
        _3083 = 0.0;
    }
    float _3100 = 0.959999978542327880859375 - (exp2(log2(1.0 - _1519) * 5.0) * 0.959999978542327880859375);
    float _3101 = (_3081 + ((exp2(_2950 * (_2946 ? 0.0 : _2938)) * _2909.x) * cbSceneParam._m0[72u].w)) * _3100;
    float _3102 = (_3082 + ((exp2(_2950 * (_2946 ? 0.0 : _2939)) * _2909.y) * cbSceneParam._m0[72u].w)) * _3100;
    float _3103 = (_3083 + ((exp2(_2950 * (_2946 ? 0.0 : _2940)) * _2909.z) * cbSceneParam._m0[72u].w)) * _3100;
    float _3111 = (_3101 + (((((_2539 * _2574.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0))) * _2334) * _2590)) + _2853) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _5289 : (isnan(_5289) ? 1.0 : min(_5289, 1.0))) * (_2847 + ((isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0))) * _1504))) - _3101) * _1235);
    float _3113 = (_3102 + (((((_2539 * _2574.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0))) * _2334) * _2590)) + _2855) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _5300 : (isnan(_5300) ? 1.0 : min(_5300, 1.0))) * (_2849 + ((isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0))) * _1504))) - _3102) * _1235);
    float _3115 = (_3103 + (((((_2539 * _2574.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0))) * _2334) * _2590)) + _2857) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _5311 : (isnan(_5311) ? 1.0 : min(_5311, 1.0))) * (_2851 + ((isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0))) * _1504))) - _3103) * _1235);
    float _3120 = cbInstanceData._m0[_1249 + 6u].w * (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)));
    float _3125 = _1404 / cbSceneParam._m0[86u].x;
    float _3126 = _1405 / cbSceneParam._m0[86u].y;
    vec4 _3140 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3125, _3126, (log2((isnan(cbSceneParam._m0[77u].w) ? _1328 : (isnan(_1328) ? cbSceneParam._m0[77u].w : min(_1328, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3142 = _3140.x;
    float _3143 = _3140.y;
    float _3144 = _3140.z;
    float _3145 = _3140.w;
    float _3274;
    float _3276;
    float _3278;
    float _3280;
    if (_1328 > cbSceneParam._m0[78u].w)
    {
        float _3239 = isnan(_1328) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1328 : min(cbSceneParam._m0[80u].w, _1328));
        float _3240 = _3239 / _1328;
        float _3251 = _3240 * _1377;
        float _3252 = _1378 * _3240;
        float _3253 = (-0.0) - _3252;
        float _3254 = _3240 * _1379;
        float _3256 = (cbSceneParam._m0[77u].w * _3253) / _3239;
        float _3257 = _3256 + cbSceneParam._m0[79u].w;
        float _3258 = cbSceneParam._m0[79u].w - _3252;
        float _3264 = sqrt(((_3251 * _3251) + (_3252 * _3252)) + (_3254 * _3254));
        float _3267 = (1.0 - (cbSceneParam._m0[77u].w / _3239)) * _3264;
        float _3272 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3273 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3683;
        if (abs((_3253 - _3256) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3683 = ((((_3257 > 0.0) ? exp2(_3272 * _3257) : (2.0 - exp2(_3273 * _3257))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3267;
        }
        else
        {
            float _3414 = 1.0 / cbSceneParam._m0[80u].x;
            float _3415 = isnan(_3258) ? _3257 : (isnan(_3257) ? _3258 : max(_3257, _3258));
            float _3416 = isnan(_3258) ? _3257 : (isnan(_3257) ? _3258 : min(_3257, _3258));
            float _3425 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : min(_3415, 0.0));
            float _3426 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : min(_3416, 0.0));
            _3683 = ((abs(_3264 / _3253) * cbSceneParam._m0[80u].y) * ((((_3425 - _3426) * 2.0) - ((exp2(_3272 * (isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0)))) - exp2(_3272 * (isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0))))) * _3414)) - ((exp2(_3273 * _3425) - exp2(_3273 * _3426)) * _3414))) + (_3267 * cbSceneParam._m0[80u].z);
        }
        vec4 _3685 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3125, _3126, 1.0), 0.0);
        float _3694 = exp2((_3683 * (-1.44269502162933349609375)) * (1.0 - _3685.w));
        float _3695 = log2(_3694);
        float _3711 = log2(_3145);
        _3274 = (exp2(_3711 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3695 * cbSceneParam._m0[78u].x)) * _3685.x) / cbSceneParam._m0[78u].x)) + _3142;
        _3276 = (exp2(_3711 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3695 * cbSceneParam._m0[78u].y)) * _3685.y) / cbSceneParam._m0[78u].y)) + _3143;
        _3278 = (exp2(_3711 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3695 * cbSceneParam._m0[78u].z)) * _3685.z) / cbSceneParam._m0[78u].z)) + _3144;
        _3280 = _3694 * _3145;
    }
    else
    {
        _3274 = _3142;
        _3276 = _3143;
        _3278 = _3144;
        _3280 = _3145;
    }
    bool _3721;
    float _3335;
    vec4 _3338;
    float _3340;
    vec4 _3342;
    float _3350;
    float _3351;
    float _3352;
    float _3353;
    bool _3363;
    for (;;)
    {
        bool _3292 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _3293 = log2(_3280);
        float _3300 = exp2(_3293 * cbSceneParam._m0[78u].x) * _3111;
        float _3301 = exp2(_3293 * cbSceneParam._m0[78u].y) * _3113;
        float _3302 = exp2(_3293 * cbSceneParam._m0[78u].z) * _3115;
        vec4 _3310 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1404, _1405));
        float _3312 = _3310.x;
        float _3333 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3312)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3312))) - _1328) * cbMtdParam._m0[14u].w;
        float _5377 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
        _3335 = _3120 * (isnan(1.0) ? _5377 : (isnan(_5377) ? 1.0 : min(_5377, 1.0)));
        float _3336 = _1393 + (-0.5);
        _3338 = cbMtdParam._m0[1u];
        _3340 = _3338.y * _3336;
        _3342 = cbMatDynParam._m0[0u];
        float _3349 = (roundEven(_3342.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3350 = _3349 * (_3292 ? _3300 : (_3300 + (cbSceneParam._m0[72u].w * _3274)));
        _3351 = _3349 * (_3292 ? _3301 : (_3301 + (cbSceneParam._m0[72u].w * _3276)));
        _3352 = _3349 * (_3292 ? _3302 : (_3302 + (cbSceneParam._m0[72u].w * _3278)));
        _3353 = _3336 * 0.999000012874603271484375;
        _3363 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3363)
        {
            if ((cbInstanceData._m0[_1249 + 7u].x + _3353) < 0.5)
            {
                _3721 = true;
                break;
            }
        }
        uint _3449 = _1480 + uint(_3342.w);
        if ((cbInstanceData._m0[_3449].w < 1.0) && ((cbInstanceData._m0[_3449].w + _3353) < 0.5))
        {
            _3721 = true;
            break;
        }
        if ((_3340 + 1.0) < _3338.x)
        {
            _3721 = true;
            break;
        }
        _3721 = false;
        break;
    }
    float _3760;
    if (_3721)
    {
        discard_state = true;
        _3760 = 0.0;
    }
    else
    {
        _3760 = _3335;
    }
    SV_Target.x = _3350;
    SV_Target.y = _3351;
    SV_Target.z = _3352;
    SV_Target.w = _3760;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3335;
    discard_exit();
}


