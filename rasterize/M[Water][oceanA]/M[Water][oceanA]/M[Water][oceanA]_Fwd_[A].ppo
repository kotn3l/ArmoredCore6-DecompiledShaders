#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[45];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_oceanA_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_oceanA_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_oceanA_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_oceanA_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_oceanA_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Water_oceanA_snp_0_Texture2D_5;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in vec4 TEXCOORD_8;
layout(location = 7) in float TEXCOORD_11;
layout(location = 7, component = 1) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1901;
float _4160;
float _4161;
float _4162;
float _4163;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253;
    float _254;
    float _255;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _253 = (-0.0) - _239;
        _254 = (-0.0) - _240;
        _255 = (-0.0) - _241;
    }
    else
    {
        _253 = _239;
        _254 = _240;
        _255 = _241;
    }
    float _301 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _311 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _301);
    float _312 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _301);
    float _313 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _301);
    float _328 = cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x;
    vec4 _345 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_2, SS_BumpMap), vec2((((_328 * cbMtdParam._m0[27u].x) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_328 * cbMtdParam._m0[27u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _348 = _345.x;
    float _349 = _345.y;
    float _350 = _345.z;
    float _351 = _345.w;
    float _364 = cbMtdParam._m0[14u].y - cbMtdParam._m0[14u].x;
    float _367 = (sqrt(((_311 * _311) + (_312 * _312)) + (_313 * _313)) - cbMtdParam._m0[14u].x) / (isnan(0.001000000047497451305389404296875) ? _364 : (isnan(_364) ? 0.001000000047497451305389404296875 : max(_364, 0.001000000047497451305389404296875)));
    float _368 = _367 + 0.180000007152557373046875;
    float _370 = _368 * 12.0;
    float _4177 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _373 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    vec4 _385 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _387 = _385.x;
    float _409 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _387)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _387))) - POSITION_1.w;
    float _410 = _409 / ((_373 * 0.0599999986588954925537109375) + 0.0599999986588954925537109375);
    float _4188 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _411 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _412 = isnan(0.5) ? _411 : (isnan(_411) ? 0.5 : max(_411, 0.5));
    float _414 = 1.0 - _412;
    float _415 = _368 * 7.0;
    float _4204 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _417 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _428 = (_350 * 0.00200000009499490261077880859375) + TEXCOORD.x;
    float _429 = (_350 * 0.00999999977648258209228515625) + TEXCOORD.y;
    vec4 _443 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_3, SS_WrapLinear), vec2((((cbMtdParam._m0[25u].z * _328) + _428) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[25u].w * _328) + _429) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _445 = _443.x;
    float _467 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_3, SS_WrapLinear), vec2((((cbMtdParam._m0[23u].z * _428) + (cbMtdParam._m0[26u].z * _328)) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[23u].w * _429) + (cbMtdParam._m0[26u].w * _328)) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x + (-0.0500000007450580596923828125);
    float _470 = (isnan(_467) ? _445 : (isnan(_445) ? _467 : max(_445, _467))) - _417;
    float _4220 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _471 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _472 = _417 + 0.5;
    float _4231 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _483 = cbMtdParam._m0[16u].w * _328;
    float _484 = cos(_483);
    float _485 = sin(_483);
    vec4 _509 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2(((((_485 * cbMtdParam._m0[31u].x) + TEXCOORD.x) + (cbMtdParam._m0[22u].x * _328)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((_484 * cbMtdParam._m0[31u].y) + TEXCOORD.y) + (cbMtdParam._m0[22u].y * _328)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _513 = _509.z;
    vec4 _528 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[21u].z * _328) + TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[21u].w * _328) + TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _532 = _528.z;
    float _535 = (isnan(_532) ? _513 : (isnan(_513) ? _532 : max(_513, _532))) * (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)));
    float _4247 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _536 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _539 = (_414 - _351) + (isnan(_536) ? _471 : (isnan(_471) ? _536 : max(_471, _536)));
    float _4263 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _540 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _541 = _540 * _412;
    float _4274 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _550 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _551 = _350 - _550;
    float _4285 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _552 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    vec4 _605 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[23u].x * _328) + (cbMtdParam._m0[30u].z * _485)) + (cbMtdParam._m0[34u].z * TEXCOORD.x)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[23u].y * _328) + (cbMtdParam._m0[30u].w * _484)) + (cbMtdParam._m0[34u].w * TEXCOORD.y)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _629 = cbMtdParam._m0[37u].w * TEXCOORD_5.x;
    float _685 = ((((((_605.w + (-0.5)) * cbMtdParam._m0[43u].w) + (cbMtdParam._m0[39u].y * (_509.w + (-0.5)))) + (cbMtdParam._m0[40u].x * (_528.w + (-0.5)))) + (((_629 + cbMtdParam._m0[41u].z) * cos(cbMtdParam._m0[13u].y * _328)) * (texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_5, SS_WrapLinear), vec2(((cbMtdParam._m0[32u].z * TEXCOORD.x) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, ((cbMtdParam._m0[32u].w * TEXCOORD.y) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w)).y + (-0.5)))) + ((sin(cbMtdParam._m0[13u].x * _328) * (cbMtdParam._m0[40u].w + _629)) * (texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_5, SS_WrapLinear), vec2(((cbMtdParam._m0[31u].z * TEXCOORD.x) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, ((cbMtdParam._m0[31u].w * TEXCOORD.y) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w)).y + (-0.5)))) * (1.0 - TEXCOORD_5.y);
    float _715 = 1.0 - _351;
    float _720 = ((isnan(0.550000011920928955078125) ? _715 : (isnan(_715) ? 0.550000011920928955078125 : max(_715, 0.550000011920928955078125))) + (-0.550000011920928955078125)) * cbMtdParam._m0[16u].z;
    float _723 = ((TEXCOORD_5.y * (-0.5)) * _720) + _720;
    float _727 = ((TEXCOORD_5.z * (-0.699999988079071044921875)) * _723) + _723;
    float _740 = (((_685 + ((cbMtdParam._m0[37u].x - (cbMtdParam._m0[37u].x * TEXCOORD_5.y)) * _350)) + ((texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[35u].z * TEXCOORD.x) + (cbMtdParam._m0[22u].z * _328)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[35u].w * TEXCOORD.y) + (cbMtdParam._m0[22u].w * _328)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).w + (-0.5)) * cbMtdParam._m0[44u].z)) + ((sin(cbMtdParam._m0[21u].y * _328) * cbMtdParam._m0[38u].z) * (isnan(0.300000011920928955078125) ? TEXCOORD_5.z : (isnan(TEXCOORD_5.z) ? 0.300000011920928955078125 : max(TEXCOORD_5.z, 0.300000011920928955078125))))) + _727;
    float _743 = (_740 + cbMtdParam._m0[20u].z) * cbMtdParam._m0[20u].w;
    float _4306 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _744 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _756 = inversesqrt(dot(vec3(_311, _312, _313), vec3(_311, _312, _313)));
    float _760 = dot(vec4(_756 * _311, _756 * _312, _756 * _313, 0.0), vec4(_253, _254, _255, 0.0));
    float _4317 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _768 = exp2(log2((1.0 - (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) * cbMtdParam._m0[12u].z) * cbMtdParam._m0[12u].w);
    float _4328 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _769 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
    float _773 = ((_541 + cbMtdParam._m0[9u].x) + (_552 * cbMtdParam._m0[10u].x)) + ((_744 * cbMtdParam._m0[11u].x) * _769);
    float _774 = ((_541 + cbMtdParam._m0[9u].y) + (_552 * cbMtdParam._m0[10u].y)) + ((_744 * cbMtdParam._m0[11u].y) * _769);
    float _775 = ((_541 + cbMtdParam._m0[9u].z) + (_552 * cbMtdParam._m0[10u].z)) + ((_744 * cbMtdParam._m0[11u].z) * _769);
    float _4339 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _776 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
    float _4350 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _786 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _789 = (_373 * (-0.87999999523162841796875)) * _786;
    float _792 = (((((1.0 - _773) - _776) * _550) + _773) + _786) + _789;
    float _795 = (((((1.0 - _774) - _776) * _550) + _774) + _786) + _789;
    float _798 = (((((1.0 - _775) - _776) * _550) + _775) + _786) + _789;
    float _799 = _350 * 0.01200000010430812835693359375;
    float _824 = (_350 * 0.300000011920928955078125) * texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[35u].x * _328) + _799) + (cbMtdParam._m0[24u].x * TEXCOORD.x)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[35u].y * _328) + _799) + (cbMtdParam._m0[24u].y * TEXCOORD.y)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z;
    float _4361 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _825 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _835 = (((1.0 - _792) * TEXCOORD_5.x) * _825) + _792;
    float _836 = (((1.0 - _795) * TEXCOORD_5.x) * _825) + _795;
    float _837 = (((1.0 - _798) * TEXCOORD_5.x) * _825) + _798;
    vec4 _871 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_4, SS_WrapLinear), vec2(((((cbMtdParam._m0[27u].z * _328) + (cbMtdParam._m0[30u].x * _485)) + (cbMtdParam._m0[29u].x * _428)) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, ((((cbMtdParam._m0[27u].w * _328) + (cbMtdParam._m0[30u].y * _484)) + (cbMtdParam._m0[29u].y * _429)) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _874 = _871.y;
    float _881 = 1.0 - (_409 / cbMtdParam._m0[18u].w);
    float _885 = ((_871.x * TEXCOORD_8.x) * cbMtdParam._m0[18u].z) * (isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0)));
    float _891 = _874 * TEXCOORD_8.y;
    float _894 = ((isnan(cbMtdParam._m0[19u].x) ? _891 : (isnan(_891) ? cbMtdParam._m0[19u].x : max(_891, cbMtdParam._m0[19u].x))) - cbMtdParam._m0[19u].x) * cbMtdParam._m0[19u].y;
    float _895 = isnan(_894) ? _885 : (isnan(_885) ? _894 : max(_885, _894));
    float _4387 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _896 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _903 = (_896 * (1.0 - _835)) + _835;
    float _904 = (_896 * (1.0 - _836)) + _836;
    float _905 = (_896 * (1.0 - _837)) + _837;
    float _942 = exp2(log2(cbMtdParam._m0[15u].w * _715) * cbMtdParam._m0[17u].x);
    float _4398 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _943 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _944 = _943 * texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_4, SS_WrapLinear), vec2(((((cbMtdParam._m0[28u].x * _328) + (cbMtdParam._m0[28u].z * _715)) + (cbMtdParam._m0[29u].z * _428)) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, ((((cbMtdParam._m0[28u].y * _328) + (cbMtdParam._m0[28u].w * _715)) + (cbMtdParam._m0[29u].w * _429)) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).z;
    float _947 = ((_943 - _944) * cbMtdParam._m0[17u].w) + _944;
    float _951 = _417 * TEXCOORD_8.z;
    float _958 = ((_951 * (1.0 - _903)) * _947) + _903;
    float _959 = ((_951 * (1.0 - _904)) * _947) + _904;
    float _960 = ((_951 * (1.0 - _905)) * _947) + _905;
    float _964 = 1.0 - (_409 / cbMtdParam._m0[18u].x);
    float _970 = (cbMtdParam._m0[18u].y * _874) * (isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0)));
    float _974 = (_970 * (1.0 - _958)) + _958;
    float _975 = (_970 * (1.0 - _959)) + _959;
    float _976 = (_970 * (1.0 - _960)) + _960;
    float _979 = _367 / cbMtdParam._m0[15u].y;
    float _4414 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _982 = (1.0 - (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) * cbMtdParam._m0[15u].x;
    float _988 = _367 + 0.20000000298023223876953125;
    float _990 = _988 * 9.0;
    float _4425 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _995 = ((cbMtdParam._m0[13u].w - cbMtdParam._m0[12u].x) * (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) + cbMtdParam._m0[12u].x;
    float _998 = (_367 + 0.099999986588954925537109375) * 2.5;
    float _4436 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1003 = ((cbMtdParam._m0[14u].z - _995) * (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) + _995;
    float _1004 = _974 + _540;
    float _4447 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1009 = ((0.3499999940395355224609375 - _1003) * (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) + _1003;
    float _1010 = TEXCOORD_5.z * 0.5;
    float _1022 = (_367 + 0.100000001490116119384765625) * 0.89999997615814208984375;
    float _4458 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1027 = ((cbMtdParam._m0[17u].y - cbMtdParam._m0[20u].x) * (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) + cbMtdParam._m0[20u].x;
    float _1032 = (_1027 * (_348 + (-0.5))) + 0.5;
    float _1033 = (_1027 * (_349 + (-0.5))) + 0.5;
    float _4469 = isnan(0.0) ? TEXCOORD_5.y : (isnan(TEXCOORD_5.y) ? 0.0 : max(TEXCOORD_5.y, 0.0));
    float _1034 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
    vec4 _1064 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[26u].x * TEXCOORD.z) + (cbMtdParam._m0[32u].x * _328)) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[26u].y * TEXCOORD.w) + (cbMtdParam._m0[32u].y * _328)) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _1072 = ((_528.x + (-0.5)) * 0.5) + _509.x;
    float _1073 = ((_528.y + (-0.5)) * 0.5) + _509.y;
    vec4 _1097 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[24u].z * TEXCOORD.x) + (cbMtdParam._m0[25u].x * _328)) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[24u].w * TEXCOORD.y) + (cbMtdParam._m0[25u].y * _328)) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _1106 = _988 * 12.0;
    float _4480 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _1108 = 1.0 - (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)));
    float _1122 = cbMtdParam._m0[33u].z * TEXCOORD.x;
    float _1123 = cbMtdParam._m0[33u].w * TEXCOORD.y;
    vec4 _1136 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2(((_1122 + (cbMtdParam._m0[33u].x * _328)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_1123 + (cbMtdParam._m0[33u].y * _328)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1157 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2((((_1122 + ((cbMtdParam._m0[27u].x * 0.4000000059604644775390625) * _552)) + (cbMtdParam._m0[34u].x * _328)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1123 + ((cbMtdParam._m0[27u].y * 0.4000000059604644775390625) * _552)) + (cbMtdParam._m0[34u].y * _328)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1171 = (((0.5 - _1072) * 0.10999999940395355224609375) + _1072) + (((((((_1097.z + (-0.5)) * cbMtdParam._m0[16u].x) * _1108) + (-1.0)) + _1136.x) + _1157.x) * cbMtdParam._m0[15u].z);
    float _1172 = (((0.5 - _1073) * 0.10999999940395355224609375) + _1073) + (((((((_1097.w + (-0.5)) * cbMtdParam._m0[16u].x) * _1108) + (-1.0)) + _1136.y) + _1157.y) * cbMtdParam._m0[15u].z);
    float _1177 = ((_1064.x - _1171) * _367) + _1171;
    float _1178 = ((_1064.y - _1172) * _367) + _1172;
    float _1179 = _367 * 0.5;
    float _4491 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    float _1180 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _1191 = cbMtdParam._m0[17u].z - (cbMtdParam._m0[17u].z * _727);
    float _1198 = cbMtdParam._m0[19u].z - (cbMtdParam._m0[19u].z * TEXCOORD_5.y);
    float _1200 = _1198 - (_1198 * _1180);
    float _1204 = (((((((0.5 - _348) * 0.60000002384185791015625) + _348) - _1032) * _1034) + _1032) + (_1200 * (_605.x + (-0.5)))) + (((_1177 + (-0.5)) + ((0.5 - _1177) * _1180)) * _1191);
    float _1206 = (((((((0.5 - _349) * 0.60000002384185791015625) + _349) - _1033) * _1034) + _1033) + (_1200 * (_605.y + (-0.5)))) + (((_1178 + (-0.5)) + ((0.5 - _1178) * _1180)) * _1191);
    float _1216 = (((_1010 * (0.5 - _1204)) + _1204) * 2.0) + (-1.0);
    float _1217 = (((_1010 * (0.5 - _1206)) + _1206) * 2.0) + (-1.0);
    float _1218 = dot(vec2(_1216, _1217), vec2(_1216, _1217));
    float _4502 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
    float _1223 = sqrt(1.0 - (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))));
    float _1226 = _988 * 6.0;
    float _4513 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
    float _1229 = cbMtdParam._m0[16u].y * (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)));
    float _4524 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
    float _1230 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
    float _1233 = ((1.0 - _1230) * _1004) + _1230;
    uint _1247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1248 = _1247 + 5u;
    float _1259 = (-0.0) - _311;
    float _1260 = (-0.0) - _312;
    float _1261 = (-0.0) - _313;
    float _1265 = inversesqrt(dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261)));
    float _1269 = dot(vec3(_1265 * _1259, _1265 * _1260, _1265 * _1261), vec3(cbLight._m0[floatBitsToUint(cbInstanceData._m0[_1248]).x * 14u].xyz));
    float _1279 = 0.90999996662139892578125 / exp2(log2(1.091000080108642578125 - (_1269 * 0.60000002384185791015625)) * 1.5);
    float _1292 = ((((0.959999978542327880859375 / exp2(log2((_1269 * 0.4000000059604644775390625) + 1.04100000858306884765625) * 1.5)) - _1279) * 0.5) + _1279) * 0.079577468335628509521484375;
    float _1296 = fma(_1223, _253, fma(_1217, _245 * TANGENT.x, _1216 * _232));
    float _1299 = fma(_1223, _254, fma(_1217, _245 * TANGENT.y, _1216 * _233));
    float _1302 = fma(_1223, _255, fma(_1217, _245 * TANGENT.z, _1216 * _234));
    float _1306 = inversesqrt(dot(vec3(_1296, _1299, _1302), vec3(_1296, _1299, _1302)));
    float _1307 = _1306 * _1296;
    float _1308 = _1306 * _1299;
    float _1309 = _1306 * _1302;
    float _4535 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _4546 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1311 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
    float _4557 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _4568 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _4579 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _1326 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1366 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1375 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1366);
    float _1376 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1366);
    float _1377 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1366);
    float _1381 = inversesqrt(dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377)));
    float _1382 = _1375 * _1381;
    float _1383 = _1376 * _1381;
    float _1384 = _1377 * _1381;
    vec4 _1389 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1391 = _1389.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1586 = sqrt(((_1375 * _1375) + (_1376 * _1376)) + (_1377 * _1377));
        float _1592 = (cbMatDynParam._m0[5u].x * _1586) + cbMatDynParam._m0[5u].y;
        float _4590 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _1597 = (cbMatDynParam._m0[5u].z * _1586) + cbMatDynParam._m0[5u].w;
        float _4601 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) - _1593)) + _1593) < ((_1391 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1402 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1403 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1405 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD_11, TEXCOORD_12));
    float _1414 = (_1405.x * 2.0) + (-1.0);
    float _1415 = (_1405.y * 2.0) + (-1.0);
    float _1416 = (_1405.z * 2.0) + (-1.0);
    float _1420 = inversesqrt(dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416)));
    float _1431 = ((TEXCOORD_12 >= 1.0) || ((TEXCOORD_12 <= 0.0) || ((TEXCOORD_11 <= 0.0) || (TEXCOORD_11 >= 1.0)))) ? 0.0 : _1405.w;
    float _1438 = (((_1414 * _1420) - _1307) * _1431) + _1307;
    float _1439 = (((_1415 * _1420) - _1308) * _1431) + _1308;
    float _1440 = (((_1416 * _1420) - _1309) * _1431) + _1309;
    float _1459 = fma(_1440, cbSceneParam._m0[5u].z, fma(_1439, cbSceneParam._m0[5u].y, _1438 * cbSceneParam._m0[5u].x));
    float _1462 = fma(_1440, cbSceneParam._m0[6u].z, fma(_1439, cbSceneParam._m0[6u].y, _1438 * cbSceneParam._m0[6u].x));
    float _1465 = fma(_1440, cbSceneParam._m0[7u].z, fma(_1439, cbSceneParam._m0[7u].y, _1438 * cbSceneParam._m0[7u].x));
    uint _1478 = _1247 + 9u;
    uint _1479 = _1478 + uint(cbMatDynParam._m0[0u].w);
    float _1485 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) * cbInstanceData._m0[_1479].x;
    float _1486 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) * cbInstanceData._m0[_1479].y;
    float _1487 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0)))) * cbInstanceData._m0[_1479].z;
    float _4612 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
    float _1488 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
    float _4623 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
    float _1489 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
    float _4634 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
    float _1490 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
    vec4 _1499 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1402, cbSceneParam._m0[86u].y * _1403));
    float _1502 = _1499.x * TEXCOORD_5.w;
    float _1503 = dot(vec3(_1438, _1439, _1440), vec3(_1382, _1383, _1384));
    float _1506 = _1503 * 2.0;
    float _1510 = (_1506 * _1438) - _1382;
    float _1511 = (_1506 * _1439) - _1383;
    float _1512 = (_1506 * _1440) - _1384;
    float _1516 = abs(dot(vec3(_1382, _1383, _1384), vec3(_1438, _1439, _1440)));
    float _4645 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
    float _1517 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
    float _1526 = sqrt(_1311);
    float _1538 = exp2((_1526 * 5.0) * log2(1.0 - (_1517 * 0.999000012874603271484375))) / (4.0 - (_1526 * 3.0));
    float _1568 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1572 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1576 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1900;
    float _1902;
    float _1903;
    float _1904;
    float _1905;
    float _1906;
    float _1907;
    float _1908;
    float _1909;
    float _1910;
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    float _1915;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1629 = fma(_1576, cbModelParam._m0[26u].z, fma(_1572, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1568));
        float _1633 = fma(_1576, cbModelParam._m0[27u].z, fma(_1572, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1568));
        float _1637 = fma(_1576, cbModelParam._m0[28u].z, fma(_1572, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1568));
        float _1659 = _1568 + _1438;
        float _1660 = _1572 + _1439;
        float _1661 = _1576 + _1440;
        float _1671 = fma(_1661, cbModelParam._m0[26u].z, fma(_1660, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1659)) - _1629;
        float _1672 = fma(_1661, cbModelParam._m0[27u].z, fma(_1660, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1659)) - _1633;
        float _1673 = fma(_1661, cbModelParam._m0[28u].z, fma(_1660, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1659)) - _1637;
        float _1677 = inversesqrt(dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673)));
        float _1689 = ((_1677 * _1671) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1629 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1690 = ((_1677 * _1672) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1633 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1691 = ((_1677 * _1673) / cbModelParam._m0[34u].z) + ((((((_1637 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1694 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1689, _1690, _1691), 0.0);
        vec4 _1701 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1689, _1690, _1691), 0.0);
        vec4 _1708 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1689, _1690, _1691), 0.0);
        vec4 _1715 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1689, _1690, _1691), 0.0);
        float _1728 = exp2((_1694.w + (-0.5)) * 20.0) * 2.0;
        float _1729 = _1728 * (_1694.x + (-0.5));
        float _1730 = _1728 * (_1694.y + (-0.5));
        float _1731 = _1728 * (_1694.z + (-0.5));
        float _1738 = exp2((_1701.w + (-0.5)) * 20.0) * 2.0;
        float _1739 = _1738 * (_1701.x + (-0.5));
        float _1740 = _1738 * (_1701.y + (-0.5));
        float _1741 = _1738 * (_1701.z + (-0.5));
        float _1748 = exp2((_1708.w + (-0.5)) * 20.0) * 2.0;
        float _1749 = _1748 * (_1708.x + (-0.5));
        float _1750 = _1748 * (_1708.y + (-0.5));
        float _1751 = _1748 * (_1708.z + (-0.5));
        float _1758 = exp2((_1715.w + (-0.5)) * 20.0) * 2.0;
        float _1759 = _1758 * (_1715.x + (-0.5));
        float _1760 = _1758 * (_1715.y + (-0.5));
        float _1761 = _1758 * (_1715.z + (-0.5));
        float _1762 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1763 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1764 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1765 = _1729 * 0.5;
        float _1766 = _1739 * 0.5;
        float _1767 = _1749 * 0.5;
        float _1768 = dot(vec3(_1765, _1766, _1767), vec3(_1765, _1766, _1767));
        float _1773 = (_1768 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1768);
        float _1782 = (dot(vec3(_1438, _1439, _1440), vec3(_1773 * _1765, _1773 * _1766, _1773 * _1767)) + 1.0) * 0.5;
        float _4671 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1792 = sqrt(((_1766 * _1766) + (_1765 * _1765)) + (_1767 * _1767)) / (_1762 + 9.9999997473787516355514526367188e-06);
        float _4682 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1793 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _1794 = _1793 * 2.0;
        float _1798 = (1.0 - _1793) / (_1793 + 1.0);
        float _4693 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1799 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _1808 = ((((1.0 - _1799) * (_1794 + 2.0)) * exp2(log2(isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * (_1794 + 1.0))) + _1799) * _1762;
        float _1809 = _1730 * 0.5;
        float _1810 = _1740 * 0.5;
        float _1811 = _1750 * 0.5;
        float _1812 = dot(vec3(_1809, _1810, _1811), vec3(_1809, _1810, _1811));
        float _1817 = (_1812 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1812);
        float _1825 = (dot(vec3(_1438, _1439, _1440), vec3(_1817 * _1809, _1817 * _1810, _1817 * _1811)) + 1.0) * 0.5;
        float _4704 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1834 = sqrt(((_1810 * _1810) + (_1809 * _1809)) + (_1811 * _1811)) / (_1763 + 9.9999997473787516355514526367188e-06);
        float _4715 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1835 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _1836 = _1835 * 2.0;
        float _1840 = (1.0 - _1835) / (_1835 + 1.0);
        float _4726 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1841 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
        float _1850 = ((((1.0 - _1841) * (_1836 + 2.0)) * exp2(log2(isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_1836 + 1.0))) + _1841) * _1763;
        float _1851 = _1731 * 0.5;
        float _1852 = _1741 * 0.5;
        float _1853 = _1751 * 0.5;
        float _1854 = dot(vec3(_1851, _1852, _1853), vec3(_1851, _1852, _1853));
        float _1859 = (_1854 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1854);
        float _1867 = (dot(vec3(_1438, _1439, _1440), vec3(_1859 * _1851, _1859 * _1852, _1859 * _1853)) + 1.0) * 0.5;
        float _4737 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1876 = sqrt(((_1852 * _1852) + (_1851 * _1851)) + (_1853 * _1853)) / (_1764 + 9.9999997473787516355514526367188e-06);
        float _4748 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1877 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
        float _1878 = _1877 * 2.0;
        float _1882 = (1.0 - _1877) / (_1877 + 1.0);
        float _4759 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
        float _1883 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
        float _1892 = ((((1.0 - _1883) * (_1878 + 2.0)) * exp2(log2(isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_1878 + 1.0))) + _1883) * _1764;
        _1900 = _1731;
        _1902 = _1730;
        _1903 = _1729;
        _1904 = _1741;
        _1905 = _1740;
        _1906 = _1739;
        _1907 = _1751;
        _1908 = _1750;
        _1909 = _1749;
        _1910 = _1764;
        _1911 = _1763;
        _1912 = _1762;
        _1913 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)));
        _1914 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0)));
        _1915 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0)));
    }
    else
    {
        _1900 = _1901;
        _1902 = _1901;
        _1903 = _1901;
        _1904 = _1901;
        _1905 = _1901;
        _1906 = _1901;
        _1907 = _1901;
        _1908 = _1901;
        _1909 = _1901;
        _1910 = _1901;
        _1911 = _1901;
        _1912 = _1901;
        _1913 = 0.0;
        _1914 = 0.0;
        _1915 = 0.0;
    }
    float _2208;
    float _2209;
    float _2210;
    float _2211;
    float _2212;
    float _2213;
    float _2214;
    float _2215;
    float _2216;
    float _2217;
    float _2218;
    float _2219;
    float _2220;
    float _2221;
    float _2222;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1941 = fma(_1576, cbModelParam._m0[30u].z, fma(_1572, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1568));
        float _1945 = fma(_1576, cbModelParam._m0[31u].z, fma(_1572, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1568));
        float _1949 = fma(_1576, cbModelParam._m0[32u].z, fma(_1572, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1568));
        float _1971 = _1568 + _1438;
        float _1972 = _1572 + _1439;
        float _1973 = _1576 + _1440;
        float _1983 = fma(_1973, cbModelParam._m0[30u].z, fma(_1972, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1971)) - _1941;
        float _1984 = fma(_1973, cbModelParam._m0[31u].z, fma(_1972, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1971)) - _1945;
        float _1985 = fma(_1973, cbModelParam._m0[32u].z, fma(_1972, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1971)) - _1949;
        float _1989 = inversesqrt(dot(vec3(_1983, _1984, _1985), vec3(_1983, _1984, _1985)));
        float _2001 = ((_1989 * _1983) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1941 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _2002 = ((_1989 * _1984) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1945 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _2003 = ((_1989 * _1985) / cbModelParam._m0[35u].z) + ((((((_1949 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _2005 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_2001, _2002, _2003), 0.0);
        vec4 _2012 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_2001, _2002, _2003), 0.0);
        vec4 _2019 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_2001, _2002, _2003), 0.0);
        vec4 _2026 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_2001, _2002, _2003), 0.0);
        float _2038 = exp2((_2005.w + (-0.5)) * 20.0) * 2.0;
        float _2039 = _2038 * (_2005.x + (-0.5));
        float _2040 = _2038 * (_2005.y + (-0.5));
        float _2041 = _2038 * (_2005.z + (-0.5));
        float _2048 = exp2((_2012.w + (-0.5)) * 20.0) * 2.0;
        float _2049 = _2048 * (_2012.x + (-0.5));
        float _2050 = _2048 * (_2012.y + (-0.5));
        float _2051 = _2048 * (_2012.z + (-0.5));
        float _2058 = exp2((_2019.w + (-0.5)) * 20.0) * 2.0;
        float _2059 = _2058 * (_2019.x + (-0.5));
        float _2060 = _2058 * (_2019.y + (-0.5));
        float _2061 = _2058 * (_2019.z + (-0.5));
        float _2068 = exp2((_2026.w + (-0.5)) * 20.0) * 2.0;
        float _2069 = _2068 * (_2026.x + (-0.5));
        float _2070 = _2068 * (_2026.y + (-0.5));
        float _2071 = _2068 * (_2026.z + (-0.5));
        float _2072 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2073 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2074 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2075 = _2039 * 0.5;
        float _2076 = _2049 * 0.5;
        float _2077 = _2059 * 0.5;
        float _2078 = dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077));
        float _2083 = (_2078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2078);
        float _2091 = (dot(vec3(_1438, _1439, _1440), vec3(_2083 * _2075, _2083 * _2076, _2083 * _2077)) + 1.0) * 0.5;
        float _4800 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2100 = sqrt(((_2076 * _2076) + (_2075 * _2075)) + (_2077 * _2077)) / (_2072 + 9.9999997473787516355514526367188e-06);
        float _4811 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2101 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
        float _2102 = _2101 * 2.0;
        float _2106 = (1.0 - _2101) / (_2101 + 1.0);
        float _4822 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2107 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
        float _2116 = ((((1.0 - _2107) * (_2102 + 2.0)) * exp2(log2(isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2102 + 1.0))) + _2107) * _2072;
        float _2117 = _2040 * 0.5;
        float _2118 = _2050 * 0.5;
        float _2119 = _2060 * 0.5;
        float _2120 = dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119));
        float _2125 = (_2120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2120);
        float _2133 = (dot(vec3(_1438, _1439, _1440), vec3(_2125 * _2117, _2125 * _2118, _2125 * _2119)) + 1.0) * 0.5;
        float _4833 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2142 = sqrt(((_2118 * _2118) + (_2117 * _2117)) + (_2119 * _2119)) / (_2073 + 9.9999997473787516355514526367188e-06);
        float _4844 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2143 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
        float _2144 = _2143 * 2.0;
        float _2148 = (1.0 - _2143) / (_2143 + 1.0);
        float _4855 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2149 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
        float _2158 = ((((1.0 - _2149) * (_2144 + 2.0)) * exp2(log2(isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0))) * (_2144 + 1.0))) + _2149) * _2073;
        float _2159 = _2041 * 0.5;
        float _2160 = _2051 * 0.5;
        float _2161 = _2061 * 0.5;
        float _2162 = dot(vec3(_2159, _2160, _2161), vec3(_2159, _2160, _2161));
        float _2167 = (_2162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2162);
        float _2175 = (dot(vec3(_1438, _1439, _1440), vec3(_2167 * _2159, _2167 * _2160, _2167 * _2161)) + 1.0) * 0.5;
        float _4866 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2184 = sqrt(((_2160 * _2160) + (_2159 * _2159)) + (_2161 * _2161)) / (_2074 + 9.9999997473787516355514526367188e-06);
        float _4877 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2185 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
        float _2186 = _2185 * 2.0;
        float _2190 = (1.0 - _2185) / (_2185 + 1.0);
        float _4888 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2191 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
        float _2200 = ((((1.0 - _2191) * (_2186 + 2.0)) * exp2(log2(isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0))) * (_2186 + 1.0))) + _2191) * _2074;
        _2208 = _2041;
        _2209 = _2040;
        _2210 = _2039;
        _2211 = _2051;
        _2212 = _2050;
        _2213 = _2049;
        _2214 = _2061;
        _2215 = _2060;
        _2216 = _2059;
        _2217 = _2074;
        _2218 = _2073;
        _2219 = _2072;
        _2220 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0)));
        _2221 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0)));
        _2222 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0)));
    }
    else
    {
        _2208 = _1901;
        _2209 = _1901;
        _2210 = _1901;
        _2211 = _1901;
        _2212 = _1901;
        _2213 = _1901;
        _2214 = _1901;
        _2215 = _1901;
        _2216 = _1901;
        _2217 = _1901;
        _2218 = _1901;
        _2219 = _1901;
        _2220 = 0.0;
        _2221 = 0.0;
        _2222 = 0.0;
    }
    float _2232 = (cbModelParam._m0[1u].x * (_2220 - _1913)) + _1913;
    float _2233 = (cbModelParam._m0[1u].x * (_2221 - _1914)) + _1914;
    float _2234 = (cbModelParam._m0[1u].x * (_2222 - _1915)) + _1915;
    float _2255 = fma(_2234, cbSceneParam._m0[89u].z, fma(_2233, cbSceneParam._m0[89u].y, _2232 * cbSceneParam._m0[89u].x));
    float _2258 = fma(_2234, cbSceneParam._m0[90u].z, fma(_2233, cbSceneParam._m0[90u].y, _2232 * cbSceneParam._m0[90u].x));
    float _2261 = fma(_2234, cbSceneParam._m0[91u].z, fma(_2233, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2232));
    float _2274 = _1510 * 0.5;
    float _2275 = _1511 * 0.5;
    float _2276 = _1512 * 0.5;
    float _2277 = dot(vec4(_2274, _2275, _2276, 1.0), vec4(_2210, _2213, _2216, _2219));
    float _2280 = dot(vec4(_2274, _2275, _2276, 1.0), vec4(_2209, _2212, _2215, _2218));
    float _2283 = dot(vec4(_2274, _2275, _2276, 1.0), vec4(_2208, _2211, _2214, _2217));
    float _2317;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2290 = dot(vec4(_2274, _2275, _2276, 1.0), vec4(_1900, _1904, _1907, _1910));
        float _2294 = dot(vec4(_2274, _2275, _2276, 1.0), vec4(_1902, _1905, _1908, _1911));
        float _2298 = dot(vec4(_2274, _2275, _2276, 1.0), vec4(_1903, _1906, _1909, _1912));
        float _2305 = dot(vec4(cbModelParam._m0[39u]), vec4(_2274, _2275, _2276, 1.0));
        _2317 = dot(vec3(isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0)), isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0)), isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2305) ? 0.0 : (isnan(0.0) ? _2305 : max(0.0, _2305))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2317 = 1.0;
    }
    float _2328;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2319 = dot(vec4(cbModelParam._m0[40u]), vec4(_2274, _2275, _2276, 1.0));
        _2328 = dot(vec3(isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0)), isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0)), isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2319) ? 0.0 : (isnan(0.0) ? _2319 : max(0.0, _2319))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2328 = 1.0;
    }
    float _2332 = (_2328 * cbModelParam._m0[1u].x) + (_2317 * (1.0 - cbModelParam._m0[1u].x));
    float _2342 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1311);
    float _2343 = isnan(_2342) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2342 : min(cbModelParam._m0[25u].z, _2342));
    float _2423;
    float _2425;
    float _2427;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2390 = fma(_1576, cbModelParam._m0[13u].z, fma(_1572, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1568)) + cbModelParam._m0[13u].w;
        float _2394 = fma(_1576, cbModelParam._m0[14u].z, fma(_1572, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1568)) + cbModelParam._m0[14u].w;
        float _2398 = fma(_1576, cbModelParam._m0[15u].z, fma(_1572, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1568)) + cbModelParam._m0[15u].w;
        float _2401 = fma(_1512, cbModelParam._m0[13u].z, fma(_1511, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1510));
        float _2404 = fma(_1512, cbModelParam._m0[14u].z, fma(_1511, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1510));
        float _2407 = fma(_1512, cbModelParam._m0[15u].z, fma(_1511, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1510));
        float _2435;
        if (_2401 > 0.0)
        {
            _2435 = abs((1.0 - _2390) / _2401);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2401 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2390 + 1.0) / _2401);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2435 = frontier_phi_19_17_ladder;
        }
        float _2713;
        if (_2404 > 0.0)
        {
            _2713 = abs((1.0 - _2394) / _2404);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2404 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2394 + 1.0) / _2404);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2713 = frontier_phi_28_24_ladder;
        }
        float _3122;
        if (_2407 > 0.0)
        {
            _3122 = abs((1.0 - _2398) / _2407);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_2407 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_2398 + 1.0) / _2407);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _3122 = frontier_phi_42_35_ladder;
        }
        float _3124 = isnan(_2713) ? _2435 : (isnan(_2435) ? _2713 : min(_2435, _2713));
        float _3125 = isnan(_3122) ? _3124 : (isnan(_3124) ? _3122 : min(_3124, _3122));
        float _3129 = (_3125 * _2401) + _2390;
        float _3130 = (_3125 * _2404) + _2394;
        float _3131 = (_3125 * _2407) + _2398;
        float _3132 = _3125 * 9.9999997473787516355514526367188e-05;
        float _3134 = (-1.0) - _3132;
        float _3136 = _3132 + 1.0;
        float frontier_phi_18_42_ladder;
        float frontier_phi_18_42_ladder_1;
        float frontier_phi_18_42_ladder_2;
        if ((_3131 > _3136) || ((_3131 < _3134) || ((_3130 > _3136) || ((_3130 < _3134) || ((_3129 < _3134) || (_3129 > _3136))))))
        {
            frontier_phi_18_42_ladder = 0.0;
            frontier_phi_18_42_ladder_1 = 0.0;
            frontier_phi_18_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3348 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_3131, cbModelParam._m0[9u].z, fma(_3130, cbModelParam._m0[9u].y, _3129 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_3131, cbModelParam._m0[10u].z, fma(_3130, cbModelParam._m0[10u].y, _3129 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_3131, cbModelParam._m0[11u].z, fma(_3130, cbModelParam._m0[11u].y, _3129 * cbModelParam._m0[11u].x))), _2343);
            frontier_phi_18_42_ladder = _3348.z * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_1 = _3348.y * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_2 = _3348.x * cbModelParam._m0[1u].y;
        }
        _2423 = frontier_phi_18_42_ladder_2;
        _2425 = frontier_phi_18_42_ladder_1;
        _2427 = frontier_phi_18_42_ladder;
    }
    else
    {
        vec4 _2411 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1510, _1511, _1512), _2343);
        _2423 = _2411.x * cbModelParam._m0[1u].y;
        _2425 = _2411.y * cbModelParam._m0[1u].y;
        _2427 = _2411.z * cbModelParam._m0[1u].y;
    }
    float _2431 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1311);
    float _2432 = isnan(_2431) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2431 : min(cbModelParam._m0[25u].w, _2431));
    float _2521;
    float _2523;
    float _2525;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2485 = fma(_1576, cbModelParam._m0[21u].z, fma(_1572, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1568)) + cbModelParam._m0[21u].w;
        float _2489 = fma(_1576, cbModelParam._m0[22u].z, fma(_1572, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1568)) + cbModelParam._m0[22u].w;
        float _2493 = fma(_1576, cbModelParam._m0[23u].z, fma(_1572, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1568)) + cbModelParam._m0[23u].w;
        float _2496 = fma(_1512, cbModelParam._m0[21u].z, fma(_1511, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1510));
        float _2499 = fma(_1512, cbModelParam._m0[22u].z, fma(_1511, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1510));
        float _2502 = fma(_1512, cbModelParam._m0[23u].z, fma(_1511, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1510));
        float _2718;
        if (_2496 > 0.0)
        {
            _2718 = abs((1.0 - _2485) / _2496);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2496 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2485 + 1.0) / _2496);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2718 = frontier_phi_30_26_ladder;
        }
        float _3149;
        if (_2499 > 0.0)
        {
            _3149 = abs((1.0 - _2489) / _2499);
        }
        else
        {
            float frontier_phi_44_37_ladder;
            if (_2499 < 0.0)
            {
                frontier_phi_44_37_ladder = abs((_2489 + 1.0) / _2499);
            }
            else
            {
                frontier_phi_44_37_ladder = 5000.0;
            }
            _3149 = frontier_phi_44_37_ladder;
        }
        float _3425;
        if (_2502 > 0.0)
        {
            _3425 = abs((1.0 - _2493) / _2502);
        }
        else
        {
            float frontier_phi_61_53_ladder;
            if (_2502 < 0.0)
            {
                frontier_phi_61_53_ladder = abs((_2493 + 1.0) / _2502);
            }
            else
            {
                frontier_phi_61_53_ladder = 5000.0;
            }
            _3425 = frontier_phi_61_53_ladder;
        }
        float _3427 = isnan(_3149) ? _2718 : (isnan(_2718) ? _3149 : min(_2718, _3149));
        float _3428 = isnan(_3425) ? _3427 : (isnan(_3427) ? _3425 : min(_3427, _3425));
        float _3432 = (_3428 * _2496) + _2485;
        float _3433 = (_3428 * _2499) + _2489;
        float _3434 = (_3428 * _2502) + _2493;
        float _3435 = _3428 * 9.9999997473787516355514526367188e-05;
        float _3436 = (-1.0) - _3435;
        float _3438 = _3435 + 1.0;
        float frontier_phi_27_61_ladder;
        float frontier_phi_27_61_ladder_1;
        float frontier_phi_27_61_ladder_2;
        if ((_3434 > _3438) || ((_3434 < _3436) || ((_3433 > _3438) || ((_3433 < _3436) || ((_3432 < _3436) || (_3432 > _3438))))))
        {
            frontier_phi_27_61_ladder = 0.0;
            frontier_phi_27_61_ladder_1 = 0.0;
            frontier_phi_27_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3710 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3434, cbModelParam._m0[17u].z, fma(_3433, cbModelParam._m0[17u].y, _3432 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3434, cbModelParam._m0[18u].z, fma(_3433, cbModelParam._m0[18u].y, _3432 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3434, cbModelParam._m0[19u].z, fma(_3433, cbModelParam._m0[19u].y, _3432 * cbModelParam._m0[19u].x))), _2432);
            frontier_phi_27_61_ladder = _3710.y * cbModelParam._m0[1u].z;
            frontier_phi_27_61_ladder_1 = _3710.z * cbModelParam._m0[1u].z;
            frontier_phi_27_61_ladder_2 = _3710.x * cbModelParam._m0[1u].z;
        }
        _2521 = frontier_phi_27_61_ladder_2;
        _2523 = frontier_phi_27_61_ladder;
        _2525 = frontier_phi_27_61_ladder_1;
    }
    else
    {
        vec4 _2505 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1510, _1511, _1512), _2432);
        _2521 = _2505.x * cbModelParam._m0[1u].z;
        _2523 = _2505.y * cbModelParam._m0[1u].z;
        _2525 = _2505.z * cbModelParam._m0[1u].z;
    }
    float _2537 = ((((1.0 - _1538) * ((_1526 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1538 * _1526)) * _1502;
    float _2538 = _2537 * ((cbModelParam._m0[1u].w * (_2521 - _2423)) + _2423);
    float _2539 = _2537 * ((cbModelParam._m0[1u].w * (_2523 - _2425)) + _2425);
    float _2540 = _2537 * ((cbModelParam._m0[1u].w * (_2525 - _2427)) + _2427);
    float _2543 = fma(_2540, cbSceneParam._m0[89u].z, fma(_2539, cbSceneParam._m0[89u].y, _2538 * cbSceneParam._m0[89u].x));
    float _2546 = fma(_2540, cbSceneParam._m0[90u].z, fma(_2539, cbSceneParam._m0[90u].y, _2538 * cbSceneParam._m0[90u].x));
    float _2549 = fma(_2540, cbSceneParam._m0[91u].z, fma(_2539, cbSceneParam._m0[91u].y, _2538 * cbSceneParam._m0[91u].x));
    float _2568 = (cbSceneParam._m0[88u].y * (1.0 - _1311)) + cbSceneParam._m0[88u].z;
    float _5014 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    vec4 _2572 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(_1402, _1403), (isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0))) * 5.0);
    float _2588 = 1.0 - _2572.w;
    uvec4 _2597 = floatBitsToUint(cbInstanceData._m0[_1248]);
    uint _2599 = _2597.x * 14u;
    float _2606 = (cbLight._m0[_2599 + 13u].x * (_1502 + (-1.0))) + 1.0;
    uint _2607 = _2599 + 4u;
    float _2613 = isnan(1.0) ? _2606 : (isnan(_2606) ? 1.0 : min(_2606, 1.0));
    float _2622 = dot(vec3(cbLight._m0[_2599].xyz), vec3(_1438, _1439, _1440));
    float _5030 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2626 = (isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0))) * 0.3183098733425140380859375;
    float _2628 = (cbLight._m0[_2607].x * _2613) * _2626;
    float _2629 = (_2613 * cbLight._m0[_2607].y) * _2626;
    float _2630 = (_2613 * cbLight._m0[_2607].z) * _2626;
    uint _2632 = _2599 + 8u;
    float _2645 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2599].w)) * _1311) * 0.949999988079071044921875);
    float _2646 = _2645 * _2645;
    float _2647 = cbLight._m0[_2599].x + _1382;
    float _2648 = cbLight._m0[_2599].y + _1383;
    float _2649 = cbLight._m0[_2599].z + _1384;
    float _2653 = inversesqrt(dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649)));
    float _2654 = _2653 * _2647;
    float _2655 = _2653 * _2648;
    float _2656 = _2653 * _2649;
    float _2657 = dot(vec3(_1438, _1439, _1440), vec3(cbLight._m0[_2599].xyz));
    float _5041 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
    float _2660 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
    float _5052 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
    float _2661 = isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0));
    float _2662 = dot(vec3(_1438, _1439, _1440), vec3(_2654, _2655, _2656));
    float _5063 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
    float _2665 = isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0));
    float _2666 = dot(vec3(cbLight._m0[_2599].xyz), vec3(_2654, _2655, _2656));
    float _5074 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
    float _2670 = _2646 * _2646;
    float _2674 = ((_2665 * _2665) * (_2670 + (-1.0))) + 1.0;
    float _2684 = (exp2(log2(1.0 - (isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2685 = 1.0 - _2646;
    float _2696 = (0.5 / (((_2661 * ((_2660 * _2685) + _2646)) + 9.9999999392252902907785028219223e-09) + (((_2661 * _2685) + _2646) * _2660))) * _2660;
    float _5085 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
    float _2698 = (isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0))) * (_2670 / ((_2674 * _2674) * 3.141590118408203125));
    float _2701 = ((_2684 * cbLight._m0[_2632].x) * _2698) * _2613;
    float _2704 = ((_2684 * cbLight._m0[_2632].y) * _2698) * _2613;
    float _2707 = ((_2684 * cbLight._m0[_2632].z) * _2698) * _2613;
    float _2821;
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    float _2831;
    if (_2597.y == 0u)
    {
        float _2762 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2763 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2762;
        float _2764 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2762;
        float _2765 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2762;
        uvec4 _2777 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2778 = _2777.x;
        uint _2789 = uint((float(_2777.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1403) / _2778))) + floor(float(uint(cbSceneParam._m0[85u].x * _1402) / _2778)));
        float _2799 = (log2(_2765 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2800 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        uint _2803 = uint(isnan(14.0) ? _2800 : (isnan(_2800) ? 14.0 : min(_2800, 14.0)));
        uvec4 _2808 = texelFetch(g_lightClusterGridBuffer, int(((_2803 << 2u) + (_2789 << 6u)) >> 2u));
        uint _2809 = _2808.x;
        uint _2810 = _2777.z;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        if (((((1u << ((_2810 >> 4u) & 15u)) + 4294967295u) & _2809) == 0u) || ((_2810 & 240u) == 0u))
        {
            _2948 = 0.0;
            _2950 = 0.0;
            _2952 = 0.0;
            _2954 = 0.0;
            _2956 = 0.0;
            _2958 = 0.0;
        }
        else
        {
            float _2949;
            float _2951;
            float _2953;
            float _2955;
            float _2957;
            float _2959;
            float _3186 = 0.0;
            float _3187 = 0.0;
            float _3188 = 0.0;
            float _3189 = 0.0;
            float _3190 = 0.0;
            float _3191 = 0.0;
            uint _3192 = 0u;
            uint _3201;
            bool _3202;
            for (;;)
            {
                _3201 = texelFetch(g_lightClassification, int((((_2803 << 5u) + (_2789 << 9u)) + (_3192 << 2u)) >> 2u)).x;
                _3202 = _3201 == 0u;
                float frontier_phi_55_pred;
                float frontier_phi_55_pred_1;
                float frontier_phi_55_pred_2;
                float frontier_phi_55_pred_3;
                float frontier_phi_55_pred_4;
                float frontier_phi_55_pred_5;
                if (_3202)
                {
                    frontier_phi_55_pred = _3190;
                    frontier_phi_55_pred_1 = _3191;
                    frontier_phi_55_pred_2 = _3189;
                    frontier_phi_55_pred_3 = _3188;
                    frontier_phi_55_pred_4 = _3187;
                    frontier_phi_55_pred_5 = _3186;
                }
                else
                {
                    float _3468;
                    float _3469;
                    float _3470;
                    float _3471;
                    float _3472;
                    float _3473;
                    uint _3474;
                    _3468 = _3186;
                    _3469 = _3187;
                    _3470 = _3188;
                    _3471 = _3189;
                    _3472 = _3190;
                    _3473 = _3191;
                    _3474 = _3201;
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    float _3362;
                    for (;;)
                    {
                        uint _3478 = uint(findLSB(_3474)) + (_3192 << 5u);
                        uint _3475 = (_3474 + 4294967295u) & _3474;
                        uint _3480 = _3478 * 48u;
                        vec4 _3494 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3480)).x, texelFetch(g_PointLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3480 + 3u)).x));
                        uint _3500 = (_3478 * 48u) + 4u;
                        vec4 _3513 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3500)).x, texelFetch(g_PointLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3500 + 3u)).x));
                        uint _3519 = (_3478 * 48u) + 8u;
                        vec3 _3530 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3519)).x, texelFetch(g_PointLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3519 + 2u)).x));
                        float _3534 = _3494.x - _2763;
                        float _3535 = _3494.y - _2764;
                        float _3536 = _3494.z - _2765;
                        float _3537 = dot(vec3(_3534, _3535, _3536), vec3(_3534, _3535, _3536));
                        float _3540 = inversesqrt(_3537);
                        float _3541 = _3540 * _3534;
                        float _3542 = _3540 * _3535;
                        float _3543 = _3540 * _3536;
                        float _3544 = dot(vec3(_1459, _1462, _1465), vec3(_3541, _3542, _3543));
                        float _3549 = 1.0 - (_3537 * _3494.w);
                        float _5106 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                        float _3550 = isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0));
                        float _3551 = sqrt(_3537) * _3513.w;
                        float _3554 = 1.39999997615814208984375 / (_3551 + 1.39999997615814208984375);
                        float _3555 = _3554 * _3554;
                        float _3558 = ((1.0 - _3555) * _3544) + _3555;
                        float _3561 = _3551 * _3551;
                        float _3565 = ((isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0))) * _3550) / ((_3561 * 0.699999988079071044921875) + 1.0);
                        float _3569 = (-0.0) - _2763;
                        float _3570 = (-0.0) - _2764;
                        float _3571 = (-0.0) - _2765;
                        float _3575 = inversesqrt(dot(vec3(_3569, _3570, _3571), vec3(_3569, _3570, _3571)));
                        float _3576 = _3575 * _3569;
                        float _3577 = _3575 * _3570;
                        float _3578 = _3575 * _3571;
                        float _3586 = exp2(log2(1.0 / ((_3561 * 3.5) + 5.0)) * 0.25);
                        float _3587 = 1.0 - _1526;
                        float _3594 = sqrt(1.0 - ((1.0 - (_3587 * _3587)) * (1.0 - (_3586 * _3586))));
                        float _3595 = _3594 * _3594;
                        float _3596 = _3595 * _3595;
                        float _3597 = _3576 + _3541;
                        float _3598 = _3577 + _3542;
                        float _3599 = _3578 + _3543;
                        float _3603 = inversesqrt(dot(vec3(_3597, _3598, _3599), vec3(_3597, _3598, _3599)));
                        float _3607 = dot(vec3(_1459, _1462, _1465), vec3(_3576, _3577, _3578));
                        float _5122 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                        float _3610 = isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0));
                        float _3611 = dot(vec3(_1459, _1462, _1465), vec3(_3603 * _3597, _3603 * _3598, _3603 * _3599));
                        float _5133 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                        float _3614 = isnan(1.0) ? _5133 : (isnan(_5133) ? 1.0 : min(_5133, 1.0));
                        float _3618 = ((_3614 * _3614) * (_3596 + (-1.0))) + 1.0;
                        float _3619 = _3554 * _3595;
                        float _3620 = _3619 * _3619;
                        float _3623 = ((1.0 - _3620) * _3544) + _3620;
                        float _5144 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                        float _3624 = isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0));
                        float _3625 = 1.0 - _3595;
                        float _3635 = (0.5 / (((_3624 * ((_3610 * _3625) + _3595)) + 9.9999999392252902907785028219223e-09) + (((_3624 * _3625) + _3595) * _3610))) * _3624;
                        float _5155 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                        float _3646 = (((_3596 * 3.1415927410125732421875) * (isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0)))) / ((_3618 * _3618) * ((_3561 * 2.1991131305694580078125) + 3.141590118408203125))) * _3550;
                        _3360 = (_3565 * _3513.x) + _3471;
                        _3361 = (_3565 * _3513.y) + _3472;
                        _3362 = (_3565 * _3513.z) + _3473;
                        _3357 = (_3646 * _3530.x) + _3468;
                        _3358 = (_3646 * _3530.y) + _3469;
                        _3359 = (_3646 * _3530.z) + _3470;
                        if (_3475 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3468 = _3357;
                            _3469 = _3358;
                            _3470 = _3359;
                            _3471 = _3360;
                            _3472 = _3361;
                            _3473 = _3362;
                            _3474 = _3475;
                        }
                    }
                    frontier_phi_55_pred = _3361;
                    frontier_phi_55_pred_1 = _3362;
                    frontier_phi_55_pred_2 = _3360;
                    frontier_phi_55_pred_3 = _3359;
                    frontier_phi_55_pred_4 = _3358;
                    frontier_phi_55_pred_5 = _3357;
                }
                _2957 = frontier_phi_55_pred;
                _2959 = frontier_phi_55_pred_1;
                _2955 = frontier_phi_55_pred_2;
                _2953 = frontier_phi_55_pred_3;
                _2951 = frontier_phi_55_pred_4;
                _2949 = frontier_phi_55_pred_5;
                uint _3193 = _3192 + 1u;
                if (_3193 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3186 = _2949;
                    _3187 = _2951;
                    _3188 = _2953;
                    _3189 = _2955;
                    _3190 = _2957;
                    _3191 = _2959;
                    _3192 = _3193;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2948 = _2949;
            _2950 = _2951;
            _2952 = _2953;
            _2954 = _2955;
            _2956 = _2957;
            _2958 = _2959;
        }
        uvec4 _2962 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2963 = _2962.z;
        uint _2965 = (_2963 >> 8u) & 15u;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        float _3162;
        float _3164;
        if (((4294967295u << _2965) & _2809) == 0u)
        {
            _3154 = _2948;
            _3156 = _2950;
            _3158 = _2952;
            _3160 = _2954;
            _3162 = _2956;
            _3164 = _2958;
        }
        else
        {
            float _3179 = inversesqrt(dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765)));
            float _3180 = _3179 * _2763;
            float _3181 = _3179 * _2764;
            float _3182 = _3179 * _2765;
            float frontier_phi_46_47_ladder;
            float frontier_phi_46_47_ladder_1;
            float frontier_phi_46_47_ladder_2;
            float frontier_phi_46_47_ladder_3;
            float frontier_phi_46_47_ladder_4;
            float frontier_phi_46_47_ladder_5;
            if (_2965 < ((_2963 >> 12u) & 15u))
            {
                float _3155;
                float _3157;
                float _3159;
                float _3161;
                float _3163;
                float _3165;
                float _3451 = _2948;
                float _3452 = _2950;
                float _3453 = _2952;
                float _3454 = _2954;
                float _3455 = _2956;
                float _3456 = _2958;
                uint _3457 = _2965;
                uint _3466;
                bool _3467;
                for (;;)
                {
                    _3466 = texelFetch(g_lightClassification, int((((_2803 << 5u) + (_2789 << 9u)) + (_3457 << 2u)) >> 2u)).x;
                    _3467 = _3466 == 0u;
                    float frontier_phi_70_pred;
                    float frontier_phi_70_pred_1;
                    float frontier_phi_70_pred_2;
                    float frontier_phi_70_pred_3;
                    float frontier_phi_70_pred_4;
                    float frontier_phi_70_pred_5;
                    if (_3467)
                    {
                        frontier_phi_70_pred = _3451;
                        frontier_phi_70_pred_1 = _3456;
                        frontier_phi_70_pred_2 = _3455;
                        frontier_phi_70_pred_3 = _3454;
                        frontier_phi_70_pred_4 = _3453;
                        frontier_phi_70_pred_5 = _3452;
                    }
                    else
                    {
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _4017;
                        float _4018;
                        float _4019;
                        float _4020;
                        float _4021;
                        float _4022;
                        float _3737 = _3451;
                        float _3738 = _3452;
                        float _3739 = _3453;
                        float _3740 = _3454;
                        float _3741 = _3455;
                        float _3742 = _3456;
                        uint _3743 = _3466;
                        uint _3744;
                        vec4 _3769;
                        float _3770;
                        vec4 _3785;
                        vec3 _3797;
                        vec4 _3812;
                        vec4 _3827;
                        float _3873;
                        bool _3874;
                        for (;;)
                        {
                            uint _3754 = ((_3457 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3743));
                            _3744 = (_3743 + 4294967295u) & _3743;
                            uint _3756 = _3754 * 40u;
                            _3769 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3756)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 3u)).x));
                            _3770 = _3769.w;
                            uint _3772 = (_3754 * 40u) + 4u;
                            _3785 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3772)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 3u)).x));
                            uint _3787 = (_3754 * 40u) + 8u;
                            _3797 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3787)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3787 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3787 + 2u)).x));
                            uint _3799 = (_3754 * 40u) + 16u;
                            _3812 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3799)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3799 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3799 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3799 + 3u)).x));
                            uint _3814 = (_3754 * 40u) + 20u;
                            _3827 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3814)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3814 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3814 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3814 + 3u)).x));
                            uint _3829 = (_3754 * 40u) + 24u;
                            vec4 _3842 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 3u)).x));
                            uint _3848 = (_3754 * 40u) + 28u;
                            vec4 _3861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 3u)).x));
                            _3873 = fma(_2765, _3861.z, fma(_2764, _3861.y, _3861.x * _2763)) + _3861.w;
                            _3874 = !((fma(_2765, _3842.z, fma(_2764, _3842.y, _3842.x * _2763)) + _3842.w) <= 0.0);
                            float frontier_phi_79_pred;
                            float frontier_phi_79_pred_1;
                            float frontier_phi_79_pred_2;
                            float frontier_phi_79_pred_3;
                            float frontier_phi_79_pred_4;
                            float frontier_phi_79_pred_5;
                            if (_3874)
                            {
                                float _3901 = _3769.x - _2763;
                                float _3902 = _3769.y - _2764;
                                float _3903 = _3769.z - _2765;
                                float _3904 = dot(vec3(_3901, _3902, _3903), vec3(_3901, _3902, _3903));
                                float _3907 = inversesqrt(_3904);
                                float _3908 = _3907 * _3901;
                                float _3909 = _3907 * _3902;
                                float _3910 = _3907 * _3903;
                                float _3914 = 1.0 - (_3904 / (_3770 * _3770));
                                float _5166 = isnan(0.0) ? _3914 : (isnan(_3914) ? 0.0 : max(_3914, 0.0));
                                float _3915 = isnan(1.0) ? _5166 : (isnan(_5166) ? 1.0 : min(_5166, 1.0));
                                float _3919 = sqrt(_3904) * _3785.w;
                                float _3921 = 1.39999997615814208984375 / (_3919 + 1.39999997615814208984375);
                                float _3922 = _3921 * _3921;
                                float _3925 = ((1.0 - _3922) * dot(vec3(_3908, _3909, _3910), vec3(_1459, _1462, _1465))) + _3922;
                                float _3928 = _3919 * _3919;
                                float _3932 = (fma(_2765, _3812.z, fma(_2764, _3812.y, _3812.x * _2763)) + _3812.w) / _3873;
                                float _3933 = (fma(_2765, _3827.z, fma(_2764, _3827.y, _3827.x * _2763)) + _3827.w) / _3873;
                                float _3937 = 1.0 - dot(vec2(_3932, _3933), vec2(_3932, _3933));
                                float _5182 = isnan(0.0) ? _3937 : (isnan(_3937) ? 0.0 : max(_3937, 0.0));
                                float _3938 = isnan(1.0) ? _5182 : (isnan(_5182) ? 1.0 : min(_5182, 1.0));
                                float _3939 = _3938 * (((isnan(0.0) ? _3925 : (isnan(_3925) ? 0.0 : max(_3925, 0.0))) * _3915) / ((_3928 * 0.699999988079071044921875) + 1.0));
                                float _3951 = exp2(log2(1.0 / ((_3928 * 3.5) + 5.0)) * 0.25);
                                float _3952 = 1.0 - _1526;
                                float _3959 = sqrt(1.0 - ((1.0 - (_3952 * _3952)) * (1.0 - (_3951 * _3951))));
                                float _3960 = _3959 * _3959;
                                float _3961 = _3960 * _3960;
                                float _3962 = _3908 - _3180;
                                float _3963 = _3909 - _3181;
                                float _3964 = _3910 - _3182;
                                float _3968 = inversesqrt(dot(vec3(_3962, _3963, _3964), vec3(_3962, _3963, _3964)));
                                float _3972 = dot(vec3(_1459, _1462, _1465), vec3((-0.0) - _3180, (-0.0) - _3181, (-0.0) - _3182));
                                float _5193 = isnan(0.0) ? _3972 : (isnan(_3972) ? 0.0 : max(_3972, 0.0));
                                float _3975 = isnan(1.0) ? _5193 : (isnan(_5193) ? 1.0 : min(_5193, 1.0));
                                float _3976 = dot(vec3(_1459, _1462, _1465), vec3(_3968 * _3962, _3968 * _3963, _3968 * _3964));
                                float _5204 = isnan(0.0) ? _3976 : (isnan(_3976) ? 0.0 : max(_3976, 0.0));
                                float _3979 = isnan(1.0) ? _5204 : (isnan(_5204) ? 1.0 : min(_5204, 1.0));
                                float _3983 = ((_3979 * _3979) * (_3961 + (-1.0))) + 1.0;
                                float _3984 = _3921 * _3960;
                                float _3985 = _3984 * _3984;
                                float _3991 = ((1.0 - _3985) * dot(vec3(_1459, _1462, _1465), vec3(_3908, _3909, _3910))) + _3985;
                                float _5215 = isnan(0.0) ? _3991 : (isnan(_3991) ? 0.0 : max(_3991, 0.0));
                                float _3992 = isnan(1.0) ? _5215 : (isnan(_5215) ? 1.0 : min(_5215, 1.0));
                                float _3993 = 1.0 - _3960;
                                float _4003 = (0.5 / (((_3992 * ((_3975 * _3993) + _3960)) + 9.9999999392252902907785028219223e-09) + (((_3992 * _3993) + _3960) * _3975))) * _3992;
                                float _5226 = isnan(0.0) ? _4003 : (isnan(_4003) ? 0.0 : max(_4003, 0.0));
                                float _4013 = (_3938 * _3915) * (((_3961 * 3.1415927410125732421875) * (isnan(1.0) ? _5226 : (isnan(_5226) ? 1.0 : min(_5226, 1.0)))) / ((_3983 * _3983) * ((_3928 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_79_pred = _4013 * _3797.z;
                                frontier_phi_79_pred_1 = _3939 * _3785.z;
                                frontier_phi_79_pred_2 = _3939 * _3785.y;
                                frontier_phi_79_pred_3 = _3939 * _3785.x;
                                frontier_phi_79_pred_4 = _4013 * _3797.y;
                                frontier_phi_79_pred_5 = _4013 * _3797.x;
                            }
                            else
                            {
                                frontier_phi_79_pred = 0.0;
                                frontier_phi_79_pred_1 = 0.0;
                                frontier_phi_79_pred_2 = 0.0;
                                frontier_phi_79_pred_3 = 0.0;
                                frontier_phi_79_pred_4 = 0.0;
                                frontier_phi_79_pred_5 = 0.0;
                            }
                            _4019 = frontier_phi_79_pred;
                            _4022 = frontier_phi_79_pred_1;
                            _4021 = frontier_phi_79_pred_2;
                            _4020 = frontier_phi_79_pred_3;
                            _4018 = frontier_phi_79_pred_4;
                            _4017 = frontier_phi_79_pred_5;
                            _3718 = _4020 + _3740;
                            _3719 = _4021 + _3741;
                            _3720 = _4022 + _3742;
                            _3715 = _4017 + _3737;
                            _3716 = _4018 + _3738;
                            _3717 = _4019 + _3739;
                            if (_3744 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3737 = _3715;
                                _3738 = _3716;
                                _3739 = _3717;
                                _3740 = _3718;
                                _3741 = _3719;
                                _3742 = _3720;
                                _3743 = _3744;
                                continue;
                            }
                        }
                        frontier_phi_70_pred = _3715;
                        frontier_phi_70_pred_1 = _3720;
                        frontier_phi_70_pred_2 = _3719;
                        frontier_phi_70_pred_3 = _3718;
                        frontier_phi_70_pred_4 = _3717;
                        frontier_phi_70_pred_5 = _3716;
                    }
                    _3155 = frontier_phi_70_pred;
                    _3165 = frontier_phi_70_pred_1;
                    _3163 = frontier_phi_70_pred_2;
                    _3161 = frontier_phi_70_pred_3;
                    _3159 = frontier_phi_70_pred_4;
                    _3157 = frontier_phi_70_pred_5;
                    uint _3458 = _3457 + 1u;
                    if (_3458 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3451 = _3155;
                        _3452 = _3157;
                        _3453 = _3159;
                        _3454 = _3161;
                        _3455 = _3163;
                        _3456 = _3165;
                        _3457 = _3458;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_46_47_ladder = _3159;
                frontier_phi_46_47_ladder_1 = _3161;
                frontier_phi_46_47_ladder_2 = _3163;
                frontier_phi_46_47_ladder_3 = _3165;
                frontier_phi_46_47_ladder_4 = _3157;
                frontier_phi_46_47_ladder_5 = _3155;
            }
            else
            {
                frontier_phi_46_47_ladder = _2952;
                frontier_phi_46_47_ladder_1 = _2954;
                frontier_phi_46_47_ladder_2 = _2956;
                frontier_phi_46_47_ladder_3 = _2958;
                frontier_phi_46_47_ladder_4 = _2950;
                frontier_phi_46_47_ladder_5 = _2948;
            }
            _3154 = frontier_phi_46_47_ladder_5;
            _3156 = frontier_phi_46_47_ladder_4;
            _3158 = frontier_phi_46_47_ladder;
            _3160 = frontier_phi_46_47_ladder_1;
            _3162 = frontier_phi_46_47_ladder_2;
            _3164 = frontier_phi_46_47_ladder_3;
        }
        float _3169 = isnan(1.0) ? _1502 : (isnan(_1502) ? 1.0 : min(_1502, 1.0));
        _2821 = (_3169 * _3160) + _2628;
        _2823 = (_3169 * _3162) + _2629;
        _2825 = (_3169 * _3164) + _2630;
        _2827 = ((_3154 * 0.039999999105930328369140625) * _3169) + _2701;
        _2829 = ((_3156 * 0.039999999105930328369140625) * _3169) + _2704;
        _2831 = ((_3158 * 0.039999999105930328369140625) * _3169) + _2707;
    }
    else
    {
        _2821 = _2628;
        _2823 = _2629;
        _2825 = _2630;
        _2827 = _2701;
        _2829 = _2704;
        _2831 = _2707;
    }
    float _2845 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2846 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2847 = cbSceneParam._m0[86u].x * ((_1402 / cbSceneParam._m0[86u].x) + (((10.0 / (_1326 + 10.0)) * cbMtdParam._m0[12u].y) * dot(vec3(_1438, _1439, _1440), vec3(_232, _233, _234))));
    float _2848 = isnan(_2845) ? _2847 : (isnan(_2847) ? _2845 : min(_2847, _2845));
    float _2849 = isnan(_2846) ? _1403 : (isnan(_1403) ? _2846 : min(_1403, _2846));
    vec4 _2851 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2848, _2849), 0.0);
    float _2853 = _2851.x;
    bool _2873 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2853)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2853))) > _1326;
    float _2874 = _2873 ? _2848 : _1402;
    float _2875 = _2873 ? _2849 : _1403;
    vec4 _2877 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2874, _2875));
    vec4 _2882 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2874, _2875));
    float _2884 = _2882.x;
    bool _2889 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _2898 = (-0.0) - cbSceneParam._m0[2u].z;
    float _2904 = (_2889 ? (_2898 / (cbSceneParam._m0[2u].x - _2884)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2884))) - _1326;
    float _2906 = cbMtdParam._m0[42u].x + cbMtdParam._m0[36u].x;
    float _2907 = cbMtdParam._m0[42u].y + cbMtdParam._m0[36u].y;
    float _2908 = cbMtdParam._m0[42u].z + cbMtdParam._m0[36u].z;
    bool _2914 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2918 = (isnan(_2904) ? 0.0 : (isnan(0.0) ? _2904 : max(0.0, _2904))) * (-1.44269502162933349609375);
    float _5257 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
    float _5268 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
    float _5279 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
    float _3049;
    float _3050;
    float _3051;
    if ((1.0 - _1233) > 0.00999999977648258209228515625)
    {
        vec4 _2970 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2874, _2875), 0.0);
        float _2972 = _2970.x;
        float _2978 = (_2889 ? (_2898 / (cbSceneParam._m0[2u].x - _2972)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2972))) - _1326;
        uint _2984 = floatBitsToUint(cbInstanceData._m0[_1248]).x * 14u;
        uint _2990 = _2984 + 4u;
        float _2999 = dot(vec3(cbLight._m0[_2984].xyz), vec3(_253, _254, _255));
        float _3006 = dot(vec3((-0.0) - _1382, (-0.0) - _1383, (-0.0) - _1384), vec3((-0.0) - _253, (-0.0) - _254, (-0.0) - _255));
        float _3011 = ((isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0))) / (isnan(0.001000000047497451305389404296875) ? _2999 : (isnan(_2999) ? 0.001000000047497451305389404296875 : max(_2999, 0.001000000047497451305389404296875)))) + 1.0;
        float _3013 = (-0.0) - ((isnan(_2978) ? 0.0 : (isnan(0.0) ? _2978 : max(0.0, _2978))) * _3011);
        _3049 = _2914 ? 0.0 : ((((_1292 * cbMtdParam._m0[36u].x) * cbLight._m0[_2990].x) / ((_3011 * _2906) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2906 * 1.44269502162933349609375) * _3013)));
        _3050 = _2914 ? 0.0 : ((((_1292 * cbMtdParam._m0[36u].y) * cbLight._m0[_2990].y) / ((_3011 * _2907) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2907 * 1.44269502162933349609375) * _3013)));
        _3051 = _2914 ? 0.0 : ((((_1292 * cbMtdParam._m0[36u].z) * cbLight._m0[_2990].z) / ((_3011 * _2908) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2908 * 1.44269502162933349609375) * _3013)));
    }
    else
    {
        _3049 = 0.0;
        _3050 = 0.0;
        _3051 = 0.0;
    }
    float _3068 = 0.959999978542327880859375 - (exp2(log2(1.0 - _1517) * 5.0) * 0.959999978542327880859375);
    float _3069 = (_3049 + ((exp2(_2918 * (_2914 ? 0.0 : _2906)) * _2877.x) * cbSceneParam._m0[72u].w)) * _3068;
    float _3070 = (_3050 + ((exp2(_2918 * (_2914 ? 0.0 : _2907)) * _2877.y) * cbSceneParam._m0[72u].w)) * _3068;
    float _3071 = (_3051 + ((exp2(_2918 * (_2914 ? 0.0 : _2908)) * _2877.z) * cbSceneParam._m0[72u].w)) * _3068;
    float _3079 = (_3069 + (((((_2537 * _2572.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0))) * _2332) * _2588)) + _2827) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _5257 : (isnan(_5257) ? 1.0 : min(_5257, 1.0))) * (_2821 + ((isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0))) * _1502))) - _3069) * _1233);
    float _3081 = (_3070 + (((((_2537 * _2572.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0))) * _2332) * _2588)) + _2829) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _5268 : (isnan(_5268) ? 1.0 : min(_5268, 1.0))) * (_2823 + ((isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0))) * _1502))) - _3070) * _1233);
    float _3083 = (_3071 + (((((_2537 * _2572.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0))) * _2332) * _2588)) + _2831) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _5279 : (isnan(_5279) ? 1.0 : min(_5279, 1.0))) * (_2825 + ((isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0))) * _1502))) - _3071) * _1233);
    float _3088 = cbInstanceData._m0[_1247 + 6u].w * (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0)));
    float _3093 = _1402 / cbSceneParam._m0[86u].x;
    float _3094 = _1403 / cbSceneParam._m0[86u].y;
    vec4 _3108 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3093, _3094, (log2((isnan(cbSceneParam._m0[77u].w) ? _1326 : (isnan(_1326) ? cbSceneParam._m0[77u].w : min(_1326, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3110 = _3108.x;
    float _3111 = _3108.y;
    float _3112 = _3108.z;
    float _3113 = _3108.w;
    float _3242;
    float _3244;
    float _3246;
    float _3248;
    if (_1326 > cbSceneParam._m0[78u].w)
    {
        float _3207 = isnan(_1326) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1326 : min(cbSceneParam._m0[80u].w, _1326));
        float _3208 = _3207 / _1326;
        float _3219 = _3208 * _1375;
        float _3220 = _1376 * _3208;
        float _3221 = (-0.0) - _3220;
        float _3222 = _3208 * _1377;
        float _3224 = (cbSceneParam._m0[77u].w * _3221) / _3207;
        float _3225 = _3224 + cbSceneParam._m0[79u].w;
        float _3226 = cbSceneParam._m0[79u].w - _3220;
        float _3232 = sqrt(((_3219 * _3219) + (_3220 * _3220)) + (_3222 * _3222));
        float _3235 = (1.0 - (cbSceneParam._m0[77u].w / _3207)) * _3232;
        float _3240 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3241 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3651;
        if (abs((_3221 - _3224) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3651 = ((((_3225 > 0.0) ? exp2(_3240 * _3225) : (2.0 - exp2(_3241 * _3225))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3235;
        }
        else
        {
            float _3382 = 1.0 / cbSceneParam._m0[80u].x;
            float _3383 = isnan(_3226) ? _3225 : (isnan(_3225) ? _3226 : max(_3225, _3226));
            float _3384 = isnan(_3226) ? _3225 : (isnan(_3225) ? _3226 : min(_3225, _3226));
            float _3393 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : min(_3383, 0.0));
            float _3394 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : min(_3384, 0.0));
            _3651 = ((abs(_3232 / _3221) * cbSceneParam._m0[80u].y) * ((((_3393 - _3394) * 2.0) - ((exp2(_3240 * (isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0)))) - exp2(_3240 * (isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0))))) * _3382)) - ((exp2(_3241 * _3393) - exp2(_3241 * _3394)) * _3382))) + (_3235 * cbSceneParam._m0[80u].z);
        }
        vec4 _3653 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3093, _3094, 1.0), 0.0);
        float _3662 = exp2((_3651 * (-1.44269502162933349609375)) * (1.0 - _3653.w));
        float _3663 = log2(_3662);
        float _3679 = log2(_3113);
        _3242 = (exp2(_3679 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3663 * cbSceneParam._m0[78u].x)) * _3653.x) / cbSceneParam._m0[78u].x)) + _3110;
        _3244 = (exp2(_3679 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3663 * cbSceneParam._m0[78u].y)) * _3653.y) / cbSceneParam._m0[78u].y)) + _3111;
        _3246 = (exp2(_3679 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3663 * cbSceneParam._m0[78u].z)) * _3653.z) / cbSceneParam._m0[78u].z)) + _3112;
        _3248 = _3662 * _3113;
    }
    else
    {
        _3242 = _3110;
        _3244 = _3111;
        _3246 = _3112;
        _3248 = _3113;
    }
    bool _3689;
    float _3303;
    vec4 _3306;
    float _3308;
    vec4 _3310;
    float _3318;
    float _3319;
    float _3320;
    float _3321;
    bool _3331;
    for (;;)
    {
        bool _3260 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _3261 = log2(_3248);
        float _3268 = exp2(_3261 * cbSceneParam._m0[78u].x) * _3079;
        float _3269 = exp2(_3261 * cbSceneParam._m0[78u].y) * _3081;
        float _3270 = exp2(_3261 * cbSceneParam._m0[78u].z) * _3083;
        vec4 _3278 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1402, _1403));
        float _3280 = _3278.x;
        float _3301 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3280)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3280))) - _1326) * cbMtdParam._m0[14u].w;
        float _5345 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
        _3303 = _3088 * (isnan(1.0) ? _5345 : (isnan(_5345) ? 1.0 : min(_5345, 1.0)));
        float _3304 = _1391 + (-0.5);
        _3306 = cbMtdParam._m0[1u];
        _3308 = _3306.y * _3304;
        _3310 = cbMatDynParam._m0[0u];
        float _3317 = (roundEven(_3310.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3318 = _3317 * (_3260 ? _3268 : (_3268 + (cbSceneParam._m0[72u].w * _3242)));
        _3319 = _3317 * (_3260 ? _3269 : (_3269 + (cbSceneParam._m0[72u].w * _3244)));
        _3320 = _3317 * (_3260 ? _3270 : (_3270 + (cbSceneParam._m0[72u].w * _3246)));
        _3321 = _3304 * 0.999000012874603271484375;
        _3331 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3331)
        {
            if ((cbInstanceData._m0[_1247 + 7u].x + _3321) < 0.5)
            {
                _3689 = true;
                break;
            }
        }
        uint _3417 = _1478 + uint(_3310.w);
        if ((cbInstanceData._m0[_3417].w < 1.0) && ((cbInstanceData._m0[_3417].w + _3321) < 0.5))
        {
            _3689 = true;
            break;
        }
        if ((_3308 + 1.0) < _3306.x)
        {
            _3689 = true;
            break;
        }
        _3689 = false;
        break;
    }
    float _3728;
    if (_3689)
    {
        discard_state = true;
        _3728 = 0.0;
    }
    else
    {
        _3728 = _3303;
    }
    SV_Target.x = _3318;
    SV_Target.y = _3319;
    SV_Target.z = _3320;
    SV_Target.w = _3728;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3303;
    discard_exit();
}


