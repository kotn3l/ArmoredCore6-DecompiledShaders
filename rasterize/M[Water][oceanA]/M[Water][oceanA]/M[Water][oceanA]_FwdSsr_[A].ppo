#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[45];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 0, std140) uniform cbPerSceneUBO
{
    vec4 _m0[39];
} cbPerScene;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture2D g_PrevFrameTexture;
layout(set = 0, binding = 27) uniform texture2D g_ConvertedDepthTexture;
layout(set = 0, binding = 0) uniform texture2D M_Water_oceanA_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_oceanA_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_oceanA_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_oceanA_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_oceanA_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Water_oceanA_snp_0_Texture2D_5;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in vec4 TEXCOORD_8;
layout(location = 7) in float TEXCOORD_11;
layout(location = 7, component = 1) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _166 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _167 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _168 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _174 = inversesqrt(dot(vec3(_166, _167, _168), vec3(_166, _167, _168)));
    float _181 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _182 = _181 * NORMAL.x;
    float _183 = _181 * NORMAL.y;
    float _184 = _181 * NORMAL.z;
    float _188 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _196;
    float _197;
    float _198;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _196 = (-0.0) - _182;
        _197 = (-0.0) - _183;
        _198 = (-0.0) - _184;
    }
    else
    {
        _196 = _182;
        _197 = _183;
        _198 = _184;
    }
    float _242 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _252 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _242);
    float _253 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _242);
    float _254 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _242);
    float _267 = cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x;
    vec4 _284 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_2, SS_BumpMap), vec2((((_267 * cbMtdParam._m0[27u].x) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_267 * cbMtdParam._m0[27u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _287 = _284.x;
    float _288 = _284.y;
    float _289 = _284.z;
    float _290 = _284.w;
    float _303 = cbMtdParam._m0[14u].y - cbMtdParam._m0[14u].x;
    float _306 = (sqrt(((_252 * _252) + (_253 * _253)) + (_254 * _254)) - cbMtdParam._m0[14u].x) / (isnan(0.001000000047497451305389404296875) ? _303 : (isnan(_303) ? 0.001000000047497451305389404296875 : max(_303, 0.001000000047497451305389404296875)));
    float _307 = _306 + 0.180000007152557373046875;
    float _309 = _307 * 12.0;
    float _1795 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _312 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
    vec4 _324 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(gl_FragCoord.x / cbPerScene._m0[18u].x, gl_FragCoord.y / cbPerScene._m0[18u].y));
    float _326 = _324.x;
    float _348 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _326)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _326))) - POSITION_1.w;
    float _349 = _348 / ((_312 * 0.0599999986588954925537109375) + 0.0599999986588954925537109375);
    float _1806 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _350 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
    float _351 = isnan(0.5) ? _350 : (isnan(_350) ? 0.5 : max(_350, 0.5));
    float _353 = 1.0 - _351;
    float _354 = _307 * 7.0;
    float _1822 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _356 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
    float _367 = (_289 * 0.00200000009499490261077880859375) + TEXCOORD.x;
    float _368 = (_289 * 0.00999999977648258209228515625) + TEXCOORD.y;
    vec4 _382 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_3, SS_WrapLinear), vec2((((cbMtdParam._m0[25u].z * _267) + _367) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[25u].w * _267) + _368) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _384 = _382.x;
    float _407 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_3, SS_WrapLinear), vec2((((cbMtdParam._m0[23u].z * _367) + (cbMtdParam._m0[26u].z * _267)) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[23u].w * _368) + (cbMtdParam._m0[26u].w * _267)) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x + (-0.0500000007450580596923828125);
    float _410 = (isnan(_407) ? _384 : (isnan(_384) ? _407 : max(_384, _407))) - _356;
    float _1838 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _411 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
    float _412 = _356 + 0.5;
    float _1849 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _423 = cbMtdParam._m0[16u].w * _267;
    float _424 = cos(_423);
    float _425 = sin(_423);
    vec4 _449 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2(((((_425 * cbMtdParam._m0[31u].x) + TEXCOORD.x) + (cbMtdParam._m0[22u].x * _267)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((_424 * cbMtdParam._m0[31u].y) + TEXCOORD.y) + (cbMtdParam._m0[22u].y * _267)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _453 = _449.z;
    vec4 _468 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[21u].z * _267) + TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[21u].w * _267) + TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _472 = _468.z;
    float _475 = (isnan(_472) ? _453 : (isnan(_453) ? _472 : max(_453, _472))) * (isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0)));
    float _1865 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _476 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
    float _479 = (_353 - _290) + (isnan(_476) ? _411 : (isnan(_411) ? _476 : max(_411, _476)));
    float _1881 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _480 = isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0));
    float _1892 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _486 = isnan(1.0) ? _1892 : (isnan(_1892) ? 1.0 : min(_1892, 1.0));
    float _487 = _289 - _486;
    float _1903 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0));
    vec4 _535 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[23u].x * _267) + (cbMtdParam._m0[30u].z * _425)) + (cbMtdParam._m0[34u].z * TEXCOORD.x)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[23u].y * _267) + (cbMtdParam._m0[30u].w * _424)) + (cbMtdParam._m0[34u].w * TEXCOORD.y)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _559 = cbMtdParam._m0[37u].w * TEXCOORD_5.x;
    float _615 = ((((((_535.w + (-0.5)) * cbMtdParam._m0[43u].w) + (cbMtdParam._m0[39u].y * (_449.w + (-0.5)))) + (cbMtdParam._m0[40u].x * (_468.w + (-0.5)))) + (((_559 + cbMtdParam._m0[41u].z) * cos(cbMtdParam._m0[13u].y * _267)) * (texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_5, SS_WrapLinear), vec2(((cbMtdParam._m0[32u].z * TEXCOORD.x) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, ((cbMtdParam._m0[32u].w * TEXCOORD.y) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w)).y + (-0.5)))) + ((sin(cbMtdParam._m0[13u].x * _267) * (cbMtdParam._m0[40u].w + _559)) * (texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_5, SS_WrapLinear), vec2(((cbMtdParam._m0[31u].z * TEXCOORD.x) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, ((cbMtdParam._m0[31u].w * TEXCOORD.y) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w)).y + (-0.5)))) * (1.0 - TEXCOORD_5.y);
    float _643 = 1.0 - _290;
    float _648 = ((isnan(0.550000011920928955078125) ? _643 : (isnan(_643) ? 0.550000011920928955078125 : max(_643, 0.550000011920928955078125))) + (-0.550000011920928955078125)) * cbMtdParam._m0[16u].z;
    float _651 = ((TEXCOORD_5.y * (-0.5)) * _648) + _648;
    float _655 = ((TEXCOORD_5.z * (-0.699999988079071044921875)) * _651) + _651;
    float _671 = ((((((cbMtdParam._m0[37u].x - (cbMtdParam._m0[37u].x * TEXCOORD_5.y)) * _289) + cbMtdParam._m0[20u].z) + _615) + ((texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[35u].z * TEXCOORD.x) + (cbMtdParam._m0[22u].z * _267)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[35u].w * TEXCOORD.y) + (cbMtdParam._m0[22u].w * _267)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).w + (-0.5)) * cbMtdParam._m0[44u].z)) + ((sin(cbMtdParam._m0[21u].y * _267) * cbMtdParam._m0[38u].z) * (isnan(0.300000011920928955078125) ? TEXCOORD_5.z : (isnan(TEXCOORD_5.z) ? 0.300000011920928955078125 : max(TEXCOORD_5.z, 0.300000011920928955078125))))) + _655;
    float _673 = _671 * cbMtdParam._m0[20u].w;
    float _1924 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _684 = inversesqrt(dot(vec3(_252, _253, _254), vec3(_252, _253, _254)));
    float _688 = dot(vec4(_684 * _252, _684 * _253, _684 * _254, 0.0), vec4(_196, _197, _198, 0.0));
    float _1935 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _696 = exp2(log2((1.0 - (isnan(1.0) ? _1935 : (isnan(_1935) ? 1.0 : min(_1935, 1.0)))) * cbMtdParam._m0[12u].z) * cbMtdParam._m0[12u].w);
    float _1946 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _699 = (((_480 * _351) + cbMtdParam._m0[9u].x) + (_488 * cbMtdParam._m0[10u].x)) + (((isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0))) * cbMtdParam._m0[11u].x) * (isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0))));
    float _1957 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _1968 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _704 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
    float _710 = ((_704 + _699) + (((1.0 - (isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0)))) - _699) * _486)) + ((_312 * (-0.87999999523162841796875)) * _704);
    float _711 = _289 * 0.01200000010430812835693359375;
    float _736 = (_289 * 0.300000011920928955078125) * texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[35u].x * _267) + _711) + (cbMtdParam._m0[24u].x * TEXCOORD.x)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[35u].y * _267) + _711) + (cbMtdParam._m0[24u].y * TEXCOORD.y)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z;
    float _1979 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _741 = (((1.0 - _710) * TEXCOORD_5.x) * (isnan(1.0) ? _1979 : (isnan(_1979) ? 1.0 : min(_1979, 1.0)))) + _710;
    vec4 _775 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_4, SS_WrapLinear), vec2(((((cbMtdParam._m0[27u].z * _267) + (cbMtdParam._m0[30u].x * _425)) + (cbMtdParam._m0[29u].x * _367)) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, ((((cbMtdParam._m0[27u].w * _267) + (cbMtdParam._m0[30u].y * _424)) + (cbMtdParam._m0[29u].y * _368)) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _778 = _775.y;
    float _784 = 1.0 - (_348 / cbMtdParam._m0[18u].w);
    float _788 = ((_775.x * TEXCOORD_8.x) * cbMtdParam._m0[18u].z) * (isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0)));
    float _794 = _778 * TEXCOORD_8.y;
    float _797 = ((isnan(cbMtdParam._m0[19u].x) ? _794 : (isnan(_794) ? cbMtdParam._m0[19u].x : max(_794, cbMtdParam._m0[19u].x))) - cbMtdParam._m0[19u].x) * cbMtdParam._m0[19u].y;
    float _798 = isnan(_797) ? _788 : (isnan(_788) ? _797 : max(_788, _797));
    float _2005 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _802 = ((isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0))) * (1.0 - _741)) + _741;
    float _840 = exp2(log2(cbMtdParam._m0[15u].w * _643) * cbMtdParam._m0[17u].x);
    float _2016 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _841 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
    float _842 = _841 * texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_4, SS_WrapLinear), vec2(((((cbMtdParam._m0[28u].x * _267) + (cbMtdParam._m0[28u].z * _643)) + (cbMtdParam._m0[29u].z * _367)) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, ((((cbMtdParam._m0[28u].y * _267) + (cbMtdParam._m0[28u].w * _643)) + (cbMtdParam._m0[29u].w * _368)) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).z;
    float _850 = (((_356 * TEXCOORD_8.z) * (1.0 - _802)) * (((_841 - _842) * cbMtdParam._m0[17u].w) + _842)) + _802;
    float _854 = 1.0 - (_348 / cbMtdParam._m0[18u].x);
    float _865 = _306 + 0.20000000298023223876953125;
    float _867 = _865 * 9.0;
    float _2032 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _872 = ((cbMtdParam._m0[13u].w - cbMtdParam._m0[12u].x) * (isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0)))) + cbMtdParam._m0[12u].x;
    float _875 = (_306 + 0.099999986588954925537109375) * 2.5;
    float _2043 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _880 = ((cbMtdParam._m0[14u].z - _872) * (isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0)))) + _872;
    float _882 = (_850 + _480) + (((cbMtdParam._m0[18u].y * _778) * (isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0)))) * (1.0 - _850));
    float _2054 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _887 = ((0.3499999940395355224609375 - _880) * (isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0)))) + _880;
    float _888 = TEXCOORD_5.z * 0.5;
    float _900 = (_306 + 0.100000001490116119384765625) * 0.89999997615814208984375;
    float _2065 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _905 = ((cbMtdParam._m0[17u].y - cbMtdParam._m0[20u].x) * (isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0)))) + cbMtdParam._m0[20u].x;
    float _910 = (_905 * (_287 + (-0.5))) + 0.5;
    float _911 = (_905 * (_288 + (-0.5))) + 0.5;
    float _2076 = isnan(0.0) ? TEXCOORD_5.y : (isnan(TEXCOORD_5.y) ? 0.0 : max(TEXCOORD_5.y, 0.0));
    float _912 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
    vec4 _940 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[26u].x * TEXCOORD.z) + (cbMtdParam._m0[32u].x * _267)) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[26u].y * TEXCOORD.w) + (cbMtdParam._m0[32u].y * _267)) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _948 = ((_468.x + (-0.5)) * 0.5) + _449.x;
    float _949 = ((_468.y + (-0.5)) * 0.5) + _449.y;
    vec4 _973 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[24u].z * TEXCOORD.x) + (cbMtdParam._m0[25u].x * _267)) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[24u].w * TEXCOORD.y) + (cbMtdParam._m0[25u].y * _267)) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _980 = _865 * 12.0;
    float _2087 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _982 = 1.0 - (isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0)));
    float _996 = cbMtdParam._m0[33u].z * TEXCOORD.x;
    float _997 = cbMtdParam._m0[33u].w * TEXCOORD.y;
    vec4 _1004 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2(((_996 + (cbMtdParam._m0[33u].x * _267)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_997 + (cbMtdParam._m0[33u].y * _267)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1031 = texture(sampler2D(M_Water_oceanA_snp_0_Texture2D_0, SS_BumpMap), vec2((((_996 + ((cbMtdParam._m0[27u].x * 0.4000000059604644775390625) * _488)) + (cbMtdParam._m0[34u].x * _267)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_997 + ((cbMtdParam._m0[27u].y * 0.4000000059604644775390625) * _488)) + (cbMtdParam._m0[34u].y * _267)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1045 = (((0.5 - _948) * 0.10999999940395355224609375) + _948) + (((((((_973.z + (-0.5)) * cbMtdParam._m0[16u].x) * _982) + (-1.0)) + _1004.x) + _1031.x) * cbMtdParam._m0[15u].z);
    float _1046 = (((0.5 - _949) * 0.10999999940395355224609375) + _949) + (((((((_973.w + (-0.5)) * cbMtdParam._m0[16u].x) * _982) + (-1.0)) + _1004.y) + _1031.y) * cbMtdParam._m0[15u].z);
    float _1051 = ((_940.x - _1045) * _306) + _1045;
    float _1052 = ((_940.y - _1046) * _306) + _1046;
    float _1053 = _306 * 0.5;
    float _2098 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _1054 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
    float _1065 = cbMtdParam._m0[17u].z - (cbMtdParam._m0[17u].z * _655);
    float _1072 = cbMtdParam._m0[19u].z - (cbMtdParam._m0[19u].z * TEXCOORD_5.y);
    float _1074 = _1072 - (_1072 * _1054);
    float _1078 = (((((((0.5 - _287) * 0.60000002384185791015625) + _287) - _910) * _912) + _910) + (_1074 * (_535.x + (-0.5)))) + (((_1051 + (-0.5)) + ((0.5 - _1051) * _1054)) * _1065);
    float _1080 = (((((((0.5 - _288) * 0.60000002384185791015625) + _288) - _911) * _912) + _911) + (_1074 * (_535.y + (-0.5)))) + (((_1052 + (-0.5)) + ((0.5 - _1052) * _1054)) * _1065);
    float _1090 = (((_888 * (0.5 - _1078)) + _1078) * 2.0) + (-1.0);
    float _1091 = (((_888 * (0.5 - _1080)) + _1080) * 2.0) + (-1.0);
    float _1092 = dot(vec2(_1090, _1091), vec2(_1090, _1091));
    float _2109 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _1097 = sqrt(1.0 - (isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0))));
    float _1100 = fma(_1097, _196, fma(_1091, _188 * TANGENT.x, (_174 * _166) * _1090));
    float _1103 = fma(_1097, _197, fma(_1091, _188 * TANGENT.y, (_174 * _167) * _1090));
    float _1106 = fma(_1097, _198, fma(_1091, _188 * TANGENT.z, (_174 * _168) * _1090));
    float _1110 = inversesqrt(dot(vec3(_1100, _1103, _1106), vec3(_1100, _1103, _1106)));
    float _1111 = _1110 * _1100;
    float _1112 = _1110 * _1103;
    float _1113 = _1110 * _1106;
    float _2120 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _1114 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
    float _1126 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1166 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1175 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1166);
    float _1176 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1166);
    float _1177 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1166);
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1243 = sqrt(((_1175 * _1175) + (_1176 * _1176)) + (_1177 * _1177));
        float _1249 = (cbMatDynParam._m0[5u].x * _1243) + cbMatDynParam._m0[5u].y;
        float _2131 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
        float _1254 = (cbMatDynParam._m0[5u].z * _1243) + cbMatDynParam._m0[5u].w;
        float _2142 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0))) - _1250)) + _1250) < ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    vec4 _1188 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD_11, TEXCOORD_12));
    float _1197 = (_1188.x * 2.0) + (-1.0);
    float _1198 = (_1188.y * 2.0) + (-1.0);
    float _1199 = (_1188.z * 2.0) + (-1.0);
    float _1203 = inversesqrt(dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199)));
    float _1214 = ((TEXCOORD_12 >= 1.0) || ((TEXCOORD_12 <= 0.0) || ((TEXCOORD_11 <= 0.0) || (TEXCOORD_11 >= 1.0)))) ? 0.0 : _1188.w;
    float _1221 = (((_1197 * _1203) - _1111) * _1214) + _1111;
    float _1222 = (((_1198 * _1203) - _1112) * _1214) + _1112;
    float _1223 = (((_1199 * _1203) - _1113) * _1214) + _1113;
    float _1224 = POSITION_1.x / POSITION_1.w;
    float _1225 = POSITION_1.y / POSITION_1.w;
    float _1228 = (_1224 * 0.5) + 0.5;
    float _1229 = 0.5 - (_1225 * 0.5);
    float _1266;
    float _1268;
    float _1270;
    float _1272;
    if (_1114 < cbPerScene._m0[22u].z)
    {
        _1266 = 0.0;
        _1268 = 0.0;
        _1270 = 0.0;
        _1272 = 0.0;
    }
    else
    {
        float _1278 = 1.0 / _1126;
        float frontier_phi_5_6_ladder;
        float frontier_phi_5_6_ladder_1;
        float frontier_phi_5_6_ladder_2;
        float frontier_phi_5_6_ladder_3;
        if (!(cbPerScene._m0[21u].y >= _1278))
        {
            float _1303 = fma(_1223, cbPerScene._m0[8u].z, fma(_1222, cbPerScene._m0[8u].y, cbPerScene._m0[8u].x * _1221));
            float _1306 = fma(_1223, cbPerScene._m0[9u].z, fma(_1222, cbPerScene._m0[9u].y, cbPerScene._m0[9u].x * _1221));
            float _1309 = fma(_1223, cbPerScene._m0[10u].z, fma(_1222, cbPerScene._m0[10u].y, cbPerScene._m0[10u].x * _1221));
            float _1315 = (_1224 * _1126) * cbPerScene._m0[28u].x;
            float _1317 = (_1225 * _1126) * cbPerScene._m0[28u].y;
            float _1321 = inversesqrt(dot(vec3(_1315, _1317, _1126), vec3(_1315, _1317, _1126)));
            float _1322 = _1315 * _1321;
            float _1323 = _1317 * _1321;
            float _1324 = _1321 * _1126;
            float _1328 = dot(vec3(_1322, _1323, _1324), vec3(_1303, _1306, _1309)) * 2.0;
            float _1332 = _1322 - (_1328 * _1303);
            float _1333 = _1323 - (_1328 * _1306);
            float _1334 = _1324 - (_1328 * _1309);
            float _1338 = inversesqrt(dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334)));
            float _1341 = _1334 * _1338;
            float frontier_phi_5_6_ladder_8_ladder;
            float frontier_phi_5_6_ladder_8_ladder_1;
            float frontier_phi_5_6_ladder_8_ladder_2;
            float frontier_phi_5_6_ladder_8_ladder_3;
            if (_1341 < cbPerScene._m0[16u].x)
            {
                frontier_phi_5_6_ladder_8_ladder = 0.0;
                frontier_phi_5_6_ladder_8_ladder_1 = 0.0;
                frontier_phi_5_6_ladder_8_ladder_2 = 0.0;
                frontier_phi_5_6_ladder_8_ladder_3 = 0.0;
            }
            else
            {
                float _1352 = abs(dot(vec3((-0.0) - _1322, (-0.0) - _1323, (-0.0) - _1324), vec3(_1303, _1306, _1309)));
                float _2153 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
                float _1363 = (((_1114 * _1114) * 0.959999978542327880859375) * exp2(log2(1.0 - (isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0)))) * 5.0)) + 0.039999999105930328369140625;
                float _1371 = (cbPerScene._m0[29u].x * (1.0 - _1114)) + cbPerScene._m0[29u].y;
                float _2164 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
                float _1379 = ((cbPerScene._m0[23u].w - cbPerScene._m0[23u].z) * (isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0)))) + cbPerScene._m0[23u].z;
                float frontier_phi_5_6_ladder_8_ladder_9_ladder;
                float frontier_phi_5_6_ladder_8_ladder_9_ladder_1;
                float frontier_phi_5_6_ladder_8_ladder_9_ladder_2;
                float frontier_phi_5_6_ladder_8_ladder_9_ladder_3;
                if (_1363 < cbPerScene._m0[22u].x)
                {
                    frontier_phi_5_6_ladder_8_ladder_9_ladder = 0.0;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_1 = 0.0;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_2 = 0.0;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_3 = 0.0;
                }
                else
                {
                    float _1382 = _1341 - cbPerScene._m0[16u].x;
                    float _2175 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
                    float _1383 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
                    float _1384 = _1383 * _1383;
                    float _1386 = (_1363 - cbPerScene._m0[22u].x) * 10.0;
                    float _2186 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
                    float _1388 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
                    float _1389 = isnan(_1388) ? _1384 : (isnan(_1384) ? _1388 : min(_1384, _1388));
                    float _1393 = (cbPerScene._m0[21u].x - _1126) * cbPerScene._m0[21u].z;
                    float _2202 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
                    float _1394 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
                    float _1395 = isnan(_1394) ? _1389 : (isnan(_1389) ? _1394 : min(_1389, _1394));
                    float _1396 = (_1332 * _1338) + _1315;
                    float _1397 = (_1333 * _1338) + _1317;
                    float _1398 = _1341 + _1126;
                    float _1429 = fma(_1398, cbPerScene._m0[7u].z, fma(_1397, cbPerScene._m0[7u].y, cbPerScene._m0[7u].x * _1396)) + cbPerScene._m0[7u].w;
                    float _1433 = ((fma(_1398, cbPerScene._m0[4u].z, fma(_1397, cbPerScene._m0[4u].y, cbPerScene._m0[4u].x * _1396)) + cbPerScene._m0[4u].w) / _1429) - _1228;
                    float _1434 = ((fma(_1398, cbPerScene._m0[5u].z, fma(_1397, cbPerScene._m0[5u].y, cbPerScene._m0[5u].x * _1396)) + cbPerScene._m0[5u].w) / _1429) - _1229;
                    float _1440 = cbPerScene._m0[18u].x * _1433;
                    float _1441 = cbPerScene._m0[18u].y * _1434;
                    float _1446 = sqrt((_1440 * _1440) + (_1441 * _1441)) + 9.9999997473787516355514526367188e-06;
                    float _1451 = (_1433 / _1446) * _1379;
                    float _1452 = (_1434 / _1446) * _1379;
                    float _1453 = (((1.0 / _1398) - _1278) / _1446) * _1379;
                    float _1480 = abs(float(_1451 > 0.0) - _1228) / (abs(_1451) + 1.0000000116860974230803549289703e-07);
                    float _1481 = abs(float(_1452 > 0.0) - _1229) / (abs(_1452) + 1.0000000116860974230803549289703e-07);
                    float _1483 = (abs(((_1453 > 0.0) ? cbPerScene._m0[20u].x : cbPerScene._m0[20u].y) - _1278) / (abs(_1453) + 1.0000000116860974230803549289703e-07)) + 2.0;
                    float _1484 = isnan(_1481) ? _1480 : (isnan(_1480) ? _1481 : min(_1480, _1481));
                    float _1485 = isnan(_1483) ? _1484 : (isnan(_1484) ? _1483 : min(_1484, _1483));
                    uint _1488 = uint(int(isnan(cbPerScene._m0[23u].y) ? _1485 : (isnan(_1485) ? cbPerScene._m0[23u].y : min(_1485, cbPerScene._m0[23u].y))));
                    float _1273;
                    float _1493;
                    float _1495;
                    float _1497;
                    if (int(_1488) > int(0u))
                    {
                        float _1490 = _1453 + _1278;
                        float _1491 = _1452 + _1229;
                        float _1492 = _1451 + _1228;
                        float _1494;
                        float _1496;
                        float _1498;
                        float _1499;
                        uint _1510;
                        float _1512;
                        float _1514;
                        float _1516;
                        float _1518;
                        float _1520;
                        float _1522;
                        float _1524;
                        uint _1526;
                        float _1528;
                        float _1530;
                        float _1532;
                        float _1505 = 0.0;
                        float _1506 = 0.0;
                        float _1507 = 0.0;
                        float _1508 = 0.0;
                        uint _1509 = 0u;
                        float _1511 = _1278;
                        float _1513 = _1492;
                        float _1515 = _1491;
                        float _1517 = _1490;
                        float _1519 = _1228;
                        float _1521 = _1229;
                        float _1523 = _1278;
                        uint _1525 = 1u;
                        float _1527 = 0.0;
                        float _1529 = 0.0;
                        float _1531 = 0.0;
                        float _1543;
                        float _1549;
                        float _1550;
                        float _1551;
                        float _1552;
                        float _1553;
                        float _1554;
                        uint _1555;
                        float _1556;
                        bool _1562;
                        for (;;)
                        {
                            _1543 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _1513, cbSceneParam._m0[86u].y * _1515), 0.0).x;
                            bool _1548 = _1509 == (_1488 + 4294967295u);
                            _1549 = _1548 ? _1527 : _1513;
                            _1550 = _1548 ? _1529 : _1515;
                            _1551 = _1548 ? _1531 : _1517;
                            _1552 = _1548 ? _1527 : _1519;
                            _1553 = _1548 ? _1529 : _1521;
                            _1554 = _1548 ? _1531 : _1523;
                            _1555 = _1548 ? 1u : _1525;
                            _1556 = _1548 ? (-1.0) : (_1517 - _1543);
                            _1562 = (_1555 != 0u) && ((_1556 <= 0.0) && ((_1548 ? (-1.0) : (_1543 - (_1511 * cbPerScene._m0[19u].y))) < 0.0));
                            float frontier_phi_19_pred;
                            float frontier_phi_19_pred_1;
                            float frontier_phi_19_pred_2;
                            float frontier_phi_19_pred_3;
                            float frontier_phi_19_pred_4;
                            float frontier_phi_19_pred_5;
                            float frontier_phi_19_pred_6;
                            uint frontier_phi_19_pred_7;
                            float frontier_phi_19_pred_8;
                            float frontier_phi_19_pred_9;
                            float frontier_phi_19_pred_10;
                            float frontier_phi_19_pred_11;
                            float frontier_phi_19_pred_12;
                            float frontier_phi_19_pred_13;
                            float frontier_phi_19_pred_14;
                            uint frontier_phi_19_pred_15;
                            if (_1562)
                            {
                                uint _1572 = uint(int(log2(_1379) + 0.999000012874603271484375));
                                float _1583;
                                float _1585;
                                float _1587;
                                float _1589;
                                float _1591;
                                float _1593;
                                float _1595;
                                if (int(_1572) > int(0u))
                                {
                                    uint _1691;
                                    float _1693;
                                    float _1694;
                                    float _1695;
                                    float _1696;
                                    float _1697;
                                    float _1698;
                                    float _1699;
                                    _1691 = 0u;
                                    _1693 = _1549;
                                    _1694 = _1550;
                                    _1695 = _1551;
                                    _1696 = _1552;
                                    _1697 = _1553;
                                    _1698 = _1554;
                                    _1699 = _1543;
                                    float _1584;
                                    float _1586;
                                    float _1588;
                                    float _1590;
                                    float _1592;
                                    float _1594;
                                    float _1596;
                                    for (;;)
                                    {
                                        float _1703 = (_1696 + _1693) * 0.5;
                                        float _1704 = (_1697 + _1694) * 0.5;
                                        float _1705 = (_1698 + _1695) * 0.5;
                                        vec4 _1713 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _1703, cbSceneParam._m0[86u].y * _1704), 0.0);
                                        float _1715 = _1713.x;
                                        bool _1717 = (_1705 - _1715) < 0.0;
                                        _1584 = _1717 ? _1703 : _1693;
                                        _1586 = _1717 ? _1704 : _1694;
                                        _1588 = _1717 ? _1705 : _1695;
                                        _1590 = _1717 ? _1696 : _1703;
                                        _1592 = _1717 ? _1697 : _1704;
                                        _1594 = _1717 ? _1698 : _1705;
                                        _1596 = _1717 ? _1715 : _1699;
                                        uint _1692 = _1691 + 1u;
                                        if (_1692 == _1572)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            _1691 = _1692;
                                            _1693 = _1584;
                                            _1694 = _1586;
                                            _1695 = _1588;
                                            _1696 = _1590;
                                            _1697 = _1592;
                                            _1698 = _1594;
                                            _1699 = _1596;
                                        }
                                    }
                                    _1583 = _1584;
                                    _1585 = _1586;
                                    _1587 = _1588;
                                    _1589 = _1590;
                                    _1591 = _1592;
                                    _1593 = _1594;
                                    _1595 = _1596;
                                }
                                else
                                {
                                    _1583 = _1549;
                                    _1585 = _1550;
                                    _1587 = _1551;
                                    _1589 = _1552;
                                    _1591 = _1553;
                                    _1593 = _1554;
                                    _1595 = _1543;
                                }
                                float _1605 = cbPerScene._m0[28u].x * ((_1583 * 2.0) + (-1.0));
                                float _1606 = cbPerScene._m0[28u].y * (1.0 - (_1585 * 2.0));
                                float _1636 = fma(_1595, cbPerScene._m0[27u].w, fma(_1606, cbPerScene._m0[27u].y, cbPerScene._m0[27u].x * _1605) + cbPerScene._m0[27u].z);
                                float _1637 = fma(_1595, cbPerScene._m0[24u].w, fma(_1606, cbPerScene._m0[24u].y, _1605 * cbPerScene._m0[24u].x) + cbPerScene._m0[24u].z) / _1636;
                                float _1638 = fma(_1595, cbPerScene._m0[25u].w, fma(_1606, cbPerScene._m0[25u].y, cbPerScene._m0[25u].x * _1605) + cbPerScene._m0[25u].z) / _1636;
                                vec4 _1647 = textureLod(sampler2D(g_PrevFrameTexture, SS_ClampLinear), vec2(cbSceneParam._m0[87u].z * _1637, cbSceneParam._m0[87u].w * _1638), 0.0);
                                float _1652 = isnan(_1395) ? 1.0 : (isnan(1.0) ? _1395 : min(1.0, _1395));
                                float _1653 = 0.5 - _1637;
                                float _1654 = 0.5 - _1638;
                                float _1655 = _1653 * 2.0;
                                float _1656 = _1654 * 2.0;
                                float _1657 = _1655 * _1655;
                                float _1658 = _1656 * _1656;
                                float _2238 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
                                float _2249 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
                                float _1667 = inversesqrt(dot(vec2(_1451, _1452), vec2(_1451, _1452)));
                                float _1673 = inversesqrt(dot(vec2(_1655, _1656), vec2(_1655, _1656)));
                                float _1679 = dot(vec2((_1653 * (-2.0)) * _1673, (_1654 * (-2.0)) * _1673), vec2(_1667 * _1451, _1667 * _1452));
                                float _2260 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
                                float _1686 = ((1.0 - (isnan(1.0) ? _2249 : (isnan(_2249) ? 1.0 : min(_2249, 1.0)))) * (1.0 - (isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0))))) * (4.0 - ((isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0))) * 2.0));
                                float _2271 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
                                float _1687 = isnan(1.0) ? _2271 : (isnan(_2271) ? 1.0 : min(_2271, 1.0));
                                float _1688 = _1687 * _1687;
                                frontier_phi_19_pred = _1593;
                                frontier_phi_19_pred_1 = _1591;
                                frontier_phi_19_pred_2 = _1529;
                                frontier_phi_19_pred_3 = _1589;
                                frontier_phi_19_pred_4 = _1587;
                                frontier_phi_19_pred_5 = _1585;
                                frontier_phi_19_pred_6 = _1511;
                                frontier_phi_19_pred_7 = _1488;
                                frontier_phi_19_pred_8 = isnan(_1688) ? _1652 : (isnan(_1652) ? _1688 : min(_1652, _1688));
                                frontier_phi_19_pred_9 = _1647.z;
                                frontier_phi_19_pred_10 = _1647.y;
                                frontier_phi_19_pred_11 = _1647.x;
                                frontier_phi_19_pred_12 = _1583;
                                frontier_phi_19_pred_13 = _1531;
                                frontier_phi_19_pred_14 = _1527;
                                frontier_phi_19_pred_15 = _1555;
                            }
                            else
                            {
                                bool _1574 = _1556 > 0.0;
                                frontier_phi_19_pred = _1551;
                                frontier_phi_19_pred_1 = _1550;
                                frontier_phi_19_pred_2 = _1574 ? _1550 : _1529;
                                frontier_phi_19_pred_3 = _1549;
                                frontier_phi_19_pred_4 = _1551 + _1453;
                                frontier_phi_19_pred_5 = _1550 + _1452;
                                frontier_phi_19_pred_6 = _1543;
                                frontier_phi_19_pred_7 = _1509 + 1u;
                                frontier_phi_19_pred_8 = _1508;
                                frontier_phi_19_pred_9 = _1507;
                                frontier_phi_19_pred_10 = _1506;
                                frontier_phi_19_pred_11 = _1505;
                                frontier_phi_19_pred_12 = _1549 + _1451;
                                frontier_phi_19_pred_13 = _1574 ? _1551 : _1531;
                                frontier_phi_19_pred_14 = _1574 ? _1549 : _1527;
                                frontier_phi_19_pred_15 = uint(_1574);
                            }
                            _1524 = frontier_phi_19_pred;
                            _1522 = frontier_phi_19_pred_1;
                            _1530 = frontier_phi_19_pred_2;
                            _1520 = frontier_phi_19_pred_3;
                            _1518 = frontier_phi_19_pred_4;
                            _1516 = frontier_phi_19_pred_5;
                            _1512 = frontier_phi_19_pred_6;
                            _1510 = frontier_phi_19_pred_7;
                            _1499 = frontier_phi_19_pred_8;
                            _1498 = frontier_phi_19_pred_9;
                            _1496 = frontier_phi_19_pred_10;
                            _1494 = frontier_phi_19_pred_11;
                            _1514 = frontier_phi_19_pred_12;
                            _1532 = frontier_phi_19_pred_13;
                            _1528 = frontier_phi_19_pred_14;
                            _1526 = frontier_phi_19_pred_15;
                            if (int(_1510) < int(_1488))
                            {
                                _1505 = _1494;
                                _1506 = _1496;
                                _1507 = _1498;
                                _1508 = _1499;
                                _1509 = _1510;
                                _1511 = _1512;
                                _1513 = _1514;
                                _1515 = _1516;
                                _1517 = _1518;
                                _1519 = _1520;
                                _1521 = _1522;
                                _1523 = _1524;
                                _1525 = _1526;
                                _1527 = _1528;
                                _1529 = _1530;
                                _1531 = _1532;
                                continue;
                            }
                            else
                            {
                                break;
                            }
                        }
                        _1493 = _1494;
                        _1495 = _1496;
                        _1497 = _1498;
                        _1273 = _1499;
                    }
                    else
                    {
                        _1493 = 0.0;
                        _1495 = 0.0;
                        _1497 = 0.0;
                        _1273 = 0.0;
                    }
                    float frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder;
                    float frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_1;
                    float frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_2;
                    float frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_3;
                    if ((isnan(_1493) || isnan(_1495)) || isnan(_1497))
                    {
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder = 0.0;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_1 = 0.0;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_2 = 0.0;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_3 = 0.0;
                    }
                    else
                    {
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder = (_1273 * _1493) * cbPerScene._m0[28u].w;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_1 = _1273;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_2 = (_1273 * _1497) * cbPerScene._m0[28u].w;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_3 = (_1273 * _1495) * cbPerScene._m0[28u].w;
                    }
                    frontier_phi_5_6_ladder_8_ladder_9_ladder = frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_1 = frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_1;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_2 = frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_2;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_3 = frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_3;
                }
                frontier_phi_5_6_ladder_8_ladder = frontier_phi_5_6_ladder_8_ladder_9_ladder;
                frontier_phi_5_6_ladder_8_ladder_1 = frontier_phi_5_6_ladder_8_ladder_9_ladder_1;
                frontier_phi_5_6_ladder_8_ladder_2 = frontier_phi_5_6_ladder_8_ladder_9_ladder_2;
                frontier_phi_5_6_ladder_8_ladder_3 = frontier_phi_5_6_ladder_8_ladder_9_ladder_3;
            }
            frontier_phi_5_6_ladder = frontier_phi_5_6_ladder_8_ladder;
            frontier_phi_5_6_ladder_1 = frontier_phi_5_6_ladder_8_ladder_1;
            frontier_phi_5_6_ladder_2 = frontier_phi_5_6_ladder_8_ladder_2;
            frontier_phi_5_6_ladder_3 = frontier_phi_5_6_ladder_8_ladder_3;
        }
        else
        {
            frontier_phi_5_6_ladder = 0.0;
            frontier_phi_5_6_ladder_1 = 0.0;
            frontier_phi_5_6_ladder_2 = 0.0;
            frontier_phi_5_6_ladder_3 = 0.0;
        }
        _1266 = frontier_phi_5_6_ladder;
        _1268 = frontier_phi_5_6_ladder_3;
        _1270 = frontier_phi_5_6_ladder_2;
        _1272 = frontier_phi_5_6_ladder_1;
    }
    SV_Target.x = _1266;
    SV_Target.y = _1268;
    SV_Target.z = _1270;
    SV_Target.w = _1272;
    discard_exit();
}


