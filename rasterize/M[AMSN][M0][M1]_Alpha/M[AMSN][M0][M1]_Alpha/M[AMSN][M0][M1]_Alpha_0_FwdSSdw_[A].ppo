#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Alpha_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _894;
float _3311;
float _3312;
float _3313;
float _3314;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _238 = texture(sampler2D(M_AMSN_M0_M1_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _244 = _238.w;
    float _245 = _238.x * cbMtdParam._m0[9u].x;
    float _246 = _238.y * cbMtdParam._m0[9u].y;
    float _247 = _238.z * cbMtdParam._m0[9u].z;
    float _248 = _244 * TEXCOORD_1.z;
    vec4 _260 = texture(sampler2D(M_AMSN_M0_M1_Alpha_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _262 = _260.x;
    vec4 _274 = texture(sampler2D(M_AMSN_M0_M1_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _278 = _274.z;
    float _282 = (_274.x * 2.0) + (-1.0);
    float _284 = (_274.y * 2.0) + (-1.0);
    float _285 = dot(vec2(_282, _284), vec2(_282, _284));
    float _3323 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _291 = sqrt(1.0 - (isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0))));
    float _294 = fma(_291, _216, fma(_284, _208 * TANGENT.x, (_194 * _186) * _282));
    float _297 = fma(_291, _217, fma(_284, _208 * TANGENT.y, (_194 * _187) * _282));
    float _300 = fma(_291, _218, fma(_284, _208 * TANGENT.z, (_194 * _188) * _282));
    float _304 = inversesqrt(dot(vec3(_294, _297, _300), vec3(_294, _297, _300)));
    float _305 = _304 * _294;
    float _306 = _304 * _297;
    float _307 = _304 * _300;
    float _3334 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _308 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
    float _3345 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _309 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
    float _3356 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3367 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3378 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3389 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _313 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
    float _329 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _371 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _381 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _371);
    float _382 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _371);
    float _383 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _371);
    float _387 = inversesqrt(dot(vec3(_381, _382, _383), vec3(_381, _382, _383)));
    float _388 = _381 * _387;
    float _389 = _382 * _387;
    float _390 = _383 * _387;
    vec4 _395 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _397 = _395.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _573 = sqrt(((_381 * _381) + (_382 * _382)) + (_383 * _383));
        float _579 = (cbMatDynParam._m0[5u].x * _573) + cbMatDynParam._m0[5u].y;
        float _3400 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
        float _580 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _584 = (cbMatDynParam._m0[5u].z * _573) + cbMatDynParam._m0[5u].w;
        float _3411 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))) - _580)) + _580) < ((_397 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _409 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _410 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _430 = fma(_307, cbSceneParam._m0[5u].z, fma(_306, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _305));
    float _433 = fma(_307, cbSceneParam._m0[6u].z, fma(_306, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _305));
    float _436 = fma(_307, cbSceneParam._m0[7u].z, fma(_306, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _305));
    uint _449 = uint(roundEven(NORMAL.w)) * 13u;
    uint _451 = _449 + 9u;
    uint _452 = _451 + uint(cbMatDynParam._m0[0u].w);
    float _458 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0)))) * cbInstanceData._m0[_452].x;
    float _459 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0)))) * cbInstanceData._m0[_452].y;
    float _460 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0)))) * cbInstanceData._m0[_452].z;
    float _3422 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
    float _3433 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
    float _3444 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
    float _464 = 1.0 - _313;
    float _465 = _461 * _464;
    float _466 = _462 * _464;
    float _467 = _463 * _464;
    float _472 = (_461 + (-0.039999999105930328369140625)) * _313;
    float _473 = (_462 + (-0.039999999105930328369140625)) * _313;
    float _474 = (_463 + (-0.039999999105930328369140625)) * _313;
    float _475 = _472 + 0.039999999105930328369140625;
    float _477 = _473 + 0.039999999105930328369140625;
    float _478 = _474 + 0.039999999105930328369140625;
    vec4 _487 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _409, cbSceneParam._m0[86u].y * _410));
    float _490 = _487.x * TEXCOORD_1.w;
    float _491 = dot(vec3(_305, _306, _307), vec3(_388, _389, _390));
    float _494 = _491 * 2.0;
    float _498 = (_494 * _305) - _388;
    float _499 = (_494 * _306) - _389;
    float _500 = (_494 * _307) - _390;
    float _504 = abs(dot(vec3(_388, _389, _390), vec3(_305, _306, _307)));
    float _3455 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _506 = sqrt(_309);
    float _519 = exp2((_506 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_506 * 3.0));
    float _525 = (1.0 - _519) * ((_506 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _526 = _519 * _506;
    float _554 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _558 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _893;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _618 = fma(_562, cbModelParam._m0[26u].z, fma(_558, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _554));
        float _622 = fma(_562, cbModelParam._m0[27u].z, fma(_558, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _554));
        float _626 = fma(_562, cbModelParam._m0[28u].z, fma(_558, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _554));
        float _651 = _554 + _305;
        float _652 = _558 + _306;
        float _653 = _562 + _307;
        float _663 = fma(_653, cbModelParam._m0[26u].z, fma(_652, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _651)) - _618;
        float _664 = fma(_653, cbModelParam._m0[27u].z, fma(_652, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _651)) - _622;
        float _665 = fma(_653, cbModelParam._m0[28u].z, fma(_652, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _651)) - _626;
        float _669 = inversesqrt(dot(vec3(_663, _664, _665), vec3(_663, _664, _665)));
        float _682 = ((_669 * _663) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_618 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _683 = ((_669 * _664) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_622 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _684 = ((_669 * _665) / cbModelParam._m0[34u].z) + ((((((_626 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _687 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_682, _683, _684), 0.0);
        vec4 _694 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_682, _683, _684), 0.0);
        vec4 _701 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_682, _683, _684), 0.0);
        vec4 _708 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_682, _683, _684), 0.0);
        float _721 = exp2((_687.w + (-0.5)) * 20.0) * 2.0;
        float _722 = _721 * (_687.x + (-0.5));
        float _723 = _721 * (_687.y + (-0.5));
        float _724 = _721 * (_687.z + (-0.5));
        float _731 = exp2((_694.w + (-0.5)) * 20.0) * 2.0;
        float _732 = _731 * (_694.x + (-0.5));
        float _733 = _731 * (_694.y + (-0.5));
        float _734 = _731 * (_694.z + (-0.5));
        float _741 = exp2((_701.w + (-0.5)) * 20.0) * 2.0;
        float _742 = _741 * (_701.x + (-0.5));
        float _743 = _741 * (_701.y + (-0.5));
        float _744 = _741 * (_701.z + (-0.5));
        float _751 = exp2((_708.w + (-0.5)) * 20.0) * 2.0;
        float _752 = _751 * (_708.x + (-0.5));
        float _753 = _751 * (_708.y + (-0.5));
        float _754 = _751 * (_708.z + (-0.5));
        float _755 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _756 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _757 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _758 = _722 * 0.5;
        float _759 = _732 * 0.5;
        float _760 = _742 * 0.5;
        float _761 = dot(vec3(_758, _759, _760), vec3(_758, _759, _760));
        float _766 = (_761 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_761);
        float _775 = (dot(vec3(_305, _306, _307), vec3(_766 * _758, _766 * _759, _766 * _760)) + 1.0) * 0.5;
        float _3481 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _785 = sqrt(((_759 * _759) + (_758 * _758)) + (_760 * _760)) / (_755 + 9.9999997473787516355514526367188e-06);
        float _3492 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _787 = _786 * 2.0;
        float _791 = (1.0 - _786) / (_786 + 1.0);
        float _3503 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _801 = ((((1.0 - _792) * (_787 + 2.0)) * exp2(log2(isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) * (_787 + 1.0))) + _792) * _755;
        float _802 = _723 * 0.5;
        float _803 = _733 * 0.5;
        float _804 = _743 * 0.5;
        float _805 = dot(vec3(_802, _803, _804), vec3(_802, _803, _804));
        float _810 = (_805 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_805);
        float _818 = (dot(vec3(_305, _306, _307), vec3(_810 * _802, _810 * _803, _810 * _804)) + 1.0) * 0.5;
        float _3514 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _827 = sqrt(((_803 * _803) + (_802 * _802)) + (_804 * _804)) / (_756 + 9.9999997473787516355514526367188e-06);
        float _3525 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _829 = _828 * 2.0;
        float _833 = (1.0 - _828) / (_828 + 1.0);
        float _3536 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _843 = ((((1.0 - _834) * (_829 + 2.0)) * exp2(log2(isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * (_829 + 1.0))) + _834) * _756;
        float _844 = _724 * 0.5;
        float _845 = _734 * 0.5;
        float _846 = _744 * 0.5;
        float _847 = dot(vec3(_844, _845, _846), vec3(_844, _845, _846));
        float _852 = (_847 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_847);
        float _860 = (dot(vec3(_305, _306, _307), vec3(_852 * _844, _852 * _845, _852 * _846)) + 1.0) * 0.5;
        float _3547 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _869 = sqrt(((_845 * _845) + (_844 * _844)) + (_846 * _846)) / (_757 + 9.9999997473787516355514526367188e-06);
        float _3558 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _871 = _870 * 2.0;
        float _875 = (1.0 - _870) / (_870 + 1.0);
        float _3569 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _885 = ((((1.0 - _876) * (_871 + 2.0)) * exp2(log2(isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * (_871 + 1.0))) + _876) * _757;
        _893 = _724;
        _895 = _723;
        _896 = _722;
        _897 = _734;
        _898 = _733;
        _899 = _732;
        _900 = _744;
        _901 = _743;
        _902 = _742;
        _903 = _757;
        _904 = _756;
        _905 = _755;
        _906 = cbModelParam._m0[36u].z * (isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0)));
        _907 = cbModelParam._m0[36u].z * (isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0)));
        _908 = cbModelParam._m0[36u].z * (isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0)));
    }
    else
    {
        _893 = _894;
        _895 = _894;
        _896 = _894;
        _897 = _894;
        _898 = _894;
        _899 = _894;
        _900 = _894;
        _901 = _894;
        _902 = _894;
        _903 = _894;
        _904 = _894;
        _905 = _894;
        _906 = 0.0;
        _907 = 0.0;
        _908 = 0.0;
    }
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _937 = fma(_562, cbModelParam._m0[30u].z, fma(_558, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _554));
        float _941 = fma(_562, cbModelParam._m0[31u].z, fma(_558, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _554));
        float _945 = fma(_562, cbModelParam._m0[32u].z, fma(_558, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _554));
        float _968 = _554 + _305;
        float _969 = _558 + _306;
        float _970 = _562 + _307;
        float _980 = fma(_970, cbModelParam._m0[30u].z, fma(_969, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _968)) - _937;
        float _981 = fma(_970, cbModelParam._m0[31u].z, fma(_969, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _968)) - _941;
        float _982 = fma(_970, cbModelParam._m0[32u].z, fma(_969, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _968)) - _945;
        float _986 = inversesqrt(dot(vec3(_980, _981, _982), vec3(_980, _981, _982)));
        float _999 = ((_986 * _980) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_937 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1000 = ((_986 * _981) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_941 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1001 = ((_986 * _982) / cbModelParam._m0[35u].z) + ((((((_945 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        float _1036 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_1003.x + (-0.5));
        float _1038 = _1036 * (_1003.y + (-0.5));
        float _1039 = _1036 * (_1003.z + (-0.5));
        float _1046 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1010.x + (-0.5));
        float _1048 = _1046 * (_1010.y + (-0.5));
        float _1049 = _1046 * (_1010.z + (-0.5));
        float _1056 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1017.x + (-0.5));
        float _1058 = _1056 * (_1017.y + (-0.5));
        float _1059 = _1056 * (_1017.z + (-0.5));
        float _1066 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1024.x + (-0.5));
        float _1068 = _1066 * (_1024.y + (-0.5));
        float _1069 = _1066 * (_1024.z + (-0.5));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = _1037 * 0.5;
        float _1074 = _1047 * 0.5;
        float _1075 = _1057 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1089 = (dot(vec3(_305, _306, _307), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _3610 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1098 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3621 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3632 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_1100 + 1.0))) + _1105) * _1070;
        float _1115 = _1038 * 0.5;
        float _1116 = _1048 * 0.5;
        float _1117 = _1058 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_305, _306, _307), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3643 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3654 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3665 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_1142 + 1.0))) + _1147) * _1071;
        float _1157 = _1039 * 0.5;
        float _1158 = _1049 * 0.5;
        float _1159 = _1059 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1173 = (dot(vec3(_305, _306, _307), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _3676 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1182 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3687 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3698 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_1184 + 1.0))) + _1189) * _1072;
        _1206 = _1039;
        _1207 = _1038;
        _1208 = _1037;
        _1209 = _1049;
        _1210 = _1048;
        _1211 = _1047;
        _1212 = _1059;
        _1213 = _1058;
        _1214 = _1057;
        _1215 = _1072;
        _1216 = _1071;
        _1217 = _1070;
        _1218 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
        _1219 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
        _1220 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
    }
    else
    {
        _1206 = _894;
        _1207 = _894;
        _1208 = _894;
        _1209 = _894;
        _1210 = _894;
        _1211 = _894;
        _1212 = _894;
        _1213 = _894;
        _1214 = _894;
        _1215 = _894;
        _1216 = _894;
        _1217 = _894;
        _1218 = 0.0;
        _1219 = 0.0;
        _1220 = 0.0;
    }
    float _1230 = (cbModelParam._m0[1u].x * (_1218 - _906)) + _906;
    float _1231 = (cbModelParam._m0[1u].x * (_1219 - _907)) + _907;
    float _1232 = (cbModelParam._m0[1u].x * (_1220 - _908)) + _908;
    float _1253 = fma(_1232, cbSceneParam._m0[89u].z, fma(_1231, cbSceneParam._m0[89u].y, _1230 * cbSceneParam._m0[89u].x));
    float _1256 = fma(_1232, cbSceneParam._m0[90u].z, fma(_1231, cbSceneParam._m0[90u].y, _1230 * cbSceneParam._m0[90u].x));
    float _1259 = fma(_1232, cbSceneParam._m0[91u].z, fma(_1231, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1230));
    float _1274 = _498 * 0.5;
    float _1275 = _499 * 0.5;
    float _1276 = _500 * 0.5;
    float _1277 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_1208, _1211, _1214, _1217));
    float _1280 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_1207, _1210, _1213, _1216));
    float _1283 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_1206, _1209, _1212, _1215));
    float _1317;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1290 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_893, _897, _900, _903));
        float _1294 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_895, _898, _901, _904));
        float _1298 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_896, _899, _902, _905));
        float _1305 = dot(vec4(cbModelParam._m0[39u]), vec4(_1274, _1275, _1276, 1.0));
        _1317 = dot(vec3(isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)), isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)), isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1305) ? 0.0 : (isnan(0.0) ? _1305 : max(0.0, _1305))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1317 = 1.0;
    }
    float _1328;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1319 = dot(vec4(cbModelParam._m0[40u]), vec4(_1274, _1275, _1276, 1.0));
        _1328 = dot(vec3(isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)), isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)), isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1319) ? 0.0 : (isnan(0.0) ? _1319 : max(0.0, _1319))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1328 = 1.0;
    }
    float _1332 = (_1328 * cbModelParam._m0[1u].x) + (_1317 * (1.0 - cbModelParam._m0[1u].x));
    float _1342 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _309);
    float _1343 = isnan(_1342) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1342 : min(cbModelParam._m0[25u].z, _1342));
    float _1425;
    float _1427;
    float _1429;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1392 = fma(_562, cbModelParam._m0[13u].z, fma(_558, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _554)) + cbModelParam._m0[13u].w;
        float _1396 = fma(_562, cbModelParam._m0[14u].z, fma(_558, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _554)) + cbModelParam._m0[14u].w;
        float _1400 = fma(_562, cbModelParam._m0[15u].z, fma(_558, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _554)) + cbModelParam._m0[15u].w;
        float _1403 = fma(_500, cbModelParam._m0[13u].z, fma(_499, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _498));
        float _1406 = fma(_500, cbModelParam._m0[14u].z, fma(_499, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _498));
        float _1409 = fma(_500, cbModelParam._m0[15u].z, fma(_499, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _498));
        float _1437;
        if (_1403 > 0.0)
        {
            _1437 = abs((1.0 - _1392) / _1403);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1392 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1437 = frontier_phi_19_17_ladder;
        }
        float _1666;
        if (_1406 > 0.0)
        {
            _1666 = abs((1.0 - _1396) / _1406);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1396 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1666 = frontier_phi_28_24_ladder;
        }
        float _1923;
        if (_1409 > 0.0)
        {
            _1923 = abs((1.0 - _1400) / _1409);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1400 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1923 = frontier_phi_40_35_ladder;
        }
        float _1925 = isnan(_1666) ? _1437 : (isnan(_1437) ? _1666 : min(_1437, _1666));
        float _1926 = isnan(_1923) ? _1925 : (isnan(_1925) ? _1923 : min(_1925, _1923));
        float _1930 = (_1926 * _1403) + _1392;
        float _1931 = (_1926 * _1406) + _1396;
        float _1932 = (_1926 * _1409) + _1400;
        float _1933 = _1926 * 9.9999997473787516355514526367188e-05;
        float _1935 = (-1.0) - _1933;
        float _1937 = _1933 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1932 > _1937) || ((_1932 < _1935) || ((_1931 > _1937) || ((_1931 < _1935) || ((_1930 < _1935) || (_1930 > _1937))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2060 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1932, cbModelParam._m0[9u].z, fma(_1931, cbModelParam._m0[9u].y, _1930 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1932, cbModelParam._m0[10u].z, fma(_1931, cbModelParam._m0[10u].y, _1930 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1932, cbModelParam._m0[11u].z, fma(_1931, cbModelParam._m0[11u].y, _1930 * cbModelParam._m0[11u].x))), _1343);
            frontier_phi_18_40_ladder = _2060.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2060.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2060.x * cbModelParam._m0[1u].y;
        }
        _1425 = frontier_phi_18_40_ladder_2;
        _1427 = frontier_phi_18_40_ladder_1;
        _1429 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1413 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_498, _499, _500), _1343);
        _1425 = _1413.x * cbModelParam._m0[1u].y;
        _1427 = _1413.y * cbModelParam._m0[1u].y;
        _1429 = _1413.z * cbModelParam._m0[1u].y;
    }
    float _1433 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _309);
    float _1434 = isnan(_1433) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1433 : min(cbModelParam._m0[25u].w, _1433));
    float _1527;
    float _1529;
    float _1531;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1491 = fma(_562, cbModelParam._m0[21u].z, fma(_558, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _554)) + cbModelParam._m0[21u].w;
        float _1495 = fma(_562, cbModelParam._m0[22u].z, fma(_558, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _554)) + cbModelParam._m0[22u].w;
        float _1499 = fma(_562, cbModelParam._m0[23u].z, fma(_558, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _554)) + cbModelParam._m0[23u].w;
        float _1502 = fma(_500, cbModelParam._m0[21u].z, fma(_499, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _498));
        float _1505 = fma(_500, cbModelParam._m0[22u].z, fma(_499, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _498));
        float _1508 = fma(_500, cbModelParam._m0[23u].z, fma(_499, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _498));
        float _1671;
        if (_1502 > 0.0)
        {
            _1671 = abs((1.0 - _1491) / _1502);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1491 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1671 = frontier_phi_30_26_ladder;
        }
        float _1950;
        if (_1505 > 0.0)
        {
            _1950 = abs((1.0 - _1495) / _1505);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1495 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1950 = frontier_phi_42_37_ladder;
        }
        float _2163;
        if (_1508 > 0.0)
        {
            _2163 = abs((1.0 - _1499) / _1508);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1499 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2163 = frontier_phi_51_48_ladder;
        }
        float _2165 = isnan(_1950) ? _1671 : (isnan(_1671) ? _1950 : min(_1671, _1950));
        float _2166 = isnan(_2163) ? _2165 : (isnan(_2165) ? _2163 : min(_2165, _2163));
        float _2170 = (_2166 * _1502) + _1491;
        float _2171 = (_2166 * _1505) + _1495;
        float _2172 = (_2166 * _1508) + _1499;
        float _2173 = _2166 * 9.9999997473787516355514526367188e-05;
        float _2174 = (-1.0) - _2173;
        float _2176 = _2173 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2172 > _2176) || ((_2172 < _2174) || ((_2171 > _2176) || ((_2171 < _2174) || ((_2170 < _2174) || (_2170 > _2176))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2372 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2172, cbModelParam._m0[17u].z, fma(_2171, cbModelParam._m0[17u].y, _2170 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2172, cbModelParam._m0[18u].z, fma(_2171, cbModelParam._m0[18u].y, _2170 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2172, cbModelParam._m0[19u].z, fma(_2171, cbModelParam._m0[19u].y, _2170 * cbModelParam._m0[19u].x))), _1434);
            frontier_phi_27_51_ladder = _2372.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2372.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2372.x * cbModelParam._m0[1u].z;
        }
        _1527 = frontier_phi_27_51_ladder_2;
        _1529 = frontier_phi_27_51_ladder_1;
        _1531 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1511 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_498, _499, _500), _1434);
        _1527 = _1511.x * cbModelParam._m0[1u].z;
        _1529 = _1511.y * cbModelParam._m0[1u].z;
        _1531 = _1511.z * cbModelParam._m0[1u].z;
    }
    float _1544 = (((_525 * _475) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1527 - _1425)) + _1425);
    float _1546 = (((_525 * _477) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1529 - _1427)) + _1427);
    float _1548 = (((_525 * _478) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1531 - _1429)) + _1429);
    float _1551 = fma(_1548, cbSceneParam._m0[89u].z, fma(_1546, cbSceneParam._m0[89u].y, _1544 * cbSceneParam._m0[89u].x));
    float _1554 = fma(_1548, cbSceneParam._m0[90u].z, fma(_1546, cbSceneParam._m0[90u].y, _1544 * cbSceneParam._m0[90u].x));
    float _1557 = fma(_1548, cbSceneParam._m0[91u].z, fma(_1546, cbSceneParam._m0[91u].y, _1544 * cbSceneParam._m0[91u].x));
    vec4 _1565 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_409, _410));
    float _1567 = _1565.w;
    float _1579 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1567);
    float _1580 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1567);
    float _1581 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1567);
    uvec4 _1585 = floatBitsToUint(cbInstanceData._m0[_449 + 5u]);
    uint _1587 = _1585.x * 14u;
    uint _1588 = _1587 + 13u;
    float _1595 = _490 + (-1.0);
    float _1600 = (cbLight._m0[_1588].x * _1595) + 1.0;
    float _1601 = (cbLight._m0[_1588].y * _1595) + 1.0;
    float _1602 = (cbLight._m0[_1588].z * _1595) + 1.0;
    float _1603 = (cbLight._m0[_1588].w * _1595) + 1.0;
    uint _1604 = _1587 + 5u;
    float _1610 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
    uint _1614 = _1587 + 4u;
    float _1624 = isnan(1.0) ? _1600 : (isnan(_1600) ? 1.0 : min(_1600, 1.0));
    uint _1628 = _1587 | 1u;
    float _1639 = dot(vec3(cbLight._m0[_1587].xyz), vec3(_305, _306, _307));
    float _1642 = dot(vec3(cbLight._m0[_1628].xyz), vec3(_305, _306, _307));
    float _3834 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
    float _3845 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
    float _1647 = (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * 0.3183098733425140380859375;
    float _1649 = (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * 0.3183098733425140380859375;
    float _1656 = ((cbLight._m0[_1604].x * _1610) * _1649) + (((cbLight._m0[_1614].x * _1579) * _1624) * _1647);
    float _1657 = ((_1610 * cbLight._m0[_1604].y) * _1649) + (((cbLight._m0[_1614].y * _1580) * _1624) * _1647);
    float _1658 = ((_1610 * cbLight._m0[_1604].z) * _1649) + (((cbLight._m0[_1614].z * _1581) * _1624) * _1647);
    uvec4 _1663 = floatBitsToUint(cbLight._m0[_1587 + 12u]);
    bool _1665 = _1663.x == 0u;
    float _1676;
    float _1678;
    float _1680;
    if (_1665)
    {
        _1676 = _1656;
        _1678 = _1657;
        _1680 = _1658;
    }
    else
    {
        uint _1684 = _1587 + 6u;
        float _1700 = (dot(vec3(cbLight._m0[_1587 + 2u].xyz), vec3(_305, _306, _307)) * 0.5) + 0.5;
        float _1701 = _1700 * _1700;
        float _3856 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1703 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
        _1676 = (((cbLight._m0[_1684].x * 0.3183098733425140380859375) * _1702) * _1703) + _1656;
        _1678 = (((cbLight._m0[_1684].y * 0.3183098733425140380859375) * _1702) * _1703) + _1657;
        _1680 = (((cbLight._m0[_1684].z * 0.3183098733425140380859375) * _1702) * _1703) + _1658;
    }
    bool _1683 = _1663.y == 0u;
    float _1721;
    float _1723;
    float _1725;
    if (_1683)
    {
        _1721 = _1676;
        _1723 = _1678;
        _1725 = _1680;
    }
    else
    {
        uint _1894 = _1587 + 7u;
        float _1910 = (dot(vec3(cbLight._m0[_1587 + 3u].xyz), vec3(_305, _306, _307)) * 0.5) + 0.5;
        float _1911 = _1910 * _1910;
        float _3872 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
        float _1912 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1913 = isnan(1.0) ? _1603 : (isnan(_1603) ? 1.0 : min(_1603, 1.0));
        _1721 = (((cbLight._m0[_1894].x * 0.3183098733425140380859375) * _1912) * _1913) + _1676;
        _1723 = (((cbLight._m0[_1894].y * 0.3183098733425140380859375) * _1912) * _1913) + _1678;
        _1725 = (((cbLight._m0[_1894].z * 0.3183098733425140380859375) * _1912) * _1913) + _1680;
    }
    uint _1728 = _1587 + 8u;
    float _1741 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1587].w)) * _309) * 0.949999988079071044921875);
    float _1742 = _1741 * _1741;
    float _1743 = cbLight._m0[_1587].x + _388;
    float _1744 = cbLight._m0[_1587].y + _389;
    float _1745 = cbLight._m0[_1587].z + _390;
    float _1749 = inversesqrt(dot(vec3(_1743, _1744, _1745), vec3(_1743, _1744, _1745)));
    float _1750 = _1749 * _1743;
    float _1751 = _1749 * _1744;
    float _1752 = _1749 * _1745;
    float _1753 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_1587].xyz));
    float _3888 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _1756 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _3899 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _1757 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _1758 = dot(vec3(_305, _306, _307), vec3(_1750, _1751, _1752));
    float _3910 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1761 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _1762 = dot(vec3(cbLight._m0[_1587].xyz), vec3(_1750, _1751, _1752));
    float _3921 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1766 = _1742 * _1742;
    float _1770 = ((_1761 * _1761) * (_1766 + (-1.0))) + 1.0;
    float _1778 = exp2(log2(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * 5.0);
    float _1779 = 0.959999978542327880859375 - _472;
    float _1781 = 0.959999978542327880859375 - _473;
    float _1782 = 0.959999978542327880859375 - _474;
    float _1789 = 1.0 - _1742;
    float _1800 = (0.5 / (((_1757 * ((_1756 * _1789) + _1742)) + 9.9999999392252902907785028219223e-09) + (((_1757 * _1789) + _1742) * _1756))) * _1756;
    float _3932 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1802 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1766 / ((_1770 * _1770) * 3.141590118408203125));
    uint _1816 = _1587 + 9u;
    float _1827 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1628].w)) * _309) * 0.949999988079071044921875);
    float _1828 = _1827 * _1827;
    float _1829 = cbLight._m0[_1628].x + _388;
    float _1830 = cbLight._m0[_1628].y + _389;
    float _1831 = cbLight._m0[_1628].z + _390;
    float _1835 = inversesqrt(dot(vec3(_1829, _1830, _1831), vec3(_1829, _1830, _1831)));
    float _1836 = _1835 * _1829;
    float _1837 = _1835 * _1830;
    float _1838 = _1835 * _1831;
    float _1839 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_1628].xyz));
    float _3943 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1842 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _1843 = dot(vec3(_305, _306, _307), vec3(_1836, _1837, _1838));
    float _3954 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1846 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _1847 = dot(vec3(cbLight._m0[_1628].xyz), vec3(_1836, _1837, _1838));
    float _3965 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1851 = _1828 * _1828;
    float _1855 = ((_1846 * _1846) * (_1851 + (-1.0))) + 1.0;
    float _1862 = exp2(log2(1.0 - (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) * 5.0);
    float _1869 = 1.0 - _1828;
    float _1879 = (0.5 / (((_1757 * ((_1842 * _1869) + _1828)) + 9.9999999392252902907785028219223e-09) + (((_1757 * _1869) + _1828) * _1842))) * _1842;
    float _3976 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1881 = (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1851 / ((_1855 * _1855) * 3.141590118408203125));
    float _1891 = (((((_1862 * _1779) + _475) * cbLight._m0[_1816].x) * _1881) * _1610) + ((((cbLight._m0[_1728].x * _1579) * ((_1778 * _1779) + _475)) * _1802) * _1624);
    float _1892 = (((((_1862 * _1781) + _477) * cbLight._m0[_1816].y) * _1881) * _1610) + ((((cbLight._m0[_1728].y * _1580) * ((_1778 * _1781) + _477)) * _1802) * _1624);
    float _1893 = (((((_1862 * _1782) + _478) * cbLight._m0[_1816].z) * _1881) * _1610) + ((((cbLight._m0[_1728].z * _1581) * ((_1778 * _1782) + _478)) * _1802) * _1624);
    float _1955;
    float _1957;
    float _1959;
    if (_1665)
    {
        _1955 = _1891;
        _1957 = _1892;
        _1959 = _1893;
    }
    else
    {
        uint _1961 = _1587 + 2u;
        uint _1965 = _1587 + 10u;
        float _1979 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1961].w)) * _309) * 0.949999988079071044921875);
        float _1980 = _1979 * _1979;
        float _1981 = cbLight._m0[_1961].x + _388;
        float _1982 = cbLight._m0[_1961].y + _389;
        float _1983 = cbLight._m0[_1961].z + _390;
        float _1987 = inversesqrt(dot(vec3(_1981, _1982, _1983), vec3(_1981, _1982, _1983)));
        float _1988 = _1987 * _1981;
        float _1989 = _1987 * _1982;
        float _1990 = _1987 * _1983;
        float _1991 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_1961].xyz));
        float _3987 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1994 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1995 = dot(vec3(_305, _306, _307), vec3(_1988, _1989, _1990));
        float _3998 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1998 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1999 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_1988, _1989, _1990));
        float _4009 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2003 = _1980 * _1980;
        float _2007 = ((_1998 * _1998) * (_2003 + (-1.0))) + 1.0;
        float _2014 = exp2(log2(1.0 - (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) * 5.0);
        float _2021 = 1.0 - _1980;
        float _2031 = (0.5 / (((_1757 * ((_1994 * _2021) + _1980)) + 9.9999999392252902907785028219223e-09) + (((_1757 * _2021) + _1980) * _1994))) * _1994;
        float _4020 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2033 = (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_2003 / ((_2007 * _2007) * 3.141590118408203125));
        float _2034 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
        _1955 = (((((_2014 * _1779) + _475) * cbLight._m0[_1965].x) * _2033) * _2034) + _1891;
        _1957 = (((((_2014 * _1781) + _477) * cbLight._m0[_1965].y) * _2033) * _2034) + _1892;
        _1959 = (((((_2014 * _1782) + _478) * cbLight._m0[_1965].z) * _2033) * _2034) + _1893;
    }
    float _2069;
    float _2071;
    float _2073;
    if (_1683)
    {
        _2069 = _1955;
        _2071 = _1957;
        _2073 = _1959;
    }
    else
    {
        uint _2080 = _1587 + 3u;
        uint _2084 = _1587 + 11u;
        float _2098 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2080].w)) * _309) * 0.949999988079071044921875);
        float _2099 = _2098 * _2098;
        float _2100 = cbLight._m0[_2080].x + _388;
        float _2101 = cbLight._m0[_2080].y + _389;
        float _2102 = cbLight._m0[_2080].z + _390;
        float _2106 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
        float _2107 = _2106 * _2100;
        float _2108 = _2106 * _2101;
        float _2109 = _2106 * _2102;
        float _2110 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_2080].xyz));
        float _4036 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2113 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _2114 = dot(vec3(_305, _306, _307), vec3(_2107, _2108, _2109));
        float _4047 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2117 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _2118 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_2107, _2108, _2109));
        float _4058 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2122 = _2099 * _2099;
        float _2126 = ((_2117 * _2117) * (_2122 + (-1.0))) + 1.0;
        float _2133 = exp2(log2(1.0 - (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) * 5.0);
        float _2140 = 1.0 - _2099;
        float _2150 = (0.5 / (((_1757 * ((_2113 * _2140) + _2099)) + 9.9999999392252902907785028219223e-09) + (((_1757 * _2140) + _2099) * _2113))) * _2113;
        float _4069 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2152 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_2122 / ((_2126 * _2126) * 3.141590118408203125));
        float _2153 = isnan(1.0) ? _1603 : (isnan(_1603) ? 1.0 : min(_1603, 1.0));
        _2069 = (((((_2133 * _1779) + _475) * cbLight._m0[_2084].x) * _2152) * _2153) + _1955;
        _2071 = (((((_2133 * _1781) + _477) * cbLight._m0[_2084].y) * _2152) * _2153) + _1957;
        _2073 = (((((_2133 * _1782) + _478) * cbLight._m0[_2084].z) * _2152) * _2153) + _1959;
    }
    float _2287;
    float _2289;
    float _2291;
    float _2293;
    float _2295;
    float _2297;
    if (_1585.y == 0u)
    {
        float _2228 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2229 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2228;
        float _2230 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2228;
        float _2231 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2228;
        uvec4 _2243 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2244 = _2243.x;
        uint _2255 = uint((float(_2243.y) * floor(float(uint(cbSceneParam._m0[85u].y * _410) / _2244))) + floor(float(uint(cbSceneParam._m0[85u].x * _409) / _2244)));
        float _2265 = (log2(_2231 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2266 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        uint _2269 = uint(isnan(14.0) ? _2266 : (isnan(_2266) ? 14.0 : min(_2266, 14.0)));
        uvec4 _2274 = texelFetch(g_lightClusterGridBuffer, int(((_2269 << 2u) + (_2255 << 6u)) >> 2u));
        uint _2275 = _2274.x;
        uint _2276 = _2243.z;
        float _2377;
        float _2379;
        float _2381;
        float _2383;
        float _2385;
        float _2387;
        if (((((1u << ((_2276 >> 4u) & 15u)) + 4294967295u) & _2275) == 0u) || ((_2276 & 240u) == 0u))
        {
            _2377 = 0.0;
            _2379 = 0.0;
            _2381 = 0.0;
            _2383 = 0.0;
            _2385 = 0.0;
            _2387 = 0.0;
        }
        else
        {
            float _2378;
            float _2380;
            float _2382;
            float _2384;
            float _2386;
            float _2388;
            float _2529 = 0.0;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            float _2533 = 0.0;
            float _2534 = 0.0;
            uint _2535 = 0u;
            uint _2544;
            bool _2545;
            for (;;)
            {
                _2544 = texelFetch(g_lightClassification, int((((_2269 << 5u) + (_2255 << 9u)) + (_2535 << 2u)) >> 2u)).x;
                _2545 = _2544 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2545)
                {
                    frontier_phi_68_pred = _2531;
                    frontier_phi_68_pred_1 = _2534;
                    frontier_phi_68_pred_2 = _2533;
                    frontier_phi_68_pred_3 = _2532;
                    frontier_phi_68_pred_4 = _2530;
                    frontier_phi_68_pred_5 = _2529;
                }
                else
                {
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    uint _2680;
                    _2674 = _2529;
                    _2675 = _2530;
                    _2676 = _2531;
                    _2677 = _2532;
                    _2678 = _2533;
                    _2679 = _2534;
                    _2680 = _2544;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    float _2606;
                    for (;;)
                    {
                        uint _2684 = uint(findLSB(_2680)) + (_2535 << 5u);
                        uint _2681 = (_2680 + 4294967295u) & _2680;
                        uint _2686 = _2684 * 48u;
                        vec4 _2700 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2686)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 3u)).x));
                        uint _2706 = (_2684 * 48u) + 4u;
                        vec4 _2719 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2706)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 3u)).x));
                        uint _2725 = (_2684 * 48u) + 8u;
                        vec3 _2736 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2725)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 2u)).x));
                        float _2740 = _2700.x - _2229;
                        float _2741 = _2700.y - _2230;
                        float _2742 = _2700.z - _2231;
                        float _2743 = dot(vec3(_2740, _2741, _2742), vec3(_2740, _2741, _2742));
                        float _2746 = inversesqrt(_2743);
                        float _2747 = _2746 * _2740;
                        float _2748 = _2746 * _2741;
                        float _2749 = _2746 * _2742;
                        float _2750 = dot(vec3(_430, _433, _436), vec3(_2747, _2748, _2749));
                        float _2755 = 1.0 - (_2743 * _2700.w);
                        float _4095 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
                        float _2756 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
                        float _2757 = sqrt(_2743) * _2719.w;
                        float _2760 = 1.39999997615814208984375 / (_2757 + 1.39999997615814208984375);
                        float _2761 = _2760 * _2760;
                        float _2764 = ((1.0 - _2761) * _2750) + _2761;
                        float _2767 = _2757 * _2757;
                        float _2771 = ((isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0))) * _2756) / ((_2767 * 0.699999988079071044921875) + 1.0);
                        float _2775 = (-0.0) - _2229;
                        float _2776 = (-0.0) - _2230;
                        float _2777 = (-0.0) - _2231;
                        float _2781 = inversesqrt(dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777)));
                        float _2782 = _2781 * _2775;
                        float _2783 = _2781 * _2776;
                        float _2784 = _2781 * _2777;
                        float _2792 = exp2(log2(1.0 / ((_2767 * 3.5) + 5.0)) * 0.25);
                        float _2793 = 1.0 - _506;
                        float _2800 = sqrt(1.0 - ((1.0 - (_2793 * _2793)) * (1.0 - (_2792 * _2792))));
                        float _2801 = _2800 * _2800;
                        float _2802 = _2801 * _2801;
                        float _2803 = _2782 + _2747;
                        float _2804 = _2783 + _2748;
                        float _2805 = _2784 + _2749;
                        float _2809 = inversesqrt(dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805)));
                        float _2813 = dot(vec3(_430, _433, _436), vec3(_2782, _2783, _2784));
                        float _4111 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
                        float _2816 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                        float _2817 = dot(vec3(_430, _433, _436), vec3(_2809 * _2803, _2809 * _2804, _2809 * _2805));
                        float _4122 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
                        float _2820 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                        float _2824 = ((_2820 * _2820) * (_2802 + (-1.0))) + 1.0;
                        float _2825 = _2760 * _2801;
                        float _2826 = _2825 * _2825;
                        float _2829 = ((1.0 - _2826) * _2750) + _2826;
                        float _4133 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
                        float _2830 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                        float _2831 = 1.0 - _2801;
                        float _2841 = (0.5 / (((_2830 * ((_2816 * _2831) + _2801)) + 9.9999999392252902907785028219223e-09) + (((_2830 * _2831) + _2801) * _2816))) * _2830;
                        float _4144 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
                        float _2852 = (((_2802 * 3.1415927410125732421875) * (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) / ((_2824 * _2824) * ((_2767 * 2.1991131305694580078125) + 3.141590118408203125))) * _2756;
                        _2604 = (_2771 * _2719.x) + _2677;
                        _2605 = (_2771 * _2719.y) + _2678;
                        _2606 = (_2771 * _2719.z) + _2679;
                        _2601 = (_2852 * _2736.x) + _2674;
                        _2602 = (_2852 * _2736.y) + _2675;
                        _2603 = (_2852 * _2736.z) + _2676;
                        if (_2681 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2674 = _2601;
                            _2675 = _2602;
                            _2676 = _2603;
                            _2677 = _2604;
                            _2678 = _2605;
                            _2679 = _2606;
                            _2680 = _2681;
                        }
                    }
                    frontier_phi_68_pred = _2603;
                    frontier_phi_68_pred_1 = _2606;
                    frontier_phi_68_pred_2 = _2605;
                    frontier_phi_68_pred_3 = _2604;
                    frontier_phi_68_pred_4 = _2602;
                    frontier_phi_68_pred_5 = _2601;
                }
                _2382 = frontier_phi_68_pred;
                _2388 = frontier_phi_68_pred_1;
                _2386 = frontier_phi_68_pred_2;
                _2384 = frontier_phi_68_pred_3;
                _2380 = frontier_phi_68_pred_4;
                _2378 = frontier_phi_68_pred_5;
                uint _2536 = _2535 + 1u;
                if (_2536 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2529 = _2378;
                    _2530 = _2380;
                    _2531 = _2382;
                    _2532 = _2384;
                    _2533 = _2386;
                    _2534 = _2388;
                    _2535 = _2536;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2377 = _2378;
            _2379 = _2380;
            _2381 = _2382;
            _2383 = _2384;
            _2385 = _2386;
            _2387 = _2388;
        }
        uvec4 _2391 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2392 = _2391.z;
        uint _2394 = (_2392 >> 8u) & 15u;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        float _2507;
        if (((4294967295u << _2394) & _2275) == 0u)
        {
            _2497 = _2377;
            _2499 = _2379;
            _2501 = _2381;
            _2503 = _2383;
            _2505 = _2385;
            _2507 = _2387;
        }
        else
        {
            float _2522 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
            float _2523 = _2522 * _2229;
            float _2524 = _2522 * _2230;
            float _2525 = _2522 * _2231;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2394 < ((_2392 >> 12u) & 15u))
            {
                float _2498;
                float _2500;
                float _2502;
                float _2504;
                float _2506;
                float _2508;
                float _2657 = _2377;
                float _2658 = _2379;
                float _2659 = _2381;
                float _2660 = _2383;
                float _2661 = _2385;
                float _2662 = _2387;
                uint _2663 = _2394;
                uint _2672;
                bool _2673;
                for (;;)
                {
                    _2672 = texelFetch(g_lightClassification, int((((_2269 << 5u) + (_2255 << 9u)) + (_2663 << 2u)) >> 2u)).x;
                    _2673 = _2672 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2673)
                    {
                        frontier_phi_79_pred = _2662;
                        frontier_phi_79_pred_1 = _2661;
                        frontier_phi_79_pred_2 = _2660;
                        frontier_phi_79_pred_3 = _2659;
                        frontier_phi_79_pred_4 = _2658;
                        frontier_phi_79_pred_5 = _2657;
                    }
                    else
                    {
                        float _2866;
                        float _2867;
                        float _2868;
                        float _2869;
                        float _2870;
                        float _2871;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _2879 = _2657;
                        float _2880 = _2658;
                        float _2881 = _2659;
                        float _2882 = _2660;
                        float _2883 = _2661;
                        float _2884 = _2662;
                        uint _2885 = _2672;
                        uint _2886;
                        vec4 _2911;
                        float _2912;
                        vec4 _2927;
                        vec3 _2939;
                        vec4 _2955;
                        vec4 _2971;
                        float _3018;
                        bool _3019;
                        for (;;)
                        {
                            uint _2896 = ((_2663 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2885));
                            _2886 = (_2885 + 4294967295u) & _2885;
                            uint _2898 = _2896 * 40u;
                            _2911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 3u)).x));
                            _2912 = _2911.w;
                            uint _2914 = (_2896 * 40u) + 4u;
                            _2927 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 3u)).x));
                            uint _2929 = (_2896 * 40u) + 8u;
                            _2939 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x));
                            uint _2942 = (_2896 * 40u) + 16u;
                            _2955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 3u)).x));
                            uint _2958 = (_2896 * 40u) + 20u;
                            _2971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 3u)).x));
                            uint _2974 = (_2896 * 40u) + 24u;
                            vec4 _2987 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 3u)).x));
                            uint _2993 = (_2896 * 40u) + 28u;
                            vec4 _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            _3018 = fma(_2231, _3006.z, fma(_2230, _3006.y, _3006.x * _2229)) + _3006.w;
                            _3019 = !((fma(_2231, _2987.z, fma(_2230, _2987.y, _2987.x * _2229)) + _2987.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3019)
                            {
                                float _3046 = _2911.x - _2229;
                                float _3047 = _2911.y - _2230;
                                float _3048 = _2911.z - _2231;
                                float _3049 = dot(vec3(_3046, _3047, _3048), vec3(_3046, _3047, _3048));
                                float _3052 = inversesqrt(_3049);
                                float _3053 = _3052 * _3046;
                                float _3054 = _3052 * _3047;
                                float _3055 = _3052 * _3048;
                                float _3059 = 1.0 - (_3049 / (_2912 * _2912));
                                float _4155 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                                float _3060 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
                                float _3064 = sqrt(_3049) * _2927.w;
                                float _3066 = 1.39999997615814208984375 / (_3064 + 1.39999997615814208984375);
                                float _3067 = _3066 * _3066;
                                float _3070 = ((1.0 - _3067) * dot(vec3(_3053, _3054, _3055), vec3(_430, _433, _436))) + _3067;
                                float _3073 = _3064 * _3064;
                                float _3077 = (fma(_2231, _2955.z, fma(_2230, _2955.y, _2955.x * _2229)) + _2955.w) / _3018;
                                float _3078 = (fma(_2231, _2971.z, fma(_2230, _2971.y, _2971.x * _2229)) + _2971.w) / _3018;
                                float _3082 = 1.0 - dot(vec2(_3077, _3078), vec2(_3077, _3078));
                                float _4171 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                                float _3083 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
                                float _3084 = _3083 * (((isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0))) * _3060) / ((_3073 * 0.699999988079071044921875) + 1.0));
                                float _3096 = exp2(log2(1.0 / ((_3073 * 3.5) + 5.0)) * 0.25);
                                float _3097 = 1.0 - _506;
                                float _3104 = sqrt(1.0 - ((1.0 - (_3097 * _3097)) * (1.0 - (_3096 * _3096))));
                                float _3105 = _3104 * _3104;
                                float _3106 = _3105 * _3105;
                                float _3107 = _3053 - _2523;
                                float _3108 = _3054 - _2524;
                                float _3109 = _3055 - _2525;
                                float _3113 = inversesqrt(dot(vec3(_3107, _3108, _3109), vec3(_3107, _3108, _3109)));
                                float _3117 = dot(vec3(_430, _433, _436), vec3((-0.0) - _2523, (-0.0) - _2524, (-0.0) - _2525));
                                float _4182 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3120 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                                float _3121 = dot(vec3(_430, _433, _436), vec3(_3113 * _3107, _3113 * _3108, _3113 * _3109));
                                float _4193 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                                float _3124 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                                float _3128 = ((_3124 * _3124) * (_3106 + (-1.0))) + 1.0;
                                float _3129 = _3066 * _3105;
                                float _3130 = _3129 * _3129;
                                float _3136 = ((1.0 - _3130) * dot(vec3(_430, _433, _436), vec3(_3053, _3054, _3055))) + _3130;
                                float _4204 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                                float _3137 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                                float _3138 = 1.0 - _3105;
                                float _3148 = (0.5 / (((_3137 * ((_3120 * _3138) + _3105)) + 9.9999999392252902907785028219223e-09) + (((_3137 * _3138) + _3105) * _3120))) * _3137;
                                float _4215 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                                float _3158 = (_3083 * _3060) * (((_3106 * 3.1415927410125732421875) * (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) / ((_3128 * _3128) * ((_3073 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3084 * _2927.z;
                                frontier_phi_85_pred_1 = _3084 * _2927.y;
                                frontier_phi_85_pred_2 = _3084 * _2927.x;
                                frontier_phi_85_pred_3 = _3158 * _2939.z;
                                frontier_phi_85_pred_4 = _3158 * _2939.y;
                                frontier_phi_85_pred_5 = _3158 * _2939.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3167 = frontier_phi_85_pred;
                            _3166 = frontier_phi_85_pred_1;
                            _3165 = frontier_phi_85_pred_2;
                            _3164 = frontier_phi_85_pred_3;
                            _3163 = frontier_phi_85_pred_4;
                            _3162 = frontier_phi_85_pred_5;
                            _2869 = _3165 + _2882;
                            _2870 = _3166 + _2883;
                            _2871 = _3167 + _2884;
                            _2866 = _3162 + _2879;
                            _2867 = _3163 + _2880;
                            _2868 = _3164 + _2881;
                            if (_2886 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2879 = _2866;
                                _2880 = _2867;
                                _2881 = _2868;
                                _2882 = _2869;
                                _2883 = _2870;
                                _2884 = _2871;
                                _2885 = _2886;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2871;
                        frontier_phi_79_pred_1 = _2870;
                        frontier_phi_79_pred_2 = _2869;
                        frontier_phi_79_pred_3 = _2868;
                        frontier_phi_79_pred_4 = _2867;
                        frontier_phi_79_pred_5 = _2866;
                    }
                    _2508 = frontier_phi_79_pred;
                    _2506 = frontier_phi_79_pred_1;
                    _2504 = frontier_phi_79_pred_2;
                    _2502 = frontier_phi_79_pred_3;
                    _2500 = frontier_phi_79_pred_4;
                    _2498 = frontier_phi_79_pred_5;
                    uint _2664 = _2663 + 1u;
                    if (_2664 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2657 = _2498;
                        _2658 = _2500;
                        _2659 = _2502;
                        _2660 = _2504;
                        _2661 = _2506;
                        _2662 = _2508;
                        _2663 = _2664;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2504;
                frontier_phi_60_61_ladder_1 = _2508;
                frontier_phi_60_61_ladder_2 = _2506;
                frontier_phi_60_61_ladder_3 = _2502;
                frontier_phi_60_61_ladder_4 = _2500;
                frontier_phi_60_61_ladder_5 = _2498;
            }
            else
            {
                frontier_phi_60_61_ladder = _2383;
                frontier_phi_60_61_ladder_1 = _2387;
                frontier_phi_60_61_ladder_2 = _2385;
                frontier_phi_60_61_ladder_3 = _2381;
                frontier_phi_60_61_ladder_4 = _2379;
                frontier_phi_60_61_ladder_5 = _2377;
            }
            _2497 = frontier_phi_60_61_ladder_5;
            _2499 = frontier_phi_60_61_ladder_4;
            _2501 = frontier_phi_60_61_ladder_3;
            _2503 = frontier_phi_60_61_ladder;
            _2505 = frontier_phi_60_61_ladder_2;
            _2507 = frontier_phi_60_61_ladder_1;
        }
        float _2512 = isnan(1.0) ? _490 : (isnan(_490) ? 1.0 : min(_490, 1.0));
        _2287 = (_2512 * _2503) + _1721;
        _2289 = (_2512 * _2505) + _1723;
        _2291 = (_2512 * _2507) + _1725;
        _2293 = ((_2497 * _475) * _2512) + _2069;
        _2295 = ((_2499 * _477) * _2512) + _2071;
        _2297 = ((_2501 * _478) * _2512) + _2073;
    }
    else
    {
        _2287 = _1721;
        _2289 = _1723;
        _2291 = _1725;
        _2293 = _2069;
        _2295 = _2071;
        _2297 = _2073;
    }
    float _4231 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _4242 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _4253 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _4264 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _2315 = ((isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_2287 + ((isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))) * _490))) + ((_2293 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _1332)) * cbPerFrame._m0[3u].x);
    float _2316 = ((isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_2289 + ((isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))) * _490))) + ((_2295 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _1332)) * cbPerFrame._m0[3u].x);
    float _2317 = ((isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2291 + ((isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0))) * _490))) + ((_2297 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _1332)) * cbPerFrame._m0[3u].x);
    float _2322 = cbInstanceData._m0[_449 + 6u].w * (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0)));
    float _2327 = _409 / cbSceneParam._m0[86u].x;
    float _2328 = _410 / cbSceneParam._m0[86u].y;
    vec4 _2342 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2327, _2328, (log2((isnan(cbSceneParam._m0[77u].w) ? _329 : (isnan(_329) ? cbSceneParam._m0[77u].w : min(_329, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2344 = _2342.x;
    float _2345 = _2342.y;
    float _2346 = _2342.z;
    float _2347 = _2342.w;
    float _2439;
    float _2441;
    float _2443;
    float _2445;
    if (_329 > cbSceneParam._m0[78u].w)
    {
        float _2402 = isnan(_329) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _329 : min(cbSceneParam._m0[80u].w, _329));
        float _2403 = _2402 / _329;
        float _2414 = _2403 * _381;
        float _2415 = _382 * _2403;
        float _2416 = (-0.0) - _2415;
        float _2417 = _2403 * _383;
        float _2419 = (cbSceneParam._m0[77u].w * _2416) / _2402;
        float _2420 = _2419 + cbSceneParam._m0[79u].w;
        float _2421 = cbSceneParam._m0[79u].w - _2415;
        float _2427 = sqrt(((_2414 * _2414) + (_2415 * _2415)) + (_2417 * _2417));
        float _2430 = (1.0 - (cbSceneParam._m0[77u].w / _2402)) * _2427;
        float _2435 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2437 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2614;
        if (abs((_2416 - _2419) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2614 = ((((_2420 > 0.0) ? exp2(_2435 * _2420) : (2.0 - exp2(_2437 * _2420))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2430;
        }
        else
        {
            float _2558 = 1.0 / cbSceneParam._m0[80u].x;
            float _2559 = isnan(_2421) ? _2420 : (isnan(_2420) ? _2421 : max(_2420, _2421));
            float _2560 = isnan(_2421) ? _2420 : (isnan(_2420) ? _2421 : min(_2420, _2421));
            float _2569 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : min(_2559, 0.0));
            float _2570 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : min(_2560, 0.0));
            _2614 = ((abs(_2427 / _2416) * cbSceneParam._m0[80u].y) * ((((_2569 - _2570) * 2.0) - ((exp2(_2435 * (isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0)))) - exp2(_2435 * (isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0))))) * _2558)) - ((exp2(_2437 * _2569) - exp2(_2437 * _2570)) * _2558))) + (_2430 * cbSceneParam._m0[80u].z);
        }
        vec4 _2616 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2327, _2328, 1.0), 0.0);
        float _2625 = exp2((_2614 * (-1.44269502162933349609375)) * (1.0 - _2616.w));
        float _2626 = log2(_2625);
        float _2642 = log2(_2347);
        _2439 = (exp2(_2642 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2626 * cbSceneParam._m0[78u].x)) * _2616.x) / cbSceneParam._m0[78u].x)) + _2344;
        _2441 = (exp2(_2642 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2626 * cbSceneParam._m0[78u].y)) * _2616.y) / cbSceneParam._m0[78u].y)) + _2345;
        _2443 = (exp2(_2642 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2626 * cbSceneParam._m0[78u].z)) * _2616.z) / cbSceneParam._m0[78u].z)) + _2346;
        _2445 = _2625 * _2347;
    }
    else
    {
        _2439 = _2344;
        _2441 = _2345;
        _2443 = _2346;
        _2445 = _2347;
    }
    bool _2652;
    vec4 _2455;
    vec4 _2477;
    float _2479;
    float _2483;
    float _2484;
    float _2485;
    float _2486;
    bool _2496;
    for (;;)
    {
        _2455 = cbMatDynParam._m0[0u];
        float _2457 = roundEven(_2455.y);
        bool _2458 = _2457 == 3.0;
        float _2459 = log2(_2445);
        float _2466 = exp2(_2459 * cbSceneParam._m0[78u].x) * _2315;
        float _2467 = exp2(_2459 * cbSceneParam._m0[78u].y) * _2316;
        float _2468 = exp2(_2459 * cbSceneParam._m0[78u].z) * _2317;
        float _2475 = _397 + (-0.5);
        _2477 = cbMtdParam._m0[1u];
        _2479 = _2477.y * _2475;
        float _2482 = (_2457 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2483 = _2482 * (_2458 ? _2466 : (_2466 + (cbSceneParam._m0[72u].w * _2439)));
        _2484 = _2482 * (_2458 ? _2467 : (_2467 + (cbSceneParam._m0[72u].w * _2441)));
        _2485 = _2482 * (_2458 ? _2468 : (_2468 + (cbSceneParam._m0[72u].w * _2443)));
        _2486 = _2475 * 0.999000012874603271484375;
        _2496 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2496)
        {
            if ((cbInstanceData._m0[_449 + 7u].x + _2486) < 0.5)
            {
                _2652 = true;
                break;
            }
        }
        uint _2593 = _451 + uint(_2455.w);
        if ((cbInstanceData._m0[_2593].w < 1.0) && ((cbInstanceData._m0[_2593].w + _2486) < 0.5))
        {
            _2652 = true;
            break;
        }
        if ((_2479 + _244) < _2477.x)
        {
            _2652 = true;
            break;
        }
        _2652 = false;
        break;
    }
    float _2857;
    if (_2652)
    {
        discard_state = true;
        _2857 = 0.0;
    }
    else
    {
        _2857 = _2322;
    }
    SV_Target.x = _2483;
    SV_Target.y = _2484;
    SV_Target.z = _2485;
    SV_Target.w = _2857;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2322;
    discard_exit();
}


