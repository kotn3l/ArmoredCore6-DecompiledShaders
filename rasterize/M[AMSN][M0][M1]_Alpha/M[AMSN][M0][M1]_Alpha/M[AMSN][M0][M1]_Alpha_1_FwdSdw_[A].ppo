#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _861;
float _3516;
float _3517;
float _3518;
float _3519;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _238 = texture(sampler2D(M_AMSN_M0_M1_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _244 = _238.w;
    float _245 = _238.x * cbMtdParam._m0[9u].x;
    float _246 = _238.y * cbMtdParam._m0[9u].y;
    float _247 = _238.z * cbMtdParam._m0[9u].z;
    float _248 = _244 * TEXCOORD_1.z;
    vec4 _260 = texture(sampler2D(M_AMSN_M0_M1_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _264 = _260.z;
    float _268 = (_260.x * 2.0) + (-1.0);
    float _270 = (_260.y * 2.0) + (-1.0);
    float _271 = dot(vec2(_268, _270), vec2(_268, _270));
    float _3528 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _277 = sqrt(1.0 - (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))));
    float _280 = fma(_277, _216, fma(_270, _208 * TANGENT.x, (_194 * _186) * _268));
    float _283 = fma(_277, _217, fma(_270, _208 * TANGENT.y, (_194 * _187) * _268));
    float _286 = fma(_277, _218, fma(_270, _208 * TANGENT.z, (_194 * _188) * _268));
    float _290 = inversesqrt(dot(vec3(_280, _283, _286), vec3(_280, _283, _286)));
    float _291 = _290 * _280;
    float _292 = _290 * _283;
    float _293 = _290 * _286;
    float _3539 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _294 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _3550 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _295 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _3561 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3572 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3583 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _314 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _356 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _366 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _356);
    float _367 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _356);
    float _368 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _356);
    float _372 = inversesqrt(dot(vec3(_366, _367, _368), vec3(_366, _367, _368)));
    float _373 = _366 * _372;
    float _374 = _367 * _372;
    float _375 = _368 * _372;
    vec4 _380 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _382 = _380.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _540 = sqrt(((_366 * _366) + (_367 * _367)) + (_368 * _368));
        float _546 = (cbMatDynParam._m0[5u].x * _540) + cbMatDynParam._m0[5u].y;
        float _3594 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
        float _547 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _551 = (cbMatDynParam._m0[5u].z * _540) + cbMatDynParam._m0[5u].w;
        float _3605 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) - _547)) + _547) < ((_382 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _394 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _395 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _415 = fma(_293, cbSceneParam._m0[5u].z, fma(_292, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _291));
    float _418 = fma(_293, cbSceneParam._m0[6u].z, fma(_292, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _291));
    float _421 = fma(_293, cbSceneParam._m0[7u].z, fma(_292, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _291));
    uint _434 = uint(roundEven(NORMAL.w)) * 13u;
    uint _436 = _434 + 9u;
    uint _437 = _436 + uint(cbMatDynParam._m0[0u].w);
    float _443 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0)))) * cbInstanceData._m0[_437].x;
    float _444 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0)))) * cbInstanceData._m0[_437].y;
    float _445 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0)))) * cbInstanceData._m0[_437].z;
    float _3616 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _3627 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _447 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
    float _3638 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    vec4 _457 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _394, cbSceneParam._m0[86u].y * _395));
    float _460 = _457.x * TEXCOORD_1.w;
    float _461 = dot(vec3(_291, _292, _293), vec3(_373, _374, _375));
    float _464 = _461 * 2.0;
    float _468 = (_464 * _291) - _373;
    float _469 = (_464 * _292) - _374;
    float _470 = (_464 * _293) - _375;
    float _474 = abs(dot(vec3(_373, _374, _375), vec3(_291, _292, _293)));
    float _3649 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _476 = sqrt(_295);
    float _489 = exp2((_476 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_476 * 3.0));
    float _521 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _525 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _529 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _860;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _585 = fma(_529, cbModelParam._m0[26u].z, fma(_525, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _521));
        float _589 = fma(_529, cbModelParam._m0[27u].z, fma(_525, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _521));
        float _593 = fma(_529, cbModelParam._m0[28u].z, fma(_525, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _521));
        float _618 = _521 + _291;
        float _619 = _525 + _292;
        float _620 = _529 + _293;
        float _630 = fma(_620, cbModelParam._m0[26u].z, fma(_619, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _618)) - _585;
        float _631 = fma(_620, cbModelParam._m0[27u].z, fma(_619, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _618)) - _589;
        float _632 = fma(_620, cbModelParam._m0[28u].z, fma(_619, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _618)) - _593;
        float _636 = inversesqrt(dot(vec3(_630, _631, _632), vec3(_630, _631, _632)));
        float _649 = ((_636 * _630) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_585 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _650 = ((_636 * _631) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_589 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _651 = ((_636 * _632) / cbModelParam._m0[34u].z) + ((((((_593 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _654 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        vec4 _668 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        vec4 _675 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        float _688 = exp2((_654.w + (-0.5)) * 20.0) * 2.0;
        float _689 = _688 * (_654.x + (-0.5));
        float _690 = _688 * (_654.y + (-0.5));
        float _691 = _688 * (_654.z + (-0.5));
        float _698 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _699 = _698 * (_661.x + (-0.5));
        float _700 = _698 * (_661.y + (-0.5));
        float _701 = _698 * (_661.z + (-0.5));
        float _708 = exp2((_668.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _708 * (_668.x + (-0.5));
        float _710 = _708 * (_668.y + (-0.5));
        float _711 = _708 * (_668.z + (-0.5));
        float _718 = exp2((_675.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_675.x + (-0.5));
        float _720 = _718 * (_675.y + (-0.5));
        float _721 = _718 * (_675.z + (-0.5));
        float _722 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _723 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _724 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _725 = _689 * 0.5;
        float _726 = _699 * 0.5;
        float _727 = _709 * 0.5;
        float _728 = dot(vec3(_725, _726, _727), vec3(_725, _726, _727));
        float _733 = (_728 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_728);
        float _742 = (dot(vec3(_291, _292, _293), vec3(_733 * _725, _733 * _726, _733 * _727)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _752 = sqrt(((_726 * _726) + (_725 * _725)) + (_727 * _727)) / (_722 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _754 = _753 * 2.0;
        float _758 = (1.0 - _753) / (_753 + 1.0);
        float _3697 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _768 = ((((1.0 - _759) * (_754 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_754 + 1.0))) + _759) * _722;
        float _769 = _690 * 0.5;
        float _770 = _700 * 0.5;
        float _771 = _710 * 0.5;
        float _772 = dot(vec3(_769, _770, _771), vec3(_769, _770, _771));
        float _777 = (_772 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_772);
        float _785 = (dot(vec3(_291, _292, _293), vec3(_777 * _769, _777 * _770, _777 * _771)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _794 = sqrt(((_770 * _770) + (_769 * _769)) + (_771 * _771)) / (_723 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _796 = _795 * 2.0;
        float _800 = (1.0 - _795) / (_795 + 1.0);
        float _3730 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _810 = ((((1.0 - _801) * (_796 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_796 + 1.0))) + _801) * _723;
        float _811 = _691 * 0.5;
        float _812 = _701 * 0.5;
        float _813 = _711 * 0.5;
        float _814 = dot(vec3(_811, _812, _813), vec3(_811, _812, _813));
        float _819 = (_814 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_814);
        float _827 = (dot(vec3(_291, _292, _293), vec3(_819 * _811, _819 * _812, _819 * _813)) + 1.0) * 0.5;
        float _3741 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _836 = sqrt(((_812 * _812) + (_811 * _811)) + (_813 * _813)) / (_724 + 9.9999997473787516355514526367188e-06);
        float _3752 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _838 = _837 * 2.0;
        float _842 = (1.0 - _837) / (_837 + 1.0);
        float _3763 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _852 = ((((1.0 - _843) * (_838 + 2.0)) * exp2(log2(isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_838 + 1.0))) + _843) * _724;
        _860 = _691;
        _862 = _690;
        _863 = _689;
        _864 = _701;
        _865 = _700;
        _866 = _699;
        _867 = _711;
        _868 = _710;
        _869 = _709;
        _870 = _724;
        _871 = _723;
        _872 = _722;
        _873 = cbModelParam._m0[36u].z * (isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0)));
        _874 = cbModelParam._m0[36u].z * (isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0)));
        _875 = cbModelParam._m0[36u].z * (isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0)));
    }
    else
    {
        _860 = _861;
        _862 = _861;
        _863 = _861;
        _864 = _861;
        _865 = _861;
        _866 = _861;
        _867 = _861;
        _868 = _861;
        _869 = _861;
        _870 = _861;
        _871 = _861;
        _872 = _861;
        _873 = 0.0;
        _874 = 0.0;
        _875 = 0.0;
    }
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _904 = fma(_529, cbModelParam._m0[30u].z, fma(_525, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _521));
        float _908 = fma(_529, cbModelParam._m0[31u].z, fma(_525, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _521));
        float _912 = fma(_529, cbModelParam._m0[32u].z, fma(_525, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _521));
        float _935 = _521 + _291;
        float _936 = _525 + _292;
        float _937 = _529 + _293;
        float _947 = fma(_937, cbModelParam._m0[30u].z, fma(_936, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _935)) - _904;
        float _948 = fma(_937, cbModelParam._m0[31u].z, fma(_936, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _935)) - _908;
        float _949 = fma(_937, cbModelParam._m0[32u].z, fma(_936, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _935)) - _912;
        float _953 = inversesqrt(dot(vec3(_947, _948, _949), vec3(_947, _948, _949)));
        float _966 = ((_953 * _947) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_904 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _967 = ((_953 * _948) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_908 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _968 = ((_953 * _949) / cbModelParam._m0[35u].z) + ((((((_912 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        float _1003 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_970.x + (-0.5));
        float _1005 = _1003 * (_970.y + (-0.5));
        float _1006 = _1003 * (_970.z + (-0.5));
        float _1013 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_977.x + (-0.5));
        float _1015 = _1013 * (_977.y + (-0.5));
        float _1016 = _1013 * (_977.z + (-0.5));
        float _1023 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_984.x + (-0.5));
        float _1025 = _1023 * (_984.y + (-0.5));
        float _1026 = _1023 * (_984.z + (-0.5));
        float _1033 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_991.x + (-0.5));
        float _1035 = _1033 * (_991.y + (-0.5));
        float _1036 = _1033 * (_991.z + (-0.5));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = _1004 * 0.5;
        float _1041 = _1014 * 0.5;
        float _1042 = _1024 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1056 = (dot(vec3(_291, _292, _293), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1065 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3826 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1067 + 1.0))) + _1072) * _1037;
        float _1082 = _1005 * 0.5;
        float _1083 = _1015 * 0.5;
        float _1084 = _1025 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1098 = (dot(vec3(_291, _292, _293), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1107 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _3859 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1109 + 1.0))) + _1114) * _1038;
        float _1124 = _1006 * 0.5;
        float _1125 = _1016 * 0.5;
        float _1126 = _1026 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1140 = (dot(vec3(_291, _292, _293), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1149 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _3892 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1151 + 1.0))) + _1156) * _1039;
        _1173 = _1006;
        _1174 = _1005;
        _1175 = _1004;
        _1176 = _1016;
        _1177 = _1015;
        _1178 = _1014;
        _1179 = _1026;
        _1180 = _1025;
        _1181 = _1024;
        _1182 = _1039;
        _1183 = _1038;
        _1184 = _1037;
        _1185 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
        _1186 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
        _1187 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
    }
    else
    {
        _1173 = _861;
        _1174 = _861;
        _1175 = _861;
        _1176 = _861;
        _1177 = _861;
        _1178 = _861;
        _1179 = _861;
        _1180 = _861;
        _1181 = _861;
        _1182 = _861;
        _1183 = _861;
        _1184 = _861;
        _1185 = 0.0;
        _1186 = 0.0;
        _1187 = 0.0;
    }
    float _1197 = (cbModelParam._m0[1u].x * (_1185 - _873)) + _873;
    float _1198 = (cbModelParam._m0[1u].x * (_1186 - _874)) + _874;
    float _1199 = (cbModelParam._m0[1u].x * (_1187 - _875)) + _875;
    float _1220 = fma(_1199, cbSceneParam._m0[89u].z, fma(_1198, cbSceneParam._m0[89u].y, _1197 * cbSceneParam._m0[89u].x));
    float _1223 = fma(_1199, cbSceneParam._m0[90u].z, fma(_1198, cbSceneParam._m0[90u].y, _1197 * cbSceneParam._m0[90u].x));
    float _1226 = fma(_1199, cbSceneParam._m0[91u].z, fma(_1198, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1197));
    float _1241 = _468 * 0.5;
    float _1242 = _469 * 0.5;
    float _1243 = _470 * 0.5;
    float _1244 = dot(vec4(_1241, _1242, _1243, 1.0), vec4(_1175, _1178, _1181, _1184));
    float _1247 = dot(vec4(_1241, _1242, _1243, 1.0), vec4(_1174, _1177, _1180, _1183));
    float _1250 = dot(vec4(_1241, _1242, _1243, 1.0), vec4(_1173, _1176, _1179, _1182));
    float _1284;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1257 = dot(vec4(_1241, _1242, _1243, 1.0), vec4(_860, _864, _867, _870));
        float _1261 = dot(vec4(_1241, _1242, _1243, 1.0), vec4(_862, _865, _868, _871));
        float _1265 = dot(vec4(_1241, _1242, _1243, 1.0), vec4(_863, _866, _869, _872));
        float _1272 = dot(vec4(cbModelParam._m0[39u]), vec4(_1241, _1242, _1243, 1.0));
        _1284 = dot(vec3(isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)), isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)), isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1272) ? 0.0 : (isnan(0.0) ? _1272 : max(0.0, _1272))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1284 = 1.0;
    }
    float _1295;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1286 = dot(vec4(cbModelParam._m0[40u]), vec4(_1241, _1242, _1243, 1.0));
        _1295 = dot(vec3(isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)), isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1286) ? 0.0 : (isnan(0.0) ? _1286 : max(0.0, _1286))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1295 = 1.0;
    }
    float _1299 = (_1295 * cbModelParam._m0[1u].x) + (_1284 * (1.0 - cbModelParam._m0[1u].x));
    float _1309 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _295);
    float _1310 = isnan(_1309) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1309 : min(cbModelParam._m0[25u].z, _1309));
    float _1392;
    float _1394;
    float _1396;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1359 = fma(_529, cbModelParam._m0[13u].z, fma(_525, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _521)) + cbModelParam._m0[13u].w;
        float _1363 = fma(_529, cbModelParam._m0[14u].z, fma(_525, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _521)) + cbModelParam._m0[14u].w;
        float _1367 = fma(_529, cbModelParam._m0[15u].z, fma(_525, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _521)) + cbModelParam._m0[15u].w;
        float _1370 = fma(_470, cbModelParam._m0[13u].z, fma(_469, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _468));
        float _1373 = fma(_470, cbModelParam._m0[14u].z, fma(_469, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _468));
        float _1376 = fma(_470, cbModelParam._m0[15u].z, fma(_469, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _468));
        float _1404;
        if (_1370 > 0.0)
        {
            _1404 = abs((1.0 - _1359) / _1370);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1370 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1359 + 1.0) / _1370);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1404 = frontier_phi_19_17_ladder;
        }
        float _1578;
        if (_1373 > 0.0)
        {
            _1578 = abs((1.0 - _1363) / _1373);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1373 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1363 + 1.0) / _1373);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1578 = frontier_phi_28_24_ladder;
        }
        float _1874;
        if (_1376 > 0.0)
        {
            _1874 = abs((1.0 - _1367) / _1376);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1376 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1367 + 1.0) / _1376);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1874 = frontier_phi_40_35_ladder;
        }
        float _1876 = isnan(_1578) ? _1404 : (isnan(_1404) ? _1578 : min(_1404, _1578));
        float _1877 = isnan(_1874) ? _1876 : (isnan(_1876) ? _1874 : min(_1876, _1874));
        float _1881 = (_1877 * _1370) + _1359;
        float _1882 = (_1877 * _1373) + _1363;
        float _1883 = (_1877 * _1376) + _1367;
        float _1884 = _1877 * 9.9999997473787516355514526367188e-05;
        float _1886 = (-1.0) - _1884;
        float _1888 = _1884 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1883 > _1888) || ((_1883 < _1886) || ((_1882 > _1888) || ((_1882 < _1886) || ((_1881 < _1886) || (_1881 > _1888))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2028 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1883, cbModelParam._m0[9u].z, fma(_1882, cbModelParam._m0[9u].y, _1881 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1883, cbModelParam._m0[10u].z, fma(_1882, cbModelParam._m0[10u].y, _1881 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1883, cbModelParam._m0[11u].z, fma(_1882, cbModelParam._m0[11u].y, _1881 * cbModelParam._m0[11u].x))), _1310);
            frontier_phi_18_40_ladder = _2028.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2028.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2028.x * cbModelParam._m0[1u].y;
        }
        _1392 = frontier_phi_18_40_ladder_2;
        _1394 = frontier_phi_18_40_ladder_1;
        _1396 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1380 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_468, _469, _470), _1310);
        _1392 = _1380.x * cbModelParam._m0[1u].y;
        _1394 = _1380.y * cbModelParam._m0[1u].y;
        _1396 = _1380.z * cbModelParam._m0[1u].y;
    }
    float _1400 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _295);
    float _1401 = isnan(_1400) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1400 : min(cbModelParam._m0[25u].w, _1400));
    float _1494;
    float _1496;
    float _1498;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1458 = fma(_529, cbModelParam._m0[21u].z, fma(_525, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _521)) + cbModelParam._m0[21u].w;
        float _1462 = fma(_529, cbModelParam._m0[22u].z, fma(_525, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _521)) + cbModelParam._m0[22u].w;
        float _1466 = fma(_529, cbModelParam._m0[23u].z, fma(_525, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _521)) + cbModelParam._m0[23u].w;
        float _1469 = fma(_470, cbModelParam._m0[21u].z, fma(_469, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _468));
        float _1472 = fma(_470, cbModelParam._m0[22u].z, fma(_469, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _468));
        float _1475 = fma(_470, cbModelParam._m0[23u].z, fma(_469, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _468));
        float _1583;
        if (_1469 > 0.0)
        {
            _1583 = abs((1.0 - _1458) / _1469);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1458 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1583 = frontier_phi_30_26_ladder;
        }
        float _1901;
        if (_1472 > 0.0)
        {
            _1901 = abs((1.0 - _1462) / _1472);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1462 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1901 = frontier_phi_42_37_ladder;
        }
        float _2228;
        if (_1475 > 0.0)
        {
            _2228 = abs((1.0 - _1466) / _1475);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1475 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1466 + 1.0) / _1475);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2228 = frontier_phi_52_49_ladder;
        }
        float _2230 = isnan(_1901) ? _1583 : (isnan(_1583) ? _1901 : min(_1583, _1901));
        float _2231 = isnan(_2228) ? _2230 : (isnan(_2230) ? _2228 : min(_2230, _2228));
        float _2235 = (_2231 * _1469) + _1458;
        float _2236 = (_2231 * _1472) + _1462;
        float _2237 = (_2231 * _1475) + _1466;
        float _2238 = _2231 * 9.9999997473787516355514526367188e-05;
        float _2239 = (-1.0) - _2238;
        float _2241 = _2238 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2237 > _2241) || ((_2237 < _2239) || ((_2236 > _2241) || ((_2236 < _2239) || ((_2235 < _2239) || (_2235 > _2241))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2355 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2237, cbModelParam._m0[17u].z, fma(_2236, cbModelParam._m0[17u].y, _2235 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2237, cbModelParam._m0[18u].z, fma(_2236, cbModelParam._m0[18u].y, _2235 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2237, cbModelParam._m0[19u].z, fma(_2236, cbModelParam._m0[19u].y, _2235 * cbModelParam._m0[19u].x))), _1401);
            frontier_phi_27_52_ladder = _2355.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2355.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2355.x * cbModelParam._m0[1u].z;
        }
        _1494 = frontier_phi_27_52_ladder_2;
        _1496 = frontier_phi_27_52_ladder_1;
        _1498 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1478 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_468, _469, _470), _1401);
        _1494 = _1478.x * cbModelParam._m0[1u].z;
        _1496 = _1478.y * cbModelParam._m0[1u].z;
        _1498 = _1478.z * cbModelParam._m0[1u].z;
    }
    float _1510 = ((((1.0 - _489) * ((_476 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_489 * _476)) * _460;
    float _1511 = _1510 * ((cbModelParam._m0[1u].w * (_1494 - _1392)) + _1392);
    float _1512 = _1510 * ((cbModelParam._m0[1u].w * (_1496 - _1394)) + _1394);
    float _1513 = _1510 * ((cbModelParam._m0[1u].w * (_1498 - _1396)) + _1396);
    float _1516 = fma(_1513, cbSceneParam._m0[89u].z, fma(_1512, cbSceneParam._m0[89u].y, _1511 * cbSceneParam._m0[89u].x));
    float _1519 = fma(_1513, cbSceneParam._m0[90u].z, fma(_1512, cbSceneParam._m0[90u].y, _1511 * cbSceneParam._m0[90u].x));
    float _1522 = fma(_1513, cbSceneParam._m0[91u].z, fma(_1512, cbSceneParam._m0[91u].y, _1511 * cbSceneParam._m0[91u].x));
    float _1557 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1561 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1565 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1569 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1570 = _1557 / _1569;
    float _1571 = _1561 / _1569;
    float _1572 = _1565 / _1569;
    float _1719;
    float _1720;
    float _1721;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1599 = ((uint(_1572 > cbSceneParam._m0[59u].y) + uint(_1572 > cbSceneParam._m0[59u].x)) + uint(_1572 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1600 = _1599 + 43u;
        uint _1608 = _1599 + 44u;
        uint _1616 = _1599 + 45u;
        uint _1624 = _1599 + 46u;
        float _1635 = fma(_1569, cbSceneParam._m0[_1600].w, fma(_1565, cbSceneParam._m0[_1600].z, fma(_1561, cbSceneParam._m0[_1600].y, _1557 * cbSceneParam._m0[_1600].x)));
        float _1639 = fma(_1569, cbSceneParam._m0[_1608].w, fma(_1565, cbSceneParam._m0[_1608].z, fma(_1561, cbSceneParam._m0[_1608].y, _1557 * cbSceneParam._m0[_1608].x)));
        float _1647 = fma(_1569, cbSceneParam._m0[_1624].w, fma(_1565, cbSceneParam._m0[_1624].z, fma(_1561, cbSceneParam._m0[_1624].y, _1557 * cbSceneParam._m0[_1624].x)));
        float _1652 = cbSceneParam._m0[33u].z * _1647;
        float _1654 = cbSceneParam._m0[33u].w * _1647;
        float _1657 = fma(_1569, cbSceneParam._m0[_1616].w, fma(_1565, cbSceneParam._m0[_1616].z, fma(_1561, cbSceneParam._m0[_1616].y, _1557 * cbSceneParam._m0[_1616].x))) / _1647;
        float _1705 = (cbSceneParam._m0[33u].x - sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572))) * cbSceneParam._m0[33u].y;
        float _4018 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1712 = (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1652 + _1635) / _1647, (_1654 + _1639) / _1647), _1657), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1654 + _1635) / _1647, (_1639 - _1652) / _1647), _1657), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1635 - _1652) / _1647, (_1639 - _1654) / _1647), _1657), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1635 - _1654) / _1647, (_1652 + _1639) / _1647), _1657), 0.0)).x), vec4(0.25)));
        _1719 = 1.0 - (_1712 * cbSceneParam._m0[34u].x);
        _1720 = 1.0 - (_1712 * cbSceneParam._m0[34u].y);
        _1721 = 1.0 - (_1712 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1719 = 1.0;
        _1720 = 1.0;
        _1721 = 1.0;
    }
    float _1785;
    float _1787;
    float _1789;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1773 = fma(_1569, cbSceneParam._m0[63u].w, fma(_1565, cbSceneParam._m0[63u].z, fma(_1561, cbSceneParam._m0[63u].y, _1557 * cbSceneParam._m0[63u].x)));
        float _1774 = fma(_1569, cbSceneParam._m0[60u].w, fma(_1565, cbSceneParam._m0[60u].z, fma(_1561, cbSceneParam._m0[60u].y, _1557 * cbSceneParam._m0[60u].x))) / _1773;
        float _1775 = fma(_1569, cbSceneParam._m0[61u].w, fma(_1565, cbSceneParam._m0[61u].z, fma(_1561, cbSceneParam._m0[61u].y, _1557 * cbSceneParam._m0[61u].x))) / _1773;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1774 >= cbSceneParam._m0[64u].x) && (_1775 >= cbSceneParam._m0[64u].y)) && (_1774 <= cbSceneParam._m0[64u].z)) && (_1775 <= cbSceneParam._m0[64u].w))
        {
            float _1914 = fma(_1569, cbSceneParam._m0[62u].w, fma(_1565, cbSceneParam._m0[62u].z, fma(_1561, cbSceneParam._m0[62u].y, _1557 * cbSceneParam._m0[62u].x))) / _1773;
            float _1918 = isnan(cbSceneParam._m0[41u].w) ? _1914 : (isnan(_1914) ? cbSceneParam._m0[41u].w : max(_1914, cbSceneParam._m0[41u].w));
            float _1961 = (cbSceneParam._m0[33u].x - sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572))) * cbSceneParam._m0[33u].y;
            float _4034 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
            float _1968 = (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1774, cbSceneParam._m0[33u].w + _1775), _1918), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1774, _1775 - cbSceneParam._m0[33u].z), _1918), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1774 - cbSceneParam._m0[33u].z, _1775 - cbSceneParam._m0[33u].w), _1918), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1774 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1775), _1918), 0.0)).x), vec4(0.25)));
            float _1972 = 1.0 - (_1968 * cbSceneParam._m0[34u].x);
            float _1973 = 1.0 - (_1968 * cbSceneParam._m0[34u].y);
            float _1974 = 1.0 - (_1968 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1973) ? _1720 : (isnan(_1720) ? _1973 : min(_1720, _1973));
            frontier_phi_39_38_ladder_1 = isnan(_1972) ? _1719 : (isnan(_1719) ? _1972 : min(_1719, _1972));
            frontier_phi_39_38_ladder_2 = isnan(_1974) ? _1721 : (isnan(_1721) ? _1974 : min(_1721, _1974));
        }
        else
        {
            frontier_phi_39_38_ladder = _1720;
            frontier_phi_39_38_ladder_1 = _1719;
            frontier_phi_39_38_ladder_2 = _1721;
        }
        _1785 = frontier_phi_39_38_ladder_1;
        _1787 = frontier_phi_39_38_ladder;
        _1789 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1785 = _1719;
        _1787 = _1720;
        _1789 = _1721;
    }
    uvec4 _1794 = floatBitsToUint(cbInstanceData._m0[_434 + 5u]);
    uint _1796 = _1794.x * 14u;
    uint _1797 = _1796 + 13u;
    float _1804 = _460 + (-1.0);
    float _1809 = (cbLight._m0[_1797].x * _1804) + 1.0;
    float _1810 = (cbLight._m0[_1797].y * _1804) + 1.0;
    float _1811 = (cbLight._m0[_1797].z * _1804) + 1.0;
    float _1812 = (cbLight._m0[_1797].w * _1804) + 1.0;
    uint _1813 = _1796 + 5u;
    float _1819 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
    uint _1823 = _1796 + 4u;
    float _1833 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
    uint _1837 = _1796 | 1u;
    float _1848 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_291, _292, _293));
    float _1851 = dot(vec3(cbLight._m0[_1837].xyz), vec3(_291, _292, _293));
    float _4070 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _4081 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1856 = (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * 0.3183098733425140380859375;
    float _1858 = (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * 0.3183098733425140380859375;
    float _1865 = ((cbLight._m0[_1813].x * _1819) * _1858) + (((cbLight._m0[_1823].x * _1785) * _1833) * _1856);
    float _1866 = ((_1819 * cbLight._m0[_1813].y) * _1858) + (((cbLight._m0[_1823].y * _1787) * _1833) * _1856);
    float _1867 = ((_1819 * cbLight._m0[_1813].z) * _1858) + (((cbLight._m0[_1823].z * _1789) * _1833) * _1856);
    uvec4 _1871 = floatBitsToUint(cbLight._m0[_1796 + 12u]);
    bool _1873 = _1871.x == 0u;
    float _1975;
    float _1977;
    float _1979;
    if (_1873)
    {
        _1975 = _1865;
        _1977 = _1866;
        _1979 = _1867;
    }
    else
    {
        uint _1983 = _1796 + 6u;
        float _1999 = (dot(vec3(cbLight._m0[_1796 + 2u].xyz), vec3(_291, _292, _293)) * 0.5) + 0.5;
        float _2000 = _1999 * _1999;
        float _4092 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        float _2001 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _2002 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
        _1975 = (((cbLight._m0[_1983].x * 0.3183098733425140380859375) * _2001) * _2002) + _1865;
        _1977 = (((cbLight._m0[_1983].y * 0.3183098733425140380859375) * _2001) * _2002) + _1866;
        _1979 = (((cbLight._m0[_1983].z * 0.3183098733425140380859375) * _2001) * _2002) + _1867;
    }
    bool _1982 = _1871.y == 0u;
    float _2037;
    float _2039;
    float _2041;
    if (_1982)
    {
        _2037 = _1975;
        _2039 = _1977;
        _2041 = _1979;
    }
    else
    {
        uint _2199 = _1796 + 7u;
        float _2215 = (dot(vec3(cbLight._m0[_1796 + 3u].xyz), vec3(_291, _292, _293)) * 0.5) + 0.5;
        float _2216 = _2215 * _2215;
        float _4108 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2217 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _2218 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _2037 = (((cbLight._m0[_2199].x * 0.3183098733425140380859375) * _2217) * _2218) + _1975;
        _2039 = (((cbLight._m0[_2199].y * 0.3183098733425140380859375) * _2217) * _2218) + _1977;
        _2041 = (((cbLight._m0[_2199].z * 0.3183098733425140380859375) * _2217) * _2218) + _1979;
    }
    uint _2044 = _1796 + 8u;
    float _2057 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1796].w)) * _295) * 0.949999988079071044921875);
    float _2058 = _2057 * _2057;
    float _2059 = cbLight._m0[_1796].x + _373;
    float _2060 = cbLight._m0[_1796].y + _374;
    float _2061 = cbLight._m0[_1796].z + _375;
    float _2065 = inversesqrt(dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061)));
    float _2066 = _2065 * _2059;
    float _2067 = _2065 * _2060;
    float _2068 = _2065 * _2061;
    float _2069 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1796].xyz));
    float _4124 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2072 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _4135 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _2073 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _2074 = dot(vec3(_291, _292, _293), vec3(_2066, _2067, _2068));
    float _4146 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2077 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _2078 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_2066, _2067, _2068));
    float _4157 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2082 = _2058 * _2058;
    float _2086 = ((_2077 * _2077) * (_2082 + (-1.0))) + 1.0;
    float _2097 = (exp2(log2(1.0 - (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2098 = 1.0 - _2058;
    float _2109 = (0.5 / (((_2073 * ((_2072 * _2098) + _2058)) + 9.9999999392252902907785028219223e-09) + (((_2073 * _2098) + _2058) * _2072))) * _2072;
    float _4168 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2111 = (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_2082 / ((_2086 * _2086) * 3.141590118408203125));
    uint _2125 = _1796 + 9u;
    float _2136 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1837].w)) * _295) * 0.949999988079071044921875);
    float _2137 = _2136 * _2136;
    float _2138 = cbLight._m0[_1837].x + _373;
    float _2139 = cbLight._m0[_1837].y + _374;
    float _2140 = cbLight._m0[_1837].z + _375;
    float _2144 = inversesqrt(dot(vec3(_2138, _2139, _2140), vec3(_2138, _2139, _2140)));
    float _2145 = _2144 * _2138;
    float _2146 = _2144 * _2139;
    float _2147 = _2144 * _2140;
    float _2148 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1837].xyz));
    float _4179 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2151 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _2152 = dot(vec3(_291, _292, _293), vec3(_2145, _2146, _2147));
    float _4190 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2155 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _2156 = dot(vec3(cbLight._m0[_1837].xyz), vec3(_2145, _2146, _2147));
    float _4201 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2160 = _2137 * _2137;
    float _2164 = ((_2155 * _2155) * (_2160 + (-1.0))) + 1.0;
    float _2173 = (exp2(log2(1.0 - (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2174 = 1.0 - _2137;
    float _2184 = (0.5 / (((_2073 * ((_2151 * _2174) + _2137)) + 9.9999999392252902907785028219223e-09) + (((_2073 * _2174) + _2137) * _2151))) * _2151;
    float _4212 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2186 = (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2160 / ((_2164 * _2164) * 3.141590118408203125));
    float _2196 = (((_2173 * cbLight._m0[_2125].x) * _2186) * _1819) + ((((cbLight._m0[_2044].x * _1785) * _2097) * _2111) * _1833);
    float _2197 = (((_2173 * cbLight._m0[_2125].y) * _2186) * _1819) + ((((cbLight._m0[_2044].y * _1787) * _2097) * _2111) * _1833);
    float _2198 = (((_2173 * cbLight._m0[_2125].z) * _2186) * _1819) + ((((cbLight._m0[_2044].z * _1789) * _2097) * _2111) * _1833);
    float _2254;
    float _2256;
    float _2258;
    if (_1873)
    {
        _2254 = _2196;
        _2256 = _2197;
        _2258 = _2198;
    }
    else
    {
        uint _2260 = _1796 + 2u;
        uint _2264 = _1796 + 10u;
        float _2278 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2260].w)) * _295) * 0.949999988079071044921875);
        float _2279 = _2278 * _2278;
        float _2280 = cbLight._m0[_2260].x + _373;
        float _2281 = cbLight._m0[_2260].y + _374;
        float _2282 = cbLight._m0[_2260].z + _375;
        float _2286 = inversesqrt(dot(vec3(_2280, _2281, _2282), vec3(_2280, _2281, _2282)));
        float _2287 = _2286 * _2280;
        float _2288 = _2286 * _2281;
        float _2289 = _2286 * _2282;
        float _2290 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_2260].xyz));
        float _4223 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2293 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _2294 = dot(vec3(_291, _292, _293), vec3(_2287, _2288, _2289));
        float _4234 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2297 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2298 = dot(vec3(cbLight._m0[_2260].xyz), vec3(_2287, _2288, _2289));
        float _4245 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2302 = _2279 * _2279;
        float _2306 = ((_2297 * _2297) * (_2302 + (-1.0))) + 1.0;
        float _2315 = (exp2(log2(1.0 - (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2316 = 1.0 - _2279;
        float _2326 = (0.5 / (((_2073 * ((_2293 * _2316) + _2279)) + 9.9999999392252902907785028219223e-09) + (((_2073 * _2316) + _2279) * _2293))) * _2293;
        float _4256 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2328 = (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_2302 / ((_2306 * _2306) * 3.141590118408203125));
        float _2329 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
        _2254 = (((_2315 * cbLight._m0[_2264].x) * _2328) * _2329) + _2196;
        _2256 = (((_2315 * cbLight._m0[_2264].y) * _2328) * _2329) + _2197;
        _2258 = (((_2315 * cbLight._m0[_2264].z) * _2328) * _2329) + _2198;
    }
    float _2360;
    float _2362;
    float _2364;
    if (_1982)
    {
        _2360 = _2254;
        _2362 = _2256;
        _2364 = _2258;
    }
    else
    {
        uint _2371 = _1796 + 3u;
        uint _2375 = _1796 + 11u;
        float _2389 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2371].w)) * _295) * 0.949999988079071044921875);
        float _2390 = _2389 * _2389;
        float _2391 = cbLight._m0[_2371].x + _373;
        float _2392 = cbLight._m0[_2371].y + _374;
        float _2393 = cbLight._m0[_2371].z + _375;
        float _2397 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
        float _2398 = _2397 * _2391;
        float _2399 = _2397 * _2392;
        float _2400 = _2397 * _2393;
        float _2401 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_2371].xyz));
        float _4272 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2404 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2405 = dot(vec3(_291, _292, _293), vec3(_2398, _2399, _2400));
        float _4283 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2408 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _2409 = dot(vec3(cbLight._m0[_2371].xyz), vec3(_2398, _2399, _2400));
        float _4294 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2413 = _2390 * _2390;
        float _2417 = ((_2408 * _2408) * (_2413 + (-1.0))) + 1.0;
        float _2426 = (exp2(log2(1.0 - (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2427 = 1.0 - _2390;
        float _2437 = (0.5 / (((_2073 * ((_2404 * _2427) + _2390)) + 9.9999999392252902907785028219223e-09) + (((_2073 * _2427) + _2390) * _2404))) * _2404;
        float _4305 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2439 = (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2413 / ((_2417 * _2417) * 3.141590118408203125));
        float _2440 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _2360 = (((_2426 * cbLight._m0[_2375].x) * _2439) * _2440) + _2254;
        _2362 = (((_2426 * cbLight._m0[_2375].y) * _2439) * _2440) + _2256;
        _2364 = (((_2426 * cbLight._m0[_2375].z) * _2439) * _2440) + _2258;
    }
    float _2505;
    float _2507;
    float _2509;
    float _2511;
    float _2513;
    float _2515;
    if (_1794.y == 0u)
    {
        uvec4 _2461 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2462 = _2461.x;
        uint _2473 = uint((float(_2461.y) * floor(float(uint(cbSceneParam._m0[85u].y * _395) / _2462))) + floor(float(uint(cbSceneParam._m0[85u].x * _394) / _2462)));
        float _2483 = (log2(_1572 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2484 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        uint _2487 = uint(isnan(14.0) ? _2484 : (isnan(_2484) ? 14.0 : min(_2484, 14.0)));
        uvec4 _2492 = texelFetch(g_lightClusterGridBuffer, int(((_2487 << 2u) + (_2473 << 6u)) >> 2u));
        uint _2493 = _2492.x;
        uint _2494 = _2461.z;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        if (((((1u << ((_2494 >> 4u) & 15u)) + 4294967295u) & _2493) == 0u) || ((_2494 & 240u) == 0u))
        {
            _2574 = 0.0;
            _2576 = 0.0;
            _2578 = 0.0;
            _2580 = 0.0;
            _2582 = 0.0;
            _2584 = 0.0;
        }
        else
        {
            float _2575;
            float _2577;
            float _2579;
            float _2581;
            float _2583;
            float _2585;
            float _2726 = 0.0;
            float _2727 = 0.0;
            float _2728 = 0.0;
            float _2729 = 0.0;
            float _2730 = 0.0;
            float _2731 = 0.0;
            uint _2732 = 0u;
            uint _2741;
            bool _2742;
            for (;;)
            {
                _2741 = texelFetch(g_lightClassification, int((((_2487 << 5u) + (_2473 << 9u)) + (_2732 << 2u)) >> 2u)).x;
                _2742 = _2741 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2742)
                {
                    frontier_phi_73_pred = _2731;
                    frontier_phi_73_pred_1 = _2730;
                    frontier_phi_73_pred_2 = _2729;
                    frontier_phi_73_pred_3 = _2728;
                    frontier_phi_73_pred_4 = _2727;
                    frontier_phi_73_pred_5 = _2726;
                }
                else
                {
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    uint _2877;
                    _2871 = _2726;
                    _2872 = _2727;
                    _2873 = _2728;
                    _2874 = _2729;
                    _2875 = _2730;
                    _2876 = _2731;
                    _2877 = _2741;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    for (;;)
                    {
                        uint _2881 = uint(findLSB(_2877)) + (_2732 << 5u);
                        uint _2878 = (_2877 + 4294967295u) & _2877;
                        uint _2883 = _2881 * 48u;
                        vec4 _2897 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2883)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 3u)).x));
                        uint _2903 = (_2881 * 48u) + 4u;
                        vec4 _2916 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2903)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 3u)).x));
                        uint _2922 = (_2881 * 48u) + 8u;
                        vec3 _2933 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2922)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 2u)).x));
                        float _2937 = _2897.x - _1570;
                        float _2938 = _2897.y - _1571;
                        float _2939 = _2897.z - _1572;
                        float _2940 = dot(vec3(_2937, _2938, _2939), vec3(_2937, _2938, _2939));
                        float _2943 = inversesqrt(_2940);
                        float _2944 = _2943 * _2937;
                        float _2945 = _2943 * _2938;
                        float _2946 = _2943 * _2939;
                        float _2947 = dot(vec3(_415, _418, _421), vec3(_2944, _2945, _2946));
                        float _2952 = 1.0 - (_2940 * _2897.w);
                        float _4331 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                        float _2953 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                        float _2954 = sqrt(_2940) * _2916.w;
                        float _2957 = 1.39999997615814208984375 / (_2954 + 1.39999997615814208984375);
                        float _2958 = _2957 * _2957;
                        float _2961 = ((1.0 - _2958) * _2947) + _2958;
                        float _2964 = _2954 * _2954;
                        float _2968 = ((isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0))) * _2953) / ((_2964 * 0.699999988079071044921875) + 1.0);
                        float _2972 = (-0.0) - _1570;
                        float _2973 = (-0.0) - _1571;
                        float _2974 = (-0.0) - _1572;
                        float _2978 = inversesqrt(dot(vec3(_2972, _2973, _2974), vec3(_2972, _2973, _2974)));
                        float _2979 = _2978 * _2972;
                        float _2980 = _2978 * _2973;
                        float _2981 = _2978 * _2974;
                        float _2988 = exp2(log2(1.0 / ((_2964 * 3.5) + 5.0)) * 0.25);
                        float _2989 = 1.0 - _476;
                        float _2996 = sqrt(1.0 - ((1.0 - (_2989 * _2989)) * (1.0 - (_2988 * _2988))));
                        float _2997 = _2996 * _2996;
                        float _2998 = _2997 * _2997;
                        float _2999 = _2979 + _2944;
                        float _3000 = _2980 + _2945;
                        float _3001 = _2981 + _2946;
                        float _3005 = inversesqrt(dot(vec3(_2999, _3000, _3001), vec3(_2999, _3000, _3001)));
                        float _3009 = dot(vec3(_415, _418, _421), vec3(_2979, _2980, _2981));
                        float _4347 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3012 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                        float _3013 = dot(vec3(_415, _418, _421), vec3(_3005 * _2999, _3005 * _3000, _3005 * _3001));
                        float _4358 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3016 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                        float _3020 = ((_3016 * _3016) * (_2998 + (-1.0))) + 1.0;
                        float _3021 = _2957 * _2997;
                        float _3022 = _3021 * _3021;
                        float _3025 = ((1.0 - _3022) * _2947) + _3022;
                        float _4369 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3026 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                        float _3027 = 1.0 - _2997;
                        float _3037 = (0.5 / (((_3026 * ((_3012 * _3027) + _2997)) + 9.9999999392252902907785028219223e-09) + (((_3026 * _3027) + _2997) * _3012))) * _3026;
                        float _4380 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                        float _3048 = (((_2998 * 3.1415927410125732421875) * (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0)))) / ((_3020 * _3020) * ((_2964 * 2.1991131305694580078125) + 3.141590118408203125))) * _2953;
                        _2801 = (_2968 * _2916.x) + _2874;
                        _2802 = (_2968 * _2916.y) + _2875;
                        _2803 = (_2968 * _2916.z) + _2876;
                        _2798 = (_3048 * _2933.x) + _2871;
                        _2799 = (_3048 * _2933.y) + _2872;
                        _2800 = (_3048 * _2933.z) + _2873;
                        if (_2878 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2871 = _2798;
                            _2872 = _2799;
                            _2873 = _2800;
                            _2874 = _2801;
                            _2875 = _2802;
                            _2876 = _2803;
                            _2877 = _2878;
                        }
                    }
                    frontier_phi_73_pred = _2803;
                    frontier_phi_73_pred_1 = _2802;
                    frontier_phi_73_pred_2 = _2801;
                    frontier_phi_73_pred_3 = _2800;
                    frontier_phi_73_pred_4 = _2799;
                    frontier_phi_73_pred_5 = _2798;
                }
                _2585 = frontier_phi_73_pred;
                _2583 = frontier_phi_73_pred_1;
                _2581 = frontier_phi_73_pred_2;
                _2579 = frontier_phi_73_pred_3;
                _2577 = frontier_phi_73_pred_4;
                _2575 = frontier_phi_73_pred_5;
                uint _2733 = _2732 + 1u;
                if (_2733 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2726 = _2575;
                    _2727 = _2577;
                    _2728 = _2579;
                    _2729 = _2581;
                    _2730 = _2583;
                    _2731 = _2585;
                    _2732 = _2733;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2574 = _2575;
            _2576 = _2577;
            _2578 = _2579;
            _2580 = _2581;
            _2582 = _2583;
            _2584 = _2585;
        }
        uvec4 _2588 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2589 = _2588.z;
        uint _2591 = (_2589 >> 8u) & 15u;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        float _2704;
        if (((4294967295u << _2591) & _2493) == 0u)
        {
            _2694 = _2574;
            _2696 = _2576;
            _2698 = _2578;
            _2700 = _2580;
            _2702 = _2582;
            _2704 = _2584;
        }
        else
        {
            float _2719 = inversesqrt(dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572)));
            float _2720 = _2719 * _1570;
            float _2721 = _2719 * _1571;
            float _2722 = _2719 * _1572;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2591 < ((_2589 >> 12u) & 15u))
            {
                float _2695;
                float _2697;
                float _2699;
                float _2701;
                float _2703;
                float _2705;
                float _2854 = _2574;
                float _2855 = _2576;
                float _2856 = _2578;
                float _2857 = _2580;
                float _2858 = _2582;
                float _2859 = _2584;
                uint _2860 = _2591;
                uint _2869;
                bool _2870;
                for (;;)
                {
                    _2869 = texelFetch(g_lightClassification, int((((_2487 << 5u) + (_2473 << 9u)) + (_2860 << 2u)) >> 2u)).x;
                    _2870 = _2869 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2870)
                    {
                        frontier_phi_84_pred = _2858;
                        frontier_phi_84_pred_1 = _2857;
                        frontier_phi_84_pred_2 = _2856;
                        frontier_phi_84_pred_3 = _2855;
                        frontier_phi_84_pred_4 = _2854;
                        frontier_phi_84_pred_5 = _2859;
                    }
                    else
                    {
                        float _3062;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3075 = _2854;
                        float _3076 = _2855;
                        float _3077 = _2856;
                        float _3078 = _2857;
                        float _3079 = _2858;
                        float _3080 = _2859;
                        uint _3081 = _2869;
                        uint _3082;
                        vec4 _3107;
                        float _3108;
                        vec4 _3123;
                        vec3 _3135;
                        vec4 _3151;
                        vec4 _3167;
                        float _3214;
                        bool _3215;
                        for (;;)
                        {
                            uint _3092 = ((_2860 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3081));
                            _3082 = (_3081 + 4294967295u) & _3081;
                            uint _3094 = _3092 * 40u;
                            _3107 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 3u)).x));
                            _3108 = _3107.w;
                            uint _3110 = (_3092 * 40u) + 4u;
                            _3123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 3u)).x));
                            uint _3125 = (_3092 * 40u) + 8u;
                            _3135 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x));
                            uint _3138 = (_3092 * 40u) + 16u;
                            _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            uint _3154 = (_3092 * 40u) + 20u;
                            _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            uint _3170 = (_3092 * 40u) + 24u;
                            vec4 _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            uint _3189 = (_3092 * 40u) + 28u;
                            vec4 _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            _3214 = fma(_1572, _3202.z, fma(_1571, _3202.y, _3202.x * _1570)) + _3202.w;
                            _3215 = !((fma(_1572, _3183.z, fma(_1571, _3183.y, _3183.x * _1570)) + _3183.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3215)
                            {
                                float _3242 = _3107.x - _1570;
                                float _3243 = _3107.y - _1571;
                                float _3244 = _3107.z - _1572;
                                float _3245 = dot(vec3(_3242, _3243, _3244), vec3(_3242, _3243, _3244));
                                float _3248 = inversesqrt(_3245);
                                float _3249 = _3248 * _3242;
                                float _3250 = _3248 * _3243;
                                float _3251 = _3248 * _3244;
                                float _3255 = 1.0 - (_3245 / (_3108 * _3108));
                                float _4391 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                                float _3256 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3260 = sqrt(_3245) * _3123.w;
                                float _3262 = 1.39999997615814208984375 / (_3260 + 1.39999997615814208984375);
                                float _3263 = _3262 * _3262;
                                float _3266 = ((1.0 - _3263) * dot(vec3(_3249, _3250, _3251), vec3(_415, _418, _421))) + _3263;
                                float _3269 = _3260 * _3260;
                                float _3273 = (fma(_1572, _3151.z, fma(_1571, _3151.y, _3151.x * _1570)) + _3151.w) / _3214;
                                float _3274 = (fma(_1572, _3167.z, fma(_1571, _3167.y, _3167.x * _1570)) + _3167.w) / _3214;
                                float _3278 = 1.0 - dot(vec2(_3273, _3274), vec2(_3273, _3274));
                                float _4407 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3279 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                                float _3280 = _3279 * (((isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0))) * _3256) / ((_3269 * 0.699999988079071044921875) + 1.0));
                                float _3292 = exp2(log2(1.0 / ((_3269 * 3.5) + 5.0)) * 0.25);
                                float _3293 = 1.0 - _476;
                                float _3300 = sqrt(1.0 - ((1.0 - (_3293 * _3293)) * (1.0 - (_3292 * _3292))));
                                float _3301 = _3300 * _3300;
                                float _3302 = _3301 * _3301;
                                float _3303 = _3249 - _2720;
                                float _3304 = _3250 - _2721;
                                float _3305 = _3251 - _2722;
                                float _3309 = inversesqrt(dot(vec3(_3303, _3304, _3305), vec3(_3303, _3304, _3305)));
                                float _3313 = dot(vec3(_415, _418, _421), vec3((-0.0) - _2720, (-0.0) - _2721, (-0.0) - _2722));
                                float _4418 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3316 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                                float _3317 = dot(vec3(_415, _418, _421), vec3(_3309 * _3303, _3309 * _3304, _3309 * _3305));
                                float _4429 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3320 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                                float _3324 = ((_3320 * _3320) * (_3302 + (-1.0))) + 1.0;
                                float _3325 = _3262 * _3301;
                                float _3326 = _3325 * _3325;
                                float _3332 = ((1.0 - _3326) * dot(vec3(_415, _418, _421), vec3(_3249, _3250, _3251))) + _3326;
                                float _4440 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3333 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                                float _3334 = 1.0 - _3301;
                                float _3344 = (0.5 / (((_3333 * ((_3316 * _3334) + _3301)) + 9.9999999392252902907785028219223e-09) + (((_3333 * _3334) + _3301) * _3316))) * _3333;
                                float _4451 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3354 = (_3279 * _3256) * (((_3302 * 3.1415927410125732421875) * (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0)))) / ((_3324 * _3324) * ((_3269 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3280 * _3123.y;
                                frontier_phi_90_pred_1 = _3280 * _3123.x;
                                frontier_phi_90_pred_2 = _3354 * _3135.z;
                                frontier_phi_90_pred_3 = _3354 * _3135.y;
                                frontier_phi_90_pred_4 = _3354 * _3135.x;
                                frontier_phi_90_pred_5 = _3280 * _3123.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3362 = frontier_phi_90_pred;
                            _3361 = frontier_phi_90_pred_1;
                            _3360 = frontier_phi_90_pred_2;
                            _3359 = frontier_phi_90_pred_3;
                            _3358 = frontier_phi_90_pred_4;
                            _3363 = frontier_phi_90_pred_5;
                            _3065 = _3361 + _3078;
                            _3066 = _3362 + _3079;
                            _3067 = _3363 + _3080;
                            _3062 = _3358 + _3075;
                            _3063 = _3359 + _3076;
                            _3064 = _3360 + _3077;
                            if (_3082 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3075 = _3062;
                                _3076 = _3063;
                                _3077 = _3064;
                                _3078 = _3065;
                                _3079 = _3066;
                                _3080 = _3067;
                                _3081 = _3082;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3066;
                        frontier_phi_84_pred_1 = _3065;
                        frontier_phi_84_pred_2 = _3064;
                        frontier_phi_84_pred_3 = _3063;
                        frontier_phi_84_pred_4 = _3062;
                        frontier_phi_84_pred_5 = _3067;
                    }
                    _2703 = frontier_phi_84_pred;
                    _2701 = frontier_phi_84_pred_1;
                    _2699 = frontier_phi_84_pred_2;
                    _2697 = frontier_phi_84_pred_3;
                    _2695 = frontier_phi_84_pred_4;
                    _2705 = frontier_phi_84_pred_5;
                    uint _2861 = _2860 + 1u;
                    if (_2861 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2854 = _2695;
                        _2855 = _2697;
                        _2856 = _2699;
                        _2857 = _2701;
                        _2858 = _2703;
                        _2859 = _2705;
                        _2860 = _2861;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2705;
                frontier_phi_65_66_ladder_1 = _2701;
                frontier_phi_65_66_ladder_2 = _2703;
                frontier_phi_65_66_ladder_3 = _2697;
                frontier_phi_65_66_ladder_4 = _2695;
                frontier_phi_65_66_ladder_5 = _2699;
            }
            else
            {
                frontier_phi_65_66_ladder = _2584;
                frontier_phi_65_66_ladder_1 = _2580;
                frontier_phi_65_66_ladder_2 = _2582;
                frontier_phi_65_66_ladder_3 = _2576;
                frontier_phi_65_66_ladder_4 = _2574;
                frontier_phi_65_66_ladder_5 = _2578;
            }
            _2694 = frontier_phi_65_66_ladder_4;
            _2696 = frontier_phi_65_66_ladder_3;
            _2698 = frontier_phi_65_66_ladder_5;
            _2700 = frontier_phi_65_66_ladder_1;
            _2702 = frontier_phi_65_66_ladder_2;
            _2704 = frontier_phi_65_66_ladder;
        }
        float _2709 = isnan(1.0) ? _460 : (isnan(_460) ? 1.0 : min(_460, 1.0));
        _2505 = (_2709 * _2700) + _2037;
        _2507 = (_2709 * _2702) + _2039;
        _2509 = (_2709 * _2704) + _2041;
        _2511 = ((_2694 * 0.039999999105930328369140625) * _2709) + _2360;
        _2513 = ((_2696 * 0.039999999105930328369140625) * _2709) + _2362;
        _2515 = ((_2698 * 0.039999999105930328369140625) * _2709) + _2364;
    }
    else
    {
        _2505 = _2037;
        _2507 = _2039;
        _2509 = _2041;
        _2511 = _2360;
        _2513 = _2362;
        _2515 = _2364;
    }
    float _4467 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _4478 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _4489 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _4500 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _2533 = ((isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2505 + ((isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0))) * _460))) + ((_2511 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _1299)) * cbPerFrame._m0[3u].x);
    float _2534 = ((isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2507 + ((isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0))) * _460))) + ((_2513 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _1299)) * cbPerFrame._m0[3u].x);
    float _2535 = ((isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2509 + ((isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0))) * _460))) + ((_2515 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _1299)) * cbPerFrame._m0[3u].x);
    float _2540 = cbInstanceData._m0[_434 + 6u].w * (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)));
    float _2545 = _394 / cbSceneParam._m0[86u].x;
    float _2546 = _395 / cbSceneParam._m0[86u].y;
    vec4 _2560 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2545, _2546, (log2((isnan(cbSceneParam._m0[77u].w) ? _314 : (isnan(_314) ? cbSceneParam._m0[77u].w : min(_314, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2562 = _2560.x;
    float _2563 = _2560.y;
    float _2564 = _2560.z;
    float _2565 = _2560.w;
    float _2636;
    float _2638;
    float _2640;
    float _2642;
    if (_314 > cbSceneParam._m0[78u].w)
    {
        float _2599 = isnan(_314) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _314 : min(cbSceneParam._m0[80u].w, _314));
        float _2600 = _2599 / _314;
        float _2611 = _2600 * _366;
        float _2612 = _367 * _2600;
        float _2613 = (-0.0) - _2612;
        float _2614 = _2600 * _368;
        float _2616 = (cbSceneParam._m0[77u].w * _2613) / _2599;
        float _2617 = _2616 + cbSceneParam._m0[79u].w;
        float _2618 = cbSceneParam._m0[79u].w - _2612;
        float _2624 = sqrt(((_2611 * _2611) + (_2612 * _2612)) + (_2614 * _2614));
        float _2627 = (1.0 - (cbSceneParam._m0[77u].w / _2599)) * _2624;
        float _2632 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2634 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2811;
        if (abs((_2613 - _2616) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2811 = ((((_2617 > 0.0) ? exp2(_2632 * _2617) : (2.0 - exp2(_2634 * _2617))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2627;
        }
        else
        {
            float _2755 = 1.0 / cbSceneParam._m0[80u].x;
            float _2756 = isnan(_2618) ? _2617 : (isnan(_2617) ? _2618 : max(_2617, _2618));
            float _2757 = isnan(_2618) ? _2617 : (isnan(_2617) ? _2618 : min(_2617, _2618));
            float _2766 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : min(_2756, 0.0));
            float _2767 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : min(_2757, 0.0));
            _2811 = ((abs(_2624 / _2613) * cbSceneParam._m0[80u].y) * ((((_2766 - _2767) * 2.0) - ((exp2(_2632 * (isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0)))) - exp2(_2632 * (isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0))))) * _2755)) - ((exp2(_2634 * _2766) - exp2(_2634 * _2767)) * _2755))) + (_2627 * cbSceneParam._m0[80u].z);
        }
        vec4 _2813 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2545, _2546, 1.0), 0.0);
        float _2822 = exp2((_2811 * (-1.44269502162933349609375)) * (1.0 - _2813.w));
        float _2823 = log2(_2822);
        float _2839 = log2(_2565);
        _2636 = (exp2(_2839 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2823 * cbSceneParam._m0[78u].x)) * _2813.x) / cbSceneParam._m0[78u].x)) + _2562;
        _2638 = (exp2(_2839 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2823 * cbSceneParam._m0[78u].y)) * _2813.y) / cbSceneParam._m0[78u].y)) + _2563;
        _2640 = (exp2(_2839 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2823 * cbSceneParam._m0[78u].z)) * _2813.z) / cbSceneParam._m0[78u].z)) + _2564;
        _2642 = _2822 * _2565;
    }
    else
    {
        _2636 = _2562;
        _2638 = _2563;
        _2640 = _2564;
        _2642 = _2565;
    }
    bool _2849;
    vec4 _2652;
    vec4 _2674;
    float _2676;
    float _2680;
    float _2681;
    float _2682;
    float _2683;
    bool _2693;
    for (;;)
    {
        _2652 = cbMatDynParam._m0[0u];
        float _2654 = roundEven(_2652.y);
        bool _2655 = _2654 == 3.0;
        float _2656 = log2(_2642);
        float _2663 = exp2(_2656 * cbSceneParam._m0[78u].x) * _2533;
        float _2664 = exp2(_2656 * cbSceneParam._m0[78u].y) * _2534;
        float _2665 = exp2(_2656 * cbSceneParam._m0[78u].z) * _2535;
        float _2672 = _382 + (-0.5);
        _2674 = cbMtdParam._m0[1u];
        _2676 = _2674.y * _2672;
        float _2679 = (_2654 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2680 = _2679 * (_2655 ? _2663 : (_2663 + (cbSceneParam._m0[72u].w * _2636)));
        _2681 = _2679 * (_2655 ? _2664 : (_2664 + (cbSceneParam._m0[72u].w * _2638)));
        _2682 = _2679 * (_2655 ? _2665 : (_2665 + (cbSceneParam._m0[72u].w * _2640)));
        _2683 = _2672 * 0.999000012874603271484375;
        _2693 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2693)
        {
            if ((cbInstanceData._m0[_434 + 7u].x + _2683) < 0.5)
            {
                _2849 = true;
                break;
            }
        }
        uint _2790 = _436 + uint(_2652.w);
        if ((cbInstanceData._m0[_2790].w < 1.0) && ((cbInstanceData._m0[_2790].w + _2683) < 0.5))
        {
            _2849 = true;
            break;
        }
        if ((_2676 + _244) < _2674.x)
        {
            _2849 = true;
            break;
        }
        _2849 = false;
        break;
    }
    float _3053;
    if (_2849)
    {
        discard_state = true;
        _3053 = 0.0;
    }
    else
    {
        _3053 = _2540;
    }
    SV_Target.x = _2680;
    SV_Target.y = _2681;
    SV_Target.z = _2682;
    SV_Target.w = _3053;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2540;
    discard_exit();
}


