#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _816;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    vec4 _234 = texture(sampler2D(M_AMSN_M0_M1_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _234.x * cbMtdParam._m0[9u].x;
    float _242 = _234.y * cbMtdParam._m0[9u].y;
    float _243 = _234.z * cbMtdParam._m0[9u].z;
    float _244 = _234.w * TEXCOORD_1.z;
    vec4 _256 = texture(sampler2D(M_AMSN_M0_M1_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _260 = _256.z;
    float _264 = (_256.x * 2.0) + (-1.0);
    float _266 = (_256.y * 2.0) + (-1.0);
    float _267 = dot(vec2(_264, _266), vec2(_264, _266));
    float _3417 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _273 = sqrt(1.0 - (isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))));
    float _276 = fma(_273, _212, fma(_266, _204 * TANGENT.x, (_190 * _182) * _264));
    float _279 = fma(_273, _213, fma(_266, _204 * TANGENT.y, (_190 * _183) * _264));
    float _282 = fma(_273, _214, fma(_266, _204 * TANGENT.z, (_190 * _184) * _264));
    float _286 = inversesqrt(dot(vec3(_276, _279, _282), vec3(_276, _279, _282)));
    float _287 = _286 * _276;
    float _288 = _286 * _279;
    float _289 = _286 * _282;
    float _3428 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _290 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
    float _3439 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _291 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
    float _3450 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3461 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3472 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _310 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _352 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _362 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _352);
    float _363 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _352);
    float _364 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _352);
    float _368 = inversesqrt(dot(vec3(_362, _363, _364), vec3(_362, _363, _364)));
    float _369 = _362 * _368;
    float _370 = _363 * _368;
    float _371 = _364 * _368;
    float _377 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _378 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _399 = fma(_289, cbSceneParam._m0[5u].z, fma(_288, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _287));
    float _402 = fma(_289, cbSceneParam._m0[6u].z, fma(_288, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _287));
    float _405 = fma(_289, cbSceneParam._m0[7u].z, fma(_288, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _287));
    uint _418 = uint(roundEven(NORMAL.w)) * 13u;
    uint _421 = (_418 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _427 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0)))) * cbInstanceData._m0[_421].x;
    float _428 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0)))) * cbInstanceData._m0[_421].y;
    float _429 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0)))) * cbInstanceData._m0[_421].z;
    float _3483 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _430 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
    float _3494 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _431 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
    float _3505 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _432 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
    vec4 _441 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _377, cbSceneParam._m0[86u].y * _378));
    float _444 = _441.x * TEXCOORD_1.w;
    float _445 = dot(vec3(_287, _288, _289), vec3(_369, _370, _371));
    float _448 = _445 * 2.0;
    float _452 = (_448 * _287) - _369;
    float _453 = (_448 * _288) - _370;
    float _454 = (_448 * _289) - _371;
    float _458 = abs(dot(vec3(_369, _370, _371), vec3(_287, _288, _289)));
    float _3516 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _460 = sqrt(_291);
    float _473 = exp2((_460 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_460 * 3.0));
    float _505 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _509 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _513 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _815;
    float _817;
    float _818;
    float _819;
    float _820;
    float _821;
    float _822;
    float _823;
    float _824;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _540 = fma(_513, cbModelParam._m0[26u].z, fma(_509, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _505));
        float _544 = fma(_513, cbModelParam._m0[27u].z, fma(_509, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _505));
        float _548 = fma(_513, cbModelParam._m0[28u].z, fma(_509, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _505));
        float _573 = _505 + _287;
        float _574 = _509 + _288;
        float _575 = _513 + _289;
        float _585 = fma(_575, cbModelParam._m0[26u].z, fma(_574, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _573)) - _540;
        float _586 = fma(_575, cbModelParam._m0[27u].z, fma(_574, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _573)) - _544;
        float _587 = fma(_575, cbModelParam._m0[28u].z, fma(_574, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _573)) - _548;
        float _591 = inversesqrt(dot(vec3(_585, _586, _587), vec3(_585, _586, _587)));
        float _604 = ((_591 * _585) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_540 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _605 = ((_591 * _586) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_544 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _606 = ((_591 * _587) / cbModelParam._m0[34u].z) + ((((((_548 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _609 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_604, _605, _606), 0.0);
        vec4 _616 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_604, _605, _606), 0.0);
        vec4 _623 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_604, _605, _606), 0.0);
        vec4 _630 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_604, _605, _606), 0.0);
        float _643 = exp2((_609.w + (-0.5)) * 20.0) * 2.0;
        float _644 = _643 * (_609.x + (-0.5));
        float _645 = _643 * (_609.y + (-0.5));
        float _646 = _643 * (_609.z + (-0.5));
        float _653 = exp2((_616.w + (-0.5)) * 20.0) * 2.0;
        float _654 = _653 * (_616.x + (-0.5));
        float _655 = _653 * (_616.y + (-0.5));
        float _656 = _653 * (_616.z + (-0.5));
        float _663 = exp2((_623.w + (-0.5)) * 20.0) * 2.0;
        float _664 = _663 * (_623.x + (-0.5));
        float _665 = _663 * (_623.y + (-0.5));
        float _666 = _663 * (_623.z + (-0.5));
        float _673 = exp2((_630.w + (-0.5)) * 20.0) * 2.0;
        float _674 = _673 * (_630.x + (-0.5));
        float _675 = _673 * (_630.y + (-0.5));
        float _676 = _673 * (_630.z + (-0.5));
        float _677 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        float _678 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
        float _679 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
        float _680 = _644 * 0.5;
        float _681 = _654 * 0.5;
        float _682 = _664 * 0.5;
        float _683 = dot(vec3(_680, _681, _682), vec3(_680, _681, _682));
        float _688 = (_683 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_683);
        float _697 = (dot(vec3(_287, _288, _289), vec3(_688 * _680, _688 * _681, _688 * _682)) + 1.0) * 0.5;
        float _3542 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
        float _707 = sqrt(((_681 * _681) + (_680 * _680)) + (_682 * _682)) / (_677 + 9.9999997473787516355514526367188e-06);
        float _3553 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _708 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _709 = _708 * 2.0;
        float _713 = (1.0 - _708) / (_708 + 1.0);
        float _3564 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _714 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _723 = ((((1.0 - _714) * (_709 + 2.0)) * exp2(log2(isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * (_709 + 1.0))) + _714) * _677;
        float _724 = _645 * 0.5;
        float _725 = _655 * 0.5;
        float _726 = _665 * 0.5;
        float _727 = dot(vec3(_724, _725, _726), vec3(_724, _725, _726));
        float _732 = (_727 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_727);
        float _740 = (dot(vec3(_287, _288, _289), vec3(_732 * _724, _732 * _725, _732 * _726)) + 1.0) * 0.5;
        float _3575 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _749 = sqrt(((_725 * _725) + (_724 * _724)) + (_726 * _726)) / (_678 + 9.9999997473787516355514526367188e-06);
        float _3586 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _750 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _751 = _750 * 2.0;
        float _755 = (1.0 - _750) / (_750 + 1.0);
        float _3597 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _756 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _765 = ((((1.0 - _756) * (_751 + 2.0)) * exp2(log2(isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * (_751 + 1.0))) + _756) * _678;
        float _766 = _646 * 0.5;
        float _767 = _656 * 0.5;
        float _768 = _666 * 0.5;
        float _769 = dot(vec3(_766, _767, _768), vec3(_766, _767, _768));
        float _774 = (_769 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_769);
        float _782 = (dot(vec3(_287, _288, _289), vec3(_774 * _766, _774 * _767, _774 * _768)) + 1.0) * 0.5;
        float _3608 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _791 = sqrt(((_767 * _767) + (_766 * _766)) + (_768 * _768)) / (_679 + 9.9999997473787516355514526367188e-06);
        float _3619 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _793 = _792 * 2.0;
        float _797 = (1.0 - _792) / (_792 + 1.0);
        float _3630 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _807 = ((((1.0 - _798) * (_793 + 2.0)) * exp2(log2(isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * (_793 + 1.0))) + _798) * _679;
        _815 = _646;
        _817 = _645;
        _818 = _644;
        _819 = _656;
        _820 = _655;
        _821 = _654;
        _822 = _666;
        _823 = _665;
        _824 = _664;
        _825 = _679;
        _826 = _678;
        _827 = _677;
        _828 = cbModelParam._m0[36u].z * (isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0)));
        _829 = cbModelParam._m0[36u].z * (isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0)));
        _830 = cbModelParam._m0[36u].z * (isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0)));
    }
    else
    {
        _815 = _816;
        _817 = _816;
        _818 = _816;
        _819 = _816;
        _820 = _816;
        _821 = _816;
        _822 = _816;
        _823 = _816;
        _824 = _816;
        _825 = _816;
        _826 = _816;
        _827 = _816;
        _828 = 0.0;
        _829 = 0.0;
        _830 = 0.0;
    }
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _856 = fma(_513, cbModelParam._m0[30u].z, fma(_509, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _505));
        float _860 = fma(_513, cbModelParam._m0[31u].z, fma(_509, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _505));
        float _864 = fma(_513, cbModelParam._m0[32u].z, fma(_509, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _505));
        float _887 = _505 + _287;
        float _888 = _509 + _288;
        float _889 = _513 + _289;
        float _899 = fma(_889, cbModelParam._m0[30u].z, fma(_888, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _887)) - _856;
        float _900 = fma(_889, cbModelParam._m0[31u].z, fma(_888, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _887)) - _860;
        float _901 = fma(_889, cbModelParam._m0[32u].z, fma(_888, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _887)) - _864;
        float _905 = inversesqrt(dot(vec3(_899, _900, _901), vec3(_899, _900, _901)));
        float _918 = ((_905 * _899) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_856 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _919 = ((_905 * _900) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_860 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _920 = ((_905 * _901) / cbModelParam._m0[35u].z) + ((((((_864 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        float _955 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_922.x + (-0.5));
        float _957 = _955 * (_922.y + (-0.5));
        float _958 = _955 * (_922.z + (-0.5));
        float _965 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_929.x + (-0.5));
        float _967 = _965 * (_929.y + (-0.5));
        float _968 = _965 * (_929.z + (-0.5));
        float _975 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_936.x + (-0.5));
        float _977 = _975 * (_936.y + (-0.5));
        float _978 = _975 * (_936.z + (-0.5));
        float _985 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_943.x + (-0.5));
        float _987 = _985 * (_943.y + (-0.5));
        float _988 = _985 * (_943.z + (-0.5));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = _956 * 0.5;
        float _993 = _966 * 0.5;
        float _994 = _976 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1008 = (dot(vec3(_287, _288, _289), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3671 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1017 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3682 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3693 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * (_1019 + 1.0))) + _1024) * _989;
        float _1034 = _957 * 0.5;
        float _1035 = _967 * 0.5;
        float _1036 = _977 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_287, _288, _289), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3704 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_990 + 9.9999997473787516355514526367188e-06);
        float _3715 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3726 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * (_1061 + 1.0))) + _1066) * _990;
        float _1076 = _958 * 0.5;
        float _1077 = _968 * 0.5;
        float _1078 = _978 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_287, _288, _289), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3737 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _3748 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3759 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (_1103 + 1.0))) + _1108) * _991;
        _1125 = _958;
        _1126 = _957;
        _1127 = _956;
        _1128 = _968;
        _1129 = _967;
        _1130 = _966;
        _1131 = _978;
        _1132 = _977;
        _1133 = _976;
        _1134 = _991;
        _1135 = _990;
        _1136 = _989;
        _1137 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
        _1138 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
        _1139 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
    }
    else
    {
        _1125 = _816;
        _1126 = _816;
        _1127 = _816;
        _1128 = _816;
        _1129 = _816;
        _1130 = _816;
        _1131 = _816;
        _1132 = _816;
        _1133 = _816;
        _1134 = _816;
        _1135 = _816;
        _1136 = _816;
        _1137 = 0.0;
        _1138 = 0.0;
        _1139 = 0.0;
    }
    float _1149 = (cbModelParam._m0[1u].x * (_1137 - _828)) + _828;
    float _1150 = (cbModelParam._m0[1u].x * (_1138 - _829)) + _829;
    float _1151 = (cbModelParam._m0[1u].x * (_1139 - _830)) + _830;
    float _1172 = fma(_1151, cbSceneParam._m0[89u].z, fma(_1150, cbSceneParam._m0[89u].y, _1149 * cbSceneParam._m0[89u].x));
    float _1175 = fma(_1151, cbSceneParam._m0[90u].z, fma(_1150, cbSceneParam._m0[90u].y, _1149 * cbSceneParam._m0[90u].x));
    float _1178 = fma(_1151, cbSceneParam._m0[91u].z, fma(_1150, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1149));
    float _1193 = _452 * 0.5;
    float _1194 = _453 * 0.5;
    float _1195 = _454 * 0.5;
    float _1196 = dot(vec4(_1193, _1194, _1195, 1.0), vec4(_1127, _1130, _1133, _1136));
    float _1199 = dot(vec4(_1193, _1194, _1195, 1.0), vec4(_1126, _1129, _1132, _1135));
    float _1202 = dot(vec4(_1193, _1194, _1195, 1.0), vec4(_1125, _1128, _1131, _1134));
    float _1236;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1209 = dot(vec4(_1193, _1194, _1195, 1.0), vec4(_815, _819, _822, _825));
        float _1213 = dot(vec4(_1193, _1194, _1195, 1.0), vec4(_817, _820, _823, _826));
        float _1217 = dot(vec4(_1193, _1194, _1195, 1.0), vec4(_818, _821, _824, _827));
        float _1224 = dot(vec4(cbModelParam._m0[39u]), vec4(_1193, _1194, _1195, 1.0));
        _1236 = dot(vec3(isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)), isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)), isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1224) ? 0.0 : (isnan(0.0) ? _1224 : max(0.0, _1224))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1236 = 1.0;
    }
    float _1247;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1238 = dot(vec4(cbModelParam._m0[40u]), vec4(_1193, _1194, _1195, 1.0));
        _1247 = dot(vec3(isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)), isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)), isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1238) ? 0.0 : (isnan(0.0) ? _1238 : max(0.0, _1238))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1247 = 1.0;
    }
    float _1251 = (_1247 * cbModelParam._m0[1u].x) + (_1236 * (1.0 - cbModelParam._m0[1u].x));
    float _1261 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _291);
    float _1262 = isnan(_1261) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1261 : min(cbModelParam._m0[25u].z, _1261));
    float _1344;
    float _1346;
    float _1348;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1311 = fma(_513, cbModelParam._m0[13u].z, fma(_509, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _505)) + cbModelParam._m0[13u].w;
        float _1315 = fma(_513, cbModelParam._m0[14u].z, fma(_509, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _505)) + cbModelParam._m0[14u].w;
        float _1319 = fma(_513, cbModelParam._m0[15u].z, fma(_509, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _505)) + cbModelParam._m0[15u].w;
        float _1322 = fma(_454, cbModelParam._m0[13u].z, fma(_453, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _452));
        float _1325 = fma(_454, cbModelParam._m0[14u].z, fma(_453, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _452));
        float _1328 = fma(_454, cbModelParam._m0[15u].z, fma(_453, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _452));
        float _1356;
        if (_1322 > 0.0)
        {
            _1356 = abs((1.0 - _1311) / _1322);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1322 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1311 + 1.0) / _1322);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1356 = frontier_phi_16_14_ladder;
        }
        float _1530;
        if (_1325 > 0.0)
        {
            _1530 = abs((1.0 - _1315) / _1325);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1325 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1315 + 1.0) / _1325);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1530 = frontier_phi_25_21_ladder;
        }
        float _1826;
        if (_1328 > 0.0)
        {
            _1826 = abs((1.0 - _1319) / _1328);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1328 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1319 + 1.0) / _1328);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1826 = frontier_phi_37_32_ladder;
        }
        float _1828 = isnan(_1530) ? _1356 : (isnan(_1356) ? _1530 : min(_1356, _1530));
        float _1829 = isnan(_1826) ? _1828 : (isnan(_1828) ? _1826 : min(_1828, _1826));
        float _1833 = (_1829 * _1322) + _1311;
        float _1834 = (_1829 * _1325) + _1315;
        float _1835 = (_1829 * _1328) + _1319;
        float _1836 = _1829 * 9.9999997473787516355514526367188e-05;
        float _1838 = (-1.0) - _1836;
        float _1840 = _1836 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1835 > _1840) || ((_1835 < _1838) || ((_1834 > _1840) || ((_1834 < _1838) || ((_1833 < _1838) || (_1833 > _1840))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1980 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1835, cbModelParam._m0[9u].z, fma(_1834, cbModelParam._m0[9u].y, _1833 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1835, cbModelParam._m0[10u].z, fma(_1834, cbModelParam._m0[10u].y, _1833 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1835, cbModelParam._m0[11u].z, fma(_1834, cbModelParam._m0[11u].y, _1833 * cbModelParam._m0[11u].x))), _1262);
            frontier_phi_15_37_ladder = _1980.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1980.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1980.z * cbModelParam._m0[1u].y;
        }
        _1344 = frontier_phi_15_37_ladder_1;
        _1346 = frontier_phi_15_37_ladder;
        _1348 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1332 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_452, _453, _454), _1262);
        _1344 = _1332.x * cbModelParam._m0[1u].y;
        _1346 = _1332.y * cbModelParam._m0[1u].y;
        _1348 = _1332.z * cbModelParam._m0[1u].y;
    }
    float _1352 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _291);
    float _1353 = isnan(_1352) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1352 : min(cbModelParam._m0[25u].w, _1352));
    float _1446;
    float _1448;
    float _1450;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1410 = fma(_513, cbModelParam._m0[21u].z, fma(_509, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _505)) + cbModelParam._m0[21u].w;
        float _1414 = fma(_513, cbModelParam._m0[22u].z, fma(_509, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _505)) + cbModelParam._m0[22u].w;
        float _1418 = fma(_513, cbModelParam._m0[23u].z, fma(_509, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _505)) + cbModelParam._m0[23u].w;
        float _1421 = fma(_454, cbModelParam._m0[21u].z, fma(_453, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _452));
        float _1424 = fma(_454, cbModelParam._m0[22u].z, fma(_453, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _452));
        float _1427 = fma(_454, cbModelParam._m0[23u].z, fma(_453, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _452));
        float _1535;
        if (_1421 > 0.0)
        {
            _1535 = abs((1.0 - _1410) / _1421);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1421 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1410 + 1.0) / _1421);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1535 = frontier_phi_27_23_ladder;
        }
        float _1853;
        if (_1424 > 0.0)
        {
            _1853 = abs((1.0 - _1414) / _1424);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1424 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1414 + 1.0) / _1424);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1853 = frontier_phi_39_34_ladder;
        }
        float _2180;
        if (_1427 > 0.0)
        {
            _2180 = abs((1.0 - _1418) / _1427);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1427 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1418 + 1.0) / _1427);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2180 = frontier_phi_49_46_ladder;
        }
        float _2182 = isnan(_1853) ? _1535 : (isnan(_1535) ? _1853 : min(_1535, _1853));
        float _2183 = isnan(_2180) ? _2182 : (isnan(_2182) ? _2180 : min(_2182, _2180));
        float _2187 = (_2183 * _1421) + _1410;
        float _2188 = (_2183 * _1424) + _1414;
        float _2189 = (_2183 * _1427) + _1418;
        float _2190 = _2183 * 9.9999997473787516355514526367188e-05;
        float _2191 = (-1.0) - _2190;
        float _2193 = _2190 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2189 > _2193) || ((_2189 < _2191) || ((_2188 > _2193) || ((_2188 < _2191) || ((_2187 < _2191) || (_2187 > _2193))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2307 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2189, cbModelParam._m0[17u].z, fma(_2188, cbModelParam._m0[17u].y, _2187 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2189, cbModelParam._m0[18u].z, fma(_2188, cbModelParam._m0[18u].y, _2187 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2189, cbModelParam._m0[19u].z, fma(_2188, cbModelParam._m0[19u].y, _2187 * cbModelParam._m0[19u].x))), _1353);
            frontier_phi_24_49_ladder = _2307.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2307.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2307.x * cbModelParam._m0[1u].z;
        }
        _1446 = frontier_phi_24_49_ladder_2;
        _1448 = frontier_phi_24_49_ladder_1;
        _1450 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1430 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_452, _453, _454), _1353);
        _1446 = _1430.x * cbModelParam._m0[1u].z;
        _1448 = _1430.y * cbModelParam._m0[1u].z;
        _1450 = _1430.z * cbModelParam._m0[1u].z;
    }
    float _1462 = ((((1.0 - _473) * ((_460 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_473 * _460)) * _444;
    float _1463 = _1462 * ((cbModelParam._m0[1u].w * (_1446 - _1344)) + _1344);
    float _1464 = _1462 * ((cbModelParam._m0[1u].w * (_1448 - _1346)) + _1346);
    float _1465 = _1462 * ((cbModelParam._m0[1u].w * (_1450 - _1348)) + _1348);
    float _1468 = fma(_1465, cbSceneParam._m0[89u].z, fma(_1464, cbSceneParam._m0[89u].y, _1463 * cbSceneParam._m0[89u].x));
    float _1471 = fma(_1465, cbSceneParam._m0[90u].z, fma(_1464, cbSceneParam._m0[90u].y, _1463 * cbSceneParam._m0[90u].x));
    float _1474 = fma(_1465, cbSceneParam._m0[91u].z, fma(_1464, cbSceneParam._m0[91u].y, _1463 * cbSceneParam._m0[91u].x));
    float _1509 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1513 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1517 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1521 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1522 = _1509 / _1521;
    float _1523 = _1513 / _1521;
    float _1524 = _1517 / _1521;
    float _1671;
    float _1672;
    float _1673;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1551 = ((uint(_1524 > cbSceneParam._m0[59u].y) + uint(_1524 > cbSceneParam._m0[59u].x)) + uint(_1524 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1552 = _1551 + 43u;
        uint _1560 = _1551 + 44u;
        uint _1568 = _1551 + 45u;
        uint _1576 = _1551 + 46u;
        float _1587 = fma(_1521, cbSceneParam._m0[_1552].w, fma(_1517, cbSceneParam._m0[_1552].z, fma(_1513, cbSceneParam._m0[_1552].y, _1509 * cbSceneParam._m0[_1552].x)));
        float _1591 = fma(_1521, cbSceneParam._m0[_1560].w, fma(_1517, cbSceneParam._m0[_1560].z, fma(_1513, cbSceneParam._m0[_1560].y, _1509 * cbSceneParam._m0[_1560].x)));
        float _1599 = fma(_1521, cbSceneParam._m0[_1576].w, fma(_1517, cbSceneParam._m0[_1576].z, fma(_1513, cbSceneParam._m0[_1576].y, _1509 * cbSceneParam._m0[_1576].x)));
        float _1604 = cbSceneParam._m0[33u].z * _1599;
        float _1606 = cbSceneParam._m0[33u].w * _1599;
        float _1609 = fma(_1521, cbSceneParam._m0[_1568].w, fma(_1517, cbSceneParam._m0[_1568].z, fma(_1513, cbSceneParam._m0[_1568].y, _1509 * cbSceneParam._m0[_1568].x))) / _1599;
        float _1657 = (cbSceneParam._m0[33u].x - sqrt(((_1523 * _1523) + (_1522 * _1522)) + (_1524 * _1524))) * cbSceneParam._m0[33u].y;
        float _3885 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1664 = (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1604 + _1587) / _1599, (_1606 + _1591) / _1599), _1609), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1606 + _1587) / _1599, (_1591 - _1604) / _1599), _1609), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1587 - _1604) / _1599, (_1591 - _1606) / _1599), _1609), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1587 - _1606) / _1599, (_1604 + _1591) / _1599), _1609), 0.0)).x), vec4(0.25)));
        _1671 = 1.0 - (_1664 * cbSceneParam._m0[34u].x);
        _1672 = 1.0 - (_1664 * cbSceneParam._m0[34u].y);
        _1673 = 1.0 - (_1664 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1671 = 1.0;
        _1672 = 1.0;
        _1673 = 1.0;
    }
    float _1737;
    float _1739;
    float _1741;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1725 = fma(_1521, cbSceneParam._m0[63u].w, fma(_1517, cbSceneParam._m0[63u].z, fma(_1513, cbSceneParam._m0[63u].y, _1509 * cbSceneParam._m0[63u].x)));
        float _1726 = fma(_1521, cbSceneParam._m0[60u].w, fma(_1517, cbSceneParam._m0[60u].z, fma(_1513, cbSceneParam._m0[60u].y, _1509 * cbSceneParam._m0[60u].x))) / _1725;
        float _1727 = fma(_1521, cbSceneParam._m0[61u].w, fma(_1517, cbSceneParam._m0[61u].z, fma(_1513, cbSceneParam._m0[61u].y, _1509 * cbSceneParam._m0[61u].x))) / _1725;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1726 >= cbSceneParam._m0[64u].x) && (_1727 >= cbSceneParam._m0[64u].y)) && (_1726 <= cbSceneParam._m0[64u].z)) && (_1727 <= cbSceneParam._m0[64u].w))
        {
            float _1866 = fma(_1521, cbSceneParam._m0[62u].w, fma(_1517, cbSceneParam._m0[62u].z, fma(_1513, cbSceneParam._m0[62u].y, _1509 * cbSceneParam._m0[62u].x))) / _1725;
            float _1870 = isnan(cbSceneParam._m0[41u].w) ? _1866 : (isnan(_1866) ? cbSceneParam._m0[41u].w : max(_1866, cbSceneParam._m0[41u].w));
            float _1913 = (cbSceneParam._m0[33u].x - sqrt(((_1523 * _1523) + (_1522 * _1522)) + (_1524 * _1524))) * cbSceneParam._m0[33u].y;
            float _3901 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
            float _1920 = (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1726, cbSceneParam._m0[33u].w + _1727), _1870), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1726, _1727 - cbSceneParam._m0[33u].z), _1870), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1726 - cbSceneParam._m0[33u].z, _1727 - cbSceneParam._m0[33u].w), _1870), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1726 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1727), _1870), 0.0)).x), vec4(0.25)));
            float _1924 = 1.0 - (_1920 * cbSceneParam._m0[34u].x);
            float _1925 = 1.0 - (_1920 * cbSceneParam._m0[34u].y);
            float _1926 = 1.0 - (_1920 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1925) ? _1672 : (isnan(_1672) ? _1925 : min(_1672, _1925));
            frontier_phi_36_35_ladder_1 = isnan(_1926) ? _1673 : (isnan(_1673) ? _1926 : min(_1673, _1926));
            frontier_phi_36_35_ladder_2 = isnan(_1924) ? _1671 : (isnan(_1671) ? _1924 : min(_1671, _1924));
        }
        else
        {
            frontier_phi_36_35_ladder = _1672;
            frontier_phi_36_35_ladder_1 = _1673;
            frontier_phi_36_35_ladder_2 = _1671;
        }
        _1737 = frontier_phi_36_35_ladder_2;
        _1739 = frontier_phi_36_35_ladder;
        _1741 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1737 = _1671;
        _1739 = _1672;
        _1741 = _1673;
    }
    uvec4 _1746 = floatBitsToUint(cbInstanceData._m0[_418 + 5u]);
    uint _1748 = _1746.x * 14u;
    uint _1749 = _1748 + 13u;
    float _1756 = _444 + (-1.0);
    float _1761 = (cbLight._m0[_1749].x * _1756) + 1.0;
    float _1762 = (cbLight._m0[_1749].y * _1756) + 1.0;
    float _1763 = (cbLight._m0[_1749].z * _1756) + 1.0;
    float _1764 = (cbLight._m0[_1749].w * _1756) + 1.0;
    uint _1765 = _1748 + 5u;
    float _1771 = isnan(1.0) ? _1762 : (isnan(_1762) ? 1.0 : min(_1762, 1.0));
    uint _1775 = _1748 + 4u;
    float _1785 = isnan(1.0) ? _1761 : (isnan(_1761) ? 1.0 : min(_1761, 1.0));
    uint _1789 = _1748 | 1u;
    float _1800 = dot(vec3(cbLight._m0[_1748].xyz), vec3(_287, _288, _289));
    float _1803 = dot(vec3(cbLight._m0[_1789].xyz), vec3(_287, _288, _289));
    float _3937 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _3948 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1808 = (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * 0.3183098733425140380859375;
    float _1810 = (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * 0.3183098733425140380859375;
    float _1817 = ((cbLight._m0[_1765].x * _1771) * _1810) + (((cbLight._m0[_1775].x * _1737) * _1785) * _1808);
    float _1818 = ((_1771 * cbLight._m0[_1765].y) * _1810) + (((cbLight._m0[_1775].y * _1739) * _1785) * _1808);
    float _1819 = ((_1771 * cbLight._m0[_1765].z) * _1810) + (((cbLight._m0[_1775].z * _1741) * _1785) * _1808);
    uvec4 _1823 = floatBitsToUint(cbLight._m0[_1748 + 12u]);
    bool _1825 = _1823.x == 0u;
    float _1927;
    float _1929;
    float _1931;
    if (_1825)
    {
        _1927 = _1817;
        _1929 = _1818;
        _1931 = _1819;
    }
    else
    {
        uint _1935 = _1748 + 6u;
        float _1951 = (dot(vec3(cbLight._m0[_1748 + 2u].xyz), vec3(_287, _288, _289)) * 0.5) + 0.5;
        float _1952 = _1951 * _1951;
        float _3959 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        float _1953 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1954 = isnan(1.0) ? _1763 : (isnan(_1763) ? 1.0 : min(_1763, 1.0));
        _1927 = (((cbLight._m0[_1935].x * 0.3183098733425140380859375) * _1953) * _1954) + _1817;
        _1929 = (((cbLight._m0[_1935].y * 0.3183098733425140380859375) * _1953) * _1954) + _1818;
        _1931 = (((cbLight._m0[_1935].z * 0.3183098733425140380859375) * _1953) * _1954) + _1819;
    }
    bool _1934 = _1823.y == 0u;
    float _1989;
    float _1991;
    float _1993;
    if (_1934)
    {
        _1989 = _1927;
        _1991 = _1929;
        _1993 = _1931;
    }
    else
    {
        uint _2151 = _1748 + 7u;
        float _2167 = (dot(vec3(cbLight._m0[_1748 + 3u].xyz), vec3(_287, _288, _289)) * 0.5) + 0.5;
        float _2168 = _2167 * _2167;
        float _3975 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2169 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _2170 = isnan(1.0) ? _1764 : (isnan(_1764) ? 1.0 : min(_1764, 1.0));
        _1989 = (((cbLight._m0[_2151].x * 0.3183098733425140380859375) * _2169) * _2170) + _1927;
        _1991 = (((cbLight._m0[_2151].y * 0.3183098733425140380859375) * _2169) * _2170) + _1929;
        _1993 = (((cbLight._m0[_2151].z * 0.3183098733425140380859375) * _2169) * _2170) + _1931;
    }
    uint _1996 = _1748 + 8u;
    float _2009 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1748].w)) * _291) * 0.949999988079071044921875);
    float _2010 = _2009 * _2009;
    float _2011 = cbLight._m0[_1748].x + _369;
    float _2012 = cbLight._m0[_1748].y + _370;
    float _2013 = cbLight._m0[_1748].z + _371;
    float _2017 = inversesqrt(dot(vec3(_2011, _2012, _2013), vec3(_2011, _2012, _2013)));
    float _2018 = _2017 * _2011;
    float _2019 = _2017 * _2012;
    float _2020 = _2017 * _2013;
    float _2021 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_1748].xyz));
    float _3991 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2024 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _4002 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _2025 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _2026 = dot(vec3(_287, _288, _289), vec3(_2018, _2019, _2020));
    float _4013 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2029 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _2030 = dot(vec3(cbLight._m0[_1748].xyz), vec3(_2018, _2019, _2020));
    float _4024 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2034 = _2010 * _2010;
    float _2038 = ((_2029 * _2029) * (_2034 + (-1.0))) + 1.0;
    float _2049 = (exp2(log2(1.0 - (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2050 = 1.0 - _2010;
    float _2061 = (0.5 / (((_2025 * ((_2024 * _2050) + _2010)) + 9.9999999392252902907785028219223e-09) + (((_2025 * _2050) + _2010) * _2024))) * _2024;
    float _4035 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2063 = (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * (_2034 / ((_2038 * _2038) * 3.141590118408203125));
    uint _2077 = _1748 + 9u;
    float _2088 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1789].w)) * _291) * 0.949999988079071044921875);
    float _2089 = _2088 * _2088;
    float _2090 = cbLight._m0[_1789].x + _369;
    float _2091 = cbLight._m0[_1789].y + _370;
    float _2092 = cbLight._m0[_1789].z + _371;
    float _2096 = inversesqrt(dot(vec3(_2090, _2091, _2092), vec3(_2090, _2091, _2092)));
    float _2097 = _2096 * _2090;
    float _2098 = _2096 * _2091;
    float _2099 = _2096 * _2092;
    float _2100 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_1789].xyz));
    float _4046 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2103 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _2104 = dot(vec3(_287, _288, _289), vec3(_2097, _2098, _2099));
    float _4057 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2107 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _2108 = dot(vec3(cbLight._m0[_1789].xyz), vec3(_2097, _2098, _2099));
    float _4068 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2112 = _2089 * _2089;
    float _2116 = ((_2107 * _2107) * (_2112 + (-1.0))) + 1.0;
    float _2125 = (exp2(log2(1.0 - (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2126 = 1.0 - _2089;
    float _2136 = (0.5 / (((_2025 * ((_2103 * _2126) + _2089)) + 9.9999999392252902907785028219223e-09) + (((_2025 * _2126) + _2089) * _2103))) * _2103;
    float _4079 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2138 = (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_2112 / ((_2116 * _2116) * 3.141590118408203125));
    float _2148 = (((_2125 * cbLight._m0[_2077].x) * _2138) * _1771) + ((((cbLight._m0[_1996].x * _1737) * _2049) * _2063) * _1785);
    float _2149 = (((_2125 * cbLight._m0[_2077].y) * _2138) * _1771) + ((((cbLight._m0[_1996].y * _1739) * _2049) * _2063) * _1785);
    float _2150 = (((_2125 * cbLight._m0[_2077].z) * _2138) * _1771) + ((((cbLight._m0[_1996].z * _1741) * _2049) * _2063) * _1785);
    float _2206;
    float _2208;
    float _2210;
    if (_1825)
    {
        _2206 = _2148;
        _2208 = _2149;
        _2210 = _2150;
    }
    else
    {
        uint _2212 = _1748 + 2u;
        uint _2216 = _1748 + 10u;
        float _2230 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2212].w)) * _291) * 0.949999988079071044921875);
        float _2231 = _2230 * _2230;
        float _2232 = cbLight._m0[_2212].x + _369;
        float _2233 = cbLight._m0[_2212].y + _370;
        float _2234 = cbLight._m0[_2212].z + _371;
        float _2238 = inversesqrt(dot(vec3(_2232, _2233, _2234), vec3(_2232, _2233, _2234)));
        float _2239 = _2238 * _2232;
        float _2240 = _2238 * _2233;
        float _2241 = _2238 * _2234;
        float _2242 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_2212].xyz));
        float _4090 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2245 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _2246 = dot(vec3(_287, _288, _289), vec3(_2239, _2240, _2241));
        float _4101 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2249 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _2250 = dot(vec3(cbLight._m0[_2212].xyz), vec3(_2239, _2240, _2241));
        float _4112 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2254 = _2231 * _2231;
        float _2258 = ((_2249 * _2249) * (_2254 + (-1.0))) + 1.0;
        float _2267 = (exp2(log2(1.0 - (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2268 = 1.0 - _2231;
        float _2278 = (0.5 / (((_2025 * ((_2245 * _2268) + _2231)) + 9.9999999392252902907785028219223e-09) + (((_2025 * _2268) + _2231) * _2245))) * _2245;
        float _4123 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2280 = (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_2254 / ((_2258 * _2258) * 3.141590118408203125));
        float _2281 = isnan(1.0) ? _1763 : (isnan(_1763) ? 1.0 : min(_1763, 1.0));
        _2206 = (((_2267 * cbLight._m0[_2216].x) * _2280) * _2281) + _2148;
        _2208 = (((_2267 * cbLight._m0[_2216].y) * _2280) * _2281) + _2149;
        _2210 = (((_2267 * cbLight._m0[_2216].z) * _2280) * _2281) + _2150;
    }
    float _2312;
    float _2314;
    float _2316;
    if (_1934)
    {
        _2312 = _2206;
        _2314 = _2208;
        _2316 = _2210;
    }
    else
    {
        uint _2323 = _1748 + 3u;
        uint _2327 = _1748 + 11u;
        float _2341 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2323].w)) * _291) * 0.949999988079071044921875);
        float _2342 = _2341 * _2341;
        float _2343 = cbLight._m0[_2323].x + _369;
        float _2344 = cbLight._m0[_2323].y + _370;
        float _2345 = cbLight._m0[_2323].z + _371;
        float _2349 = inversesqrt(dot(vec3(_2343, _2344, _2345), vec3(_2343, _2344, _2345)));
        float _2350 = _2349 * _2343;
        float _2351 = _2349 * _2344;
        float _2352 = _2349 * _2345;
        float _2353 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_2323].xyz));
        float _4139 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2356 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _2357 = dot(vec3(_287, _288, _289), vec3(_2350, _2351, _2352));
        float _4150 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2360 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _2361 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_2350, _2351, _2352));
        float _4161 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2365 = _2342 * _2342;
        float _2369 = ((_2360 * _2360) * (_2365 + (-1.0))) + 1.0;
        float _2378 = (exp2(log2(1.0 - (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2379 = 1.0 - _2342;
        float _2389 = (0.5 / (((_2025 * ((_2356 * _2379) + _2342)) + 9.9999999392252902907785028219223e-09) + (((_2025 * _2379) + _2342) * _2356))) * _2356;
        float _4172 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2391 = (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_2365 / ((_2369 * _2369) * 3.141590118408203125));
        float _2392 = isnan(1.0) ? _1764 : (isnan(_1764) ? 1.0 : min(_1764, 1.0));
        _2312 = (((_2378 * cbLight._m0[_2327].x) * _2391) * _2392) + _2206;
        _2314 = (((_2378 * cbLight._m0[_2327].y) * _2391) * _2392) + _2208;
        _2316 = (((_2378 * cbLight._m0[_2327].z) * _2391) * _2392) + _2210;
    }
    float _2457;
    float _2459;
    float _2461;
    float _2463;
    float _2465;
    float _2467;
    if (_1746.y == 0u)
    {
        uvec4 _2413 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2414 = _2413.x;
        uint _2425 = uint((float(_2413.y) * floor(float(uint(cbSceneParam._m0[85u].y * _378) / _2414))) + floor(float(uint(cbSceneParam._m0[85u].x * _377) / _2414)));
        float _2435 = (log2(_1524 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2436 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        uint _2439 = uint(isnan(14.0) ? _2436 : (isnan(_2436) ? 14.0 : min(_2436, 14.0)));
        uvec4 _2444 = texelFetch(g_lightClusterGridBuffer, int(((_2439 << 2u) + (_2425 << 6u)) >> 2u));
        uint _2445 = _2444.x;
        uint _2446 = _2413.z;
        float _2526;
        float _2528;
        float _2530;
        float _2532;
        float _2534;
        float _2536;
        if (((((1u << ((_2446 >> 4u) & 15u)) + 4294967295u) & _2445) == 0u) || ((_2446 & 240u) == 0u))
        {
            _2526 = 0.0;
            _2528 = 0.0;
            _2530 = 0.0;
            _2532 = 0.0;
            _2534 = 0.0;
            _2536 = 0.0;
        }
        else
        {
            float _2527;
            float _2529;
            float _2531;
            float _2533;
            float _2535;
            float _2537;
            float _2670 = 0.0;
            float _2671 = 0.0;
            float _2672 = 0.0;
            float _2673 = 0.0;
            float _2674 = 0.0;
            float _2675 = 0.0;
            uint _2676 = 0u;
            uint _2685;
            bool _2686;
            for (;;)
            {
                _2685 = texelFetch(g_lightClassification, int((((_2439 << 5u) + (_2425 << 9u)) + (_2676 << 2u)) >> 2u)).x;
                _2686 = _2685 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2686)
                {
                    frontier_phi_68_pred = _2675;
                    frontier_phi_68_pred_1 = _2674;
                    frontier_phi_68_pred_2 = _2673;
                    frontier_phi_68_pred_3 = _2671;
                    frontier_phi_68_pred_4 = _2670;
                    frontier_phi_68_pred_5 = _2672;
                }
                else
                {
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    uint _2800;
                    _2794 = _2670;
                    _2795 = _2671;
                    _2796 = _2672;
                    _2797 = _2673;
                    _2798 = _2674;
                    _2799 = _2675;
                    _2800 = _2685;
                    float _2726;
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    for (;;)
                    {
                        uint _2804 = uint(findLSB(_2800)) + (_2676 << 5u);
                        uint _2801 = (_2800 + 4294967295u) & _2800;
                        uint _2806 = _2804 * 48u;
                        vec4 _2820 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2806)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 3u)).x));
                        uint _2826 = (_2804 * 48u) + 4u;
                        vec4 _2839 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2826)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 3u)).x));
                        uint _2845 = (_2804 * 48u) + 8u;
                        vec3 _2856 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2845)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 2u)).x));
                        float _2860 = _2820.x - _1522;
                        float _2861 = _2820.y - _1523;
                        float _2862 = _2820.z - _1524;
                        float _2863 = dot(vec3(_2860, _2861, _2862), vec3(_2860, _2861, _2862));
                        float _2866 = inversesqrt(_2863);
                        float _2867 = _2866 * _2860;
                        float _2868 = _2866 * _2861;
                        float _2869 = _2866 * _2862;
                        float _2870 = dot(vec3(_399, _402, _405), vec3(_2867, _2868, _2869));
                        float _2875 = 1.0 - (_2863 * _2820.w);
                        float _4198 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                        float _2876 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                        float _2877 = sqrt(_2863) * _2839.w;
                        float _2880 = 1.39999997615814208984375 / (_2877 + 1.39999997615814208984375);
                        float _2881 = _2880 * _2880;
                        float _2884 = ((1.0 - _2881) * _2870) + _2881;
                        float _2887 = _2877 * _2877;
                        float _2891 = ((isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0))) * _2876) / ((_2887 * 0.699999988079071044921875) + 1.0);
                        float _2895 = (-0.0) - _1522;
                        float _2896 = (-0.0) - _1523;
                        float _2897 = (-0.0) - _1524;
                        float _2901 = inversesqrt(dot(vec3(_2895, _2896, _2897), vec3(_2895, _2896, _2897)));
                        float _2902 = _2901 * _2895;
                        float _2903 = _2901 * _2896;
                        float _2904 = _2901 * _2897;
                        float _2911 = exp2(log2(1.0 / ((_2887 * 3.5) + 5.0)) * 0.25);
                        float _2912 = 1.0 - _460;
                        float _2919 = sqrt(1.0 - ((1.0 - (_2912 * _2912)) * (1.0 - (_2911 * _2911))));
                        float _2920 = _2919 * _2919;
                        float _2921 = _2920 * _2920;
                        float _2922 = _2902 + _2867;
                        float _2923 = _2903 + _2868;
                        float _2924 = _2904 + _2869;
                        float _2928 = inversesqrt(dot(vec3(_2922, _2923, _2924), vec3(_2922, _2923, _2924)));
                        float _2932 = dot(vec3(_399, _402, _405), vec3(_2902, _2903, _2904));
                        float _4214 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2935 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                        float _2936 = dot(vec3(_399, _402, _405), vec3(_2928 * _2922, _2928 * _2923, _2928 * _2924));
                        float _4225 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                        float _2939 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                        float _2943 = ((_2939 * _2939) * (_2921 + (-1.0))) + 1.0;
                        float _2944 = _2880 * _2920;
                        float _2945 = _2944 * _2944;
                        float _2948 = ((1.0 - _2945) * _2870) + _2945;
                        float _4236 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                        float _2949 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                        float _2950 = 1.0 - _2920;
                        float _2960 = (0.5 / (((_2949 * ((_2935 * _2950) + _2920)) + 9.9999999392252902907785028219223e-09) + (((_2949 * _2950) + _2920) * _2935))) * _2949;
                        float _4247 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2971 = (((_2921 * 3.1415927410125732421875) * (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) / ((_2943 * _2943) * ((_2887 * 2.1991131305694580078125) + 3.141590118408203125))) * _2876;
                        _2729 = (_2891 * _2839.x) + _2797;
                        _2730 = (_2891 * _2839.y) + _2798;
                        _2731 = (_2891 * _2839.z) + _2799;
                        _2726 = (_2971 * _2856.x) + _2794;
                        _2727 = (_2971 * _2856.y) + _2795;
                        _2728 = (_2971 * _2856.z) + _2796;
                        if (_2801 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2794 = _2726;
                            _2795 = _2727;
                            _2796 = _2728;
                            _2797 = _2729;
                            _2798 = _2730;
                            _2799 = _2731;
                            _2800 = _2801;
                        }
                    }
                    frontier_phi_68_pred = _2731;
                    frontier_phi_68_pred_1 = _2730;
                    frontier_phi_68_pred_2 = _2729;
                    frontier_phi_68_pred_3 = _2727;
                    frontier_phi_68_pred_4 = _2726;
                    frontier_phi_68_pred_5 = _2728;
                }
                _2537 = frontier_phi_68_pred;
                _2535 = frontier_phi_68_pred_1;
                _2533 = frontier_phi_68_pred_2;
                _2529 = frontier_phi_68_pred_3;
                _2527 = frontier_phi_68_pred_4;
                _2531 = frontier_phi_68_pred_5;
                uint _2677 = _2676 + 1u;
                if (_2677 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2670 = _2527;
                    _2671 = _2529;
                    _2672 = _2531;
                    _2673 = _2533;
                    _2674 = _2535;
                    _2675 = _2537;
                    _2676 = _2677;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2526 = _2527;
            _2528 = _2529;
            _2530 = _2531;
            _2532 = _2533;
            _2534 = _2535;
            _2536 = _2537;
        }
        uvec4 _2540 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2541 = _2540.z;
        uint _2543 = (_2541 >> 8u) & 15u;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        if (((4294967295u << _2543) & _2445) == 0u)
        {
            _2638 = _2526;
            _2640 = _2528;
            _2642 = _2530;
            _2644 = _2532;
            _2646 = _2534;
            _2648 = _2536;
        }
        else
        {
            float _2663 = inversesqrt(dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524)));
            float _2664 = _2663 * _1522;
            float _2665 = _2663 * _1523;
            float _2666 = _2663 * _1524;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2543 < ((_2541 >> 12u) & 15u))
            {
                float _2639;
                float _2641;
                float _2643;
                float _2645;
                float _2647;
                float _2649;
                float _2777 = _2526;
                float _2778 = _2528;
                float _2779 = _2530;
                float _2780 = _2532;
                float _2781 = _2534;
                float _2782 = _2536;
                uint _2783 = _2543;
                uint _2792;
                bool _2793;
                for (;;)
                {
                    _2792 = texelFetch(g_lightClassification, int((((_2439 << 5u) + (_2425 << 9u)) + (_2783 << 2u)) >> 2u)).x;
                    _2793 = _2792 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2793)
                    {
                        frontier_phi_74_pred = _2779;
                        frontier_phi_74_pred_1 = _2778;
                        frontier_phi_74_pred_2 = _2777;
                        frontier_phi_74_pred_3 = _2782;
                        frontier_phi_74_pred_4 = _2781;
                        frontier_phi_74_pred_5 = _2780;
                    }
                    else
                    {
                        float _2976;
                        float _2977;
                        float _2978;
                        float _2979;
                        float _2980;
                        float _2981;
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _2989 = _2777;
                        float _2990 = _2778;
                        float _2991 = _2779;
                        float _2992 = _2780;
                        float _2993 = _2781;
                        float _2994 = _2782;
                        uint _2995 = _2792;
                        uint _2996;
                        vec4 _3021;
                        float _3022;
                        vec4 _3037;
                        vec3 _3049;
                        vec4 _3065;
                        vec4 _3081;
                        float _3128;
                        bool _3129;
                        for (;;)
                        {
                            uint _3006 = ((_2783 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2995));
                            _2996 = (_2995 + 4294967295u) & _2995;
                            uint _3008 = _3006 * 40u;
                            _3021 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3008)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 3u)).x));
                            _3022 = _3021.w;
                            uint _3024 = (_3006 * 40u) + 4u;
                            _3037 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 3u)).x));
                            uint _3039 = (_3006 * 40u) + 8u;
                            _3049 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3039)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 2u)).x));
                            uint _3052 = (_3006 * 40u) + 16u;
                            _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            uint _3068 = (_3006 * 40u) + 20u;
                            _3081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 3u)).x));
                            uint _3084 = (_3006 * 40u) + 24u;
                            vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            uint _3103 = (_3006 * 40u) + 28u;
                            vec4 _3116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 3u)).x));
                            _3128 = fma(_1524, _3116.z, fma(_1523, _3116.y, _3116.x * _1522)) + _3116.w;
                            _3129 = !((fma(_1524, _3097.z, fma(_1523, _3097.y, _3097.x * _1522)) + _3097.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3129)
                            {
                                float _3156 = _3021.x - _1522;
                                float _3157 = _3021.y - _1523;
                                float _3158 = _3021.z - _1524;
                                float _3159 = dot(vec3(_3156, _3157, _3158), vec3(_3156, _3157, _3158));
                                float _3162 = inversesqrt(_3159);
                                float _3163 = _3162 * _3156;
                                float _3164 = _3162 * _3157;
                                float _3165 = _3162 * _3158;
                                float _3169 = 1.0 - (_3159 / (_3022 * _3022));
                                float _4258 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3170 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                                float _3174 = sqrt(_3159) * _3037.w;
                                float _3176 = 1.39999997615814208984375 / (_3174 + 1.39999997615814208984375);
                                float _3177 = _3176 * _3176;
                                float _3180 = ((1.0 - _3177) * dot(vec3(_3163, _3164, _3165), vec3(_399, _402, _405))) + _3177;
                                float _3183 = _3174 * _3174;
                                float _3187 = (fma(_1524, _3065.z, fma(_1523, _3065.y, _3065.x * _1522)) + _3065.w) / _3128;
                                float _3188 = (fma(_1524, _3081.z, fma(_1523, _3081.y, _3081.x * _1522)) + _3081.w) / _3128;
                                float _3192 = 1.0 - dot(vec2(_3187, _3188), vec2(_3187, _3188));
                                float _4274 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3193 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3194 = _3193 * (((isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0))) * _3170) / ((_3183 * 0.699999988079071044921875) + 1.0));
                                float _3206 = exp2(log2(1.0 / ((_3183 * 3.5) + 5.0)) * 0.25);
                                float _3207 = 1.0 - _460;
                                float _3214 = sqrt(1.0 - ((1.0 - (_3207 * _3207)) * (1.0 - (_3206 * _3206))));
                                float _3215 = _3214 * _3214;
                                float _3216 = _3215 * _3215;
                                float _3217 = _3163 - _2664;
                                float _3218 = _3164 - _2665;
                                float _3219 = _3165 - _2666;
                                float _3223 = inversesqrt(dot(vec3(_3217, _3218, _3219), vec3(_3217, _3218, _3219)));
                                float _3227 = dot(vec3(_399, _402, _405), vec3((-0.0) - _2664, (-0.0) - _2665, (-0.0) - _2666));
                                float _4285 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3230 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                                float _3231 = dot(vec3(_399, _402, _405), vec3(_3223 * _3217, _3223 * _3218, _3223 * _3219));
                                float _4296 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                                float _3234 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                                float _3238 = ((_3234 * _3234) * (_3216 + (-1.0))) + 1.0;
                                float _3239 = _3176 * _3215;
                                float _3240 = _3239 * _3239;
                                float _3246 = ((1.0 - _3240) * dot(vec3(_399, _402, _405), vec3(_3163, _3164, _3165))) + _3240;
                                float _4307 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                                float _3247 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                                float _3248 = 1.0 - _3215;
                                float _3258 = (0.5 / (((_3247 * ((_3230 * _3248) + _3215)) + 9.9999999392252902907785028219223e-09) + (((_3247 * _3248) + _3215) * _3230))) * _3247;
                                float _4318 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3268 = (_3193 * _3170) * (((_3216 * 3.1415927410125732421875) * (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) / ((_3238 * _3238) * ((_3183 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3268 * _3049.z;
                                frontier_phi_80_pred_1 = _3268 * _3049.y;
                                frontier_phi_80_pred_2 = _3268 * _3049.x;
                                frontier_phi_80_pred_3 = _3194 * _3037.z;
                                frontier_phi_80_pred_4 = _3194 * _3037.y;
                                frontier_phi_80_pred_5 = _3194 * _3037.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3274 = frontier_phi_80_pred;
                            _3273 = frontier_phi_80_pred_1;
                            _3272 = frontier_phi_80_pred_2;
                            _3277 = frontier_phi_80_pred_3;
                            _3276 = frontier_phi_80_pred_4;
                            _3275 = frontier_phi_80_pred_5;
                            _2979 = _3275 + _2992;
                            _2980 = _3276 + _2993;
                            _2981 = _3277 + _2994;
                            _2976 = _3272 + _2989;
                            _2977 = _3273 + _2990;
                            _2978 = _3274 + _2991;
                            if (_2996 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2989 = _2976;
                                _2990 = _2977;
                                _2991 = _2978;
                                _2992 = _2979;
                                _2993 = _2980;
                                _2994 = _2981;
                                _2995 = _2996;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _2978;
                        frontier_phi_74_pred_1 = _2977;
                        frontier_phi_74_pred_2 = _2976;
                        frontier_phi_74_pred_3 = _2981;
                        frontier_phi_74_pred_4 = _2980;
                        frontier_phi_74_pred_5 = _2979;
                    }
                    _2643 = frontier_phi_74_pred;
                    _2641 = frontier_phi_74_pred_1;
                    _2639 = frontier_phi_74_pred_2;
                    _2649 = frontier_phi_74_pred_3;
                    _2647 = frontier_phi_74_pred_4;
                    _2645 = frontier_phi_74_pred_5;
                    uint _2784 = _2783 + 1u;
                    if (_2784 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2777 = _2639;
                        _2778 = _2641;
                        _2779 = _2643;
                        _2780 = _2645;
                        _2781 = _2647;
                        _2782 = _2649;
                        _2783 = _2784;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2647;
                frontier_phi_62_63_ladder_1 = _2645;
                frontier_phi_62_63_ladder_2 = _2643;
                frontier_phi_62_63_ladder_3 = _2649;
                frontier_phi_62_63_ladder_4 = _2641;
                frontier_phi_62_63_ladder_5 = _2639;
            }
            else
            {
                frontier_phi_62_63_ladder = _2534;
                frontier_phi_62_63_ladder_1 = _2532;
                frontier_phi_62_63_ladder_2 = _2530;
                frontier_phi_62_63_ladder_3 = _2536;
                frontier_phi_62_63_ladder_4 = _2528;
                frontier_phi_62_63_ladder_5 = _2526;
            }
            _2638 = frontier_phi_62_63_ladder_5;
            _2640 = frontier_phi_62_63_ladder_4;
            _2642 = frontier_phi_62_63_ladder_2;
            _2644 = frontier_phi_62_63_ladder_1;
            _2646 = frontier_phi_62_63_ladder;
            _2648 = frontier_phi_62_63_ladder_3;
        }
        float _2653 = isnan(1.0) ? _444 : (isnan(_444) ? 1.0 : min(_444, 1.0));
        _2457 = (_2653 * _2644) + _1989;
        _2459 = (_2653 * _2646) + _1991;
        _2461 = (_2653 * _2648) + _1993;
        _2463 = ((_2638 * 0.039999999105930328369140625) * _2653) + _2312;
        _2465 = ((_2640 * 0.039999999105930328369140625) * _2653) + _2314;
        _2467 = ((_2642 * 0.039999999105930328369140625) * _2653) + _2316;
    }
    else
    {
        _2457 = _1989;
        _2459 = _1991;
        _2461 = _1993;
        _2463 = _2312;
        _2465 = _2314;
        _2467 = _2316;
    }
    float _4334 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _4345 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _4356 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _4367 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _2492 = cbInstanceData._m0[_418 + 6u].w * (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)));
    float _2497 = _377 / cbSceneParam._m0[86u].x;
    float _2498 = _378 / cbSceneParam._m0[86u].y;
    vec4 _2512 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2497, _2498, (log2((isnan(cbSceneParam._m0[77u].w) ? _310 : (isnan(_310) ? cbSceneParam._m0[77u].w : min(_310, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2514 = _2512.x;
    float _2515 = _2512.y;
    float _2516 = _2512.z;
    float _2517 = _2512.w;
    float _2588;
    float _2590;
    float _2592;
    float _2594;
    if (_310 > cbSceneParam._m0[78u].w)
    {
        float _2551 = isnan(_310) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _310 : min(cbSceneParam._m0[80u].w, _310));
        float _2552 = _2551 / _310;
        float _2563 = _2552 * _362;
        float _2564 = _363 * _2552;
        float _2565 = (-0.0) - _2564;
        float _2566 = _2552 * _364;
        float _2568 = (cbSceneParam._m0[77u].w * _2565) / _2551;
        float _2569 = _2568 + cbSceneParam._m0[79u].w;
        float _2570 = cbSceneParam._m0[79u].w - _2564;
        float _2576 = sqrt(((_2563 * _2563) + (_2564 * _2564)) + (_2566 * _2566));
        float _2579 = (1.0 - (cbSceneParam._m0[77u].w / _2551)) * _2576;
        float _2584 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2586 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2739;
        if (abs((_2565 - _2568) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2739 = ((((_2569 > 0.0) ? exp2(_2584 * _2569) : (2.0 - exp2(_2586 * _2569))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2579;
        }
        else
        {
            float _2699 = 1.0 / cbSceneParam._m0[80u].x;
            float _2700 = isnan(_2570) ? _2569 : (isnan(_2569) ? _2570 : max(_2569, _2570));
            float _2701 = isnan(_2570) ? _2569 : (isnan(_2569) ? _2570 : min(_2569, _2570));
            float _2710 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : min(_2700, 0.0));
            float _2711 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : min(_2701, 0.0));
            _2739 = ((abs(_2576 / _2565) * cbSceneParam._m0[80u].y) * ((((_2710 - _2711) * 2.0) - ((exp2(_2584 * (isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0)))) - exp2(_2584 * (isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0))))) * _2699)) - ((exp2(_2586 * _2710) - exp2(_2586 * _2711)) * _2699))) + (_2579 * cbSceneParam._m0[80u].z);
        }
        vec4 _2741 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2497, _2498, 1.0), 0.0);
        float _2750 = exp2((_2739 * (-1.44269502162933349609375)) * (1.0 - _2741.w));
        float _2751 = log2(_2750);
        float _2767 = log2(_2517);
        _2588 = (exp2(_2767 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2751 * cbSceneParam._m0[78u].x)) * _2741.x) / cbSceneParam._m0[78u].x)) + _2514;
        _2590 = (exp2(_2767 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2751 * cbSceneParam._m0[78u].y)) * _2741.y) / cbSceneParam._m0[78u].y)) + _2515;
        _2592 = (exp2(_2767 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2751 * cbSceneParam._m0[78u].z)) * _2741.z) / cbSceneParam._m0[78u].z)) + _2516;
        _2594 = _2750 * _2517;
    }
    else
    {
        _2588 = _2514;
        _2590 = _2515;
        _2592 = _2516;
        _2594 = _2517;
    }
    float _2606 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2607 = _2606 == 3.0;
    float _2608 = log2(_2594);
    float _2615 = exp2(_2608 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2457 + ((isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0))) * _444))) + ((_2463 + ((isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))) * _1251)) * cbPerFrame._m0[3u].x));
    float _2616 = exp2(_2608 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2459 + ((isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0))) * _444))) + ((_2465 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _1251)) * cbPerFrame._m0[3u].x));
    float _2617 = exp2(_2608 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_2461 + ((isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0))) * _444))) + ((_2467 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _1251)) * cbPerFrame._m0[3u].x));
    float _2626 = (_2606 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2626 * (_2607 ? _2615 : (_2615 + (cbSceneParam._m0[72u].w * _2588)));
    SV_Target.y = _2626 * (_2607 ? _2616 : (_2616 + (cbSceneParam._m0[72u].w * _2590)));
    SV_Target.z = _2626 * (_2607 ? _2617 : (_2617 + (cbSceneParam._m0[72u].w * _2592)));
    SV_Target.w = _2492;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2492;
}


