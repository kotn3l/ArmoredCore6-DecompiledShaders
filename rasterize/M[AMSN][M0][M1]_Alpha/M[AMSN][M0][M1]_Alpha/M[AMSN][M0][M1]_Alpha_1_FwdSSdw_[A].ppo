#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _859;
float _3255;
float _3256;
float _3257;
float _3258;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _236 = texture(sampler2D(M_AMSN_M0_M1_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _242 = _236.w;
    float _243 = _236.x * cbMtdParam._m0[9u].x;
    float _244 = _236.y * cbMtdParam._m0[9u].y;
    float _245 = _236.z * cbMtdParam._m0[9u].z;
    float _246 = _242 * TEXCOORD_1.z;
    vec4 _258 = texture(sampler2D(M_AMSN_M0_M1_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _262 = _258.z;
    float _266 = (_258.x * 2.0) + (-1.0);
    float _268 = (_258.y * 2.0) + (-1.0);
    float _269 = dot(vec2(_266, _268), vec2(_266, _268));
    float _3267 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _275 = sqrt(1.0 - (isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0))));
    float _278 = fma(_275, _214, fma(_268, _206 * TANGENT.x, (_192 * _184) * _266));
    float _281 = fma(_275, _215, fma(_268, _206 * TANGENT.y, (_192 * _185) * _266));
    float _284 = fma(_275, _216, fma(_268, _206 * TANGENT.z, (_192 * _186) * _266));
    float _288 = inversesqrt(dot(vec3(_278, _281, _284), vec3(_278, _281, _284)));
    float _289 = _288 * _278;
    float _290 = _288 * _281;
    float _291 = _288 * _284;
    float _3278 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _292 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
    float _3289 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _293 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
    float _3300 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3311 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3322 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _312 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _354 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _364 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _354);
    float _365 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _354);
    float _366 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _354);
    float _370 = inversesqrt(dot(vec3(_364, _365, _366), vec3(_364, _365, _366)));
    float _371 = _364 * _370;
    float _372 = _365 * _370;
    float _373 = _366 * _370;
    vec4 _378 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _380 = _378.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _538 = sqrt(((_364 * _364) + (_365 * _365)) + (_366 * _366));
        float _544 = (cbMatDynParam._m0[5u].x * _538) + cbMatDynParam._m0[5u].y;
        float _3333 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
        float _545 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
        float _549 = (cbMatDynParam._m0[5u].z * _538) + cbMatDynParam._m0[5u].w;
        float _3344 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0))) - _545)) + _545) < ((_380 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _392 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _393 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _413 = fma(_291, cbSceneParam._m0[5u].z, fma(_290, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _289));
    float _416 = fma(_291, cbSceneParam._m0[6u].z, fma(_290, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _289));
    float _419 = fma(_291, cbSceneParam._m0[7u].z, fma(_290, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _289));
    uint _432 = uint(roundEven(NORMAL.w)) * 13u;
    uint _434 = _432 + 9u;
    uint _435 = _434 + uint(cbMatDynParam._m0[0u].w);
    float _441 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0)))) * cbInstanceData._m0[_435].x;
    float _442 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0)))) * cbInstanceData._m0[_435].y;
    float _443 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0)))) * cbInstanceData._m0[_435].z;
    float _3355 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
    float _3366 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
    float _3377 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
    vec4 _455 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _392, cbSceneParam._m0[86u].y * _393));
    float _458 = _455.x * TEXCOORD_1.w;
    float _459 = dot(vec3(_289, _290, _291), vec3(_371, _372, _373));
    float _462 = _459 * 2.0;
    float _466 = (_462 * _289) - _371;
    float _467 = (_462 * _290) - _372;
    float _468 = (_462 * _291) - _373;
    float _472 = abs(dot(vec3(_371, _372, _373), vec3(_289, _290, _291)));
    float _3388 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _474 = sqrt(_293);
    float _487 = exp2((_474 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_474 * 3.0));
    float _519 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _523 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _527 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _858;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _583 = fma(_527, cbModelParam._m0[26u].z, fma(_523, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _519));
        float _587 = fma(_527, cbModelParam._m0[27u].z, fma(_523, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _519));
        float _591 = fma(_527, cbModelParam._m0[28u].z, fma(_523, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _519));
        float _616 = _519 + _289;
        float _617 = _523 + _290;
        float _618 = _527 + _291;
        float _628 = fma(_618, cbModelParam._m0[26u].z, fma(_617, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _616)) - _583;
        float _629 = fma(_618, cbModelParam._m0[27u].z, fma(_617, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _616)) - _587;
        float _630 = fma(_618, cbModelParam._m0[28u].z, fma(_617, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _616)) - _591;
        float _634 = inversesqrt(dot(vec3(_628, _629, _630), vec3(_628, _629, _630)));
        float _647 = ((_634 * _628) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_583 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _648 = ((_634 * _629) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_587 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _649 = ((_634 * _630) / cbModelParam._m0[34u].z) + ((((((_591 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _652 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        vec4 _659 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        vec4 _666 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        vec4 _673 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        float _686 = exp2((_652.w + (-0.5)) * 20.0) * 2.0;
        float _687 = _686 * (_652.x + (-0.5));
        float _688 = _686 * (_652.y + (-0.5));
        float _689 = _686 * (_652.z + (-0.5));
        float _696 = exp2((_659.w + (-0.5)) * 20.0) * 2.0;
        float _697 = _696 * (_659.x + (-0.5));
        float _698 = _696 * (_659.y + (-0.5));
        float _699 = _696 * (_659.z + (-0.5));
        float _706 = exp2((_666.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _706 * (_666.x + (-0.5));
        float _708 = _706 * (_666.y + (-0.5));
        float _709 = _706 * (_666.z + (-0.5));
        float _716 = exp2((_673.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_673.x + (-0.5));
        float _718 = _716 * (_673.y + (-0.5));
        float _719 = _716 * (_673.z + (-0.5));
        float _720 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _721 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _722 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _723 = _687 * 0.5;
        float _724 = _697 * 0.5;
        float _725 = _707 * 0.5;
        float _726 = dot(vec3(_723, _724, _725), vec3(_723, _724, _725));
        float _731 = (_726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_726);
        float _740 = (dot(vec3(_289, _290, _291), vec3(_731 * _723, _731 * _724, _731 * _725)) + 1.0) * 0.5;
        float _3414 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _750 = sqrt(((_724 * _724) + (_723 * _723)) + (_725 * _725)) / (_720 + 9.9999997473787516355514526367188e-06);
        float _3425 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
        float _752 = _751 * 2.0;
        float _756 = (1.0 - _751) / (_751 + 1.0);
        float _3436 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _766 = ((((1.0 - _757) * (_752 + 2.0)) * exp2(log2(isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0))) * (_752 + 1.0))) + _757) * _720;
        float _767 = _688 * 0.5;
        float _768 = _698 * 0.5;
        float _769 = _708 * 0.5;
        float _770 = dot(vec3(_767, _768, _769), vec3(_767, _768, _769));
        float _775 = (_770 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_770);
        float _783 = (dot(vec3(_289, _290, _291), vec3(_775 * _767, _775 * _768, _775 * _769)) + 1.0) * 0.5;
        float _3447 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _792 = sqrt(((_768 * _768) + (_767 * _767)) + (_769 * _769)) / (_721 + 9.9999997473787516355514526367188e-06);
        float _3458 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _794 = _793 * 2.0;
        float _798 = (1.0 - _793) / (_793 + 1.0);
        float _3469 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _808 = ((((1.0 - _799) * (_794 + 2.0)) * exp2(log2(isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))) * (_794 + 1.0))) + _799) * _721;
        float _809 = _689 * 0.5;
        float _810 = _699 * 0.5;
        float _811 = _709 * 0.5;
        float _812 = dot(vec3(_809, _810, _811), vec3(_809, _810, _811));
        float _817 = (_812 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_812);
        float _825 = (dot(vec3(_289, _290, _291), vec3(_817 * _809, _817 * _810, _817 * _811)) + 1.0) * 0.5;
        float _3480 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _834 = sqrt(((_810 * _810) + (_809 * _809)) + (_811 * _811)) / (_722 + 9.9999997473787516355514526367188e-06);
        float _3491 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _836 = _835 * 2.0;
        float _840 = (1.0 - _835) / (_835 + 1.0);
        float _3502 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _850 = ((((1.0 - _841) * (_836 + 2.0)) * exp2(log2(isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))) * (_836 + 1.0))) + _841) * _722;
        _858 = _689;
        _860 = _688;
        _861 = _687;
        _862 = _699;
        _863 = _698;
        _864 = _697;
        _865 = _709;
        _866 = _708;
        _867 = _707;
        _868 = _722;
        _869 = _721;
        _870 = _720;
        _871 = cbModelParam._m0[36u].z * (isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0)));
        _872 = cbModelParam._m0[36u].z * (isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0)));
        _873 = cbModelParam._m0[36u].z * (isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0)));
    }
    else
    {
        _858 = _859;
        _860 = _859;
        _861 = _859;
        _862 = _859;
        _863 = _859;
        _864 = _859;
        _865 = _859;
        _866 = _859;
        _867 = _859;
        _868 = _859;
        _869 = _859;
        _870 = _859;
        _871 = 0.0;
        _872 = 0.0;
        _873 = 0.0;
    }
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _902 = fma(_527, cbModelParam._m0[30u].z, fma(_523, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _519));
        float _906 = fma(_527, cbModelParam._m0[31u].z, fma(_523, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _519));
        float _910 = fma(_527, cbModelParam._m0[32u].z, fma(_523, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _519));
        float _933 = _519 + _289;
        float _934 = _523 + _290;
        float _935 = _527 + _291;
        float _945 = fma(_935, cbModelParam._m0[30u].z, fma(_934, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _933)) - _902;
        float _946 = fma(_935, cbModelParam._m0[31u].z, fma(_934, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _933)) - _906;
        float _947 = fma(_935, cbModelParam._m0[32u].z, fma(_934, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _933)) - _910;
        float _951 = inversesqrt(dot(vec3(_945, _946, _947), vec3(_945, _946, _947)));
        float _964 = ((_951 * _945) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_902 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_951 * _946) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_906 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _966 = ((_951 * _947) / cbModelParam._m0[35u].z) + ((((((_910 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        float _1001 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_968.x + (-0.5));
        float _1003 = _1001 * (_968.y + (-0.5));
        float _1004 = _1001 * (_968.z + (-0.5));
        float _1011 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_975.x + (-0.5));
        float _1013 = _1011 * (_975.y + (-0.5));
        float _1014 = _1011 * (_975.z + (-0.5));
        float _1021 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_982.x + (-0.5));
        float _1023 = _1021 * (_982.y + (-0.5));
        float _1024 = _1021 * (_982.z + (-0.5));
        float _1031 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_989.x + (-0.5));
        float _1033 = _1031 * (_989.y + (-0.5));
        float _1034 = _1031 * (_989.z + (-0.5));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = _1002 * 0.5;
        float _1039 = _1012 * 0.5;
        float _1040 = _1022 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1054 = (dot(vec3(_289, _290, _291), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _3543 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1063 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3554 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3565 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * (_1065 + 1.0))) + _1070) * _1035;
        float _1080 = _1003 * 0.5;
        float _1081 = _1013 * 0.5;
        float _1082 = _1023 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1096 = (dot(vec3(_289, _290, _291), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3576 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1105 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3587 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3598 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * (_1107 + 1.0))) + _1112) * _1036;
        float _1122 = _1004 * 0.5;
        float _1123 = _1014 * 0.5;
        float _1124 = _1024 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_289, _290, _291), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3609 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3620 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3631 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * (_1149 + 1.0))) + _1154) * _1037;
        _1171 = _1004;
        _1172 = _1003;
        _1173 = _1002;
        _1174 = _1014;
        _1175 = _1013;
        _1176 = _1012;
        _1177 = _1024;
        _1178 = _1023;
        _1179 = _1022;
        _1180 = _1037;
        _1181 = _1036;
        _1182 = _1035;
        _1183 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
        _1184 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
        _1185 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
    }
    else
    {
        _1171 = _859;
        _1172 = _859;
        _1173 = _859;
        _1174 = _859;
        _1175 = _859;
        _1176 = _859;
        _1177 = _859;
        _1178 = _859;
        _1179 = _859;
        _1180 = _859;
        _1181 = _859;
        _1182 = _859;
        _1183 = 0.0;
        _1184 = 0.0;
        _1185 = 0.0;
    }
    float _1195 = (cbModelParam._m0[1u].x * (_1183 - _871)) + _871;
    float _1196 = (cbModelParam._m0[1u].x * (_1184 - _872)) + _872;
    float _1197 = (cbModelParam._m0[1u].x * (_1185 - _873)) + _873;
    float _1218 = fma(_1197, cbSceneParam._m0[89u].z, fma(_1196, cbSceneParam._m0[89u].y, _1195 * cbSceneParam._m0[89u].x));
    float _1221 = fma(_1197, cbSceneParam._m0[90u].z, fma(_1196, cbSceneParam._m0[90u].y, _1195 * cbSceneParam._m0[90u].x));
    float _1224 = fma(_1197, cbSceneParam._m0[91u].z, fma(_1196, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1195));
    float _1239 = _466 * 0.5;
    float _1240 = _467 * 0.5;
    float _1241 = _468 * 0.5;
    float _1242 = dot(vec4(_1239, _1240, _1241, 1.0), vec4(_1173, _1176, _1179, _1182));
    float _1245 = dot(vec4(_1239, _1240, _1241, 1.0), vec4(_1172, _1175, _1178, _1181));
    float _1248 = dot(vec4(_1239, _1240, _1241, 1.0), vec4(_1171, _1174, _1177, _1180));
    float _1282;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1255 = dot(vec4(_1239, _1240, _1241, 1.0), vec4(_858, _862, _865, _868));
        float _1259 = dot(vec4(_1239, _1240, _1241, 1.0), vec4(_860, _863, _866, _869));
        float _1263 = dot(vec4(_1239, _1240, _1241, 1.0), vec4(_861, _864, _867, _870));
        float _1270 = dot(vec4(cbModelParam._m0[39u]), vec4(_1239, _1240, _1241, 1.0));
        _1282 = dot(vec3(isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)), isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)), isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1270) ? 0.0 : (isnan(0.0) ? _1270 : max(0.0, _1270))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1282 = 1.0;
    }
    float _1293;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1284 = dot(vec4(cbModelParam._m0[40u]), vec4(_1239, _1240, _1241, 1.0));
        _1293 = dot(vec3(isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)), isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1284) ? 0.0 : (isnan(0.0) ? _1284 : max(0.0, _1284))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1293 = 1.0;
    }
    float _1297 = (_1293 * cbModelParam._m0[1u].x) + (_1282 * (1.0 - cbModelParam._m0[1u].x));
    float _1307 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _293);
    float _1308 = isnan(_1307) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1307 : min(cbModelParam._m0[25u].z, _1307));
    float _1390;
    float _1392;
    float _1394;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1357 = fma(_527, cbModelParam._m0[13u].z, fma(_523, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _519)) + cbModelParam._m0[13u].w;
        float _1361 = fma(_527, cbModelParam._m0[14u].z, fma(_523, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _519)) + cbModelParam._m0[14u].w;
        float _1365 = fma(_527, cbModelParam._m0[15u].z, fma(_523, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _519)) + cbModelParam._m0[15u].w;
        float _1368 = fma(_468, cbModelParam._m0[13u].z, fma(_467, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _466));
        float _1371 = fma(_468, cbModelParam._m0[14u].z, fma(_467, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _466));
        float _1374 = fma(_468, cbModelParam._m0[15u].z, fma(_467, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _466));
        float _1402;
        if (_1368 > 0.0)
        {
            _1402 = abs((1.0 - _1357) / _1368);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1368 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1357 + 1.0) / _1368);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1402 = frontier_phi_19_17_ladder;
        }
        float _1629;
        if (_1371 > 0.0)
        {
            _1629 = abs((1.0 - _1361) / _1371);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1371 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1361 + 1.0) / _1371);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1629 = frontier_phi_28_24_ladder;
        }
        float _1875;
        if (_1374 > 0.0)
        {
            _1875 = abs((1.0 - _1365) / _1374);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1374 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1365 + 1.0) / _1374);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1875 = frontier_phi_40_35_ladder;
        }
        float _1877 = isnan(_1629) ? _1402 : (isnan(_1402) ? _1629 : min(_1402, _1629));
        float _1878 = isnan(_1875) ? _1877 : (isnan(_1877) ? _1875 : min(_1877, _1875));
        float _1882 = (_1878 * _1368) + _1357;
        float _1883 = (_1878 * _1371) + _1361;
        float _1884 = (_1878 * _1374) + _1365;
        float _1885 = _1878 * 9.9999997473787516355514526367188e-05;
        float _1887 = (-1.0) - _1885;
        float _1889 = _1885 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1884 > _1889) || ((_1884 < _1887) || ((_1883 > _1889) || ((_1883 < _1887) || ((_1882 < _1887) || (_1882 > _1889))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2008 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1884, cbModelParam._m0[9u].z, fma(_1883, cbModelParam._m0[9u].y, _1882 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1884, cbModelParam._m0[10u].z, fma(_1883, cbModelParam._m0[10u].y, _1882 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1884, cbModelParam._m0[11u].z, fma(_1883, cbModelParam._m0[11u].y, _1882 * cbModelParam._m0[11u].x))), _1308);
            frontier_phi_18_40_ladder = _2008.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2008.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2008.x * cbModelParam._m0[1u].y;
        }
        _1390 = frontier_phi_18_40_ladder_2;
        _1392 = frontier_phi_18_40_ladder_1;
        _1394 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1378 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_466, _467, _468), _1308);
        _1390 = _1378.x * cbModelParam._m0[1u].y;
        _1392 = _1378.y * cbModelParam._m0[1u].y;
        _1394 = _1378.z * cbModelParam._m0[1u].y;
    }
    float _1398 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _293);
    float _1399 = isnan(_1398) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1398 : min(cbModelParam._m0[25u].w, _1398));
    float _1492;
    float _1494;
    float _1496;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1456 = fma(_527, cbModelParam._m0[21u].z, fma(_523, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _519)) + cbModelParam._m0[21u].w;
        float _1460 = fma(_527, cbModelParam._m0[22u].z, fma(_523, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _519)) + cbModelParam._m0[22u].w;
        float _1464 = fma(_527, cbModelParam._m0[23u].z, fma(_523, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _519)) + cbModelParam._m0[23u].w;
        float _1467 = fma(_468, cbModelParam._m0[21u].z, fma(_467, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _466));
        float _1470 = fma(_468, cbModelParam._m0[22u].z, fma(_467, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _466));
        float _1473 = fma(_468, cbModelParam._m0[23u].z, fma(_467, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _466));
        float _1634;
        if (_1467 > 0.0)
        {
            _1634 = abs((1.0 - _1456) / _1467);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1456 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1634 = frontier_phi_30_26_ladder;
        }
        float _1902;
        if (_1470 > 0.0)
        {
            _1902 = abs((1.0 - _1460) / _1470);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1460 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1902 = frontier_phi_42_37_ladder;
        }
        float _2107;
        if (_1473 > 0.0)
        {
            _2107 = abs((1.0 - _1464) / _1473);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1473 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1464 + 1.0) / _1473);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2107 = frontier_phi_51_48_ladder;
        }
        float _2109 = isnan(_1902) ? _1634 : (isnan(_1634) ? _1902 : min(_1634, _1902));
        float _2110 = isnan(_2107) ? _2109 : (isnan(_2109) ? _2107 : min(_2109, _2107));
        float _2114 = (_2110 * _1467) + _1456;
        float _2115 = (_2110 * _1470) + _1460;
        float _2116 = (_2110 * _1473) + _1464;
        float _2117 = _2110 * 9.9999997473787516355514526367188e-05;
        float _2118 = (-1.0) - _2117;
        float _2120 = _2117 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2116 > _2120) || ((_2116 < _2118) || ((_2115 > _2120) || ((_2115 < _2118) || ((_2114 < _2118) || (_2114 > _2120))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2316 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2116, cbModelParam._m0[17u].z, fma(_2115, cbModelParam._m0[17u].y, _2114 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2116, cbModelParam._m0[18u].z, fma(_2115, cbModelParam._m0[18u].y, _2114 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2116, cbModelParam._m0[19u].z, fma(_2115, cbModelParam._m0[19u].y, _2114 * cbModelParam._m0[19u].x))), _1399);
            frontier_phi_27_51_ladder = _2316.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2316.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2316.x * cbModelParam._m0[1u].z;
        }
        _1492 = frontier_phi_27_51_ladder_2;
        _1494 = frontier_phi_27_51_ladder_1;
        _1496 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1476 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_466, _467, _468), _1399);
        _1492 = _1476.x * cbModelParam._m0[1u].z;
        _1494 = _1476.y * cbModelParam._m0[1u].z;
        _1496 = _1476.z * cbModelParam._m0[1u].z;
    }
    float _1508 = ((((1.0 - _487) * ((_474 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_487 * _474)) * _458;
    float _1509 = _1508 * ((cbModelParam._m0[1u].w * (_1492 - _1390)) + _1390);
    float _1510 = _1508 * ((cbModelParam._m0[1u].w * (_1494 - _1392)) + _1392);
    float _1511 = _1508 * ((cbModelParam._m0[1u].w * (_1496 - _1394)) + _1394);
    float _1514 = fma(_1511, cbSceneParam._m0[89u].z, fma(_1510, cbSceneParam._m0[89u].y, _1509 * cbSceneParam._m0[89u].x));
    float _1517 = fma(_1511, cbSceneParam._m0[90u].z, fma(_1510, cbSceneParam._m0[90u].y, _1509 * cbSceneParam._m0[90u].x));
    float _1520 = fma(_1511, cbSceneParam._m0[91u].z, fma(_1510, cbSceneParam._m0[91u].y, _1509 * cbSceneParam._m0[91u].x));
    vec4 _1528 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_392, _393));
    float _1530 = _1528.w;
    float _1542 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1530);
    float _1543 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1530);
    float _1544 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1530);
    uvec4 _1548 = floatBitsToUint(cbInstanceData._m0[_432 + 5u]);
    uint _1550 = _1548.x * 14u;
    uint _1551 = _1550 + 13u;
    float _1558 = _458 + (-1.0);
    float _1563 = (cbLight._m0[_1551].x * _1558) + 1.0;
    float _1564 = (cbLight._m0[_1551].y * _1558) + 1.0;
    float _1565 = (cbLight._m0[_1551].z * _1558) + 1.0;
    float _1566 = (cbLight._m0[_1551].w * _1558) + 1.0;
    uint _1567 = _1550 + 5u;
    float _1573 = isnan(1.0) ? _1564 : (isnan(_1564) ? 1.0 : min(_1564, 1.0));
    uint _1577 = _1550 + 4u;
    float _1587 = isnan(1.0) ? _1563 : (isnan(_1563) ? 1.0 : min(_1563, 1.0));
    uint _1591 = _1550 | 1u;
    float _1602 = dot(vec3(cbLight._m0[_1550].xyz), vec3(_289, _290, _291));
    float _1605 = dot(vec3(cbLight._m0[_1591].xyz), vec3(_289, _290, _291));
    float _3767 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
    float _3778 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
    float _1610 = (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * 0.3183098733425140380859375;
    float _1612 = (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * 0.3183098733425140380859375;
    float _1619 = ((cbLight._m0[_1567].x * _1573) * _1612) + (((cbLight._m0[_1577].x * _1542) * _1587) * _1610);
    float _1620 = ((_1573 * cbLight._m0[_1567].y) * _1612) + (((cbLight._m0[_1577].y * _1543) * _1587) * _1610);
    float _1621 = ((_1573 * cbLight._m0[_1567].z) * _1612) + (((cbLight._m0[_1577].z * _1544) * _1587) * _1610);
    uvec4 _1626 = floatBitsToUint(cbLight._m0[_1550 + 12u]);
    bool _1628 = _1626.x == 0u;
    float _1639;
    float _1641;
    float _1643;
    if (_1628)
    {
        _1639 = _1619;
        _1641 = _1620;
        _1643 = _1621;
    }
    else
    {
        uint _1647 = _1550 + 6u;
        float _1663 = (dot(vec3(cbLight._m0[_1550 + 2u].xyz), vec3(_289, _290, _291)) * 0.5) + 0.5;
        float _1664 = _1663 * _1663;
        float _3789 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1666 = isnan(1.0) ? _1565 : (isnan(_1565) ? 1.0 : min(_1565, 1.0));
        _1639 = (((cbLight._m0[_1647].x * 0.3183098733425140380859375) * _1665) * _1666) + _1619;
        _1641 = (((cbLight._m0[_1647].y * 0.3183098733425140380859375) * _1665) * _1666) + _1620;
        _1643 = (((cbLight._m0[_1647].z * 0.3183098733425140380859375) * _1665) * _1666) + _1621;
    }
    bool _1646 = _1626.y == 0u;
    float _1684;
    float _1686;
    float _1688;
    if (_1646)
    {
        _1684 = _1639;
        _1686 = _1641;
        _1688 = _1643;
    }
    else
    {
        uint _1846 = _1550 + 7u;
        float _1862 = (dot(vec3(cbLight._m0[_1550 + 3u].xyz), vec3(_289, _290, _291)) * 0.5) + 0.5;
        float _1863 = _1862 * _1862;
        float _3805 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1864 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1865 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
        _1684 = (((cbLight._m0[_1846].x * 0.3183098733425140380859375) * _1864) * _1865) + _1639;
        _1686 = (((cbLight._m0[_1846].y * 0.3183098733425140380859375) * _1864) * _1865) + _1641;
        _1688 = (((cbLight._m0[_1846].z * 0.3183098733425140380859375) * _1864) * _1865) + _1643;
    }
    uint _1691 = _1550 + 8u;
    float _1704 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1550].w)) * _293) * 0.949999988079071044921875);
    float _1705 = _1704 * _1704;
    float _1706 = cbLight._m0[_1550].x + _371;
    float _1707 = cbLight._m0[_1550].y + _372;
    float _1708 = cbLight._m0[_1550].z + _373;
    float _1712 = inversesqrt(dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708)));
    float _1713 = _1712 * _1706;
    float _1714 = _1712 * _1707;
    float _1715 = _1712 * _1708;
    float _1716 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1550].xyz));
    float _3821 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
    float _1719 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _3832 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _1720 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _1721 = dot(vec3(_289, _290, _291), vec3(_1713, _1714, _1715));
    float _3843 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1724 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _1725 = dot(vec3(cbLight._m0[_1550].xyz), vec3(_1713, _1714, _1715));
    float _3854 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _1729 = _1705 * _1705;
    float _1733 = ((_1724 * _1724) * (_1729 + (-1.0))) + 1.0;
    float _1744 = (exp2(log2(1.0 - (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1745 = 1.0 - _1705;
    float _1756 = (0.5 / (((_1720 * ((_1719 * _1745) + _1705)) + 9.9999999392252902907785028219223e-09) + (((_1720 * _1745) + _1705) * _1719))) * _1719;
    float _3865 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1758 = (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1729 / ((_1733 * _1733) * 3.141590118408203125));
    uint _1772 = _1550 + 9u;
    float _1783 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1591].w)) * _293) * 0.949999988079071044921875);
    float _1784 = _1783 * _1783;
    float _1785 = cbLight._m0[_1591].x + _371;
    float _1786 = cbLight._m0[_1591].y + _372;
    float _1787 = cbLight._m0[_1591].z + _373;
    float _1791 = inversesqrt(dot(vec3(_1785, _1786, _1787), vec3(_1785, _1786, _1787)));
    float _1792 = _1791 * _1785;
    float _1793 = _1791 * _1786;
    float _1794 = _1791 * _1787;
    float _1795 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1591].xyz));
    float _3876 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1798 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _1799 = dot(vec3(_289, _290, _291), vec3(_1792, _1793, _1794));
    float _3887 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1802 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _1803 = dot(vec3(cbLight._m0[_1591].xyz), vec3(_1792, _1793, _1794));
    float _3898 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1807 = _1784 * _1784;
    float _1811 = ((_1802 * _1802) * (_1807 + (-1.0))) + 1.0;
    float _1820 = (exp2(log2(1.0 - (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1821 = 1.0 - _1784;
    float _1831 = (0.5 / (((_1720 * ((_1798 * _1821) + _1784)) + 9.9999999392252902907785028219223e-09) + (((_1720 * _1821) + _1784) * _1798))) * _1798;
    float _3909 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1833 = (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_1807 / ((_1811 * _1811) * 3.141590118408203125));
    float _1843 = (((_1820 * cbLight._m0[_1772].x) * _1833) * _1573) + ((((cbLight._m0[_1691].x * _1542) * _1744) * _1758) * _1587);
    float _1844 = (((_1820 * cbLight._m0[_1772].y) * _1833) * _1573) + ((((cbLight._m0[_1691].y * _1543) * _1744) * _1758) * _1587);
    float _1845 = (((_1820 * cbLight._m0[_1772].z) * _1833) * _1573) + ((((cbLight._m0[_1691].z * _1544) * _1744) * _1758) * _1587);
    float _1907;
    float _1909;
    float _1911;
    if (_1628)
    {
        _1907 = _1843;
        _1909 = _1844;
        _1911 = _1845;
    }
    else
    {
        uint _1913 = _1550 + 2u;
        uint _1917 = _1550 + 10u;
        float _1931 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1913].w)) * _293) * 0.949999988079071044921875);
        float _1932 = _1931 * _1931;
        float _1933 = cbLight._m0[_1913].x + _371;
        float _1934 = cbLight._m0[_1913].y + _372;
        float _1935 = cbLight._m0[_1913].z + _373;
        float _1939 = inversesqrt(dot(vec3(_1933, _1934, _1935), vec3(_1933, _1934, _1935)));
        float _1940 = _1939 * _1933;
        float _1941 = _1939 * _1934;
        float _1942 = _1939 * _1935;
        float _1943 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1913].xyz));
        float _3920 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1946 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1947 = dot(vec3(_289, _290, _291), vec3(_1940, _1941, _1942));
        float _3931 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        float _1950 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1951 = dot(vec3(cbLight._m0[_1913].xyz), vec3(_1940, _1941, _1942));
        float _3942 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1955 = _1932 * _1932;
        float _1959 = ((_1950 * _1950) * (_1955 + (-1.0))) + 1.0;
        float _1968 = (exp2(log2(1.0 - (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1969 = 1.0 - _1932;
        float _1979 = (0.5 / (((_1720 * ((_1946 * _1969) + _1932)) + 9.9999999392252902907785028219223e-09) + (((_1720 * _1969) + _1932) * _1946))) * _1946;
        float _3953 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
        float _1981 = (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_1955 / ((_1959 * _1959) * 3.141590118408203125));
        float _1982 = isnan(1.0) ? _1565 : (isnan(_1565) ? 1.0 : min(_1565, 1.0));
        _1907 = (((_1968 * cbLight._m0[_1917].x) * _1981) * _1982) + _1843;
        _1909 = (((_1968 * cbLight._m0[_1917].y) * _1981) * _1982) + _1844;
        _1911 = (((_1968 * cbLight._m0[_1917].z) * _1981) * _1982) + _1845;
    }
    float _2017;
    float _2019;
    float _2021;
    if (_1646)
    {
        _2017 = _1907;
        _2019 = _1909;
        _2021 = _1911;
    }
    else
    {
        uint _2028 = _1550 + 3u;
        uint _2032 = _1550 + 11u;
        float _2046 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2028].w)) * _293) * 0.949999988079071044921875);
        float _2047 = _2046 * _2046;
        float _2048 = cbLight._m0[_2028].x + _371;
        float _2049 = cbLight._m0[_2028].y + _372;
        float _2050 = cbLight._m0[_2028].z + _373;
        float _2054 = inversesqrt(dot(vec3(_2048, _2049, _2050), vec3(_2048, _2049, _2050)));
        float _2055 = _2054 * _2048;
        float _2056 = _2054 * _2049;
        float _2057 = _2054 * _2050;
        float _2058 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_2028].xyz));
        float _3969 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2061 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _2062 = dot(vec3(_289, _290, _291), vec3(_2055, _2056, _2057));
        float _3980 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2065 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _2066 = dot(vec3(cbLight._m0[_2028].xyz), vec3(_2055, _2056, _2057));
        float _3991 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2070 = _2047 * _2047;
        float _2074 = ((_2065 * _2065) * (_2070 + (-1.0))) + 1.0;
        float _2083 = (exp2(log2(1.0 - (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2084 = 1.0 - _2047;
        float _2094 = (0.5 / (((_1720 * ((_2061 * _2084) + _2047)) + 9.9999999392252902907785028219223e-09) + (((_1720 * _2084) + _2047) * _2061))) * _2061;
        float _4002 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2096 = (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_2070 / ((_2074 * _2074) * 3.141590118408203125));
        float _2097 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
        _2017 = (((_2083 * cbLight._m0[_2032].x) * _2096) * _2097) + _1907;
        _2019 = (((_2083 * cbLight._m0[_2032].y) * _2096) * _2097) + _1909;
        _2021 = (((_2083 * cbLight._m0[_2032].z) * _2096) * _2097) + _1911;
    }
    float _2231;
    float _2233;
    float _2235;
    float _2237;
    float _2239;
    float _2241;
    if (_1548.y == 0u)
    {
        float _2172 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2173 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2172;
        float _2174 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2172;
        float _2175 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2172;
        uvec4 _2187 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2188 = _2187.x;
        uint _2199 = uint((float(_2187.y) * floor(float(uint(cbSceneParam._m0[85u].y * _393) / _2188))) + floor(float(uint(cbSceneParam._m0[85u].x * _392) / _2188)));
        float _2209 = (log2(_2175 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2210 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        uint _2213 = uint(isnan(14.0) ? _2210 : (isnan(_2210) ? 14.0 : min(_2210, 14.0)));
        uvec4 _2218 = texelFetch(g_lightClusterGridBuffer, int(((_2213 << 2u) + (_2199 << 6u)) >> 2u));
        uint _2219 = _2218.x;
        uint _2220 = _2187.z;
        float _2321;
        float _2323;
        float _2325;
        float _2327;
        float _2329;
        float _2331;
        if (((((1u << ((_2220 >> 4u) & 15u)) + 4294967295u) & _2219) == 0u) || ((_2220 & 240u) == 0u))
        {
            _2321 = 0.0;
            _2323 = 0.0;
            _2325 = 0.0;
            _2327 = 0.0;
            _2329 = 0.0;
            _2331 = 0.0;
        }
        else
        {
            float _2322;
            float _2324;
            float _2326;
            float _2328;
            float _2330;
            float _2332;
            float _2473 = 0.0;
            float _2474 = 0.0;
            float _2475 = 0.0;
            float _2476 = 0.0;
            float _2477 = 0.0;
            float _2478 = 0.0;
            uint _2479 = 0u;
            uint _2488;
            bool _2489;
            for (;;)
            {
                _2488 = texelFetch(g_lightClassification, int((((_2213 << 5u) + (_2199 << 9u)) + (_2479 << 2u)) >> 2u)).x;
                _2489 = _2488 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2489)
                {
                    frontier_phi_68_pred = _2475;
                    frontier_phi_68_pred_1 = _2478;
                    frontier_phi_68_pred_2 = _2477;
                    frontier_phi_68_pred_3 = _2476;
                    frontier_phi_68_pred_4 = _2474;
                    frontier_phi_68_pred_5 = _2473;
                }
                else
                {
                    float _2618;
                    float _2619;
                    float _2620;
                    float _2621;
                    float _2622;
                    float _2623;
                    uint _2624;
                    _2618 = _2473;
                    _2619 = _2474;
                    _2620 = _2475;
                    _2621 = _2476;
                    _2622 = _2477;
                    _2623 = _2478;
                    _2624 = _2488;
                    float _2545;
                    float _2546;
                    float _2547;
                    float _2548;
                    float _2549;
                    float _2550;
                    for (;;)
                    {
                        uint _2628 = uint(findLSB(_2624)) + (_2479 << 5u);
                        uint _2625 = (_2624 + 4294967295u) & _2624;
                        uint _2630 = _2628 * 48u;
                        vec4 _2644 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2630)).x, texelFetch(g_PointLightRenderingBuffer, int(_2630 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2630 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2630 + 3u)).x));
                        uint _2650 = (_2628 * 48u) + 4u;
                        vec4 _2663 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2650)).x, texelFetch(g_PointLightRenderingBuffer, int(_2650 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2650 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2650 + 3u)).x));
                        uint _2669 = (_2628 * 48u) + 8u;
                        vec3 _2680 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2669)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 2u)).x));
                        float _2684 = _2644.x - _2173;
                        float _2685 = _2644.y - _2174;
                        float _2686 = _2644.z - _2175;
                        float _2687 = dot(vec3(_2684, _2685, _2686), vec3(_2684, _2685, _2686));
                        float _2690 = inversesqrt(_2687);
                        float _2691 = _2690 * _2684;
                        float _2692 = _2690 * _2685;
                        float _2693 = _2690 * _2686;
                        float _2694 = dot(vec3(_413, _416, _419), vec3(_2691, _2692, _2693));
                        float _2699 = 1.0 - (_2687 * _2644.w);
                        float _4028 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
                        float _2700 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
                        float _2701 = sqrt(_2687) * _2663.w;
                        float _2704 = 1.39999997615814208984375 / (_2701 + 1.39999997615814208984375);
                        float _2705 = _2704 * _2704;
                        float _2708 = ((1.0 - _2705) * _2694) + _2705;
                        float _2711 = _2701 * _2701;
                        float _2715 = ((isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0))) * _2700) / ((_2711 * 0.699999988079071044921875) + 1.0);
                        float _2719 = (-0.0) - _2173;
                        float _2720 = (-0.0) - _2174;
                        float _2721 = (-0.0) - _2175;
                        float _2725 = inversesqrt(dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721)));
                        float _2726 = _2725 * _2719;
                        float _2727 = _2725 * _2720;
                        float _2728 = _2725 * _2721;
                        float _2736 = exp2(log2(1.0 / ((_2711 * 3.5) + 5.0)) * 0.25);
                        float _2737 = 1.0 - _474;
                        float _2744 = sqrt(1.0 - ((1.0 - (_2737 * _2737)) * (1.0 - (_2736 * _2736))));
                        float _2745 = _2744 * _2744;
                        float _2746 = _2745 * _2745;
                        float _2747 = _2726 + _2691;
                        float _2748 = _2727 + _2692;
                        float _2749 = _2728 + _2693;
                        float _2753 = inversesqrt(dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749)));
                        float _2757 = dot(vec3(_413, _416, _419), vec3(_2726, _2727, _2728));
                        float _4044 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
                        float _2760 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
                        float _2761 = dot(vec3(_413, _416, _419), vec3(_2753 * _2747, _2753 * _2748, _2753 * _2749));
                        float _4055 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
                        float _2764 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
                        float _2768 = ((_2764 * _2764) * (_2746 + (-1.0))) + 1.0;
                        float _2769 = _2704 * _2745;
                        float _2770 = _2769 * _2769;
                        float _2773 = ((1.0 - _2770) * _2694) + _2770;
                        float _4066 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
                        float _2774 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
                        float _2775 = 1.0 - _2745;
                        float _2785 = (0.5 / (((_2774 * ((_2760 * _2775) + _2745)) + 9.9999999392252902907785028219223e-09) + (((_2774 * _2775) + _2745) * _2760))) * _2774;
                        float _4077 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                        float _2796 = (((_2746 * 3.1415927410125732421875) * (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) / ((_2768 * _2768) * ((_2711 * 2.1991131305694580078125) + 3.141590118408203125))) * _2700;
                        _2548 = (_2715 * _2663.x) + _2621;
                        _2549 = (_2715 * _2663.y) + _2622;
                        _2550 = (_2715 * _2663.z) + _2623;
                        _2545 = (_2796 * _2680.x) + _2618;
                        _2546 = (_2796 * _2680.y) + _2619;
                        _2547 = (_2796 * _2680.z) + _2620;
                        if (_2625 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2618 = _2545;
                            _2619 = _2546;
                            _2620 = _2547;
                            _2621 = _2548;
                            _2622 = _2549;
                            _2623 = _2550;
                            _2624 = _2625;
                        }
                    }
                    frontier_phi_68_pred = _2547;
                    frontier_phi_68_pred_1 = _2550;
                    frontier_phi_68_pred_2 = _2549;
                    frontier_phi_68_pred_3 = _2548;
                    frontier_phi_68_pred_4 = _2546;
                    frontier_phi_68_pred_5 = _2545;
                }
                _2326 = frontier_phi_68_pred;
                _2332 = frontier_phi_68_pred_1;
                _2330 = frontier_phi_68_pred_2;
                _2328 = frontier_phi_68_pred_3;
                _2324 = frontier_phi_68_pred_4;
                _2322 = frontier_phi_68_pred_5;
                uint _2480 = _2479 + 1u;
                if (_2480 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2473 = _2322;
                    _2474 = _2324;
                    _2475 = _2326;
                    _2476 = _2328;
                    _2477 = _2330;
                    _2478 = _2332;
                    _2479 = _2480;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2321 = _2322;
            _2323 = _2324;
            _2325 = _2326;
            _2327 = _2328;
            _2329 = _2330;
            _2331 = _2332;
        }
        uvec4 _2335 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2336 = _2335.z;
        uint _2338 = (_2336 >> 8u) & 15u;
        float _2441;
        float _2443;
        float _2445;
        float _2447;
        float _2449;
        float _2451;
        if (((4294967295u << _2338) & _2219) == 0u)
        {
            _2441 = _2321;
            _2443 = _2323;
            _2445 = _2325;
            _2447 = _2327;
            _2449 = _2329;
            _2451 = _2331;
        }
        else
        {
            float _2466 = inversesqrt(dot(vec3(_2173, _2174, _2175), vec3(_2173, _2174, _2175)));
            float _2467 = _2466 * _2173;
            float _2468 = _2466 * _2174;
            float _2469 = _2466 * _2175;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2338 < ((_2336 >> 12u) & 15u))
            {
                float _2442;
                float _2444;
                float _2446;
                float _2448;
                float _2450;
                float _2452;
                float _2601 = _2321;
                float _2602 = _2323;
                float _2603 = _2325;
                float _2604 = _2327;
                float _2605 = _2329;
                float _2606 = _2331;
                uint _2607 = _2338;
                uint _2616;
                bool _2617;
                for (;;)
                {
                    _2616 = texelFetch(g_lightClassification, int((((_2213 << 5u) + (_2199 << 9u)) + (_2607 << 2u)) >> 2u)).x;
                    _2617 = _2616 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2617)
                    {
                        frontier_phi_79_pred = _2606;
                        frontier_phi_79_pred_1 = _2605;
                        frontier_phi_79_pred_2 = _2604;
                        frontier_phi_79_pred_3 = _2603;
                        frontier_phi_79_pred_4 = _2602;
                        frontier_phi_79_pred_5 = _2601;
                    }
                    else
                    {
                        float _2810;
                        float _2811;
                        float _2812;
                        float _2813;
                        float _2814;
                        float _2815;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _2823 = _2601;
                        float _2824 = _2602;
                        float _2825 = _2603;
                        float _2826 = _2604;
                        float _2827 = _2605;
                        float _2828 = _2606;
                        uint _2829 = _2616;
                        uint _2830;
                        vec4 _2855;
                        float _2856;
                        vec4 _2871;
                        vec3 _2883;
                        vec4 _2899;
                        vec4 _2915;
                        float _2962;
                        bool _2963;
                        for (;;)
                        {
                            uint _2840 = ((_2607 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2829));
                            _2830 = (_2829 + 4294967295u) & _2829;
                            uint _2842 = _2840 * 40u;
                            _2855 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 3u)).x));
                            _2856 = _2855.w;
                            uint _2858 = (_2840 * 40u) + 4u;
                            _2871 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 3u)).x));
                            uint _2873 = (_2840 * 40u) + 8u;
                            _2883 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2873)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 2u)).x));
                            uint _2886 = (_2840 * 40u) + 16u;
                            _2899 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2886)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 3u)).x));
                            uint _2902 = (_2840 * 40u) + 20u;
                            _2915 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 3u)).x));
                            uint _2918 = (_2840 * 40u) + 24u;
                            vec4 _2931 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 3u)).x));
                            uint _2937 = (_2840 * 40u) + 28u;
                            vec4 _2950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 3u)).x));
                            _2962 = fma(_2175, _2950.z, fma(_2174, _2950.y, _2950.x * _2173)) + _2950.w;
                            _2963 = !((fma(_2175, _2931.z, fma(_2174, _2931.y, _2931.x * _2173)) + _2931.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2963)
                            {
                                float _2990 = _2855.x - _2173;
                                float _2991 = _2855.y - _2174;
                                float _2992 = _2855.z - _2175;
                                float _2993 = dot(vec3(_2990, _2991, _2992), vec3(_2990, _2991, _2992));
                                float _2996 = inversesqrt(_2993);
                                float _2997 = _2996 * _2990;
                                float _2998 = _2996 * _2991;
                                float _2999 = _2996 * _2992;
                                float _3003 = 1.0 - (_2993 / (_2856 * _2856));
                                float _4088 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                                float _3004 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
                                float _3008 = sqrt(_2993) * _2871.w;
                                float _3010 = 1.39999997615814208984375 / (_3008 + 1.39999997615814208984375);
                                float _3011 = _3010 * _3010;
                                float _3014 = ((1.0 - _3011) * dot(vec3(_2997, _2998, _2999), vec3(_413, _416, _419))) + _3011;
                                float _3017 = _3008 * _3008;
                                float _3021 = (fma(_2175, _2899.z, fma(_2174, _2899.y, _2899.x * _2173)) + _2899.w) / _2962;
                                float _3022 = (fma(_2175, _2915.z, fma(_2174, _2915.y, _2915.x * _2173)) + _2915.w) / _2962;
                                float _3026 = 1.0 - dot(vec2(_3021, _3022), vec2(_3021, _3022));
                                float _4104 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                                float _3027 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                                float _3028 = _3027 * (((isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0))) * _3004) / ((_3017 * 0.699999988079071044921875) + 1.0));
                                float _3040 = exp2(log2(1.0 / ((_3017 * 3.5) + 5.0)) * 0.25);
                                float _3041 = 1.0 - _474;
                                float _3048 = sqrt(1.0 - ((1.0 - (_3041 * _3041)) * (1.0 - (_3040 * _3040))));
                                float _3049 = _3048 * _3048;
                                float _3050 = _3049 * _3049;
                                float _3051 = _2997 - _2467;
                                float _3052 = _2998 - _2468;
                                float _3053 = _2999 - _2469;
                                float _3057 = inversesqrt(dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053)));
                                float _3061 = dot(vec3(_413, _416, _419), vec3((-0.0) - _2467, (-0.0) - _2468, (-0.0) - _2469));
                                float _4115 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                                float _3064 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                                float _3065 = dot(vec3(_413, _416, _419), vec3(_3057 * _3051, _3057 * _3052, _3057 * _3053));
                                float _4126 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                                float _3068 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                                float _3072 = ((_3068 * _3068) * (_3050 + (-1.0))) + 1.0;
                                float _3073 = _3010 * _3049;
                                float _3074 = _3073 * _3073;
                                float _3080 = ((1.0 - _3074) * dot(vec3(_413, _416, _419), vec3(_2997, _2998, _2999))) + _3074;
                                float _4137 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                                float _3081 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
                                float _3082 = 1.0 - _3049;
                                float _3092 = (0.5 / (((_3081 * ((_3064 * _3082) + _3049)) + 9.9999999392252902907785028219223e-09) + (((_3081 * _3082) + _3049) * _3064))) * _3081;
                                float _4148 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3102 = (_3027 * _3004) * (((_3050 * 3.1415927410125732421875) * (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) / ((_3072 * _3072) * ((_3017 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3028 * _2871.z;
                                frontier_phi_85_pred_1 = _3028 * _2871.y;
                                frontier_phi_85_pred_2 = _3028 * _2871.x;
                                frontier_phi_85_pred_3 = _3102 * _2883.z;
                                frontier_phi_85_pred_4 = _3102 * _2883.y;
                                frontier_phi_85_pred_5 = _3102 * _2883.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3111 = frontier_phi_85_pred;
                            _3110 = frontier_phi_85_pred_1;
                            _3109 = frontier_phi_85_pred_2;
                            _3108 = frontier_phi_85_pred_3;
                            _3107 = frontier_phi_85_pred_4;
                            _3106 = frontier_phi_85_pred_5;
                            _2813 = _3109 + _2826;
                            _2814 = _3110 + _2827;
                            _2815 = _3111 + _2828;
                            _2810 = _3106 + _2823;
                            _2811 = _3107 + _2824;
                            _2812 = _3108 + _2825;
                            if (_2830 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2823 = _2810;
                                _2824 = _2811;
                                _2825 = _2812;
                                _2826 = _2813;
                                _2827 = _2814;
                                _2828 = _2815;
                                _2829 = _2830;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2815;
                        frontier_phi_79_pred_1 = _2814;
                        frontier_phi_79_pred_2 = _2813;
                        frontier_phi_79_pred_3 = _2812;
                        frontier_phi_79_pred_4 = _2811;
                        frontier_phi_79_pred_5 = _2810;
                    }
                    _2452 = frontier_phi_79_pred;
                    _2450 = frontier_phi_79_pred_1;
                    _2448 = frontier_phi_79_pred_2;
                    _2446 = frontier_phi_79_pred_3;
                    _2444 = frontier_phi_79_pred_4;
                    _2442 = frontier_phi_79_pred_5;
                    uint _2608 = _2607 + 1u;
                    if (_2608 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2601 = _2442;
                        _2602 = _2444;
                        _2603 = _2446;
                        _2604 = _2448;
                        _2605 = _2450;
                        _2606 = _2452;
                        _2607 = _2608;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2448;
                frontier_phi_60_61_ladder_1 = _2452;
                frontier_phi_60_61_ladder_2 = _2450;
                frontier_phi_60_61_ladder_3 = _2446;
                frontier_phi_60_61_ladder_4 = _2444;
                frontier_phi_60_61_ladder_5 = _2442;
            }
            else
            {
                frontier_phi_60_61_ladder = _2327;
                frontier_phi_60_61_ladder_1 = _2331;
                frontier_phi_60_61_ladder_2 = _2329;
                frontier_phi_60_61_ladder_3 = _2325;
                frontier_phi_60_61_ladder_4 = _2323;
                frontier_phi_60_61_ladder_5 = _2321;
            }
            _2441 = frontier_phi_60_61_ladder_5;
            _2443 = frontier_phi_60_61_ladder_4;
            _2445 = frontier_phi_60_61_ladder_3;
            _2447 = frontier_phi_60_61_ladder;
            _2449 = frontier_phi_60_61_ladder_2;
            _2451 = frontier_phi_60_61_ladder_1;
        }
        float _2456 = isnan(1.0) ? _458 : (isnan(_458) ? 1.0 : min(_458, 1.0));
        _2231 = (_2456 * _2447) + _1684;
        _2233 = (_2456 * _2449) + _1686;
        _2235 = (_2456 * _2451) + _1688;
        _2237 = ((_2441 * 0.039999999105930328369140625) * _2456) + _2017;
        _2239 = ((_2443 * 0.039999999105930328369140625) * _2456) + _2019;
        _2241 = ((_2445 * 0.039999999105930328369140625) * _2456) + _2021;
    }
    else
    {
        _2231 = _1684;
        _2233 = _1686;
        _2235 = _1688;
        _2237 = _2017;
        _2239 = _2019;
        _2241 = _2021;
    }
    float _4164 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _4175 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _4186 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _4197 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _2259 = ((isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_2231 + ((isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))) * _458))) + ((_2237 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _1297)) * cbPerFrame._m0[3u].x);
    float _2260 = ((isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_2233 + ((isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))) * _458))) + ((_2239 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _1297)) * cbPerFrame._m0[3u].x);
    float _2261 = ((isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_2235 + ((isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0))) * _458))) + ((_2241 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _1297)) * cbPerFrame._m0[3u].x);
    float _2266 = cbInstanceData._m0[_432 + 6u].w * (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)));
    float _2271 = _392 / cbSceneParam._m0[86u].x;
    float _2272 = _393 / cbSceneParam._m0[86u].y;
    vec4 _2286 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2271, _2272, (log2((isnan(cbSceneParam._m0[77u].w) ? _312 : (isnan(_312) ? cbSceneParam._m0[77u].w : min(_312, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2288 = _2286.x;
    float _2289 = _2286.y;
    float _2290 = _2286.z;
    float _2291 = _2286.w;
    float _2383;
    float _2385;
    float _2387;
    float _2389;
    if (_312 > cbSceneParam._m0[78u].w)
    {
        float _2346 = isnan(_312) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _312 : min(cbSceneParam._m0[80u].w, _312));
        float _2347 = _2346 / _312;
        float _2358 = _2347 * _364;
        float _2359 = _365 * _2347;
        float _2360 = (-0.0) - _2359;
        float _2361 = _2347 * _366;
        float _2363 = (cbSceneParam._m0[77u].w * _2360) / _2346;
        float _2364 = _2363 + cbSceneParam._m0[79u].w;
        float _2365 = cbSceneParam._m0[79u].w - _2359;
        float _2371 = sqrt(((_2358 * _2358) + (_2359 * _2359)) + (_2361 * _2361));
        float _2374 = (1.0 - (cbSceneParam._m0[77u].w / _2346)) * _2371;
        float _2379 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2381 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2558;
        if (abs((_2360 - _2363) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2558 = ((((_2364 > 0.0) ? exp2(_2379 * _2364) : (2.0 - exp2(_2381 * _2364))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2374;
        }
        else
        {
            float _2502 = 1.0 / cbSceneParam._m0[80u].x;
            float _2503 = isnan(_2365) ? _2364 : (isnan(_2364) ? _2365 : max(_2364, _2365));
            float _2504 = isnan(_2365) ? _2364 : (isnan(_2364) ? _2365 : min(_2364, _2365));
            float _2513 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : min(_2503, 0.0));
            float _2514 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : min(_2504, 0.0));
            _2558 = ((abs(_2371 / _2360) * cbSceneParam._m0[80u].y) * ((((_2513 - _2514) * 2.0) - ((exp2(_2379 * (isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0)))) - exp2(_2379 * (isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0))))) * _2502)) - ((exp2(_2381 * _2513) - exp2(_2381 * _2514)) * _2502))) + (_2374 * cbSceneParam._m0[80u].z);
        }
        vec4 _2560 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2271, _2272, 1.0), 0.0);
        float _2569 = exp2((_2558 * (-1.44269502162933349609375)) * (1.0 - _2560.w));
        float _2570 = log2(_2569);
        float _2586 = log2(_2291);
        _2383 = (exp2(_2586 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2570 * cbSceneParam._m0[78u].x)) * _2560.x) / cbSceneParam._m0[78u].x)) + _2288;
        _2385 = (exp2(_2586 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2570 * cbSceneParam._m0[78u].y)) * _2560.y) / cbSceneParam._m0[78u].y)) + _2289;
        _2387 = (exp2(_2586 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2570 * cbSceneParam._m0[78u].z)) * _2560.z) / cbSceneParam._m0[78u].z)) + _2290;
        _2389 = _2569 * _2291;
    }
    else
    {
        _2383 = _2288;
        _2385 = _2289;
        _2387 = _2290;
        _2389 = _2291;
    }
    bool _2596;
    vec4 _2399;
    vec4 _2421;
    float _2423;
    float _2427;
    float _2428;
    float _2429;
    float _2430;
    bool _2440;
    for (;;)
    {
        _2399 = cbMatDynParam._m0[0u];
        float _2401 = roundEven(_2399.y);
        bool _2402 = _2401 == 3.0;
        float _2403 = log2(_2389);
        float _2410 = exp2(_2403 * cbSceneParam._m0[78u].x) * _2259;
        float _2411 = exp2(_2403 * cbSceneParam._m0[78u].y) * _2260;
        float _2412 = exp2(_2403 * cbSceneParam._m0[78u].z) * _2261;
        float _2419 = _380 + (-0.5);
        _2421 = cbMtdParam._m0[1u];
        _2423 = _2421.y * _2419;
        float _2426 = (_2401 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2427 = _2426 * (_2402 ? _2410 : (_2410 + (cbSceneParam._m0[72u].w * _2383)));
        _2428 = _2426 * (_2402 ? _2411 : (_2411 + (cbSceneParam._m0[72u].w * _2385)));
        _2429 = _2426 * (_2402 ? _2412 : (_2412 + (cbSceneParam._m0[72u].w * _2387)));
        _2430 = _2419 * 0.999000012874603271484375;
        _2440 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2440)
        {
            if ((cbInstanceData._m0[_432 + 7u].x + _2430) < 0.5)
            {
                _2596 = true;
                break;
            }
        }
        uint _2537 = _434 + uint(_2399.w);
        if ((cbInstanceData._m0[_2537].w < 1.0) && ((cbInstanceData._m0[_2537].w + _2430) < 0.5))
        {
            _2596 = true;
            break;
        }
        if ((_2423 + _242) < _2421.x)
        {
            _2596 = true;
            break;
        }
        _2596 = false;
        break;
    }
    float _2801;
    if (_2596)
    {
        discard_state = true;
        _2801 = 0.0;
    }
    else
    {
        _2801 = _2266;
    }
    SV_Target.x = _2427;
    SV_Target.y = _2428;
    SV_Target.z = _2429;
    SV_Target.w = _2801;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2266;
    discard_exit();
}


