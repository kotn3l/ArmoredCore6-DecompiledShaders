#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _812;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _186 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _193 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _194 = _193 * NORMAL.x;
    float _195 = _193 * NORMAL.y;
    float _196 = _193 * NORMAL.z;
    float _200 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208;
    float _209;
    float _210;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _208 = (-0.0) - _194;
        _209 = (-0.0) - _195;
        _210 = (-0.0) - _196;
    }
    else
    {
        _208 = _194;
        _209 = _195;
        _210 = _196;
    }
    vec4 _230 = texture(sampler2D(M_AMSN_M0_M1_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = _230.x * cbMtdParam._m0[9u].x;
    float _238 = _230.y * cbMtdParam._m0[9u].y;
    float _239 = _230.z * cbMtdParam._m0[9u].z;
    float _240 = _230.w * TEXCOORD_1.z;
    vec4 _252 = texture(sampler2D(M_AMSN_M0_M1_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _256 = _252.z;
    float _260 = (_252.x * 2.0) + (-1.0);
    float _262 = (_252.y * 2.0) + (-1.0);
    float _263 = dot(vec2(_260, _262), vec2(_260, _262));
    float _3130 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _269 = sqrt(1.0 - (isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0))));
    float _272 = fma(_269, _208, fma(_262, _200 * TANGENT.x, (_186 * _178) * _260));
    float _275 = fma(_269, _209, fma(_262, _200 * TANGENT.y, (_186 * _179) * _260));
    float _278 = fma(_269, _210, fma(_262, _200 * TANGENT.z, (_186 * _180) * _260));
    float _282 = inversesqrt(dot(vec3(_272, _275, _278), vec3(_272, _275, _278)));
    float _283 = _282 * _272;
    float _284 = _282 * _275;
    float _285 = _282 * _278;
    float _3141 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _286 = isnan(1.0) ? _3141 : (isnan(_3141) ? 1.0 : min(_3141, 1.0));
    float _3152 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _287 = isnan(1.0) ? _3152 : (isnan(_3152) ? 1.0 : min(_3152, 1.0));
    float _3163 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3174 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3185 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _306 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _348 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _358 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _348);
    float _359 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _348);
    float _360 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _348);
    float _364 = inversesqrt(dot(vec3(_358, _359, _360), vec3(_358, _359, _360)));
    float _365 = _358 * _364;
    float _366 = _359 * _364;
    float _367 = _360 * _364;
    float _373 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _374 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _395 = fma(_285, cbSceneParam._m0[5u].z, fma(_284, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _283));
    float _398 = fma(_285, cbSceneParam._m0[6u].z, fma(_284, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _283));
    float _401 = fma(_285, cbSceneParam._m0[7u].z, fma(_284, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _283));
    uint _414 = uint(roundEven(NORMAL.w)) * 13u;
    uint _417 = (_414 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _423 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3163 : (isnan(_3163) ? 1.0 : min(_3163, 1.0)))) * cbInstanceData._m0[_417].x;
    float _424 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3174 : (isnan(_3174) ? 1.0 : min(_3174, 1.0)))) * cbInstanceData._m0[_417].y;
    float _425 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0)))) * cbInstanceData._m0[_417].z;
    float _3196 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _426 = isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0));
    float _3207 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _427 = isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0));
    float _3218 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _428 = isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0));
    vec4 _437 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _373, cbSceneParam._m0[86u].y * _374));
    float _440 = _437.x * TEXCOORD_1.w;
    float _441 = dot(vec3(_283, _284, _285), vec3(_365, _366, _367));
    float _444 = _441 * 2.0;
    float _448 = (_444 * _283) - _365;
    float _449 = (_444 * _284) - _366;
    float _450 = (_444 * _285) - _367;
    float _454 = abs(dot(vec3(_365, _366, _367), vec3(_283, _284, _285)));
    float _3229 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _456 = sqrt(_287);
    float _469 = exp2((_456 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_456 * 3.0));
    float _501 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _505 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _509 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _811;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    float _821;
    float _822;
    float _823;
    float _824;
    float _825;
    float _826;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _536 = fma(_509, cbModelParam._m0[26u].z, fma(_505, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _501));
        float _540 = fma(_509, cbModelParam._m0[27u].z, fma(_505, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _501));
        float _544 = fma(_509, cbModelParam._m0[28u].z, fma(_505, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _501));
        float _569 = _501 + _283;
        float _570 = _505 + _284;
        float _571 = _509 + _285;
        float _581 = fma(_571, cbModelParam._m0[26u].z, fma(_570, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _569)) - _536;
        float _582 = fma(_571, cbModelParam._m0[27u].z, fma(_570, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _569)) - _540;
        float _583 = fma(_571, cbModelParam._m0[28u].z, fma(_570, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _569)) - _544;
        float _587 = inversesqrt(dot(vec3(_581, _582, _583), vec3(_581, _582, _583)));
        float _600 = ((_587 * _581) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_536 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _601 = ((_587 * _582) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_540 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _602 = ((_587 * _583) / cbModelParam._m0[34u].z) + ((((((_544 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _605 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_600, _601, _602), 0.0);
        vec4 _612 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_600, _601, _602), 0.0);
        vec4 _619 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_600, _601, _602), 0.0);
        vec4 _626 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_600, _601, _602), 0.0);
        float _639 = exp2((_605.w + (-0.5)) * 20.0) * 2.0;
        float _640 = _639 * (_605.x + (-0.5));
        float _641 = _639 * (_605.y + (-0.5));
        float _642 = _639 * (_605.z + (-0.5));
        float _649 = exp2((_612.w + (-0.5)) * 20.0) * 2.0;
        float _650 = _649 * (_612.x + (-0.5));
        float _651 = _649 * (_612.y + (-0.5));
        float _652 = _649 * (_612.z + (-0.5));
        float _659 = exp2((_619.w + (-0.5)) * 20.0) * 2.0;
        float _660 = _659 * (_619.x + (-0.5));
        float _661 = _659 * (_619.y + (-0.5));
        float _662 = _659 * (_619.z + (-0.5));
        float _669 = exp2((_626.w + (-0.5)) * 20.0) * 2.0;
        float _670 = _669 * (_626.x + (-0.5));
        float _671 = _669 * (_626.y + (-0.5));
        float _672 = _669 * (_626.z + (-0.5));
        float _673 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _674 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
        float _675 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _676 = _640 * 0.5;
        float _677 = _650 * 0.5;
        float _678 = _660 * 0.5;
        float _679 = dot(vec3(_676, _677, _678), vec3(_676, _677, _678));
        float _684 = (_679 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_679);
        float _693 = (dot(vec3(_283, _284, _285), vec3(_684 * _676, _684 * _677, _684 * _678)) + 1.0) * 0.5;
        float _3255 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _703 = sqrt(((_677 * _677) + (_676 * _676)) + (_678 * _678)) / (_673 + 9.9999997473787516355514526367188e-06);
        float _3266 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _704 = isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0));
        float _705 = _704 * 2.0;
        float _709 = (1.0 - _704) / (_704 + 1.0);
        float _3277 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _710 = isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0));
        float _719 = ((((1.0 - _710) * (_705 + 2.0)) * exp2(log2(isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0))) * (_705 + 1.0))) + _710) * _673;
        float _720 = _641 * 0.5;
        float _721 = _651 * 0.5;
        float _722 = _661 * 0.5;
        float _723 = dot(vec3(_720, _721, _722), vec3(_720, _721, _722));
        float _728 = (_723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_723);
        float _736 = (dot(vec3(_283, _284, _285), vec3(_728 * _720, _728 * _721, _728 * _722)) + 1.0) * 0.5;
        float _3288 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _745 = sqrt(((_721 * _721) + (_720 * _720)) + (_722 * _722)) / (_674 + 9.9999997473787516355514526367188e-06);
        float _3299 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0));
        float _747 = _746 * 2.0;
        float _751 = (1.0 - _746) / (_746 + 1.0);
        float _3310 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _752 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
        float _761 = ((((1.0 - _752) * (_747 + 2.0)) * exp2(log2(isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0))) * (_747 + 1.0))) + _752) * _674;
        float _762 = _642 * 0.5;
        float _763 = _652 * 0.5;
        float _764 = _662 * 0.5;
        float _765 = dot(vec3(_762, _763, _764), vec3(_762, _763, _764));
        float _770 = (_765 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_765);
        float _778 = (dot(vec3(_283, _284, _285), vec3(_770 * _762, _770 * _763, _770 * _764)) + 1.0) * 0.5;
        float _3321 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _787 = sqrt(((_763 * _763) + (_762 * _762)) + (_764 * _764)) / (_675 + 9.9999997473787516355514526367188e-06);
        float _3332 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
        float _789 = _788 * 2.0;
        float _793 = (1.0 - _788) / (_788 + 1.0);
        float _3343 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0));
        float _803 = ((((1.0 - _794) * (_789 + 2.0)) * exp2(log2(isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0))) * (_789 + 1.0))) + _794) * _675;
        _811 = _642;
        _813 = _641;
        _814 = _640;
        _815 = _652;
        _816 = _651;
        _817 = _650;
        _818 = _662;
        _819 = _661;
        _820 = _660;
        _821 = _675;
        _822 = _674;
        _823 = _673;
        _824 = cbModelParam._m0[36u].z * (isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0)));
        _825 = cbModelParam._m0[36u].z * (isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0)));
        _826 = cbModelParam._m0[36u].z * (isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0)));
    }
    else
    {
        _811 = _812;
        _813 = _812;
        _814 = _812;
        _815 = _812;
        _816 = _812;
        _817 = _812;
        _818 = _812;
        _819 = _812;
        _820 = _812;
        _821 = _812;
        _822 = _812;
        _823 = _812;
        _824 = 0.0;
        _825 = 0.0;
        _826 = 0.0;
    }
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _852 = fma(_509, cbModelParam._m0[30u].z, fma(_505, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _501));
        float _856 = fma(_509, cbModelParam._m0[31u].z, fma(_505, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _501));
        float _860 = fma(_509, cbModelParam._m0[32u].z, fma(_505, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _501));
        float _883 = _501 + _283;
        float _884 = _505 + _284;
        float _885 = _509 + _285;
        float _895 = fma(_885, cbModelParam._m0[30u].z, fma(_884, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _883)) - _852;
        float _896 = fma(_885, cbModelParam._m0[31u].z, fma(_884, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _883)) - _856;
        float _897 = fma(_885, cbModelParam._m0[32u].z, fma(_884, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _883)) - _860;
        float _901 = inversesqrt(dot(vec3(_895, _896, _897), vec3(_895, _896, _897)));
        float _914 = ((_901 * _895) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_852 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _915 = ((_901 * _896) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_856 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _916 = ((_901 * _897) / cbModelParam._m0[35u].z) + ((((((_860 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        float _951 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_918.x + (-0.5));
        float _953 = _951 * (_918.y + (-0.5));
        float _954 = _951 * (_918.z + (-0.5));
        float _961 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_925.x + (-0.5));
        float _963 = _961 * (_925.y + (-0.5));
        float _964 = _961 * (_925.z + (-0.5));
        float _971 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_932.x + (-0.5));
        float _973 = _971 * (_932.y + (-0.5));
        float _974 = _971 * (_932.z + (-0.5));
        float _981 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_939.x + (-0.5));
        float _983 = _981 * (_939.y + (-0.5));
        float _984 = _981 * (_939.z + (-0.5));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = _952 * 0.5;
        float _989 = _962 * 0.5;
        float _990 = _972 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_283, _284, _285), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3384 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _3395 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3406 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0))) * (_1015 + 1.0))) + _1020) * _985;
        float _1030 = _953 * 0.5;
        float _1031 = _963 * 0.5;
        float _1032 = _973 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1046 = (dot(vec3(_283, _284, _285), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3417 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1055 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _3428 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _3439 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))) * (_1057 + 1.0))) + _1062) * _986;
        float _1072 = _954 * 0.5;
        float _1073 = _964 * 0.5;
        float _1074 = _974 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1088 = (dot(vec3(_283, _284, _285), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3450 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1097 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3461 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3472 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) * (_1099 + 1.0))) + _1104) * _987;
        _1121 = _954;
        _1122 = _953;
        _1123 = _952;
        _1124 = _964;
        _1125 = _963;
        _1126 = _962;
        _1127 = _974;
        _1128 = _973;
        _1129 = _972;
        _1130 = _987;
        _1131 = _986;
        _1132 = _985;
        _1133 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
        _1134 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
        _1135 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
    }
    else
    {
        _1121 = _812;
        _1122 = _812;
        _1123 = _812;
        _1124 = _812;
        _1125 = _812;
        _1126 = _812;
        _1127 = _812;
        _1128 = _812;
        _1129 = _812;
        _1130 = _812;
        _1131 = _812;
        _1132 = _812;
        _1133 = 0.0;
        _1134 = 0.0;
        _1135 = 0.0;
    }
    float _1145 = (cbModelParam._m0[1u].x * (_1133 - _824)) + _824;
    float _1146 = (cbModelParam._m0[1u].x * (_1134 - _825)) + _825;
    float _1147 = (cbModelParam._m0[1u].x * (_1135 - _826)) + _826;
    float _1168 = fma(_1147, cbSceneParam._m0[89u].z, fma(_1146, cbSceneParam._m0[89u].y, _1145 * cbSceneParam._m0[89u].x));
    float _1171 = fma(_1147, cbSceneParam._m0[90u].z, fma(_1146, cbSceneParam._m0[90u].y, _1145 * cbSceneParam._m0[90u].x));
    float _1174 = fma(_1147, cbSceneParam._m0[91u].z, fma(_1146, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1145));
    float _1189 = _448 * 0.5;
    float _1190 = _449 * 0.5;
    float _1191 = _450 * 0.5;
    float _1192 = dot(vec4(_1189, _1190, _1191, 1.0), vec4(_1123, _1126, _1129, _1132));
    float _1195 = dot(vec4(_1189, _1190, _1191, 1.0), vec4(_1122, _1125, _1128, _1131));
    float _1198 = dot(vec4(_1189, _1190, _1191, 1.0), vec4(_1121, _1124, _1127, _1130));
    float _1232;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1205 = dot(vec4(_1189, _1190, _1191, 1.0), vec4(_811, _815, _818, _821));
        float _1209 = dot(vec4(_1189, _1190, _1191, 1.0), vec4(_813, _816, _819, _822));
        float _1213 = dot(vec4(_1189, _1190, _1191, 1.0), vec4(_814, _817, _820, _823));
        float _1220 = dot(vec4(cbModelParam._m0[39u]), vec4(_1189, _1190, _1191, 1.0));
        _1232 = dot(vec3(isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)), isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)), isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1220) ? 0.0 : (isnan(0.0) ? _1220 : max(0.0, _1220))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1232 = 1.0;
    }
    float _1243;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1234 = dot(vec4(cbModelParam._m0[40u]), vec4(_1189, _1190, _1191, 1.0));
        _1243 = dot(vec3(isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)), isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)), isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1234) ? 0.0 : (isnan(0.0) ? _1234 : max(0.0, _1234))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1243 = 1.0;
    }
    float _1247 = (_1243 * cbModelParam._m0[1u].x) + (_1232 * (1.0 - cbModelParam._m0[1u].x));
    float _1257 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _287);
    float _1258 = isnan(_1257) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1257 : min(cbModelParam._m0[25u].z, _1257));
    float _1340;
    float _1342;
    float _1344;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1307 = fma(_509, cbModelParam._m0[13u].z, fma(_505, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _501)) + cbModelParam._m0[13u].w;
        float _1311 = fma(_509, cbModelParam._m0[14u].z, fma(_505, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _501)) + cbModelParam._m0[14u].w;
        float _1315 = fma(_509, cbModelParam._m0[15u].z, fma(_505, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _501)) + cbModelParam._m0[15u].w;
        float _1318 = fma(_450, cbModelParam._m0[13u].z, fma(_449, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _448));
        float _1321 = fma(_450, cbModelParam._m0[14u].z, fma(_449, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _448));
        float _1324 = fma(_450, cbModelParam._m0[15u].z, fma(_449, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _448));
        float _1352;
        if (_1318 > 0.0)
        {
            _1352 = abs((1.0 - _1307) / _1318);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1318 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1307 + 1.0) / _1318);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1352 = frontier_phi_16_14_ladder;
        }
        float _1558;
        if (_1321 > 0.0)
        {
            _1558 = abs((1.0 - _1311) / _1321);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1321 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1311 + 1.0) / _1321);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1558 = frontier_phi_25_21_ladder;
        }
        float _1801;
        if (_1324 > 0.0)
        {
            _1801 = abs((1.0 - _1315) / _1324);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1324 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1315 + 1.0) / _1324);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1801 = frontier_phi_37_32_ladder;
        }
        float _1803 = isnan(_1558) ? _1352 : (isnan(_1352) ? _1558 : min(_1352, _1558));
        float _1804 = isnan(_1801) ? _1803 : (isnan(_1803) ? _1801 : min(_1803, _1801));
        float _1808 = (_1804 * _1318) + _1307;
        float _1809 = (_1804 * _1321) + _1311;
        float _1810 = (_1804 * _1324) + _1315;
        float _1811 = _1804 * 9.9999997473787516355514526367188e-05;
        float _1813 = (-1.0) - _1811;
        float _1815 = _1811 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1810 > _1815) || ((_1810 < _1813) || ((_1809 > _1815) || ((_1809 < _1813) || ((_1808 < _1813) || (_1808 > _1815))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1934 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1810, cbModelParam._m0[9u].z, fma(_1809, cbModelParam._m0[9u].y, _1808 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1810, cbModelParam._m0[10u].z, fma(_1809, cbModelParam._m0[10u].y, _1808 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1810, cbModelParam._m0[11u].z, fma(_1809, cbModelParam._m0[11u].y, _1808 * cbModelParam._m0[11u].x))), _1258);
            frontier_phi_15_37_ladder = _1934.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1934.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1934.x * cbModelParam._m0[1u].y;
        }
        _1340 = frontier_phi_15_37_ladder_2;
        _1342 = frontier_phi_15_37_ladder_1;
        _1344 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1328 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_448, _449, _450), _1258);
        _1340 = _1328.x * cbModelParam._m0[1u].y;
        _1342 = _1328.y * cbModelParam._m0[1u].y;
        _1344 = _1328.z * cbModelParam._m0[1u].y;
    }
    float _1348 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _287);
    float _1349 = isnan(_1348) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1348 : min(cbModelParam._m0[25u].w, _1348));
    float _1442;
    float _1444;
    float _1446;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1406 = fma(_509, cbModelParam._m0[21u].z, fma(_505, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _501)) + cbModelParam._m0[21u].w;
        float _1410 = fma(_509, cbModelParam._m0[22u].z, fma(_505, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _501)) + cbModelParam._m0[22u].w;
        float _1414 = fma(_509, cbModelParam._m0[23u].z, fma(_505, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _501)) + cbModelParam._m0[23u].w;
        float _1417 = fma(_450, cbModelParam._m0[21u].z, fma(_449, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _448));
        float _1420 = fma(_450, cbModelParam._m0[22u].z, fma(_449, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _448));
        float _1423 = fma(_450, cbModelParam._m0[23u].z, fma(_449, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _448));
        float _1563;
        if (_1417 > 0.0)
        {
            _1563 = abs((1.0 - _1406) / _1417);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1417 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1406 + 1.0) / _1417);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1563 = frontier_phi_27_23_ladder;
        }
        float _1828;
        if (_1420 > 0.0)
        {
            _1828 = abs((1.0 - _1410) / _1420);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1420 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1410 + 1.0) / _1420);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1828 = frontier_phi_39_34_ladder;
        }
        float _2033;
        if (_1423 > 0.0)
        {
            _2033 = abs((1.0 - _1414) / _1423);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1423 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1414 + 1.0) / _1423);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2033 = frontier_phi_48_45_ladder;
        }
        float _2035 = isnan(_1828) ? _1563 : (isnan(_1563) ? _1828 : min(_1563, _1828));
        float _2036 = isnan(_2033) ? _2035 : (isnan(_2035) ? _2033 : min(_2035, _2033));
        float _2040 = (_2036 * _1417) + _1406;
        float _2041 = (_2036 * _1420) + _1410;
        float _2042 = (_2036 * _1423) + _1414;
        float _2043 = _2036 * 9.9999997473787516355514526367188e-05;
        float _2044 = (-1.0) - _2043;
        float _2046 = _2043 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2042 > _2046) || ((_2042 < _2044) || ((_2041 > _2046) || ((_2041 < _2044) || ((_2040 < _2044) || (_2040 > _2046))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2242 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2042, cbModelParam._m0[17u].z, fma(_2041, cbModelParam._m0[17u].y, _2040 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2042, cbModelParam._m0[18u].z, fma(_2041, cbModelParam._m0[18u].y, _2040 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2042, cbModelParam._m0[19u].z, fma(_2041, cbModelParam._m0[19u].y, _2040 * cbModelParam._m0[19u].x))), _1349);
            frontier_phi_24_48_ladder = _2242.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2242.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2242.x * cbModelParam._m0[1u].z;
        }
        _1442 = frontier_phi_24_48_ladder_2;
        _1444 = frontier_phi_24_48_ladder_1;
        _1446 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1426 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_448, _449, _450), _1349);
        _1442 = _1426.x * cbModelParam._m0[1u].z;
        _1444 = _1426.y * cbModelParam._m0[1u].z;
        _1446 = _1426.z * cbModelParam._m0[1u].z;
    }
    float _1458 = ((((1.0 - _469) * ((_456 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_469 * _456)) * _440;
    float _1459 = _1458 * ((cbModelParam._m0[1u].w * (_1442 - _1340)) + _1340);
    float _1460 = _1458 * ((cbModelParam._m0[1u].w * (_1444 - _1342)) + _1342);
    float _1461 = _1458 * ((cbModelParam._m0[1u].w * (_1446 - _1344)) + _1344);
    float _1464 = fma(_1461, cbSceneParam._m0[89u].z, fma(_1460, cbSceneParam._m0[89u].y, _1459 * cbSceneParam._m0[89u].x));
    float _1467 = fma(_1461, cbSceneParam._m0[90u].z, fma(_1460, cbSceneParam._m0[90u].y, _1459 * cbSceneParam._m0[90u].x));
    float _1470 = fma(_1461, cbSceneParam._m0[91u].z, fma(_1460, cbSceneParam._m0[91u].y, _1459 * cbSceneParam._m0[91u].x));
    uvec4 _1480 = floatBitsToUint(cbInstanceData._m0[_414 + 5u]);
    uint _1482 = _1480.x * 14u;
    uint _1483 = _1482 + 13u;
    float _1490 = _440 + (-1.0);
    float _1495 = (cbLight._m0[_1483].x * _1490) + 1.0;
    float _1496 = (cbLight._m0[_1483].y * _1490) + 1.0;
    float _1497 = (cbLight._m0[_1483].z * _1490) + 1.0;
    float _1498 = (cbLight._m0[_1483].w * _1490) + 1.0;
    uint _1499 = _1482 + 5u;
    float _1505 = isnan(1.0) ? _1496 : (isnan(_1496) ? 1.0 : min(_1496, 1.0));
    uint _1509 = _1482 + 4u;
    float _1516 = isnan(1.0) ? _1495 : (isnan(_1495) ? 1.0 : min(_1495, 1.0));
    uint _1520 = _1482 | 1u;
    float _1531 = dot(vec3(cbLight._m0[_1482].xyz), vec3(_283, _284, _285));
    float _1534 = dot(vec3(cbLight._m0[_1520].xyz), vec3(_283, _284, _285));
    float _3608 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
    float _3619 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
    float _1539 = (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * 0.3183098733425140380859375;
    float _1541 = (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * 0.3183098733425140380859375;
    float _1548 = ((cbLight._m0[_1499].x * _1505) * _1541) + ((cbLight._m0[_1509].x * _1516) * _1539);
    float _1549 = ((_1505 * cbLight._m0[_1499].y) * _1541) + ((_1516 * cbLight._m0[_1509].y) * _1539);
    float _1550 = ((_1505 * cbLight._m0[_1499].z) * _1541) + ((_1516 * cbLight._m0[_1509].z) * _1539);
    uvec4 _1555 = floatBitsToUint(cbLight._m0[_1482 + 12u]);
    bool _1557 = _1555.x == 0u;
    float _1568;
    float _1570;
    float _1572;
    if (_1557)
    {
        _1568 = _1548;
        _1570 = _1549;
        _1572 = _1550;
    }
    else
    {
        uint _1576 = _1482 + 6u;
        float _1592 = (dot(vec3(cbLight._m0[_1482 + 2u].xyz), vec3(_283, _284, _285)) * 0.5) + 0.5;
        float _1593 = _1592 * _1592;
        float _3630 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _1595 = isnan(1.0) ? _1497 : (isnan(_1497) ? 1.0 : min(_1497, 1.0));
        _1568 = (((cbLight._m0[_1576].x * 0.3183098733425140380859375) * _1594) * _1595) + _1548;
        _1570 = (((cbLight._m0[_1576].y * 0.3183098733425140380859375) * _1594) * _1595) + _1549;
        _1572 = (((cbLight._m0[_1576].z * 0.3183098733425140380859375) * _1594) * _1595) + _1550;
    }
    bool _1575 = _1555.y == 0u;
    float _1613;
    float _1615;
    float _1617;
    if (_1575)
    {
        _1613 = _1568;
        _1615 = _1570;
        _1617 = _1572;
    }
    else
    {
        uint _1772 = _1482 + 7u;
        float _1788 = (dot(vec3(cbLight._m0[_1482 + 3u].xyz), vec3(_283, _284, _285)) * 0.5) + 0.5;
        float _1789 = _1788 * _1788;
        float _3646 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1790 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1791 = isnan(1.0) ? _1498 : (isnan(_1498) ? 1.0 : min(_1498, 1.0));
        _1613 = (((cbLight._m0[_1772].x * 0.3183098733425140380859375) * _1790) * _1791) + _1568;
        _1615 = (((cbLight._m0[_1772].y * 0.3183098733425140380859375) * _1790) * _1791) + _1570;
        _1617 = (((cbLight._m0[_1772].z * 0.3183098733425140380859375) * _1790) * _1791) + _1572;
    }
    uint _1620 = _1482 + 8u;
    float _1633 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1482].w)) * _287) * 0.949999988079071044921875);
    float _1634 = _1633 * _1633;
    float _1635 = cbLight._m0[_1482].x + _365;
    float _1636 = cbLight._m0[_1482].y + _366;
    float _1637 = cbLight._m0[_1482].z + _367;
    float _1641 = inversesqrt(dot(vec3(_1635, _1636, _1637), vec3(_1635, _1636, _1637)));
    float _1642 = _1641 * _1635;
    float _1643 = _1641 * _1636;
    float _1644 = _1641 * _1637;
    float _1645 = dot(vec3(_283, _284, _285), vec3(cbLight._m0[_1482].xyz));
    float _3662 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
    float _1648 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _3673 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _1649 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _1650 = dot(vec3(_283, _284, _285), vec3(_1642, _1643, _1644));
    float _3684 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
    float _1653 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _1654 = dot(vec3(cbLight._m0[_1482].xyz), vec3(_1642, _1643, _1644));
    float _3695 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
    float _1658 = _1634 * _1634;
    float _1662 = ((_1653 * _1653) * (_1658 + (-1.0))) + 1.0;
    float _1673 = (exp2(log2(1.0 - (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1674 = 1.0 - _1634;
    float _1685 = (0.5 / (((_1649 * ((_1648 * _1674) + _1634)) + 9.9999999392252902907785028219223e-09) + (((_1649 * _1674) + _1634) * _1648))) * _1648;
    float _3706 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
    float _1687 = (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1658 / ((_1662 * _1662) * 3.141590118408203125));
    uint _1698 = _1482 + 9u;
    float _1709 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1520].w)) * _287) * 0.949999988079071044921875);
    float _1710 = _1709 * _1709;
    float _1711 = cbLight._m0[_1520].x + _365;
    float _1712 = cbLight._m0[_1520].y + _366;
    float _1713 = cbLight._m0[_1520].z + _367;
    float _1717 = inversesqrt(dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713)));
    float _1718 = _1717 * _1711;
    float _1719 = _1717 * _1712;
    float _1720 = _1717 * _1713;
    float _1721 = dot(vec3(_283, _284, _285), vec3(cbLight._m0[_1520].xyz));
    float _3717 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1724 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _1725 = dot(vec3(_283, _284, _285), vec3(_1718, _1719, _1720));
    float _3728 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _1728 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _1729 = dot(vec3(cbLight._m0[_1520].xyz), vec3(_1718, _1719, _1720));
    float _3739 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _1733 = _1710 * _1710;
    float _1737 = ((_1728 * _1728) * (_1733 + (-1.0))) + 1.0;
    float _1746 = (exp2(log2(1.0 - (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1747 = 1.0 - _1710;
    float _1757 = (0.5 / (((_1649 * ((_1724 * _1747) + _1710)) + 9.9999999392252902907785028219223e-09) + (((_1649 * _1747) + _1710) * _1724))) * _1724;
    float _3750 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1759 = (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_1733 / ((_1737 * _1737) * 3.141590118408203125));
    float _1769 = (((_1746 * cbLight._m0[_1698].x) * _1759) * _1505) + (((_1673 * cbLight._m0[_1620].x) * _1687) * _1516);
    float _1770 = (((_1746 * cbLight._m0[_1698].y) * _1759) * _1505) + (((_1673 * cbLight._m0[_1620].y) * _1687) * _1516);
    float _1771 = (((_1746 * cbLight._m0[_1698].z) * _1759) * _1505) + (((_1673 * cbLight._m0[_1620].z) * _1687) * _1516);
    float _1833;
    float _1835;
    float _1837;
    if (_1557)
    {
        _1833 = _1769;
        _1835 = _1770;
        _1837 = _1771;
    }
    else
    {
        uint _1839 = _1482 + 2u;
        uint _1843 = _1482 + 10u;
        float _1857 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1839].w)) * _287) * 0.949999988079071044921875);
        float _1858 = _1857 * _1857;
        float _1859 = cbLight._m0[_1839].x + _365;
        float _1860 = cbLight._m0[_1839].y + _366;
        float _1861 = cbLight._m0[_1839].z + _367;
        float _1865 = inversesqrt(dot(vec3(_1859, _1860, _1861), vec3(_1859, _1860, _1861)));
        float _1866 = _1865 * _1859;
        float _1867 = _1865 * _1860;
        float _1868 = _1865 * _1861;
        float _1869 = dot(vec3(_283, _284, _285), vec3(cbLight._m0[_1839].xyz));
        float _3761 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1872 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1873 = dot(vec3(_283, _284, _285), vec3(_1866, _1867, _1868));
        float _3772 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1876 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1877 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_1866, _1867, _1868));
        float _3783 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _1881 = _1858 * _1858;
        float _1885 = ((_1876 * _1876) * (_1881 + (-1.0))) + 1.0;
        float _1894 = (exp2(log2(1.0 - (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1895 = 1.0 - _1858;
        float _1905 = (0.5 / (((_1649 * ((_1872 * _1895) + _1858)) + 9.9999999392252902907785028219223e-09) + (((_1649 * _1895) + _1858) * _1872))) * _1872;
        float _3794 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1907 = (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1881 / ((_1885 * _1885) * 3.141590118408203125));
        float _1908 = isnan(1.0) ? _1497 : (isnan(_1497) ? 1.0 : min(_1497, 1.0));
        _1833 = (((_1894 * cbLight._m0[_1843].x) * _1907) * _1908) + _1769;
        _1835 = (((_1894 * cbLight._m0[_1843].y) * _1907) * _1908) + _1770;
        _1837 = (((_1894 * cbLight._m0[_1843].z) * _1907) * _1908) + _1771;
    }
    float _1943;
    float _1945;
    float _1947;
    if (_1575)
    {
        _1943 = _1833;
        _1945 = _1835;
        _1947 = _1837;
    }
    else
    {
        uint _1954 = _1482 + 3u;
        uint _1958 = _1482 + 11u;
        float _1972 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1954].w)) * _287) * 0.949999988079071044921875);
        float _1973 = _1972 * _1972;
        float _1974 = cbLight._m0[_1954].x + _365;
        float _1975 = cbLight._m0[_1954].y + _366;
        float _1976 = cbLight._m0[_1954].z + _367;
        float _1980 = inversesqrt(dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976)));
        float _1981 = _1980 * _1974;
        float _1982 = _1980 * _1975;
        float _1983 = _1980 * _1976;
        float _1984 = dot(vec3(_283, _284, _285), vec3(cbLight._m0[_1954].xyz));
        float _3810 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1987 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1988 = dot(vec3(_283, _284, _285), vec3(_1981, _1982, _1983));
        float _3821 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1991 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1992 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_1981, _1982, _1983));
        float _3832 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1996 = _1973 * _1973;
        float _2000 = ((_1991 * _1991) * (_1996 + (-1.0))) + 1.0;
        float _2009 = (exp2(log2(1.0 - (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2010 = 1.0 - _1973;
        float _2020 = (0.5 / (((_1649 * ((_1987 * _2010) + _1973)) + 9.9999999392252902907785028219223e-09) + (((_1649 * _2010) + _1973) * _1987))) * _1987;
        float _3843 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
        float _2022 = (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_1996 / ((_2000 * _2000) * 3.141590118408203125));
        float _2023 = isnan(1.0) ? _1498 : (isnan(_1498) ? 1.0 : min(_1498, 1.0));
        _1943 = (((_2009 * cbLight._m0[_1958].x) * _2022) * _2023) + _1833;
        _1945 = (((_2009 * cbLight._m0[_1958].y) * _2022) * _2023) + _1835;
        _1947 = (((_2009 * cbLight._m0[_1958].z) * _2022) * _2023) + _1837;
    }
    float _2157;
    float _2159;
    float _2161;
    float _2163;
    float _2165;
    float _2167;
    if (_1480.y == 0u)
    {
        float _2098 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2099 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2098;
        float _2100 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2098;
        float _2101 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2098;
        uvec4 _2113 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2114 = _2113.x;
        uint _2125 = uint((float(_2113.y) * floor(float(uint(cbSceneParam._m0[85u].y * _374) / _2114))) + floor(float(uint(cbSceneParam._m0[85u].x * _373) / _2114)));
        float _2135 = (log2(_2101 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2136 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        uint _2139 = uint(isnan(14.0) ? _2136 : (isnan(_2136) ? 14.0 : min(_2136, 14.0)));
        uvec4 _2144 = texelFetch(g_lightClusterGridBuffer, int(((_2139 << 2u) + (_2125 << 6u)) >> 2u));
        uint _2145 = _2144.x;
        uint _2146 = _2113.z;
        float _2247;
        float _2249;
        float _2251;
        float _2253;
        float _2255;
        float _2257;
        if (((((1u << ((_2146 >> 4u) & 15u)) + 4294967295u) & _2145) == 0u) || ((_2146 & 240u) == 0u))
        {
            _2247 = 0.0;
            _2249 = 0.0;
            _2251 = 0.0;
            _2253 = 0.0;
            _2255 = 0.0;
            _2257 = 0.0;
        }
        else
        {
            float _2248;
            float _2250;
            float _2252;
            float _2254;
            float _2256;
            float _2258;
            float _2391 = 0.0;
            float _2392 = 0.0;
            float _2393 = 0.0;
            float _2394 = 0.0;
            float _2395 = 0.0;
            float _2396 = 0.0;
            uint _2397 = 0u;
            uint _2406;
            bool _2407;
            for (;;)
            {
                _2406 = texelFetch(g_lightClassification, int((((_2139 << 5u) + (_2125 << 9u)) + (_2397 << 2u)) >> 2u)).x;
                _2407 = _2406 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2407)
                {
                    frontier_phi_63_pred = _2396;
                    frontier_phi_63_pred_1 = _2395;
                    frontier_phi_63_pred_2 = _2394;
                    frontier_phi_63_pred_3 = _2393;
                    frontier_phi_63_pred_4 = _2392;
                    frontier_phi_63_pred_5 = _2391;
                }
                else
                {
                    float _2515;
                    float _2516;
                    float _2517;
                    float _2518;
                    float _2519;
                    float _2520;
                    uint _2521;
                    _2515 = _2391;
                    _2516 = _2392;
                    _2517 = _2393;
                    _2518 = _2394;
                    _2519 = _2395;
                    _2520 = _2396;
                    _2521 = _2406;
                    float _2447;
                    float _2448;
                    float _2449;
                    float _2450;
                    float _2451;
                    float _2452;
                    for (;;)
                    {
                        uint _2525 = uint(findLSB(_2521)) + (_2397 << 5u);
                        uint _2522 = (_2521 + 4294967295u) & _2521;
                        uint _2527 = _2525 * 48u;
                        vec4 _2541 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2527)).x, texelFetch(g_PointLightRenderingBuffer, int(_2527 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2527 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2527 + 3u)).x));
                        uint _2547 = (_2525 * 48u) + 4u;
                        vec4 _2560 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2547)).x, texelFetch(g_PointLightRenderingBuffer, int(_2547 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2547 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2547 + 3u)).x));
                        uint _2566 = (_2525 * 48u) + 8u;
                        vec3 _2577 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2566)).x, texelFetch(g_PointLightRenderingBuffer, int(_2566 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2566 + 2u)).x));
                        float _2581 = _2541.x - _2099;
                        float _2582 = _2541.y - _2100;
                        float _2583 = _2541.z - _2101;
                        float _2584 = dot(vec3(_2581, _2582, _2583), vec3(_2581, _2582, _2583));
                        float _2587 = inversesqrt(_2584);
                        float _2588 = _2587 * _2581;
                        float _2589 = _2587 * _2582;
                        float _2590 = _2587 * _2583;
                        float _2591 = dot(vec3(_395, _398, _401), vec3(_2588, _2589, _2590));
                        float _2596 = 1.0 - (_2584 * _2541.w);
                        float _3869 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
                        float _2597 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
                        float _2598 = sqrt(_2584) * _2560.w;
                        float _2601 = 1.39999997615814208984375 / (_2598 + 1.39999997615814208984375);
                        float _2602 = _2601 * _2601;
                        float _2605 = ((1.0 - _2602) * _2591) + _2602;
                        float _2608 = _2598 * _2598;
                        float _2612 = ((isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0))) * _2597) / ((_2608 * 0.699999988079071044921875) + 1.0);
                        float _2616 = (-0.0) - _2099;
                        float _2617 = (-0.0) - _2100;
                        float _2618 = (-0.0) - _2101;
                        float _2622 = inversesqrt(dot(vec3(_2616, _2617, _2618), vec3(_2616, _2617, _2618)));
                        float _2623 = _2622 * _2616;
                        float _2624 = _2622 * _2617;
                        float _2625 = _2622 * _2618;
                        float _2633 = exp2(log2(1.0 / ((_2608 * 3.5) + 5.0)) * 0.25);
                        float _2634 = 1.0 - _456;
                        float _2641 = sqrt(1.0 - ((1.0 - (_2634 * _2634)) * (1.0 - (_2633 * _2633))));
                        float _2642 = _2641 * _2641;
                        float _2643 = _2642 * _2642;
                        float _2644 = _2623 + _2588;
                        float _2645 = _2624 + _2589;
                        float _2646 = _2625 + _2590;
                        float _2650 = inversesqrt(dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646)));
                        float _2654 = dot(vec3(_395, _398, _401), vec3(_2623, _2624, _2625));
                        float _3885 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
                        float _2657 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
                        float _2658 = dot(vec3(_395, _398, _401), vec3(_2650 * _2644, _2650 * _2645, _2650 * _2646));
                        float _3896 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
                        float _2661 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
                        float _2665 = ((_2661 * _2661) * (_2643 + (-1.0))) + 1.0;
                        float _2666 = _2601 * _2642;
                        float _2667 = _2666 * _2666;
                        float _2670 = ((1.0 - _2667) * _2591) + _2667;
                        float _3907 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
                        float _2671 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
                        float _2672 = 1.0 - _2642;
                        float _2682 = (0.5 / (((_2671 * ((_2657 * _2672) + _2642)) + 9.9999999392252902907785028219223e-09) + (((_2671 * _2672) + _2642) * _2657))) * _2671;
                        float _3918 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
                        float _2693 = (((_2643 * 3.1415927410125732421875) * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) / ((_2665 * _2665) * ((_2608 * 2.1991131305694580078125) + 3.141590118408203125))) * _2597;
                        _2450 = (_2612 * _2560.x) + _2518;
                        _2451 = (_2612 * _2560.y) + _2519;
                        _2452 = (_2612 * _2560.z) + _2520;
                        _2447 = (_2693 * _2577.x) + _2515;
                        _2448 = (_2693 * _2577.y) + _2516;
                        _2449 = (_2693 * _2577.z) + _2517;
                        if (_2522 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2515 = _2447;
                            _2516 = _2448;
                            _2517 = _2449;
                            _2518 = _2450;
                            _2519 = _2451;
                            _2520 = _2452;
                            _2521 = _2522;
                        }
                    }
                    frontier_phi_63_pred = _2452;
                    frontier_phi_63_pred_1 = _2451;
                    frontier_phi_63_pred_2 = _2450;
                    frontier_phi_63_pred_3 = _2449;
                    frontier_phi_63_pred_4 = _2448;
                    frontier_phi_63_pred_5 = _2447;
                }
                _2258 = frontier_phi_63_pred;
                _2256 = frontier_phi_63_pred_1;
                _2254 = frontier_phi_63_pred_2;
                _2252 = frontier_phi_63_pred_3;
                _2250 = frontier_phi_63_pred_4;
                _2248 = frontier_phi_63_pred_5;
                uint _2398 = _2397 + 1u;
                if (_2398 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2391 = _2248;
                    _2392 = _2250;
                    _2393 = _2252;
                    _2394 = _2254;
                    _2395 = _2256;
                    _2396 = _2258;
                    _2397 = _2398;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2247 = _2248;
            _2249 = _2250;
            _2251 = _2252;
            _2253 = _2254;
            _2255 = _2256;
            _2257 = _2258;
        }
        uvec4 _2261 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2262 = _2261.z;
        uint _2264 = (_2262 >> 8u) & 15u;
        float _2359;
        float _2361;
        float _2363;
        float _2365;
        float _2367;
        float _2369;
        if (((4294967295u << _2264) & _2145) == 0u)
        {
            _2359 = _2247;
            _2361 = _2249;
            _2363 = _2251;
            _2365 = _2253;
            _2367 = _2255;
            _2369 = _2257;
        }
        else
        {
            float _2384 = inversesqrt(dot(vec3(_2099, _2100, _2101), vec3(_2099, _2100, _2101)));
            float _2385 = _2384 * _2099;
            float _2386 = _2384 * _2100;
            float _2387 = _2384 * _2101;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2264 < ((_2262 >> 12u) & 15u))
            {
                float _2360;
                float _2362;
                float _2364;
                float _2366;
                float _2368;
                float _2370;
                float _2498 = _2247;
                float _2499 = _2249;
                float _2500 = _2251;
                float _2501 = _2253;
                float _2502 = _2255;
                float _2503 = _2257;
                uint _2504 = _2264;
                uint _2513;
                bool _2514;
                for (;;)
                {
                    _2513 = texelFetch(g_lightClassification, int((((_2139 << 5u) + (_2125 << 9u)) + (_2504 << 2u)) >> 2u)).x;
                    _2514 = _2513 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2514)
                    {
                        frontier_phi_69_pred = _2503;
                        frontier_phi_69_pred_1 = _2502;
                        frontier_phi_69_pred_2 = _2501;
                        frontier_phi_69_pred_3 = _2500;
                        frontier_phi_69_pred_4 = _2499;
                        frontier_phi_69_pred_5 = _2498;
                    }
                    else
                    {
                        float _2698;
                        float _2699;
                        float _2700;
                        float _2701;
                        float _2702;
                        float _2703;
                        float _2994;
                        float _2995;
                        float _2996;
                        float _2997;
                        float _2998;
                        float _2999;
                        float _2711 = _2498;
                        float _2712 = _2499;
                        float _2713 = _2500;
                        float _2714 = _2501;
                        float _2715 = _2502;
                        float _2716 = _2503;
                        uint _2717 = _2513;
                        uint _2718;
                        vec4 _2743;
                        float _2744;
                        vec4 _2759;
                        vec3 _2771;
                        vec4 _2787;
                        vec4 _2803;
                        float _2850;
                        bool _2851;
                        for (;;)
                        {
                            uint _2728 = ((_2504 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2717));
                            _2718 = (_2717 + 4294967295u) & _2717;
                            uint _2730 = _2728 * 40u;
                            _2743 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2730)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 3u)).x));
                            _2744 = _2743.w;
                            uint _2746 = (_2728 * 40u) + 4u;
                            _2759 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2746)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 3u)).x));
                            uint _2761 = (_2728 * 40u) + 8u;
                            _2771 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2761)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 2u)).x));
                            uint _2774 = (_2728 * 40u) + 16u;
                            _2787 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2774)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 3u)).x));
                            uint _2790 = (_2728 * 40u) + 20u;
                            _2803 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2790)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 3u)).x));
                            uint _2806 = (_2728 * 40u) + 24u;
                            vec4 _2819 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 3u)).x));
                            uint _2825 = (_2728 * 40u) + 28u;
                            vec4 _2838 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2825)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 3u)).x));
                            _2850 = fma(_2101, _2838.z, fma(_2100, _2838.y, _2838.x * _2099)) + _2838.w;
                            _2851 = !((fma(_2101, _2819.z, fma(_2100, _2819.y, _2819.x * _2099)) + _2819.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2851)
                            {
                                float _2878 = _2743.x - _2099;
                                float _2879 = _2743.y - _2100;
                                float _2880 = _2743.z - _2101;
                                float _2881 = dot(vec3(_2878, _2879, _2880), vec3(_2878, _2879, _2880));
                                float _2884 = inversesqrt(_2881);
                                float _2885 = _2884 * _2878;
                                float _2886 = _2884 * _2879;
                                float _2887 = _2884 * _2880;
                                float _2891 = 1.0 - (_2881 / (_2744 * _2744));
                                float _3929 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
                                float _2892 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
                                float _2896 = sqrt(_2881) * _2759.w;
                                float _2898 = 1.39999997615814208984375 / (_2896 + 1.39999997615814208984375);
                                float _2899 = _2898 * _2898;
                                float _2902 = ((1.0 - _2899) * dot(vec3(_2885, _2886, _2887), vec3(_395, _398, _401))) + _2899;
                                float _2905 = _2896 * _2896;
                                float _2909 = (fma(_2101, _2787.z, fma(_2100, _2787.y, _2787.x * _2099)) + _2787.w) / _2850;
                                float _2910 = (fma(_2101, _2803.z, fma(_2100, _2803.y, _2803.x * _2099)) + _2803.w) / _2850;
                                float _2914 = 1.0 - dot(vec2(_2909, _2910), vec2(_2909, _2910));
                                float _3945 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
                                float _2915 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
                                float _2916 = _2915 * (((isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0))) * _2892) / ((_2905 * 0.699999988079071044921875) + 1.0));
                                float _2928 = exp2(log2(1.0 / ((_2905 * 3.5) + 5.0)) * 0.25);
                                float _2929 = 1.0 - _456;
                                float _2936 = sqrt(1.0 - ((1.0 - (_2929 * _2929)) * (1.0 - (_2928 * _2928))));
                                float _2937 = _2936 * _2936;
                                float _2938 = _2937 * _2937;
                                float _2939 = _2885 - _2385;
                                float _2940 = _2886 - _2386;
                                float _2941 = _2887 - _2387;
                                float _2945 = inversesqrt(dot(vec3(_2939, _2940, _2941), vec3(_2939, _2940, _2941)));
                                float _2949 = dot(vec3(_395, _398, _401), vec3((-0.0) - _2385, (-0.0) - _2386, (-0.0) - _2387));
                                float _3956 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                                float _2952 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
                                float _2953 = dot(vec3(_395, _398, _401), vec3(_2945 * _2939, _2945 * _2940, _2945 * _2941));
                                float _3967 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                                float _2956 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
                                float _2960 = ((_2956 * _2956) * (_2938 + (-1.0))) + 1.0;
                                float _2961 = _2898 * _2937;
                                float _2962 = _2961 * _2961;
                                float _2968 = ((1.0 - _2962) * dot(vec3(_395, _398, _401), vec3(_2885, _2886, _2887))) + _2962;
                                float _3978 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                                float _2969 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
                                float _2970 = 1.0 - _2937;
                                float _2980 = (0.5 / (((_2969 * ((_2952 * _2970) + _2937)) + 9.9999999392252902907785028219223e-09) + (((_2969 * _2970) + _2937) * _2952))) * _2969;
                                float _3989 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                                float _2990 = (_2915 * _2892) * (((_2938 * 3.1415927410125732421875) * (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) / ((_2960 * _2960) * ((_2905 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2916 * _2759.z;
                                frontier_phi_75_pred_1 = _2916 * _2759.y;
                                frontier_phi_75_pred_2 = _2916 * _2759.x;
                                frontier_phi_75_pred_3 = _2990 * _2771.z;
                                frontier_phi_75_pred_4 = _2990 * _2771.y;
                                frontier_phi_75_pred_5 = _2990 * _2771.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2999 = frontier_phi_75_pred;
                            _2998 = frontier_phi_75_pred_1;
                            _2997 = frontier_phi_75_pred_2;
                            _2996 = frontier_phi_75_pred_3;
                            _2995 = frontier_phi_75_pred_4;
                            _2994 = frontier_phi_75_pred_5;
                            _2701 = _2997 + _2714;
                            _2702 = _2998 + _2715;
                            _2703 = _2999 + _2716;
                            _2698 = _2994 + _2711;
                            _2699 = _2995 + _2712;
                            _2700 = _2996 + _2713;
                            if (_2718 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2711 = _2698;
                                _2712 = _2699;
                                _2713 = _2700;
                                _2714 = _2701;
                                _2715 = _2702;
                                _2716 = _2703;
                                _2717 = _2718;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2703;
                        frontier_phi_69_pred_1 = _2702;
                        frontier_phi_69_pred_2 = _2701;
                        frontier_phi_69_pred_3 = _2700;
                        frontier_phi_69_pred_4 = _2699;
                        frontier_phi_69_pred_5 = _2698;
                    }
                    _2370 = frontier_phi_69_pred;
                    _2368 = frontier_phi_69_pred_1;
                    _2366 = frontier_phi_69_pred_2;
                    _2364 = frontier_phi_69_pred_3;
                    _2362 = frontier_phi_69_pred_4;
                    _2360 = frontier_phi_69_pred_5;
                    uint _2505 = _2504 + 1u;
                    if (_2505 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2498 = _2360;
                        _2499 = _2362;
                        _2500 = _2364;
                        _2501 = _2366;
                        _2502 = _2368;
                        _2503 = _2370;
                        _2504 = _2505;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2370;
                frontier_phi_57_58_ladder_1 = _2368;
                frontier_phi_57_58_ladder_2 = _2366;
                frontier_phi_57_58_ladder_3 = _2364;
                frontier_phi_57_58_ladder_4 = _2362;
                frontier_phi_57_58_ladder_5 = _2360;
            }
            else
            {
                frontier_phi_57_58_ladder = _2257;
                frontier_phi_57_58_ladder_1 = _2255;
                frontier_phi_57_58_ladder_2 = _2253;
                frontier_phi_57_58_ladder_3 = _2251;
                frontier_phi_57_58_ladder_4 = _2249;
                frontier_phi_57_58_ladder_5 = _2247;
            }
            _2359 = frontier_phi_57_58_ladder_5;
            _2361 = frontier_phi_57_58_ladder_4;
            _2363 = frontier_phi_57_58_ladder_3;
            _2365 = frontier_phi_57_58_ladder_2;
            _2367 = frontier_phi_57_58_ladder_1;
            _2369 = frontier_phi_57_58_ladder;
        }
        float _2374 = isnan(1.0) ? _440 : (isnan(_440) ? 1.0 : min(_440, 1.0));
        _2157 = (_2374 * _2365) + _1613;
        _2159 = (_2374 * _2367) + _1615;
        _2161 = (_2374 * _2369) + _1617;
        _2163 = ((_2359 * 0.039999999105930328369140625) * _2374) + _1943;
        _2165 = ((_2361 * 0.039999999105930328369140625) * _2374) + _1945;
        _2167 = ((_2363 * 0.039999999105930328369140625) * _2374) + _1947;
    }
    else
    {
        _2157 = _1613;
        _2159 = _1615;
        _2161 = _1617;
        _2163 = _1943;
        _2165 = _1945;
        _2167 = _1947;
    }
    float _4005 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _4016 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _4027 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _4038 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _2192 = cbInstanceData._m0[_414 + 6u].w * (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)));
    float _2197 = _373 / cbSceneParam._m0[86u].x;
    float _2198 = _374 / cbSceneParam._m0[86u].y;
    vec4 _2212 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2197, _2198, (log2((isnan(cbSceneParam._m0[77u].w) ? _306 : (isnan(_306) ? cbSceneParam._m0[77u].w : min(_306, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2214 = _2212.x;
    float _2215 = _2212.y;
    float _2216 = _2212.z;
    float _2217 = _2212.w;
    float _2309;
    float _2311;
    float _2313;
    float _2315;
    if (_306 > cbSceneParam._m0[78u].w)
    {
        float _2272 = isnan(_306) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _306 : min(cbSceneParam._m0[80u].w, _306));
        float _2273 = _2272 / _306;
        float _2284 = _2273 * _358;
        float _2285 = _359 * _2273;
        float _2286 = (-0.0) - _2285;
        float _2287 = _2273 * _360;
        float _2289 = (cbSceneParam._m0[77u].w * _2286) / _2272;
        float _2290 = _2289 + cbSceneParam._m0[79u].w;
        float _2291 = cbSceneParam._m0[79u].w - _2285;
        float _2297 = sqrt(((_2284 * _2284) + (_2285 * _2285)) + (_2287 * _2287));
        float _2300 = (1.0 - (cbSceneParam._m0[77u].w / _2272)) * _2297;
        float _2305 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2307 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2460;
        if (abs((_2286 - _2289) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2460 = ((((_2290 > 0.0) ? exp2(_2305 * _2290) : (2.0 - exp2(_2307 * _2290))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2300;
        }
        else
        {
            float _2420 = 1.0 / cbSceneParam._m0[80u].x;
            float _2421 = isnan(_2291) ? _2290 : (isnan(_2290) ? _2291 : max(_2290, _2291));
            float _2422 = isnan(_2291) ? _2290 : (isnan(_2290) ? _2291 : min(_2290, _2291));
            float _2431 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : min(_2421, 0.0));
            float _2432 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : min(_2422, 0.0));
            _2460 = ((abs(_2297 / _2286) * cbSceneParam._m0[80u].y) * ((((_2431 - _2432) * 2.0) - ((exp2(_2305 * (isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0)))) - exp2(_2305 * (isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0))))) * _2420)) - ((exp2(_2307 * _2431) - exp2(_2307 * _2432)) * _2420))) + (_2300 * cbSceneParam._m0[80u].z);
        }
        vec4 _2462 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2197, _2198, 1.0), 0.0);
        float _2471 = exp2((_2460 * (-1.44269502162933349609375)) * (1.0 - _2462.w));
        float _2472 = log2(_2471);
        float _2488 = log2(_2217);
        _2309 = (exp2(_2488 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2472 * cbSceneParam._m0[78u].x)) * _2462.x) / cbSceneParam._m0[78u].x)) + _2214;
        _2311 = (exp2(_2488 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2472 * cbSceneParam._m0[78u].y)) * _2462.y) / cbSceneParam._m0[78u].y)) + _2215;
        _2313 = (exp2(_2488 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2472 * cbSceneParam._m0[78u].z)) * _2462.z) / cbSceneParam._m0[78u].z)) + _2216;
        _2315 = _2471 * _2217;
    }
    else
    {
        _2309 = _2214;
        _2311 = _2215;
        _2313 = _2216;
        _2315 = _2217;
    }
    float _2327 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2328 = _2327 == 3.0;
    float _2329 = log2(_2315);
    float _2336 = exp2(_2329 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_2157 + ((isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0))) * _440))) + ((_2163 + ((isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))) * _1247)) * cbPerFrame._m0[3u].x));
    float _2337 = exp2(_2329 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_2159 + ((isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0))) * _440))) + ((_2165 + ((isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))) * _1247)) * cbPerFrame._m0[3u].x));
    float _2338 = exp2(_2329 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_2161 + ((isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0))) * _440))) + ((_2167 + ((isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))) * _1247)) * cbPerFrame._m0[3u].x));
    float _2347 = (_2327 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2347 * (_2328 ? _2336 : (_2336 + (cbSceneParam._m0[72u].w * _2309)));
    SV_Target.y = _2347 * (_2328 ? _2337 : (_2337 + (cbSceneParam._m0[72u].w * _2311)));
    SV_Target.z = _2347 * (_2328 ? _2338 : (_2338 + (cbSceneParam._m0[72u].w * _2313)));
    SV_Target.w = _2192;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2192;
}


