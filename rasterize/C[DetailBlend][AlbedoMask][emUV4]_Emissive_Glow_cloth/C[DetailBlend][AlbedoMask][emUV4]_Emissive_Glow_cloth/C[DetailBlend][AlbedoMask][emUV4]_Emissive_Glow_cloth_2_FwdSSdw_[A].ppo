#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1399;
float _3846;
float _3847;
float _3848;
float _3849;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = _239 * NORMAL.x;
    float _241 = _239 * NORMAL.y;
    float _242 = _239 * NORMAL.z;
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254;
    float _255;
    float _256;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _254 = (-0.0) - _240;
        _255 = (-0.0) - _241;
        _256 = (-0.0) - _242;
    }
    else
    {
        _254 = _240;
        _255 = _241;
        _256 = _242;
    }
    vec4 _271 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _281 = log2(0.0);
    float _283 = exp2(_281 * cbMtdParam._m0[21u].y);
    float _284 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _285 = isnan(1.0) ? _284 : (isnan(_284) ? 1.0 : min(_284, 1.0));
    vec4 _299 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _303 = _299.z;
    float _304 = _299.w;
    float _312 = exp2(log2(_303 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _313 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _314 = isnan(1.0) ? _313 : (isnan(_313) ? 1.0 : min(_313, 1.0));
    vec4 _327 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _350 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _352 = _350.x;
    float _353 = _350.y;
    float _358 = _352 - ((_352 * _350.z) * cbMtdParam._m0[20u].w);
    bool _394 = _358 >= 0.25;
    bool _399 = _358 >= 0.3499999940395355224609375;
    bool _404 = _358 >= 0.5;
    bool _409 = _358 >= 0.64999997615814208984375;
    bool _414 = _358 >= 0.75;
    vec4 _442 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _452 = cbMtdParam._m0[9u].x * _442.x;
    float _453 = cbMtdParam._m0[9u].y * _442.y;
    float _454 = cbMtdParam._m0[9u].z * _442.z;
    float _461 = (((((((_414 ? cbMtdParam._m0[14u].x : (_409 ? cbMtdParam._m0[19u].x : (_404 ? cbMtdParam._m0[18u].x : (_399 ? cbMtdParam._m0[17u].x : (_394 ? cbMtdParam._m0[16u].x : cbMtdParam._m0[15u].x))))) - cbMtdParam._m0[10u].x) * _353) + cbMtdParam._m0[10u].x) * _327.x) - _452) * _314) + _452;
    float _462 = (((((((_414 ? cbMtdParam._m0[14u].y : (_409 ? cbMtdParam._m0[19u].y : (_404 ? cbMtdParam._m0[18u].y : (_399 ? cbMtdParam._m0[17u].y : (_394 ? cbMtdParam._m0[16u].y : cbMtdParam._m0[15u].y))))) - cbMtdParam._m0[10u].y) * _353) + cbMtdParam._m0[10u].y) * _327.y) - _453) * _314) + _453;
    float _463 = (((((((_414 ? cbMtdParam._m0[14u].z : (_409 ? cbMtdParam._m0[19u].z : (_404 ? cbMtdParam._m0[18u].z : (_399 ? cbMtdParam._m0[17u].z : (_394 ? cbMtdParam._m0[16u].z : cbMtdParam._m0[15u].z))))) - cbMtdParam._m0[10u].z) * _353) + cbMtdParam._m0[10u].z) * _327.z) - _454) * _314) + _454;
    float _470 = exp2(log2(_304) * cbMtdParam._m0[22u].y);
    vec4 _483 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _503 = (((cbMtdParam._m0[12u].x * _483.x) - _461) * _470) + _461;
    float _504 = (((cbMtdParam._m0[12u].y * _483.y) - _462) * _470) + _462;
    float _505 = (((cbMtdParam._m0[12u].z * _483.z) - _463) * _470) + _463;
    vec4 _517 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _541 = (_271.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _517.x) - _503) * _285) + _503);
    float _543 = (_271.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _517.y) - _504) * _285) + _504);
    float _545 = (_271.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _517.z) - _505) * _285) + _505);
    float _550 = exp2(log2(1.0 - _304) * 0.00999999977648258209228515625);
    float _568 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[22u].w) * _550) + cbMtdParam._m0[22u].w;
    float _587 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _568) + cbMtdParam._m0[21u].z) * _470) + _568;
    float _609 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _587) + cbMtdParam._m0[23u].w) * _285) + _587;
    vec4 _622 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _640 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _642 = _640.x;
    float _643 = _640.y;
    float _646 = cbMtdParam._m0[20u].x + _640.z;
    float _649 = (((cbMtdParam._m0[21u].x + _622.z) - _646) * _550) + _646;
    vec4 _661 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _673 = (_303 * 2.0) * ((((_661.z - _649) + cbMtdParam._m0[23u].y) * _470) + _649);
    vec4 _685 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _694 = (((_685.z - _673) + cbMtdParam._m0[22u].x) * _285) + _673;
    vec4 _713 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _728 = ((_622.x - _642) * _550) + _642;
    float _729 = ((_622.y - _643) * _550) + _643;
    float _734 = ((_661.x - _728) * _470) + _728;
    float _735 = ((_661.y - _729) * _470) + _729;
    float _744 = ((((_685.x - _734) * _285) + _734) * 2.0) + (-1.0);
    float _745 = ((((_685.y - _735) * _285) + _735) * 2.0) + (-1.0);
    float _746 = dot(vec2(_744, _745), vec2(_744, _745));
    float _3878 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _751 = sqrt(1.0 - (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))));
    float _754 = (cbMtdParam._m0[23u].x * ((_299.x * 2.0) + (-1.0))) + _744;
    float _755 = (cbMtdParam._m0[23u].x * ((_299.y * 2.0) + (-1.0))) + _745;
    float _758 = fma(_751, _254, fma(_755, _246 * TANGENT.x, (_232 * _225) * _754));
    float _761 = fma(_751, _255, fma(_755, _246 * TANGENT.y, (_232 * _226) * _754));
    float _764 = fma(_751, _256, fma(_755, _246 * TANGENT.z, (_232 * _227) * _754));
    float _768 = inversesqrt(dot(vec3(_758, _761, _764), vec3(_758, _761, _764)));
    float _769 = _768 * _758;
    float _770 = _768 * _761;
    float _771 = _768 * _764;
    float _3889 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _772 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _3900 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _3911 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _3922 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _3933 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _776 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _792 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _832 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _842 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _832);
    float _843 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _832);
    float _844 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _832);
    float _848 = inversesqrt(dot(vec3(_842, _843, _844), vec3(_842, _843, _844)));
    float _849 = _842 * _848;
    float _850 = _843 * _848;
    float _851 = _844 * _848;
    vec4 _856 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _858 = _856.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1080 = sqrt(((_842 * _842) + (_843 * _843)) + (_844 * _844));
        float _1086 = (cbMatDynParam._m0[5u].x * _1080) + cbMatDynParam._m0[5u].y;
        float _3944 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1091 = (cbMatDynParam._m0[5u].z * _1080) + cbMatDynParam._m0[5u].w;
        float _3955 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) - _1087)) + _1087) < ((_858 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _870 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _871 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _873 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _875 = _873.w;
    float _893 = fma(_771, cbSceneParam._m0[5u].z, fma(_770, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _769));
    float _896 = fma(_771, cbSceneParam._m0[6u].z, fma(_770, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _769));
    float _899 = fma(_771, cbSceneParam._m0[7u].z, fma(_770, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _769));
    vec4 _901 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _912 = (((_901.y - _772) + (_901.w * _772)) * cbMtdParam._m0[3u].x) + _772;
    uint _925 = uint(roundEven(NORMAL.w)) * 13u;
    uint _926 = _925 + 9u;
    uint _927 = _926 + uint(cbMatDynParam._m0[0u].w);
    float _933 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * cbInstanceData._m0[_927].x;
    float _934 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * cbInstanceData._m0[_927].y;
    float _935 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * cbInstanceData._m0[_927].z;
    float _3966 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _936 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _3977 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _937 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _3988 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _938 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    vec4 _939 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _944 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _955 = (((_944.x - _776) + (_944.w * _776)) * cbMtdParam._m0[3u].x) + _776;
    float _968 = (cbMtdParam._m0[3u].x * (((_936 * _875) - _936) + _939.x)) + _936;
    float _969 = (cbMtdParam._m0[3u].x * (((_937 * _875) - _937) + _939.y)) + _937;
    float _970 = (cbMtdParam._m0[3u].x * (((_938 * _875) - _938) + _939.z)) + _938;
    float _971 = 1.0 - _955;
    float _972 = _971 * _968;
    float _973 = _971 * _969;
    float _974 = _971 * _970;
    float _979 = (_968 + (-0.039999999105930328369140625)) * _955;
    float _980 = (_969 + (-0.039999999105930328369140625)) * _955;
    float _981 = (_970 + (-0.039999999105930328369140625)) * _955;
    float _982 = _979 + 0.039999999105930328369140625;
    float _984 = _980 + 0.039999999105930328369140625;
    float _985 = _981 + 0.039999999105930328369140625;
    vec4 _994 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _870, cbSceneParam._m0[86u].y * _871));
    float _997 = _994.x * TEXCOORD_4.z;
    float _998 = dot(vec3(_769, _770, _771), vec3(_849, _850, _851));
    float _1001 = _998 * 2.0;
    float _1005 = (_1001 * _769) - _849;
    float _1006 = (_1001 * _770) - _850;
    float _1007 = (_1001 * _771) - _851;
    float _1011 = abs(dot(vec3(_849, _850, _851), vec3(_769, _770, _771)));
    float _3999 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _1013 = sqrt(_912);
    float _1026 = exp2((_1013 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1013 * 3.0));
    float _1032 = (1.0 - _1026) * ((_1013 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1033 = _1026 * _1013;
    float _1061 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1065 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1069 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1398;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1124 = fma(_1069, cbModelParam._m0[26u].z, fma(_1065, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1061));
        float _1128 = fma(_1069, cbModelParam._m0[27u].z, fma(_1065, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1061));
        float _1132 = fma(_1069, cbModelParam._m0[28u].z, fma(_1065, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1061));
        float _1156 = _1061 + _769;
        float _1157 = _1065 + _770;
        float _1158 = _1069 + _771;
        float _1168 = fma(_1158, cbModelParam._m0[26u].z, fma(_1157, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1156)) - _1124;
        float _1169 = fma(_1158, cbModelParam._m0[27u].z, fma(_1157, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1156)) - _1128;
        float _1170 = fma(_1158, cbModelParam._m0[28u].z, fma(_1157, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1156)) - _1132;
        float _1174 = inversesqrt(dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170)));
        float _1187 = ((_1174 * _1168) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1124 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1188 = ((_1174 * _1169) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1128 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1189 = ((_1174 * _1170) / cbModelParam._m0[34u].z) + ((((((_1132 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        float _1226 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1192.x + (-0.5));
        float _1228 = _1226 * (_1192.y + (-0.5));
        float _1229 = _1226 * (_1192.z + (-0.5));
        float _1236 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1199.x + (-0.5));
        float _1238 = _1236 * (_1199.y + (-0.5));
        float _1239 = _1236 * (_1199.z + (-0.5));
        float _1246 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1206.x + (-0.5));
        float _1248 = _1246 * (_1206.y + (-0.5));
        float _1249 = _1246 * (_1206.z + (-0.5));
        float _1256 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1213.x + (-0.5));
        float _1258 = _1256 * (_1213.y + (-0.5));
        float _1259 = _1256 * (_1213.z + (-0.5));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = _1227 * 0.5;
        float _1264 = _1237 * 0.5;
        float _1265 = _1247 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1280 = (dot(vec3(_769, _770, _771), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1290 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _4047 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1292 + 1.0))) + _1297) * _1260;
        float _1307 = _1228 * 0.5;
        float _1308 = _1238 * 0.5;
        float _1309 = _1248 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_769, _770, _771), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _4080 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1334 + 1.0))) + _1339) * _1261;
        float _1349 = _1229 * 0.5;
        float _1350 = _1239 * 0.5;
        float _1351 = _1249 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(_769, _770, _771), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _4113 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1376 + 1.0))) + _1381) * _1262;
        _1398 = _1229;
        _1400 = _1228;
        _1401 = _1227;
        _1402 = _1239;
        _1403 = _1238;
        _1404 = _1237;
        _1405 = _1249;
        _1406 = _1248;
        _1407 = _1247;
        _1408 = _1262;
        _1409 = _1261;
        _1410 = _1260;
        _1411 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1412 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
        _1413 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
    }
    else
    {
        _1398 = _1399;
        _1400 = _1399;
        _1401 = _1399;
        _1402 = _1399;
        _1403 = _1399;
        _1404 = _1399;
        _1405 = _1399;
        _1406 = _1399;
        _1407 = _1399;
        _1408 = _1399;
        _1409 = _1399;
        _1410 = _1399;
        _1411 = 0.0;
        _1412 = 0.0;
        _1413 = 0.0;
    }
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1442 = fma(_1069, cbModelParam._m0[30u].z, fma(_1065, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1061));
        float _1446 = fma(_1069, cbModelParam._m0[31u].z, fma(_1065, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1061));
        float _1450 = fma(_1069, cbModelParam._m0[32u].z, fma(_1065, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1061));
        float _1473 = _1061 + _769;
        float _1474 = _1065 + _770;
        float _1475 = _1069 + _771;
        float _1485 = fma(_1475, cbModelParam._m0[30u].z, fma(_1474, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1473)) - _1442;
        float _1486 = fma(_1475, cbModelParam._m0[31u].z, fma(_1474, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1473)) - _1446;
        float _1487 = fma(_1475, cbModelParam._m0[32u].z, fma(_1474, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1473)) - _1450;
        float _1491 = inversesqrt(dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487)));
        float _1504 = ((_1491 * _1485) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1442 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1505 = ((_1491 * _1486) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1446 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1506 = ((_1491 * _1487) / cbModelParam._m0[35u].z) + ((((((_1450 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1508 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        vec4 _1515 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        vec4 _1522 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        float _1541 = exp2((_1508.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1508.x + (-0.5));
        float _1543 = _1541 * (_1508.y + (-0.5));
        float _1544 = _1541 * (_1508.z + (-0.5));
        float _1551 = exp2((_1515.w + (-0.5)) * 20.0) * 2.0;
        float _1552 = _1551 * (_1515.x + (-0.5));
        float _1553 = _1551 * (_1515.y + (-0.5));
        float _1554 = _1551 * (_1515.z + (-0.5));
        float _1561 = exp2((_1522.w + (-0.5)) * 20.0) * 2.0;
        float _1562 = _1561 * (_1522.x + (-0.5));
        float _1563 = _1561 * (_1522.y + (-0.5));
        float _1564 = _1561 * (_1522.z + (-0.5));
        float _1571 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1572 = _1571 * (_1529.x + (-0.5));
        float _1573 = _1571 * (_1529.y + (-0.5));
        float _1574 = _1571 * (_1529.z + (-0.5));
        float _1575 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1576 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1577 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1578 = _1542 * 0.5;
        float _1579 = _1552 * 0.5;
        float _1580 = _1562 * 0.5;
        float _1581 = dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580));
        float _1586 = (_1581 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1581);
        float _1594 = (dot(vec3(_769, _770, _771), vec3(_1586 * _1578, _1586 * _1579, _1586 * _1580)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1603 = sqrt(((_1579 * _1579) + (_1578 * _1578)) + (_1580 * _1580)) / (_1575 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1605 = _1604 * 2.0;
        float _1609 = (1.0 - _1604) / (_1604 + 1.0);
        float _4176 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1619 = ((((1.0 - _1610) * (_1605 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1605 + 1.0))) + _1610) * _1575;
        float _1620 = _1543 * 0.5;
        float _1621 = _1553 * 0.5;
        float _1622 = _1563 * 0.5;
        float _1623 = dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622));
        float _1628 = (_1623 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1623);
        float _1636 = (dot(vec3(_769, _770, _771), vec3(_1628 * _1620, _1628 * _1621, _1628 * _1622)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1645 = sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622)) / (_1576 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1647 = _1646 * 2.0;
        float _1651 = (1.0 - _1646) / (_1646 + 1.0);
        float _4209 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1661 = ((((1.0 - _1652) * (_1647 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1647 + 1.0))) + _1652) * _1576;
        float _1662 = _1544 * 0.5;
        float _1663 = _1554 * 0.5;
        float _1664 = _1564 * 0.5;
        float _1665 = dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664));
        float _1670 = (_1665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1665);
        float _1678 = (dot(vec3(_769, _770, _771), vec3(_1670 * _1662, _1670 * _1663, _1670 * _1664)) + 1.0) * 0.5;
        float _4220 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1687 = sqrt(((_1663 * _1663) + (_1662 * _1662)) + (_1664 * _1664)) / (_1577 + 9.9999997473787516355514526367188e-06);
        float _4231 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1689 = _1688 * 2.0;
        float _1693 = (1.0 - _1688) / (_1688 + 1.0);
        float _4242 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1703 = ((((1.0 - _1694) * (_1689 + 2.0)) * exp2(log2(isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_1689 + 1.0))) + _1694) * _1577;
        _1711 = _1544;
        _1712 = _1543;
        _1713 = _1542;
        _1714 = _1554;
        _1715 = _1553;
        _1716 = _1552;
        _1717 = _1564;
        _1718 = _1563;
        _1719 = _1562;
        _1720 = _1577;
        _1721 = _1576;
        _1722 = _1575;
        _1723 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)));
        _1724 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)));
        _1725 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)));
    }
    else
    {
        _1711 = _1399;
        _1712 = _1399;
        _1713 = _1399;
        _1714 = _1399;
        _1715 = _1399;
        _1716 = _1399;
        _1717 = _1399;
        _1718 = _1399;
        _1719 = _1399;
        _1720 = _1399;
        _1721 = _1399;
        _1722 = _1399;
        _1723 = 0.0;
        _1724 = 0.0;
        _1725 = 0.0;
    }
    float _1735 = (cbModelParam._m0[1u].x * (_1723 - _1411)) + _1411;
    float _1736 = (cbModelParam._m0[1u].x * (_1724 - _1412)) + _1412;
    float _1737 = (cbModelParam._m0[1u].x * (_1725 - _1413)) + _1413;
    float _1758 = fma(_1737, cbSceneParam._m0[89u].z, fma(_1736, cbSceneParam._m0[89u].y, _1735 * cbSceneParam._m0[89u].x));
    float _1761 = fma(_1737, cbSceneParam._m0[90u].z, fma(_1736, cbSceneParam._m0[90u].y, _1735 * cbSceneParam._m0[90u].x));
    float _1764 = fma(_1737, cbSceneParam._m0[91u].z, fma(_1736, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1735));
    float _1779 = _1005 * 0.5;
    float _1780 = _1006 * 0.5;
    float _1781 = _1007 * 0.5;
    float _1782 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1713, _1716, _1719, _1722));
    float _1785 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1712, _1715, _1718, _1721));
    float _1788 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1711, _1714, _1717, _1720));
    float _1822;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1795 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1398, _1402, _1405, _1408));
        float _1799 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1400, _1403, _1406, _1409));
        float _1803 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1401, _1404, _1407, _1410));
        float _1810 = dot(vec4(cbModelParam._m0[39u]), vec4(_1779, _1780, _1781, 1.0));
        _1822 = dot(vec3(isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)), isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1810) ? 0.0 : (isnan(0.0) ? _1810 : max(0.0, _1810))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1822 = 1.0;
    }
    float _1833;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1824 = dot(vec4(cbModelParam._m0[40u]), vec4(_1779, _1780, _1781, 1.0));
        _1833 = dot(vec3(isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)), isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)), isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1824) ? 0.0 : (isnan(0.0) ? _1824 : max(0.0, _1824))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1833 = 1.0;
    }
    float _1837 = (_1833 * cbModelParam._m0[1u].x) + (_1822 * (1.0 - cbModelParam._m0[1u].x));
    float _1847 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _912);
    float _1848 = isnan(_1847) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1847 : min(cbModelParam._m0[25u].z, _1847));
    float _1928;
    float _1930;
    float _1932;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1895 = fma(_1069, cbModelParam._m0[13u].z, fma(_1065, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1061)) + cbModelParam._m0[13u].w;
        float _1899 = fma(_1069, cbModelParam._m0[14u].z, fma(_1065, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1061)) + cbModelParam._m0[14u].w;
        float _1903 = fma(_1069, cbModelParam._m0[15u].z, fma(_1065, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1061)) + cbModelParam._m0[15u].w;
        float _1906 = fma(_1007, cbModelParam._m0[13u].z, fma(_1006, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1005));
        float _1909 = fma(_1007, cbModelParam._m0[14u].z, fma(_1006, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1005));
        float _1912 = fma(_1007, cbModelParam._m0[15u].z, fma(_1006, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1005));
        float _1940;
        if (_1906 > 0.0)
        {
            _1940 = abs((1.0 - _1895) / _1906);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1895 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1940 = frontier_phi_19_17_ladder;
        }
        float _2163;
        if (_1909 > 0.0)
        {
            _2163 = abs((1.0 - _1899) / _1909);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1899 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2163 = frontier_phi_28_24_ladder;
        }
        float _2420;
        if (_1912 > 0.0)
        {
            _2420 = abs((1.0 - _1903) / _1912);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1903 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2420 = frontier_phi_40_35_ladder;
        }
        float _2422 = isnan(_2163) ? _1940 : (isnan(_1940) ? _2163 : min(_1940, _2163));
        float _2423 = isnan(_2420) ? _2422 : (isnan(_2422) ? _2420 : min(_2422, _2420));
        float _2427 = (_2423 * _1906) + _1895;
        float _2428 = (_2423 * _1909) + _1899;
        float _2429 = (_2423 * _1912) + _1903;
        float _2430 = _2423 * 9.9999997473787516355514526367188e-05;
        float _2432 = (-1.0) - _2430;
        float _2434 = _2430 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2429 > _2434) || ((_2429 < _2432) || ((_2428 > _2434) || ((_2428 < _2432) || ((_2427 < _2432) || (_2427 > _2434))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2557 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2429, cbModelParam._m0[9u].z, fma(_2428, cbModelParam._m0[9u].y, _2427 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2429, cbModelParam._m0[10u].z, fma(_2428, cbModelParam._m0[10u].y, _2427 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2429, cbModelParam._m0[11u].z, fma(_2428, cbModelParam._m0[11u].y, _2427 * cbModelParam._m0[11u].x))), _1848);
            frontier_phi_18_40_ladder = _2557.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2557.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2557.x * cbModelParam._m0[1u].y;
        }
        _1928 = frontier_phi_18_40_ladder_2;
        _1930 = frontier_phi_18_40_ladder_1;
        _1932 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1916 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1005, _1006, _1007), _1848);
        _1928 = _1916.x * cbModelParam._m0[1u].y;
        _1930 = _1916.y * cbModelParam._m0[1u].y;
        _1932 = _1916.z * cbModelParam._m0[1u].y;
    }
    float _1936 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _912);
    float _1937 = isnan(_1936) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1936 : min(cbModelParam._m0[25u].w, _1936));
    float _2026;
    float _2028;
    float _2030;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1990 = fma(_1069, cbModelParam._m0[21u].z, fma(_1065, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1061)) + cbModelParam._m0[21u].w;
        float _1994 = fma(_1069, cbModelParam._m0[22u].z, fma(_1065, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1061)) + cbModelParam._m0[22u].w;
        float _1998 = fma(_1069, cbModelParam._m0[23u].z, fma(_1065, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1061)) + cbModelParam._m0[23u].w;
        float _2001 = fma(_1007, cbModelParam._m0[21u].z, fma(_1006, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1005));
        float _2004 = fma(_1007, cbModelParam._m0[22u].z, fma(_1006, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1005));
        float _2007 = fma(_1007, cbModelParam._m0[23u].z, fma(_1006, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1005));
        float _2168;
        if (_2001 > 0.0)
        {
            _2168 = abs((1.0 - _1990) / _2001);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2001 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1990 + 1.0) / _2001);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2168 = frontier_phi_30_26_ladder;
        }
        float _2447;
        if (_2004 > 0.0)
        {
            _2447 = abs((1.0 - _1994) / _2004);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1994 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2447 = frontier_phi_42_37_ladder;
        }
        float _2660;
        if (_2007 > 0.0)
        {
            _2660 = abs((1.0 - _1998) / _2007);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1998 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2660 = frontier_phi_51_48_ladder;
        }
        float _2662 = isnan(_2447) ? _2168 : (isnan(_2168) ? _2447 : min(_2168, _2447));
        float _2663 = isnan(_2660) ? _2662 : (isnan(_2662) ? _2660 : min(_2662, _2660));
        float _2667 = (_2663 * _2001) + _1990;
        float _2668 = (_2663 * _2004) + _1994;
        float _2669 = (_2663 * _2007) + _1998;
        float _2670 = _2663 * 9.9999997473787516355514526367188e-05;
        float _2671 = (-1.0) - _2670;
        float _2673 = _2670 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2669 > _2673) || ((_2669 < _2671) || ((_2668 > _2673) || ((_2668 < _2671) || ((_2667 < _2671) || (_2667 > _2673))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2902 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2669, cbModelParam._m0[17u].z, fma(_2668, cbModelParam._m0[17u].y, _2667 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2669, cbModelParam._m0[18u].z, fma(_2668, cbModelParam._m0[18u].y, _2667 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2669, cbModelParam._m0[19u].z, fma(_2668, cbModelParam._m0[19u].y, _2667 * cbModelParam._m0[19u].x))), _1937);
            frontier_phi_27_51_ladder = _2902.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2902.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2902.x * cbModelParam._m0[1u].z;
        }
        _2026 = frontier_phi_27_51_ladder_2;
        _2028 = frontier_phi_27_51_ladder_1;
        _2030 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2010 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1005, _1006, _1007), _1937);
        _2026 = _2010.x * cbModelParam._m0[1u].z;
        _2028 = _2010.y * cbModelParam._m0[1u].z;
        _2030 = _2010.z * cbModelParam._m0[1u].z;
    }
    float _2043 = (((_1032 * _982) + _1033) * _997) * ((cbModelParam._m0[1u].w * (_2026 - _1928)) + _1928);
    float _2045 = (((_1032 * _984) + _1033) * _997) * ((cbModelParam._m0[1u].w * (_2028 - _1930)) + _1930);
    float _2047 = (((_1032 * _985) + _1033) * _997) * ((cbModelParam._m0[1u].w * (_2030 - _1932)) + _1932);
    float _2050 = fma(_2047, cbSceneParam._m0[89u].z, fma(_2045, cbSceneParam._m0[89u].y, _2043 * cbSceneParam._m0[89u].x));
    float _2053 = fma(_2047, cbSceneParam._m0[90u].z, fma(_2045, cbSceneParam._m0[90u].y, _2043 * cbSceneParam._m0[90u].x));
    float _2056 = fma(_2047, cbSceneParam._m0[91u].z, fma(_2045, cbSceneParam._m0[91u].y, _2043 * cbSceneParam._m0[91u].x));
    vec4 _2064 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_870, _871));
    float _2066 = _2064.w;
    float _2078 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2066);
    float _2079 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2066);
    float _2080 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2066);
    uvec4 _2084 = floatBitsToUint(cbInstanceData._m0[_925 + 5u]);
    uint _2086 = _2084.x * 14u;
    uint _2087 = _2086 + 13u;
    float _2094 = _997 + (-1.0);
    float _2099 = (cbLight._m0[_2087].x * _2094) + 1.0;
    float _2100 = (cbLight._m0[_2087].y * _2094) + 1.0;
    float _2101 = (cbLight._m0[_2087].z * _2094) + 1.0;
    float _2102 = (cbLight._m0[_2087].w * _2094) + 1.0;
    uint _2103 = _2086 + 5u;
    float _2109 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
    uint _2113 = _2086 + 4u;
    float _2122 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
    uint _2126 = _2086 | 1u;
    float _2137 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_769, _770, _771));
    float _2140 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_769, _770, _771));
    float _4378 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _4389 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2145 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * 0.3183098733425140380859375;
    float _2147 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * 0.3183098733425140380859375;
    float _2154 = ((cbLight._m0[_2103].x * _2109) * _2147) + (((cbLight._m0[_2113].x * _2078) * _2122) * _2145);
    float _2155 = ((_2109 * cbLight._m0[_2103].y) * _2147) + (((cbLight._m0[_2113].y * _2079) * _2122) * _2145);
    float _2156 = ((_2109 * cbLight._m0[_2103].z) * _2147) + (((cbLight._m0[_2113].z * _2080) * _2122) * _2145);
    uvec4 _2160 = floatBitsToUint(cbLight._m0[_2086 + 12u]);
    bool _2162 = _2160.x == 0u;
    float _2173;
    float _2175;
    float _2177;
    if (_2162)
    {
        _2173 = _2154;
        _2175 = _2155;
        _2177 = _2156;
    }
    else
    {
        uint _2181 = _2086 + 6u;
        float _2197 = (dot(vec3(cbLight._m0[_2086 + 2u].xyz), vec3(_769, _770, _771)) * 0.5) + 0.5;
        float _2198 = _2197 * _2197;
        float _4400 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2199 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2200 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2173 = (((cbLight._m0[_2181].x * 0.3183098733425140380859375) * _2199) * _2200) + _2154;
        _2175 = (((cbLight._m0[_2181].y * 0.3183098733425140380859375) * _2199) * _2200) + _2155;
        _2177 = (((cbLight._m0[_2181].z * 0.3183098733425140380859375) * _2199) * _2200) + _2156;
    }
    bool _2180 = _2160.y == 0u;
    float _2218;
    float _2220;
    float _2222;
    if (_2180)
    {
        _2218 = _2173;
        _2220 = _2175;
        _2222 = _2177;
    }
    else
    {
        uint _2391 = _2086 + 7u;
        float _2407 = (dot(vec3(cbLight._m0[_2086 + 3u].xyz), vec3(_769, _770, _771)) * 0.5) + 0.5;
        float _2408 = _2407 * _2407;
        float _4416 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2409 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2410 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2218 = (((cbLight._m0[_2391].x * 0.3183098733425140380859375) * _2409) * _2410) + _2173;
        _2220 = (((cbLight._m0[_2391].y * 0.3183098733425140380859375) * _2409) * _2410) + _2175;
        _2222 = (((cbLight._m0[_2391].z * 0.3183098733425140380859375) * _2409) * _2410) + _2177;
    }
    uint _2225 = _2086 + 8u;
    float _2238 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2086].w)) * _912) * 0.949999988079071044921875);
    float _2239 = _2238 * _2238;
    float _2240 = cbLight._m0[_2086].x + _849;
    float _2241 = cbLight._m0[_2086].y + _850;
    float _2242 = cbLight._m0[_2086].z + _851;
    float _2246 = inversesqrt(dot(vec3(_2240, _2241, _2242), vec3(_2240, _2241, _2242)));
    float _2247 = _2246 * _2240;
    float _2248 = _2246 * _2241;
    float _2249 = _2246 * _2242;
    float _2250 = dot(vec3(_769, _770, _771), vec3(cbLight._m0[_2086].xyz));
    float _4432 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2253 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    float _4443 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _2254 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _2255 = dot(vec3(_769, _770, _771), vec3(_2247, _2248, _2249));
    float _4454 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2258 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2259 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_2247, _2248, _2249));
    float _4465 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2263 = _2239 * _2239;
    float _2267 = ((_2258 * _2258) * (_2263 + (-1.0))) + 1.0;
    float _2275 = exp2(log2(1.0 - (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) * 5.0);
    float _2276 = 0.959999978542327880859375 - _979;
    float _2278 = 0.959999978542327880859375 - _980;
    float _2279 = 0.959999978542327880859375 - _981;
    float _2286 = 1.0 - _2239;
    float _2297 = (0.5 / (((_2254 * ((_2253 * _2286) + _2239)) + 9.9999999392252902907785028219223e-09) + (((_2254 * _2286) + _2239) * _2253))) * _2253;
    float _4476 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2299 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2263 / ((_2267 * _2267) * 3.141590118408203125));
    uint _2313 = _2086 + 9u;
    float _2324 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2126].w)) * _912) * 0.949999988079071044921875);
    float _2325 = _2324 * _2324;
    float _2326 = cbLight._m0[_2126].x + _849;
    float _2327 = cbLight._m0[_2126].y + _850;
    float _2328 = cbLight._m0[_2126].z + _851;
    float _2332 = inversesqrt(dot(vec3(_2326, _2327, _2328), vec3(_2326, _2327, _2328)));
    float _2333 = _2332 * _2326;
    float _2334 = _2332 * _2327;
    float _2335 = _2332 * _2328;
    float _2336 = dot(vec3(_769, _770, _771), vec3(cbLight._m0[_2126].xyz));
    float _4487 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2339 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _2340 = dot(vec3(_769, _770, _771), vec3(_2333, _2334, _2335));
    float _4498 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2343 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    float _2344 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_2333, _2334, _2335));
    float _4509 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2348 = _2325 * _2325;
    float _2352 = ((_2343 * _2343) * (_2348 + (-1.0))) + 1.0;
    float _2359 = exp2(log2(1.0 - (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) * 5.0);
    float _2366 = 1.0 - _2325;
    float _2376 = (0.5 / (((_2254 * ((_2339 * _2366) + _2325)) + 9.9999999392252902907785028219223e-09) + (((_2254 * _2366) + _2325) * _2339))) * _2339;
    float _4520 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2378 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2348 / ((_2352 * _2352) * 3.141590118408203125));
    float _2388 = (((((_2359 * _2276) + _982) * cbLight._m0[_2313].x) * _2378) * _2109) + ((((cbLight._m0[_2225].x * _2078) * ((_2275 * _2276) + _982)) * _2299) * _2122);
    float _2389 = (((((_2359 * _2278) + _984) * cbLight._m0[_2313].y) * _2378) * _2109) + ((((cbLight._m0[_2225].y * _2079) * ((_2275 * _2278) + _984)) * _2299) * _2122);
    float _2390 = (((((_2359 * _2279) + _985) * cbLight._m0[_2313].z) * _2378) * _2109) + ((((cbLight._m0[_2225].z * _2080) * ((_2275 * _2279) + _985)) * _2299) * _2122);
    float _2452;
    float _2454;
    float _2456;
    if (_2162)
    {
        _2452 = _2388;
        _2454 = _2389;
        _2456 = _2390;
    }
    else
    {
        uint _2458 = _2086 + 2u;
        uint _2462 = _2086 + 10u;
        float _2476 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2458].w)) * _912) * 0.949999988079071044921875);
        float _2477 = _2476 * _2476;
        float _2478 = cbLight._m0[_2458].x + _849;
        float _2479 = cbLight._m0[_2458].y + _850;
        float _2480 = cbLight._m0[_2458].z + _851;
        float _2484 = inversesqrt(dot(vec3(_2478, _2479, _2480), vec3(_2478, _2479, _2480)));
        float _2485 = _2484 * _2478;
        float _2486 = _2484 * _2479;
        float _2487 = _2484 * _2480;
        float _2488 = dot(vec3(_769, _770, _771), vec3(cbLight._m0[_2458].xyz));
        float _4531 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2491 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2492 = dot(vec3(_769, _770, _771), vec3(_2485, _2486, _2487));
        float _4542 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2495 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2496 = dot(vec3(cbLight._m0[_2458].xyz), vec3(_2485, _2486, _2487));
        float _4553 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2500 = _2477 * _2477;
        float _2504 = ((_2495 * _2495) * (_2500 + (-1.0))) + 1.0;
        float _2511 = exp2(log2(1.0 - (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) * 5.0);
        float _2518 = 1.0 - _2477;
        float _2528 = (0.5 / (((_2254 * ((_2491 * _2518) + _2477)) + 9.9999999392252902907785028219223e-09) + (((_2254 * _2518) + _2477) * _2491))) * _2491;
        float _4564 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2530 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2500 / ((_2504 * _2504) * 3.141590118408203125));
        float _2531 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2452 = (((((_2511 * _2276) + _982) * cbLight._m0[_2462].x) * _2530) * _2531) + _2388;
        _2454 = (((((_2511 * _2278) + _984) * cbLight._m0[_2462].y) * _2530) * _2531) + _2389;
        _2456 = (((((_2511 * _2279) + _985) * cbLight._m0[_2462].z) * _2530) * _2531) + _2390;
    }
    float _2566;
    float _2568;
    float _2570;
    if (_2180)
    {
        _2566 = _2452;
        _2568 = _2454;
        _2570 = _2456;
    }
    else
    {
        uint _2577 = _2086 + 3u;
        uint _2581 = _2086 + 11u;
        float _2595 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2577].w)) * _912) * 0.949999988079071044921875);
        float _2596 = _2595 * _2595;
        float _2597 = cbLight._m0[_2577].x + _849;
        float _2598 = cbLight._m0[_2577].y + _850;
        float _2599 = cbLight._m0[_2577].z + _851;
        float _2603 = inversesqrt(dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599)));
        float _2604 = _2603 * _2597;
        float _2605 = _2603 * _2598;
        float _2606 = _2603 * _2599;
        float _2607 = dot(vec3(_769, _770, _771), vec3(cbLight._m0[_2577].xyz));
        float _4580 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2610 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2611 = dot(vec3(_769, _770, _771), vec3(_2604, _2605, _2606));
        float _4591 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2614 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2615 = dot(vec3(cbLight._m0[_2577].xyz), vec3(_2604, _2605, _2606));
        float _4602 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2619 = _2596 * _2596;
        float _2623 = ((_2614 * _2614) * (_2619 + (-1.0))) + 1.0;
        float _2630 = exp2(log2(1.0 - (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) * 5.0);
        float _2637 = 1.0 - _2596;
        float _2647 = (0.5 / (((_2254 * ((_2610 * _2637) + _2596)) + 9.9999999392252902907785028219223e-09) + (((_2254 * _2637) + _2596) * _2610))) * _2610;
        float _4613 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2649 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2619 / ((_2623 * _2623) * 3.141590118408203125));
        float _2650 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2566 = (((((_2630 * _2276) + _982) * cbLight._m0[_2581].x) * _2649) * _2650) + _2452;
        _2568 = (((((_2630 * _2278) + _984) * cbLight._m0[_2581].y) * _2649) * _2650) + _2454;
        _2570 = (((((_2630 * _2279) + _985) * cbLight._m0[_2581].z) * _2649) * _2650) + _2456;
    }
    float _2784;
    float _2786;
    float _2788;
    float _2790;
    float _2792;
    float _2794;
    if (_2084.y == 0u)
    {
        float _2725 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2726 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2725;
        float _2727 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2725;
        float _2728 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2725;
        uvec4 _2740 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2741 = _2740.x;
        uint _2752 = uint((float(_2740.y) * floor(float(uint(cbSceneParam._m0[85u].y * _871) / _2741))) + floor(float(uint(cbSceneParam._m0[85u].x * _870) / _2741)));
        float _2762 = (log2(_2728 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2763 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        uint _2766 = uint(isnan(14.0) ? _2763 : (isnan(_2763) ? 14.0 : min(_2763, 14.0)));
        uvec4 _2771 = texelFetch(g_lightClusterGridBuffer, int(((_2766 << 2u) + (_2752 << 6u)) >> 2u));
        uint _2772 = _2771.x;
        uint _2773 = _2740.z;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        if (((((1u << ((_2773 >> 4u) & 15u)) + 4294967295u) & _2772) == 0u) || ((_2773 & 240u) == 0u))
        {
            _2907 = 0.0;
            _2909 = 0.0;
            _2911 = 0.0;
            _2913 = 0.0;
            _2915 = 0.0;
            _2917 = 0.0;
        }
        else
        {
            float _2908;
            float _2910;
            float _2912;
            float _2914;
            float _2916;
            float _2918;
            float _3068 = 0.0;
            float _3069 = 0.0;
            float _3070 = 0.0;
            float _3071 = 0.0;
            float _3072 = 0.0;
            float _3073 = 0.0;
            uint _3074 = 0u;
            uint _3083;
            bool _3084;
            for (;;)
            {
                _3083 = texelFetch(g_lightClassification, int((((_2766 << 5u) + (_2752 << 9u)) + (_3074 << 2u)) >> 2u)).x;
                _3084 = _3083 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3084)
                {
                    frontier_phi_68_pred = _3070;
                    frontier_phi_68_pred_1 = _3073;
                    frontier_phi_68_pred_2 = _3072;
                    frontier_phi_68_pred_3 = _3071;
                    frontier_phi_68_pred_4 = _3069;
                    frontier_phi_68_pred_5 = _3068;
                }
                else
                {
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    uint _3219;
                    _3213 = _3068;
                    _3214 = _3069;
                    _3215 = _3070;
                    _3216 = _3071;
                    _3217 = _3072;
                    _3218 = _3073;
                    _3219 = _3083;
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    float _3145;
                    for (;;)
                    {
                        uint _3223 = uint(findLSB(_3219)) + (_3074 << 5u);
                        uint _3220 = (_3219 + 4294967295u) & _3219;
                        uint _3225 = _3223 * 48u;
                        vec4 _3239 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3225)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 3u)).x));
                        uint _3245 = (_3223 * 48u) + 4u;
                        vec4 _3258 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3245)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 3u)).x));
                        uint _3264 = (_3223 * 48u) + 8u;
                        vec3 _3275 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3264)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 2u)).x));
                        float _3279 = _3239.x - _2726;
                        float _3280 = _3239.y - _2727;
                        float _3281 = _3239.z - _2728;
                        float _3282 = dot(vec3(_3279, _3280, _3281), vec3(_3279, _3280, _3281));
                        float _3285 = inversesqrt(_3282);
                        float _3286 = _3285 * _3279;
                        float _3287 = _3285 * _3280;
                        float _3288 = _3285 * _3281;
                        float _3289 = dot(vec3(_893, _896, _899), vec3(_3286, _3287, _3288));
                        float _3294 = 1.0 - (_3282 * _3239.w);
                        float _4639 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3295 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                        float _3296 = sqrt(_3282) * _3258.w;
                        float _3299 = 1.39999997615814208984375 / (_3296 + 1.39999997615814208984375);
                        float _3300 = _3299 * _3299;
                        float _3303 = ((1.0 - _3300) * _3289) + _3300;
                        float _3306 = _3296 * _3296;
                        float _3310 = ((isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0))) * _3295) / ((_3306 * 0.699999988079071044921875) + 1.0);
                        float _3314 = (-0.0) - _2726;
                        float _3315 = (-0.0) - _2727;
                        float _3316 = (-0.0) - _2728;
                        float _3320 = inversesqrt(dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316)));
                        float _3321 = _3320 * _3314;
                        float _3322 = _3320 * _3315;
                        float _3323 = _3320 * _3316;
                        float _3330 = exp2(log2(1.0 / ((_3306 * 3.5) + 5.0)) * 0.25);
                        float _3331 = 1.0 - _1013;
                        float _3338 = sqrt(1.0 - ((1.0 - (_3331 * _3331)) * (1.0 - (_3330 * _3330))));
                        float _3339 = _3338 * _3338;
                        float _3340 = _3339 * _3339;
                        float _3341 = _3321 + _3286;
                        float _3342 = _3322 + _3287;
                        float _3343 = _3323 + _3288;
                        float _3347 = inversesqrt(dot(vec3(_3341, _3342, _3343), vec3(_3341, _3342, _3343)));
                        float _3351 = dot(vec3(_893, _896, _899), vec3(_3321, _3322, _3323));
                        float _4655 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                        float _3354 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3355 = dot(vec3(_893, _896, _899), vec3(_3347 * _3341, _3347 * _3342, _3347 * _3343));
                        float _4666 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                        float _3358 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                        float _3362 = ((_3358 * _3358) * (_3340 + (-1.0))) + 1.0;
                        float _3363 = _3299 * _3339;
                        float _3364 = _3363 * _3363;
                        float _3367 = ((1.0 - _3364) * _3289) + _3364;
                        float _4677 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3368 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                        float _3369 = 1.0 - _3339;
                        float _3379 = (0.5 / (((_3368 * ((_3354 * _3369) + _3339)) + 9.9999999392252902907785028219223e-09) + (((_3368 * _3369) + _3339) * _3354))) * _3368;
                        float _4688 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3390 = (((_3340 * 3.1415927410125732421875) * (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0)))) / ((_3362 * _3362) * ((_3306 * 2.1991131305694580078125) + 3.141590118408203125))) * _3295;
                        _3143 = (_3310 * _3258.x) + _3216;
                        _3144 = (_3310 * _3258.y) + _3217;
                        _3145 = (_3310 * _3258.z) + _3218;
                        _3140 = (_3390 * _3275.x) + _3213;
                        _3141 = (_3390 * _3275.y) + _3214;
                        _3142 = (_3390 * _3275.z) + _3215;
                        if (_3220 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3213 = _3140;
                            _3214 = _3141;
                            _3215 = _3142;
                            _3216 = _3143;
                            _3217 = _3144;
                            _3218 = _3145;
                            _3219 = _3220;
                        }
                    }
                    frontier_phi_68_pred = _3142;
                    frontier_phi_68_pred_1 = _3145;
                    frontier_phi_68_pred_2 = _3144;
                    frontier_phi_68_pred_3 = _3143;
                    frontier_phi_68_pred_4 = _3141;
                    frontier_phi_68_pred_5 = _3140;
                }
                _2912 = frontier_phi_68_pred;
                _2918 = frontier_phi_68_pred_1;
                _2916 = frontier_phi_68_pred_2;
                _2914 = frontier_phi_68_pred_3;
                _2910 = frontier_phi_68_pred_4;
                _2908 = frontier_phi_68_pred_5;
                uint _3075 = _3074 + 1u;
                if (_3075 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3068 = _2908;
                    _3069 = _2910;
                    _3070 = _2912;
                    _3071 = _2914;
                    _3072 = _2916;
                    _3073 = _2918;
                    _3074 = _3075;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2907 = _2908;
            _2909 = _2910;
            _2911 = _2912;
            _2913 = _2914;
            _2915 = _2916;
            _2917 = _2918;
        }
        uvec4 _2921 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2922 = _2921.z;
        uint _2924 = (_2922 >> 8u) & 15u;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        float _3044;
        float _3046;
        if (((4294967295u << _2924) & _2772) == 0u)
        {
            _3036 = _2907;
            _3038 = _2909;
            _3040 = _2911;
            _3042 = _2913;
            _3044 = _2915;
            _3046 = _2917;
        }
        else
        {
            float _3061 = inversesqrt(dot(vec3(_2726, _2727, _2728), vec3(_2726, _2727, _2728)));
            float _3062 = _3061 * _2726;
            float _3063 = _3061 * _2727;
            float _3064 = _3061 * _2728;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2924 < ((_2922 >> 12u) & 15u))
            {
                float _3037;
                float _3039;
                float _3041;
                float _3043;
                float _3045;
                float _3047;
                float _3196 = _2907;
                float _3197 = _2909;
                float _3198 = _2911;
                float _3199 = _2913;
                float _3200 = _2915;
                float _3201 = _2917;
                uint _3202 = _2924;
                uint _3211;
                bool _3212;
                for (;;)
                {
                    _3211 = texelFetch(g_lightClassification, int((((_2766 << 5u) + (_2752 << 9u)) + (_3202 << 2u)) >> 2u)).x;
                    _3212 = _3211 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3212)
                    {
                        frontier_phi_79_pred = _3201;
                        frontier_phi_79_pred_1 = _3200;
                        frontier_phi_79_pred_2 = _3199;
                        frontier_phi_79_pred_3 = _3198;
                        frontier_phi_79_pred_4 = _3197;
                        frontier_phi_79_pred_5 = _3196;
                    }
                    else
                    {
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3697;
                        float _3698;
                        float _3699;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3417 = _3196;
                        float _3418 = _3197;
                        float _3419 = _3198;
                        float _3420 = _3199;
                        float _3421 = _3200;
                        float _3422 = _3201;
                        uint _3423 = _3211;
                        uint _3424;
                        vec4 _3449;
                        float _3450;
                        vec4 _3465;
                        vec3 _3477;
                        vec4 _3492;
                        vec4 _3507;
                        float _3553;
                        bool _3554;
                        for (;;)
                        {
                            uint _3434 = ((_3202 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3423));
                            _3424 = (_3423 + 4294967295u) & _3423;
                            uint _3436 = _3434 * 40u;
                            _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            _3450 = _3449.w;
                            uint _3452 = (_3434 * 40u) + 4u;
                            _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            uint _3467 = (_3434 * 40u) + 8u;
                            _3477 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x));
                            uint _3479 = (_3434 * 40u) + 16u;
                            _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            uint _3494 = (_3434 * 40u) + 20u;
                            _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            uint _3509 = (_3434 * 40u) + 24u;
                            vec4 _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            uint _3528 = (_3434 * 40u) + 28u;
                            vec4 _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            _3553 = fma(_2728, _3541.z, fma(_2727, _3541.y, _3541.x * _2726)) + _3541.w;
                            _3554 = !((fma(_2728, _3522.z, fma(_2727, _3522.y, _3522.x * _2726)) + _3522.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3554)
                            {
                                float _3581 = _3449.x - _2726;
                                float _3582 = _3449.y - _2727;
                                float _3583 = _3449.z - _2728;
                                float _3584 = dot(vec3(_3581, _3582, _3583), vec3(_3581, _3582, _3583));
                                float _3587 = inversesqrt(_3584);
                                float _3588 = _3587 * _3581;
                                float _3589 = _3587 * _3582;
                                float _3590 = _3587 * _3583;
                                float _3594 = 1.0 - (_3584 / (_3450 * _3450));
                                float _4699 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3595 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3599 = sqrt(_3584) * _3465.w;
                                float _3601 = 1.39999997615814208984375 / (_3599 + 1.39999997615814208984375);
                                float _3602 = _3601 * _3601;
                                float _3605 = ((1.0 - _3602) * dot(vec3(_3588, _3589, _3590), vec3(_893, _896, _899))) + _3602;
                                float _3608 = _3599 * _3599;
                                float _3612 = (fma(_2728, _3492.z, fma(_2727, _3492.y, _3492.x * _2726)) + _3492.w) / _3553;
                                float _3613 = (fma(_2728, _3507.z, fma(_2727, _3507.y, _3507.x * _2726)) + _3507.w) / _3553;
                                float _3617 = 1.0 - dot(vec2(_3612, _3613), vec2(_3612, _3613));
                                float _4715 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3618 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3619 = _3618 * (((isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0))) * _3595) / ((_3608 * 0.699999988079071044921875) + 1.0));
                                float _3631 = exp2(log2(1.0 / ((_3608 * 3.5) + 5.0)) * 0.25);
                                float _3632 = 1.0 - _1013;
                                float _3639 = sqrt(1.0 - ((1.0 - (_3632 * _3632)) * (1.0 - (_3631 * _3631))));
                                float _3640 = _3639 * _3639;
                                float _3641 = _3640 * _3640;
                                float _3642 = _3588 - _3062;
                                float _3643 = _3589 - _3063;
                                float _3644 = _3590 - _3064;
                                float _3648 = inversesqrt(dot(vec3(_3642, _3643, _3644), vec3(_3642, _3643, _3644)));
                                float _3652 = dot(vec3(_893, _896, _899), vec3((-0.0) - _3062, (-0.0) - _3063, (-0.0) - _3064));
                                float _4726 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3655 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3656 = dot(vec3(_893, _896, _899), vec3(_3648 * _3642, _3648 * _3643, _3648 * _3644));
                                float _4737 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                                float _3659 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3663 = ((_3659 * _3659) * (_3641 + (-1.0))) + 1.0;
                                float _3664 = _3601 * _3640;
                                float _3665 = _3664 * _3664;
                                float _3671 = ((1.0 - _3665) * dot(vec3(_893, _896, _899), vec3(_3588, _3589, _3590))) + _3665;
                                float _4748 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3672 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                                float _3673 = 1.0 - _3640;
                                float _3683 = (0.5 / (((_3672 * ((_3655 * _3673) + _3640)) + 9.9999999392252902907785028219223e-09) + (((_3672 * _3673) + _3640) * _3655))) * _3672;
                                float _4759 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3693 = (_3618 * _3595) * (((_3641 * 3.1415927410125732421875) * (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0)))) / ((_3663 * _3663) * ((_3608 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3619 * _3465.z;
                                frontier_phi_85_pred_1 = _3619 * _3465.y;
                                frontier_phi_85_pred_2 = _3619 * _3465.x;
                                frontier_phi_85_pred_3 = _3693 * _3477.z;
                                frontier_phi_85_pred_4 = _3693 * _3477.y;
                                frontier_phi_85_pred_5 = _3693 * _3477.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3702 = frontier_phi_85_pred;
                            _3701 = frontier_phi_85_pred_1;
                            _3700 = frontier_phi_85_pred_2;
                            _3699 = frontier_phi_85_pred_3;
                            _3698 = frontier_phi_85_pred_4;
                            _3697 = frontier_phi_85_pred_5;
                            _3407 = _3700 + _3420;
                            _3408 = _3701 + _3421;
                            _3409 = _3702 + _3422;
                            _3404 = _3697 + _3417;
                            _3405 = _3698 + _3418;
                            _3406 = _3699 + _3419;
                            if (_3424 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3417 = _3404;
                                _3418 = _3405;
                                _3419 = _3406;
                                _3420 = _3407;
                                _3421 = _3408;
                                _3422 = _3409;
                                _3423 = _3424;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3409;
                        frontier_phi_79_pred_1 = _3408;
                        frontier_phi_79_pred_2 = _3407;
                        frontier_phi_79_pred_3 = _3406;
                        frontier_phi_79_pred_4 = _3405;
                        frontier_phi_79_pred_5 = _3404;
                    }
                    _3047 = frontier_phi_79_pred;
                    _3045 = frontier_phi_79_pred_1;
                    _3043 = frontier_phi_79_pred_2;
                    _3041 = frontier_phi_79_pred_3;
                    _3039 = frontier_phi_79_pred_4;
                    _3037 = frontier_phi_79_pred_5;
                    uint _3203 = _3202 + 1u;
                    if (_3203 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3196 = _3037;
                        _3197 = _3039;
                        _3198 = _3041;
                        _3199 = _3043;
                        _3200 = _3045;
                        _3201 = _3047;
                        _3202 = _3203;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3043;
                frontier_phi_60_61_ladder_1 = _3047;
                frontier_phi_60_61_ladder_2 = _3045;
                frontier_phi_60_61_ladder_3 = _3041;
                frontier_phi_60_61_ladder_4 = _3039;
                frontier_phi_60_61_ladder_5 = _3037;
            }
            else
            {
                frontier_phi_60_61_ladder = _2913;
                frontier_phi_60_61_ladder_1 = _2917;
                frontier_phi_60_61_ladder_2 = _2915;
                frontier_phi_60_61_ladder_3 = _2911;
                frontier_phi_60_61_ladder_4 = _2909;
                frontier_phi_60_61_ladder_5 = _2907;
            }
            _3036 = frontier_phi_60_61_ladder_5;
            _3038 = frontier_phi_60_61_ladder_4;
            _3040 = frontier_phi_60_61_ladder_3;
            _3042 = frontier_phi_60_61_ladder;
            _3044 = frontier_phi_60_61_ladder_2;
            _3046 = frontier_phi_60_61_ladder_1;
        }
        float _3051 = isnan(1.0) ? _997 : (isnan(_997) ? 1.0 : min(_997, 1.0));
        _2784 = (_3051 * _3042) + _2218;
        _2786 = (_3051 * _3044) + _2220;
        _2788 = (_3051 * _3046) + _2222;
        _2790 = ((_3036 * _982) * _3051) + _2566;
        _2792 = ((_3038 * _984) * _3051) + _2568;
        _2794 = ((_3040 * _985) * _3051) + _2570;
    }
    else
    {
        _2784 = _2218;
        _2786 = _2220;
        _2788 = _2222;
        _2790 = _2566;
        _2792 = _2568;
        _2794 = _2570;
    }
    uint _2800 = _926 + uint(cbMatDynParam._m0[0u].w);
    float _2808 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[22u].z) * _713.x) * cbInstanceData._m0[_2800].x;
    float _2811 = ((cbMtdParam._m0[11u].y * cbMtdParam._m0[22u].z) * _713.y) * cbInstanceData._m0[_2800].y;
    float _2814 = ((cbMtdParam._m0[11u].z * cbMtdParam._m0[22u].z) * _713.z) * cbInstanceData._m0[_2800].z;
    float _4775 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _4786 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _4797 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _2831 = (((isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2784 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _997))) + ((_2790 + ((isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0))) * _1837)) * cbPerFrame._m0[3u].x)) + _2808;
    float _2833 = (_2811 + ((_2792 + ((isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0))) * _1837)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2786 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _997)));
    float _2835 = (_2814 + ((_2794 + ((isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0))) * _1837)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2788 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _997)));
    float _2836 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
    float _2837 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
    float _2838 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
    float _2844 = cbMtdParam._m0[2u].x * _2808;
    float _2845 = cbMtdParam._m0[2u].y * _2811;
    float _2846 = cbMtdParam._m0[2u].z * _2814;
    float _4823 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2848 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
    uint _2849 = _925 + 6u;
    float _2857 = _870 / cbSceneParam._m0[86u].x;
    float _2858 = _871 / cbSceneParam._m0[86u].y;
    vec4 _2872 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2857, _2858, (log2((isnan(cbSceneParam._m0[77u].w) ? _792 : (isnan(_792) ? cbSceneParam._m0[77u].w : min(_792, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2874 = _2872.x;
    float _2875 = _2872.y;
    float _2876 = _2872.z;
    float _2877 = _2872.w;
    float _2969;
    float _2971;
    float _2973;
    float _2975;
    if (_792 > cbSceneParam._m0[78u].w)
    {
        float _2932 = isnan(_792) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _792 : min(cbSceneParam._m0[80u].w, _792));
        float _2933 = _2932 / _792;
        float _2944 = _2933 * _842;
        float _2945 = _843 * _2933;
        float _2946 = (-0.0) - _2945;
        float _2947 = _2933 * _844;
        float _2949 = (cbSceneParam._m0[77u].w * _2946) / _2932;
        float _2950 = _2949 + cbSceneParam._m0[79u].w;
        float _2951 = cbSceneParam._m0[79u].w - _2945;
        float _2957 = sqrt(((_2944 * _2944) + (_2945 * _2945)) + (_2947 * _2947));
        float _2960 = (1.0 - (cbSceneParam._m0[77u].w / _2932)) * _2957;
        float _2965 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2967 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3153;
        if (abs((_2946 - _2949) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3153 = ((((_2950 > 0.0) ? exp2(_2965 * _2950) : (2.0 - exp2(_2967 * _2950))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2960;
        }
        else
        {
            float _3097 = 1.0 / cbSceneParam._m0[80u].x;
            float _3098 = isnan(_2951) ? _2950 : (isnan(_2950) ? _2951 : max(_2950, _2951));
            float _3099 = isnan(_2951) ? _2950 : (isnan(_2950) ? _2951 : min(_2950, _2951));
            float _3108 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : min(_3098, 0.0));
            float _3109 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : min(_3099, 0.0));
            _3153 = ((abs(_2957 / _2946) * cbSceneParam._m0[80u].y) * ((((_3108 - _3109) * 2.0) - ((exp2(_2965 * (isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0)))) - exp2(_2965 * (isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0))))) * _3097)) - ((exp2(_2967 * _3108) - exp2(_2967 * _3109)) * _3097))) + (_2960 * cbSceneParam._m0[80u].z);
        }
        vec4 _3155 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2857, _2858, 1.0), 0.0);
        float _3164 = exp2((_3153 * (-1.44269502162933349609375)) * (1.0 - _3155.w));
        float _3165 = log2(_3164);
        float _3181 = log2(_2877);
        _2969 = (exp2(_3181 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3165 * cbSceneParam._m0[78u].x)) * _3155.x) / cbSceneParam._m0[78u].x)) + _2874;
        _2971 = (exp2(_3181 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3165 * cbSceneParam._m0[78u].y)) * _3155.y) / cbSceneParam._m0[78u].y)) + _2875;
        _2973 = (exp2(_3181 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3165 * cbSceneParam._m0[78u].z)) * _3155.z) / cbSceneParam._m0[78u].z)) + _2876;
        _2975 = _3164 * _2877;
    }
    else
    {
        _2969 = _2874;
        _2971 = _2875;
        _2973 = _2876;
        _2975 = _2877;
    }
    bool _3191;
    vec4 _2985;
    vec4 _3007;
    float _3009;
    float _3013;
    float _3014;
    float _3015;
    float _3018;
    float _3021;
    float _3024;
    float _3025;
    bool _3035;
    for (;;)
    {
        _2985 = cbMatDynParam._m0[0u];
        float _2987 = roundEven(_2985.y);
        bool _2988 = _2987 == 3.0;
        float _2989 = log2(_2975);
        float _2993 = exp2(_2989 * cbSceneParam._m0[78u].x);
        float _2994 = exp2(_2989 * cbSceneParam._m0[78u].y);
        float _2995 = exp2(_2989 * cbSceneParam._m0[78u].z);
        float _2996 = _2993 * _2836;
        float _2997 = _2994 * _2837;
        float _2998 = _2995 * _2838;
        float _3005 = _858 + (-0.5);
        _3007 = cbMtdParam._m0[1u];
        _3009 = _3007.y * _3005;
        float _3012 = (_2987 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3013 = _3012 * (_2988 ? _2996 : (_2996 + (cbSceneParam._m0[72u].w * _2969)));
        _3014 = _3012 * (_2988 ? _2997 : (_2997 + (cbSceneParam._m0[72u].w * _2971)));
        _3015 = _3012 * (_2988 ? _2998 : (_2998 + (cbSceneParam._m0[72u].w * _2973)));
        _3018 = ((_2844 * _2848) * _2993) * _3012;
        _3021 = ((_2845 * _2848) * _2994) * _3012;
        _3024 = ((_2846 * _2848) * _2995) * _3012;
        _3025 = _3005 * 0.999000012874603271484375;
        _3035 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3035)
        {
            if ((cbInstanceData._m0[_925 + 7u].x + _3025) < 0.5)
            {
                _3191 = true;
                break;
            }
        }
        uint _3132 = _926 + uint(_2985.w);
        if ((cbInstanceData._m0[_3132].w < 1.0) && ((cbInstanceData._m0[_3132].w + _3025) < 0.5))
        {
            _3191 = true;
            break;
        }
        if ((_3009 + 1.0) < _3007.x)
        {
            _3191 = true;
            break;
        }
        _3191 = false;
        break;
    }
    float _3395;
    if (_3191)
    {
        discard_state = true;
        _3395 = 0.0;
    }
    else
    {
        _3395 = cbInstanceData._m0[_2849].w;
    }
    SV_Target.x = _3013;
    SV_Target.y = _3014;
    SV_Target.z = _3015;
    SV_Target.w = _3395;
    SV_Target_1.x = _3018;
    SV_Target_1.y = _3021;
    SV_Target_1.z = _3024;
    SV_Target_1.w = cbInstanceData._m0[_2849].w;
    discard_exit();
}


