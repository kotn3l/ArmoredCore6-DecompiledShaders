#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1375;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252;
    float _253;
    float _254;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _252 = (-0.0) - _238;
        _253 = (-0.0) - _239;
        _254 = (-0.0) - _240;
    }
    else
    {
        _252 = _238;
        _253 = _239;
        _254 = _240;
    }
    vec4 _269 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _279 = log2(0.0);
    float _281 = exp2(_279 * cbMtdParam._m0[21u].y);
    float _282 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _283 = isnan(1.0) ? _282 : (isnan(_282) ? 1.0 : min(_282, 1.0));
    vec4 _297 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _301 = _297.z;
    float _302 = _297.w;
    float _310 = exp2(log2(_301 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _311 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _312 = isnan(1.0) ? _311 : (isnan(_311) ? 1.0 : min(_311, 1.0));
    vec4 _325 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _348 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _350 = _348.x;
    float _351 = _348.y;
    float _375 = ((cbMtdParam._m0[20u].w * _348.z) * (texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].z * TEXCOORD.x) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((cbMtdParam._m0[20u].z * TEXCOORD.y) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w)).x - _350)) + _350;
    bool _411 = _375 >= 0.25;
    bool _416 = _375 >= 0.3499999940395355224609375;
    bool _421 = _375 >= 0.5;
    bool _426 = _375 >= 0.64999997615814208984375;
    bool _431 = _375 >= 0.75;
    vec4 _459 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _469 = cbMtdParam._m0[9u].x * _459.x;
    float _470 = cbMtdParam._m0[9u].y * _459.y;
    float _471 = cbMtdParam._m0[9u].z * _459.z;
    float _478 = (((((((_431 ? cbMtdParam._m0[14u].x : (_426 ? cbMtdParam._m0[19u].x : (_421 ? cbMtdParam._m0[18u].x : (_416 ? cbMtdParam._m0[17u].x : (_411 ? cbMtdParam._m0[16u].x : cbMtdParam._m0[15u].x))))) - cbMtdParam._m0[10u].x) * _351) + cbMtdParam._m0[10u].x) * _325.x) - _469) * _312) + _469;
    float _479 = (((((((_431 ? cbMtdParam._m0[14u].y : (_426 ? cbMtdParam._m0[19u].y : (_421 ? cbMtdParam._m0[18u].y : (_416 ? cbMtdParam._m0[17u].y : (_411 ? cbMtdParam._m0[16u].y : cbMtdParam._m0[15u].y))))) - cbMtdParam._m0[10u].y) * _351) + cbMtdParam._m0[10u].y) * _325.y) - _470) * _312) + _470;
    float _480 = (((((((_431 ? cbMtdParam._m0[14u].z : (_426 ? cbMtdParam._m0[19u].z : (_421 ? cbMtdParam._m0[18u].z : (_416 ? cbMtdParam._m0[17u].z : (_411 ? cbMtdParam._m0[16u].z : cbMtdParam._m0[15u].z))))) - cbMtdParam._m0[10u].z) * _351) + cbMtdParam._m0[10u].z) * _325.z) - _471) * _312) + _471;
    float _487 = exp2(log2(_302) * cbMtdParam._m0[22u].y);
    vec4 _500 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _520 = (((cbMtdParam._m0[12u].x * _500.x) - _478) * _487) + _478;
    float _521 = (((cbMtdParam._m0[12u].y * _500.y) - _479) * _487) + _479;
    float _522 = (((cbMtdParam._m0[12u].z * _500.z) - _480) * _487) + _480;
    vec4 _534 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _558 = (_269.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _534.x) - _520) * _283) + _520);
    float _560 = (_269.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _534.y) - _521) * _283) + _521);
    float _562 = (_269.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _534.z) - _522) * _283) + _522);
    float _567 = exp2(log2(1.0 - _302) * 0.00999999977648258209228515625);
    float _585 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[22u].w) * _567) + cbMtdParam._m0[22u].w;
    float _604 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _585) + cbMtdParam._m0[21u].z) * _487) + _585;
    float _626 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _604) + cbMtdParam._m0[23u].w) * _283) + _604;
    vec4 _639 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _657 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _659 = _657.x;
    float _660 = _657.y;
    float _663 = cbMtdParam._m0[20u].x + _657.z;
    float _666 = (((cbMtdParam._m0[21u].x + _639.z) - _663) * _567) + _663;
    vec4 _678 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _690 = (_301 * 2.0) * ((((_678.z - _666) + cbMtdParam._m0[23u].y) * _487) + _666);
    vec4 _702 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _711 = (((_702.z - _690) + cbMtdParam._m0[22u].x) * _283) + _690;
    vec4 _730 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _745 = ((_639.x - _659) * _567) + _659;
    float _746 = ((_639.y - _660) * _567) + _660;
    float _751 = ((_678.x - _745) * _487) + _745;
    float _752 = ((_678.y - _746) * _487) + _746;
    float _761 = ((((_702.x - _751) * _283) + _751) * 2.0) + (-1.0);
    float _762 = ((((_702.y - _752) * _283) + _752) * 2.0) + (-1.0);
    float _763 = dot(vec2(_761, _762), vec2(_761, _762));
    float _3788 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _768 = sqrt(1.0 - (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))));
    float _771 = (cbMtdParam._m0[23u].x * ((_297.x * 2.0) + (-1.0))) + _761;
    float _772 = (cbMtdParam._m0[23u].x * ((_297.y * 2.0) + (-1.0))) + _762;
    float _775 = fma(_768, _252, fma(_772, _244 * TANGENT.x, (_230 * _223) * _771));
    float _778 = fma(_768, _253, fma(_772, _244 * TANGENT.y, (_230 * _224) * _771));
    float _781 = fma(_768, _254, fma(_772, _244 * TANGENT.z, (_230 * _225) * _771));
    float _785 = inversesqrt(dot(vec3(_775, _778, _781), vec3(_775, _778, _781)));
    float _786 = _785 * _775;
    float _787 = _785 * _778;
    float _788 = _785 * _781;
    float _3799 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _789 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _3810 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _3821 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3832 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3843 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _793 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _809 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _859 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _849);
    float _860 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _849);
    float _861 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _849);
    float _865 = inversesqrt(dot(vec3(_859, _860, _861), vec3(_859, _860, _861)));
    float _866 = _859 * _865;
    float _867 = _860 * _865;
    float _868 = _861 * _865;
    float _874 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _875 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _877 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _879 = _877.w;
    float _897 = fma(_788, cbSceneParam._m0[5u].z, fma(_787, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _786));
    float _900 = fma(_788, cbSceneParam._m0[6u].z, fma(_787, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _786));
    float _903 = fma(_788, cbSceneParam._m0[7u].z, fma(_787, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _786));
    vec4 _905 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _916 = (((_905.y - _789) + (_905.w * _789)) * cbMtdParam._m0[3u].x) + _789;
    uint _929 = uint(roundEven(NORMAL.w)) * 13u;
    uint _930 = _929 + 9u;
    uint _931 = _930 + uint(cbMatDynParam._m0[0u].w);
    float _937 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0)))) * cbInstanceData._m0[_931].x;
    float _938 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0)))) * cbInstanceData._m0[_931].y;
    float _939 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0)))) * cbInstanceData._m0[_931].z;
    float _3854 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _940 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _3865 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _941 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _3876 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _942 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    vec4 _943 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _948 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _959 = (((_948.x - _793) + (_948.w * _793)) * cbMtdParam._m0[3u].x) + _793;
    float _972 = (cbMtdParam._m0[3u].x * (((_940 * _879) - _940) + _943.x)) + _940;
    float _973 = (cbMtdParam._m0[3u].x * (((_941 * _879) - _941) + _943.y)) + _941;
    float _974 = (cbMtdParam._m0[3u].x * (((_942 * _879) - _942) + _943.z)) + _942;
    float _975 = 1.0 - _959;
    float _976 = _975 * _972;
    float _977 = _975 * _973;
    float _978 = _975 * _974;
    float _983 = (_972 + (-0.039999999105930328369140625)) * _959;
    float _984 = (_973 + (-0.039999999105930328369140625)) * _959;
    float _985 = (_974 + (-0.039999999105930328369140625)) * _959;
    float _986 = _983 + 0.039999999105930328369140625;
    float _988 = _984 + 0.039999999105930328369140625;
    float _989 = _985 + 0.039999999105930328369140625;
    vec4 _998 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _874, cbSceneParam._m0[86u].y * _875));
    float _1001 = _998.x * TEXCOORD_4.z;
    float _1002 = dot(vec3(_786, _787, _788), vec3(_866, _867, _868));
    float _1005 = _1002 * 2.0;
    float _1009 = (_1005 * _786) - _866;
    float _1010 = (_1005 * _787) - _867;
    float _1011 = (_1005 * _788) - _868;
    float _1015 = abs(dot(vec3(_866, _867, _868), vec3(_786, _787, _788)));
    float _3887 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _1017 = sqrt(_916);
    float _1030 = exp2((_1017 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1017 * 3.0));
    float _1036 = (1.0 - _1030) * ((_1017 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1037 = _1030 * _1017;
    float _1065 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1069 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1073 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1374;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1100 = fma(_1073, cbModelParam._m0[26u].z, fma(_1069, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1065));
        float _1104 = fma(_1073, cbModelParam._m0[27u].z, fma(_1069, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1065));
        float _1108 = fma(_1073, cbModelParam._m0[28u].z, fma(_1069, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1065));
        float _1132 = _1065 + _786;
        float _1133 = _1069 + _787;
        float _1134 = _1073 + _788;
        float _1144 = fma(_1134, cbModelParam._m0[26u].z, fma(_1133, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1132)) - _1100;
        float _1145 = fma(_1134, cbModelParam._m0[27u].z, fma(_1133, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1132)) - _1104;
        float _1146 = fma(_1134, cbModelParam._m0[28u].z, fma(_1133, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1132)) - _1108;
        float _1150 = inversesqrt(dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146)));
        float _1163 = ((_1150 * _1144) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1100 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1150 * _1145) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1104 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1150 * _1146) / cbModelParam._m0[34u].z) + ((((((_1108 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        float _1202 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1168.x + (-0.5));
        float _1204 = _1202 * (_1168.y + (-0.5));
        float _1205 = _1202 * (_1168.z + (-0.5));
        float _1212 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1175.x + (-0.5));
        float _1214 = _1212 * (_1175.y + (-0.5));
        float _1215 = _1212 * (_1175.z + (-0.5));
        float _1222 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1182.x + (-0.5));
        float _1224 = _1222 * (_1182.y + (-0.5));
        float _1225 = _1222 * (_1182.z + (-0.5));
        float _1232 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1189.x + (-0.5));
        float _1234 = _1232 * (_1189.y + (-0.5));
        float _1235 = _1232 * (_1189.z + (-0.5));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = _1203 * 0.5;
        float _1240 = _1213 * 0.5;
        float _1241 = _1223 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1256 = (dot(vec3(_786, _787, _788), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _3913 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1266 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3924 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _3935 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1268 + 1.0))) + _1273) * _1236;
        float _1283 = _1204 * 0.5;
        float _1284 = _1214 * 0.5;
        float _1285 = _1224 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_786, _787, _788), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _3946 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3957 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _3968 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1310 + 1.0))) + _1315) * _1237;
        float _1325 = _1205 * 0.5;
        float _1326 = _1215 * 0.5;
        float _1327 = _1225 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_786, _787, _788), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _3979 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _3990 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _4001 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1352 + 1.0))) + _1357) * _1238;
        _1374 = _1205;
        _1376 = _1204;
        _1377 = _1203;
        _1378 = _1215;
        _1379 = _1214;
        _1380 = _1213;
        _1381 = _1225;
        _1382 = _1224;
        _1383 = _1223;
        _1384 = _1238;
        _1385 = _1237;
        _1386 = _1236;
        _1387 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
        _1388 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
        _1389 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
    }
    else
    {
        _1374 = _1375;
        _1376 = _1375;
        _1377 = _1375;
        _1378 = _1375;
        _1379 = _1375;
        _1380 = _1375;
        _1381 = _1375;
        _1382 = _1375;
        _1383 = _1375;
        _1384 = _1375;
        _1385 = _1375;
        _1386 = _1375;
        _1387 = 0.0;
        _1388 = 0.0;
        _1389 = 0.0;
    }
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1415 = fma(_1073, cbModelParam._m0[30u].z, fma(_1069, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1065));
        float _1419 = fma(_1073, cbModelParam._m0[31u].z, fma(_1069, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1065));
        float _1423 = fma(_1073, cbModelParam._m0[32u].z, fma(_1069, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1065));
        float _1446 = _1065 + _786;
        float _1447 = _1069 + _787;
        float _1448 = _1073 + _788;
        float _1458 = fma(_1448, cbModelParam._m0[30u].z, fma(_1447, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1446)) - _1415;
        float _1459 = fma(_1448, cbModelParam._m0[31u].z, fma(_1447, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1446)) - _1419;
        float _1460 = fma(_1448, cbModelParam._m0[32u].z, fma(_1447, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1446)) - _1423;
        float _1464 = inversesqrt(dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460)));
        float _1477 = ((_1464 * _1458) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1415 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1478 = ((_1464 * _1459) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1419 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1479 = ((_1464 * _1460) / cbModelParam._m0[35u].z) + ((((((_1423 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1477, _1478, _1479), 0.0);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1477, _1478, _1479), 0.0);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1477, _1478, _1479), 0.0);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1477, _1478, _1479), 0.0);
        float _1514 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1481.x + (-0.5));
        float _1516 = _1514 * (_1481.y + (-0.5));
        float _1517 = _1514 * (_1481.z + (-0.5));
        float _1524 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = _1524 * (_1488.x + (-0.5));
        float _1526 = _1524 * (_1488.y + (-0.5));
        float _1527 = _1524 * (_1488.z + (-0.5));
        float _1534 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1535 = _1534 * (_1495.x + (-0.5));
        float _1536 = _1534 * (_1495.y + (-0.5));
        float _1537 = _1534 * (_1495.z + (-0.5));
        float _1544 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1545 = _1544 * (_1502.x + (-0.5));
        float _1546 = _1544 * (_1502.y + (-0.5));
        float _1547 = _1544 * (_1502.z + (-0.5));
        float _1548 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1549 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1550 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1551 = _1515 * 0.5;
        float _1552 = _1525 * 0.5;
        float _1553 = _1535 * 0.5;
        float _1554 = dot(vec3(_1551, _1552, _1553), vec3(_1551, _1552, _1553));
        float _1559 = (_1554 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1554);
        float _1567 = (dot(vec3(_786, _787, _788), vec3(_1559 * _1551, _1559 * _1552, _1559 * _1553)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1576 = sqrt(((_1552 * _1552) + (_1551 * _1551)) + (_1553 * _1553)) / (_1548 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1578 = _1577 * 2.0;
        float _1582 = (1.0 - _1577) / (_1577 + 1.0);
        float _4064 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1592 = ((((1.0 - _1583) * (_1578 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1578 + 1.0))) + _1583) * _1548;
        float _1593 = _1516 * 0.5;
        float _1594 = _1526 * 0.5;
        float _1595 = _1536 * 0.5;
        float _1596 = dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595));
        float _1601 = (_1596 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1596);
        float _1609 = (dot(vec3(_786, _787, _788), vec3(_1601 * _1593, _1601 * _1594, _1601 * _1595)) + 1.0) * 0.5;
        float _4075 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1618 = sqrt(((_1594 * _1594) + (_1593 * _1593)) + (_1595 * _1595)) / (_1549 + 9.9999997473787516355514526367188e-06);
        float _4086 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1620 = _1619 * 2.0;
        float _1624 = (1.0 - _1619) / (_1619 + 1.0);
        float _4097 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1634 = ((((1.0 - _1625) * (_1620 + 2.0)) * exp2(log2(isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_1620 + 1.0))) + _1625) * _1549;
        float _1635 = _1517 * 0.5;
        float _1636 = _1527 * 0.5;
        float _1637 = _1537 * 0.5;
        float _1638 = dot(vec3(_1635, _1636, _1637), vec3(_1635, _1636, _1637));
        float _1643 = (_1638 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1638);
        float _1651 = (dot(vec3(_786, _787, _788), vec3(_1643 * _1635, _1643 * _1636, _1643 * _1637)) + 1.0) * 0.5;
        float _4108 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1660 = sqrt(((_1636 * _1636) + (_1635 * _1635)) + (_1637 * _1637)) / (_1550 + 9.9999997473787516355514526367188e-06);
        float _4119 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1662 = _1661 * 2.0;
        float _1666 = (1.0 - _1661) / (_1661 + 1.0);
        float _4130 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1676 = ((((1.0 - _1667) * (_1662 + 2.0)) * exp2(log2(isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_1662 + 1.0))) + _1667) * _1550;
        _1684 = _1517;
        _1685 = _1516;
        _1686 = _1515;
        _1687 = _1527;
        _1688 = _1526;
        _1689 = _1525;
        _1690 = _1537;
        _1691 = _1536;
        _1692 = _1535;
        _1693 = _1550;
        _1694 = _1549;
        _1695 = _1548;
        _1696 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)));
        _1697 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)));
        _1698 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)));
    }
    else
    {
        _1684 = _1375;
        _1685 = _1375;
        _1686 = _1375;
        _1687 = _1375;
        _1688 = _1375;
        _1689 = _1375;
        _1690 = _1375;
        _1691 = _1375;
        _1692 = _1375;
        _1693 = _1375;
        _1694 = _1375;
        _1695 = _1375;
        _1696 = 0.0;
        _1697 = 0.0;
        _1698 = 0.0;
    }
    float _1708 = (cbModelParam._m0[1u].x * (_1696 - _1387)) + _1387;
    float _1709 = (cbModelParam._m0[1u].x * (_1697 - _1388)) + _1388;
    float _1710 = (cbModelParam._m0[1u].x * (_1698 - _1389)) + _1389;
    float _1731 = fma(_1710, cbSceneParam._m0[89u].z, fma(_1709, cbSceneParam._m0[89u].y, _1708 * cbSceneParam._m0[89u].x));
    float _1734 = fma(_1710, cbSceneParam._m0[90u].z, fma(_1709, cbSceneParam._m0[90u].y, _1708 * cbSceneParam._m0[90u].x));
    float _1737 = fma(_1710, cbSceneParam._m0[91u].z, fma(_1709, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1708));
    float _1752 = _1009 * 0.5;
    float _1753 = _1010 * 0.5;
    float _1754 = _1011 * 0.5;
    float _1755 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1686, _1689, _1692, _1695));
    float _1758 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1685, _1688, _1691, _1694));
    float _1761 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1684, _1687, _1690, _1693));
    float _1795;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1768 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1374, _1378, _1381, _1384));
        float _1772 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1376, _1379, _1382, _1385));
        float _1776 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1377, _1380, _1383, _1386));
        float _1783 = dot(vec4(cbModelParam._m0[39u]), vec4(_1752, _1753, _1754, 1.0));
        _1795 = dot(vec3(isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)), isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1783) ? 0.0 : (isnan(0.0) ? _1783 : max(0.0, _1783))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1795 = 1.0;
    }
    float _1806;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1797 = dot(vec4(cbModelParam._m0[40u]), vec4(_1752, _1753, _1754, 1.0));
        _1806 = dot(vec3(isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1797) ? 0.0 : (isnan(0.0) ? _1797 : max(0.0, _1797))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1806 = 1.0;
    }
    float _1810 = (_1806 * cbModelParam._m0[1u].x) + (_1795 * (1.0 - cbModelParam._m0[1u].x));
    float _1820 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _916);
    float _1821 = isnan(_1820) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1820 : min(cbModelParam._m0[25u].z, _1820));
    float _1901;
    float _1903;
    float _1905;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1868 = fma(_1073, cbModelParam._m0[13u].z, fma(_1069, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1065)) + cbModelParam._m0[13u].w;
        float _1872 = fma(_1073, cbModelParam._m0[14u].z, fma(_1069, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1065)) + cbModelParam._m0[14u].w;
        float _1876 = fma(_1073, cbModelParam._m0[15u].z, fma(_1069, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1065)) + cbModelParam._m0[15u].w;
        float _1879 = fma(_1011, cbModelParam._m0[13u].z, fma(_1010, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1009));
        float _1882 = fma(_1011, cbModelParam._m0[14u].z, fma(_1010, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1009));
        float _1885 = fma(_1011, cbModelParam._m0[15u].z, fma(_1010, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1009));
        float _1913;
        if (_1879 > 0.0)
        {
            _1913 = abs((1.0 - _1868) / _1879);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1868 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1913 = frontier_phi_16_14_ladder;
        }
        float _2136;
        if (_1882 > 0.0)
        {
            _2136 = abs((1.0 - _1872) / _1882);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1872 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2136 = frontier_phi_25_21_ladder;
        }
        float _2393;
        if (_1885 > 0.0)
        {
            _2393 = abs((1.0 - _1876) / _1885);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1876 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2393 = frontier_phi_37_32_ladder;
        }
        float _2395 = isnan(_2136) ? _1913 : (isnan(_1913) ? _2136 : min(_1913, _2136));
        float _2396 = isnan(_2393) ? _2395 : (isnan(_2395) ? _2393 : min(_2395, _2393));
        float _2400 = (_2396 * _1879) + _1868;
        float _2401 = (_2396 * _1882) + _1872;
        float _2402 = (_2396 * _1885) + _1876;
        float _2403 = _2396 * 9.9999997473787516355514526367188e-05;
        float _2405 = (-1.0) - _2403;
        float _2407 = _2403 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2402 > _2407) || ((_2402 < _2405) || ((_2401 > _2407) || ((_2401 < _2405) || ((_2400 < _2405) || (_2400 > _2407))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2530 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2402, cbModelParam._m0[9u].z, fma(_2401, cbModelParam._m0[9u].y, _2400 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2402, cbModelParam._m0[10u].z, fma(_2401, cbModelParam._m0[10u].y, _2400 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2402, cbModelParam._m0[11u].z, fma(_2401, cbModelParam._m0[11u].y, _2400 * cbModelParam._m0[11u].x))), _1821);
            frontier_phi_15_37_ladder = _2530.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2530.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2530.x * cbModelParam._m0[1u].y;
        }
        _1901 = frontier_phi_15_37_ladder_2;
        _1903 = frontier_phi_15_37_ladder_1;
        _1905 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1889 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1009, _1010, _1011), _1821);
        _1901 = _1889.x * cbModelParam._m0[1u].y;
        _1903 = _1889.y * cbModelParam._m0[1u].y;
        _1905 = _1889.z * cbModelParam._m0[1u].y;
    }
    float _1909 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _916);
    float _1910 = isnan(_1909) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1909 : min(cbModelParam._m0[25u].w, _1909));
    float _1999;
    float _2001;
    float _2003;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1963 = fma(_1073, cbModelParam._m0[21u].z, fma(_1069, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1065)) + cbModelParam._m0[21u].w;
        float _1967 = fma(_1073, cbModelParam._m0[22u].z, fma(_1069, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1065)) + cbModelParam._m0[22u].w;
        float _1971 = fma(_1073, cbModelParam._m0[23u].z, fma(_1069, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1065)) + cbModelParam._m0[23u].w;
        float _1974 = fma(_1011, cbModelParam._m0[21u].z, fma(_1010, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1009));
        float _1977 = fma(_1011, cbModelParam._m0[22u].z, fma(_1010, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1009));
        float _1980 = fma(_1011, cbModelParam._m0[23u].z, fma(_1010, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1009));
        float _2141;
        if (_1974 > 0.0)
        {
            _2141 = abs((1.0 - _1963) / _1974);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1963 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2141 = frontier_phi_27_23_ladder;
        }
        float _2420;
        if (_1977 > 0.0)
        {
            _2420 = abs((1.0 - _1967) / _1977);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1967 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2420 = frontier_phi_39_34_ladder;
        }
        float _2633;
        if (_1980 > 0.0)
        {
            _2633 = abs((1.0 - _1971) / _1980);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1971 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2633 = frontier_phi_48_45_ladder;
        }
        float _2635 = isnan(_2420) ? _2141 : (isnan(_2141) ? _2420 : min(_2141, _2420));
        float _2636 = isnan(_2633) ? _2635 : (isnan(_2635) ? _2633 : min(_2635, _2633));
        float _2640 = (_2636 * _1974) + _1963;
        float _2641 = (_2636 * _1977) + _1967;
        float _2642 = (_2636 * _1980) + _1971;
        float _2643 = _2636 * 9.9999997473787516355514526367188e-05;
        float _2644 = (-1.0) - _2643;
        float _2646 = _2643 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2642 > _2646) || ((_2642 < _2644) || ((_2641 > _2646) || ((_2641 < _2644) || ((_2640 < _2644) || (_2640 > _2646))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2875 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2642, cbModelParam._m0[17u].z, fma(_2641, cbModelParam._m0[17u].y, _2640 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2642, cbModelParam._m0[18u].z, fma(_2641, cbModelParam._m0[18u].y, _2640 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2642, cbModelParam._m0[19u].z, fma(_2641, cbModelParam._m0[19u].y, _2640 * cbModelParam._m0[19u].x))), _1910);
            frontier_phi_24_48_ladder = _2875.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2875.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2875.x * cbModelParam._m0[1u].z;
        }
        _1999 = frontier_phi_24_48_ladder_2;
        _2001 = frontier_phi_24_48_ladder_1;
        _2003 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1983 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1009, _1010, _1011), _1910);
        _1999 = _1983.x * cbModelParam._m0[1u].z;
        _2001 = _1983.y * cbModelParam._m0[1u].z;
        _2003 = _1983.z * cbModelParam._m0[1u].z;
    }
    float _2016 = (((_1036 * _986) + _1037) * _1001) * ((cbModelParam._m0[1u].w * (_1999 - _1901)) + _1901);
    float _2018 = (((_1036 * _988) + _1037) * _1001) * ((cbModelParam._m0[1u].w * (_2001 - _1903)) + _1903);
    float _2020 = (((_1036 * _989) + _1037) * _1001) * ((cbModelParam._m0[1u].w * (_2003 - _1905)) + _1905);
    float _2023 = fma(_2020, cbSceneParam._m0[89u].z, fma(_2018, cbSceneParam._m0[89u].y, _2016 * cbSceneParam._m0[89u].x));
    float _2026 = fma(_2020, cbSceneParam._m0[90u].z, fma(_2018, cbSceneParam._m0[90u].y, _2016 * cbSceneParam._m0[90u].x));
    float _2029 = fma(_2020, cbSceneParam._m0[91u].z, fma(_2018, cbSceneParam._m0[91u].y, _2016 * cbSceneParam._m0[91u].x));
    vec4 _2037 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_874, _875));
    float _2039 = _2037.w;
    float _2051 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2039);
    float _2052 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2039);
    float _2053 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2039);
    uvec4 _2057 = floatBitsToUint(cbInstanceData._m0[_929 + 5u]);
    uint _2059 = _2057.x * 14u;
    uint _2060 = _2059 + 13u;
    float _2067 = _1001 + (-1.0);
    float _2072 = (cbLight._m0[_2060].x * _2067) + 1.0;
    float _2073 = (cbLight._m0[_2060].y * _2067) + 1.0;
    float _2074 = (cbLight._m0[_2060].z * _2067) + 1.0;
    float _2075 = (cbLight._m0[_2060].w * _2067) + 1.0;
    uint _2076 = _2059 + 5u;
    float _2082 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
    uint _2086 = _2059 + 4u;
    float _2095 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
    uint _2099 = _2059 | 1u;
    float _2110 = dot(vec3(cbLight._m0[_2059].xyz), vec3(_786, _787, _788));
    float _2113 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_786, _787, _788));
    float _4266 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _4277 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2118 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * 0.3183098733425140380859375;
    float _2120 = (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * 0.3183098733425140380859375;
    float _2127 = ((cbLight._m0[_2076].x * _2082) * _2120) + (((cbLight._m0[_2086].x * _2051) * _2095) * _2118);
    float _2128 = ((_2082 * cbLight._m0[_2076].y) * _2120) + (((cbLight._m0[_2086].y * _2052) * _2095) * _2118);
    float _2129 = ((_2082 * cbLight._m0[_2076].z) * _2120) + (((cbLight._m0[_2086].z * _2053) * _2095) * _2118);
    uvec4 _2133 = floatBitsToUint(cbLight._m0[_2059 + 12u]);
    bool _2135 = _2133.x == 0u;
    float _2146;
    float _2148;
    float _2150;
    if (_2135)
    {
        _2146 = _2127;
        _2148 = _2128;
        _2150 = _2129;
    }
    else
    {
        uint _2154 = _2059 + 6u;
        float _2170 = (dot(vec3(cbLight._m0[_2059 + 2u].xyz), vec3(_786, _787, _788)) * 0.5) + 0.5;
        float _2171 = _2170 * _2170;
        float _4288 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2172 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2173 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
        _2146 = (((cbLight._m0[_2154].x * 0.3183098733425140380859375) * _2172) * _2173) + _2127;
        _2148 = (((cbLight._m0[_2154].y * 0.3183098733425140380859375) * _2172) * _2173) + _2128;
        _2150 = (((cbLight._m0[_2154].z * 0.3183098733425140380859375) * _2172) * _2173) + _2129;
    }
    bool _2153 = _2133.y == 0u;
    float _2191;
    float _2193;
    float _2195;
    if (_2153)
    {
        _2191 = _2146;
        _2193 = _2148;
        _2195 = _2150;
    }
    else
    {
        uint _2364 = _2059 + 7u;
        float _2380 = (dot(vec3(cbLight._m0[_2059 + 3u].xyz), vec3(_786, _787, _788)) * 0.5) + 0.5;
        float _2381 = _2380 * _2380;
        float _4304 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2382 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _2383 = isnan(1.0) ? _2075 : (isnan(_2075) ? 1.0 : min(_2075, 1.0));
        _2191 = (((cbLight._m0[_2364].x * 0.3183098733425140380859375) * _2382) * _2383) + _2146;
        _2193 = (((cbLight._m0[_2364].y * 0.3183098733425140380859375) * _2382) * _2383) + _2148;
        _2195 = (((cbLight._m0[_2364].z * 0.3183098733425140380859375) * _2382) * _2383) + _2150;
    }
    uint _2198 = _2059 + 8u;
    float _2211 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2059].w)) * _916) * 0.949999988079071044921875);
    float _2212 = _2211 * _2211;
    float _2213 = cbLight._m0[_2059].x + _866;
    float _2214 = cbLight._m0[_2059].y + _867;
    float _2215 = cbLight._m0[_2059].z + _868;
    float _2219 = inversesqrt(dot(vec3(_2213, _2214, _2215), vec3(_2213, _2214, _2215)));
    float _2220 = _2219 * _2213;
    float _2221 = _2219 * _2214;
    float _2222 = _2219 * _2215;
    float _2223 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2059].xyz));
    float _4320 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2226 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _4331 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _2227 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
    float _2228 = dot(vec3(_786, _787, _788), vec3(_2220, _2221, _2222));
    float _4342 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2231 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _2232 = dot(vec3(cbLight._m0[_2059].xyz), vec3(_2220, _2221, _2222));
    float _4353 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2236 = _2212 * _2212;
    float _2240 = ((_2231 * _2231) * (_2236 + (-1.0))) + 1.0;
    float _2248 = exp2(log2(1.0 - (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0)))) * 5.0);
    float _2249 = 0.959999978542327880859375 - _983;
    float _2251 = 0.959999978542327880859375 - _984;
    float _2252 = 0.959999978542327880859375 - _985;
    float _2259 = 1.0 - _2212;
    float _2270 = (0.5 / (((_2227 * ((_2226 * _2259) + _2212)) + 9.9999999392252902907785028219223e-09) + (((_2227 * _2259) + _2212) * _2226))) * _2226;
    float _4364 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2272 = (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_2236 / ((_2240 * _2240) * 3.141590118408203125));
    uint _2286 = _2059 + 9u;
    float _2297 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2099].w)) * _916) * 0.949999988079071044921875);
    float _2298 = _2297 * _2297;
    float _2299 = cbLight._m0[_2099].x + _866;
    float _2300 = cbLight._m0[_2099].y + _867;
    float _2301 = cbLight._m0[_2099].z + _868;
    float _2305 = inversesqrt(dot(vec3(_2299, _2300, _2301), vec3(_2299, _2300, _2301)));
    float _2306 = _2305 * _2299;
    float _2307 = _2305 * _2300;
    float _2308 = _2305 * _2301;
    float _2309 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2099].xyz));
    float _4375 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2312 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _2313 = dot(vec3(_786, _787, _788), vec3(_2306, _2307, _2308));
    float _4386 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2316 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
    float _2317 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_2306, _2307, _2308));
    float _4397 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2321 = _2298 * _2298;
    float _2325 = ((_2316 * _2316) * (_2321 + (-1.0))) + 1.0;
    float _2332 = exp2(log2(1.0 - (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) * 5.0);
    float _2339 = 1.0 - _2298;
    float _2349 = (0.5 / (((_2227 * ((_2312 * _2339) + _2298)) + 9.9999999392252902907785028219223e-09) + (((_2227 * _2339) + _2298) * _2312))) * _2312;
    float _4408 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2351 = (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_2321 / ((_2325 * _2325) * 3.141590118408203125));
    float _2361 = (((((_2332 * _2249) + _986) * cbLight._m0[_2286].x) * _2351) * _2082) + ((((cbLight._m0[_2198].x * _2051) * ((_2248 * _2249) + _986)) * _2272) * _2095);
    float _2362 = (((((_2332 * _2251) + _988) * cbLight._m0[_2286].y) * _2351) * _2082) + ((((cbLight._m0[_2198].y * _2052) * ((_2248 * _2251) + _988)) * _2272) * _2095);
    float _2363 = (((((_2332 * _2252) + _989) * cbLight._m0[_2286].z) * _2351) * _2082) + ((((cbLight._m0[_2198].z * _2053) * ((_2248 * _2252) + _989)) * _2272) * _2095);
    float _2425;
    float _2427;
    float _2429;
    if (_2135)
    {
        _2425 = _2361;
        _2427 = _2362;
        _2429 = _2363;
    }
    else
    {
        uint _2431 = _2059 + 2u;
        uint _2435 = _2059 + 10u;
        float _2449 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2431].w)) * _916) * 0.949999988079071044921875);
        float _2450 = _2449 * _2449;
        float _2451 = cbLight._m0[_2431].x + _866;
        float _2452 = cbLight._m0[_2431].y + _867;
        float _2453 = cbLight._m0[_2431].z + _868;
        float _2457 = inversesqrt(dot(vec3(_2451, _2452, _2453), vec3(_2451, _2452, _2453)));
        float _2458 = _2457 * _2451;
        float _2459 = _2457 * _2452;
        float _2460 = _2457 * _2453;
        float _2461 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2431].xyz));
        float _4419 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2464 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2465 = dot(vec3(_786, _787, _788), vec3(_2458, _2459, _2460));
        float _4430 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2468 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _2469 = dot(vec3(cbLight._m0[_2431].xyz), vec3(_2458, _2459, _2460));
        float _4441 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2473 = _2450 * _2450;
        float _2477 = ((_2468 * _2468) * (_2473 + (-1.0))) + 1.0;
        float _2484 = exp2(log2(1.0 - (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0)))) * 5.0);
        float _2491 = 1.0 - _2450;
        float _2501 = (0.5 / (((_2227 * ((_2464 * _2491) + _2450)) + 9.9999999392252902907785028219223e-09) + (((_2227 * _2491) + _2450) * _2464))) * _2464;
        float _4452 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2503 = (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2473 / ((_2477 * _2477) * 3.141590118408203125));
        float _2504 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
        _2425 = (((((_2484 * _2249) + _986) * cbLight._m0[_2435].x) * _2503) * _2504) + _2361;
        _2427 = (((((_2484 * _2251) + _988) * cbLight._m0[_2435].y) * _2503) * _2504) + _2362;
        _2429 = (((((_2484 * _2252) + _989) * cbLight._m0[_2435].z) * _2503) * _2504) + _2363;
    }
    float _2539;
    float _2541;
    float _2543;
    if (_2153)
    {
        _2539 = _2425;
        _2541 = _2427;
        _2543 = _2429;
    }
    else
    {
        uint _2550 = _2059 + 3u;
        uint _2554 = _2059 + 11u;
        float _2568 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2550].w)) * _916) * 0.949999988079071044921875);
        float _2569 = _2568 * _2568;
        float _2570 = cbLight._m0[_2550].x + _866;
        float _2571 = cbLight._m0[_2550].y + _867;
        float _2572 = cbLight._m0[_2550].z + _868;
        float _2576 = inversesqrt(dot(vec3(_2570, _2571, _2572), vec3(_2570, _2571, _2572)));
        float _2577 = _2576 * _2570;
        float _2578 = _2576 * _2571;
        float _2579 = _2576 * _2572;
        float _2580 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2550].xyz));
        float _4468 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2583 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _2584 = dot(vec3(_786, _787, _788), vec3(_2577, _2578, _2579));
        float _4479 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2587 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _2588 = dot(vec3(cbLight._m0[_2550].xyz), vec3(_2577, _2578, _2579));
        float _4490 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2592 = _2569 * _2569;
        float _2596 = ((_2587 * _2587) * (_2592 + (-1.0))) + 1.0;
        float _2603 = exp2(log2(1.0 - (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0)))) * 5.0);
        float _2610 = 1.0 - _2569;
        float _2620 = (0.5 / (((_2227 * ((_2583 * _2610) + _2569)) + 9.9999999392252902907785028219223e-09) + (((_2227 * _2610) + _2569) * _2583))) * _2583;
        float _4501 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2622 = (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_2592 / ((_2596 * _2596) * 3.141590118408203125));
        float _2623 = isnan(1.0) ? _2075 : (isnan(_2075) ? 1.0 : min(_2075, 1.0));
        _2539 = (((((_2603 * _2249) + _986) * cbLight._m0[_2554].x) * _2622) * _2623) + _2425;
        _2541 = (((((_2603 * _2251) + _988) * cbLight._m0[_2554].y) * _2622) * _2623) + _2427;
        _2543 = (((((_2603 * _2252) + _989) * cbLight._m0[_2554].z) * _2622) * _2623) + _2429;
    }
    float _2757;
    float _2759;
    float _2761;
    float _2763;
    float _2765;
    float _2767;
    if (_2057.y == 0u)
    {
        float _2698 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2699 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2698;
        float _2700 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2698;
        float _2701 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2698;
        uvec4 _2713 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2714 = _2713.x;
        uint _2725 = uint((float(_2713.y) * floor(float(uint(cbSceneParam._m0[85u].y * _875) / _2714))) + floor(float(uint(cbSceneParam._m0[85u].x * _874) / _2714)));
        float _2735 = (log2(_2701 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2736 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        uint _2739 = uint(isnan(14.0) ? _2736 : (isnan(_2736) ? 14.0 : min(_2736, 14.0)));
        uvec4 _2744 = texelFetch(g_lightClusterGridBuffer, int(((_2739 << 2u) + (_2725 << 6u)) >> 2u));
        uint _2745 = _2744.x;
        uint _2746 = _2713.z;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        if (((((1u << ((_2746 >> 4u) & 15u)) + 4294967295u) & _2745) == 0u) || ((_2746 & 240u) == 0u))
        {
            _2880 = 0.0;
            _2882 = 0.0;
            _2884 = 0.0;
            _2886 = 0.0;
            _2888 = 0.0;
            _2890 = 0.0;
        }
        else
        {
            float _2881;
            float _2883;
            float _2885;
            float _2887;
            float _2889;
            float _2891;
            float _3033 = 0.0;
            float _3034 = 0.0;
            float _3035 = 0.0;
            float _3036 = 0.0;
            float _3037 = 0.0;
            float _3038 = 0.0;
            uint _3039 = 0u;
            uint _3048;
            bool _3049;
            for (;;)
            {
                _3048 = texelFetch(g_lightClassification, int((((_2739 << 5u) + (_2725 << 9u)) + (_3039 << 2u)) >> 2u)).x;
                _3049 = _3048 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3049)
                {
                    frontier_phi_63_pred = _3038;
                    frontier_phi_63_pred_1 = _3037;
                    frontier_phi_63_pred_2 = _3036;
                    frontier_phi_63_pred_3 = _3035;
                    frontier_phi_63_pred_4 = _3034;
                    frontier_phi_63_pred_5 = _3033;
                }
                else
                {
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    uint _3163;
                    _3157 = _3033;
                    _3158 = _3034;
                    _3159 = _3035;
                    _3160 = _3036;
                    _3161 = _3037;
                    _3162 = _3038;
                    _3163 = _3048;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    for (;;)
                    {
                        uint _3167 = uint(findLSB(_3163)) + (_3039 << 5u);
                        uint _3164 = (_3163 + 4294967295u) & _3163;
                        uint _3169 = _3167 * 48u;
                        vec4 _3183 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3169)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 3u)).x));
                        uint _3189 = (_3167 * 48u) + 4u;
                        vec4 _3202 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3189)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 3u)).x));
                        uint _3208 = (_3167 * 48u) + 8u;
                        vec3 _3219 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3208)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 2u)).x));
                        float _3223 = _3183.x - _2699;
                        float _3224 = _3183.y - _2700;
                        float _3225 = _3183.z - _2701;
                        float _3226 = dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225));
                        float _3229 = inversesqrt(_3226);
                        float _3230 = _3229 * _3223;
                        float _3231 = _3229 * _3224;
                        float _3232 = _3229 * _3225;
                        float _3233 = dot(vec3(_897, _900, _903), vec3(_3230, _3231, _3232));
                        float _3238 = 1.0 - (_3226 * _3183.w);
                        float _4527 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3239 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                        float _3240 = sqrt(_3226) * _3202.w;
                        float _3243 = 1.39999997615814208984375 / (_3240 + 1.39999997615814208984375);
                        float _3244 = _3243 * _3243;
                        float _3247 = ((1.0 - _3244) * _3233) + _3244;
                        float _3250 = _3240 * _3240;
                        float _3254 = ((isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0))) * _3239) / ((_3250 * 0.699999988079071044921875) + 1.0);
                        float _3258 = (-0.0) - _2699;
                        float _3259 = (-0.0) - _2700;
                        float _3260 = (-0.0) - _2701;
                        float _3264 = inversesqrt(dot(vec3(_3258, _3259, _3260), vec3(_3258, _3259, _3260)));
                        float _3265 = _3264 * _3258;
                        float _3266 = _3264 * _3259;
                        float _3267 = _3264 * _3260;
                        float _3274 = exp2(log2(1.0 / ((_3250 * 3.5) + 5.0)) * 0.25);
                        float _3275 = 1.0 - _1017;
                        float _3282 = sqrt(1.0 - ((1.0 - (_3275 * _3275)) * (1.0 - (_3274 * _3274))));
                        float _3283 = _3282 * _3282;
                        float _3284 = _3283 * _3283;
                        float _3285 = _3265 + _3230;
                        float _3286 = _3266 + _3231;
                        float _3287 = _3267 + _3232;
                        float _3291 = inversesqrt(dot(vec3(_3285, _3286, _3287), vec3(_3285, _3286, _3287)));
                        float _3295 = dot(vec3(_897, _900, _903), vec3(_3265, _3266, _3267));
                        float _4543 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3298 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                        float _3299 = dot(vec3(_897, _900, _903), vec3(_3291 * _3285, _3291 * _3286, _3291 * _3287));
                        float _4554 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                        float _3302 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                        float _3306 = ((_3302 * _3302) * (_3284 + (-1.0))) + 1.0;
                        float _3307 = _3243 * _3283;
                        float _3308 = _3307 * _3307;
                        float _3311 = ((1.0 - _3308) * _3233) + _3308;
                        float _4565 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3312 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                        float _3313 = 1.0 - _3283;
                        float _3323 = (0.5 / (((_3312 * ((_3298 * _3313) + _3283)) + 9.9999999392252902907785028219223e-09) + (((_3312 * _3313) + _3283) * _3298))) * _3312;
                        float _4576 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3334 = (((_3284 * 3.1415927410125732421875) * (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) / ((_3306 * _3306) * ((_3250 * 2.1991131305694580078125) + 3.141590118408203125))) * _3239;
                        _3092 = (_3254 * _3202.x) + _3160;
                        _3093 = (_3254 * _3202.y) + _3161;
                        _3094 = (_3254 * _3202.z) + _3162;
                        _3089 = (_3334 * _3219.x) + _3157;
                        _3090 = (_3334 * _3219.y) + _3158;
                        _3091 = (_3334 * _3219.z) + _3159;
                        if (_3164 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3157 = _3089;
                            _3158 = _3090;
                            _3159 = _3091;
                            _3160 = _3092;
                            _3161 = _3093;
                            _3162 = _3094;
                            _3163 = _3164;
                        }
                    }
                    frontier_phi_63_pred = _3094;
                    frontier_phi_63_pred_1 = _3093;
                    frontier_phi_63_pred_2 = _3092;
                    frontier_phi_63_pred_3 = _3091;
                    frontier_phi_63_pred_4 = _3090;
                    frontier_phi_63_pred_5 = _3089;
                }
                _2891 = frontier_phi_63_pred;
                _2889 = frontier_phi_63_pred_1;
                _2887 = frontier_phi_63_pred_2;
                _2885 = frontier_phi_63_pred_3;
                _2883 = frontier_phi_63_pred_4;
                _2881 = frontier_phi_63_pred_5;
                uint _3040 = _3039 + 1u;
                if (_3040 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3033 = _2881;
                    _3034 = _2883;
                    _3035 = _2885;
                    _3036 = _2887;
                    _3037 = _2889;
                    _3038 = _2891;
                    _3039 = _3040;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2880 = _2881;
            _2882 = _2883;
            _2884 = _2885;
            _2886 = _2887;
            _2888 = _2889;
            _2890 = _2891;
        }
        uvec4 _2894 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2895 = _2894.z;
        uint _2897 = (_2895 >> 8u) & 15u;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        if (((4294967295u << _2897) & _2745) == 0u)
        {
            _3001 = _2880;
            _3003 = _2882;
            _3005 = _2884;
            _3007 = _2886;
            _3009 = _2888;
            _3011 = _2890;
        }
        else
        {
            float _3026 = inversesqrt(dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701)));
            float _3027 = _3026 * _2699;
            float _3028 = _3026 * _2700;
            float _3029 = _3026 * _2701;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2897 < ((_2895 >> 12u) & 15u))
            {
                float _3002;
                float _3004;
                float _3006;
                float _3008;
                float _3010;
                float _3012;
                float _3140 = _2880;
                float _3141 = _2882;
                float _3142 = _2884;
                float _3143 = _2886;
                float _3144 = _2888;
                float _3145 = _2890;
                uint _3146 = _2897;
                uint _3155;
                bool _3156;
                for (;;)
                {
                    _3155 = texelFetch(g_lightClassification, int((((_2739 << 5u) + (_2725 << 9u)) + (_3146 << 2u)) >> 2u)).x;
                    _3156 = _3155 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3156)
                    {
                        frontier_phi_69_pred = _3145;
                        frontier_phi_69_pred_1 = _3144;
                        frontier_phi_69_pred_2 = _3143;
                        frontier_phi_69_pred_3 = _3142;
                        frontier_phi_69_pred_4 = _3141;
                        frontier_phi_69_pred_5 = _3140;
                    }
                    else
                    {
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3352 = _3140;
                        float _3353 = _3141;
                        float _3354 = _3142;
                        float _3355 = _3143;
                        float _3356 = _3144;
                        float _3357 = _3145;
                        uint _3358 = _3155;
                        uint _3359;
                        vec4 _3384;
                        float _3385;
                        vec4 _3400;
                        vec3 _3412;
                        vec4 _3427;
                        vec4 _3442;
                        float _3488;
                        bool _3489;
                        for (;;)
                        {
                            uint _3369 = ((_3146 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3358));
                            _3359 = (_3358 + 4294967295u) & _3358;
                            uint _3371 = _3369 * 40u;
                            _3384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 3u)).x));
                            _3385 = _3384.w;
                            uint _3387 = (_3369 * 40u) + 4u;
                            _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            uint _3402 = (_3369 * 40u) + 8u;
                            _3412 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x));
                            uint _3414 = (_3369 * 40u) + 16u;
                            _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            uint _3429 = (_3369 * 40u) + 20u;
                            _3442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 3u)).x));
                            uint _3444 = (_3369 * 40u) + 24u;
                            vec4 _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            uint _3463 = (_3369 * 40u) + 28u;
                            vec4 _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            _3488 = fma(_2701, _3476.z, fma(_2700, _3476.y, _3476.x * _2699)) + _3476.w;
                            _3489 = !((fma(_2701, _3457.z, fma(_2700, _3457.y, _3457.x * _2699)) + _3457.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3489)
                            {
                                float _3516 = _3384.x - _2699;
                                float _3517 = _3384.y - _2700;
                                float _3518 = _3384.z - _2701;
                                float _3519 = dot(vec3(_3516, _3517, _3518), vec3(_3516, _3517, _3518));
                                float _3522 = inversesqrt(_3519);
                                float _3523 = _3522 * _3516;
                                float _3524 = _3522 * _3517;
                                float _3525 = _3522 * _3518;
                                float _3529 = 1.0 - (_3519 / (_3385 * _3385));
                                float _4587 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3530 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                                float _3534 = sqrt(_3519) * _3400.w;
                                float _3536 = 1.39999997615814208984375 / (_3534 + 1.39999997615814208984375);
                                float _3537 = _3536 * _3536;
                                float _3540 = ((1.0 - _3537) * dot(vec3(_3523, _3524, _3525), vec3(_897, _900, _903))) + _3537;
                                float _3543 = _3534 * _3534;
                                float _3547 = (fma(_2701, _3427.z, fma(_2700, _3427.y, _3427.x * _2699)) + _3427.w) / _3488;
                                float _3548 = (fma(_2701, _3442.z, fma(_2700, _3442.y, _3442.x * _2699)) + _3442.w) / _3488;
                                float _3552 = 1.0 - dot(vec2(_3547, _3548), vec2(_3547, _3548));
                                float _4603 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3553 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3554 = _3553 * (((isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0))) * _3530) / ((_3543 * 0.699999988079071044921875) + 1.0));
                                float _3566 = exp2(log2(1.0 / ((_3543 * 3.5) + 5.0)) * 0.25);
                                float _3567 = 1.0 - _1017;
                                float _3574 = sqrt(1.0 - ((1.0 - (_3567 * _3567)) * (1.0 - (_3566 * _3566))));
                                float _3575 = _3574 * _3574;
                                float _3576 = _3575 * _3575;
                                float _3577 = _3523 - _3027;
                                float _3578 = _3524 - _3028;
                                float _3579 = _3525 - _3029;
                                float _3583 = inversesqrt(dot(vec3(_3577, _3578, _3579), vec3(_3577, _3578, _3579)));
                                float _3587 = dot(vec3(_897, _900, _903), vec3((-0.0) - _3027, (-0.0) - _3028, (-0.0) - _3029));
                                float _4614 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3590 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                                float _3591 = dot(vec3(_897, _900, _903), vec3(_3583 * _3577, _3583 * _3578, _3583 * _3579));
                                float _4625 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3594 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                                float _3598 = ((_3594 * _3594) * (_3576 + (-1.0))) + 1.0;
                                float _3599 = _3536 * _3575;
                                float _3600 = _3599 * _3599;
                                float _3606 = ((1.0 - _3600) * dot(vec3(_897, _900, _903), vec3(_3523, _3524, _3525))) + _3600;
                                float _4636 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3607 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                                float _3608 = 1.0 - _3575;
                                float _3618 = (0.5 / (((_3607 * ((_3590 * _3608) + _3575)) + 9.9999999392252902907785028219223e-09) + (((_3607 * _3608) + _3575) * _3590))) * _3607;
                                float _4647 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3628 = (_3553 * _3530) * (((_3576 * 3.1415927410125732421875) * (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0)))) / ((_3598 * _3598) * ((_3543 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3554 * _3400.z;
                                frontier_phi_75_pred_1 = _3554 * _3400.y;
                                frontier_phi_75_pred_2 = _3554 * _3400.x;
                                frontier_phi_75_pred_3 = _3628 * _3412.z;
                                frontier_phi_75_pred_4 = _3628 * _3412.y;
                                frontier_phi_75_pred_5 = _3628 * _3412.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3637 = frontier_phi_75_pred;
                            _3636 = frontier_phi_75_pred_1;
                            _3635 = frontier_phi_75_pred_2;
                            _3634 = frontier_phi_75_pred_3;
                            _3633 = frontier_phi_75_pred_4;
                            _3632 = frontier_phi_75_pred_5;
                            _3342 = _3635 + _3355;
                            _3343 = _3636 + _3356;
                            _3344 = _3637 + _3357;
                            _3339 = _3632 + _3352;
                            _3340 = _3633 + _3353;
                            _3341 = _3634 + _3354;
                            if (_3359 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3344;
                                _3358 = _3359;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3344;
                        frontier_phi_69_pred_1 = _3343;
                        frontier_phi_69_pred_2 = _3342;
                        frontier_phi_69_pred_3 = _3341;
                        frontier_phi_69_pred_4 = _3340;
                        frontier_phi_69_pred_5 = _3339;
                    }
                    _3012 = frontier_phi_69_pred;
                    _3010 = frontier_phi_69_pred_1;
                    _3008 = frontier_phi_69_pred_2;
                    _3006 = frontier_phi_69_pred_3;
                    _3004 = frontier_phi_69_pred_4;
                    _3002 = frontier_phi_69_pred_5;
                    uint _3147 = _3146 + 1u;
                    if (_3147 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3140 = _3002;
                        _3141 = _3004;
                        _3142 = _3006;
                        _3143 = _3008;
                        _3144 = _3010;
                        _3145 = _3012;
                        _3146 = _3147;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _3012;
                frontier_phi_57_58_ladder_1 = _3010;
                frontier_phi_57_58_ladder_2 = _3008;
                frontier_phi_57_58_ladder_3 = _3006;
                frontier_phi_57_58_ladder_4 = _3004;
                frontier_phi_57_58_ladder_5 = _3002;
            }
            else
            {
                frontier_phi_57_58_ladder = _2890;
                frontier_phi_57_58_ladder_1 = _2888;
                frontier_phi_57_58_ladder_2 = _2886;
                frontier_phi_57_58_ladder_3 = _2884;
                frontier_phi_57_58_ladder_4 = _2882;
                frontier_phi_57_58_ladder_5 = _2880;
            }
            _3001 = frontier_phi_57_58_ladder_5;
            _3003 = frontier_phi_57_58_ladder_4;
            _3005 = frontier_phi_57_58_ladder_3;
            _3007 = frontier_phi_57_58_ladder_2;
            _3009 = frontier_phi_57_58_ladder_1;
            _3011 = frontier_phi_57_58_ladder;
        }
        float _3016 = isnan(1.0) ? _1001 : (isnan(_1001) ? 1.0 : min(_1001, 1.0));
        _2757 = (_3016 * _3007) + _2191;
        _2759 = (_3016 * _3009) + _2193;
        _2761 = (_3016 * _3011) + _2195;
        _2763 = ((_3001 * _986) * _3016) + _2539;
        _2765 = ((_3003 * _988) * _3016) + _2541;
        _2767 = ((_3005 * _989) * _3016) + _2543;
    }
    else
    {
        _2757 = _2191;
        _2759 = _2193;
        _2761 = _2195;
        _2763 = _2539;
        _2765 = _2541;
        _2767 = _2543;
    }
    uint _2773 = _930 + uint(cbMatDynParam._m0[0u].w);
    float _2781 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[22u].z) * _730.x) * cbInstanceData._m0[_2773].x;
    float _2784 = ((cbMtdParam._m0[11u].y * cbMtdParam._m0[22u].z) * _730.y) * cbInstanceData._m0[_2773].y;
    float _2787 = ((cbMtdParam._m0[11u].z * cbMtdParam._m0[22u].z) * _730.z) * cbInstanceData._m0[_2773].z;
    float _4663 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _4674 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _4685 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _2804 = (((isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2757 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1001))) + ((_2763 + ((isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))) * _1810)) * cbPerFrame._m0[3u].x)) + _2781;
    float _2806 = (_2784 + ((_2765 + ((isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))) * _1810)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2759 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _1001)));
    float _2808 = (_2787 + ((_2767 + ((isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0))) * _1810)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2761 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1001)));
    float _4711 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2821 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
    uint _2822 = _929 + 6u;
    float _2830 = _874 / cbSceneParam._m0[86u].x;
    float _2831 = _875 / cbSceneParam._m0[86u].y;
    vec4 _2845 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2830, _2831, (log2((isnan(cbSceneParam._m0[77u].w) ? _809 : (isnan(_809) ? cbSceneParam._m0[77u].w : min(_809, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2847 = _2845.x;
    float _2848 = _2845.y;
    float _2849 = _2845.z;
    float _2850 = _2845.w;
    float _2942;
    float _2944;
    float _2946;
    float _2948;
    if (_809 > cbSceneParam._m0[78u].w)
    {
        float _2905 = isnan(_809) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _809 : min(cbSceneParam._m0[80u].w, _809));
        float _2906 = _2905 / _809;
        float _2917 = _2906 * _859;
        float _2918 = _860 * _2906;
        float _2919 = (-0.0) - _2918;
        float _2920 = _2906 * _861;
        float _2922 = (cbSceneParam._m0[77u].w * _2919) / _2905;
        float _2923 = _2922 + cbSceneParam._m0[79u].w;
        float _2924 = cbSceneParam._m0[79u].w - _2918;
        float _2930 = sqrt(((_2917 * _2917) + (_2918 * _2918)) + (_2920 * _2920));
        float _2933 = (1.0 - (cbSceneParam._m0[77u].w / _2905)) * _2930;
        float _2938 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2940 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3102;
        if (abs((_2919 - _2922) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3102 = ((((_2923 > 0.0) ? exp2(_2938 * _2923) : (2.0 - exp2(_2940 * _2923))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2933;
        }
        else
        {
            float _3062 = 1.0 / cbSceneParam._m0[80u].x;
            float _3063 = isnan(_2924) ? _2923 : (isnan(_2923) ? _2924 : max(_2923, _2924));
            float _3064 = isnan(_2924) ? _2923 : (isnan(_2923) ? _2924 : min(_2923, _2924));
            float _3073 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : min(_3063, 0.0));
            float _3074 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : min(_3064, 0.0));
            _3102 = ((abs(_2930 / _2919) * cbSceneParam._m0[80u].y) * ((((_3073 - _3074) * 2.0) - ((exp2(_2938 * (isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0)))) - exp2(_2938 * (isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0))))) * _3062)) - ((exp2(_2940 * _3073) - exp2(_2940 * _3074)) * _3062))) + (_2933 * cbSceneParam._m0[80u].z);
        }
        vec4 _3104 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2830, _2831, 1.0), 0.0);
        float _3113 = exp2((_3102 * (-1.44269502162933349609375)) * (1.0 - _3104.w));
        float _3114 = log2(_3113);
        float _3130 = log2(_2850);
        _2942 = (exp2(_3130 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3114 * cbSceneParam._m0[78u].x)) * _3104.x) / cbSceneParam._m0[78u].x)) + _2847;
        _2944 = (exp2(_3130 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3114 * cbSceneParam._m0[78u].y)) * _3104.y) / cbSceneParam._m0[78u].y)) + _2848;
        _2946 = (exp2(_3130 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3114 * cbSceneParam._m0[78u].z)) * _3104.z) / cbSceneParam._m0[78u].z)) + _2849;
        _2948 = _3113 * _2850;
    }
    else
    {
        _2942 = _2847;
        _2944 = _2848;
        _2946 = _2849;
        _2948 = _2850;
    }
    float _2960 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2961 = _2960 == 3.0;
    float _2962 = log2(_2948);
    float _2966 = exp2(_2962 * cbSceneParam._m0[78u].x);
    float _2967 = exp2(_2962 * cbSceneParam._m0[78u].y);
    float _2968 = exp2(_2962 * cbSceneParam._m0[78u].z);
    float _2969 = _2966 * (isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0)));
    float _2970 = _2967 * (isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0)));
    float _2971 = _2968 * (isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0)));
    float _2980 = (_2960 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2980 * (_2961 ? _2969 : (_2969 + (cbSceneParam._m0[72u].w * _2942)));
    SV_Target.y = _2980 * (_2961 ? _2970 : (_2970 + (cbSceneParam._m0[72u].w * _2944)));
    SV_Target.z = _2980 * (_2961 ? _2971 : (_2971 + (cbSceneParam._m0[72u].w * _2946)));
    SV_Target.w = cbInstanceData._m0[_2822].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2781) * _2821) * _2966) * _2980;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2784) * _2821) * _2967) * _2980;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2787) * _2821) * _2968) * _2980;
    SV_Target_1.w = cbInstanceData._m0[_2822].w;
}


