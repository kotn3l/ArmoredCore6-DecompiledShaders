#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1309;
float _3736;
float _3737;
float _3738;
float _3739;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250;
    float _251;
    float _252;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _250 = (-0.0) - _236;
        _251 = (-0.0) - _237;
        _252 = (-0.0) - _238;
    }
    else
    {
        _250 = _236;
        _251 = _237;
        _252 = _238;
    }
    vec4 _267 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _277 = log2(0.0);
    float _279 = exp2(_277 * cbMtdParam._m0[21u].y);
    float _280 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _281 = isnan(1.0) ? _280 : (isnan(_280) ? 1.0 : min(_280, 1.0));
    vec4 _295 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _299 = _295.z;
    float _300 = _295.w;
    float _308 = exp2(log2(_299 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _309 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _310 = isnan(1.0) ? _309 : (isnan(_309) ? 1.0 : min(_309, 1.0));
    vec4 _323 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _348 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _358 = cbMtdParam._m0[9u].x * _348.x;
    float _359 = cbMtdParam._m0[9u].y * _348.y;
    float _360 = cbMtdParam._m0[9u].z * _348.z;
    float _367 = (((cbMtdParam._m0[10u].x * _323.x) - _358) * _310) + _358;
    float _368 = (((cbMtdParam._m0[10u].y * _323.y) - _359) * _310) + _359;
    float _369 = (((cbMtdParam._m0[10u].z * _323.z) - _360) * _310) + _360;
    float _376 = exp2(log2(_300) * cbMtdParam._m0[22u].y);
    vec4 _389 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _409 = (((cbMtdParam._m0[12u].x * _389.x) - _367) * _376) + _367;
    float _410 = (((cbMtdParam._m0[12u].y * _389.y) - _368) * _376) + _368;
    float _411 = (((cbMtdParam._m0[12u].z * _389.z) - _369) * _376) + _369;
    vec4 _423 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _447 = (_267.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _423.x) - _409) * _281) + _409);
    float _449 = (_267.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _423.y) - _410) * _281) + _410);
    float _451 = (_267.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _423.z) - _411) * _281) + _411);
    float _456 = exp2(log2(1.0 - _300) * 0.00999999977648258209228515625);
    float _474 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[22u].w) * _456) + cbMtdParam._m0[22u].w;
    float _493 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _474) + cbMtdParam._m0[21u].z) * _376) + _474;
    float _515 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _493) + cbMtdParam._m0[23u].w) * _281) + _493;
    vec4 _528 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _546 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _548 = _546.x;
    float _549 = _546.y;
    float _552 = cbMtdParam._m0[20u].x + _546.z;
    float _555 = (((cbMtdParam._m0[21u].x + _528.z) - _552) * _456) + _552;
    vec4 _568 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _580 = (_299 * 2.0) * ((((_568.z - _555) + cbMtdParam._m0[23u].y) * _376) + _555);
    vec4 _593 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _602 = (((_593.z - _580) + cbMtdParam._m0[22u].x) * _281) + _580;
    vec4 _621 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _636 = ((_528.x - _548) * _456) + _548;
    float _637 = ((_528.y - _549) * _456) + _549;
    float _642 = ((_568.x - _636) * _376) + _636;
    float _643 = ((_568.y - _637) * _376) + _637;
    float _652 = ((((_593.x - _642) * _281) + _642) * 2.0) + (-1.0);
    float _653 = ((((_593.y - _643) * _281) + _643) * 2.0) + (-1.0);
    float _654 = dot(vec2(_652, _653), vec2(_652, _653));
    float _3768 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _659 = sqrt(1.0 - (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))));
    float _662 = (cbMtdParam._m0[23u].x * ((_295.x * 2.0) + (-1.0))) + _652;
    float _663 = (cbMtdParam._m0[23u].x * ((_295.y * 2.0) + (-1.0))) + _653;
    float _666 = fma(_659, _250, fma(_663, _242 * TANGENT.x, (_228 * _221) * _662));
    float _669 = fma(_659, _251, fma(_663, _242 * TANGENT.y, (_228 * _222) * _662));
    float _672 = fma(_659, _252, fma(_663, _242 * TANGENT.z, (_228 * _223) * _662));
    float _676 = inversesqrt(dot(vec3(_666, _669, _672), vec3(_666, _669, _672)));
    float _677 = _676 * _666;
    float _678 = _676 * _669;
    float _679 = _676 * _672;
    float _3779 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _680 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _3790 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3801 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3812 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _3823 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _684 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _700 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _750 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _740);
    float _751 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _740);
    float _752 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _740);
    float _756 = inversesqrt(dot(vec3(_750, _751, _752), vec3(_750, _751, _752)));
    float _757 = _750 * _756;
    float _758 = _751 * _756;
    float _759 = _752 * _756;
    vec4 _764 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _766 = _764.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _989 = sqrt(((_750 * _750) + (_751 * _751)) + (_752 * _752));
        float _995 = (cbMatDynParam._m0[5u].x * _989) + cbMatDynParam._m0[5u].y;
        float _3834 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1000 = (cbMatDynParam._m0[5u].z * _989) + cbMatDynParam._m0[5u].w;
        float _3845 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) - _996)) + _996) < ((_766 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _778 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _779 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _781 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _783 = _781.w;
    float _802 = fma(_679, cbSceneParam._m0[5u].z, fma(_678, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _677));
    float _805 = fma(_679, cbSceneParam._m0[6u].z, fma(_678, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _677));
    float _808 = fma(_679, cbSceneParam._m0[7u].z, fma(_678, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _677));
    vec4 _810 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _821 = (((_810.y - _680) + (_810.w * _680)) * cbMtdParam._m0[3u].x) + _680;
    uint _834 = uint(roundEven(NORMAL.w)) * 13u;
    uint _835 = _834 + 9u;
    uint _836 = _835 + uint(cbMatDynParam._m0[0u].w);
    float _842 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * cbInstanceData._m0[_836].x;
    float _843 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) * cbInstanceData._m0[_836].y;
    float _844 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) * cbInstanceData._m0[_836].z;
    float _3856 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _3867 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _846 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _3878 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _847 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    vec4 _848 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _853 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _864 = (((_853.x - _684) + (_853.w * _684)) * cbMtdParam._m0[3u].x) + _684;
    float _877 = (cbMtdParam._m0[3u].x * (((_845 * _783) - _845) + _848.x)) + _845;
    float _878 = (cbMtdParam._m0[3u].x * (((_846 * _783) - _846) + _848.y)) + _846;
    float _879 = (cbMtdParam._m0[3u].x * (((_847 * _783) - _847) + _848.z)) + _847;
    float _880 = 1.0 - _864;
    float _881 = _880 * _877;
    float _882 = _880 * _878;
    float _883 = _880 * _879;
    float _888 = (_877 + (-0.039999999105930328369140625)) * _864;
    float _889 = (_878 + (-0.039999999105930328369140625)) * _864;
    float _890 = (_879 + (-0.039999999105930328369140625)) * _864;
    float _891 = _888 + 0.039999999105930328369140625;
    float _893 = _889 + 0.039999999105930328369140625;
    float _894 = _890 + 0.039999999105930328369140625;
    vec4 _903 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _778, cbSceneParam._m0[86u].y * _779));
    float _906 = _903.x * TEXCOORD_4.z;
    float _907 = dot(vec3(_677, _678, _679), vec3(_757, _758, _759));
    float _910 = _907 * 2.0;
    float _914 = (_910 * _677) - _757;
    float _915 = (_910 * _678) - _758;
    float _916 = (_910 * _679) - _759;
    float _920 = abs(dot(vec3(_757, _758, _759), vec3(_677, _678, _679)));
    float _3889 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _922 = sqrt(_821);
    float _935 = exp2((_922 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_922 * 3.0));
    float _941 = (1.0 - _935) * ((_922 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _942 = _935 * _922;
    float _970 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _974 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1308;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1033 = fma(_978, cbModelParam._m0[26u].z, fma(_974, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _970));
        float _1037 = fma(_978, cbModelParam._m0[27u].z, fma(_974, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _970));
        float _1041 = fma(_978, cbModelParam._m0[28u].z, fma(_974, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _970));
        float _1066 = _970 + _677;
        float _1067 = _974 + _678;
        float _1068 = _978 + _679;
        float _1078 = fma(_1068, cbModelParam._m0[26u].z, fma(_1067, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1066)) - _1033;
        float _1079 = fma(_1068, cbModelParam._m0[27u].z, fma(_1067, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1066)) - _1037;
        float _1080 = fma(_1068, cbModelParam._m0[28u].z, fma(_1067, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1066)) - _1041;
        float _1084 = inversesqrt(dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080)));
        float _1097 = ((_1084 * _1078) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1033 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1098 = ((_1084 * _1079) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1037 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1099 = ((_1084 * _1080) / cbModelParam._m0[34u].z) + ((((((_1041 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        float _1136 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1102.x + (-0.5));
        float _1138 = _1136 * (_1102.y + (-0.5));
        float _1139 = _1136 * (_1102.z + (-0.5));
        float _1146 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1109.x + (-0.5));
        float _1148 = _1146 * (_1109.y + (-0.5));
        float _1149 = _1146 * (_1109.z + (-0.5));
        float _1156 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1116.x + (-0.5));
        float _1158 = _1156 * (_1116.y + (-0.5));
        float _1159 = _1156 * (_1116.z + (-0.5));
        float _1166 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1123.x + (-0.5));
        float _1168 = _1166 * (_1123.y + (-0.5));
        float _1169 = _1166 * (_1123.z + (-0.5));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = _1137 * 0.5;
        float _1174 = _1147 * 0.5;
        float _1175 = _1157 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1190 = (dot(vec3(_677, _678, _679), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1200 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3937 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1202 + 1.0))) + _1207) * _1170;
        float _1217 = _1138 * 0.5;
        float _1218 = _1148 * 0.5;
        float _1219 = _1158 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_677, _678, _679), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3948 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3959 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3970 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1244 + 1.0))) + _1249) * _1171;
        float _1259 = _1139 * 0.5;
        float _1260 = _1149 * 0.5;
        float _1261 = _1159 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_677, _678, _679), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _3981 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3992 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _4003 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1286 + 1.0))) + _1291) * _1172;
        _1308 = _1139;
        _1310 = _1138;
        _1311 = _1137;
        _1312 = _1149;
        _1313 = _1148;
        _1314 = _1147;
        _1315 = _1159;
        _1316 = _1158;
        _1317 = _1157;
        _1318 = _1172;
        _1319 = _1171;
        _1320 = _1170;
        _1321 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1322 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
        _1323 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
    }
    else
    {
        _1308 = _1309;
        _1310 = _1309;
        _1311 = _1309;
        _1312 = _1309;
        _1313 = _1309;
        _1314 = _1309;
        _1315 = _1309;
        _1316 = _1309;
        _1317 = _1309;
        _1318 = _1309;
        _1319 = _1309;
        _1320 = _1309;
        _1321 = 0.0;
        _1322 = 0.0;
        _1323 = 0.0;
    }
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1352 = fma(_978, cbModelParam._m0[30u].z, fma(_974, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _970));
        float _1356 = fma(_978, cbModelParam._m0[31u].z, fma(_974, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _970));
        float _1360 = fma(_978, cbModelParam._m0[32u].z, fma(_974, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _970));
        float _1383 = _970 + _677;
        float _1384 = _974 + _678;
        float _1385 = _978 + _679;
        float _1395 = fma(_1385, cbModelParam._m0[30u].z, fma(_1384, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1383)) - _1352;
        float _1396 = fma(_1385, cbModelParam._m0[31u].z, fma(_1384, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1383)) - _1356;
        float _1397 = fma(_1385, cbModelParam._m0[32u].z, fma(_1384, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1383)) - _1360;
        float _1401 = inversesqrt(dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397)));
        float _1414 = ((_1401 * _1395) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1352 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1415 = ((_1401 * _1396) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1356 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1416 = ((_1401 * _1397) / cbModelParam._m0[35u].z) + ((((((_1360 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        float _1451 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1418.x + (-0.5));
        float _1453 = _1451 * (_1418.y + (-0.5));
        float _1454 = _1451 * (_1418.z + (-0.5));
        float _1461 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1425.x + (-0.5));
        float _1463 = _1461 * (_1425.y + (-0.5));
        float _1464 = _1461 * (_1425.z + (-0.5));
        float _1471 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1432.x + (-0.5));
        float _1473 = _1471 * (_1432.y + (-0.5));
        float _1474 = _1471 * (_1432.z + (-0.5));
        float _1481 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1439.x + (-0.5));
        float _1483 = _1481 * (_1439.y + (-0.5));
        float _1484 = _1481 * (_1439.z + (-0.5));
        float _1485 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1486 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1487 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1488 = _1452 * 0.5;
        float _1489 = _1462 * 0.5;
        float _1490 = _1472 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1504 = (dot(vec3(_677, _678, _679), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1513 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1485 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _4066 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1515 + 1.0))) + _1520) * _1485;
        float _1530 = _1453 * 0.5;
        float _1531 = _1463 * 0.5;
        float _1532 = _1473 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_677, _678, _679), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1486 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _4099 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1557 + 1.0))) + _1562) * _1486;
        float _1572 = _1454 * 0.5;
        float _1573 = _1464 * 0.5;
        float _1574 = _1474 * 0.5;
        float _1575 = dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574));
        float _1580 = (_1575 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1575);
        float _1588 = (dot(vec3(_677, _678, _679), vec3(_1580 * _1572, _1580 * _1573, _1580 * _1574)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1597 = sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574)) / (_1487 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1599 = _1598 * 2.0;
        float _1603 = (1.0 - _1598) / (_1598 + 1.0);
        float _4132 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1613 = ((((1.0 - _1604) * (_1599 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1599 + 1.0))) + _1604) * _1487;
        _1621 = _1454;
        _1622 = _1453;
        _1623 = _1452;
        _1624 = _1464;
        _1625 = _1463;
        _1626 = _1462;
        _1627 = _1474;
        _1628 = _1473;
        _1629 = _1472;
        _1630 = _1487;
        _1631 = _1486;
        _1632 = _1485;
        _1633 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
        _1634 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
        _1635 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)));
    }
    else
    {
        _1621 = _1309;
        _1622 = _1309;
        _1623 = _1309;
        _1624 = _1309;
        _1625 = _1309;
        _1626 = _1309;
        _1627 = _1309;
        _1628 = _1309;
        _1629 = _1309;
        _1630 = _1309;
        _1631 = _1309;
        _1632 = _1309;
        _1633 = 0.0;
        _1634 = 0.0;
        _1635 = 0.0;
    }
    float _1645 = (cbModelParam._m0[1u].x * (_1633 - _1321)) + _1321;
    float _1646 = (cbModelParam._m0[1u].x * (_1634 - _1322)) + _1322;
    float _1647 = (cbModelParam._m0[1u].x * (_1635 - _1323)) + _1323;
    float _1668 = fma(_1647, cbSceneParam._m0[89u].z, fma(_1646, cbSceneParam._m0[89u].y, _1645 * cbSceneParam._m0[89u].x));
    float _1671 = fma(_1647, cbSceneParam._m0[90u].z, fma(_1646, cbSceneParam._m0[90u].y, _1645 * cbSceneParam._m0[90u].x));
    float _1674 = fma(_1647, cbSceneParam._m0[91u].z, fma(_1646, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1645));
    float _1689 = _914 * 0.5;
    float _1690 = _915 * 0.5;
    float _1691 = _916 * 0.5;
    float _1692 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1623, _1626, _1629, _1632));
    float _1695 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1622, _1625, _1628, _1631));
    float _1698 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1621, _1624, _1627, _1630));
    float _1732;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1705 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1308, _1312, _1315, _1318));
        float _1709 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1310, _1313, _1316, _1319));
        float _1713 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1311, _1314, _1317, _1320));
        float _1720 = dot(vec4(cbModelParam._m0[39u]), vec4(_1689, _1690, _1691, 1.0));
        _1732 = dot(vec3(isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)), isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1720) ? 0.0 : (isnan(0.0) ? _1720 : max(0.0, _1720))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1732 = 1.0;
    }
    float _1743;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1734 = dot(vec4(cbModelParam._m0[40u]), vec4(_1689, _1690, _1691, 1.0));
        _1743 = dot(vec3(isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1734) ? 0.0 : (isnan(0.0) ? _1734 : max(0.0, _1734))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1743 = 1.0;
    }
    float _1747 = (_1743 * cbModelParam._m0[1u].x) + (_1732 * (1.0 - cbModelParam._m0[1u].x));
    float _1757 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _821);
    float _1758 = isnan(_1757) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1757 : min(cbModelParam._m0[25u].z, _1757));
    float _1838;
    float _1840;
    float _1842;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1805 = fma(_978, cbModelParam._m0[13u].z, fma(_974, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _970)) + cbModelParam._m0[13u].w;
        float _1809 = fma(_978, cbModelParam._m0[14u].z, fma(_974, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _970)) + cbModelParam._m0[14u].w;
        float _1813 = fma(_978, cbModelParam._m0[15u].z, fma(_974, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _970)) + cbModelParam._m0[15u].w;
        float _1816 = fma(_916, cbModelParam._m0[13u].z, fma(_915, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _914));
        float _1819 = fma(_916, cbModelParam._m0[14u].z, fma(_915, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _914));
        float _1822 = fma(_916, cbModelParam._m0[15u].z, fma(_915, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _914));
        float _1850;
        if (_1816 > 0.0)
        {
            _1850 = abs((1.0 - _1805) / _1816);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1816 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1805 + 1.0) / _1816);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1850 = frontier_phi_19_17_ladder;
        }
        float _2054;
        if (_1819 > 0.0)
        {
            _2054 = abs((1.0 - _1809) / _1819);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1809 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2054 = frontier_phi_28_24_ladder;
        }
        float _2308;
        if (_1822 > 0.0)
        {
            _2308 = abs((1.0 - _1813) / _1822);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1813 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2308 = frontier_phi_40_35_ladder;
        }
        float _2310 = isnan(_2054) ? _1850 : (isnan(_1850) ? _2054 : min(_1850, _2054));
        float _2311 = isnan(_2308) ? _2310 : (isnan(_2310) ? _2308 : min(_2310, _2308));
        float _2315 = (_2311 * _1816) + _1805;
        float _2316 = (_2311 * _1819) + _1809;
        float _2317 = (_2311 * _1822) + _1813;
        float _2318 = _2311 * 9.9999997473787516355514526367188e-05;
        float _2320 = (-1.0) - _2318;
        float _2322 = _2318 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2317 > _2322) || ((_2317 < _2320) || ((_2316 > _2322) || ((_2316 < _2320) || ((_2315 < _2320) || (_2315 > _2322))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2445 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2317, cbModelParam._m0[9u].z, fma(_2316, cbModelParam._m0[9u].y, _2315 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2317, cbModelParam._m0[10u].z, fma(_2316, cbModelParam._m0[10u].y, _2315 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2317, cbModelParam._m0[11u].z, fma(_2316, cbModelParam._m0[11u].y, _2315 * cbModelParam._m0[11u].x))), _1758);
            frontier_phi_18_40_ladder = _2445.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2445.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2445.x * cbModelParam._m0[1u].y;
        }
        _1838 = frontier_phi_18_40_ladder_2;
        _1840 = frontier_phi_18_40_ladder_1;
        _1842 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1826 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_914, _915, _916), _1758);
        _1838 = _1826.x * cbModelParam._m0[1u].y;
        _1840 = _1826.y * cbModelParam._m0[1u].y;
        _1842 = _1826.z * cbModelParam._m0[1u].y;
    }
    float _1846 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _821);
    float _1847 = isnan(_1846) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1846 : min(cbModelParam._m0[25u].w, _1846));
    float _1938;
    float _1940;
    float _1942;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1902 = fma(_978, cbModelParam._m0[21u].z, fma(_974, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _970)) + cbModelParam._m0[21u].w;
        float _1906 = fma(_978, cbModelParam._m0[22u].z, fma(_974, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _970)) + cbModelParam._m0[22u].w;
        float _1910 = fma(_978, cbModelParam._m0[23u].z, fma(_974, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _970)) + cbModelParam._m0[23u].w;
        float _1913 = fma(_916, cbModelParam._m0[21u].z, fma(_915, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _914));
        float _1916 = fma(_916, cbModelParam._m0[22u].z, fma(_915, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _914));
        float _1919 = fma(_916, cbModelParam._m0[23u].z, fma(_915, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _914));
        float _2059;
        if (_1913 > 0.0)
        {
            _2059 = abs((1.0 - _1902) / _1913);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1902 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2059 = frontier_phi_30_26_ladder;
        }
        float _2335;
        if (_1916 > 0.0)
        {
            _2335 = abs((1.0 - _1906) / _1916);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1906 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2335 = frontier_phi_42_37_ladder;
        }
        float _2548;
        if (_1919 > 0.0)
        {
            _2548 = abs((1.0 - _1910) / _1919);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1910 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2548 = frontier_phi_51_48_ladder;
        }
        float _2550 = isnan(_2335) ? _2059 : (isnan(_2059) ? _2335 : min(_2059, _2335));
        float _2551 = isnan(_2548) ? _2550 : (isnan(_2550) ? _2548 : min(_2550, _2548));
        float _2555 = (_2551 * _1913) + _1902;
        float _2556 = (_2551 * _1916) + _1906;
        float _2557 = (_2551 * _1919) + _1910;
        float _2558 = _2551 * 9.9999997473787516355514526367188e-05;
        float _2559 = (-1.0) - _2558;
        float _2561 = _2558 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2557 > _2561) || ((_2557 < _2559) || ((_2556 > _2561) || ((_2556 < _2559) || ((_2555 < _2559) || (_2555 > _2561))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2790 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2557, cbModelParam._m0[17u].z, fma(_2556, cbModelParam._m0[17u].y, _2555 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2557, cbModelParam._m0[18u].z, fma(_2556, cbModelParam._m0[18u].y, _2555 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2557, cbModelParam._m0[19u].z, fma(_2556, cbModelParam._m0[19u].y, _2555 * cbModelParam._m0[19u].x))), _1847);
            frontier_phi_27_51_ladder = _2790.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2790.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2790.x * cbModelParam._m0[1u].z;
        }
        _1938 = frontier_phi_27_51_ladder_2;
        _1940 = frontier_phi_27_51_ladder_1;
        _1942 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1922 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_914, _915, _916), _1847);
        _1938 = _1922.x * cbModelParam._m0[1u].z;
        _1940 = _1922.y * cbModelParam._m0[1u].z;
        _1942 = _1922.z * cbModelParam._m0[1u].z;
    }
    float _1955 = (((_941 * _891) + _942) * _906) * ((cbModelParam._m0[1u].w * (_1938 - _1838)) + _1838);
    float _1957 = (((_941 * _893) + _942) * _906) * ((cbModelParam._m0[1u].w * (_1940 - _1840)) + _1840);
    float _1959 = (((_941 * _894) + _942) * _906) * ((cbModelParam._m0[1u].w * (_1942 - _1842)) + _1842);
    float _1962 = fma(_1959, cbSceneParam._m0[89u].z, fma(_1957, cbSceneParam._m0[89u].y, _1955 * cbSceneParam._m0[89u].x));
    float _1965 = fma(_1959, cbSceneParam._m0[90u].z, fma(_1957, cbSceneParam._m0[90u].y, _1955 * cbSceneParam._m0[90u].x));
    float _1968 = fma(_1959, cbSceneParam._m0[91u].z, fma(_1957, cbSceneParam._m0[91u].y, _1955 * cbSceneParam._m0[91u].x));
    uvec4 _1978 = floatBitsToUint(cbInstanceData._m0[_834 + 5u]);
    uint _1980 = _1978.x * 14u;
    uint _1981 = _1980 + 13u;
    float _1988 = _906 + (-1.0);
    float _1993 = (cbLight._m0[_1981].x * _1988) + 1.0;
    float _1994 = (cbLight._m0[_1981].y * _1988) + 1.0;
    float _1995 = (cbLight._m0[_1981].z * _1988) + 1.0;
    float _1996 = (cbLight._m0[_1981].w * _1988) + 1.0;
    uint _1997 = _1980 + 5u;
    float _2003 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
    uint _2007 = _1980 + 4u;
    float _2013 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
    uint _2017 = _1980 | 1u;
    float _2028 = dot(vec3(cbLight._m0[_1980].xyz), vec3(_677, _678, _679));
    float _2031 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_677, _678, _679));
    float _4268 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _4279 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2036 = (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * 0.3183098733425140380859375;
    float _2038 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * 0.3183098733425140380859375;
    float _2045 = ((cbLight._m0[_1997].x * _2003) * _2038) + ((cbLight._m0[_2007].x * _2013) * _2036);
    float _2046 = ((_2003 * cbLight._m0[_1997].y) * _2038) + ((_2013 * cbLight._m0[_2007].y) * _2036);
    float _2047 = ((_2003 * cbLight._m0[_1997].z) * _2038) + ((_2013 * cbLight._m0[_2007].z) * _2036);
    uvec4 _2051 = floatBitsToUint(cbLight._m0[_1980 + 12u]);
    bool _2053 = _2051.x == 0u;
    float _2064;
    float _2066;
    float _2068;
    if (_2053)
    {
        _2064 = _2045;
        _2066 = _2046;
        _2068 = _2047;
    }
    else
    {
        uint _2072 = _1980 + 6u;
        float _2088 = (dot(vec3(cbLight._m0[_1980 + 2u].xyz), vec3(_677, _678, _679)) * 0.5) + 0.5;
        float _2089 = _2088 * _2088;
        float _4290 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2090 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _2091 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
        _2064 = (((cbLight._m0[_2072].x * 0.3183098733425140380859375) * _2090) * _2091) + _2045;
        _2066 = (((cbLight._m0[_2072].y * 0.3183098733425140380859375) * _2090) * _2091) + _2046;
        _2068 = (((cbLight._m0[_2072].z * 0.3183098733425140380859375) * _2090) * _2091) + _2047;
    }
    bool _2071 = _2051.y == 0u;
    float _2109;
    float _2111;
    float _2113;
    if (_2071)
    {
        _2109 = _2064;
        _2111 = _2066;
        _2113 = _2068;
    }
    else
    {
        uint _2279 = _1980 + 7u;
        float _2295 = (dot(vec3(cbLight._m0[_1980 + 3u].xyz), vec3(_677, _678, _679)) * 0.5) + 0.5;
        float _2296 = _2295 * _2295;
        float _4306 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2297 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _2298 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
        _2109 = (((cbLight._m0[_2279].x * 0.3183098733425140380859375) * _2297) * _2298) + _2064;
        _2111 = (((cbLight._m0[_2279].y * 0.3183098733425140380859375) * _2297) * _2298) + _2066;
        _2113 = (((cbLight._m0[_2279].z * 0.3183098733425140380859375) * _2297) * _2298) + _2068;
    }
    uint _2116 = _1980 + 8u;
    float _2129 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1980].w)) * _821) * 0.949999988079071044921875);
    float _2130 = _2129 * _2129;
    float _2131 = cbLight._m0[_1980].x + _757;
    float _2132 = cbLight._m0[_1980].y + _758;
    float _2133 = cbLight._m0[_1980].z + _759;
    float _2137 = inversesqrt(dot(vec3(_2131, _2132, _2133), vec3(_2131, _2132, _2133)));
    float _2138 = _2137 * _2131;
    float _2139 = _2137 * _2132;
    float _2140 = _2137 * _2133;
    float _2141 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_1980].xyz));
    float _4322 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2144 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _4333 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _2145 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2146 = dot(vec3(_677, _678, _679), vec3(_2138, _2139, _2140));
    float _4344 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2149 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _2150 = dot(vec3(cbLight._m0[_1980].xyz), vec3(_2138, _2139, _2140));
    float _4355 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2154 = _2130 * _2130;
    float _2158 = ((_2149 * _2149) * (_2154 + (-1.0))) + 1.0;
    float _2166 = exp2(log2(1.0 - (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) * 5.0);
    float _2167 = 0.959999978542327880859375 - _888;
    float _2169 = 0.959999978542327880859375 - _889;
    float _2170 = 0.959999978542327880859375 - _890;
    float _2177 = 1.0 - _2130;
    float _2188 = (0.5 / (((_2145 * ((_2144 * _2177) + _2130)) + 9.9999999392252902907785028219223e-09) + (((_2145 * _2177) + _2130) * _2144))) * _2144;
    float _4366 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2190 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_2154 / ((_2158 * _2158) * 3.141590118408203125));
    uint _2201 = _1980 + 9u;
    float _2212 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2017].w)) * _821) * 0.949999988079071044921875);
    float _2213 = _2212 * _2212;
    float _2214 = cbLight._m0[_2017].x + _757;
    float _2215 = cbLight._m0[_2017].y + _758;
    float _2216 = cbLight._m0[_2017].z + _759;
    float _2220 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
    float _2221 = _2220 * _2214;
    float _2222 = _2220 * _2215;
    float _2223 = _2220 * _2216;
    float _2224 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_2017].xyz));
    float _4377 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2227 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
    float _2228 = dot(vec3(_677, _678, _679), vec3(_2221, _2222, _2223));
    float _4388 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2231 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
    float _2232 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_2221, _2222, _2223));
    float _4399 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2236 = _2213 * _2213;
    float _2240 = ((_2231 * _2231) * (_2236 + (-1.0))) + 1.0;
    float _2247 = exp2(log2(1.0 - (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) * 5.0);
    float _2254 = 1.0 - _2213;
    float _2264 = (0.5 / (((_2145 * ((_2227 * _2254) + _2213)) + 9.9999999392252902907785028219223e-09) + (((_2145 * _2254) + _2213) * _2227))) * _2227;
    float _4410 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2266 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2236 / ((_2240 * _2240) * 3.141590118408203125));
    float _2276 = (((((_2247 * _2167) + _891) * cbLight._m0[_2201].x) * _2266) * _2003) + (((((_2166 * _2167) + _891) * cbLight._m0[_2116].x) * _2190) * _2013);
    float _2277 = (((((_2247 * _2169) + _893) * cbLight._m0[_2201].y) * _2266) * _2003) + (((((_2166 * _2169) + _893) * cbLight._m0[_2116].y) * _2190) * _2013);
    float _2278 = (((((_2247 * _2170) + _894) * cbLight._m0[_2201].z) * _2266) * _2003) + (((((_2166 * _2170) + _894) * cbLight._m0[_2116].z) * _2190) * _2013);
    float _2340;
    float _2342;
    float _2344;
    if (_2053)
    {
        _2340 = _2276;
        _2342 = _2277;
        _2344 = _2278;
    }
    else
    {
        uint _2346 = _1980 + 2u;
        uint _2350 = _1980 + 10u;
        float _2364 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2346].w)) * _821) * 0.949999988079071044921875);
        float _2365 = _2364 * _2364;
        float _2366 = cbLight._m0[_2346].x + _757;
        float _2367 = cbLight._m0[_2346].y + _758;
        float _2368 = cbLight._m0[_2346].z + _759;
        float _2372 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
        float _2373 = _2372 * _2366;
        float _2374 = _2372 * _2367;
        float _2375 = _2372 * _2368;
        float _2376 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_2346].xyz));
        float _4421 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2379 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2380 = dot(vec3(_677, _678, _679), vec3(_2373, _2374, _2375));
        float _4432 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2383 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _2384 = dot(vec3(cbLight._m0[_2346].xyz), vec3(_2373, _2374, _2375));
        float _4443 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2388 = _2365 * _2365;
        float _2392 = ((_2383 * _2383) * (_2388 + (-1.0))) + 1.0;
        float _2399 = exp2(log2(1.0 - (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0)))) * 5.0);
        float _2406 = 1.0 - _2365;
        float _2416 = (0.5 / (((_2145 * ((_2379 * _2406) + _2365)) + 9.9999999392252902907785028219223e-09) + (((_2145 * _2406) + _2365) * _2379))) * _2379;
        float _4454 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2418 = (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_2388 / ((_2392 * _2392) * 3.141590118408203125));
        float _2419 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
        _2340 = (((((_2399 * _2167) + _891) * cbLight._m0[_2350].x) * _2418) * _2419) + _2276;
        _2342 = (((((_2399 * _2169) + _893) * cbLight._m0[_2350].y) * _2418) * _2419) + _2277;
        _2344 = (((((_2399 * _2170) + _894) * cbLight._m0[_2350].z) * _2418) * _2419) + _2278;
    }
    float _2454;
    float _2456;
    float _2458;
    if (_2071)
    {
        _2454 = _2340;
        _2456 = _2342;
        _2458 = _2344;
    }
    else
    {
        uint _2465 = _1980 + 3u;
        uint _2469 = _1980 + 11u;
        float _2483 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2465].w)) * _821) * 0.949999988079071044921875);
        float _2484 = _2483 * _2483;
        float _2485 = cbLight._m0[_2465].x + _757;
        float _2486 = cbLight._m0[_2465].y + _758;
        float _2487 = cbLight._m0[_2465].z + _759;
        float _2491 = inversesqrt(dot(vec3(_2485, _2486, _2487), vec3(_2485, _2486, _2487)));
        float _2492 = _2491 * _2485;
        float _2493 = _2491 * _2486;
        float _2494 = _2491 * _2487;
        float _2495 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_2465].xyz));
        float _4470 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2498 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _2499 = dot(vec3(_677, _678, _679), vec3(_2492, _2493, _2494));
        float _4481 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2502 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _2503 = dot(vec3(cbLight._m0[_2465].xyz), vec3(_2492, _2493, _2494));
        float _4492 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2507 = _2484 * _2484;
        float _2511 = ((_2502 * _2502) * (_2507 + (-1.0))) + 1.0;
        float _2518 = exp2(log2(1.0 - (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) * 5.0);
        float _2525 = 1.0 - _2484;
        float _2535 = (0.5 / (((_2145 * ((_2498 * _2525) + _2484)) + 9.9999999392252902907785028219223e-09) + (((_2145 * _2525) + _2484) * _2498))) * _2498;
        float _4503 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2537 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_2507 / ((_2511 * _2511) * 3.141590118408203125));
        float _2538 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
        _2454 = (((((_2518 * _2167) + _891) * cbLight._m0[_2469].x) * _2537) * _2538) + _2340;
        _2456 = (((((_2518 * _2169) + _893) * cbLight._m0[_2469].y) * _2537) * _2538) + _2342;
        _2458 = (((((_2518 * _2170) + _894) * cbLight._m0[_2469].z) * _2537) * _2538) + _2344;
    }
    float _2672;
    float _2674;
    float _2676;
    float _2678;
    float _2680;
    float _2682;
    if (_1978.y == 0u)
    {
        float _2613 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2614 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2613;
        float _2615 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2613;
        float _2616 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2613;
        uvec4 _2628 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2629 = _2628.x;
        uint _2640 = uint((float(_2628.y) * floor(float(uint(cbSceneParam._m0[85u].y * _779) / _2629))) + floor(float(uint(cbSceneParam._m0[85u].x * _778) / _2629)));
        float _2650 = (log2(_2616 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2651 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        uint _2654 = uint(isnan(14.0) ? _2651 : (isnan(_2651) ? 14.0 : min(_2651, 14.0)));
        uvec4 _2659 = texelFetch(g_lightClusterGridBuffer, int(((_2654 << 2u) + (_2640 << 6u)) >> 2u));
        uint _2660 = _2659.x;
        uint _2661 = _2628.z;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        if (((((1u << ((_2661 >> 4u) & 15u)) + 4294967295u) & _2660) == 0u) || ((_2661 & 240u) == 0u))
        {
            _2795 = 0.0;
            _2797 = 0.0;
            _2799 = 0.0;
            _2801 = 0.0;
            _2803 = 0.0;
            _2805 = 0.0;
        }
        else
        {
            float _2796;
            float _2798;
            float _2800;
            float _2802;
            float _2804;
            float _2806;
            float _2956 = 0.0;
            float _2957 = 0.0;
            float _2958 = 0.0;
            float _2959 = 0.0;
            float _2960 = 0.0;
            float _2961 = 0.0;
            uint _2962 = 0u;
            uint _2971;
            bool _2972;
            for (;;)
            {
                _2971 = texelFetch(g_lightClassification, int((((_2654 << 5u) + (_2640 << 9u)) + (_2962 << 2u)) >> 2u)).x;
                _2972 = _2971 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2972)
                {
                    frontier_phi_68_pred = _2958;
                    frontier_phi_68_pred_1 = _2961;
                    frontier_phi_68_pred_2 = _2960;
                    frontier_phi_68_pred_3 = _2959;
                    frontier_phi_68_pred_4 = _2957;
                    frontier_phi_68_pred_5 = _2956;
                }
                else
                {
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    uint _3107;
                    _3101 = _2956;
                    _3102 = _2957;
                    _3103 = _2958;
                    _3104 = _2959;
                    _3105 = _2960;
                    _3106 = _2961;
                    _3107 = _2971;
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    for (;;)
                    {
                        uint _3111 = uint(findLSB(_3107)) + (_2962 << 5u);
                        uint _3108 = (_3107 + 4294967295u) & _3107;
                        uint _3113 = _3111 * 48u;
                        vec4 _3127 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3113)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 3u)).x));
                        uint _3133 = (_3111 * 48u) + 4u;
                        vec4 _3146 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3133)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 3u)).x));
                        uint _3152 = (_3111 * 48u) + 8u;
                        vec3 _3163 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3152)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 2u)).x));
                        float _3167 = _3127.x - _2614;
                        float _3168 = _3127.y - _2615;
                        float _3169 = _3127.z - _2616;
                        float _3170 = dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169));
                        float _3173 = inversesqrt(_3170);
                        float _3174 = _3173 * _3167;
                        float _3175 = _3173 * _3168;
                        float _3176 = _3173 * _3169;
                        float _3177 = dot(vec3(_802, _805, _808), vec3(_3174, _3175, _3176));
                        float _3182 = 1.0 - (_3170 * _3127.w);
                        float _4529 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3183 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                        float _3184 = sqrt(_3170) * _3146.w;
                        float _3187 = 1.39999997615814208984375 / (_3184 + 1.39999997615814208984375);
                        float _3188 = _3187 * _3187;
                        float _3191 = ((1.0 - _3188) * _3177) + _3188;
                        float _3194 = _3184 * _3184;
                        float _3198 = ((isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0))) * _3183) / ((_3194 * 0.699999988079071044921875) + 1.0);
                        float _3202 = (-0.0) - _2614;
                        float _3203 = (-0.0) - _2615;
                        float _3204 = (-0.0) - _2616;
                        float _3208 = inversesqrt(dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204)));
                        float _3209 = _3208 * _3202;
                        float _3210 = _3208 * _3203;
                        float _3211 = _3208 * _3204;
                        float _3219 = exp2(log2(1.0 / ((_3194 * 3.5) + 5.0)) * 0.25);
                        float _3220 = 1.0 - _922;
                        float _3227 = sqrt(1.0 - ((1.0 - (_3220 * _3220)) * (1.0 - (_3219 * _3219))));
                        float _3228 = _3227 * _3227;
                        float _3229 = _3228 * _3228;
                        float _3230 = _3209 + _3174;
                        float _3231 = _3210 + _3175;
                        float _3232 = _3211 + _3176;
                        float _3236 = inversesqrt(dot(vec3(_3230, _3231, _3232), vec3(_3230, _3231, _3232)));
                        float _3240 = dot(vec3(_802, _805, _808), vec3(_3209, _3210, _3211));
                        float _4545 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                        float _3243 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                        float _3244 = dot(vec3(_802, _805, _808), vec3(_3236 * _3230, _3236 * _3231, _3236 * _3232));
                        float _4556 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3247 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                        float _3251 = ((_3247 * _3247) * (_3229 + (-1.0))) + 1.0;
                        float _3252 = _3187 * _3228;
                        float _3253 = _3252 * _3252;
                        float _3256 = ((1.0 - _3253) * _3177) + _3253;
                        float _4567 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                        float _3257 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                        float _3258 = 1.0 - _3228;
                        float _3268 = (0.5 / (((_3257 * ((_3243 * _3258) + _3228)) + 9.9999999392252902907785028219223e-09) + (((_3257 * _3258) + _3228) * _3243))) * _3257;
                        float _4578 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                        float _3279 = (((_3229 * 3.1415927410125732421875) * (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0)))) / ((_3251 * _3251) * ((_3194 * 2.1991131305694580078125) + 3.141590118408203125))) * _3183;
                        _3031 = (_3198 * _3146.x) + _3104;
                        _3032 = (_3198 * _3146.y) + _3105;
                        _3033 = (_3198 * _3146.z) + _3106;
                        _3028 = (_3279 * _3163.x) + _3101;
                        _3029 = (_3279 * _3163.y) + _3102;
                        _3030 = (_3279 * _3163.z) + _3103;
                        if (_3108 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3101 = _3028;
                            _3102 = _3029;
                            _3103 = _3030;
                            _3104 = _3031;
                            _3105 = _3032;
                            _3106 = _3033;
                            _3107 = _3108;
                        }
                    }
                    frontier_phi_68_pred = _3030;
                    frontier_phi_68_pred_1 = _3033;
                    frontier_phi_68_pred_2 = _3032;
                    frontier_phi_68_pred_3 = _3031;
                    frontier_phi_68_pred_4 = _3029;
                    frontier_phi_68_pred_5 = _3028;
                }
                _2800 = frontier_phi_68_pred;
                _2806 = frontier_phi_68_pred_1;
                _2804 = frontier_phi_68_pred_2;
                _2802 = frontier_phi_68_pred_3;
                _2798 = frontier_phi_68_pred_4;
                _2796 = frontier_phi_68_pred_5;
                uint _2963 = _2962 + 1u;
                if (_2963 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2956 = _2796;
                    _2957 = _2798;
                    _2958 = _2800;
                    _2959 = _2802;
                    _2960 = _2804;
                    _2961 = _2806;
                    _2962 = _2963;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2795 = _2796;
            _2797 = _2798;
            _2799 = _2800;
            _2801 = _2802;
            _2803 = _2804;
            _2805 = _2806;
        }
        uvec4 _2809 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2810 = _2809.z;
        uint _2812 = (_2810 >> 8u) & 15u;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        if (((4294967295u << _2812) & _2660) == 0u)
        {
            _2924 = _2795;
            _2926 = _2797;
            _2928 = _2799;
            _2930 = _2801;
            _2932 = _2803;
            _2934 = _2805;
        }
        else
        {
            float _2949 = inversesqrt(dot(vec3(_2614, _2615, _2616), vec3(_2614, _2615, _2616)));
            float _2950 = _2949 * _2614;
            float _2951 = _2949 * _2615;
            float _2952 = _2949 * _2616;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2812 < ((_2810 >> 12u) & 15u))
            {
                float _2925;
                float _2927;
                float _2929;
                float _2931;
                float _2933;
                float _2935;
                float _3084 = _2795;
                float _3085 = _2797;
                float _3086 = _2799;
                float _3087 = _2801;
                float _3088 = _2803;
                float _3089 = _2805;
                uint _3090 = _2812;
                uint _3099;
                bool _3100;
                for (;;)
                {
                    _3099 = texelFetch(g_lightClassification, int((((_2654 << 5u) + (_2640 << 9u)) + (_3090 << 2u)) >> 2u)).x;
                    _3100 = _3099 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3100)
                    {
                        frontier_phi_79_pred = _3089;
                        frontier_phi_79_pred_1 = _3088;
                        frontier_phi_79_pred_2 = _3087;
                        frontier_phi_79_pred_3 = _3086;
                        frontier_phi_79_pred_4 = _3085;
                        frontier_phi_79_pred_5 = _3084;
                    }
                    else
                    {
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3306 = _3084;
                        float _3307 = _3085;
                        float _3308 = _3086;
                        float _3309 = _3087;
                        float _3310 = _3088;
                        float _3311 = _3089;
                        uint _3312 = _3099;
                        uint _3313;
                        vec4 _3338;
                        float _3339;
                        vec4 _3354;
                        vec3 _3366;
                        vec4 _3382;
                        vec4 _3397;
                        float _3443;
                        bool _3444;
                        for (;;)
                        {
                            uint _3323 = ((_3090 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3312));
                            _3313 = (_3312 + 4294967295u) & _3312;
                            uint _3325 = _3323 * 40u;
                            _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            _3339 = _3338.w;
                            uint _3341 = (_3323 * 40u) + 4u;
                            _3354 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 3u)).x));
                            uint _3356 = (_3323 * 40u) + 8u;
                            _3366 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x));
                            uint _3369 = (_3323 * 40u) + 16u;
                            _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            uint _3384 = (_3323 * 40u) + 20u;
                            _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            uint _3399 = (_3323 * 40u) + 24u;
                            vec4 _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            uint _3418 = (_3323 * 40u) + 28u;
                            vec4 _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            _3443 = fma(_2616, _3431.z, fma(_2615, _3431.y, _3431.x * _2614)) + _3431.w;
                            _3444 = !((fma(_2616, _3412.z, fma(_2615, _3412.y, _3412.x * _2614)) + _3412.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3444)
                            {
                                float _3471 = _3338.x - _2614;
                                float _3472 = _3338.y - _2615;
                                float _3473 = _3338.z - _2616;
                                float _3474 = dot(vec3(_3471, _3472, _3473), vec3(_3471, _3472, _3473));
                                float _3477 = inversesqrt(_3474);
                                float _3478 = _3477 * _3471;
                                float _3479 = _3477 * _3472;
                                float _3480 = _3477 * _3473;
                                float _3484 = 1.0 - (_3474 / (_3339 * _3339));
                                float _4589 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                                float _3485 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                                float _3489 = sqrt(_3474) * _3354.w;
                                float _3491 = 1.39999997615814208984375 / (_3489 + 1.39999997615814208984375);
                                float _3492 = _3491 * _3491;
                                float _3495 = ((1.0 - _3492) * dot(vec3(_3478, _3479, _3480), vec3(_802, _805, _808))) + _3492;
                                float _3498 = _3489 * _3489;
                                float _3502 = (fma(_2616, _3382.z, fma(_2615, _3382.y, _3382.x * _2614)) + _3382.w) / _3443;
                                float _3503 = (fma(_2616, _3397.z, fma(_2615, _3397.y, _3397.x * _2614)) + _3397.w) / _3443;
                                float _3507 = 1.0 - dot(vec2(_3502, _3503), vec2(_3502, _3503));
                                float _4605 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3508 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                                float _3509 = _3508 * (((isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0))) * _3485) / ((_3498 * 0.699999988079071044921875) + 1.0));
                                float _3521 = exp2(log2(1.0 / ((_3498 * 3.5) + 5.0)) * 0.25);
                                float _3522 = 1.0 - _922;
                                float _3529 = sqrt(1.0 - ((1.0 - (_3522 * _3522)) * (1.0 - (_3521 * _3521))));
                                float _3530 = _3529 * _3529;
                                float _3531 = _3530 * _3530;
                                float _3532 = _3478 - _2950;
                                float _3533 = _3479 - _2951;
                                float _3534 = _3480 - _2952;
                                float _3538 = inversesqrt(dot(vec3(_3532, _3533, _3534), vec3(_3532, _3533, _3534)));
                                float _3542 = dot(vec3(_802, _805, _808), vec3((-0.0) - _2950, (-0.0) - _2951, (-0.0) - _2952));
                                float _4616 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3545 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                                float _3546 = dot(vec3(_802, _805, _808), vec3(_3538 * _3532, _3538 * _3533, _3538 * _3534));
                                float _4627 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3549 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                                float _3553 = ((_3549 * _3549) * (_3531 + (-1.0))) + 1.0;
                                float _3554 = _3491 * _3530;
                                float _3555 = _3554 * _3554;
                                float _3561 = ((1.0 - _3555) * dot(vec3(_802, _805, _808), vec3(_3478, _3479, _3480))) + _3555;
                                float _4638 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3562 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                                float _3563 = 1.0 - _3530;
                                float _3573 = (0.5 / (((_3562 * ((_3545 * _3563) + _3530)) + 9.9999999392252902907785028219223e-09) + (((_3562 * _3563) + _3530) * _3545))) * _3562;
                                float _4649 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3583 = (_3508 * _3485) * (((_3531 * 3.1415927410125732421875) * (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0)))) / ((_3553 * _3553) * ((_3498 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3509 * _3354.z;
                                frontier_phi_85_pred_1 = _3509 * _3354.y;
                                frontier_phi_85_pred_2 = _3509 * _3354.x;
                                frontier_phi_85_pred_3 = _3583 * _3366.z;
                                frontier_phi_85_pred_4 = _3583 * _3366.y;
                                frontier_phi_85_pred_5 = _3583 * _3366.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3592 = frontier_phi_85_pred;
                            _3591 = frontier_phi_85_pred_1;
                            _3590 = frontier_phi_85_pred_2;
                            _3589 = frontier_phi_85_pred_3;
                            _3588 = frontier_phi_85_pred_4;
                            _3587 = frontier_phi_85_pred_5;
                            _3296 = _3590 + _3309;
                            _3297 = _3591 + _3310;
                            _3298 = _3592 + _3311;
                            _3293 = _3587 + _3306;
                            _3294 = _3588 + _3307;
                            _3295 = _3589 + _3308;
                            if (_3313 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3306 = _3293;
                                _3307 = _3294;
                                _3308 = _3295;
                                _3309 = _3296;
                                _3310 = _3297;
                                _3311 = _3298;
                                _3312 = _3313;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3298;
                        frontier_phi_79_pred_1 = _3297;
                        frontier_phi_79_pred_2 = _3296;
                        frontier_phi_79_pred_3 = _3295;
                        frontier_phi_79_pred_4 = _3294;
                        frontier_phi_79_pred_5 = _3293;
                    }
                    _2935 = frontier_phi_79_pred;
                    _2933 = frontier_phi_79_pred_1;
                    _2931 = frontier_phi_79_pred_2;
                    _2929 = frontier_phi_79_pred_3;
                    _2927 = frontier_phi_79_pred_4;
                    _2925 = frontier_phi_79_pred_5;
                    uint _3091 = _3090 + 1u;
                    if (_3091 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3084 = _2925;
                        _3085 = _2927;
                        _3086 = _2929;
                        _3087 = _2931;
                        _3088 = _2933;
                        _3089 = _2935;
                        _3090 = _3091;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2931;
                frontier_phi_60_61_ladder_1 = _2935;
                frontier_phi_60_61_ladder_2 = _2933;
                frontier_phi_60_61_ladder_3 = _2929;
                frontier_phi_60_61_ladder_4 = _2927;
                frontier_phi_60_61_ladder_5 = _2925;
            }
            else
            {
                frontier_phi_60_61_ladder = _2801;
                frontier_phi_60_61_ladder_1 = _2805;
                frontier_phi_60_61_ladder_2 = _2803;
                frontier_phi_60_61_ladder_3 = _2799;
                frontier_phi_60_61_ladder_4 = _2797;
                frontier_phi_60_61_ladder_5 = _2795;
            }
            _2924 = frontier_phi_60_61_ladder_5;
            _2926 = frontier_phi_60_61_ladder_4;
            _2928 = frontier_phi_60_61_ladder_3;
            _2930 = frontier_phi_60_61_ladder;
            _2932 = frontier_phi_60_61_ladder_2;
            _2934 = frontier_phi_60_61_ladder_1;
        }
        float _2939 = isnan(1.0) ? _906 : (isnan(_906) ? 1.0 : min(_906, 1.0));
        _2672 = (_2939 * _2930) + _2109;
        _2674 = (_2939 * _2932) + _2111;
        _2676 = (_2939 * _2934) + _2113;
        _2678 = ((_2924 * _891) * _2939) + _2454;
        _2680 = ((_2926 * _893) * _2939) + _2456;
        _2682 = ((_2928 * _894) * _2939) + _2458;
    }
    else
    {
        _2672 = _2109;
        _2674 = _2111;
        _2676 = _2113;
        _2678 = _2454;
        _2680 = _2456;
        _2682 = _2458;
    }
    uint _2688 = _835 + uint(cbMatDynParam._m0[0u].w);
    float _2696 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[22u].z) * _621.x) * cbInstanceData._m0[_2688].x;
    float _2699 = ((cbMtdParam._m0[11u].y * cbMtdParam._m0[22u].z) * _621.y) * cbInstanceData._m0[_2688].y;
    float _2702 = ((cbMtdParam._m0[11u].z * cbMtdParam._m0[22u].z) * _621.z) * cbInstanceData._m0[_2688].z;
    float _4665 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _4676 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _4687 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _2719 = (((isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2672 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _906))) + ((_2678 + ((isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0))) * _1747)) * cbPerFrame._m0[3u].x)) + _2696;
    float _2721 = (_2699 + ((_2680 + ((isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))) * _1747)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2674 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _906)));
    float _2723 = (_2702 + ((_2682 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1747)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * (_2676 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _906)));
    float _2724 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
    float _2725 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
    float _2726 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
    float _2732 = cbMtdParam._m0[2u].x * _2696;
    float _2733 = cbMtdParam._m0[2u].y * _2699;
    float _2734 = cbMtdParam._m0[2u].z * _2702;
    float _4713 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2736 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
    uint _2737 = _834 + 6u;
    float _2745 = _778 / cbSceneParam._m0[86u].x;
    float _2746 = _779 / cbSceneParam._m0[86u].y;
    vec4 _2760 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2745, _2746, (log2((isnan(cbSceneParam._m0[77u].w) ? _700 : (isnan(_700) ? cbSceneParam._m0[77u].w : min(_700, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2762 = _2760.x;
    float _2763 = _2760.y;
    float _2764 = _2760.z;
    float _2765 = _2760.w;
    float _2857;
    float _2859;
    float _2861;
    float _2863;
    if (_700 > cbSceneParam._m0[78u].w)
    {
        float _2820 = isnan(_700) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _700 : min(cbSceneParam._m0[80u].w, _700));
        float _2821 = _2820 / _700;
        float _2832 = _2821 * _750;
        float _2833 = _751 * _2821;
        float _2834 = (-0.0) - _2833;
        float _2835 = _2821 * _752;
        float _2837 = (cbSceneParam._m0[77u].w * _2834) / _2820;
        float _2838 = _2837 + cbSceneParam._m0[79u].w;
        float _2839 = cbSceneParam._m0[79u].w - _2833;
        float _2845 = sqrt(((_2832 * _2832) + (_2833 * _2833)) + (_2835 * _2835));
        float _2848 = (1.0 - (cbSceneParam._m0[77u].w / _2820)) * _2845;
        float _2853 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2855 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3041;
        if (abs((_2834 - _2837) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3041 = ((((_2838 > 0.0) ? exp2(_2853 * _2838) : (2.0 - exp2(_2855 * _2838))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2848;
        }
        else
        {
            float _2985 = 1.0 / cbSceneParam._m0[80u].x;
            float _2986 = isnan(_2839) ? _2838 : (isnan(_2838) ? _2839 : max(_2838, _2839));
            float _2987 = isnan(_2839) ? _2838 : (isnan(_2838) ? _2839 : min(_2838, _2839));
            float _2996 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : min(_2986, 0.0));
            float _2997 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : min(_2987, 0.0));
            _3041 = ((abs(_2845 / _2834) * cbSceneParam._m0[80u].y) * ((((_2996 - _2997) * 2.0) - ((exp2(_2853 * (isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0)))) - exp2(_2853 * (isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0))))) * _2985)) - ((exp2(_2855 * _2996) - exp2(_2855 * _2997)) * _2985))) + (_2848 * cbSceneParam._m0[80u].z);
        }
        vec4 _3043 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2745, _2746, 1.0), 0.0);
        float _3052 = exp2((_3041 * (-1.44269502162933349609375)) * (1.0 - _3043.w));
        float _3053 = log2(_3052);
        float _3069 = log2(_2765);
        _2857 = (exp2(_3069 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3053 * cbSceneParam._m0[78u].x)) * _3043.x) / cbSceneParam._m0[78u].x)) + _2762;
        _2859 = (exp2(_3069 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3053 * cbSceneParam._m0[78u].y)) * _3043.y) / cbSceneParam._m0[78u].y)) + _2763;
        _2861 = (exp2(_3069 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3053 * cbSceneParam._m0[78u].z)) * _3043.z) / cbSceneParam._m0[78u].z)) + _2764;
        _2863 = _3052 * _2765;
    }
    else
    {
        _2857 = _2762;
        _2859 = _2763;
        _2861 = _2764;
        _2863 = _2765;
    }
    bool _3079;
    vec4 _2873;
    vec4 _2895;
    float _2897;
    float _2901;
    float _2902;
    float _2903;
    float _2906;
    float _2909;
    float _2912;
    float _2913;
    bool _2923;
    for (;;)
    {
        _2873 = cbMatDynParam._m0[0u];
        float _2875 = roundEven(_2873.y);
        bool _2876 = _2875 == 3.0;
        float _2877 = log2(_2863);
        float _2881 = exp2(_2877 * cbSceneParam._m0[78u].x);
        float _2882 = exp2(_2877 * cbSceneParam._m0[78u].y);
        float _2883 = exp2(_2877 * cbSceneParam._m0[78u].z);
        float _2884 = _2881 * _2724;
        float _2885 = _2882 * _2725;
        float _2886 = _2883 * _2726;
        float _2893 = _766 + (-0.5);
        _2895 = cbMtdParam._m0[1u];
        _2897 = _2895.y * _2893;
        float _2900 = (_2875 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2901 = _2900 * (_2876 ? _2884 : (_2884 + (cbSceneParam._m0[72u].w * _2857)));
        _2902 = _2900 * (_2876 ? _2885 : (_2885 + (cbSceneParam._m0[72u].w * _2859)));
        _2903 = _2900 * (_2876 ? _2886 : (_2886 + (cbSceneParam._m0[72u].w * _2861)));
        _2906 = ((_2732 * _2736) * _2881) * _2900;
        _2909 = ((_2733 * _2736) * _2882) * _2900;
        _2912 = ((_2734 * _2736) * _2883) * _2900;
        _2913 = _2893 * 0.999000012874603271484375;
        _2923 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2923)
        {
            if ((cbInstanceData._m0[_834 + 7u].x + _2913) < 0.5)
            {
                _3079 = true;
                break;
            }
        }
        uint _3020 = _835 + uint(_2873.w);
        if ((cbInstanceData._m0[_3020].w < 1.0) && ((cbInstanceData._m0[_3020].w + _2913) < 0.5))
        {
            _3079 = true;
            break;
        }
        if ((_2897 + 1.0) < _2895.x)
        {
            _3079 = true;
            break;
        }
        _3079 = false;
        break;
    }
    float _3284;
    if (_3079)
    {
        discard_state = true;
        _3284 = 0.0;
    }
    else
    {
        _3284 = cbInstanceData._m0[_2737].w;
    }
    SV_Target.x = _2901;
    SV_Target.y = _2902;
    SV_Target.z = _2903;
    SV_Target.w = _3284;
    SV_Target_1.x = _2906;
    SV_Target_1.y = _2909;
    SV_Target_1.z = _2912;
    SV_Target_1.w = cbInstanceData._m0[_2737].w;
    discard_exit();
}


