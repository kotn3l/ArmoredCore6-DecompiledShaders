#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1267;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248;
    float _249;
    float _250;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _248 = (-0.0) - _234;
        _249 = (-0.0) - _235;
        _250 = (-0.0) - _236;
    }
    else
    {
        _248 = _234;
        _249 = _235;
        _250 = _236;
    }
    vec4 _265 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _275 = log2(0.0);
    float _277 = exp2(_275 * cbMtdParam._m0[21u].y);
    float _278 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _279 = isnan(1.0) ? _278 : (isnan(_278) ? 1.0 : min(_278, 1.0));
    vec4 _293 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _297 = _293.z;
    float _298 = _293.w;
    float _306 = exp2(log2(_297 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _307 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _308 = isnan(1.0) ? _307 : (isnan(_307) ? 1.0 : min(_307, 1.0));
    vec4 _321 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _346 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _356 = cbMtdParam._m0[9u].x * _346.x;
    float _357 = cbMtdParam._m0[9u].y * _346.y;
    float _358 = cbMtdParam._m0[9u].z * _346.z;
    float _365 = (((cbMtdParam._m0[10u].x * _321.x) - _356) * _308) + _356;
    float _366 = (((cbMtdParam._m0[10u].y * _321.y) - _357) * _308) + _357;
    float _367 = (((cbMtdParam._m0[10u].z * _321.z) - _358) * _308) + _358;
    float _374 = exp2(log2(_298) * cbMtdParam._m0[22u].y);
    vec4 _387 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _407 = (((cbMtdParam._m0[12u].x * _387.x) - _365) * _374) + _365;
    float _408 = (((cbMtdParam._m0[12u].y * _387.y) - _366) * _374) + _366;
    float _409 = (((cbMtdParam._m0[12u].z * _387.z) - _367) * _374) + _367;
    vec4 _421 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _445 = (_265.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _421.x) - _407) * _279) + _407);
    float _447 = (_265.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _421.y) - _408) * _279) + _408);
    float _449 = (_265.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _421.z) - _409) * _279) + _409);
    float _454 = exp2(log2(1.0 - _298) * 0.00999999977648258209228515625);
    float _472 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[22u].w) * _454) + cbMtdParam._m0[22u].w;
    float _491 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _472) + cbMtdParam._m0[21u].z) * _374) + _472;
    float _513 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _491) + cbMtdParam._m0[23u].w) * _279) + _491;
    vec4 _526 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _544 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _546 = _544.x;
    float _547 = _544.y;
    float _550 = cbMtdParam._m0[20u].x + _544.z;
    float _553 = (((cbMtdParam._m0[21u].x + _526.z) - _550) * _454) + _550;
    vec4 _566 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _578 = (_297 * 2.0) * ((((_566.z - _553) + cbMtdParam._m0[23u].y) * _374) + _553);
    vec4 _591 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _600 = (((_591.z - _578) + cbMtdParam._m0[22u].x) * _279) + _578;
    vec4 _619 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _634 = ((_526.x - _546) * _454) + _546;
    float _635 = ((_526.y - _547) * _454) + _547;
    float _640 = ((_566.x - _634) * _374) + _634;
    float _641 = ((_566.y - _635) * _374) + _635;
    float _650 = ((((_591.x - _640) * _279) + _640) * 2.0) + (-1.0);
    float _651 = ((((_591.y - _641) * _279) + _641) * 2.0) + (-1.0);
    float _652 = dot(vec2(_650, _651), vec2(_650, _651));
    float _3684 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _657 = sqrt(1.0 - (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))));
    float _660 = (cbMtdParam._m0[23u].x * ((_293.x * 2.0) + (-1.0))) + _650;
    float _661 = (cbMtdParam._m0[23u].x * ((_293.y * 2.0) + (-1.0))) + _651;
    float _664 = fma(_657, _248, fma(_661, _240 * TANGENT.x, (_226 * _219) * _660));
    float _667 = fma(_657, _249, fma(_661, _240 * TANGENT.y, (_226 * _220) * _660));
    float _670 = fma(_657, _250, fma(_661, _240 * TANGENT.z, (_226 * _221) * _660));
    float _674 = inversesqrt(dot(vec3(_664, _667, _670), vec3(_664, _667, _670)));
    float _675 = _674 * _664;
    float _676 = _674 * _667;
    float _677 = _674 * _670;
    float _3695 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _678 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _3706 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3717 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3728 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3739 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _682 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _698 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _738 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _748 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _738);
    float _749 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _738);
    float _750 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _738);
    float _754 = inversesqrt(dot(vec3(_748, _749, _750), vec3(_748, _749, _750)));
    float _755 = _748 * _754;
    float _756 = _749 * _754;
    float _757 = _750 * _754;
    float _763 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _764 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _766 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _768 = _766.w;
    float _788 = fma(_677, cbSceneParam._m0[5u].z, fma(_676, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _675));
    float _791 = fma(_677, cbSceneParam._m0[6u].z, fma(_676, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _675));
    float _794 = fma(_677, cbSceneParam._m0[7u].z, fma(_676, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _675));
    vec4 _796 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _807 = (((_796.y - _678) + (_796.w * _678)) * cbMtdParam._m0[3u].x) + _678;
    uint _820 = uint(roundEven(NORMAL.w)) * 13u;
    uint _821 = _820 + 9u;
    uint _822 = _821 + uint(cbMatDynParam._m0[0u].w);
    float _828 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0)))) * cbInstanceData._m0[_822].x;
    float _829 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0)))) * cbInstanceData._m0[_822].y;
    float _830 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0)))) * cbInstanceData._m0[_822].z;
    float _3750 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _831 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _3761 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _3772 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _833 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    vec4 _834 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _839 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _850 = (((_839.x - _682) + (_839.w * _682)) * cbMtdParam._m0[3u].x) + _682;
    float _863 = (cbMtdParam._m0[3u].x * (((_831 * _768) - _831) + _834.x)) + _831;
    float _864 = (cbMtdParam._m0[3u].x * (((_832 * _768) - _832) + _834.y)) + _832;
    float _865 = (cbMtdParam._m0[3u].x * (((_833 * _768) - _833) + _834.z)) + _833;
    float _866 = 1.0 - _850;
    float _867 = _866 * _863;
    float _868 = _866 * _864;
    float _869 = _866 * _865;
    float _874 = (_863 + (-0.039999999105930328369140625)) * _850;
    float _875 = (_864 + (-0.039999999105930328369140625)) * _850;
    float _876 = (_865 + (-0.039999999105930328369140625)) * _850;
    float _877 = _874 + 0.039999999105930328369140625;
    float _879 = _875 + 0.039999999105930328369140625;
    float _880 = _876 + 0.039999999105930328369140625;
    vec4 _889 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _763, cbSceneParam._m0[86u].y * _764));
    float _892 = _889.x * TEXCOORD_4.z;
    float _893 = dot(vec3(_675, _676, _677), vec3(_755, _756, _757));
    float _896 = _893 * 2.0;
    float _900 = (_896 * _675) - _755;
    float _901 = (_896 * _676) - _756;
    float _902 = (_896 * _677) - _757;
    float _906 = abs(dot(vec3(_755, _756, _757), vec3(_675, _676, _677)));
    float _3783 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _908 = sqrt(_807);
    float _921 = exp2((_908 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_908 * 3.0));
    float _927 = (1.0 - _921) * ((_908 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _928 = _921 * _908;
    float _956 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _960 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _964 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1266;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _991 = fma(_964, cbModelParam._m0[26u].z, fma(_960, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _956));
        float _995 = fma(_964, cbModelParam._m0[27u].z, fma(_960, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _956));
        float _999 = fma(_964, cbModelParam._m0[28u].z, fma(_960, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _956));
        float _1024 = _956 + _675;
        float _1025 = _960 + _676;
        float _1026 = _964 + _677;
        float _1036 = fma(_1026, cbModelParam._m0[26u].z, fma(_1025, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1024)) - _991;
        float _1037 = fma(_1026, cbModelParam._m0[27u].z, fma(_1025, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1024)) - _995;
        float _1038 = fma(_1026, cbModelParam._m0[28u].z, fma(_1025, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1024)) - _999;
        float _1042 = inversesqrt(dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038)));
        float _1055 = ((_1042 * _1036) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_991 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1056 = ((_1042 * _1037) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_995 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1057 = ((_1042 * _1038) / cbModelParam._m0[34u].z) + ((((((_999 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        float _1094 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1060.x + (-0.5));
        float _1096 = _1094 * (_1060.y + (-0.5));
        float _1097 = _1094 * (_1060.z + (-0.5));
        float _1104 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1067.x + (-0.5));
        float _1106 = _1104 * (_1067.y + (-0.5));
        float _1107 = _1104 * (_1067.z + (-0.5));
        float _1114 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1074.x + (-0.5));
        float _1116 = _1114 * (_1074.y + (-0.5));
        float _1117 = _1114 * (_1074.z + (-0.5));
        float _1124 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1081.x + (-0.5));
        float _1126 = _1124 * (_1081.y + (-0.5));
        float _1127 = _1124 * (_1081.z + (-0.5));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = _1095 * 0.5;
        float _1132 = _1105 * 0.5;
        float _1133 = _1115 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1148 = (dot(vec3(_675, _676, _677), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3809 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1158 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _3820 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3831 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_1160 + 1.0))) + _1165) * _1128;
        float _1175 = _1096 * 0.5;
        float _1176 = _1106 * 0.5;
        float _1177 = _1116 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_675, _676, _677), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3864 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1202 + 1.0))) + _1207) * _1129;
        float _1217 = _1097 * 0.5;
        float _1218 = _1107 * 0.5;
        float _1219 = _1117 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_675, _676, _677), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3897 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1244 + 1.0))) + _1249) * _1130;
        _1266 = _1097;
        _1268 = _1096;
        _1269 = _1095;
        _1270 = _1107;
        _1271 = _1106;
        _1272 = _1105;
        _1273 = _1117;
        _1274 = _1116;
        _1275 = _1115;
        _1276 = _1130;
        _1277 = _1129;
        _1278 = _1128;
        _1279 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1280 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1281 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
    }
    else
    {
        _1266 = _1267;
        _1268 = _1267;
        _1269 = _1267;
        _1270 = _1267;
        _1271 = _1267;
        _1272 = _1267;
        _1273 = _1267;
        _1274 = _1267;
        _1275 = _1267;
        _1276 = _1267;
        _1277 = _1267;
        _1278 = _1267;
        _1279 = 0.0;
        _1280 = 0.0;
        _1281 = 0.0;
    }
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1307 = fma(_964, cbModelParam._m0[30u].z, fma(_960, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _956));
        float _1311 = fma(_964, cbModelParam._m0[31u].z, fma(_960, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _956));
        float _1315 = fma(_964, cbModelParam._m0[32u].z, fma(_960, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _956));
        float _1338 = _956 + _675;
        float _1339 = _960 + _676;
        float _1340 = _964 + _677;
        float _1350 = fma(_1340, cbModelParam._m0[30u].z, fma(_1339, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1338)) - _1307;
        float _1351 = fma(_1340, cbModelParam._m0[31u].z, fma(_1339, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1338)) - _1311;
        float _1352 = fma(_1340, cbModelParam._m0[32u].z, fma(_1339, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1338)) - _1315;
        float _1356 = inversesqrt(dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352)));
        float _1369 = ((_1356 * _1350) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1307 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1370 = ((_1356 * _1351) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1311 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1371 = ((_1356 * _1352) / cbModelParam._m0[35u].z) + ((((((_1315 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1369, _1370, _1371), 0.0);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1369, _1370, _1371), 0.0);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1369, _1370, _1371), 0.0);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1369, _1370, _1371), 0.0);
        float _1406 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1373.x + (-0.5));
        float _1408 = _1406 * (_1373.y + (-0.5));
        float _1409 = _1406 * (_1373.z + (-0.5));
        float _1416 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1380.x + (-0.5));
        float _1418 = _1416 * (_1380.y + (-0.5));
        float _1419 = _1416 * (_1380.z + (-0.5));
        float _1426 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1387.x + (-0.5));
        float _1428 = _1426 * (_1387.y + (-0.5));
        float _1429 = _1426 * (_1387.z + (-0.5));
        float _1436 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1394.x + (-0.5));
        float _1438 = _1436 * (_1394.y + (-0.5));
        float _1439 = _1436 * (_1394.z + (-0.5));
        float _1440 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1441 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1442 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1443 = _1407 * 0.5;
        float _1444 = _1417 * 0.5;
        float _1445 = _1427 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_675, _676, _677), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _3938 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1440 + 9.9999997473787516355514526367188e-06);
        float _3949 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _3960 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1470 + 1.0))) + _1475) * _1440;
        float _1485 = _1408 * 0.5;
        float _1486 = _1418 * 0.5;
        float _1487 = _1428 * 0.5;
        float _1488 = dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487));
        float _1493 = (_1488 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1488);
        float _1501 = (dot(vec3(_675, _676, _677), vec3(_1493 * _1485, _1493 * _1486, _1493 * _1487)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1510 = sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487)) / (_1441 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1512 = _1511 * 2.0;
        float _1516 = (1.0 - _1511) / (_1511 + 1.0);
        float _3993 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1526 = ((((1.0 - _1517) * (_1512 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1512 + 1.0))) + _1517) * _1441;
        float _1527 = _1409 * 0.5;
        float _1528 = _1419 * 0.5;
        float _1529 = _1429 * 0.5;
        float _1530 = dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529));
        float _1535 = (_1530 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1530);
        float _1543 = (dot(vec3(_675, _676, _677), vec3(_1535 * _1527, _1535 * _1528, _1535 * _1529)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1552 = sqrt(((_1528 * _1528) + (_1527 * _1527)) + (_1529 * _1529)) / (_1442 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1554 = _1553 * 2.0;
        float _1558 = (1.0 - _1553) / (_1553 + 1.0);
        float _4026 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1568 = ((((1.0 - _1559) * (_1554 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1554 + 1.0))) + _1559) * _1442;
        _1576 = _1409;
        _1577 = _1408;
        _1578 = _1407;
        _1579 = _1419;
        _1580 = _1418;
        _1581 = _1417;
        _1582 = _1429;
        _1583 = _1428;
        _1584 = _1427;
        _1585 = _1442;
        _1586 = _1441;
        _1587 = _1440;
        _1588 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
        _1589 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)));
        _1590 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)));
    }
    else
    {
        _1576 = _1267;
        _1577 = _1267;
        _1578 = _1267;
        _1579 = _1267;
        _1580 = _1267;
        _1581 = _1267;
        _1582 = _1267;
        _1583 = _1267;
        _1584 = _1267;
        _1585 = _1267;
        _1586 = _1267;
        _1587 = _1267;
        _1588 = 0.0;
        _1589 = 0.0;
        _1590 = 0.0;
    }
    float _1600 = (cbModelParam._m0[1u].x * (_1588 - _1279)) + _1279;
    float _1601 = (cbModelParam._m0[1u].x * (_1589 - _1280)) + _1280;
    float _1602 = (cbModelParam._m0[1u].x * (_1590 - _1281)) + _1281;
    float _1623 = fma(_1602, cbSceneParam._m0[89u].z, fma(_1601, cbSceneParam._m0[89u].y, _1600 * cbSceneParam._m0[89u].x));
    float _1626 = fma(_1602, cbSceneParam._m0[90u].z, fma(_1601, cbSceneParam._m0[90u].y, _1600 * cbSceneParam._m0[90u].x));
    float _1629 = fma(_1602, cbSceneParam._m0[91u].z, fma(_1601, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1600));
    float _1644 = _900 * 0.5;
    float _1645 = _901 * 0.5;
    float _1646 = _902 * 0.5;
    float _1647 = dot(vec4(_1644, _1645, _1646, 1.0), vec4(_1578, _1581, _1584, _1587));
    float _1650 = dot(vec4(_1644, _1645, _1646, 1.0), vec4(_1577, _1580, _1583, _1586));
    float _1653 = dot(vec4(_1644, _1645, _1646, 1.0), vec4(_1576, _1579, _1582, _1585));
    float _1687;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1660 = dot(vec4(_1644, _1645, _1646, 1.0), vec4(_1266, _1270, _1273, _1276));
        float _1664 = dot(vec4(_1644, _1645, _1646, 1.0), vec4(_1268, _1271, _1274, _1277));
        float _1668 = dot(vec4(_1644, _1645, _1646, 1.0), vec4(_1269, _1272, _1275, _1278));
        float _1675 = dot(vec4(cbModelParam._m0[39u]), vec4(_1644, _1645, _1646, 1.0));
        _1687 = dot(vec3(isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)), isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)), isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1675) ? 0.0 : (isnan(0.0) ? _1675 : max(0.0, _1675))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1687 = 1.0;
    }
    float _1698;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1689 = dot(vec4(cbModelParam._m0[40u]), vec4(_1644, _1645, _1646, 1.0));
        _1698 = dot(vec3(isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1689) ? 0.0 : (isnan(0.0) ? _1689 : max(0.0, _1689))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1698 = 1.0;
    }
    float _1702 = (_1698 * cbModelParam._m0[1u].x) + (_1687 * (1.0 - cbModelParam._m0[1u].x));
    float _1712 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _807);
    float _1713 = isnan(_1712) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1712 : min(cbModelParam._m0[25u].z, _1712));
    float _1793;
    float _1795;
    float _1797;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1760 = fma(_964, cbModelParam._m0[13u].z, fma(_960, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _956)) + cbModelParam._m0[13u].w;
        float _1764 = fma(_964, cbModelParam._m0[14u].z, fma(_960, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _956)) + cbModelParam._m0[14u].w;
        float _1768 = fma(_964, cbModelParam._m0[15u].z, fma(_960, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _956)) + cbModelParam._m0[15u].w;
        float _1771 = fma(_902, cbModelParam._m0[13u].z, fma(_901, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _900));
        float _1774 = fma(_902, cbModelParam._m0[14u].z, fma(_901, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _900));
        float _1777 = fma(_902, cbModelParam._m0[15u].z, fma(_901, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _900));
        float _1805;
        if (_1771 > 0.0)
        {
            _1805 = abs((1.0 - _1760) / _1771);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1760 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1805 = frontier_phi_16_14_ladder;
        }
        float _2030;
        if (_1774 > 0.0)
        {
            _2030 = abs((1.0 - _1764) / _1774);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1764 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2030 = frontier_phi_25_21_ladder;
        }
        float _2287;
        if (_1777 > 0.0)
        {
            _2287 = abs((1.0 - _1768) / _1777);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1768 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2287 = frontier_phi_37_32_ladder;
        }
        float _2289 = isnan(_2030) ? _1805 : (isnan(_1805) ? _2030 : min(_1805, _2030));
        float _2290 = isnan(_2287) ? _2289 : (isnan(_2289) ? _2287 : min(_2289, _2287));
        float _2294 = (_2290 * _1771) + _1760;
        float _2295 = (_2290 * _1774) + _1764;
        float _2296 = (_2290 * _1777) + _1768;
        float _2297 = _2290 * 9.9999997473787516355514526367188e-05;
        float _2299 = (-1.0) - _2297;
        float _2301 = _2297 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2296 > _2301) || ((_2296 < _2299) || ((_2295 > _2301) || ((_2295 < _2299) || ((_2294 < _2299) || (_2294 > _2301))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2424 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2296, cbModelParam._m0[9u].z, fma(_2295, cbModelParam._m0[9u].y, _2294 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2296, cbModelParam._m0[10u].z, fma(_2295, cbModelParam._m0[10u].y, _2294 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2296, cbModelParam._m0[11u].z, fma(_2295, cbModelParam._m0[11u].y, _2294 * cbModelParam._m0[11u].x))), _1713);
            frontier_phi_15_37_ladder = _2424.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2424.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2424.x * cbModelParam._m0[1u].y;
        }
        _1793 = frontier_phi_15_37_ladder_2;
        _1795 = frontier_phi_15_37_ladder_1;
        _1797 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1781 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_900, _901, _902), _1713);
        _1793 = _1781.x * cbModelParam._m0[1u].y;
        _1795 = _1781.y * cbModelParam._m0[1u].y;
        _1797 = _1781.z * cbModelParam._m0[1u].y;
    }
    float _1801 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _807);
    float _1802 = isnan(_1801) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1801 : min(cbModelParam._m0[25u].w, _1801));
    float _1893;
    float _1895;
    float _1897;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1857 = fma(_964, cbModelParam._m0[21u].z, fma(_960, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _956)) + cbModelParam._m0[21u].w;
        float _1861 = fma(_964, cbModelParam._m0[22u].z, fma(_960, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _956)) + cbModelParam._m0[22u].w;
        float _1865 = fma(_964, cbModelParam._m0[23u].z, fma(_960, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _956)) + cbModelParam._m0[23u].w;
        float _1868 = fma(_902, cbModelParam._m0[21u].z, fma(_901, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _900));
        float _1871 = fma(_902, cbModelParam._m0[22u].z, fma(_901, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _900));
        float _1874 = fma(_902, cbModelParam._m0[23u].z, fma(_901, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _900));
        float _2035;
        if (_1868 > 0.0)
        {
            _2035 = abs((1.0 - _1857) / _1868);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1857 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2035 = frontier_phi_27_23_ladder;
        }
        float _2314;
        if (_1871 > 0.0)
        {
            _2314 = abs((1.0 - _1861) / _1871);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1861 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2314 = frontier_phi_39_34_ladder;
        }
        float _2527;
        if (_1874 > 0.0)
        {
            _2527 = abs((1.0 - _1865) / _1874);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1865 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2527 = frontier_phi_48_45_ladder;
        }
        float _2529 = isnan(_2314) ? _2035 : (isnan(_2035) ? _2314 : min(_2035, _2314));
        float _2530 = isnan(_2527) ? _2529 : (isnan(_2529) ? _2527 : min(_2529, _2527));
        float _2534 = (_2530 * _1868) + _1857;
        float _2535 = (_2530 * _1871) + _1861;
        float _2536 = (_2530 * _1874) + _1865;
        float _2537 = _2530 * 9.9999997473787516355514526367188e-05;
        float _2538 = (-1.0) - _2537;
        float _2540 = _2537 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2536 > _2540) || ((_2536 < _2538) || ((_2535 > _2540) || ((_2535 < _2538) || ((_2534 < _2538) || (_2534 > _2540))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2769 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2536, cbModelParam._m0[17u].z, fma(_2535, cbModelParam._m0[17u].y, _2534 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2536, cbModelParam._m0[18u].z, fma(_2535, cbModelParam._m0[18u].y, _2534 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2536, cbModelParam._m0[19u].z, fma(_2535, cbModelParam._m0[19u].y, _2534 * cbModelParam._m0[19u].x))), _1802);
            frontier_phi_24_48_ladder = _2769.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2769.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2769.x * cbModelParam._m0[1u].z;
        }
        _1893 = frontier_phi_24_48_ladder_2;
        _1895 = frontier_phi_24_48_ladder_1;
        _1897 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1877 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_900, _901, _902), _1802);
        _1893 = _1877.x * cbModelParam._m0[1u].z;
        _1895 = _1877.y * cbModelParam._m0[1u].z;
        _1897 = _1877.z * cbModelParam._m0[1u].z;
    }
    float _1910 = (((_927 * _877) + _928) * _892) * ((cbModelParam._m0[1u].w * (_1893 - _1793)) + _1793);
    float _1912 = (((_927 * _879) + _928) * _892) * ((cbModelParam._m0[1u].w * (_1895 - _1795)) + _1795);
    float _1914 = (((_927 * _880) + _928) * _892) * ((cbModelParam._m0[1u].w * (_1897 - _1797)) + _1797);
    float _1917 = fma(_1914, cbSceneParam._m0[89u].z, fma(_1912, cbSceneParam._m0[89u].y, _1910 * cbSceneParam._m0[89u].x));
    float _1920 = fma(_1914, cbSceneParam._m0[90u].z, fma(_1912, cbSceneParam._m0[90u].y, _1910 * cbSceneParam._m0[90u].x));
    float _1923 = fma(_1914, cbSceneParam._m0[91u].z, fma(_1912, cbSceneParam._m0[91u].y, _1910 * cbSceneParam._m0[91u].x));
    vec4 _1931 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_763, _764));
    float _1933 = _1931.w;
    float _1945 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1933);
    float _1946 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1933);
    float _1947 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1933);
    uvec4 _1951 = floatBitsToUint(cbInstanceData._m0[_820 + 5u]);
    uint _1953 = _1951.x * 14u;
    uint _1954 = _1953 + 13u;
    float _1961 = _892 + (-1.0);
    float _1966 = (cbLight._m0[_1954].x * _1961) + 1.0;
    float _1967 = (cbLight._m0[_1954].y * _1961) + 1.0;
    float _1968 = (cbLight._m0[_1954].z * _1961) + 1.0;
    float _1969 = (cbLight._m0[_1954].w * _1961) + 1.0;
    uint _1970 = _1953 + 5u;
    float _1976 = isnan(1.0) ? _1967 : (isnan(_1967) ? 1.0 : min(_1967, 1.0));
    uint _1980 = _1953 + 4u;
    float _1989 = isnan(1.0) ? _1966 : (isnan(_1966) ? 1.0 : min(_1966, 1.0));
    uint _1993 = _1953 | 1u;
    float _2004 = dot(vec3(cbLight._m0[_1953].xyz), vec3(_675, _676, _677));
    float _2007 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_675, _676, _677));
    float _4162 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _4173 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2012 = (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * 0.3183098733425140380859375;
    float _2014 = (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * 0.3183098733425140380859375;
    float _2021 = ((cbLight._m0[_1970].x * _1976) * _2014) + (((cbLight._m0[_1980].x * _1945) * _1989) * _2012);
    float _2022 = ((_1976 * cbLight._m0[_1970].y) * _2014) + (((cbLight._m0[_1980].y * _1946) * _1989) * _2012);
    float _2023 = ((_1976 * cbLight._m0[_1970].z) * _2014) + (((cbLight._m0[_1980].z * _1947) * _1989) * _2012);
    uvec4 _2027 = floatBitsToUint(cbLight._m0[_1953 + 12u]);
    bool _2029 = _2027.x == 0u;
    float _2040;
    float _2042;
    float _2044;
    if (_2029)
    {
        _2040 = _2021;
        _2042 = _2022;
        _2044 = _2023;
    }
    else
    {
        uint _2048 = _1953 + 6u;
        float _2064 = (dot(vec3(cbLight._m0[_1953 + 2u].xyz), vec3(_675, _676, _677)) * 0.5) + 0.5;
        float _2065 = _2064 * _2064;
        float _4184 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2066 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _2067 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
        _2040 = (((cbLight._m0[_2048].x * 0.3183098733425140380859375) * _2066) * _2067) + _2021;
        _2042 = (((cbLight._m0[_2048].y * 0.3183098733425140380859375) * _2066) * _2067) + _2022;
        _2044 = (((cbLight._m0[_2048].z * 0.3183098733425140380859375) * _2066) * _2067) + _2023;
    }
    bool _2047 = _2027.y == 0u;
    float _2085;
    float _2087;
    float _2089;
    if (_2047)
    {
        _2085 = _2040;
        _2087 = _2042;
        _2089 = _2044;
    }
    else
    {
        uint _2258 = _1953 + 7u;
        float _2274 = (dot(vec3(cbLight._m0[_1953 + 3u].xyz), vec3(_675, _676, _677)) * 0.5) + 0.5;
        float _2275 = _2274 * _2274;
        float _4200 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2276 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _2277 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
        _2085 = (((cbLight._m0[_2258].x * 0.3183098733425140380859375) * _2276) * _2277) + _2040;
        _2087 = (((cbLight._m0[_2258].y * 0.3183098733425140380859375) * _2276) * _2277) + _2042;
        _2089 = (((cbLight._m0[_2258].z * 0.3183098733425140380859375) * _2276) * _2277) + _2044;
    }
    uint _2092 = _1953 + 8u;
    float _2105 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1953].w)) * _807) * 0.949999988079071044921875);
    float _2106 = _2105 * _2105;
    float _2107 = cbLight._m0[_1953].x + _755;
    float _2108 = cbLight._m0[_1953].y + _756;
    float _2109 = cbLight._m0[_1953].z + _757;
    float _2113 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
    float _2114 = _2113 * _2107;
    float _2115 = _2113 * _2108;
    float _2116 = _2113 * _2109;
    float _2117 = dot(vec3(_675, _676, _677), vec3(cbLight._m0[_1953].xyz));
    float _4216 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2120 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _4227 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _2121 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _2122 = dot(vec3(_675, _676, _677), vec3(_2114, _2115, _2116));
    float _4238 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2125 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _2126 = dot(vec3(cbLight._m0[_1953].xyz), vec3(_2114, _2115, _2116));
    float _4249 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2130 = _2106 * _2106;
    float _2134 = ((_2125 * _2125) * (_2130 + (-1.0))) + 1.0;
    float _2142 = exp2(log2(1.0 - (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)))) * 5.0);
    float _2143 = 0.959999978542327880859375 - _874;
    float _2145 = 0.959999978542327880859375 - _875;
    float _2146 = 0.959999978542327880859375 - _876;
    float _2153 = 1.0 - _2106;
    float _2164 = (0.5 / (((_2121 * ((_2120 * _2153) + _2106)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2153) + _2106) * _2120))) * _2120;
    float _4260 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2166 = (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_2130 / ((_2134 * _2134) * 3.141590118408203125));
    uint _2180 = _1953 + 9u;
    float _2191 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1993].w)) * _807) * 0.949999988079071044921875);
    float _2192 = _2191 * _2191;
    float _2193 = cbLight._m0[_1993].x + _755;
    float _2194 = cbLight._m0[_1993].y + _756;
    float _2195 = cbLight._m0[_1993].z + _757;
    float _2199 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
    float _2200 = _2199 * _2193;
    float _2201 = _2199 * _2194;
    float _2202 = _2199 * _2195;
    float _2203 = dot(vec3(_675, _676, _677), vec3(cbLight._m0[_1993].xyz));
    float _4271 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _2207 = dot(vec3(_675, _676, _677), vec3(_2200, _2201, _2202));
    float _4282 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2210 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _2211 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_2200, _2201, _2202));
    float _4293 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2215 = _2192 * _2192;
    float _2219 = ((_2210 * _2210) * (_2215 + (-1.0))) + 1.0;
    float _2226 = exp2(log2(1.0 - (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) * 5.0);
    float _2233 = 1.0 - _2192;
    float _2243 = (0.5 / (((_2121 * ((_2206 * _2233) + _2192)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2233) + _2192) * _2206))) * _2206;
    float _4304 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2245 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2215 / ((_2219 * _2219) * 3.141590118408203125));
    float _2255 = (((((_2226 * _2143) + _877) * cbLight._m0[_2180].x) * _2245) * _1976) + ((((cbLight._m0[_2092].x * _1945) * ((_2142 * _2143) + _877)) * _2166) * _1989);
    float _2256 = (((((_2226 * _2145) + _879) * cbLight._m0[_2180].y) * _2245) * _1976) + ((((cbLight._m0[_2092].y * _1946) * ((_2142 * _2145) + _879)) * _2166) * _1989);
    float _2257 = (((((_2226 * _2146) + _880) * cbLight._m0[_2180].z) * _2245) * _1976) + ((((cbLight._m0[_2092].z * _1947) * ((_2142 * _2146) + _880)) * _2166) * _1989);
    float _2319;
    float _2321;
    float _2323;
    if (_2029)
    {
        _2319 = _2255;
        _2321 = _2256;
        _2323 = _2257;
    }
    else
    {
        uint _2325 = _1953 + 2u;
        uint _2329 = _1953 + 10u;
        float _2343 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2325].w)) * _807) * 0.949999988079071044921875);
        float _2344 = _2343 * _2343;
        float _2345 = cbLight._m0[_2325].x + _755;
        float _2346 = cbLight._m0[_2325].y + _756;
        float _2347 = cbLight._m0[_2325].z + _757;
        float _2351 = inversesqrt(dot(vec3(_2345, _2346, _2347), vec3(_2345, _2346, _2347)));
        float _2352 = _2351 * _2345;
        float _2353 = _2351 * _2346;
        float _2354 = _2351 * _2347;
        float _2355 = dot(vec3(_675, _676, _677), vec3(cbLight._m0[_2325].xyz));
        float _4315 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2358 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _2359 = dot(vec3(_675, _676, _677), vec3(_2352, _2353, _2354));
        float _4326 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2362 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2363 = dot(vec3(cbLight._m0[_2325].xyz), vec3(_2352, _2353, _2354));
        float _4337 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2367 = _2344 * _2344;
        float _2371 = ((_2362 * _2362) * (_2367 + (-1.0))) + 1.0;
        float _2378 = exp2(log2(1.0 - (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) * 5.0);
        float _2385 = 1.0 - _2344;
        float _2395 = (0.5 / (((_2121 * ((_2358 * _2385) + _2344)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2385) + _2344) * _2358))) * _2358;
        float _4348 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2397 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2367 / ((_2371 * _2371) * 3.141590118408203125));
        float _2398 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
        _2319 = (((((_2378 * _2143) + _877) * cbLight._m0[_2329].x) * _2397) * _2398) + _2255;
        _2321 = (((((_2378 * _2145) + _879) * cbLight._m0[_2329].y) * _2397) * _2398) + _2256;
        _2323 = (((((_2378 * _2146) + _880) * cbLight._m0[_2329].z) * _2397) * _2398) + _2257;
    }
    float _2433;
    float _2435;
    float _2437;
    if (_2047)
    {
        _2433 = _2319;
        _2435 = _2321;
        _2437 = _2323;
    }
    else
    {
        uint _2444 = _1953 + 3u;
        uint _2448 = _1953 + 11u;
        float _2462 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2444].w)) * _807) * 0.949999988079071044921875);
        float _2463 = _2462 * _2462;
        float _2464 = cbLight._m0[_2444].x + _755;
        float _2465 = cbLight._m0[_2444].y + _756;
        float _2466 = cbLight._m0[_2444].z + _757;
        float _2470 = inversesqrt(dot(vec3(_2464, _2465, _2466), vec3(_2464, _2465, _2466)));
        float _2471 = _2470 * _2464;
        float _2472 = _2470 * _2465;
        float _2473 = _2470 * _2466;
        float _2474 = dot(vec3(_675, _676, _677), vec3(cbLight._m0[_2444].xyz));
        float _4364 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2477 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _2478 = dot(vec3(_675, _676, _677), vec3(_2471, _2472, _2473));
        float _4375 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2481 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _2482 = dot(vec3(cbLight._m0[_2444].xyz), vec3(_2471, _2472, _2473));
        float _4386 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2486 = _2463 * _2463;
        float _2490 = ((_2481 * _2481) * (_2486 + (-1.0))) + 1.0;
        float _2497 = exp2(log2(1.0 - (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) * 5.0);
        float _2504 = 1.0 - _2463;
        float _2514 = (0.5 / (((_2121 * ((_2477 * _2504) + _2463)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2504) + _2463) * _2477))) * _2477;
        float _4397 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2516 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2486 / ((_2490 * _2490) * 3.141590118408203125));
        float _2517 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
        _2433 = (((((_2497 * _2143) + _877) * cbLight._m0[_2448].x) * _2516) * _2517) + _2319;
        _2435 = (((((_2497 * _2145) + _879) * cbLight._m0[_2448].y) * _2516) * _2517) + _2321;
        _2437 = (((((_2497 * _2146) + _880) * cbLight._m0[_2448].z) * _2516) * _2517) + _2323;
    }
    float _2651;
    float _2653;
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    if (_1951.y == 0u)
    {
        float _2592 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2593 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2592;
        float _2594 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2592;
        float _2595 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2592;
        uvec4 _2607 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2608 = _2607.x;
        uint _2619 = uint((float(_2607.y) * floor(float(uint(cbSceneParam._m0[85u].y * _764) / _2608))) + floor(float(uint(cbSceneParam._m0[85u].x * _763) / _2608)));
        float _2629 = (log2(_2595 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2630 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        uint _2633 = uint(isnan(14.0) ? _2630 : (isnan(_2630) ? 14.0 : min(_2630, 14.0)));
        uvec4 _2638 = texelFetch(g_lightClusterGridBuffer, int(((_2633 << 2u) + (_2619 << 6u)) >> 2u));
        uint _2639 = _2638.x;
        uint _2640 = _2607.z;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        if (((((1u << ((_2640 >> 4u) & 15u)) + 4294967295u) & _2639) == 0u) || ((_2640 & 240u) == 0u))
        {
            _2774 = 0.0;
            _2776 = 0.0;
            _2778 = 0.0;
            _2780 = 0.0;
            _2782 = 0.0;
            _2784 = 0.0;
        }
        else
        {
            float _2775;
            float _2777;
            float _2779;
            float _2781;
            float _2783;
            float _2785;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            uint _2933 = 0u;
            uint _2942;
            bool _2943;
            for (;;)
            {
                _2942 = texelFetch(g_lightClassification, int((((_2633 << 5u) + (_2619 << 9u)) + (_2933 << 2u)) >> 2u)).x;
                _2943 = _2942 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2943)
                {
                    frontier_phi_63_pred = _2932;
                    frontier_phi_63_pred_1 = _2931;
                    frontier_phi_63_pred_2 = _2930;
                    frontier_phi_63_pred_3 = _2929;
                    frontier_phi_63_pred_4 = _2928;
                    frontier_phi_63_pred_5 = _2927;
                }
                else
                {
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    uint _3057;
                    _3051 = _2927;
                    _3052 = _2928;
                    _3053 = _2929;
                    _3054 = _2930;
                    _3055 = _2931;
                    _3056 = _2932;
                    _3057 = _2942;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    for (;;)
                    {
                        uint _3061 = uint(findLSB(_3057)) + (_2933 << 5u);
                        uint _3058 = (_3057 + 4294967295u) & _3057;
                        uint _3063 = _3061 * 48u;
                        vec4 _3077 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3063)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 3u)).x));
                        uint _3083 = (_3061 * 48u) + 4u;
                        vec4 _3096 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3083)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 3u)).x));
                        uint _3102 = (_3061 * 48u) + 8u;
                        vec3 _3113 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3102)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 2u)).x));
                        float _3117 = _3077.x - _2593;
                        float _3118 = _3077.y - _2594;
                        float _3119 = _3077.z - _2595;
                        float _3120 = dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119));
                        float _3123 = inversesqrt(_3120);
                        float _3124 = _3123 * _3117;
                        float _3125 = _3123 * _3118;
                        float _3126 = _3123 * _3119;
                        float _3127 = dot(vec3(_788, _791, _794), vec3(_3124, _3125, _3126));
                        float _3132 = 1.0 - (_3120 * _3077.w);
                        float _4423 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                        float _3133 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                        float _3134 = sqrt(_3120) * _3096.w;
                        float _3137 = 1.39999997615814208984375 / (_3134 + 1.39999997615814208984375);
                        float _3138 = _3137 * _3137;
                        float _3141 = ((1.0 - _3138) * _3127) + _3138;
                        float _3144 = _3134 * _3134;
                        float _3148 = ((isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0))) * _3133) / ((_3144 * 0.699999988079071044921875) + 1.0);
                        float _3152 = (-0.0) - _2593;
                        float _3153 = (-0.0) - _2594;
                        float _3154 = (-0.0) - _2595;
                        float _3158 = inversesqrt(dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154)));
                        float _3159 = _3158 * _3152;
                        float _3160 = _3158 * _3153;
                        float _3161 = _3158 * _3154;
                        float _3169 = exp2(log2(1.0 / ((_3144 * 3.5) + 5.0)) * 0.25);
                        float _3170 = 1.0 - _908;
                        float _3177 = sqrt(1.0 - ((1.0 - (_3170 * _3170)) * (1.0 - (_3169 * _3169))));
                        float _3178 = _3177 * _3177;
                        float _3179 = _3178 * _3178;
                        float _3180 = _3159 + _3124;
                        float _3181 = _3160 + _3125;
                        float _3182 = _3161 + _3126;
                        float _3186 = inversesqrt(dot(vec3(_3180, _3181, _3182), vec3(_3180, _3181, _3182)));
                        float _3190 = dot(vec3(_788, _791, _794), vec3(_3159, _3160, _3161));
                        float _4439 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                        float _3193 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                        float _3194 = dot(vec3(_788, _791, _794), vec3(_3186 * _3180, _3186 * _3181, _3186 * _3182));
                        float _4450 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3197 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                        float _3201 = ((_3197 * _3197) * (_3179 + (-1.0))) + 1.0;
                        float _3202 = _3137 * _3178;
                        float _3203 = _3202 * _3202;
                        float _3206 = ((1.0 - _3203) * _3127) + _3203;
                        float _4461 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3207 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                        float _3208 = 1.0 - _3178;
                        float _3218 = (0.5 / (((_3207 * ((_3193 * _3208) + _3178)) + 9.9999999392252902907785028219223e-09) + (((_3207 * _3208) + _3178) * _3193))) * _3207;
                        float _4472 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3229 = (((_3179 * 3.1415927410125732421875) * (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0)))) / ((_3201 * _3201) * ((_3144 * 2.1991131305694580078125) + 3.141590118408203125))) * _3133;
                        _2986 = (_3148 * _3096.x) + _3054;
                        _2987 = (_3148 * _3096.y) + _3055;
                        _2988 = (_3148 * _3096.z) + _3056;
                        _2983 = (_3229 * _3113.x) + _3051;
                        _2984 = (_3229 * _3113.y) + _3052;
                        _2985 = (_3229 * _3113.z) + _3053;
                        if (_3058 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3051 = _2983;
                            _3052 = _2984;
                            _3053 = _2985;
                            _3054 = _2986;
                            _3055 = _2987;
                            _3056 = _2988;
                            _3057 = _3058;
                        }
                    }
                    frontier_phi_63_pred = _2988;
                    frontier_phi_63_pred_1 = _2987;
                    frontier_phi_63_pred_2 = _2986;
                    frontier_phi_63_pred_3 = _2985;
                    frontier_phi_63_pred_4 = _2984;
                    frontier_phi_63_pred_5 = _2983;
                }
                _2785 = frontier_phi_63_pred;
                _2783 = frontier_phi_63_pred_1;
                _2781 = frontier_phi_63_pred_2;
                _2779 = frontier_phi_63_pred_3;
                _2777 = frontier_phi_63_pred_4;
                _2775 = frontier_phi_63_pred_5;
                uint _2934 = _2933 + 1u;
                if (_2934 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2927 = _2775;
                    _2928 = _2777;
                    _2929 = _2779;
                    _2930 = _2781;
                    _2931 = _2783;
                    _2932 = _2785;
                    _2933 = _2934;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2774 = _2775;
            _2776 = _2777;
            _2778 = _2779;
            _2780 = _2781;
            _2782 = _2783;
            _2784 = _2785;
        }
        uvec4 _2788 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2789 = _2788.z;
        uint _2791 = (_2789 >> 8u) & 15u;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        if (((4294967295u << _2791) & _2639) == 0u)
        {
            _2895 = _2774;
            _2897 = _2776;
            _2899 = _2778;
            _2901 = _2780;
            _2903 = _2782;
            _2905 = _2784;
        }
        else
        {
            float _2920 = inversesqrt(dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595)));
            float _2921 = _2920 * _2593;
            float _2922 = _2920 * _2594;
            float _2923 = _2920 * _2595;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2791 < ((_2789 >> 12u) & 15u))
            {
                float _2896;
                float _2898;
                float _2900;
                float _2902;
                float _2904;
                float _2906;
                float _3034 = _2774;
                float _3035 = _2776;
                float _3036 = _2778;
                float _3037 = _2780;
                float _3038 = _2782;
                float _3039 = _2784;
                uint _3040 = _2791;
                uint _3049;
                bool _3050;
                for (;;)
                {
                    _3049 = texelFetch(g_lightClassification, int((((_2633 << 5u) + (_2619 << 9u)) + (_3040 << 2u)) >> 2u)).x;
                    _3050 = _3049 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3050)
                    {
                        frontier_phi_69_pred = _3039;
                        frontier_phi_69_pred_1 = _3038;
                        frontier_phi_69_pred_2 = _3037;
                        frontier_phi_69_pred_3 = _3036;
                        frontier_phi_69_pred_4 = _3035;
                        frontier_phi_69_pred_5 = _3034;
                    }
                    else
                    {
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3247 = _3034;
                        float _3248 = _3035;
                        float _3249 = _3036;
                        float _3250 = _3037;
                        float _3251 = _3038;
                        float _3252 = _3039;
                        uint _3253 = _3049;
                        uint _3254;
                        vec4 _3279;
                        float _3280;
                        vec4 _3295;
                        vec3 _3307;
                        vec4 _3323;
                        vec4 _3338;
                        float _3384;
                        bool _3385;
                        for (;;)
                        {
                            uint _3264 = ((_3040 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3253));
                            _3254 = (_3253 + 4294967295u) & _3253;
                            uint _3266 = _3264 * 40u;
                            _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            _3280 = _3279.w;
                            uint _3282 = (_3264 * 40u) + 4u;
                            _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            uint _3297 = (_3264 * 40u) + 8u;
                            _3307 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x));
                            uint _3310 = (_3264 * 40u) + 16u;
                            _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            uint _3325 = (_3264 * 40u) + 20u;
                            _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            uint _3340 = (_3264 * 40u) + 24u;
                            vec4 _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            uint _3359 = (_3264 * 40u) + 28u;
                            vec4 _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            _3384 = fma(_2595, _3372.z, fma(_2594, _3372.y, _3372.x * _2593)) + _3372.w;
                            _3385 = !((fma(_2595, _3353.z, fma(_2594, _3353.y, _3353.x * _2593)) + _3353.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3385)
                            {
                                float _3412 = _3279.x - _2593;
                                float _3413 = _3279.y - _2594;
                                float _3414 = _3279.z - _2595;
                                float _3415 = dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414));
                                float _3418 = inversesqrt(_3415);
                                float _3419 = _3418 * _3412;
                                float _3420 = _3418 * _3413;
                                float _3421 = _3418 * _3414;
                                float _3425 = 1.0 - (_3415 / (_3280 * _3280));
                                float _4483 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                                float _3426 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                                float _3430 = sqrt(_3415) * _3295.w;
                                float _3432 = 1.39999997615814208984375 / (_3430 + 1.39999997615814208984375);
                                float _3433 = _3432 * _3432;
                                float _3436 = ((1.0 - _3433) * dot(vec3(_3419, _3420, _3421), vec3(_788, _791, _794))) + _3433;
                                float _3439 = _3430 * _3430;
                                float _3443 = (fma(_2595, _3323.z, fma(_2594, _3323.y, _3323.x * _2593)) + _3323.w) / _3384;
                                float _3444 = (fma(_2595, _3338.z, fma(_2594, _3338.y, _3338.x * _2593)) + _3338.w) / _3384;
                                float _3448 = 1.0 - dot(vec2(_3443, _3444), vec2(_3443, _3444));
                                float _4499 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3449 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                                float _3450 = _3449 * (((isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0))) * _3426) / ((_3439 * 0.699999988079071044921875) + 1.0));
                                float _3462 = exp2(log2(1.0 / ((_3439 * 3.5) + 5.0)) * 0.25);
                                float _3463 = 1.0 - _908;
                                float _3470 = sqrt(1.0 - ((1.0 - (_3463 * _3463)) * (1.0 - (_3462 * _3462))));
                                float _3471 = _3470 * _3470;
                                float _3472 = _3471 * _3471;
                                float _3473 = _3419 - _2921;
                                float _3474 = _3420 - _2922;
                                float _3475 = _3421 - _2923;
                                float _3479 = inversesqrt(dot(vec3(_3473, _3474, _3475), vec3(_3473, _3474, _3475)));
                                float _3483 = dot(vec3(_788, _791, _794), vec3((-0.0) - _2921, (-0.0) - _2922, (-0.0) - _2923));
                                float _4510 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3486 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                                float _3487 = dot(vec3(_788, _791, _794), vec3(_3479 * _3473, _3479 * _3474, _3479 * _3475));
                                float _4521 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                                float _3490 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                                float _3494 = ((_3490 * _3490) * (_3472 + (-1.0))) + 1.0;
                                float _3495 = _3432 * _3471;
                                float _3496 = _3495 * _3495;
                                float _3502 = ((1.0 - _3496) * dot(vec3(_788, _791, _794), vec3(_3419, _3420, _3421))) + _3496;
                                float _4532 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3503 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                                float _3504 = 1.0 - _3471;
                                float _3514 = (0.5 / (((_3503 * ((_3486 * _3504) + _3471)) + 9.9999999392252902907785028219223e-09) + (((_3503 * _3504) + _3471) * _3486))) * _3503;
                                float _4543 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3524 = (_3449 * _3426) * (((_3472 * 3.1415927410125732421875) * (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) / ((_3494 * _3494) * ((_3439 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3450 * _3295.z;
                                frontier_phi_75_pred_1 = _3450 * _3295.y;
                                frontier_phi_75_pred_2 = _3450 * _3295.x;
                                frontier_phi_75_pred_3 = _3524 * _3307.z;
                                frontier_phi_75_pred_4 = _3524 * _3307.y;
                                frontier_phi_75_pred_5 = _3524 * _3307.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3533 = frontier_phi_75_pred;
                            _3532 = frontier_phi_75_pred_1;
                            _3531 = frontier_phi_75_pred_2;
                            _3530 = frontier_phi_75_pred_3;
                            _3529 = frontier_phi_75_pred_4;
                            _3528 = frontier_phi_75_pred_5;
                            _3237 = _3531 + _3250;
                            _3238 = _3532 + _3251;
                            _3239 = _3533 + _3252;
                            _3234 = _3528 + _3247;
                            _3235 = _3529 + _3248;
                            _3236 = _3530 + _3249;
                            if (_3254 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3254;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3239;
                        frontier_phi_69_pred_1 = _3238;
                        frontier_phi_69_pred_2 = _3237;
                        frontier_phi_69_pred_3 = _3236;
                        frontier_phi_69_pred_4 = _3235;
                        frontier_phi_69_pred_5 = _3234;
                    }
                    _2906 = frontier_phi_69_pred;
                    _2904 = frontier_phi_69_pred_1;
                    _2902 = frontier_phi_69_pred_2;
                    _2900 = frontier_phi_69_pred_3;
                    _2898 = frontier_phi_69_pred_4;
                    _2896 = frontier_phi_69_pred_5;
                    uint _3041 = _3040 + 1u;
                    if (_3041 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3034 = _2896;
                        _3035 = _2898;
                        _3036 = _2900;
                        _3037 = _2902;
                        _3038 = _2904;
                        _3039 = _2906;
                        _3040 = _3041;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2906;
                frontier_phi_57_58_ladder_1 = _2904;
                frontier_phi_57_58_ladder_2 = _2902;
                frontier_phi_57_58_ladder_3 = _2900;
                frontier_phi_57_58_ladder_4 = _2898;
                frontier_phi_57_58_ladder_5 = _2896;
            }
            else
            {
                frontier_phi_57_58_ladder = _2784;
                frontier_phi_57_58_ladder_1 = _2782;
                frontier_phi_57_58_ladder_2 = _2780;
                frontier_phi_57_58_ladder_3 = _2778;
                frontier_phi_57_58_ladder_4 = _2776;
                frontier_phi_57_58_ladder_5 = _2774;
            }
            _2895 = frontier_phi_57_58_ladder_5;
            _2897 = frontier_phi_57_58_ladder_4;
            _2899 = frontier_phi_57_58_ladder_3;
            _2901 = frontier_phi_57_58_ladder_2;
            _2903 = frontier_phi_57_58_ladder_1;
            _2905 = frontier_phi_57_58_ladder;
        }
        float _2910 = isnan(1.0) ? _892 : (isnan(_892) ? 1.0 : min(_892, 1.0));
        _2651 = (_2910 * _2901) + _2085;
        _2653 = (_2910 * _2903) + _2087;
        _2655 = (_2910 * _2905) + _2089;
        _2657 = ((_2895 * _877) * _2910) + _2433;
        _2659 = ((_2897 * _879) * _2910) + _2435;
        _2661 = ((_2899 * _880) * _2910) + _2437;
    }
    else
    {
        _2651 = _2085;
        _2653 = _2087;
        _2655 = _2089;
        _2657 = _2433;
        _2659 = _2435;
        _2661 = _2437;
    }
    uint _2667 = _821 + uint(cbMatDynParam._m0[0u].w);
    float _2675 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[22u].z) * _619.x) * cbInstanceData._m0[_2667].x;
    float _2678 = ((cbMtdParam._m0[11u].y * cbMtdParam._m0[22u].z) * _619.y) * cbInstanceData._m0[_2667].y;
    float _2681 = ((cbMtdParam._m0[11u].z * cbMtdParam._m0[22u].z) * _619.z) * cbInstanceData._m0[_2667].z;
    float _4559 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _4570 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _4581 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _2698 = (((isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_2651 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _892))) + ((_2657 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1702)) * cbPerFrame._m0[3u].x)) + _2675;
    float _2700 = (_2678 + ((_2659 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1702)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_2653 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _892)));
    float _2702 = (_2681 + ((_2661 + ((isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))) * _1702)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2655 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _892)));
    float _4607 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2715 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
    uint _2716 = _820 + 6u;
    float _2724 = _763 / cbSceneParam._m0[86u].x;
    float _2725 = _764 / cbSceneParam._m0[86u].y;
    vec4 _2739 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2724, _2725, (log2((isnan(cbSceneParam._m0[77u].w) ? _698 : (isnan(_698) ? cbSceneParam._m0[77u].w : min(_698, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2741 = _2739.x;
    float _2742 = _2739.y;
    float _2743 = _2739.z;
    float _2744 = _2739.w;
    float _2836;
    float _2838;
    float _2840;
    float _2842;
    if (_698 > cbSceneParam._m0[78u].w)
    {
        float _2799 = isnan(_698) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _698 : min(cbSceneParam._m0[80u].w, _698));
        float _2800 = _2799 / _698;
        float _2811 = _2800 * _748;
        float _2812 = _749 * _2800;
        float _2813 = (-0.0) - _2812;
        float _2814 = _2800 * _750;
        float _2816 = (cbSceneParam._m0[77u].w * _2813) / _2799;
        float _2817 = _2816 + cbSceneParam._m0[79u].w;
        float _2818 = cbSceneParam._m0[79u].w - _2812;
        float _2824 = sqrt(((_2811 * _2811) + (_2812 * _2812)) + (_2814 * _2814));
        float _2827 = (1.0 - (cbSceneParam._m0[77u].w / _2799)) * _2824;
        float _2832 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2834 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2996;
        if (abs((_2813 - _2816) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2996 = ((((_2817 > 0.0) ? exp2(_2832 * _2817) : (2.0 - exp2(_2834 * _2817))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2827;
        }
        else
        {
            float _2956 = 1.0 / cbSceneParam._m0[80u].x;
            float _2957 = isnan(_2818) ? _2817 : (isnan(_2817) ? _2818 : max(_2817, _2818));
            float _2958 = isnan(_2818) ? _2817 : (isnan(_2817) ? _2818 : min(_2817, _2818));
            float _2967 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : min(_2957, 0.0));
            float _2968 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : min(_2958, 0.0));
            _2996 = ((abs(_2824 / _2813) * cbSceneParam._m0[80u].y) * ((((_2967 - _2968) * 2.0) - ((exp2(_2832 * (isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0)))) - exp2(_2832 * (isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0))))) * _2956)) - ((exp2(_2834 * _2967) - exp2(_2834 * _2968)) * _2956))) + (_2827 * cbSceneParam._m0[80u].z);
        }
        vec4 _2998 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2724, _2725, 1.0), 0.0);
        float _3007 = exp2((_2996 * (-1.44269502162933349609375)) * (1.0 - _2998.w));
        float _3008 = log2(_3007);
        float _3024 = log2(_2744);
        _2836 = (exp2(_3024 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3008 * cbSceneParam._m0[78u].x)) * _2998.x) / cbSceneParam._m0[78u].x)) + _2741;
        _2838 = (exp2(_3024 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3008 * cbSceneParam._m0[78u].y)) * _2998.y) / cbSceneParam._m0[78u].y)) + _2742;
        _2840 = (exp2(_3024 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3008 * cbSceneParam._m0[78u].z)) * _2998.z) / cbSceneParam._m0[78u].z)) + _2743;
        _2842 = _3007 * _2744;
    }
    else
    {
        _2836 = _2741;
        _2838 = _2742;
        _2840 = _2743;
        _2842 = _2744;
    }
    float _2854 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2855 = _2854 == 3.0;
    float _2856 = log2(_2842);
    float _2860 = exp2(_2856 * cbSceneParam._m0[78u].x);
    float _2861 = exp2(_2856 * cbSceneParam._m0[78u].y);
    float _2862 = exp2(_2856 * cbSceneParam._m0[78u].z);
    float _2863 = _2860 * (isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0)));
    float _2864 = _2861 * (isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0)));
    float _2865 = _2862 * (isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0)));
    float _2874 = (_2854 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2874 * (_2855 ? _2863 : (_2863 + (cbSceneParam._m0[72u].w * _2836)));
    SV_Target.y = _2874 * (_2855 ? _2864 : (_2864 + (cbSceneParam._m0[72u].w * _2838)));
    SV_Target.z = _2874 * (_2855 ? _2865 : (_2865 + (cbSceneParam._m0[72u].w * _2840)));
    SV_Target.w = cbInstanceData._m0[_2716].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2675) * _2715) * _2860) * _2874;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2678) * _2715) * _2861) * _2874;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2681) * _2715) * _2862) * _2874;
    SV_Target_1.w = cbInstanceData._m0[_2716].w;
}


