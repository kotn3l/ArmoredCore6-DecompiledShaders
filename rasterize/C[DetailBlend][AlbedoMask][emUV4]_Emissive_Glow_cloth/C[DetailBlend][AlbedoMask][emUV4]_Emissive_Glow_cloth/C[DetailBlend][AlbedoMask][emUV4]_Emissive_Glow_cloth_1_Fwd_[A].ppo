#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1417;
float _3840;
float _3841;
float _3842;
float _3843;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = _239 * NORMAL.x;
    float _241 = _239 * NORMAL.y;
    float _242 = _239 * NORMAL.z;
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254;
    float _255;
    float _256;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _254 = (-0.0) - _240;
        _255 = (-0.0) - _241;
        _256 = (-0.0) - _242;
    }
    else
    {
        _254 = _240;
        _255 = _241;
        _256 = _242;
    }
    vec4 _271 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _281 = log2(0.0);
    float _283 = exp2(_281 * cbMtdParam._m0[21u].y);
    float _284 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _285 = isnan(1.0) ? _284 : (isnan(_284) ? 1.0 : min(_284, 1.0));
    vec4 _299 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _303 = _299.z;
    float _304 = _299.w;
    float _312 = exp2(log2(_303 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _313 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _314 = isnan(1.0) ? _313 : (isnan(_313) ? 1.0 : min(_313, 1.0));
    vec4 _327 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _350 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _352 = _350.x;
    float _353 = _350.y;
    float _377 = ((cbMtdParam._m0[20u].w * _350.z) * (texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].z * TEXCOORD.x) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((cbMtdParam._m0[20u].z * TEXCOORD.y) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w)).x - _352)) + _352;
    bool _413 = _377 >= 0.25;
    bool _418 = _377 >= 0.3499999940395355224609375;
    bool _423 = _377 >= 0.5;
    bool _428 = _377 >= 0.64999997615814208984375;
    bool _433 = _377 >= 0.75;
    vec4 _461 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _471 = cbMtdParam._m0[9u].x * _461.x;
    float _472 = cbMtdParam._m0[9u].y * _461.y;
    float _473 = cbMtdParam._m0[9u].z * _461.z;
    float _480 = (((((((_433 ? cbMtdParam._m0[14u].x : (_428 ? cbMtdParam._m0[19u].x : (_423 ? cbMtdParam._m0[18u].x : (_418 ? cbMtdParam._m0[17u].x : (_413 ? cbMtdParam._m0[16u].x : cbMtdParam._m0[15u].x))))) - cbMtdParam._m0[10u].x) * _353) + cbMtdParam._m0[10u].x) * _327.x) - _471) * _314) + _471;
    float _481 = (((((((_433 ? cbMtdParam._m0[14u].y : (_428 ? cbMtdParam._m0[19u].y : (_423 ? cbMtdParam._m0[18u].y : (_418 ? cbMtdParam._m0[17u].y : (_413 ? cbMtdParam._m0[16u].y : cbMtdParam._m0[15u].y))))) - cbMtdParam._m0[10u].y) * _353) + cbMtdParam._m0[10u].y) * _327.y) - _472) * _314) + _472;
    float _482 = (((((((_433 ? cbMtdParam._m0[14u].z : (_428 ? cbMtdParam._m0[19u].z : (_423 ? cbMtdParam._m0[18u].z : (_418 ? cbMtdParam._m0[17u].z : (_413 ? cbMtdParam._m0[16u].z : cbMtdParam._m0[15u].z))))) - cbMtdParam._m0[10u].z) * _353) + cbMtdParam._m0[10u].z) * _327.z) - _473) * _314) + _473;
    float _489 = exp2(log2(_304) * cbMtdParam._m0[22u].y);
    vec4 _502 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _522 = (((cbMtdParam._m0[12u].x * _502.x) - _480) * _489) + _480;
    float _523 = (((cbMtdParam._m0[12u].y * _502.y) - _481) * _489) + _481;
    float _524 = (((cbMtdParam._m0[12u].z * _502.z) - _482) * _489) + _482;
    vec4 _536 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _560 = (_271.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _536.x) - _522) * _285) + _522);
    float _562 = (_271.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _536.y) - _523) * _285) + _523);
    float _564 = (_271.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _536.z) - _524) * _285) + _524);
    float _569 = exp2(log2(1.0 - _304) * 0.00999999977648258209228515625);
    float _587 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[22u].w) * _569) + cbMtdParam._m0[22u].w;
    float _606 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _587) + cbMtdParam._m0[21u].z) * _489) + _587;
    float _628 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _606) + cbMtdParam._m0[23u].w) * _285) + _606;
    vec4 _641 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _659 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _661 = _659.x;
    float _662 = _659.y;
    float _665 = cbMtdParam._m0[20u].x + _659.z;
    float _668 = (((cbMtdParam._m0[21u].x + _641.z) - _665) * _569) + _665;
    vec4 _680 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _692 = (_303 * 2.0) * ((((_680.z - _668) + cbMtdParam._m0[23u].y) * _489) + _668);
    vec4 _704 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _713 = (((_704.z - _692) + cbMtdParam._m0[22u].x) * _285) + _692;
    vec4 _732 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _747 = ((_641.x - _661) * _569) + _661;
    float _748 = ((_641.y - _662) * _569) + _662;
    float _753 = ((_680.x - _747) * _489) + _747;
    float _754 = ((_680.y - _748) * _489) + _748;
    float _763 = ((((_704.x - _753) * _285) + _753) * 2.0) + (-1.0);
    float _764 = ((((_704.y - _754) * _285) + _754) * 2.0) + (-1.0);
    float _765 = dot(vec2(_763, _764), vec2(_763, _764));
    float _3872 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _770 = sqrt(1.0 - (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))));
    float _773 = (cbMtdParam._m0[23u].x * ((_299.x * 2.0) + (-1.0))) + _763;
    float _774 = (cbMtdParam._m0[23u].x * ((_299.y * 2.0) + (-1.0))) + _764;
    float _777 = fma(_770, _254, fma(_774, _246 * TANGENT.x, (_232 * _225) * _773));
    float _780 = fma(_770, _255, fma(_774, _246 * TANGENT.y, (_232 * _226) * _773));
    float _783 = fma(_770, _256, fma(_774, _246 * TANGENT.z, (_232 * _227) * _773));
    float _787 = inversesqrt(dot(vec3(_777, _780, _783), vec3(_777, _780, _783)));
    float _788 = _787 * _777;
    float _789 = _787 * _780;
    float _790 = _787 * _783;
    float _3883 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _791 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _3894 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3905 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3916 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _3927 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _795 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _811 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _851 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _861 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _851);
    float _862 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _851);
    float _863 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _851);
    float _867 = inversesqrt(dot(vec3(_861, _862, _863), vec3(_861, _862, _863)));
    float _868 = _861 * _867;
    float _869 = _862 * _867;
    float _870 = _863 * _867;
    vec4 _875 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _877 = _875.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1098 = sqrt(((_861 * _861) + (_862 * _862)) + (_863 * _863));
        float _1104 = (cbMatDynParam._m0[5u].x * _1098) + cbMatDynParam._m0[5u].y;
        float _3938 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1109 = (cbMatDynParam._m0[5u].z * _1098) + cbMatDynParam._m0[5u].w;
        float _3949 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) - _1105)) + _1105) < ((_877 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _888 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _889 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _891 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _893 = _891.w;
    float _911 = fma(_790, cbSceneParam._m0[5u].z, fma(_789, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _788));
    float _914 = fma(_790, cbSceneParam._m0[6u].z, fma(_789, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _788));
    float _917 = fma(_790, cbSceneParam._m0[7u].z, fma(_789, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _788));
    vec4 _919 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _930 = (((_919.y - _791) + (_919.w * _791)) * cbMtdParam._m0[3u].x) + _791;
    uint _943 = uint(roundEven(NORMAL.w)) * 13u;
    uint _944 = _943 + 9u;
    uint _945 = _944 + uint(cbMatDynParam._m0[0u].w);
    float _951 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) * cbInstanceData._m0[_945].x;
    float _952 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * cbInstanceData._m0[_945].y;
    float _953 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) * cbInstanceData._m0[_945].z;
    float _3960 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _954 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _3971 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _955 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _3982 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _956 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    vec4 _957 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _962 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _973 = (((_962.x - _795) + (_962.w * _795)) * cbMtdParam._m0[3u].x) + _795;
    float _986 = (cbMtdParam._m0[3u].x * (((_954 * _893) - _954) + _957.x)) + _954;
    float _987 = (cbMtdParam._m0[3u].x * (((_955 * _893) - _955) + _957.y)) + _955;
    float _988 = (cbMtdParam._m0[3u].x * (((_956 * _893) - _956) + _957.z)) + _956;
    float _989 = 1.0 - _973;
    float _990 = _989 * _986;
    float _991 = _989 * _987;
    float _992 = _989 * _988;
    float _997 = (_986 + (-0.039999999105930328369140625)) * _973;
    float _998 = (_987 + (-0.039999999105930328369140625)) * _973;
    float _999 = (_988 + (-0.039999999105930328369140625)) * _973;
    float _1000 = _997 + 0.039999999105930328369140625;
    float _1002 = _998 + 0.039999999105930328369140625;
    float _1003 = _999 + 0.039999999105930328369140625;
    vec4 _1012 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _888, cbSceneParam._m0[86u].y * _889));
    float _1015 = _1012.x * TEXCOORD_4.z;
    float _1016 = dot(vec3(_788, _789, _790), vec3(_868, _869, _870));
    float _1019 = _1016 * 2.0;
    float _1023 = (_1019 * _788) - _868;
    float _1024 = (_1019 * _789) - _869;
    float _1025 = (_1019 * _790) - _870;
    float _1029 = abs(dot(vec3(_868, _869, _870), vec3(_788, _789, _790)));
    float _3993 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1031 = sqrt(_930);
    float _1044 = exp2((_1031 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1031 * 3.0));
    float _1050 = (1.0 - _1044) * ((_1031 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1051 = _1044 * _1031;
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1083 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1087 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1416;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1142 = fma(_1087, cbModelParam._m0[26u].z, fma(_1083, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1079));
        float _1146 = fma(_1087, cbModelParam._m0[27u].z, fma(_1083, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1079));
        float _1150 = fma(_1087, cbModelParam._m0[28u].z, fma(_1083, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1079));
        float _1174 = _1079 + _788;
        float _1175 = _1083 + _789;
        float _1176 = _1087 + _790;
        float _1186 = fma(_1176, cbModelParam._m0[26u].z, fma(_1175, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1174)) - _1142;
        float _1187 = fma(_1176, cbModelParam._m0[27u].z, fma(_1175, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1174)) - _1146;
        float _1188 = fma(_1176, cbModelParam._m0[28u].z, fma(_1175, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1174)) - _1150;
        float _1192 = inversesqrt(dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188)));
        float _1205 = ((_1192 * _1186) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1142 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1206 = ((_1192 * _1187) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1146 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1207 = ((_1192 * _1188) / cbModelParam._m0[34u].z) + ((((((_1150 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        float _1244 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1210.x + (-0.5));
        float _1246 = _1244 * (_1210.y + (-0.5));
        float _1247 = _1244 * (_1210.z + (-0.5));
        float _1254 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1217.x + (-0.5));
        float _1256 = _1254 * (_1217.y + (-0.5));
        float _1257 = _1254 * (_1217.z + (-0.5));
        float _1264 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1224.x + (-0.5));
        float _1266 = _1264 * (_1224.y + (-0.5));
        float _1267 = _1264 * (_1224.z + (-0.5));
        float _1274 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1231.x + (-0.5));
        float _1276 = _1274 * (_1231.y + (-0.5));
        float _1277 = _1274 * (_1231.z + (-0.5));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = _1245 * 0.5;
        float _1282 = _1255 * 0.5;
        float _1283 = _1265 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1298 = (dot(vec3(_788, _789, _790), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1308 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _4041 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1310 + 1.0))) + _1315) * _1278;
        float _1325 = _1246 * 0.5;
        float _1326 = _1256 * 0.5;
        float _1327 = _1266 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_788, _789, _790), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1279 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _4074 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1352 + 1.0))) + _1357) * _1279;
        float _1367 = _1247 * 0.5;
        float _1368 = _1257 * 0.5;
        float _1369 = _1267 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1383 = (dot(vec3(_788, _789, _790), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _4085 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1392 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _4096 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _4107 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1394 + 1.0))) + _1399) * _1280;
        _1416 = _1247;
        _1418 = _1246;
        _1419 = _1245;
        _1420 = _1257;
        _1421 = _1256;
        _1422 = _1255;
        _1423 = _1267;
        _1424 = _1266;
        _1425 = _1265;
        _1426 = _1280;
        _1427 = _1279;
        _1428 = _1278;
        _1429 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
        _1430 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
        _1431 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
    }
    else
    {
        _1416 = _1417;
        _1418 = _1417;
        _1419 = _1417;
        _1420 = _1417;
        _1421 = _1417;
        _1422 = _1417;
        _1423 = _1417;
        _1424 = _1417;
        _1425 = _1417;
        _1426 = _1417;
        _1427 = _1417;
        _1428 = _1417;
        _1429 = 0.0;
        _1430 = 0.0;
        _1431 = 0.0;
    }
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1460 = fma(_1087, cbModelParam._m0[30u].z, fma(_1083, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1079));
        float _1464 = fma(_1087, cbModelParam._m0[31u].z, fma(_1083, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1079));
        float _1468 = fma(_1087, cbModelParam._m0[32u].z, fma(_1083, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1079));
        float _1491 = _1079 + _788;
        float _1492 = _1083 + _789;
        float _1493 = _1087 + _790;
        float _1503 = fma(_1493, cbModelParam._m0[30u].z, fma(_1492, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1491)) - _1460;
        float _1504 = fma(_1493, cbModelParam._m0[31u].z, fma(_1492, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1491)) - _1464;
        float _1505 = fma(_1493, cbModelParam._m0[32u].z, fma(_1492, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1491)) - _1468;
        float _1509 = inversesqrt(dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505)));
        float _1522 = ((_1509 * _1503) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1460 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1523 = ((_1509 * _1504) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1464 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1524 = ((_1509 * _1505) / cbModelParam._m0[35u].z) + ((((((_1468 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1526 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        vec4 _1533 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        vec4 _1547 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        float _1559 = exp2((_1526.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1526.x + (-0.5));
        float _1561 = _1559 * (_1526.y + (-0.5));
        float _1562 = _1559 * (_1526.z + (-0.5));
        float _1569 = exp2((_1533.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1533.x + (-0.5));
        float _1571 = _1569 * (_1533.y + (-0.5));
        float _1572 = _1569 * (_1533.z + (-0.5));
        float _1579 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1540.x + (-0.5));
        float _1581 = _1579 * (_1540.y + (-0.5));
        float _1582 = _1579 * (_1540.z + (-0.5));
        float _1589 = exp2((_1547.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1547.x + (-0.5));
        float _1591 = _1589 * (_1547.y + (-0.5));
        float _1592 = _1589 * (_1547.z + (-0.5));
        float _1593 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1594 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1595 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1596 = _1560 * 0.5;
        float _1597 = _1570 * 0.5;
        float _1598 = _1580 * 0.5;
        float _1599 = dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598));
        float _1604 = (_1599 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1599);
        float _1612 = (dot(vec3(_788, _789, _790), vec3(_1604 * _1596, _1604 * _1597, _1604 * _1598)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1621 = sqrt(((_1597 * _1597) + (_1596 * _1596)) + (_1598 * _1598)) / (_1593 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1623 = _1622 * 2.0;
        float _1627 = (1.0 - _1622) / (_1622 + 1.0);
        float _4170 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1637 = ((((1.0 - _1628) * (_1623 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1623 + 1.0))) + _1628) * _1593;
        float _1638 = _1561 * 0.5;
        float _1639 = _1571 * 0.5;
        float _1640 = _1581 * 0.5;
        float _1641 = dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640));
        float _1646 = (_1641 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1641);
        float _1654 = (dot(vec3(_788, _789, _790), vec3(_1646 * _1638, _1646 * _1639, _1646 * _1640)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1663 = sqrt(((_1639 * _1639) + (_1638 * _1638)) + (_1640 * _1640)) / (_1594 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1665 = _1664 * 2.0;
        float _1669 = (1.0 - _1664) / (_1664 + 1.0);
        float _4203 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1679 = ((((1.0 - _1670) * (_1665 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1665 + 1.0))) + _1670) * _1594;
        float _1680 = _1562 * 0.5;
        float _1681 = _1572 * 0.5;
        float _1682 = _1582 * 0.5;
        float _1683 = dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682));
        float _1688 = (_1683 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1683);
        float _1696 = (dot(vec3(_788, _789, _790), vec3(_1688 * _1680, _1688 * _1681, _1688 * _1682)) + 1.0) * 0.5;
        float _4214 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1705 = sqrt(((_1681 * _1681) + (_1680 * _1680)) + (_1682 * _1682)) / (_1595 + 9.9999997473787516355514526367188e-06);
        float _4225 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1707 = _1706 * 2.0;
        float _1711 = (1.0 - _1706) / (_1706 + 1.0);
        float _4236 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1721 = ((((1.0 - _1712) * (_1707 + 2.0)) * exp2(log2(isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_1707 + 1.0))) + _1712) * _1595;
        _1729 = _1562;
        _1730 = _1561;
        _1731 = _1560;
        _1732 = _1572;
        _1733 = _1571;
        _1734 = _1570;
        _1735 = _1582;
        _1736 = _1581;
        _1737 = _1580;
        _1738 = _1595;
        _1739 = _1594;
        _1740 = _1593;
        _1741 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)));
        _1742 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)));
        _1743 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)));
    }
    else
    {
        _1729 = _1417;
        _1730 = _1417;
        _1731 = _1417;
        _1732 = _1417;
        _1733 = _1417;
        _1734 = _1417;
        _1735 = _1417;
        _1736 = _1417;
        _1737 = _1417;
        _1738 = _1417;
        _1739 = _1417;
        _1740 = _1417;
        _1741 = 0.0;
        _1742 = 0.0;
        _1743 = 0.0;
    }
    float _1753 = (cbModelParam._m0[1u].x * (_1741 - _1429)) + _1429;
    float _1754 = (cbModelParam._m0[1u].x * (_1742 - _1430)) + _1430;
    float _1755 = (cbModelParam._m0[1u].x * (_1743 - _1431)) + _1431;
    float _1776 = fma(_1755, cbSceneParam._m0[89u].z, fma(_1754, cbSceneParam._m0[89u].y, _1753 * cbSceneParam._m0[89u].x));
    float _1779 = fma(_1755, cbSceneParam._m0[90u].z, fma(_1754, cbSceneParam._m0[90u].y, _1753 * cbSceneParam._m0[90u].x));
    float _1782 = fma(_1755, cbSceneParam._m0[91u].z, fma(_1754, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1753));
    float _1797 = _1023 * 0.5;
    float _1798 = _1024 * 0.5;
    float _1799 = _1025 * 0.5;
    float _1800 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1731, _1734, _1737, _1740));
    float _1803 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1730, _1733, _1736, _1739));
    float _1806 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1729, _1732, _1735, _1738));
    float _1840;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1813 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1416, _1420, _1423, _1426));
        float _1817 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1418, _1421, _1424, _1427));
        float _1821 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1419, _1422, _1425, _1428));
        float _1828 = dot(vec4(cbModelParam._m0[39u]), vec4(_1797, _1798, _1799, 1.0));
        _1840 = dot(vec3(isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)), isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0)), isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1828) ? 0.0 : (isnan(0.0) ? _1828 : max(0.0, _1828))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1840 = 1.0;
    }
    float _1851;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1842 = dot(vec4(cbModelParam._m0[40u]), vec4(_1797, _1798, _1799, 1.0));
        _1851 = dot(vec3(isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0)), isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1842) ? 0.0 : (isnan(0.0) ? _1842 : max(0.0, _1842))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1851 = 1.0;
    }
    float _1855 = (_1851 * cbModelParam._m0[1u].x) + (_1840 * (1.0 - cbModelParam._m0[1u].x));
    float _1865 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _930);
    float _1866 = isnan(_1865) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1865 : min(cbModelParam._m0[25u].z, _1865));
    float _1946;
    float _1948;
    float _1950;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1913 = fma(_1087, cbModelParam._m0[13u].z, fma(_1083, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1079)) + cbModelParam._m0[13u].w;
        float _1917 = fma(_1087, cbModelParam._m0[14u].z, fma(_1083, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1079)) + cbModelParam._m0[14u].w;
        float _1921 = fma(_1087, cbModelParam._m0[15u].z, fma(_1083, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1079)) + cbModelParam._m0[15u].w;
        float _1924 = fma(_1025, cbModelParam._m0[13u].z, fma(_1024, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1023));
        float _1927 = fma(_1025, cbModelParam._m0[14u].z, fma(_1024, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1023));
        float _1930 = fma(_1025, cbModelParam._m0[15u].z, fma(_1024, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1023));
        float _1958;
        if (_1924 > 0.0)
        {
            _1958 = abs((1.0 - _1913) / _1924);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1913 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1958 = frontier_phi_19_17_ladder;
        }
        float _2160;
        if (_1927 > 0.0)
        {
            _2160 = abs((1.0 - _1917) / _1927);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1917 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2160 = frontier_phi_28_24_ladder;
        }
        float _2414;
        if (_1930 > 0.0)
        {
            _2414 = abs((1.0 - _1921) / _1930);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1921 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2414 = frontier_phi_40_35_ladder;
        }
        float _2416 = isnan(_2160) ? _1958 : (isnan(_1958) ? _2160 : min(_1958, _2160));
        float _2417 = isnan(_2414) ? _2416 : (isnan(_2416) ? _2414 : min(_2416, _2414));
        float _2421 = (_2417 * _1924) + _1913;
        float _2422 = (_2417 * _1927) + _1917;
        float _2423 = (_2417 * _1930) + _1921;
        float _2424 = _2417 * 9.9999997473787516355514526367188e-05;
        float _2426 = (-1.0) - _2424;
        float _2428 = _2424 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2423 > _2428) || ((_2423 < _2426) || ((_2422 > _2428) || ((_2422 < _2426) || ((_2421 < _2426) || (_2421 > _2428))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2551 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2423, cbModelParam._m0[9u].z, fma(_2422, cbModelParam._m0[9u].y, _2421 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2423, cbModelParam._m0[10u].z, fma(_2422, cbModelParam._m0[10u].y, _2421 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2423, cbModelParam._m0[11u].z, fma(_2422, cbModelParam._m0[11u].y, _2421 * cbModelParam._m0[11u].x))), _1866);
            frontier_phi_18_40_ladder = _2551.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2551.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2551.x * cbModelParam._m0[1u].y;
        }
        _1946 = frontier_phi_18_40_ladder_2;
        _1948 = frontier_phi_18_40_ladder_1;
        _1950 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1934 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1023, _1024, _1025), _1866);
        _1946 = _1934.x * cbModelParam._m0[1u].y;
        _1948 = _1934.y * cbModelParam._m0[1u].y;
        _1950 = _1934.z * cbModelParam._m0[1u].y;
    }
    float _1954 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _930);
    float _1955 = isnan(_1954) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1954 : min(cbModelParam._m0[25u].w, _1954));
    float _2044;
    float _2046;
    float _2048;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2008 = fma(_1087, cbModelParam._m0[21u].z, fma(_1083, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1079)) + cbModelParam._m0[21u].w;
        float _2012 = fma(_1087, cbModelParam._m0[22u].z, fma(_1083, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1079)) + cbModelParam._m0[22u].w;
        float _2016 = fma(_1087, cbModelParam._m0[23u].z, fma(_1083, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1079)) + cbModelParam._m0[23u].w;
        float _2019 = fma(_1025, cbModelParam._m0[21u].z, fma(_1024, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1023));
        float _2022 = fma(_1025, cbModelParam._m0[22u].z, fma(_1024, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1023));
        float _2025 = fma(_1025, cbModelParam._m0[23u].z, fma(_1024, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1023));
        float _2165;
        if (_2019 > 0.0)
        {
            _2165 = abs((1.0 - _2008) / _2019);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2008 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2165 = frontier_phi_30_26_ladder;
        }
        float _2441;
        if (_2022 > 0.0)
        {
            _2441 = abs((1.0 - _2012) / _2022);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2022 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2012 + 1.0) / _2022);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2441 = frontier_phi_42_37_ladder;
        }
        float _2654;
        if (_2025 > 0.0)
        {
            _2654 = abs((1.0 - _2016) / _2025);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2016 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2654 = frontier_phi_51_48_ladder;
        }
        float _2656 = isnan(_2441) ? _2165 : (isnan(_2165) ? _2441 : min(_2165, _2441));
        float _2657 = isnan(_2654) ? _2656 : (isnan(_2656) ? _2654 : min(_2656, _2654));
        float _2661 = (_2657 * _2019) + _2008;
        float _2662 = (_2657 * _2022) + _2012;
        float _2663 = (_2657 * _2025) + _2016;
        float _2664 = _2657 * 9.9999997473787516355514526367188e-05;
        float _2665 = (-1.0) - _2664;
        float _2667 = _2664 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2663 > _2667) || ((_2663 < _2665) || ((_2662 > _2667) || ((_2662 < _2665) || ((_2661 < _2665) || (_2661 > _2667))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2896 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2663, cbModelParam._m0[17u].z, fma(_2662, cbModelParam._m0[17u].y, _2661 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2663, cbModelParam._m0[18u].z, fma(_2662, cbModelParam._m0[18u].y, _2661 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2663, cbModelParam._m0[19u].z, fma(_2662, cbModelParam._m0[19u].y, _2661 * cbModelParam._m0[19u].x))), _1955);
            frontier_phi_27_51_ladder = _2896.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2896.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2896.x * cbModelParam._m0[1u].z;
        }
        _2044 = frontier_phi_27_51_ladder_2;
        _2046 = frontier_phi_27_51_ladder_1;
        _2048 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2028 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1023, _1024, _1025), _1955);
        _2044 = _2028.x * cbModelParam._m0[1u].z;
        _2046 = _2028.y * cbModelParam._m0[1u].z;
        _2048 = _2028.z * cbModelParam._m0[1u].z;
    }
    float _2061 = (((_1050 * _1000) + _1051) * _1015) * ((cbModelParam._m0[1u].w * (_2044 - _1946)) + _1946);
    float _2063 = (((_1050 * _1002) + _1051) * _1015) * ((cbModelParam._m0[1u].w * (_2046 - _1948)) + _1948);
    float _2065 = (((_1050 * _1003) + _1051) * _1015) * ((cbModelParam._m0[1u].w * (_2048 - _1950)) + _1950);
    float _2068 = fma(_2065, cbSceneParam._m0[89u].z, fma(_2063, cbSceneParam._m0[89u].y, _2061 * cbSceneParam._m0[89u].x));
    float _2071 = fma(_2065, cbSceneParam._m0[90u].z, fma(_2063, cbSceneParam._m0[90u].y, _2061 * cbSceneParam._m0[90u].x));
    float _2074 = fma(_2065, cbSceneParam._m0[91u].z, fma(_2063, cbSceneParam._m0[91u].y, _2061 * cbSceneParam._m0[91u].x));
    uvec4 _2084 = floatBitsToUint(cbInstanceData._m0[_943 + 5u]);
    uint _2086 = _2084.x * 14u;
    uint _2087 = _2086 + 13u;
    float _2094 = _1015 + (-1.0);
    float _2099 = (cbLight._m0[_2087].x * _2094) + 1.0;
    float _2100 = (cbLight._m0[_2087].y * _2094) + 1.0;
    float _2101 = (cbLight._m0[_2087].z * _2094) + 1.0;
    float _2102 = (cbLight._m0[_2087].w * _2094) + 1.0;
    uint _2103 = _2086 + 5u;
    float _2109 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
    uint _2113 = _2086 + 4u;
    float _2119 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
    uint _2123 = _2086 | 1u;
    float _2134 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_788, _789, _790));
    float _2137 = dot(vec3(cbLight._m0[_2123].xyz), vec3(_788, _789, _790));
    float _4372 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _4383 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2142 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * 0.3183098733425140380859375;
    float _2144 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * 0.3183098733425140380859375;
    float _2151 = ((cbLight._m0[_2103].x * _2109) * _2144) + ((cbLight._m0[_2113].x * _2119) * _2142);
    float _2152 = ((_2109 * cbLight._m0[_2103].y) * _2144) + ((_2119 * cbLight._m0[_2113].y) * _2142);
    float _2153 = ((_2109 * cbLight._m0[_2103].z) * _2144) + ((_2119 * cbLight._m0[_2113].z) * _2142);
    uvec4 _2157 = floatBitsToUint(cbLight._m0[_2086 + 12u]);
    bool _2159 = _2157.x == 0u;
    float _2170;
    float _2172;
    float _2174;
    if (_2159)
    {
        _2170 = _2151;
        _2172 = _2152;
        _2174 = _2153;
    }
    else
    {
        uint _2178 = _2086 + 6u;
        float _2194 = (dot(vec3(cbLight._m0[_2086 + 2u].xyz), vec3(_788, _789, _790)) * 0.5) + 0.5;
        float _2195 = _2194 * _2194;
        float _4394 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2196 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2197 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2170 = (((cbLight._m0[_2178].x * 0.3183098733425140380859375) * _2196) * _2197) + _2151;
        _2172 = (((cbLight._m0[_2178].y * 0.3183098733425140380859375) * _2196) * _2197) + _2152;
        _2174 = (((cbLight._m0[_2178].z * 0.3183098733425140380859375) * _2196) * _2197) + _2153;
    }
    bool _2177 = _2157.y == 0u;
    float _2215;
    float _2217;
    float _2219;
    if (_2177)
    {
        _2215 = _2170;
        _2217 = _2172;
        _2219 = _2174;
    }
    else
    {
        uint _2385 = _2086 + 7u;
        float _2401 = (dot(vec3(cbLight._m0[_2086 + 3u].xyz), vec3(_788, _789, _790)) * 0.5) + 0.5;
        float _2402 = _2401 * _2401;
        float _4410 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2403 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2404 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2215 = (((cbLight._m0[_2385].x * 0.3183098733425140380859375) * _2403) * _2404) + _2170;
        _2217 = (((cbLight._m0[_2385].y * 0.3183098733425140380859375) * _2403) * _2404) + _2172;
        _2219 = (((cbLight._m0[_2385].z * 0.3183098733425140380859375) * _2403) * _2404) + _2174;
    }
    uint _2222 = _2086 + 8u;
    float _2235 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2086].w)) * _930) * 0.949999988079071044921875);
    float _2236 = _2235 * _2235;
    float _2237 = cbLight._m0[_2086].x + _868;
    float _2238 = cbLight._m0[_2086].y + _869;
    float _2239 = cbLight._m0[_2086].z + _870;
    float _2243 = inversesqrt(dot(vec3(_2237, _2238, _2239), vec3(_2237, _2238, _2239)));
    float _2244 = _2243 * _2237;
    float _2245 = _2243 * _2238;
    float _2246 = _2243 * _2239;
    float _2247 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2086].xyz));
    float _4426 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2250 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _4437 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _2251 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _2252 = dot(vec3(_788, _789, _790), vec3(_2244, _2245, _2246));
    float _4448 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2255 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _2256 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_2244, _2245, _2246));
    float _4459 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2260 = _2236 * _2236;
    float _2264 = ((_2255 * _2255) * (_2260 + (-1.0))) + 1.0;
    float _2272 = exp2(log2(1.0 - (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0)))) * 5.0);
    float _2273 = 0.959999978542327880859375 - _997;
    float _2275 = 0.959999978542327880859375 - _998;
    float _2276 = 0.959999978542327880859375 - _999;
    float _2283 = 1.0 - _2236;
    float _2294 = (0.5 / (((_2251 * ((_2250 * _2283) + _2236)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2283) + _2236) * _2250))) * _2250;
    float _4470 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2296 = (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2260 / ((_2264 * _2264) * 3.141590118408203125));
    uint _2307 = _2086 + 9u;
    float _2318 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2123].w)) * _930) * 0.949999988079071044921875);
    float _2319 = _2318 * _2318;
    float _2320 = cbLight._m0[_2123].x + _868;
    float _2321 = cbLight._m0[_2123].y + _869;
    float _2322 = cbLight._m0[_2123].z + _870;
    float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
    float _2327 = _2326 * _2320;
    float _2328 = _2326 * _2321;
    float _2329 = _2326 * _2322;
    float _2330 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2123].xyz));
    float _4481 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
    float _2334 = dot(vec3(_788, _789, _790), vec3(_2327, _2328, _2329));
    float _4492 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2337 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
    float _2338 = dot(vec3(cbLight._m0[_2123].xyz), vec3(_2327, _2328, _2329));
    float _4503 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2342 = _2319 * _2319;
    float _2346 = ((_2337 * _2337) * (_2342 + (-1.0))) + 1.0;
    float _2353 = exp2(log2(1.0 - (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0)))) * 5.0);
    float _2360 = 1.0 - _2319;
    float _2370 = (0.5 / (((_2251 * ((_2333 * _2360) + _2319)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2360) + _2319) * _2333))) * _2333;
    float _4514 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2372 = (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_2342 / ((_2346 * _2346) * 3.141590118408203125));
    float _2382 = (((((_2353 * _2273) + _1000) * cbLight._m0[_2307].x) * _2372) * _2109) + (((((_2272 * _2273) + _1000) * cbLight._m0[_2222].x) * _2296) * _2119);
    float _2383 = (((((_2353 * _2275) + _1002) * cbLight._m0[_2307].y) * _2372) * _2109) + (((((_2272 * _2275) + _1002) * cbLight._m0[_2222].y) * _2296) * _2119);
    float _2384 = (((((_2353 * _2276) + _1003) * cbLight._m0[_2307].z) * _2372) * _2109) + (((((_2272 * _2276) + _1003) * cbLight._m0[_2222].z) * _2296) * _2119);
    float _2446;
    float _2448;
    float _2450;
    if (_2159)
    {
        _2446 = _2382;
        _2448 = _2383;
        _2450 = _2384;
    }
    else
    {
        uint _2452 = _2086 + 2u;
        uint _2456 = _2086 + 10u;
        float _2470 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2452].w)) * _930) * 0.949999988079071044921875);
        float _2471 = _2470 * _2470;
        float _2472 = cbLight._m0[_2452].x + _868;
        float _2473 = cbLight._m0[_2452].y + _869;
        float _2474 = cbLight._m0[_2452].z + _870;
        float _2478 = inversesqrt(dot(vec3(_2472, _2473, _2474), vec3(_2472, _2473, _2474)));
        float _2479 = _2478 * _2472;
        float _2480 = _2478 * _2473;
        float _2481 = _2478 * _2474;
        float _2482 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2452].xyz));
        float _4525 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2485 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _2486 = dot(vec3(_788, _789, _790), vec3(_2479, _2480, _2481));
        float _4536 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2489 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2490 = dot(vec3(cbLight._m0[_2452].xyz), vec3(_2479, _2480, _2481));
        float _4547 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2494 = _2471 * _2471;
        float _2498 = ((_2489 * _2489) * (_2494 + (-1.0))) + 1.0;
        float _2505 = exp2(log2(1.0 - (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) * 5.0);
        float _2512 = 1.0 - _2471;
        float _2522 = (0.5 / (((_2251 * ((_2485 * _2512) + _2471)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2512) + _2471) * _2485))) * _2485;
        float _4558 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2524 = (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2494 / ((_2498 * _2498) * 3.141590118408203125));
        float _2525 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2446 = (((((_2505 * _2273) + _1000) * cbLight._m0[_2456].x) * _2524) * _2525) + _2382;
        _2448 = (((((_2505 * _2275) + _1002) * cbLight._m0[_2456].y) * _2524) * _2525) + _2383;
        _2450 = (((((_2505 * _2276) + _1003) * cbLight._m0[_2456].z) * _2524) * _2525) + _2384;
    }
    float _2560;
    float _2562;
    float _2564;
    if (_2177)
    {
        _2560 = _2446;
        _2562 = _2448;
        _2564 = _2450;
    }
    else
    {
        uint _2571 = _2086 + 3u;
        uint _2575 = _2086 + 11u;
        float _2589 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2571].w)) * _930) * 0.949999988079071044921875);
        float _2590 = _2589 * _2589;
        float _2591 = cbLight._m0[_2571].x + _868;
        float _2592 = cbLight._m0[_2571].y + _869;
        float _2593 = cbLight._m0[_2571].z + _870;
        float _2597 = inversesqrt(dot(vec3(_2591, _2592, _2593), vec3(_2591, _2592, _2593)));
        float _2598 = _2597 * _2591;
        float _2599 = _2597 * _2592;
        float _2600 = _2597 * _2593;
        float _2601 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2571].xyz));
        float _4574 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2604 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _2605 = dot(vec3(_788, _789, _790), vec3(_2598, _2599, _2600));
        float _4585 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2608 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _2609 = dot(vec3(cbLight._m0[_2571].xyz), vec3(_2598, _2599, _2600));
        float _4596 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2613 = _2590 * _2590;
        float _2617 = ((_2608 * _2608) * (_2613 + (-1.0))) + 1.0;
        float _2624 = exp2(log2(1.0 - (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0)))) * 5.0);
        float _2631 = 1.0 - _2590;
        float _2641 = (0.5 / (((_2251 * ((_2604 * _2631) + _2590)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2631) + _2590) * _2604))) * _2604;
        float _4607 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2643 = (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2613 / ((_2617 * _2617) * 3.141590118408203125));
        float _2644 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2560 = (((((_2624 * _2273) + _1000) * cbLight._m0[_2575].x) * _2643) * _2644) + _2446;
        _2562 = (((((_2624 * _2275) + _1002) * cbLight._m0[_2575].y) * _2643) * _2644) + _2448;
        _2564 = (((((_2624 * _2276) + _1003) * cbLight._m0[_2575].z) * _2643) * _2644) + _2450;
    }
    float _2778;
    float _2780;
    float _2782;
    float _2784;
    float _2786;
    float _2788;
    if (_2084.y == 0u)
    {
        float _2719 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2720 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2719;
        float _2721 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2719;
        float _2722 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2719;
        uvec4 _2734 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2735 = _2734.x;
        uint _2746 = uint((float(_2734.y) * floor(float(uint(cbSceneParam._m0[85u].y * _889) / _2735))) + floor(float(uint(cbSceneParam._m0[85u].x * _888) / _2735)));
        float _2756 = (log2(_2722 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2757 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        uint _2760 = uint(isnan(14.0) ? _2757 : (isnan(_2757) ? 14.0 : min(_2757, 14.0)));
        uvec4 _2765 = texelFetch(g_lightClusterGridBuffer, int(((_2760 << 2u) + (_2746 << 6u)) >> 2u));
        uint _2766 = _2765.x;
        uint _2767 = _2734.z;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        if (((((1u << ((_2767 >> 4u) & 15u)) + 4294967295u) & _2766) == 0u) || ((_2767 & 240u) == 0u))
        {
            _2901 = 0.0;
            _2903 = 0.0;
            _2905 = 0.0;
            _2907 = 0.0;
            _2909 = 0.0;
            _2911 = 0.0;
        }
        else
        {
            float _2902;
            float _2904;
            float _2906;
            float _2908;
            float _2910;
            float _2912;
            float _3062 = 0.0;
            float _3063 = 0.0;
            float _3064 = 0.0;
            float _3065 = 0.0;
            float _3066 = 0.0;
            float _3067 = 0.0;
            uint _3068 = 0u;
            uint _3077;
            bool _3078;
            for (;;)
            {
                _3077 = texelFetch(g_lightClassification, int((((_2760 << 5u) + (_2746 << 9u)) + (_3068 << 2u)) >> 2u)).x;
                _3078 = _3077 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3078)
                {
                    frontier_phi_68_pred = _3064;
                    frontier_phi_68_pred_1 = _3067;
                    frontier_phi_68_pred_2 = _3066;
                    frontier_phi_68_pred_3 = _3065;
                    frontier_phi_68_pred_4 = _3063;
                    frontier_phi_68_pred_5 = _3062;
                }
                else
                {
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    uint _3213;
                    _3207 = _3062;
                    _3208 = _3063;
                    _3209 = _3064;
                    _3210 = _3065;
                    _3211 = _3066;
                    _3212 = _3067;
                    _3213 = _3077;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    for (;;)
                    {
                        uint _3217 = uint(findLSB(_3213)) + (_3068 << 5u);
                        uint _3214 = (_3213 + 4294967295u) & _3213;
                        uint _3219 = _3217 * 48u;
                        vec4 _3233 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3219)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 3u)).x));
                        uint _3239 = (_3217 * 48u) + 4u;
                        vec4 _3252 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3239)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 3u)).x));
                        uint _3258 = (_3217 * 48u) + 8u;
                        vec3 _3269 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3258)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 2u)).x));
                        float _3273 = _3233.x - _2720;
                        float _3274 = _3233.y - _2721;
                        float _3275 = _3233.z - _2722;
                        float _3276 = dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275));
                        float _3279 = inversesqrt(_3276);
                        float _3280 = _3279 * _3273;
                        float _3281 = _3279 * _3274;
                        float _3282 = _3279 * _3275;
                        float _3283 = dot(vec3(_911, _914, _917), vec3(_3280, _3281, _3282));
                        float _3288 = 1.0 - (_3276 * _3233.w);
                        float _4633 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3289 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3290 = sqrt(_3276) * _3252.w;
                        float _3293 = 1.39999997615814208984375 / (_3290 + 1.39999997615814208984375);
                        float _3294 = _3293 * _3293;
                        float _3297 = ((1.0 - _3294) * _3283) + _3294;
                        float _3300 = _3290 * _3290;
                        float _3304 = ((isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0))) * _3289) / ((_3300 * 0.699999988079071044921875) + 1.0);
                        float _3308 = (-0.0) - _2720;
                        float _3309 = (-0.0) - _2721;
                        float _3310 = (-0.0) - _2722;
                        float _3314 = inversesqrt(dot(vec3(_3308, _3309, _3310), vec3(_3308, _3309, _3310)));
                        float _3315 = _3314 * _3308;
                        float _3316 = _3314 * _3309;
                        float _3317 = _3314 * _3310;
                        float _3324 = exp2(log2(1.0 / ((_3300 * 3.5) + 5.0)) * 0.25);
                        float _3325 = 1.0 - _1031;
                        float _3332 = sqrt(1.0 - ((1.0 - (_3325 * _3325)) * (1.0 - (_3324 * _3324))));
                        float _3333 = _3332 * _3332;
                        float _3334 = _3333 * _3333;
                        float _3335 = _3315 + _3280;
                        float _3336 = _3316 + _3281;
                        float _3337 = _3317 + _3282;
                        float _3341 = inversesqrt(dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337)));
                        float _3345 = dot(vec3(_911, _914, _917), vec3(_3315, _3316, _3317));
                        float _4649 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                        float _3348 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                        float _3349 = dot(vec3(_911, _914, _917), vec3(_3341 * _3335, _3341 * _3336, _3341 * _3337));
                        float _4660 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                        float _3352 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                        float _3356 = ((_3352 * _3352) * (_3334 + (-1.0))) + 1.0;
                        float _3357 = _3293 * _3333;
                        float _3358 = _3357 * _3357;
                        float _3361 = ((1.0 - _3358) * _3283) + _3358;
                        float _4671 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3362 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                        float _3363 = 1.0 - _3333;
                        float _3373 = (0.5 / (((_3362 * ((_3348 * _3363) + _3333)) + 9.9999999392252902907785028219223e-09) + (((_3362 * _3363) + _3333) * _3348))) * _3362;
                        float _4682 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                        float _3384 = (((_3334 * 3.1415927410125732421875) * (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0)))) / ((_3356 * _3356) * ((_3300 * 2.1991131305694580078125) + 3.141590118408203125))) * _3289;
                        _3137 = (_3304 * _3252.x) + _3210;
                        _3138 = (_3304 * _3252.y) + _3211;
                        _3139 = (_3304 * _3252.z) + _3212;
                        _3134 = (_3384 * _3269.x) + _3207;
                        _3135 = (_3384 * _3269.y) + _3208;
                        _3136 = (_3384 * _3269.z) + _3209;
                        if (_3214 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3207 = _3134;
                            _3208 = _3135;
                            _3209 = _3136;
                            _3210 = _3137;
                            _3211 = _3138;
                            _3212 = _3139;
                            _3213 = _3214;
                        }
                    }
                    frontier_phi_68_pred = _3136;
                    frontier_phi_68_pred_1 = _3139;
                    frontier_phi_68_pred_2 = _3138;
                    frontier_phi_68_pred_3 = _3137;
                    frontier_phi_68_pred_4 = _3135;
                    frontier_phi_68_pred_5 = _3134;
                }
                _2906 = frontier_phi_68_pred;
                _2912 = frontier_phi_68_pred_1;
                _2910 = frontier_phi_68_pred_2;
                _2908 = frontier_phi_68_pred_3;
                _2904 = frontier_phi_68_pred_4;
                _2902 = frontier_phi_68_pred_5;
                uint _3069 = _3068 + 1u;
                if (_3069 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3062 = _2902;
                    _3063 = _2904;
                    _3064 = _2906;
                    _3065 = _2908;
                    _3066 = _2910;
                    _3067 = _2912;
                    _3068 = _3069;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2901 = _2902;
            _2903 = _2904;
            _2905 = _2906;
            _2907 = _2908;
            _2909 = _2910;
            _2911 = _2912;
        }
        uvec4 _2915 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2916 = _2915.z;
        uint _2918 = (_2916 >> 8u) & 15u;
        float _3030;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        if (((4294967295u << _2918) & _2766) == 0u)
        {
            _3030 = _2901;
            _3032 = _2903;
            _3034 = _2905;
            _3036 = _2907;
            _3038 = _2909;
            _3040 = _2911;
        }
        else
        {
            float _3055 = inversesqrt(dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722)));
            float _3056 = _3055 * _2720;
            float _3057 = _3055 * _2721;
            float _3058 = _3055 * _2722;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2918 < ((_2916 >> 12u) & 15u))
            {
                float _3031;
                float _3033;
                float _3035;
                float _3037;
                float _3039;
                float _3041;
                float _3190 = _2901;
                float _3191 = _2903;
                float _3192 = _2905;
                float _3193 = _2907;
                float _3194 = _2909;
                float _3195 = _2911;
                uint _3196 = _2918;
                uint _3205;
                bool _3206;
                for (;;)
                {
                    _3205 = texelFetch(g_lightClassification, int((((_2760 << 5u) + (_2746 << 9u)) + (_3196 << 2u)) >> 2u)).x;
                    _3206 = _3205 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3206)
                    {
                        frontier_phi_79_pred = _3195;
                        frontier_phi_79_pred_1 = _3194;
                        frontier_phi_79_pred_2 = _3193;
                        frontier_phi_79_pred_3 = _3192;
                        frontier_phi_79_pred_4 = _3191;
                        frontier_phi_79_pred_5 = _3190;
                    }
                    else
                    {
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3691;
                        float _3692;
                        float _3693;
                        float _3694;
                        float _3695;
                        float _3696;
                        float _3411 = _3190;
                        float _3412 = _3191;
                        float _3413 = _3192;
                        float _3414 = _3193;
                        float _3415 = _3194;
                        float _3416 = _3195;
                        uint _3417 = _3205;
                        uint _3418;
                        vec4 _3443;
                        float _3444;
                        vec4 _3459;
                        vec3 _3471;
                        vec4 _3486;
                        vec4 _3501;
                        float _3547;
                        bool _3548;
                        for (;;)
                        {
                            uint _3428 = ((_3196 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3417));
                            _3418 = (_3417 + 4294967295u) & _3417;
                            uint _3430 = _3428 * 40u;
                            _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            _3444 = _3443.w;
                            uint _3446 = (_3428 * 40u) + 4u;
                            _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            uint _3461 = (_3428 * 40u) + 8u;
                            _3471 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x));
                            uint _3473 = (_3428 * 40u) + 16u;
                            _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            uint _3488 = (_3428 * 40u) + 20u;
                            _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            uint _3503 = (_3428 * 40u) + 24u;
                            vec4 _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            uint _3522 = (_3428 * 40u) + 28u;
                            vec4 _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            _3547 = fma(_2722, _3535.z, fma(_2721, _3535.y, _3535.x * _2720)) + _3535.w;
                            _3548 = !((fma(_2722, _3516.z, fma(_2721, _3516.y, _3516.x * _2720)) + _3516.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3548)
                            {
                                float _3575 = _3443.x - _2720;
                                float _3576 = _3443.y - _2721;
                                float _3577 = _3443.z - _2722;
                                float _3578 = dot(vec3(_3575, _3576, _3577), vec3(_3575, _3576, _3577));
                                float _3581 = inversesqrt(_3578);
                                float _3582 = _3581 * _3575;
                                float _3583 = _3581 * _3576;
                                float _3584 = _3581 * _3577;
                                float _3588 = 1.0 - (_3578 / (_3444 * _3444));
                                float _4693 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3589 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3593 = sqrt(_3578) * _3459.w;
                                float _3595 = 1.39999997615814208984375 / (_3593 + 1.39999997615814208984375);
                                float _3596 = _3595 * _3595;
                                float _3599 = ((1.0 - _3596) * dot(vec3(_3582, _3583, _3584), vec3(_911, _914, _917))) + _3596;
                                float _3602 = _3593 * _3593;
                                float _3606 = (fma(_2722, _3486.z, fma(_2721, _3486.y, _3486.x * _2720)) + _3486.w) / _3547;
                                float _3607 = (fma(_2722, _3501.z, fma(_2721, _3501.y, _3501.x * _2720)) + _3501.w) / _3547;
                                float _3611 = 1.0 - dot(vec2(_3606, _3607), vec2(_3606, _3607));
                                float _4709 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3612 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3613 = _3612 * (((isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0))) * _3589) / ((_3602 * 0.699999988079071044921875) + 1.0));
                                float _3625 = exp2(log2(1.0 / ((_3602 * 3.5) + 5.0)) * 0.25);
                                float _3626 = 1.0 - _1031;
                                float _3633 = sqrt(1.0 - ((1.0 - (_3626 * _3626)) * (1.0 - (_3625 * _3625))));
                                float _3634 = _3633 * _3633;
                                float _3635 = _3634 * _3634;
                                float _3636 = _3582 - _3056;
                                float _3637 = _3583 - _3057;
                                float _3638 = _3584 - _3058;
                                float _3642 = inversesqrt(dot(vec3(_3636, _3637, _3638), vec3(_3636, _3637, _3638)));
                                float _3646 = dot(vec3(_911, _914, _917), vec3((-0.0) - _3056, (-0.0) - _3057, (-0.0) - _3058));
                                float _4720 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3649 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3650 = dot(vec3(_911, _914, _917), vec3(_3642 * _3636, _3642 * _3637, _3642 * _3638));
                                float _4731 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                                float _3653 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3657 = ((_3653 * _3653) * (_3635 + (-1.0))) + 1.0;
                                float _3658 = _3595 * _3634;
                                float _3659 = _3658 * _3658;
                                float _3665 = ((1.0 - _3659) * dot(vec3(_911, _914, _917), vec3(_3582, _3583, _3584))) + _3659;
                                float _4742 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3666 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                                float _3667 = 1.0 - _3634;
                                float _3677 = (0.5 / (((_3666 * ((_3649 * _3667) + _3634)) + 9.9999999392252902907785028219223e-09) + (((_3666 * _3667) + _3634) * _3649))) * _3666;
                                float _4753 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3687 = (_3612 * _3589) * (((_3635 * 3.1415927410125732421875) * (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0)))) / ((_3657 * _3657) * ((_3602 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3613 * _3459.z;
                                frontier_phi_85_pred_1 = _3613 * _3459.y;
                                frontier_phi_85_pred_2 = _3613 * _3459.x;
                                frontier_phi_85_pred_3 = _3687 * _3471.z;
                                frontier_phi_85_pred_4 = _3687 * _3471.y;
                                frontier_phi_85_pred_5 = _3687 * _3471.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3696 = frontier_phi_85_pred;
                            _3695 = frontier_phi_85_pred_1;
                            _3694 = frontier_phi_85_pred_2;
                            _3693 = frontier_phi_85_pred_3;
                            _3692 = frontier_phi_85_pred_4;
                            _3691 = frontier_phi_85_pred_5;
                            _3401 = _3694 + _3414;
                            _3402 = _3695 + _3415;
                            _3403 = _3696 + _3416;
                            _3398 = _3691 + _3411;
                            _3399 = _3692 + _3412;
                            _3400 = _3693 + _3413;
                            if (_3418 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3411 = _3398;
                                _3412 = _3399;
                                _3413 = _3400;
                                _3414 = _3401;
                                _3415 = _3402;
                                _3416 = _3403;
                                _3417 = _3418;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3403;
                        frontier_phi_79_pred_1 = _3402;
                        frontier_phi_79_pred_2 = _3401;
                        frontier_phi_79_pred_3 = _3400;
                        frontier_phi_79_pred_4 = _3399;
                        frontier_phi_79_pred_5 = _3398;
                    }
                    _3041 = frontier_phi_79_pred;
                    _3039 = frontier_phi_79_pred_1;
                    _3037 = frontier_phi_79_pred_2;
                    _3035 = frontier_phi_79_pred_3;
                    _3033 = frontier_phi_79_pred_4;
                    _3031 = frontier_phi_79_pred_5;
                    uint _3197 = _3196 + 1u;
                    if (_3197 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3190 = _3031;
                        _3191 = _3033;
                        _3192 = _3035;
                        _3193 = _3037;
                        _3194 = _3039;
                        _3195 = _3041;
                        _3196 = _3197;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3037;
                frontier_phi_60_61_ladder_1 = _3041;
                frontier_phi_60_61_ladder_2 = _3039;
                frontier_phi_60_61_ladder_3 = _3035;
                frontier_phi_60_61_ladder_4 = _3033;
                frontier_phi_60_61_ladder_5 = _3031;
            }
            else
            {
                frontier_phi_60_61_ladder = _2907;
                frontier_phi_60_61_ladder_1 = _2911;
                frontier_phi_60_61_ladder_2 = _2909;
                frontier_phi_60_61_ladder_3 = _2905;
                frontier_phi_60_61_ladder_4 = _2903;
                frontier_phi_60_61_ladder_5 = _2901;
            }
            _3030 = frontier_phi_60_61_ladder_5;
            _3032 = frontier_phi_60_61_ladder_4;
            _3034 = frontier_phi_60_61_ladder_3;
            _3036 = frontier_phi_60_61_ladder;
            _3038 = frontier_phi_60_61_ladder_2;
            _3040 = frontier_phi_60_61_ladder_1;
        }
        float _3045 = isnan(1.0) ? _1015 : (isnan(_1015) ? 1.0 : min(_1015, 1.0));
        _2778 = (_3045 * _3036) + _2215;
        _2780 = (_3045 * _3038) + _2217;
        _2782 = (_3045 * _3040) + _2219;
        _2784 = ((_3030 * _1000) * _3045) + _2560;
        _2786 = ((_3032 * _1002) * _3045) + _2562;
        _2788 = ((_3034 * _1003) * _3045) + _2564;
    }
    else
    {
        _2778 = _2215;
        _2780 = _2217;
        _2782 = _2219;
        _2784 = _2560;
        _2786 = _2562;
        _2788 = _2564;
    }
    uint _2794 = _944 + uint(cbMatDynParam._m0[0u].w);
    float _2802 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[22u].z) * _732.x) * cbInstanceData._m0[_2794].x;
    float _2805 = ((cbMtdParam._m0[11u].y * cbMtdParam._m0[22u].z) * _732.y) * cbInstanceData._m0[_2794].y;
    float _2808 = ((cbMtdParam._m0[11u].z * cbMtdParam._m0[22u].z) * _732.z) * cbInstanceData._m0[_2794].z;
    float _4769 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _4780 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _4791 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _2825 = (((isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2778 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1015))) + ((_2784 + ((isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0))) * _1855)) * cbPerFrame._m0[3u].x)) + _2802;
    float _2827 = (_2805 + ((_2786 + ((isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0))) * _1855)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2780 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1015)));
    float _2829 = (_2808 + ((_2788 + ((isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0))) * _1855)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2782 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1015)));
    float _2830 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
    float _2831 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
    float _2832 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
    float _2838 = cbMtdParam._m0[2u].x * _2802;
    float _2839 = cbMtdParam._m0[2u].y * _2805;
    float _2840 = cbMtdParam._m0[2u].z * _2808;
    float _4817 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2842 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
    uint _2843 = _943 + 6u;
    float _2851 = _888 / cbSceneParam._m0[86u].x;
    float _2852 = _889 / cbSceneParam._m0[86u].y;
    vec4 _2866 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2851, _2852, (log2((isnan(cbSceneParam._m0[77u].w) ? _811 : (isnan(_811) ? cbSceneParam._m0[77u].w : min(_811, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2868 = _2866.x;
    float _2869 = _2866.y;
    float _2870 = _2866.z;
    float _2871 = _2866.w;
    float _2963;
    float _2965;
    float _2967;
    float _2969;
    if (_811 > cbSceneParam._m0[78u].w)
    {
        float _2926 = isnan(_811) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _811 : min(cbSceneParam._m0[80u].w, _811));
        float _2927 = _2926 / _811;
        float _2938 = _2927 * _861;
        float _2939 = _862 * _2927;
        float _2940 = (-0.0) - _2939;
        float _2941 = _2927 * _863;
        float _2943 = (cbSceneParam._m0[77u].w * _2940) / _2926;
        float _2944 = _2943 + cbSceneParam._m0[79u].w;
        float _2945 = cbSceneParam._m0[79u].w - _2939;
        float _2951 = sqrt(((_2938 * _2938) + (_2939 * _2939)) + (_2941 * _2941));
        float _2954 = (1.0 - (cbSceneParam._m0[77u].w / _2926)) * _2951;
        float _2959 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2961 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3147;
        if (abs((_2940 - _2943) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3147 = ((((_2944 > 0.0) ? exp2(_2959 * _2944) : (2.0 - exp2(_2961 * _2944))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2954;
        }
        else
        {
            float _3091 = 1.0 / cbSceneParam._m0[80u].x;
            float _3092 = isnan(_2945) ? _2944 : (isnan(_2944) ? _2945 : max(_2944, _2945));
            float _3093 = isnan(_2945) ? _2944 : (isnan(_2944) ? _2945 : min(_2944, _2945));
            float _3102 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : min(_3092, 0.0));
            float _3103 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : min(_3093, 0.0));
            _3147 = ((abs(_2951 / _2940) * cbSceneParam._m0[80u].y) * ((((_3102 - _3103) * 2.0) - ((exp2(_2959 * (isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0)))) - exp2(_2959 * (isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0))))) * _3091)) - ((exp2(_2961 * _3102) - exp2(_2961 * _3103)) * _3091))) + (_2954 * cbSceneParam._m0[80u].z);
        }
        vec4 _3149 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2851, _2852, 1.0), 0.0);
        float _3158 = exp2((_3147 * (-1.44269502162933349609375)) * (1.0 - _3149.w));
        float _3159 = log2(_3158);
        float _3175 = log2(_2871);
        _2963 = (exp2(_3175 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3159 * cbSceneParam._m0[78u].x)) * _3149.x) / cbSceneParam._m0[78u].x)) + _2868;
        _2965 = (exp2(_3175 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3159 * cbSceneParam._m0[78u].y)) * _3149.y) / cbSceneParam._m0[78u].y)) + _2869;
        _2967 = (exp2(_3175 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3159 * cbSceneParam._m0[78u].z)) * _3149.z) / cbSceneParam._m0[78u].z)) + _2870;
        _2969 = _3158 * _2871;
    }
    else
    {
        _2963 = _2868;
        _2965 = _2869;
        _2967 = _2870;
        _2969 = _2871;
    }
    bool _3185;
    vec4 _2979;
    vec4 _3001;
    float _3003;
    float _3007;
    float _3008;
    float _3009;
    float _3012;
    float _3015;
    float _3018;
    float _3019;
    bool _3029;
    for (;;)
    {
        _2979 = cbMatDynParam._m0[0u];
        float _2981 = roundEven(_2979.y);
        bool _2982 = _2981 == 3.0;
        float _2983 = log2(_2969);
        float _2987 = exp2(_2983 * cbSceneParam._m0[78u].x);
        float _2988 = exp2(_2983 * cbSceneParam._m0[78u].y);
        float _2989 = exp2(_2983 * cbSceneParam._m0[78u].z);
        float _2990 = _2987 * _2830;
        float _2991 = _2988 * _2831;
        float _2992 = _2989 * _2832;
        float _2999 = _877 + (-0.5);
        _3001 = cbMtdParam._m0[1u];
        _3003 = _3001.y * _2999;
        float _3006 = (_2981 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3007 = _3006 * (_2982 ? _2990 : (_2990 + (cbSceneParam._m0[72u].w * _2963)));
        _3008 = _3006 * (_2982 ? _2991 : (_2991 + (cbSceneParam._m0[72u].w * _2965)));
        _3009 = _3006 * (_2982 ? _2992 : (_2992 + (cbSceneParam._m0[72u].w * _2967)));
        _3012 = ((_2838 * _2842) * _2987) * _3006;
        _3015 = ((_2839 * _2842) * _2988) * _3006;
        _3018 = ((_2840 * _2842) * _2989) * _3006;
        _3019 = _2999 * 0.999000012874603271484375;
        _3029 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3029)
        {
            if ((cbInstanceData._m0[_943 + 7u].x + _3019) < 0.5)
            {
                _3185 = true;
                break;
            }
        }
        uint _3126 = _944 + uint(_2979.w);
        if ((cbInstanceData._m0[_3126].w < 1.0) && ((cbInstanceData._m0[_3126].w + _3019) < 0.5))
        {
            _3185 = true;
            break;
        }
        if ((_3003 + 1.0) < _3001.x)
        {
            _3185 = true;
            break;
        }
        _3185 = false;
        break;
    }
    float _3389;
    if (_3185)
    {
        discard_state = true;
        _3389 = 0.0;
    }
    else
    {
        _3389 = cbInstanceData._m0[_2843].w;
    }
    SV_Target.x = _3007;
    SV_Target.y = _3008;
    SV_Target.z = _3009;
    SV_Target.w = _3389;
    SV_Target_1.x = _3012;
    SV_Target_1.y = _3015;
    SV_Target_1.z = _3018;
    SV_Target_1.w = cbInstanceData._m0[_2843].w;
    discard_exit();
}


