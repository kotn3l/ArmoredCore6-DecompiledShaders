#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1357;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252;
    float _253;
    float _254;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _252 = (-0.0) - _238;
        _253 = (-0.0) - _239;
        _254 = (-0.0) - _240;
    }
    else
    {
        _252 = _238;
        _253 = _239;
        _254 = _240;
    }
    vec4 _269 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _279 = log2(0.0);
    float _281 = exp2(_279 * cbMtdParam._m0[21u].y);
    float _282 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _283 = isnan(1.0) ? _282 : (isnan(_282) ? 1.0 : min(_282, 1.0));
    vec4 _297 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _301 = _297.z;
    float _302 = _297.w;
    float _310 = exp2(log2(_301 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _311 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _312 = isnan(1.0) ? _311 : (isnan(_311) ? 1.0 : min(_311, 1.0));
    vec4 _325 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _348 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _350 = _348.x;
    float _351 = _348.y;
    float _356 = _350 - ((_350 * _348.z) * cbMtdParam._m0[20u].w);
    bool _392 = _356 >= 0.25;
    bool _397 = _356 >= 0.3499999940395355224609375;
    bool _402 = _356 >= 0.5;
    bool _407 = _356 >= 0.64999997615814208984375;
    bool _412 = _356 >= 0.75;
    vec4 _440 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _450 = cbMtdParam._m0[9u].x * _440.x;
    float _451 = cbMtdParam._m0[9u].y * _440.y;
    float _452 = cbMtdParam._m0[9u].z * _440.z;
    float _459 = (((((((_412 ? cbMtdParam._m0[14u].x : (_407 ? cbMtdParam._m0[19u].x : (_402 ? cbMtdParam._m0[18u].x : (_397 ? cbMtdParam._m0[17u].x : (_392 ? cbMtdParam._m0[16u].x : cbMtdParam._m0[15u].x))))) - cbMtdParam._m0[10u].x) * _351) + cbMtdParam._m0[10u].x) * _325.x) - _450) * _312) + _450;
    float _460 = (((((((_412 ? cbMtdParam._m0[14u].y : (_407 ? cbMtdParam._m0[19u].y : (_402 ? cbMtdParam._m0[18u].y : (_397 ? cbMtdParam._m0[17u].y : (_392 ? cbMtdParam._m0[16u].y : cbMtdParam._m0[15u].y))))) - cbMtdParam._m0[10u].y) * _351) + cbMtdParam._m0[10u].y) * _325.y) - _451) * _312) + _451;
    float _461 = (((((((_412 ? cbMtdParam._m0[14u].z : (_407 ? cbMtdParam._m0[19u].z : (_402 ? cbMtdParam._m0[18u].z : (_397 ? cbMtdParam._m0[17u].z : (_392 ? cbMtdParam._m0[16u].z : cbMtdParam._m0[15u].z))))) - cbMtdParam._m0[10u].z) * _351) + cbMtdParam._m0[10u].z) * _325.z) - _452) * _312) + _452;
    float _468 = exp2(log2(_302) * cbMtdParam._m0[22u].y);
    vec4 _481 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _501 = (((cbMtdParam._m0[12u].x * _481.x) - _459) * _468) + _459;
    float _502 = (((cbMtdParam._m0[12u].y * _481.y) - _460) * _468) + _460;
    float _503 = (((cbMtdParam._m0[12u].z * _481.z) - _461) * _468) + _461;
    vec4 _515 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _539 = (_269.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _515.x) - _501) * _283) + _501);
    float _541 = (_269.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _515.y) - _502) * _283) + _502);
    float _543 = (_269.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _515.z) - _503) * _283) + _503);
    float _548 = exp2(log2(1.0 - _302) * 0.00999999977648258209228515625);
    float _566 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[22u].w) * _548) + cbMtdParam._m0[22u].w;
    float _585 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _566) + cbMtdParam._m0[21u].z) * _468) + _566;
    float _607 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _585) + cbMtdParam._m0[23u].w) * _283) + _585;
    vec4 _620 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _638 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _640 = _638.x;
    float _641 = _638.y;
    float _644 = cbMtdParam._m0[20u].x + _638.z;
    float _647 = (((cbMtdParam._m0[21u].x + _620.z) - _644) * _548) + _644;
    vec4 _659 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _671 = (_301 * 2.0) * ((((_659.z - _647) + cbMtdParam._m0[23u].y) * _468) + _647);
    vec4 _683 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _692 = (((_683.z - _671) + cbMtdParam._m0[22u].x) * _283) + _671;
    vec4 _711 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _726 = ((_620.x - _640) * _548) + _640;
    float _727 = ((_620.y - _641) * _548) + _641;
    float _732 = ((_659.x - _726) * _468) + _726;
    float _733 = ((_659.y - _727) * _468) + _727;
    float _742 = ((((_683.x - _732) * _283) + _732) * 2.0) + (-1.0);
    float _743 = ((((_683.y - _733) * _283) + _733) * 2.0) + (-1.0);
    float _744 = dot(vec2(_742, _743), vec2(_742, _743));
    float _4029 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _749 = sqrt(1.0 - (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))));
    float _752 = (cbMtdParam._m0[23u].x * ((_297.x * 2.0) + (-1.0))) + _742;
    float _753 = (cbMtdParam._m0[23u].x * ((_297.y * 2.0) + (-1.0))) + _743;
    float _756 = fma(_749, _252, fma(_753, _244 * TANGENT.x, (_230 * _223) * _752));
    float _759 = fma(_749, _253, fma(_753, _244 * TANGENT.y, (_230 * _224) * _752));
    float _762 = fma(_749, _254, fma(_753, _244 * TANGENT.z, (_230 * _225) * _752));
    float _766 = inversesqrt(dot(vec3(_756, _759, _762), vec3(_756, _759, _762)));
    float _767 = _766 * _756;
    float _768 = _766 * _759;
    float _769 = _766 * _762;
    float _4040 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _770 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _4051 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _4062 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _4073 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _4084 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _774 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _790 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _840 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _830);
    float _841 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _830);
    float _842 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _830);
    float _846 = inversesqrt(dot(vec3(_840, _841, _842), vec3(_840, _841, _842)));
    float _847 = _840 * _846;
    float _848 = _841 * _846;
    float _849 = _842 * _846;
    float _855 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _856 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _858 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _860 = _858.w;
    float _879 = fma(_769, cbSceneParam._m0[5u].z, fma(_768, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _767));
    float _882 = fma(_769, cbSceneParam._m0[6u].z, fma(_768, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _767));
    float _885 = fma(_769, cbSceneParam._m0[7u].z, fma(_768, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _767));
    vec4 _887 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _898 = (((_887.y - _770) + (_887.w * _770)) * cbMtdParam._m0[3u].x) + _770;
    uint _911 = uint(roundEven(NORMAL.w)) * 13u;
    uint _912 = _911 + 9u;
    uint _913 = _912 + uint(cbMatDynParam._m0[0u].w);
    float _919 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) * cbInstanceData._m0[_913].x;
    float _920 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * cbInstanceData._m0[_913].y;
    float _921 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) * cbInstanceData._m0[_913].z;
    float _4095 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _922 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _4106 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _923 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _4117 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _924 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    vec4 _925 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _930 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _941 = (((_930.x - _774) + (_930.w * _774)) * cbMtdParam._m0[3u].x) + _774;
    float _954 = (cbMtdParam._m0[3u].x * (((_922 * _860) - _922) + _925.x)) + _922;
    float _955 = (cbMtdParam._m0[3u].x * (((_923 * _860) - _923) + _925.y)) + _923;
    float _956 = (cbMtdParam._m0[3u].x * (((_924 * _860) - _924) + _925.z)) + _924;
    float _957 = 1.0 - _941;
    float _958 = _957 * _954;
    float _959 = _957 * _955;
    float _960 = _957 * _956;
    float _965 = (_954 + (-0.039999999105930328369140625)) * _941;
    float _966 = (_955 + (-0.039999999105930328369140625)) * _941;
    float _967 = (_956 + (-0.039999999105930328369140625)) * _941;
    float _968 = _965 + 0.039999999105930328369140625;
    float _970 = _966 + 0.039999999105930328369140625;
    float _971 = _967 + 0.039999999105930328369140625;
    vec4 _980 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _855, cbSceneParam._m0[86u].y * _856));
    float _983 = _980.x * TEXCOORD_4.z;
    float _984 = dot(vec3(_767, _768, _769), vec3(_847, _848, _849));
    float _987 = _984 * 2.0;
    float _991 = (_987 * _767) - _847;
    float _992 = (_987 * _768) - _848;
    float _993 = (_987 * _769) - _849;
    float _997 = abs(dot(vec3(_847, _848, _849), vec3(_767, _768, _769)));
    float _4128 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _999 = sqrt(_898);
    float _1012 = exp2((_999 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_999 * 3.0));
    float _1018 = (1.0 - _1012) * ((_999 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1019 = _1012 * _999;
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1055 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1356;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1082 = fma(_1055, cbModelParam._m0[26u].z, fma(_1051, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1047));
        float _1086 = fma(_1055, cbModelParam._m0[27u].z, fma(_1051, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1047));
        float _1090 = fma(_1055, cbModelParam._m0[28u].z, fma(_1051, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1047));
        float _1114 = _1047 + _767;
        float _1115 = _1051 + _768;
        float _1116 = _1055 + _769;
        float _1126 = fma(_1116, cbModelParam._m0[26u].z, fma(_1115, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1114)) - _1082;
        float _1127 = fma(_1116, cbModelParam._m0[27u].z, fma(_1115, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1114)) - _1086;
        float _1128 = fma(_1116, cbModelParam._m0[28u].z, fma(_1115, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1114)) - _1090;
        float _1132 = inversesqrt(dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128)));
        float _1145 = ((_1132 * _1126) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1082 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1132 * _1127) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1086 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1132 * _1128) / cbModelParam._m0[34u].z) + ((((((_1090 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        float _1184 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1150.x + (-0.5));
        float _1186 = _1184 * (_1150.y + (-0.5));
        float _1187 = _1184 * (_1150.z + (-0.5));
        float _1194 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1157.x + (-0.5));
        float _1196 = _1194 * (_1157.y + (-0.5));
        float _1197 = _1194 * (_1157.z + (-0.5));
        float _1204 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1164.x + (-0.5));
        float _1206 = _1204 * (_1164.y + (-0.5));
        float _1207 = _1204 * (_1164.z + (-0.5));
        float _1214 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1171.x + (-0.5));
        float _1216 = _1214 * (_1171.y + (-0.5));
        float _1217 = _1214 * (_1171.z + (-0.5));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = _1185 * 0.5;
        float _1222 = _1195 * 0.5;
        float _1223 = _1205 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1238 = (dot(vec3(_767, _768, _769), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1248 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _4176 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1250 + 1.0))) + _1255) * _1218;
        float _1265 = _1186 * 0.5;
        float _1266 = _1196 * 0.5;
        float _1267 = _1206 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_767, _768, _769), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _4209 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1292 + 1.0))) + _1297) * _1219;
        float _1307 = _1187 * 0.5;
        float _1308 = _1197 * 0.5;
        float _1309 = _1207 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_767, _768, _769), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _4220 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _4231 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _4242 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_1334 + 1.0))) + _1339) * _1220;
        _1356 = _1187;
        _1358 = _1186;
        _1359 = _1185;
        _1360 = _1197;
        _1361 = _1196;
        _1362 = _1195;
        _1363 = _1207;
        _1364 = _1206;
        _1365 = _1205;
        _1366 = _1220;
        _1367 = _1219;
        _1368 = _1218;
        _1369 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1370 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1371 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
    }
    else
    {
        _1356 = _1357;
        _1358 = _1357;
        _1359 = _1357;
        _1360 = _1357;
        _1361 = _1357;
        _1362 = _1357;
        _1363 = _1357;
        _1364 = _1357;
        _1365 = _1357;
        _1366 = _1357;
        _1367 = _1357;
        _1368 = _1357;
        _1369 = 0.0;
        _1370 = 0.0;
        _1371 = 0.0;
    }
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1397 = fma(_1055, cbModelParam._m0[30u].z, fma(_1051, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1047));
        float _1401 = fma(_1055, cbModelParam._m0[31u].z, fma(_1051, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1047));
        float _1405 = fma(_1055, cbModelParam._m0[32u].z, fma(_1051, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1047));
        float _1428 = _1047 + _767;
        float _1429 = _1051 + _768;
        float _1430 = _1055 + _769;
        float _1440 = fma(_1430, cbModelParam._m0[30u].z, fma(_1429, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1428)) - _1397;
        float _1441 = fma(_1430, cbModelParam._m0[31u].z, fma(_1429, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1428)) - _1401;
        float _1442 = fma(_1430, cbModelParam._m0[32u].z, fma(_1429, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1428)) - _1405;
        float _1446 = inversesqrt(dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442)));
        float _1459 = ((_1446 * _1440) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1397 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1460 = ((_1446 * _1441) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1401 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1461 = ((_1446 * _1442) / cbModelParam._m0[35u].z) + ((((((_1405 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        float _1496 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1463.x + (-0.5));
        float _1498 = _1496 * (_1463.y + (-0.5));
        float _1499 = _1496 * (_1463.z + (-0.5));
        float _1506 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1470.x + (-0.5));
        float _1508 = _1506 * (_1470.y + (-0.5));
        float _1509 = _1506 * (_1470.z + (-0.5));
        float _1516 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1477.x + (-0.5));
        float _1518 = _1516 * (_1477.y + (-0.5));
        float _1519 = _1516 * (_1477.z + (-0.5));
        float _1526 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1484.x + (-0.5));
        float _1528 = _1526 * (_1484.y + (-0.5));
        float _1529 = _1526 * (_1484.z + (-0.5));
        float _1530 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1531 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1532 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1533 = _1497 * 0.5;
        float _1534 = _1507 * 0.5;
        float _1535 = _1517 * 0.5;
        float _1536 = dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535));
        float _1541 = (_1536 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1536);
        float _1549 = (dot(vec3(_767, _768, _769), vec3(_1541 * _1533, _1541 * _1534, _1541 * _1535)) + 1.0) * 0.5;
        float _4283 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1558 = sqrt(((_1534 * _1534) + (_1533 * _1533)) + (_1535 * _1535)) / (_1530 + 9.9999997473787516355514526367188e-06);
        float _4294 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1560 = _1559 * 2.0;
        float _1564 = (1.0 - _1559) / (_1559 + 1.0);
        float _4305 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1574 = ((((1.0 - _1565) * (_1560 + 2.0)) * exp2(log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_1560 + 1.0))) + _1565) * _1530;
        float _1575 = _1498 * 0.5;
        float _1576 = _1508 * 0.5;
        float _1577 = _1518 * 0.5;
        float _1578 = dot(vec3(_1575, _1576, _1577), vec3(_1575, _1576, _1577));
        float _1583 = (_1578 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1578);
        float _1591 = (dot(vec3(_767, _768, _769), vec3(_1583 * _1575, _1583 * _1576, _1583 * _1577)) + 1.0) * 0.5;
        float _4316 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1600 = sqrt(((_1576 * _1576) + (_1575 * _1575)) + (_1577 * _1577)) / (_1531 + 9.9999997473787516355514526367188e-06);
        float _4327 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1602 = _1601 * 2.0;
        float _1606 = (1.0 - _1601) / (_1601 + 1.0);
        float _4338 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1616 = ((((1.0 - _1607) * (_1602 + 2.0)) * exp2(log2(isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_1602 + 1.0))) + _1607) * _1531;
        float _1617 = _1499 * 0.5;
        float _1618 = _1509 * 0.5;
        float _1619 = _1519 * 0.5;
        float _1620 = dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619));
        float _1625 = (_1620 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1620);
        float _1633 = (dot(vec3(_767, _768, _769), vec3(_1625 * _1617, _1625 * _1618, _1625 * _1619)) + 1.0) * 0.5;
        float _4349 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1642 = sqrt(((_1618 * _1618) + (_1617 * _1617)) + (_1619 * _1619)) / (_1532 + 9.9999997473787516355514526367188e-06);
        float _4360 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1644 = _1643 * 2.0;
        float _1648 = (1.0 - _1643) / (_1643 + 1.0);
        float _4371 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1658 = ((((1.0 - _1649) * (_1644 + 2.0)) * exp2(log2(isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_1644 + 1.0))) + _1649) * _1532;
        _1666 = _1499;
        _1667 = _1498;
        _1668 = _1497;
        _1669 = _1509;
        _1670 = _1508;
        _1671 = _1507;
        _1672 = _1519;
        _1673 = _1518;
        _1674 = _1517;
        _1675 = _1532;
        _1676 = _1531;
        _1677 = _1530;
        _1678 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)));
        _1679 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)));
        _1680 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)));
    }
    else
    {
        _1666 = _1357;
        _1667 = _1357;
        _1668 = _1357;
        _1669 = _1357;
        _1670 = _1357;
        _1671 = _1357;
        _1672 = _1357;
        _1673 = _1357;
        _1674 = _1357;
        _1675 = _1357;
        _1676 = _1357;
        _1677 = _1357;
        _1678 = 0.0;
        _1679 = 0.0;
        _1680 = 0.0;
    }
    float _1690 = (cbModelParam._m0[1u].x * (_1678 - _1369)) + _1369;
    float _1691 = (cbModelParam._m0[1u].x * (_1679 - _1370)) + _1370;
    float _1692 = (cbModelParam._m0[1u].x * (_1680 - _1371)) + _1371;
    float _1713 = fma(_1692, cbSceneParam._m0[89u].z, fma(_1691, cbSceneParam._m0[89u].y, _1690 * cbSceneParam._m0[89u].x));
    float _1716 = fma(_1692, cbSceneParam._m0[90u].z, fma(_1691, cbSceneParam._m0[90u].y, _1690 * cbSceneParam._m0[90u].x));
    float _1719 = fma(_1692, cbSceneParam._m0[91u].z, fma(_1691, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1690));
    float _1734 = _991 * 0.5;
    float _1735 = _992 * 0.5;
    float _1736 = _993 * 0.5;
    float _1737 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1668, _1671, _1674, _1677));
    float _1740 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1667, _1670, _1673, _1676));
    float _1743 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1666, _1669, _1672, _1675));
    float _1777;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1750 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1356, _1360, _1363, _1366));
        float _1754 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1358, _1361, _1364, _1367));
        float _1758 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1359, _1362, _1365, _1368));
        float _1765 = dot(vec4(cbModelParam._m0[39u]), vec4(_1734, _1735, _1736, 1.0));
        _1777 = dot(vec3(isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1765) ? 0.0 : (isnan(0.0) ? _1765 : max(0.0, _1765))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1777 = 1.0;
    }
    float _1788;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1779 = dot(vec4(cbModelParam._m0[40u]), vec4(_1734, _1735, _1736, 1.0));
        _1788 = dot(vec3(isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1779) ? 0.0 : (isnan(0.0) ? _1779 : max(0.0, _1779))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1788 = 1.0;
    }
    float _1792 = (_1788 * cbModelParam._m0[1u].x) + (_1777 * (1.0 - cbModelParam._m0[1u].x));
    float _1802 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _898);
    float _1803 = isnan(_1802) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1802 : min(cbModelParam._m0[25u].z, _1802));
    float _1883;
    float _1885;
    float _1887;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1850 = fma(_1055, cbModelParam._m0[13u].z, fma(_1051, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1047)) + cbModelParam._m0[13u].w;
        float _1854 = fma(_1055, cbModelParam._m0[14u].z, fma(_1051, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1047)) + cbModelParam._m0[14u].w;
        float _1858 = fma(_1055, cbModelParam._m0[15u].z, fma(_1051, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1047)) + cbModelParam._m0[15u].w;
        float _1861 = fma(_993, cbModelParam._m0[13u].z, fma(_992, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _991));
        float _1864 = fma(_993, cbModelParam._m0[14u].z, fma(_992, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _991));
        float _1867 = fma(_993, cbModelParam._m0[15u].z, fma(_992, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _991));
        float _1895;
        if (_1861 > 0.0)
        {
            _1895 = abs((1.0 - _1850) / _1861);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1850 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1895 = frontier_phi_16_14_ladder;
        }
        float _2066;
        if (_1864 > 0.0)
        {
            _2066 = abs((1.0 - _1854) / _1864);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1854 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2066 = frontier_phi_25_21_ladder;
        }
        float _2360;
        if (_1867 > 0.0)
        {
            _2360 = abs((1.0 - _1858) / _1867);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1858 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2360 = frontier_phi_37_32_ladder;
        }
        float _2362 = isnan(_2066) ? _1895 : (isnan(_1895) ? _2066 : min(_1895, _2066));
        float _2363 = isnan(_2360) ? _2362 : (isnan(_2362) ? _2360 : min(_2362, _2360));
        float _2367 = (_2363 * _1861) + _1850;
        float _2368 = (_2363 * _1864) + _1854;
        float _2369 = (_2363 * _1867) + _1858;
        float _2370 = _2363 * 9.9999997473787516355514526367188e-05;
        float _2372 = (-1.0) - _2370;
        float _2374 = _2370 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2369 > _2374) || ((_2369 < _2372) || ((_2368 > _2374) || ((_2368 < _2372) || ((_2367 < _2372) || (_2367 > _2374))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2514 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2369, cbModelParam._m0[9u].z, fma(_2368, cbModelParam._m0[9u].y, _2367 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2369, cbModelParam._m0[10u].z, fma(_2368, cbModelParam._m0[10u].y, _2367 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2369, cbModelParam._m0[11u].z, fma(_2368, cbModelParam._m0[11u].y, _2367 * cbModelParam._m0[11u].x))), _1803);
            frontier_phi_15_37_ladder = _2514.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2514.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2514.z * cbModelParam._m0[1u].y;
        }
        _1883 = frontier_phi_15_37_ladder_1;
        _1885 = frontier_phi_15_37_ladder;
        _1887 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1871 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_991, _992, _993), _1803);
        _1883 = _1871.x * cbModelParam._m0[1u].y;
        _1885 = _1871.y * cbModelParam._m0[1u].y;
        _1887 = _1871.z * cbModelParam._m0[1u].y;
    }
    float _1891 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _898);
    float _1892 = isnan(_1891) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1891 : min(cbModelParam._m0[25u].w, _1891));
    float _1981;
    float _1983;
    float _1985;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1945 = fma(_1055, cbModelParam._m0[21u].z, fma(_1051, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1047)) + cbModelParam._m0[21u].w;
        float _1949 = fma(_1055, cbModelParam._m0[22u].z, fma(_1051, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1047)) + cbModelParam._m0[22u].w;
        float _1953 = fma(_1055, cbModelParam._m0[23u].z, fma(_1051, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1047)) + cbModelParam._m0[23u].w;
        float _1956 = fma(_993, cbModelParam._m0[21u].z, fma(_992, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _991));
        float _1959 = fma(_993, cbModelParam._m0[22u].z, fma(_992, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _991));
        float _1962 = fma(_993, cbModelParam._m0[23u].z, fma(_992, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _991));
        float _2071;
        if (_1956 > 0.0)
        {
            _2071 = abs((1.0 - _1945) / _1956);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1945 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2071 = frontier_phi_27_23_ladder;
        }
        float _2387;
        if (_1959 > 0.0)
        {
            _2387 = abs((1.0 - _1949) / _1959);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1949 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2387 = frontier_phi_39_34_ladder;
        }
        float _2725;
        if (_1962 > 0.0)
        {
            _2725 = abs((1.0 - _1953) / _1962);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1953 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2725 = frontier_phi_49_46_ladder;
        }
        float _2727 = isnan(_2387) ? _2071 : (isnan(_2071) ? _2387 : min(_2071, _2387));
        float _2728 = isnan(_2725) ? _2727 : (isnan(_2727) ? _2725 : min(_2727, _2725));
        float _2732 = (_2728 * _1956) + _1945;
        float _2733 = (_2728 * _1959) + _1949;
        float _2734 = (_2728 * _1962) + _1953;
        float _2735 = _2728 * 9.9999997473787516355514526367188e-05;
        float _2736 = (-1.0) - _2735;
        float _2738 = _2735 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2734 > _2738) || ((_2734 < _2736) || ((_2733 > _2738) || ((_2733 < _2736) || ((_2732 < _2736) || (_2732 > _2738))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2856 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2734, cbModelParam._m0[17u].z, fma(_2733, cbModelParam._m0[17u].y, _2732 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2734, cbModelParam._m0[18u].z, fma(_2733, cbModelParam._m0[18u].y, _2732 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2734, cbModelParam._m0[19u].z, fma(_2733, cbModelParam._m0[19u].y, _2732 * cbModelParam._m0[19u].x))), _1892);
            frontier_phi_24_49_ladder = _2856.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2856.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2856.x * cbModelParam._m0[1u].z;
        }
        _1981 = frontier_phi_24_49_ladder_2;
        _1983 = frontier_phi_24_49_ladder_1;
        _1985 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1965 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_991, _992, _993), _1892);
        _1981 = _1965.x * cbModelParam._m0[1u].z;
        _1983 = _1965.y * cbModelParam._m0[1u].z;
        _1985 = _1965.z * cbModelParam._m0[1u].z;
    }
    float _1998 = (((_1018 * _968) + _1019) * _983) * ((cbModelParam._m0[1u].w * (_1981 - _1883)) + _1883);
    float _2000 = (((_1018 * _970) + _1019) * _983) * ((cbModelParam._m0[1u].w * (_1983 - _1885)) + _1885);
    float _2002 = (((_1018 * _971) + _1019) * _983) * ((cbModelParam._m0[1u].w * (_1985 - _1887)) + _1887);
    float _2005 = fma(_2002, cbSceneParam._m0[89u].z, fma(_2000, cbSceneParam._m0[89u].y, _1998 * cbSceneParam._m0[89u].x));
    float _2008 = fma(_2002, cbSceneParam._m0[90u].z, fma(_2000, cbSceneParam._m0[90u].y, _1998 * cbSceneParam._m0[90u].x));
    float _2011 = fma(_2002, cbSceneParam._m0[91u].z, fma(_2000, cbSceneParam._m0[91u].y, _1998 * cbSceneParam._m0[91u].x));
    float _2045 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2049 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2053 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2057 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2058 = _2045 / _2057;
    float _2059 = _2049 / _2057;
    float _2060 = _2053 / _2057;
    float _2206;
    float _2207;
    float _2208;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2087 = ((uint(_2060 > cbSceneParam._m0[59u].y) + uint(_2060 > cbSceneParam._m0[59u].x)) + uint(_2060 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2088 = _2087 + 43u;
        uint _2096 = _2087 + 44u;
        uint _2104 = _2087 + 45u;
        uint _2112 = _2087 + 46u;
        float _2123 = fma(_2057, cbSceneParam._m0[_2088].w, fma(_2053, cbSceneParam._m0[_2088].z, fma(_2049, cbSceneParam._m0[_2088].y, _2045 * cbSceneParam._m0[_2088].x)));
        float _2127 = fma(_2057, cbSceneParam._m0[_2096].w, fma(_2053, cbSceneParam._m0[_2096].z, fma(_2049, cbSceneParam._m0[_2096].y, _2045 * cbSceneParam._m0[_2096].x)));
        float _2135 = fma(_2057, cbSceneParam._m0[_2112].w, fma(_2053, cbSceneParam._m0[_2112].z, fma(_2049, cbSceneParam._m0[_2112].y, _2045 * cbSceneParam._m0[_2112].x)));
        float _2140 = cbSceneParam._m0[33u].z * _2135;
        float _2142 = cbSceneParam._m0[33u].w * _2135;
        float _2145 = fma(_2057, cbSceneParam._m0[_2104].w, fma(_2053, cbSceneParam._m0[_2104].z, fma(_2049, cbSceneParam._m0[_2104].y, _2045 * cbSceneParam._m0[_2104].x))) / _2135;
        float _2192 = (cbSceneParam._m0[33u].x - sqrt(((_2059 * _2059) + (_2058 * _2058)) + (_2060 * _2060))) * cbSceneParam._m0[33u].y;
        float _4497 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2199 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2140 + _2123) / _2135, (_2142 + _2127) / _2135), _2145), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2142 + _2123) / _2135, (_2127 - _2140) / _2135), _2145), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2123 - _2140) / _2135, (_2127 - _2142) / _2135), _2145), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2123 - _2142) / _2135, (_2140 + _2127) / _2135), _2145), 0.0)).x), vec4(0.25)));
        _2206 = 1.0 - (_2199 * cbSceneParam._m0[34u].x);
        _2207 = 1.0 - (_2199 * cbSceneParam._m0[34u].y);
        _2208 = 1.0 - (_2199 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2206 = 1.0;
        _2207 = 1.0;
        _2208 = 1.0;
    }
    float _2272;
    float _2274;
    float _2276;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2260 = fma(_2057, cbSceneParam._m0[63u].w, fma(_2053, cbSceneParam._m0[63u].z, fma(_2049, cbSceneParam._m0[63u].y, _2045 * cbSceneParam._m0[63u].x)));
        float _2261 = fma(_2057, cbSceneParam._m0[60u].w, fma(_2053, cbSceneParam._m0[60u].z, fma(_2049, cbSceneParam._m0[60u].y, _2045 * cbSceneParam._m0[60u].x))) / _2260;
        float _2262 = fma(_2057, cbSceneParam._m0[61u].w, fma(_2053, cbSceneParam._m0[61u].z, fma(_2049, cbSceneParam._m0[61u].y, _2045 * cbSceneParam._m0[61u].x))) / _2260;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2261 >= cbSceneParam._m0[64u].x) && (_2262 >= cbSceneParam._m0[64u].y)) && (_2261 <= cbSceneParam._m0[64u].z)) && (_2262 <= cbSceneParam._m0[64u].w))
        {
            float _2400 = fma(_2057, cbSceneParam._m0[62u].w, fma(_2053, cbSceneParam._m0[62u].z, fma(_2049, cbSceneParam._m0[62u].y, _2045 * cbSceneParam._m0[62u].x))) / _2260;
            float _2404 = isnan(cbSceneParam._m0[41u].w) ? _2400 : (isnan(_2400) ? cbSceneParam._m0[41u].w : max(_2400, cbSceneParam._m0[41u].w));
            float _2447 = (cbSceneParam._m0[33u].x - sqrt(((_2059 * _2059) + (_2058 * _2058)) + (_2060 * _2060))) * cbSceneParam._m0[33u].y;
            float _4513 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
            float _2454 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2261, cbSceneParam._m0[33u].w + _2262), _2404), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2261, _2262 - cbSceneParam._m0[33u].z), _2404), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2261 - cbSceneParam._m0[33u].z, _2262 - cbSceneParam._m0[33u].w), _2404), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2261 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2262), _2404), 0.0)).x), vec4(0.25)));
            float _2458 = 1.0 - (_2454 * cbSceneParam._m0[34u].x);
            float _2459 = 1.0 - (_2454 * cbSceneParam._m0[34u].y);
            float _2460 = 1.0 - (_2454 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2459) ? _2207 : (isnan(_2207) ? _2459 : min(_2207, _2459));
            frontier_phi_36_35_ladder_1 = isnan(_2460) ? _2208 : (isnan(_2208) ? _2460 : min(_2208, _2460));
            frontier_phi_36_35_ladder_2 = isnan(_2458) ? _2206 : (isnan(_2206) ? _2458 : min(_2206, _2458));
        }
        else
        {
            frontier_phi_36_35_ladder = _2207;
            frontier_phi_36_35_ladder_1 = _2208;
            frontier_phi_36_35_ladder_2 = _2206;
        }
        _2272 = frontier_phi_36_35_ladder_2;
        _2274 = frontier_phi_36_35_ladder;
        _2276 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2272 = _2206;
        _2274 = _2207;
        _2276 = _2208;
    }
    uvec4 _2281 = floatBitsToUint(cbInstanceData._m0[_911 + 5u]);
    uint _2283 = _2281.x * 14u;
    uint _2284 = _2283 + 13u;
    float _2291 = _983 + (-1.0);
    float _2296 = (cbLight._m0[_2284].x * _2291) + 1.0;
    float _2297 = (cbLight._m0[_2284].y * _2291) + 1.0;
    float _2298 = (cbLight._m0[_2284].z * _2291) + 1.0;
    float _2299 = (cbLight._m0[_2284].w * _2291) + 1.0;
    uint _2300 = _2283 + 5u;
    float _2306 = isnan(1.0) ? _2297 : (isnan(_2297) ? 1.0 : min(_2297, 1.0));
    uint _2310 = _2283 + 4u;
    float _2319 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
    uint _2323 = _2283 | 1u;
    float _2334 = dot(vec3(cbLight._m0[_2283].xyz), vec3(_767, _768, _769));
    float _2337 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_767, _768, _769));
    float _4549 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _4560 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2342 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * 0.3183098733425140380859375;
    float _2344 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * 0.3183098733425140380859375;
    float _2351 = ((cbLight._m0[_2300].x * _2306) * _2344) + (((cbLight._m0[_2310].x * _2272) * _2319) * _2342);
    float _2352 = ((_2306 * cbLight._m0[_2300].y) * _2344) + (((cbLight._m0[_2310].y * _2274) * _2319) * _2342);
    float _2353 = ((_2306 * cbLight._m0[_2300].z) * _2344) + (((cbLight._m0[_2310].z * _2276) * _2319) * _2342);
    uvec4 _2357 = floatBitsToUint(cbLight._m0[_2283 + 12u]);
    bool _2359 = _2357.x == 0u;
    float _2461;
    float _2463;
    float _2465;
    if (_2359)
    {
        _2461 = _2351;
        _2463 = _2352;
        _2465 = _2353;
    }
    else
    {
        uint _2469 = _2283 + 6u;
        float _2485 = (dot(vec3(cbLight._m0[_2283 + 2u].xyz), vec3(_767, _768, _769)) * 0.5) + 0.5;
        float _2486 = _2485 * _2485;
        float _4571 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2487 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2488 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
        _2461 = (((cbLight._m0[_2469].x * 0.3183098733425140380859375) * _2487) * _2488) + _2351;
        _2463 = (((cbLight._m0[_2469].y * 0.3183098733425140380859375) * _2487) * _2488) + _2352;
        _2465 = (((cbLight._m0[_2469].z * 0.3183098733425140380859375) * _2487) * _2488) + _2353;
    }
    bool _2468 = _2357.y == 0u;
    float _2523;
    float _2525;
    float _2527;
    if (_2468)
    {
        _2523 = _2461;
        _2525 = _2463;
        _2527 = _2465;
    }
    else
    {
        uint _2696 = _2283 + 7u;
        float _2712 = (dot(vec3(cbLight._m0[_2283 + 3u].xyz), vec3(_767, _768, _769)) * 0.5) + 0.5;
        float _2713 = _2712 * _2712;
        float _4587 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2714 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _2715 = isnan(1.0) ? _2299 : (isnan(_2299) ? 1.0 : min(_2299, 1.0));
        _2523 = (((cbLight._m0[_2696].x * 0.3183098733425140380859375) * _2714) * _2715) + _2461;
        _2525 = (((cbLight._m0[_2696].y * 0.3183098733425140380859375) * _2714) * _2715) + _2463;
        _2527 = (((cbLight._m0[_2696].z * 0.3183098733425140380859375) * _2714) * _2715) + _2465;
    }
    uint _2530 = _2283 + 8u;
    float _2543 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2283].w)) * _898) * 0.949999988079071044921875);
    float _2544 = _2543 * _2543;
    float _2545 = cbLight._m0[_2283].x + _847;
    float _2546 = cbLight._m0[_2283].y + _848;
    float _2547 = cbLight._m0[_2283].z + _849;
    float _2551 = inversesqrt(dot(vec3(_2545, _2546, _2547), vec3(_2545, _2546, _2547)));
    float _2552 = _2551 * _2545;
    float _2553 = _2551 * _2546;
    float _2554 = _2551 * _2547;
    float _2555 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2283].xyz));
    float _4603 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2558 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
    float _4614 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _2559 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
    float _2560 = dot(vec3(_767, _768, _769), vec3(_2552, _2553, _2554));
    float _4625 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2563 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
    float _2564 = dot(vec3(cbLight._m0[_2283].xyz), vec3(_2552, _2553, _2554));
    float _4636 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2568 = _2544 * _2544;
    float _2572 = ((_2563 * _2563) * (_2568 + (-1.0))) + 1.0;
    float _2580 = exp2(log2(1.0 - (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0)))) * 5.0);
    float _2581 = 0.959999978542327880859375 - _965;
    float _2583 = 0.959999978542327880859375 - _966;
    float _2584 = 0.959999978542327880859375 - _967;
    float _2591 = 1.0 - _2544;
    float _2602 = (0.5 / (((_2559 * ((_2558 * _2591) + _2544)) + 9.9999999392252902907785028219223e-09) + (((_2559 * _2591) + _2544) * _2558))) * _2558;
    float _4647 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
    float _2604 = (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_2568 / ((_2572 * _2572) * 3.141590118408203125));
    uint _2618 = _2283 + 9u;
    float _2629 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2323].w)) * _898) * 0.949999988079071044921875);
    float _2630 = _2629 * _2629;
    float _2631 = cbLight._m0[_2323].x + _847;
    float _2632 = cbLight._m0[_2323].y + _848;
    float _2633 = cbLight._m0[_2323].z + _849;
    float _2637 = inversesqrt(dot(vec3(_2631, _2632, _2633), vec3(_2631, _2632, _2633)));
    float _2638 = _2637 * _2631;
    float _2639 = _2637 * _2632;
    float _2640 = _2637 * _2633;
    float _2641 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2323].xyz));
    float _4658 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2644 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
    float _2645 = dot(vec3(_767, _768, _769), vec3(_2638, _2639, _2640));
    float _4669 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2648 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
    float _2649 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_2638, _2639, _2640));
    float _4680 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
    float _2653 = _2630 * _2630;
    float _2657 = ((_2648 * _2648) * (_2653 + (-1.0))) + 1.0;
    float _2664 = exp2(log2(1.0 - (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) * 5.0);
    float _2671 = 1.0 - _2630;
    float _2681 = (0.5 / (((_2559 * ((_2644 * _2671) + _2630)) + 9.9999999392252902907785028219223e-09) + (((_2559 * _2671) + _2630) * _2644))) * _2644;
    float _4691 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2683 = (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2653 / ((_2657 * _2657) * 3.141590118408203125));
    float _2693 = (((((_2664 * _2581) + _968) * cbLight._m0[_2618].x) * _2683) * _2306) + ((((cbLight._m0[_2530].x * _2272) * ((_2580 * _2581) + _968)) * _2604) * _2319);
    float _2694 = (((((_2664 * _2583) + _970) * cbLight._m0[_2618].y) * _2683) * _2306) + ((((cbLight._m0[_2530].y * _2274) * ((_2580 * _2583) + _970)) * _2604) * _2319);
    float _2695 = (((((_2664 * _2584) + _971) * cbLight._m0[_2618].z) * _2683) * _2306) + ((((cbLight._m0[_2530].z * _2276) * ((_2580 * _2584) + _971)) * _2604) * _2319);
    float _2751;
    float _2753;
    float _2755;
    if (_2359)
    {
        _2751 = _2693;
        _2753 = _2694;
        _2755 = _2695;
    }
    else
    {
        uint _2757 = _2283 + 2u;
        uint _2761 = _2283 + 10u;
        float _2775 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2757].w)) * _898) * 0.949999988079071044921875);
        float _2776 = _2775 * _2775;
        float _2777 = cbLight._m0[_2757].x + _847;
        float _2778 = cbLight._m0[_2757].y + _848;
        float _2779 = cbLight._m0[_2757].z + _849;
        float _2783 = inversesqrt(dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779)));
        float _2784 = _2783 * _2777;
        float _2785 = _2783 * _2778;
        float _2786 = _2783 * _2779;
        float _2787 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2757].xyz));
        float _4702 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2790 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2791 = dot(vec3(_767, _768, _769), vec3(_2784, _2785, _2786));
        float _4713 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2794 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
        float _2795 = dot(vec3(cbLight._m0[_2757].xyz), vec3(_2784, _2785, _2786));
        float _4724 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2799 = _2776 * _2776;
        float _2803 = ((_2794 * _2794) * (_2799 + (-1.0))) + 1.0;
        float _2810 = exp2(log2(1.0 - (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) * 5.0);
        float _2817 = 1.0 - _2776;
        float _2827 = (0.5 / (((_2559 * ((_2790 * _2817) + _2776)) + 9.9999999392252902907785028219223e-09) + (((_2559 * _2817) + _2776) * _2790))) * _2790;
        float _4735 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        float _2829 = (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2799 / ((_2803 * _2803) * 3.141590118408203125));
        float _2830 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
        _2751 = (((((_2810 * _2581) + _968) * cbLight._m0[_2761].x) * _2829) * _2830) + _2693;
        _2753 = (((((_2810 * _2583) + _970) * cbLight._m0[_2761].y) * _2829) * _2830) + _2694;
        _2755 = (((((_2810 * _2584) + _971) * cbLight._m0[_2761].z) * _2829) * _2830) + _2695;
    }
    float _2861;
    float _2863;
    float _2865;
    if (_2468)
    {
        _2861 = _2751;
        _2863 = _2753;
        _2865 = _2755;
    }
    else
    {
        uint _2872 = _2283 + 3u;
        uint _2876 = _2283 + 11u;
        float _2890 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2872].w)) * _898) * 0.949999988079071044921875);
        float _2891 = _2890 * _2890;
        float _2892 = cbLight._m0[_2872].x + _847;
        float _2893 = cbLight._m0[_2872].y + _848;
        float _2894 = cbLight._m0[_2872].z + _849;
        float _2898 = inversesqrt(dot(vec3(_2892, _2893, _2894), vec3(_2892, _2893, _2894)));
        float _2899 = _2898 * _2892;
        float _2900 = _2898 * _2893;
        float _2901 = _2898 * _2894;
        float _2902 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2872].xyz));
        float _4751 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2905 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
        float _2906 = dot(vec3(_767, _768, _769), vec3(_2899, _2900, _2901));
        float _4762 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2909 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
        float _2910 = dot(vec3(cbLight._m0[_2872].xyz), vec3(_2899, _2900, _2901));
        float _4773 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2914 = _2891 * _2891;
        float _2918 = ((_2909 * _2909) * (_2914 + (-1.0))) + 1.0;
        float _2925 = exp2(log2(1.0 - (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0)))) * 5.0);
        float _2932 = 1.0 - _2891;
        float _2942 = (0.5 / (((_2559 * ((_2905 * _2932) + _2891)) + 9.9999999392252902907785028219223e-09) + (((_2559 * _2932) + _2891) * _2905))) * _2905;
        float _4784 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        float _2944 = (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (_2914 / ((_2918 * _2918) * 3.141590118408203125));
        float _2945 = isnan(1.0) ? _2299 : (isnan(_2299) ? 1.0 : min(_2299, 1.0));
        _2861 = (((((_2925 * _2581) + _968) * cbLight._m0[_2876].x) * _2944) * _2945) + _2751;
        _2863 = (((((_2925 * _2583) + _970) * cbLight._m0[_2876].y) * _2944) * _2945) + _2753;
        _2865 = (((((_2925 * _2584) + _971) * cbLight._m0[_2876].z) * _2944) * _2945) + _2755;
    }
    float _3010;
    float _3012;
    float _3014;
    float _3016;
    float _3018;
    float _3020;
    if (_2281.y == 0u)
    {
        uvec4 _2966 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2967 = _2966.x;
        uint _2978 = uint((float(_2966.y) * floor(float(uint(cbSceneParam._m0[85u].y * _856) / _2967))) + floor(float(uint(cbSceneParam._m0[85u].x * _855) / _2967)));
        float _2988 = (log2(_2060 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2989 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
        uint _2992 = uint(isnan(14.0) ? _2989 : (isnan(_2989) ? 14.0 : min(_2989, 14.0)));
        uvec4 _2997 = texelFetch(g_lightClusterGridBuffer, int(((_2992 << 2u) + (_2978 << 6u)) >> 2u));
        uint _2998 = _2997.x;
        uint _2999 = _2966.z;
        float _3112;
        float _3114;
        float _3116;
        float _3118;
        float _3120;
        float _3122;
        if (((((1u << ((_2999 >> 4u) & 15u)) + 4294967295u) & _2998) == 0u) || ((_2999 & 240u) == 0u))
        {
            _3112 = 0.0;
            _3114 = 0.0;
            _3116 = 0.0;
            _3118 = 0.0;
            _3120 = 0.0;
            _3122 = 0.0;
        }
        else
        {
            float _3113;
            float _3115;
            float _3117;
            float _3119;
            float _3121;
            float _3123;
            float _3265 = 0.0;
            float _3266 = 0.0;
            float _3267 = 0.0;
            float _3268 = 0.0;
            float _3269 = 0.0;
            float _3270 = 0.0;
            uint _3271 = 0u;
            uint _3280;
            bool _3281;
            for (;;)
            {
                _3280 = texelFetch(g_lightClassification, int((((_2992 << 5u) + (_2978 << 9u)) + (_3271 << 2u)) >> 2u)).x;
                _3281 = _3280 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3281)
                {
                    frontier_phi_68_pred = _3270;
                    frontier_phi_68_pred_1 = _3269;
                    frontier_phi_68_pred_2 = _3268;
                    frontier_phi_68_pred_3 = _3266;
                    frontier_phi_68_pred_4 = _3265;
                    frontier_phi_68_pred_5 = _3267;
                }
                else
                {
                    float _3389;
                    float _3390;
                    float _3391;
                    float _3392;
                    float _3393;
                    float _3394;
                    uint _3395;
                    _3389 = _3265;
                    _3390 = _3266;
                    _3391 = _3267;
                    _3392 = _3268;
                    _3393 = _3269;
                    _3394 = _3270;
                    _3395 = _3280;
                    float _3321;
                    float _3322;
                    float _3323;
                    float _3324;
                    float _3325;
                    float _3326;
                    for (;;)
                    {
                        uint _3399 = uint(findLSB(_3395)) + (_3271 << 5u);
                        uint _3396 = (_3395 + 4294967295u) & _3395;
                        uint _3401 = _3399 * 48u;
                        vec4 _3415 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3401)).x, texelFetch(g_PointLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3401 + 3u)).x));
                        uint _3421 = (_3399 * 48u) + 4u;
                        vec4 _3434 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3421)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 3u)).x));
                        uint _3440 = (_3399 * 48u) + 8u;
                        vec3 _3451 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3440)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 2u)).x));
                        float _3455 = _3415.x - _2058;
                        float _3456 = _3415.y - _2059;
                        float _3457 = _3415.z - _2060;
                        float _3458 = dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457));
                        float _3461 = inversesqrt(_3458);
                        float _3462 = _3461 * _3455;
                        float _3463 = _3461 * _3456;
                        float _3464 = _3461 * _3457;
                        float _3465 = dot(vec3(_879, _882, _885), vec3(_3462, _3463, _3464));
                        float _3470 = 1.0 - (_3458 * _3415.w);
                        float _4810 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                        float _3471 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                        float _3472 = sqrt(_3458) * _3434.w;
                        float _3475 = 1.39999997615814208984375 / (_3472 + 1.39999997615814208984375);
                        float _3476 = _3475 * _3475;
                        float _3479 = ((1.0 - _3476) * _3465) + _3476;
                        float _3482 = _3472 * _3472;
                        float _3486 = ((isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0))) * _3471) / ((_3482 * 0.699999988079071044921875) + 1.0);
                        float _3490 = (-0.0) - _2058;
                        float _3491 = (-0.0) - _2059;
                        float _3492 = (-0.0) - _2060;
                        float _3496 = inversesqrt(dot(vec3(_3490, _3491, _3492), vec3(_3490, _3491, _3492)));
                        float _3497 = _3496 * _3490;
                        float _3498 = _3496 * _3491;
                        float _3499 = _3496 * _3492;
                        float _3506 = exp2(log2(1.0 / ((_3482 * 3.5) + 5.0)) * 0.25);
                        float _3507 = 1.0 - _999;
                        float _3514 = sqrt(1.0 - ((1.0 - (_3507 * _3507)) * (1.0 - (_3506 * _3506))));
                        float _3515 = _3514 * _3514;
                        float _3516 = _3515 * _3515;
                        float _3517 = _3497 + _3462;
                        float _3518 = _3498 + _3463;
                        float _3519 = _3499 + _3464;
                        float _3523 = inversesqrt(dot(vec3(_3517, _3518, _3519), vec3(_3517, _3518, _3519)));
                        float _3527 = dot(vec3(_879, _882, _885), vec3(_3497, _3498, _3499));
                        float _4826 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                        float _3530 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                        float _3531 = dot(vec3(_879, _882, _885), vec3(_3523 * _3517, _3523 * _3518, _3523 * _3519));
                        float _4837 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                        float _3534 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                        float _3538 = ((_3534 * _3534) * (_3516 + (-1.0))) + 1.0;
                        float _3539 = _3475 * _3515;
                        float _3540 = _3539 * _3539;
                        float _3543 = ((1.0 - _3540) * _3465) + _3540;
                        float _4848 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                        float _3544 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                        float _3545 = 1.0 - _3515;
                        float _3555 = (0.5 / (((_3544 * ((_3530 * _3545) + _3515)) + 9.9999999392252902907785028219223e-09) + (((_3544 * _3545) + _3515) * _3530))) * _3544;
                        float _4859 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                        float _3566 = (((_3516 * 3.1415927410125732421875) * (isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0)))) / ((_3538 * _3538) * ((_3482 * 2.1991131305694580078125) + 3.141590118408203125))) * _3471;
                        _3324 = (_3486 * _3434.x) + _3392;
                        _3325 = (_3486 * _3434.y) + _3393;
                        _3326 = (_3486 * _3434.z) + _3394;
                        _3321 = (_3566 * _3451.x) + _3389;
                        _3322 = (_3566 * _3451.y) + _3390;
                        _3323 = (_3566 * _3451.z) + _3391;
                        if (_3396 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3389 = _3321;
                            _3390 = _3322;
                            _3391 = _3323;
                            _3392 = _3324;
                            _3393 = _3325;
                            _3394 = _3326;
                            _3395 = _3396;
                        }
                    }
                    frontier_phi_68_pred = _3326;
                    frontier_phi_68_pred_1 = _3325;
                    frontier_phi_68_pred_2 = _3324;
                    frontier_phi_68_pred_3 = _3322;
                    frontier_phi_68_pred_4 = _3321;
                    frontier_phi_68_pred_5 = _3323;
                }
                _3123 = frontier_phi_68_pred;
                _3121 = frontier_phi_68_pred_1;
                _3119 = frontier_phi_68_pred_2;
                _3115 = frontier_phi_68_pred_3;
                _3113 = frontier_phi_68_pred_4;
                _3117 = frontier_phi_68_pred_5;
                uint _3272 = _3271 + 1u;
                if (_3272 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3265 = _3113;
                    _3266 = _3115;
                    _3267 = _3117;
                    _3268 = _3119;
                    _3269 = _3121;
                    _3270 = _3123;
                    _3271 = _3272;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3112 = _3113;
            _3114 = _3115;
            _3116 = _3117;
            _3118 = _3119;
            _3120 = _3121;
            _3122 = _3123;
        }
        uvec4 _3126 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3127 = _3126.z;
        uint _3129 = (_3127 >> 8u) & 15u;
        float _3233;
        float _3235;
        float _3237;
        float _3239;
        float _3241;
        float _3243;
        if (((4294967295u << _3129) & _2998) == 0u)
        {
            _3233 = _3112;
            _3235 = _3114;
            _3237 = _3116;
            _3239 = _3118;
            _3241 = _3120;
            _3243 = _3122;
        }
        else
        {
            float _3258 = inversesqrt(dot(vec3(_2058, _2059, _2060), vec3(_2058, _2059, _2060)));
            float _3259 = _3258 * _2058;
            float _3260 = _3258 * _2059;
            float _3261 = _3258 * _2060;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3129 < ((_3127 >> 12u) & 15u))
            {
                float _3234;
                float _3236;
                float _3238;
                float _3240;
                float _3242;
                float _3244;
                float _3372 = _3112;
                float _3373 = _3114;
                float _3374 = _3116;
                float _3375 = _3118;
                float _3376 = _3120;
                float _3377 = _3122;
                uint _3378 = _3129;
                uint _3387;
                bool _3388;
                for (;;)
                {
                    _3387 = texelFetch(g_lightClassification, int((((_2992 << 5u) + (_2978 << 9u)) + (_3378 << 2u)) >> 2u)).x;
                    _3388 = _3387 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3388)
                    {
                        frontier_phi_74_pred = _3374;
                        frontier_phi_74_pred_1 = _3373;
                        frontier_phi_74_pred_2 = _3372;
                        frontier_phi_74_pred_3 = _3377;
                        frontier_phi_74_pred_4 = _3376;
                        frontier_phi_74_pred_5 = _3375;
                    }
                    else
                    {
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3864;
                        float _3865;
                        float _3866;
                        float _3867;
                        float _3868;
                        float _3869;
                        float _3584 = _3372;
                        float _3585 = _3373;
                        float _3586 = _3374;
                        float _3587 = _3375;
                        float _3588 = _3376;
                        float _3589 = _3377;
                        uint _3590 = _3387;
                        uint _3591;
                        vec4 _3616;
                        float _3617;
                        vec4 _3632;
                        vec3 _3644;
                        vec4 _3659;
                        vec4 _3674;
                        float _3720;
                        bool _3721;
                        for (;;)
                        {
                            uint _3601 = ((_3378 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3590));
                            _3591 = (_3590 + 4294967295u) & _3590;
                            uint _3603 = _3601 * 40u;
                            _3616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 3u)).x));
                            _3617 = _3616.w;
                            uint _3619 = (_3601 * 40u) + 4u;
                            _3632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 3u)).x));
                            uint _3634 = (_3601 * 40u) + 8u;
                            _3644 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x));
                            uint _3646 = (_3601 * 40u) + 16u;
                            _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            uint _3661 = (_3601 * 40u) + 20u;
                            _3674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 3u)).x));
                            uint _3676 = (_3601 * 40u) + 24u;
                            vec4 _3689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 3u)).x));
                            uint _3695 = (_3601 * 40u) + 28u;
                            vec4 _3708 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3695)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 3u)).x));
                            _3720 = fma(_2060, _3708.z, fma(_2059, _3708.y, _3708.x * _2058)) + _3708.w;
                            _3721 = !((fma(_2060, _3689.z, fma(_2059, _3689.y, _3689.x * _2058)) + _3689.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3721)
                            {
                                float _3748 = _3616.x - _2058;
                                float _3749 = _3616.y - _2059;
                                float _3750 = _3616.z - _2060;
                                float _3751 = dot(vec3(_3748, _3749, _3750), vec3(_3748, _3749, _3750));
                                float _3754 = inversesqrt(_3751);
                                float _3755 = _3754 * _3748;
                                float _3756 = _3754 * _3749;
                                float _3757 = _3754 * _3750;
                                float _3761 = 1.0 - (_3751 / (_3617 * _3617));
                                float _4870 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                                float _3762 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                                float _3766 = sqrt(_3751) * _3632.w;
                                float _3768 = 1.39999997615814208984375 / (_3766 + 1.39999997615814208984375);
                                float _3769 = _3768 * _3768;
                                float _3772 = ((1.0 - _3769) * dot(vec3(_3755, _3756, _3757), vec3(_879, _882, _885))) + _3769;
                                float _3775 = _3766 * _3766;
                                float _3779 = (fma(_2060, _3659.z, fma(_2059, _3659.y, _3659.x * _2058)) + _3659.w) / _3720;
                                float _3780 = (fma(_2060, _3674.z, fma(_2059, _3674.y, _3674.x * _2058)) + _3674.w) / _3720;
                                float _3784 = 1.0 - dot(vec2(_3779, _3780), vec2(_3779, _3780));
                                float _4886 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3785 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                                float _3786 = _3785 * (((isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0))) * _3762) / ((_3775 * 0.699999988079071044921875) + 1.0));
                                float _3798 = exp2(log2(1.0 / ((_3775 * 3.5) + 5.0)) * 0.25);
                                float _3799 = 1.0 - _999;
                                float _3806 = sqrt(1.0 - ((1.0 - (_3799 * _3799)) * (1.0 - (_3798 * _3798))));
                                float _3807 = _3806 * _3806;
                                float _3808 = _3807 * _3807;
                                float _3809 = _3755 - _3259;
                                float _3810 = _3756 - _3260;
                                float _3811 = _3757 - _3261;
                                float _3815 = inversesqrt(dot(vec3(_3809, _3810, _3811), vec3(_3809, _3810, _3811)));
                                float _3819 = dot(vec3(_879, _882, _885), vec3((-0.0) - _3259, (-0.0) - _3260, (-0.0) - _3261));
                                float _4897 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                                float _3822 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                                float _3823 = dot(vec3(_879, _882, _885), vec3(_3815 * _3809, _3815 * _3810, _3815 * _3811));
                                float _4908 = isnan(0.0) ? _3823 : (isnan(_3823) ? 0.0 : max(_3823, 0.0));
                                float _3826 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                                float _3830 = ((_3826 * _3826) * (_3808 + (-1.0))) + 1.0;
                                float _3831 = _3768 * _3807;
                                float _3832 = _3831 * _3831;
                                float _3838 = ((1.0 - _3832) * dot(vec3(_879, _882, _885), vec3(_3755, _3756, _3757))) + _3832;
                                float _4919 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                                float _3839 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                                float _3840 = 1.0 - _3807;
                                float _3850 = (0.5 / (((_3839 * ((_3822 * _3840) + _3807)) + 9.9999999392252902907785028219223e-09) + (((_3839 * _3840) + _3807) * _3822))) * _3839;
                                float _4930 = isnan(0.0) ? _3850 : (isnan(_3850) ? 0.0 : max(_3850, 0.0));
                                float _3860 = (_3785 * _3762) * (((_3808 * 3.1415927410125732421875) * (isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0)))) / ((_3830 * _3830) * ((_3775 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3860 * _3644.z;
                                frontier_phi_80_pred_1 = _3860 * _3644.y;
                                frontier_phi_80_pred_2 = _3860 * _3644.x;
                                frontier_phi_80_pred_3 = _3786 * _3632.z;
                                frontier_phi_80_pred_4 = _3786 * _3632.y;
                                frontier_phi_80_pred_5 = _3786 * _3632.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3866 = frontier_phi_80_pred;
                            _3865 = frontier_phi_80_pred_1;
                            _3864 = frontier_phi_80_pred_2;
                            _3869 = frontier_phi_80_pred_3;
                            _3868 = frontier_phi_80_pred_4;
                            _3867 = frontier_phi_80_pred_5;
                            _3574 = _3867 + _3587;
                            _3575 = _3868 + _3588;
                            _3576 = _3869 + _3589;
                            _3571 = _3864 + _3584;
                            _3572 = _3865 + _3585;
                            _3573 = _3866 + _3586;
                            if (_3591 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3573;
                                _3587 = _3574;
                                _3588 = _3575;
                                _3589 = _3576;
                                _3590 = _3591;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3573;
                        frontier_phi_74_pred_1 = _3572;
                        frontier_phi_74_pred_2 = _3571;
                        frontier_phi_74_pred_3 = _3576;
                        frontier_phi_74_pred_4 = _3575;
                        frontier_phi_74_pred_5 = _3574;
                    }
                    _3238 = frontier_phi_74_pred;
                    _3236 = frontier_phi_74_pred_1;
                    _3234 = frontier_phi_74_pred_2;
                    _3244 = frontier_phi_74_pred_3;
                    _3242 = frontier_phi_74_pred_4;
                    _3240 = frontier_phi_74_pred_5;
                    uint _3379 = _3378 + 1u;
                    if (_3379 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3372 = _3234;
                        _3373 = _3236;
                        _3374 = _3238;
                        _3375 = _3240;
                        _3376 = _3242;
                        _3377 = _3244;
                        _3378 = _3379;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3242;
                frontier_phi_62_63_ladder_1 = _3240;
                frontier_phi_62_63_ladder_2 = _3238;
                frontier_phi_62_63_ladder_3 = _3244;
                frontier_phi_62_63_ladder_4 = _3236;
                frontier_phi_62_63_ladder_5 = _3234;
            }
            else
            {
                frontier_phi_62_63_ladder = _3120;
                frontier_phi_62_63_ladder_1 = _3118;
                frontier_phi_62_63_ladder_2 = _3116;
                frontier_phi_62_63_ladder_3 = _3122;
                frontier_phi_62_63_ladder_4 = _3114;
                frontier_phi_62_63_ladder_5 = _3112;
            }
            _3233 = frontier_phi_62_63_ladder_5;
            _3235 = frontier_phi_62_63_ladder_4;
            _3237 = frontier_phi_62_63_ladder_2;
            _3239 = frontier_phi_62_63_ladder_1;
            _3241 = frontier_phi_62_63_ladder;
            _3243 = frontier_phi_62_63_ladder_3;
        }
        float _3248 = isnan(1.0) ? _983 : (isnan(_983) ? 1.0 : min(_983, 1.0));
        _3010 = (_3248 * _3239) + _2523;
        _3012 = (_3248 * _3241) + _2525;
        _3014 = (_3248 * _3243) + _2527;
        _3016 = ((_3233 * _968) * _3248) + _2861;
        _3018 = ((_3235 * _970) * _3248) + _2863;
        _3020 = ((_3237 * _971) * _3248) + _2865;
    }
    else
    {
        _3010 = _2523;
        _3012 = _2525;
        _3014 = _2527;
        _3016 = _2861;
        _3018 = _2863;
        _3020 = _2865;
    }
    uint _3026 = _912 + uint(cbMatDynParam._m0[0u].w);
    float _3034 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[22u].z) * _711.x) * cbInstanceData._m0[_3026].x;
    float _3037 = ((cbMtdParam._m0[11u].y * cbMtdParam._m0[22u].z) * _711.y) * cbInstanceData._m0[_3026].y;
    float _3040 = ((cbMtdParam._m0[11u].z * cbMtdParam._m0[22u].z) * _711.z) * cbInstanceData._m0[_3026].z;
    float _4946 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _4957 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _4968 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _3057 = (((isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0))) * (_3010 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _983))) + ((_3016 + ((isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))) * _1792)) * cbPerFrame._m0[3u].x)) + _3034;
    float _3059 = (_3037 + ((_3018 + ((isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))) * _1792)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0))) * (_3012 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _983)));
    float _3061 = (_3040 + ((_3020 + ((isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))) * _1792)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0))) * (_3014 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _983)));
    float _4994 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3074 = isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0));
    uint _3075 = _911 + 6u;
    float _3083 = _855 / cbSceneParam._m0[86u].x;
    float _3084 = _856 / cbSceneParam._m0[86u].y;
    vec4 _3098 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3083, _3084, (log2((isnan(cbSceneParam._m0[77u].w) ? _790 : (isnan(_790) ? cbSceneParam._m0[77u].w : min(_790, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3100 = _3098.x;
    float _3101 = _3098.y;
    float _3102 = _3098.z;
    float _3103 = _3098.w;
    float _3174;
    float _3176;
    float _3178;
    float _3180;
    if (_790 > cbSceneParam._m0[78u].w)
    {
        float _3137 = isnan(_790) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _790 : min(cbSceneParam._m0[80u].w, _790));
        float _3138 = _3137 / _790;
        float _3149 = _3138 * _840;
        float _3150 = _841 * _3138;
        float _3151 = (-0.0) - _3150;
        float _3152 = _3138 * _842;
        float _3154 = (cbSceneParam._m0[77u].w * _3151) / _3137;
        float _3155 = _3154 + cbSceneParam._m0[79u].w;
        float _3156 = cbSceneParam._m0[79u].w - _3150;
        float _3162 = sqrt(((_3149 * _3149) + (_3150 * _3150)) + (_3152 * _3152));
        float _3165 = (1.0 - (cbSceneParam._m0[77u].w / _3137)) * _3162;
        float _3170 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3172 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3334;
        if (abs((_3151 - _3154) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3334 = ((((_3155 > 0.0) ? exp2(_3170 * _3155) : (2.0 - exp2(_3172 * _3155))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3165;
        }
        else
        {
            float _3294 = 1.0 / cbSceneParam._m0[80u].x;
            float _3295 = isnan(_3156) ? _3155 : (isnan(_3155) ? _3156 : max(_3155, _3156));
            float _3296 = isnan(_3156) ? _3155 : (isnan(_3155) ? _3156 : min(_3155, _3156));
            float _3305 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : min(_3295, 0.0));
            float _3306 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : min(_3296, 0.0));
            _3334 = ((abs(_3162 / _3151) * cbSceneParam._m0[80u].y) * ((((_3305 - _3306) * 2.0) - ((exp2(_3170 * (isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0)))) - exp2(_3170 * (isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0))))) * _3294)) - ((exp2(_3172 * _3305) - exp2(_3172 * _3306)) * _3294))) + (_3165 * cbSceneParam._m0[80u].z);
        }
        vec4 _3336 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3083, _3084, 1.0), 0.0);
        float _3345 = exp2((_3334 * (-1.44269502162933349609375)) * (1.0 - _3336.w));
        float _3346 = log2(_3345);
        float _3362 = log2(_3103);
        _3174 = (exp2(_3362 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3346 * cbSceneParam._m0[78u].x)) * _3336.x) / cbSceneParam._m0[78u].x)) + _3100;
        _3176 = (exp2(_3362 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3346 * cbSceneParam._m0[78u].y)) * _3336.y) / cbSceneParam._m0[78u].y)) + _3101;
        _3178 = (exp2(_3362 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3346 * cbSceneParam._m0[78u].z)) * _3336.z) / cbSceneParam._m0[78u].z)) + _3102;
        _3180 = _3345 * _3103;
    }
    else
    {
        _3174 = _3100;
        _3176 = _3101;
        _3178 = _3102;
        _3180 = _3103;
    }
    float _3192 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3193 = _3192 == 3.0;
    float _3194 = log2(_3180);
    float _3198 = exp2(_3194 * cbSceneParam._m0[78u].x);
    float _3199 = exp2(_3194 * cbSceneParam._m0[78u].y);
    float _3200 = exp2(_3194 * cbSceneParam._m0[78u].z);
    float _3201 = _3198 * (isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0)));
    float _3202 = _3199 * (isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0)));
    float _3203 = _3200 * (isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0)));
    float _3212 = (_3192 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3212 * (_3193 ? _3201 : (_3201 + (cbSceneParam._m0[72u].w * _3174)));
    SV_Target.y = _3212 * (_3193 ? _3202 : (_3202 + (cbSceneParam._m0[72u].w * _3176)));
    SV_Target.z = _3212 * (_3193 ? _3203 : (_3203 + (cbSceneParam._m0[72u].w * _3178)));
    SV_Target.w = cbInstanceData._m0[_3075].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3034) * _3074) * _3198) * _3212;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3037) * _3074) * _3199) * _3212;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3040) * _3074) * _3200) * _3212;
    SV_Target_1.w = cbInstanceData._m0[_3075].w;
}


