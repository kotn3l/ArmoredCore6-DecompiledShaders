#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1420;
float _3843;
float _3844;
float _3845;
float _3846;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = _239 * NORMAL.x;
    float _241 = _239 * NORMAL.y;
    float _242 = _239 * NORMAL.z;
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254;
    float _255;
    float _256;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _254 = (-0.0) - _240;
        _255 = (-0.0) - _241;
        _256 = (-0.0) - _242;
    }
    else
    {
        _254 = _240;
        _255 = _241;
        _256 = _242;
    }
    vec4 _274 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _288 = exp2(log2(_274.w * cbMtdParam._m0[23u].z) * cbMtdParam._m0[21u].y);
    float _289 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _290 = isnan(1.0) ? _289 : (isnan(_289) ? 1.0 : min(_289, 1.0));
    vec4 _304 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _308 = _304.z;
    float _309 = _304.w;
    float _317 = exp2(log2(_308 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _318 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _319 = isnan(1.0) ? _318 : (isnan(_318) ? 1.0 : min(_318, 1.0));
    vec4 _332 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _355 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _357 = _355.x;
    float _358 = _355.y;
    float _382 = ((cbMtdParam._m0[20u].w * _355.z) * (texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].z * TEXCOORD.x) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((cbMtdParam._m0[20u].z * TEXCOORD.y) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w)).x - _357)) + _357;
    bool _418 = _382 >= 0.25;
    bool _423 = _382 >= 0.3499999940395355224609375;
    bool _428 = _382 >= 0.5;
    bool _433 = _382 >= 0.64999997615814208984375;
    bool _438 = _382 >= 0.75;
    vec4 _466 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _476 = cbMtdParam._m0[9u].x * _466.x;
    float _477 = cbMtdParam._m0[9u].y * _466.y;
    float _478 = cbMtdParam._m0[9u].z * _466.z;
    float _485 = (((((((_438 ? cbMtdParam._m0[14u].x : (_433 ? cbMtdParam._m0[19u].x : (_428 ? cbMtdParam._m0[18u].x : (_423 ? cbMtdParam._m0[17u].x : (_418 ? cbMtdParam._m0[16u].x : cbMtdParam._m0[15u].x))))) - cbMtdParam._m0[10u].x) * _358) + cbMtdParam._m0[10u].x) * _332.x) - _476) * _319) + _476;
    float _486 = (((((((_438 ? cbMtdParam._m0[14u].y : (_433 ? cbMtdParam._m0[19u].y : (_428 ? cbMtdParam._m0[18u].y : (_423 ? cbMtdParam._m0[17u].y : (_418 ? cbMtdParam._m0[16u].y : cbMtdParam._m0[15u].y))))) - cbMtdParam._m0[10u].y) * _358) + cbMtdParam._m0[10u].y) * _332.y) - _477) * _319) + _477;
    float _487 = (((((((_438 ? cbMtdParam._m0[14u].z : (_433 ? cbMtdParam._m0[19u].z : (_428 ? cbMtdParam._m0[18u].z : (_423 ? cbMtdParam._m0[17u].z : (_418 ? cbMtdParam._m0[16u].z : cbMtdParam._m0[15u].z))))) - cbMtdParam._m0[10u].z) * _358) + cbMtdParam._m0[10u].z) * _332.z) - _478) * _319) + _478;
    float _494 = exp2(log2(_309) * cbMtdParam._m0[22u].y);
    vec4 _507 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _527 = (((cbMtdParam._m0[12u].x * _507.x) - _485) * _494) + _485;
    float _528 = (((cbMtdParam._m0[12u].y * _507.y) - _486) * _494) + _486;
    float _529 = (((cbMtdParam._m0[12u].z * _507.z) - _487) * _494) + _487;
    vec4 _541 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _565 = (_274.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _541.x) - _527) * _290) + _527);
    float _567 = (_274.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _541.y) - _528) * _290) + _528);
    float _569 = (_274.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _541.z) - _529) * _290) + _529);
    float _574 = exp2(log2(1.0 - _309) * 0.00999999977648258209228515625);
    float _592 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[22u].w) * _574) + cbMtdParam._m0[22u].w;
    float _611 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _592) + cbMtdParam._m0[21u].z) * _494) + _592;
    float _631 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _611) + cbMtdParam._m0[23u].w) * _290) + _611;
    vec4 _644 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _662 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _664 = _662.x;
    float _665 = _662.y;
    float _668 = cbMtdParam._m0[20u].x + _662.z;
    float _671 = (((cbMtdParam._m0[21u].x + _644.z) - _668) * _574) + _668;
    vec4 _683 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _695 = (_308 * 2.0) * ((((_683.z - _671) + cbMtdParam._m0[23u].y) * _494) + _671);
    vec4 _707 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _716 = (((_707.z - _695) + cbMtdParam._m0[22u].x) * _290) + _695;
    vec4 _735 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _750 = ((_644.x - _664) * _574) + _664;
    float _751 = ((_644.y - _665) * _574) + _665;
    float _756 = ((_683.x - _750) * _494) + _750;
    float _757 = ((_683.y - _751) * _494) + _751;
    float _766 = ((((_707.x - _756) * _290) + _756) * 2.0) + (-1.0);
    float _767 = ((((_707.y - _757) * _290) + _757) * 2.0) + (-1.0);
    float _768 = dot(vec2(_766, _767), vec2(_766, _767));
    float _3875 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _773 = sqrt(1.0 - (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))));
    float _776 = (cbMtdParam._m0[23u].x * ((_304.x * 2.0) + (-1.0))) + _766;
    float _777 = (cbMtdParam._m0[23u].x * ((_304.y * 2.0) + (-1.0))) + _767;
    float _780 = fma(_773, _254, fma(_777, _246 * TANGENT.x, (_232 * _225) * _776));
    float _783 = fma(_773, _255, fma(_777, _246 * TANGENT.y, (_232 * _226) * _776));
    float _786 = fma(_773, _256, fma(_777, _246 * TANGENT.z, (_232 * _227) * _776));
    float _790 = inversesqrt(dot(vec3(_780, _783, _786), vec3(_780, _783, _786)));
    float _791 = _790 * _780;
    float _792 = _790 * _783;
    float _793 = _790 * _786;
    float _3886 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _794 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3908 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _3919 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _3930 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _798 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _814 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _854 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _864 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _854);
    float _865 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _854);
    float _866 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _854);
    float _870 = inversesqrt(dot(vec3(_864, _865, _866), vec3(_864, _865, _866)));
    float _871 = _864 * _870;
    float _872 = _865 * _870;
    float _873 = _866 * _870;
    vec4 _878 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _880 = _878.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1101 = sqrt(((_864 * _864) + (_865 * _865)) + (_866 * _866));
        float _1107 = (cbMatDynParam._m0[5u].x * _1101) + cbMatDynParam._m0[5u].y;
        float _3941 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1112 = (cbMatDynParam._m0[5u].z * _1101) + cbMatDynParam._m0[5u].w;
        float _3952 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) - _1108)) + _1108) < ((_880 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _891 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _892 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _894 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _896 = _894.w;
    float _914 = fma(_793, cbSceneParam._m0[5u].z, fma(_792, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _791));
    float _917 = fma(_793, cbSceneParam._m0[6u].z, fma(_792, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _791));
    float _920 = fma(_793, cbSceneParam._m0[7u].z, fma(_792, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _791));
    vec4 _922 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _933 = (((_922.y - _794) + (_922.w * _794)) * cbMtdParam._m0[3u].x) + _794;
    uint _946 = uint(roundEven(NORMAL.w)) * 13u;
    uint _947 = _946 + 9u;
    uint _948 = _947 + uint(cbMatDynParam._m0[0u].w);
    float _954 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) * cbInstanceData._m0[_948].x;
    float _955 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) * cbInstanceData._m0[_948].y;
    float _956 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) * cbInstanceData._m0[_948].z;
    float _3963 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _957 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _3974 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _958 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _3985 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _959 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    vec4 _960 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _965 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _976 = (((_965.x - _798) + (_965.w * _798)) * cbMtdParam._m0[3u].x) + _798;
    float _989 = (cbMtdParam._m0[3u].x * (((_957 * _896) - _957) + _960.x)) + _957;
    float _990 = (cbMtdParam._m0[3u].x * (((_958 * _896) - _958) + _960.y)) + _958;
    float _991 = (cbMtdParam._m0[3u].x * (((_959 * _896) - _959) + _960.z)) + _959;
    float _992 = 1.0 - _976;
    float _993 = _992 * _989;
    float _994 = _992 * _990;
    float _995 = _992 * _991;
    float _1000 = (_989 + (-0.039999999105930328369140625)) * _976;
    float _1001 = (_990 + (-0.039999999105930328369140625)) * _976;
    float _1002 = (_991 + (-0.039999999105930328369140625)) * _976;
    float _1003 = _1000 + 0.039999999105930328369140625;
    float _1005 = _1001 + 0.039999999105930328369140625;
    float _1006 = _1002 + 0.039999999105930328369140625;
    vec4 _1015 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _891, cbSceneParam._m0[86u].y * _892));
    float _1018 = _1015.x * TEXCOORD_4.z;
    float _1019 = dot(vec3(_791, _792, _793), vec3(_871, _872, _873));
    float _1022 = _1019 * 2.0;
    float _1026 = (_1022 * _791) - _871;
    float _1027 = (_1022 * _792) - _872;
    float _1028 = (_1022 * _793) - _873;
    float _1032 = abs(dot(vec3(_871, _872, _873), vec3(_791, _792, _793)));
    float _3996 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _1034 = sqrt(_933);
    float _1047 = exp2((_1034 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1034 * 3.0));
    float _1053 = (1.0 - _1047) * ((_1034 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1054 = _1047 * _1034;
    float _1082 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1086 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1090 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1419;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1145 = fma(_1090, cbModelParam._m0[26u].z, fma(_1086, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1082));
        float _1149 = fma(_1090, cbModelParam._m0[27u].z, fma(_1086, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1082));
        float _1153 = fma(_1090, cbModelParam._m0[28u].z, fma(_1086, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1082));
        float _1177 = _1082 + _791;
        float _1178 = _1086 + _792;
        float _1179 = _1090 + _793;
        float _1189 = fma(_1179, cbModelParam._m0[26u].z, fma(_1178, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1177)) - _1145;
        float _1190 = fma(_1179, cbModelParam._m0[27u].z, fma(_1178, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1177)) - _1149;
        float _1191 = fma(_1179, cbModelParam._m0[28u].z, fma(_1178, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1177)) - _1153;
        float _1195 = inversesqrt(dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191)));
        float _1208 = ((_1195 * _1189) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1145 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1209 = ((_1195 * _1190) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1149 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1210 = ((_1195 * _1191) / cbModelParam._m0[34u].z) + ((((((_1153 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        float _1247 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1213.x + (-0.5));
        float _1249 = _1247 * (_1213.y + (-0.5));
        float _1250 = _1247 * (_1213.z + (-0.5));
        float _1257 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1220.x + (-0.5));
        float _1259 = _1257 * (_1220.y + (-0.5));
        float _1260 = _1257 * (_1220.z + (-0.5));
        float _1267 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1227.x + (-0.5));
        float _1269 = _1267 * (_1227.y + (-0.5));
        float _1270 = _1267 * (_1227.z + (-0.5));
        float _1277 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1234.x + (-0.5));
        float _1279 = _1277 * (_1234.y + (-0.5));
        float _1280 = _1277 * (_1234.z + (-0.5));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = _1248 * 0.5;
        float _1285 = _1258 * 0.5;
        float _1286 = _1268 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1301 = (dot(vec3(_791, _792, _793), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1311 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _4044 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1313 + 1.0))) + _1318) * _1281;
        float _1328 = _1249 * 0.5;
        float _1329 = _1259 * 0.5;
        float _1330 = _1269 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_791, _792, _793), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _4077 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1355 + 1.0))) + _1360) * _1282;
        float _1370 = _1250 * 0.5;
        float _1371 = _1260 * 0.5;
        float _1372 = _1270 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1386 = (dot(vec3(_791, _792, _793), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _4088 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1395 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _4099 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _4110 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1397 + 1.0))) + _1402) * _1283;
        _1419 = _1250;
        _1421 = _1249;
        _1422 = _1248;
        _1423 = _1260;
        _1424 = _1259;
        _1425 = _1258;
        _1426 = _1270;
        _1427 = _1269;
        _1428 = _1268;
        _1429 = _1283;
        _1430 = _1282;
        _1431 = _1281;
        _1432 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1433 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
        _1434 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
    }
    else
    {
        _1419 = _1420;
        _1421 = _1420;
        _1422 = _1420;
        _1423 = _1420;
        _1424 = _1420;
        _1425 = _1420;
        _1426 = _1420;
        _1427 = _1420;
        _1428 = _1420;
        _1429 = _1420;
        _1430 = _1420;
        _1431 = _1420;
        _1432 = 0.0;
        _1433 = 0.0;
        _1434 = 0.0;
    }
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1463 = fma(_1090, cbModelParam._m0[30u].z, fma(_1086, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1082));
        float _1467 = fma(_1090, cbModelParam._m0[31u].z, fma(_1086, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1082));
        float _1471 = fma(_1090, cbModelParam._m0[32u].z, fma(_1086, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1082));
        float _1494 = _1082 + _791;
        float _1495 = _1086 + _792;
        float _1496 = _1090 + _793;
        float _1506 = fma(_1496, cbModelParam._m0[30u].z, fma(_1495, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1494)) - _1463;
        float _1507 = fma(_1496, cbModelParam._m0[31u].z, fma(_1495, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1494)) - _1467;
        float _1508 = fma(_1496, cbModelParam._m0[32u].z, fma(_1495, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1494)) - _1471;
        float _1512 = inversesqrt(dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508)));
        float _1525 = ((_1512 * _1506) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1463 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1526 = ((_1512 * _1507) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1467 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1527 = ((_1512 * _1508) / cbModelParam._m0[35u].z) + ((((((_1471 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        vec4 _1543 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        vec4 _1550 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        float _1562 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1563 = _1562 * (_1529.x + (-0.5));
        float _1564 = _1562 * (_1529.y + (-0.5));
        float _1565 = _1562 * (_1529.z + (-0.5));
        float _1572 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = _1572 * (_1536.x + (-0.5));
        float _1574 = _1572 * (_1536.y + (-0.5));
        float _1575 = _1572 * (_1536.z + (-0.5));
        float _1582 = exp2((_1543.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = _1582 * (_1543.x + (-0.5));
        float _1584 = _1582 * (_1543.y + (-0.5));
        float _1585 = _1582 * (_1543.z + (-0.5));
        float _1592 = exp2((_1550.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1550.x + (-0.5));
        float _1594 = _1592 * (_1550.y + (-0.5));
        float _1595 = _1592 * (_1550.z + (-0.5));
        float _1596 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1597 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1598 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1599 = _1563 * 0.5;
        float _1600 = _1573 * 0.5;
        float _1601 = _1583 * 0.5;
        float _1602 = dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601));
        float _1607 = (_1602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1602);
        float _1615 = (dot(vec3(_791, _792, _793), vec3(_1607 * _1599, _1607 * _1600, _1607 * _1601)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1624 = sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601)) / (_1596 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1626 = _1625 * 2.0;
        float _1630 = (1.0 - _1625) / (_1625 + 1.0);
        float _4173 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1640 = ((((1.0 - _1631) * (_1626 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1626 + 1.0))) + _1631) * _1596;
        float _1641 = _1564 * 0.5;
        float _1642 = _1574 * 0.5;
        float _1643 = _1584 * 0.5;
        float _1644 = dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643));
        float _1649 = (_1644 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1644);
        float _1657 = (dot(vec3(_791, _792, _793), vec3(_1649 * _1641, _1649 * _1642, _1649 * _1643)) + 1.0) * 0.5;
        float _4184 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1666 = sqrt(((_1642 * _1642) + (_1641 * _1641)) + (_1643 * _1643)) / (_1597 + 9.9999997473787516355514526367188e-06);
        float _4195 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1668 = _1667 * 2.0;
        float _1672 = (1.0 - _1667) / (_1667 + 1.0);
        float _4206 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1682 = ((((1.0 - _1673) * (_1668 + 2.0)) * exp2(log2(isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1668 + 1.0))) + _1673) * _1597;
        float _1683 = _1565 * 0.5;
        float _1684 = _1575 * 0.5;
        float _1685 = _1585 * 0.5;
        float _1686 = dot(vec3(_1683, _1684, _1685), vec3(_1683, _1684, _1685));
        float _1691 = (_1686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1686);
        float _1699 = (dot(vec3(_791, _792, _793), vec3(_1691 * _1683, _1691 * _1684, _1691 * _1685)) + 1.0) * 0.5;
        float _4217 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1708 = sqrt(((_1684 * _1684) + (_1683 * _1683)) + (_1685 * _1685)) / (_1598 + 9.9999997473787516355514526367188e-06);
        float _4228 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1710 = _1709 * 2.0;
        float _1714 = (1.0 - _1709) / (_1709 + 1.0);
        float _4239 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1724 = ((((1.0 - _1715) * (_1710 + 2.0)) * exp2(log2(isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_1710 + 1.0))) + _1715) * _1598;
        _1732 = _1565;
        _1733 = _1564;
        _1734 = _1563;
        _1735 = _1575;
        _1736 = _1574;
        _1737 = _1573;
        _1738 = _1585;
        _1739 = _1584;
        _1740 = _1583;
        _1741 = _1598;
        _1742 = _1597;
        _1743 = _1596;
        _1744 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)));
        _1745 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)));
        _1746 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)));
    }
    else
    {
        _1732 = _1420;
        _1733 = _1420;
        _1734 = _1420;
        _1735 = _1420;
        _1736 = _1420;
        _1737 = _1420;
        _1738 = _1420;
        _1739 = _1420;
        _1740 = _1420;
        _1741 = _1420;
        _1742 = _1420;
        _1743 = _1420;
        _1744 = 0.0;
        _1745 = 0.0;
        _1746 = 0.0;
    }
    float _1756 = (cbModelParam._m0[1u].x * (_1744 - _1432)) + _1432;
    float _1757 = (cbModelParam._m0[1u].x * (_1745 - _1433)) + _1433;
    float _1758 = (cbModelParam._m0[1u].x * (_1746 - _1434)) + _1434;
    float _1779 = fma(_1758, cbSceneParam._m0[89u].z, fma(_1757, cbSceneParam._m0[89u].y, _1756 * cbSceneParam._m0[89u].x));
    float _1782 = fma(_1758, cbSceneParam._m0[90u].z, fma(_1757, cbSceneParam._m0[90u].y, _1756 * cbSceneParam._m0[90u].x));
    float _1785 = fma(_1758, cbSceneParam._m0[91u].z, fma(_1757, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1756));
    float _1800 = _1026 * 0.5;
    float _1801 = _1027 * 0.5;
    float _1802 = _1028 * 0.5;
    float _1803 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1734, _1737, _1740, _1743));
    float _1806 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1733, _1736, _1739, _1742));
    float _1809 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1732, _1735, _1738, _1741));
    float _1843;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1816 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1419, _1423, _1426, _1429));
        float _1820 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1421, _1424, _1427, _1430));
        float _1824 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1422, _1425, _1428, _1431));
        float _1831 = dot(vec4(cbModelParam._m0[39u]), vec4(_1800, _1801, _1802, 1.0));
        _1843 = dot(vec3(isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0)), isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0)), isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1831) ? 0.0 : (isnan(0.0) ? _1831 : max(0.0, _1831))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1843 = 1.0;
    }
    float _1854;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1845 = dot(vec4(cbModelParam._m0[40u]), vec4(_1800, _1801, _1802, 1.0));
        _1854 = dot(vec3(isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1845) ? 0.0 : (isnan(0.0) ? _1845 : max(0.0, _1845))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1854 = 1.0;
    }
    float _1858 = (_1854 * cbModelParam._m0[1u].x) + (_1843 * (1.0 - cbModelParam._m0[1u].x));
    float _1868 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _933);
    float _1869 = isnan(_1868) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1868 : min(cbModelParam._m0[25u].z, _1868));
    float _1949;
    float _1951;
    float _1953;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1916 = fma(_1090, cbModelParam._m0[13u].z, fma(_1086, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1082)) + cbModelParam._m0[13u].w;
        float _1920 = fma(_1090, cbModelParam._m0[14u].z, fma(_1086, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1082)) + cbModelParam._m0[14u].w;
        float _1924 = fma(_1090, cbModelParam._m0[15u].z, fma(_1086, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1082)) + cbModelParam._m0[15u].w;
        float _1927 = fma(_1028, cbModelParam._m0[13u].z, fma(_1027, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1026));
        float _1930 = fma(_1028, cbModelParam._m0[14u].z, fma(_1027, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1026));
        float _1933 = fma(_1028, cbModelParam._m0[15u].z, fma(_1027, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1026));
        float _1961;
        if (_1927 > 0.0)
        {
            _1961 = abs((1.0 - _1916) / _1927);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1916 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1961 = frontier_phi_19_17_ladder;
        }
        float _2163;
        if (_1930 > 0.0)
        {
            _2163 = abs((1.0 - _1920) / _1930);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1920 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2163 = frontier_phi_28_24_ladder;
        }
        float _2417;
        if (_1933 > 0.0)
        {
            _2417 = abs((1.0 - _1924) / _1933);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1924 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2417 = frontier_phi_40_35_ladder;
        }
        float _2419 = isnan(_2163) ? _1961 : (isnan(_1961) ? _2163 : min(_1961, _2163));
        float _2420 = isnan(_2417) ? _2419 : (isnan(_2419) ? _2417 : min(_2419, _2417));
        float _2424 = (_2420 * _1927) + _1916;
        float _2425 = (_2420 * _1930) + _1920;
        float _2426 = (_2420 * _1933) + _1924;
        float _2427 = _2420 * 9.9999997473787516355514526367188e-05;
        float _2429 = (-1.0) - _2427;
        float _2431 = _2427 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2426 > _2431) || ((_2426 < _2429) || ((_2425 > _2431) || ((_2425 < _2429) || ((_2424 < _2429) || (_2424 > _2431))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2554 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2426, cbModelParam._m0[9u].z, fma(_2425, cbModelParam._m0[9u].y, _2424 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2426, cbModelParam._m0[10u].z, fma(_2425, cbModelParam._m0[10u].y, _2424 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2426, cbModelParam._m0[11u].z, fma(_2425, cbModelParam._m0[11u].y, _2424 * cbModelParam._m0[11u].x))), _1869);
            frontier_phi_18_40_ladder = _2554.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2554.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2554.x * cbModelParam._m0[1u].y;
        }
        _1949 = frontier_phi_18_40_ladder_2;
        _1951 = frontier_phi_18_40_ladder_1;
        _1953 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1937 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1026, _1027, _1028), _1869);
        _1949 = _1937.x * cbModelParam._m0[1u].y;
        _1951 = _1937.y * cbModelParam._m0[1u].y;
        _1953 = _1937.z * cbModelParam._m0[1u].y;
    }
    float _1957 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _933);
    float _1958 = isnan(_1957) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1957 : min(cbModelParam._m0[25u].w, _1957));
    float _2047;
    float _2049;
    float _2051;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2011 = fma(_1090, cbModelParam._m0[21u].z, fma(_1086, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1082)) + cbModelParam._m0[21u].w;
        float _2015 = fma(_1090, cbModelParam._m0[22u].z, fma(_1086, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1082)) + cbModelParam._m0[22u].w;
        float _2019 = fma(_1090, cbModelParam._m0[23u].z, fma(_1086, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1082)) + cbModelParam._m0[23u].w;
        float _2022 = fma(_1028, cbModelParam._m0[21u].z, fma(_1027, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1026));
        float _2025 = fma(_1028, cbModelParam._m0[22u].z, fma(_1027, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1026));
        float _2028 = fma(_1028, cbModelParam._m0[23u].z, fma(_1027, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1026));
        float _2168;
        if (_2022 > 0.0)
        {
            _2168 = abs((1.0 - _2011) / _2022);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2022 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2011 + 1.0) / _2022);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2168 = frontier_phi_30_26_ladder;
        }
        float _2444;
        if (_2025 > 0.0)
        {
            _2444 = abs((1.0 - _2015) / _2025);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2015 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2444 = frontier_phi_42_37_ladder;
        }
        float _2657;
        if (_2028 > 0.0)
        {
            _2657 = abs((1.0 - _2019) / _2028);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2028 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2019 + 1.0) / _2028);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2657 = frontier_phi_51_48_ladder;
        }
        float _2659 = isnan(_2444) ? _2168 : (isnan(_2168) ? _2444 : min(_2168, _2444));
        float _2660 = isnan(_2657) ? _2659 : (isnan(_2659) ? _2657 : min(_2659, _2657));
        float _2664 = (_2660 * _2022) + _2011;
        float _2665 = (_2660 * _2025) + _2015;
        float _2666 = (_2660 * _2028) + _2019;
        float _2667 = _2660 * 9.9999997473787516355514526367188e-05;
        float _2668 = (-1.0) - _2667;
        float _2670 = _2667 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2666 > _2670) || ((_2666 < _2668) || ((_2665 > _2670) || ((_2665 < _2668) || ((_2664 < _2668) || (_2664 > _2670))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2899 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2666, cbModelParam._m0[17u].z, fma(_2665, cbModelParam._m0[17u].y, _2664 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2666, cbModelParam._m0[18u].z, fma(_2665, cbModelParam._m0[18u].y, _2664 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2666, cbModelParam._m0[19u].z, fma(_2665, cbModelParam._m0[19u].y, _2664 * cbModelParam._m0[19u].x))), _1958);
            frontier_phi_27_51_ladder = _2899.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2899.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2899.x * cbModelParam._m0[1u].z;
        }
        _2047 = frontier_phi_27_51_ladder_2;
        _2049 = frontier_phi_27_51_ladder_1;
        _2051 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2031 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1026, _1027, _1028), _1958);
        _2047 = _2031.x * cbModelParam._m0[1u].z;
        _2049 = _2031.y * cbModelParam._m0[1u].z;
        _2051 = _2031.z * cbModelParam._m0[1u].z;
    }
    float _2064 = (((_1053 * _1003) + _1054) * _1018) * ((cbModelParam._m0[1u].w * (_2047 - _1949)) + _1949);
    float _2066 = (((_1053 * _1005) + _1054) * _1018) * ((cbModelParam._m0[1u].w * (_2049 - _1951)) + _1951);
    float _2068 = (((_1053 * _1006) + _1054) * _1018) * ((cbModelParam._m0[1u].w * (_2051 - _1953)) + _1953);
    float _2071 = fma(_2068, cbSceneParam._m0[89u].z, fma(_2066, cbSceneParam._m0[89u].y, _2064 * cbSceneParam._m0[89u].x));
    float _2074 = fma(_2068, cbSceneParam._m0[90u].z, fma(_2066, cbSceneParam._m0[90u].y, _2064 * cbSceneParam._m0[90u].x));
    float _2077 = fma(_2068, cbSceneParam._m0[91u].z, fma(_2066, cbSceneParam._m0[91u].y, _2064 * cbSceneParam._m0[91u].x));
    uvec4 _2087 = floatBitsToUint(cbInstanceData._m0[_946 + 5u]);
    uint _2089 = _2087.x * 14u;
    uint _2090 = _2089 + 13u;
    float _2097 = _1018 + (-1.0);
    float _2102 = (cbLight._m0[_2090].x * _2097) + 1.0;
    float _2103 = (cbLight._m0[_2090].y * _2097) + 1.0;
    float _2104 = (cbLight._m0[_2090].z * _2097) + 1.0;
    float _2105 = (cbLight._m0[_2090].w * _2097) + 1.0;
    uint _2106 = _2089 + 5u;
    float _2112 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
    uint _2116 = _2089 + 4u;
    float _2122 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
    uint _2126 = _2089 | 1u;
    float _2137 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_791, _792, _793));
    float _2140 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_791, _792, _793));
    float _4375 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _4386 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2145 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * 0.3183098733425140380859375;
    float _2147 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * 0.3183098733425140380859375;
    float _2154 = ((cbLight._m0[_2106].x * _2112) * _2147) + ((cbLight._m0[_2116].x * _2122) * _2145);
    float _2155 = ((_2112 * cbLight._m0[_2106].y) * _2147) + ((_2122 * cbLight._m0[_2116].y) * _2145);
    float _2156 = ((_2112 * cbLight._m0[_2106].z) * _2147) + ((_2122 * cbLight._m0[_2116].z) * _2145);
    uvec4 _2160 = floatBitsToUint(cbLight._m0[_2089 + 12u]);
    bool _2162 = _2160.x == 0u;
    float _2173;
    float _2175;
    float _2177;
    if (_2162)
    {
        _2173 = _2154;
        _2175 = _2155;
        _2177 = _2156;
    }
    else
    {
        uint _2181 = _2089 + 6u;
        float _2197 = (dot(vec3(cbLight._m0[_2089 + 2u].xyz), vec3(_791, _792, _793)) * 0.5) + 0.5;
        float _2198 = _2197 * _2197;
        float _4397 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2199 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _2200 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
        _2173 = (((cbLight._m0[_2181].x * 0.3183098733425140380859375) * _2199) * _2200) + _2154;
        _2175 = (((cbLight._m0[_2181].y * 0.3183098733425140380859375) * _2199) * _2200) + _2155;
        _2177 = (((cbLight._m0[_2181].z * 0.3183098733425140380859375) * _2199) * _2200) + _2156;
    }
    bool _2180 = _2160.y == 0u;
    float _2218;
    float _2220;
    float _2222;
    if (_2180)
    {
        _2218 = _2173;
        _2220 = _2175;
        _2222 = _2177;
    }
    else
    {
        uint _2388 = _2089 + 7u;
        float _2404 = (dot(vec3(cbLight._m0[_2089 + 3u].xyz), vec3(_791, _792, _793)) * 0.5) + 0.5;
        float _2405 = _2404 * _2404;
        float _4413 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2406 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2407 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
        _2218 = (((cbLight._m0[_2388].x * 0.3183098733425140380859375) * _2406) * _2407) + _2173;
        _2220 = (((cbLight._m0[_2388].y * 0.3183098733425140380859375) * _2406) * _2407) + _2175;
        _2222 = (((cbLight._m0[_2388].z * 0.3183098733425140380859375) * _2406) * _2407) + _2177;
    }
    uint _2225 = _2089 + 8u;
    float _2238 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2089].w)) * _933) * 0.949999988079071044921875);
    float _2239 = _2238 * _2238;
    float _2240 = cbLight._m0[_2089].x + _871;
    float _2241 = cbLight._m0[_2089].y + _872;
    float _2242 = cbLight._m0[_2089].z + _873;
    float _2246 = inversesqrt(dot(vec3(_2240, _2241, _2242), vec3(_2240, _2241, _2242)));
    float _2247 = _2246 * _2240;
    float _2248 = _2246 * _2241;
    float _2249 = _2246 * _2242;
    float _2250 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2089].xyz));
    float _4429 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2253 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
    float _4440 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _2254 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _2255 = dot(vec3(_791, _792, _793), vec3(_2247, _2248, _2249));
    float _4451 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2258 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _2259 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_2247, _2248, _2249));
    float _4462 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2263 = _2239 * _2239;
    float _2267 = ((_2258 * _2258) * (_2263 + (-1.0))) + 1.0;
    float _2275 = exp2(log2(1.0 - (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) * 5.0);
    float _2276 = 0.959999978542327880859375 - _1000;
    float _2278 = 0.959999978542327880859375 - _1001;
    float _2279 = 0.959999978542327880859375 - _1002;
    float _2286 = 1.0 - _2239;
    float _2297 = (0.5 / (((_2254 * ((_2253 * _2286) + _2239)) + 9.9999999392252902907785028219223e-09) + (((_2254 * _2286) + _2239) * _2253))) * _2253;
    float _4473 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2299 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2263 / ((_2267 * _2267) * 3.141590118408203125));
    uint _2310 = _2089 + 9u;
    float _2321 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2126].w)) * _933) * 0.949999988079071044921875);
    float _2322 = _2321 * _2321;
    float _2323 = cbLight._m0[_2126].x + _871;
    float _2324 = cbLight._m0[_2126].y + _872;
    float _2325 = cbLight._m0[_2126].z + _873;
    float _2329 = inversesqrt(dot(vec3(_2323, _2324, _2325), vec3(_2323, _2324, _2325)));
    float _2330 = _2329 * _2323;
    float _2331 = _2329 * _2324;
    float _2332 = _2329 * _2325;
    float _2333 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2126].xyz));
    float _4484 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2336 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
    float _2337 = dot(vec3(_791, _792, _793), vec3(_2330, _2331, _2332));
    float _4495 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2340 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
    float _2341 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_2330, _2331, _2332));
    float _4506 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2345 = _2322 * _2322;
    float _2349 = ((_2340 * _2340) * (_2345 + (-1.0))) + 1.0;
    float _2356 = exp2(log2(1.0 - (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) * 5.0);
    float _2363 = 1.0 - _2322;
    float _2373 = (0.5 / (((_2254 * ((_2336 * _2363) + _2322)) + 9.9999999392252902907785028219223e-09) + (((_2254 * _2363) + _2322) * _2336))) * _2336;
    float _4517 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2375 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_2345 / ((_2349 * _2349) * 3.141590118408203125));
    float _2385 = (((((_2356 * _2276) + _1003) * cbLight._m0[_2310].x) * _2375) * _2112) + (((((_2275 * _2276) + _1003) * cbLight._m0[_2225].x) * _2299) * _2122);
    float _2386 = (((((_2356 * _2278) + _1005) * cbLight._m0[_2310].y) * _2375) * _2112) + (((((_2275 * _2278) + _1005) * cbLight._m0[_2225].y) * _2299) * _2122);
    float _2387 = (((((_2356 * _2279) + _1006) * cbLight._m0[_2310].z) * _2375) * _2112) + (((((_2275 * _2279) + _1006) * cbLight._m0[_2225].z) * _2299) * _2122);
    float _2449;
    float _2451;
    float _2453;
    if (_2162)
    {
        _2449 = _2385;
        _2451 = _2386;
        _2453 = _2387;
    }
    else
    {
        uint _2455 = _2089 + 2u;
        uint _2459 = _2089 + 10u;
        float _2473 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2455].w)) * _933) * 0.949999988079071044921875);
        float _2474 = _2473 * _2473;
        float _2475 = cbLight._m0[_2455].x + _871;
        float _2476 = cbLight._m0[_2455].y + _872;
        float _2477 = cbLight._m0[_2455].z + _873;
        float _2481 = inversesqrt(dot(vec3(_2475, _2476, _2477), vec3(_2475, _2476, _2477)));
        float _2482 = _2481 * _2475;
        float _2483 = _2481 * _2476;
        float _2484 = _2481 * _2477;
        float _2485 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2455].xyz));
        float _4528 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2488 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2489 = dot(vec3(_791, _792, _793), vec3(_2482, _2483, _2484));
        float _4539 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2492 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _2493 = dot(vec3(cbLight._m0[_2455].xyz), vec3(_2482, _2483, _2484));
        float _4550 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2497 = _2474 * _2474;
        float _2501 = ((_2492 * _2492) * (_2497 + (-1.0))) + 1.0;
        float _2508 = exp2(log2(1.0 - (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0)))) * 5.0);
        float _2515 = 1.0 - _2474;
        float _2525 = (0.5 / (((_2254 * ((_2488 * _2515) + _2474)) + 9.9999999392252902907785028219223e-09) + (((_2254 * _2515) + _2474) * _2488))) * _2488;
        float _4561 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2527 = (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2497 / ((_2501 * _2501) * 3.141590118408203125));
        float _2528 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
        _2449 = (((((_2508 * _2276) + _1003) * cbLight._m0[_2459].x) * _2527) * _2528) + _2385;
        _2451 = (((((_2508 * _2278) + _1005) * cbLight._m0[_2459].y) * _2527) * _2528) + _2386;
        _2453 = (((((_2508 * _2279) + _1006) * cbLight._m0[_2459].z) * _2527) * _2528) + _2387;
    }
    float _2563;
    float _2565;
    float _2567;
    if (_2180)
    {
        _2563 = _2449;
        _2565 = _2451;
        _2567 = _2453;
    }
    else
    {
        uint _2574 = _2089 + 3u;
        uint _2578 = _2089 + 11u;
        float _2592 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2574].w)) * _933) * 0.949999988079071044921875);
        float _2593 = _2592 * _2592;
        float _2594 = cbLight._m0[_2574].x + _871;
        float _2595 = cbLight._m0[_2574].y + _872;
        float _2596 = cbLight._m0[_2574].z + _873;
        float _2600 = inversesqrt(dot(vec3(_2594, _2595, _2596), vec3(_2594, _2595, _2596)));
        float _2601 = _2600 * _2594;
        float _2602 = _2600 * _2595;
        float _2603 = _2600 * _2596;
        float _2604 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2574].xyz));
        float _4577 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2607 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _2608 = dot(vec3(_791, _792, _793), vec3(_2601, _2602, _2603));
        float _4588 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2611 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
        float _2612 = dot(vec3(cbLight._m0[_2574].xyz), vec3(_2601, _2602, _2603));
        float _4599 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2616 = _2593 * _2593;
        float _2620 = ((_2611 * _2611) * (_2616 + (-1.0))) + 1.0;
        float _2627 = exp2(log2(1.0 - (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) * 5.0);
        float _2634 = 1.0 - _2593;
        float _2644 = (0.5 / (((_2254 * ((_2607 * _2634) + _2593)) + 9.9999999392252902907785028219223e-09) + (((_2254 * _2634) + _2593) * _2607))) * _2607;
        float _4610 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2646 = (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2616 / ((_2620 * _2620) * 3.141590118408203125));
        float _2647 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
        _2563 = (((((_2627 * _2276) + _1003) * cbLight._m0[_2578].x) * _2646) * _2647) + _2449;
        _2565 = (((((_2627 * _2278) + _1005) * cbLight._m0[_2578].y) * _2646) * _2647) + _2451;
        _2567 = (((((_2627 * _2279) + _1006) * cbLight._m0[_2578].z) * _2646) * _2647) + _2453;
    }
    float _2781;
    float _2783;
    float _2785;
    float _2787;
    float _2789;
    float _2791;
    if (_2087.y == 0u)
    {
        float _2722 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2723 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2722;
        float _2724 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2722;
        float _2725 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2722;
        uvec4 _2737 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2738 = _2737.x;
        uint _2749 = uint((float(_2737.y) * floor(float(uint(cbSceneParam._m0[85u].y * _892) / _2738))) + floor(float(uint(cbSceneParam._m0[85u].x * _891) / _2738)));
        float _2759 = (log2(_2725 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2760 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        uint _2763 = uint(isnan(14.0) ? _2760 : (isnan(_2760) ? 14.0 : min(_2760, 14.0)));
        uvec4 _2768 = texelFetch(g_lightClusterGridBuffer, int(((_2763 << 2u) + (_2749 << 6u)) >> 2u));
        uint _2769 = _2768.x;
        uint _2770 = _2737.z;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        if (((((1u << ((_2770 >> 4u) & 15u)) + 4294967295u) & _2769) == 0u) || ((_2770 & 240u) == 0u))
        {
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
            _2910 = 0.0;
            _2912 = 0.0;
            _2914 = 0.0;
        }
        else
        {
            float _2905;
            float _2907;
            float _2909;
            float _2911;
            float _2913;
            float _2915;
            float _3065 = 0.0;
            float _3066 = 0.0;
            float _3067 = 0.0;
            float _3068 = 0.0;
            float _3069 = 0.0;
            float _3070 = 0.0;
            uint _3071 = 0u;
            uint _3080;
            bool _3081;
            for (;;)
            {
                _3080 = texelFetch(g_lightClassification, int((((_2763 << 5u) + (_2749 << 9u)) + (_3071 << 2u)) >> 2u)).x;
                _3081 = _3080 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3081)
                {
                    frontier_phi_68_pred = _3067;
                    frontier_phi_68_pred_1 = _3070;
                    frontier_phi_68_pred_2 = _3069;
                    frontier_phi_68_pred_3 = _3068;
                    frontier_phi_68_pred_4 = _3066;
                    frontier_phi_68_pred_5 = _3065;
                }
                else
                {
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    uint _3216;
                    _3210 = _3065;
                    _3211 = _3066;
                    _3212 = _3067;
                    _3213 = _3068;
                    _3214 = _3069;
                    _3215 = _3070;
                    _3216 = _3080;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    for (;;)
                    {
                        uint _3220 = uint(findLSB(_3216)) + (_3071 << 5u);
                        uint _3217 = (_3216 + 4294967295u) & _3216;
                        uint _3222 = _3220 * 48u;
                        vec4 _3236 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3222)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 3u)).x));
                        uint _3242 = (_3220 * 48u) + 4u;
                        vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3242)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 3u)).x));
                        uint _3261 = (_3220 * 48u) + 8u;
                        vec3 _3272 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3261)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 2u)).x));
                        float _3276 = _3236.x - _2723;
                        float _3277 = _3236.y - _2724;
                        float _3278 = _3236.z - _2725;
                        float _3279 = dot(vec3(_3276, _3277, _3278), vec3(_3276, _3277, _3278));
                        float _3282 = inversesqrt(_3279);
                        float _3283 = _3282 * _3276;
                        float _3284 = _3282 * _3277;
                        float _3285 = _3282 * _3278;
                        float _3286 = dot(vec3(_914, _917, _920), vec3(_3283, _3284, _3285));
                        float _3291 = 1.0 - (_3279 * _3236.w);
                        float _4636 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3292 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                        float _3293 = sqrt(_3279) * _3255.w;
                        float _3296 = 1.39999997615814208984375 / (_3293 + 1.39999997615814208984375);
                        float _3297 = _3296 * _3296;
                        float _3300 = ((1.0 - _3297) * _3286) + _3297;
                        float _3303 = _3293 * _3293;
                        float _3307 = ((isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0))) * _3292) / ((_3303 * 0.699999988079071044921875) + 1.0);
                        float _3311 = (-0.0) - _2723;
                        float _3312 = (-0.0) - _2724;
                        float _3313 = (-0.0) - _2725;
                        float _3317 = inversesqrt(dot(vec3(_3311, _3312, _3313), vec3(_3311, _3312, _3313)));
                        float _3318 = _3317 * _3311;
                        float _3319 = _3317 * _3312;
                        float _3320 = _3317 * _3313;
                        float _3327 = exp2(log2(1.0 / ((_3303 * 3.5) + 5.0)) * 0.25);
                        float _3328 = 1.0 - _1034;
                        float _3335 = sqrt(1.0 - ((1.0 - (_3328 * _3328)) * (1.0 - (_3327 * _3327))));
                        float _3336 = _3335 * _3335;
                        float _3337 = _3336 * _3336;
                        float _3338 = _3318 + _3283;
                        float _3339 = _3319 + _3284;
                        float _3340 = _3320 + _3285;
                        float _3344 = inversesqrt(dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340)));
                        float _3348 = dot(vec3(_914, _917, _920), vec3(_3318, _3319, _3320));
                        float _4652 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3351 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                        float _3352 = dot(vec3(_914, _917, _920), vec3(_3344 * _3338, _3344 * _3339, _3344 * _3340));
                        float _4663 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                        float _3355 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                        float _3359 = ((_3355 * _3355) * (_3337 + (-1.0))) + 1.0;
                        float _3360 = _3296 * _3336;
                        float _3361 = _3360 * _3360;
                        float _3364 = ((1.0 - _3361) * _3286) + _3361;
                        float _4674 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                        float _3365 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                        float _3366 = 1.0 - _3336;
                        float _3376 = (0.5 / (((_3365 * ((_3351 * _3366) + _3336)) + 9.9999999392252902907785028219223e-09) + (((_3365 * _3366) + _3336) * _3351))) * _3365;
                        float _4685 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                        float _3387 = (((_3337 * 3.1415927410125732421875) * (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0)))) / ((_3359 * _3359) * ((_3303 * 2.1991131305694580078125) + 3.141590118408203125))) * _3292;
                        _3140 = (_3307 * _3255.x) + _3213;
                        _3141 = (_3307 * _3255.y) + _3214;
                        _3142 = (_3307 * _3255.z) + _3215;
                        _3137 = (_3387 * _3272.x) + _3210;
                        _3138 = (_3387 * _3272.y) + _3211;
                        _3139 = (_3387 * _3272.z) + _3212;
                        if (_3217 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3210 = _3137;
                            _3211 = _3138;
                            _3212 = _3139;
                            _3213 = _3140;
                            _3214 = _3141;
                            _3215 = _3142;
                            _3216 = _3217;
                        }
                    }
                    frontier_phi_68_pred = _3139;
                    frontier_phi_68_pred_1 = _3142;
                    frontier_phi_68_pred_2 = _3141;
                    frontier_phi_68_pred_3 = _3140;
                    frontier_phi_68_pred_4 = _3138;
                    frontier_phi_68_pred_5 = _3137;
                }
                _2909 = frontier_phi_68_pred;
                _2915 = frontier_phi_68_pred_1;
                _2913 = frontier_phi_68_pred_2;
                _2911 = frontier_phi_68_pred_3;
                _2907 = frontier_phi_68_pred_4;
                _2905 = frontier_phi_68_pred_5;
                uint _3072 = _3071 + 1u;
                if (_3072 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3065 = _2905;
                    _3066 = _2907;
                    _3067 = _2909;
                    _3068 = _2911;
                    _3069 = _2913;
                    _3070 = _2915;
                    _3071 = _3072;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
            _2910 = _2911;
            _2912 = _2913;
            _2914 = _2915;
        }
        uvec4 _2918 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2919 = _2918.z;
        uint _2921 = (_2919 >> 8u) & 15u;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        float _3043;
        if (((4294967295u << _2921) & _2769) == 0u)
        {
            _3033 = _2904;
            _3035 = _2906;
            _3037 = _2908;
            _3039 = _2910;
            _3041 = _2912;
            _3043 = _2914;
        }
        else
        {
            float _3058 = inversesqrt(dot(vec3(_2723, _2724, _2725), vec3(_2723, _2724, _2725)));
            float _3059 = _3058 * _2723;
            float _3060 = _3058 * _2724;
            float _3061 = _3058 * _2725;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2921 < ((_2919 >> 12u) & 15u))
            {
                float _3034;
                float _3036;
                float _3038;
                float _3040;
                float _3042;
                float _3044;
                float _3193 = _2904;
                float _3194 = _2906;
                float _3195 = _2908;
                float _3196 = _2910;
                float _3197 = _2912;
                float _3198 = _2914;
                uint _3199 = _2921;
                uint _3208;
                bool _3209;
                for (;;)
                {
                    _3208 = texelFetch(g_lightClassification, int((((_2763 << 5u) + (_2749 << 9u)) + (_3199 << 2u)) >> 2u)).x;
                    _3209 = _3208 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3209)
                    {
                        frontier_phi_79_pred = _3198;
                        frontier_phi_79_pred_1 = _3197;
                        frontier_phi_79_pred_2 = _3196;
                        frontier_phi_79_pred_3 = _3195;
                        frontier_phi_79_pred_4 = _3194;
                        frontier_phi_79_pred_5 = _3193;
                    }
                    else
                    {
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3694;
                        float _3695;
                        float _3696;
                        float _3697;
                        float _3698;
                        float _3699;
                        float _3414 = _3193;
                        float _3415 = _3194;
                        float _3416 = _3195;
                        float _3417 = _3196;
                        float _3418 = _3197;
                        float _3419 = _3198;
                        uint _3420 = _3208;
                        uint _3421;
                        vec4 _3446;
                        float _3447;
                        vec4 _3462;
                        vec3 _3474;
                        vec4 _3489;
                        vec4 _3504;
                        float _3550;
                        bool _3551;
                        for (;;)
                        {
                            uint _3431 = ((_3199 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3420));
                            _3421 = (_3420 + 4294967295u) & _3420;
                            uint _3433 = _3431 * 40u;
                            _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            _3447 = _3446.w;
                            uint _3449 = (_3431 * 40u) + 4u;
                            _3462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 3u)).x));
                            uint _3464 = (_3431 * 40u) + 8u;
                            _3474 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x));
                            uint _3476 = (_3431 * 40u) + 16u;
                            _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            uint _3491 = (_3431 * 40u) + 20u;
                            _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            uint _3506 = (_3431 * 40u) + 24u;
                            vec4 _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            uint _3525 = (_3431 * 40u) + 28u;
                            vec4 _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            _3550 = fma(_2725, _3538.z, fma(_2724, _3538.y, _3538.x * _2723)) + _3538.w;
                            _3551 = !((fma(_2725, _3519.z, fma(_2724, _3519.y, _3519.x * _2723)) + _3519.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3551)
                            {
                                float _3578 = _3446.x - _2723;
                                float _3579 = _3446.y - _2724;
                                float _3580 = _3446.z - _2725;
                                float _3581 = dot(vec3(_3578, _3579, _3580), vec3(_3578, _3579, _3580));
                                float _3584 = inversesqrt(_3581);
                                float _3585 = _3584 * _3578;
                                float _3586 = _3584 * _3579;
                                float _3587 = _3584 * _3580;
                                float _3591 = 1.0 - (_3581 / (_3447 * _3447));
                                float _4696 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3592 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                                float _3596 = sqrt(_3581) * _3462.w;
                                float _3598 = 1.39999997615814208984375 / (_3596 + 1.39999997615814208984375);
                                float _3599 = _3598 * _3598;
                                float _3602 = ((1.0 - _3599) * dot(vec3(_3585, _3586, _3587), vec3(_914, _917, _920))) + _3599;
                                float _3605 = _3596 * _3596;
                                float _3609 = (fma(_2725, _3489.z, fma(_2724, _3489.y, _3489.x * _2723)) + _3489.w) / _3550;
                                float _3610 = (fma(_2725, _3504.z, fma(_2724, _3504.y, _3504.x * _2723)) + _3504.w) / _3550;
                                float _3614 = 1.0 - dot(vec2(_3609, _3610), vec2(_3609, _3610));
                                float _4712 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3615 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                                float _3616 = _3615 * (((isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0))) * _3592) / ((_3605 * 0.699999988079071044921875) + 1.0));
                                float _3628 = exp2(log2(1.0 / ((_3605 * 3.5) + 5.0)) * 0.25);
                                float _3629 = 1.0 - _1034;
                                float _3636 = sqrt(1.0 - ((1.0 - (_3629 * _3629)) * (1.0 - (_3628 * _3628))));
                                float _3637 = _3636 * _3636;
                                float _3638 = _3637 * _3637;
                                float _3639 = _3585 - _3059;
                                float _3640 = _3586 - _3060;
                                float _3641 = _3587 - _3061;
                                float _3645 = inversesqrt(dot(vec3(_3639, _3640, _3641), vec3(_3639, _3640, _3641)));
                                float _3649 = dot(vec3(_914, _917, _920), vec3((-0.0) - _3059, (-0.0) - _3060, (-0.0) - _3061));
                                float _4723 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3652 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                                float _3653 = dot(vec3(_914, _917, _920), vec3(_3645 * _3639, _3645 * _3640, _3645 * _3641));
                                float _4734 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3656 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                                float _3660 = ((_3656 * _3656) * (_3638 + (-1.0))) + 1.0;
                                float _3661 = _3598 * _3637;
                                float _3662 = _3661 * _3661;
                                float _3668 = ((1.0 - _3662) * dot(vec3(_914, _917, _920), vec3(_3585, _3586, _3587))) + _3662;
                                float _4745 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3669 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                                float _3670 = 1.0 - _3637;
                                float _3680 = (0.5 / (((_3669 * ((_3652 * _3670) + _3637)) + 9.9999999392252902907785028219223e-09) + (((_3669 * _3670) + _3637) * _3652))) * _3669;
                                float _4756 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3690 = (_3615 * _3592) * (((_3638 * 3.1415927410125732421875) * (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0)))) / ((_3660 * _3660) * ((_3605 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3616 * _3462.z;
                                frontier_phi_85_pred_1 = _3616 * _3462.y;
                                frontier_phi_85_pred_2 = _3616 * _3462.x;
                                frontier_phi_85_pred_3 = _3690 * _3474.z;
                                frontier_phi_85_pred_4 = _3690 * _3474.y;
                                frontier_phi_85_pred_5 = _3690 * _3474.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3699 = frontier_phi_85_pred;
                            _3698 = frontier_phi_85_pred_1;
                            _3697 = frontier_phi_85_pred_2;
                            _3696 = frontier_phi_85_pred_3;
                            _3695 = frontier_phi_85_pred_4;
                            _3694 = frontier_phi_85_pred_5;
                            _3404 = _3697 + _3417;
                            _3405 = _3698 + _3418;
                            _3406 = _3699 + _3419;
                            _3401 = _3694 + _3414;
                            _3402 = _3695 + _3415;
                            _3403 = _3696 + _3416;
                            if (_3421 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3414 = _3401;
                                _3415 = _3402;
                                _3416 = _3403;
                                _3417 = _3404;
                                _3418 = _3405;
                                _3419 = _3406;
                                _3420 = _3421;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3406;
                        frontier_phi_79_pred_1 = _3405;
                        frontier_phi_79_pred_2 = _3404;
                        frontier_phi_79_pred_3 = _3403;
                        frontier_phi_79_pred_4 = _3402;
                        frontier_phi_79_pred_5 = _3401;
                    }
                    _3044 = frontier_phi_79_pred;
                    _3042 = frontier_phi_79_pred_1;
                    _3040 = frontier_phi_79_pred_2;
                    _3038 = frontier_phi_79_pred_3;
                    _3036 = frontier_phi_79_pred_4;
                    _3034 = frontier_phi_79_pred_5;
                    uint _3200 = _3199 + 1u;
                    if (_3200 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3193 = _3034;
                        _3194 = _3036;
                        _3195 = _3038;
                        _3196 = _3040;
                        _3197 = _3042;
                        _3198 = _3044;
                        _3199 = _3200;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3040;
                frontier_phi_60_61_ladder_1 = _3044;
                frontier_phi_60_61_ladder_2 = _3042;
                frontier_phi_60_61_ladder_3 = _3038;
                frontier_phi_60_61_ladder_4 = _3036;
                frontier_phi_60_61_ladder_5 = _3034;
            }
            else
            {
                frontier_phi_60_61_ladder = _2910;
                frontier_phi_60_61_ladder_1 = _2914;
                frontier_phi_60_61_ladder_2 = _2912;
                frontier_phi_60_61_ladder_3 = _2908;
                frontier_phi_60_61_ladder_4 = _2906;
                frontier_phi_60_61_ladder_5 = _2904;
            }
            _3033 = frontier_phi_60_61_ladder_5;
            _3035 = frontier_phi_60_61_ladder_4;
            _3037 = frontier_phi_60_61_ladder_3;
            _3039 = frontier_phi_60_61_ladder;
            _3041 = frontier_phi_60_61_ladder_2;
            _3043 = frontier_phi_60_61_ladder_1;
        }
        float _3048 = isnan(1.0) ? _1018 : (isnan(_1018) ? 1.0 : min(_1018, 1.0));
        _2781 = (_3048 * _3039) + _2218;
        _2783 = (_3048 * _3041) + _2220;
        _2785 = (_3048 * _3043) + _2222;
        _2787 = ((_3033 * _1003) * _3048) + _2563;
        _2789 = ((_3035 * _1005) * _3048) + _2565;
        _2791 = ((_3037 * _1006) * _3048) + _2567;
    }
    else
    {
        _2781 = _2218;
        _2783 = _2220;
        _2785 = _2222;
        _2787 = _2563;
        _2789 = _2565;
        _2791 = _2567;
    }
    uint _2797 = _947 + uint(cbMatDynParam._m0[0u].w);
    float _2805 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[22u].z) * _735.x) * cbInstanceData._m0[_2797].x;
    float _2808 = ((cbMtdParam._m0[11u].y * cbMtdParam._m0[22u].z) * _735.y) * cbInstanceData._m0[_2797].y;
    float _2811 = ((cbMtdParam._m0[11u].z * cbMtdParam._m0[22u].z) * _735.z) * cbInstanceData._m0[_2797].z;
    float _4772 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _4783 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _4794 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _2828 = (((isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2781 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1018))) + ((_2787 + ((isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0))) * _1858)) * cbPerFrame._m0[3u].x)) + _2805;
    float _2830 = (_2808 + ((_2789 + ((isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0))) * _1858)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0))) * (_2783 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1018)));
    float _2832 = (_2811 + ((_2791 + ((isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0))) * _1858)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * (_2785 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1018)));
    float _2833 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
    float _2834 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
    float _2835 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
    float _2841 = cbMtdParam._m0[2u].x * _2805;
    float _2842 = cbMtdParam._m0[2u].y * _2808;
    float _2843 = cbMtdParam._m0[2u].z * _2811;
    float _4820 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2845 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
    uint _2846 = _946 + 6u;
    float _2854 = _891 / cbSceneParam._m0[86u].x;
    float _2855 = _892 / cbSceneParam._m0[86u].y;
    vec4 _2869 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2854, _2855, (log2((isnan(cbSceneParam._m0[77u].w) ? _814 : (isnan(_814) ? cbSceneParam._m0[77u].w : min(_814, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2871 = _2869.x;
    float _2872 = _2869.y;
    float _2873 = _2869.z;
    float _2874 = _2869.w;
    float _2966;
    float _2968;
    float _2970;
    float _2972;
    if (_814 > cbSceneParam._m0[78u].w)
    {
        float _2929 = isnan(_814) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _814 : min(cbSceneParam._m0[80u].w, _814));
        float _2930 = _2929 / _814;
        float _2941 = _2930 * _864;
        float _2942 = _865 * _2930;
        float _2943 = (-0.0) - _2942;
        float _2944 = _2930 * _866;
        float _2946 = (cbSceneParam._m0[77u].w * _2943) / _2929;
        float _2947 = _2946 + cbSceneParam._m0[79u].w;
        float _2948 = cbSceneParam._m0[79u].w - _2942;
        float _2954 = sqrt(((_2941 * _2941) + (_2942 * _2942)) + (_2944 * _2944));
        float _2957 = (1.0 - (cbSceneParam._m0[77u].w / _2929)) * _2954;
        float _2962 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2964 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3150;
        if (abs((_2943 - _2946) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3150 = ((((_2947 > 0.0) ? exp2(_2962 * _2947) : (2.0 - exp2(_2964 * _2947))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2957;
        }
        else
        {
            float _3094 = 1.0 / cbSceneParam._m0[80u].x;
            float _3095 = isnan(_2948) ? _2947 : (isnan(_2947) ? _2948 : max(_2947, _2948));
            float _3096 = isnan(_2948) ? _2947 : (isnan(_2947) ? _2948 : min(_2947, _2948));
            float _3105 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : min(_3095, 0.0));
            float _3106 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : min(_3096, 0.0));
            _3150 = ((abs(_2954 / _2943) * cbSceneParam._m0[80u].y) * ((((_3105 - _3106) * 2.0) - ((exp2(_2962 * (isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0)))) - exp2(_2962 * (isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0))))) * _3094)) - ((exp2(_2964 * _3105) - exp2(_2964 * _3106)) * _3094))) + (_2957 * cbSceneParam._m0[80u].z);
        }
        vec4 _3152 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2854, _2855, 1.0), 0.0);
        float _3161 = exp2((_3150 * (-1.44269502162933349609375)) * (1.0 - _3152.w));
        float _3162 = log2(_3161);
        float _3178 = log2(_2874);
        _2966 = (exp2(_3178 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3162 * cbSceneParam._m0[78u].x)) * _3152.x) / cbSceneParam._m0[78u].x)) + _2871;
        _2968 = (exp2(_3178 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3162 * cbSceneParam._m0[78u].y)) * _3152.y) / cbSceneParam._m0[78u].y)) + _2872;
        _2970 = (exp2(_3178 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3162 * cbSceneParam._m0[78u].z)) * _3152.z) / cbSceneParam._m0[78u].z)) + _2873;
        _2972 = _3161 * _2874;
    }
    else
    {
        _2966 = _2871;
        _2968 = _2872;
        _2970 = _2873;
        _2972 = _2874;
    }
    bool _3188;
    vec4 _2982;
    vec4 _3004;
    float _3006;
    float _3010;
    float _3011;
    float _3012;
    float _3015;
    float _3018;
    float _3021;
    float _3022;
    bool _3032;
    for (;;)
    {
        _2982 = cbMatDynParam._m0[0u];
        float _2984 = roundEven(_2982.y);
        bool _2985 = _2984 == 3.0;
        float _2986 = log2(_2972);
        float _2990 = exp2(_2986 * cbSceneParam._m0[78u].x);
        float _2991 = exp2(_2986 * cbSceneParam._m0[78u].y);
        float _2992 = exp2(_2986 * cbSceneParam._m0[78u].z);
        float _2993 = _2990 * _2833;
        float _2994 = _2991 * _2834;
        float _2995 = _2992 * _2835;
        float _3002 = _880 + (-0.5);
        _3004 = cbMtdParam._m0[1u];
        _3006 = _3004.y * _3002;
        float _3009 = (_2984 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3010 = _3009 * (_2985 ? _2993 : (_2993 + (cbSceneParam._m0[72u].w * _2966)));
        _3011 = _3009 * (_2985 ? _2994 : (_2994 + (cbSceneParam._m0[72u].w * _2968)));
        _3012 = _3009 * (_2985 ? _2995 : (_2995 + (cbSceneParam._m0[72u].w * _2970)));
        _3015 = ((_2841 * _2845) * _2990) * _3009;
        _3018 = ((_2842 * _2845) * _2991) * _3009;
        _3021 = ((_2843 * _2845) * _2992) * _3009;
        _3022 = _3002 * 0.999000012874603271484375;
        _3032 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3032)
        {
            if ((cbInstanceData._m0[_946 + 7u].x + _3022) < 0.5)
            {
                _3188 = true;
                break;
            }
        }
        uint _3129 = _947 + uint(_2982.w);
        if ((cbInstanceData._m0[_3129].w < 1.0) && ((cbInstanceData._m0[_3129].w + _3022) < 0.5))
        {
            _3188 = true;
            break;
        }
        if ((_3006 + 1.0) < _3004.x)
        {
            _3188 = true;
            break;
        }
        _3188 = false;
        break;
    }
    float _3392;
    if (_3188)
    {
        discard_state = true;
        _3392 = 0.0;
    }
    else
    {
        _3392 = cbInstanceData._m0[_2846].w;
    }
    SV_Target.x = _3010;
    SV_Target.y = _3011;
    SV_Target.z = _3012;
    SV_Target.w = _3392;
    SV_Target_1.x = _3015;
    SV_Target_1.y = _3018;
    SV_Target_1.z = _3021;
    SV_Target_1.w = cbInstanceData._m0[_2846].w;
    discard_exit();
}


