#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1421;
float _4127;
float _4128;
float _4129;
float _4130;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = _243 * NORMAL.x;
    float _245 = _243 * NORMAL.y;
    float _246 = _243 * NORMAL.z;
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258;
    float _259;
    float _260;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _258 = (-0.0) - _244;
        _259 = (-0.0) - _245;
        _260 = (-0.0) - _246;
    }
    else
    {
        _258 = _244;
        _259 = _245;
        _260 = _246;
    }
    vec4 _275 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _285 = log2(0.0);
    float _287 = exp2(_285 * cbMtdParam._m0[21u].y);
    float _288 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _289 = isnan(1.0) ? _288 : (isnan(_288) ? 1.0 : min(_288, 1.0));
    vec4 _303 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _307 = _303.z;
    float _308 = _303.w;
    float _316 = exp2(log2(_307 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _317 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _318 = isnan(1.0) ? _317 : (isnan(_317) ? 1.0 : min(_317, 1.0));
    vec4 _331 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _354 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _356 = _354.x;
    float _357 = _354.y;
    float _381 = ((cbMtdParam._m0[20u].w * _354.z) * (texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].z * TEXCOORD.x) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((cbMtdParam._m0[20u].z * TEXCOORD.y) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w)).x - _356)) + _356;
    bool _417 = _381 >= 0.25;
    bool _422 = _381 >= 0.3499999940395355224609375;
    bool _427 = _381 >= 0.5;
    bool _432 = _381 >= 0.64999997615814208984375;
    bool _437 = _381 >= 0.75;
    vec4 _465 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _475 = cbMtdParam._m0[9u].x * _465.x;
    float _476 = cbMtdParam._m0[9u].y * _465.y;
    float _477 = cbMtdParam._m0[9u].z * _465.z;
    float _484 = (((((((_437 ? cbMtdParam._m0[14u].x : (_432 ? cbMtdParam._m0[19u].x : (_427 ? cbMtdParam._m0[18u].x : (_422 ? cbMtdParam._m0[17u].x : (_417 ? cbMtdParam._m0[16u].x : cbMtdParam._m0[15u].x))))) - cbMtdParam._m0[10u].x) * _357) + cbMtdParam._m0[10u].x) * _331.x) - _475) * _318) + _475;
    float _485 = (((((((_437 ? cbMtdParam._m0[14u].y : (_432 ? cbMtdParam._m0[19u].y : (_427 ? cbMtdParam._m0[18u].y : (_422 ? cbMtdParam._m0[17u].y : (_417 ? cbMtdParam._m0[16u].y : cbMtdParam._m0[15u].y))))) - cbMtdParam._m0[10u].y) * _357) + cbMtdParam._m0[10u].y) * _331.y) - _476) * _318) + _476;
    float _486 = (((((((_437 ? cbMtdParam._m0[14u].z : (_432 ? cbMtdParam._m0[19u].z : (_427 ? cbMtdParam._m0[18u].z : (_422 ? cbMtdParam._m0[17u].z : (_417 ? cbMtdParam._m0[16u].z : cbMtdParam._m0[15u].z))))) - cbMtdParam._m0[10u].z) * _357) + cbMtdParam._m0[10u].z) * _331.z) - _477) * _318) + _477;
    float _493 = exp2(log2(_308) * cbMtdParam._m0[22u].y);
    vec4 _506 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _526 = (((cbMtdParam._m0[12u].x * _506.x) - _484) * _493) + _484;
    float _527 = (((cbMtdParam._m0[12u].y * _506.y) - _485) * _493) + _485;
    float _528 = (((cbMtdParam._m0[12u].z * _506.z) - _486) * _493) + _486;
    vec4 _540 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _564 = (_275.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _540.x) - _526) * _289) + _526);
    float _566 = (_275.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _540.y) - _527) * _289) + _527);
    float _568 = (_275.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _540.z) - _528) * _289) + _528);
    float _573 = exp2(log2(1.0 - _308) * 0.00999999977648258209228515625);
    float _591 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[22u].w) * _573) + cbMtdParam._m0[22u].w;
    float _610 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _591) + cbMtdParam._m0[21u].z) * _493) + _591;
    float _632 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _610) + cbMtdParam._m0[23u].w) * _289) + _610;
    vec4 _645 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _663 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _665 = _663.x;
    float _666 = _663.y;
    float _669 = cbMtdParam._m0[20u].x + _663.z;
    float _672 = (((cbMtdParam._m0[21u].x + _645.z) - _669) * _573) + _669;
    vec4 _684 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _696 = (_307 * 2.0) * ((((_684.z - _672) + cbMtdParam._m0[23u].y) * _493) + _672);
    vec4 _708 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _717 = (((_708.z - _696) + cbMtdParam._m0[22u].x) * _289) + _696;
    vec4 _736 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _751 = ((_645.x - _665) * _573) + _665;
    float _752 = ((_645.y - _666) * _573) + _666;
    float _757 = ((_684.x - _751) * _493) + _751;
    float _758 = ((_684.y - _752) * _493) + _752;
    float _767 = ((((_708.x - _757) * _289) + _757) * 2.0) + (-1.0);
    float _768 = ((((_708.y - _758) * _289) + _758) * 2.0) + (-1.0);
    float _769 = dot(vec2(_767, _768), vec2(_767, _768));
    float _4159 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _774 = sqrt(1.0 - (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))));
    float _777 = (cbMtdParam._m0[23u].x * ((_303.x * 2.0) + (-1.0))) + _767;
    float _778 = (cbMtdParam._m0[23u].x * ((_303.y * 2.0) + (-1.0))) + _768;
    float _781 = fma(_774, _258, fma(_778, _250 * TANGENT.x, (_236 * _229) * _777));
    float _784 = fma(_774, _259, fma(_778, _250 * TANGENT.y, (_236 * _230) * _777));
    float _787 = fma(_774, _260, fma(_778, _250 * TANGENT.z, (_236 * _231) * _777));
    float _791 = inversesqrt(dot(vec3(_781, _784, _787), vec3(_781, _784, _787)));
    float _792 = _791 * _781;
    float _793 = _791 * _784;
    float _794 = _791 * _787;
    float _4170 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _795 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _4181 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _4192 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _4203 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _4214 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _799 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _815 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _865 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _855);
    float _866 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _855);
    float _867 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _855);
    float _871 = inversesqrt(dot(vec3(_865, _866, _867), vec3(_865, _866, _867)));
    float _872 = _865 * _871;
    float _873 = _866 * _871;
    float _874 = _867 * _871;
    vec4 _879 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _881 = _879.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1102 = sqrt(((_865 * _865) + (_866 * _866)) + (_867 * _867));
        float _1108 = (cbMatDynParam._m0[5u].x * _1102) + cbMatDynParam._m0[5u].y;
        float _4225 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1113 = (cbMatDynParam._m0[5u].z * _1102) + cbMatDynParam._m0[5u].w;
        float _4236 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) - _1109)) + _1109) < ((_881 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _892 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _893 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _895 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _897 = _895.w;
    float _915 = fma(_794, cbSceneParam._m0[5u].z, fma(_793, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _792));
    float _918 = fma(_794, cbSceneParam._m0[6u].z, fma(_793, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _792));
    float _921 = fma(_794, cbSceneParam._m0[7u].z, fma(_793, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _792));
    vec4 _923 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _934 = (((_923.y - _795) + (_923.w * _795)) * cbMtdParam._m0[3u].x) + _795;
    uint _947 = uint(roundEven(NORMAL.w)) * 13u;
    uint _948 = _947 + 9u;
    uint _949 = _948 + uint(cbMatDynParam._m0[0u].w);
    float _955 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) * cbInstanceData._m0[_949].x;
    float _956 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) * cbInstanceData._m0[_949].y;
    float _957 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * cbInstanceData._m0[_949].z;
    float _4247 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _958 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _4258 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _959 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _4269 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _960 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    vec4 _961 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _966 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _977 = (((_966.x - _799) + (_966.w * _799)) * cbMtdParam._m0[3u].x) + _799;
    float _990 = (cbMtdParam._m0[3u].x * (((_958 * _897) - _958) + _961.x)) + _958;
    float _991 = (cbMtdParam._m0[3u].x * (((_959 * _897) - _959) + _961.y)) + _959;
    float _992 = (cbMtdParam._m0[3u].x * (((_960 * _897) - _960) + _961.z)) + _960;
    float _993 = 1.0 - _977;
    float _994 = _993 * _990;
    float _995 = _993 * _991;
    float _996 = _993 * _992;
    float _1001 = (_990 + (-0.039999999105930328369140625)) * _977;
    float _1002 = (_991 + (-0.039999999105930328369140625)) * _977;
    float _1003 = (_992 + (-0.039999999105930328369140625)) * _977;
    float _1004 = _1001 + 0.039999999105930328369140625;
    float _1006 = _1002 + 0.039999999105930328369140625;
    float _1007 = _1003 + 0.039999999105930328369140625;
    vec4 _1016 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _892, cbSceneParam._m0[86u].y * _893));
    float _1019 = _1016.x * TEXCOORD_4.z;
    float _1020 = dot(vec3(_792, _793, _794), vec3(_872, _873, _874));
    float _1023 = _1020 * 2.0;
    float _1027 = (_1023 * _792) - _872;
    float _1028 = (_1023 * _793) - _873;
    float _1029 = (_1023 * _794) - _874;
    float _1033 = abs(dot(vec3(_872, _873, _874), vec3(_792, _793, _794)));
    float _4280 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _1035 = sqrt(_934);
    float _1048 = exp2((_1035 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1035 * 3.0));
    float _1054 = (1.0 - _1048) * ((_1035 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1055 = _1048 * _1035;
    float _1083 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1087 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1091 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1420;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1146 = fma(_1091, cbModelParam._m0[26u].z, fma(_1087, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1083));
        float _1150 = fma(_1091, cbModelParam._m0[27u].z, fma(_1087, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1083));
        float _1154 = fma(_1091, cbModelParam._m0[28u].z, fma(_1087, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1083));
        float _1178 = _1083 + _792;
        float _1179 = _1087 + _793;
        float _1180 = _1091 + _794;
        float _1190 = fma(_1180, cbModelParam._m0[26u].z, fma(_1179, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1178)) - _1146;
        float _1191 = fma(_1180, cbModelParam._m0[27u].z, fma(_1179, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1178)) - _1150;
        float _1192 = fma(_1180, cbModelParam._m0[28u].z, fma(_1179, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1178)) - _1154;
        float _1196 = inversesqrt(dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192)));
        float _1209 = ((_1196 * _1190) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1146 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1210 = ((_1196 * _1191) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1150 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1211 = ((_1196 * _1192) / cbModelParam._m0[34u].z) + ((((((_1154 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        float _1248 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1214.x + (-0.5));
        float _1250 = _1248 * (_1214.y + (-0.5));
        float _1251 = _1248 * (_1214.z + (-0.5));
        float _1258 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1221.x + (-0.5));
        float _1260 = _1258 * (_1221.y + (-0.5));
        float _1261 = _1258 * (_1221.z + (-0.5));
        float _1268 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1228.x + (-0.5));
        float _1270 = _1268 * (_1228.y + (-0.5));
        float _1271 = _1268 * (_1228.z + (-0.5));
        float _1278 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1235.x + (-0.5));
        float _1280 = _1278 * (_1235.y + (-0.5));
        float _1281 = _1278 * (_1235.z + (-0.5));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = _1249 * 0.5;
        float _1286 = _1259 * 0.5;
        float _1287 = _1269 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1302 = (dot(vec3(_792, _793, _794), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1312 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _4328 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1314 + 1.0))) + _1319) * _1282;
        float _1329 = _1250 * 0.5;
        float _1330 = _1260 * 0.5;
        float _1331 = _1270 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_792, _793, _794), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _4361 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1356 + 1.0))) + _1361) * _1283;
        float _1371 = _1251 * 0.5;
        float _1372 = _1261 * 0.5;
        float _1373 = _1271 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_792, _793, _794), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _4372 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _4383 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _4394 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_1398 + 1.0))) + _1403) * _1284;
        _1420 = _1251;
        _1422 = _1250;
        _1423 = _1249;
        _1424 = _1261;
        _1425 = _1260;
        _1426 = _1259;
        _1427 = _1271;
        _1428 = _1270;
        _1429 = _1269;
        _1430 = _1284;
        _1431 = _1283;
        _1432 = _1282;
        _1433 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
        _1434 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
        _1435 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
    }
    else
    {
        _1420 = _1421;
        _1422 = _1421;
        _1423 = _1421;
        _1424 = _1421;
        _1425 = _1421;
        _1426 = _1421;
        _1427 = _1421;
        _1428 = _1421;
        _1429 = _1421;
        _1430 = _1421;
        _1431 = _1421;
        _1432 = _1421;
        _1433 = 0.0;
        _1434 = 0.0;
        _1435 = 0.0;
    }
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1464 = fma(_1091, cbModelParam._m0[30u].z, fma(_1087, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1083));
        float _1468 = fma(_1091, cbModelParam._m0[31u].z, fma(_1087, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1083));
        float _1472 = fma(_1091, cbModelParam._m0[32u].z, fma(_1087, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1083));
        float _1495 = _1083 + _792;
        float _1496 = _1087 + _793;
        float _1497 = _1091 + _794;
        float _1507 = fma(_1497, cbModelParam._m0[30u].z, fma(_1496, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1495)) - _1464;
        float _1508 = fma(_1497, cbModelParam._m0[31u].z, fma(_1496, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1495)) - _1468;
        float _1509 = fma(_1497, cbModelParam._m0[32u].z, fma(_1496, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1495)) - _1472;
        float _1513 = inversesqrt(dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509)));
        float _1526 = ((_1513 * _1507) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1464 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1527 = ((_1513 * _1508) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1468 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1528 = ((_1513 * _1509) / cbModelParam._m0[35u].z) + ((((((_1472 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1530 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        vec4 _1537 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        vec4 _1544 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        vec4 _1551 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        float _1563 = exp2((_1530.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1530.x + (-0.5));
        float _1565 = _1563 * (_1530.y + (-0.5));
        float _1566 = _1563 * (_1530.z + (-0.5));
        float _1573 = exp2((_1537.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1537.x + (-0.5));
        float _1575 = _1573 * (_1537.y + (-0.5));
        float _1576 = _1573 * (_1537.z + (-0.5));
        float _1583 = exp2((_1544.w + (-0.5)) * 20.0) * 2.0;
        float _1584 = _1583 * (_1544.x + (-0.5));
        float _1585 = _1583 * (_1544.y + (-0.5));
        float _1586 = _1583 * (_1544.z + (-0.5));
        float _1593 = exp2((_1551.w + (-0.5)) * 20.0) * 2.0;
        float _1594 = _1593 * (_1551.x + (-0.5));
        float _1595 = _1593 * (_1551.y + (-0.5));
        float _1596 = _1593 * (_1551.z + (-0.5));
        float _1597 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1598 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1599 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1600 = _1564 * 0.5;
        float _1601 = _1574 * 0.5;
        float _1602 = _1584 * 0.5;
        float _1603 = dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602));
        float _1608 = (_1603 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1603);
        float _1616 = (dot(vec3(_792, _793, _794), vec3(_1608 * _1600, _1608 * _1601, _1608 * _1602)) + 1.0) * 0.5;
        float _4435 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1625 = sqrt(((_1601 * _1601) + (_1600 * _1600)) + (_1602 * _1602)) / (_1597 + 9.9999997473787516355514526367188e-06);
        float _4446 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1627 = _1626 * 2.0;
        float _1631 = (1.0 - _1626) / (_1626 + 1.0);
        float _4457 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _1641 = ((((1.0 - _1632) * (_1627 + 2.0)) * exp2(log2(isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_1627 + 1.0))) + _1632) * _1597;
        float _1642 = _1565 * 0.5;
        float _1643 = _1575 * 0.5;
        float _1644 = _1585 * 0.5;
        float _1645 = dot(vec3(_1642, _1643, _1644), vec3(_1642, _1643, _1644));
        float _1650 = (_1645 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1645);
        float _1658 = (dot(vec3(_792, _793, _794), vec3(_1650 * _1642, _1650 * _1643, _1650 * _1644)) + 1.0) * 0.5;
        float _4468 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1667 = sqrt(((_1643 * _1643) + (_1642 * _1642)) + (_1644 * _1644)) / (_1598 + 9.9999997473787516355514526367188e-06);
        float _4479 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _1669 = _1668 * 2.0;
        float _1673 = (1.0 - _1668) / (_1668 + 1.0);
        float _4490 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _1683 = ((((1.0 - _1674) * (_1669 + 2.0)) * exp2(log2(isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_1669 + 1.0))) + _1674) * _1598;
        float _1684 = _1566 * 0.5;
        float _1685 = _1576 * 0.5;
        float _1686 = _1586 * 0.5;
        float _1687 = dot(vec3(_1684, _1685, _1686), vec3(_1684, _1685, _1686));
        float _1692 = (_1687 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1687);
        float _1700 = (dot(vec3(_792, _793, _794), vec3(_1692 * _1684, _1692 * _1685, _1692 * _1686)) + 1.0) * 0.5;
        float _4501 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1709 = sqrt(((_1685 * _1685) + (_1684 * _1684)) + (_1686 * _1686)) / (_1599 + 9.9999997473787516355514526367188e-06);
        float _4512 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _1711 = _1710 * 2.0;
        float _1715 = (1.0 - _1710) / (_1710 + 1.0);
        float _4523 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _1725 = ((((1.0 - _1716) * (_1711 + 2.0)) * exp2(log2(isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_1711 + 1.0))) + _1716) * _1599;
        _1733 = _1566;
        _1734 = _1565;
        _1735 = _1564;
        _1736 = _1576;
        _1737 = _1575;
        _1738 = _1574;
        _1739 = _1586;
        _1740 = _1585;
        _1741 = _1584;
        _1742 = _1599;
        _1743 = _1598;
        _1744 = _1597;
        _1745 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)));
        _1746 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)));
        _1747 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)));
    }
    else
    {
        _1733 = _1421;
        _1734 = _1421;
        _1735 = _1421;
        _1736 = _1421;
        _1737 = _1421;
        _1738 = _1421;
        _1739 = _1421;
        _1740 = _1421;
        _1741 = _1421;
        _1742 = _1421;
        _1743 = _1421;
        _1744 = _1421;
        _1745 = 0.0;
        _1746 = 0.0;
        _1747 = 0.0;
    }
    float _1757 = (cbModelParam._m0[1u].x * (_1745 - _1433)) + _1433;
    float _1758 = (cbModelParam._m0[1u].x * (_1746 - _1434)) + _1434;
    float _1759 = (cbModelParam._m0[1u].x * (_1747 - _1435)) + _1435;
    float _1780 = fma(_1759, cbSceneParam._m0[89u].z, fma(_1758, cbSceneParam._m0[89u].y, _1757 * cbSceneParam._m0[89u].x));
    float _1783 = fma(_1759, cbSceneParam._m0[90u].z, fma(_1758, cbSceneParam._m0[90u].y, _1757 * cbSceneParam._m0[90u].x));
    float _1786 = fma(_1759, cbSceneParam._m0[91u].z, fma(_1758, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1757));
    float _1801 = _1027 * 0.5;
    float _1802 = _1028 * 0.5;
    float _1803 = _1029 * 0.5;
    float _1804 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1735, _1738, _1741, _1744));
    float _1807 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1734, _1737, _1740, _1743));
    float _1810 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1733, _1736, _1739, _1742));
    float _1844;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1817 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1420, _1424, _1427, _1430));
        float _1821 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1422, _1425, _1428, _1431));
        float _1825 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1423, _1426, _1429, _1432));
        float _1832 = dot(vec4(cbModelParam._m0[39u]), vec4(_1801, _1802, _1803, 1.0));
        _1844 = dot(vec3(isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0)), isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)), isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1832) ? 0.0 : (isnan(0.0) ? _1832 : max(0.0, _1832))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1844 = 1.0;
    }
    float _1855;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1846 = dot(vec4(cbModelParam._m0[40u]), vec4(_1801, _1802, _1803, 1.0));
        _1855 = dot(vec3(isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)), isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1846) ? 0.0 : (isnan(0.0) ? _1846 : max(0.0, _1846))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1855 = 1.0;
    }
    float _1859 = (_1855 * cbModelParam._m0[1u].x) + (_1844 * (1.0 - cbModelParam._m0[1u].x));
    float _1869 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _934);
    float _1870 = isnan(_1869) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1869 : min(cbModelParam._m0[25u].z, _1869));
    float _1950;
    float _1952;
    float _1954;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1917 = fma(_1091, cbModelParam._m0[13u].z, fma(_1087, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1083)) + cbModelParam._m0[13u].w;
        float _1921 = fma(_1091, cbModelParam._m0[14u].z, fma(_1087, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1083)) + cbModelParam._m0[14u].w;
        float _1925 = fma(_1091, cbModelParam._m0[15u].z, fma(_1087, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1083)) + cbModelParam._m0[15u].w;
        float _1928 = fma(_1029, cbModelParam._m0[13u].z, fma(_1028, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1027));
        float _1931 = fma(_1029, cbModelParam._m0[14u].z, fma(_1028, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1027));
        float _1934 = fma(_1029, cbModelParam._m0[15u].z, fma(_1028, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1027));
        float _1962;
        if (_1928 > 0.0)
        {
            _1962 = abs((1.0 - _1917) / _1928);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1917 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1962 = frontier_phi_19_17_ladder;
        }
        float _2133;
        if (_1931 > 0.0)
        {
            _2133 = abs((1.0 - _1921) / _1931);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1921 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2133 = frontier_phi_28_24_ladder;
        }
        float _2427;
        if (_1934 > 0.0)
        {
            _2427 = abs((1.0 - _1925) / _1934);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1925 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2427 = frontier_phi_40_35_ladder;
        }
        float _2429 = isnan(_2133) ? _1962 : (isnan(_1962) ? _2133 : min(_1962, _2133));
        float _2430 = isnan(_2427) ? _2429 : (isnan(_2429) ? _2427 : min(_2429, _2427));
        float _2434 = (_2430 * _1928) + _1917;
        float _2435 = (_2430 * _1931) + _1921;
        float _2436 = (_2430 * _1934) + _1925;
        float _2437 = _2430 * 9.9999997473787516355514526367188e-05;
        float _2439 = (-1.0) - _2437;
        float _2441 = _2437 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2436 > _2441) || ((_2436 < _2439) || ((_2435 > _2441) || ((_2435 < _2439) || ((_2434 < _2439) || (_2434 > _2441))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2581 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2436, cbModelParam._m0[9u].z, fma(_2435, cbModelParam._m0[9u].y, _2434 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2436, cbModelParam._m0[10u].z, fma(_2435, cbModelParam._m0[10u].y, _2434 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2436, cbModelParam._m0[11u].z, fma(_2435, cbModelParam._m0[11u].y, _2434 * cbModelParam._m0[11u].x))), _1870);
            frontier_phi_18_40_ladder = _2581.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2581.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2581.x * cbModelParam._m0[1u].y;
        }
        _1950 = frontier_phi_18_40_ladder_2;
        _1952 = frontier_phi_18_40_ladder_1;
        _1954 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1938 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1027, _1028, _1029), _1870);
        _1950 = _1938.x * cbModelParam._m0[1u].y;
        _1952 = _1938.y * cbModelParam._m0[1u].y;
        _1954 = _1938.z * cbModelParam._m0[1u].y;
    }
    float _1958 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _934);
    float _1959 = isnan(_1958) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1958 : min(cbModelParam._m0[25u].w, _1958));
    float _2048;
    float _2050;
    float _2052;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2012 = fma(_1091, cbModelParam._m0[21u].z, fma(_1087, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1083)) + cbModelParam._m0[21u].w;
        float _2016 = fma(_1091, cbModelParam._m0[22u].z, fma(_1087, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1083)) + cbModelParam._m0[22u].w;
        float _2020 = fma(_1091, cbModelParam._m0[23u].z, fma(_1087, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1083)) + cbModelParam._m0[23u].w;
        float _2023 = fma(_1029, cbModelParam._m0[21u].z, fma(_1028, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1027));
        float _2026 = fma(_1029, cbModelParam._m0[22u].z, fma(_1028, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1027));
        float _2029 = fma(_1029, cbModelParam._m0[23u].z, fma(_1028, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1027));
        float _2138;
        if (_2023 > 0.0)
        {
            _2138 = abs((1.0 - _2012) / _2023);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2023 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2012 + 1.0) / _2023);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2138 = frontier_phi_30_26_ladder;
        }
        float _2454;
        if (_2026 > 0.0)
        {
            _2454 = abs((1.0 - _2016) / _2026);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2026 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2016 + 1.0) / _2026);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2454 = frontier_phi_42_37_ladder;
        }
        float _2792;
        if (_2029 > 0.0)
        {
            _2792 = abs((1.0 - _2020) / _2029);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2020 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2792 = frontier_phi_52_49_ladder;
        }
        float _2794 = isnan(_2454) ? _2138 : (isnan(_2138) ? _2454 : min(_2138, _2454));
        float _2795 = isnan(_2792) ? _2794 : (isnan(_2794) ? _2792 : min(_2794, _2792));
        float _2799 = (_2795 * _2023) + _2012;
        float _2800 = (_2795 * _2026) + _2016;
        float _2801 = (_2795 * _2029) + _2020;
        float _2802 = _2795 * 9.9999997473787516355514526367188e-05;
        float _2803 = (-1.0) - _2802;
        float _2805 = _2802 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2801 > _2805) || ((_2801 < _2803) || ((_2800 > _2805) || ((_2800 < _2803) || ((_2799 < _2803) || (_2799 > _2805))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2923 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2801, cbModelParam._m0[17u].z, fma(_2800, cbModelParam._m0[17u].y, _2799 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2801, cbModelParam._m0[18u].z, fma(_2800, cbModelParam._m0[18u].y, _2799 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2801, cbModelParam._m0[19u].z, fma(_2800, cbModelParam._m0[19u].y, _2799 * cbModelParam._m0[19u].x))), _1959);
            frontier_phi_27_52_ladder = _2923.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2923.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2923.x * cbModelParam._m0[1u].z;
        }
        _2048 = frontier_phi_27_52_ladder_2;
        _2050 = frontier_phi_27_52_ladder_1;
        _2052 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2032 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1027, _1028, _1029), _1959);
        _2048 = _2032.x * cbModelParam._m0[1u].z;
        _2050 = _2032.y * cbModelParam._m0[1u].z;
        _2052 = _2032.z * cbModelParam._m0[1u].z;
    }
    float _2065 = (((_1054 * _1004) + _1055) * _1019) * ((cbModelParam._m0[1u].w * (_2048 - _1950)) + _1950);
    float _2067 = (((_1054 * _1006) + _1055) * _1019) * ((cbModelParam._m0[1u].w * (_2050 - _1952)) + _1952);
    float _2069 = (((_1054 * _1007) + _1055) * _1019) * ((cbModelParam._m0[1u].w * (_2052 - _1954)) + _1954);
    float _2072 = fma(_2069, cbSceneParam._m0[89u].z, fma(_2067, cbSceneParam._m0[89u].y, _2065 * cbSceneParam._m0[89u].x));
    float _2075 = fma(_2069, cbSceneParam._m0[90u].z, fma(_2067, cbSceneParam._m0[90u].y, _2065 * cbSceneParam._m0[90u].x));
    float _2078 = fma(_2069, cbSceneParam._m0[91u].z, fma(_2067, cbSceneParam._m0[91u].y, _2065 * cbSceneParam._m0[91u].x));
    float _2112 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2116 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2120 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2124 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2125 = _2112 / _2124;
    float _2126 = _2116 / _2124;
    float _2127 = _2120 / _2124;
    float _2273;
    float _2274;
    float _2275;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2154 = ((uint(_2127 > cbSceneParam._m0[59u].y) + uint(_2127 > cbSceneParam._m0[59u].x)) + uint(_2127 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2155 = _2154 + 43u;
        uint _2163 = _2154 + 44u;
        uint _2171 = _2154 + 45u;
        uint _2179 = _2154 + 46u;
        float _2190 = fma(_2124, cbSceneParam._m0[_2155].w, fma(_2120, cbSceneParam._m0[_2155].z, fma(_2116, cbSceneParam._m0[_2155].y, _2112 * cbSceneParam._m0[_2155].x)));
        float _2194 = fma(_2124, cbSceneParam._m0[_2163].w, fma(_2120, cbSceneParam._m0[_2163].z, fma(_2116, cbSceneParam._m0[_2163].y, _2112 * cbSceneParam._m0[_2163].x)));
        float _2202 = fma(_2124, cbSceneParam._m0[_2179].w, fma(_2120, cbSceneParam._m0[_2179].z, fma(_2116, cbSceneParam._m0[_2179].y, _2112 * cbSceneParam._m0[_2179].x)));
        float _2207 = cbSceneParam._m0[33u].z * _2202;
        float _2209 = cbSceneParam._m0[33u].w * _2202;
        float _2212 = fma(_2124, cbSceneParam._m0[_2171].w, fma(_2120, cbSceneParam._m0[_2171].z, fma(_2116, cbSceneParam._m0[_2171].y, _2112 * cbSceneParam._m0[_2171].x))) / _2202;
        float _2259 = (cbSceneParam._m0[33u].x - sqrt(((_2126 * _2126) + (_2125 * _2125)) + (_2127 * _2127))) * cbSceneParam._m0[33u].y;
        float _4649 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2266 = (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2207 + _2190) / _2202, (_2209 + _2194) / _2202), _2212), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2209 + _2190) / _2202, (_2194 - _2207) / _2202), _2212), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2190 - _2207) / _2202, (_2194 - _2209) / _2202), _2212), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2190 - _2209) / _2202, (_2207 + _2194) / _2202), _2212), 0.0)).x), vec4(0.25)));
        _2273 = 1.0 - (_2266 * cbSceneParam._m0[34u].x);
        _2274 = 1.0 - (_2266 * cbSceneParam._m0[34u].y);
        _2275 = 1.0 - (_2266 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2273 = 1.0;
        _2274 = 1.0;
        _2275 = 1.0;
    }
    float _2339;
    float _2341;
    float _2343;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2327 = fma(_2124, cbSceneParam._m0[63u].w, fma(_2120, cbSceneParam._m0[63u].z, fma(_2116, cbSceneParam._m0[63u].y, _2112 * cbSceneParam._m0[63u].x)));
        float _2328 = fma(_2124, cbSceneParam._m0[60u].w, fma(_2120, cbSceneParam._m0[60u].z, fma(_2116, cbSceneParam._m0[60u].y, _2112 * cbSceneParam._m0[60u].x))) / _2327;
        float _2329 = fma(_2124, cbSceneParam._m0[61u].w, fma(_2120, cbSceneParam._m0[61u].z, fma(_2116, cbSceneParam._m0[61u].y, _2112 * cbSceneParam._m0[61u].x))) / _2327;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2328 >= cbSceneParam._m0[64u].x) && (_2329 >= cbSceneParam._m0[64u].y)) && (_2328 <= cbSceneParam._m0[64u].z)) && (_2329 <= cbSceneParam._m0[64u].w))
        {
            float _2467 = fma(_2124, cbSceneParam._m0[62u].w, fma(_2120, cbSceneParam._m0[62u].z, fma(_2116, cbSceneParam._m0[62u].y, _2112 * cbSceneParam._m0[62u].x))) / _2327;
            float _2471 = isnan(cbSceneParam._m0[41u].w) ? _2467 : (isnan(_2467) ? cbSceneParam._m0[41u].w : max(_2467, cbSceneParam._m0[41u].w));
            float _2514 = (cbSceneParam._m0[33u].x - sqrt(((_2126 * _2126) + (_2125 * _2125)) + (_2127 * _2127))) * cbSceneParam._m0[33u].y;
            float _4665 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
            float _2521 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2328, cbSceneParam._m0[33u].w + _2329), _2471), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2328, _2329 - cbSceneParam._m0[33u].z), _2471), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2328 - cbSceneParam._m0[33u].z, _2329 - cbSceneParam._m0[33u].w), _2471), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2328 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2329), _2471), 0.0)).x), vec4(0.25)));
            float _2525 = 1.0 - (_2521 * cbSceneParam._m0[34u].x);
            float _2526 = 1.0 - (_2521 * cbSceneParam._m0[34u].y);
            float _2527 = 1.0 - (_2521 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2526) ? _2274 : (isnan(_2274) ? _2526 : min(_2274, _2526));
            frontier_phi_39_38_ladder_1 = isnan(_2525) ? _2273 : (isnan(_2273) ? _2525 : min(_2273, _2525));
            frontier_phi_39_38_ladder_2 = isnan(_2527) ? _2275 : (isnan(_2275) ? _2527 : min(_2275, _2527));
        }
        else
        {
            frontier_phi_39_38_ladder = _2274;
            frontier_phi_39_38_ladder_1 = _2273;
            frontier_phi_39_38_ladder_2 = _2275;
        }
        _2339 = frontier_phi_39_38_ladder_1;
        _2341 = frontier_phi_39_38_ladder;
        _2343 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2339 = _2273;
        _2341 = _2274;
        _2343 = _2275;
    }
    uvec4 _2348 = floatBitsToUint(cbInstanceData._m0[_947 + 5u]);
    uint _2350 = _2348.x * 14u;
    uint _2351 = _2350 + 13u;
    float _2358 = _1019 + (-1.0);
    float _2363 = (cbLight._m0[_2351].x * _2358) + 1.0;
    float _2364 = (cbLight._m0[_2351].y * _2358) + 1.0;
    float _2365 = (cbLight._m0[_2351].z * _2358) + 1.0;
    float _2366 = (cbLight._m0[_2351].w * _2358) + 1.0;
    uint _2367 = _2350 + 5u;
    float _2373 = isnan(1.0) ? _2364 : (isnan(_2364) ? 1.0 : min(_2364, 1.0));
    uint _2377 = _2350 + 4u;
    float _2386 = isnan(1.0) ? _2363 : (isnan(_2363) ? 1.0 : min(_2363, 1.0));
    uint _2390 = _2350 | 1u;
    float _2401 = dot(vec3(cbLight._m0[_2350].xyz), vec3(_792, _793, _794));
    float _2404 = dot(vec3(cbLight._m0[_2390].xyz), vec3(_792, _793, _794));
    float _4701 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _4712 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _2409 = (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * 0.3183098733425140380859375;
    float _2411 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * 0.3183098733425140380859375;
    float _2418 = ((cbLight._m0[_2367].x * _2373) * _2411) + (((cbLight._m0[_2377].x * _2339) * _2386) * _2409);
    float _2419 = ((_2373 * cbLight._m0[_2367].y) * _2411) + (((cbLight._m0[_2377].y * _2341) * _2386) * _2409);
    float _2420 = ((_2373 * cbLight._m0[_2367].z) * _2411) + (((cbLight._m0[_2377].z * _2343) * _2386) * _2409);
    uvec4 _2424 = floatBitsToUint(cbLight._m0[_2350 + 12u]);
    bool _2426 = _2424.x == 0u;
    float _2528;
    float _2530;
    float _2532;
    if (_2426)
    {
        _2528 = _2418;
        _2530 = _2419;
        _2532 = _2420;
    }
    else
    {
        uint _2536 = _2350 + 6u;
        float _2552 = (dot(vec3(cbLight._m0[_2350 + 2u].xyz), vec3(_792, _793, _794)) * 0.5) + 0.5;
        float _2553 = _2552 * _2552;
        float _4723 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2554 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2555 = isnan(1.0) ? _2365 : (isnan(_2365) ? 1.0 : min(_2365, 1.0));
        _2528 = (((cbLight._m0[_2536].x * 0.3183098733425140380859375) * _2554) * _2555) + _2418;
        _2530 = (((cbLight._m0[_2536].y * 0.3183098733425140380859375) * _2554) * _2555) + _2419;
        _2532 = (((cbLight._m0[_2536].z * 0.3183098733425140380859375) * _2554) * _2555) + _2420;
    }
    bool _2535 = _2424.y == 0u;
    float _2590;
    float _2592;
    float _2594;
    if (_2535)
    {
        _2590 = _2528;
        _2592 = _2530;
        _2594 = _2532;
    }
    else
    {
        uint _2763 = _2350 + 7u;
        float _2779 = (dot(vec3(cbLight._m0[_2350 + 3u].xyz), vec3(_792, _793, _794)) * 0.5) + 0.5;
        float _2780 = _2779 * _2779;
        float _4739 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2781 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
        float _2782 = isnan(1.0) ? _2366 : (isnan(_2366) ? 1.0 : min(_2366, 1.0));
        _2590 = (((cbLight._m0[_2763].x * 0.3183098733425140380859375) * _2781) * _2782) + _2528;
        _2592 = (((cbLight._m0[_2763].y * 0.3183098733425140380859375) * _2781) * _2782) + _2530;
        _2594 = (((cbLight._m0[_2763].z * 0.3183098733425140380859375) * _2781) * _2782) + _2532;
    }
    uint _2597 = _2350 + 8u;
    float _2610 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2350].w)) * _934) * 0.949999988079071044921875);
    float _2611 = _2610 * _2610;
    float _2612 = cbLight._m0[_2350].x + _872;
    float _2613 = cbLight._m0[_2350].y + _873;
    float _2614 = cbLight._m0[_2350].z + _874;
    float _2618 = inversesqrt(dot(vec3(_2612, _2613, _2614), vec3(_2612, _2613, _2614)));
    float _2619 = _2618 * _2612;
    float _2620 = _2618 * _2613;
    float _2621 = _2618 * _2614;
    float _2622 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2350].xyz));
    float _4755 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2625 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
    float _4766 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _2626 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
    float _2627 = dot(vec3(_792, _793, _794), vec3(_2619, _2620, _2621));
    float _4777 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
    float _2630 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
    float _2631 = dot(vec3(cbLight._m0[_2350].xyz), vec3(_2619, _2620, _2621));
    float _4788 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2635 = _2611 * _2611;
    float _2639 = ((_2630 * _2630) * (_2635 + (-1.0))) + 1.0;
    float _2647 = exp2(log2(1.0 - (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0)))) * 5.0);
    float _2648 = 0.959999978542327880859375 - _1001;
    float _2650 = 0.959999978542327880859375 - _1002;
    float _2651 = 0.959999978542327880859375 - _1003;
    float _2658 = 1.0 - _2611;
    float _2669 = (0.5 / (((_2626 * ((_2625 * _2658) + _2611)) + 9.9999999392252902907785028219223e-09) + (((_2626 * _2658) + _2611) * _2625))) * _2625;
    float _4799 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
    float _2671 = (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2635 / ((_2639 * _2639) * 3.141590118408203125));
    uint _2685 = _2350 + 9u;
    float _2696 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2390].w)) * _934) * 0.949999988079071044921875);
    float _2697 = _2696 * _2696;
    float _2698 = cbLight._m0[_2390].x + _872;
    float _2699 = cbLight._m0[_2390].y + _873;
    float _2700 = cbLight._m0[_2390].z + _874;
    float _2704 = inversesqrt(dot(vec3(_2698, _2699, _2700), vec3(_2698, _2699, _2700)));
    float _2705 = _2704 * _2698;
    float _2706 = _2704 * _2699;
    float _2707 = _2704 * _2700;
    float _2708 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2390].xyz));
    float _4810 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
    float _2711 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
    float _2712 = dot(vec3(_792, _793, _794), vec3(_2705, _2706, _2707));
    float _4821 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
    float _2715 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
    float _2716 = dot(vec3(cbLight._m0[_2390].xyz), vec3(_2705, _2706, _2707));
    float _4832 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
    float _2720 = _2697 * _2697;
    float _2724 = ((_2715 * _2715) * (_2720 + (-1.0))) + 1.0;
    float _2731 = exp2(log2(1.0 - (isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0)))) * 5.0);
    float _2738 = 1.0 - _2697;
    float _2748 = (0.5 / (((_2626 * ((_2711 * _2738) + _2697)) + 9.9999999392252902907785028219223e-09) + (((_2626 * _2738) + _2697) * _2711))) * _2711;
    float _4843 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
    float _2750 = (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0))) * (_2720 / ((_2724 * _2724) * 3.141590118408203125));
    float _2760 = (((((_2731 * _2648) + _1004) * cbLight._m0[_2685].x) * _2750) * _2373) + ((((cbLight._m0[_2597].x * _2339) * ((_2647 * _2648) + _1004)) * _2671) * _2386);
    float _2761 = (((((_2731 * _2650) + _1006) * cbLight._m0[_2685].y) * _2750) * _2373) + ((((cbLight._m0[_2597].y * _2341) * ((_2647 * _2650) + _1006)) * _2671) * _2386);
    float _2762 = (((((_2731 * _2651) + _1007) * cbLight._m0[_2685].z) * _2750) * _2373) + ((((cbLight._m0[_2597].z * _2343) * ((_2647 * _2651) + _1007)) * _2671) * _2386);
    float _2818;
    float _2820;
    float _2822;
    if (_2426)
    {
        _2818 = _2760;
        _2820 = _2761;
        _2822 = _2762;
    }
    else
    {
        uint _2824 = _2350 + 2u;
        uint _2828 = _2350 + 10u;
        float _2842 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2824].w)) * _934) * 0.949999988079071044921875);
        float _2843 = _2842 * _2842;
        float _2844 = cbLight._m0[_2824].x + _872;
        float _2845 = cbLight._m0[_2824].y + _873;
        float _2846 = cbLight._m0[_2824].z + _874;
        float _2850 = inversesqrt(dot(vec3(_2844, _2845, _2846), vec3(_2844, _2845, _2846)));
        float _2851 = _2850 * _2844;
        float _2852 = _2850 * _2845;
        float _2853 = _2850 * _2846;
        float _2854 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2824].xyz));
        float _4854 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        float _2857 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
        float _2858 = dot(vec3(_792, _793, _794), vec3(_2851, _2852, _2853));
        float _4865 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
        float _2861 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
        float _2862 = dot(vec3(cbLight._m0[_2824].xyz), vec3(_2851, _2852, _2853));
        float _4876 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        float _2866 = _2843 * _2843;
        float _2870 = ((_2861 * _2861) * (_2866 + (-1.0))) + 1.0;
        float _2877 = exp2(log2(1.0 - (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0)))) * 5.0);
        float _2884 = 1.0 - _2843;
        float _2894 = (0.5 / (((_2626 * ((_2857 * _2884) + _2843)) + 9.9999999392252902907785028219223e-09) + (((_2626 * _2884) + _2843) * _2857))) * _2857;
        float _4887 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        float _2896 = (isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2866 / ((_2870 * _2870) * 3.141590118408203125));
        float _2897 = isnan(1.0) ? _2365 : (isnan(_2365) ? 1.0 : min(_2365, 1.0));
        _2818 = (((((_2877 * _2648) + _1004) * cbLight._m0[_2828].x) * _2896) * _2897) + _2760;
        _2820 = (((((_2877 * _2650) + _1006) * cbLight._m0[_2828].y) * _2896) * _2897) + _2761;
        _2822 = (((((_2877 * _2651) + _1007) * cbLight._m0[_2828].z) * _2896) * _2897) + _2762;
    }
    float _2928;
    float _2930;
    float _2932;
    if (_2535)
    {
        _2928 = _2818;
        _2930 = _2820;
        _2932 = _2822;
    }
    else
    {
        uint _2939 = _2350 + 3u;
        uint _2943 = _2350 + 11u;
        float _2957 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2939].w)) * _934) * 0.949999988079071044921875);
        float _2958 = _2957 * _2957;
        float _2959 = cbLight._m0[_2939].x + _872;
        float _2960 = cbLight._m0[_2939].y + _873;
        float _2961 = cbLight._m0[_2939].z + _874;
        float _2965 = inversesqrt(dot(vec3(_2959, _2960, _2961), vec3(_2959, _2960, _2961)));
        float _2966 = _2965 * _2959;
        float _2967 = _2965 * _2960;
        float _2968 = _2965 * _2961;
        float _2969 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2939].xyz));
        float _4903 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
        float _2972 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
        float _2973 = dot(vec3(_792, _793, _794), vec3(_2966, _2967, _2968));
        float _4914 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
        float _2976 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
        float _2977 = dot(vec3(cbLight._m0[_2939].xyz), vec3(_2966, _2967, _2968));
        float _4925 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
        float _2981 = _2958 * _2958;
        float _2985 = ((_2976 * _2976) * (_2981 + (-1.0))) + 1.0;
        float _2992 = exp2(log2(1.0 - (isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0)))) * 5.0);
        float _2999 = 1.0 - _2958;
        float _3009 = (0.5 / (((_2626 * ((_2972 * _2999) + _2958)) + 9.9999999392252902907785028219223e-09) + (((_2626 * _2999) + _2958) * _2972))) * _2972;
        float _4936 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
        float _3011 = (isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_2981 / ((_2985 * _2985) * 3.141590118408203125));
        float _3012 = isnan(1.0) ? _2366 : (isnan(_2366) ? 1.0 : min(_2366, 1.0));
        _2928 = (((((_2992 * _2648) + _1004) * cbLight._m0[_2943].x) * _3011) * _3012) + _2818;
        _2930 = (((((_2992 * _2650) + _1006) * cbLight._m0[_2943].y) * _3011) * _3012) + _2820;
        _2932 = (((((_2992 * _2651) + _1007) * cbLight._m0[_2943].z) * _3011) * _3012) + _2822;
    }
    float _3077;
    float _3079;
    float _3081;
    float _3083;
    float _3085;
    float _3087;
    if (_2348.y == 0u)
    {
        uvec4 _3033 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3034 = _3033.x;
        uint _3045 = uint((float(_3033.y) * floor(float(uint(cbSceneParam._m0[85u].y * _893) / _3034))) + floor(float(uint(cbSceneParam._m0[85u].x * _892) / _3034)));
        float _3055 = (log2(_2127 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3056 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
        uint _3059 = uint(isnan(14.0) ? _3056 : (isnan(_3056) ? 14.0 : min(_3056, 14.0)));
        uvec4 _3064 = texelFetch(g_lightClusterGridBuffer, int(((_3059 << 2u) + (_3045 << 6u)) >> 2u));
        uint _3065 = _3064.x;
        uint _3066 = _3033.z;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        float _3187;
        float _3189;
        if (((((1u << ((_3066 >> 4u) & 15u)) + 4294967295u) & _3065) == 0u) || ((_3066 & 240u) == 0u))
        {
            _3179 = 0.0;
            _3181 = 0.0;
            _3183 = 0.0;
            _3185 = 0.0;
            _3187 = 0.0;
            _3189 = 0.0;
        }
        else
        {
            float _3180;
            float _3182;
            float _3184;
            float _3186;
            float _3188;
            float _3190;
            float _3340 = 0.0;
            float _3341 = 0.0;
            float _3342 = 0.0;
            float _3343 = 0.0;
            float _3344 = 0.0;
            float _3345 = 0.0;
            uint _3346 = 0u;
            uint _3355;
            bool _3356;
            for (;;)
            {
                _3355 = texelFetch(g_lightClassification, int((((_3059 << 5u) + (_3045 << 9u)) + (_3346 << 2u)) >> 2u)).x;
                _3356 = _3355 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3356)
                {
                    frontier_phi_73_pred = _3345;
                    frontier_phi_73_pred_1 = _3344;
                    frontier_phi_73_pred_2 = _3343;
                    frontier_phi_73_pred_3 = _3342;
                    frontier_phi_73_pred_4 = _3341;
                    frontier_phi_73_pred_5 = _3340;
                }
                else
                {
                    float _3485;
                    float _3486;
                    float _3487;
                    float _3488;
                    float _3489;
                    float _3490;
                    uint _3491;
                    _3485 = _3340;
                    _3486 = _3341;
                    _3487 = _3342;
                    _3488 = _3343;
                    _3489 = _3344;
                    _3490 = _3345;
                    _3491 = _3355;
                    float _3412;
                    float _3413;
                    float _3414;
                    float _3415;
                    float _3416;
                    float _3417;
                    for (;;)
                    {
                        uint _3495 = uint(findLSB(_3491)) + (_3346 << 5u);
                        uint _3492 = (_3491 + 4294967295u) & _3491;
                        uint _3497 = _3495 * 48u;
                        vec4 _3511 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3497)).x, texelFetch(g_PointLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3497 + 3u)).x));
                        uint _3517 = (_3495 * 48u) + 4u;
                        vec4 _3530 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3517)).x, texelFetch(g_PointLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3517 + 3u)).x));
                        uint _3536 = (_3495 * 48u) + 8u;
                        vec3 _3547 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3536)).x, texelFetch(g_PointLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3536 + 2u)).x));
                        float _3551 = _3511.x - _2125;
                        float _3552 = _3511.y - _2126;
                        float _3553 = _3511.z - _2127;
                        float _3554 = dot(vec3(_3551, _3552, _3553), vec3(_3551, _3552, _3553));
                        float _3557 = inversesqrt(_3554);
                        float _3558 = _3557 * _3551;
                        float _3559 = _3557 * _3552;
                        float _3560 = _3557 * _3553;
                        float _3561 = dot(vec3(_915, _918, _921), vec3(_3558, _3559, _3560));
                        float _3566 = 1.0 - (_3554 * _3511.w);
                        float _4962 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                        float _3567 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                        float _3568 = sqrt(_3554) * _3530.w;
                        float _3571 = 1.39999997615814208984375 / (_3568 + 1.39999997615814208984375);
                        float _3572 = _3571 * _3571;
                        float _3575 = ((1.0 - _3572) * _3561) + _3572;
                        float _3578 = _3568 * _3568;
                        float _3582 = ((isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0))) * _3567) / ((_3578 * 0.699999988079071044921875) + 1.0);
                        float _3586 = (-0.0) - _2125;
                        float _3587 = (-0.0) - _2126;
                        float _3588 = (-0.0) - _2127;
                        float _3592 = inversesqrt(dot(vec3(_3586, _3587, _3588), vec3(_3586, _3587, _3588)));
                        float _3593 = _3592 * _3586;
                        float _3594 = _3592 * _3587;
                        float _3595 = _3592 * _3588;
                        float _3602 = exp2(log2(1.0 / ((_3578 * 3.5) + 5.0)) * 0.25);
                        float _3603 = 1.0 - _1035;
                        float _3610 = sqrt(1.0 - ((1.0 - (_3603 * _3603)) * (1.0 - (_3602 * _3602))));
                        float _3611 = _3610 * _3610;
                        float _3612 = _3611 * _3611;
                        float _3613 = _3593 + _3558;
                        float _3614 = _3594 + _3559;
                        float _3615 = _3595 + _3560;
                        float _3619 = inversesqrt(dot(vec3(_3613, _3614, _3615), vec3(_3613, _3614, _3615)));
                        float _3623 = dot(vec3(_915, _918, _921), vec3(_3593, _3594, _3595));
                        float _4978 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                        float _3626 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
                        float _3627 = dot(vec3(_915, _918, _921), vec3(_3619 * _3613, _3619 * _3614, _3619 * _3615));
                        float _4989 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                        float _3630 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
                        float _3634 = ((_3630 * _3630) * (_3612 + (-1.0))) + 1.0;
                        float _3635 = _3571 * _3611;
                        float _3636 = _3635 * _3635;
                        float _3639 = ((1.0 - _3636) * _3561) + _3636;
                        float _5000 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                        float _3640 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
                        float _3641 = 1.0 - _3611;
                        float _3651 = (0.5 / (((_3640 * ((_3626 * _3641) + _3611)) + 9.9999999392252902907785028219223e-09) + (((_3640 * _3641) + _3611) * _3626))) * _3640;
                        float _5011 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                        float _3662 = (((_3612 * 3.1415927410125732421875) * (isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0)))) / ((_3634 * _3634) * ((_3578 * 2.1991131305694580078125) + 3.141590118408203125))) * _3567;
                        _3415 = (_3582 * _3530.x) + _3488;
                        _3416 = (_3582 * _3530.y) + _3489;
                        _3417 = (_3582 * _3530.z) + _3490;
                        _3412 = (_3662 * _3547.x) + _3485;
                        _3413 = (_3662 * _3547.y) + _3486;
                        _3414 = (_3662 * _3547.z) + _3487;
                        if (_3492 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3485 = _3412;
                            _3486 = _3413;
                            _3487 = _3414;
                            _3488 = _3415;
                            _3489 = _3416;
                            _3490 = _3417;
                            _3491 = _3492;
                        }
                    }
                    frontier_phi_73_pred = _3417;
                    frontier_phi_73_pred_1 = _3416;
                    frontier_phi_73_pred_2 = _3415;
                    frontier_phi_73_pred_3 = _3414;
                    frontier_phi_73_pred_4 = _3413;
                    frontier_phi_73_pred_5 = _3412;
                }
                _3190 = frontier_phi_73_pred;
                _3188 = frontier_phi_73_pred_1;
                _3186 = frontier_phi_73_pred_2;
                _3184 = frontier_phi_73_pred_3;
                _3182 = frontier_phi_73_pred_4;
                _3180 = frontier_phi_73_pred_5;
                uint _3347 = _3346 + 1u;
                if (_3347 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3340 = _3180;
                    _3341 = _3182;
                    _3342 = _3184;
                    _3343 = _3186;
                    _3344 = _3188;
                    _3345 = _3190;
                    _3346 = _3347;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3179 = _3180;
            _3181 = _3182;
            _3183 = _3184;
            _3185 = _3186;
            _3187 = _3188;
            _3189 = _3190;
        }
        uvec4 _3193 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3194 = _3193.z;
        uint _3196 = (_3194 >> 8u) & 15u;
        float _3308;
        float _3310;
        float _3312;
        float _3314;
        float _3316;
        float _3318;
        if (((4294967295u << _3196) & _3065) == 0u)
        {
            _3308 = _3179;
            _3310 = _3181;
            _3312 = _3183;
            _3314 = _3185;
            _3316 = _3187;
            _3318 = _3189;
        }
        else
        {
            float _3333 = inversesqrt(dot(vec3(_2125, _2126, _2127), vec3(_2125, _2126, _2127)));
            float _3334 = _3333 * _2125;
            float _3335 = _3333 * _2126;
            float _3336 = _3333 * _2127;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3196 < ((_3194 >> 12u) & 15u))
            {
                float _3309;
                float _3311;
                float _3313;
                float _3315;
                float _3317;
                float _3319;
                float _3468 = _3179;
                float _3469 = _3181;
                float _3470 = _3183;
                float _3471 = _3185;
                float _3472 = _3187;
                float _3473 = _3189;
                uint _3474 = _3196;
                uint _3483;
                bool _3484;
                for (;;)
                {
                    _3483 = texelFetch(g_lightClassification, int((((_3059 << 5u) + (_3045 << 9u)) + (_3474 << 2u)) >> 2u)).x;
                    _3484 = _3483 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3484)
                    {
                        frontier_phi_84_pred = _3472;
                        frontier_phi_84_pred_1 = _3471;
                        frontier_phi_84_pred_2 = _3470;
                        frontier_phi_84_pred_3 = _3469;
                        frontier_phi_84_pred_4 = _3468;
                        frontier_phi_84_pred_5 = _3473;
                    }
                    else
                    {
                        float _3676;
                        float _3677;
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3969;
                        float _3970;
                        float _3971;
                        float _3972;
                        float _3973;
                        float _3974;
                        float _3689 = _3468;
                        float _3690 = _3469;
                        float _3691 = _3470;
                        float _3692 = _3471;
                        float _3693 = _3472;
                        float _3694 = _3473;
                        uint _3695 = _3483;
                        uint _3696;
                        vec4 _3721;
                        float _3722;
                        vec4 _3737;
                        vec3 _3749;
                        vec4 _3764;
                        vec4 _3779;
                        float _3825;
                        bool _3826;
                        for (;;)
                        {
                            uint _3706 = ((_3474 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3695));
                            _3696 = (_3695 + 4294967295u) & _3695;
                            uint _3708 = _3706 * 40u;
                            _3721 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3708)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 3u)).x));
                            _3722 = _3721.w;
                            uint _3724 = (_3706 * 40u) + 4u;
                            _3737 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 3u)).x));
                            uint _3739 = (_3706 * 40u) + 8u;
                            _3749 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3739)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 2u)).x));
                            uint _3751 = (_3706 * 40u) + 16u;
                            _3764 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3751)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 3u)).x));
                            uint _3766 = (_3706 * 40u) + 20u;
                            _3779 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3766)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 3u)).x));
                            uint _3781 = (_3706 * 40u) + 24u;
                            vec4 _3794 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3781)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 3u)).x));
                            uint _3800 = (_3706 * 40u) + 28u;
                            vec4 _3813 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3800)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 3u)).x));
                            _3825 = fma(_2127, _3813.z, fma(_2126, _3813.y, _3813.x * _2125)) + _3813.w;
                            _3826 = !((fma(_2127, _3794.z, fma(_2126, _3794.y, _3794.x * _2125)) + _3794.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3826)
                            {
                                float _3853 = _3721.x - _2125;
                                float _3854 = _3721.y - _2126;
                                float _3855 = _3721.z - _2127;
                                float _3856 = dot(vec3(_3853, _3854, _3855), vec3(_3853, _3854, _3855));
                                float _3859 = inversesqrt(_3856);
                                float _3860 = _3859 * _3853;
                                float _3861 = _3859 * _3854;
                                float _3862 = _3859 * _3855;
                                float _3866 = 1.0 - (_3856 / (_3722 * _3722));
                                float _5022 = isnan(0.0) ? _3866 : (isnan(_3866) ? 0.0 : max(_3866, 0.0));
                                float _3867 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
                                float _3871 = sqrt(_3856) * _3737.w;
                                float _3873 = 1.39999997615814208984375 / (_3871 + 1.39999997615814208984375);
                                float _3874 = _3873 * _3873;
                                float _3877 = ((1.0 - _3874) * dot(vec3(_3860, _3861, _3862), vec3(_915, _918, _921))) + _3874;
                                float _3880 = _3871 * _3871;
                                float _3884 = (fma(_2127, _3764.z, fma(_2126, _3764.y, _3764.x * _2125)) + _3764.w) / _3825;
                                float _3885 = (fma(_2127, _3779.z, fma(_2126, _3779.y, _3779.x * _2125)) + _3779.w) / _3825;
                                float _3889 = 1.0 - dot(vec2(_3884, _3885), vec2(_3884, _3885));
                                float _5038 = isnan(0.0) ? _3889 : (isnan(_3889) ? 0.0 : max(_3889, 0.0));
                                float _3890 = isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0));
                                float _3891 = _3890 * (((isnan(0.0) ? _3877 : (isnan(_3877) ? 0.0 : max(_3877, 0.0))) * _3867) / ((_3880 * 0.699999988079071044921875) + 1.0));
                                float _3903 = exp2(log2(1.0 / ((_3880 * 3.5) + 5.0)) * 0.25);
                                float _3904 = 1.0 - _1035;
                                float _3911 = sqrt(1.0 - ((1.0 - (_3904 * _3904)) * (1.0 - (_3903 * _3903))));
                                float _3912 = _3911 * _3911;
                                float _3913 = _3912 * _3912;
                                float _3914 = _3860 - _3334;
                                float _3915 = _3861 - _3335;
                                float _3916 = _3862 - _3336;
                                float _3920 = inversesqrt(dot(vec3(_3914, _3915, _3916), vec3(_3914, _3915, _3916)));
                                float _3924 = dot(vec3(_915, _918, _921), vec3((-0.0) - _3334, (-0.0) - _3335, (-0.0) - _3336));
                                float _5049 = isnan(0.0) ? _3924 : (isnan(_3924) ? 0.0 : max(_3924, 0.0));
                                float _3927 = isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0));
                                float _3928 = dot(vec3(_915, _918, _921), vec3(_3920 * _3914, _3920 * _3915, _3920 * _3916));
                                float _5060 = isnan(0.0) ? _3928 : (isnan(_3928) ? 0.0 : max(_3928, 0.0));
                                float _3931 = isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0));
                                float _3935 = ((_3931 * _3931) * (_3913 + (-1.0))) + 1.0;
                                float _3936 = _3873 * _3912;
                                float _3937 = _3936 * _3936;
                                float _3943 = ((1.0 - _3937) * dot(vec3(_915, _918, _921), vec3(_3860, _3861, _3862))) + _3937;
                                float _5071 = isnan(0.0) ? _3943 : (isnan(_3943) ? 0.0 : max(_3943, 0.0));
                                float _3944 = isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0));
                                float _3945 = 1.0 - _3912;
                                float _3955 = (0.5 / (((_3944 * ((_3927 * _3945) + _3912)) + 9.9999999392252902907785028219223e-09) + (((_3944 * _3945) + _3912) * _3927))) * _3944;
                                float _5082 = isnan(0.0) ? _3955 : (isnan(_3955) ? 0.0 : max(_3955, 0.0));
                                float _3965 = (_3890 * _3867) * (((_3913 * 3.1415927410125732421875) * (isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0)))) / ((_3935 * _3935) * ((_3880 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3891 * _3737.y;
                                frontier_phi_90_pred_1 = _3891 * _3737.x;
                                frontier_phi_90_pred_2 = _3965 * _3749.z;
                                frontier_phi_90_pred_3 = _3965 * _3749.y;
                                frontier_phi_90_pred_4 = _3965 * _3749.x;
                                frontier_phi_90_pred_5 = _3891 * _3737.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3973 = frontier_phi_90_pred;
                            _3972 = frontier_phi_90_pred_1;
                            _3971 = frontier_phi_90_pred_2;
                            _3970 = frontier_phi_90_pred_3;
                            _3969 = frontier_phi_90_pred_4;
                            _3974 = frontier_phi_90_pred_5;
                            _3679 = _3972 + _3692;
                            _3680 = _3973 + _3693;
                            _3681 = _3974 + _3694;
                            _3676 = _3969 + _3689;
                            _3677 = _3970 + _3690;
                            _3678 = _3971 + _3691;
                            if (_3696 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3689 = _3676;
                                _3690 = _3677;
                                _3691 = _3678;
                                _3692 = _3679;
                                _3693 = _3680;
                                _3694 = _3681;
                                _3695 = _3696;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3680;
                        frontier_phi_84_pred_1 = _3679;
                        frontier_phi_84_pred_2 = _3678;
                        frontier_phi_84_pred_3 = _3677;
                        frontier_phi_84_pred_4 = _3676;
                        frontier_phi_84_pred_5 = _3681;
                    }
                    _3317 = frontier_phi_84_pred;
                    _3315 = frontier_phi_84_pred_1;
                    _3313 = frontier_phi_84_pred_2;
                    _3311 = frontier_phi_84_pred_3;
                    _3309 = frontier_phi_84_pred_4;
                    _3319 = frontier_phi_84_pred_5;
                    uint _3475 = _3474 + 1u;
                    if (_3475 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3468 = _3309;
                        _3469 = _3311;
                        _3470 = _3313;
                        _3471 = _3315;
                        _3472 = _3317;
                        _3473 = _3319;
                        _3474 = _3475;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3319;
                frontier_phi_65_66_ladder_1 = _3315;
                frontier_phi_65_66_ladder_2 = _3317;
                frontier_phi_65_66_ladder_3 = _3311;
                frontier_phi_65_66_ladder_4 = _3309;
                frontier_phi_65_66_ladder_5 = _3313;
            }
            else
            {
                frontier_phi_65_66_ladder = _3189;
                frontier_phi_65_66_ladder_1 = _3185;
                frontier_phi_65_66_ladder_2 = _3187;
                frontier_phi_65_66_ladder_3 = _3181;
                frontier_phi_65_66_ladder_4 = _3179;
                frontier_phi_65_66_ladder_5 = _3183;
            }
            _3308 = frontier_phi_65_66_ladder_4;
            _3310 = frontier_phi_65_66_ladder_3;
            _3312 = frontier_phi_65_66_ladder_5;
            _3314 = frontier_phi_65_66_ladder_1;
            _3316 = frontier_phi_65_66_ladder_2;
            _3318 = frontier_phi_65_66_ladder;
        }
        float _3323 = isnan(1.0) ? _1019 : (isnan(_1019) ? 1.0 : min(_1019, 1.0));
        _3077 = (_3323 * _3314) + _2590;
        _3079 = (_3323 * _3316) + _2592;
        _3081 = (_3323 * _3318) + _2594;
        _3083 = ((_3308 * _1004) * _3323) + _2928;
        _3085 = ((_3310 * _1006) * _3323) + _2930;
        _3087 = ((_3312 * _1007) * _3323) + _2932;
    }
    else
    {
        _3077 = _2590;
        _3079 = _2592;
        _3081 = _2594;
        _3083 = _2928;
        _3085 = _2930;
        _3087 = _2932;
    }
    uint _3093 = _948 + uint(cbMatDynParam._m0[0u].w);
    float _3101 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[22u].z) * _736.x) * cbInstanceData._m0[_3093].x;
    float _3104 = ((cbMtdParam._m0[11u].y * cbMtdParam._m0[22u].z) * _736.y) * cbInstanceData._m0[_3093].y;
    float _3107 = ((cbMtdParam._m0[11u].z * cbMtdParam._m0[22u].z) * _736.z) * cbInstanceData._m0[_3093].z;
    float _5098 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _5109 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _5120 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _3124 = (((isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0))) * (_3077 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1019))) + ((_3083 + ((isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0))) * _1859)) * cbPerFrame._m0[3u].x)) + _3101;
    float _3126 = (_3104 + ((_3085 + ((isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0))) * _1859)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0))) * (_3079 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1019)));
    float _3128 = (_3107 + ((_3087 + ((isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0))) * _1859)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0))) * (_3081 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1019)));
    float _3129 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
    float _3130 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
    float _3131 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
    float _3137 = cbMtdParam._m0[2u].x * _3101;
    float _3138 = cbMtdParam._m0[2u].y * _3104;
    float _3139 = cbMtdParam._m0[2u].z * _3107;
    float _5146 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3141 = isnan(1.0) ? _5146 : (isnan(_5146) ? 1.0 : min(_5146, 1.0));
    uint _3142 = _947 + 6u;
    float _3150 = _892 / cbSceneParam._m0[86u].x;
    float _3151 = _893 / cbSceneParam._m0[86u].y;
    vec4 _3165 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3150, _3151, (log2((isnan(cbSceneParam._m0[77u].w) ? _815 : (isnan(_815) ? cbSceneParam._m0[77u].w : min(_815, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3167 = _3165.x;
    float _3168 = _3165.y;
    float _3169 = _3165.z;
    float _3170 = _3165.w;
    float _3241;
    float _3243;
    float _3245;
    float _3247;
    if (_815 > cbSceneParam._m0[78u].w)
    {
        float _3204 = isnan(_815) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _815 : min(cbSceneParam._m0[80u].w, _815));
        float _3205 = _3204 / _815;
        float _3216 = _3205 * _865;
        float _3217 = _866 * _3205;
        float _3218 = (-0.0) - _3217;
        float _3219 = _3205 * _867;
        float _3221 = (cbSceneParam._m0[77u].w * _3218) / _3204;
        float _3222 = _3221 + cbSceneParam._m0[79u].w;
        float _3223 = cbSceneParam._m0[79u].w - _3217;
        float _3229 = sqrt(((_3216 * _3216) + (_3217 * _3217)) + (_3219 * _3219));
        float _3232 = (1.0 - (cbSceneParam._m0[77u].w / _3204)) * _3229;
        float _3237 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3239 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3425;
        if (abs((_3218 - _3221) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3425 = ((((_3222 > 0.0) ? exp2(_3237 * _3222) : (2.0 - exp2(_3239 * _3222))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3232;
        }
        else
        {
            float _3369 = 1.0 / cbSceneParam._m0[80u].x;
            float _3370 = isnan(_3223) ? _3222 : (isnan(_3222) ? _3223 : max(_3222, _3223));
            float _3371 = isnan(_3223) ? _3222 : (isnan(_3222) ? _3223 : min(_3222, _3223));
            float _3380 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : min(_3370, 0.0));
            float _3381 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : min(_3371, 0.0));
            _3425 = ((abs(_3229 / _3218) * cbSceneParam._m0[80u].y) * ((((_3380 - _3381) * 2.0) - ((exp2(_3237 * (isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0)))) - exp2(_3237 * (isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0))))) * _3369)) - ((exp2(_3239 * _3380) - exp2(_3239 * _3381)) * _3369))) + (_3232 * cbSceneParam._m0[80u].z);
        }
        vec4 _3427 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3150, _3151, 1.0), 0.0);
        float _3436 = exp2((_3425 * (-1.44269502162933349609375)) * (1.0 - _3427.w));
        float _3437 = log2(_3436);
        float _3453 = log2(_3170);
        _3241 = (exp2(_3453 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3437 * cbSceneParam._m0[78u].x)) * _3427.x) / cbSceneParam._m0[78u].x)) + _3167;
        _3243 = (exp2(_3453 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3437 * cbSceneParam._m0[78u].y)) * _3427.y) / cbSceneParam._m0[78u].y)) + _3168;
        _3245 = (exp2(_3453 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3437 * cbSceneParam._m0[78u].z)) * _3427.z) / cbSceneParam._m0[78u].z)) + _3169;
        _3247 = _3436 * _3170;
    }
    else
    {
        _3241 = _3167;
        _3243 = _3168;
        _3245 = _3169;
        _3247 = _3170;
    }
    bool _3463;
    vec4 _3257;
    vec4 _3279;
    float _3281;
    float _3285;
    float _3286;
    float _3287;
    float _3290;
    float _3293;
    float _3296;
    float _3297;
    bool _3307;
    for (;;)
    {
        _3257 = cbMatDynParam._m0[0u];
        float _3259 = roundEven(_3257.y);
        bool _3260 = _3259 == 3.0;
        float _3261 = log2(_3247);
        float _3265 = exp2(_3261 * cbSceneParam._m0[78u].x);
        float _3266 = exp2(_3261 * cbSceneParam._m0[78u].y);
        float _3267 = exp2(_3261 * cbSceneParam._m0[78u].z);
        float _3268 = _3265 * _3129;
        float _3269 = _3266 * _3130;
        float _3270 = _3267 * _3131;
        float _3277 = _881 + (-0.5);
        _3279 = cbMtdParam._m0[1u];
        _3281 = _3279.y * _3277;
        float _3284 = (_3259 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3285 = _3284 * (_3260 ? _3268 : (_3268 + (cbSceneParam._m0[72u].w * _3241)));
        _3286 = _3284 * (_3260 ? _3269 : (_3269 + (cbSceneParam._m0[72u].w * _3243)));
        _3287 = _3284 * (_3260 ? _3270 : (_3270 + (cbSceneParam._m0[72u].w * _3245)));
        _3290 = ((_3137 * _3141) * _3265) * _3284;
        _3293 = ((_3138 * _3141) * _3266) * _3284;
        _3296 = ((_3139 * _3141) * _3267) * _3284;
        _3297 = _3277 * 0.999000012874603271484375;
        _3307 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3307)
        {
            if ((cbInstanceData._m0[_947 + 7u].x + _3297) < 0.5)
            {
                _3463 = true;
                break;
            }
        }
        uint _3404 = _948 + uint(_3257.w);
        if ((cbInstanceData._m0[_3404].w < 1.0) && ((cbInstanceData._m0[_3404].w + _3297) < 0.5))
        {
            _3463 = true;
            break;
        }
        if ((_3281 + 1.0) < _3279.x)
        {
            _3463 = true;
            break;
        }
        _3463 = false;
        break;
    }
    float _3667;
    if (_3463)
    {
        discard_state = true;
        _3667 = 0.0;
    }
    else
    {
        _3667 = cbInstanceData._m0[_3142].w;
    }
    SV_Target.x = _3285;
    SV_Target.y = _3286;
    SV_Target.z = _3287;
    SV_Target.w = _3667;
    SV_Target_1.x = _3290;
    SV_Target_1.y = _3293;
    SV_Target_1.z = _3296;
    SV_Target_1.w = cbInstanceData._m0[_3142].w;
    discard_exit();
}


