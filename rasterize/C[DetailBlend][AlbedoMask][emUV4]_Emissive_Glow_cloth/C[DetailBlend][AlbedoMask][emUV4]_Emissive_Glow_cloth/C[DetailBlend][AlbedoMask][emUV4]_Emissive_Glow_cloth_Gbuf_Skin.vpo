#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbvModelParamUBO
{
    vec4 _m0[10];
} cbvModelParam;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uint BINORMAL;
layout(location = 4) in uvec4 BLENDINDICES;
layout(location = 5) in vec4 BLENDWEIGHT;
layout(location = 6) in vec4 COLOR_1;
layout(location = 7) in ivec4 TEXCOORD;
layout(location = 8) in ivec2 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out vec4 TEXCOORD_2;
layout(location = 4) out vec3 TEXCOORD_4;
layout(location = 4, component = 3) out float TEXCOORD_12;

void main()
{
    uint _84 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_2.w = 0.0;
    TEXCOORD_4.x = 0.0;
    TEXCOORD_4.y = 0.0;
    TEXCOORD_4.z = 0.0;
    TEXCOORD_12 = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _209 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _211 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _212 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _219 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _220 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _221 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _461;
    float _462;
    float _463;
    float _464;
    float _465;
    float _466;
    float _467;
    float _468;
    float _469;
    float _470;
    float _471;
    float _472;
    if (floatBitsToUint(cbMatDynParam._m0[1u]).x == 0u)
    {
        uint _245 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _84;
        precise float _249 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
        float _254 = isnan(_249) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _249 : max(0.001000000047497451305389404296875, _249));
        precise float _256 = BLENDWEIGHT.x / _254;
        precise float _257 = BLENDWEIGHT.y / _254;
        precise float _258 = BLENDWEIGHT.z / _254;
        precise float _259 = BLENDWEIGHT.w / _254;
        uvec4 _266 = floatBitsToUint(cbInstanceData._m0[(texelFetch(g_InstanceIndexBuffer, int(_245)).x * 13u) + 4u]);
        uint _267 = _266.x;
        uint _269 = (_267 + uint(float(BLENDINDICES.x))) * 3u;
        uint _276 = _269 + 1u;
        uint _283 = _269 + 2u;
        precise float _290 = _256 * cbObjMatrix._m0[_269].x;
        precise float _291 = _256 * cbObjMatrix._m0[_276].x;
        precise float _292 = _256 * cbObjMatrix._m0[_283].x;
        precise float _293 = _256 * cbObjMatrix._m0[_269].y;
        precise float _294 = _256 * cbObjMatrix._m0[_276].y;
        precise float _295 = _256 * cbObjMatrix._m0[_283].y;
        precise float _296 = _256 * cbObjMatrix._m0[_269].z;
        precise float _297 = _256 * cbObjMatrix._m0[_276].z;
        precise float _298 = _256 * cbObjMatrix._m0[_283].z;
        precise float _299 = _256 * cbObjMatrix._m0[_269].w;
        precise float _300 = _256 * cbObjMatrix._m0[_276].w;
        precise float _301 = _256 * cbObjMatrix._m0[_283].w;
        uint _304 = (_267 + uint(float(BLENDINDICES.y))) * 3u;
        uint _311 = _304 + 1u;
        uint _318 = _304 + 2u;
        precise float _325 = _257 * cbObjMatrix._m0[_304].x;
        precise float _326 = _257 * cbObjMatrix._m0[_311].x;
        precise float _327 = _257 * cbObjMatrix._m0[_318].x;
        precise float _328 = _257 * cbObjMatrix._m0[_304].y;
        precise float _329 = _257 * cbObjMatrix._m0[_311].y;
        precise float _330 = _257 * cbObjMatrix._m0[_318].y;
        precise float _331 = _257 * cbObjMatrix._m0[_304].z;
        precise float _332 = _257 * cbObjMatrix._m0[_311].z;
        precise float _333 = _257 * cbObjMatrix._m0[_318].z;
        precise float _334 = _257 * cbObjMatrix._m0[_304].w;
        precise float _335 = _257 * cbObjMatrix._m0[_311].w;
        precise float _336 = _257 * cbObjMatrix._m0[_318].w;
        precise float _337 = _290 + _325;
        precise float _338 = _291 + _326;
        precise float _339 = _292 + _327;
        precise float _340 = _293 + _328;
        precise float _341 = _294 + _329;
        precise float _342 = _295 + _330;
        precise float _343 = _296 + _331;
        precise float _344 = _297 + _332;
        precise float _345 = _298 + _333;
        precise float _346 = _299 + _334;
        precise float _347 = _300 + _335;
        precise float _348 = _301 + _336;
        uint _351 = (_267 + uint(float(BLENDINDICES.z))) * 3u;
        uint _358 = _351 + 1u;
        uint _365 = _351 + 2u;
        precise float _372 = _258 * cbObjMatrix._m0[_351].x;
        precise float _373 = _258 * cbObjMatrix._m0[_358].x;
        precise float _374 = _258 * cbObjMatrix._m0[_365].x;
        precise float _375 = _258 * cbObjMatrix._m0[_351].y;
        precise float _376 = _258 * cbObjMatrix._m0[_358].y;
        precise float _377 = _258 * cbObjMatrix._m0[_365].y;
        precise float _378 = _258 * cbObjMatrix._m0[_351].z;
        precise float _379 = _258 * cbObjMatrix._m0[_358].z;
        precise float _380 = _258 * cbObjMatrix._m0[_365].z;
        precise float _381 = _258 * cbObjMatrix._m0[_351].w;
        precise float _382 = _258 * cbObjMatrix._m0[_358].w;
        precise float _383 = _258 * cbObjMatrix._m0[_365].w;
        precise float _384 = _337 + _372;
        precise float _385 = _338 + _373;
        precise float _386 = _339 + _374;
        precise float _387 = _340 + _375;
        precise float _388 = _341 + _376;
        precise float _389 = _342 + _377;
        precise float _390 = _343 + _378;
        precise float _391 = _344 + _379;
        precise float _392 = _345 + _380;
        precise float _393 = _346 + _381;
        precise float _394 = _347 + _382;
        precise float _395 = _348 + _383;
        uint _398 = (_267 + uint(float(BLENDINDICES.w))) * 3u;
        uint _405 = _398 + 1u;
        uint _412 = _398 + 2u;
        precise float _419 = _259 * cbObjMatrix._m0[_398].x;
        precise float _420 = _259 * cbObjMatrix._m0[_405].x;
        precise float _421 = _259 * cbObjMatrix._m0[_412].x;
        precise float _422 = _259 * cbObjMatrix._m0[_398].y;
        precise float _423 = _259 * cbObjMatrix._m0[_405].y;
        precise float _424 = _259 * cbObjMatrix._m0[_412].y;
        precise float _425 = _259 * cbObjMatrix._m0[_398].z;
        precise float _426 = _259 * cbObjMatrix._m0[_405].z;
        precise float _427 = _259 * cbObjMatrix._m0[_412].z;
        precise float _428 = _259 * cbObjMatrix._m0[_398].w;
        precise float _429 = _259 * cbObjMatrix._m0[_405].w;
        precise float _430 = _259 * cbObjMatrix._m0[_412].w;
        precise float _431 = _384 + _419;
        precise float _432 = _385 + _420;
        precise float _433 = _386 + _421;
        precise float _434 = _387 + _422;
        precise float _435 = _388 + _423;
        precise float _436 = _389 + _424;
        precise float _437 = _390 + _425;
        precise float _438 = _391 + _426;
        precise float _439 = _392 + _427;
        precise float _440 = _393 + _428;
        precise float _441 = _394 + _429;
        precise float _442 = _395 + _430;
        _461 = _431;
        _462 = _434;
        _463 = _437;
        _464 = _440;
        _465 = _432;
        _466 = _435;
        _467 = _438;
        _468 = _441;
        _469 = _433;
        _470 = _436;
        _471 = _439;
        _472 = _442;
    }
    else
    {
        _461 = cbvModelParam._m0[0u].x;
        _462 = cbvModelParam._m0[0u].y;
        _463 = cbvModelParam._m0[0u].z;
        _464 = cbvModelParam._m0[0u].w;
        _465 = cbvModelParam._m0[1u].x;
        _466 = cbvModelParam._m0[1u].y;
        _467 = cbvModelParam._m0[1u].z;
        _468 = cbvModelParam._m0[1u].w;
        _469 = cbvModelParam._m0[2u].x;
        _470 = cbvModelParam._m0[2u].y;
        _471 = cbvModelParam._m0[2u].z;
        _472 = cbvModelParam._m0[2u].w;
    }
    precise float _473 = POSITION.x * _461;
    precise float _474 = POSITION.y * _462;
    precise float _475 = _474 + _473;
    precise float _476 = POSITION.z * _463;
    precise float _477 = _476 + _475;
    precise float _478 = 1.0 * _464;
    precise float _479 = _478 + _477;
    precise float _480 = POSITION.x * _465;
    precise float _481 = POSITION.y * _466;
    precise float _482 = _481 + _480;
    precise float _483 = POSITION.z * _467;
    precise float _484 = _483 + _482;
    precise float _485 = 1.0 * _468;
    precise float _486 = _485 + _484;
    precise float _487 = POSITION.x * _469;
    precise float _488 = POSITION.y * _470;
    precise float _489 = _488 + _487;
    precise float _490 = POSITION.z * _471;
    precise float _491 = _490 + _489;
    precise float _492 = 1.0 * _472;
    precise float _493 = _492 + _491;
    float _499 = cbSceneParam._m0[3u].x - _479;
    float _500 = cbSceneParam._m0[3u].y - _486;
    float _501 = cbSceneParam._m0[3u].z - _493;
    uint _521 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _84;
    uvec4 _523 = texelFetch(g_InstanceIndexBuffer, int(_521));
    uint _524 = _523.x;
    precise float _535 = _479 - cbSceneParam._m0[3u].x;
    precise float _536 = _486 - cbSceneParam._m0[3u].y;
    precise float _537 = _493 - cbSceneParam._m0[3u].z;
    precise float _565 = _535 * cbSceneParam._m0[24u].x;
    precise float _566 = _536 * cbSceneParam._m0[24u].y;
    precise float _567 = _566 + _565;
    precise float _568 = _537 * cbSceneParam._m0[24u].z;
    precise float _569 = _568 + _567;
    precise float _570 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _571 = _570 + _569;
    precise float _572 = _535 * cbSceneParam._m0[25u].x;
    precise float _573 = _536 * cbSceneParam._m0[25u].y;
    precise float _574 = _573 + _572;
    precise float _575 = _537 * cbSceneParam._m0[25u].z;
    precise float _576 = _575 + _574;
    precise float _577 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _578 = _577 + _576;
    precise float _579 = _535 * cbSceneParam._m0[26u].x;
    precise float _580 = _536 * cbSceneParam._m0[26u].y;
    precise float _581 = _580 + _579;
    precise float _582 = _537 * cbSceneParam._m0[26u].z;
    precise float _583 = _582 + _581;
    precise float _584 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _585 = _584 + _583;
    precise float _586 = _535 * cbSceneParam._m0[27u].x;
    precise float _587 = _536 * cbSceneParam._m0[27u].y;
    precise float _588 = _587 + _586;
    precise float _589 = _537 * cbSceneParam._m0[27u].z;
    precise float _590 = _589 + _588;
    precise float _591 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _592 = _591 + _590;
    gl_Position.x = _571;
    gl_Position.y = _578;
    gl_Position.z = _585;
    gl_Position.w = _592;
    NORMAL_1.x = fma(_212, _463, fma(_211, _462, _461 * _209));
    NORMAL_1.y = fma(_212, _467, fma(_211, _466, _465 * _209));
    NORMAL_1.z = fma(_212, _471, fma(_211, _470, _469 * _209));
    NORMAL_1.w = float(_524);
    TANGENT_1.x = fma(_221, _463, fma(_220, _462, _461 * _219));
    TANGENT_1.y = fma(_221, _467, fma(_220, _466, _465 * _219));
    TANGENT_1.z = fma(_221, _471, fma(_220, _470, _469 * _219));
    TANGENT_1.w = (float(BINORMAL) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = ((float(int(uint(TEXCOORD.z))) * 0.00048828125) * cbTexScroll._m0[2u].x) + cbTexScroll._m0[2u].z;
    TEXCOORD_2.w = ((float(int(uint(TEXCOORD.w))) * 0.00048828125) * cbTexScroll._m0[2u].y) + cbTexScroll._m0[2u].w;
    TEXCOORD_4.x = ((float(int(uint(TEXCOORD_1.x))) * 0.00048828125) * cbTexScroll._m0[3u].x) + cbTexScroll._m0[3u].z;
    TEXCOORD_4.y = ((float(int(uint(TEXCOORD_1.y))) * 0.00048828125) * cbTexScroll._m0[3u].y) + cbTexScroll._m0[3u].w;
    TEXCOORD_4.z = COLOR_1.x;
    TEXCOORD_12 = sqrt(((_499 * _499) + (_500 * _500)) + (_501 * _501));
    gl_ClipDistance[0u] = dot(vec4(_571, _578, _585, _592), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_571, _578, _585, _592), vec4(cbInstanceData._m0[(_524 * 13u) + 3u]));
}


