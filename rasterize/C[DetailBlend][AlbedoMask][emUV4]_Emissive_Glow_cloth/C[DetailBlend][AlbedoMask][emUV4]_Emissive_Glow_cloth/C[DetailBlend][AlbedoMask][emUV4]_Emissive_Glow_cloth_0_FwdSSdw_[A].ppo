#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1422;
float _3869;
float _3870;
float _3871;
float _3872;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = _241 * NORMAL.x;
    float _243 = _241 * NORMAL.y;
    float _244 = _241 * NORMAL.z;
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256;
    float _257;
    float _258;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _256 = (-0.0) - _242;
        _257 = (-0.0) - _243;
        _258 = (-0.0) - _244;
    }
    else
    {
        _256 = _242;
        _257 = _243;
        _258 = _244;
    }
    vec4 _276 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _290 = exp2(log2(_276.w * cbMtdParam._m0[23u].z) * cbMtdParam._m0[21u].y);
    float _291 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _292 = isnan(1.0) ? _291 : (isnan(_291) ? 1.0 : min(_291, 1.0));
    vec4 _306 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _310 = _306.z;
    float _311 = _306.w;
    float _319 = exp2(log2(_310 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _320 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _321 = isnan(1.0) ? _320 : (isnan(_320) ? 1.0 : min(_320, 1.0));
    vec4 _334 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _357 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _359 = _357.x;
    float _360 = _357.y;
    float _384 = ((cbMtdParam._m0[20u].w * _357.z) * (texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].z * TEXCOORD.x) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((cbMtdParam._m0[20u].z * TEXCOORD.y) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w)).x - _359)) + _359;
    bool _420 = _384 >= 0.25;
    bool _425 = _384 >= 0.3499999940395355224609375;
    bool _430 = _384 >= 0.5;
    bool _435 = _384 >= 0.64999997615814208984375;
    bool _440 = _384 >= 0.75;
    vec4 _468 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _478 = cbMtdParam._m0[9u].x * _468.x;
    float _479 = cbMtdParam._m0[9u].y * _468.y;
    float _480 = cbMtdParam._m0[9u].z * _468.z;
    float _487 = (((((((_440 ? cbMtdParam._m0[14u].x : (_435 ? cbMtdParam._m0[19u].x : (_430 ? cbMtdParam._m0[18u].x : (_425 ? cbMtdParam._m0[17u].x : (_420 ? cbMtdParam._m0[16u].x : cbMtdParam._m0[15u].x))))) - cbMtdParam._m0[10u].x) * _360) + cbMtdParam._m0[10u].x) * _334.x) - _478) * _321) + _478;
    float _488 = (((((((_440 ? cbMtdParam._m0[14u].y : (_435 ? cbMtdParam._m0[19u].y : (_430 ? cbMtdParam._m0[18u].y : (_425 ? cbMtdParam._m0[17u].y : (_420 ? cbMtdParam._m0[16u].y : cbMtdParam._m0[15u].y))))) - cbMtdParam._m0[10u].y) * _360) + cbMtdParam._m0[10u].y) * _334.y) - _479) * _321) + _479;
    float _489 = (((((((_440 ? cbMtdParam._m0[14u].z : (_435 ? cbMtdParam._m0[19u].z : (_430 ? cbMtdParam._m0[18u].z : (_425 ? cbMtdParam._m0[17u].z : (_420 ? cbMtdParam._m0[16u].z : cbMtdParam._m0[15u].z))))) - cbMtdParam._m0[10u].z) * _360) + cbMtdParam._m0[10u].z) * _334.z) - _480) * _321) + _480;
    float _496 = exp2(log2(_311) * cbMtdParam._m0[22u].y);
    vec4 _509 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _529 = (((cbMtdParam._m0[12u].x * _509.x) - _487) * _496) + _487;
    float _530 = (((cbMtdParam._m0[12u].y * _509.y) - _488) * _496) + _488;
    float _531 = (((cbMtdParam._m0[12u].z * _509.z) - _489) * _496) + _489;
    vec4 _543 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _567 = (_276.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _543.x) - _529) * _292) + _529);
    float _569 = (_276.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _543.y) - _530) * _292) + _530);
    float _571 = (_276.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _543.z) - _531) * _292) + _531);
    float _576 = exp2(log2(1.0 - _311) * 0.00999999977648258209228515625);
    float _594 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[22u].w) * _576) + cbMtdParam._m0[22u].w;
    float _613 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _594) + cbMtdParam._m0[21u].z) * _496) + _594;
    float _633 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _613) + cbMtdParam._m0[23u].w) * _292) + _613;
    vec4 _646 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _664 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _666 = _664.x;
    float _667 = _664.y;
    float _670 = cbMtdParam._m0[20u].x + _664.z;
    float _673 = (((cbMtdParam._m0[21u].x + _646.z) - _670) * _576) + _670;
    vec4 _685 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _697 = (_310 * 2.0) * ((((_685.z - _673) + cbMtdParam._m0[23u].y) * _496) + _673);
    vec4 _709 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _718 = (((_709.z - _697) + cbMtdParam._m0[22u].x) * _292) + _697;
    vec4 _737 = texture(sampler2D(C_DetailBlend_AlbedoMask_emUV4_Emissive_Glow_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _752 = ((_646.x - _666) * _576) + _666;
    float _753 = ((_646.y - _667) * _576) + _667;
    float _758 = ((_685.x - _752) * _496) + _752;
    float _759 = ((_685.y - _753) * _496) + _753;
    float _768 = ((((_709.x - _758) * _292) + _758) * 2.0) + (-1.0);
    float _769 = ((((_709.y - _759) * _292) + _759) * 2.0) + (-1.0);
    float _770 = dot(vec2(_768, _769), vec2(_768, _769));
    float _3901 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _775 = sqrt(1.0 - (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))));
    float _778 = (cbMtdParam._m0[23u].x * ((_306.x * 2.0) + (-1.0))) + _768;
    float _779 = (cbMtdParam._m0[23u].x * ((_306.y * 2.0) + (-1.0))) + _769;
    float _782 = fma(_775, _256, fma(_779, _248 * TANGENT.x, (_234 * _227) * _778));
    float _785 = fma(_775, _257, fma(_779, _248 * TANGENT.y, (_234 * _228) * _778));
    float _788 = fma(_775, _258, fma(_779, _248 * TANGENT.z, (_234 * _229) * _778));
    float _792 = inversesqrt(dot(vec3(_782, _785, _788), vec3(_782, _785, _788)));
    float _793 = _792 * _782;
    float _794 = _792 * _785;
    float _795 = _792 * _788;
    float _3912 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _796 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _3923 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _3934 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _3945 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _3956 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _800 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _816 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _856 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _866 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _856);
    float _867 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _856);
    float _868 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _856);
    float _872 = inversesqrt(dot(vec3(_866, _867, _868), vec3(_866, _867, _868)));
    float _873 = _866 * _872;
    float _874 = _867 * _872;
    float _875 = _868 * _872;
    vec4 _880 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _882 = _880.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1103 = sqrt(((_866 * _866) + (_867 * _867)) + (_868 * _868));
        float _1109 = (cbMatDynParam._m0[5u].x * _1103) + cbMatDynParam._m0[5u].y;
        float _3967 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1114 = (cbMatDynParam._m0[5u].z * _1103) + cbMatDynParam._m0[5u].w;
        float _3978 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) - _1110)) + _1110) < ((_882 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _893 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _894 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _896 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _898 = _896.w;
    float _916 = fma(_795, cbSceneParam._m0[5u].z, fma(_794, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _793));
    float _919 = fma(_795, cbSceneParam._m0[6u].z, fma(_794, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _793));
    float _922 = fma(_795, cbSceneParam._m0[7u].z, fma(_794, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _793));
    vec4 _924 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _935 = (((_924.y - _796) + (_924.w * _796)) * cbMtdParam._m0[3u].x) + _796;
    uint _948 = uint(roundEven(NORMAL.w)) * 13u;
    uint _949 = _948 + 9u;
    uint _950 = _949 + uint(cbMatDynParam._m0[0u].w);
    float _956 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * cbInstanceData._m0[_950].x;
    float _957 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) * cbInstanceData._m0[_950].y;
    float _958 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) * cbInstanceData._m0[_950].z;
    float _3989 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _959 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _4000 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _960 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _4011 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _961 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    vec4 _962 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _967 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _978 = (((_967.x - _800) + (_967.w * _800)) * cbMtdParam._m0[3u].x) + _800;
    float _991 = (cbMtdParam._m0[3u].x * (((_959 * _898) - _959) + _962.x)) + _959;
    float _992 = (cbMtdParam._m0[3u].x * (((_960 * _898) - _960) + _962.y)) + _960;
    float _993 = (cbMtdParam._m0[3u].x * (((_961 * _898) - _961) + _962.z)) + _961;
    float _994 = 1.0 - _978;
    float _995 = _994 * _991;
    float _996 = _994 * _992;
    float _997 = _994 * _993;
    float _1002 = (_991 + (-0.039999999105930328369140625)) * _978;
    float _1003 = (_992 + (-0.039999999105930328369140625)) * _978;
    float _1004 = (_993 + (-0.039999999105930328369140625)) * _978;
    float _1005 = _1002 + 0.039999999105930328369140625;
    float _1007 = _1003 + 0.039999999105930328369140625;
    float _1008 = _1004 + 0.039999999105930328369140625;
    vec4 _1017 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _893, cbSceneParam._m0[86u].y * _894));
    float _1020 = _1017.x * TEXCOORD_4.z;
    float _1021 = dot(vec3(_793, _794, _795), vec3(_873, _874, _875));
    float _1024 = _1021 * 2.0;
    float _1028 = (_1024 * _793) - _873;
    float _1029 = (_1024 * _794) - _874;
    float _1030 = (_1024 * _795) - _875;
    float _1034 = abs(dot(vec3(_873, _874, _875), vec3(_793, _794, _795)));
    float _4022 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _1036 = sqrt(_935);
    float _1049 = exp2((_1036 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1036 * 3.0));
    float _1055 = (1.0 - _1049) * ((_1036 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1056 = _1049 * _1036;
    float _1084 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1088 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1092 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1421;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1147 = fma(_1092, cbModelParam._m0[26u].z, fma(_1088, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1084));
        float _1151 = fma(_1092, cbModelParam._m0[27u].z, fma(_1088, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1084));
        float _1155 = fma(_1092, cbModelParam._m0[28u].z, fma(_1088, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1084));
        float _1179 = _1084 + _793;
        float _1180 = _1088 + _794;
        float _1181 = _1092 + _795;
        float _1191 = fma(_1181, cbModelParam._m0[26u].z, fma(_1180, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1179)) - _1147;
        float _1192 = fma(_1181, cbModelParam._m0[27u].z, fma(_1180, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1179)) - _1151;
        float _1193 = fma(_1181, cbModelParam._m0[28u].z, fma(_1180, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1179)) - _1155;
        float _1197 = inversesqrt(dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193)));
        float _1210 = ((_1197 * _1191) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1147 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1211 = ((_1197 * _1192) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1151 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1212 = ((_1197 * _1193) / cbModelParam._m0[34u].z) + ((((((_1155 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        float _1249 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1215.x + (-0.5));
        float _1251 = _1249 * (_1215.y + (-0.5));
        float _1252 = _1249 * (_1215.z + (-0.5));
        float _1259 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1222.x + (-0.5));
        float _1261 = _1259 * (_1222.y + (-0.5));
        float _1262 = _1259 * (_1222.z + (-0.5));
        float _1269 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1229.x + (-0.5));
        float _1271 = _1269 * (_1229.y + (-0.5));
        float _1272 = _1269 * (_1229.z + (-0.5));
        float _1279 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1236.x + (-0.5));
        float _1281 = _1279 * (_1236.y + (-0.5));
        float _1282 = _1279 * (_1236.z + (-0.5));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = _1250 * 0.5;
        float _1287 = _1260 * 0.5;
        float _1288 = _1270 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1303 = (dot(vec3(_793, _794, _795), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1313 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _4070 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1315 + 1.0))) + _1320) * _1283;
        float _1330 = _1251 * 0.5;
        float _1331 = _1261 * 0.5;
        float _1332 = _1271 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_793, _794, _795), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _4103 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1357 + 1.0))) + _1362) * _1284;
        float _1372 = _1252 * 0.5;
        float _1373 = _1262 * 0.5;
        float _1374 = _1272 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_793, _794, _795), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _4136 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1399 + 1.0))) + _1404) * _1285;
        _1421 = _1252;
        _1423 = _1251;
        _1424 = _1250;
        _1425 = _1262;
        _1426 = _1261;
        _1427 = _1260;
        _1428 = _1272;
        _1429 = _1271;
        _1430 = _1270;
        _1431 = _1285;
        _1432 = _1284;
        _1433 = _1283;
        _1434 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1435 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
        _1436 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
    }
    else
    {
        _1421 = _1422;
        _1423 = _1422;
        _1424 = _1422;
        _1425 = _1422;
        _1426 = _1422;
        _1427 = _1422;
        _1428 = _1422;
        _1429 = _1422;
        _1430 = _1422;
        _1431 = _1422;
        _1432 = _1422;
        _1433 = _1422;
        _1434 = 0.0;
        _1435 = 0.0;
        _1436 = 0.0;
    }
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1465 = fma(_1092, cbModelParam._m0[30u].z, fma(_1088, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1084));
        float _1469 = fma(_1092, cbModelParam._m0[31u].z, fma(_1088, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1084));
        float _1473 = fma(_1092, cbModelParam._m0[32u].z, fma(_1088, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1084));
        float _1496 = _1084 + _793;
        float _1497 = _1088 + _794;
        float _1498 = _1092 + _795;
        float _1508 = fma(_1498, cbModelParam._m0[30u].z, fma(_1497, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1496)) - _1465;
        float _1509 = fma(_1498, cbModelParam._m0[31u].z, fma(_1497, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1496)) - _1469;
        float _1510 = fma(_1498, cbModelParam._m0[32u].z, fma(_1497, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1496)) - _1473;
        float _1514 = inversesqrt(dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510)));
        float _1527 = ((_1514 * _1508) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1465 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1528 = ((_1514 * _1509) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1469 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1529 = ((_1514 * _1510) / cbModelParam._m0[35u].z) + ((((((_1473 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1531 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1527, _1528, _1529), 0.0);
        vec4 _1538 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1527, _1528, _1529), 0.0);
        vec4 _1545 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1527, _1528, _1529), 0.0);
        vec4 _1552 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1527, _1528, _1529), 0.0);
        float _1564 = exp2((_1531.w + (-0.5)) * 20.0) * 2.0;
        float _1565 = _1564 * (_1531.x + (-0.5));
        float _1566 = _1564 * (_1531.y + (-0.5));
        float _1567 = _1564 * (_1531.z + (-0.5));
        float _1574 = exp2((_1538.w + (-0.5)) * 20.0) * 2.0;
        float _1575 = _1574 * (_1538.x + (-0.5));
        float _1576 = _1574 * (_1538.y + (-0.5));
        float _1577 = _1574 * (_1538.z + (-0.5));
        float _1584 = exp2((_1545.w + (-0.5)) * 20.0) * 2.0;
        float _1585 = _1584 * (_1545.x + (-0.5));
        float _1586 = _1584 * (_1545.y + (-0.5));
        float _1587 = _1584 * (_1545.z + (-0.5));
        float _1594 = exp2((_1552.w + (-0.5)) * 20.0) * 2.0;
        float _1595 = _1594 * (_1552.x + (-0.5));
        float _1596 = _1594 * (_1552.y + (-0.5));
        float _1597 = _1594 * (_1552.z + (-0.5));
        float _1598 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1599 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1600 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1601 = _1565 * 0.5;
        float _1602 = _1575 * 0.5;
        float _1603 = _1585 * 0.5;
        float _1604 = dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603));
        float _1609 = (_1604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1604);
        float _1617 = (dot(vec3(_793, _794, _795), vec3(_1609 * _1601, _1609 * _1602, _1609 * _1603)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1626 = sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603)) / (_1598 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1628 = _1627 * 2.0;
        float _1632 = (1.0 - _1627) / (_1627 + 1.0);
        float _4199 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1642 = ((((1.0 - _1633) * (_1628 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1628 + 1.0))) + _1633) * _1598;
        float _1643 = _1566 * 0.5;
        float _1644 = _1576 * 0.5;
        float _1645 = _1586 * 0.5;
        float _1646 = dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645));
        float _1651 = (_1646 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1646);
        float _1659 = (dot(vec3(_793, _794, _795), vec3(_1651 * _1643, _1651 * _1644, _1651 * _1645)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1668 = sqrt(((_1644 * _1644) + (_1643 * _1643)) + (_1645 * _1645)) / (_1599 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1670 = _1669 * 2.0;
        float _1674 = (1.0 - _1669) / (_1669 + 1.0);
        float _4232 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1684 = ((((1.0 - _1675) * (_1670 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1670 + 1.0))) + _1675) * _1599;
        float _1685 = _1567 * 0.5;
        float _1686 = _1577 * 0.5;
        float _1687 = _1587 * 0.5;
        float _1688 = dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687));
        float _1693 = (_1688 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1688);
        float _1701 = (dot(vec3(_793, _794, _795), vec3(_1693 * _1685, _1693 * _1686, _1693 * _1687)) + 1.0) * 0.5;
        float _4243 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1710 = sqrt(((_1686 * _1686) + (_1685 * _1685)) + (_1687 * _1687)) / (_1600 + 9.9999997473787516355514526367188e-06);
        float _4254 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1712 = _1711 * 2.0;
        float _1716 = (1.0 - _1711) / (_1711 + 1.0);
        float _4265 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1726 = ((((1.0 - _1717) * (_1712 + 2.0)) * exp2(log2(isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_1712 + 1.0))) + _1717) * _1600;
        _1734 = _1567;
        _1735 = _1566;
        _1736 = _1565;
        _1737 = _1577;
        _1738 = _1576;
        _1739 = _1575;
        _1740 = _1587;
        _1741 = _1586;
        _1742 = _1585;
        _1743 = _1600;
        _1744 = _1599;
        _1745 = _1598;
        _1746 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)));
        _1747 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)));
        _1748 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)));
    }
    else
    {
        _1734 = _1422;
        _1735 = _1422;
        _1736 = _1422;
        _1737 = _1422;
        _1738 = _1422;
        _1739 = _1422;
        _1740 = _1422;
        _1741 = _1422;
        _1742 = _1422;
        _1743 = _1422;
        _1744 = _1422;
        _1745 = _1422;
        _1746 = 0.0;
        _1747 = 0.0;
        _1748 = 0.0;
    }
    float _1758 = (cbModelParam._m0[1u].x * (_1746 - _1434)) + _1434;
    float _1759 = (cbModelParam._m0[1u].x * (_1747 - _1435)) + _1435;
    float _1760 = (cbModelParam._m0[1u].x * (_1748 - _1436)) + _1436;
    float _1781 = fma(_1760, cbSceneParam._m0[89u].z, fma(_1759, cbSceneParam._m0[89u].y, _1758 * cbSceneParam._m0[89u].x));
    float _1784 = fma(_1760, cbSceneParam._m0[90u].z, fma(_1759, cbSceneParam._m0[90u].y, _1758 * cbSceneParam._m0[90u].x));
    float _1787 = fma(_1760, cbSceneParam._m0[91u].z, fma(_1759, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1758));
    float _1802 = _1028 * 0.5;
    float _1803 = _1029 * 0.5;
    float _1804 = _1030 * 0.5;
    float _1805 = dot(vec4(_1802, _1803, _1804, 1.0), vec4(_1736, _1739, _1742, _1745));
    float _1808 = dot(vec4(_1802, _1803, _1804, 1.0), vec4(_1735, _1738, _1741, _1744));
    float _1811 = dot(vec4(_1802, _1803, _1804, 1.0), vec4(_1734, _1737, _1740, _1743));
    float _1845;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1818 = dot(vec4(_1802, _1803, _1804, 1.0), vec4(_1421, _1425, _1428, _1431));
        float _1822 = dot(vec4(_1802, _1803, _1804, 1.0), vec4(_1423, _1426, _1429, _1432));
        float _1826 = dot(vec4(_1802, _1803, _1804, 1.0), vec4(_1424, _1427, _1430, _1433));
        float _1833 = dot(vec4(cbModelParam._m0[39u]), vec4(_1802, _1803, _1804, 1.0));
        _1845 = dot(vec3(isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0)), isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0)), isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1833) ? 0.0 : (isnan(0.0) ? _1833 : max(0.0, _1833))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1845 = 1.0;
    }
    float _1856;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1847 = dot(vec4(cbModelParam._m0[40u]), vec4(_1802, _1803, _1804, 1.0));
        _1856 = dot(vec3(isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)), isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)), isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1847) ? 0.0 : (isnan(0.0) ? _1847 : max(0.0, _1847))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1856 = 1.0;
    }
    float _1860 = (_1856 * cbModelParam._m0[1u].x) + (_1845 * (1.0 - cbModelParam._m0[1u].x));
    float _1870 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _935);
    float _1871 = isnan(_1870) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1870 : min(cbModelParam._m0[25u].z, _1870));
    float _1951;
    float _1953;
    float _1955;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1918 = fma(_1092, cbModelParam._m0[13u].z, fma(_1088, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1084)) + cbModelParam._m0[13u].w;
        float _1922 = fma(_1092, cbModelParam._m0[14u].z, fma(_1088, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1084)) + cbModelParam._m0[14u].w;
        float _1926 = fma(_1092, cbModelParam._m0[15u].z, fma(_1088, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1084)) + cbModelParam._m0[15u].w;
        float _1929 = fma(_1030, cbModelParam._m0[13u].z, fma(_1029, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1028));
        float _1932 = fma(_1030, cbModelParam._m0[14u].z, fma(_1029, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1028));
        float _1935 = fma(_1030, cbModelParam._m0[15u].z, fma(_1029, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1028));
        float _1963;
        if (_1929 > 0.0)
        {
            _1963 = abs((1.0 - _1918) / _1929);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1918 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1963 = frontier_phi_19_17_ladder;
        }
        float _2186;
        if (_1932 > 0.0)
        {
            _2186 = abs((1.0 - _1922) / _1932);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1922 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2186 = frontier_phi_28_24_ladder;
        }
        float _2443;
        if (_1935 > 0.0)
        {
            _2443 = abs((1.0 - _1926) / _1935);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1926 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2443 = frontier_phi_40_35_ladder;
        }
        float _2445 = isnan(_2186) ? _1963 : (isnan(_1963) ? _2186 : min(_1963, _2186));
        float _2446 = isnan(_2443) ? _2445 : (isnan(_2445) ? _2443 : min(_2445, _2443));
        float _2450 = (_2446 * _1929) + _1918;
        float _2451 = (_2446 * _1932) + _1922;
        float _2452 = (_2446 * _1935) + _1926;
        float _2453 = _2446 * 9.9999997473787516355514526367188e-05;
        float _2455 = (-1.0) - _2453;
        float _2457 = _2453 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2452 > _2457) || ((_2452 < _2455) || ((_2451 > _2457) || ((_2451 < _2455) || ((_2450 < _2455) || (_2450 > _2457))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2580 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2452, cbModelParam._m0[9u].z, fma(_2451, cbModelParam._m0[9u].y, _2450 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2452, cbModelParam._m0[10u].z, fma(_2451, cbModelParam._m0[10u].y, _2450 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2452, cbModelParam._m0[11u].z, fma(_2451, cbModelParam._m0[11u].y, _2450 * cbModelParam._m0[11u].x))), _1871);
            frontier_phi_18_40_ladder = _2580.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2580.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2580.x * cbModelParam._m0[1u].y;
        }
        _1951 = frontier_phi_18_40_ladder_2;
        _1953 = frontier_phi_18_40_ladder_1;
        _1955 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1939 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1028, _1029, _1030), _1871);
        _1951 = _1939.x * cbModelParam._m0[1u].y;
        _1953 = _1939.y * cbModelParam._m0[1u].y;
        _1955 = _1939.z * cbModelParam._m0[1u].y;
    }
    float _1959 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _935);
    float _1960 = isnan(_1959) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1959 : min(cbModelParam._m0[25u].w, _1959));
    float _2049;
    float _2051;
    float _2053;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2013 = fma(_1092, cbModelParam._m0[21u].z, fma(_1088, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1084)) + cbModelParam._m0[21u].w;
        float _2017 = fma(_1092, cbModelParam._m0[22u].z, fma(_1088, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1084)) + cbModelParam._m0[22u].w;
        float _2021 = fma(_1092, cbModelParam._m0[23u].z, fma(_1088, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1084)) + cbModelParam._m0[23u].w;
        float _2024 = fma(_1030, cbModelParam._m0[21u].z, fma(_1029, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1028));
        float _2027 = fma(_1030, cbModelParam._m0[22u].z, fma(_1029, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1028));
        float _2030 = fma(_1030, cbModelParam._m0[23u].z, fma(_1029, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1028));
        float _2191;
        if (_2024 > 0.0)
        {
            _2191 = abs((1.0 - _2013) / _2024);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2013 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2191 = frontier_phi_30_26_ladder;
        }
        float _2470;
        if (_2027 > 0.0)
        {
            _2470 = abs((1.0 - _2017) / _2027);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2017 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2470 = frontier_phi_42_37_ladder;
        }
        float _2683;
        if (_2030 > 0.0)
        {
            _2683 = abs((1.0 - _2021) / _2030);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2030 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2021 + 1.0) / _2030);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2683 = frontier_phi_51_48_ladder;
        }
        float _2685 = isnan(_2470) ? _2191 : (isnan(_2191) ? _2470 : min(_2191, _2470));
        float _2686 = isnan(_2683) ? _2685 : (isnan(_2685) ? _2683 : min(_2685, _2683));
        float _2690 = (_2686 * _2024) + _2013;
        float _2691 = (_2686 * _2027) + _2017;
        float _2692 = (_2686 * _2030) + _2021;
        float _2693 = _2686 * 9.9999997473787516355514526367188e-05;
        float _2694 = (-1.0) - _2693;
        float _2696 = _2693 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2692 > _2696) || ((_2692 < _2694) || ((_2691 > _2696) || ((_2691 < _2694) || ((_2690 < _2694) || (_2690 > _2696))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2925 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2692, cbModelParam._m0[17u].z, fma(_2691, cbModelParam._m0[17u].y, _2690 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2692, cbModelParam._m0[18u].z, fma(_2691, cbModelParam._m0[18u].y, _2690 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2692, cbModelParam._m0[19u].z, fma(_2691, cbModelParam._m0[19u].y, _2690 * cbModelParam._m0[19u].x))), _1960);
            frontier_phi_27_51_ladder = _2925.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2925.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2925.x * cbModelParam._m0[1u].z;
        }
        _2049 = frontier_phi_27_51_ladder_2;
        _2051 = frontier_phi_27_51_ladder_1;
        _2053 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2033 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1028, _1029, _1030), _1960);
        _2049 = _2033.x * cbModelParam._m0[1u].z;
        _2051 = _2033.y * cbModelParam._m0[1u].z;
        _2053 = _2033.z * cbModelParam._m0[1u].z;
    }
    float _2066 = (((_1055 * _1005) + _1056) * _1020) * ((cbModelParam._m0[1u].w * (_2049 - _1951)) + _1951);
    float _2068 = (((_1055 * _1007) + _1056) * _1020) * ((cbModelParam._m0[1u].w * (_2051 - _1953)) + _1953);
    float _2070 = (((_1055 * _1008) + _1056) * _1020) * ((cbModelParam._m0[1u].w * (_2053 - _1955)) + _1955);
    float _2073 = fma(_2070, cbSceneParam._m0[89u].z, fma(_2068, cbSceneParam._m0[89u].y, _2066 * cbSceneParam._m0[89u].x));
    float _2076 = fma(_2070, cbSceneParam._m0[90u].z, fma(_2068, cbSceneParam._m0[90u].y, _2066 * cbSceneParam._m0[90u].x));
    float _2079 = fma(_2070, cbSceneParam._m0[91u].z, fma(_2068, cbSceneParam._m0[91u].y, _2066 * cbSceneParam._m0[91u].x));
    vec4 _2087 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_893, _894));
    float _2089 = _2087.w;
    float _2101 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2089);
    float _2102 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2089);
    float _2103 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2089);
    uvec4 _2107 = floatBitsToUint(cbInstanceData._m0[_948 + 5u]);
    uint _2109 = _2107.x * 14u;
    uint _2110 = _2109 + 13u;
    float _2117 = _1020 + (-1.0);
    float _2122 = (cbLight._m0[_2110].x * _2117) + 1.0;
    float _2123 = (cbLight._m0[_2110].y * _2117) + 1.0;
    float _2124 = (cbLight._m0[_2110].z * _2117) + 1.0;
    float _2125 = (cbLight._m0[_2110].w * _2117) + 1.0;
    uint _2126 = _2109 + 5u;
    float _2132 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
    uint _2136 = _2109 + 4u;
    float _2145 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
    uint _2149 = _2109 | 1u;
    float _2160 = dot(vec3(cbLight._m0[_2109].xyz), vec3(_793, _794, _795));
    float _2163 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_793, _794, _795));
    float _4401 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _4412 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2168 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * 0.3183098733425140380859375;
    float _2170 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * 0.3183098733425140380859375;
    float _2177 = ((cbLight._m0[_2126].x * _2132) * _2170) + (((cbLight._m0[_2136].x * _2101) * _2145) * _2168);
    float _2178 = ((_2132 * cbLight._m0[_2126].y) * _2170) + (((cbLight._m0[_2136].y * _2102) * _2145) * _2168);
    float _2179 = ((_2132 * cbLight._m0[_2126].z) * _2170) + (((cbLight._m0[_2136].z * _2103) * _2145) * _2168);
    uvec4 _2183 = floatBitsToUint(cbLight._m0[_2109 + 12u]);
    bool _2185 = _2183.x == 0u;
    float _2196;
    float _2198;
    float _2200;
    if (_2185)
    {
        _2196 = _2177;
        _2198 = _2178;
        _2200 = _2179;
    }
    else
    {
        uint _2204 = _2109 + 6u;
        float _2220 = (dot(vec3(cbLight._m0[_2109 + 2u].xyz), vec3(_793, _794, _795)) * 0.5) + 0.5;
        float _2221 = _2220 * _2220;
        float _4423 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2222 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2223 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
        _2196 = (((cbLight._m0[_2204].x * 0.3183098733425140380859375) * _2222) * _2223) + _2177;
        _2198 = (((cbLight._m0[_2204].y * 0.3183098733425140380859375) * _2222) * _2223) + _2178;
        _2200 = (((cbLight._m0[_2204].z * 0.3183098733425140380859375) * _2222) * _2223) + _2179;
    }
    bool _2203 = _2183.y == 0u;
    float _2241;
    float _2243;
    float _2245;
    if (_2203)
    {
        _2241 = _2196;
        _2243 = _2198;
        _2245 = _2200;
    }
    else
    {
        uint _2414 = _2109 + 7u;
        float _2430 = (dot(vec3(cbLight._m0[_2109 + 3u].xyz), vec3(_793, _794, _795)) * 0.5) + 0.5;
        float _2431 = _2430 * _2430;
        float _4439 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2432 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2433 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
        _2241 = (((cbLight._m0[_2414].x * 0.3183098733425140380859375) * _2432) * _2433) + _2196;
        _2243 = (((cbLight._m0[_2414].y * 0.3183098733425140380859375) * _2432) * _2433) + _2198;
        _2245 = (((cbLight._m0[_2414].z * 0.3183098733425140380859375) * _2432) * _2433) + _2200;
    }
    uint _2248 = _2109 + 8u;
    float _2261 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2109].w)) * _935) * 0.949999988079071044921875);
    float _2262 = _2261 * _2261;
    float _2263 = cbLight._m0[_2109].x + _873;
    float _2264 = cbLight._m0[_2109].y + _874;
    float _2265 = cbLight._m0[_2109].z + _875;
    float _2269 = inversesqrt(dot(vec3(_2263, _2264, _2265), vec3(_2263, _2264, _2265)));
    float _2270 = _2269 * _2263;
    float _2271 = _2269 * _2264;
    float _2272 = _2269 * _2265;
    float _2273 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2109].xyz));
    float _4455 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _4466 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _2277 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2278 = dot(vec3(_793, _794, _795), vec3(_2270, _2271, _2272));
    float _4477 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2281 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _2282 = dot(vec3(cbLight._m0[_2109].xyz), vec3(_2270, _2271, _2272));
    float _4488 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2286 = _2262 * _2262;
    float _2290 = ((_2281 * _2281) * (_2286 + (-1.0))) + 1.0;
    float _2298 = exp2(log2(1.0 - (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) * 5.0);
    float _2299 = 0.959999978542327880859375 - _1002;
    float _2301 = 0.959999978542327880859375 - _1003;
    float _2302 = 0.959999978542327880859375 - _1004;
    float _2309 = 1.0 - _2262;
    float _2320 = (0.5 / (((_2277 * ((_2276 * _2309) + _2262)) + 9.9999999392252902907785028219223e-09) + (((_2277 * _2309) + _2262) * _2276))) * _2276;
    float _4499 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2322 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2286 / ((_2290 * _2290) * 3.141590118408203125));
    uint _2336 = _2109 + 9u;
    float _2347 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2149].w)) * _935) * 0.949999988079071044921875);
    float _2348 = _2347 * _2347;
    float _2349 = cbLight._m0[_2149].x + _873;
    float _2350 = cbLight._m0[_2149].y + _874;
    float _2351 = cbLight._m0[_2149].z + _875;
    float _2355 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
    float _2356 = _2355 * _2349;
    float _2357 = _2355 * _2350;
    float _2358 = _2355 * _2351;
    float _2359 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2149].xyz));
    float _4510 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _2363 = dot(vec3(_793, _794, _795), vec3(_2356, _2357, _2358));
    float _4521 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2366 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
    float _2367 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_2356, _2357, _2358));
    float _4532 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2371 = _2348 * _2348;
    float _2375 = ((_2366 * _2366) * (_2371 + (-1.0))) + 1.0;
    float _2382 = exp2(log2(1.0 - (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0)))) * 5.0);
    float _2389 = 1.0 - _2348;
    float _2399 = (0.5 / (((_2277 * ((_2362 * _2389) + _2348)) + 9.9999999392252902907785028219223e-09) + (((_2277 * _2389) + _2348) * _2362))) * _2362;
    float _4543 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2401 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2371 / ((_2375 * _2375) * 3.141590118408203125));
    float _2411 = (((((_2382 * _2299) + _1005) * cbLight._m0[_2336].x) * _2401) * _2132) + ((((cbLight._m0[_2248].x * _2101) * ((_2298 * _2299) + _1005)) * _2322) * _2145);
    float _2412 = (((((_2382 * _2301) + _1007) * cbLight._m0[_2336].y) * _2401) * _2132) + ((((cbLight._m0[_2248].y * _2102) * ((_2298 * _2301) + _1007)) * _2322) * _2145);
    float _2413 = (((((_2382 * _2302) + _1008) * cbLight._m0[_2336].z) * _2401) * _2132) + ((((cbLight._m0[_2248].z * _2103) * ((_2298 * _2302) + _1008)) * _2322) * _2145);
    float _2475;
    float _2477;
    float _2479;
    if (_2185)
    {
        _2475 = _2411;
        _2477 = _2412;
        _2479 = _2413;
    }
    else
    {
        uint _2481 = _2109 + 2u;
        uint _2485 = _2109 + 10u;
        float _2499 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2481].w)) * _935) * 0.949999988079071044921875);
        float _2500 = _2499 * _2499;
        float _2501 = cbLight._m0[_2481].x + _873;
        float _2502 = cbLight._m0[_2481].y + _874;
        float _2503 = cbLight._m0[_2481].z + _875;
        float _2507 = inversesqrt(dot(vec3(_2501, _2502, _2503), vec3(_2501, _2502, _2503)));
        float _2508 = _2507 * _2501;
        float _2509 = _2507 * _2502;
        float _2510 = _2507 * _2503;
        float _2511 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2481].xyz));
        float _4554 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2514 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2515 = dot(vec3(_793, _794, _795), vec3(_2508, _2509, _2510));
        float _4565 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2518 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _2519 = dot(vec3(cbLight._m0[_2481].xyz), vec3(_2508, _2509, _2510));
        float _4576 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2523 = _2500 * _2500;
        float _2527 = ((_2518 * _2518) * (_2523 + (-1.0))) + 1.0;
        float _2534 = exp2(log2(1.0 - (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) * 5.0);
        float _2541 = 1.0 - _2500;
        float _2551 = (0.5 / (((_2277 * ((_2514 * _2541) + _2500)) + 9.9999999392252902907785028219223e-09) + (((_2277 * _2541) + _2500) * _2514))) * _2514;
        float _4587 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2553 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2523 / ((_2527 * _2527) * 3.141590118408203125));
        float _2554 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
        _2475 = (((((_2534 * _2299) + _1005) * cbLight._m0[_2485].x) * _2553) * _2554) + _2411;
        _2477 = (((((_2534 * _2301) + _1007) * cbLight._m0[_2485].y) * _2553) * _2554) + _2412;
        _2479 = (((((_2534 * _2302) + _1008) * cbLight._m0[_2485].z) * _2553) * _2554) + _2413;
    }
    float _2589;
    float _2591;
    float _2593;
    if (_2203)
    {
        _2589 = _2475;
        _2591 = _2477;
        _2593 = _2479;
    }
    else
    {
        uint _2600 = _2109 + 3u;
        uint _2604 = _2109 + 11u;
        float _2618 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2600].w)) * _935) * 0.949999988079071044921875);
        float _2619 = _2618 * _2618;
        float _2620 = cbLight._m0[_2600].x + _873;
        float _2621 = cbLight._m0[_2600].y + _874;
        float _2622 = cbLight._m0[_2600].z + _875;
        float _2626 = inversesqrt(dot(vec3(_2620, _2621, _2622), vec3(_2620, _2621, _2622)));
        float _2627 = _2626 * _2620;
        float _2628 = _2626 * _2621;
        float _2629 = _2626 * _2622;
        float _2630 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2600].xyz));
        float _4603 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2633 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2634 = dot(vec3(_793, _794, _795), vec3(_2627, _2628, _2629));
        float _4614 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2637 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
        float _2638 = dot(vec3(cbLight._m0[_2600].xyz), vec3(_2627, _2628, _2629));
        float _4625 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2642 = _2619 * _2619;
        float _2646 = ((_2637 * _2637) * (_2642 + (-1.0))) + 1.0;
        float _2653 = exp2(log2(1.0 - (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) * 5.0);
        float _2660 = 1.0 - _2619;
        float _2670 = (0.5 / (((_2277 * ((_2633 * _2660) + _2619)) + 9.9999999392252902907785028219223e-09) + (((_2277 * _2660) + _2619) * _2633))) * _2633;
        float _4636 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2672 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2642 / ((_2646 * _2646) * 3.141590118408203125));
        float _2673 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
        _2589 = (((((_2653 * _2299) + _1005) * cbLight._m0[_2604].x) * _2672) * _2673) + _2475;
        _2591 = (((((_2653 * _2301) + _1007) * cbLight._m0[_2604].y) * _2672) * _2673) + _2477;
        _2593 = (((((_2653 * _2302) + _1008) * cbLight._m0[_2604].z) * _2672) * _2673) + _2479;
    }
    float _2807;
    float _2809;
    float _2811;
    float _2813;
    float _2815;
    float _2817;
    if (_2107.y == 0u)
    {
        float _2748 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2749 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2748;
        float _2750 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2748;
        float _2751 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2748;
        uvec4 _2763 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2764 = _2763.x;
        uint _2775 = uint((float(_2763.y) * floor(float(uint(cbSceneParam._m0[85u].y * _894) / _2764))) + floor(float(uint(cbSceneParam._m0[85u].x * _893) / _2764)));
        float _2785 = (log2(_2751 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2786 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        uint _2789 = uint(isnan(14.0) ? _2786 : (isnan(_2786) ? 14.0 : min(_2786, 14.0)));
        uvec4 _2794 = texelFetch(g_lightClusterGridBuffer, int(((_2789 << 2u) + (_2775 << 6u)) >> 2u));
        uint _2795 = _2794.x;
        uint _2796 = _2763.z;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        if (((((1u << ((_2796 >> 4u) & 15u)) + 4294967295u) & _2795) == 0u) || ((_2796 & 240u) == 0u))
        {
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
            _2938 = 0.0;
            _2940 = 0.0;
        }
        else
        {
            float _2931;
            float _2933;
            float _2935;
            float _2937;
            float _2939;
            float _2941;
            float _3091 = 0.0;
            float _3092 = 0.0;
            float _3093 = 0.0;
            float _3094 = 0.0;
            float _3095 = 0.0;
            float _3096 = 0.0;
            uint _3097 = 0u;
            uint _3106;
            bool _3107;
            for (;;)
            {
                _3106 = texelFetch(g_lightClassification, int((((_2789 << 5u) + (_2775 << 9u)) + (_3097 << 2u)) >> 2u)).x;
                _3107 = _3106 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3107)
                {
                    frontier_phi_68_pred = _3093;
                    frontier_phi_68_pred_1 = _3096;
                    frontier_phi_68_pred_2 = _3095;
                    frontier_phi_68_pred_3 = _3094;
                    frontier_phi_68_pred_4 = _3092;
                    frontier_phi_68_pred_5 = _3091;
                }
                else
                {
                    float _3236;
                    float _3237;
                    float _3238;
                    float _3239;
                    float _3240;
                    float _3241;
                    uint _3242;
                    _3236 = _3091;
                    _3237 = _3092;
                    _3238 = _3093;
                    _3239 = _3094;
                    _3240 = _3095;
                    _3241 = _3096;
                    _3242 = _3106;
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    for (;;)
                    {
                        uint _3246 = uint(findLSB(_3242)) + (_3097 << 5u);
                        uint _3243 = (_3242 + 4294967295u) & _3242;
                        uint _3248 = _3246 * 48u;
                        vec4 _3262 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3248)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 3u)).x));
                        uint _3268 = (_3246 * 48u) + 4u;
                        vec4 _3281 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3268)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 3u)).x));
                        uint _3287 = (_3246 * 48u) + 8u;
                        vec3 _3298 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3287)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 2u)).x));
                        float _3302 = _3262.x - _2749;
                        float _3303 = _3262.y - _2750;
                        float _3304 = _3262.z - _2751;
                        float _3305 = dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304));
                        float _3308 = inversesqrt(_3305);
                        float _3309 = _3308 * _3302;
                        float _3310 = _3308 * _3303;
                        float _3311 = _3308 * _3304;
                        float _3312 = dot(vec3(_916, _919, _922), vec3(_3309, _3310, _3311));
                        float _3317 = 1.0 - (_3305 * _3262.w);
                        float _4662 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                        float _3318 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                        float _3319 = sqrt(_3305) * _3281.w;
                        float _3322 = 1.39999997615814208984375 / (_3319 + 1.39999997615814208984375);
                        float _3323 = _3322 * _3322;
                        float _3326 = ((1.0 - _3323) * _3312) + _3323;
                        float _3329 = _3319 * _3319;
                        float _3333 = ((isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0))) * _3318) / ((_3329 * 0.699999988079071044921875) + 1.0);
                        float _3337 = (-0.0) - _2749;
                        float _3338 = (-0.0) - _2750;
                        float _3339 = (-0.0) - _2751;
                        float _3343 = inversesqrt(dot(vec3(_3337, _3338, _3339), vec3(_3337, _3338, _3339)));
                        float _3344 = _3343 * _3337;
                        float _3345 = _3343 * _3338;
                        float _3346 = _3343 * _3339;
                        float _3353 = exp2(log2(1.0 / ((_3329 * 3.5) + 5.0)) * 0.25);
                        float _3354 = 1.0 - _1036;
                        float _3361 = sqrt(1.0 - ((1.0 - (_3354 * _3354)) * (1.0 - (_3353 * _3353))));
                        float _3362 = _3361 * _3361;
                        float _3363 = _3362 * _3362;
                        float _3364 = _3344 + _3309;
                        float _3365 = _3345 + _3310;
                        float _3366 = _3346 + _3311;
                        float _3370 = inversesqrt(dot(vec3(_3364, _3365, _3366), vec3(_3364, _3365, _3366)));
                        float _3374 = dot(vec3(_916, _919, _922), vec3(_3344, _3345, _3346));
                        float _4678 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                        float _3377 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                        float _3378 = dot(vec3(_916, _919, _922), vec3(_3370 * _3364, _3370 * _3365, _3370 * _3366));
                        float _4689 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                        float _3381 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                        float _3385 = ((_3381 * _3381) * (_3363 + (-1.0))) + 1.0;
                        float _3386 = _3322 * _3362;
                        float _3387 = _3386 * _3386;
                        float _3390 = ((1.0 - _3387) * _3312) + _3387;
                        float _4700 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                        float _3391 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                        float _3392 = 1.0 - _3362;
                        float _3402 = (0.5 / (((_3391 * ((_3377 * _3392) + _3362)) + 9.9999999392252902907785028219223e-09) + (((_3391 * _3392) + _3362) * _3377))) * _3391;
                        float _4711 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                        float _3413 = (((_3363 * 3.1415927410125732421875) * (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0)))) / ((_3385 * _3385) * ((_3329 * 2.1991131305694580078125) + 3.141590118408203125))) * _3318;
                        _3166 = (_3333 * _3281.x) + _3239;
                        _3167 = (_3333 * _3281.y) + _3240;
                        _3168 = (_3333 * _3281.z) + _3241;
                        _3163 = (_3413 * _3298.x) + _3236;
                        _3164 = (_3413 * _3298.y) + _3237;
                        _3165 = (_3413 * _3298.z) + _3238;
                        if (_3243 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3236 = _3163;
                            _3237 = _3164;
                            _3238 = _3165;
                            _3239 = _3166;
                            _3240 = _3167;
                            _3241 = _3168;
                            _3242 = _3243;
                        }
                    }
                    frontier_phi_68_pred = _3165;
                    frontier_phi_68_pred_1 = _3168;
                    frontier_phi_68_pred_2 = _3167;
                    frontier_phi_68_pred_3 = _3166;
                    frontier_phi_68_pred_4 = _3164;
                    frontier_phi_68_pred_5 = _3163;
                }
                _2935 = frontier_phi_68_pred;
                _2941 = frontier_phi_68_pred_1;
                _2939 = frontier_phi_68_pred_2;
                _2937 = frontier_phi_68_pred_3;
                _2933 = frontier_phi_68_pred_4;
                _2931 = frontier_phi_68_pred_5;
                uint _3098 = _3097 + 1u;
                if (_3098 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3091 = _2931;
                    _3092 = _2933;
                    _3093 = _2935;
                    _3094 = _2937;
                    _3095 = _2939;
                    _3096 = _2941;
                    _3097 = _3098;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
            _2938 = _2939;
            _2940 = _2941;
        }
        uvec4 _2944 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2945 = _2944.z;
        uint _2947 = (_2945 >> 8u) & 15u;
        float _3059;
        float _3061;
        float _3063;
        float _3065;
        float _3067;
        float _3069;
        if (((4294967295u << _2947) & _2795) == 0u)
        {
            _3059 = _2930;
            _3061 = _2932;
            _3063 = _2934;
            _3065 = _2936;
            _3067 = _2938;
            _3069 = _2940;
        }
        else
        {
            float _3084 = inversesqrt(dot(vec3(_2749, _2750, _2751), vec3(_2749, _2750, _2751)));
            float _3085 = _3084 * _2749;
            float _3086 = _3084 * _2750;
            float _3087 = _3084 * _2751;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2947 < ((_2945 >> 12u) & 15u))
            {
                float _3060;
                float _3062;
                float _3064;
                float _3066;
                float _3068;
                float _3070;
                float _3219 = _2930;
                float _3220 = _2932;
                float _3221 = _2934;
                float _3222 = _2936;
                float _3223 = _2938;
                float _3224 = _2940;
                uint _3225 = _2947;
                uint _3234;
                bool _3235;
                for (;;)
                {
                    _3234 = texelFetch(g_lightClassification, int((((_2789 << 5u) + (_2775 << 9u)) + (_3225 << 2u)) >> 2u)).x;
                    _3235 = _3234 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3235)
                    {
                        frontier_phi_79_pred = _3224;
                        frontier_phi_79_pred_1 = _3223;
                        frontier_phi_79_pred_2 = _3222;
                        frontier_phi_79_pred_3 = _3221;
                        frontier_phi_79_pred_4 = _3220;
                        frontier_phi_79_pred_5 = _3219;
                    }
                    else
                    {
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3720;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3440 = _3219;
                        float _3441 = _3220;
                        float _3442 = _3221;
                        float _3443 = _3222;
                        float _3444 = _3223;
                        float _3445 = _3224;
                        uint _3446 = _3234;
                        uint _3447;
                        vec4 _3472;
                        float _3473;
                        vec4 _3488;
                        vec3 _3500;
                        vec4 _3515;
                        vec4 _3530;
                        float _3576;
                        bool _3577;
                        for (;;)
                        {
                            uint _3457 = ((_3225 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3446));
                            _3447 = (_3446 + 4294967295u) & _3446;
                            uint _3459 = _3457 * 40u;
                            _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            _3473 = _3472.w;
                            uint _3475 = (_3457 * 40u) + 4u;
                            _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            uint _3490 = (_3457 * 40u) + 8u;
                            _3500 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x));
                            uint _3502 = (_3457 * 40u) + 16u;
                            _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            uint _3517 = (_3457 * 40u) + 20u;
                            _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            uint _3532 = (_3457 * 40u) + 24u;
                            vec4 _3545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 3u)).x));
                            uint _3551 = (_3457 * 40u) + 28u;
                            vec4 _3564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 3u)).x));
                            _3576 = fma(_2751, _3564.z, fma(_2750, _3564.y, _3564.x * _2749)) + _3564.w;
                            _3577 = !((fma(_2751, _3545.z, fma(_2750, _3545.y, _3545.x * _2749)) + _3545.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3577)
                            {
                                float _3604 = _3472.x - _2749;
                                float _3605 = _3472.y - _2750;
                                float _3606 = _3472.z - _2751;
                                float _3607 = dot(vec3(_3604, _3605, _3606), vec3(_3604, _3605, _3606));
                                float _3610 = inversesqrt(_3607);
                                float _3611 = _3610 * _3604;
                                float _3612 = _3610 * _3605;
                                float _3613 = _3610 * _3606;
                                float _3617 = 1.0 - (_3607 / (_3473 * _3473));
                                float _4722 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3618 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3622 = sqrt(_3607) * _3488.w;
                                float _3624 = 1.39999997615814208984375 / (_3622 + 1.39999997615814208984375);
                                float _3625 = _3624 * _3624;
                                float _3628 = ((1.0 - _3625) * dot(vec3(_3611, _3612, _3613), vec3(_916, _919, _922))) + _3625;
                                float _3631 = _3622 * _3622;
                                float _3635 = (fma(_2751, _3515.z, fma(_2750, _3515.y, _3515.x * _2749)) + _3515.w) / _3576;
                                float _3636 = (fma(_2751, _3530.z, fma(_2750, _3530.y, _3530.x * _2749)) + _3530.w) / _3576;
                                float _3640 = 1.0 - dot(vec2(_3635, _3636), vec2(_3635, _3636));
                                float _4738 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                                float _3641 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3642 = _3641 * (((isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0))) * _3618) / ((_3631 * 0.699999988079071044921875) + 1.0));
                                float _3654 = exp2(log2(1.0 / ((_3631 * 3.5) + 5.0)) * 0.25);
                                float _3655 = 1.0 - _1036;
                                float _3662 = sqrt(1.0 - ((1.0 - (_3655 * _3655)) * (1.0 - (_3654 * _3654))));
                                float _3663 = _3662 * _3662;
                                float _3664 = _3663 * _3663;
                                float _3665 = _3611 - _3085;
                                float _3666 = _3612 - _3086;
                                float _3667 = _3613 - _3087;
                                float _3671 = inversesqrt(dot(vec3(_3665, _3666, _3667), vec3(_3665, _3666, _3667)));
                                float _3675 = dot(vec3(_916, _919, _922), vec3((-0.0) - _3085, (-0.0) - _3086, (-0.0) - _3087));
                                float _4749 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                                float _3678 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                                float _3679 = dot(vec3(_916, _919, _922), vec3(_3671 * _3665, _3671 * _3666, _3671 * _3667));
                                float _4760 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                                float _3682 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3686 = ((_3682 * _3682) * (_3664 + (-1.0))) + 1.0;
                                float _3687 = _3624 * _3663;
                                float _3688 = _3687 * _3687;
                                float _3694 = ((1.0 - _3688) * dot(vec3(_916, _919, _922), vec3(_3611, _3612, _3613))) + _3688;
                                float _4771 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                                float _3695 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                                float _3696 = 1.0 - _3663;
                                float _3706 = (0.5 / (((_3695 * ((_3678 * _3696) + _3663)) + 9.9999999392252902907785028219223e-09) + (((_3695 * _3696) + _3663) * _3678))) * _3695;
                                float _4782 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                                float _3716 = (_3641 * _3618) * (((_3664 * 3.1415927410125732421875) * (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)))) / ((_3686 * _3686) * ((_3631 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3642 * _3488.z;
                                frontier_phi_85_pred_1 = _3642 * _3488.y;
                                frontier_phi_85_pred_2 = _3642 * _3488.x;
                                frontier_phi_85_pred_3 = _3716 * _3500.z;
                                frontier_phi_85_pred_4 = _3716 * _3500.y;
                                frontier_phi_85_pred_5 = _3716 * _3500.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3725 = frontier_phi_85_pred;
                            _3724 = frontier_phi_85_pred_1;
                            _3723 = frontier_phi_85_pred_2;
                            _3722 = frontier_phi_85_pred_3;
                            _3721 = frontier_phi_85_pred_4;
                            _3720 = frontier_phi_85_pred_5;
                            _3430 = _3723 + _3443;
                            _3431 = _3724 + _3444;
                            _3432 = _3725 + _3445;
                            _3427 = _3720 + _3440;
                            _3428 = _3721 + _3441;
                            _3429 = _3722 + _3442;
                            if (_3447 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3440 = _3427;
                                _3441 = _3428;
                                _3442 = _3429;
                                _3443 = _3430;
                                _3444 = _3431;
                                _3445 = _3432;
                                _3446 = _3447;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3432;
                        frontier_phi_79_pred_1 = _3431;
                        frontier_phi_79_pred_2 = _3430;
                        frontier_phi_79_pred_3 = _3429;
                        frontier_phi_79_pred_4 = _3428;
                        frontier_phi_79_pred_5 = _3427;
                    }
                    _3070 = frontier_phi_79_pred;
                    _3068 = frontier_phi_79_pred_1;
                    _3066 = frontier_phi_79_pred_2;
                    _3064 = frontier_phi_79_pred_3;
                    _3062 = frontier_phi_79_pred_4;
                    _3060 = frontier_phi_79_pred_5;
                    uint _3226 = _3225 + 1u;
                    if (_3226 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3219 = _3060;
                        _3220 = _3062;
                        _3221 = _3064;
                        _3222 = _3066;
                        _3223 = _3068;
                        _3224 = _3070;
                        _3225 = _3226;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3066;
                frontier_phi_60_61_ladder_1 = _3070;
                frontier_phi_60_61_ladder_2 = _3068;
                frontier_phi_60_61_ladder_3 = _3064;
                frontier_phi_60_61_ladder_4 = _3062;
                frontier_phi_60_61_ladder_5 = _3060;
            }
            else
            {
                frontier_phi_60_61_ladder = _2936;
                frontier_phi_60_61_ladder_1 = _2940;
                frontier_phi_60_61_ladder_2 = _2938;
                frontier_phi_60_61_ladder_3 = _2934;
                frontier_phi_60_61_ladder_4 = _2932;
                frontier_phi_60_61_ladder_5 = _2930;
            }
            _3059 = frontier_phi_60_61_ladder_5;
            _3061 = frontier_phi_60_61_ladder_4;
            _3063 = frontier_phi_60_61_ladder_3;
            _3065 = frontier_phi_60_61_ladder;
            _3067 = frontier_phi_60_61_ladder_2;
            _3069 = frontier_phi_60_61_ladder_1;
        }
        float _3074 = isnan(1.0) ? _1020 : (isnan(_1020) ? 1.0 : min(_1020, 1.0));
        _2807 = (_3074 * _3065) + _2241;
        _2809 = (_3074 * _3067) + _2243;
        _2811 = (_3074 * _3069) + _2245;
        _2813 = ((_3059 * _1005) * _3074) + _2589;
        _2815 = ((_3061 * _1007) * _3074) + _2591;
        _2817 = ((_3063 * _1008) * _3074) + _2593;
    }
    else
    {
        _2807 = _2241;
        _2809 = _2243;
        _2811 = _2245;
        _2813 = _2589;
        _2815 = _2591;
        _2817 = _2593;
    }
    uint _2823 = _949 + uint(cbMatDynParam._m0[0u].w);
    float _2831 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[22u].z) * _737.x) * cbInstanceData._m0[_2823].x;
    float _2834 = ((cbMtdParam._m0[11u].y * cbMtdParam._m0[22u].z) * _737.y) * cbInstanceData._m0[_2823].y;
    float _2837 = ((cbMtdParam._m0[11u].z * cbMtdParam._m0[22u].z) * _737.z) * cbInstanceData._m0[_2823].z;
    float _4798 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _4809 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _4820 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _2854 = (((isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2807 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1020))) + ((_2813 + ((isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0))) * _1860)) * cbPerFrame._m0[3u].x)) + _2831;
    float _2856 = (_2834 + ((_2815 + ((isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0))) * _1860)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * (_2809 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1020)));
    float _2858 = (_2837 + ((_2817 + ((isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0))) * _1860)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * (_2811 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1020)));
    float _2859 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
    float _2860 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
    float _2861 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
    float _2867 = cbMtdParam._m0[2u].x * _2831;
    float _2868 = cbMtdParam._m0[2u].y * _2834;
    float _2869 = cbMtdParam._m0[2u].z * _2837;
    float _4846 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2871 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
    uint _2872 = _948 + 6u;
    float _2880 = _893 / cbSceneParam._m0[86u].x;
    float _2881 = _894 / cbSceneParam._m0[86u].y;
    vec4 _2895 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2880, _2881, (log2((isnan(cbSceneParam._m0[77u].w) ? _816 : (isnan(_816) ? cbSceneParam._m0[77u].w : min(_816, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2897 = _2895.x;
    float _2898 = _2895.y;
    float _2899 = _2895.z;
    float _2900 = _2895.w;
    float _2992;
    float _2994;
    float _2996;
    float _2998;
    if (_816 > cbSceneParam._m0[78u].w)
    {
        float _2955 = isnan(_816) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _816 : min(cbSceneParam._m0[80u].w, _816));
        float _2956 = _2955 / _816;
        float _2967 = _2956 * _866;
        float _2968 = _867 * _2956;
        float _2969 = (-0.0) - _2968;
        float _2970 = _2956 * _868;
        float _2972 = (cbSceneParam._m0[77u].w * _2969) / _2955;
        float _2973 = _2972 + cbSceneParam._m0[79u].w;
        float _2974 = cbSceneParam._m0[79u].w - _2968;
        float _2980 = sqrt(((_2967 * _2967) + (_2968 * _2968)) + (_2970 * _2970));
        float _2983 = (1.0 - (cbSceneParam._m0[77u].w / _2955)) * _2980;
        float _2988 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2990 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3176;
        if (abs((_2969 - _2972) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3176 = ((((_2973 > 0.0) ? exp2(_2988 * _2973) : (2.0 - exp2(_2990 * _2973))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2983;
        }
        else
        {
            float _3120 = 1.0 / cbSceneParam._m0[80u].x;
            float _3121 = isnan(_2974) ? _2973 : (isnan(_2973) ? _2974 : max(_2973, _2974));
            float _3122 = isnan(_2974) ? _2973 : (isnan(_2973) ? _2974 : min(_2973, _2974));
            float _3131 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : min(_3121, 0.0));
            float _3132 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : min(_3122, 0.0));
            _3176 = ((abs(_2980 / _2969) * cbSceneParam._m0[80u].y) * ((((_3131 - _3132) * 2.0) - ((exp2(_2988 * (isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0)))) - exp2(_2988 * (isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0))))) * _3120)) - ((exp2(_2990 * _3131) - exp2(_2990 * _3132)) * _3120))) + (_2983 * cbSceneParam._m0[80u].z);
        }
        vec4 _3178 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2880, _2881, 1.0), 0.0);
        float _3187 = exp2((_3176 * (-1.44269502162933349609375)) * (1.0 - _3178.w));
        float _3188 = log2(_3187);
        float _3204 = log2(_2900);
        _2992 = (exp2(_3204 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3188 * cbSceneParam._m0[78u].x)) * _3178.x) / cbSceneParam._m0[78u].x)) + _2897;
        _2994 = (exp2(_3204 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3188 * cbSceneParam._m0[78u].y)) * _3178.y) / cbSceneParam._m0[78u].y)) + _2898;
        _2996 = (exp2(_3204 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3188 * cbSceneParam._m0[78u].z)) * _3178.z) / cbSceneParam._m0[78u].z)) + _2899;
        _2998 = _3187 * _2900;
    }
    else
    {
        _2992 = _2897;
        _2994 = _2898;
        _2996 = _2899;
        _2998 = _2900;
    }
    bool _3214;
    vec4 _3008;
    vec4 _3030;
    float _3032;
    float _3036;
    float _3037;
    float _3038;
    float _3041;
    float _3044;
    float _3047;
    float _3048;
    bool _3058;
    for (;;)
    {
        _3008 = cbMatDynParam._m0[0u];
        float _3010 = roundEven(_3008.y);
        bool _3011 = _3010 == 3.0;
        float _3012 = log2(_2998);
        float _3016 = exp2(_3012 * cbSceneParam._m0[78u].x);
        float _3017 = exp2(_3012 * cbSceneParam._m0[78u].y);
        float _3018 = exp2(_3012 * cbSceneParam._m0[78u].z);
        float _3019 = _3016 * _2859;
        float _3020 = _3017 * _2860;
        float _3021 = _3018 * _2861;
        float _3028 = _882 + (-0.5);
        _3030 = cbMtdParam._m0[1u];
        _3032 = _3030.y * _3028;
        float _3035 = (_3010 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3036 = _3035 * (_3011 ? _3019 : (_3019 + (cbSceneParam._m0[72u].w * _2992)));
        _3037 = _3035 * (_3011 ? _3020 : (_3020 + (cbSceneParam._m0[72u].w * _2994)));
        _3038 = _3035 * (_3011 ? _3021 : (_3021 + (cbSceneParam._m0[72u].w * _2996)));
        _3041 = ((_2867 * _2871) * _3016) * _3035;
        _3044 = ((_2868 * _2871) * _3017) * _3035;
        _3047 = ((_2869 * _2871) * _3018) * _3035;
        _3048 = _3028 * 0.999000012874603271484375;
        _3058 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3058)
        {
            if ((cbInstanceData._m0[_948 + 7u].x + _3048) < 0.5)
            {
                _3214 = true;
                break;
            }
        }
        uint _3155 = _949 + uint(_3008.w);
        if ((cbInstanceData._m0[_3155].w < 1.0) && ((cbInstanceData._m0[_3155].w + _3048) < 0.5))
        {
            _3214 = true;
            break;
        }
        if ((_3032 + 1.0) < _3030.x)
        {
            _3214 = true;
            break;
        }
        _3214 = false;
        break;
    }
    float _3418;
    if (_3214)
    {
        discard_state = true;
        _3418 = 0.0;
    }
    else
    {
        _3418 = cbInstanceData._m0[_2872].w;
    }
    SV_Target.x = _3036;
    SV_Target.y = _3037;
    SV_Target.z = _3038;
    SV_Target.w = _3418;
    SV_Target_1.x = _3041;
    SV_Target_1.y = _3044;
    SV_Target_1.z = _3047;
    SV_Target_1.w = cbInstanceData._m0[_2872].w;
    discard_exit();
}


