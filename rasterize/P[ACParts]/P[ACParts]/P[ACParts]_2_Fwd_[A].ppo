#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_snp_0_Texture2D_2;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D P_ACParts_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D P_ACParts_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_snp_0_Texture2D_10;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_snp_0_Texture2D_13;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_snp_0_Texture2D_14;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_snp_0_Texture2D_15;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1417;
float _3800;
float _3801;
float _3802;
float _3803;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253;
    float _254;
    float _255;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _253 = (-0.0) - _239;
        _254 = (-0.0) - _240;
        _255 = (-0.0) - _241;
    }
    else
    {
        _253 = _239;
        _254 = _240;
        _255 = _241;
    }
    float _265 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    vec4 _278 = texture(sampler2D(P_ACParts_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_265 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _283 = _278.z;
    float _284 = _278.w;
    float _292 = exp2(log2(_283 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _293 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _294 = isnan(1.0) ? _293 : (isnan(_293) ? 1.0 : min(_293, 1.0));
    float _300 = exp2(log2(1.0 - _284) * cbMtdParam._m0[20u].y);
    vec4 _312 = texture(sampler2D(P_ACParts_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _265) + cbTextureTilingScale._m0[0u].w));
    float _201[6];
    float _202[6];
    float _203[6];
    _201[0u] = cbMtdParam._m0[12u].x;
    _202[0u] = cbMtdParam._m0[12u].y;
    _203[0u] = cbMtdParam._m0[12u].z;
    _201[1u] = cbMtdParam._m0[13u].x;
    _202[1u] = cbMtdParam._m0[13u].y;
    _203[1u] = cbMtdParam._m0[13u].z;
    _201[2u] = cbMtdParam._m0[14u].x;
    _202[2u] = cbMtdParam._m0[14u].y;
    _203[2u] = cbMtdParam._m0[14u].z;
    _201[3u] = cbMtdParam._m0[15u].x;
    _202[3u] = cbMtdParam._m0[15u].y;
    _203[3u] = cbMtdParam._m0[15u].z;
    _201[4u] = cbMtdParam._m0[16u].x;
    _202[4u] = cbMtdParam._m0[16u].y;
    _203[4u] = cbMtdParam._m0[16u].z;
    _201[5u] = cbMtdParam._m0[11u].x;
    _202[5u] = cbMtdParam._m0[11u].y;
    _203[5u] = cbMtdParam._m0[11u].z;
    vec4 _394 = texture(sampler2D(P_ACParts_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _396 = _394.x;
    float _397 = _394.y;
    float _425 = roundEven(((_396 + (-0.02500000037252902984619140625)) + ((_394.z * cbMtdParam._m0[19u].w) * (texture(sampler2D(P_ACParts_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, ((cbMtdParam._m0[19u].z * TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w)).x - _396))) * 6.0);
    float _426 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    uint _429 = uint(int(isnan(5.0) ? _426 : (isnan(_426) ? 5.0 : min(_426, 5.0))));
    vec4 _459 = texture(sampler2D(P_ACParts_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _265) + cbTextureTilingScale._m0[3u].w));
    float _469 = cbMtdParam._m0[9u].x * _459.x;
    float _470 = cbMtdParam._m0[9u].y * _459.y;
    float _471 = cbMtdParam._m0[9u].z * _459.z;
    float _478 = ((((((_201[_429] - cbMtdParam._m0[10u].x) * _397) + cbMtdParam._m0[10u].x) * _312.x) - _469) * _300) + _469;
    float _479 = ((((((_202[_429] - cbMtdParam._m0[10u].y) * _397) + cbMtdParam._m0[10u].y) * _312.y) - _470) * _300) + _470;
    float _480 = ((((((_203[_429] - cbMtdParam._m0[10u].z) * _397) + cbMtdParam._m0[10u].z) * _312.z) - _471) * _300) + _471;
    float _484 = exp2(log2(_284) * cbMtdParam._m0[21u].y);
    vec4 _496 = texture(sampler2D(P_ACParts_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _265) + cbTextureTilingScale._m0[10u].w));
    vec4 _529 = texture(sampler2D(P_ACParts_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _540 = cbMtdParam._m0[18u].x * _529.x;
    float _541 = cbMtdParam._m0[18u].y * _529.y;
    float _542 = cbMtdParam._m0[18u].z * _529.z;
    vec4 _563 = texture(sampler2D(P_ACParts_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _265) + cbTextureTilingScale._m0[1u].w));
    float _571 = ((((((((cbMtdParam._m0[17u].x * _496.x) - _478) * _484) + _478) - _540) * _294) + _540) * 4.55000019073486328125) * _563.x;
    float _573 = ((((((((cbMtdParam._m0[17u].y * _496.y) - _479) * _484) + _479) - _541) * _294) + _541) * 4.55000019073486328125) * _563.y;
    float _575 = ((((((((cbMtdParam._m0[17u].z * _496.z) - _480) * _484) + _480) - _542) * _294) + _542) * 4.55000019073486328125) * _563.z;
    float _576 = _563.w * _312.w;
    vec4 _588 = texture(sampler2D(P_ACParts_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    float _590 = _588.x;
    float _608 = (((1.0 - _590) + texture(sampler2D(P_ACParts_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w)).x) * _294) + _590;
    vec4 _620 = texture(sampler2D(P_ACParts_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _265) + cbTextureTilingScale._m0[6u].w));
    float _627 = (((_620.x - _608) + cbMtdParam._m0[20u].z) * _300) + _608;
    float _650 = (((texture(sampler2D(P_ACParts_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - _627) + cbMtdParam._m0[22u].y) * _484) + _627;
    vec4 _662 = texture(sampler2D(P_ACParts_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _265) + cbTextureTilingScale._m0[12u].w));
    vec4 _680 = texture(sampler2D(P_ACParts_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _265) + cbTextureTilingScale._m0[13u].w));
    float _682 = _680.x;
    float _683 = _680.y;
    float _686 = cbMtdParam._m0[19u].x + _680.z;
    float _689 = (((cbMtdParam._m0[20u].x + _662.z) - _686) * _300) + _686;
    vec4 _701 = texture(sampler2D(P_ACParts_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _725 = texture(sampler2D(P_ACParts_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _727 = _725.x;
    float _728 = _725.y;
    float _731 = cbMtdParam._m0[21u].x + _725.z;
    float _734 = ((((_283 * 2.0) * ((((_701.z - _689) + cbMtdParam._m0[22u].x) * _484) + _689)) - _731) * _294) + _731;
    float _745 = ((_662.x - _682) * _300) + _682;
    float _746 = ((_662.y - _683) * _300) + _683;
    float _761 = (((((((_701.x - _745) * _484) + _745) - _727) * _294) + _727) * 2.0) + (-1.0);
    float _762 = (((((((_701.y - _746) * _484) + _746) - _728) * _294) + _728) * 2.0) + (-1.0);
    float _763 = dot(vec2(_761, _762), vec2(_761, _762));
    float _3832 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _768 = sqrt(1.0 - (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))));
    float _771 = _761 + (cbMtdParam._m0[21u].w * ((_278.x * 2.0) + (-1.0)));
    float _772 = _762 + (cbMtdParam._m0[21u].w * ((_278.y * 2.0) + (-1.0)));
    float _775 = fma(_768, _253, fma(_772, _245 * TANGENT.x, (_231 * _223) * _771));
    float _778 = fma(_768, _254, fma(_772, _245 * TANGENT.y, (_231 * _224) * _771));
    float _781 = fma(_768, _255, fma(_772, _245 * TANGENT.z, (_231 * _225) * _771));
    float _785 = inversesqrt(dot(vec3(_775, _778, _781), vec3(_775, _778, _781)));
    float _786 = _785 * _775;
    float _787 = _785 * _778;
    float _788 = _785 * _781;
    float _3843 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _789 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _3854 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _790 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _3865 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _3876 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3887 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _3898 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _794 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _810 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _860 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _850);
    float _861 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _850);
    float _862 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _850);
    float _866 = inversesqrt(dot(vec3(_860, _861, _862), vec3(_860, _861, _862)));
    float _867 = _860 * _866;
    float _868 = _861 * _866;
    float _869 = _862 * _866;
    vec4 _874 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _876 = _874.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1096 = sqrt(((_860 * _860) + (_861 * _861)) + (_862 * _862));
        float _1102 = (cbMatDynParam._m0[5u].x * _1096) + cbMatDynParam._m0[5u].y;
        float _3909 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1107 = (cbMatDynParam._m0[5u].z * _1096) + cbMatDynParam._m0[5u].w;
        float _3920 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) - _1103)) + _1103) < ((_876 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _887 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _888 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _890 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _892 = _890.w;
    float _910 = fma(_788, cbSceneParam._m0[5u].z, fma(_787, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _786));
    float _913 = fma(_788, cbSceneParam._m0[6u].z, fma(_787, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _786));
    float _916 = fma(_788, cbSceneParam._m0[7u].z, fma(_787, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _786));
    vec4 _918 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _929 = (((_918.y - _790) + (_918.w * _790)) * cbMtdParam._m0[3u].x) + _790;
    uint _942 = uint(roundEven(NORMAL.w)) * 13u;
    uint _943 = _942 + 9u;
    uint _944 = _943 + uint(cbMatDynParam._m0[0u].w);
    float _950 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) * cbInstanceData._m0[_944].x;
    float _951 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0)))) * cbInstanceData._m0[_944].y;
    float _952 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) * cbInstanceData._m0[_944].z;
    float _3931 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _953 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _3942 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _954 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _3953 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _955 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    vec4 _956 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _961 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _972 = (((_961.x - _794) + (_961.w * _794)) * cbMtdParam._m0[3u].x) + _794;
    float _985 = (cbMtdParam._m0[3u].x * (((_953 * _892) - _953) + _956.x)) + _953;
    float _986 = (cbMtdParam._m0[3u].x * (((_954 * _892) - _954) + _956.y)) + _954;
    float _987 = (cbMtdParam._m0[3u].x * (((_955 * _892) - _955) + _956.z)) + _955;
    float _988 = 1.0 - _972;
    float _989 = _988 * _985;
    float _990 = _988 * _986;
    float _991 = _988 * _987;
    float _996 = (_985 + (-0.039999999105930328369140625)) * _972;
    float _997 = (_986 + (-0.039999999105930328369140625)) * _972;
    float _998 = (_987 + (-0.039999999105930328369140625)) * _972;
    float _999 = _996 + 0.039999999105930328369140625;
    float _1001 = _997 + 0.039999999105930328369140625;
    float _1002 = _998 + 0.039999999105930328369140625;
    vec4 _1011 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _887, cbSceneParam._m0[86u].y * _888));
    float _1014 = _1011.x * TEXCOORD_4;
    float _1015 = dot(vec3(_786, _787, _788), vec3(_867, _868, _869));
    float _1018 = _1015 * 2.0;
    float _1022 = (_1018 * _786) - _867;
    float _1023 = (_1018 * _787) - _868;
    float _1024 = (_1018 * _788) - _869;
    float _1028 = abs(dot(vec3(_867, _868, _869), vec3(_786, _787, _788)));
    float _3964 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1030 = sqrt(_929);
    float _1042 = exp2((_1030 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1030 * 3.0));
    float _1048 = (1.0 - _1042) * ((_1030 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1049 = _1042 * _1030;
    float _1077 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1416;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1141 = fma(_1085, cbModelParam._m0[26u].z, fma(_1081, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1077));
        float _1145 = fma(_1085, cbModelParam._m0[27u].z, fma(_1081, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1077));
        float _1149 = fma(_1085, cbModelParam._m0[28u].z, fma(_1081, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1077));
        float _1174 = _1077 + _786;
        float _1175 = _1081 + _787;
        float _1176 = _1085 + _788;
        float _1186 = fma(_1176, cbModelParam._m0[26u].z, fma(_1175, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1174)) - _1141;
        float _1187 = fma(_1176, cbModelParam._m0[27u].z, fma(_1175, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1174)) - _1145;
        float _1188 = fma(_1176, cbModelParam._m0[28u].z, fma(_1175, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1174)) - _1149;
        float _1192 = inversesqrt(dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188)));
        float _1205 = ((_1192 * _1186) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1141 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1206 = ((_1192 * _1187) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1145 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1207 = ((_1192 * _1188) / cbModelParam._m0[34u].z) + ((((((_1149 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        float _1244 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1210.x + (-0.5));
        float _1246 = _1244 * (_1210.y + (-0.5));
        float _1247 = _1244 * (_1210.z + (-0.5));
        float _1254 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1217.x + (-0.5));
        float _1256 = _1254 * (_1217.y + (-0.5));
        float _1257 = _1254 * (_1217.z + (-0.5));
        float _1264 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1224.x + (-0.5));
        float _1266 = _1264 * (_1224.y + (-0.5));
        float _1267 = _1264 * (_1224.z + (-0.5));
        float _1274 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1231.x + (-0.5));
        float _1276 = _1274 * (_1231.y + (-0.5));
        float _1277 = _1274 * (_1231.z + (-0.5));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = _1245 * 0.5;
        float _1282 = _1255 * 0.5;
        float _1283 = _1265 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1298 = (dot(vec3(_786, _787, _788), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1308 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _4012 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1310 + 1.0))) + _1315) * _1278;
        float _1325 = _1246 * 0.5;
        float _1326 = _1256 * 0.5;
        float _1327 = _1266 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_786, _787, _788), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1279 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _4045 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1352 + 1.0))) + _1357) * _1279;
        float _1367 = _1247 * 0.5;
        float _1368 = _1257 * 0.5;
        float _1369 = _1267 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1383 = (dot(vec3(_786, _787, _788), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1392 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _4078 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1394 + 1.0))) + _1399) * _1280;
        _1416 = _1247;
        _1418 = _1246;
        _1419 = _1245;
        _1420 = _1257;
        _1421 = _1256;
        _1422 = _1255;
        _1423 = _1267;
        _1424 = _1266;
        _1425 = _1265;
        _1426 = _1280;
        _1427 = _1279;
        _1428 = _1278;
        _1429 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
        _1430 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
        _1431 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
    }
    else
    {
        _1416 = _1417;
        _1418 = _1417;
        _1419 = _1417;
        _1420 = _1417;
        _1421 = _1417;
        _1422 = _1417;
        _1423 = _1417;
        _1424 = _1417;
        _1425 = _1417;
        _1426 = _1417;
        _1427 = _1417;
        _1428 = _1417;
        _1429 = 0.0;
        _1430 = 0.0;
        _1431 = 0.0;
    }
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1460 = fma(_1085, cbModelParam._m0[30u].z, fma(_1081, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1077));
        float _1464 = fma(_1085, cbModelParam._m0[31u].z, fma(_1081, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1077));
        float _1468 = fma(_1085, cbModelParam._m0[32u].z, fma(_1081, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1077));
        float _1491 = _1077 + _786;
        float _1492 = _1081 + _787;
        float _1493 = _1085 + _788;
        float _1503 = fma(_1493, cbModelParam._m0[30u].z, fma(_1492, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1491)) - _1460;
        float _1504 = fma(_1493, cbModelParam._m0[31u].z, fma(_1492, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1491)) - _1464;
        float _1505 = fma(_1493, cbModelParam._m0[32u].z, fma(_1492, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1491)) - _1468;
        float _1509 = inversesqrt(dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505)));
        float _1522 = ((_1509 * _1503) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1460 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1523 = ((_1509 * _1504) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1464 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1524 = ((_1509 * _1505) / cbModelParam._m0[35u].z) + ((((((_1468 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1526 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        vec4 _1533 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        vec4 _1547 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        float _1559 = exp2((_1526.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1526.x + (-0.5));
        float _1561 = _1559 * (_1526.y + (-0.5));
        float _1562 = _1559 * (_1526.z + (-0.5));
        float _1569 = exp2((_1533.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1533.x + (-0.5));
        float _1571 = _1569 * (_1533.y + (-0.5));
        float _1572 = _1569 * (_1533.z + (-0.5));
        float _1579 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1540.x + (-0.5));
        float _1581 = _1579 * (_1540.y + (-0.5));
        float _1582 = _1579 * (_1540.z + (-0.5));
        float _1589 = exp2((_1547.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1547.x + (-0.5));
        float _1591 = _1589 * (_1547.y + (-0.5));
        float _1592 = _1589 * (_1547.z + (-0.5));
        float _1593 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1594 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1595 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1596 = _1560 * 0.5;
        float _1597 = _1570 * 0.5;
        float _1598 = _1580 * 0.5;
        float _1599 = dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598));
        float _1604 = (_1599 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1599);
        float _1612 = (dot(vec3(_786, _787, _788), vec3(_1604 * _1596, _1604 * _1597, _1604 * _1598)) + 1.0) * 0.5;
        float _4119 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1621 = sqrt(((_1597 * _1597) + (_1596 * _1596)) + (_1598 * _1598)) / (_1593 + 9.9999997473787516355514526367188e-06);
        float _4130 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1623 = _1622 * 2.0;
        float _1627 = (1.0 - _1622) / (_1622 + 1.0);
        float _4141 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1637 = ((((1.0 - _1628) * (_1623 + 2.0)) * exp2(log2(isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1623 + 1.0))) + _1628) * _1593;
        float _1638 = _1561 * 0.5;
        float _1639 = _1571 * 0.5;
        float _1640 = _1581 * 0.5;
        float _1641 = dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640));
        float _1646 = (_1641 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1641);
        float _1654 = (dot(vec3(_786, _787, _788), vec3(_1646 * _1638, _1646 * _1639, _1646 * _1640)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1663 = sqrt(((_1639 * _1639) + (_1638 * _1638)) + (_1640 * _1640)) / (_1594 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1665 = _1664 * 2.0;
        float _1669 = (1.0 - _1664) / (_1664 + 1.0);
        float _4174 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1679 = ((((1.0 - _1670) * (_1665 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1665 + 1.0))) + _1670) * _1594;
        float _1680 = _1562 * 0.5;
        float _1681 = _1572 * 0.5;
        float _1682 = _1582 * 0.5;
        float _1683 = dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682));
        float _1688 = (_1683 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1683);
        float _1696 = (dot(vec3(_786, _787, _788), vec3(_1688 * _1680, _1688 * _1681, _1688 * _1682)) + 1.0) * 0.5;
        float _4185 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1705 = sqrt(((_1681 * _1681) + (_1680 * _1680)) + (_1682 * _1682)) / (_1595 + 9.9999997473787516355514526367188e-06);
        float _4196 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1707 = _1706 * 2.0;
        float _1711 = (1.0 - _1706) / (_1706 + 1.0);
        float _4207 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1721 = ((((1.0 - _1712) * (_1707 + 2.0)) * exp2(log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1707 + 1.0))) + _1712) * _1595;
        _1729 = _1562;
        _1730 = _1561;
        _1731 = _1560;
        _1732 = _1572;
        _1733 = _1571;
        _1734 = _1570;
        _1735 = _1582;
        _1736 = _1581;
        _1737 = _1580;
        _1738 = _1595;
        _1739 = _1594;
        _1740 = _1593;
        _1741 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)));
        _1742 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)));
        _1743 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)));
    }
    else
    {
        _1729 = _1417;
        _1730 = _1417;
        _1731 = _1417;
        _1732 = _1417;
        _1733 = _1417;
        _1734 = _1417;
        _1735 = _1417;
        _1736 = _1417;
        _1737 = _1417;
        _1738 = _1417;
        _1739 = _1417;
        _1740 = _1417;
        _1741 = 0.0;
        _1742 = 0.0;
        _1743 = 0.0;
    }
    float _1753 = (cbModelParam._m0[1u].x * (_1741 - _1429)) + _1429;
    float _1754 = (cbModelParam._m0[1u].x * (_1742 - _1430)) + _1430;
    float _1755 = (cbModelParam._m0[1u].x * (_1743 - _1431)) + _1431;
    float _1776 = fma(_1755, cbSceneParam._m0[89u].z, fma(_1754, cbSceneParam._m0[89u].y, _1753 * cbSceneParam._m0[89u].x));
    float _1779 = fma(_1755, cbSceneParam._m0[90u].z, fma(_1754, cbSceneParam._m0[90u].y, _1753 * cbSceneParam._m0[90u].x));
    float _1782 = fma(_1755, cbSceneParam._m0[91u].z, fma(_1754, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1753));
    float _1797 = _1022 * 0.5;
    float _1798 = _1023 * 0.5;
    float _1799 = _1024 * 0.5;
    float _1800 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1731, _1734, _1737, _1740));
    float _1803 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1730, _1733, _1736, _1739));
    float _1806 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1729, _1732, _1735, _1738));
    float _1840;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1813 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1416, _1420, _1423, _1426));
        float _1817 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1418, _1421, _1424, _1427));
        float _1821 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1419, _1422, _1425, _1428));
        float _1828 = dot(vec4(cbModelParam._m0[39u]), vec4(_1797, _1798, _1799, 1.0));
        _1840 = dot(vec3(isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)), isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0)), isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1828) ? 0.0 : (isnan(0.0) ? _1828 : max(0.0, _1828))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1840 = 1.0;
    }
    float _1851;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1842 = dot(vec4(cbModelParam._m0[40u]), vec4(_1797, _1798, _1799, 1.0));
        _1851 = dot(vec3(isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0)), isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1842) ? 0.0 : (isnan(0.0) ? _1842 : max(0.0, _1842))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1851 = 1.0;
    }
    float _1855 = (_1851 * cbModelParam._m0[1u].x) + (_1840 * (1.0 - cbModelParam._m0[1u].x));
    float _1865 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _929);
    float _1866 = isnan(_1865) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1865 : min(cbModelParam._m0[25u].z, _1865));
    float _1946;
    float _1948;
    float _1950;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1913 = fma(_1085, cbModelParam._m0[13u].z, fma(_1081, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1077)) + cbModelParam._m0[13u].w;
        float _1917 = fma(_1085, cbModelParam._m0[14u].z, fma(_1081, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1077)) + cbModelParam._m0[14u].w;
        float _1921 = fma(_1085, cbModelParam._m0[15u].z, fma(_1081, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1077)) + cbModelParam._m0[15u].w;
        float _1924 = fma(_1024, cbModelParam._m0[13u].z, fma(_1023, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1022));
        float _1927 = fma(_1024, cbModelParam._m0[14u].z, fma(_1023, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1022));
        float _1930 = fma(_1024, cbModelParam._m0[15u].z, fma(_1023, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1022));
        float _1958;
        if (_1924 > 0.0)
        {
            _1958 = abs((1.0 - _1913) / _1924);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1913 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1958 = frontier_phi_19_17_ladder;
        }
        float _2160;
        if (_1927 > 0.0)
        {
            _2160 = abs((1.0 - _1917) / _1927);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1917 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2160 = frontier_phi_28_24_ladder;
        }
        float _2414;
        if (_1930 > 0.0)
        {
            _2414 = abs((1.0 - _1921) / _1930);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1921 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2414 = frontier_phi_40_35_ladder;
        }
        float _2416 = isnan(_2160) ? _1958 : (isnan(_1958) ? _2160 : min(_1958, _2160));
        float _2417 = isnan(_2414) ? _2416 : (isnan(_2416) ? _2414 : min(_2416, _2414));
        float _2421 = (_2417 * _1924) + _1913;
        float _2422 = (_2417 * _1927) + _1917;
        float _2423 = (_2417 * _1930) + _1921;
        float _2424 = _2417 * 9.9999997473787516355514526367188e-05;
        float _2426 = (-1.0) - _2424;
        float _2428 = _2424 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2423 > _2428) || ((_2423 < _2426) || ((_2422 > _2428) || ((_2422 < _2426) || ((_2421 < _2426) || (_2421 > _2428))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2551 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2423, cbModelParam._m0[9u].z, fma(_2422, cbModelParam._m0[9u].y, _2421 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2423, cbModelParam._m0[10u].z, fma(_2422, cbModelParam._m0[10u].y, _2421 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2423, cbModelParam._m0[11u].z, fma(_2422, cbModelParam._m0[11u].y, _2421 * cbModelParam._m0[11u].x))), _1866);
            frontier_phi_18_40_ladder = _2551.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2551.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2551.x * cbModelParam._m0[1u].y;
        }
        _1946 = frontier_phi_18_40_ladder_2;
        _1948 = frontier_phi_18_40_ladder_1;
        _1950 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1934 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1022, _1023, _1024), _1866);
        _1946 = _1934.x * cbModelParam._m0[1u].y;
        _1948 = _1934.y * cbModelParam._m0[1u].y;
        _1950 = _1934.z * cbModelParam._m0[1u].y;
    }
    float _1954 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _929);
    float _1955 = isnan(_1954) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1954 : min(cbModelParam._m0[25u].w, _1954));
    float _2044;
    float _2046;
    float _2048;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2008 = fma(_1085, cbModelParam._m0[21u].z, fma(_1081, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1077)) + cbModelParam._m0[21u].w;
        float _2012 = fma(_1085, cbModelParam._m0[22u].z, fma(_1081, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1077)) + cbModelParam._m0[22u].w;
        float _2016 = fma(_1085, cbModelParam._m0[23u].z, fma(_1081, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1077)) + cbModelParam._m0[23u].w;
        float _2019 = fma(_1024, cbModelParam._m0[21u].z, fma(_1023, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1022));
        float _2022 = fma(_1024, cbModelParam._m0[22u].z, fma(_1023, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1022));
        float _2025 = fma(_1024, cbModelParam._m0[23u].z, fma(_1023, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1022));
        float _2165;
        if (_2019 > 0.0)
        {
            _2165 = abs((1.0 - _2008) / _2019);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2008 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2165 = frontier_phi_30_26_ladder;
        }
        float _2441;
        if (_2022 > 0.0)
        {
            _2441 = abs((1.0 - _2012) / _2022);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2022 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2012 + 1.0) / _2022);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2441 = frontier_phi_42_37_ladder;
        }
        float _2654;
        if (_2025 > 0.0)
        {
            _2654 = abs((1.0 - _2016) / _2025);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2016 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2654 = frontier_phi_51_48_ladder;
        }
        float _2656 = isnan(_2441) ? _2165 : (isnan(_2165) ? _2441 : min(_2165, _2441));
        float _2657 = isnan(_2654) ? _2656 : (isnan(_2656) ? _2654 : min(_2656, _2654));
        float _2661 = (_2657 * _2019) + _2008;
        float _2662 = (_2657 * _2022) + _2012;
        float _2663 = (_2657 * _2025) + _2016;
        float _2664 = _2657 * 9.9999997473787516355514526367188e-05;
        float _2665 = (-1.0) - _2664;
        float _2667 = _2664 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2663 > _2667) || ((_2663 < _2665) || ((_2662 > _2667) || ((_2662 < _2665) || ((_2661 < _2665) || (_2661 > _2667))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2863 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2663, cbModelParam._m0[17u].z, fma(_2662, cbModelParam._m0[17u].y, _2661 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2663, cbModelParam._m0[18u].z, fma(_2662, cbModelParam._m0[18u].y, _2661 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2663, cbModelParam._m0[19u].z, fma(_2662, cbModelParam._m0[19u].y, _2661 * cbModelParam._m0[19u].x))), _1955);
            frontier_phi_27_51_ladder = _2863.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2863.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2863.x * cbModelParam._m0[1u].z;
        }
        _2044 = frontier_phi_27_51_ladder_2;
        _2046 = frontier_phi_27_51_ladder_1;
        _2048 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2028 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1022, _1023, _1024), _1955);
        _2044 = _2028.x * cbModelParam._m0[1u].z;
        _2046 = _2028.y * cbModelParam._m0[1u].z;
        _2048 = _2028.z * cbModelParam._m0[1u].z;
    }
    float _2061 = (((_1048 * _999) + _1049) * _1014) * ((cbModelParam._m0[1u].w * (_2044 - _1946)) + _1946);
    float _2063 = (((_1048 * _1001) + _1049) * _1014) * ((cbModelParam._m0[1u].w * (_2046 - _1948)) + _1948);
    float _2065 = (((_1048 * _1002) + _1049) * _1014) * ((cbModelParam._m0[1u].w * (_2048 - _1950)) + _1950);
    float _2068 = fma(_2065, cbSceneParam._m0[89u].z, fma(_2063, cbSceneParam._m0[89u].y, _2061 * cbSceneParam._m0[89u].x));
    float _2071 = fma(_2065, cbSceneParam._m0[90u].z, fma(_2063, cbSceneParam._m0[90u].y, _2061 * cbSceneParam._m0[90u].x));
    float _2074 = fma(_2065, cbSceneParam._m0[91u].z, fma(_2063, cbSceneParam._m0[91u].y, _2061 * cbSceneParam._m0[91u].x));
    uvec4 _2084 = floatBitsToUint(cbInstanceData._m0[_942 + 5u]);
    uint _2086 = _2084.x * 14u;
    uint _2087 = _2086 + 13u;
    float _2094 = _1014 + (-1.0);
    float _2099 = (cbLight._m0[_2087].x * _2094) + 1.0;
    float _2100 = (cbLight._m0[_2087].y * _2094) + 1.0;
    float _2101 = (cbLight._m0[_2087].z * _2094) + 1.0;
    float _2102 = (cbLight._m0[_2087].w * _2094) + 1.0;
    uint _2103 = _2086 + 5u;
    float _2109 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
    uint _2113 = _2086 + 4u;
    float _2119 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
    uint _2123 = _2086 | 1u;
    float _2134 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_786, _787, _788));
    float _2137 = dot(vec3(cbLight._m0[_2123].xyz), vec3(_786, _787, _788));
    float _4343 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _4354 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2142 = (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * 0.3183098733425140380859375;
    float _2144 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * 0.3183098733425140380859375;
    float _2151 = ((cbLight._m0[_2103].x * _2109) * _2144) + ((cbLight._m0[_2113].x * _2119) * _2142);
    float _2152 = ((_2109 * cbLight._m0[_2103].y) * _2144) + ((_2119 * cbLight._m0[_2113].y) * _2142);
    float _2153 = ((_2109 * cbLight._m0[_2103].z) * _2144) + ((_2119 * cbLight._m0[_2113].z) * _2142);
    uvec4 _2157 = floatBitsToUint(cbLight._m0[_2086 + 12u]);
    bool _2159 = _2157.x == 0u;
    float _2170;
    float _2172;
    float _2174;
    if (_2159)
    {
        _2170 = _2151;
        _2172 = _2152;
        _2174 = _2153;
    }
    else
    {
        uint _2178 = _2086 + 6u;
        float _2194 = (dot(vec3(cbLight._m0[_2086 + 2u].xyz), vec3(_786, _787, _788)) * 0.5) + 0.5;
        float _2195 = _2194 * _2194;
        float _4365 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2196 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _2197 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2170 = (((cbLight._m0[_2178].x * 0.3183098733425140380859375) * _2196) * _2197) + _2151;
        _2172 = (((cbLight._m0[_2178].y * 0.3183098733425140380859375) * _2196) * _2197) + _2152;
        _2174 = (((cbLight._m0[_2178].z * 0.3183098733425140380859375) * _2196) * _2197) + _2153;
    }
    bool _2177 = _2157.y == 0u;
    float _2215;
    float _2217;
    float _2219;
    if (_2177)
    {
        _2215 = _2170;
        _2217 = _2172;
        _2219 = _2174;
    }
    else
    {
        uint _2385 = _2086 + 7u;
        float _2401 = (dot(vec3(cbLight._m0[_2086 + 3u].xyz), vec3(_786, _787, _788)) * 0.5) + 0.5;
        float _2402 = _2401 * _2401;
        float _4381 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2403 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _2404 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2215 = (((cbLight._m0[_2385].x * 0.3183098733425140380859375) * _2403) * _2404) + _2170;
        _2217 = (((cbLight._m0[_2385].y * 0.3183098733425140380859375) * _2403) * _2404) + _2172;
        _2219 = (((cbLight._m0[_2385].z * 0.3183098733425140380859375) * _2403) * _2404) + _2174;
    }
    uint _2222 = _2086 + 8u;
    float _2235 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2086].w)) * _929) * 0.949999988079071044921875);
    float _2236 = _2235 * _2235;
    float _2237 = cbLight._m0[_2086].x + _867;
    float _2238 = cbLight._m0[_2086].y + _868;
    float _2239 = cbLight._m0[_2086].z + _869;
    float _2243 = inversesqrt(dot(vec3(_2237, _2238, _2239), vec3(_2237, _2238, _2239)));
    float _2244 = _2243 * _2237;
    float _2245 = _2243 * _2238;
    float _2246 = _2243 * _2239;
    float _2247 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2086].xyz));
    float _4397 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2250 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
    float _4408 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _2251 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
    float _2252 = dot(vec3(_786, _787, _788), vec3(_2244, _2245, _2246));
    float _4419 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2255 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
    float _2256 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_2244, _2245, _2246));
    float _4430 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2260 = _2236 * _2236;
    float _2264 = ((_2255 * _2255) * (_2260 + (-1.0))) + 1.0;
    float _2272 = exp2(log2(1.0 - (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) * 5.0);
    float _2273 = 0.959999978542327880859375 - _996;
    float _2275 = 0.959999978542327880859375 - _997;
    float _2276 = 0.959999978542327880859375 - _998;
    float _2283 = 1.0 - _2236;
    float _2294 = (0.5 / (((_2251 * ((_2250 * _2283) + _2236)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2283) + _2236) * _2250))) * _2250;
    float _4441 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2296 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2260 / ((_2264 * _2264) * 3.141590118408203125));
    uint _2307 = _2086 + 9u;
    float _2318 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2123].w)) * _929) * 0.949999988079071044921875);
    float _2319 = _2318 * _2318;
    float _2320 = cbLight._m0[_2123].x + _867;
    float _2321 = cbLight._m0[_2123].y + _868;
    float _2322 = cbLight._m0[_2123].z + _869;
    float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
    float _2327 = _2326 * _2320;
    float _2328 = _2326 * _2321;
    float _2329 = _2326 * _2322;
    float _2330 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2123].xyz));
    float _4452 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
    float _2334 = dot(vec3(_786, _787, _788), vec3(_2327, _2328, _2329));
    float _4463 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2337 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
    float _2338 = dot(vec3(cbLight._m0[_2123].xyz), vec3(_2327, _2328, _2329));
    float _4474 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2342 = _2319 * _2319;
    float _2346 = ((_2337 * _2337) * (_2342 + (-1.0))) + 1.0;
    float _2353 = exp2(log2(1.0 - (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) * 5.0);
    float _2360 = 1.0 - _2319;
    float _2370 = (0.5 / (((_2251 * ((_2333 * _2360) + _2319)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2360) + _2319) * _2333))) * _2333;
    float _4485 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2372 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2342 / ((_2346 * _2346) * 3.141590118408203125));
    float _2382 = (((((_2353 * _2273) + _999) * cbLight._m0[_2307].x) * _2372) * _2109) + (((((_2272 * _2273) + _999) * cbLight._m0[_2222].x) * _2296) * _2119);
    float _2383 = (((((_2353 * _2275) + _1001) * cbLight._m0[_2307].y) * _2372) * _2109) + (((((_2272 * _2275) + _1001) * cbLight._m0[_2222].y) * _2296) * _2119);
    float _2384 = (((((_2353 * _2276) + _1002) * cbLight._m0[_2307].z) * _2372) * _2109) + (((((_2272 * _2276) + _1002) * cbLight._m0[_2222].z) * _2296) * _2119);
    float _2446;
    float _2448;
    float _2450;
    if (_2159)
    {
        _2446 = _2382;
        _2448 = _2383;
        _2450 = _2384;
    }
    else
    {
        uint _2452 = _2086 + 2u;
        uint _2456 = _2086 + 10u;
        float _2470 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2452].w)) * _929) * 0.949999988079071044921875);
        float _2471 = _2470 * _2470;
        float _2472 = cbLight._m0[_2452].x + _867;
        float _2473 = cbLight._m0[_2452].y + _868;
        float _2474 = cbLight._m0[_2452].z + _869;
        float _2478 = inversesqrt(dot(vec3(_2472, _2473, _2474), vec3(_2472, _2473, _2474)));
        float _2479 = _2478 * _2472;
        float _2480 = _2478 * _2473;
        float _2481 = _2478 * _2474;
        float _2482 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2452].xyz));
        float _4496 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2485 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _2486 = dot(vec3(_786, _787, _788), vec3(_2479, _2480, _2481));
        float _4507 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2489 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _2490 = dot(vec3(cbLight._m0[_2452].xyz), vec3(_2479, _2480, _2481));
        float _4518 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2494 = _2471 * _2471;
        float _2498 = ((_2489 * _2489) * (_2494 + (-1.0))) + 1.0;
        float _2505 = exp2(log2(1.0 - (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0)))) * 5.0);
        float _2512 = 1.0 - _2471;
        float _2522 = (0.5 / (((_2251 * ((_2485 * _2512) + _2471)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2512) + _2471) * _2485))) * _2485;
        float _4529 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2524 = (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_2494 / ((_2498 * _2498) * 3.141590118408203125));
        float _2525 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2446 = (((((_2505 * _2273) + _999) * cbLight._m0[_2456].x) * _2524) * _2525) + _2382;
        _2448 = (((((_2505 * _2275) + _1001) * cbLight._m0[_2456].y) * _2524) * _2525) + _2383;
        _2450 = (((((_2505 * _2276) + _1002) * cbLight._m0[_2456].z) * _2524) * _2525) + _2384;
    }
    float _2560;
    float _2562;
    float _2564;
    if (_2177)
    {
        _2560 = _2446;
        _2562 = _2448;
        _2564 = _2450;
    }
    else
    {
        uint _2571 = _2086 + 3u;
        uint _2575 = _2086 + 11u;
        float _2589 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2571].w)) * _929) * 0.949999988079071044921875);
        float _2590 = _2589 * _2589;
        float _2591 = cbLight._m0[_2571].x + _867;
        float _2592 = cbLight._m0[_2571].y + _868;
        float _2593 = cbLight._m0[_2571].z + _869;
        float _2597 = inversesqrt(dot(vec3(_2591, _2592, _2593), vec3(_2591, _2592, _2593)));
        float _2598 = _2597 * _2591;
        float _2599 = _2597 * _2592;
        float _2600 = _2597 * _2593;
        float _2601 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2571].xyz));
        float _4545 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2604 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2605 = dot(vec3(_786, _787, _788), vec3(_2598, _2599, _2600));
        float _4556 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2608 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _2609 = dot(vec3(cbLight._m0[_2571].xyz), vec3(_2598, _2599, _2600));
        float _4567 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2613 = _2590 * _2590;
        float _2617 = ((_2608 * _2608) * (_2613 + (-1.0))) + 1.0;
        float _2624 = exp2(log2(1.0 - (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) * 5.0);
        float _2631 = 1.0 - _2590;
        float _2641 = (0.5 / (((_2251 * ((_2604 * _2631) + _2590)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2631) + _2590) * _2604))) * _2604;
        float _4578 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2643 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2613 / ((_2617 * _2617) * 3.141590118408203125));
        float _2644 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2560 = (((((_2624 * _2273) + _999) * cbLight._m0[_2575].x) * _2643) * _2644) + _2446;
        _2562 = (((((_2624 * _2275) + _1001) * cbLight._m0[_2575].y) * _2643) * _2644) + _2448;
        _2564 = (((((_2624 * _2276) + _1002) * cbLight._m0[_2575].z) * _2643) * _2644) + _2450;
    }
    float _2778;
    float _2780;
    float _2782;
    float _2784;
    float _2786;
    float _2788;
    if (_2084.y == 0u)
    {
        float _2719 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2720 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2719;
        float _2721 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2719;
        float _2722 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2719;
        uvec4 _2734 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2735 = _2734.x;
        uint _2746 = uint((float(_2734.y) * floor(float(uint(cbSceneParam._m0[85u].y * _888) / _2735))) + floor(float(uint(cbSceneParam._m0[85u].x * _887) / _2735)));
        float _2756 = (log2(_2722 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2757 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        uint _2760 = uint(isnan(14.0) ? _2757 : (isnan(_2757) ? 14.0 : min(_2757, 14.0)));
        uvec4 _2765 = texelFetch(g_lightClusterGridBuffer, int(((_2760 << 2u) + (_2746 << 6u)) >> 2u));
        uint _2766 = _2765.x;
        uint _2767 = _2734.z;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        float _2876;
        float _2878;
        if (((((1u << ((_2767 >> 4u) & 15u)) + 4294967295u) & _2766) == 0u) || ((_2767 & 240u) == 0u))
        {
            _2868 = 0.0;
            _2870 = 0.0;
            _2872 = 0.0;
            _2874 = 0.0;
            _2876 = 0.0;
            _2878 = 0.0;
        }
        else
        {
            float _2869;
            float _2871;
            float _2873;
            float _2875;
            float _2877;
            float _2879;
            float _3020 = 0.0;
            float _3021 = 0.0;
            float _3022 = 0.0;
            float _3023 = 0.0;
            float _3024 = 0.0;
            float _3025 = 0.0;
            uint _3026 = 0u;
            uint _3035;
            bool _3036;
            for (;;)
            {
                _3035 = texelFetch(g_lightClassification, int((((_2760 << 5u) + (_2746 << 9u)) + (_3026 << 2u)) >> 2u)).x;
                _3036 = _3035 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3036)
                {
                    frontier_phi_68_pred = _3022;
                    frontier_phi_68_pred_1 = _3025;
                    frontier_phi_68_pred_2 = _3024;
                    frontier_phi_68_pred_3 = _3023;
                    frontier_phi_68_pred_4 = _3021;
                    frontier_phi_68_pred_5 = _3020;
                }
                else
                {
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    uint _3171;
                    _3165 = _3020;
                    _3166 = _3021;
                    _3167 = _3022;
                    _3168 = _3023;
                    _3169 = _3024;
                    _3170 = _3025;
                    _3171 = _3035;
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    for (;;)
                    {
                        uint _3175 = uint(findLSB(_3171)) + (_3026 << 5u);
                        uint _3172 = (_3171 + 4294967295u) & _3171;
                        uint _3177 = _3175 * 48u;
                        vec4 _3191 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3177)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 3u)).x));
                        uint _3197 = (_3175 * 48u) + 4u;
                        vec4 _3210 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3197)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 3u)).x));
                        uint _3216 = (_3175 * 48u) + 8u;
                        vec3 _3227 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3216)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 2u)).x));
                        float _3231 = _3191.x - _2720;
                        float _3232 = _3191.y - _2721;
                        float _3233 = _3191.z - _2722;
                        float _3234 = dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233));
                        float _3237 = inversesqrt(_3234);
                        float _3238 = _3237 * _3231;
                        float _3239 = _3237 * _3232;
                        float _3240 = _3237 * _3233;
                        float _3241 = dot(vec3(_910, _913, _916), vec3(_3238, _3239, _3240));
                        float _3246 = 1.0 - (_3234 * _3191.w);
                        float _4604 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                        float _3247 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                        float _3248 = sqrt(_3234) * _3210.w;
                        float _3251 = 1.39999997615814208984375 / (_3248 + 1.39999997615814208984375);
                        float _3252 = _3251 * _3251;
                        float _3255 = ((1.0 - _3252) * _3241) + _3252;
                        float _3258 = _3248 * _3248;
                        float _3262 = ((isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0))) * _3247) / ((_3258 * 0.699999988079071044921875) + 1.0);
                        float _3266 = (-0.0) - _2720;
                        float _3267 = (-0.0) - _2721;
                        float _3268 = (-0.0) - _2722;
                        float _3272 = inversesqrt(dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268)));
                        float _3273 = _3272 * _3266;
                        float _3274 = _3272 * _3267;
                        float _3275 = _3272 * _3268;
                        float _3283 = exp2(log2(1.0 / ((_3258 * 3.5) + 5.0)) * 0.25);
                        float _3284 = 1.0 - _1030;
                        float _3291 = sqrt(1.0 - ((1.0 - (_3284 * _3284)) * (1.0 - (_3283 * _3283))));
                        float _3292 = _3291 * _3291;
                        float _3293 = _3292 * _3292;
                        float _3294 = _3273 + _3238;
                        float _3295 = _3274 + _3239;
                        float _3296 = _3275 + _3240;
                        float _3300 = inversesqrt(dot(vec3(_3294, _3295, _3296), vec3(_3294, _3295, _3296)));
                        float _3304 = dot(vec3(_910, _913, _916), vec3(_3273, _3274, _3275));
                        float _4620 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3307 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                        float _3308 = dot(vec3(_910, _913, _916), vec3(_3300 * _3294, _3300 * _3295, _3300 * _3296));
                        float _4631 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3311 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                        float _3315 = ((_3311 * _3311) * (_3293 + (-1.0))) + 1.0;
                        float _3316 = _3251 * _3292;
                        float _3317 = _3316 * _3316;
                        float _3320 = ((1.0 - _3317) * _3241) + _3317;
                        float _4642 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3321 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                        float _3322 = 1.0 - _3292;
                        float _3332 = (0.5 / (((_3321 * ((_3307 * _3322) + _3292)) + 9.9999999392252902907785028219223e-09) + (((_3321 * _3322) + _3292) * _3307))) * _3321;
                        float _4653 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3343 = (((_3293 * 3.1415927410125732421875) * (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0)))) / ((_3315 * _3315) * ((_3258 * 2.1991131305694580078125) + 3.141590118408203125))) * _3247;
                        _3095 = (_3262 * _3210.x) + _3168;
                        _3096 = (_3262 * _3210.y) + _3169;
                        _3097 = (_3262 * _3210.z) + _3170;
                        _3092 = (_3343 * _3227.x) + _3165;
                        _3093 = (_3343 * _3227.y) + _3166;
                        _3094 = (_3343 * _3227.z) + _3167;
                        if (_3172 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3165 = _3092;
                            _3166 = _3093;
                            _3167 = _3094;
                            _3168 = _3095;
                            _3169 = _3096;
                            _3170 = _3097;
                            _3171 = _3172;
                        }
                    }
                    frontier_phi_68_pred = _3094;
                    frontier_phi_68_pred_1 = _3097;
                    frontier_phi_68_pred_2 = _3096;
                    frontier_phi_68_pred_3 = _3095;
                    frontier_phi_68_pred_4 = _3093;
                    frontier_phi_68_pred_5 = _3092;
                }
                _2873 = frontier_phi_68_pred;
                _2879 = frontier_phi_68_pred_1;
                _2877 = frontier_phi_68_pred_2;
                _2875 = frontier_phi_68_pred_3;
                _2871 = frontier_phi_68_pred_4;
                _2869 = frontier_phi_68_pred_5;
                uint _3027 = _3026 + 1u;
                if (_3027 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3020 = _2869;
                    _3021 = _2871;
                    _3022 = _2873;
                    _3023 = _2875;
                    _3024 = _2877;
                    _3025 = _2879;
                    _3026 = _3027;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2868 = _2869;
            _2870 = _2871;
            _2872 = _2873;
            _2874 = _2875;
            _2876 = _2877;
            _2878 = _2879;
        }
        uvec4 _2882 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2883 = _2882.z;
        uint _2885 = (_2883 >> 8u) & 15u;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        if (((4294967295u << _2885) & _2766) == 0u)
        {
            _2988 = _2868;
            _2990 = _2870;
            _2992 = _2872;
            _2994 = _2874;
            _2996 = _2876;
            _2998 = _2878;
        }
        else
        {
            float _3013 = inversesqrt(dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722)));
            float _3014 = _3013 * _2720;
            float _3015 = _3013 * _2721;
            float _3016 = _3013 * _2722;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2885 < ((_2883 >> 12u) & 15u))
            {
                float _2989;
                float _2991;
                float _2993;
                float _2995;
                float _2997;
                float _2999;
                float _3148 = _2868;
                float _3149 = _2870;
                float _3150 = _2872;
                float _3151 = _2874;
                float _3152 = _2876;
                float _3153 = _2878;
                uint _3154 = _2885;
                uint _3163;
                bool _3164;
                for (;;)
                {
                    _3163 = texelFetch(g_lightClassification, int((((_2760 << 5u) + (_2746 << 9u)) + (_3154 << 2u)) >> 2u)).x;
                    _3164 = _3163 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3164)
                    {
                        frontier_phi_79_pred = _3153;
                        frontier_phi_79_pred_1 = _3152;
                        frontier_phi_79_pred_2 = _3151;
                        frontier_phi_79_pred_3 = _3150;
                        frontier_phi_79_pred_4 = _3149;
                        frontier_phi_79_pred_5 = _3148;
                    }
                    else
                    {
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3370 = _3148;
                        float _3371 = _3149;
                        float _3372 = _3150;
                        float _3373 = _3151;
                        float _3374 = _3152;
                        float _3375 = _3153;
                        uint _3376 = _3163;
                        uint _3377;
                        vec4 _3402;
                        float _3403;
                        vec4 _3418;
                        vec3 _3430;
                        vec4 _3445;
                        vec4 _3460;
                        float _3507;
                        bool _3508;
                        for (;;)
                        {
                            uint _3387 = ((_3154 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3376));
                            _3377 = (_3376 + 4294967295u) & _3376;
                            uint _3389 = _3387 * 40u;
                            _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            _3403 = _3402.w;
                            uint _3405 = (_3387 * 40u) + 4u;
                            _3418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 3u)).x));
                            uint _3420 = (_3387 * 40u) + 8u;
                            _3430 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x));
                            uint _3432 = (_3387 * 40u) + 16u;
                            _3445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 3u)).x));
                            uint _3447 = (_3387 * 40u) + 20u;
                            _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            uint _3463 = (_3387 * 40u) + 24u;
                            vec4 _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            uint _3482 = (_3387 * 40u) + 28u;
                            vec4 _3495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 3u)).x));
                            _3507 = fma(_2722, _3495.z, fma(_2721, _3495.y, _3495.x * _2720)) + _3495.w;
                            _3508 = !((fma(_2722, _3476.z, fma(_2721, _3476.y, _3476.x * _2720)) + _3476.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3508)
                            {
                                float _3535 = _3402.x - _2720;
                                float _3536 = _3402.y - _2721;
                                float _3537 = _3402.z - _2722;
                                float _3538 = dot(vec3(_3535, _3536, _3537), vec3(_3535, _3536, _3537));
                                float _3541 = inversesqrt(_3538);
                                float _3542 = _3541 * _3535;
                                float _3543 = _3541 * _3536;
                                float _3544 = _3541 * _3537;
                                float _3548 = 1.0 - (_3538 / (_3403 * _3403));
                                float _4664 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3549 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                                float _3553 = sqrt(_3538) * _3418.w;
                                float _3555 = 1.39999997615814208984375 / (_3553 + 1.39999997615814208984375);
                                float _3556 = _3555 * _3555;
                                float _3559 = ((1.0 - _3556) * dot(vec3(_3542, _3543, _3544), vec3(_910, _913, _916))) + _3556;
                                float _3562 = _3553 * _3553;
                                float _3566 = (fma(_2722, _3445.z, fma(_2721, _3445.y, _3445.x * _2720)) + _3445.w) / _3507;
                                float _3567 = (fma(_2722, _3460.z, fma(_2721, _3460.y, _3460.x * _2720)) + _3460.w) / _3507;
                                float _3571 = 1.0 - dot(vec2(_3566, _3567), vec2(_3566, _3567));
                                float _4680 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3572 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                                float _3573 = _3572 * (((isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0))) * _3549) / ((_3562 * 0.699999988079071044921875) + 1.0));
                                float _3585 = exp2(log2(1.0 / ((_3562 * 3.5) + 5.0)) * 0.25);
                                float _3586 = 1.0 - _1030;
                                float _3593 = sqrt(1.0 - ((1.0 - (_3586 * _3586)) * (1.0 - (_3585 * _3585))));
                                float _3594 = _3593 * _3593;
                                float _3595 = _3594 * _3594;
                                float _3596 = _3542 - _3014;
                                float _3597 = _3543 - _3015;
                                float _3598 = _3544 - _3016;
                                float _3602 = inversesqrt(dot(vec3(_3596, _3597, _3598), vec3(_3596, _3597, _3598)));
                                float _3606 = dot(vec3(_910, _913, _916), vec3((-0.0) - _3014, (-0.0) - _3015, (-0.0) - _3016));
                                float _4691 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3609 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                                float _3610 = dot(vec3(_910, _913, _916), vec3(_3602 * _3596, _3602 * _3597, _3602 * _3598));
                                float _4702 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3613 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                                float _3617 = ((_3613 * _3613) * (_3595 + (-1.0))) + 1.0;
                                float _3618 = _3555 * _3594;
                                float _3619 = _3618 * _3618;
                                float _3625 = ((1.0 - _3619) * dot(vec3(_910, _913, _916), vec3(_3542, _3543, _3544))) + _3619;
                                float _4713 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3626 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                                float _3627 = 1.0 - _3594;
                                float _3637 = (0.5 / (((_3626 * ((_3609 * _3627) + _3594)) + 9.9999999392252902907785028219223e-09) + (((_3626 * _3627) + _3594) * _3609))) * _3626;
                                float _4724 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3647 = (_3572 * _3549) * (((_3595 * 3.1415927410125732421875) * (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) / ((_3617 * _3617) * ((_3562 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3573 * _3418.z;
                                frontier_phi_85_pred_1 = _3573 * _3418.y;
                                frontier_phi_85_pred_2 = _3573 * _3418.x;
                                frontier_phi_85_pred_3 = _3647 * _3430.z;
                                frontier_phi_85_pred_4 = _3647 * _3430.y;
                                frontier_phi_85_pred_5 = _3647 * _3430.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3656 = frontier_phi_85_pred;
                            _3655 = frontier_phi_85_pred_1;
                            _3654 = frontier_phi_85_pred_2;
                            _3653 = frontier_phi_85_pred_3;
                            _3652 = frontier_phi_85_pred_4;
                            _3651 = frontier_phi_85_pred_5;
                            _3360 = _3654 + _3373;
                            _3361 = _3655 + _3374;
                            _3362 = _3656 + _3375;
                            _3357 = _3651 + _3370;
                            _3358 = _3652 + _3371;
                            _3359 = _3653 + _3372;
                            if (_3377 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3360;
                                _3374 = _3361;
                                _3375 = _3362;
                                _3376 = _3377;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3362;
                        frontier_phi_79_pred_1 = _3361;
                        frontier_phi_79_pred_2 = _3360;
                        frontier_phi_79_pred_3 = _3359;
                        frontier_phi_79_pred_4 = _3358;
                        frontier_phi_79_pred_5 = _3357;
                    }
                    _2999 = frontier_phi_79_pred;
                    _2997 = frontier_phi_79_pred_1;
                    _2995 = frontier_phi_79_pred_2;
                    _2993 = frontier_phi_79_pred_3;
                    _2991 = frontier_phi_79_pred_4;
                    _2989 = frontier_phi_79_pred_5;
                    uint _3155 = _3154 + 1u;
                    if (_3155 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3148 = _2989;
                        _3149 = _2991;
                        _3150 = _2993;
                        _3151 = _2995;
                        _3152 = _2997;
                        _3153 = _2999;
                        _3154 = _3155;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2995;
                frontier_phi_60_61_ladder_1 = _2999;
                frontier_phi_60_61_ladder_2 = _2997;
                frontier_phi_60_61_ladder_3 = _2993;
                frontier_phi_60_61_ladder_4 = _2991;
                frontier_phi_60_61_ladder_5 = _2989;
            }
            else
            {
                frontier_phi_60_61_ladder = _2874;
                frontier_phi_60_61_ladder_1 = _2878;
                frontier_phi_60_61_ladder_2 = _2876;
                frontier_phi_60_61_ladder_3 = _2872;
                frontier_phi_60_61_ladder_4 = _2870;
                frontier_phi_60_61_ladder_5 = _2868;
            }
            _2988 = frontier_phi_60_61_ladder_5;
            _2990 = frontier_phi_60_61_ladder_4;
            _2992 = frontier_phi_60_61_ladder_3;
            _2994 = frontier_phi_60_61_ladder;
            _2996 = frontier_phi_60_61_ladder_2;
            _2998 = frontier_phi_60_61_ladder_1;
        }
        float _3003 = isnan(1.0) ? _1014 : (isnan(_1014) ? 1.0 : min(_1014, 1.0));
        _2778 = (_3003 * _2994) + _2215;
        _2780 = (_3003 * _2996) + _2217;
        _2782 = (_3003 * _2998) + _2219;
        _2784 = ((_2988 * _999) * _3003) + _2560;
        _2786 = ((_2990 * _1001) * _3003) + _2562;
        _2788 = ((_2992 * _1002) * _3003) + _2564;
    }
    else
    {
        _2778 = _2215;
        _2780 = _2217;
        _2782 = _2219;
        _2784 = _2560;
        _2786 = _2562;
        _2788 = _2564;
    }
    float _4740 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _4751 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _4762 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _4773 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _2806 = ((isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_2778 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1014))) + ((_2784 + ((isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0))) * _1855)) * cbPerFrame._m0[3u].x);
    float _2807 = ((isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2780 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1014))) + ((_2786 + ((isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0))) * _1855)) * cbPerFrame._m0[3u].x);
    float _2808 = ((isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * (_2782 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1014))) + ((_2788 + ((isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0))) * _1855)) * cbPerFrame._m0[3u].x);
    float _2813 = cbInstanceData._m0[_942 + 6u].w * (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0)));
    float _2818 = _887 / cbSceneParam._m0[86u].x;
    float _2819 = _888 / cbSceneParam._m0[86u].y;
    vec4 _2833 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2818, _2819, (log2((isnan(cbSceneParam._m0[77u].w) ? _810 : (isnan(_810) ? cbSceneParam._m0[77u].w : min(_810, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2835 = _2833.x;
    float _2836 = _2833.y;
    float _2837 = _2833.z;
    float _2838 = _2833.w;
    float _2930;
    float _2932;
    float _2934;
    float _2936;
    if (_810 > cbSceneParam._m0[78u].w)
    {
        float _2893 = isnan(_810) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _810 : min(cbSceneParam._m0[80u].w, _810));
        float _2894 = _2893 / _810;
        float _2905 = _2894 * _860;
        float _2906 = _861 * _2894;
        float _2907 = (-0.0) - _2906;
        float _2908 = _2894 * _862;
        float _2910 = (cbSceneParam._m0[77u].w * _2907) / _2893;
        float _2911 = _2910 + cbSceneParam._m0[79u].w;
        float _2912 = cbSceneParam._m0[79u].w - _2906;
        float _2918 = sqrt(((_2905 * _2905) + (_2906 * _2906)) + (_2908 * _2908));
        float _2921 = (1.0 - (cbSceneParam._m0[77u].w / _2893)) * _2918;
        float _2926 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2928 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3105;
        if (abs((_2907 - _2910) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3105 = ((((_2911 > 0.0) ? exp2(_2926 * _2911) : (2.0 - exp2(_2928 * _2911))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2921;
        }
        else
        {
            float _3049 = 1.0 / cbSceneParam._m0[80u].x;
            float _3050 = isnan(_2912) ? _2911 : (isnan(_2911) ? _2912 : max(_2911, _2912));
            float _3051 = isnan(_2912) ? _2911 : (isnan(_2911) ? _2912 : min(_2911, _2912));
            float _3060 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : min(_3050, 0.0));
            float _3061 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : min(_3051, 0.0));
            _3105 = ((abs(_2918 / _2907) * cbSceneParam._m0[80u].y) * ((((_3060 - _3061) * 2.0) - ((exp2(_2926 * (isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0)))) - exp2(_2926 * (isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0))))) * _3049)) - ((exp2(_2928 * _3060) - exp2(_2928 * _3061)) * _3049))) + (_2921 * cbSceneParam._m0[80u].z);
        }
        vec4 _3107 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2818, _2819, 1.0), 0.0);
        float _3116 = exp2((_3105 * (-1.44269502162933349609375)) * (1.0 - _3107.w));
        float _3117 = log2(_3116);
        float _3133 = log2(_2838);
        _2930 = (exp2(_3133 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3117 * cbSceneParam._m0[78u].x)) * _3107.x) / cbSceneParam._m0[78u].x)) + _2835;
        _2932 = (exp2(_3133 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3117 * cbSceneParam._m0[78u].y)) * _3107.y) / cbSceneParam._m0[78u].y)) + _2836;
        _2934 = (exp2(_3133 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3117 * cbSceneParam._m0[78u].z)) * _3107.z) / cbSceneParam._m0[78u].z)) + _2837;
        _2936 = _3116 * _2838;
    }
    else
    {
        _2930 = _2835;
        _2932 = _2836;
        _2934 = _2837;
        _2936 = _2838;
    }
    bool _3143;
    vec4 _2946;
    vec4 _2968;
    float _2970;
    float _2974;
    float _2975;
    float _2976;
    float _2977;
    bool _2987;
    for (;;)
    {
        _2946 = cbMatDynParam._m0[0u];
        float _2948 = roundEven(_2946.y);
        bool _2949 = _2948 == 3.0;
        float _2950 = log2(_2936);
        float _2957 = exp2(_2950 * cbSceneParam._m0[78u].x) * _2806;
        float _2958 = exp2(_2950 * cbSceneParam._m0[78u].y) * _2807;
        float _2959 = exp2(_2950 * cbSceneParam._m0[78u].z) * _2808;
        float _2966 = _876 + (-0.5);
        _2968 = cbMtdParam._m0[1u];
        _2970 = _2968.y * _2966;
        float _2973 = (_2948 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2974 = _2973 * (_2949 ? _2957 : (_2957 + (cbSceneParam._m0[72u].w * _2930)));
        _2975 = _2973 * (_2949 ? _2958 : (_2958 + (cbSceneParam._m0[72u].w * _2932)));
        _2976 = _2973 * (_2949 ? _2959 : (_2959 + (cbSceneParam._m0[72u].w * _2934)));
        _2977 = _2966 * 0.999000012874603271484375;
        _2987 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2987)
        {
            if ((cbInstanceData._m0[_942 + 7u].x + _2977) < 0.5)
            {
                _3143 = true;
                break;
            }
        }
        uint _3084 = _943 + uint(_2946.w);
        if ((cbInstanceData._m0[_3084].w < 1.0) && ((cbInstanceData._m0[_3084].w + _2977) < 0.5))
        {
            _3143 = true;
            break;
        }
        if ((_2970 + _576) < _2968.x)
        {
            _3143 = true;
            break;
        }
        _3143 = false;
        break;
    }
    float _3348;
    if (_3143)
    {
        discard_state = true;
        _3348 = 0.0;
    }
    else
    {
        _3348 = _2813;
    }
    SV_Target.x = _2974;
    SV_Target.y = _2975;
    SV_Target.z = _2976;
    SV_Target.w = _3348;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2813;
    discard_exit();
}


