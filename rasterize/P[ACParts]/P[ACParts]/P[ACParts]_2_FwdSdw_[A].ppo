#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_snp_0_Texture2D_2;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D P_ACParts_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D P_ACParts_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_snp_0_Texture2D_10;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_snp_0_Texture2D_13;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_snp_0_Texture2D_14;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_snp_0_Texture2D_15;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1421;
float _4087;
float _4088;
float _4089;
float _4090;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257;
    float _258;
    float _259;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _257 = (-0.0) - _243;
        _258 = (-0.0) - _244;
        _259 = (-0.0) - _245;
    }
    else
    {
        _257 = _243;
        _258 = _244;
        _259 = _245;
    }
    float _269 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    vec4 _282 = texture(sampler2D(P_ACParts_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_269 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _287 = _282.z;
    float _288 = _282.w;
    float _296 = exp2(log2(_287 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _297 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _298 = isnan(1.0) ? _297 : (isnan(_297) ? 1.0 : min(_297, 1.0));
    float _304 = exp2(log2(1.0 - _288) * cbMtdParam._m0[20u].y);
    vec4 _316 = texture(sampler2D(P_ACParts_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _269) + cbTextureTilingScale._m0[0u].w));
    float _205[6];
    float _206[6];
    float _207[6];
    _205[0u] = cbMtdParam._m0[12u].x;
    _206[0u] = cbMtdParam._m0[12u].y;
    _207[0u] = cbMtdParam._m0[12u].z;
    _205[1u] = cbMtdParam._m0[13u].x;
    _206[1u] = cbMtdParam._m0[13u].y;
    _207[1u] = cbMtdParam._m0[13u].z;
    _205[2u] = cbMtdParam._m0[14u].x;
    _206[2u] = cbMtdParam._m0[14u].y;
    _207[2u] = cbMtdParam._m0[14u].z;
    _205[3u] = cbMtdParam._m0[15u].x;
    _206[3u] = cbMtdParam._m0[15u].y;
    _207[3u] = cbMtdParam._m0[15u].z;
    _205[4u] = cbMtdParam._m0[16u].x;
    _206[4u] = cbMtdParam._m0[16u].y;
    _207[4u] = cbMtdParam._m0[16u].z;
    _205[5u] = cbMtdParam._m0[11u].x;
    _206[5u] = cbMtdParam._m0[11u].y;
    _207[5u] = cbMtdParam._m0[11u].z;
    vec4 _398 = texture(sampler2D(P_ACParts_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _400 = _398.x;
    float _401 = _398.y;
    float _429 = roundEven(((_400 + (-0.02500000037252902984619140625)) + ((_398.z * cbMtdParam._m0[19u].w) * (texture(sampler2D(P_ACParts_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, ((cbMtdParam._m0[19u].z * TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w)).x - _400))) * 6.0);
    float _430 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    uint _433 = uint(int(isnan(5.0) ? _430 : (isnan(_430) ? 5.0 : min(_430, 5.0))));
    vec4 _463 = texture(sampler2D(P_ACParts_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _269) + cbTextureTilingScale._m0[3u].w));
    float _473 = cbMtdParam._m0[9u].x * _463.x;
    float _474 = cbMtdParam._m0[9u].y * _463.y;
    float _475 = cbMtdParam._m0[9u].z * _463.z;
    float _482 = ((((((_205[_433] - cbMtdParam._m0[10u].x) * _401) + cbMtdParam._m0[10u].x) * _316.x) - _473) * _304) + _473;
    float _483 = ((((((_206[_433] - cbMtdParam._m0[10u].y) * _401) + cbMtdParam._m0[10u].y) * _316.y) - _474) * _304) + _474;
    float _484 = ((((((_207[_433] - cbMtdParam._m0[10u].z) * _401) + cbMtdParam._m0[10u].z) * _316.z) - _475) * _304) + _475;
    float _488 = exp2(log2(_288) * cbMtdParam._m0[21u].y);
    vec4 _500 = texture(sampler2D(P_ACParts_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _269) + cbTextureTilingScale._m0[10u].w));
    vec4 _533 = texture(sampler2D(P_ACParts_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _544 = cbMtdParam._m0[18u].x * _533.x;
    float _545 = cbMtdParam._m0[18u].y * _533.y;
    float _546 = cbMtdParam._m0[18u].z * _533.z;
    vec4 _567 = texture(sampler2D(P_ACParts_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _269) + cbTextureTilingScale._m0[1u].w));
    float _575 = ((((((((cbMtdParam._m0[17u].x * _500.x) - _482) * _488) + _482) - _544) * _298) + _544) * 4.55000019073486328125) * _567.x;
    float _577 = ((((((((cbMtdParam._m0[17u].y * _500.y) - _483) * _488) + _483) - _545) * _298) + _545) * 4.55000019073486328125) * _567.y;
    float _579 = ((((((((cbMtdParam._m0[17u].z * _500.z) - _484) * _488) + _484) - _546) * _298) + _546) * 4.55000019073486328125) * _567.z;
    float _580 = _567.w * _316.w;
    vec4 _592 = texture(sampler2D(P_ACParts_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    float _594 = _592.x;
    float _612 = (((1.0 - _594) + texture(sampler2D(P_ACParts_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w)).x) * _298) + _594;
    vec4 _624 = texture(sampler2D(P_ACParts_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _269) + cbTextureTilingScale._m0[6u].w));
    float _631 = (((_624.x - _612) + cbMtdParam._m0[20u].z) * _304) + _612;
    float _654 = (((texture(sampler2D(P_ACParts_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - _631) + cbMtdParam._m0[22u].y) * _488) + _631;
    vec4 _666 = texture(sampler2D(P_ACParts_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _269) + cbTextureTilingScale._m0[12u].w));
    vec4 _684 = texture(sampler2D(P_ACParts_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _269) + cbTextureTilingScale._m0[13u].w));
    float _686 = _684.x;
    float _687 = _684.y;
    float _690 = cbMtdParam._m0[19u].x + _684.z;
    float _693 = (((cbMtdParam._m0[20u].x + _666.z) - _690) * _304) + _690;
    vec4 _705 = texture(sampler2D(P_ACParts_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _269) + cbTextureTilingScale._m0[14u].w));
    vec4 _729 = texture(sampler2D(P_ACParts_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _731 = _729.x;
    float _732 = _729.y;
    float _735 = cbMtdParam._m0[21u].x + _729.z;
    float _738 = ((((_287 * 2.0) * ((((_705.z - _693) + cbMtdParam._m0[22u].x) * _488) + _693)) - _735) * _298) + _735;
    float _749 = ((_666.x - _686) * _304) + _686;
    float _750 = ((_666.y - _687) * _304) + _687;
    float _765 = (((((((_705.x - _749) * _488) + _749) - _731) * _298) + _731) * 2.0) + (-1.0);
    float _766 = (((((((_705.y - _750) * _488) + _750) - _732) * _298) + _732) * 2.0) + (-1.0);
    float _767 = dot(vec2(_765, _766), vec2(_765, _766));
    float _4119 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _772 = sqrt(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))));
    float _775 = _765 + (cbMtdParam._m0[21u].w * ((_282.x * 2.0) + (-1.0)));
    float _776 = _766 + (cbMtdParam._m0[21u].w * ((_282.y * 2.0) + (-1.0)));
    float _779 = fma(_772, _257, fma(_776, _249 * TANGENT.x, (_235 * _227) * _775));
    float _782 = fma(_772, _258, fma(_776, _249 * TANGENT.y, (_235 * _228) * _775));
    float _785 = fma(_772, _259, fma(_776, _249 * TANGENT.z, (_235 * _229) * _775));
    float _789 = inversesqrt(dot(vec3(_779, _782, _785), vec3(_779, _782, _785)));
    float _790 = _789 * _779;
    float _791 = _789 * _782;
    float _792 = _789 * _785;
    float _4130 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _793 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _4141 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _794 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _4152 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _4163 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _4174 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _4185 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _798 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _814 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _854 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _864 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _854);
    float _865 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _854);
    float _866 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _854);
    float _870 = inversesqrt(dot(vec3(_864, _865, _866), vec3(_864, _865, _866)));
    float _871 = _864 * _870;
    float _872 = _865 * _870;
    float _873 = _866 * _870;
    vec4 _878 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _880 = _878.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1100 = sqrt(((_864 * _864) + (_865 * _865)) + (_866 * _866));
        float _1106 = (cbMatDynParam._m0[5u].x * _1100) + cbMatDynParam._m0[5u].y;
        float _4196 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1111 = (cbMatDynParam._m0[5u].z * _1100) + cbMatDynParam._m0[5u].w;
        float _4207 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) - _1107)) + _1107) < ((_880 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _891 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _892 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _894 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _896 = _894.w;
    float _914 = fma(_792, cbSceneParam._m0[5u].z, fma(_791, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _790));
    float _917 = fma(_792, cbSceneParam._m0[6u].z, fma(_791, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _790));
    float _920 = fma(_792, cbSceneParam._m0[7u].z, fma(_791, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _790));
    vec4 _922 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _933 = (((_922.y - _794) + (_922.w * _794)) * cbMtdParam._m0[3u].x) + _794;
    uint _946 = uint(roundEven(NORMAL.w)) * 13u;
    uint _947 = _946 + 9u;
    uint _948 = _947 + uint(cbMatDynParam._m0[0u].w);
    float _954 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * cbInstanceData._m0[_948].x;
    float _955 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * cbInstanceData._m0[_948].y;
    float _956 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) * cbInstanceData._m0[_948].z;
    float _4218 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _957 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _4229 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _958 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _4240 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _959 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    vec4 _960 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _965 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _976 = (((_965.x - _798) + (_965.w * _798)) * cbMtdParam._m0[3u].x) + _798;
    float _989 = (cbMtdParam._m0[3u].x * (((_957 * _896) - _957) + _960.x)) + _957;
    float _990 = (cbMtdParam._m0[3u].x * (((_958 * _896) - _958) + _960.y)) + _958;
    float _991 = (cbMtdParam._m0[3u].x * (((_959 * _896) - _959) + _960.z)) + _959;
    float _992 = 1.0 - _976;
    float _993 = _992 * _989;
    float _994 = _992 * _990;
    float _995 = _992 * _991;
    float _1000 = (_989 + (-0.039999999105930328369140625)) * _976;
    float _1001 = (_990 + (-0.039999999105930328369140625)) * _976;
    float _1002 = (_991 + (-0.039999999105930328369140625)) * _976;
    float _1003 = _1000 + 0.039999999105930328369140625;
    float _1005 = _1001 + 0.039999999105930328369140625;
    float _1006 = _1002 + 0.039999999105930328369140625;
    vec4 _1015 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _891, cbSceneParam._m0[86u].y * _892));
    float _1018 = _1015.x * TEXCOORD_4;
    float _1019 = dot(vec3(_790, _791, _792), vec3(_871, _872, _873));
    float _1022 = _1019 * 2.0;
    float _1026 = (_1022 * _790) - _871;
    float _1027 = (_1022 * _791) - _872;
    float _1028 = (_1022 * _792) - _873;
    float _1032 = abs(dot(vec3(_871, _872, _873), vec3(_790, _791, _792)));
    float _4251 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _1034 = sqrt(_933);
    float _1046 = exp2((_1034 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1034 * 3.0));
    float _1052 = (1.0 - _1046) * ((_1034 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1053 = _1046 * _1034;
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1089 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1420;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1145 = fma(_1089, cbModelParam._m0[26u].z, fma(_1085, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1081));
        float _1149 = fma(_1089, cbModelParam._m0[27u].z, fma(_1085, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1081));
        float _1153 = fma(_1089, cbModelParam._m0[28u].z, fma(_1085, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1081));
        float _1178 = _1081 + _790;
        float _1179 = _1085 + _791;
        float _1180 = _1089 + _792;
        float _1190 = fma(_1180, cbModelParam._m0[26u].z, fma(_1179, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1178)) - _1145;
        float _1191 = fma(_1180, cbModelParam._m0[27u].z, fma(_1179, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1178)) - _1149;
        float _1192 = fma(_1180, cbModelParam._m0[28u].z, fma(_1179, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1178)) - _1153;
        float _1196 = inversesqrt(dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192)));
        float _1209 = ((_1196 * _1190) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1145 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1210 = ((_1196 * _1191) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1149 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1211 = ((_1196 * _1192) / cbModelParam._m0[34u].z) + ((((((_1153 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        float _1248 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1214.x + (-0.5));
        float _1250 = _1248 * (_1214.y + (-0.5));
        float _1251 = _1248 * (_1214.z + (-0.5));
        float _1258 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1221.x + (-0.5));
        float _1260 = _1258 * (_1221.y + (-0.5));
        float _1261 = _1258 * (_1221.z + (-0.5));
        float _1268 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1228.x + (-0.5));
        float _1270 = _1268 * (_1228.y + (-0.5));
        float _1271 = _1268 * (_1228.z + (-0.5));
        float _1278 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1235.x + (-0.5));
        float _1280 = _1278 * (_1235.y + (-0.5));
        float _1281 = _1278 * (_1235.z + (-0.5));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = _1249 * 0.5;
        float _1286 = _1259 * 0.5;
        float _1287 = _1269 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1302 = (dot(vec3(_790, _791, _792), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _4277 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1312 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _4288 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _4299 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_1314 + 1.0))) + _1319) * _1282;
        float _1329 = _1250 * 0.5;
        float _1330 = _1260 * 0.5;
        float _1331 = _1270 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_790, _791, _792), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _4310 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _4321 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _4332 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_1356 + 1.0))) + _1361) * _1283;
        float _1371 = _1251 * 0.5;
        float _1372 = _1261 * 0.5;
        float _1373 = _1271 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_790, _791, _792), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _4343 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _4354 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _4365 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_1398 + 1.0))) + _1403) * _1284;
        _1420 = _1251;
        _1422 = _1250;
        _1423 = _1249;
        _1424 = _1261;
        _1425 = _1260;
        _1426 = _1259;
        _1427 = _1271;
        _1428 = _1270;
        _1429 = _1269;
        _1430 = _1284;
        _1431 = _1283;
        _1432 = _1282;
        _1433 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
        _1434 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
        _1435 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
    }
    else
    {
        _1420 = _1421;
        _1422 = _1421;
        _1423 = _1421;
        _1424 = _1421;
        _1425 = _1421;
        _1426 = _1421;
        _1427 = _1421;
        _1428 = _1421;
        _1429 = _1421;
        _1430 = _1421;
        _1431 = _1421;
        _1432 = _1421;
        _1433 = 0.0;
        _1434 = 0.0;
        _1435 = 0.0;
    }
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1464 = fma(_1089, cbModelParam._m0[30u].z, fma(_1085, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1081));
        float _1468 = fma(_1089, cbModelParam._m0[31u].z, fma(_1085, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1081));
        float _1472 = fma(_1089, cbModelParam._m0[32u].z, fma(_1085, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1081));
        float _1495 = _1081 + _790;
        float _1496 = _1085 + _791;
        float _1497 = _1089 + _792;
        float _1507 = fma(_1497, cbModelParam._m0[30u].z, fma(_1496, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1495)) - _1464;
        float _1508 = fma(_1497, cbModelParam._m0[31u].z, fma(_1496, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1495)) - _1468;
        float _1509 = fma(_1497, cbModelParam._m0[32u].z, fma(_1496, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1495)) - _1472;
        float _1513 = inversesqrt(dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509)));
        float _1526 = ((_1513 * _1507) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1464 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1527 = ((_1513 * _1508) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1468 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1528 = ((_1513 * _1509) / cbModelParam._m0[35u].z) + ((((((_1472 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1530 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        vec4 _1537 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        vec4 _1544 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        vec4 _1551 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        float _1563 = exp2((_1530.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1530.x + (-0.5));
        float _1565 = _1563 * (_1530.y + (-0.5));
        float _1566 = _1563 * (_1530.z + (-0.5));
        float _1573 = exp2((_1537.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1537.x + (-0.5));
        float _1575 = _1573 * (_1537.y + (-0.5));
        float _1576 = _1573 * (_1537.z + (-0.5));
        float _1583 = exp2((_1544.w + (-0.5)) * 20.0) * 2.0;
        float _1584 = _1583 * (_1544.x + (-0.5));
        float _1585 = _1583 * (_1544.y + (-0.5));
        float _1586 = _1583 * (_1544.z + (-0.5));
        float _1593 = exp2((_1551.w + (-0.5)) * 20.0) * 2.0;
        float _1594 = _1593 * (_1551.x + (-0.5));
        float _1595 = _1593 * (_1551.y + (-0.5));
        float _1596 = _1593 * (_1551.z + (-0.5));
        float _1597 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1598 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1599 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1600 = _1564 * 0.5;
        float _1601 = _1574 * 0.5;
        float _1602 = _1584 * 0.5;
        float _1603 = dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602));
        float _1608 = (_1603 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1603);
        float _1616 = (dot(vec3(_790, _791, _792), vec3(_1608 * _1600, _1608 * _1601, _1608 * _1602)) + 1.0) * 0.5;
        float _4406 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1625 = sqrt(((_1601 * _1601) + (_1600 * _1600)) + (_1602 * _1602)) / (_1597 + 9.9999997473787516355514526367188e-06);
        float _4417 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1627 = _1626 * 2.0;
        float _1631 = (1.0 - _1626) / (_1626 + 1.0);
        float _4428 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1641 = ((((1.0 - _1632) * (_1627 + 2.0)) * exp2(log2(isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_1627 + 1.0))) + _1632) * _1597;
        float _1642 = _1565 * 0.5;
        float _1643 = _1575 * 0.5;
        float _1644 = _1585 * 0.5;
        float _1645 = dot(vec3(_1642, _1643, _1644), vec3(_1642, _1643, _1644));
        float _1650 = (_1645 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1645);
        float _1658 = (dot(vec3(_790, _791, _792), vec3(_1650 * _1642, _1650 * _1643, _1650 * _1644)) + 1.0) * 0.5;
        float _4439 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1667 = sqrt(((_1643 * _1643) + (_1642 * _1642)) + (_1644 * _1644)) / (_1598 + 9.9999997473787516355514526367188e-06);
        float _4450 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1669 = _1668 * 2.0;
        float _1673 = (1.0 - _1668) / (_1668 + 1.0);
        float _4461 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _1683 = ((((1.0 - _1674) * (_1669 + 2.0)) * exp2(log2(isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_1669 + 1.0))) + _1674) * _1598;
        float _1684 = _1566 * 0.5;
        float _1685 = _1576 * 0.5;
        float _1686 = _1586 * 0.5;
        float _1687 = dot(vec3(_1684, _1685, _1686), vec3(_1684, _1685, _1686));
        float _1692 = (_1687 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1687);
        float _1700 = (dot(vec3(_790, _791, _792), vec3(_1692 * _1684, _1692 * _1685, _1692 * _1686)) + 1.0) * 0.5;
        float _4472 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1709 = sqrt(((_1685 * _1685) + (_1684 * _1684)) + (_1686 * _1686)) / (_1599 + 9.9999997473787516355514526367188e-06);
        float _4483 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1711 = _1710 * 2.0;
        float _1715 = (1.0 - _1710) / (_1710 + 1.0);
        float _4494 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _1725 = ((((1.0 - _1716) * (_1711 + 2.0)) * exp2(log2(isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_1711 + 1.0))) + _1716) * _1599;
        _1733 = _1566;
        _1734 = _1565;
        _1735 = _1564;
        _1736 = _1576;
        _1737 = _1575;
        _1738 = _1574;
        _1739 = _1586;
        _1740 = _1585;
        _1741 = _1584;
        _1742 = _1599;
        _1743 = _1598;
        _1744 = _1597;
        _1745 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)));
        _1746 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)));
        _1747 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)));
    }
    else
    {
        _1733 = _1421;
        _1734 = _1421;
        _1735 = _1421;
        _1736 = _1421;
        _1737 = _1421;
        _1738 = _1421;
        _1739 = _1421;
        _1740 = _1421;
        _1741 = _1421;
        _1742 = _1421;
        _1743 = _1421;
        _1744 = _1421;
        _1745 = 0.0;
        _1746 = 0.0;
        _1747 = 0.0;
    }
    float _1757 = (cbModelParam._m0[1u].x * (_1745 - _1433)) + _1433;
    float _1758 = (cbModelParam._m0[1u].x * (_1746 - _1434)) + _1434;
    float _1759 = (cbModelParam._m0[1u].x * (_1747 - _1435)) + _1435;
    float _1780 = fma(_1759, cbSceneParam._m0[89u].z, fma(_1758, cbSceneParam._m0[89u].y, _1757 * cbSceneParam._m0[89u].x));
    float _1783 = fma(_1759, cbSceneParam._m0[90u].z, fma(_1758, cbSceneParam._m0[90u].y, _1757 * cbSceneParam._m0[90u].x));
    float _1786 = fma(_1759, cbSceneParam._m0[91u].z, fma(_1758, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1757));
    float _1801 = _1026 * 0.5;
    float _1802 = _1027 * 0.5;
    float _1803 = _1028 * 0.5;
    float _1804 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1735, _1738, _1741, _1744));
    float _1807 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1734, _1737, _1740, _1743));
    float _1810 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1733, _1736, _1739, _1742));
    float _1844;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1817 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1420, _1424, _1427, _1430));
        float _1821 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1422, _1425, _1428, _1431));
        float _1825 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1423, _1426, _1429, _1432));
        float _1832 = dot(vec4(cbModelParam._m0[39u]), vec4(_1801, _1802, _1803, 1.0));
        _1844 = dot(vec3(isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0)), isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)), isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1832) ? 0.0 : (isnan(0.0) ? _1832 : max(0.0, _1832))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1844 = 1.0;
    }
    float _1855;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1846 = dot(vec4(cbModelParam._m0[40u]), vec4(_1801, _1802, _1803, 1.0));
        _1855 = dot(vec3(isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)), isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1846) ? 0.0 : (isnan(0.0) ? _1846 : max(0.0, _1846))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1855 = 1.0;
    }
    float _1859 = (_1855 * cbModelParam._m0[1u].x) + (_1844 * (1.0 - cbModelParam._m0[1u].x));
    float _1869 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _933);
    float _1870 = isnan(_1869) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1869 : min(cbModelParam._m0[25u].z, _1869));
    float _1950;
    float _1952;
    float _1954;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1917 = fma(_1089, cbModelParam._m0[13u].z, fma(_1085, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1081)) + cbModelParam._m0[13u].w;
        float _1921 = fma(_1089, cbModelParam._m0[14u].z, fma(_1085, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1081)) + cbModelParam._m0[14u].w;
        float _1925 = fma(_1089, cbModelParam._m0[15u].z, fma(_1085, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1081)) + cbModelParam._m0[15u].w;
        float _1928 = fma(_1028, cbModelParam._m0[13u].z, fma(_1027, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1026));
        float _1931 = fma(_1028, cbModelParam._m0[14u].z, fma(_1027, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1026));
        float _1934 = fma(_1028, cbModelParam._m0[15u].z, fma(_1027, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1026));
        float _1962;
        if (_1928 > 0.0)
        {
            _1962 = abs((1.0 - _1917) / _1928);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1917 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1962 = frontier_phi_19_17_ladder;
        }
        float _2133;
        if (_1931 > 0.0)
        {
            _2133 = abs((1.0 - _1921) / _1931);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1921 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2133 = frontier_phi_28_24_ladder;
        }
        float _2428;
        if (_1934 > 0.0)
        {
            _2428 = abs((1.0 - _1925) / _1934);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1925 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2428 = frontier_phi_40_35_ladder;
        }
        float _2430 = isnan(_2133) ? _1962 : (isnan(_1962) ? _2133 : min(_1962, _2133));
        float _2431 = isnan(_2428) ? _2430 : (isnan(_2430) ? _2428 : min(_2430, _2428));
        float _2435 = (_2431 * _1928) + _1917;
        float _2436 = (_2431 * _1931) + _1921;
        float _2437 = (_2431 * _1934) + _1925;
        float _2438 = _2431 * 9.9999997473787516355514526367188e-05;
        float _2440 = (-1.0) - _2438;
        float _2442 = _2438 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2437 > _2442) || ((_2437 < _2440) || ((_2436 > _2442) || ((_2436 < _2440) || ((_2435 < _2440) || (_2435 > _2442))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2582 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2437, cbModelParam._m0[9u].z, fma(_2436, cbModelParam._m0[9u].y, _2435 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2437, cbModelParam._m0[10u].z, fma(_2436, cbModelParam._m0[10u].y, _2435 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2437, cbModelParam._m0[11u].z, fma(_2436, cbModelParam._m0[11u].y, _2435 * cbModelParam._m0[11u].x))), _1870);
            frontier_phi_18_40_ladder = _2582.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2582.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2582.x * cbModelParam._m0[1u].y;
        }
        _1950 = frontier_phi_18_40_ladder_2;
        _1952 = frontier_phi_18_40_ladder_1;
        _1954 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1938 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1026, _1027, _1028), _1870);
        _1950 = _1938.x * cbModelParam._m0[1u].y;
        _1952 = _1938.y * cbModelParam._m0[1u].y;
        _1954 = _1938.z * cbModelParam._m0[1u].y;
    }
    float _1958 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _933);
    float _1959 = isnan(_1958) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1958 : min(cbModelParam._m0[25u].w, _1958));
    float _2048;
    float _2050;
    float _2052;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2012 = fma(_1089, cbModelParam._m0[21u].z, fma(_1085, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1081)) + cbModelParam._m0[21u].w;
        float _2016 = fma(_1089, cbModelParam._m0[22u].z, fma(_1085, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1081)) + cbModelParam._m0[22u].w;
        float _2020 = fma(_1089, cbModelParam._m0[23u].z, fma(_1085, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1081)) + cbModelParam._m0[23u].w;
        float _2023 = fma(_1028, cbModelParam._m0[21u].z, fma(_1027, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1026));
        float _2026 = fma(_1028, cbModelParam._m0[22u].z, fma(_1027, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1026));
        float _2029 = fma(_1028, cbModelParam._m0[23u].z, fma(_1027, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1026));
        float _2138;
        if (_2023 > 0.0)
        {
            _2138 = abs((1.0 - _2012) / _2023);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2023 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2012 + 1.0) / _2023);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2138 = frontier_phi_30_26_ladder;
        }
        float _2455;
        if (_2026 > 0.0)
        {
            _2455 = abs((1.0 - _2016) / _2026);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2026 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2016 + 1.0) / _2026);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2455 = frontier_phi_42_37_ladder;
        }
        float _2793;
        if (_2029 > 0.0)
        {
            _2793 = abs((1.0 - _2020) / _2029);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2020 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2793 = frontier_phi_52_49_ladder;
        }
        float _2795 = isnan(_2455) ? _2138 : (isnan(_2138) ? _2455 : min(_2138, _2455));
        float _2796 = isnan(_2793) ? _2795 : (isnan(_2795) ? _2793 : min(_2795, _2793));
        float _2800 = (_2796 * _2023) + _2012;
        float _2801 = (_2796 * _2026) + _2016;
        float _2802 = (_2796 * _2029) + _2020;
        float _2803 = _2796 * 9.9999997473787516355514526367188e-05;
        float _2804 = (-1.0) - _2803;
        float _2806 = _2803 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2802 > _2806) || ((_2802 < _2804) || ((_2801 > _2806) || ((_2801 < _2804) || ((_2800 < _2804) || (_2800 > _2806))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2924 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2802, cbModelParam._m0[17u].z, fma(_2801, cbModelParam._m0[17u].y, _2800 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2802, cbModelParam._m0[18u].z, fma(_2801, cbModelParam._m0[18u].y, _2800 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2802, cbModelParam._m0[19u].z, fma(_2801, cbModelParam._m0[19u].y, _2800 * cbModelParam._m0[19u].x))), _1959);
            frontier_phi_27_52_ladder = _2924.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2924.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2924.x * cbModelParam._m0[1u].z;
        }
        _2048 = frontier_phi_27_52_ladder_2;
        _2050 = frontier_phi_27_52_ladder_1;
        _2052 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2032 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1026, _1027, _1028), _1959);
        _2048 = _2032.x * cbModelParam._m0[1u].z;
        _2050 = _2032.y * cbModelParam._m0[1u].z;
        _2052 = _2032.z * cbModelParam._m0[1u].z;
    }
    float _2065 = (((_1052 * _1003) + _1053) * _1018) * ((cbModelParam._m0[1u].w * (_2048 - _1950)) + _1950);
    float _2067 = (((_1052 * _1005) + _1053) * _1018) * ((cbModelParam._m0[1u].w * (_2050 - _1952)) + _1952);
    float _2069 = (((_1052 * _1006) + _1053) * _1018) * ((cbModelParam._m0[1u].w * (_2052 - _1954)) + _1954);
    float _2072 = fma(_2069, cbSceneParam._m0[89u].z, fma(_2067, cbSceneParam._m0[89u].y, _2065 * cbSceneParam._m0[89u].x));
    float _2075 = fma(_2069, cbSceneParam._m0[90u].z, fma(_2067, cbSceneParam._m0[90u].y, _2065 * cbSceneParam._m0[90u].x));
    float _2078 = fma(_2069, cbSceneParam._m0[91u].z, fma(_2067, cbSceneParam._m0[91u].y, _2065 * cbSceneParam._m0[91u].x));
    float _2112 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2116 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2120 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2124 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2125 = _2112 / _2124;
    float _2126 = _2116 / _2124;
    float _2127 = _2120 / _2124;
    float _2274;
    float _2275;
    float _2276;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2154 = ((uint(_2127 > cbSceneParam._m0[59u].y) + uint(_2127 > cbSceneParam._m0[59u].x)) + uint(_2127 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2155 = _2154 + 43u;
        uint _2163 = _2154 + 44u;
        uint _2171 = _2154 + 45u;
        uint _2179 = _2154 + 46u;
        float _2190 = fma(_2124, cbSceneParam._m0[_2155].w, fma(_2120, cbSceneParam._m0[_2155].z, fma(_2116, cbSceneParam._m0[_2155].y, _2112 * cbSceneParam._m0[_2155].x)));
        float _2194 = fma(_2124, cbSceneParam._m0[_2163].w, fma(_2120, cbSceneParam._m0[_2163].z, fma(_2116, cbSceneParam._m0[_2163].y, _2112 * cbSceneParam._m0[_2163].x)));
        float _2202 = fma(_2124, cbSceneParam._m0[_2179].w, fma(_2120, cbSceneParam._m0[_2179].z, fma(_2116, cbSceneParam._m0[_2179].y, _2112 * cbSceneParam._m0[_2179].x)));
        float _2207 = cbSceneParam._m0[33u].z * _2202;
        float _2209 = cbSceneParam._m0[33u].w * _2202;
        float _2212 = fma(_2124, cbSceneParam._m0[_2171].w, fma(_2120, cbSceneParam._m0[_2171].z, fma(_2116, cbSceneParam._m0[_2171].y, _2112 * cbSceneParam._m0[_2171].x))) / _2202;
        float _2260 = (cbSceneParam._m0[33u].x - sqrt(((_2126 * _2126) + (_2125 * _2125)) + (_2127 * _2127))) * cbSceneParam._m0[33u].y;
        float _4620 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2267 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2207 + _2190) / _2202, (_2209 + _2194) / _2202), _2212), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2209 + _2190) / _2202, (_2194 - _2207) / _2202), _2212), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2190 - _2207) / _2202, (_2194 - _2209) / _2202), _2212), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2190 - _2209) / _2202, (_2207 + _2194) / _2202), _2212), 0.0)).x), vec4(0.25)));
        _2274 = 1.0 - (_2267 * cbSceneParam._m0[34u].x);
        _2275 = 1.0 - (_2267 * cbSceneParam._m0[34u].y);
        _2276 = 1.0 - (_2267 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2274 = 1.0;
        _2275 = 1.0;
        _2276 = 1.0;
    }
    float _2340;
    float _2342;
    float _2344;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2328 = fma(_2124, cbSceneParam._m0[63u].w, fma(_2120, cbSceneParam._m0[63u].z, fma(_2116, cbSceneParam._m0[63u].y, _2112 * cbSceneParam._m0[63u].x)));
        float _2329 = fma(_2124, cbSceneParam._m0[60u].w, fma(_2120, cbSceneParam._m0[60u].z, fma(_2116, cbSceneParam._m0[60u].y, _2112 * cbSceneParam._m0[60u].x))) / _2328;
        float _2330 = fma(_2124, cbSceneParam._m0[61u].w, fma(_2120, cbSceneParam._m0[61u].z, fma(_2116, cbSceneParam._m0[61u].y, _2112 * cbSceneParam._m0[61u].x))) / _2328;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2329 >= cbSceneParam._m0[64u].x) && (_2330 >= cbSceneParam._m0[64u].y)) && (_2329 <= cbSceneParam._m0[64u].z)) && (_2330 <= cbSceneParam._m0[64u].w))
        {
            float _2468 = fma(_2124, cbSceneParam._m0[62u].w, fma(_2120, cbSceneParam._m0[62u].z, fma(_2116, cbSceneParam._m0[62u].y, _2112 * cbSceneParam._m0[62u].x))) / _2328;
            float _2472 = isnan(cbSceneParam._m0[41u].w) ? _2468 : (isnan(_2468) ? cbSceneParam._m0[41u].w : max(_2468, cbSceneParam._m0[41u].w));
            float _2515 = (cbSceneParam._m0[33u].x - sqrt(((_2126 * _2126) + (_2125 * _2125)) + (_2127 * _2127))) * cbSceneParam._m0[33u].y;
            float _4636 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
            float _2522 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2329, cbSceneParam._m0[33u].w + _2330), _2472), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2329, _2330 - cbSceneParam._m0[33u].z), _2472), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2329 - cbSceneParam._m0[33u].z, _2330 - cbSceneParam._m0[33u].w), _2472), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2329 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2330), _2472), 0.0)).x), vec4(0.25)));
            float _2526 = 1.0 - (_2522 * cbSceneParam._m0[34u].x);
            float _2527 = 1.0 - (_2522 * cbSceneParam._m0[34u].y);
            float _2528 = 1.0 - (_2522 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2527) ? _2275 : (isnan(_2275) ? _2527 : min(_2275, _2527));
            frontier_phi_39_38_ladder_1 = isnan(_2526) ? _2274 : (isnan(_2274) ? _2526 : min(_2274, _2526));
            frontier_phi_39_38_ladder_2 = isnan(_2528) ? _2276 : (isnan(_2276) ? _2528 : min(_2276, _2528));
        }
        else
        {
            frontier_phi_39_38_ladder = _2275;
            frontier_phi_39_38_ladder_1 = _2274;
            frontier_phi_39_38_ladder_2 = _2276;
        }
        _2340 = frontier_phi_39_38_ladder_1;
        _2342 = frontier_phi_39_38_ladder;
        _2344 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2340 = _2274;
        _2342 = _2275;
        _2344 = _2276;
    }
    uvec4 _2349 = floatBitsToUint(cbInstanceData._m0[_946 + 5u]);
    uint _2351 = _2349.x * 14u;
    uint _2352 = _2351 + 13u;
    float _2359 = _1018 + (-1.0);
    float _2364 = (cbLight._m0[_2352].x * _2359) + 1.0;
    float _2365 = (cbLight._m0[_2352].y * _2359) + 1.0;
    float _2366 = (cbLight._m0[_2352].z * _2359) + 1.0;
    float _2367 = (cbLight._m0[_2352].w * _2359) + 1.0;
    uint _2368 = _2351 + 5u;
    float _2374 = isnan(1.0) ? _2365 : (isnan(_2365) ? 1.0 : min(_2365, 1.0));
    uint _2378 = _2351 + 4u;
    float _2387 = isnan(1.0) ? _2364 : (isnan(_2364) ? 1.0 : min(_2364, 1.0));
    uint _2391 = _2351 | 1u;
    float _2402 = dot(vec3(cbLight._m0[_2351].xyz), vec3(_790, _791, _792));
    float _2405 = dot(vec3(cbLight._m0[_2391].xyz), vec3(_790, _791, _792));
    float _4672 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _4683 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2410 = (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * 0.3183098733425140380859375;
    float _2412 = (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * 0.3183098733425140380859375;
    float _2419 = ((cbLight._m0[_2368].x * _2374) * _2412) + (((cbLight._m0[_2378].x * _2340) * _2387) * _2410);
    float _2420 = ((_2374 * cbLight._m0[_2368].y) * _2412) + (((cbLight._m0[_2378].y * _2342) * _2387) * _2410);
    float _2421 = ((_2374 * cbLight._m0[_2368].z) * _2412) + (((cbLight._m0[_2378].z * _2344) * _2387) * _2410);
    uvec4 _2425 = floatBitsToUint(cbLight._m0[_2351 + 12u]);
    bool _2427 = _2425.x == 0u;
    float _2529;
    float _2531;
    float _2533;
    if (_2427)
    {
        _2529 = _2419;
        _2531 = _2420;
        _2533 = _2421;
    }
    else
    {
        uint _2537 = _2351 + 6u;
        float _2553 = (dot(vec3(cbLight._m0[_2351 + 2u].xyz), vec3(_790, _791, _792)) * 0.5) + 0.5;
        float _2554 = _2553 * _2553;
        float _4694 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2555 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2556 = isnan(1.0) ? _2366 : (isnan(_2366) ? 1.0 : min(_2366, 1.0));
        _2529 = (((cbLight._m0[_2537].x * 0.3183098733425140380859375) * _2555) * _2556) + _2419;
        _2531 = (((cbLight._m0[_2537].y * 0.3183098733425140380859375) * _2555) * _2556) + _2420;
        _2533 = (((cbLight._m0[_2537].z * 0.3183098733425140380859375) * _2555) * _2556) + _2421;
    }
    bool _2536 = _2425.y == 0u;
    float _2591;
    float _2593;
    float _2595;
    if (_2536)
    {
        _2591 = _2529;
        _2593 = _2531;
        _2595 = _2533;
    }
    else
    {
        uint _2764 = _2351 + 7u;
        float _2780 = (dot(vec3(cbLight._m0[_2351 + 3u].xyz), vec3(_790, _791, _792)) * 0.5) + 0.5;
        float _2781 = _2780 * _2780;
        float _4710 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
        float _2782 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
        float _2783 = isnan(1.0) ? _2367 : (isnan(_2367) ? 1.0 : min(_2367, 1.0));
        _2591 = (((cbLight._m0[_2764].x * 0.3183098733425140380859375) * _2782) * _2783) + _2529;
        _2593 = (((cbLight._m0[_2764].y * 0.3183098733425140380859375) * _2782) * _2783) + _2531;
        _2595 = (((cbLight._m0[_2764].z * 0.3183098733425140380859375) * _2782) * _2783) + _2533;
    }
    uint _2598 = _2351 + 8u;
    float _2611 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2351].w)) * _933) * 0.949999988079071044921875);
    float _2612 = _2611 * _2611;
    float _2613 = cbLight._m0[_2351].x + _871;
    float _2614 = cbLight._m0[_2351].y + _872;
    float _2615 = cbLight._m0[_2351].z + _873;
    float _2619 = inversesqrt(dot(vec3(_2613, _2614, _2615), vec3(_2613, _2614, _2615)));
    float _2620 = _2619 * _2613;
    float _2621 = _2619 * _2614;
    float _2622 = _2619 * _2615;
    float _2623 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2351].xyz));
    float _4726 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
    float _2626 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
    float _4737 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _2627 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
    float _2628 = dot(vec3(_790, _791, _792), vec3(_2620, _2621, _2622));
    float _4748 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2631 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
    float _2632 = dot(vec3(cbLight._m0[_2351].xyz), vec3(_2620, _2621, _2622));
    float _4759 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
    float _2636 = _2612 * _2612;
    float _2640 = ((_2631 * _2631) * (_2636 + (-1.0))) + 1.0;
    float _2648 = exp2(log2(1.0 - (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0)))) * 5.0);
    float _2649 = 0.959999978542327880859375 - _1000;
    float _2651 = 0.959999978542327880859375 - _1001;
    float _2652 = 0.959999978542327880859375 - _1002;
    float _2659 = 1.0 - _2612;
    float _2670 = (0.5 / (((_2627 * ((_2626 * _2659) + _2612)) + 9.9999999392252902907785028219223e-09) + (((_2627 * _2659) + _2612) * _2626))) * _2626;
    float _4770 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
    float _2672 = (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (_2636 / ((_2640 * _2640) * 3.141590118408203125));
    uint _2686 = _2351 + 9u;
    float _2697 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2391].w)) * _933) * 0.949999988079071044921875);
    float _2698 = _2697 * _2697;
    float _2699 = cbLight._m0[_2391].x + _871;
    float _2700 = cbLight._m0[_2391].y + _872;
    float _2701 = cbLight._m0[_2391].z + _873;
    float _2705 = inversesqrt(dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701)));
    float _2706 = _2705 * _2699;
    float _2707 = _2705 * _2700;
    float _2708 = _2705 * _2701;
    float _2709 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2391].xyz));
    float _4781 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
    float _2712 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
    float _2713 = dot(vec3(_790, _791, _792), vec3(_2706, _2707, _2708));
    float _4792 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
    float _2716 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
    float _2717 = dot(vec3(cbLight._m0[_2391].xyz), vec3(_2706, _2707, _2708));
    float _4803 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
    float _2721 = _2698 * _2698;
    float _2725 = ((_2716 * _2716) * (_2721 + (-1.0))) + 1.0;
    float _2732 = exp2(log2(1.0 - (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0)))) * 5.0);
    float _2739 = 1.0 - _2698;
    float _2749 = (0.5 / (((_2627 * ((_2712 * _2739) + _2698)) + 9.9999999392252902907785028219223e-09) + (((_2627 * _2739) + _2698) * _2712))) * _2712;
    float _4814 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
    float _2751 = (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0))) * (_2721 / ((_2725 * _2725) * 3.141590118408203125));
    float _2761 = (((((_2732 * _2649) + _1003) * cbLight._m0[_2686].x) * _2751) * _2374) + ((((cbLight._m0[_2598].x * _2340) * ((_2648 * _2649) + _1003)) * _2672) * _2387);
    float _2762 = (((((_2732 * _2651) + _1005) * cbLight._m0[_2686].y) * _2751) * _2374) + ((((cbLight._m0[_2598].y * _2342) * ((_2648 * _2651) + _1005)) * _2672) * _2387);
    float _2763 = (((((_2732 * _2652) + _1006) * cbLight._m0[_2686].z) * _2751) * _2374) + ((((cbLight._m0[_2598].z * _2344) * ((_2648 * _2652) + _1006)) * _2672) * _2387);
    float _2819;
    float _2821;
    float _2823;
    if (_2427)
    {
        _2819 = _2761;
        _2821 = _2762;
        _2823 = _2763;
    }
    else
    {
        uint _2825 = _2351 + 2u;
        uint _2829 = _2351 + 10u;
        float _2843 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2825].w)) * _933) * 0.949999988079071044921875);
        float _2844 = _2843 * _2843;
        float _2845 = cbLight._m0[_2825].x + _871;
        float _2846 = cbLight._m0[_2825].y + _872;
        float _2847 = cbLight._m0[_2825].z + _873;
        float _2851 = inversesqrt(dot(vec3(_2845, _2846, _2847), vec3(_2845, _2846, _2847)));
        float _2852 = _2851 * _2845;
        float _2853 = _2851 * _2846;
        float _2854 = _2851 * _2847;
        float _2855 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2825].xyz));
        float _4825 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2858 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
        float _2859 = dot(vec3(_790, _791, _792), vec3(_2852, _2853, _2854));
        float _4836 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
        float _2862 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
        float _2863 = dot(vec3(cbLight._m0[_2825].xyz), vec3(_2852, _2853, _2854));
        float _4847 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        float _2867 = _2844 * _2844;
        float _2871 = ((_2862 * _2862) * (_2867 + (-1.0))) + 1.0;
        float _2878 = exp2(log2(1.0 - (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0)))) * 5.0);
        float _2885 = 1.0 - _2844;
        float _2895 = (0.5 / (((_2627 * ((_2858 * _2885) + _2844)) + 9.9999999392252902907785028219223e-09) + (((_2627 * _2885) + _2844) * _2858))) * _2858;
        float _4858 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
        float _2897 = (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * (_2867 / ((_2871 * _2871) * 3.141590118408203125));
        float _2898 = isnan(1.0) ? _2366 : (isnan(_2366) ? 1.0 : min(_2366, 1.0));
        _2819 = (((((_2878 * _2649) + _1003) * cbLight._m0[_2829].x) * _2897) * _2898) + _2761;
        _2821 = (((((_2878 * _2651) + _1005) * cbLight._m0[_2829].y) * _2897) * _2898) + _2762;
        _2823 = (((((_2878 * _2652) + _1006) * cbLight._m0[_2829].z) * _2897) * _2898) + _2763;
    }
    float _2929;
    float _2931;
    float _2933;
    if (_2536)
    {
        _2929 = _2819;
        _2931 = _2821;
        _2933 = _2823;
    }
    else
    {
        uint _2940 = _2351 + 3u;
        uint _2944 = _2351 + 11u;
        float _2958 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2940].w)) * _933) * 0.949999988079071044921875);
        float _2959 = _2958 * _2958;
        float _2960 = cbLight._m0[_2940].x + _871;
        float _2961 = cbLight._m0[_2940].y + _872;
        float _2962 = cbLight._m0[_2940].z + _873;
        float _2966 = inversesqrt(dot(vec3(_2960, _2961, _2962), vec3(_2960, _2961, _2962)));
        float _2967 = _2966 * _2960;
        float _2968 = _2966 * _2961;
        float _2969 = _2966 * _2962;
        float _2970 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2940].xyz));
        float _4874 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
        float _2973 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
        float _2974 = dot(vec3(_790, _791, _792), vec3(_2967, _2968, _2969));
        float _4885 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
        float _2977 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
        float _2978 = dot(vec3(cbLight._m0[_2940].xyz), vec3(_2967, _2968, _2969));
        float _4896 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
        float _2982 = _2959 * _2959;
        float _2986 = ((_2977 * _2977) * (_2982 + (-1.0))) + 1.0;
        float _2993 = exp2(log2(1.0 - (isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0)))) * 5.0);
        float _3000 = 1.0 - _2959;
        float _3010 = (0.5 / (((_2627 * ((_2973 * _3000) + _2959)) + 9.9999999392252902907785028219223e-09) + (((_2627 * _3000) + _2959) * _2973))) * _2973;
        float _4907 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
        float _3012 = (isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0))) * (_2982 / ((_2986 * _2986) * 3.141590118408203125));
        float _3013 = isnan(1.0) ? _2367 : (isnan(_2367) ? 1.0 : min(_2367, 1.0));
        _2929 = (((((_2993 * _2649) + _1003) * cbLight._m0[_2944].x) * _3012) * _3013) + _2819;
        _2931 = (((((_2993 * _2651) + _1005) * cbLight._m0[_2944].y) * _3012) * _3013) + _2821;
        _2933 = (((((_2993 * _2652) + _1006) * cbLight._m0[_2944].z) * _3012) * _3013) + _2823;
    }
    float _3078;
    float _3080;
    float _3082;
    float _3084;
    float _3086;
    float _3088;
    if (_2349.y == 0u)
    {
        uvec4 _3034 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3035 = _3034.x;
        uint _3046 = uint((float(_3034.y) * floor(float(uint(cbSceneParam._m0[85u].y * _892) / _3035))) + floor(float(uint(cbSceneParam._m0[85u].x * _891) / _3035)));
        float _3056 = (log2(_2127 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3057 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
        uint _3060 = uint(isnan(14.0) ? _3057 : (isnan(_3057) ? 14.0 : min(_3057, 14.0)));
        uvec4 _3065 = texelFetch(g_lightClusterGridBuffer, int(((_3060 << 2u) + (_3046 << 6u)) >> 2u));
        uint _3066 = _3065.x;
        uint _3067 = _3034.z;
        float _3147;
        float _3149;
        float _3151;
        float _3153;
        float _3155;
        float _3157;
        if (((((1u << ((_3067 >> 4u) & 15u)) + 4294967295u) & _3066) == 0u) || ((_3067 & 240u) == 0u))
        {
            _3147 = 0.0;
            _3149 = 0.0;
            _3151 = 0.0;
            _3153 = 0.0;
            _3155 = 0.0;
            _3157 = 0.0;
        }
        else
        {
            float _3148;
            float _3150;
            float _3152;
            float _3154;
            float _3156;
            float _3158;
            float _3299 = 0.0;
            float _3300 = 0.0;
            float _3301 = 0.0;
            float _3302 = 0.0;
            float _3303 = 0.0;
            float _3304 = 0.0;
            uint _3305 = 0u;
            uint _3314;
            bool _3315;
            for (;;)
            {
                _3314 = texelFetch(g_lightClassification, int((((_3060 << 5u) + (_3046 << 9u)) + (_3305 << 2u)) >> 2u)).x;
                _3315 = _3314 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3315)
                {
                    frontier_phi_73_pred = _3304;
                    frontier_phi_73_pred_1 = _3303;
                    frontier_phi_73_pred_2 = _3302;
                    frontier_phi_73_pred_3 = _3301;
                    frontier_phi_73_pred_4 = _3300;
                    frontier_phi_73_pred_5 = _3299;
                }
                else
                {
                    float _3444;
                    float _3445;
                    float _3446;
                    float _3447;
                    float _3448;
                    float _3449;
                    uint _3450;
                    _3444 = _3299;
                    _3445 = _3300;
                    _3446 = _3301;
                    _3447 = _3302;
                    _3448 = _3303;
                    _3449 = _3304;
                    _3450 = _3314;
                    float _3371;
                    float _3372;
                    float _3373;
                    float _3374;
                    float _3375;
                    float _3376;
                    for (;;)
                    {
                        uint _3454 = uint(findLSB(_3450)) + (_3305 << 5u);
                        uint _3451 = (_3450 + 4294967295u) & _3450;
                        uint _3456 = _3454 * 48u;
                        vec4 _3470 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3456)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 3u)).x));
                        uint _3476 = (_3454 * 48u) + 4u;
                        vec4 _3489 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3476)).x, texelFetch(g_PointLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3476 + 3u)).x));
                        uint _3495 = (_3454 * 48u) + 8u;
                        vec3 _3506 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3495)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 2u)).x));
                        float _3510 = _3470.x - _2125;
                        float _3511 = _3470.y - _2126;
                        float _3512 = _3470.z - _2127;
                        float _3513 = dot(vec3(_3510, _3511, _3512), vec3(_3510, _3511, _3512));
                        float _3516 = inversesqrt(_3513);
                        float _3517 = _3516 * _3510;
                        float _3518 = _3516 * _3511;
                        float _3519 = _3516 * _3512;
                        float _3520 = dot(vec3(_914, _917, _920), vec3(_3517, _3518, _3519));
                        float _3525 = 1.0 - (_3513 * _3470.w);
                        float _4933 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                        float _3526 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                        float _3527 = sqrt(_3513) * _3489.w;
                        float _3530 = 1.39999997615814208984375 / (_3527 + 1.39999997615814208984375);
                        float _3531 = _3530 * _3530;
                        float _3534 = ((1.0 - _3531) * _3520) + _3531;
                        float _3537 = _3527 * _3527;
                        float _3541 = ((isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0))) * _3526) / ((_3537 * 0.699999988079071044921875) + 1.0);
                        float _3545 = (-0.0) - _2125;
                        float _3546 = (-0.0) - _2126;
                        float _3547 = (-0.0) - _2127;
                        float _3551 = inversesqrt(dot(vec3(_3545, _3546, _3547), vec3(_3545, _3546, _3547)));
                        float _3552 = _3551 * _3545;
                        float _3553 = _3551 * _3546;
                        float _3554 = _3551 * _3547;
                        float _3561 = exp2(log2(1.0 / ((_3537 * 3.5) + 5.0)) * 0.25);
                        float _3562 = 1.0 - _1034;
                        float _3569 = sqrt(1.0 - ((1.0 - (_3562 * _3562)) * (1.0 - (_3561 * _3561))));
                        float _3570 = _3569 * _3569;
                        float _3571 = _3570 * _3570;
                        float _3572 = _3552 + _3517;
                        float _3573 = _3553 + _3518;
                        float _3574 = _3554 + _3519;
                        float _3578 = inversesqrt(dot(vec3(_3572, _3573, _3574), vec3(_3572, _3573, _3574)));
                        float _3582 = dot(vec3(_914, _917, _920), vec3(_3552, _3553, _3554));
                        float _4949 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                        float _3585 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                        float _3586 = dot(vec3(_914, _917, _920), vec3(_3578 * _3572, _3578 * _3573, _3578 * _3574));
                        float _4960 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                        float _3589 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                        float _3593 = ((_3589 * _3589) * (_3571 + (-1.0))) + 1.0;
                        float _3594 = _3530 * _3570;
                        float _3595 = _3594 * _3594;
                        float _3598 = ((1.0 - _3595) * _3520) + _3595;
                        float _4971 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                        float _3599 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                        float _3600 = 1.0 - _3570;
                        float _3610 = (0.5 / (((_3599 * ((_3585 * _3600) + _3570)) + 9.9999999392252902907785028219223e-09) + (((_3599 * _3600) + _3570) * _3585))) * _3599;
                        float _4982 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                        float _3621 = (((_3571 * 3.1415927410125732421875) * (isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0)))) / ((_3593 * _3593) * ((_3537 * 2.1991131305694580078125) + 3.141590118408203125))) * _3526;
                        _3374 = (_3541 * _3489.x) + _3447;
                        _3375 = (_3541 * _3489.y) + _3448;
                        _3376 = (_3541 * _3489.z) + _3449;
                        _3371 = (_3621 * _3506.x) + _3444;
                        _3372 = (_3621 * _3506.y) + _3445;
                        _3373 = (_3621 * _3506.z) + _3446;
                        if (_3451 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3444 = _3371;
                            _3445 = _3372;
                            _3446 = _3373;
                            _3447 = _3374;
                            _3448 = _3375;
                            _3449 = _3376;
                            _3450 = _3451;
                        }
                    }
                    frontier_phi_73_pred = _3376;
                    frontier_phi_73_pred_1 = _3375;
                    frontier_phi_73_pred_2 = _3374;
                    frontier_phi_73_pred_3 = _3373;
                    frontier_phi_73_pred_4 = _3372;
                    frontier_phi_73_pred_5 = _3371;
                }
                _3158 = frontier_phi_73_pred;
                _3156 = frontier_phi_73_pred_1;
                _3154 = frontier_phi_73_pred_2;
                _3152 = frontier_phi_73_pred_3;
                _3150 = frontier_phi_73_pred_4;
                _3148 = frontier_phi_73_pred_5;
                uint _3306 = _3305 + 1u;
                if (_3306 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3299 = _3148;
                    _3300 = _3150;
                    _3301 = _3152;
                    _3302 = _3154;
                    _3303 = _3156;
                    _3304 = _3158;
                    _3305 = _3306;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3147 = _3148;
            _3149 = _3150;
            _3151 = _3152;
            _3153 = _3154;
            _3155 = _3156;
            _3157 = _3158;
        }
        uvec4 _3161 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3162 = _3161.z;
        uint _3164 = (_3162 >> 8u) & 15u;
        float _3267;
        float _3269;
        float _3271;
        float _3273;
        float _3275;
        float _3277;
        if (((4294967295u << _3164) & _3066) == 0u)
        {
            _3267 = _3147;
            _3269 = _3149;
            _3271 = _3151;
            _3273 = _3153;
            _3275 = _3155;
            _3277 = _3157;
        }
        else
        {
            float _3292 = inversesqrt(dot(vec3(_2125, _2126, _2127), vec3(_2125, _2126, _2127)));
            float _3293 = _3292 * _2125;
            float _3294 = _3292 * _2126;
            float _3295 = _3292 * _2127;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3164 < ((_3162 >> 12u) & 15u))
            {
                float _3268;
                float _3270;
                float _3272;
                float _3274;
                float _3276;
                float _3278;
                float _3427 = _3147;
                float _3428 = _3149;
                float _3429 = _3151;
                float _3430 = _3153;
                float _3431 = _3155;
                float _3432 = _3157;
                uint _3433 = _3164;
                uint _3442;
                bool _3443;
                for (;;)
                {
                    _3442 = texelFetch(g_lightClassification, int((((_3060 << 5u) + (_3046 << 9u)) + (_3433 << 2u)) >> 2u)).x;
                    _3443 = _3442 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3443)
                    {
                        frontier_phi_84_pred = _3431;
                        frontier_phi_84_pred_1 = _3430;
                        frontier_phi_84_pred_2 = _3429;
                        frontier_phi_84_pred_3 = _3428;
                        frontier_phi_84_pred_4 = _3427;
                        frontier_phi_84_pred_5 = _3432;
                    }
                    else
                    {
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3929;
                        float _3930;
                        float _3931;
                        float _3932;
                        float _3933;
                        float _3934;
                        float _3648 = _3427;
                        float _3649 = _3428;
                        float _3650 = _3429;
                        float _3651 = _3430;
                        float _3652 = _3431;
                        float _3653 = _3432;
                        uint _3654 = _3442;
                        uint _3655;
                        vec4 _3680;
                        float _3681;
                        vec4 _3696;
                        vec3 _3708;
                        vec4 _3723;
                        vec4 _3738;
                        float _3785;
                        bool _3786;
                        for (;;)
                        {
                            uint _3665 = ((_3433 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3654));
                            _3655 = (_3654 + 4294967295u) & _3654;
                            uint _3667 = _3665 * 40u;
                            _3680 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 3u)).x));
                            _3681 = _3680.w;
                            uint _3683 = (_3665 * 40u) + 4u;
                            _3696 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 3u)).x));
                            uint _3698 = (_3665 * 40u) + 8u;
                            _3708 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 2u)).x));
                            uint _3710 = (_3665 * 40u) + 16u;
                            _3723 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3710)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 3u)).x));
                            uint _3725 = (_3665 * 40u) + 20u;
                            _3738 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3725)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 3u)).x));
                            uint _3741 = (_3665 * 40u) + 24u;
                            vec4 _3754 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3741)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 3u)).x));
                            uint _3760 = (_3665 * 40u) + 28u;
                            vec4 _3773 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3760)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 3u)).x));
                            _3785 = fma(_2127, _3773.z, fma(_2126, _3773.y, _3773.x * _2125)) + _3773.w;
                            _3786 = !((fma(_2127, _3754.z, fma(_2126, _3754.y, _3754.x * _2125)) + _3754.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3786)
                            {
                                float _3813 = _3680.x - _2125;
                                float _3814 = _3680.y - _2126;
                                float _3815 = _3680.z - _2127;
                                float _3816 = dot(vec3(_3813, _3814, _3815), vec3(_3813, _3814, _3815));
                                float _3819 = inversesqrt(_3816);
                                float _3820 = _3819 * _3813;
                                float _3821 = _3819 * _3814;
                                float _3822 = _3819 * _3815;
                                float _3826 = 1.0 - (_3816 / (_3681 * _3681));
                                float _4993 = isnan(0.0) ? _3826 : (isnan(_3826) ? 0.0 : max(_3826, 0.0));
                                float _3827 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
                                float _3831 = sqrt(_3816) * _3696.w;
                                float _3833 = 1.39999997615814208984375 / (_3831 + 1.39999997615814208984375);
                                float _3834 = _3833 * _3833;
                                float _3837 = ((1.0 - _3834) * dot(vec3(_3820, _3821, _3822), vec3(_914, _917, _920))) + _3834;
                                float _3840 = _3831 * _3831;
                                float _3844 = (fma(_2127, _3723.z, fma(_2126, _3723.y, _3723.x * _2125)) + _3723.w) / _3785;
                                float _3845 = (fma(_2127, _3738.z, fma(_2126, _3738.y, _3738.x * _2125)) + _3738.w) / _3785;
                                float _3849 = 1.0 - dot(vec2(_3844, _3845), vec2(_3844, _3845));
                                float _5009 = isnan(0.0) ? _3849 : (isnan(_3849) ? 0.0 : max(_3849, 0.0));
                                float _3850 = isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0));
                                float _3851 = _3850 * (((isnan(0.0) ? _3837 : (isnan(_3837) ? 0.0 : max(_3837, 0.0))) * _3827) / ((_3840 * 0.699999988079071044921875) + 1.0));
                                float _3863 = exp2(log2(1.0 / ((_3840 * 3.5) + 5.0)) * 0.25);
                                float _3864 = 1.0 - _1034;
                                float _3871 = sqrt(1.0 - ((1.0 - (_3864 * _3864)) * (1.0 - (_3863 * _3863))));
                                float _3872 = _3871 * _3871;
                                float _3873 = _3872 * _3872;
                                float _3874 = _3820 - _3293;
                                float _3875 = _3821 - _3294;
                                float _3876 = _3822 - _3295;
                                float _3880 = inversesqrt(dot(vec3(_3874, _3875, _3876), vec3(_3874, _3875, _3876)));
                                float _3884 = dot(vec3(_914, _917, _920), vec3((-0.0) - _3293, (-0.0) - _3294, (-0.0) - _3295));
                                float _5020 = isnan(0.0) ? _3884 : (isnan(_3884) ? 0.0 : max(_3884, 0.0));
                                float _3887 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
                                float _3888 = dot(vec3(_914, _917, _920), vec3(_3880 * _3874, _3880 * _3875, _3880 * _3876));
                                float _5031 = isnan(0.0) ? _3888 : (isnan(_3888) ? 0.0 : max(_3888, 0.0));
                                float _3891 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
                                float _3895 = ((_3891 * _3891) * (_3873 + (-1.0))) + 1.0;
                                float _3896 = _3833 * _3872;
                                float _3897 = _3896 * _3896;
                                float _3903 = ((1.0 - _3897) * dot(vec3(_914, _917, _920), vec3(_3820, _3821, _3822))) + _3897;
                                float _5042 = isnan(0.0) ? _3903 : (isnan(_3903) ? 0.0 : max(_3903, 0.0));
                                float _3904 = isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0));
                                float _3905 = 1.0 - _3872;
                                float _3915 = (0.5 / (((_3904 * ((_3887 * _3905) + _3872)) + 9.9999999392252902907785028219223e-09) + (((_3904 * _3905) + _3872) * _3887))) * _3904;
                                float _5053 = isnan(0.0) ? _3915 : (isnan(_3915) ? 0.0 : max(_3915, 0.0));
                                float _3925 = (_3850 * _3827) * (((_3873 * 3.1415927410125732421875) * (isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0)))) / ((_3895 * _3895) * ((_3840 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3851 * _3696.y;
                                frontier_phi_90_pred_1 = _3851 * _3696.x;
                                frontier_phi_90_pred_2 = _3925 * _3708.z;
                                frontier_phi_90_pred_3 = _3925 * _3708.y;
                                frontier_phi_90_pred_4 = _3925 * _3708.x;
                                frontier_phi_90_pred_5 = _3851 * _3696.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3933 = frontier_phi_90_pred;
                            _3932 = frontier_phi_90_pred_1;
                            _3931 = frontier_phi_90_pred_2;
                            _3930 = frontier_phi_90_pred_3;
                            _3929 = frontier_phi_90_pred_4;
                            _3934 = frontier_phi_90_pred_5;
                            _3638 = _3932 + _3651;
                            _3639 = _3933 + _3652;
                            _3640 = _3934 + _3653;
                            _3635 = _3929 + _3648;
                            _3636 = _3930 + _3649;
                            _3637 = _3931 + _3650;
                            if (_3655 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3648 = _3635;
                                _3649 = _3636;
                                _3650 = _3637;
                                _3651 = _3638;
                                _3652 = _3639;
                                _3653 = _3640;
                                _3654 = _3655;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3639;
                        frontier_phi_84_pred_1 = _3638;
                        frontier_phi_84_pred_2 = _3637;
                        frontier_phi_84_pred_3 = _3636;
                        frontier_phi_84_pred_4 = _3635;
                        frontier_phi_84_pred_5 = _3640;
                    }
                    _3276 = frontier_phi_84_pred;
                    _3274 = frontier_phi_84_pred_1;
                    _3272 = frontier_phi_84_pred_2;
                    _3270 = frontier_phi_84_pred_3;
                    _3268 = frontier_phi_84_pred_4;
                    _3278 = frontier_phi_84_pred_5;
                    uint _3434 = _3433 + 1u;
                    if (_3434 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3427 = _3268;
                        _3428 = _3270;
                        _3429 = _3272;
                        _3430 = _3274;
                        _3431 = _3276;
                        _3432 = _3278;
                        _3433 = _3434;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3278;
                frontier_phi_65_66_ladder_1 = _3274;
                frontier_phi_65_66_ladder_2 = _3276;
                frontier_phi_65_66_ladder_3 = _3270;
                frontier_phi_65_66_ladder_4 = _3268;
                frontier_phi_65_66_ladder_5 = _3272;
            }
            else
            {
                frontier_phi_65_66_ladder = _3157;
                frontier_phi_65_66_ladder_1 = _3153;
                frontier_phi_65_66_ladder_2 = _3155;
                frontier_phi_65_66_ladder_3 = _3149;
                frontier_phi_65_66_ladder_4 = _3147;
                frontier_phi_65_66_ladder_5 = _3151;
            }
            _3267 = frontier_phi_65_66_ladder_4;
            _3269 = frontier_phi_65_66_ladder_3;
            _3271 = frontier_phi_65_66_ladder_5;
            _3273 = frontier_phi_65_66_ladder_1;
            _3275 = frontier_phi_65_66_ladder_2;
            _3277 = frontier_phi_65_66_ladder;
        }
        float _3282 = isnan(1.0) ? _1018 : (isnan(_1018) ? 1.0 : min(_1018, 1.0));
        _3078 = (_3282 * _3273) + _2591;
        _3080 = (_3282 * _3275) + _2593;
        _3082 = (_3282 * _3277) + _2595;
        _3084 = ((_3267 * _1003) * _3282) + _2929;
        _3086 = ((_3269 * _1005) * _3282) + _2931;
        _3088 = ((_3271 * _1006) * _3282) + _2933;
    }
    else
    {
        _3078 = _2591;
        _3080 = _2593;
        _3082 = _2595;
        _3084 = _2929;
        _3086 = _2931;
        _3088 = _2933;
    }
    float _5069 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _5080 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _5091 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _5102 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _3106 = ((isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0))) * (_3078 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1018))) + ((_3084 + ((isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0))) * _1859)) * cbPerFrame._m0[3u].x);
    float _3107 = ((isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0))) * (_3080 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1018))) + ((_3086 + ((isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0))) * _1859)) * cbPerFrame._m0[3u].x);
    float _3108 = ((isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0))) * (_3082 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1018))) + ((_3088 + ((isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0))) * _1859)) * cbPerFrame._m0[3u].x);
    float _3113 = cbInstanceData._m0[_946 + 6u].w * (isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0)));
    float _3118 = _891 / cbSceneParam._m0[86u].x;
    float _3119 = _892 / cbSceneParam._m0[86u].y;
    vec4 _3133 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3118, _3119, (log2((isnan(cbSceneParam._m0[77u].w) ? _814 : (isnan(_814) ? cbSceneParam._m0[77u].w : min(_814, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3135 = _3133.x;
    float _3136 = _3133.y;
    float _3137 = _3133.z;
    float _3138 = _3133.w;
    float _3209;
    float _3211;
    float _3213;
    float _3215;
    if (_814 > cbSceneParam._m0[78u].w)
    {
        float _3172 = isnan(_814) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _814 : min(cbSceneParam._m0[80u].w, _814));
        float _3173 = _3172 / _814;
        float _3184 = _3173 * _864;
        float _3185 = _865 * _3173;
        float _3186 = (-0.0) - _3185;
        float _3187 = _3173 * _866;
        float _3189 = (cbSceneParam._m0[77u].w * _3186) / _3172;
        float _3190 = _3189 + cbSceneParam._m0[79u].w;
        float _3191 = cbSceneParam._m0[79u].w - _3185;
        float _3197 = sqrt(((_3184 * _3184) + (_3185 * _3185)) + (_3187 * _3187));
        float _3200 = (1.0 - (cbSceneParam._m0[77u].w / _3172)) * _3197;
        float _3205 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3207 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3384;
        if (abs((_3186 - _3189) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3384 = ((((_3190 > 0.0) ? exp2(_3205 * _3190) : (2.0 - exp2(_3207 * _3190))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3200;
        }
        else
        {
            float _3328 = 1.0 / cbSceneParam._m0[80u].x;
            float _3329 = isnan(_3191) ? _3190 : (isnan(_3190) ? _3191 : max(_3190, _3191));
            float _3330 = isnan(_3191) ? _3190 : (isnan(_3190) ? _3191 : min(_3190, _3191));
            float _3339 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : min(_3329, 0.0));
            float _3340 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : min(_3330, 0.0));
            _3384 = ((abs(_3197 / _3186) * cbSceneParam._m0[80u].y) * ((((_3339 - _3340) * 2.0) - ((exp2(_3205 * (isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0)))) - exp2(_3205 * (isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0))))) * _3328)) - ((exp2(_3207 * _3339) - exp2(_3207 * _3340)) * _3328))) + (_3200 * cbSceneParam._m0[80u].z);
        }
        vec4 _3386 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3118, _3119, 1.0), 0.0);
        float _3395 = exp2((_3384 * (-1.44269502162933349609375)) * (1.0 - _3386.w));
        float _3396 = log2(_3395);
        float _3412 = log2(_3138);
        _3209 = (exp2(_3412 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3396 * cbSceneParam._m0[78u].x)) * _3386.x) / cbSceneParam._m0[78u].x)) + _3135;
        _3211 = (exp2(_3412 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3396 * cbSceneParam._m0[78u].y)) * _3386.y) / cbSceneParam._m0[78u].y)) + _3136;
        _3213 = (exp2(_3412 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3396 * cbSceneParam._m0[78u].z)) * _3386.z) / cbSceneParam._m0[78u].z)) + _3137;
        _3215 = _3395 * _3138;
    }
    else
    {
        _3209 = _3135;
        _3211 = _3136;
        _3213 = _3137;
        _3215 = _3138;
    }
    bool _3422;
    vec4 _3225;
    vec4 _3247;
    float _3249;
    float _3253;
    float _3254;
    float _3255;
    float _3256;
    bool _3266;
    for (;;)
    {
        _3225 = cbMatDynParam._m0[0u];
        float _3227 = roundEven(_3225.y);
        bool _3228 = _3227 == 3.0;
        float _3229 = log2(_3215);
        float _3236 = exp2(_3229 * cbSceneParam._m0[78u].x) * _3106;
        float _3237 = exp2(_3229 * cbSceneParam._m0[78u].y) * _3107;
        float _3238 = exp2(_3229 * cbSceneParam._m0[78u].z) * _3108;
        float _3245 = _880 + (-0.5);
        _3247 = cbMtdParam._m0[1u];
        _3249 = _3247.y * _3245;
        float _3252 = (_3227 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3253 = _3252 * (_3228 ? _3236 : (_3236 + (cbSceneParam._m0[72u].w * _3209)));
        _3254 = _3252 * (_3228 ? _3237 : (_3237 + (cbSceneParam._m0[72u].w * _3211)));
        _3255 = _3252 * (_3228 ? _3238 : (_3238 + (cbSceneParam._m0[72u].w * _3213)));
        _3256 = _3245 * 0.999000012874603271484375;
        _3266 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3266)
        {
            if ((cbInstanceData._m0[_946 + 7u].x + _3256) < 0.5)
            {
                _3422 = true;
                break;
            }
        }
        uint _3363 = _947 + uint(_3225.w);
        if ((cbInstanceData._m0[_3363].w < 1.0) && ((cbInstanceData._m0[_3363].w + _3256) < 0.5))
        {
            _3422 = true;
            break;
        }
        if ((_3249 + _580) < _3247.x)
        {
            _3422 = true;
            break;
        }
        _3422 = false;
        break;
    }
    float _3626;
    if (_3422)
    {
        discard_state = true;
        _3626 = 0.0;
    }
    else
    {
        _3626 = _3113;
    }
    SV_Target.x = _3253;
    SV_Target.y = _3254;
    SV_Target.z = _3255;
    SV_Target.w = _3626;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3113;
    discard_exit();
}


