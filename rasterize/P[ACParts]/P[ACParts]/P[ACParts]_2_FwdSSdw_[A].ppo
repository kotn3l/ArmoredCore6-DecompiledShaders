#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_snp_0_Texture2D_2;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D P_ACParts_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D P_ACParts_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_snp_0_Texture2D_10;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_snp_0_Texture2D_13;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_snp_0_Texture2D_14;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_snp_0_Texture2D_15;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1419;
float _3826;
float _3827;
float _3828;
float _3829;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255;
    float _256;
    float _257;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _255 = (-0.0) - _241;
        _256 = (-0.0) - _242;
        _257 = (-0.0) - _243;
    }
    else
    {
        _255 = _241;
        _256 = _242;
        _257 = _243;
    }
    float _267 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    vec4 _280 = texture(sampler2D(P_ACParts_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_267 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _285 = _280.z;
    float _286 = _280.w;
    float _294 = exp2(log2(_285 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _295 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _296 = isnan(1.0) ? _295 : (isnan(_295) ? 1.0 : min(_295, 1.0));
    float _302 = exp2(log2(1.0 - _286) * cbMtdParam._m0[20u].y);
    vec4 _314 = texture(sampler2D(P_ACParts_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _267) + cbTextureTilingScale._m0[0u].w));
    float _203[6];
    float _204[6];
    float _205[6];
    _203[0u] = cbMtdParam._m0[12u].x;
    _204[0u] = cbMtdParam._m0[12u].y;
    _205[0u] = cbMtdParam._m0[12u].z;
    _203[1u] = cbMtdParam._m0[13u].x;
    _204[1u] = cbMtdParam._m0[13u].y;
    _205[1u] = cbMtdParam._m0[13u].z;
    _203[2u] = cbMtdParam._m0[14u].x;
    _204[2u] = cbMtdParam._m0[14u].y;
    _205[2u] = cbMtdParam._m0[14u].z;
    _203[3u] = cbMtdParam._m0[15u].x;
    _204[3u] = cbMtdParam._m0[15u].y;
    _205[3u] = cbMtdParam._m0[15u].z;
    _203[4u] = cbMtdParam._m0[16u].x;
    _204[4u] = cbMtdParam._m0[16u].y;
    _205[4u] = cbMtdParam._m0[16u].z;
    _203[5u] = cbMtdParam._m0[11u].x;
    _204[5u] = cbMtdParam._m0[11u].y;
    _205[5u] = cbMtdParam._m0[11u].z;
    vec4 _396 = texture(sampler2D(P_ACParts_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _398 = _396.x;
    float _399 = _396.y;
    float _427 = roundEven(((_398 + (-0.02500000037252902984619140625)) + ((_396.z * cbMtdParam._m0[19u].w) * (texture(sampler2D(P_ACParts_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, ((cbMtdParam._m0[19u].z * TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w)).x - _398))) * 6.0);
    float _428 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    uint _431 = uint(int(isnan(5.0) ? _428 : (isnan(_428) ? 5.0 : min(_428, 5.0))));
    vec4 _461 = texture(sampler2D(P_ACParts_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _267) + cbTextureTilingScale._m0[3u].w));
    float _471 = cbMtdParam._m0[9u].x * _461.x;
    float _472 = cbMtdParam._m0[9u].y * _461.y;
    float _473 = cbMtdParam._m0[9u].z * _461.z;
    float _480 = ((((((_203[_431] - cbMtdParam._m0[10u].x) * _399) + cbMtdParam._m0[10u].x) * _314.x) - _471) * _302) + _471;
    float _481 = ((((((_204[_431] - cbMtdParam._m0[10u].y) * _399) + cbMtdParam._m0[10u].y) * _314.y) - _472) * _302) + _472;
    float _482 = ((((((_205[_431] - cbMtdParam._m0[10u].z) * _399) + cbMtdParam._m0[10u].z) * _314.z) - _473) * _302) + _473;
    float _486 = exp2(log2(_286) * cbMtdParam._m0[21u].y);
    vec4 _498 = texture(sampler2D(P_ACParts_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _267) + cbTextureTilingScale._m0[10u].w));
    vec4 _531 = texture(sampler2D(P_ACParts_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _542 = cbMtdParam._m0[18u].x * _531.x;
    float _543 = cbMtdParam._m0[18u].y * _531.y;
    float _544 = cbMtdParam._m0[18u].z * _531.z;
    vec4 _565 = texture(sampler2D(P_ACParts_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _267) + cbTextureTilingScale._m0[1u].w));
    float _573 = ((((((((cbMtdParam._m0[17u].x * _498.x) - _480) * _486) + _480) - _542) * _296) + _542) * 4.55000019073486328125) * _565.x;
    float _575 = ((((((((cbMtdParam._m0[17u].y * _498.y) - _481) * _486) + _481) - _543) * _296) + _543) * 4.55000019073486328125) * _565.y;
    float _577 = ((((((((cbMtdParam._m0[17u].z * _498.z) - _482) * _486) + _482) - _544) * _296) + _544) * 4.55000019073486328125) * _565.z;
    float _578 = _565.w * _314.w;
    vec4 _590 = texture(sampler2D(P_ACParts_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    float _592 = _590.x;
    float _610 = (((1.0 - _592) + texture(sampler2D(P_ACParts_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w)).x) * _296) + _592;
    vec4 _622 = texture(sampler2D(P_ACParts_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _267) + cbTextureTilingScale._m0[6u].w));
    float _629 = (((_622.x - _610) + cbMtdParam._m0[20u].z) * _302) + _610;
    float _652 = (((texture(sampler2D(P_ACParts_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - _629) + cbMtdParam._m0[22u].y) * _486) + _629;
    vec4 _664 = texture(sampler2D(P_ACParts_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _267) + cbTextureTilingScale._m0[12u].w));
    vec4 _682 = texture(sampler2D(P_ACParts_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _267) + cbTextureTilingScale._m0[13u].w));
    float _684 = _682.x;
    float _685 = _682.y;
    float _688 = cbMtdParam._m0[19u].x + _682.z;
    float _691 = (((cbMtdParam._m0[20u].x + _664.z) - _688) * _302) + _688;
    vec4 _703 = texture(sampler2D(P_ACParts_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _267) + cbTextureTilingScale._m0[14u].w));
    vec4 _727 = texture(sampler2D(P_ACParts_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _729 = _727.x;
    float _730 = _727.y;
    float _733 = cbMtdParam._m0[21u].x + _727.z;
    float _736 = ((((_285 * 2.0) * ((((_703.z - _691) + cbMtdParam._m0[22u].x) * _486) + _691)) - _733) * _296) + _733;
    float _747 = ((_664.x - _684) * _302) + _684;
    float _748 = ((_664.y - _685) * _302) + _685;
    float _763 = (((((((_703.x - _747) * _486) + _747) - _729) * _296) + _729) * 2.0) + (-1.0);
    float _764 = (((((((_703.y - _748) * _486) + _748) - _730) * _296) + _730) * 2.0) + (-1.0);
    float _765 = dot(vec2(_763, _764), vec2(_763, _764));
    float _3858 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _770 = sqrt(1.0 - (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))));
    float _773 = _763 + (cbMtdParam._m0[21u].w * ((_280.x * 2.0) + (-1.0)));
    float _774 = _764 + (cbMtdParam._m0[21u].w * ((_280.y * 2.0) + (-1.0)));
    float _777 = fma(_770, _255, fma(_774, _247 * TANGENT.x, (_233 * _225) * _773));
    float _780 = fma(_770, _256, fma(_774, _247 * TANGENT.y, (_233 * _226) * _773));
    float _783 = fma(_770, _257, fma(_774, _247 * TANGENT.z, (_233 * _227) * _773));
    float _787 = inversesqrt(dot(vec3(_777, _780, _783), vec3(_777, _780, _783)));
    float _788 = _787 * _777;
    float _789 = _787 * _780;
    float _790 = _787 * _783;
    float _3869 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _791 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _3880 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _792 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _3891 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3902 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _3913 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _3924 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _796 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _812 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _862 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _852);
    float _863 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _852);
    float _864 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _852);
    float _868 = inversesqrt(dot(vec3(_862, _863, _864), vec3(_862, _863, _864)));
    float _869 = _862 * _868;
    float _870 = _863 * _868;
    float _871 = _864 * _868;
    vec4 _876 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _878 = _876.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1098 = sqrt(((_862 * _862) + (_863 * _863)) + (_864 * _864));
        float _1104 = (cbMatDynParam._m0[5u].x * _1098) + cbMatDynParam._m0[5u].y;
        float _3935 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1109 = (cbMatDynParam._m0[5u].z * _1098) + cbMatDynParam._m0[5u].w;
        float _3946 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) - _1105)) + _1105) < ((_878 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _889 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _890 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _892 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _894 = _892.w;
    float _912 = fma(_790, cbSceneParam._m0[5u].z, fma(_789, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _788));
    float _915 = fma(_790, cbSceneParam._m0[6u].z, fma(_789, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _788));
    float _918 = fma(_790, cbSceneParam._m0[7u].z, fma(_789, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _788));
    vec4 _920 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _931 = (((_920.y - _792) + (_920.w * _792)) * cbMtdParam._m0[3u].x) + _792;
    uint _944 = uint(roundEven(NORMAL.w)) * 13u;
    uint _945 = _944 + 9u;
    uint _946 = _945 + uint(cbMatDynParam._m0[0u].w);
    float _952 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) * cbInstanceData._m0[_946].x;
    float _953 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * cbInstanceData._m0[_946].y;
    float _954 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * cbInstanceData._m0[_946].z;
    float _3957 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _955 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _3968 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _956 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _3979 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _957 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    vec4 _958 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _963 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _974 = (((_963.x - _796) + (_963.w * _796)) * cbMtdParam._m0[3u].x) + _796;
    float _987 = (cbMtdParam._m0[3u].x * (((_955 * _894) - _955) + _958.x)) + _955;
    float _988 = (cbMtdParam._m0[3u].x * (((_956 * _894) - _956) + _958.y)) + _956;
    float _989 = (cbMtdParam._m0[3u].x * (((_957 * _894) - _957) + _958.z)) + _957;
    float _990 = 1.0 - _974;
    float _991 = _990 * _987;
    float _992 = _990 * _988;
    float _993 = _990 * _989;
    float _998 = (_987 + (-0.039999999105930328369140625)) * _974;
    float _999 = (_988 + (-0.039999999105930328369140625)) * _974;
    float _1000 = (_989 + (-0.039999999105930328369140625)) * _974;
    float _1001 = _998 + 0.039999999105930328369140625;
    float _1003 = _999 + 0.039999999105930328369140625;
    float _1004 = _1000 + 0.039999999105930328369140625;
    vec4 _1013 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _889, cbSceneParam._m0[86u].y * _890));
    float _1016 = _1013.x * TEXCOORD_4;
    float _1017 = dot(vec3(_788, _789, _790), vec3(_869, _870, _871));
    float _1020 = _1017 * 2.0;
    float _1024 = (_1020 * _788) - _869;
    float _1025 = (_1020 * _789) - _870;
    float _1026 = (_1020 * _790) - _871;
    float _1030 = abs(dot(vec3(_869, _870, _871), vec3(_788, _789, _790)));
    float _3990 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1032 = sqrt(_931);
    float _1044 = exp2((_1032 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1032 * 3.0));
    float _1050 = (1.0 - _1044) * ((_1032 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1051 = _1044 * _1032;
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1083 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1087 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1418;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1143 = fma(_1087, cbModelParam._m0[26u].z, fma(_1083, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1079));
        float _1147 = fma(_1087, cbModelParam._m0[27u].z, fma(_1083, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1079));
        float _1151 = fma(_1087, cbModelParam._m0[28u].z, fma(_1083, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1079));
        float _1176 = _1079 + _788;
        float _1177 = _1083 + _789;
        float _1178 = _1087 + _790;
        float _1188 = fma(_1178, cbModelParam._m0[26u].z, fma(_1177, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1176)) - _1143;
        float _1189 = fma(_1178, cbModelParam._m0[27u].z, fma(_1177, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1176)) - _1147;
        float _1190 = fma(_1178, cbModelParam._m0[28u].z, fma(_1177, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1176)) - _1151;
        float _1194 = inversesqrt(dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190)));
        float _1207 = ((_1194 * _1188) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1143 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1208 = ((_1194 * _1189) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1147 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1209 = ((_1194 * _1190) / cbModelParam._m0[34u].z) + ((((((_1151 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        float _1246 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1212.x + (-0.5));
        float _1248 = _1246 * (_1212.y + (-0.5));
        float _1249 = _1246 * (_1212.z + (-0.5));
        float _1256 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1219.x + (-0.5));
        float _1258 = _1256 * (_1219.y + (-0.5));
        float _1259 = _1256 * (_1219.z + (-0.5));
        float _1266 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1226.x + (-0.5));
        float _1268 = _1266 * (_1226.y + (-0.5));
        float _1269 = _1266 * (_1226.z + (-0.5));
        float _1276 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1233.x + (-0.5));
        float _1278 = _1276 * (_1233.y + (-0.5));
        float _1279 = _1276 * (_1233.z + (-0.5));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = _1247 * 0.5;
        float _1284 = _1257 * 0.5;
        float _1285 = _1267 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1300 = (dot(vec3(_788, _789, _790), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1310 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _4038 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1312 + 1.0))) + _1317) * _1280;
        float _1327 = _1248 * 0.5;
        float _1328 = _1258 * 0.5;
        float _1329 = _1268 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1343 = (dot(vec3(_788, _789, _790), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1352 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _4071 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1354 + 1.0))) + _1359) * _1281;
        float _1369 = _1249 * 0.5;
        float _1370 = _1259 * 0.5;
        float _1371 = _1269 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_788, _789, _790), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _4104 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1396 + 1.0))) + _1401) * _1282;
        _1418 = _1249;
        _1420 = _1248;
        _1421 = _1247;
        _1422 = _1259;
        _1423 = _1258;
        _1424 = _1257;
        _1425 = _1269;
        _1426 = _1268;
        _1427 = _1267;
        _1428 = _1282;
        _1429 = _1281;
        _1430 = _1280;
        _1431 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
        _1432 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
        _1433 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
    }
    else
    {
        _1418 = _1419;
        _1420 = _1419;
        _1421 = _1419;
        _1422 = _1419;
        _1423 = _1419;
        _1424 = _1419;
        _1425 = _1419;
        _1426 = _1419;
        _1427 = _1419;
        _1428 = _1419;
        _1429 = _1419;
        _1430 = _1419;
        _1431 = 0.0;
        _1432 = 0.0;
        _1433 = 0.0;
    }
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1462 = fma(_1087, cbModelParam._m0[30u].z, fma(_1083, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1079));
        float _1466 = fma(_1087, cbModelParam._m0[31u].z, fma(_1083, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1079));
        float _1470 = fma(_1087, cbModelParam._m0[32u].z, fma(_1083, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1079));
        float _1493 = _1079 + _788;
        float _1494 = _1083 + _789;
        float _1495 = _1087 + _790;
        float _1505 = fma(_1495, cbModelParam._m0[30u].z, fma(_1494, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1493)) - _1462;
        float _1506 = fma(_1495, cbModelParam._m0[31u].z, fma(_1494, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1493)) - _1466;
        float _1507 = fma(_1495, cbModelParam._m0[32u].z, fma(_1494, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1493)) - _1470;
        float _1511 = inversesqrt(dot(vec3(_1505, _1506, _1507), vec3(_1505, _1506, _1507)));
        float _1524 = ((_1511 * _1505) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1462 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1525 = ((_1511 * _1506) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1466 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1526 = ((_1511 * _1507) / cbModelParam._m0[35u].z) + ((((((_1470 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1528 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        vec4 _1542 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        vec4 _1549 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        float _1561 = exp2((_1528.w + (-0.5)) * 20.0) * 2.0;
        float _1562 = _1561 * (_1528.x + (-0.5));
        float _1563 = _1561 * (_1528.y + (-0.5));
        float _1564 = _1561 * (_1528.z + (-0.5));
        float _1571 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1572 = _1571 * (_1535.x + (-0.5));
        float _1573 = _1571 * (_1535.y + (-0.5));
        float _1574 = _1571 * (_1535.z + (-0.5));
        float _1581 = exp2((_1542.w + (-0.5)) * 20.0) * 2.0;
        float _1582 = _1581 * (_1542.x + (-0.5));
        float _1583 = _1581 * (_1542.y + (-0.5));
        float _1584 = _1581 * (_1542.z + (-0.5));
        float _1591 = exp2((_1549.w + (-0.5)) * 20.0) * 2.0;
        float _1592 = _1591 * (_1549.x + (-0.5));
        float _1593 = _1591 * (_1549.y + (-0.5));
        float _1594 = _1591 * (_1549.z + (-0.5));
        float _1595 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1596 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1597 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1598 = _1562 * 0.5;
        float _1599 = _1572 * 0.5;
        float _1600 = _1582 * 0.5;
        float _1601 = dot(vec3(_1598, _1599, _1600), vec3(_1598, _1599, _1600));
        float _1606 = (_1601 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1601);
        float _1614 = (dot(vec3(_788, _789, _790), vec3(_1606 * _1598, _1606 * _1599, _1606 * _1600)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1623 = sqrt(((_1599 * _1599) + (_1598 * _1598)) + (_1600 * _1600)) / (_1595 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1625 = _1624 * 2.0;
        float _1629 = (1.0 - _1624) / (_1624 + 1.0);
        float _4167 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1639 = ((((1.0 - _1630) * (_1625 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1625 + 1.0))) + _1630) * _1595;
        float _1640 = _1563 * 0.5;
        float _1641 = _1573 * 0.5;
        float _1642 = _1583 * 0.5;
        float _1643 = dot(vec3(_1640, _1641, _1642), vec3(_1640, _1641, _1642));
        float _1648 = (_1643 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1643);
        float _1656 = (dot(vec3(_788, _789, _790), vec3(_1648 * _1640, _1648 * _1641, _1648 * _1642)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1665 = sqrt(((_1641 * _1641) + (_1640 * _1640)) + (_1642 * _1642)) / (_1596 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1667 = _1666 * 2.0;
        float _1671 = (1.0 - _1666) / (_1666 + 1.0);
        float _4200 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1681 = ((((1.0 - _1672) * (_1667 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1667 + 1.0))) + _1672) * _1596;
        float _1682 = _1564 * 0.5;
        float _1683 = _1574 * 0.5;
        float _1684 = _1584 * 0.5;
        float _1685 = dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684));
        float _1690 = (_1685 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1685);
        float _1698 = (dot(vec3(_788, _789, _790), vec3(_1690 * _1682, _1690 * _1683, _1690 * _1684)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1707 = sqrt(((_1683 * _1683) + (_1682 * _1682)) + (_1684 * _1684)) / (_1597 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1709 = _1708 * 2.0;
        float _1713 = (1.0 - _1708) / (_1708 + 1.0);
        float _4233 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1723 = ((((1.0 - _1714) * (_1709 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1709 + 1.0))) + _1714) * _1597;
        _1731 = _1564;
        _1732 = _1563;
        _1733 = _1562;
        _1734 = _1574;
        _1735 = _1573;
        _1736 = _1572;
        _1737 = _1584;
        _1738 = _1583;
        _1739 = _1582;
        _1740 = _1597;
        _1741 = _1596;
        _1742 = _1595;
        _1743 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)));
        _1744 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)));
        _1745 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)));
    }
    else
    {
        _1731 = _1419;
        _1732 = _1419;
        _1733 = _1419;
        _1734 = _1419;
        _1735 = _1419;
        _1736 = _1419;
        _1737 = _1419;
        _1738 = _1419;
        _1739 = _1419;
        _1740 = _1419;
        _1741 = _1419;
        _1742 = _1419;
        _1743 = 0.0;
        _1744 = 0.0;
        _1745 = 0.0;
    }
    float _1755 = (cbModelParam._m0[1u].x * (_1743 - _1431)) + _1431;
    float _1756 = (cbModelParam._m0[1u].x * (_1744 - _1432)) + _1432;
    float _1757 = (cbModelParam._m0[1u].x * (_1745 - _1433)) + _1433;
    float _1778 = fma(_1757, cbSceneParam._m0[89u].z, fma(_1756, cbSceneParam._m0[89u].y, _1755 * cbSceneParam._m0[89u].x));
    float _1781 = fma(_1757, cbSceneParam._m0[90u].z, fma(_1756, cbSceneParam._m0[90u].y, _1755 * cbSceneParam._m0[90u].x));
    float _1784 = fma(_1757, cbSceneParam._m0[91u].z, fma(_1756, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1755));
    float _1799 = _1024 * 0.5;
    float _1800 = _1025 * 0.5;
    float _1801 = _1026 * 0.5;
    float _1802 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1733, _1736, _1739, _1742));
    float _1805 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1732, _1735, _1738, _1741));
    float _1808 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1731, _1734, _1737, _1740));
    float _1842;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1815 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1418, _1422, _1425, _1428));
        float _1819 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1420, _1423, _1426, _1429));
        float _1823 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1421, _1424, _1427, _1430));
        float _1830 = dot(vec4(cbModelParam._m0[39u]), vec4(_1799, _1800, _1801, 1.0));
        _1842 = dot(vec3(isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)), isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0)), isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1830) ? 0.0 : (isnan(0.0) ? _1830 : max(0.0, _1830))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1842 = 1.0;
    }
    float _1853;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1844 = dot(vec4(cbModelParam._m0[40u]), vec4(_1799, _1800, _1801, 1.0));
        _1853 = dot(vec3(isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0)), isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)), isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1844) ? 0.0 : (isnan(0.0) ? _1844 : max(0.0, _1844))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1853 = 1.0;
    }
    float _1857 = (_1853 * cbModelParam._m0[1u].x) + (_1842 * (1.0 - cbModelParam._m0[1u].x));
    float _1867 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _931);
    float _1868 = isnan(_1867) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1867 : min(cbModelParam._m0[25u].z, _1867));
    float _1948;
    float _1950;
    float _1952;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1915 = fma(_1087, cbModelParam._m0[13u].z, fma(_1083, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1079)) + cbModelParam._m0[13u].w;
        float _1919 = fma(_1087, cbModelParam._m0[14u].z, fma(_1083, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1079)) + cbModelParam._m0[14u].w;
        float _1923 = fma(_1087, cbModelParam._m0[15u].z, fma(_1083, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1079)) + cbModelParam._m0[15u].w;
        float _1926 = fma(_1026, cbModelParam._m0[13u].z, fma(_1025, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1024));
        float _1929 = fma(_1026, cbModelParam._m0[14u].z, fma(_1025, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1024));
        float _1932 = fma(_1026, cbModelParam._m0[15u].z, fma(_1025, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1024));
        float _1960;
        if (_1926 > 0.0)
        {
            _1960 = abs((1.0 - _1915) / _1926);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1915 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1960 = frontier_phi_19_17_ladder;
        }
        float _2183;
        if (_1929 > 0.0)
        {
            _2183 = abs((1.0 - _1919) / _1929);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1919 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2183 = frontier_phi_28_24_ladder;
        }
        float _2440;
        if (_1932 > 0.0)
        {
            _2440 = abs((1.0 - _1923) / _1932);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1923 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2440 = frontier_phi_40_35_ladder;
        }
        float _2442 = isnan(_2183) ? _1960 : (isnan(_1960) ? _2183 : min(_1960, _2183));
        float _2443 = isnan(_2440) ? _2442 : (isnan(_2442) ? _2440 : min(_2442, _2440));
        float _2447 = (_2443 * _1926) + _1915;
        float _2448 = (_2443 * _1929) + _1919;
        float _2449 = (_2443 * _1932) + _1923;
        float _2450 = _2443 * 9.9999997473787516355514526367188e-05;
        float _2452 = (-1.0) - _2450;
        float _2454 = _2450 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2449 > _2454) || ((_2449 < _2452) || ((_2448 > _2454) || ((_2448 < _2452) || ((_2447 < _2452) || (_2447 > _2454))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2577 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2449, cbModelParam._m0[9u].z, fma(_2448, cbModelParam._m0[9u].y, _2447 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2449, cbModelParam._m0[10u].z, fma(_2448, cbModelParam._m0[10u].y, _2447 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2449, cbModelParam._m0[11u].z, fma(_2448, cbModelParam._m0[11u].y, _2447 * cbModelParam._m0[11u].x))), _1868);
            frontier_phi_18_40_ladder = _2577.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2577.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2577.x * cbModelParam._m0[1u].y;
        }
        _1948 = frontier_phi_18_40_ladder_2;
        _1950 = frontier_phi_18_40_ladder_1;
        _1952 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1936 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1024, _1025, _1026), _1868);
        _1948 = _1936.x * cbModelParam._m0[1u].y;
        _1950 = _1936.y * cbModelParam._m0[1u].y;
        _1952 = _1936.z * cbModelParam._m0[1u].y;
    }
    float _1956 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _931);
    float _1957 = isnan(_1956) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1956 : min(cbModelParam._m0[25u].w, _1956));
    float _2046;
    float _2048;
    float _2050;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2010 = fma(_1087, cbModelParam._m0[21u].z, fma(_1083, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1079)) + cbModelParam._m0[21u].w;
        float _2014 = fma(_1087, cbModelParam._m0[22u].z, fma(_1083, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1079)) + cbModelParam._m0[22u].w;
        float _2018 = fma(_1087, cbModelParam._m0[23u].z, fma(_1083, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1079)) + cbModelParam._m0[23u].w;
        float _2021 = fma(_1026, cbModelParam._m0[21u].z, fma(_1025, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1024));
        float _2024 = fma(_1026, cbModelParam._m0[22u].z, fma(_1025, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1024));
        float _2027 = fma(_1026, cbModelParam._m0[23u].z, fma(_1025, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1024));
        float _2188;
        if (_2021 > 0.0)
        {
            _2188 = abs((1.0 - _2010) / _2021);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2010 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2188 = frontier_phi_30_26_ladder;
        }
        float _2467;
        if (_2024 > 0.0)
        {
            _2467 = abs((1.0 - _2014) / _2024);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2014 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2467 = frontier_phi_42_37_ladder;
        }
        float _2680;
        if (_2027 > 0.0)
        {
            _2680 = abs((1.0 - _2018) / _2027);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2018 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2680 = frontier_phi_51_48_ladder;
        }
        float _2682 = isnan(_2467) ? _2188 : (isnan(_2188) ? _2467 : min(_2188, _2467));
        float _2683 = isnan(_2680) ? _2682 : (isnan(_2682) ? _2680 : min(_2682, _2680));
        float _2687 = (_2683 * _2021) + _2010;
        float _2688 = (_2683 * _2024) + _2014;
        float _2689 = (_2683 * _2027) + _2018;
        float _2690 = _2683 * 9.9999997473787516355514526367188e-05;
        float _2691 = (-1.0) - _2690;
        float _2693 = _2690 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2689 > _2693) || ((_2689 < _2691) || ((_2688 > _2693) || ((_2688 < _2691) || ((_2687 < _2691) || (_2687 > _2693))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2889 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2689, cbModelParam._m0[17u].z, fma(_2688, cbModelParam._m0[17u].y, _2687 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2689, cbModelParam._m0[18u].z, fma(_2688, cbModelParam._m0[18u].y, _2687 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2689, cbModelParam._m0[19u].z, fma(_2688, cbModelParam._m0[19u].y, _2687 * cbModelParam._m0[19u].x))), _1957);
            frontier_phi_27_51_ladder = _2889.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2889.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2889.x * cbModelParam._m0[1u].z;
        }
        _2046 = frontier_phi_27_51_ladder_2;
        _2048 = frontier_phi_27_51_ladder_1;
        _2050 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2030 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1024, _1025, _1026), _1957);
        _2046 = _2030.x * cbModelParam._m0[1u].z;
        _2048 = _2030.y * cbModelParam._m0[1u].z;
        _2050 = _2030.z * cbModelParam._m0[1u].z;
    }
    float _2063 = (((_1050 * _1001) + _1051) * _1016) * ((cbModelParam._m0[1u].w * (_2046 - _1948)) + _1948);
    float _2065 = (((_1050 * _1003) + _1051) * _1016) * ((cbModelParam._m0[1u].w * (_2048 - _1950)) + _1950);
    float _2067 = (((_1050 * _1004) + _1051) * _1016) * ((cbModelParam._m0[1u].w * (_2050 - _1952)) + _1952);
    float _2070 = fma(_2067, cbSceneParam._m0[89u].z, fma(_2065, cbSceneParam._m0[89u].y, _2063 * cbSceneParam._m0[89u].x));
    float _2073 = fma(_2067, cbSceneParam._m0[90u].z, fma(_2065, cbSceneParam._m0[90u].y, _2063 * cbSceneParam._m0[90u].x));
    float _2076 = fma(_2067, cbSceneParam._m0[91u].z, fma(_2065, cbSceneParam._m0[91u].y, _2063 * cbSceneParam._m0[91u].x));
    vec4 _2084 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_889, _890));
    float _2086 = _2084.w;
    float _2098 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2086);
    float _2099 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2086);
    float _2100 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2086);
    uvec4 _2104 = floatBitsToUint(cbInstanceData._m0[_944 + 5u]);
    uint _2106 = _2104.x * 14u;
    uint _2107 = _2106 + 13u;
    float _2114 = _1016 + (-1.0);
    float _2119 = (cbLight._m0[_2107].x * _2114) + 1.0;
    float _2120 = (cbLight._m0[_2107].y * _2114) + 1.0;
    float _2121 = (cbLight._m0[_2107].z * _2114) + 1.0;
    float _2122 = (cbLight._m0[_2107].w * _2114) + 1.0;
    uint _2123 = _2106 + 5u;
    float _2129 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
    uint _2133 = _2106 + 4u;
    float _2142 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
    uint _2146 = _2106 | 1u;
    float _2157 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_788, _789, _790));
    float _2160 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_788, _789, _790));
    float _4369 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _4380 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2165 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * 0.3183098733425140380859375;
    float _2167 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * 0.3183098733425140380859375;
    float _2174 = ((cbLight._m0[_2123].x * _2129) * _2167) + (((cbLight._m0[_2133].x * _2098) * _2142) * _2165);
    float _2175 = ((_2129 * cbLight._m0[_2123].y) * _2167) + (((cbLight._m0[_2133].y * _2099) * _2142) * _2165);
    float _2176 = ((_2129 * cbLight._m0[_2123].z) * _2167) + (((cbLight._m0[_2133].z * _2100) * _2142) * _2165);
    uvec4 _2180 = floatBitsToUint(cbLight._m0[_2106 + 12u]);
    bool _2182 = _2180.x == 0u;
    float _2193;
    float _2195;
    float _2197;
    if (_2182)
    {
        _2193 = _2174;
        _2195 = _2175;
        _2197 = _2176;
    }
    else
    {
        uint _2201 = _2106 + 6u;
        float _2217 = (dot(vec3(cbLight._m0[_2106 + 2u].xyz), vec3(_788, _789, _790)) * 0.5) + 0.5;
        float _2218 = _2217 * _2217;
        float _4391 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2219 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _2220 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
        _2193 = (((cbLight._m0[_2201].x * 0.3183098733425140380859375) * _2219) * _2220) + _2174;
        _2195 = (((cbLight._m0[_2201].y * 0.3183098733425140380859375) * _2219) * _2220) + _2175;
        _2197 = (((cbLight._m0[_2201].z * 0.3183098733425140380859375) * _2219) * _2220) + _2176;
    }
    bool _2200 = _2180.y == 0u;
    float _2238;
    float _2240;
    float _2242;
    if (_2200)
    {
        _2238 = _2193;
        _2240 = _2195;
        _2242 = _2197;
    }
    else
    {
        uint _2411 = _2106 + 7u;
        float _2427 = (dot(vec3(cbLight._m0[_2106 + 3u].xyz), vec3(_788, _789, _790)) * 0.5) + 0.5;
        float _2428 = _2427 * _2427;
        float _4407 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2429 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2430 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
        _2238 = (((cbLight._m0[_2411].x * 0.3183098733425140380859375) * _2429) * _2430) + _2193;
        _2240 = (((cbLight._m0[_2411].y * 0.3183098733425140380859375) * _2429) * _2430) + _2195;
        _2242 = (((cbLight._m0[_2411].z * 0.3183098733425140380859375) * _2429) * _2430) + _2197;
    }
    uint _2245 = _2106 + 8u;
    float _2258 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2106].w)) * _931) * 0.949999988079071044921875);
    float _2259 = _2258 * _2258;
    float _2260 = cbLight._m0[_2106].x + _869;
    float _2261 = cbLight._m0[_2106].y + _870;
    float _2262 = cbLight._m0[_2106].z + _871;
    float _2266 = inversesqrt(dot(vec3(_2260, _2261, _2262), vec3(_2260, _2261, _2262)));
    float _2267 = _2266 * _2260;
    float _2268 = _2266 * _2261;
    float _2269 = _2266 * _2262;
    float _2270 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2106].xyz));
    float _4423 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2273 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _4434 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _2274 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _2275 = dot(vec3(_788, _789, _790), vec3(_2267, _2268, _2269));
    float _4445 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2278 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
    float _2279 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_2267, _2268, _2269));
    float _4456 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2283 = _2259 * _2259;
    float _2287 = ((_2278 * _2278) * (_2283 + (-1.0))) + 1.0;
    float _2295 = exp2(log2(1.0 - (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) * 5.0);
    float _2296 = 0.959999978542327880859375 - _998;
    float _2298 = 0.959999978542327880859375 - _999;
    float _2299 = 0.959999978542327880859375 - _1000;
    float _2306 = 1.0 - _2259;
    float _2317 = (0.5 / (((_2274 * ((_2273 * _2306) + _2259)) + 9.9999999392252902907785028219223e-09) + (((_2274 * _2306) + _2259) * _2273))) * _2273;
    float _4467 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2319 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2283 / ((_2287 * _2287) * 3.141590118408203125));
    uint _2333 = _2106 + 9u;
    float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2146].w)) * _931) * 0.949999988079071044921875);
    float _2345 = _2344 * _2344;
    float _2346 = cbLight._m0[_2146].x + _869;
    float _2347 = cbLight._m0[_2146].y + _870;
    float _2348 = cbLight._m0[_2146].z + _871;
    float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
    float _2353 = _2352 * _2346;
    float _2354 = _2352 * _2347;
    float _2355 = _2352 * _2348;
    float _2356 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2146].xyz));
    float _4478 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2359 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
    float _2360 = dot(vec3(_788, _789, _790), vec3(_2353, _2354, _2355));
    float _4489 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
    float _2364 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_2353, _2354, _2355));
    float _4500 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2368 = _2345 * _2345;
    float _2372 = ((_2363 * _2363) * (_2368 + (-1.0))) + 1.0;
    float _2379 = exp2(log2(1.0 - (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)))) * 5.0);
    float _2386 = 1.0 - _2345;
    float _2396 = (0.5 / (((_2274 * ((_2359 * _2386) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2274 * _2386) + _2345) * _2359))) * _2359;
    float _4511 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2398 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (_2368 / ((_2372 * _2372) * 3.141590118408203125));
    float _2408 = (((((_2379 * _2296) + _1001) * cbLight._m0[_2333].x) * _2398) * _2129) + ((((cbLight._m0[_2245].x * _2098) * ((_2295 * _2296) + _1001)) * _2319) * _2142);
    float _2409 = (((((_2379 * _2298) + _1003) * cbLight._m0[_2333].y) * _2398) * _2129) + ((((cbLight._m0[_2245].y * _2099) * ((_2295 * _2298) + _1003)) * _2319) * _2142);
    float _2410 = (((((_2379 * _2299) + _1004) * cbLight._m0[_2333].z) * _2398) * _2129) + ((((cbLight._m0[_2245].z * _2100) * ((_2295 * _2299) + _1004)) * _2319) * _2142);
    float _2472;
    float _2474;
    float _2476;
    if (_2182)
    {
        _2472 = _2408;
        _2474 = _2409;
        _2476 = _2410;
    }
    else
    {
        uint _2478 = _2106 + 2u;
        uint _2482 = _2106 + 10u;
        float _2496 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2478].w)) * _931) * 0.949999988079071044921875);
        float _2497 = _2496 * _2496;
        float _2498 = cbLight._m0[_2478].x + _869;
        float _2499 = cbLight._m0[_2478].y + _870;
        float _2500 = cbLight._m0[_2478].z + _871;
        float _2504 = inversesqrt(dot(vec3(_2498, _2499, _2500), vec3(_2498, _2499, _2500)));
        float _2505 = _2504 * _2498;
        float _2506 = _2504 * _2499;
        float _2507 = _2504 * _2500;
        float _2508 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2478].xyz));
        float _4522 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2511 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2512 = dot(vec3(_788, _789, _790), vec3(_2505, _2506, _2507));
        float _4533 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2515 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2516 = dot(vec3(cbLight._m0[_2478].xyz), vec3(_2505, _2506, _2507));
        float _4544 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2520 = _2497 * _2497;
        float _2524 = ((_2515 * _2515) * (_2520 + (-1.0))) + 1.0;
        float _2531 = exp2(log2(1.0 - (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) * 5.0);
        float _2538 = 1.0 - _2497;
        float _2548 = (0.5 / (((_2274 * ((_2511 * _2538) + _2497)) + 9.9999999392252902907785028219223e-09) + (((_2274 * _2538) + _2497) * _2511))) * _2511;
        float _4555 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2550 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2520 / ((_2524 * _2524) * 3.141590118408203125));
        float _2551 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
        _2472 = (((((_2531 * _2296) + _1001) * cbLight._m0[_2482].x) * _2550) * _2551) + _2408;
        _2474 = (((((_2531 * _2298) + _1003) * cbLight._m0[_2482].y) * _2550) * _2551) + _2409;
        _2476 = (((((_2531 * _2299) + _1004) * cbLight._m0[_2482].z) * _2550) * _2551) + _2410;
    }
    float _2586;
    float _2588;
    float _2590;
    if (_2200)
    {
        _2586 = _2472;
        _2588 = _2474;
        _2590 = _2476;
    }
    else
    {
        uint _2597 = _2106 + 3u;
        uint _2601 = _2106 + 11u;
        float _2615 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2597].w)) * _931) * 0.949999988079071044921875);
        float _2616 = _2615 * _2615;
        float _2617 = cbLight._m0[_2597].x + _869;
        float _2618 = cbLight._m0[_2597].y + _870;
        float _2619 = cbLight._m0[_2597].z + _871;
        float _2623 = inversesqrt(dot(vec3(_2617, _2618, _2619), vec3(_2617, _2618, _2619)));
        float _2624 = _2623 * _2617;
        float _2625 = _2623 * _2618;
        float _2626 = _2623 * _2619;
        float _2627 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2597].xyz));
        float _4571 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2630 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2631 = dot(vec3(_788, _789, _790), vec3(_2624, _2625, _2626));
        float _4582 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2634 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _2635 = dot(vec3(cbLight._m0[_2597].xyz), vec3(_2624, _2625, _2626));
        float _4593 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2639 = _2616 * _2616;
        float _2643 = ((_2634 * _2634) * (_2639 + (-1.0))) + 1.0;
        float _2650 = exp2(log2(1.0 - (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) * 5.0);
        float _2657 = 1.0 - _2616;
        float _2667 = (0.5 / (((_2274 * ((_2630 * _2657) + _2616)) + 9.9999999392252902907785028219223e-09) + (((_2274 * _2657) + _2616) * _2630))) * _2630;
        float _4604 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2669 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2639 / ((_2643 * _2643) * 3.141590118408203125));
        float _2670 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
        _2586 = (((((_2650 * _2296) + _1001) * cbLight._m0[_2601].x) * _2669) * _2670) + _2472;
        _2588 = (((((_2650 * _2298) + _1003) * cbLight._m0[_2601].y) * _2669) * _2670) + _2474;
        _2590 = (((((_2650 * _2299) + _1004) * cbLight._m0[_2601].z) * _2669) * _2670) + _2476;
    }
    float _2804;
    float _2806;
    float _2808;
    float _2810;
    float _2812;
    float _2814;
    if (_2104.y == 0u)
    {
        float _2745 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2746 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2745;
        float _2747 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2745;
        float _2748 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2745;
        uvec4 _2760 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2761 = _2760.x;
        uint _2772 = uint((float(_2760.y) * floor(float(uint(cbSceneParam._m0[85u].y * _890) / _2761))) + floor(float(uint(cbSceneParam._m0[85u].x * _889) / _2761)));
        float _2782 = (log2(_2748 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2783 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        uint _2786 = uint(isnan(14.0) ? _2783 : (isnan(_2783) ? 14.0 : min(_2783, 14.0)));
        uvec4 _2791 = texelFetch(g_lightClusterGridBuffer, int(((_2786 << 2u) + (_2772 << 6u)) >> 2u));
        uint _2792 = _2791.x;
        uint _2793 = _2760.z;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        if (((((1u << ((_2793 >> 4u) & 15u)) + 4294967295u) & _2792) == 0u) || ((_2793 & 240u) == 0u))
        {
            _2894 = 0.0;
            _2896 = 0.0;
            _2898 = 0.0;
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
        }
        else
        {
            float _2895;
            float _2897;
            float _2899;
            float _2901;
            float _2903;
            float _2905;
            float _3046 = 0.0;
            float _3047 = 0.0;
            float _3048 = 0.0;
            float _3049 = 0.0;
            float _3050 = 0.0;
            float _3051 = 0.0;
            uint _3052 = 0u;
            uint _3061;
            bool _3062;
            for (;;)
            {
                _3061 = texelFetch(g_lightClassification, int((((_2786 << 5u) + (_2772 << 9u)) + (_3052 << 2u)) >> 2u)).x;
                _3062 = _3061 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3062)
                {
                    frontier_phi_68_pred = _3048;
                    frontier_phi_68_pred_1 = _3051;
                    frontier_phi_68_pred_2 = _3050;
                    frontier_phi_68_pred_3 = _3049;
                    frontier_phi_68_pred_4 = _3047;
                    frontier_phi_68_pred_5 = _3046;
                }
                else
                {
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    float _3195;
                    float _3196;
                    uint _3197;
                    _3191 = _3046;
                    _3192 = _3047;
                    _3193 = _3048;
                    _3194 = _3049;
                    _3195 = _3050;
                    _3196 = _3051;
                    _3197 = _3061;
                    float _3118;
                    float _3119;
                    float _3120;
                    float _3121;
                    float _3122;
                    float _3123;
                    for (;;)
                    {
                        uint _3201 = uint(findLSB(_3197)) + (_3052 << 5u);
                        uint _3198 = (_3197 + 4294967295u) & _3197;
                        uint _3203 = _3201 * 48u;
                        vec4 _3217 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3203)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 3u)).x));
                        uint _3223 = (_3201 * 48u) + 4u;
                        vec4 _3236 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3223)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 3u)).x));
                        uint _3242 = (_3201 * 48u) + 8u;
                        vec3 _3253 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3242)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 2u)).x));
                        float _3257 = _3217.x - _2746;
                        float _3258 = _3217.y - _2747;
                        float _3259 = _3217.z - _2748;
                        float _3260 = dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259));
                        float _3263 = inversesqrt(_3260);
                        float _3264 = _3263 * _3257;
                        float _3265 = _3263 * _3258;
                        float _3266 = _3263 * _3259;
                        float _3267 = dot(vec3(_912, _915, _918), vec3(_3264, _3265, _3266));
                        float _3272 = 1.0 - (_3260 * _3217.w);
                        float _4630 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                        float _3273 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                        float _3274 = sqrt(_3260) * _3236.w;
                        float _3277 = 1.39999997615814208984375 / (_3274 + 1.39999997615814208984375);
                        float _3278 = _3277 * _3277;
                        float _3281 = ((1.0 - _3278) * _3267) + _3278;
                        float _3284 = _3274 * _3274;
                        float _3288 = ((isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0))) * _3273) / ((_3284 * 0.699999988079071044921875) + 1.0);
                        float _3292 = (-0.0) - _2746;
                        float _3293 = (-0.0) - _2747;
                        float _3294 = (-0.0) - _2748;
                        float _3298 = inversesqrt(dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294)));
                        float _3299 = _3298 * _3292;
                        float _3300 = _3298 * _3293;
                        float _3301 = _3298 * _3294;
                        float _3309 = exp2(log2(1.0 / ((_3284 * 3.5) + 5.0)) * 0.25);
                        float _3310 = 1.0 - _1032;
                        float _3317 = sqrt(1.0 - ((1.0 - (_3310 * _3310)) * (1.0 - (_3309 * _3309))));
                        float _3318 = _3317 * _3317;
                        float _3319 = _3318 * _3318;
                        float _3320 = _3299 + _3264;
                        float _3321 = _3300 + _3265;
                        float _3322 = _3301 + _3266;
                        float _3326 = inversesqrt(dot(vec3(_3320, _3321, _3322), vec3(_3320, _3321, _3322)));
                        float _3330 = dot(vec3(_912, _915, _918), vec3(_3299, _3300, _3301));
                        float _4646 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3333 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3334 = dot(vec3(_912, _915, _918), vec3(_3326 * _3320, _3326 * _3321, _3326 * _3322));
                        float _4657 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3337 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                        float _3341 = ((_3337 * _3337) * (_3319 + (-1.0))) + 1.0;
                        float _3342 = _3277 * _3318;
                        float _3343 = _3342 * _3342;
                        float _3346 = ((1.0 - _3343) * _3267) + _3343;
                        float _4668 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3347 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                        float _3348 = 1.0 - _3318;
                        float _3358 = (0.5 / (((_3347 * ((_3333 * _3348) + _3318)) + 9.9999999392252902907785028219223e-09) + (((_3347 * _3348) + _3318) * _3333))) * _3347;
                        float _4679 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3369 = (((_3319 * 3.1415927410125732421875) * (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) / ((_3341 * _3341) * ((_3284 * 2.1991131305694580078125) + 3.141590118408203125))) * _3273;
                        _3121 = (_3288 * _3236.x) + _3194;
                        _3122 = (_3288 * _3236.y) + _3195;
                        _3123 = (_3288 * _3236.z) + _3196;
                        _3118 = (_3369 * _3253.x) + _3191;
                        _3119 = (_3369 * _3253.y) + _3192;
                        _3120 = (_3369 * _3253.z) + _3193;
                        if (_3198 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3191 = _3118;
                            _3192 = _3119;
                            _3193 = _3120;
                            _3194 = _3121;
                            _3195 = _3122;
                            _3196 = _3123;
                            _3197 = _3198;
                        }
                    }
                    frontier_phi_68_pred = _3120;
                    frontier_phi_68_pred_1 = _3123;
                    frontier_phi_68_pred_2 = _3122;
                    frontier_phi_68_pred_3 = _3121;
                    frontier_phi_68_pred_4 = _3119;
                    frontier_phi_68_pred_5 = _3118;
                }
                _2899 = frontier_phi_68_pred;
                _2905 = frontier_phi_68_pred_1;
                _2903 = frontier_phi_68_pred_2;
                _2901 = frontier_phi_68_pred_3;
                _2897 = frontier_phi_68_pred_4;
                _2895 = frontier_phi_68_pred_5;
                uint _3053 = _3052 + 1u;
                if (_3053 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3046 = _2895;
                    _3047 = _2897;
                    _3048 = _2899;
                    _3049 = _2901;
                    _3050 = _2903;
                    _3051 = _2905;
                    _3052 = _3053;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2894 = _2895;
            _2896 = _2897;
            _2898 = _2899;
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
        }
        uvec4 _2908 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2909 = _2908.z;
        uint _2911 = (_2909 >> 8u) & 15u;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        float _3022;
        float _3024;
        if (((4294967295u << _2911) & _2792) == 0u)
        {
            _3014 = _2894;
            _3016 = _2896;
            _3018 = _2898;
            _3020 = _2900;
            _3022 = _2902;
            _3024 = _2904;
        }
        else
        {
            float _3039 = inversesqrt(dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748)));
            float _3040 = _3039 * _2746;
            float _3041 = _3039 * _2747;
            float _3042 = _3039 * _2748;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2911 < ((_2909 >> 12u) & 15u))
            {
                float _3015;
                float _3017;
                float _3019;
                float _3021;
                float _3023;
                float _3025;
                float _3174 = _2894;
                float _3175 = _2896;
                float _3176 = _2898;
                float _3177 = _2900;
                float _3178 = _2902;
                float _3179 = _2904;
                uint _3180 = _2911;
                uint _3189;
                bool _3190;
                for (;;)
                {
                    _3189 = texelFetch(g_lightClassification, int((((_2786 << 5u) + (_2772 << 9u)) + (_3180 << 2u)) >> 2u)).x;
                    _3190 = _3189 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3190)
                    {
                        frontier_phi_79_pred = _3179;
                        frontier_phi_79_pred_1 = _3178;
                        frontier_phi_79_pred_2 = _3177;
                        frontier_phi_79_pred_3 = _3176;
                        frontier_phi_79_pred_4 = _3175;
                        frontier_phi_79_pred_5 = _3174;
                    }
                    else
                    {
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3677;
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3396 = _3174;
                        float _3397 = _3175;
                        float _3398 = _3176;
                        float _3399 = _3177;
                        float _3400 = _3178;
                        float _3401 = _3179;
                        uint _3402 = _3189;
                        uint _3403;
                        vec4 _3428;
                        float _3429;
                        vec4 _3444;
                        vec3 _3456;
                        vec4 _3471;
                        vec4 _3486;
                        float _3533;
                        bool _3534;
                        for (;;)
                        {
                            uint _3413 = ((_3180 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3402));
                            _3403 = (_3402 + 4294967295u) & _3402;
                            uint _3415 = _3413 * 40u;
                            _3428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 3u)).x));
                            _3429 = _3428.w;
                            uint _3431 = (_3413 * 40u) + 4u;
                            _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            uint _3446 = (_3413 * 40u) + 8u;
                            _3456 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x));
                            uint _3458 = (_3413 * 40u) + 16u;
                            _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            uint _3473 = (_3413 * 40u) + 20u;
                            _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            uint _3489 = (_3413 * 40u) + 24u;
                            vec4 _3502 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 3u)).x));
                            uint _3508 = (_3413 * 40u) + 28u;
                            vec4 _3521 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 3u)).x));
                            _3533 = fma(_2748, _3521.z, fma(_2747, _3521.y, _3521.x * _2746)) + _3521.w;
                            _3534 = !((fma(_2748, _3502.z, fma(_2747, _3502.y, _3502.x * _2746)) + _3502.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3534)
                            {
                                float _3561 = _3428.x - _2746;
                                float _3562 = _3428.y - _2747;
                                float _3563 = _3428.z - _2748;
                                float _3564 = dot(vec3(_3561, _3562, _3563), vec3(_3561, _3562, _3563));
                                float _3567 = inversesqrt(_3564);
                                float _3568 = _3567 * _3561;
                                float _3569 = _3567 * _3562;
                                float _3570 = _3567 * _3563;
                                float _3574 = 1.0 - (_3564 / (_3429 * _3429));
                                float _4690 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3575 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3579 = sqrt(_3564) * _3444.w;
                                float _3581 = 1.39999997615814208984375 / (_3579 + 1.39999997615814208984375);
                                float _3582 = _3581 * _3581;
                                float _3585 = ((1.0 - _3582) * dot(vec3(_3568, _3569, _3570), vec3(_912, _915, _918))) + _3582;
                                float _3588 = _3579 * _3579;
                                float _3592 = (fma(_2748, _3471.z, fma(_2747, _3471.y, _3471.x * _2746)) + _3471.w) / _3533;
                                float _3593 = (fma(_2748, _3486.z, fma(_2747, _3486.y, _3486.x * _2746)) + _3486.w) / _3533;
                                float _3597 = 1.0 - dot(vec2(_3592, _3593), vec2(_3592, _3593));
                                float _4706 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3598 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3599 = _3598 * (((isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0))) * _3575) / ((_3588 * 0.699999988079071044921875) + 1.0));
                                float _3611 = exp2(log2(1.0 / ((_3588 * 3.5) + 5.0)) * 0.25);
                                float _3612 = 1.0 - _1032;
                                float _3619 = sqrt(1.0 - ((1.0 - (_3612 * _3612)) * (1.0 - (_3611 * _3611))));
                                float _3620 = _3619 * _3619;
                                float _3621 = _3620 * _3620;
                                float _3622 = _3568 - _3040;
                                float _3623 = _3569 - _3041;
                                float _3624 = _3570 - _3042;
                                float _3628 = inversesqrt(dot(vec3(_3622, _3623, _3624), vec3(_3622, _3623, _3624)));
                                float _3632 = dot(vec3(_912, _915, _918), vec3((-0.0) - _3040, (-0.0) - _3041, (-0.0) - _3042));
                                float _4717 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3635 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3636 = dot(vec3(_912, _915, _918), vec3(_3628 * _3622, _3628 * _3623, _3628 * _3624));
                                float _4728 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                                float _3639 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3643 = ((_3639 * _3639) * (_3621 + (-1.0))) + 1.0;
                                float _3644 = _3581 * _3620;
                                float _3645 = _3644 * _3644;
                                float _3651 = ((1.0 - _3645) * dot(vec3(_912, _915, _918), vec3(_3568, _3569, _3570))) + _3645;
                                float _4739 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                                float _3652 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                                float _3653 = 1.0 - _3620;
                                float _3663 = (0.5 / (((_3652 * ((_3635 * _3653) + _3620)) + 9.9999999392252902907785028219223e-09) + (((_3652 * _3653) + _3620) * _3635))) * _3652;
                                float _4750 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                                float _3673 = (_3598 * _3575) * (((_3621 * 3.1415927410125732421875) * (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0)))) / ((_3643 * _3643) * ((_3588 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3599 * _3444.z;
                                frontier_phi_85_pred_1 = _3599 * _3444.y;
                                frontier_phi_85_pred_2 = _3599 * _3444.x;
                                frontier_phi_85_pred_3 = _3673 * _3456.z;
                                frontier_phi_85_pred_4 = _3673 * _3456.y;
                                frontier_phi_85_pred_5 = _3673 * _3456.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3682 = frontier_phi_85_pred;
                            _3681 = frontier_phi_85_pred_1;
                            _3680 = frontier_phi_85_pred_2;
                            _3679 = frontier_phi_85_pred_3;
                            _3678 = frontier_phi_85_pred_4;
                            _3677 = frontier_phi_85_pred_5;
                            _3386 = _3680 + _3399;
                            _3387 = _3681 + _3400;
                            _3388 = _3682 + _3401;
                            _3383 = _3677 + _3396;
                            _3384 = _3678 + _3397;
                            _3385 = _3679 + _3398;
                            if (_3403 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3396 = _3383;
                                _3397 = _3384;
                                _3398 = _3385;
                                _3399 = _3386;
                                _3400 = _3387;
                                _3401 = _3388;
                                _3402 = _3403;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3388;
                        frontier_phi_79_pred_1 = _3387;
                        frontier_phi_79_pred_2 = _3386;
                        frontier_phi_79_pred_3 = _3385;
                        frontier_phi_79_pred_4 = _3384;
                        frontier_phi_79_pred_5 = _3383;
                    }
                    _3025 = frontier_phi_79_pred;
                    _3023 = frontier_phi_79_pred_1;
                    _3021 = frontier_phi_79_pred_2;
                    _3019 = frontier_phi_79_pred_3;
                    _3017 = frontier_phi_79_pred_4;
                    _3015 = frontier_phi_79_pred_5;
                    uint _3181 = _3180 + 1u;
                    if (_3181 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3174 = _3015;
                        _3175 = _3017;
                        _3176 = _3019;
                        _3177 = _3021;
                        _3178 = _3023;
                        _3179 = _3025;
                        _3180 = _3181;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3021;
                frontier_phi_60_61_ladder_1 = _3025;
                frontier_phi_60_61_ladder_2 = _3023;
                frontier_phi_60_61_ladder_3 = _3019;
                frontier_phi_60_61_ladder_4 = _3017;
                frontier_phi_60_61_ladder_5 = _3015;
            }
            else
            {
                frontier_phi_60_61_ladder = _2900;
                frontier_phi_60_61_ladder_1 = _2904;
                frontier_phi_60_61_ladder_2 = _2902;
                frontier_phi_60_61_ladder_3 = _2898;
                frontier_phi_60_61_ladder_4 = _2896;
                frontier_phi_60_61_ladder_5 = _2894;
            }
            _3014 = frontier_phi_60_61_ladder_5;
            _3016 = frontier_phi_60_61_ladder_4;
            _3018 = frontier_phi_60_61_ladder_3;
            _3020 = frontier_phi_60_61_ladder;
            _3022 = frontier_phi_60_61_ladder_2;
            _3024 = frontier_phi_60_61_ladder_1;
        }
        float _3029 = isnan(1.0) ? _1016 : (isnan(_1016) ? 1.0 : min(_1016, 1.0));
        _2804 = (_3029 * _3020) + _2238;
        _2806 = (_3029 * _3022) + _2240;
        _2808 = (_3029 * _3024) + _2242;
        _2810 = ((_3014 * _1001) * _3029) + _2586;
        _2812 = ((_3016 * _1003) * _3029) + _2588;
        _2814 = ((_3018 * _1004) * _3029) + _2590;
    }
    else
    {
        _2804 = _2238;
        _2806 = _2240;
        _2808 = _2242;
        _2810 = _2586;
        _2812 = _2588;
        _2814 = _2590;
    }
    float _4766 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _4777 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _4788 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _4799 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _2832 = ((isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2804 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1016))) + ((_2810 + ((isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0))) * _1857)) * cbPerFrame._m0[3u].x);
    float _2833 = ((isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2806 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1016))) + ((_2812 + ((isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0))) * _1857)) * cbPerFrame._m0[3u].x);
    float _2834 = ((isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2808 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1016))) + ((_2814 + ((isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0))) * _1857)) * cbPerFrame._m0[3u].x);
    float _2839 = cbInstanceData._m0[_944 + 6u].w * (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0)));
    float _2844 = _889 / cbSceneParam._m0[86u].x;
    float _2845 = _890 / cbSceneParam._m0[86u].y;
    vec4 _2859 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2844, _2845, (log2((isnan(cbSceneParam._m0[77u].w) ? _812 : (isnan(_812) ? cbSceneParam._m0[77u].w : min(_812, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2861 = _2859.x;
    float _2862 = _2859.y;
    float _2863 = _2859.z;
    float _2864 = _2859.w;
    float _2956;
    float _2958;
    float _2960;
    float _2962;
    if (_812 > cbSceneParam._m0[78u].w)
    {
        float _2919 = isnan(_812) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _812 : min(cbSceneParam._m0[80u].w, _812));
        float _2920 = _2919 / _812;
        float _2931 = _2920 * _862;
        float _2932 = _863 * _2920;
        float _2933 = (-0.0) - _2932;
        float _2934 = _2920 * _864;
        float _2936 = (cbSceneParam._m0[77u].w * _2933) / _2919;
        float _2937 = _2936 + cbSceneParam._m0[79u].w;
        float _2938 = cbSceneParam._m0[79u].w - _2932;
        float _2944 = sqrt(((_2931 * _2931) + (_2932 * _2932)) + (_2934 * _2934));
        float _2947 = (1.0 - (cbSceneParam._m0[77u].w / _2919)) * _2944;
        float _2952 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2954 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3131;
        if (abs((_2933 - _2936) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3131 = ((((_2937 > 0.0) ? exp2(_2952 * _2937) : (2.0 - exp2(_2954 * _2937))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2947;
        }
        else
        {
            float _3075 = 1.0 / cbSceneParam._m0[80u].x;
            float _3076 = isnan(_2938) ? _2937 : (isnan(_2937) ? _2938 : max(_2937, _2938));
            float _3077 = isnan(_2938) ? _2937 : (isnan(_2937) ? _2938 : min(_2937, _2938));
            float _3086 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : min(_3076, 0.0));
            float _3087 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : min(_3077, 0.0));
            _3131 = ((abs(_2944 / _2933) * cbSceneParam._m0[80u].y) * ((((_3086 - _3087) * 2.0) - ((exp2(_2952 * (isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0)))) - exp2(_2952 * (isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0))))) * _3075)) - ((exp2(_2954 * _3086) - exp2(_2954 * _3087)) * _3075))) + (_2947 * cbSceneParam._m0[80u].z);
        }
        vec4 _3133 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2844, _2845, 1.0), 0.0);
        float _3142 = exp2((_3131 * (-1.44269502162933349609375)) * (1.0 - _3133.w));
        float _3143 = log2(_3142);
        float _3159 = log2(_2864);
        _2956 = (exp2(_3159 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3143 * cbSceneParam._m0[78u].x)) * _3133.x) / cbSceneParam._m0[78u].x)) + _2861;
        _2958 = (exp2(_3159 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3143 * cbSceneParam._m0[78u].y)) * _3133.y) / cbSceneParam._m0[78u].y)) + _2862;
        _2960 = (exp2(_3159 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3143 * cbSceneParam._m0[78u].z)) * _3133.z) / cbSceneParam._m0[78u].z)) + _2863;
        _2962 = _3142 * _2864;
    }
    else
    {
        _2956 = _2861;
        _2958 = _2862;
        _2960 = _2863;
        _2962 = _2864;
    }
    bool _3169;
    vec4 _2972;
    vec4 _2994;
    float _2996;
    float _3000;
    float _3001;
    float _3002;
    float _3003;
    bool _3013;
    for (;;)
    {
        _2972 = cbMatDynParam._m0[0u];
        float _2974 = roundEven(_2972.y);
        bool _2975 = _2974 == 3.0;
        float _2976 = log2(_2962);
        float _2983 = exp2(_2976 * cbSceneParam._m0[78u].x) * _2832;
        float _2984 = exp2(_2976 * cbSceneParam._m0[78u].y) * _2833;
        float _2985 = exp2(_2976 * cbSceneParam._m0[78u].z) * _2834;
        float _2992 = _878 + (-0.5);
        _2994 = cbMtdParam._m0[1u];
        _2996 = _2994.y * _2992;
        float _2999 = (_2974 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3000 = _2999 * (_2975 ? _2983 : (_2983 + (cbSceneParam._m0[72u].w * _2956)));
        _3001 = _2999 * (_2975 ? _2984 : (_2984 + (cbSceneParam._m0[72u].w * _2958)));
        _3002 = _2999 * (_2975 ? _2985 : (_2985 + (cbSceneParam._m0[72u].w * _2960)));
        _3003 = _2992 * 0.999000012874603271484375;
        _3013 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3013)
        {
            if ((cbInstanceData._m0[_944 + 7u].x + _3003) < 0.5)
            {
                _3169 = true;
                break;
            }
        }
        uint _3110 = _945 + uint(_2972.w);
        if ((cbInstanceData._m0[_3110].w < 1.0) && ((cbInstanceData._m0[_3110].w + _3003) < 0.5))
        {
            _3169 = true;
            break;
        }
        if ((_2996 + _578) < _2994.x)
        {
            _3169 = true;
            break;
        }
        _3169 = false;
        break;
    }
    float _3374;
    if (_3169)
    {
        discard_state = true;
        _3374 = 0.0;
    }
    else
    {
        _3374 = _2839;
    }
    SV_Target.x = _3000;
    SV_Target.y = _3001;
    SV_Target.z = _3002;
    SV_Target.w = _3374;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2839;
    discard_exit();
}


