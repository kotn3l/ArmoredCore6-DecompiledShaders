#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_snp_0_Texture2D_2;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D P_ACParts_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D P_ACParts_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_snp_0_Texture2D_10;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_snp_0_Texture2D_13;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_snp_0_Texture2D_14;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_snp_0_Texture2D_15;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1417;
float _3824;
float _3825;
float _3826;
float _3827;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255;
    float _256;
    float _257;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _255 = (-0.0) - _241;
        _256 = (-0.0) - _242;
        _257 = (-0.0) - _243;
    }
    else
    {
        _255 = _241;
        _256 = _242;
        _257 = _243;
    }
    vec4 _275 = texture(sampler2D(P_ACParts_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _280 = _275.z;
    float _281 = _275.w;
    float _289 = exp2(log2(_280 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _290 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _291 = isnan(1.0) ? _290 : (isnan(_290) ? 1.0 : min(_290, 1.0));
    float _297 = exp2(log2(1.0 - _281) * cbMtdParam._m0[20u].y);
    vec4 _309 = texture(sampler2D(P_ACParts_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _203[6];
    float _204[6];
    float _205[6];
    _203[0u] = cbMtdParam._m0[12u].x;
    _204[0u] = cbMtdParam._m0[12u].y;
    _205[0u] = cbMtdParam._m0[12u].z;
    _203[1u] = cbMtdParam._m0[13u].x;
    _204[1u] = cbMtdParam._m0[13u].y;
    _205[1u] = cbMtdParam._m0[13u].z;
    _203[2u] = cbMtdParam._m0[14u].x;
    _204[2u] = cbMtdParam._m0[14u].y;
    _205[2u] = cbMtdParam._m0[14u].z;
    _203[3u] = cbMtdParam._m0[15u].x;
    _204[3u] = cbMtdParam._m0[15u].y;
    _205[3u] = cbMtdParam._m0[15u].z;
    _203[4u] = cbMtdParam._m0[16u].x;
    _204[4u] = cbMtdParam._m0[16u].y;
    _205[4u] = cbMtdParam._m0[16u].z;
    _203[5u] = cbMtdParam._m0[11u].x;
    _204[5u] = cbMtdParam._m0[11u].y;
    _205[5u] = cbMtdParam._m0[11u].z;
    vec4 _391 = texture(sampler2D(P_ACParts_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _393 = _391.x;
    float _394 = _391.y;
    float _422 = roundEven(((_393 + (-0.02500000037252902984619140625)) + ((_391.z * cbMtdParam._m0[19u].w) * (texture(sampler2D(P_ACParts_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, ((cbMtdParam._m0[19u].z * TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w)).x - _393))) * 6.0);
    float _423 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    uint _426 = uint(int(isnan(5.0) ? _423 : (isnan(_423) ? 5.0 : min(_423, 5.0))));
    vec4 _456 = texture(sampler2D(P_ACParts_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _466 = cbMtdParam._m0[9u].x * _456.x;
    float _467 = cbMtdParam._m0[9u].y * _456.y;
    float _468 = cbMtdParam._m0[9u].z * _456.z;
    float _475 = ((((((_203[_426] - cbMtdParam._m0[10u].x) * _394) + cbMtdParam._m0[10u].x) * _309.x) - _466) * _297) + _466;
    float _476 = ((((((_204[_426] - cbMtdParam._m0[10u].y) * _394) + cbMtdParam._m0[10u].y) * _309.y) - _467) * _297) + _467;
    float _477 = ((((((_205[_426] - cbMtdParam._m0[10u].z) * _394) + cbMtdParam._m0[10u].z) * _309.z) - _468) * _297) + _468;
    float _484 = exp2(log2(_281) * cbMtdParam._m0[21u].y);
    vec4 _496 = texture(sampler2D(P_ACParts_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _529 = texture(sampler2D(P_ACParts_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _540 = cbMtdParam._m0[18u].x * _529.x;
    float _541 = cbMtdParam._m0[18u].y * _529.y;
    float _542 = cbMtdParam._m0[18u].z * _529.z;
    vec4 _563 = texture(sampler2D(P_ACParts_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _571 = ((((((((cbMtdParam._m0[17u].x * _496.x) - _475) * _484) + _475) - _540) * _291) + _540) * 4.55000019073486328125) * _563.x;
    float _573 = ((((((((cbMtdParam._m0[17u].y * _496.y) - _476) * _484) + _476) - _541) * _291) + _541) * 4.55000019073486328125) * _563.y;
    float _575 = ((((((((cbMtdParam._m0[17u].z * _496.z) - _477) * _484) + _477) - _542) * _291) + _542) * 4.55000019073486328125) * _563.z;
    float _576 = _563.w * _309.w;
    vec4 _588 = texture(sampler2D(P_ACParts_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _590 = _588.x;
    float _608 = (((1.0 - _590) + texture(sampler2D(P_ACParts_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x) * _291) + _590;
    float _627 = (((texture(sampler2D(P_ACParts_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - _608) + cbMtdParam._m0[20u].z) * _297) + _608;
    float _650 = (((texture(sampler2D(P_ACParts_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - _627) + cbMtdParam._m0[22u].y) * _484) + _627;
    vec4 _662 = texture(sampler2D(P_ACParts_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _680 = texture(sampler2D(P_ACParts_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _682 = _680.x;
    float _683 = _680.y;
    float _686 = cbMtdParam._m0[19u].x + _680.z;
    float _689 = (((cbMtdParam._m0[20u].x + _662.z) - _686) * _297) + _686;
    vec4 _701 = texture(sampler2D(P_ACParts_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    vec4 _725 = texture(sampler2D(P_ACParts_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _727 = _725.x;
    float _728 = _725.y;
    float _731 = cbMtdParam._m0[21u].x + _725.z;
    float _734 = ((((_280 * 2.0) * ((((_701.z - _689) + cbMtdParam._m0[22u].x) * _484) + _689)) - _731) * _291) + _731;
    float _745 = ((_662.x - _682) * _297) + _682;
    float _746 = ((_662.y - _683) * _297) + _683;
    float _761 = (((((((_701.x - _745) * _484) + _745) - _727) * _291) + _727) * 2.0) + (-1.0);
    float _762 = (((((((_701.y - _746) * _484) + _746) - _728) * _291) + _728) * 2.0) + (-1.0);
    float _763 = dot(vec2(_761, _762), vec2(_761, _762));
    float _3856 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _768 = sqrt(1.0 - (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))));
    float _771 = _761 + (cbMtdParam._m0[21u].w * ((_275.x * 2.0) + (-1.0)));
    float _772 = _762 + (cbMtdParam._m0[21u].w * ((_275.y * 2.0) + (-1.0)));
    float _775 = fma(_768, _255, fma(_772, _247 * TANGENT.x, (_233 * _225) * _771));
    float _778 = fma(_768, _256, fma(_772, _247 * TANGENT.y, (_233 * _226) * _771));
    float _781 = fma(_768, _257, fma(_772, _247 * TANGENT.z, (_233 * _227) * _771));
    float _785 = inversesqrt(dot(vec3(_775, _778, _781), vec3(_775, _778, _781)));
    float _786 = _785 * _775;
    float _787 = _785 * _778;
    float _788 = _785 * _781;
    float _3867 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _789 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _3878 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _790 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _3889 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _3900 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3911 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _3922 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _794 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _810 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _860 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _850);
    float _861 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _850);
    float _862 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _850);
    float _866 = inversesqrt(dot(vec3(_860, _861, _862), vec3(_860, _861, _862)));
    float _867 = _860 * _866;
    float _868 = _861 * _866;
    float _869 = _862 * _866;
    vec4 _874 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _876 = _874.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1096 = sqrt(((_860 * _860) + (_861 * _861)) + (_862 * _862));
        float _1102 = (cbMatDynParam._m0[5u].x * _1096) + cbMatDynParam._m0[5u].y;
        float _3933 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1107 = (cbMatDynParam._m0[5u].z * _1096) + cbMatDynParam._m0[5u].w;
        float _3944 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) - _1103)) + _1103) < ((_876 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _887 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _888 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _890 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _892 = _890.w;
    float _910 = fma(_788, cbSceneParam._m0[5u].z, fma(_787, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _786));
    float _913 = fma(_788, cbSceneParam._m0[6u].z, fma(_787, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _786));
    float _916 = fma(_788, cbSceneParam._m0[7u].z, fma(_787, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _786));
    vec4 _918 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _929 = (((_918.y - _790) + (_918.w * _790)) * cbMtdParam._m0[3u].x) + _790;
    uint _942 = uint(roundEven(NORMAL.w)) * 13u;
    uint _943 = _942 + 9u;
    uint _944 = _943 + uint(cbMatDynParam._m0[0u].w);
    float _950 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) * cbInstanceData._m0[_944].x;
    float _951 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * cbInstanceData._m0[_944].y;
    float _952 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * cbInstanceData._m0[_944].z;
    float _3955 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _953 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _3966 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _954 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _3977 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _955 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    vec4 _956 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _961 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _972 = (((_961.x - _794) + (_961.w * _794)) * cbMtdParam._m0[3u].x) + _794;
    float _985 = (cbMtdParam._m0[3u].x * (((_953 * _892) - _953) + _956.x)) + _953;
    float _986 = (cbMtdParam._m0[3u].x * (((_954 * _892) - _954) + _956.y)) + _954;
    float _987 = (cbMtdParam._m0[3u].x * (((_955 * _892) - _955) + _956.z)) + _955;
    float _988 = 1.0 - _972;
    float _989 = _988 * _985;
    float _990 = _988 * _986;
    float _991 = _988 * _987;
    float _996 = (_985 + (-0.039999999105930328369140625)) * _972;
    float _997 = (_986 + (-0.039999999105930328369140625)) * _972;
    float _998 = (_987 + (-0.039999999105930328369140625)) * _972;
    float _999 = _996 + 0.039999999105930328369140625;
    float _1001 = _997 + 0.039999999105930328369140625;
    float _1002 = _998 + 0.039999999105930328369140625;
    vec4 _1011 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _887, cbSceneParam._m0[86u].y * _888));
    float _1014 = _1011.x * TEXCOORD_4;
    float _1015 = dot(vec3(_786, _787, _788), vec3(_867, _868, _869));
    float _1018 = _1015 * 2.0;
    float _1022 = (_1018 * _786) - _867;
    float _1023 = (_1018 * _787) - _868;
    float _1024 = (_1018 * _788) - _869;
    float _1028 = abs(dot(vec3(_867, _868, _869), vec3(_786, _787, _788)));
    float _3988 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1030 = sqrt(_929);
    float _1042 = exp2((_1030 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1030 * 3.0));
    float _1048 = (1.0 - _1042) * ((_1030 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1049 = _1042 * _1030;
    float _1077 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1416;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1141 = fma(_1085, cbModelParam._m0[26u].z, fma(_1081, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1077));
        float _1145 = fma(_1085, cbModelParam._m0[27u].z, fma(_1081, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1077));
        float _1149 = fma(_1085, cbModelParam._m0[28u].z, fma(_1081, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1077));
        float _1174 = _1077 + _786;
        float _1175 = _1081 + _787;
        float _1176 = _1085 + _788;
        float _1186 = fma(_1176, cbModelParam._m0[26u].z, fma(_1175, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1174)) - _1141;
        float _1187 = fma(_1176, cbModelParam._m0[27u].z, fma(_1175, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1174)) - _1145;
        float _1188 = fma(_1176, cbModelParam._m0[28u].z, fma(_1175, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1174)) - _1149;
        float _1192 = inversesqrt(dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188)));
        float _1205 = ((_1192 * _1186) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1141 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1206 = ((_1192 * _1187) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1145 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1207 = ((_1192 * _1188) / cbModelParam._m0[34u].z) + ((((((_1149 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        float _1244 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1210.x + (-0.5));
        float _1246 = _1244 * (_1210.y + (-0.5));
        float _1247 = _1244 * (_1210.z + (-0.5));
        float _1254 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1217.x + (-0.5));
        float _1256 = _1254 * (_1217.y + (-0.5));
        float _1257 = _1254 * (_1217.z + (-0.5));
        float _1264 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1224.x + (-0.5));
        float _1266 = _1264 * (_1224.y + (-0.5));
        float _1267 = _1264 * (_1224.z + (-0.5));
        float _1274 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1231.x + (-0.5));
        float _1276 = _1274 * (_1231.y + (-0.5));
        float _1277 = _1274 * (_1231.z + (-0.5));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = _1245 * 0.5;
        float _1282 = _1255 * 0.5;
        float _1283 = _1265 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1298 = (dot(vec3(_786, _787, _788), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _4014 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1308 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _4025 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _4036 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1310 + 1.0))) + _1315) * _1278;
        float _1325 = _1246 * 0.5;
        float _1326 = _1256 * 0.5;
        float _1327 = _1266 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_786, _787, _788), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _4047 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1279 + 9.9999997473787516355514526367188e-06);
        float _4058 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _4069 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1352 + 1.0))) + _1357) * _1279;
        float _1367 = _1247 * 0.5;
        float _1368 = _1257 * 0.5;
        float _1369 = _1267 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1383 = (dot(vec3(_786, _787, _788), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1392 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _4102 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1394 + 1.0))) + _1399) * _1280;
        _1416 = _1247;
        _1418 = _1246;
        _1419 = _1245;
        _1420 = _1257;
        _1421 = _1256;
        _1422 = _1255;
        _1423 = _1267;
        _1424 = _1266;
        _1425 = _1265;
        _1426 = _1280;
        _1427 = _1279;
        _1428 = _1278;
        _1429 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
        _1430 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
        _1431 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
    }
    else
    {
        _1416 = _1417;
        _1418 = _1417;
        _1419 = _1417;
        _1420 = _1417;
        _1421 = _1417;
        _1422 = _1417;
        _1423 = _1417;
        _1424 = _1417;
        _1425 = _1417;
        _1426 = _1417;
        _1427 = _1417;
        _1428 = _1417;
        _1429 = 0.0;
        _1430 = 0.0;
        _1431 = 0.0;
    }
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1460 = fma(_1085, cbModelParam._m0[30u].z, fma(_1081, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1077));
        float _1464 = fma(_1085, cbModelParam._m0[31u].z, fma(_1081, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1077));
        float _1468 = fma(_1085, cbModelParam._m0[32u].z, fma(_1081, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1077));
        float _1491 = _1077 + _786;
        float _1492 = _1081 + _787;
        float _1493 = _1085 + _788;
        float _1503 = fma(_1493, cbModelParam._m0[30u].z, fma(_1492, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1491)) - _1460;
        float _1504 = fma(_1493, cbModelParam._m0[31u].z, fma(_1492, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1491)) - _1464;
        float _1505 = fma(_1493, cbModelParam._m0[32u].z, fma(_1492, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1491)) - _1468;
        float _1509 = inversesqrt(dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505)));
        float _1522 = ((_1509 * _1503) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1460 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1523 = ((_1509 * _1504) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1464 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1524 = ((_1509 * _1505) / cbModelParam._m0[35u].z) + ((((((_1468 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1526 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        vec4 _1533 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        vec4 _1547 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        float _1559 = exp2((_1526.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1526.x + (-0.5));
        float _1561 = _1559 * (_1526.y + (-0.5));
        float _1562 = _1559 * (_1526.z + (-0.5));
        float _1569 = exp2((_1533.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1533.x + (-0.5));
        float _1571 = _1569 * (_1533.y + (-0.5));
        float _1572 = _1569 * (_1533.z + (-0.5));
        float _1579 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1540.x + (-0.5));
        float _1581 = _1579 * (_1540.y + (-0.5));
        float _1582 = _1579 * (_1540.z + (-0.5));
        float _1589 = exp2((_1547.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1547.x + (-0.5));
        float _1591 = _1589 * (_1547.y + (-0.5));
        float _1592 = _1589 * (_1547.z + (-0.5));
        float _1593 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1594 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1595 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1596 = _1560 * 0.5;
        float _1597 = _1570 * 0.5;
        float _1598 = _1580 * 0.5;
        float _1599 = dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598));
        float _1604 = (_1599 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1599);
        float _1612 = (dot(vec3(_786, _787, _788), vec3(_1604 * _1596, _1604 * _1597, _1604 * _1598)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1621 = sqrt(((_1597 * _1597) + (_1596 * _1596)) + (_1598 * _1598)) / (_1593 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1623 = _1622 * 2.0;
        float _1627 = (1.0 - _1622) / (_1622 + 1.0);
        float _4165 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1637 = ((((1.0 - _1628) * (_1623 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1623 + 1.0))) + _1628) * _1593;
        float _1638 = _1561 * 0.5;
        float _1639 = _1571 * 0.5;
        float _1640 = _1581 * 0.5;
        float _1641 = dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640));
        float _1646 = (_1641 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1641);
        float _1654 = (dot(vec3(_786, _787, _788), vec3(_1646 * _1638, _1646 * _1639, _1646 * _1640)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1663 = sqrt(((_1639 * _1639) + (_1638 * _1638)) + (_1640 * _1640)) / (_1594 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1665 = _1664 * 2.0;
        float _1669 = (1.0 - _1664) / (_1664 + 1.0);
        float _4198 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1679 = ((((1.0 - _1670) * (_1665 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1665 + 1.0))) + _1670) * _1594;
        float _1680 = _1562 * 0.5;
        float _1681 = _1572 * 0.5;
        float _1682 = _1582 * 0.5;
        float _1683 = dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682));
        float _1688 = (_1683 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1683);
        float _1696 = (dot(vec3(_786, _787, _788), vec3(_1688 * _1680, _1688 * _1681, _1688 * _1682)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1705 = sqrt(((_1681 * _1681) + (_1680 * _1680)) + (_1682 * _1682)) / (_1595 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1707 = _1706 * 2.0;
        float _1711 = (1.0 - _1706) / (_1706 + 1.0);
        float _4231 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1721 = ((((1.0 - _1712) * (_1707 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1707 + 1.0))) + _1712) * _1595;
        _1729 = _1562;
        _1730 = _1561;
        _1731 = _1560;
        _1732 = _1572;
        _1733 = _1571;
        _1734 = _1570;
        _1735 = _1582;
        _1736 = _1581;
        _1737 = _1580;
        _1738 = _1595;
        _1739 = _1594;
        _1740 = _1593;
        _1741 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)));
        _1742 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)));
        _1743 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)));
    }
    else
    {
        _1729 = _1417;
        _1730 = _1417;
        _1731 = _1417;
        _1732 = _1417;
        _1733 = _1417;
        _1734 = _1417;
        _1735 = _1417;
        _1736 = _1417;
        _1737 = _1417;
        _1738 = _1417;
        _1739 = _1417;
        _1740 = _1417;
        _1741 = 0.0;
        _1742 = 0.0;
        _1743 = 0.0;
    }
    float _1753 = (cbModelParam._m0[1u].x * (_1741 - _1429)) + _1429;
    float _1754 = (cbModelParam._m0[1u].x * (_1742 - _1430)) + _1430;
    float _1755 = (cbModelParam._m0[1u].x * (_1743 - _1431)) + _1431;
    float _1776 = fma(_1755, cbSceneParam._m0[89u].z, fma(_1754, cbSceneParam._m0[89u].y, _1753 * cbSceneParam._m0[89u].x));
    float _1779 = fma(_1755, cbSceneParam._m0[90u].z, fma(_1754, cbSceneParam._m0[90u].y, _1753 * cbSceneParam._m0[90u].x));
    float _1782 = fma(_1755, cbSceneParam._m0[91u].z, fma(_1754, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1753));
    float _1797 = _1022 * 0.5;
    float _1798 = _1023 * 0.5;
    float _1799 = _1024 * 0.5;
    float _1800 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1731, _1734, _1737, _1740));
    float _1803 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1730, _1733, _1736, _1739));
    float _1806 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1729, _1732, _1735, _1738));
    float _1840;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1813 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1416, _1420, _1423, _1426));
        float _1817 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1418, _1421, _1424, _1427));
        float _1821 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1419, _1422, _1425, _1428));
        float _1828 = dot(vec4(cbModelParam._m0[39u]), vec4(_1797, _1798, _1799, 1.0));
        _1840 = dot(vec3(isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)), isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0)), isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1828) ? 0.0 : (isnan(0.0) ? _1828 : max(0.0, _1828))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1840 = 1.0;
    }
    float _1851;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1842 = dot(vec4(cbModelParam._m0[40u]), vec4(_1797, _1798, _1799, 1.0));
        _1851 = dot(vec3(isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0)), isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1842) ? 0.0 : (isnan(0.0) ? _1842 : max(0.0, _1842))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1851 = 1.0;
    }
    float _1855 = (_1851 * cbModelParam._m0[1u].x) + (_1840 * (1.0 - cbModelParam._m0[1u].x));
    float _1865 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _929);
    float _1866 = isnan(_1865) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1865 : min(cbModelParam._m0[25u].z, _1865));
    float _1946;
    float _1948;
    float _1950;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1913 = fma(_1085, cbModelParam._m0[13u].z, fma(_1081, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1077)) + cbModelParam._m0[13u].w;
        float _1917 = fma(_1085, cbModelParam._m0[14u].z, fma(_1081, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1077)) + cbModelParam._m0[14u].w;
        float _1921 = fma(_1085, cbModelParam._m0[15u].z, fma(_1081, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1077)) + cbModelParam._m0[15u].w;
        float _1924 = fma(_1024, cbModelParam._m0[13u].z, fma(_1023, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1022));
        float _1927 = fma(_1024, cbModelParam._m0[14u].z, fma(_1023, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1022));
        float _1930 = fma(_1024, cbModelParam._m0[15u].z, fma(_1023, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1022));
        float _1958;
        if (_1924 > 0.0)
        {
            _1958 = abs((1.0 - _1913) / _1924);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1913 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1958 = frontier_phi_19_17_ladder;
        }
        float _2181;
        if (_1927 > 0.0)
        {
            _2181 = abs((1.0 - _1917) / _1927);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1917 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2181 = frontier_phi_28_24_ladder;
        }
        float _2438;
        if (_1930 > 0.0)
        {
            _2438 = abs((1.0 - _1921) / _1930);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1921 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2438 = frontier_phi_40_35_ladder;
        }
        float _2440 = isnan(_2181) ? _1958 : (isnan(_1958) ? _2181 : min(_1958, _2181));
        float _2441 = isnan(_2438) ? _2440 : (isnan(_2440) ? _2438 : min(_2440, _2438));
        float _2445 = (_2441 * _1924) + _1913;
        float _2446 = (_2441 * _1927) + _1917;
        float _2447 = (_2441 * _1930) + _1921;
        float _2448 = _2441 * 9.9999997473787516355514526367188e-05;
        float _2450 = (-1.0) - _2448;
        float _2452 = _2448 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2447 > _2452) || ((_2447 < _2450) || ((_2446 > _2452) || ((_2446 < _2450) || ((_2445 < _2450) || (_2445 > _2452))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2575 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2447, cbModelParam._m0[9u].z, fma(_2446, cbModelParam._m0[9u].y, _2445 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2447, cbModelParam._m0[10u].z, fma(_2446, cbModelParam._m0[10u].y, _2445 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2447, cbModelParam._m0[11u].z, fma(_2446, cbModelParam._m0[11u].y, _2445 * cbModelParam._m0[11u].x))), _1866);
            frontier_phi_18_40_ladder = _2575.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2575.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2575.x * cbModelParam._m0[1u].y;
        }
        _1946 = frontier_phi_18_40_ladder_2;
        _1948 = frontier_phi_18_40_ladder_1;
        _1950 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1934 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1022, _1023, _1024), _1866);
        _1946 = _1934.x * cbModelParam._m0[1u].y;
        _1948 = _1934.y * cbModelParam._m0[1u].y;
        _1950 = _1934.z * cbModelParam._m0[1u].y;
    }
    float _1954 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _929);
    float _1955 = isnan(_1954) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1954 : min(cbModelParam._m0[25u].w, _1954));
    float _2044;
    float _2046;
    float _2048;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2008 = fma(_1085, cbModelParam._m0[21u].z, fma(_1081, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1077)) + cbModelParam._m0[21u].w;
        float _2012 = fma(_1085, cbModelParam._m0[22u].z, fma(_1081, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1077)) + cbModelParam._m0[22u].w;
        float _2016 = fma(_1085, cbModelParam._m0[23u].z, fma(_1081, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1077)) + cbModelParam._m0[23u].w;
        float _2019 = fma(_1024, cbModelParam._m0[21u].z, fma(_1023, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1022));
        float _2022 = fma(_1024, cbModelParam._m0[22u].z, fma(_1023, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1022));
        float _2025 = fma(_1024, cbModelParam._m0[23u].z, fma(_1023, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1022));
        float _2186;
        if (_2019 > 0.0)
        {
            _2186 = abs((1.0 - _2008) / _2019);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2008 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2186 = frontier_phi_30_26_ladder;
        }
        float _2465;
        if (_2022 > 0.0)
        {
            _2465 = abs((1.0 - _2012) / _2022);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2022 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2012 + 1.0) / _2022);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2465 = frontier_phi_42_37_ladder;
        }
        float _2678;
        if (_2025 > 0.0)
        {
            _2678 = abs((1.0 - _2016) / _2025);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2016 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2678 = frontier_phi_51_48_ladder;
        }
        float _2680 = isnan(_2465) ? _2186 : (isnan(_2186) ? _2465 : min(_2186, _2465));
        float _2681 = isnan(_2678) ? _2680 : (isnan(_2680) ? _2678 : min(_2680, _2678));
        float _2685 = (_2681 * _2019) + _2008;
        float _2686 = (_2681 * _2022) + _2012;
        float _2687 = (_2681 * _2025) + _2016;
        float _2688 = _2681 * 9.9999997473787516355514526367188e-05;
        float _2689 = (-1.0) - _2688;
        float _2691 = _2688 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2687 > _2691) || ((_2687 < _2689) || ((_2686 > _2691) || ((_2686 < _2689) || ((_2685 < _2689) || (_2685 > _2691))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2887 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2687, cbModelParam._m0[17u].z, fma(_2686, cbModelParam._m0[17u].y, _2685 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2687, cbModelParam._m0[18u].z, fma(_2686, cbModelParam._m0[18u].y, _2685 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2687, cbModelParam._m0[19u].z, fma(_2686, cbModelParam._m0[19u].y, _2685 * cbModelParam._m0[19u].x))), _1955);
            frontier_phi_27_51_ladder = _2887.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2887.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2887.x * cbModelParam._m0[1u].z;
        }
        _2044 = frontier_phi_27_51_ladder_2;
        _2046 = frontier_phi_27_51_ladder_1;
        _2048 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2028 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1022, _1023, _1024), _1955);
        _2044 = _2028.x * cbModelParam._m0[1u].z;
        _2046 = _2028.y * cbModelParam._m0[1u].z;
        _2048 = _2028.z * cbModelParam._m0[1u].z;
    }
    float _2061 = (((_1048 * _999) + _1049) * _1014) * ((cbModelParam._m0[1u].w * (_2044 - _1946)) + _1946);
    float _2063 = (((_1048 * _1001) + _1049) * _1014) * ((cbModelParam._m0[1u].w * (_2046 - _1948)) + _1948);
    float _2065 = (((_1048 * _1002) + _1049) * _1014) * ((cbModelParam._m0[1u].w * (_2048 - _1950)) + _1950);
    float _2068 = fma(_2065, cbSceneParam._m0[89u].z, fma(_2063, cbSceneParam._m0[89u].y, _2061 * cbSceneParam._m0[89u].x));
    float _2071 = fma(_2065, cbSceneParam._m0[90u].z, fma(_2063, cbSceneParam._m0[90u].y, _2061 * cbSceneParam._m0[90u].x));
    float _2074 = fma(_2065, cbSceneParam._m0[91u].z, fma(_2063, cbSceneParam._m0[91u].y, _2061 * cbSceneParam._m0[91u].x));
    vec4 _2082 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_887, _888));
    float _2084 = _2082.w;
    float _2096 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2084);
    float _2097 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2084);
    float _2098 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2084);
    uvec4 _2102 = floatBitsToUint(cbInstanceData._m0[_942 + 5u]);
    uint _2104 = _2102.x * 14u;
    uint _2105 = _2104 + 13u;
    float _2112 = _1014 + (-1.0);
    float _2117 = (cbLight._m0[_2105].x * _2112) + 1.0;
    float _2118 = (cbLight._m0[_2105].y * _2112) + 1.0;
    float _2119 = (cbLight._m0[_2105].z * _2112) + 1.0;
    float _2120 = (cbLight._m0[_2105].w * _2112) + 1.0;
    uint _2121 = _2104 + 5u;
    float _2127 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
    uint _2131 = _2104 + 4u;
    float _2140 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
    uint _2144 = _2104 | 1u;
    float _2155 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_786, _787, _788));
    float _2158 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_786, _787, _788));
    float _4367 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _4378 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2163 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * 0.3183098733425140380859375;
    float _2165 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * 0.3183098733425140380859375;
    float _2172 = ((cbLight._m0[_2121].x * _2127) * _2165) + (((cbLight._m0[_2131].x * _2096) * _2140) * _2163);
    float _2173 = ((_2127 * cbLight._m0[_2121].y) * _2165) + (((cbLight._m0[_2131].y * _2097) * _2140) * _2163);
    float _2174 = ((_2127 * cbLight._m0[_2121].z) * _2165) + (((cbLight._m0[_2131].z * _2098) * _2140) * _2163);
    uvec4 _2178 = floatBitsToUint(cbLight._m0[_2104 + 12u]);
    bool _2180 = _2178.x == 0u;
    float _2191;
    float _2193;
    float _2195;
    if (_2180)
    {
        _2191 = _2172;
        _2193 = _2173;
        _2195 = _2174;
    }
    else
    {
        uint _2199 = _2104 + 6u;
        float _2215 = (dot(vec3(cbLight._m0[_2104 + 2u].xyz), vec3(_786, _787, _788)) * 0.5) + 0.5;
        float _2216 = _2215 * _2215;
        float _4389 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2217 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2218 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
        _2191 = (((cbLight._m0[_2199].x * 0.3183098733425140380859375) * _2217) * _2218) + _2172;
        _2193 = (((cbLight._m0[_2199].y * 0.3183098733425140380859375) * _2217) * _2218) + _2173;
        _2195 = (((cbLight._m0[_2199].z * 0.3183098733425140380859375) * _2217) * _2218) + _2174;
    }
    bool _2198 = _2178.y == 0u;
    float _2236;
    float _2238;
    float _2240;
    if (_2198)
    {
        _2236 = _2191;
        _2238 = _2193;
        _2240 = _2195;
    }
    else
    {
        uint _2409 = _2104 + 7u;
        float _2425 = (dot(vec3(cbLight._m0[_2104 + 3u].xyz), vec3(_786, _787, _788)) * 0.5) + 0.5;
        float _2426 = _2425 * _2425;
        float _4405 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2427 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2428 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
        _2236 = (((cbLight._m0[_2409].x * 0.3183098733425140380859375) * _2427) * _2428) + _2191;
        _2238 = (((cbLight._m0[_2409].y * 0.3183098733425140380859375) * _2427) * _2428) + _2193;
        _2240 = (((cbLight._m0[_2409].z * 0.3183098733425140380859375) * _2427) * _2428) + _2195;
    }
    uint _2243 = _2104 + 8u;
    float _2256 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2104].w)) * _929) * 0.949999988079071044921875);
    float _2257 = _2256 * _2256;
    float _2258 = cbLight._m0[_2104].x + _867;
    float _2259 = cbLight._m0[_2104].y + _868;
    float _2260 = cbLight._m0[_2104].z + _869;
    float _2264 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
    float _2265 = _2264 * _2258;
    float _2266 = _2264 * _2259;
    float _2267 = _2264 * _2260;
    float _2268 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2104].xyz));
    float _4421 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2271 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _4432 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _2272 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    float _2273 = dot(vec3(_786, _787, _788), vec3(_2265, _2266, _2267));
    float _4443 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _2277 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_2265, _2266, _2267));
    float _4454 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2281 = _2257 * _2257;
    float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
    float _2293 = exp2(log2(1.0 - (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) * 5.0);
    float _2294 = 0.959999978542327880859375 - _996;
    float _2296 = 0.959999978542327880859375 - _997;
    float _2297 = 0.959999978542327880859375 - _998;
    float _2304 = 1.0 - _2257;
    float _2315 = (0.5 / (((_2272 * ((_2271 * _2304) + _2257)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2304) + _2257) * _2271))) * _2271;
    float _4465 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2317 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
    uint _2331 = _2104 + 9u;
    float _2342 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2144].w)) * _929) * 0.949999988079071044921875);
    float _2343 = _2342 * _2342;
    float _2344 = cbLight._m0[_2144].x + _867;
    float _2345 = cbLight._m0[_2144].y + _868;
    float _2346 = cbLight._m0[_2144].z + _869;
    float _2350 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
    float _2351 = _2350 * _2344;
    float _2352 = _2350 * _2345;
    float _2353 = _2350 * _2346;
    float _2354 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2144].xyz));
    float _4476 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2357 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
    float _2358 = dot(vec3(_786, _787, _788), vec3(_2351, _2352, _2353));
    float _4487 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2361 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _2362 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_2351, _2352, _2353));
    float _4498 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2366 = _2343 * _2343;
    float _2370 = ((_2361 * _2361) * (_2366 + (-1.0))) + 1.0;
    float _2377 = exp2(log2(1.0 - (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) * 5.0);
    float _2384 = 1.0 - _2343;
    float _2394 = (0.5 / (((_2272 * ((_2357 * _2384) + _2343)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2384) + _2343) * _2357))) * _2357;
    float _4509 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2396 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2366 / ((_2370 * _2370) * 3.141590118408203125));
    float _2406 = (((((_2377 * _2294) + _999) * cbLight._m0[_2331].x) * _2396) * _2127) + ((((cbLight._m0[_2243].x * _2096) * ((_2293 * _2294) + _999)) * _2317) * _2140);
    float _2407 = (((((_2377 * _2296) + _1001) * cbLight._m0[_2331].y) * _2396) * _2127) + ((((cbLight._m0[_2243].y * _2097) * ((_2293 * _2296) + _1001)) * _2317) * _2140);
    float _2408 = (((((_2377 * _2297) + _1002) * cbLight._m0[_2331].z) * _2396) * _2127) + ((((cbLight._m0[_2243].z * _2098) * ((_2293 * _2297) + _1002)) * _2317) * _2140);
    float _2470;
    float _2472;
    float _2474;
    if (_2180)
    {
        _2470 = _2406;
        _2472 = _2407;
        _2474 = _2408;
    }
    else
    {
        uint _2476 = _2104 + 2u;
        uint _2480 = _2104 + 10u;
        float _2494 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2476].w)) * _929) * 0.949999988079071044921875);
        float _2495 = _2494 * _2494;
        float _2496 = cbLight._m0[_2476].x + _867;
        float _2497 = cbLight._m0[_2476].y + _868;
        float _2498 = cbLight._m0[_2476].z + _869;
        float _2502 = inversesqrt(dot(vec3(_2496, _2497, _2498), vec3(_2496, _2497, _2498)));
        float _2503 = _2502 * _2496;
        float _2504 = _2502 * _2497;
        float _2505 = _2502 * _2498;
        float _2506 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2476].xyz));
        float _4520 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2509 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2510 = dot(vec3(_786, _787, _788), vec3(_2503, _2504, _2505));
        float _4531 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2513 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2514 = dot(vec3(cbLight._m0[_2476].xyz), vec3(_2503, _2504, _2505));
        float _4542 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2518 = _2495 * _2495;
        float _2522 = ((_2513 * _2513) * (_2518 + (-1.0))) + 1.0;
        float _2529 = exp2(log2(1.0 - (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) * 5.0);
        float _2536 = 1.0 - _2495;
        float _2546 = (0.5 / (((_2272 * ((_2509 * _2536) + _2495)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2536) + _2495) * _2509))) * _2509;
        float _4553 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2548 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2518 / ((_2522 * _2522) * 3.141590118408203125));
        float _2549 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
        _2470 = (((((_2529 * _2294) + _999) * cbLight._m0[_2480].x) * _2548) * _2549) + _2406;
        _2472 = (((((_2529 * _2296) + _1001) * cbLight._m0[_2480].y) * _2548) * _2549) + _2407;
        _2474 = (((((_2529 * _2297) + _1002) * cbLight._m0[_2480].z) * _2548) * _2549) + _2408;
    }
    float _2584;
    float _2586;
    float _2588;
    if (_2198)
    {
        _2584 = _2470;
        _2586 = _2472;
        _2588 = _2474;
    }
    else
    {
        uint _2595 = _2104 + 3u;
        uint _2599 = _2104 + 11u;
        float _2613 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2595].w)) * _929) * 0.949999988079071044921875);
        float _2614 = _2613 * _2613;
        float _2615 = cbLight._m0[_2595].x + _867;
        float _2616 = cbLight._m0[_2595].y + _868;
        float _2617 = cbLight._m0[_2595].z + _869;
        float _2621 = inversesqrt(dot(vec3(_2615, _2616, _2617), vec3(_2615, _2616, _2617)));
        float _2622 = _2621 * _2615;
        float _2623 = _2621 * _2616;
        float _2624 = _2621 * _2617;
        float _2625 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2595].xyz));
        float _4569 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2628 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2629 = dot(vec3(_786, _787, _788), vec3(_2622, _2623, _2624));
        float _4580 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2632 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2633 = dot(vec3(cbLight._m0[_2595].xyz), vec3(_2622, _2623, _2624));
        float _4591 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2637 = _2614 * _2614;
        float _2641 = ((_2632 * _2632) * (_2637 + (-1.0))) + 1.0;
        float _2648 = exp2(log2(1.0 - (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) * 5.0);
        float _2655 = 1.0 - _2614;
        float _2665 = (0.5 / (((_2272 * ((_2628 * _2655) + _2614)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2655) + _2614) * _2628))) * _2628;
        float _4602 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2667 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2637 / ((_2641 * _2641) * 3.141590118408203125));
        float _2668 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
        _2584 = (((((_2648 * _2294) + _999) * cbLight._m0[_2599].x) * _2667) * _2668) + _2470;
        _2586 = (((((_2648 * _2296) + _1001) * cbLight._m0[_2599].y) * _2667) * _2668) + _2472;
        _2588 = (((((_2648 * _2297) + _1002) * cbLight._m0[_2599].z) * _2667) * _2668) + _2474;
    }
    float _2802;
    float _2804;
    float _2806;
    float _2808;
    float _2810;
    float _2812;
    if (_2102.y == 0u)
    {
        float _2743 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2744 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2743;
        float _2745 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2743;
        float _2746 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2743;
        uvec4 _2758 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2759 = _2758.x;
        uint _2770 = uint((float(_2758.y) * floor(float(uint(cbSceneParam._m0[85u].y * _888) / _2759))) + floor(float(uint(cbSceneParam._m0[85u].x * _887) / _2759)));
        float _2780 = (log2(_2746 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2781 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        uint _2784 = uint(isnan(14.0) ? _2781 : (isnan(_2781) ? 14.0 : min(_2781, 14.0)));
        uvec4 _2789 = texelFetch(g_lightClusterGridBuffer, int(((_2784 << 2u) + (_2770 << 6u)) >> 2u));
        uint _2790 = _2789.x;
        uint _2791 = _2758.z;
        float _2892;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        if (((((1u << ((_2791 >> 4u) & 15u)) + 4294967295u) & _2790) == 0u) || ((_2791 & 240u) == 0u))
        {
            _2892 = 0.0;
            _2894 = 0.0;
            _2896 = 0.0;
            _2898 = 0.0;
            _2900 = 0.0;
            _2902 = 0.0;
        }
        else
        {
            float _2893;
            float _2895;
            float _2897;
            float _2899;
            float _2901;
            float _2903;
            float _3044 = 0.0;
            float _3045 = 0.0;
            float _3046 = 0.0;
            float _3047 = 0.0;
            float _3048 = 0.0;
            float _3049 = 0.0;
            uint _3050 = 0u;
            uint _3059;
            bool _3060;
            for (;;)
            {
                _3059 = texelFetch(g_lightClassification, int((((_2784 << 5u) + (_2770 << 9u)) + (_3050 << 2u)) >> 2u)).x;
                _3060 = _3059 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3060)
                {
                    frontier_phi_68_pred = _3046;
                    frontier_phi_68_pred_1 = _3049;
                    frontier_phi_68_pred_2 = _3048;
                    frontier_phi_68_pred_3 = _3047;
                    frontier_phi_68_pred_4 = _3045;
                    frontier_phi_68_pred_5 = _3044;
                }
                else
                {
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    uint _3195;
                    _3189 = _3044;
                    _3190 = _3045;
                    _3191 = _3046;
                    _3192 = _3047;
                    _3193 = _3048;
                    _3194 = _3049;
                    _3195 = _3059;
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    float _3120;
                    float _3121;
                    for (;;)
                    {
                        uint _3199 = uint(findLSB(_3195)) + (_3050 << 5u);
                        uint _3196 = (_3195 + 4294967295u) & _3195;
                        uint _3201 = _3199 * 48u;
                        vec4 _3215 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3201)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 3u)).x));
                        uint _3221 = (_3199 * 48u) + 4u;
                        vec4 _3234 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3221)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 3u)).x));
                        uint _3240 = (_3199 * 48u) + 8u;
                        vec3 _3251 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3240)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 2u)).x));
                        float _3255 = _3215.x - _2744;
                        float _3256 = _3215.y - _2745;
                        float _3257 = _3215.z - _2746;
                        float _3258 = dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257));
                        float _3261 = inversesqrt(_3258);
                        float _3262 = _3261 * _3255;
                        float _3263 = _3261 * _3256;
                        float _3264 = _3261 * _3257;
                        float _3265 = dot(vec3(_910, _913, _916), vec3(_3262, _3263, _3264));
                        float _3270 = 1.0 - (_3258 * _3215.w);
                        float _4628 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3271 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3272 = sqrt(_3258) * _3234.w;
                        float _3275 = 1.39999997615814208984375 / (_3272 + 1.39999997615814208984375);
                        float _3276 = _3275 * _3275;
                        float _3279 = ((1.0 - _3276) * _3265) + _3276;
                        float _3282 = _3272 * _3272;
                        float _3286 = ((isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0))) * _3271) / ((_3282 * 0.699999988079071044921875) + 1.0);
                        float _3290 = (-0.0) - _2744;
                        float _3291 = (-0.0) - _2745;
                        float _3292 = (-0.0) - _2746;
                        float _3296 = inversesqrt(dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292)));
                        float _3297 = _3296 * _3290;
                        float _3298 = _3296 * _3291;
                        float _3299 = _3296 * _3292;
                        float _3307 = exp2(log2(1.0 / ((_3282 * 3.5) + 5.0)) * 0.25);
                        float _3308 = 1.0 - _1030;
                        float _3315 = sqrt(1.0 - ((1.0 - (_3308 * _3308)) * (1.0 - (_3307 * _3307))));
                        float _3316 = _3315 * _3315;
                        float _3317 = _3316 * _3316;
                        float _3318 = _3297 + _3262;
                        float _3319 = _3298 + _3263;
                        float _3320 = _3299 + _3264;
                        float _3324 = inversesqrt(dot(vec3(_3318, _3319, _3320), vec3(_3318, _3319, _3320)));
                        float _3328 = dot(vec3(_910, _913, _916), vec3(_3297, _3298, _3299));
                        float _4644 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                        float _3331 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3332 = dot(vec3(_910, _913, _916), vec3(_3324 * _3318, _3324 * _3319, _3324 * _3320));
                        float _4655 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3335 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3339 = ((_3335 * _3335) * (_3317 + (-1.0))) + 1.0;
                        float _3340 = _3275 * _3316;
                        float _3341 = _3340 * _3340;
                        float _3344 = ((1.0 - _3341) * _3265) + _3341;
                        float _4666 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3345 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                        float _3346 = 1.0 - _3316;
                        float _3356 = (0.5 / (((_3345 * ((_3331 * _3346) + _3316)) + 9.9999999392252902907785028219223e-09) + (((_3345 * _3346) + _3316) * _3331))) * _3345;
                        float _4677 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                        float _3367 = (((_3317 * 3.1415927410125732421875) * (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) / ((_3339 * _3339) * ((_3282 * 2.1991131305694580078125) + 3.141590118408203125))) * _3271;
                        _3119 = (_3286 * _3234.x) + _3192;
                        _3120 = (_3286 * _3234.y) + _3193;
                        _3121 = (_3286 * _3234.z) + _3194;
                        _3116 = (_3367 * _3251.x) + _3189;
                        _3117 = (_3367 * _3251.y) + _3190;
                        _3118 = (_3367 * _3251.z) + _3191;
                        if (_3196 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3189 = _3116;
                            _3190 = _3117;
                            _3191 = _3118;
                            _3192 = _3119;
                            _3193 = _3120;
                            _3194 = _3121;
                            _3195 = _3196;
                        }
                    }
                    frontier_phi_68_pred = _3118;
                    frontier_phi_68_pred_1 = _3121;
                    frontier_phi_68_pred_2 = _3120;
                    frontier_phi_68_pred_3 = _3119;
                    frontier_phi_68_pred_4 = _3117;
                    frontier_phi_68_pred_5 = _3116;
                }
                _2897 = frontier_phi_68_pred;
                _2903 = frontier_phi_68_pred_1;
                _2901 = frontier_phi_68_pred_2;
                _2899 = frontier_phi_68_pred_3;
                _2895 = frontier_phi_68_pred_4;
                _2893 = frontier_phi_68_pred_5;
                uint _3051 = _3050 + 1u;
                if (_3051 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3044 = _2893;
                    _3045 = _2895;
                    _3046 = _2897;
                    _3047 = _2899;
                    _3048 = _2901;
                    _3049 = _2903;
                    _3050 = _3051;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2892 = _2893;
            _2894 = _2895;
            _2896 = _2897;
            _2898 = _2899;
            _2900 = _2901;
            _2902 = _2903;
        }
        uvec4 _2906 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2907 = _2906.z;
        uint _2909 = (_2907 >> 8u) & 15u;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        float _3022;
        if (((4294967295u << _2909) & _2790) == 0u)
        {
            _3012 = _2892;
            _3014 = _2894;
            _3016 = _2896;
            _3018 = _2898;
            _3020 = _2900;
            _3022 = _2902;
        }
        else
        {
            float _3037 = inversesqrt(dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746)));
            float _3038 = _3037 * _2744;
            float _3039 = _3037 * _2745;
            float _3040 = _3037 * _2746;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2909 < ((_2907 >> 12u) & 15u))
            {
                float _3013;
                float _3015;
                float _3017;
                float _3019;
                float _3021;
                float _3023;
                float _3172 = _2892;
                float _3173 = _2894;
                float _3174 = _2896;
                float _3175 = _2898;
                float _3176 = _2900;
                float _3177 = _2902;
                uint _3178 = _2909;
                uint _3187;
                bool _3188;
                for (;;)
                {
                    _3187 = texelFetch(g_lightClassification, int((((_2784 << 5u) + (_2770 << 9u)) + (_3178 << 2u)) >> 2u)).x;
                    _3188 = _3187 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3188)
                    {
                        frontier_phi_79_pred = _3177;
                        frontier_phi_79_pred_1 = _3176;
                        frontier_phi_79_pred_2 = _3175;
                        frontier_phi_79_pred_3 = _3174;
                        frontier_phi_79_pred_4 = _3173;
                        frontier_phi_79_pred_5 = _3172;
                    }
                    else
                    {
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3675;
                        float _3676;
                        float _3677;
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3394 = _3172;
                        float _3395 = _3173;
                        float _3396 = _3174;
                        float _3397 = _3175;
                        float _3398 = _3176;
                        float _3399 = _3177;
                        uint _3400 = _3187;
                        uint _3401;
                        vec4 _3426;
                        float _3427;
                        vec4 _3442;
                        vec3 _3454;
                        vec4 _3469;
                        vec4 _3484;
                        float _3531;
                        bool _3532;
                        for (;;)
                        {
                            uint _3411 = ((_3178 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3400));
                            _3401 = (_3400 + 4294967295u) & _3400;
                            uint _3413 = _3411 * 40u;
                            _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            _3427 = _3426.w;
                            uint _3429 = (_3411 * 40u) + 4u;
                            _3442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 3u)).x));
                            uint _3444 = (_3411 * 40u) + 8u;
                            _3454 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x));
                            uint _3456 = (_3411 * 40u) + 16u;
                            _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            uint _3471 = (_3411 * 40u) + 20u;
                            _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            uint _3487 = (_3411 * 40u) + 24u;
                            vec4 _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            uint _3506 = (_3411 * 40u) + 28u;
                            vec4 _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            _3531 = fma(_2746, _3519.z, fma(_2745, _3519.y, _3519.x * _2744)) + _3519.w;
                            _3532 = !((fma(_2746, _3500.z, fma(_2745, _3500.y, _3500.x * _2744)) + _3500.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3532)
                            {
                                float _3559 = _3426.x - _2744;
                                float _3560 = _3426.y - _2745;
                                float _3561 = _3426.z - _2746;
                                float _3562 = dot(vec3(_3559, _3560, _3561), vec3(_3559, _3560, _3561));
                                float _3565 = inversesqrt(_3562);
                                float _3566 = _3565 * _3559;
                                float _3567 = _3565 * _3560;
                                float _3568 = _3565 * _3561;
                                float _3572 = 1.0 - (_3562 / (_3427 * _3427));
                                float _4688 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3573 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3577 = sqrt(_3562) * _3442.w;
                                float _3579 = 1.39999997615814208984375 / (_3577 + 1.39999997615814208984375);
                                float _3580 = _3579 * _3579;
                                float _3583 = ((1.0 - _3580) * dot(vec3(_3566, _3567, _3568), vec3(_910, _913, _916))) + _3580;
                                float _3586 = _3577 * _3577;
                                float _3590 = (fma(_2746, _3469.z, fma(_2745, _3469.y, _3469.x * _2744)) + _3469.w) / _3531;
                                float _3591 = (fma(_2746, _3484.z, fma(_2745, _3484.y, _3484.x * _2744)) + _3484.w) / _3531;
                                float _3595 = 1.0 - dot(vec2(_3590, _3591), vec2(_3590, _3591));
                                float _4704 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3596 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3597 = _3596 * (((isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0))) * _3573) / ((_3586 * 0.699999988079071044921875) + 1.0));
                                float _3609 = exp2(log2(1.0 / ((_3586 * 3.5) + 5.0)) * 0.25);
                                float _3610 = 1.0 - _1030;
                                float _3617 = sqrt(1.0 - ((1.0 - (_3610 * _3610)) * (1.0 - (_3609 * _3609))));
                                float _3618 = _3617 * _3617;
                                float _3619 = _3618 * _3618;
                                float _3620 = _3566 - _3038;
                                float _3621 = _3567 - _3039;
                                float _3622 = _3568 - _3040;
                                float _3626 = inversesqrt(dot(vec3(_3620, _3621, _3622), vec3(_3620, _3621, _3622)));
                                float _3630 = dot(vec3(_910, _913, _916), vec3((-0.0) - _3038, (-0.0) - _3039, (-0.0) - _3040));
                                float _4715 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3633 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3634 = dot(vec3(_910, _913, _916), vec3(_3626 * _3620, _3626 * _3621, _3626 * _3622));
                                float _4726 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3637 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3641 = ((_3637 * _3637) * (_3619 + (-1.0))) + 1.0;
                                float _3642 = _3579 * _3618;
                                float _3643 = _3642 * _3642;
                                float _3649 = ((1.0 - _3643) * dot(vec3(_910, _913, _916), vec3(_3566, _3567, _3568))) + _3643;
                                float _4737 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3650 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3651 = 1.0 - _3618;
                                float _3661 = (0.5 / (((_3650 * ((_3633 * _3651) + _3618)) + 9.9999999392252902907785028219223e-09) + (((_3650 * _3651) + _3618) * _3633))) * _3650;
                                float _4748 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3671 = (_3596 * _3573) * (((_3619 * 3.1415927410125732421875) * (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0)))) / ((_3641 * _3641) * ((_3586 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3597 * _3442.z;
                                frontier_phi_85_pred_1 = _3597 * _3442.y;
                                frontier_phi_85_pred_2 = _3597 * _3442.x;
                                frontier_phi_85_pred_3 = _3671 * _3454.z;
                                frontier_phi_85_pred_4 = _3671 * _3454.y;
                                frontier_phi_85_pred_5 = _3671 * _3454.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3680 = frontier_phi_85_pred;
                            _3679 = frontier_phi_85_pred_1;
                            _3678 = frontier_phi_85_pred_2;
                            _3677 = frontier_phi_85_pred_3;
                            _3676 = frontier_phi_85_pred_4;
                            _3675 = frontier_phi_85_pred_5;
                            _3384 = _3678 + _3397;
                            _3385 = _3679 + _3398;
                            _3386 = _3680 + _3399;
                            _3381 = _3675 + _3394;
                            _3382 = _3676 + _3395;
                            _3383 = _3677 + _3396;
                            if (_3401 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3394 = _3381;
                                _3395 = _3382;
                                _3396 = _3383;
                                _3397 = _3384;
                                _3398 = _3385;
                                _3399 = _3386;
                                _3400 = _3401;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3386;
                        frontier_phi_79_pred_1 = _3385;
                        frontier_phi_79_pred_2 = _3384;
                        frontier_phi_79_pred_3 = _3383;
                        frontier_phi_79_pred_4 = _3382;
                        frontier_phi_79_pred_5 = _3381;
                    }
                    _3023 = frontier_phi_79_pred;
                    _3021 = frontier_phi_79_pred_1;
                    _3019 = frontier_phi_79_pred_2;
                    _3017 = frontier_phi_79_pred_3;
                    _3015 = frontier_phi_79_pred_4;
                    _3013 = frontier_phi_79_pred_5;
                    uint _3179 = _3178 + 1u;
                    if (_3179 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3172 = _3013;
                        _3173 = _3015;
                        _3174 = _3017;
                        _3175 = _3019;
                        _3176 = _3021;
                        _3177 = _3023;
                        _3178 = _3179;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3019;
                frontier_phi_60_61_ladder_1 = _3023;
                frontier_phi_60_61_ladder_2 = _3021;
                frontier_phi_60_61_ladder_3 = _3017;
                frontier_phi_60_61_ladder_4 = _3015;
                frontier_phi_60_61_ladder_5 = _3013;
            }
            else
            {
                frontier_phi_60_61_ladder = _2898;
                frontier_phi_60_61_ladder_1 = _2902;
                frontier_phi_60_61_ladder_2 = _2900;
                frontier_phi_60_61_ladder_3 = _2896;
                frontier_phi_60_61_ladder_4 = _2894;
                frontier_phi_60_61_ladder_5 = _2892;
            }
            _3012 = frontier_phi_60_61_ladder_5;
            _3014 = frontier_phi_60_61_ladder_4;
            _3016 = frontier_phi_60_61_ladder_3;
            _3018 = frontier_phi_60_61_ladder;
            _3020 = frontier_phi_60_61_ladder_2;
            _3022 = frontier_phi_60_61_ladder_1;
        }
        float _3027 = isnan(1.0) ? _1014 : (isnan(_1014) ? 1.0 : min(_1014, 1.0));
        _2802 = (_3027 * _3018) + _2236;
        _2804 = (_3027 * _3020) + _2238;
        _2806 = (_3027 * _3022) + _2240;
        _2808 = ((_3012 * _999) * _3027) + _2584;
        _2810 = ((_3014 * _1001) * _3027) + _2586;
        _2812 = ((_3016 * _1002) * _3027) + _2588;
    }
    else
    {
        _2802 = _2236;
        _2804 = _2238;
        _2806 = _2240;
        _2808 = _2584;
        _2810 = _2586;
        _2812 = _2588;
    }
    float _4764 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _4775 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _4786 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _4797 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _2830 = ((isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2802 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1014))) + ((_2808 + ((isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0))) * _1855)) * cbPerFrame._m0[3u].x);
    float _2831 = ((isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2804 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1014))) + ((_2810 + ((isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0))) * _1855)) * cbPerFrame._m0[3u].x);
    float _2832 = ((isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2806 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1014))) + ((_2812 + ((isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0))) * _1855)) * cbPerFrame._m0[3u].x);
    float _2837 = cbInstanceData._m0[_942 + 6u].w * (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0)));
    float _2842 = _887 / cbSceneParam._m0[86u].x;
    float _2843 = _888 / cbSceneParam._m0[86u].y;
    vec4 _2857 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2842, _2843, (log2((isnan(cbSceneParam._m0[77u].w) ? _810 : (isnan(_810) ? cbSceneParam._m0[77u].w : min(_810, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2859 = _2857.x;
    float _2860 = _2857.y;
    float _2861 = _2857.z;
    float _2862 = _2857.w;
    float _2954;
    float _2956;
    float _2958;
    float _2960;
    if (_810 > cbSceneParam._m0[78u].w)
    {
        float _2917 = isnan(_810) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _810 : min(cbSceneParam._m0[80u].w, _810));
        float _2918 = _2917 / _810;
        float _2929 = _2918 * _860;
        float _2930 = _861 * _2918;
        float _2931 = (-0.0) - _2930;
        float _2932 = _2918 * _862;
        float _2934 = (cbSceneParam._m0[77u].w * _2931) / _2917;
        float _2935 = _2934 + cbSceneParam._m0[79u].w;
        float _2936 = cbSceneParam._m0[79u].w - _2930;
        float _2942 = sqrt(((_2929 * _2929) + (_2930 * _2930)) + (_2932 * _2932));
        float _2945 = (1.0 - (cbSceneParam._m0[77u].w / _2917)) * _2942;
        float _2950 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2952 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3129;
        if (abs((_2931 - _2934) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3129 = ((((_2935 > 0.0) ? exp2(_2950 * _2935) : (2.0 - exp2(_2952 * _2935))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2945;
        }
        else
        {
            float _3073 = 1.0 / cbSceneParam._m0[80u].x;
            float _3074 = isnan(_2936) ? _2935 : (isnan(_2935) ? _2936 : max(_2935, _2936));
            float _3075 = isnan(_2936) ? _2935 : (isnan(_2935) ? _2936 : min(_2935, _2936));
            float _3084 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : min(_3074, 0.0));
            float _3085 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : min(_3075, 0.0));
            _3129 = ((abs(_2942 / _2931) * cbSceneParam._m0[80u].y) * ((((_3084 - _3085) * 2.0) - ((exp2(_2950 * (isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0)))) - exp2(_2950 * (isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0))))) * _3073)) - ((exp2(_2952 * _3084) - exp2(_2952 * _3085)) * _3073))) + (_2945 * cbSceneParam._m0[80u].z);
        }
        vec4 _3131 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2842, _2843, 1.0), 0.0);
        float _3140 = exp2((_3129 * (-1.44269502162933349609375)) * (1.0 - _3131.w));
        float _3141 = log2(_3140);
        float _3157 = log2(_2862);
        _2954 = (exp2(_3157 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3141 * cbSceneParam._m0[78u].x)) * _3131.x) / cbSceneParam._m0[78u].x)) + _2859;
        _2956 = (exp2(_3157 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3141 * cbSceneParam._m0[78u].y)) * _3131.y) / cbSceneParam._m0[78u].y)) + _2860;
        _2958 = (exp2(_3157 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3141 * cbSceneParam._m0[78u].z)) * _3131.z) / cbSceneParam._m0[78u].z)) + _2861;
        _2960 = _3140 * _2862;
    }
    else
    {
        _2954 = _2859;
        _2956 = _2860;
        _2958 = _2861;
        _2960 = _2862;
    }
    bool _3167;
    vec4 _2970;
    vec4 _2992;
    float _2994;
    float _2998;
    float _2999;
    float _3000;
    float _3001;
    bool _3011;
    for (;;)
    {
        _2970 = cbMatDynParam._m0[0u];
        float _2972 = roundEven(_2970.y);
        bool _2973 = _2972 == 3.0;
        float _2974 = log2(_2960);
        float _2981 = exp2(_2974 * cbSceneParam._m0[78u].x) * _2830;
        float _2982 = exp2(_2974 * cbSceneParam._m0[78u].y) * _2831;
        float _2983 = exp2(_2974 * cbSceneParam._m0[78u].z) * _2832;
        float _2990 = _876 + (-0.5);
        _2992 = cbMtdParam._m0[1u];
        _2994 = _2992.y * _2990;
        float _2997 = (_2972 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2998 = _2997 * (_2973 ? _2981 : (_2981 + (cbSceneParam._m0[72u].w * _2954)));
        _2999 = _2997 * (_2973 ? _2982 : (_2982 + (cbSceneParam._m0[72u].w * _2956)));
        _3000 = _2997 * (_2973 ? _2983 : (_2983 + (cbSceneParam._m0[72u].w * _2958)));
        _3001 = _2990 * 0.999000012874603271484375;
        _3011 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3011)
        {
            if ((cbInstanceData._m0[_942 + 7u].x + _3001) < 0.5)
            {
                _3167 = true;
                break;
            }
        }
        uint _3108 = _943 + uint(_2970.w);
        if ((cbInstanceData._m0[_3108].w < 1.0) && ((cbInstanceData._m0[_3108].w + _3001) < 0.5))
        {
            _3167 = true;
            break;
        }
        if ((_2994 + _576) < _2992.x)
        {
            _3167 = true;
            break;
        }
        _3167 = false;
        break;
    }
    float _3372;
    if (_3167)
    {
        discard_state = true;
        _3372 = 0.0;
    }
    else
    {
        _3372 = _2837;
    }
    SV_Target.x = _2998;
    SV_Target.y = _2999;
    SV_Target.z = _3000;
    SV_Target.w = _3372;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2837;
    discard_exit();
}


