#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_snp_0_Texture2D_2;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D P_ACParts_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D P_ACParts_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_snp_0_Texture2D_10;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_snp_0_Texture2D_13;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_snp_0_Texture2D_14;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_snp_0_Texture2D_15;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1376;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253;
    float _254;
    float _255;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _253 = (-0.0) - _239;
        _254 = (-0.0) - _240;
        _255 = (-0.0) - _241;
    }
    else
    {
        _253 = _239;
        _254 = _240;
        _255 = _241;
    }
    float _265 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    vec4 _278 = texture(sampler2D(P_ACParts_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_265 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _283 = _278.z;
    float _284 = _278.w;
    float _292 = exp2(log2(_283 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _293 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _294 = isnan(1.0) ? _293 : (isnan(_293) ? 1.0 : min(_293, 1.0));
    float _300 = exp2(log2(1.0 - _284) * cbMtdParam._m0[20u].y);
    vec4 _312 = texture(sampler2D(P_ACParts_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _265) + cbTextureTilingScale._m0[0u].w));
    float _201[6];
    float _202[6];
    float _203[6];
    _201[0u] = cbMtdParam._m0[12u].x;
    _202[0u] = cbMtdParam._m0[12u].y;
    _203[0u] = cbMtdParam._m0[12u].z;
    _201[1u] = cbMtdParam._m0[13u].x;
    _202[1u] = cbMtdParam._m0[13u].y;
    _203[1u] = cbMtdParam._m0[13u].z;
    _201[2u] = cbMtdParam._m0[14u].x;
    _202[2u] = cbMtdParam._m0[14u].y;
    _203[2u] = cbMtdParam._m0[14u].z;
    _201[3u] = cbMtdParam._m0[15u].x;
    _202[3u] = cbMtdParam._m0[15u].y;
    _203[3u] = cbMtdParam._m0[15u].z;
    _201[4u] = cbMtdParam._m0[16u].x;
    _202[4u] = cbMtdParam._m0[16u].y;
    _203[4u] = cbMtdParam._m0[16u].z;
    _201[5u] = cbMtdParam._m0[11u].x;
    _202[5u] = cbMtdParam._m0[11u].y;
    _203[5u] = cbMtdParam._m0[11u].z;
    vec4 _394 = texture(sampler2D(P_ACParts_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _396 = _394.x;
    float _397 = _394.y;
    float _425 = roundEven(((_396 + (-0.02500000037252902984619140625)) + ((_394.z * cbMtdParam._m0[19u].w) * (texture(sampler2D(P_ACParts_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, ((cbMtdParam._m0[19u].z * TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w)).x - _396))) * 6.0);
    float _426 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    uint _429 = uint(int(isnan(5.0) ? _426 : (isnan(_426) ? 5.0 : min(_426, 5.0))));
    vec4 _459 = texture(sampler2D(P_ACParts_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _265) + cbTextureTilingScale._m0[3u].w));
    float _469 = cbMtdParam._m0[9u].x * _459.x;
    float _470 = cbMtdParam._m0[9u].y * _459.y;
    float _471 = cbMtdParam._m0[9u].z * _459.z;
    float _478 = ((((((_201[_429] - cbMtdParam._m0[10u].x) * _397) + cbMtdParam._m0[10u].x) * _312.x) - _469) * _300) + _469;
    float _479 = ((((((_202[_429] - cbMtdParam._m0[10u].y) * _397) + cbMtdParam._m0[10u].y) * _312.y) - _470) * _300) + _470;
    float _480 = ((((((_203[_429] - cbMtdParam._m0[10u].z) * _397) + cbMtdParam._m0[10u].z) * _312.z) - _471) * _300) + _471;
    float _484 = exp2(log2(_284) * cbMtdParam._m0[21u].y);
    vec4 _496 = texture(sampler2D(P_ACParts_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _265) + cbTextureTilingScale._m0[10u].w));
    vec4 _529 = texture(sampler2D(P_ACParts_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _540 = cbMtdParam._m0[18u].x * _529.x;
    float _541 = cbMtdParam._m0[18u].y * _529.y;
    float _542 = cbMtdParam._m0[18u].z * _529.z;
    vec4 _563 = texture(sampler2D(P_ACParts_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _265) + cbTextureTilingScale._m0[1u].w));
    float _571 = ((((((((cbMtdParam._m0[17u].x * _496.x) - _478) * _484) + _478) - _540) * _294) + _540) * 4.55000019073486328125) * _563.x;
    float _573 = ((((((((cbMtdParam._m0[17u].y * _496.y) - _479) * _484) + _479) - _541) * _294) + _541) * 4.55000019073486328125) * _563.y;
    float _575 = ((((((((cbMtdParam._m0[17u].z * _496.z) - _480) * _484) + _480) - _542) * _294) + _542) * 4.55000019073486328125) * _563.z;
    float _576 = _563.w * _312.w;
    vec4 _588 = texture(sampler2D(P_ACParts_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    float _590 = _588.x;
    float _608 = (((1.0 - _590) + texture(sampler2D(P_ACParts_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w)).x) * _294) + _590;
    float _627 = (((texture(sampler2D(P_ACParts_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _265) + cbTextureTilingScale._m0[6u].w)).x - _608) + cbMtdParam._m0[20u].z) * _300) + _608;
    float _650 = (((texture(sampler2D(P_ACParts_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - _627) + cbMtdParam._m0[22u].y) * _484) + _627;
    vec4 _662 = texture(sampler2D(P_ACParts_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _265) + cbTextureTilingScale._m0[12u].w));
    vec4 _680 = texture(sampler2D(P_ACParts_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _265) + cbTextureTilingScale._m0[13u].w));
    float _682 = _680.x;
    float _683 = _680.y;
    float _686 = cbMtdParam._m0[19u].x + _680.z;
    float _689 = (((cbMtdParam._m0[20u].x + _662.z) - _686) * _300) + _686;
    vec4 _701 = texture(sampler2D(P_ACParts_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _725 = texture(sampler2D(P_ACParts_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _727 = _725.x;
    float _728 = _725.y;
    float _731 = cbMtdParam._m0[21u].x + _725.z;
    float _734 = ((((_283 * 2.0) * ((((_701.z - _689) + cbMtdParam._m0[22u].x) * _484) + _689)) - _731) * _294) + _731;
    float _745 = ((_662.x - _682) * _300) + _682;
    float _746 = ((_662.y - _683) * _300) + _683;
    float _761 = (((((((_701.x - _745) * _484) + _745) - _727) * _294) + _727) * 2.0) + (-1.0);
    float _762 = (((((((_701.y - _746) * _484) + _746) - _728) * _294) + _728) * 2.0) + (-1.0);
    float _763 = dot(vec2(_761, _762), vec2(_761, _762));
    float _4008 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _768 = sqrt(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))));
    float _771 = _761 + (cbMtdParam._m0[21u].w * ((_278.x * 2.0) + (-1.0)));
    float _772 = _762 + (cbMtdParam._m0[21u].w * ((_278.y * 2.0) + (-1.0)));
    float _775 = fma(_768, _253, fma(_772, _245 * TANGENT.x, (_231 * _223) * _771));
    float _778 = fma(_768, _254, fma(_772, _245 * TANGENT.y, (_231 * _224) * _771));
    float _781 = fma(_768, _255, fma(_772, _245 * TANGENT.z, (_231 * _225) * _771));
    float _785 = inversesqrt(dot(vec3(_775, _778, _781), vec3(_775, _778, _781)));
    float _786 = _785 * _775;
    float _787 = _785 * _778;
    float _788 = _785 * _781;
    float _4019 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _789 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _4030 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _790 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _4041 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _4052 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _4063 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _4074 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _794 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _810 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _860 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _850);
    float _861 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _850);
    float _862 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _850);
    float _866 = inversesqrt(dot(vec3(_860, _861, _862), vec3(_860, _861, _862)));
    float _867 = _860 * _866;
    float _868 = _861 * _866;
    float _869 = _862 * _866;
    float _875 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _876 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _878 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _880 = _878.w;
    float _898 = fma(_788, cbSceneParam._m0[5u].z, fma(_787, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _786));
    float _901 = fma(_788, cbSceneParam._m0[6u].z, fma(_787, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _786));
    float _904 = fma(_788, cbSceneParam._m0[7u].z, fma(_787, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _786));
    vec4 _906 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _917 = (((_906.y - _790) + (_906.w * _790)) * cbMtdParam._m0[3u].x) + _790;
    uint _930 = uint(roundEven(NORMAL.w)) * 13u;
    uint _932 = (_930 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _938 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * cbInstanceData._m0[_932].x;
    float _939 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * cbInstanceData._m0[_932].y;
    float _940 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * cbInstanceData._m0[_932].z;
    float _4085 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _941 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _4096 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _942 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _943 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    vec4 _944 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _949 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _960 = (((_949.x - _794) + (_949.w * _794)) * cbMtdParam._m0[3u].x) + _794;
    float _973 = (cbMtdParam._m0[3u].x * (((_941 * _880) - _941) + _944.x)) + _941;
    float _974 = (cbMtdParam._m0[3u].x * (((_942 * _880) - _942) + _944.y)) + _942;
    float _975 = (cbMtdParam._m0[3u].x * (((_943 * _880) - _943) + _944.z)) + _943;
    float _976 = 1.0 - _960;
    float _977 = _976 * _973;
    float _978 = _976 * _974;
    float _979 = _976 * _975;
    float _984 = (_973 + (-0.039999999105930328369140625)) * _960;
    float _985 = (_974 + (-0.039999999105930328369140625)) * _960;
    float _986 = (_975 + (-0.039999999105930328369140625)) * _960;
    float _987 = _984 + 0.039999999105930328369140625;
    float _989 = _985 + 0.039999999105930328369140625;
    float _990 = _986 + 0.039999999105930328369140625;
    vec4 _999 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _875, cbSceneParam._m0[86u].y * _876));
    float _1002 = _999.x * TEXCOORD_4;
    float _1003 = dot(vec3(_786, _787, _788), vec3(_867, _868, _869));
    float _1006 = _1003 * 2.0;
    float _1010 = (_1006 * _786) - _867;
    float _1011 = (_1006 * _787) - _868;
    float _1012 = (_1006 * _788) - _869;
    float _1016 = abs(dot(vec3(_867, _868, _869), vec3(_786, _787, _788)));
    float _4118 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _1018 = sqrt(_917);
    float _1030 = exp2((_1018 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1018 * 3.0));
    float _1036 = (1.0 - _1030) * ((_1018 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1037 = _1030 * _1018;
    float _1065 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1069 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1073 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1375;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1100 = fma(_1073, cbModelParam._m0[26u].z, fma(_1069, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1065));
        float _1104 = fma(_1073, cbModelParam._m0[27u].z, fma(_1069, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1065));
        float _1108 = fma(_1073, cbModelParam._m0[28u].z, fma(_1069, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1065));
        float _1133 = _1065 + _786;
        float _1134 = _1069 + _787;
        float _1135 = _1073 + _788;
        float _1145 = fma(_1135, cbModelParam._m0[26u].z, fma(_1134, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1133)) - _1100;
        float _1146 = fma(_1135, cbModelParam._m0[27u].z, fma(_1134, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1133)) - _1104;
        float _1147 = fma(_1135, cbModelParam._m0[28u].z, fma(_1134, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1133)) - _1108;
        float _1151 = inversesqrt(dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147)));
        float _1164 = ((_1151 * _1145) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1100 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1151 * _1146) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1104 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1151 * _1147) / cbModelParam._m0[34u].z) + ((((((_1108 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        float _1203 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1169.x + (-0.5));
        float _1205 = _1203 * (_1169.y + (-0.5));
        float _1206 = _1203 * (_1169.z + (-0.5));
        float _1213 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1176.x + (-0.5));
        float _1215 = _1213 * (_1176.y + (-0.5));
        float _1216 = _1213 * (_1176.z + (-0.5));
        float _1223 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1183.x + (-0.5));
        float _1225 = _1223 * (_1183.y + (-0.5));
        float _1226 = _1223 * (_1183.z + (-0.5));
        float _1233 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1190.x + (-0.5));
        float _1235 = _1233 * (_1190.y + (-0.5));
        float _1236 = _1233 * (_1190.z + (-0.5));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = _1204 * 0.5;
        float _1241 = _1214 * 0.5;
        float _1242 = _1224 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1257 = (dot(vec3(_786, _787, _788), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1267 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _4166 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1269 + 1.0))) + _1274) * _1237;
        float _1284 = _1205 * 0.5;
        float _1285 = _1215 * 0.5;
        float _1286 = _1225 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_786, _787, _788), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _4199 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1311 + 1.0))) + _1316) * _1238;
        float _1326 = _1206 * 0.5;
        float _1327 = _1216 * 0.5;
        float _1328 = _1226 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_786, _787, _788), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _4232 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1353 + 1.0))) + _1358) * _1239;
        _1375 = _1206;
        _1377 = _1205;
        _1378 = _1204;
        _1379 = _1216;
        _1380 = _1215;
        _1381 = _1214;
        _1382 = _1226;
        _1383 = _1225;
        _1384 = _1224;
        _1385 = _1239;
        _1386 = _1238;
        _1387 = _1237;
        _1388 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1389 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1390 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
    }
    else
    {
        _1375 = _1376;
        _1377 = _1376;
        _1378 = _1376;
        _1379 = _1376;
        _1380 = _1376;
        _1381 = _1376;
        _1382 = _1376;
        _1383 = _1376;
        _1384 = _1376;
        _1385 = _1376;
        _1386 = _1376;
        _1387 = _1376;
        _1388 = 0.0;
        _1389 = 0.0;
        _1390 = 0.0;
    }
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1416 = fma(_1073, cbModelParam._m0[30u].z, fma(_1069, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1065));
        float _1420 = fma(_1073, cbModelParam._m0[31u].z, fma(_1069, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1065));
        float _1424 = fma(_1073, cbModelParam._m0[32u].z, fma(_1069, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1065));
        float _1447 = _1065 + _786;
        float _1448 = _1069 + _787;
        float _1449 = _1073 + _788;
        float _1459 = fma(_1449, cbModelParam._m0[30u].z, fma(_1448, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1447)) - _1416;
        float _1460 = fma(_1449, cbModelParam._m0[31u].z, fma(_1448, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1447)) - _1420;
        float _1461 = fma(_1449, cbModelParam._m0[32u].z, fma(_1448, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1447)) - _1424;
        float _1465 = inversesqrt(dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461)));
        float _1478 = ((_1465 * _1459) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1416 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1479 = ((_1465 * _1460) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1420 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1480 = ((_1465 * _1461) / cbModelParam._m0[35u].z) + ((((((_1424 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        float _1515 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1482.x + (-0.5));
        float _1517 = _1515 * (_1482.y + (-0.5));
        float _1518 = _1515 * (_1482.z + (-0.5));
        float _1525 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1489.x + (-0.5));
        float _1527 = _1525 * (_1489.y + (-0.5));
        float _1528 = _1525 * (_1489.z + (-0.5));
        float _1535 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1496.x + (-0.5));
        float _1537 = _1535 * (_1496.y + (-0.5));
        float _1538 = _1535 * (_1496.z + (-0.5));
        float _1545 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1546 = _1545 * (_1503.x + (-0.5));
        float _1547 = _1545 * (_1503.y + (-0.5));
        float _1548 = _1545 * (_1503.z + (-0.5));
        float _1549 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1550 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1551 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1552 = _1516 * 0.5;
        float _1553 = _1526 * 0.5;
        float _1554 = _1536 * 0.5;
        float _1555 = dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554));
        float _1560 = (_1555 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1555);
        float _1568 = (dot(vec3(_786, _787, _788), vec3(_1560 * _1552, _1560 * _1553, _1560 * _1554)) + 1.0) * 0.5;
        float _4273 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1577 = sqrt(((_1553 * _1553) + (_1552 * _1552)) + (_1554 * _1554)) / (_1549 + 9.9999997473787516355514526367188e-06);
        float _4284 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1579 = _1578 * 2.0;
        float _1583 = (1.0 - _1578) / (_1578 + 1.0);
        float _4295 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1593 = ((((1.0 - _1584) * (_1579 + 2.0)) * exp2(log2(isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_1579 + 1.0))) + _1584) * _1549;
        float _1594 = _1517 * 0.5;
        float _1595 = _1527 * 0.5;
        float _1596 = _1537 * 0.5;
        float _1597 = dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596));
        float _1602 = (_1597 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1597);
        float _1610 = (dot(vec3(_786, _787, _788), vec3(_1602 * _1594, _1602 * _1595, _1602 * _1596)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1619 = sqrt(((_1595 * _1595) + (_1594 * _1594)) + (_1596 * _1596)) / (_1550 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1621 = _1620 * 2.0;
        float _1625 = (1.0 - _1620) / (_1620 + 1.0);
        float _4328 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1635 = ((((1.0 - _1626) * (_1621 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1621 + 1.0))) + _1626) * _1550;
        float _1636 = _1518 * 0.5;
        float _1637 = _1528 * 0.5;
        float _1638 = _1538 * 0.5;
        float _1639 = dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638));
        float _1644 = (_1639 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1639);
        float _1652 = (dot(vec3(_786, _787, _788), vec3(_1644 * _1636, _1644 * _1637, _1644 * _1638)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1661 = sqrt(((_1637 * _1637) + (_1636 * _1636)) + (_1638 * _1638)) / (_1551 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1663 = _1662 * 2.0;
        float _1667 = (1.0 - _1662) / (_1662 + 1.0);
        float _4361 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1677 = ((((1.0 - _1668) * (_1663 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1663 + 1.0))) + _1668) * _1551;
        _1685 = _1518;
        _1686 = _1517;
        _1687 = _1516;
        _1688 = _1528;
        _1689 = _1527;
        _1690 = _1526;
        _1691 = _1538;
        _1692 = _1537;
        _1693 = _1536;
        _1694 = _1551;
        _1695 = _1550;
        _1696 = _1549;
        _1697 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)));
        _1698 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)));
        _1699 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)));
    }
    else
    {
        _1685 = _1376;
        _1686 = _1376;
        _1687 = _1376;
        _1688 = _1376;
        _1689 = _1376;
        _1690 = _1376;
        _1691 = _1376;
        _1692 = _1376;
        _1693 = _1376;
        _1694 = _1376;
        _1695 = _1376;
        _1696 = _1376;
        _1697 = 0.0;
        _1698 = 0.0;
        _1699 = 0.0;
    }
    float _1709 = (cbModelParam._m0[1u].x * (_1697 - _1388)) + _1388;
    float _1710 = (cbModelParam._m0[1u].x * (_1698 - _1389)) + _1389;
    float _1711 = (cbModelParam._m0[1u].x * (_1699 - _1390)) + _1390;
    float _1732 = fma(_1711, cbSceneParam._m0[89u].z, fma(_1710, cbSceneParam._m0[89u].y, _1709 * cbSceneParam._m0[89u].x));
    float _1735 = fma(_1711, cbSceneParam._m0[90u].z, fma(_1710, cbSceneParam._m0[90u].y, _1709 * cbSceneParam._m0[90u].x));
    float _1738 = fma(_1711, cbSceneParam._m0[91u].z, fma(_1710, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1709));
    float _1753 = _1010 * 0.5;
    float _1754 = _1011 * 0.5;
    float _1755 = _1012 * 0.5;
    float _1756 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1687, _1690, _1693, _1696));
    float _1759 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1686, _1689, _1692, _1695));
    float _1762 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1685, _1688, _1691, _1694));
    float _1796;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1769 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1375, _1379, _1382, _1385));
        float _1773 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1377, _1380, _1383, _1386));
        float _1777 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1378, _1381, _1384, _1387));
        float _1784 = dot(vec4(cbModelParam._m0[39u]), vec4(_1753, _1754, _1755, 1.0));
        _1796 = dot(vec3(isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1784) ? 0.0 : (isnan(0.0) ? _1784 : max(0.0, _1784))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1796 = 1.0;
    }
    float _1807;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1798 = dot(vec4(cbModelParam._m0[40u]), vec4(_1753, _1754, _1755, 1.0));
        _1807 = dot(vec3(isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1798) ? 0.0 : (isnan(0.0) ? _1798 : max(0.0, _1798))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1807 = 1.0;
    }
    float _1811 = (_1807 * cbModelParam._m0[1u].x) + (_1796 * (1.0 - cbModelParam._m0[1u].x));
    float _1821 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _917);
    float _1822 = isnan(_1821) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1821 : min(cbModelParam._m0[25u].z, _1821));
    float _1902;
    float _1904;
    float _1906;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1869 = fma(_1073, cbModelParam._m0[13u].z, fma(_1069, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1065)) + cbModelParam._m0[13u].w;
        float _1873 = fma(_1073, cbModelParam._m0[14u].z, fma(_1069, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1065)) + cbModelParam._m0[14u].w;
        float _1877 = fma(_1073, cbModelParam._m0[15u].z, fma(_1069, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1065)) + cbModelParam._m0[15u].w;
        float _1880 = fma(_1012, cbModelParam._m0[13u].z, fma(_1011, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1010));
        float _1883 = fma(_1012, cbModelParam._m0[14u].z, fma(_1011, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1010));
        float _1886 = fma(_1012, cbModelParam._m0[15u].z, fma(_1011, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1010));
        float _1914;
        if (_1880 > 0.0)
        {
            _1914 = abs((1.0 - _1869) / _1880);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1869 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1914 = frontier_phi_16_14_ladder;
        }
        float _2085;
        if (_1883 > 0.0)
        {
            _2085 = abs((1.0 - _1873) / _1883);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1873 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2085 = frontier_phi_25_21_ladder;
        }
        float _2380;
        if (_1886 > 0.0)
        {
            _2380 = abs((1.0 - _1877) / _1886);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1877 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2380 = frontier_phi_37_32_ladder;
        }
        float _2382 = isnan(_2085) ? _1914 : (isnan(_1914) ? _2085 : min(_1914, _2085));
        float _2383 = isnan(_2380) ? _2382 : (isnan(_2382) ? _2380 : min(_2382, _2380));
        float _2387 = (_2383 * _1880) + _1869;
        float _2388 = (_2383 * _1883) + _1873;
        float _2389 = (_2383 * _1886) + _1877;
        float _2390 = _2383 * 9.9999997473787516355514526367188e-05;
        float _2392 = (-1.0) - _2390;
        float _2394 = _2390 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2389 > _2394) || ((_2389 < _2392) || ((_2388 > _2394) || ((_2388 < _2392) || ((_2387 < _2392) || (_2387 > _2394))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2534 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2389, cbModelParam._m0[9u].z, fma(_2388, cbModelParam._m0[9u].y, _2387 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2389, cbModelParam._m0[10u].z, fma(_2388, cbModelParam._m0[10u].y, _2387 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2389, cbModelParam._m0[11u].z, fma(_2388, cbModelParam._m0[11u].y, _2387 * cbModelParam._m0[11u].x))), _1822);
            frontier_phi_15_37_ladder = _2534.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2534.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2534.z * cbModelParam._m0[1u].y;
        }
        _1902 = frontier_phi_15_37_ladder_1;
        _1904 = frontier_phi_15_37_ladder;
        _1906 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1890 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1010, _1011, _1012), _1822);
        _1902 = _1890.x * cbModelParam._m0[1u].y;
        _1904 = _1890.y * cbModelParam._m0[1u].y;
        _1906 = _1890.z * cbModelParam._m0[1u].y;
    }
    float _1910 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _917);
    float _1911 = isnan(_1910) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1910 : min(cbModelParam._m0[25u].w, _1910));
    float _2000;
    float _2002;
    float _2004;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1964 = fma(_1073, cbModelParam._m0[21u].z, fma(_1069, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1065)) + cbModelParam._m0[21u].w;
        float _1968 = fma(_1073, cbModelParam._m0[22u].z, fma(_1069, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1065)) + cbModelParam._m0[22u].w;
        float _1972 = fma(_1073, cbModelParam._m0[23u].z, fma(_1069, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1065)) + cbModelParam._m0[23u].w;
        float _1975 = fma(_1012, cbModelParam._m0[21u].z, fma(_1011, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1010));
        float _1978 = fma(_1012, cbModelParam._m0[22u].z, fma(_1011, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1010));
        float _1981 = fma(_1012, cbModelParam._m0[23u].z, fma(_1011, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1010));
        float _2090;
        if (_1975 > 0.0)
        {
            _2090 = abs((1.0 - _1964) / _1975);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1964 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2090 = frontier_phi_27_23_ladder;
        }
        float _2407;
        if (_1978 > 0.0)
        {
            _2407 = abs((1.0 - _1968) / _1978);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1968 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2407 = frontier_phi_39_34_ladder;
        }
        float _2745;
        if (_1981 > 0.0)
        {
            _2745 = abs((1.0 - _1972) / _1981);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1972 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2745 = frontier_phi_49_46_ladder;
        }
        float _2747 = isnan(_2407) ? _2090 : (isnan(_2090) ? _2407 : min(_2090, _2407));
        float _2748 = isnan(_2745) ? _2747 : (isnan(_2747) ? _2745 : min(_2747, _2745));
        float _2752 = (_2748 * _1975) + _1964;
        float _2753 = (_2748 * _1978) + _1968;
        float _2754 = (_2748 * _1981) + _1972;
        float _2755 = _2748 * 9.9999997473787516355514526367188e-05;
        float _2756 = (-1.0) - _2755;
        float _2758 = _2755 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2754 > _2758) || ((_2754 < _2756) || ((_2753 > _2758) || ((_2753 < _2756) || ((_2752 < _2756) || (_2752 > _2758))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2876 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2754, cbModelParam._m0[17u].z, fma(_2753, cbModelParam._m0[17u].y, _2752 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2754, cbModelParam._m0[18u].z, fma(_2753, cbModelParam._m0[18u].y, _2752 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2754, cbModelParam._m0[19u].z, fma(_2753, cbModelParam._m0[19u].y, _2752 * cbModelParam._m0[19u].x))), _1911);
            frontier_phi_24_49_ladder = _2876.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2876.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2876.x * cbModelParam._m0[1u].z;
        }
        _2000 = frontier_phi_24_49_ladder_2;
        _2002 = frontier_phi_24_49_ladder_1;
        _2004 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1984 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1010, _1011, _1012), _1911);
        _2000 = _1984.x * cbModelParam._m0[1u].z;
        _2002 = _1984.y * cbModelParam._m0[1u].z;
        _2004 = _1984.z * cbModelParam._m0[1u].z;
    }
    float _2017 = (((_1036 * _987) + _1037) * _1002) * ((cbModelParam._m0[1u].w * (_2000 - _1902)) + _1902);
    float _2019 = (((_1036 * _989) + _1037) * _1002) * ((cbModelParam._m0[1u].w * (_2002 - _1904)) + _1904);
    float _2021 = (((_1036 * _990) + _1037) * _1002) * ((cbModelParam._m0[1u].w * (_2004 - _1906)) + _1906);
    float _2024 = fma(_2021, cbSceneParam._m0[89u].z, fma(_2019, cbSceneParam._m0[89u].y, _2017 * cbSceneParam._m0[89u].x));
    float _2027 = fma(_2021, cbSceneParam._m0[90u].z, fma(_2019, cbSceneParam._m0[90u].y, _2017 * cbSceneParam._m0[90u].x));
    float _2030 = fma(_2021, cbSceneParam._m0[91u].z, fma(_2019, cbSceneParam._m0[91u].y, _2017 * cbSceneParam._m0[91u].x));
    float _2064 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2068 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2072 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2076 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2077 = _2064 / _2076;
    float _2078 = _2068 / _2076;
    float _2079 = _2072 / _2076;
    float _2226;
    float _2227;
    float _2228;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2106 = ((uint(_2079 > cbSceneParam._m0[59u].y) + uint(_2079 > cbSceneParam._m0[59u].x)) + uint(_2079 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2107 = _2106 + 43u;
        uint _2115 = _2106 + 44u;
        uint _2123 = _2106 + 45u;
        uint _2131 = _2106 + 46u;
        float _2142 = fma(_2076, cbSceneParam._m0[_2107].w, fma(_2072, cbSceneParam._m0[_2107].z, fma(_2068, cbSceneParam._m0[_2107].y, _2064 * cbSceneParam._m0[_2107].x)));
        float _2146 = fma(_2076, cbSceneParam._m0[_2115].w, fma(_2072, cbSceneParam._m0[_2115].z, fma(_2068, cbSceneParam._m0[_2115].y, _2064 * cbSceneParam._m0[_2115].x)));
        float _2154 = fma(_2076, cbSceneParam._m0[_2131].w, fma(_2072, cbSceneParam._m0[_2131].z, fma(_2068, cbSceneParam._m0[_2131].y, _2064 * cbSceneParam._m0[_2131].x)));
        float _2159 = cbSceneParam._m0[33u].z * _2154;
        float _2161 = cbSceneParam._m0[33u].w * _2154;
        float _2164 = fma(_2076, cbSceneParam._m0[_2123].w, fma(_2072, cbSceneParam._m0[_2123].z, fma(_2068, cbSceneParam._m0[_2123].y, _2064 * cbSceneParam._m0[_2123].x))) / _2154;
        float _2212 = (cbSceneParam._m0[33u].x - sqrt(((_2078 * _2078) + (_2077 * _2077)) + (_2079 * _2079))) * cbSceneParam._m0[33u].y;
        float _4487 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2219 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2159 + _2142) / _2154, (_2161 + _2146) / _2154), _2164), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2161 + _2142) / _2154, (_2146 - _2159) / _2154), _2164), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2142 - _2159) / _2154, (_2146 - _2161) / _2154), _2164), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2142 - _2161) / _2154, (_2159 + _2146) / _2154), _2164), 0.0)).x), vec4(0.25)));
        _2226 = 1.0 - (_2219 * cbSceneParam._m0[34u].x);
        _2227 = 1.0 - (_2219 * cbSceneParam._m0[34u].y);
        _2228 = 1.0 - (_2219 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2226 = 1.0;
        _2227 = 1.0;
        _2228 = 1.0;
    }
    float _2292;
    float _2294;
    float _2296;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2280 = fma(_2076, cbSceneParam._m0[63u].w, fma(_2072, cbSceneParam._m0[63u].z, fma(_2068, cbSceneParam._m0[63u].y, _2064 * cbSceneParam._m0[63u].x)));
        float _2281 = fma(_2076, cbSceneParam._m0[60u].w, fma(_2072, cbSceneParam._m0[60u].z, fma(_2068, cbSceneParam._m0[60u].y, _2064 * cbSceneParam._m0[60u].x))) / _2280;
        float _2282 = fma(_2076, cbSceneParam._m0[61u].w, fma(_2072, cbSceneParam._m0[61u].z, fma(_2068, cbSceneParam._m0[61u].y, _2064 * cbSceneParam._m0[61u].x))) / _2280;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2281 >= cbSceneParam._m0[64u].x) && (_2282 >= cbSceneParam._m0[64u].y)) && (_2281 <= cbSceneParam._m0[64u].z)) && (_2282 <= cbSceneParam._m0[64u].w))
        {
            float _2420 = fma(_2076, cbSceneParam._m0[62u].w, fma(_2072, cbSceneParam._m0[62u].z, fma(_2068, cbSceneParam._m0[62u].y, _2064 * cbSceneParam._m0[62u].x))) / _2280;
            float _2424 = isnan(cbSceneParam._m0[41u].w) ? _2420 : (isnan(_2420) ? cbSceneParam._m0[41u].w : max(_2420, cbSceneParam._m0[41u].w));
            float _2467 = (cbSceneParam._m0[33u].x - sqrt(((_2078 * _2078) + (_2077 * _2077)) + (_2079 * _2079))) * cbSceneParam._m0[33u].y;
            float _4503 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
            float _2474 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2281, cbSceneParam._m0[33u].w + _2282), _2424), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2281, _2282 - cbSceneParam._m0[33u].z), _2424), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2281 - cbSceneParam._m0[33u].z, _2282 - cbSceneParam._m0[33u].w), _2424), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2281 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2282), _2424), 0.0)).x), vec4(0.25)));
            float _2478 = 1.0 - (_2474 * cbSceneParam._m0[34u].x);
            float _2479 = 1.0 - (_2474 * cbSceneParam._m0[34u].y);
            float _2480 = 1.0 - (_2474 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2479) ? _2227 : (isnan(_2227) ? _2479 : min(_2227, _2479));
            frontier_phi_36_35_ladder_1 = isnan(_2480) ? _2228 : (isnan(_2228) ? _2480 : min(_2228, _2480));
            frontier_phi_36_35_ladder_2 = isnan(_2478) ? _2226 : (isnan(_2226) ? _2478 : min(_2226, _2478));
        }
        else
        {
            frontier_phi_36_35_ladder = _2227;
            frontier_phi_36_35_ladder_1 = _2228;
            frontier_phi_36_35_ladder_2 = _2226;
        }
        _2292 = frontier_phi_36_35_ladder_2;
        _2294 = frontier_phi_36_35_ladder;
        _2296 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2292 = _2226;
        _2294 = _2227;
        _2296 = _2228;
    }
    uvec4 _2301 = floatBitsToUint(cbInstanceData._m0[_930 + 5u]);
    uint _2303 = _2301.x * 14u;
    uint _2304 = _2303 + 13u;
    float _2311 = _1002 + (-1.0);
    float _2316 = (cbLight._m0[_2304].x * _2311) + 1.0;
    float _2317 = (cbLight._m0[_2304].y * _2311) + 1.0;
    float _2318 = (cbLight._m0[_2304].z * _2311) + 1.0;
    float _2319 = (cbLight._m0[_2304].w * _2311) + 1.0;
    uint _2320 = _2303 + 5u;
    float _2326 = isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0));
    uint _2330 = _2303 + 4u;
    float _2339 = isnan(1.0) ? _2316 : (isnan(_2316) ? 1.0 : min(_2316, 1.0));
    uint _2343 = _2303 | 1u;
    float _2354 = dot(vec3(cbLight._m0[_2303].xyz), vec3(_786, _787, _788));
    float _2357 = dot(vec3(cbLight._m0[_2343].xyz), vec3(_786, _787, _788));
    float _4539 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _4550 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2362 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * 0.3183098733425140380859375;
    float _2364 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * 0.3183098733425140380859375;
    float _2371 = ((cbLight._m0[_2320].x * _2326) * _2364) + (((cbLight._m0[_2330].x * _2292) * _2339) * _2362);
    float _2372 = ((_2326 * cbLight._m0[_2320].y) * _2364) + (((cbLight._m0[_2330].y * _2294) * _2339) * _2362);
    float _2373 = ((_2326 * cbLight._m0[_2320].z) * _2364) + (((cbLight._m0[_2330].z * _2296) * _2339) * _2362);
    uvec4 _2377 = floatBitsToUint(cbLight._m0[_2303 + 12u]);
    bool _2379 = _2377.x == 0u;
    float _2481;
    float _2483;
    float _2485;
    if (_2379)
    {
        _2481 = _2371;
        _2483 = _2372;
        _2485 = _2373;
    }
    else
    {
        uint _2489 = _2303 + 6u;
        float _2505 = (dot(vec3(cbLight._m0[_2303 + 2u].xyz), vec3(_786, _787, _788)) * 0.5) + 0.5;
        float _2506 = _2505 * _2505;
        float _4561 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2507 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2508 = isnan(1.0) ? _2318 : (isnan(_2318) ? 1.0 : min(_2318, 1.0));
        _2481 = (((cbLight._m0[_2489].x * 0.3183098733425140380859375) * _2507) * _2508) + _2371;
        _2483 = (((cbLight._m0[_2489].y * 0.3183098733425140380859375) * _2507) * _2508) + _2372;
        _2485 = (((cbLight._m0[_2489].z * 0.3183098733425140380859375) * _2507) * _2508) + _2373;
    }
    bool _2488 = _2377.y == 0u;
    float _2543;
    float _2545;
    float _2547;
    if (_2488)
    {
        _2543 = _2481;
        _2545 = _2483;
        _2547 = _2485;
    }
    else
    {
        uint _2716 = _2303 + 7u;
        float _2732 = (dot(vec3(cbLight._m0[_2303 + 3u].xyz), vec3(_786, _787, _788)) * 0.5) + 0.5;
        float _2733 = _2732 * _2732;
        float _4577 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2734 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _2735 = isnan(1.0) ? _2319 : (isnan(_2319) ? 1.0 : min(_2319, 1.0));
        _2543 = (((cbLight._m0[_2716].x * 0.3183098733425140380859375) * _2734) * _2735) + _2481;
        _2545 = (((cbLight._m0[_2716].y * 0.3183098733425140380859375) * _2734) * _2735) + _2483;
        _2547 = (((cbLight._m0[_2716].z * 0.3183098733425140380859375) * _2734) * _2735) + _2485;
    }
    uint _2550 = _2303 + 8u;
    float _2563 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2303].w)) * _917) * 0.949999988079071044921875);
    float _2564 = _2563 * _2563;
    float _2565 = cbLight._m0[_2303].x + _867;
    float _2566 = cbLight._m0[_2303].y + _868;
    float _2567 = cbLight._m0[_2303].z + _869;
    float _2571 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
    float _2572 = _2571 * _2565;
    float _2573 = _2571 * _2566;
    float _2574 = _2571 * _2567;
    float _2575 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2303].xyz));
    float _4593 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2578 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _4604 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _2579 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2580 = dot(vec3(_786, _787, _788), vec3(_2572, _2573, _2574));
    float _4615 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2583 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _2584 = dot(vec3(cbLight._m0[_2303].xyz), vec3(_2572, _2573, _2574));
    float _4626 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2588 = _2564 * _2564;
    float _2592 = ((_2583 * _2583) * (_2588 + (-1.0))) + 1.0;
    float _2600 = exp2(log2(1.0 - (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) * 5.0);
    float _2601 = 0.959999978542327880859375 - _984;
    float _2603 = 0.959999978542327880859375 - _985;
    float _2604 = 0.959999978542327880859375 - _986;
    float _2611 = 1.0 - _2564;
    float _2622 = (0.5 / (((_2579 * ((_2578 * _2611) + _2564)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2611) + _2564) * _2578))) * _2578;
    float _4637 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2624 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2588 / ((_2592 * _2592) * 3.141590118408203125));
    uint _2638 = _2303 + 9u;
    float _2649 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2343].w)) * _917) * 0.949999988079071044921875);
    float _2650 = _2649 * _2649;
    float _2651 = cbLight._m0[_2343].x + _867;
    float _2652 = cbLight._m0[_2343].y + _868;
    float _2653 = cbLight._m0[_2343].z + _869;
    float _2657 = inversesqrt(dot(vec3(_2651, _2652, _2653), vec3(_2651, _2652, _2653)));
    float _2658 = _2657 * _2651;
    float _2659 = _2657 * _2652;
    float _2660 = _2657 * _2653;
    float _2661 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2343].xyz));
    float _4648 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2664 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
    float _2665 = dot(vec3(_786, _787, _788), vec3(_2658, _2659, _2660));
    float _4659 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2668 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
    float _2669 = dot(vec3(cbLight._m0[_2343].xyz), vec3(_2658, _2659, _2660));
    float _4670 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
    float _2673 = _2650 * _2650;
    float _2677 = ((_2668 * _2668) * (_2673 + (-1.0))) + 1.0;
    float _2684 = exp2(log2(1.0 - (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) * 5.0);
    float _2691 = 1.0 - _2650;
    float _2701 = (0.5 / (((_2579 * ((_2664 * _2691) + _2650)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2691) + _2650) * _2664))) * _2664;
    float _4681 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
    float _2703 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2673 / ((_2677 * _2677) * 3.141590118408203125));
    float _2713 = (((((_2684 * _2601) + _987) * cbLight._m0[_2638].x) * _2703) * _2326) + ((((cbLight._m0[_2550].x * _2292) * ((_2600 * _2601) + _987)) * _2624) * _2339);
    float _2714 = (((((_2684 * _2603) + _989) * cbLight._m0[_2638].y) * _2703) * _2326) + ((((cbLight._m0[_2550].y * _2294) * ((_2600 * _2603) + _989)) * _2624) * _2339);
    float _2715 = (((((_2684 * _2604) + _990) * cbLight._m0[_2638].z) * _2703) * _2326) + ((((cbLight._m0[_2550].z * _2296) * ((_2600 * _2604) + _990)) * _2624) * _2339);
    float _2771;
    float _2773;
    float _2775;
    if (_2379)
    {
        _2771 = _2713;
        _2773 = _2714;
        _2775 = _2715;
    }
    else
    {
        uint _2777 = _2303 + 2u;
        uint _2781 = _2303 + 10u;
        float _2795 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2777].w)) * _917) * 0.949999988079071044921875);
        float _2796 = _2795 * _2795;
        float _2797 = cbLight._m0[_2777].x + _867;
        float _2798 = cbLight._m0[_2777].y + _868;
        float _2799 = cbLight._m0[_2777].z + _869;
        float _2803 = inversesqrt(dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799)));
        float _2804 = _2803 * _2797;
        float _2805 = _2803 * _2798;
        float _2806 = _2803 * _2799;
        float _2807 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2777].xyz));
        float _4692 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2810 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2811 = dot(vec3(_786, _787, _788), vec3(_2804, _2805, _2806));
        float _4703 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2814 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
        float _2815 = dot(vec3(cbLight._m0[_2777].xyz), vec3(_2804, _2805, _2806));
        float _4714 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2819 = _2796 * _2796;
        float _2823 = ((_2814 * _2814) * (_2819 + (-1.0))) + 1.0;
        float _2830 = exp2(log2(1.0 - (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)))) * 5.0);
        float _2837 = 1.0 - _2796;
        float _2847 = (0.5 / (((_2579 * ((_2810 * _2837) + _2796)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2837) + _2796) * _2810))) * _2810;
        float _4725 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        float _2849 = (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_2819 / ((_2823 * _2823) * 3.141590118408203125));
        float _2850 = isnan(1.0) ? _2318 : (isnan(_2318) ? 1.0 : min(_2318, 1.0));
        _2771 = (((((_2830 * _2601) + _987) * cbLight._m0[_2781].x) * _2849) * _2850) + _2713;
        _2773 = (((((_2830 * _2603) + _989) * cbLight._m0[_2781].y) * _2849) * _2850) + _2714;
        _2775 = (((((_2830 * _2604) + _990) * cbLight._m0[_2781].z) * _2849) * _2850) + _2715;
    }
    float _2881;
    float _2883;
    float _2885;
    if (_2488)
    {
        _2881 = _2771;
        _2883 = _2773;
        _2885 = _2775;
    }
    else
    {
        uint _2892 = _2303 + 3u;
        uint _2896 = _2303 + 11u;
        float _2910 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2892].w)) * _917) * 0.949999988079071044921875);
        float _2911 = _2910 * _2910;
        float _2912 = cbLight._m0[_2892].x + _867;
        float _2913 = cbLight._m0[_2892].y + _868;
        float _2914 = cbLight._m0[_2892].z + _869;
        float _2918 = inversesqrt(dot(vec3(_2912, _2913, _2914), vec3(_2912, _2913, _2914)));
        float _2919 = _2918 * _2912;
        float _2920 = _2918 * _2913;
        float _2921 = _2918 * _2914;
        float _2922 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2892].xyz));
        float _4741 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        float _2925 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
        float _2926 = dot(vec3(_786, _787, _788), vec3(_2919, _2920, _2921));
        float _4752 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
        float _2929 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
        float _2930 = dot(vec3(cbLight._m0[_2892].xyz), vec3(_2919, _2920, _2921));
        float _4763 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
        float _2934 = _2911 * _2911;
        float _2938 = ((_2929 * _2929) * (_2934 + (-1.0))) + 1.0;
        float _2945 = exp2(log2(1.0 - (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) * 5.0);
        float _2952 = 1.0 - _2911;
        float _2962 = (0.5 / (((_2579 * ((_2925 * _2952) + _2911)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2952) + _2911) * _2925))) * _2925;
        float _4774 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
        float _2964 = (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2934 / ((_2938 * _2938) * 3.141590118408203125));
        float _2965 = isnan(1.0) ? _2319 : (isnan(_2319) ? 1.0 : min(_2319, 1.0));
        _2881 = (((((_2945 * _2601) + _987) * cbLight._m0[_2896].x) * _2964) * _2965) + _2771;
        _2883 = (((((_2945 * _2603) + _989) * cbLight._m0[_2896].y) * _2964) * _2965) + _2773;
        _2885 = (((((_2945 * _2604) + _990) * cbLight._m0[_2896].z) * _2964) * _2965) + _2775;
    }
    float _3030;
    float _3032;
    float _3034;
    float _3036;
    float _3038;
    float _3040;
    if (_2301.y == 0u)
    {
        uvec4 _2986 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2987 = _2986.x;
        uint _2998 = uint((float(_2986.y) * floor(float(uint(cbSceneParam._m0[85u].y * _876) / _2987))) + floor(float(uint(cbSceneParam._m0[85u].x * _875) / _2987)));
        float _3008 = (log2(_2079 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3009 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
        uint _3012 = uint(isnan(14.0) ? _3009 : (isnan(_3009) ? 14.0 : min(_3009, 14.0)));
        uvec4 _3017 = texelFetch(g_lightClusterGridBuffer, int(((_3012 << 2u) + (_2998 << 6u)) >> 2u));
        uint _3018 = _3017.x;
        uint _3019 = _2986.z;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        float _3109;
        if (((((1u << ((_3019 >> 4u) & 15u)) + 4294967295u) & _3018) == 0u) || ((_3019 & 240u) == 0u))
        {
            _3099 = 0.0;
            _3101 = 0.0;
            _3103 = 0.0;
            _3105 = 0.0;
            _3107 = 0.0;
            _3109 = 0.0;
        }
        else
        {
            float _3100;
            float _3102;
            float _3104;
            float _3106;
            float _3108;
            float _3110;
            float _3243 = 0.0;
            float _3244 = 0.0;
            float _3245 = 0.0;
            float _3246 = 0.0;
            float _3247 = 0.0;
            float _3248 = 0.0;
            uint _3249 = 0u;
            uint _3258;
            bool _3259;
            for (;;)
            {
                _3258 = texelFetch(g_lightClassification, int((((_3012 << 5u) + (_2998 << 9u)) + (_3249 << 2u)) >> 2u)).x;
                _3259 = _3258 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3259)
                {
                    frontier_phi_68_pred = _3248;
                    frontier_phi_68_pred_1 = _3247;
                    frontier_phi_68_pred_2 = _3246;
                    frontier_phi_68_pred_3 = _3244;
                    frontier_phi_68_pred_4 = _3243;
                    frontier_phi_68_pred_5 = _3245;
                }
                else
                {
                    float _3367;
                    float _3368;
                    float _3369;
                    float _3370;
                    float _3371;
                    float _3372;
                    uint _3373;
                    _3367 = _3243;
                    _3368 = _3244;
                    _3369 = _3245;
                    _3370 = _3246;
                    _3371 = _3247;
                    _3372 = _3248;
                    _3373 = _3258;
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    float _3304;
                    for (;;)
                    {
                        uint _3377 = uint(findLSB(_3373)) + (_3249 << 5u);
                        uint _3374 = (_3373 + 4294967295u) & _3373;
                        uint _3379 = _3377 * 48u;
                        vec4 _3393 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3379)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 3u)).x));
                        uint _3399 = (_3377 * 48u) + 4u;
                        vec4 _3412 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3399)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 3u)).x));
                        uint _3418 = (_3377 * 48u) + 8u;
                        vec3 _3429 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3418)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 2u)).x));
                        float _3433 = _3393.x - _2077;
                        float _3434 = _3393.y - _2078;
                        float _3435 = _3393.z - _2079;
                        float _3436 = dot(vec3(_3433, _3434, _3435), vec3(_3433, _3434, _3435));
                        float _3439 = inversesqrt(_3436);
                        float _3440 = _3439 * _3433;
                        float _3441 = _3439 * _3434;
                        float _3442 = _3439 * _3435;
                        float _3443 = dot(vec3(_898, _901, _904), vec3(_3440, _3441, _3442));
                        float _3448 = 1.0 - (_3436 * _3393.w);
                        float _4800 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                        float _3449 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                        float _3450 = sqrt(_3436) * _3412.w;
                        float _3453 = 1.39999997615814208984375 / (_3450 + 1.39999997615814208984375);
                        float _3454 = _3453 * _3453;
                        float _3457 = ((1.0 - _3454) * _3443) + _3454;
                        float _3460 = _3450 * _3450;
                        float _3464 = ((isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0))) * _3449) / ((_3460 * 0.699999988079071044921875) + 1.0);
                        float _3468 = (-0.0) - _2077;
                        float _3469 = (-0.0) - _2078;
                        float _3470 = (-0.0) - _2079;
                        float _3474 = inversesqrt(dot(vec3(_3468, _3469, _3470), vec3(_3468, _3469, _3470)));
                        float _3475 = _3474 * _3468;
                        float _3476 = _3474 * _3469;
                        float _3477 = _3474 * _3470;
                        float _3484 = exp2(log2(1.0 / ((_3460 * 3.5) + 5.0)) * 0.25);
                        float _3485 = 1.0 - _1018;
                        float _3492 = sqrt(1.0 - ((1.0 - (_3485 * _3485)) * (1.0 - (_3484 * _3484))));
                        float _3493 = _3492 * _3492;
                        float _3494 = _3493 * _3493;
                        float _3495 = _3475 + _3440;
                        float _3496 = _3476 + _3441;
                        float _3497 = _3477 + _3442;
                        float _3501 = inversesqrt(dot(vec3(_3495, _3496, _3497), vec3(_3495, _3496, _3497)));
                        float _3505 = dot(vec3(_898, _901, _904), vec3(_3475, _3476, _3477));
                        float _4816 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                        float _3508 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                        float _3509 = dot(vec3(_898, _901, _904), vec3(_3501 * _3495, _3501 * _3496, _3501 * _3497));
                        float _4827 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                        float _3512 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                        float _3516 = ((_3512 * _3512) * (_3494 + (-1.0))) + 1.0;
                        float _3517 = _3453 * _3493;
                        float _3518 = _3517 * _3517;
                        float _3521 = ((1.0 - _3518) * _3443) + _3518;
                        float _4838 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                        float _3522 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                        float _3523 = 1.0 - _3493;
                        float _3533 = (0.5 / (((_3522 * ((_3508 * _3523) + _3493)) + 9.9999999392252902907785028219223e-09) + (((_3522 * _3523) + _3493) * _3508))) * _3522;
                        float _4849 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                        float _3544 = (((_3494 * 3.1415927410125732421875) * (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0)))) / ((_3516 * _3516) * ((_3460 * 2.1991131305694580078125) + 3.141590118408203125))) * _3449;
                        _3302 = (_3464 * _3412.x) + _3370;
                        _3303 = (_3464 * _3412.y) + _3371;
                        _3304 = (_3464 * _3412.z) + _3372;
                        _3299 = (_3544 * _3429.x) + _3367;
                        _3300 = (_3544 * _3429.y) + _3368;
                        _3301 = (_3544 * _3429.z) + _3369;
                        if (_3374 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3367 = _3299;
                            _3368 = _3300;
                            _3369 = _3301;
                            _3370 = _3302;
                            _3371 = _3303;
                            _3372 = _3304;
                            _3373 = _3374;
                        }
                    }
                    frontier_phi_68_pred = _3304;
                    frontier_phi_68_pred_1 = _3303;
                    frontier_phi_68_pred_2 = _3302;
                    frontier_phi_68_pred_3 = _3300;
                    frontier_phi_68_pred_4 = _3299;
                    frontier_phi_68_pred_5 = _3301;
                }
                _3110 = frontier_phi_68_pred;
                _3108 = frontier_phi_68_pred_1;
                _3106 = frontier_phi_68_pred_2;
                _3102 = frontier_phi_68_pred_3;
                _3100 = frontier_phi_68_pred_4;
                _3104 = frontier_phi_68_pred_5;
                uint _3250 = _3249 + 1u;
                if (_3250 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3243 = _3100;
                    _3244 = _3102;
                    _3245 = _3104;
                    _3246 = _3106;
                    _3247 = _3108;
                    _3248 = _3110;
                    _3249 = _3250;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3099 = _3100;
            _3101 = _3102;
            _3103 = _3104;
            _3105 = _3106;
            _3107 = _3108;
            _3109 = _3110;
        }
        uvec4 _3113 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3114 = _3113.z;
        uint _3116 = (_3114 >> 8u) & 15u;
        float _3211;
        float _3213;
        float _3215;
        float _3217;
        float _3219;
        float _3221;
        if (((4294967295u << _3116) & _3018) == 0u)
        {
            _3211 = _3099;
            _3213 = _3101;
            _3215 = _3103;
            _3217 = _3105;
            _3219 = _3107;
            _3221 = _3109;
        }
        else
        {
            float _3236 = inversesqrt(dot(vec3(_2077, _2078, _2079), vec3(_2077, _2078, _2079)));
            float _3237 = _3236 * _2077;
            float _3238 = _3236 * _2078;
            float _3239 = _3236 * _2079;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3116 < ((_3114 >> 12u) & 15u))
            {
                float _3212;
                float _3214;
                float _3216;
                float _3218;
                float _3220;
                float _3222;
                float _3350 = _3099;
                float _3351 = _3101;
                float _3352 = _3103;
                float _3353 = _3105;
                float _3354 = _3107;
                float _3355 = _3109;
                uint _3356 = _3116;
                uint _3365;
                bool _3366;
                for (;;)
                {
                    _3365 = texelFetch(g_lightClassification, int((((_3012 << 5u) + (_2998 << 9u)) + (_3356 << 2u)) >> 2u)).x;
                    _3366 = _3365 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3366)
                    {
                        frontier_phi_74_pred = _3352;
                        frontier_phi_74_pred_1 = _3351;
                        frontier_phi_74_pred_2 = _3350;
                        frontier_phi_74_pred_3 = _3355;
                        frontier_phi_74_pred_4 = _3354;
                        frontier_phi_74_pred_5 = _3353;
                    }
                    else
                    {
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3843;
                        float _3844;
                        float _3845;
                        float _3846;
                        float _3847;
                        float _3848;
                        float _3562 = _3350;
                        float _3563 = _3351;
                        float _3564 = _3352;
                        float _3565 = _3353;
                        float _3566 = _3354;
                        float _3567 = _3355;
                        uint _3568 = _3365;
                        uint _3569;
                        vec4 _3594;
                        float _3595;
                        vec4 _3610;
                        vec3 _3622;
                        vec4 _3637;
                        vec4 _3652;
                        float _3699;
                        bool _3700;
                        for (;;)
                        {
                            uint _3579 = ((_3356 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3568));
                            _3569 = (_3568 + 4294967295u) & _3568;
                            uint _3581 = _3579 * 40u;
                            _3594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 3u)).x));
                            _3595 = _3594.w;
                            uint _3597 = (_3579 * 40u) + 4u;
                            _3610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 3u)).x));
                            uint _3612 = (_3579 * 40u) + 8u;
                            _3622 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 2u)).x));
                            uint _3624 = (_3579 * 40u) + 16u;
                            _3637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 3u)).x));
                            uint _3639 = (_3579 * 40u) + 20u;
                            _3652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 3u)).x));
                            uint _3655 = (_3579 * 40u) + 24u;
                            vec4 _3668 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 3u)).x));
                            uint _3674 = (_3579 * 40u) + 28u;
                            vec4 _3687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 3u)).x));
                            _3699 = fma(_2079, _3687.z, fma(_2078, _3687.y, _3687.x * _2077)) + _3687.w;
                            _3700 = !((fma(_2079, _3668.z, fma(_2078, _3668.y, _3668.x * _2077)) + _3668.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3700)
                            {
                                float _3727 = _3594.x - _2077;
                                float _3728 = _3594.y - _2078;
                                float _3729 = _3594.z - _2079;
                                float _3730 = dot(vec3(_3727, _3728, _3729), vec3(_3727, _3728, _3729));
                                float _3733 = inversesqrt(_3730);
                                float _3734 = _3733 * _3727;
                                float _3735 = _3733 * _3728;
                                float _3736 = _3733 * _3729;
                                float _3740 = 1.0 - (_3730 / (_3595 * _3595));
                                float _4860 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3741 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                                float _3745 = sqrt(_3730) * _3610.w;
                                float _3747 = 1.39999997615814208984375 / (_3745 + 1.39999997615814208984375);
                                float _3748 = _3747 * _3747;
                                float _3751 = ((1.0 - _3748) * dot(vec3(_3734, _3735, _3736), vec3(_898, _901, _904))) + _3748;
                                float _3754 = _3745 * _3745;
                                float _3758 = (fma(_2079, _3637.z, fma(_2078, _3637.y, _3637.x * _2077)) + _3637.w) / _3699;
                                float _3759 = (fma(_2079, _3652.z, fma(_2078, _3652.y, _3652.x * _2077)) + _3652.w) / _3699;
                                float _3763 = 1.0 - dot(vec2(_3758, _3759), vec2(_3758, _3759));
                                float _4876 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3764 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                                float _3765 = _3764 * (((isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0))) * _3741) / ((_3754 * 0.699999988079071044921875) + 1.0));
                                float _3777 = exp2(log2(1.0 / ((_3754 * 3.5) + 5.0)) * 0.25);
                                float _3778 = 1.0 - _1018;
                                float _3785 = sqrt(1.0 - ((1.0 - (_3778 * _3778)) * (1.0 - (_3777 * _3777))));
                                float _3786 = _3785 * _3785;
                                float _3787 = _3786 * _3786;
                                float _3788 = _3734 - _3237;
                                float _3789 = _3735 - _3238;
                                float _3790 = _3736 - _3239;
                                float _3794 = inversesqrt(dot(vec3(_3788, _3789, _3790), vec3(_3788, _3789, _3790)));
                                float _3798 = dot(vec3(_898, _901, _904), vec3((-0.0) - _3237, (-0.0) - _3238, (-0.0) - _3239));
                                float _4887 = isnan(0.0) ? _3798 : (isnan(_3798) ? 0.0 : max(_3798, 0.0));
                                float _3801 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                                float _3802 = dot(vec3(_898, _901, _904), vec3(_3794 * _3788, _3794 * _3789, _3794 * _3790));
                                float _4898 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3805 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                                float _3809 = ((_3805 * _3805) * (_3787 + (-1.0))) + 1.0;
                                float _3810 = _3747 * _3786;
                                float _3811 = _3810 * _3810;
                                float _3817 = ((1.0 - _3811) * dot(vec3(_898, _901, _904), vec3(_3734, _3735, _3736))) + _3811;
                                float _4909 = isnan(0.0) ? _3817 : (isnan(_3817) ? 0.0 : max(_3817, 0.0));
                                float _3818 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                                float _3819 = 1.0 - _3786;
                                float _3829 = (0.5 / (((_3818 * ((_3801 * _3819) + _3786)) + 9.9999999392252902907785028219223e-09) + (((_3818 * _3819) + _3786) * _3801))) * _3818;
                                float _4920 = isnan(0.0) ? _3829 : (isnan(_3829) ? 0.0 : max(_3829, 0.0));
                                float _3839 = (_3764 * _3741) * (((_3787 * 3.1415927410125732421875) * (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0)))) / ((_3809 * _3809) * ((_3754 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3839 * _3622.z;
                                frontier_phi_80_pred_1 = _3839 * _3622.y;
                                frontier_phi_80_pred_2 = _3839 * _3622.x;
                                frontier_phi_80_pred_3 = _3765 * _3610.z;
                                frontier_phi_80_pred_4 = _3765 * _3610.y;
                                frontier_phi_80_pred_5 = _3765 * _3610.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3845 = frontier_phi_80_pred;
                            _3844 = frontier_phi_80_pred_1;
                            _3843 = frontier_phi_80_pred_2;
                            _3848 = frontier_phi_80_pred_3;
                            _3847 = frontier_phi_80_pred_4;
                            _3846 = frontier_phi_80_pred_5;
                            _3552 = _3846 + _3565;
                            _3553 = _3847 + _3566;
                            _3554 = _3848 + _3567;
                            _3549 = _3843 + _3562;
                            _3550 = _3844 + _3563;
                            _3551 = _3845 + _3564;
                            if (_3569 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3562 = _3549;
                                _3563 = _3550;
                                _3564 = _3551;
                                _3565 = _3552;
                                _3566 = _3553;
                                _3567 = _3554;
                                _3568 = _3569;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3551;
                        frontier_phi_74_pred_1 = _3550;
                        frontier_phi_74_pred_2 = _3549;
                        frontier_phi_74_pred_3 = _3554;
                        frontier_phi_74_pred_4 = _3553;
                        frontier_phi_74_pred_5 = _3552;
                    }
                    _3216 = frontier_phi_74_pred;
                    _3214 = frontier_phi_74_pred_1;
                    _3212 = frontier_phi_74_pred_2;
                    _3222 = frontier_phi_74_pred_3;
                    _3220 = frontier_phi_74_pred_4;
                    _3218 = frontier_phi_74_pred_5;
                    uint _3357 = _3356 + 1u;
                    if (_3357 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3350 = _3212;
                        _3351 = _3214;
                        _3352 = _3216;
                        _3353 = _3218;
                        _3354 = _3220;
                        _3355 = _3222;
                        _3356 = _3357;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3220;
                frontier_phi_62_63_ladder_1 = _3218;
                frontier_phi_62_63_ladder_2 = _3216;
                frontier_phi_62_63_ladder_3 = _3222;
                frontier_phi_62_63_ladder_4 = _3214;
                frontier_phi_62_63_ladder_5 = _3212;
            }
            else
            {
                frontier_phi_62_63_ladder = _3107;
                frontier_phi_62_63_ladder_1 = _3105;
                frontier_phi_62_63_ladder_2 = _3103;
                frontier_phi_62_63_ladder_3 = _3109;
                frontier_phi_62_63_ladder_4 = _3101;
                frontier_phi_62_63_ladder_5 = _3099;
            }
            _3211 = frontier_phi_62_63_ladder_5;
            _3213 = frontier_phi_62_63_ladder_4;
            _3215 = frontier_phi_62_63_ladder_2;
            _3217 = frontier_phi_62_63_ladder_1;
            _3219 = frontier_phi_62_63_ladder;
            _3221 = frontier_phi_62_63_ladder_3;
        }
        float _3226 = isnan(1.0) ? _1002 : (isnan(_1002) ? 1.0 : min(_1002, 1.0));
        _3030 = (_3226 * _3217) + _2543;
        _3032 = (_3226 * _3219) + _2545;
        _3034 = (_3226 * _3221) + _2547;
        _3036 = ((_3211 * _987) * _3226) + _2881;
        _3038 = ((_3213 * _989) * _3226) + _2883;
        _3040 = ((_3215 * _990) * _3226) + _2885;
    }
    else
    {
        _3030 = _2543;
        _3032 = _2545;
        _3034 = _2547;
        _3036 = _2881;
        _3038 = _2883;
        _3040 = _2885;
    }
    float _4936 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _4947 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _4958 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _4969 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _3065 = cbInstanceData._m0[_930 + 6u].w * (isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0)));
    float _3070 = _875 / cbSceneParam._m0[86u].x;
    float _3071 = _876 / cbSceneParam._m0[86u].y;
    vec4 _3085 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3070, _3071, (log2((isnan(cbSceneParam._m0[77u].w) ? _810 : (isnan(_810) ? cbSceneParam._m0[77u].w : min(_810, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3087 = _3085.x;
    float _3088 = _3085.y;
    float _3089 = _3085.z;
    float _3090 = _3085.w;
    float _3161;
    float _3163;
    float _3165;
    float _3167;
    if (_810 > cbSceneParam._m0[78u].w)
    {
        float _3124 = isnan(_810) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _810 : min(cbSceneParam._m0[80u].w, _810));
        float _3125 = _3124 / _810;
        float _3136 = _3125 * _860;
        float _3137 = _861 * _3125;
        float _3138 = (-0.0) - _3137;
        float _3139 = _3125 * _862;
        float _3141 = (cbSceneParam._m0[77u].w * _3138) / _3124;
        float _3142 = _3141 + cbSceneParam._m0[79u].w;
        float _3143 = cbSceneParam._m0[79u].w - _3137;
        float _3149 = sqrt(((_3136 * _3136) + (_3137 * _3137)) + (_3139 * _3139));
        float _3152 = (1.0 - (cbSceneParam._m0[77u].w / _3124)) * _3149;
        float _3157 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3159 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3312;
        if (abs((_3138 - _3141) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3312 = ((((_3142 > 0.0) ? exp2(_3157 * _3142) : (2.0 - exp2(_3159 * _3142))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3152;
        }
        else
        {
            float _3272 = 1.0 / cbSceneParam._m0[80u].x;
            float _3273 = isnan(_3143) ? _3142 : (isnan(_3142) ? _3143 : max(_3142, _3143));
            float _3274 = isnan(_3143) ? _3142 : (isnan(_3142) ? _3143 : min(_3142, _3143));
            float _3283 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : min(_3273, 0.0));
            float _3284 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : min(_3274, 0.0));
            _3312 = ((abs(_3149 / _3138) * cbSceneParam._m0[80u].y) * ((((_3283 - _3284) * 2.0) - ((exp2(_3157 * (isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0)))) - exp2(_3157 * (isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0))))) * _3272)) - ((exp2(_3159 * _3283) - exp2(_3159 * _3284)) * _3272))) + (_3152 * cbSceneParam._m0[80u].z);
        }
        vec4 _3314 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3070, _3071, 1.0), 0.0);
        float _3323 = exp2((_3312 * (-1.44269502162933349609375)) * (1.0 - _3314.w));
        float _3324 = log2(_3323);
        float _3340 = log2(_3090);
        _3161 = (exp2(_3340 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3324 * cbSceneParam._m0[78u].x)) * _3314.x) / cbSceneParam._m0[78u].x)) + _3087;
        _3163 = (exp2(_3340 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3324 * cbSceneParam._m0[78u].y)) * _3314.y) / cbSceneParam._m0[78u].y)) + _3088;
        _3165 = (exp2(_3340 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3324 * cbSceneParam._m0[78u].z)) * _3314.z) / cbSceneParam._m0[78u].z)) + _3089;
        _3167 = _3323 * _3090;
    }
    else
    {
        _3161 = _3087;
        _3163 = _3088;
        _3165 = _3089;
        _3167 = _3090;
    }
    float _3179 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3180 = _3179 == 3.0;
    float _3181 = log2(_3167);
    float _3188 = exp2(_3181 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_3030 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _1002))) + ((_3036 + ((isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))) * _1811)) * cbPerFrame._m0[3u].x));
    float _3189 = exp2(_3181 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0))) * (_3032 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1002))) + ((_3038 + ((isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0))) * _1811)) * cbPerFrame._m0[3u].x));
    float _3190 = exp2(_3181 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0))) * (_3034 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1002))) + ((_3040 + ((isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))) * _1811)) * cbPerFrame._m0[3u].x));
    float _3199 = (_3179 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3199 * (_3180 ? _3188 : (_3188 + (cbSceneParam._m0[72u].w * _3161)));
    SV_Target.y = _3199 * (_3180 ? _3189 : (_3189 + (cbSceneParam._m0[72u].w * _3163)));
    SV_Target.z = _3199 * (_3180 ? _3190 : (_3190 + (cbSceneParam._m0[72u].w * _3165)));
    SV_Target.w = _3065;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3065;
}


