#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_snp_0_Texture2D_2;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D P_ACParts_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D P_ACParts_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_snp_0_Texture2D_10;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1299;
float _3707;
float _3708;
float _3709;
float _3710;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245;
    float _246;
    float _247;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
    }
    else
    {
        _245 = _231;
        _246 = _232;
        _247 = _233;
    }
    float _257 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    vec4 _270 = texture(sampler2D(P_ACParts_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_257 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _275 = _270.z;
    float _276 = _270.w;
    float _284 = exp2(log2(_275 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _285 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _286 = isnan(1.0) ? _285 : (isnan(_285) ? 1.0 : min(_285, 1.0));
    float _292 = exp2(log2(1.0 - _276) * cbMtdParam._m0[20u].y);
    vec4 _304 = texture(sampler2D(P_ACParts_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _257) + cbTextureTilingScale._m0[0u].w));
    vec4 _330 = texture(sampler2D(P_ACParts_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _257) + cbTextureTilingScale._m0[3u].w));
    float _341 = cbMtdParam._m0[9u].x * _330.x;
    float _342 = cbMtdParam._m0[9u].y * _330.y;
    float _343 = cbMtdParam._m0[9u].z * _330.z;
    float _350 = (((cbMtdParam._m0[10u].x * _304.x) - _341) * _292) + _341;
    float _351 = (((cbMtdParam._m0[10u].y * _304.y) - _342) * _292) + _342;
    float _352 = (((cbMtdParam._m0[10u].z * _304.z) - _343) * _292) + _343;
    float _356 = exp2(log2(_276) * cbMtdParam._m0[21u].y);
    vec4 _368 = texture(sampler2D(P_ACParts_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _257) + cbTextureTilingScale._m0[10u].w));
    vec4 _402 = texture(sampler2D(P_ACParts_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _413 = cbMtdParam._m0[18u].x * _402.x;
    float _414 = cbMtdParam._m0[18u].y * _402.y;
    float _415 = cbMtdParam._m0[18u].z * _402.z;
    vec4 _436 = texture(sampler2D(P_ACParts_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _257) + cbTextureTilingScale._m0[1u].w));
    float _444 = ((((((((cbMtdParam._m0[17u].x * _368.x) - _350) * _356) + _350) - _413) * _286) + _413) * 4.55000019073486328125) * _436.x;
    float _446 = ((((((((cbMtdParam._m0[17u].y * _368.y) - _351) * _356) + _351) - _414) * _286) + _414) * 4.55000019073486328125) * _436.y;
    float _448 = ((((((((cbMtdParam._m0[17u].z * _368.z) - _352) * _356) + _352) - _415) * _286) + _415) * 4.55000019073486328125) * _436.z;
    float _449 = _436.w * _304.w;
    vec4 _462 = texture(sampler2D(P_ACParts_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    float _464 = _462.x;
    float _483 = (((1.0 - _464) + texture(sampler2D(P_ACParts_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w)).x) * _286) + _464;
    vec4 _496 = texture(sampler2D(P_ACParts_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _257) + cbTextureTilingScale._m0[6u].w));
    float _503 = (((_496.x - _483) + cbMtdParam._m0[20u].z) * _292) + _483;
    float _526 = (((texture(sampler2D(P_ACParts_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - _503) + cbMtdParam._m0[22u].y) * _356) + _503;
    vec4 _539 = texture(sampler2D(P_ACParts_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _257) + cbTextureTilingScale._m0[12u].w));
    vec4 _558 = texture(sampler2D(P_ACParts_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _257) + cbTextureTilingScale._m0[13u].w));
    float _560 = _558.x;
    float _561 = _558.y;
    float _564 = cbMtdParam._m0[19u].x + _558.z;
    float _567 = (((cbMtdParam._m0[20u].x + _539.z) - _564) * _292) + _564;
    vec4 _580 = texture(sampler2D(P_ACParts_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _257) + cbTextureTilingScale._m0[14u].w));
    vec4 _605 = texture(sampler2D(P_ACParts_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _607 = _605.x;
    float _608 = _605.y;
    float _611 = cbMtdParam._m0[21u].x + _605.z;
    float _614 = ((((_275 * 2.0) * ((((_580.z - _567) + cbMtdParam._m0[22u].x) * _356) + _567)) - _611) * _286) + _611;
    float _625 = ((_539.x - _560) * _292) + _560;
    float _626 = ((_539.y - _561) * _292) + _561;
    float _641 = (((((((_580.x - _625) * _356) + _625) - _607) * _286) + _607) * 2.0) + (-1.0);
    float _642 = (((((((_580.y - _626) * _356) + _626) - _608) * _286) + _608) * 2.0) + (-1.0);
    float _643 = dot(vec2(_641, _642), vec2(_641, _642));
    float _3729 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _648 = sqrt(1.0 - (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))));
    float _651 = _641 + (cbMtdParam._m0[21u].w * ((_270.x * 2.0) + (-1.0)));
    float _652 = _642 + (cbMtdParam._m0[21u].w * ((_270.y * 2.0) + (-1.0)));
    float _655 = fma(_648, _245, fma(_652, _237 * TANGENT.x, (_223 * _215) * _651));
    float _658 = fma(_648, _246, fma(_652, _237 * TANGENT.y, (_223 * _216) * _651));
    float _661 = fma(_648, _247, fma(_652, _237 * TANGENT.z, (_223 * _217) * _651));
    float _665 = inversesqrt(dot(vec3(_655, _658, _661), vec3(_655, _658, _661)));
    float _666 = _665 * _655;
    float _667 = _665 * _658;
    float _668 = _665 * _661;
    float _3740 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _669 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _3751 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _670 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _3762 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3773 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3784 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3795 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _674 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _690 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _741 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _731);
    float _742 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _731);
    float _743 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _731);
    float _747 = inversesqrt(dot(vec3(_741, _742, _743), vec3(_741, _742, _743)));
    float _748 = _741 * _747;
    float _749 = _742 * _747;
    float _750 = _743 * _747;
    vec4 _755 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _757 = _755.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _978 = sqrt(((_741 * _741) + (_742 * _742)) + (_743 * _743));
        float _984 = (cbMatDynParam._m0[5u].x * _978) + cbMatDynParam._m0[5u].y;
        float _3806 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _989 = (cbMatDynParam._m0[5u].z * _978) + cbMatDynParam._m0[5u].w;
        float _3817 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) - _985)) + _985) < ((_757 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _768 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _769 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _771 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _773 = _771.w;
    float _791 = fma(_668, cbSceneParam._m0[5u].z, fma(_667, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _666));
    float _794 = fma(_668, cbSceneParam._m0[6u].z, fma(_667, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _666));
    float _797 = fma(_668, cbSceneParam._m0[7u].z, fma(_667, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _666));
    vec4 _799 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _810 = (((_799.y - _670) + (_799.w * _670)) * cbMtdParam._m0[3u].x) + _670;
    uint _823 = uint(roundEven(NORMAL.w)) * 13u;
    uint _824 = _823 + 9u;
    uint _825 = _824 + uint(cbMatDynParam._m0[0u].w);
    float _831 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) * cbInstanceData._m0[_825].x;
    float _832 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) * cbInstanceData._m0[_825].y;
    float _833 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) * cbInstanceData._m0[_825].z;
    float _3828 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _834 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _3839 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _835 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _3850 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _836 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    vec4 _837 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _842 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _853 = (((_842.x - _674) + (_842.w * _674)) * cbMtdParam._m0[3u].x) + _674;
    float _866 = (cbMtdParam._m0[3u].x * (((_834 * _773) - _834) + _837.x)) + _834;
    float _867 = (cbMtdParam._m0[3u].x * (((_835 * _773) - _835) + _837.y)) + _835;
    float _868 = (cbMtdParam._m0[3u].x * (((_836 * _773) - _836) + _837.z)) + _836;
    float _869 = 1.0 - _853;
    float _870 = _869 * _866;
    float _871 = _869 * _867;
    float _872 = _869 * _868;
    float _877 = (_866 + (-0.039999999105930328369140625)) * _853;
    float _878 = (_867 + (-0.039999999105930328369140625)) * _853;
    float _879 = (_868 + (-0.039999999105930328369140625)) * _853;
    float _880 = _877 + 0.039999999105930328369140625;
    float _882 = _878 + 0.039999999105930328369140625;
    float _883 = _879 + 0.039999999105930328369140625;
    vec4 _892 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _768, cbSceneParam._m0[86u].y * _769));
    float _895 = _892.x * TEXCOORD_4;
    float _896 = dot(vec3(_666, _667, _668), vec3(_748, _749, _750));
    float _899 = _896 * 2.0;
    float _903 = (_899 * _666) - _748;
    float _904 = (_899 * _667) - _749;
    float _905 = (_899 * _668) - _750;
    float _909 = abs(dot(vec3(_748, _749, _750), vec3(_666, _667, _668)));
    float _3861 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _911 = sqrt(_810);
    float _924 = exp2((_911 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_911 * 3.0));
    float _930 = (1.0 - _924) * ((_911 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _931 = _924 * _911;
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1298;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1023 = fma(_967, cbModelParam._m0[26u].z, fma(_963, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _959));
        float _1027 = fma(_967, cbModelParam._m0[27u].z, fma(_963, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _959));
        float _1031 = fma(_967, cbModelParam._m0[28u].z, fma(_963, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _959));
        float _1056 = _959 + _666;
        float _1057 = _963 + _667;
        float _1058 = _967 + _668;
        float _1068 = fma(_1058, cbModelParam._m0[26u].z, fma(_1057, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1056)) - _1023;
        float _1069 = fma(_1058, cbModelParam._m0[27u].z, fma(_1057, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1056)) - _1027;
        float _1070 = fma(_1058, cbModelParam._m0[28u].z, fma(_1057, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1056)) - _1031;
        float _1074 = inversesqrt(dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070)));
        float _1087 = ((_1074 * _1068) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1023 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1088 = ((_1074 * _1069) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1027 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1089 = ((_1074 * _1070) / cbModelParam._m0[34u].z) + ((((((_1031 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        float _1126 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1092.x + (-0.5));
        float _1128 = _1126 * (_1092.y + (-0.5));
        float _1129 = _1126 * (_1092.z + (-0.5));
        float _1136 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1099.x + (-0.5));
        float _1138 = _1136 * (_1099.y + (-0.5));
        float _1139 = _1136 * (_1099.z + (-0.5));
        float _1146 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1106.x + (-0.5));
        float _1148 = _1146 * (_1106.y + (-0.5));
        float _1149 = _1146 * (_1106.z + (-0.5));
        float _1156 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1113.x + (-0.5));
        float _1158 = _1156 * (_1113.y + (-0.5));
        float _1159 = _1156 * (_1113.z + (-0.5));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = _1127 * 0.5;
        float _1164 = _1137 * 0.5;
        float _1165 = _1147 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1180 = (dot(vec3(_666, _667, _668), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1190 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _3909 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1192 + 1.0))) + _1197) * _1160;
        float _1207 = _1128 * 0.5;
        float _1208 = _1138 * 0.5;
        float _1209 = _1148 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(_666, _667, _668), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _3942 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1234 + 1.0))) + _1239) * _1161;
        float _1249 = _1129 * 0.5;
        float _1250 = _1139 * 0.5;
        float _1251 = _1149 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(_666, _667, _668), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _3953 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _3964 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _3975 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_1276 + 1.0))) + _1281) * _1162;
        _1298 = _1129;
        _1300 = _1128;
        _1301 = _1127;
        _1302 = _1139;
        _1303 = _1138;
        _1304 = _1137;
        _1305 = _1149;
        _1306 = _1148;
        _1307 = _1147;
        _1308 = _1162;
        _1309 = _1161;
        _1310 = _1160;
        _1311 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
        _1312 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
        _1313 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
    }
    else
    {
        _1298 = _1299;
        _1300 = _1299;
        _1301 = _1299;
        _1302 = _1299;
        _1303 = _1299;
        _1304 = _1299;
        _1305 = _1299;
        _1306 = _1299;
        _1307 = _1299;
        _1308 = _1299;
        _1309 = _1299;
        _1310 = _1299;
        _1311 = 0.0;
        _1312 = 0.0;
        _1313 = 0.0;
    }
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1342 = fma(_967, cbModelParam._m0[30u].z, fma(_963, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _959));
        float _1346 = fma(_967, cbModelParam._m0[31u].z, fma(_963, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _959));
        float _1350 = fma(_967, cbModelParam._m0[32u].z, fma(_963, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _959));
        float _1373 = _959 + _666;
        float _1374 = _963 + _667;
        float _1375 = _967 + _668;
        float _1385 = fma(_1375, cbModelParam._m0[30u].z, fma(_1374, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1373)) - _1342;
        float _1386 = fma(_1375, cbModelParam._m0[31u].z, fma(_1374, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1373)) - _1346;
        float _1387 = fma(_1375, cbModelParam._m0[32u].z, fma(_1374, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1373)) - _1350;
        float _1391 = inversesqrt(dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387)));
        float _1404 = ((_1391 * _1385) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1342 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1405 = ((_1391 * _1386) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1346 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1406 = ((_1391 * _1387) / cbModelParam._m0[35u].z) + ((((((_1350 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        float _1441 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1408.x + (-0.5));
        float _1443 = _1441 * (_1408.y + (-0.5));
        float _1444 = _1441 * (_1408.z + (-0.5));
        float _1451 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1415.x + (-0.5));
        float _1453 = _1451 * (_1415.y + (-0.5));
        float _1454 = _1451 * (_1415.z + (-0.5));
        float _1461 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1422.x + (-0.5));
        float _1463 = _1461 * (_1422.y + (-0.5));
        float _1464 = _1461 * (_1422.z + (-0.5));
        float _1471 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1429.x + (-0.5));
        float _1473 = _1471 * (_1429.y + (-0.5));
        float _1474 = _1471 * (_1429.z + (-0.5));
        float _1475 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = _1442 * 0.5;
        float _1479 = _1452 * 0.5;
        float _1480 = _1462 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_666, _667, _668), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1475 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4038 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1505 + 1.0))) + _1510) * _1475;
        float _1520 = _1443 * 0.5;
        float _1521 = _1453 * 0.5;
        float _1522 = _1463 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_666, _667, _668), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _4071 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1547 + 1.0))) + _1552) * _1476;
        float _1562 = _1444 * 0.5;
        float _1563 = _1454 * 0.5;
        float _1564 = _1464 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_666, _667, _668), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4104 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1589 + 1.0))) + _1594) * _1477;
        _1611 = _1444;
        _1612 = _1443;
        _1613 = _1442;
        _1614 = _1454;
        _1615 = _1453;
        _1616 = _1452;
        _1617 = _1464;
        _1618 = _1463;
        _1619 = _1462;
        _1620 = _1477;
        _1621 = _1476;
        _1622 = _1475;
        _1623 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
        _1624 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
        _1625 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
    }
    else
    {
        _1611 = _1299;
        _1612 = _1299;
        _1613 = _1299;
        _1614 = _1299;
        _1615 = _1299;
        _1616 = _1299;
        _1617 = _1299;
        _1618 = _1299;
        _1619 = _1299;
        _1620 = _1299;
        _1621 = _1299;
        _1622 = _1299;
        _1623 = 0.0;
        _1624 = 0.0;
        _1625 = 0.0;
    }
    float _1635 = (cbModelParam._m0[1u].x * (_1623 - _1311)) + _1311;
    float _1636 = (cbModelParam._m0[1u].x * (_1624 - _1312)) + _1312;
    float _1637 = (cbModelParam._m0[1u].x * (_1625 - _1313)) + _1313;
    float _1658 = fma(_1637, cbSceneParam._m0[89u].z, fma(_1636, cbSceneParam._m0[89u].y, _1635 * cbSceneParam._m0[89u].x));
    float _1661 = fma(_1637, cbSceneParam._m0[90u].z, fma(_1636, cbSceneParam._m0[90u].y, _1635 * cbSceneParam._m0[90u].x));
    float _1664 = fma(_1637, cbSceneParam._m0[91u].z, fma(_1636, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1635));
    float _1679 = _903 * 0.5;
    float _1680 = _904 * 0.5;
    float _1681 = _905 * 0.5;
    float _1682 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1613, _1616, _1619, _1622));
    float _1685 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1612, _1615, _1618, _1621));
    float _1688 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1611, _1614, _1617, _1620));
    float _1722;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1695 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1298, _1302, _1305, _1308));
        float _1699 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1300, _1303, _1306, _1309));
        float _1703 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1301, _1304, _1307, _1310));
        float _1710 = dot(vec4(cbModelParam._m0[39u]), vec4(_1679, _1680, _1681, 1.0));
        _1722 = dot(vec3(isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)), isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1710) ? 0.0 : (isnan(0.0) ? _1710 : max(0.0, _1710))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1722 = 1.0;
    }
    float _1733;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1724 = dot(vec4(cbModelParam._m0[40u]), vec4(_1679, _1680, _1681, 1.0));
        _1733 = dot(vec3(isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1724) ? 0.0 : (isnan(0.0) ? _1724 : max(0.0, _1724))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1733 = 1.0;
    }
    float _1737 = (_1733 * cbModelParam._m0[1u].x) + (_1722 * (1.0 - cbModelParam._m0[1u].x));
    float _1747 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _810);
    float _1748 = isnan(_1747) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1747 : min(cbModelParam._m0[25u].z, _1747));
    float _1828;
    float _1830;
    float _1832;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1795 = fma(_967, cbModelParam._m0[13u].z, fma(_963, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _959)) + cbModelParam._m0[13u].w;
        float _1799 = fma(_967, cbModelParam._m0[14u].z, fma(_963, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _959)) + cbModelParam._m0[14u].w;
        float _1803 = fma(_967, cbModelParam._m0[15u].z, fma(_963, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _959)) + cbModelParam._m0[15u].w;
        float _1806 = fma(_905, cbModelParam._m0[13u].z, fma(_904, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _903));
        float _1809 = fma(_905, cbModelParam._m0[14u].z, fma(_904, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _903));
        float _1812 = fma(_905, cbModelParam._m0[15u].z, fma(_904, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _903));
        float _1840;
        if (_1806 > 0.0)
        {
            _1840 = abs((1.0 - _1795) / _1806);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1795 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1840 = frontier_phi_19_17_ladder;
        }
        float _2063;
        if (_1809 > 0.0)
        {
            _2063 = abs((1.0 - _1799) / _1809);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1799 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2063 = frontier_phi_28_24_ladder;
        }
        float _2320;
        if (_1812 > 0.0)
        {
            _2320 = abs((1.0 - _1803) / _1812);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1803 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2320 = frontier_phi_40_35_ladder;
        }
        float _2322 = isnan(_2063) ? _1840 : (isnan(_1840) ? _2063 : min(_1840, _2063));
        float _2323 = isnan(_2320) ? _2322 : (isnan(_2322) ? _2320 : min(_2322, _2320));
        float _2327 = (_2323 * _1806) + _1795;
        float _2328 = (_2323 * _1809) + _1799;
        float _2329 = (_2323 * _1812) + _1803;
        float _2330 = _2323 * 9.9999997473787516355514526367188e-05;
        float _2332 = (-1.0) - _2330;
        float _2334 = _2330 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2329 > _2334) || ((_2329 < _2332) || ((_2328 > _2334) || ((_2328 < _2332) || ((_2327 < _2332) || (_2327 > _2334))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2457 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2329, cbModelParam._m0[9u].z, fma(_2328, cbModelParam._m0[9u].y, _2327 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2329, cbModelParam._m0[10u].z, fma(_2328, cbModelParam._m0[10u].y, _2327 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2329, cbModelParam._m0[11u].z, fma(_2328, cbModelParam._m0[11u].y, _2327 * cbModelParam._m0[11u].x))), _1748);
            frontier_phi_18_40_ladder = _2457.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2457.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2457.x * cbModelParam._m0[1u].y;
        }
        _1828 = frontier_phi_18_40_ladder_2;
        _1830 = frontier_phi_18_40_ladder_1;
        _1832 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1816 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_903, _904, _905), _1748);
        _1828 = _1816.x * cbModelParam._m0[1u].y;
        _1830 = _1816.y * cbModelParam._m0[1u].y;
        _1832 = _1816.z * cbModelParam._m0[1u].y;
    }
    float _1836 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _810);
    float _1837 = isnan(_1836) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1836 : min(cbModelParam._m0[25u].w, _1836));
    float _1926;
    float _1928;
    float _1930;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1890 = fma(_967, cbModelParam._m0[21u].z, fma(_963, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _959)) + cbModelParam._m0[21u].w;
        float _1894 = fma(_967, cbModelParam._m0[22u].z, fma(_963, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _959)) + cbModelParam._m0[22u].w;
        float _1898 = fma(_967, cbModelParam._m0[23u].z, fma(_963, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _959)) + cbModelParam._m0[23u].w;
        float _1901 = fma(_905, cbModelParam._m0[21u].z, fma(_904, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _903));
        float _1904 = fma(_905, cbModelParam._m0[22u].z, fma(_904, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _903));
        float _1907 = fma(_905, cbModelParam._m0[23u].z, fma(_904, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _903));
        float _2068;
        if (_1901 > 0.0)
        {
            _2068 = abs((1.0 - _1890) / _1901);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1890 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2068 = frontier_phi_30_26_ladder;
        }
        float _2347;
        if (_1904 > 0.0)
        {
            _2347 = abs((1.0 - _1894) / _1904);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1894 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2347 = frontier_phi_42_37_ladder;
        }
        float _2560;
        if (_1907 > 0.0)
        {
            _2560 = abs((1.0 - _1898) / _1907);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1898 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2560 = frontier_phi_51_48_ladder;
        }
        float _2562 = isnan(_2347) ? _2068 : (isnan(_2068) ? _2347 : min(_2068, _2347));
        float _2563 = isnan(_2560) ? _2562 : (isnan(_2562) ? _2560 : min(_2562, _2560));
        float _2567 = (_2563 * _1901) + _1890;
        float _2568 = (_2563 * _1904) + _1894;
        float _2569 = (_2563 * _1907) + _1898;
        float _2570 = _2563 * 9.9999997473787516355514526367188e-05;
        float _2571 = (-1.0) - _2570;
        float _2573 = _2570 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2569 > _2573) || ((_2569 < _2571) || ((_2568 > _2573) || ((_2568 < _2571) || ((_2567 < _2571) || (_2567 > _2573))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2769 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2569, cbModelParam._m0[17u].z, fma(_2568, cbModelParam._m0[17u].y, _2567 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2569, cbModelParam._m0[18u].z, fma(_2568, cbModelParam._m0[18u].y, _2567 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2569, cbModelParam._m0[19u].z, fma(_2568, cbModelParam._m0[19u].y, _2567 * cbModelParam._m0[19u].x))), _1837);
            frontier_phi_27_51_ladder = _2769.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2769.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2769.x * cbModelParam._m0[1u].z;
        }
        _1926 = frontier_phi_27_51_ladder_2;
        _1928 = frontier_phi_27_51_ladder_1;
        _1930 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1910 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_903, _904, _905), _1837);
        _1926 = _1910.x * cbModelParam._m0[1u].z;
        _1928 = _1910.y * cbModelParam._m0[1u].z;
        _1930 = _1910.z * cbModelParam._m0[1u].z;
    }
    float _1943 = (((_930 * _880) + _931) * _895) * ((cbModelParam._m0[1u].w * (_1926 - _1828)) + _1828);
    float _1945 = (((_930 * _882) + _931) * _895) * ((cbModelParam._m0[1u].w * (_1928 - _1830)) + _1830);
    float _1947 = (((_930 * _883) + _931) * _895) * ((cbModelParam._m0[1u].w * (_1930 - _1832)) + _1832);
    float _1950 = fma(_1947, cbSceneParam._m0[89u].z, fma(_1945, cbSceneParam._m0[89u].y, _1943 * cbSceneParam._m0[89u].x));
    float _1953 = fma(_1947, cbSceneParam._m0[90u].z, fma(_1945, cbSceneParam._m0[90u].y, _1943 * cbSceneParam._m0[90u].x));
    float _1956 = fma(_1947, cbSceneParam._m0[91u].z, fma(_1945, cbSceneParam._m0[91u].y, _1943 * cbSceneParam._m0[91u].x));
    vec4 _1964 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_768, _769));
    float _1966 = _1964.w;
    float _1978 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1966);
    float _1979 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1966);
    float _1980 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1966);
    uvec4 _1984 = floatBitsToUint(cbInstanceData._m0[_823 + 5u]);
    uint _1986 = _1984.x * 14u;
    uint _1987 = _1986 + 13u;
    float _1994 = _895 + (-1.0);
    float _1999 = (cbLight._m0[_1987].x * _1994) + 1.0;
    float _2000 = (cbLight._m0[_1987].y * _1994) + 1.0;
    float _2001 = (cbLight._m0[_1987].z * _1994) + 1.0;
    float _2002 = (cbLight._m0[_1987].w * _1994) + 1.0;
    uint _2003 = _1986 + 5u;
    float _2009 = isnan(1.0) ? _2000 : (isnan(_2000) ? 1.0 : min(_2000, 1.0));
    uint _2013 = _1986 + 4u;
    float _2022 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
    uint _2026 = _1986 | 1u;
    float _2037 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_666, _667, _668));
    float _2040 = dot(vec3(cbLight._m0[_2026].xyz), vec3(_666, _667, _668));
    float _4240 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _4251 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2045 = (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * 0.3183098733425140380859375;
    float _2047 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * 0.3183098733425140380859375;
    float _2054 = ((cbLight._m0[_2003].x * _2009) * _2047) + (((cbLight._m0[_2013].x * _1978) * _2022) * _2045);
    float _2055 = ((_2009 * cbLight._m0[_2003].y) * _2047) + (((cbLight._m0[_2013].y * _1979) * _2022) * _2045);
    float _2056 = ((_2009 * cbLight._m0[_2003].z) * _2047) + (((cbLight._m0[_2013].z * _1980) * _2022) * _2045);
    uvec4 _2060 = floatBitsToUint(cbLight._m0[_1986 + 12u]);
    bool _2062 = _2060.x == 0u;
    float _2073;
    float _2075;
    float _2077;
    if (_2062)
    {
        _2073 = _2054;
        _2075 = _2055;
        _2077 = _2056;
    }
    else
    {
        uint _2081 = _1986 + 6u;
        float _2097 = (dot(vec3(cbLight._m0[_1986 + 2u].xyz), vec3(_666, _667, _668)) * 0.5) + 0.5;
        float _2098 = _2097 * _2097;
        float _4262 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2099 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2100 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
        _2073 = (((cbLight._m0[_2081].x * 0.3183098733425140380859375) * _2099) * _2100) + _2054;
        _2075 = (((cbLight._m0[_2081].y * 0.3183098733425140380859375) * _2099) * _2100) + _2055;
        _2077 = (((cbLight._m0[_2081].z * 0.3183098733425140380859375) * _2099) * _2100) + _2056;
    }
    bool _2080 = _2060.y == 0u;
    float _2118;
    float _2120;
    float _2122;
    if (_2080)
    {
        _2118 = _2073;
        _2120 = _2075;
        _2122 = _2077;
    }
    else
    {
        uint _2291 = _1986 + 7u;
        float _2307 = (dot(vec3(cbLight._m0[_1986 + 3u].xyz), vec3(_666, _667, _668)) * 0.5) + 0.5;
        float _2308 = _2307 * _2307;
        float _4278 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2309 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2310 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
        _2118 = (((cbLight._m0[_2291].x * 0.3183098733425140380859375) * _2309) * _2310) + _2073;
        _2120 = (((cbLight._m0[_2291].y * 0.3183098733425140380859375) * _2309) * _2310) + _2075;
        _2122 = (((cbLight._m0[_2291].z * 0.3183098733425140380859375) * _2309) * _2310) + _2077;
    }
    uint _2125 = _1986 + 8u;
    float _2138 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1986].w)) * _810) * 0.949999988079071044921875);
    float _2139 = _2138 * _2138;
    float _2140 = cbLight._m0[_1986].x + _748;
    float _2141 = cbLight._m0[_1986].y + _749;
    float _2142 = cbLight._m0[_1986].z + _750;
    float _2146 = inversesqrt(dot(vec3(_2140, _2141, _2142), vec3(_2140, _2141, _2142)));
    float _2147 = _2146 * _2140;
    float _2148 = _2146 * _2141;
    float _2149 = _2146 * _2142;
    float _2150 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_1986].xyz));
    float _4294 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2153 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _4305 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _2154 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _2155 = dot(vec3(_666, _667, _668), vec3(_2147, _2148, _2149));
    float _4316 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2158 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _2159 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_2147, _2148, _2149));
    float _4327 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2163 = _2139 * _2139;
    float _2167 = ((_2158 * _2158) * (_2163 + (-1.0))) + 1.0;
    float _2175 = exp2(log2(1.0 - (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) * 5.0);
    float _2176 = 0.959999978542327880859375 - _877;
    float _2178 = 0.959999978542327880859375 - _878;
    float _2179 = 0.959999978542327880859375 - _879;
    float _2186 = 1.0 - _2139;
    float _2197 = (0.5 / (((_2154 * ((_2153 * _2186) + _2139)) + 9.9999999392252902907785028219223e-09) + (((_2154 * _2186) + _2139) * _2153))) * _2153;
    float _4338 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2199 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_2163 / ((_2167 * _2167) * 3.141590118408203125));
    uint _2213 = _1986 + 9u;
    float _2224 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2026].w)) * _810) * 0.949999988079071044921875);
    float _2225 = _2224 * _2224;
    float _2226 = cbLight._m0[_2026].x + _748;
    float _2227 = cbLight._m0[_2026].y + _749;
    float _2228 = cbLight._m0[_2026].z + _750;
    float _2232 = inversesqrt(dot(vec3(_2226, _2227, _2228), vec3(_2226, _2227, _2228)));
    float _2233 = _2232 * _2226;
    float _2234 = _2232 * _2227;
    float _2235 = _2232 * _2228;
    float _2236 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_2026].xyz));
    float _4349 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2239 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
    float _2240 = dot(vec3(_666, _667, _668), vec3(_2233, _2234, _2235));
    float _4360 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2243 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
    float _2244 = dot(vec3(cbLight._m0[_2026].xyz), vec3(_2233, _2234, _2235));
    float _4371 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2248 = _2225 * _2225;
    float _2252 = ((_2243 * _2243) * (_2248 + (-1.0))) + 1.0;
    float _2259 = exp2(log2(1.0 - (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) * 5.0);
    float _2266 = 1.0 - _2225;
    float _2276 = (0.5 / (((_2154 * ((_2239 * _2266) + _2225)) + 9.9999999392252902907785028219223e-09) + (((_2154 * _2266) + _2225) * _2239))) * _2239;
    float _4382 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2278 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_2248 / ((_2252 * _2252) * 3.141590118408203125));
    float _2288 = (((((_2259 * _2176) + _880) * cbLight._m0[_2213].x) * _2278) * _2009) + ((((cbLight._m0[_2125].x * _1978) * ((_2175 * _2176) + _880)) * _2199) * _2022);
    float _2289 = (((((_2259 * _2178) + _882) * cbLight._m0[_2213].y) * _2278) * _2009) + ((((cbLight._m0[_2125].y * _1979) * ((_2175 * _2178) + _882)) * _2199) * _2022);
    float _2290 = (((((_2259 * _2179) + _883) * cbLight._m0[_2213].z) * _2278) * _2009) + ((((cbLight._m0[_2125].z * _1980) * ((_2175 * _2179) + _883)) * _2199) * _2022);
    float _2352;
    float _2354;
    float _2356;
    if (_2062)
    {
        _2352 = _2288;
        _2354 = _2289;
        _2356 = _2290;
    }
    else
    {
        uint _2358 = _1986 + 2u;
        uint _2362 = _1986 + 10u;
        float _2376 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2358].w)) * _810) * 0.949999988079071044921875);
        float _2377 = _2376 * _2376;
        float _2378 = cbLight._m0[_2358].x + _748;
        float _2379 = cbLight._m0[_2358].y + _749;
        float _2380 = cbLight._m0[_2358].z + _750;
        float _2384 = inversesqrt(dot(vec3(_2378, _2379, _2380), vec3(_2378, _2379, _2380)));
        float _2385 = _2384 * _2378;
        float _2386 = _2384 * _2379;
        float _2387 = _2384 * _2380;
        float _2388 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_2358].xyz));
        float _4393 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2391 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _2392 = dot(vec3(_666, _667, _668), vec3(_2385, _2386, _2387));
        float _4404 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2395 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2396 = dot(vec3(cbLight._m0[_2358].xyz), vec3(_2385, _2386, _2387));
        float _4415 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2400 = _2377 * _2377;
        float _2404 = ((_2395 * _2395) * (_2400 + (-1.0))) + 1.0;
        float _2411 = exp2(log2(1.0 - (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0)))) * 5.0);
        float _2418 = 1.0 - _2377;
        float _2428 = (0.5 / (((_2154 * ((_2391 * _2418) + _2377)) + 9.9999999392252902907785028219223e-09) + (((_2154 * _2418) + _2377) * _2391))) * _2391;
        float _4426 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2430 = (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_2400 / ((_2404 * _2404) * 3.141590118408203125));
        float _2431 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
        _2352 = (((((_2411 * _2176) + _880) * cbLight._m0[_2362].x) * _2430) * _2431) + _2288;
        _2354 = (((((_2411 * _2178) + _882) * cbLight._m0[_2362].y) * _2430) * _2431) + _2289;
        _2356 = (((((_2411 * _2179) + _883) * cbLight._m0[_2362].z) * _2430) * _2431) + _2290;
    }
    float _2466;
    float _2468;
    float _2470;
    if (_2080)
    {
        _2466 = _2352;
        _2468 = _2354;
        _2470 = _2356;
    }
    else
    {
        uint _2477 = _1986 + 3u;
        uint _2481 = _1986 + 11u;
        float _2495 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2477].w)) * _810) * 0.949999988079071044921875);
        float _2496 = _2495 * _2495;
        float _2497 = cbLight._m0[_2477].x + _748;
        float _2498 = cbLight._m0[_2477].y + _749;
        float _2499 = cbLight._m0[_2477].z + _750;
        float _2503 = inversesqrt(dot(vec3(_2497, _2498, _2499), vec3(_2497, _2498, _2499)));
        float _2504 = _2503 * _2497;
        float _2505 = _2503 * _2498;
        float _2506 = _2503 * _2499;
        float _2507 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_2477].xyz));
        float _4442 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2510 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2511 = dot(vec3(_666, _667, _668), vec3(_2504, _2505, _2506));
        float _4453 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2514 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _2515 = dot(vec3(cbLight._m0[_2477].xyz), vec3(_2504, _2505, _2506));
        float _4464 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2519 = _2496 * _2496;
        float _2523 = ((_2514 * _2514) * (_2519 + (-1.0))) + 1.0;
        float _2530 = exp2(log2(1.0 - (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) * 5.0);
        float _2537 = 1.0 - _2496;
        float _2547 = (0.5 / (((_2154 * ((_2510 * _2537) + _2496)) + 9.9999999392252902907785028219223e-09) + (((_2154 * _2537) + _2496) * _2510))) * _2510;
        float _4475 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2549 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2519 / ((_2523 * _2523) * 3.141590118408203125));
        float _2550 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
        _2466 = (((((_2530 * _2176) + _880) * cbLight._m0[_2481].x) * _2549) * _2550) + _2352;
        _2468 = (((((_2530 * _2178) + _882) * cbLight._m0[_2481].y) * _2549) * _2550) + _2354;
        _2470 = (((((_2530 * _2179) + _883) * cbLight._m0[_2481].z) * _2549) * _2550) + _2356;
    }
    float _2684;
    float _2686;
    float _2688;
    float _2690;
    float _2692;
    float _2694;
    if (_1984.y == 0u)
    {
        float _2625 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2626 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2625;
        float _2627 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2625;
        float _2628 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2625;
        uvec4 _2640 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2641 = _2640.x;
        uint _2652 = uint((float(_2640.y) * floor(float(uint(cbSceneParam._m0[85u].y * _769) / _2641))) + floor(float(uint(cbSceneParam._m0[85u].x * _768) / _2641)));
        float _2662 = (log2(_2628 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2663 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        uint _2666 = uint(isnan(14.0) ? _2663 : (isnan(_2663) ? 14.0 : min(_2663, 14.0)));
        uvec4 _2671 = texelFetch(g_lightClusterGridBuffer, int(((_2666 << 2u) + (_2652 << 6u)) >> 2u));
        uint _2672 = _2671.x;
        uint _2673 = _2640.z;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        if (((((1u << ((_2673 >> 4u) & 15u)) + 4294967295u) & _2672) == 0u) || ((_2673 & 240u) == 0u))
        {
            _2774 = 0.0;
            _2776 = 0.0;
            _2778 = 0.0;
            _2780 = 0.0;
            _2782 = 0.0;
            _2784 = 0.0;
        }
        else
        {
            float _2775;
            float _2777;
            float _2779;
            float _2781;
            float _2783;
            float _2785;
            float _2926 = 0.0;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            uint _2932 = 0u;
            uint _2941;
            bool _2942;
            for (;;)
            {
                _2941 = texelFetch(g_lightClassification, int((((_2666 << 5u) + (_2652 << 9u)) + (_2932 << 2u)) >> 2u)).x;
                _2942 = _2941 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2942)
                {
                    frontier_phi_68_pred = _2928;
                    frontier_phi_68_pred_1 = _2931;
                    frontier_phi_68_pred_2 = _2930;
                    frontier_phi_68_pred_3 = _2929;
                    frontier_phi_68_pred_4 = _2927;
                    frontier_phi_68_pred_5 = _2926;
                }
                else
                {
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    uint _3077;
                    _3071 = _2926;
                    _3072 = _2927;
                    _3073 = _2928;
                    _3074 = _2929;
                    _3075 = _2930;
                    _3076 = _2931;
                    _3077 = _2941;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    for (;;)
                    {
                        uint _3081 = uint(findLSB(_3077)) + (_2932 << 5u);
                        uint _3078 = (_3077 + 4294967295u) & _3077;
                        uint _3083 = _3081 * 48u;
                        vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3083)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 3u)).x));
                        uint _3103 = (_3081 * 48u) + 4u;
                        vec4 _3116 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3103)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 3u)).x));
                        uint _3122 = (_3081 * 48u) + 8u;
                        vec3 _3133 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3122)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 2u)).x));
                        float _3137 = _3097.x - _2626;
                        float _3138 = _3097.y - _2627;
                        float _3139 = _3097.z - _2628;
                        float _3140 = dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139));
                        float _3143 = inversesqrt(_3140);
                        float _3144 = _3143 * _3137;
                        float _3145 = _3143 * _3138;
                        float _3146 = _3143 * _3139;
                        float _3147 = dot(vec3(_791, _794, _797), vec3(_3144, _3145, _3146));
                        float _3152 = 1.0 - (_3140 * _3097.w);
                        float _4501 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3153 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                        float _3154 = sqrt(_3140) * _3116.w;
                        float _3157 = 1.39999997615814208984375 / (_3154 + 1.39999997615814208984375);
                        float _3158 = _3157 * _3157;
                        float _3161 = ((1.0 - _3158) * _3147) + _3158;
                        float _3164 = _3154 * _3154;
                        float _3168 = ((isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0))) * _3153) / ((_3164 * 0.699999988079071044921875) + 1.0);
                        float _3172 = (-0.0) - _2626;
                        float _3173 = (-0.0) - _2627;
                        float _3174 = (-0.0) - _2628;
                        float _3178 = inversesqrt(dot(vec3(_3172, _3173, _3174), vec3(_3172, _3173, _3174)));
                        float _3179 = _3178 * _3172;
                        float _3180 = _3178 * _3173;
                        float _3181 = _3178 * _3174;
                        float _3189 = exp2(log2(1.0 / ((_3164 * 3.5) + 5.0)) * 0.25);
                        float _3190 = 1.0 - _911;
                        float _3197 = sqrt(1.0 - ((1.0 - (_3190 * _3190)) * (1.0 - (_3189 * _3189))));
                        float _3198 = _3197 * _3197;
                        float _3199 = _3198 * _3198;
                        float _3200 = _3179 + _3144;
                        float _3201 = _3180 + _3145;
                        float _3202 = _3181 + _3146;
                        float _3206 = inversesqrt(dot(vec3(_3200, _3201, _3202), vec3(_3200, _3201, _3202)));
                        float _3210 = dot(vec3(_791, _794, _797), vec3(_3179, _3180, _3181));
                        float _4517 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3213 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                        float _3214 = dot(vec3(_791, _794, _797), vec3(_3206 * _3200, _3206 * _3201, _3206 * _3202));
                        float _4528 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3217 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                        float _3221 = ((_3217 * _3217) * (_3199 + (-1.0))) + 1.0;
                        float _3222 = _3157 * _3198;
                        float _3223 = _3222 * _3222;
                        float _3226 = ((1.0 - _3223) * _3147) + _3223;
                        float _4539 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3227 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                        float _3228 = 1.0 - _3198;
                        float _3238 = (0.5 / (((_3227 * ((_3213 * _3228) + _3198)) + 9.9999999392252902907785028219223e-09) + (((_3227 * _3228) + _3198) * _3213))) * _3227;
                        float _4550 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3249 = (((_3199 * 3.1415927410125732421875) * (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0)))) / ((_3221 * _3221) * ((_3164 * 2.1991131305694580078125) + 3.141590118408203125))) * _3153;
                        _3001 = (_3168 * _3116.x) + _3074;
                        _3002 = (_3168 * _3116.y) + _3075;
                        _3003 = (_3168 * _3116.z) + _3076;
                        _2998 = (_3249 * _3133.x) + _3071;
                        _2999 = (_3249 * _3133.y) + _3072;
                        _3000 = (_3249 * _3133.z) + _3073;
                        if (_3078 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3071 = _2998;
                            _3072 = _2999;
                            _3073 = _3000;
                            _3074 = _3001;
                            _3075 = _3002;
                            _3076 = _3003;
                            _3077 = _3078;
                        }
                    }
                    frontier_phi_68_pred = _3000;
                    frontier_phi_68_pred_1 = _3003;
                    frontier_phi_68_pred_2 = _3002;
                    frontier_phi_68_pred_3 = _3001;
                    frontier_phi_68_pred_4 = _2999;
                    frontier_phi_68_pred_5 = _2998;
                }
                _2779 = frontier_phi_68_pred;
                _2785 = frontier_phi_68_pred_1;
                _2783 = frontier_phi_68_pred_2;
                _2781 = frontier_phi_68_pred_3;
                _2777 = frontier_phi_68_pred_4;
                _2775 = frontier_phi_68_pred_5;
                uint _2933 = _2932 + 1u;
                if (_2933 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2926 = _2775;
                    _2927 = _2777;
                    _2928 = _2779;
                    _2929 = _2781;
                    _2930 = _2783;
                    _2931 = _2785;
                    _2932 = _2933;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2774 = _2775;
            _2776 = _2777;
            _2778 = _2779;
            _2780 = _2781;
            _2782 = _2783;
            _2784 = _2785;
        }
        uvec4 _2788 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2789 = _2788.z;
        uint _2791 = (_2789 >> 8u) & 15u;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        if (((4294967295u << _2791) & _2672) == 0u)
        {
            _2894 = _2774;
            _2896 = _2776;
            _2898 = _2778;
            _2900 = _2780;
            _2902 = _2782;
            _2904 = _2784;
        }
        else
        {
            float _2919 = inversesqrt(dot(vec3(_2626, _2627, _2628), vec3(_2626, _2627, _2628)));
            float _2920 = _2919 * _2626;
            float _2921 = _2919 * _2627;
            float _2922 = _2919 * _2628;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2791 < ((_2789 >> 12u) & 15u))
            {
                float _2895;
                float _2897;
                float _2899;
                float _2901;
                float _2903;
                float _2905;
                float _3054 = _2774;
                float _3055 = _2776;
                float _3056 = _2778;
                float _3057 = _2780;
                float _3058 = _2782;
                float _3059 = _2784;
                uint _3060 = _2791;
                uint _3069;
                bool _3070;
                for (;;)
                {
                    _3069 = texelFetch(g_lightClassification, int((((_2666 << 5u) + (_2652 << 9u)) + (_3060 << 2u)) >> 2u)).x;
                    _3070 = _3069 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3070)
                    {
                        frontier_phi_79_pred = _3059;
                        frontier_phi_79_pred_1 = _3058;
                        frontier_phi_79_pred_2 = _3057;
                        frontier_phi_79_pred_3 = _3056;
                        frontier_phi_79_pred_4 = _3055;
                        frontier_phi_79_pred_5 = _3054;
                    }
                    else
                    {
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3276 = _3054;
                        float _3277 = _3055;
                        float _3278 = _3056;
                        float _3279 = _3057;
                        float _3280 = _3058;
                        float _3281 = _3059;
                        uint _3282 = _3069;
                        uint _3283;
                        vec4 _3308;
                        float _3309;
                        vec4 _3324;
                        vec3 _3336;
                        vec4 _3352;
                        vec4 _3367;
                        float _3414;
                        bool _3415;
                        for (;;)
                        {
                            uint _3293 = ((_3060 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3282));
                            _3283 = (_3282 + 4294967295u) & _3282;
                            uint _3295 = _3293 * 40u;
                            _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            _3309 = _3308.w;
                            uint _3311 = (_3293 * 40u) + 4u;
                            _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            uint _3326 = (_3293 * 40u) + 8u;
                            _3336 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x));
                            uint _3339 = (_3293 * 40u) + 16u;
                            _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            uint _3354 = (_3293 * 40u) + 20u;
                            _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            uint _3370 = (_3293 * 40u) + 24u;
                            vec4 _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            uint _3389 = (_3293 * 40u) + 28u;
                            vec4 _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            _3414 = fma(_2628, _3402.z, fma(_2627, _3402.y, _3402.x * _2626)) + _3402.w;
                            _3415 = !((fma(_2628, _3383.z, fma(_2627, _3383.y, _3383.x * _2626)) + _3383.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3415)
                            {
                                float _3442 = _3308.x - _2626;
                                float _3443 = _3308.y - _2627;
                                float _3444 = _3308.z - _2628;
                                float _3445 = dot(vec3(_3442, _3443, _3444), vec3(_3442, _3443, _3444));
                                float _3448 = inversesqrt(_3445);
                                float _3449 = _3448 * _3442;
                                float _3450 = _3448 * _3443;
                                float _3451 = _3448 * _3444;
                                float _3455 = 1.0 - (_3445 / (_3309 * _3309));
                                float _4561 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3456 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3460 = sqrt(_3445) * _3324.w;
                                float _3462 = 1.39999997615814208984375 / (_3460 + 1.39999997615814208984375);
                                float _3463 = _3462 * _3462;
                                float _3466 = ((1.0 - _3463) * dot(vec3(_3449, _3450, _3451), vec3(_791, _794, _797))) + _3463;
                                float _3469 = _3460 * _3460;
                                float _3473 = (fma(_2628, _3352.z, fma(_2627, _3352.y, _3352.x * _2626)) + _3352.w) / _3414;
                                float _3474 = (fma(_2628, _3367.z, fma(_2627, _3367.y, _3367.x * _2626)) + _3367.w) / _3414;
                                float _3478 = 1.0 - dot(vec2(_3473, _3474), vec2(_3473, _3474));
                                float _4577 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3479 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                                float _3480 = _3479 * (((isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0))) * _3456) / ((_3469 * 0.699999988079071044921875) + 1.0));
                                float _3492 = exp2(log2(1.0 / ((_3469 * 3.5) + 5.0)) * 0.25);
                                float _3493 = 1.0 - _911;
                                float _3500 = sqrt(1.0 - ((1.0 - (_3493 * _3493)) * (1.0 - (_3492 * _3492))));
                                float _3501 = _3500 * _3500;
                                float _3502 = _3501 * _3501;
                                float _3503 = _3449 - _2920;
                                float _3504 = _3450 - _2921;
                                float _3505 = _3451 - _2922;
                                float _3509 = inversesqrt(dot(vec3(_3503, _3504, _3505), vec3(_3503, _3504, _3505)));
                                float _3513 = dot(vec3(_791, _794, _797), vec3((-0.0) - _2920, (-0.0) - _2921, (-0.0) - _2922));
                                float _4588 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3516 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3517 = dot(vec3(_791, _794, _797), vec3(_3509 * _3503, _3509 * _3504, _3509 * _3505));
                                float _4599 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3520 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3524 = ((_3520 * _3520) * (_3502 + (-1.0))) + 1.0;
                                float _3525 = _3462 * _3501;
                                float _3526 = _3525 * _3525;
                                float _3532 = ((1.0 - _3526) * dot(vec3(_791, _794, _797), vec3(_3449, _3450, _3451))) + _3526;
                                float _4610 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3533 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                                float _3534 = 1.0 - _3501;
                                float _3544 = (0.5 / (((_3533 * ((_3516 * _3534) + _3501)) + 9.9999999392252902907785028219223e-09) + (((_3533 * _3534) + _3501) * _3516))) * _3533;
                                float _4621 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3554 = (_3479 * _3456) * (((_3502 * 3.1415927410125732421875) * (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0)))) / ((_3524 * _3524) * ((_3469 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3480 * _3324.z;
                                frontier_phi_85_pred_1 = _3480 * _3324.y;
                                frontier_phi_85_pred_2 = _3480 * _3324.x;
                                frontier_phi_85_pred_3 = _3554 * _3336.z;
                                frontier_phi_85_pred_4 = _3554 * _3336.y;
                                frontier_phi_85_pred_5 = _3554 * _3336.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3563 = frontier_phi_85_pred;
                            _3562 = frontier_phi_85_pred_1;
                            _3561 = frontier_phi_85_pred_2;
                            _3560 = frontier_phi_85_pred_3;
                            _3559 = frontier_phi_85_pred_4;
                            _3558 = frontier_phi_85_pred_5;
                            _3266 = _3561 + _3279;
                            _3267 = _3562 + _3280;
                            _3268 = _3563 + _3281;
                            _3263 = _3558 + _3276;
                            _3264 = _3559 + _3277;
                            _3265 = _3560 + _3278;
                            if (_3283 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3283;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3268;
                        frontier_phi_79_pred_1 = _3267;
                        frontier_phi_79_pred_2 = _3266;
                        frontier_phi_79_pred_3 = _3265;
                        frontier_phi_79_pred_4 = _3264;
                        frontier_phi_79_pred_5 = _3263;
                    }
                    _2905 = frontier_phi_79_pred;
                    _2903 = frontier_phi_79_pred_1;
                    _2901 = frontier_phi_79_pred_2;
                    _2899 = frontier_phi_79_pred_3;
                    _2897 = frontier_phi_79_pred_4;
                    _2895 = frontier_phi_79_pred_5;
                    uint _3061 = _3060 + 1u;
                    if (_3061 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3054 = _2895;
                        _3055 = _2897;
                        _3056 = _2899;
                        _3057 = _2901;
                        _3058 = _2903;
                        _3059 = _2905;
                        _3060 = _3061;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2901;
                frontier_phi_60_61_ladder_1 = _2905;
                frontier_phi_60_61_ladder_2 = _2903;
                frontier_phi_60_61_ladder_3 = _2899;
                frontier_phi_60_61_ladder_4 = _2897;
                frontier_phi_60_61_ladder_5 = _2895;
            }
            else
            {
                frontier_phi_60_61_ladder = _2780;
                frontier_phi_60_61_ladder_1 = _2784;
                frontier_phi_60_61_ladder_2 = _2782;
                frontier_phi_60_61_ladder_3 = _2778;
                frontier_phi_60_61_ladder_4 = _2776;
                frontier_phi_60_61_ladder_5 = _2774;
            }
            _2894 = frontier_phi_60_61_ladder_5;
            _2896 = frontier_phi_60_61_ladder_4;
            _2898 = frontier_phi_60_61_ladder_3;
            _2900 = frontier_phi_60_61_ladder;
            _2902 = frontier_phi_60_61_ladder_2;
            _2904 = frontier_phi_60_61_ladder_1;
        }
        float _2909 = isnan(1.0) ? _895 : (isnan(_895) ? 1.0 : min(_895, 1.0));
        _2684 = (_2909 * _2900) + _2118;
        _2686 = (_2909 * _2902) + _2120;
        _2688 = (_2909 * _2904) + _2122;
        _2690 = ((_2894 * _880) * _2909) + _2466;
        _2692 = ((_2896 * _882) * _2909) + _2468;
        _2694 = ((_2898 * _883) * _2909) + _2470;
    }
    else
    {
        _2684 = _2118;
        _2686 = _2120;
        _2688 = _2122;
        _2690 = _2466;
        _2692 = _2468;
        _2694 = _2470;
    }
    float _4637 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _4648 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _4659 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _4670 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _2712 = ((isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2684 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _895))) + ((_2690 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1737)) * cbPerFrame._m0[3u].x);
    float _2713 = ((isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2686 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _895))) + ((_2692 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1737)) * cbPerFrame._m0[3u].x);
    float _2714 = ((isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_2688 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _895))) + ((_2694 + ((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * _1737)) * cbPerFrame._m0[3u].x);
    float _2719 = cbInstanceData._m0[_823 + 6u].w * (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)));
    float _2724 = _768 / cbSceneParam._m0[86u].x;
    float _2725 = _769 / cbSceneParam._m0[86u].y;
    vec4 _2739 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2724, _2725, (log2((isnan(cbSceneParam._m0[77u].w) ? _690 : (isnan(_690) ? cbSceneParam._m0[77u].w : min(_690, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2741 = _2739.x;
    float _2742 = _2739.y;
    float _2743 = _2739.z;
    float _2744 = _2739.w;
    float _2836;
    float _2838;
    float _2840;
    float _2842;
    if (_690 > cbSceneParam._m0[78u].w)
    {
        float _2799 = isnan(_690) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _690 : min(cbSceneParam._m0[80u].w, _690));
        float _2800 = _2799 / _690;
        float _2811 = _2800 * _741;
        float _2812 = _742 * _2800;
        float _2813 = (-0.0) - _2812;
        float _2814 = _2800 * _743;
        float _2816 = (cbSceneParam._m0[77u].w * _2813) / _2799;
        float _2817 = _2816 + cbSceneParam._m0[79u].w;
        float _2818 = cbSceneParam._m0[79u].w - _2812;
        float _2824 = sqrt(((_2811 * _2811) + (_2812 * _2812)) + (_2814 * _2814));
        float _2827 = (1.0 - (cbSceneParam._m0[77u].w / _2799)) * _2824;
        float _2832 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2834 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3011;
        if (abs((_2813 - _2816) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3011 = ((((_2817 > 0.0) ? exp2(_2832 * _2817) : (2.0 - exp2(_2834 * _2817))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2827;
        }
        else
        {
            float _2955 = 1.0 / cbSceneParam._m0[80u].x;
            float _2956 = isnan(_2818) ? _2817 : (isnan(_2817) ? _2818 : max(_2817, _2818));
            float _2957 = isnan(_2818) ? _2817 : (isnan(_2817) ? _2818 : min(_2817, _2818));
            float _2966 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : min(_2956, 0.0));
            float _2967 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : min(_2957, 0.0));
            _3011 = ((abs(_2824 / _2813) * cbSceneParam._m0[80u].y) * ((((_2966 - _2967) * 2.0) - ((exp2(_2832 * (isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0)))) - exp2(_2832 * (isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0))))) * _2955)) - ((exp2(_2834 * _2966) - exp2(_2834 * _2967)) * _2955))) + (_2827 * cbSceneParam._m0[80u].z);
        }
        vec4 _3013 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2724, _2725, 1.0), 0.0);
        float _3022 = exp2((_3011 * (-1.44269502162933349609375)) * (1.0 - _3013.w));
        float _3023 = log2(_3022);
        float _3039 = log2(_2744);
        _2836 = (exp2(_3039 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3023 * cbSceneParam._m0[78u].x)) * _3013.x) / cbSceneParam._m0[78u].x)) + _2741;
        _2838 = (exp2(_3039 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3023 * cbSceneParam._m0[78u].y)) * _3013.y) / cbSceneParam._m0[78u].y)) + _2742;
        _2840 = (exp2(_3039 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3023 * cbSceneParam._m0[78u].z)) * _3013.z) / cbSceneParam._m0[78u].z)) + _2743;
        _2842 = _3022 * _2744;
    }
    else
    {
        _2836 = _2741;
        _2838 = _2742;
        _2840 = _2743;
        _2842 = _2744;
    }
    bool _3049;
    vec4 _2852;
    vec4 _2874;
    float _2876;
    float _2880;
    float _2881;
    float _2882;
    float _2883;
    bool _2893;
    for (;;)
    {
        _2852 = cbMatDynParam._m0[0u];
        float _2854 = roundEven(_2852.y);
        bool _2855 = _2854 == 3.0;
        float _2856 = log2(_2842);
        float _2863 = exp2(_2856 * cbSceneParam._m0[78u].x) * _2712;
        float _2864 = exp2(_2856 * cbSceneParam._m0[78u].y) * _2713;
        float _2865 = exp2(_2856 * cbSceneParam._m0[78u].z) * _2714;
        float _2872 = _757 + (-0.5);
        _2874 = cbMtdParam._m0[1u];
        _2876 = _2874.y * _2872;
        float _2879 = (_2854 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2880 = _2879 * (_2855 ? _2863 : (_2863 + (cbSceneParam._m0[72u].w * _2836)));
        _2881 = _2879 * (_2855 ? _2864 : (_2864 + (cbSceneParam._m0[72u].w * _2838)));
        _2882 = _2879 * (_2855 ? _2865 : (_2865 + (cbSceneParam._m0[72u].w * _2840)));
        _2883 = _2872 * 0.999000012874603271484375;
        _2893 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2893)
        {
            if ((cbInstanceData._m0[_823 + 7u].x + _2883) < 0.5)
            {
                _3049 = true;
                break;
            }
        }
        uint _2990 = _824 + uint(_2852.w);
        if ((cbInstanceData._m0[_2990].w < 1.0) && ((cbInstanceData._m0[_2990].w + _2883) < 0.5))
        {
            _3049 = true;
            break;
        }
        if ((_2876 + _449) < _2874.x)
        {
            _3049 = true;
            break;
        }
        _3049 = false;
        break;
    }
    float _3254;
    if (_3049)
    {
        discard_state = true;
        _3254 = 0.0;
    }
    else
    {
        _3254 = _2719;
    }
    SV_Target.x = _2880;
    SV_Target.y = _2881;
    SV_Target.z = _2882;
    SV_Target.w = _3254;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2719;
    discard_exit();
}


