#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_snp_0_Texture2D_7;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_snp_0_Texture2D_2;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D P_ACParts_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D P_ACParts_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_snp_0_Texture2D_10;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_snp_0_Texture2D_12;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1301;
float _3968;
float _3969;
float _3970;
float _3971;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247;
    float _248;
    float _249;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _247 = (-0.0) - _233;
        _248 = (-0.0) - _234;
        _249 = (-0.0) - _235;
    }
    else
    {
        _247 = _233;
        _248 = _234;
        _249 = _235;
    }
    float _259 = cbMtdParam._m0[21u].z + TEXCOORD.y;
    vec4 _272 = texture(sampler2D(P_ACParts_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_259 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _277 = _272.z;
    float _278 = _272.w;
    float _286 = exp2(log2(_277 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _287 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _288 = isnan(1.0) ? _287 : (isnan(_287) ? 1.0 : min(_287, 1.0));
    float _294 = exp2(log2(1.0 - _278) * cbMtdParam._m0[20u].y);
    vec4 _306 = texture(sampler2D(P_ACParts_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _259) + cbTextureTilingScale._m0[0u].w));
    vec4 _332 = texture(sampler2D(P_ACParts_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _259) + cbTextureTilingScale._m0[3u].w));
    float _343 = cbMtdParam._m0[9u].x * _332.x;
    float _344 = cbMtdParam._m0[9u].y * _332.y;
    float _345 = cbMtdParam._m0[9u].z * _332.z;
    float _352 = (((cbMtdParam._m0[10u].x * _306.x) - _343) * _294) + _343;
    float _353 = (((cbMtdParam._m0[10u].y * _306.y) - _344) * _294) + _344;
    float _354 = (((cbMtdParam._m0[10u].z * _306.z) - _345) * _294) + _345;
    float _358 = exp2(log2(_278) * cbMtdParam._m0[21u].y);
    vec4 _370 = texture(sampler2D(P_ACParts_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _259) + cbTextureTilingScale._m0[10u].w));
    vec4 _404 = texture(sampler2D(P_ACParts_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _415 = cbMtdParam._m0[18u].x * _404.x;
    float _416 = cbMtdParam._m0[18u].y * _404.y;
    float _417 = cbMtdParam._m0[18u].z * _404.z;
    vec4 _438 = texture(sampler2D(P_ACParts_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _259) + cbTextureTilingScale._m0[1u].w));
    float _446 = ((((((((cbMtdParam._m0[17u].x * _370.x) - _352) * _358) + _352) - _415) * _288) + _415) * 4.55000019073486328125) * _438.x;
    float _448 = ((((((((cbMtdParam._m0[17u].y * _370.y) - _353) * _358) + _353) - _416) * _288) + _416) * 4.55000019073486328125) * _438.y;
    float _450 = ((((((((cbMtdParam._m0[17u].z * _370.z) - _354) * _358) + _354) - _417) * _288) + _417) * 4.55000019073486328125) * _438.z;
    float _451 = _438.w * _306.w;
    vec4 _464 = texture(sampler2D(P_ACParts_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    float _466 = _464.x;
    float _485 = (((1.0 - _466) + texture(sampler2D(P_ACParts_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w)).x) * _288) + _466;
    vec4 _498 = texture(sampler2D(P_ACParts_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _259) + cbTextureTilingScale._m0[6u].w));
    float _505 = (((_498.x - _485) + cbMtdParam._m0[20u].z) * _294) + _485;
    float _528 = (((texture(sampler2D(P_ACParts_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x - _505) + cbMtdParam._m0[22u].y) * _358) + _505;
    vec4 _541 = texture(sampler2D(P_ACParts_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _259) + cbTextureTilingScale._m0[12u].w));
    vec4 _560 = texture(sampler2D(P_ACParts_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _259) + cbTextureTilingScale._m0[13u].w));
    float _562 = _560.x;
    float _563 = _560.y;
    float _566 = cbMtdParam._m0[19u].x + _560.z;
    float _569 = (((cbMtdParam._m0[20u].x + _541.z) - _566) * _294) + _566;
    vec4 _582 = texture(sampler2D(P_ACParts_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _259) + cbTextureTilingScale._m0[14u].w));
    vec4 _607 = texture(sampler2D(P_ACParts_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _609 = _607.x;
    float _610 = _607.y;
    float _613 = cbMtdParam._m0[21u].x + _607.z;
    float _616 = ((((_277 * 2.0) * ((((_582.z - _569) + cbMtdParam._m0[22u].x) * _358) + _569)) - _613) * _288) + _613;
    float _627 = ((_541.x - _562) * _294) + _562;
    float _628 = ((_541.y - _563) * _294) + _563;
    float _643 = (((((((_582.x - _627) * _358) + _627) - _609) * _288) + _609) * 2.0) + (-1.0);
    float _644 = (((((((_582.y - _628) * _358) + _628) - _610) * _288) + _610) * 2.0) + (-1.0);
    float _645 = dot(vec2(_643, _644), vec2(_643, _644));
    float _3990 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _650 = sqrt(1.0 - (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))));
    float _653 = _643 + (cbMtdParam._m0[21u].w * ((_272.x * 2.0) + (-1.0)));
    float _654 = _644 + (cbMtdParam._m0[21u].w * ((_272.y * 2.0) + (-1.0)));
    float _657 = fma(_650, _247, fma(_654, _239 * TANGENT.x, (_225 * _217) * _653));
    float _660 = fma(_650, _248, fma(_654, _239 * TANGENT.y, (_225 * _218) * _653));
    float _663 = fma(_650, _249, fma(_654, _239 * TANGENT.z, (_225 * _219) * _653));
    float _667 = inversesqrt(dot(vec3(_657, _660, _663), vec3(_657, _660, _663)));
    float _668 = _667 * _657;
    float _669 = _667 * _660;
    float _670 = _667 * _663;
    float _4001 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _671 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _4012 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _672 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _4023 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _4034 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _4045 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _4056 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _676 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _692 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _743 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _733);
    float _744 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _733);
    float _745 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _733);
    float _749 = inversesqrt(dot(vec3(_743, _744, _745), vec3(_743, _744, _745)));
    float _750 = _743 * _749;
    float _751 = _744 * _749;
    float _752 = _745 * _749;
    vec4 _757 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _759 = _757.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _980 = sqrt(((_743 * _743) + (_744 * _744)) + (_745 * _745));
        float _986 = (cbMatDynParam._m0[5u].x * _980) + cbMatDynParam._m0[5u].y;
        float _4067 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _991 = (cbMatDynParam._m0[5u].z * _980) + cbMatDynParam._m0[5u].w;
        float _4078 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) - _987)) + _987) < ((_759 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _770 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _771 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _773 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _775 = _773.w;
    float _793 = fma(_670, cbSceneParam._m0[5u].z, fma(_669, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _668));
    float _796 = fma(_670, cbSceneParam._m0[6u].z, fma(_669, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _668));
    float _799 = fma(_670, cbSceneParam._m0[7u].z, fma(_669, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _668));
    vec4 _801 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _812 = (((_801.y - _672) + (_801.w * _672)) * cbMtdParam._m0[3u].x) + _672;
    uint _825 = uint(roundEven(NORMAL.w)) * 13u;
    uint _826 = _825 + 9u;
    uint _827 = _826 + uint(cbMatDynParam._m0[0u].w);
    float _833 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * cbInstanceData._m0[_827].x;
    float _834 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * cbInstanceData._m0[_827].y;
    float _835 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) * cbInstanceData._m0[_827].z;
    float _4089 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _836 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _4100 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _837 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _4111 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _838 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    vec4 _839 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _844 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _855 = (((_844.x - _676) + (_844.w * _676)) * cbMtdParam._m0[3u].x) + _676;
    float _868 = (cbMtdParam._m0[3u].x * (((_836 * _775) - _836) + _839.x)) + _836;
    float _869 = (cbMtdParam._m0[3u].x * (((_837 * _775) - _837) + _839.y)) + _837;
    float _870 = (cbMtdParam._m0[3u].x * (((_838 * _775) - _838) + _839.z)) + _838;
    float _871 = 1.0 - _855;
    float _872 = _871 * _868;
    float _873 = _871 * _869;
    float _874 = _871 * _870;
    float _879 = (_868 + (-0.039999999105930328369140625)) * _855;
    float _880 = (_869 + (-0.039999999105930328369140625)) * _855;
    float _881 = (_870 + (-0.039999999105930328369140625)) * _855;
    float _882 = _879 + 0.039999999105930328369140625;
    float _884 = _880 + 0.039999999105930328369140625;
    float _885 = _881 + 0.039999999105930328369140625;
    vec4 _894 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _770, cbSceneParam._m0[86u].y * _771));
    float _897 = _894.x * TEXCOORD_4;
    float _898 = dot(vec3(_668, _669, _670), vec3(_750, _751, _752));
    float _901 = _898 * 2.0;
    float _905 = (_901 * _668) - _750;
    float _906 = (_901 * _669) - _751;
    float _907 = (_901 * _670) - _752;
    float _911 = abs(dot(vec3(_750, _751, _752), vec3(_668, _669, _670)));
    float _4122 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _913 = sqrt(_812);
    float _926 = exp2((_913 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_913 * 3.0));
    float _932 = (1.0 - _926) * ((_913 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _933 = _926 * _913;
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _965 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _969 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1300;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1025 = fma(_969, cbModelParam._m0[26u].z, fma(_965, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _961));
        float _1029 = fma(_969, cbModelParam._m0[27u].z, fma(_965, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _961));
        float _1033 = fma(_969, cbModelParam._m0[28u].z, fma(_965, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _961));
        float _1058 = _961 + _668;
        float _1059 = _965 + _669;
        float _1060 = _969 + _670;
        float _1070 = fma(_1060, cbModelParam._m0[26u].z, fma(_1059, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1058)) - _1025;
        float _1071 = fma(_1060, cbModelParam._m0[27u].z, fma(_1059, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1058)) - _1029;
        float _1072 = fma(_1060, cbModelParam._m0[28u].z, fma(_1059, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1058)) - _1033;
        float _1076 = inversesqrt(dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072)));
        float _1089 = ((_1076 * _1070) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1025 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1090 = ((_1076 * _1071) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1029 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1091 = ((_1076 * _1072) / cbModelParam._m0[34u].z) + ((((((_1033 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        float _1128 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1094.x + (-0.5));
        float _1130 = _1128 * (_1094.y + (-0.5));
        float _1131 = _1128 * (_1094.z + (-0.5));
        float _1138 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1101.x + (-0.5));
        float _1140 = _1138 * (_1101.y + (-0.5));
        float _1141 = _1138 * (_1101.z + (-0.5));
        float _1148 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1108.x + (-0.5));
        float _1150 = _1148 * (_1108.y + (-0.5));
        float _1151 = _1148 * (_1108.z + (-0.5));
        float _1158 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1115.x + (-0.5));
        float _1160 = _1158 * (_1115.y + (-0.5));
        float _1161 = _1158 * (_1115.z + (-0.5));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = _1129 * 0.5;
        float _1166 = _1139 * 0.5;
        float _1167 = _1149 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1182 = (dot(vec3(_668, _669, _670), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1192 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _4170 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1194 + 1.0))) + _1199) * _1162;
        float _1209 = _1130 * 0.5;
        float _1210 = _1140 * 0.5;
        float _1211 = _1150 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1225 = (dot(vec3(_668, _669, _670), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1234 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _4203 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1236 + 1.0))) + _1241) * _1163;
        float _1251 = _1131 * 0.5;
        float _1252 = _1141 * 0.5;
        float _1253 = _1151 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1267 = (dot(vec3(_668, _669, _670), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _4214 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1276 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _4225 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _4236 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_1278 + 1.0))) + _1283) * _1164;
        _1300 = _1131;
        _1302 = _1130;
        _1303 = _1129;
        _1304 = _1141;
        _1305 = _1140;
        _1306 = _1139;
        _1307 = _1151;
        _1308 = _1150;
        _1309 = _1149;
        _1310 = _1164;
        _1311 = _1163;
        _1312 = _1162;
        _1313 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
        _1314 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
        _1315 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
    }
    else
    {
        _1300 = _1301;
        _1302 = _1301;
        _1303 = _1301;
        _1304 = _1301;
        _1305 = _1301;
        _1306 = _1301;
        _1307 = _1301;
        _1308 = _1301;
        _1309 = _1301;
        _1310 = _1301;
        _1311 = _1301;
        _1312 = _1301;
        _1313 = 0.0;
        _1314 = 0.0;
        _1315 = 0.0;
    }
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1344 = fma(_969, cbModelParam._m0[30u].z, fma(_965, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _961));
        float _1348 = fma(_969, cbModelParam._m0[31u].z, fma(_965, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _961));
        float _1352 = fma(_969, cbModelParam._m0[32u].z, fma(_965, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _961));
        float _1375 = _961 + _668;
        float _1376 = _965 + _669;
        float _1377 = _969 + _670;
        float _1387 = fma(_1377, cbModelParam._m0[30u].z, fma(_1376, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1375)) - _1344;
        float _1388 = fma(_1377, cbModelParam._m0[31u].z, fma(_1376, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1375)) - _1348;
        float _1389 = fma(_1377, cbModelParam._m0[32u].z, fma(_1376, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1375)) - _1352;
        float _1393 = inversesqrt(dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389)));
        float _1406 = ((_1393 * _1387) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1344 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1407 = ((_1393 * _1388) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1348 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1408 = ((_1393 * _1389) / cbModelParam._m0[35u].z) + ((((((_1352 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        float _1443 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1410.x + (-0.5));
        float _1445 = _1443 * (_1410.y + (-0.5));
        float _1446 = _1443 * (_1410.z + (-0.5));
        float _1453 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1417.x + (-0.5));
        float _1455 = _1453 * (_1417.y + (-0.5));
        float _1456 = _1453 * (_1417.z + (-0.5));
        float _1463 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1424.x + (-0.5));
        float _1465 = _1463 * (_1424.y + (-0.5));
        float _1466 = _1463 * (_1424.z + (-0.5));
        float _1473 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1431.x + (-0.5));
        float _1475 = _1473 * (_1431.y + (-0.5));
        float _1476 = _1473 * (_1431.z + (-0.5));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = _1444 * 0.5;
        float _1481 = _1454 * 0.5;
        float _1482 = _1464 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_668, _669, _670), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _4277 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4288 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _4299 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_1507 + 1.0))) + _1512) * _1477;
        float _1522 = _1445 * 0.5;
        float _1523 = _1455 * 0.5;
        float _1524 = _1465 * 0.5;
        float _1525 = dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524));
        float _1530 = (_1525 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1525);
        float _1538 = (dot(vec3(_668, _669, _670), vec3(_1530 * _1522, _1530 * _1523, _1530 * _1524)) + 1.0) * 0.5;
        float _4310 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1547 = sqrt(((_1523 * _1523) + (_1522 * _1522)) + (_1524 * _1524)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _4321 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1549 = _1548 * 2.0;
        float _1553 = (1.0 - _1548) / (_1548 + 1.0);
        float _4332 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1563 = ((((1.0 - _1554) * (_1549 + 2.0)) * exp2(log2(isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_1549 + 1.0))) + _1554) * _1478;
        float _1564 = _1446 * 0.5;
        float _1565 = _1456 * 0.5;
        float _1566 = _1466 * 0.5;
        float _1567 = dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566));
        float _1572 = (_1567 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1567);
        float _1580 = (dot(vec3(_668, _669, _670), vec3(_1572 * _1564, _1572 * _1565, _1572 * _1566)) + 1.0) * 0.5;
        float _4343 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1589 = sqrt(((_1565 * _1565) + (_1564 * _1564)) + (_1566 * _1566)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _4354 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1591 = _1590 * 2.0;
        float _1595 = (1.0 - _1590) / (_1590 + 1.0);
        float _4365 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1605 = ((((1.0 - _1596) * (_1591 + 2.0)) * exp2(log2(isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_1591 + 1.0))) + _1596) * _1479;
        _1613 = _1446;
        _1614 = _1445;
        _1615 = _1444;
        _1616 = _1456;
        _1617 = _1455;
        _1618 = _1454;
        _1619 = _1466;
        _1620 = _1465;
        _1621 = _1464;
        _1622 = _1479;
        _1623 = _1478;
        _1624 = _1477;
        _1625 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
        _1626 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)));
        _1627 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)));
    }
    else
    {
        _1613 = _1301;
        _1614 = _1301;
        _1615 = _1301;
        _1616 = _1301;
        _1617 = _1301;
        _1618 = _1301;
        _1619 = _1301;
        _1620 = _1301;
        _1621 = _1301;
        _1622 = _1301;
        _1623 = _1301;
        _1624 = _1301;
        _1625 = 0.0;
        _1626 = 0.0;
        _1627 = 0.0;
    }
    float _1637 = (cbModelParam._m0[1u].x * (_1625 - _1313)) + _1313;
    float _1638 = (cbModelParam._m0[1u].x * (_1626 - _1314)) + _1314;
    float _1639 = (cbModelParam._m0[1u].x * (_1627 - _1315)) + _1315;
    float _1660 = fma(_1639, cbSceneParam._m0[89u].z, fma(_1638, cbSceneParam._m0[89u].y, _1637 * cbSceneParam._m0[89u].x));
    float _1663 = fma(_1639, cbSceneParam._m0[90u].z, fma(_1638, cbSceneParam._m0[90u].y, _1637 * cbSceneParam._m0[90u].x));
    float _1666 = fma(_1639, cbSceneParam._m0[91u].z, fma(_1638, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1637));
    float _1681 = _905 * 0.5;
    float _1682 = _906 * 0.5;
    float _1683 = _907 * 0.5;
    float _1684 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1615, _1618, _1621, _1624));
    float _1687 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1614, _1617, _1620, _1623));
    float _1690 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1613, _1616, _1619, _1622));
    float _1724;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1697 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1300, _1304, _1307, _1310));
        float _1701 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1302, _1305, _1308, _1311));
        float _1705 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1303, _1306, _1309, _1312));
        float _1712 = dot(vec4(cbModelParam._m0[39u]), vec4(_1681, _1682, _1683, 1.0));
        _1724 = dot(vec3(isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)), isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1712) ? 0.0 : (isnan(0.0) ? _1712 : max(0.0, _1712))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1724 = 1.0;
    }
    float _1735;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1726 = dot(vec4(cbModelParam._m0[40u]), vec4(_1681, _1682, _1683, 1.0));
        _1735 = dot(vec3(isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1726) ? 0.0 : (isnan(0.0) ? _1726 : max(0.0, _1726))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1735 = 1.0;
    }
    float _1739 = (_1735 * cbModelParam._m0[1u].x) + (_1724 * (1.0 - cbModelParam._m0[1u].x));
    float _1749 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _812);
    float _1750 = isnan(_1749) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1749 : min(cbModelParam._m0[25u].z, _1749));
    float _1830;
    float _1832;
    float _1834;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1797 = fma(_969, cbModelParam._m0[13u].z, fma(_965, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _961)) + cbModelParam._m0[13u].w;
        float _1801 = fma(_969, cbModelParam._m0[14u].z, fma(_965, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _961)) + cbModelParam._m0[14u].w;
        float _1805 = fma(_969, cbModelParam._m0[15u].z, fma(_965, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _961)) + cbModelParam._m0[15u].w;
        float _1808 = fma(_907, cbModelParam._m0[13u].z, fma(_906, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _905));
        float _1811 = fma(_907, cbModelParam._m0[14u].z, fma(_906, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _905));
        float _1814 = fma(_907, cbModelParam._m0[15u].z, fma(_906, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _905));
        float _1842;
        if (_1808 > 0.0)
        {
            _1842 = abs((1.0 - _1797) / _1808);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1797 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1842 = frontier_phi_19_17_ladder;
        }
        float _2013;
        if (_1811 > 0.0)
        {
            _2013 = abs((1.0 - _1801) / _1811);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1801 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2013 = frontier_phi_28_24_ladder;
        }
        float _2308;
        if (_1814 > 0.0)
        {
            _2308 = abs((1.0 - _1805) / _1814);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1805 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2308 = frontier_phi_40_35_ladder;
        }
        float _2310 = isnan(_2013) ? _1842 : (isnan(_1842) ? _2013 : min(_1842, _2013));
        float _2311 = isnan(_2308) ? _2310 : (isnan(_2310) ? _2308 : min(_2310, _2308));
        float _2315 = (_2311 * _1808) + _1797;
        float _2316 = (_2311 * _1811) + _1801;
        float _2317 = (_2311 * _1814) + _1805;
        float _2318 = _2311 * 9.9999997473787516355514526367188e-05;
        float _2320 = (-1.0) - _2318;
        float _2322 = _2318 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2317 > _2322) || ((_2317 < _2320) || ((_2316 > _2322) || ((_2316 < _2320) || ((_2315 < _2320) || (_2315 > _2322))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2462 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2317, cbModelParam._m0[9u].z, fma(_2316, cbModelParam._m0[9u].y, _2315 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2317, cbModelParam._m0[10u].z, fma(_2316, cbModelParam._m0[10u].y, _2315 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2317, cbModelParam._m0[11u].z, fma(_2316, cbModelParam._m0[11u].y, _2315 * cbModelParam._m0[11u].x))), _1750);
            frontier_phi_18_40_ladder = _2462.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2462.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2462.x * cbModelParam._m0[1u].y;
        }
        _1830 = frontier_phi_18_40_ladder_2;
        _1832 = frontier_phi_18_40_ladder_1;
        _1834 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1818 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_905, _906, _907), _1750);
        _1830 = _1818.x * cbModelParam._m0[1u].y;
        _1832 = _1818.y * cbModelParam._m0[1u].y;
        _1834 = _1818.z * cbModelParam._m0[1u].y;
    }
    float _1838 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _812);
    float _1839 = isnan(_1838) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1838 : min(cbModelParam._m0[25u].w, _1838));
    float _1928;
    float _1930;
    float _1932;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1892 = fma(_969, cbModelParam._m0[21u].z, fma(_965, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _961)) + cbModelParam._m0[21u].w;
        float _1896 = fma(_969, cbModelParam._m0[22u].z, fma(_965, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _961)) + cbModelParam._m0[22u].w;
        float _1900 = fma(_969, cbModelParam._m0[23u].z, fma(_965, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _961)) + cbModelParam._m0[23u].w;
        float _1903 = fma(_907, cbModelParam._m0[21u].z, fma(_906, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _905));
        float _1906 = fma(_907, cbModelParam._m0[22u].z, fma(_906, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _905));
        float _1909 = fma(_907, cbModelParam._m0[23u].z, fma(_906, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _905));
        float _2018;
        if (_1903 > 0.0)
        {
            _2018 = abs((1.0 - _1892) / _1903);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1892 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2018 = frontier_phi_30_26_ladder;
        }
        float _2335;
        if (_1906 > 0.0)
        {
            _2335 = abs((1.0 - _1896) / _1906);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1896 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2335 = frontier_phi_42_37_ladder;
        }
        float _2673;
        if (_1909 > 0.0)
        {
            _2673 = abs((1.0 - _1900) / _1909);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1900 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2673 = frontier_phi_52_49_ladder;
        }
        float _2675 = isnan(_2335) ? _2018 : (isnan(_2018) ? _2335 : min(_2018, _2335));
        float _2676 = isnan(_2673) ? _2675 : (isnan(_2675) ? _2673 : min(_2675, _2673));
        float _2680 = (_2676 * _1903) + _1892;
        float _2681 = (_2676 * _1906) + _1896;
        float _2682 = (_2676 * _1909) + _1900;
        float _2683 = _2676 * 9.9999997473787516355514526367188e-05;
        float _2684 = (-1.0) - _2683;
        float _2686 = _2683 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2682 > _2686) || ((_2682 < _2684) || ((_2681 > _2686) || ((_2681 < _2684) || ((_2680 < _2684) || (_2680 > _2686))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2804 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2682, cbModelParam._m0[17u].z, fma(_2681, cbModelParam._m0[17u].y, _2680 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2682, cbModelParam._m0[18u].z, fma(_2681, cbModelParam._m0[18u].y, _2680 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2682, cbModelParam._m0[19u].z, fma(_2681, cbModelParam._m0[19u].y, _2680 * cbModelParam._m0[19u].x))), _1839);
            frontier_phi_27_52_ladder = _2804.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2804.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2804.x * cbModelParam._m0[1u].z;
        }
        _1928 = frontier_phi_27_52_ladder_2;
        _1930 = frontier_phi_27_52_ladder_1;
        _1932 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1912 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_905, _906, _907), _1839);
        _1928 = _1912.x * cbModelParam._m0[1u].z;
        _1930 = _1912.y * cbModelParam._m0[1u].z;
        _1932 = _1912.z * cbModelParam._m0[1u].z;
    }
    float _1945 = (((_932 * _882) + _933) * _897) * ((cbModelParam._m0[1u].w * (_1928 - _1830)) + _1830);
    float _1947 = (((_932 * _884) + _933) * _897) * ((cbModelParam._m0[1u].w * (_1930 - _1832)) + _1832);
    float _1949 = (((_932 * _885) + _933) * _897) * ((cbModelParam._m0[1u].w * (_1932 - _1834)) + _1834);
    float _1952 = fma(_1949, cbSceneParam._m0[89u].z, fma(_1947, cbSceneParam._m0[89u].y, _1945 * cbSceneParam._m0[89u].x));
    float _1955 = fma(_1949, cbSceneParam._m0[90u].z, fma(_1947, cbSceneParam._m0[90u].y, _1945 * cbSceneParam._m0[90u].x));
    float _1958 = fma(_1949, cbSceneParam._m0[91u].z, fma(_1947, cbSceneParam._m0[91u].y, _1945 * cbSceneParam._m0[91u].x));
    float _1992 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1996 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2000 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2004 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2005 = _1992 / _2004;
    float _2006 = _1996 / _2004;
    float _2007 = _2000 / _2004;
    float _2154;
    float _2155;
    float _2156;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2034 = ((uint(_2007 > cbSceneParam._m0[59u].y) + uint(_2007 > cbSceneParam._m0[59u].x)) + uint(_2007 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2035 = _2034 + 43u;
        uint _2043 = _2034 + 44u;
        uint _2051 = _2034 + 45u;
        uint _2059 = _2034 + 46u;
        float _2070 = fma(_2004, cbSceneParam._m0[_2035].w, fma(_2000, cbSceneParam._m0[_2035].z, fma(_1996, cbSceneParam._m0[_2035].y, _1992 * cbSceneParam._m0[_2035].x)));
        float _2074 = fma(_2004, cbSceneParam._m0[_2043].w, fma(_2000, cbSceneParam._m0[_2043].z, fma(_1996, cbSceneParam._m0[_2043].y, _1992 * cbSceneParam._m0[_2043].x)));
        float _2082 = fma(_2004, cbSceneParam._m0[_2059].w, fma(_2000, cbSceneParam._m0[_2059].z, fma(_1996, cbSceneParam._m0[_2059].y, _1992 * cbSceneParam._m0[_2059].x)));
        float _2087 = cbSceneParam._m0[33u].z * _2082;
        float _2089 = cbSceneParam._m0[33u].w * _2082;
        float _2092 = fma(_2004, cbSceneParam._m0[_2051].w, fma(_2000, cbSceneParam._m0[_2051].z, fma(_1996, cbSceneParam._m0[_2051].y, _1992 * cbSceneParam._m0[_2051].x))) / _2082;
        float _2140 = (cbSceneParam._m0[33u].x - sqrt(((_2006 * _2006) + (_2005 * _2005)) + (_2007 * _2007))) * cbSceneParam._m0[33u].y;
        float _4491 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2147 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2087 + _2070) / _2082, (_2089 + _2074) / _2082), _2092), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2089 + _2070) / _2082, (_2074 - _2087) / _2082), _2092), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2070 - _2087) / _2082, (_2074 - _2089) / _2082), _2092), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2070 - _2089) / _2082, (_2087 + _2074) / _2082), _2092), 0.0)).x), vec4(0.25)));
        _2154 = 1.0 - (_2147 * cbSceneParam._m0[34u].x);
        _2155 = 1.0 - (_2147 * cbSceneParam._m0[34u].y);
        _2156 = 1.0 - (_2147 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2154 = 1.0;
        _2155 = 1.0;
        _2156 = 1.0;
    }
    float _2220;
    float _2222;
    float _2224;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2208 = fma(_2004, cbSceneParam._m0[63u].w, fma(_2000, cbSceneParam._m0[63u].z, fma(_1996, cbSceneParam._m0[63u].y, _1992 * cbSceneParam._m0[63u].x)));
        float _2209 = fma(_2004, cbSceneParam._m0[60u].w, fma(_2000, cbSceneParam._m0[60u].z, fma(_1996, cbSceneParam._m0[60u].y, _1992 * cbSceneParam._m0[60u].x))) / _2208;
        float _2210 = fma(_2004, cbSceneParam._m0[61u].w, fma(_2000, cbSceneParam._m0[61u].z, fma(_1996, cbSceneParam._m0[61u].y, _1992 * cbSceneParam._m0[61u].x))) / _2208;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2209 >= cbSceneParam._m0[64u].x) && (_2210 >= cbSceneParam._m0[64u].y)) && (_2209 <= cbSceneParam._m0[64u].z)) && (_2210 <= cbSceneParam._m0[64u].w))
        {
            float _2348 = fma(_2004, cbSceneParam._m0[62u].w, fma(_2000, cbSceneParam._m0[62u].z, fma(_1996, cbSceneParam._m0[62u].y, _1992 * cbSceneParam._m0[62u].x))) / _2208;
            float _2352 = isnan(cbSceneParam._m0[41u].w) ? _2348 : (isnan(_2348) ? cbSceneParam._m0[41u].w : max(_2348, cbSceneParam._m0[41u].w));
            float _2395 = (cbSceneParam._m0[33u].x - sqrt(((_2006 * _2006) + (_2005 * _2005)) + (_2007 * _2007))) * cbSceneParam._m0[33u].y;
            float _4507 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
            float _2402 = (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2209, cbSceneParam._m0[33u].w + _2210), _2352), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2209, _2210 - cbSceneParam._m0[33u].z), _2352), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2209 - cbSceneParam._m0[33u].z, _2210 - cbSceneParam._m0[33u].w), _2352), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2209 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2210), _2352), 0.0)).x), vec4(0.25)));
            float _2406 = 1.0 - (_2402 * cbSceneParam._m0[34u].x);
            float _2407 = 1.0 - (_2402 * cbSceneParam._m0[34u].y);
            float _2408 = 1.0 - (_2402 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2407) ? _2155 : (isnan(_2155) ? _2407 : min(_2155, _2407));
            frontier_phi_39_38_ladder_1 = isnan(_2406) ? _2154 : (isnan(_2154) ? _2406 : min(_2154, _2406));
            frontier_phi_39_38_ladder_2 = isnan(_2408) ? _2156 : (isnan(_2156) ? _2408 : min(_2156, _2408));
        }
        else
        {
            frontier_phi_39_38_ladder = _2155;
            frontier_phi_39_38_ladder_1 = _2154;
            frontier_phi_39_38_ladder_2 = _2156;
        }
        _2220 = frontier_phi_39_38_ladder_1;
        _2222 = frontier_phi_39_38_ladder;
        _2224 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2220 = _2154;
        _2222 = _2155;
        _2224 = _2156;
    }
    uvec4 _2229 = floatBitsToUint(cbInstanceData._m0[_825 + 5u]);
    uint _2231 = _2229.x * 14u;
    uint _2232 = _2231 + 13u;
    float _2239 = _897 + (-1.0);
    float _2244 = (cbLight._m0[_2232].x * _2239) + 1.0;
    float _2245 = (cbLight._m0[_2232].y * _2239) + 1.0;
    float _2246 = (cbLight._m0[_2232].z * _2239) + 1.0;
    float _2247 = (cbLight._m0[_2232].w * _2239) + 1.0;
    uint _2248 = _2231 + 5u;
    float _2254 = isnan(1.0) ? _2245 : (isnan(_2245) ? 1.0 : min(_2245, 1.0));
    uint _2258 = _2231 + 4u;
    float _2267 = isnan(1.0) ? _2244 : (isnan(_2244) ? 1.0 : min(_2244, 1.0));
    uint _2271 = _2231 | 1u;
    float _2282 = dot(vec3(cbLight._m0[_2231].xyz), vec3(_668, _669, _670));
    float _2285 = dot(vec3(cbLight._m0[_2271].xyz), vec3(_668, _669, _670));
    float _4543 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _4554 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2290 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * 0.3183098733425140380859375;
    float _2292 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * 0.3183098733425140380859375;
    float _2299 = ((cbLight._m0[_2248].x * _2254) * _2292) + (((cbLight._m0[_2258].x * _2220) * _2267) * _2290);
    float _2300 = ((_2254 * cbLight._m0[_2248].y) * _2292) + (((cbLight._m0[_2258].y * _2222) * _2267) * _2290);
    float _2301 = ((_2254 * cbLight._m0[_2248].z) * _2292) + (((cbLight._m0[_2258].z * _2224) * _2267) * _2290);
    uvec4 _2305 = floatBitsToUint(cbLight._m0[_2231 + 12u]);
    bool _2307 = _2305.x == 0u;
    float _2409;
    float _2411;
    float _2413;
    if (_2307)
    {
        _2409 = _2299;
        _2411 = _2300;
        _2413 = _2301;
    }
    else
    {
        uint _2417 = _2231 + 6u;
        float _2433 = (dot(vec3(cbLight._m0[_2231 + 2u].xyz), vec3(_668, _669, _670)) * 0.5) + 0.5;
        float _2434 = _2433 * _2433;
        float _4565 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2435 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _2436 = isnan(1.0) ? _2246 : (isnan(_2246) ? 1.0 : min(_2246, 1.0));
        _2409 = (((cbLight._m0[_2417].x * 0.3183098733425140380859375) * _2435) * _2436) + _2299;
        _2411 = (((cbLight._m0[_2417].y * 0.3183098733425140380859375) * _2435) * _2436) + _2300;
        _2413 = (((cbLight._m0[_2417].z * 0.3183098733425140380859375) * _2435) * _2436) + _2301;
    }
    bool _2416 = _2305.y == 0u;
    float _2471;
    float _2473;
    float _2475;
    if (_2416)
    {
        _2471 = _2409;
        _2473 = _2411;
        _2475 = _2413;
    }
    else
    {
        uint _2644 = _2231 + 7u;
        float _2660 = (dot(vec3(cbLight._m0[_2231 + 3u].xyz), vec3(_668, _669, _670)) * 0.5) + 0.5;
        float _2661 = _2660 * _2660;
        float _4581 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2662 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _2663 = isnan(1.0) ? _2247 : (isnan(_2247) ? 1.0 : min(_2247, 1.0));
        _2471 = (((cbLight._m0[_2644].x * 0.3183098733425140380859375) * _2662) * _2663) + _2409;
        _2473 = (((cbLight._m0[_2644].y * 0.3183098733425140380859375) * _2662) * _2663) + _2411;
        _2475 = (((cbLight._m0[_2644].z * 0.3183098733425140380859375) * _2662) * _2663) + _2413;
    }
    uint _2478 = _2231 + 8u;
    float _2491 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2231].w)) * _812) * 0.949999988079071044921875);
    float _2492 = _2491 * _2491;
    float _2493 = cbLight._m0[_2231].x + _750;
    float _2494 = cbLight._m0[_2231].y + _751;
    float _2495 = cbLight._m0[_2231].z + _752;
    float _2499 = inversesqrt(dot(vec3(_2493, _2494, _2495), vec3(_2493, _2494, _2495)));
    float _2500 = _2499 * _2493;
    float _2501 = _2499 * _2494;
    float _2502 = _2499 * _2495;
    float _2503 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_2231].xyz));
    float _4597 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2506 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
    float _4608 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _2507 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
    float _2508 = dot(vec3(_668, _669, _670), vec3(_2500, _2501, _2502));
    float _4619 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2511 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
    float _2512 = dot(vec3(cbLight._m0[_2231].xyz), vec3(_2500, _2501, _2502));
    float _4630 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2516 = _2492 * _2492;
    float _2520 = ((_2511 * _2511) * (_2516 + (-1.0))) + 1.0;
    float _2528 = exp2(log2(1.0 - (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0)))) * 5.0);
    float _2529 = 0.959999978542327880859375 - _879;
    float _2531 = 0.959999978542327880859375 - _880;
    float _2532 = 0.959999978542327880859375 - _881;
    float _2539 = 1.0 - _2492;
    float _2550 = (0.5 / (((_2507 * ((_2506 * _2539) + _2492)) + 9.9999999392252902907785028219223e-09) + (((_2507 * _2539) + _2492) * _2506))) * _2506;
    float _4641 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2552 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2516 / ((_2520 * _2520) * 3.141590118408203125));
    uint _2566 = _2231 + 9u;
    float _2577 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2271].w)) * _812) * 0.949999988079071044921875);
    float _2578 = _2577 * _2577;
    float _2579 = cbLight._m0[_2271].x + _750;
    float _2580 = cbLight._m0[_2271].y + _751;
    float _2581 = cbLight._m0[_2271].z + _752;
    float _2585 = inversesqrt(dot(vec3(_2579, _2580, _2581), vec3(_2579, _2580, _2581)));
    float _2586 = _2585 * _2579;
    float _2587 = _2585 * _2580;
    float _2588 = _2585 * _2581;
    float _2589 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_2271].xyz));
    float _4652 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2592 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
    float _2593 = dot(vec3(_668, _669, _670), vec3(_2586, _2587, _2588));
    float _4663 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _2596 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
    float _2597 = dot(vec3(cbLight._m0[_2271].xyz), vec3(_2586, _2587, _2588));
    float _4674 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2601 = _2578 * _2578;
    float _2605 = ((_2596 * _2596) * (_2601 + (-1.0))) + 1.0;
    float _2612 = exp2(log2(1.0 - (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0)))) * 5.0);
    float _2619 = 1.0 - _2578;
    float _2629 = (0.5 / (((_2507 * ((_2592 * _2619) + _2578)) + 9.9999999392252902907785028219223e-09) + (((_2507 * _2619) + _2578) * _2592))) * _2592;
    float _4685 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
    float _2631 = (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2601 / ((_2605 * _2605) * 3.141590118408203125));
    float _2641 = (((((_2612 * _2529) + _882) * cbLight._m0[_2566].x) * _2631) * _2254) + ((((cbLight._m0[_2478].x * _2220) * ((_2528 * _2529) + _882)) * _2552) * _2267);
    float _2642 = (((((_2612 * _2531) + _884) * cbLight._m0[_2566].y) * _2631) * _2254) + ((((cbLight._m0[_2478].y * _2222) * ((_2528 * _2531) + _884)) * _2552) * _2267);
    float _2643 = (((((_2612 * _2532) + _885) * cbLight._m0[_2566].z) * _2631) * _2254) + ((((cbLight._m0[_2478].z * _2224) * ((_2528 * _2532) + _885)) * _2552) * _2267);
    float _2699;
    float _2701;
    float _2703;
    if (_2307)
    {
        _2699 = _2641;
        _2701 = _2642;
        _2703 = _2643;
    }
    else
    {
        uint _2705 = _2231 + 2u;
        uint _2709 = _2231 + 10u;
        float _2723 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2705].w)) * _812) * 0.949999988079071044921875);
        float _2724 = _2723 * _2723;
        float _2725 = cbLight._m0[_2705].x + _750;
        float _2726 = cbLight._m0[_2705].y + _751;
        float _2727 = cbLight._m0[_2705].z + _752;
        float _2731 = inversesqrt(dot(vec3(_2725, _2726, _2727), vec3(_2725, _2726, _2727)));
        float _2732 = _2731 * _2725;
        float _2733 = _2731 * _2726;
        float _2734 = _2731 * _2727;
        float _2735 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_2705].xyz));
        float _4696 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2738 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
        float _2739 = dot(vec3(_668, _669, _670), vec3(_2732, _2733, _2734));
        float _4707 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2742 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
        float _2743 = dot(vec3(cbLight._m0[_2705].xyz), vec3(_2732, _2733, _2734));
        float _4718 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2747 = _2724 * _2724;
        float _2751 = ((_2742 * _2742) * (_2747 + (-1.0))) + 1.0;
        float _2758 = exp2(log2(1.0 - (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0)))) * 5.0);
        float _2765 = 1.0 - _2724;
        float _2775 = (0.5 / (((_2507 * ((_2738 * _2765) + _2724)) + 9.9999999392252902907785028219223e-09) + (((_2507 * _2765) + _2724) * _2738))) * _2738;
        float _4729 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2777 = (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (_2747 / ((_2751 * _2751) * 3.141590118408203125));
        float _2778 = isnan(1.0) ? _2246 : (isnan(_2246) ? 1.0 : min(_2246, 1.0));
        _2699 = (((((_2758 * _2529) + _882) * cbLight._m0[_2709].x) * _2777) * _2778) + _2641;
        _2701 = (((((_2758 * _2531) + _884) * cbLight._m0[_2709].y) * _2777) * _2778) + _2642;
        _2703 = (((((_2758 * _2532) + _885) * cbLight._m0[_2709].z) * _2777) * _2778) + _2643;
    }
    float _2809;
    float _2811;
    float _2813;
    if (_2416)
    {
        _2809 = _2699;
        _2811 = _2701;
        _2813 = _2703;
    }
    else
    {
        uint _2820 = _2231 + 3u;
        uint _2824 = _2231 + 11u;
        float _2838 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2820].w)) * _812) * 0.949999988079071044921875);
        float _2839 = _2838 * _2838;
        float _2840 = cbLight._m0[_2820].x + _750;
        float _2841 = cbLight._m0[_2820].y + _751;
        float _2842 = cbLight._m0[_2820].z + _752;
        float _2846 = inversesqrt(dot(vec3(_2840, _2841, _2842), vec3(_2840, _2841, _2842)));
        float _2847 = _2846 * _2840;
        float _2848 = _2846 * _2841;
        float _2849 = _2846 * _2842;
        float _2850 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_2820].xyz));
        float _4745 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2853 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
        float _2854 = dot(vec3(_668, _669, _670), vec3(_2847, _2848, _2849));
        float _4756 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        float _2857 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
        float _2858 = dot(vec3(cbLight._m0[_2820].xyz), vec3(_2847, _2848, _2849));
        float _4767 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
        float _2862 = _2839 * _2839;
        float _2866 = ((_2857 * _2857) * (_2862 + (-1.0))) + 1.0;
        float _2873 = exp2(log2(1.0 - (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0)))) * 5.0);
        float _2880 = 1.0 - _2839;
        float _2890 = (0.5 / (((_2507 * ((_2853 * _2880) + _2839)) + 9.9999999392252902907785028219223e-09) + (((_2507 * _2880) + _2839) * _2853))) * _2853;
        float _4778 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
        float _2892 = (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * (_2862 / ((_2866 * _2866) * 3.141590118408203125));
        float _2893 = isnan(1.0) ? _2247 : (isnan(_2247) ? 1.0 : min(_2247, 1.0));
        _2809 = (((((_2873 * _2529) + _882) * cbLight._m0[_2824].x) * _2892) * _2893) + _2699;
        _2811 = (((((_2873 * _2531) + _884) * cbLight._m0[_2824].y) * _2892) * _2893) + _2701;
        _2813 = (((((_2873 * _2532) + _885) * cbLight._m0[_2824].z) * _2892) * _2893) + _2703;
    }
    float _2958;
    float _2960;
    float _2962;
    float _2964;
    float _2966;
    float _2968;
    if (_2229.y == 0u)
    {
        uvec4 _2914 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2915 = _2914.x;
        uint _2926 = uint((float(_2914.y) * floor(float(uint(cbSceneParam._m0[85u].y * _771) / _2915))) + floor(float(uint(cbSceneParam._m0[85u].x * _770) / _2915)));
        float _2936 = (log2(_2007 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2937 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
        uint _2940 = uint(isnan(14.0) ? _2937 : (isnan(_2937) ? 14.0 : min(_2937, 14.0)));
        uvec4 _2945 = texelFetch(g_lightClusterGridBuffer, int(((_2940 << 2u) + (_2926 << 6u)) >> 2u));
        uint _2946 = _2945.x;
        uint _2947 = _2914.z;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        if (((((1u << ((_2947 >> 4u) & 15u)) + 4294967295u) & _2946) == 0u) || ((_2947 & 240u) == 0u))
        {
            _3027 = 0.0;
            _3029 = 0.0;
            _3031 = 0.0;
            _3033 = 0.0;
            _3035 = 0.0;
            _3037 = 0.0;
        }
        else
        {
            float _3028;
            float _3030;
            float _3032;
            float _3034;
            float _3036;
            float _3038;
            float _3179 = 0.0;
            float _3180 = 0.0;
            float _3181 = 0.0;
            float _3182 = 0.0;
            float _3183 = 0.0;
            float _3184 = 0.0;
            uint _3185 = 0u;
            uint _3194;
            bool _3195;
            for (;;)
            {
                _3194 = texelFetch(g_lightClassification, int((((_2940 << 5u) + (_2926 << 9u)) + (_3185 << 2u)) >> 2u)).x;
                _3195 = _3194 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3195)
                {
                    frontier_phi_73_pred = _3184;
                    frontier_phi_73_pred_1 = _3183;
                    frontier_phi_73_pred_2 = _3182;
                    frontier_phi_73_pred_3 = _3181;
                    frontier_phi_73_pred_4 = _3180;
                    frontier_phi_73_pred_5 = _3179;
                }
                else
                {
                    float _3324;
                    float _3325;
                    float _3326;
                    float _3327;
                    float _3328;
                    float _3329;
                    uint _3330;
                    _3324 = _3179;
                    _3325 = _3180;
                    _3326 = _3181;
                    _3327 = _3182;
                    _3328 = _3183;
                    _3329 = _3184;
                    _3330 = _3194;
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    for (;;)
                    {
                        uint _3334 = uint(findLSB(_3330)) + (_3185 << 5u);
                        uint _3331 = (_3330 + 4294967295u) & _3330;
                        uint _3336 = _3334 * 48u;
                        vec4 _3350 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3336)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 3u)).x));
                        uint _3356 = (_3334 * 48u) + 4u;
                        vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3356)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 3u)).x));
                        uint _3375 = (_3334 * 48u) + 8u;
                        vec3 _3386 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3375)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 2u)).x));
                        float _3390 = _3350.x - _2005;
                        float _3391 = _3350.y - _2006;
                        float _3392 = _3350.z - _2007;
                        float _3393 = dot(vec3(_3390, _3391, _3392), vec3(_3390, _3391, _3392));
                        float _3396 = inversesqrt(_3393);
                        float _3397 = _3396 * _3390;
                        float _3398 = _3396 * _3391;
                        float _3399 = _3396 * _3392;
                        float _3400 = dot(vec3(_793, _796, _799), vec3(_3397, _3398, _3399));
                        float _3405 = 1.0 - (_3393 * _3350.w);
                        float _4804 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3406 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                        float _3407 = sqrt(_3393) * _3369.w;
                        float _3410 = 1.39999997615814208984375 / (_3407 + 1.39999997615814208984375);
                        float _3411 = _3410 * _3410;
                        float _3414 = ((1.0 - _3411) * _3400) + _3411;
                        float _3417 = _3407 * _3407;
                        float _3421 = ((isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0))) * _3406) / ((_3417 * 0.699999988079071044921875) + 1.0);
                        float _3425 = (-0.0) - _2005;
                        float _3426 = (-0.0) - _2006;
                        float _3427 = (-0.0) - _2007;
                        float _3431 = inversesqrt(dot(vec3(_3425, _3426, _3427), vec3(_3425, _3426, _3427)));
                        float _3432 = _3431 * _3425;
                        float _3433 = _3431 * _3426;
                        float _3434 = _3431 * _3427;
                        float _3441 = exp2(log2(1.0 / ((_3417 * 3.5) + 5.0)) * 0.25);
                        float _3442 = 1.0 - _913;
                        float _3449 = sqrt(1.0 - ((1.0 - (_3442 * _3442)) * (1.0 - (_3441 * _3441))));
                        float _3450 = _3449 * _3449;
                        float _3451 = _3450 * _3450;
                        float _3452 = _3432 + _3397;
                        float _3453 = _3433 + _3398;
                        float _3454 = _3434 + _3399;
                        float _3458 = inversesqrt(dot(vec3(_3452, _3453, _3454), vec3(_3452, _3453, _3454)));
                        float _3462 = dot(vec3(_793, _796, _799), vec3(_3432, _3433, _3434));
                        float _4820 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                        float _3465 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                        float _3466 = dot(vec3(_793, _796, _799), vec3(_3458 * _3452, _3458 * _3453, _3458 * _3454));
                        float _4831 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                        float _3469 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                        float _3473 = ((_3469 * _3469) * (_3451 + (-1.0))) + 1.0;
                        float _3474 = _3410 * _3450;
                        float _3475 = _3474 * _3474;
                        float _3478 = ((1.0 - _3475) * _3400) + _3475;
                        float _4842 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                        float _3479 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                        float _3480 = 1.0 - _3450;
                        float _3490 = (0.5 / (((_3479 * ((_3465 * _3480) + _3450)) + 9.9999999392252902907785028219223e-09) + (((_3479 * _3480) + _3450) * _3465))) * _3479;
                        float _4853 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                        float _3501 = (((_3451 * 3.1415927410125732421875) * (isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0)))) / ((_3473 * _3473) * ((_3417 * 2.1991131305694580078125) + 3.141590118408203125))) * _3406;
                        _3254 = (_3421 * _3369.x) + _3327;
                        _3255 = (_3421 * _3369.y) + _3328;
                        _3256 = (_3421 * _3369.z) + _3329;
                        _3251 = (_3501 * _3386.x) + _3324;
                        _3252 = (_3501 * _3386.y) + _3325;
                        _3253 = (_3501 * _3386.z) + _3326;
                        if (_3331 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3324 = _3251;
                            _3325 = _3252;
                            _3326 = _3253;
                            _3327 = _3254;
                            _3328 = _3255;
                            _3329 = _3256;
                            _3330 = _3331;
                        }
                    }
                    frontier_phi_73_pred = _3256;
                    frontier_phi_73_pred_1 = _3255;
                    frontier_phi_73_pred_2 = _3254;
                    frontier_phi_73_pred_3 = _3253;
                    frontier_phi_73_pred_4 = _3252;
                    frontier_phi_73_pred_5 = _3251;
                }
                _3038 = frontier_phi_73_pred;
                _3036 = frontier_phi_73_pred_1;
                _3034 = frontier_phi_73_pred_2;
                _3032 = frontier_phi_73_pred_3;
                _3030 = frontier_phi_73_pred_4;
                _3028 = frontier_phi_73_pred_5;
                uint _3186 = _3185 + 1u;
                if (_3186 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3179 = _3028;
                    _3180 = _3030;
                    _3181 = _3032;
                    _3182 = _3034;
                    _3183 = _3036;
                    _3184 = _3038;
                    _3185 = _3186;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3027 = _3028;
            _3029 = _3030;
            _3031 = _3032;
            _3033 = _3034;
            _3035 = _3036;
            _3037 = _3038;
        }
        uvec4 _3041 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3042 = _3041.z;
        uint _3044 = (_3042 >> 8u) & 15u;
        float _3147;
        float _3149;
        float _3151;
        float _3153;
        float _3155;
        float _3157;
        if (((4294967295u << _3044) & _2946) == 0u)
        {
            _3147 = _3027;
            _3149 = _3029;
            _3151 = _3031;
            _3153 = _3033;
            _3155 = _3035;
            _3157 = _3037;
        }
        else
        {
            float _3172 = inversesqrt(dot(vec3(_2005, _2006, _2007), vec3(_2005, _2006, _2007)));
            float _3173 = _3172 * _2005;
            float _3174 = _3172 * _2006;
            float _3175 = _3172 * _2007;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3044 < ((_3042 >> 12u) & 15u))
            {
                float _3148;
                float _3150;
                float _3152;
                float _3154;
                float _3156;
                float _3158;
                float _3307 = _3027;
                float _3308 = _3029;
                float _3309 = _3031;
                float _3310 = _3033;
                float _3311 = _3035;
                float _3312 = _3037;
                uint _3313 = _3044;
                uint _3322;
                bool _3323;
                for (;;)
                {
                    _3322 = texelFetch(g_lightClassification, int((((_2940 << 5u) + (_2926 << 9u)) + (_3313 << 2u)) >> 2u)).x;
                    _3323 = _3322 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3323)
                    {
                        frontier_phi_84_pred = _3311;
                        frontier_phi_84_pred_1 = _3310;
                        frontier_phi_84_pred_2 = _3309;
                        frontier_phi_84_pred_3 = _3308;
                        frontier_phi_84_pred_4 = _3307;
                        frontier_phi_84_pred_5 = _3312;
                    }
                    else
                    {
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3810;
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3814;
                        float _3815;
                        float _3528 = _3307;
                        float _3529 = _3308;
                        float _3530 = _3309;
                        float _3531 = _3310;
                        float _3532 = _3311;
                        float _3533 = _3312;
                        uint _3534 = _3322;
                        uint _3535;
                        vec4 _3560;
                        float _3561;
                        vec4 _3576;
                        vec3 _3588;
                        vec4 _3604;
                        vec4 _3619;
                        float _3666;
                        bool _3667;
                        for (;;)
                        {
                            uint _3545 = ((_3313 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3534));
                            _3535 = (_3534 + 4294967295u) & _3534;
                            uint _3547 = _3545 * 40u;
                            _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            _3561 = _3560.w;
                            uint _3563 = (_3545 * 40u) + 4u;
                            _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            uint _3578 = (_3545 * 40u) + 8u;
                            _3588 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x));
                            uint _3591 = (_3545 * 40u) + 16u;
                            _3604 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 3u)).x));
                            uint _3606 = (_3545 * 40u) + 20u;
                            _3619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 3u)).x));
                            uint _3622 = (_3545 * 40u) + 24u;
                            vec4 _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            uint _3641 = (_3545 * 40u) + 28u;
                            vec4 _3654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 3u)).x));
                            _3666 = fma(_2007, _3654.z, fma(_2006, _3654.y, _3654.x * _2005)) + _3654.w;
                            _3667 = !((fma(_2007, _3635.z, fma(_2006, _3635.y, _3635.x * _2005)) + _3635.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3667)
                            {
                                float _3694 = _3560.x - _2005;
                                float _3695 = _3560.y - _2006;
                                float _3696 = _3560.z - _2007;
                                float _3697 = dot(vec3(_3694, _3695, _3696), vec3(_3694, _3695, _3696));
                                float _3700 = inversesqrt(_3697);
                                float _3701 = _3700 * _3694;
                                float _3702 = _3700 * _3695;
                                float _3703 = _3700 * _3696;
                                float _3707 = 1.0 - (_3697 / (_3561 * _3561));
                                float _4864 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3708 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
                                float _3712 = sqrt(_3697) * _3576.w;
                                float _3714 = 1.39999997615814208984375 / (_3712 + 1.39999997615814208984375);
                                float _3715 = _3714 * _3714;
                                float _3718 = ((1.0 - _3715) * dot(vec3(_3701, _3702, _3703), vec3(_793, _796, _799))) + _3715;
                                float _3721 = _3712 * _3712;
                                float _3725 = (fma(_2007, _3604.z, fma(_2006, _3604.y, _3604.x * _2005)) + _3604.w) / _3666;
                                float _3726 = (fma(_2007, _3619.z, fma(_2006, _3619.y, _3619.x * _2005)) + _3619.w) / _3666;
                                float _3730 = 1.0 - dot(vec2(_3725, _3726), vec2(_3725, _3726));
                                float _4880 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                                float _3731 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                                float _3732 = _3731 * (((isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0))) * _3708) / ((_3721 * 0.699999988079071044921875) + 1.0));
                                float _3744 = exp2(log2(1.0 / ((_3721 * 3.5) + 5.0)) * 0.25);
                                float _3745 = 1.0 - _913;
                                float _3752 = sqrt(1.0 - ((1.0 - (_3745 * _3745)) * (1.0 - (_3744 * _3744))));
                                float _3753 = _3752 * _3752;
                                float _3754 = _3753 * _3753;
                                float _3755 = _3701 - _3173;
                                float _3756 = _3702 - _3174;
                                float _3757 = _3703 - _3175;
                                float _3761 = inversesqrt(dot(vec3(_3755, _3756, _3757), vec3(_3755, _3756, _3757)));
                                float _3765 = dot(vec3(_793, _796, _799), vec3((-0.0) - _3173, (-0.0) - _3174, (-0.0) - _3175));
                                float _4891 = isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0));
                                float _3768 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                                float _3769 = dot(vec3(_793, _796, _799), vec3(_3761 * _3755, _3761 * _3756, _3761 * _3757));
                                float _4902 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3772 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
                                float _3776 = ((_3772 * _3772) * (_3754 + (-1.0))) + 1.0;
                                float _3777 = _3714 * _3753;
                                float _3778 = _3777 * _3777;
                                float _3784 = ((1.0 - _3778) * dot(vec3(_793, _796, _799), vec3(_3701, _3702, _3703))) + _3778;
                                float _4913 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3785 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
                                float _3786 = 1.0 - _3753;
                                float _3796 = (0.5 / (((_3785 * ((_3768 * _3786) + _3753)) + 9.9999999392252902907785028219223e-09) + (((_3785 * _3786) + _3753) * _3768))) * _3785;
                                float _4924 = isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0));
                                float _3806 = (_3731 * _3708) * (((_3754 * 3.1415927410125732421875) * (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0)))) / ((_3776 * _3776) * ((_3721 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3732 * _3576.y;
                                frontier_phi_90_pred_1 = _3732 * _3576.x;
                                frontier_phi_90_pred_2 = _3806 * _3588.z;
                                frontier_phi_90_pred_3 = _3806 * _3588.y;
                                frontier_phi_90_pred_4 = _3806 * _3588.x;
                                frontier_phi_90_pred_5 = _3732 * _3576.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3814 = frontier_phi_90_pred;
                            _3813 = frontier_phi_90_pred_1;
                            _3812 = frontier_phi_90_pred_2;
                            _3811 = frontier_phi_90_pred_3;
                            _3810 = frontier_phi_90_pred_4;
                            _3815 = frontier_phi_90_pred_5;
                            _3518 = _3813 + _3531;
                            _3519 = _3814 + _3532;
                            _3520 = _3815 + _3533;
                            _3515 = _3810 + _3528;
                            _3516 = _3811 + _3529;
                            _3517 = _3812 + _3530;
                            if (_3535 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3528 = _3515;
                                _3529 = _3516;
                                _3530 = _3517;
                                _3531 = _3518;
                                _3532 = _3519;
                                _3533 = _3520;
                                _3534 = _3535;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3519;
                        frontier_phi_84_pred_1 = _3518;
                        frontier_phi_84_pred_2 = _3517;
                        frontier_phi_84_pred_3 = _3516;
                        frontier_phi_84_pred_4 = _3515;
                        frontier_phi_84_pred_5 = _3520;
                    }
                    _3156 = frontier_phi_84_pred;
                    _3154 = frontier_phi_84_pred_1;
                    _3152 = frontier_phi_84_pred_2;
                    _3150 = frontier_phi_84_pred_3;
                    _3148 = frontier_phi_84_pred_4;
                    _3158 = frontier_phi_84_pred_5;
                    uint _3314 = _3313 + 1u;
                    if (_3314 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3307 = _3148;
                        _3308 = _3150;
                        _3309 = _3152;
                        _3310 = _3154;
                        _3311 = _3156;
                        _3312 = _3158;
                        _3313 = _3314;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3158;
                frontier_phi_65_66_ladder_1 = _3154;
                frontier_phi_65_66_ladder_2 = _3156;
                frontier_phi_65_66_ladder_3 = _3150;
                frontier_phi_65_66_ladder_4 = _3148;
                frontier_phi_65_66_ladder_5 = _3152;
            }
            else
            {
                frontier_phi_65_66_ladder = _3037;
                frontier_phi_65_66_ladder_1 = _3033;
                frontier_phi_65_66_ladder_2 = _3035;
                frontier_phi_65_66_ladder_3 = _3029;
                frontier_phi_65_66_ladder_4 = _3027;
                frontier_phi_65_66_ladder_5 = _3031;
            }
            _3147 = frontier_phi_65_66_ladder_4;
            _3149 = frontier_phi_65_66_ladder_3;
            _3151 = frontier_phi_65_66_ladder_5;
            _3153 = frontier_phi_65_66_ladder_1;
            _3155 = frontier_phi_65_66_ladder_2;
            _3157 = frontier_phi_65_66_ladder;
        }
        float _3162 = isnan(1.0) ? _897 : (isnan(_897) ? 1.0 : min(_897, 1.0));
        _2958 = (_3162 * _3153) + _2471;
        _2960 = (_3162 * _3155) + _2473;
        _2962 = (_3162 * _3157) + _2475;
        _2964 = ((_3147 * _882) * _3162) + _2809;
        _2966 = ((_3149 * _884) * _3162) + _2811;
        _2968 = ((_3151 * _885) * _3162) + _2813;
    }
    else
    {
        _2958 = _2471;
        _2960 = _2473;
        _2962 = _2475;
        _2964 = _2809;
        _2966 = _2811;
        _2968 = _2813;
    }
    float _4940 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _4951 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _4962 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4973 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _2986 = ((isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0))) * (_2958 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _897))) + ((_2964 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1739)) * cbPerFrame._m0[3u].x);
    float _2987 = ((isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0))) * (_2960 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _897))) + ((_2966 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1739)) * cbPerFrame._m0[3u].x);
    float _2988 = ((isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0))) * (_2962 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _897))) + ((_2968 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1739)) * cbPerFrame._m0[3u].x);
    float _2993 = cbInstanceData._m0[_825 + 6u].w * (isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0)));
    float _2998 = _770 / cbSceneParam._m0[86u].x;
    float _2999 = _771 / cbSceneParam._m0[86u].y;
    vec4 _3013 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2998, _2999, (log2((isnan(cbSceneParam._m0[77u].w) ? _692 : (isnan(_692) ? cbSceneParam._m0[77u].w : min(_692, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3015 = _3013.x;
    float _3016 = _3013.y;
    float _3017 = _3013.z;
    float _3018 = _3013.w;
    float _3089;
    float _3091;
    float _3093;
    float _3095;
    if (_692 > cbSceneParam._m0[78u].w)
    {
        float _3052 = isnan(_692) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _692 : min(cbSceneParam._m0[80u].w, _692));
        float _3053 = _3052 / _692;
        float _3064 = _3053 * _743;
        float _3065 = _744 * _3053;
        float _3066 = (-0.0) - _3065;
        float _3067 = _3053 * _745;
        float _3069 = (cbSceneParam._m0[77u].w * _3066) / _3052;
        float _3070 = _3069 + cbSceneParam._m0[79u].w;
        float _3071 = cbSceneParam._m0[79u].w - _3065;
        float _3077 = sqrt(((_3064 * _3064) + (_3065 * _3065)) + (_3067 * _3067));
        float _3080 = (1.0 - (cbSceneParam._m0[77u].w / _3052)) * _3077;
        float _3085 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3087 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3264;
        if (abs((_3066 - _3069) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3264 = ((((_3070 > 0.0) ? exp2(_3085 * _3070) : (2.0 - exp2(_3087 * _3070))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3080;
        }
        else
        {
            float _3208 = 1.0 / cbSceneParam._m0[80u].x;
            float _3209 = isnan(_3071) ? _3070 : (isnan(_3070) ? _3071 : max(_3070, _3071));
            float _3210 = isnan(_3071) ? _3070 : (isnan(_3070) ? _3071 : min(_3070, _3071));
            float _3219 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : min(_3209, 0.0));
            float _3220 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : min(_3210, 0.0));
            _3264 = ((abs(_3077 / _3066) * cbSceneParam._m0[80u].y) * ((((_3219 - _3220) * 2.0) - ((exp2(_3085 * (isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0)))) - exp2(_3085 * (isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0))))) * _3208)) - ((exp2(_3087 * _3219) - exp2(_3087 * _3220)) * _3208))) + (_3080 * cbSceneParam._m0[80u].z);
        }
        vec4 _3266 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2998, _2999, 1.0), 0.0);
        float _3275 = exp2((_3264 * (-1.44269502162933349609375)) * (1.0 - _3266.w));
        float _3276 = log2(_3275);
        float _3292 = log2(_3018);
        _3089 = (exp2(_3292 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3276 * cbSceneParam._m0[78u].x)) * _3266.x) / cbSceneParam._m0[78u].x)) + _3015;
        _3091 = (exp2(_3292 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3276 * cbSceneParam._m0[78u].y)) * _3266.y) / cbSceneParam._m0[78u].y)) + _3016;
        _3093 = (exp2(_3292 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3276 * cbSceneParam._m0[78u].z)) * _3266.z) / cbSceneParam._m0[78u].z)) + _3017;
        _3095 = _3275 * _3018;
    }
    else
    {
        _3089 = _3015;
        _3091 = _3016;
        _3093 = _3017;
        _3095 = _3018;
    }
    bool _3302;
    vec4 _3105;
    vec4 _3127;
    float _3129;
    float _3133;
    float _3134;
    float _3135;
    float _3136;
    bool _3146;
    for (;;)
    {
        _3105 = cbMatDynParam._m0[0u];
        float _3107 = roundEven(_3105.y);
        bool _3108 = _3107 == 3.0;
        float _3109 = log2(_3095);
        float _3116 = exp2(_3109 * cbSceneParam._m0[78u].x) * _2986;
        float _3117 = exp2(_3109 * cbSceneParam._m0[78u].y) * _2987;
        float _3118 = exp2(_3109 * cbSceneParam._m0[78u].z) * _2988;
        float _3125 = _759 + (-0.5);
        _3127 = cbMtdParam._m0[1u];
        _3129 = _3127.y * _3125;
        float _3132 = (_3107 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3133 = _3132 * (_3108 ? _3116 : (_3116 + (cbSceneParam._m0[72u].w * _3089)));
        _3134 = _3132 * (_3108 ? _3117 : (_3117 + (cbSceneParam._m0[72u].w * _3091)));
        _3135 = _3132 * (_3108 ? _3118 : (_3118 + (cbSceneParam._m0[72u].w * _3093)));
        _3136 = _3125 * 0.999000012874603271484375;
        _3146 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3146)
        {
            if ((cbInstanceData._m0[_825 + 7u].x + _3136) < 0.5)
            {
                _3302 = true;
                break;
            }
        }
        uint _3243 = _826 + uint(_3105.w);
        if ((cbInstanceData._m0[_3243].w < 1.0) && ((cbInstanceData._m0[_3243].w + _3136) < 0.5))
        {
            _3302 = true;
            break;
        }
        if ((_3129 + _451) < _3127.x)
        {
            _3302 = true;
            break;
        }
        _3302 = false;
        break;
    }
    float _3506;
    if (_3302)
    {
        discard_state = true;
        _3506 = 0.0;
    }
    else
    {
        _3506 = _2993;
    }
    SV_Target.x = _3133;
    SV_Target.y = _3134;
    SV_Target.z = _3135;
    SV_Target.w = _3506;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2993;
    discard_exit();
}


