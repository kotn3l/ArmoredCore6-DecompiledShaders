#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Alpha_Soft_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _769;
float _2934;
float _2935;
float _2936;
float _2937;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _166 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _167 = _166 * NORMAL.x;
    float _168 = _166 * NORMAL.y;
    float _169 = _166 * NORMAL.z;
    vec4 _189 = texture(sampler2D(S_A1_M0_Alpha_Soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _192 = _189.w;
    vec4 _205 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _207 = _205.x;
    bool _214 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _231 = ((_214 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _207)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _207))) - POSITION_1.w) / cbMtdParam._m0[11u].x;
    float _2946 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _235 = (_192 * TEXCOORD_1.z) * (isnan(1.0) ? _2946 : (isnan(_2946) ? 1.0 : min(_2946, 1.0)));
    float _239 = inversesqrt(dot(vec3(_167, _168, _169), vec3(_167, _168, _169)));
    float _240 = _239 * _167;
    float _241 = _239 * _168;
    float _242 = _239 * _169;
    float _2957 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _243 = isnan(1.0) ? _2957 : (isnan(_2957) ? 1.0 : min(_2957, 1.0));
    float _2968 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _2979 = isnan(0.0) ? cbMtdParam._m0[10u].y : (isnan(cbMtdParam._m0[10u].y) ? 0.0 : max(cbMtdParam._m0[10u].y, 0.0));
    float _2990 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _251 = _214 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _293 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _303 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _293);
    float _304 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _293);
    float _305 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _293);
    float _309 = inversesqrt(dot(vec3(_303, _304, _305), vec3(_303, _304, _305)));
    float _310 = _303 * _309;
    float _311 = _304 * _309;
    float _312 = _305 * _309;
    vec4 _317 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _319 = _317.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _448 = sqrt(((_303 * _303) + (_304 * _304)) + (_305 * _305));
        float _454 = (cbMatDynParam._m0[5u].x * _448) + cbMatDynParam._m0[5u].y;
        float _3001 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
        float _455 = isnan(1.0) ? _3001 : (isnan(_3001) ? 1.0 : min(_3001, 1.0));
        float _459 = (cbMatDynParam._m0[5u].z * _448) + cbMatDynParam._m0[5u].w;
        float _3012 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3012 : (isnan(_3012) ? 1.0 : min(_3012, 1.0))) - _455)) + _455) < ((_319 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _330 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _331 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _351 = fma(_242, cbSceneParam._m0[5u].z, fma(_241, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _240));
    float _354 = fma(_242, cbSceneParam._m0[6u].z, fma(_241, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _240));
    float _357 = fma(_242, cbSceneParam._m0[7u].z, fma(_241, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _240));
    uint _370 = uint(roundEven(NORMAL.w)) * 13u;
    uint _372 = _370 + 9u;
    uint _373 = _372 + uint(cbMatDynParam._m0[0u].w);
    float _379 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2968 : (isnan(_2968) ? 1.0 : min(_2968, 1.0)))) * cbInstanceData._m0[_373].x;
    float _380 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2979 : (isnan(_2979) ? 1.0 : min(_2979, 1.0)))) * cbInstanceData._m0[_373].y;
    float _381 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2990 : (isnan(_2990) ? 1.0 : min(_2990, 1.0)))) * cbInstanceData._m0[_373].z;
    float _3023 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _382 = isnan(1.0) ? _3023 : (isnan(_3023) ? 1.0 : min(_3023, 1.0));
    float _3034 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _383 = isnan(1.0) ? _3034 : (isnan(_3034) ? 1.0 : min(_3034, 1.0));
    float _3045 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _384 = isnan(1.0) ? _3045 : (isnan(_3045) ? 1.0 : min(_3045, 1.0));
    vec4 _393 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _330, cbSceneParam._m0[86u].y * _331));
    float _396 = _393.x * TEXCOORD_1.w;
    float _397 = dot(vec3(_240, _241, _242), vec3(_310, _311, _312));
    float _400 = _397 * 2.0;
    float _405 = (_400 * _240) - _310;
    float _406 = (_400 * _241) - _311;
    float _407 = (_400 * _242) - _312;
    float _429 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _433 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _437 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _768;
    float _770;
    float _771;
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _493 = fma(_437, cbModelParam._m0[26u].z, fma(_433, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _429));
        float _497 = fma(_437, cbModelParam._m0[27u].z, fma(_433, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _429));
        float _501 = fma(_437, cbModelParam._m0[28u].z, fma(_433, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _429));
        float _526 = _429 + _240;
        float _527 = _433 + _241;
        float _528 = _437 + _242;
        float _538 = fma(_528, cbModelParam._m0[26u].z, fma(_527, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _526)) - _493;
        float _539 = fma(_528, cbModelParam._m0[27u].z, fma(_527, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _526)) - _497;
        float _540 = fma(_528, cbModelParam._m0[28u].z, fma(_527, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _526)) - _501;
        float _544 = inversesqrt(dot(vec3(_538, _539, _540), vec3(_538, _539, _540)));
        float _557 = ((_544 * _538) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_493 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _558 = ((_544 * _539) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_497 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _559 = ((_544 * _540) / cbModelParam._m0[34u].z) + ((((((_501 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _562 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_557, _558, _559), 0.0);
        vec4 _569 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_557, _558, _559), 0.0);
        vec4 _576 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_557, _558, _559), 0.0);
        vec4 _583 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_557, _558, _559), 0.0);
        float _596 = exp2((_562.w + (-0.5)) * 20.0) * 2.0;
        float _597 = _596 * (_562.x + (-0.5));
        float _598 = _596 * (_562.y + (-0.5));
        float _599 = _596 * (_562.z + (-0.5));
        float _606 = exp2((_569.w + (-0.5)) * 20.0) * 2.0;
        float _607 = _606 * (_569.x + (-0.5));
        float _608 = _606 * (_569.y + (-0.5));
        float _609 = _606 * (_569.z + (-0.5));
        float _616 = exp2((_576.w + (-0.5)) * 20.0) * 2.0;
        float _617 = _616 * (_576.x + (-0.5));
        float _618 = _616 * (_576.y + (-0.5));
        float _619 = _616 * (_576.z + (-0.5));
        float _626 = exp2((_583.w + (-0.5)) * 20.0) * 2.0;
        float _627 = _626 * (_583.x + (-0.5));
        float _628 = _626 * (_583.y + (-0.5));
        float _629 = _626 * (_583.z + (-0.5));
        float _630 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
        float _631 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
        float _632 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
        float _633 = _597 * 0.5;
        float _634 = _607 * 0.5;
        float _635 = _617 * 0.5;
        float _636 = dot(vec3(_633, _634, _635), vec3(_633, _634, _635));
        float _641 = (_636 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_636);
        float _650 = (dot(vec3(_240, _241, _242), vec3(_641 * _633, _641 * _634, _641 * _635)) + 1.0) * 0.5;
        float _3071 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
        float _660 = sqrt(((_634 * _634) + (_633 * _633)) + (_635 * _635)) / (_630 + 9.9999997473787516355514526367188e-06);
        float _3082 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        float _661 = isnan(1.0) ? _3082 : (isnan(_3082) ? 1.0 : min(_3082, 1.0));
        float _662 = _661 * 2.0;
        float _666 = (1.0 - _661) / (_661 + 1.0);
        float _3093 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _667 = isnan(1.0) ? _3093 : (isnan(_3093) ? 1.0 : min(_3093, 1.0));
        float _676 = ((((1.0 - _667) * (_662 + 2.0)) * exp2(log2(isnan(1.0) ? _3071 : (isnan(_3071) ? 1.0 : min(_3071, 1.0))) * (_662 + 1.0))) + _667) * _630;
        float _677 = _598 * 0.5;
        float _678 = _608 * 0.5;
        float _679 = _618 * 0.5;
        float _680 = dot(vec3(_677, _678, _679), vec3(_677, _678, _679));
        float _685 = (_680 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_680);
        float _693 = (dot(vec3(_240, _241, _242), vec3(_685 * _677, _685 * _678, _685 * _679)) + 1.0) * 0.5;
        float _3104 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _702 = sqrt(((_678 * _678) + (_677 * _677)) + (_679 * _679)) / (_631 + 9.9999997473787516355514526367188e-06);
        float _3115 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _703 = isnan(1.0) ? _3115 : (isnan(_3115) ? 1.0 : min(_3115, 1.0));
        float _704 = _703 * 2.0;
        float _708 = (1.0 - _703) / (_703 + 1.0);
        float _3126 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _709 = isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0));
        float _718 = ((((1.0 - _709) * (_704 + 2.0)) * exp2(log2(isnan(1.0) ? _3104 : (isnan(_3104) ? 1.0 : min(_3104, 1.0))) * (_704 + 1.0))) + _709) * _631;
        float _719 = _599 * 0.5;
        float _720 = _609 * 0.5;
        float _721 = _619 * 0.5;
        float _722 = dot(vec3(_719, _720, _721), vec3(_719, _720, _721));
        float _727 = (_722 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_722);
        float _735 = (dot(vec3(_240, _241, _242), vec3(_727 * _719, _727 * _720, _727 * _721)) + 1.0) * 0.5;
        float _3137 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _744 = sqrt(((_720 * _720) + (_719 * _719)) + (_721 * _721)) / (_632 + 9.9999997473787516355514526367188e-06);
        float _3148 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0));
        float _746 = _745 * 2.0;
        float _750 = (1.0 - _745) / (_745 + 1.0);
        float _3159 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3159 : (isnan(_3159) ? 1.0 : min(_3159, 1.0));
        float _760 = ((((1.0 - _751) * (_746 + 2.0)) * exp2(log2(isnan(1.0) ? _3137 : (isnan(_3137) ? 1.0 : min(_3137, 1.0))) * (_746 + 1.0))) + _751) * _632;
        _768 = _599;
        _770 = _598;
        _771 = _597;
        _772 = _609;
        _773 = _608;
        _774 = _607;
        _775 = _619;
        _776 = _618;
        _777 = _617;
        _778 = _632;
        _779 = _631;
        _780 = _630;
        _781 = cbModelParam._m0[36u].z * (isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0)));
        _782 = cbModelParam._m0[36u].z * (isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0)));
        _783 = cbModelParam._m0[36u].z * (isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0)));
    }
    else
    {
        _768 = _769;
        _770 = _769;
        _771 = _769;
        _772 = _769;
        _773 = _769;
        _774 = _769;
        _775 = _769;
        _776 = _769;
        _777 = _769;
        _778 = _769;
        _779 = _769;
        _780 = _769;
        _781 = 0.0;
        _782 = 0.0;
        _783 = 0.0;
    }
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _812 = fma(_437, cbModelParam._m0[30u].z, fma(_433, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _429));
        float _816 = fma(_437, cbModelParam._m0[31u].z, fma(_433, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _429));
        float _820 = fma(_437, cbModelParam._m0[32u].z, fma(_433, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _429));
        float _843 = _429 + _240;
        float _844 = _433 + _241;
        float _845 = _437 + _242;
        float _855 = fma(_845, cbModelParam._m0[30u].z, fma(_844, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _843)) - _812;
        float _856 = fma(_845, cbModelParam._m0[31u].z, fma(_844, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _843)) - _816;
        float _857 = fma(_845, cbModelParam._m0[32u].z, fma(_844, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _843)) - _820;
        float _861 = inversesqrt(dot(vec3(_855, _856, _857), vec3(_855, _856, _857)));
        float _874 = ((_861 * _855) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_812 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _875 = ((_861 * _856) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_816 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _876 = ((_861 * _857) / cbModelParam._m0[35u].z) + ((((((_820 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        float _911 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_878.x + (-0.5));
        float _913 = _911 * (_878.y + (-0.5));
        float _914 = _911 * (_878.z + (-0.5));
        float _921 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_885.x + (-0.5));
        float _923 = _921 * (_885.y + (-0.5));
        float _924 = _921 * (_885.z + (-0.5));
        float _931 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_892.x + (-0.5));
        float _933 = _931 * (_892.y + (-0.5));
        float _934 = _931 * (_892.z + (-0.5));
        float _941 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_899.x + (-0.5));
        float _943 = _941 * (_899.y + (-0.5));
        float _944 = _941 * (_899.z + (-0.5));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = _912 * 0.5;
        float _949 = _922 * 0.5;
        float _950 = _932 * 0.5;
        float _951 = dot(vec3(_948, _949, _950), vec3(_948, _949, _950));
        float _956 = (_951 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_951);
        float _964 = (dot(vec3(_240, _241, _242), vec3(_956 * _948, _956 * _949, _956 * _950)) + 1.0) * 0.5;
        float _3200 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _973 = sqrt(((_949 * _949) + (_948 * _948)) + (_950 * _950)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _3211 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3222 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3200 : (isnan(_3200) ? 1.0 : min(_3200, 1.0))) * (_975 + 1.0))) + _980) * _945;
        float _990 = _913 * 0.5;
        float _991 = _923 * 0.5;
        float _992 = _933 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1006 = (dot(vec3(_240, _241, _242), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3233 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1015 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_946 + 9.9999997473787516355514526367188e-06);
        float _3244 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3255 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0))) * (_1017 + 1.0))) + _1022) * _946;
        float _1032 = _914 * 0.5;
        float _1033 = _924 * 0.5;
        float _1034 = _934 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_240, _241, _242), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3266 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _3277 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3288 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0))) * (_1059 + 1.0))) + _1064) * _947;
        _1081 = _914;
        _1082 = _913;
        _1083 = _912;
        _1084 = _924;
        _1085 = _923;
        _1086 = _922;
        _1087 = _934;
        _1088 = _933;
        _1089 = _932;
        _1090 = _947;
        _1091 = _946;
        _1092 = _945;
        _1093 = cbModelParam._m0[36u].w * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
        _1094 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
        _1095 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
    }
    else
    {
        _1081 = _769;
        _1082 = _769;
        _1083 = _769;
        _1084 = _769;
        _1085 = _769;
        _1086 = _769;
        _1087 = _769;
        _1088 = _769;
        _1089 = _769;
        _1090 = _769;
        _1091 = _769;
        _1092 = _769;
        _1093 = 0.0;
        _1094 = 0.0;
        _1095 = 0.0;
    }
    float _1105 = (cbModelParam._m0[1u].x * (_1093 - _781)) + _781;
    float _1106 = (cbModelParam._m0[1u].x * (_1094 - _782)) + _782;
    float _1107 = (cbModelParam._m0[1u].x * (_1095 - _783)) + _783;
    float _1128 = fma(_1107, cbSceneParam._m0[89u].z, fma(_1106, cbSceneParam._m0[89u].y, _1105 * cbSceneParam._m0[89u].x));
    float _1131 = fma(_1107, cbSceneParam._m0[90u].z, fma(_1106, cbSceneParam._m0[90u].y, _1105 * cbSceneParam._m0[90u].x));
    float _1134 = fma(_1107, cbSceneParam._m0[91u].z, fma(_1106, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1105));
    float _1149 = _405 * 0.5;
    float _1150 = _406 * 0.5;
    float _1151 = _407 * 0.5;
    float _1152 = dot(vec4(_1149, _1150, _1151, 1.0), vec4(_1083, _1086, _1089, _1092));
    float _1155 = dot(vec4(_1149, _1150, _1151, 1.0), vec4(_1082, _1085, _1088, _1091));
    float _1158 = dot(vec4(_1149, _1150, _1151, 1.0), vec4(_1081, _1084, _1087, _1090));
    float _1192;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1165 = dot(vec4(_1149, _1150, _1151, 1.0), vec4(_768, _772, _775, _778));
        float _1169 = dot(vec4(_1149, _1150, _1151, 1.0), vec4(_770, _773, _776, _779));
        float _1173 = dot(vec4(_1149, _1150, _1151, 1.0), vec4(_771, _774, _777, _780));
        float _1180 = dot(vec4(cbModelParam._m0[39u]), vec4(_1149, _1150, _1151, 1.0));
        _1192 = dot(vec3(isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)), isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)), isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1180) ? 0.0 : (isnan(0.0) ? _1180 : max(0.0, _1180))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1192 = 1.0;
    }
    float _1203;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1194 = dot(vec4(cbModelParam._m0[40u]), vec4(_1149, _1150, _1151, 1.0));
        _1203 = dot(vec3(isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)), isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)), isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1194) ? 0.0 : (isnan(0.0) ? _1194 : max(0.0, _1194))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1203 = 1.0;
    }
    float _1207 = (_1203 * cbModelParam._m0[1u].x) + (_1192 * (1.0 - cbModelParam._m0[1u].x));
    float _1216 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1298;
    float _1300;
    float _1302;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1265 = fma(_437, cbModelParam._m0[13u].z, fma(_433, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _429)) + cbModelParam._m0[13u].w;
        float _1269 = fma(_437, cbModelParam._m0[14u].z, fma(_433, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _429)) + cbModelParam._m0[14u].w;
        float _1273 = fma(_437, cbModelParam._m0[15u].z, fma(_433, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _429)) + cbModelParam._m0[15u].w;
        float _1276 = fma(_407, cbModelParam._m0[13u].z, fma(_406, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _405));
        float _1279 = fma(_407, cbModelParam._m0[14u].z, fma(_406, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _405));
        float _1282 = fma(_407, cbModelParam._m0[15u].z, fma(_406, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _405));
        float _1308;
        if (_1276 > 0.0)
        {
            _1308 = abs((1.0 - _1265) / _1276);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1276 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1265 + 1.0) / _1276);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1308 = frontier_phi_17_15_ladder;
        }
        float _1515;
        if (_1279 > 0.0)
        {
            _1515 = abs((1.0 - _1269) / _1279);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1279 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1269 + 1.0) / _1279);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1515 = frontier_phi_26_22_ladder;
        }
        float _1704;
        if (_1282 > 0.0)
        {
            _1704 = abs((1.0 - _1273) / _1282);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1282 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1273 + 1.0) / _1282);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1704 = frontier_phi_38_33_ladder;
        }
        float _1706 = isnan(_1515) ? _1308 : (isnan(_1308) ? _1515 : min(_1308, _1515));
        float _1707 = isnan(_1704) ? _1706 : (isnan(_1706) ? _1704 : min(_1706, _1704));
        float _1711 = (_1707 * _1276) + _1265;
        float _1712 = (_1707 * _1279) + _1269;
        float _1713 = (_1707 * _1282) + _1273;
        float _1714 = _1707 * 9.9999997473787516355514526367188e-05;
        float _1716 = (-1.0) - _1714;
        float _1718 = _1714 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1713 > _1718) || ((_1713 < _1716) || ((_1712 > _1718) || ((_1712 < _1716) || ((_1711 < _1716) || (_1711 > _1718))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1810 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1713, cbModelParam._m0[9u].z, fma(_1712, cbModelParam._m0[9u].y, _1711 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1713, cbModelParam._m0[10u].z, fma(_1712, cbModelParam._m0[10u].y, _1711 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1713, cbModelParam._m0[11u].z, fma(_1712, cbModelParam._m0[11u].y, _1711 * cbModelParam._m0[11u].x))), _1216);
            frontier_phi_16_38_ladder = _1810.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1810.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1810.x * cbModelParam._m0[1u].y;
        }
        _1298 = frontier_phi_16_38_ladder_2;
        _1300 = frontier_phi_16_38_ladder_1;
        _1302 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1286 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_405, _406, _407), _1216);
        _1298 = _1286.x * cbModelParam._m0[1u].y;
        _1300 = _1286.y * cbModelParam._m0[1u].y;
        _1302 = _1286.z * cbModelParam._m0[1u].y;
    }
    float _1305 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1398;
    float _1400;
    float _1402;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1362 = fma(_437, cbModelParam._m0[21u].z, fma(_433, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _429)) + cbModelParam._m0[21u].w;
        float _1366 = fma(_437, cbModelParam._m0[22u].z, fma(_433, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _429)) + cbModelParam._m0[22u].w;
        float _1370 = fma(_437, cbModelParam._m0[23u].z, fma(_433, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _429)) + cbModelParam._m0[23u].w;
        float _1373 = fma(_407, cbModelParam._m0[21u].z, fma(_406, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _405));
        float _1376 = fma(_407, cbModelParam._m0[22u].z, fma(_406, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _405));
        float _1379 = fma(_407, cbModelParam._m0[23u].z, fma(_406, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _405));
        float _1520;
        if (_1373 > 0.0)
        {
            _1520 = abs((1.0 - _1362) / _1373);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1373 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1362 + 1.0) / _1373);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1520 = frontier_phi_28_24_ladder;
        }
        float _1731;
        if (_1376 > 0.0)
        {
            _1731 = abs((1.0 - _1366) / _1376);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1376 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1366 + 1.0) / _1376);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1731 = frontier_phi_40_35_ladder;
        }
        float _1882;
        if (_1379 > 0.0)
        {
            _1882 = abs((1.0 - _1370) / _1379);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1379 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1370 + 1.0) / _1379);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1882 = frontier_phi_49_46_ladder;
        }
        float _1884 = isnan(_1731) ? _1520 : (isnan(_1520) ? _1731 : min(_1520, _1731));
        float _1885 = isnan(_1882) ? _1884 : (isnan(_1884) ? _1882 : min(_1884, _1882));
        float _1889 = (_1885 * _1373) + _1362;
        float _1890 = (_1885 * _1376) + _1366;
        float _1891 = (_1885 * _1379) + _1370;
        float _1892 = _1885 * 9.9999997473787516355514526367188e-05;
        float _1893 = (-1.0) - _1892;
        float _1895 = _1892 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1891 > _1895) || ((_1891 < _1893) || ((_1890 > _1895) || ((_1890 < _1893) || ((_1889 < _1893) || (_1889 > _1895))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2092 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1891, cbModelParam._m0[17u].z, fma(_1890, cbModelParam._m0[17u].y, _1889 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1891, cbModelParam._m0[18u].z, fma(_1890, cbModelParam._m0[18u].y, _1889 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1891, cbModelParam._m0[19u].z, fma(_1890, cbModelParam._m0[19u].y, _1889 * cbModelParam._m0[19u].x))), _1305);
            frontier_phi_25_49_ladder = _2092.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2092.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2092.x * cbModelParam._m0[1u].z;
        }
        _1398 = frontier_phi_25_49_ladder_2;
        _1400 = frontier_phi_25_49_ladder_1;
        _1402 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1382 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_405, _406, _407), _1305);
        _1398 = _1382.x * cbModelParam._m0[1u].z;
        _1400 = _1382.y * cbModelParam._m0[1u].z;
        _1402 = _1382.z * cbModelParam._m0[1u].z;
    }
    float _1414 = _396 * 0.01200000010430812835693359375;
    float _1416 = _1414 * ((cbModelParam._m0[1u].w * (_1398 - _1298)) + _1298);
    float _1417 = _1414 * ((cbModelParam._m0[1u].w * (_1400 - _1300)) + _1300);
    float _1418 = _1414 * ((cbModelParam._m0[1u].w * (_1402 - _1302)) + _1302);
    float _1421 = fma(_1418, cbSceneParam._m0[89u].z, fma(_1417, cbSceneParam._m0[89u].y, _1416 * cbSceneParam._m0[89u].x));
    float _1424 = fma(_1418, cbSceneParam._m0[90u].z, fma(_1417, cbSceneParam._m0[90u].y, _1416 * cbSceneParam._m0[90u].x));
    float _1427 = fma(_1418, cbSceneParam._m0[91u].z, fma(_1417, cbSceneParam._m0[91u].y, _1416 * cbSceneParam._m0[91u].x));
    uvec4 _1437 = floatBitsToUint(cbInstanceData._m0[_370 + 5u]);
    uint _1439 = _1437.x * 14u;
    uint _1440 = _1439 + 13u;
    float _1447 = _396 + (-1.0);
    float _1453 = (cbLight._m0[_1440].x * _1447) + 1.0;
    float _1454 = (cbLight._m0[_1440].y * _1447) + 1.0;
    float _1455 = (cbLight._m0[_1440].z * _1447) + 1.0;
    float _1456 = (cbLight._m0[_1440].w * _1447) + 1.0;
    uint _1457 = _1439 + 5u;
    float _1463 = isnan(1.0) ? _1454 : (isnan(_1454) ? 1.0 : min(_1454, 1.0));
    uint _1467 = _1439 + 4u;
    float _1474 = isnan(1.0) ? _1453 : (isnan(_1453) ? 1.0 : min(_1453, 1.0));
    uint _1478 = _1439 | 1u;
    float _1489 = dot(vec3(cbLight._m0[_1439].xyz), vec3(_240, _241, _242));
    float _1492 = dot(vec3(cbLight._m0[_1478].xyz), vec3(_240, _241, _242));
    float _3424 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
    float _3435 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
    float _1497 = (isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0))) * 0.3183098733425140380859375;
    float _1499 = (isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0))) * 0.3183098733425140380859375;
    float _1506 = ((cbLight._m0[_1457].x * _1463) * _1499) + ((cbLight._m0[_1467].x * _1474) * _1497);
    float _1507 = ((_1463 * cbLight._m0[_1457].y) * _1499) + ((_1474 * cbLight._m0[_1467].y) * _1497);
    float _1508 = ((_1463 * cbLight._m0[_1457].z) * _1499) + ((_1474 * cbLight._m0[_1467].z) * _1497);
    uvec4 _1512 = floatBitsToUint(cbLight._m0[_1439 + 12u]);
    bool _1514 = _1512.x == 0u;
    float _1525;
    float _1527;
    float _1529;
    if (_1514)
    {
        _1525 = _1506;
        _1527 = _1507;
        _1529 = _1508;
    }
    else
    {
        uint _1533 = _1439 + 6u;
        float _1549 = (dot(vec3(cbLight._m0[_1439 + 2u].xyz), vec3(_240, _241, _242)) * 0.5) + 0.5;
        float _1550 = _1549 * _1549;
        float _3446 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
        float _1552 = isnan(1.0) ? _1455 : (isnan(_1455) ? 1.0 : min(_1455, 1.0));
        _1525 = (((cbLight._m0[_1533].x * 0.3183098733425140380859375) * _1551) * _1552) + _1506;
        _1527 = (((cbLight._m0[_1533].y * 0.3183098733425140380859375) * _1551) * _1552) + _1507;
        _1529 = (((cbLight._m0[_1533].z * 0.3183098733425140380859375) * _1551) * _1552) + _1508;
    }
    bool _1532 = _1512.y == 0u;
    float _1570;
    float _1572;
    float _1574;
    if (_1532)
    {
        _1570 = _1525;
        _1572 = _1527;
        _1574 = _1529;
    }
    else
    {
        uint _1675 = _1439 + 7u;
        float _1691 = (dot(vec3(cbLight._m0[_1439 + 3u].xyz), vec3(_240, _241, _242)) * 0.5) + 0.5;
        float _1692 = _1691 * _1691;
        float _3462 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _1694 = isnan(1.0) ? _1456 : (isnan(_1456) ? 1.0 : min(_1456, 1.0));
        _1570 = (((cbLight._m0[_1675].x * 0.3183098733425140380859375) * _1693) * _1694) + _1525;
        _1572 = (((cbLight._m0[_1675].y * 0.3183098733425140380859375) * _1693) * _1694) + _1527;
        _1574 = (((cbLight._m0[_1675].z * 0.3183098733425140380859375) * _1693) * _1694) + _1529;
    }
    uint _1576 = _1439 + 8u;
    float _1582 = cbLight._m0[_1439].x + _310;
    float _1583 = cbLight._m0[_1439].y + _311;
    float _1584 = cbLight._m0[_1439].z + _312;
    float _1588 = inversesqrt(dot(vec3(_1582, _1583, _1584), vec3(_1582, _1583, _1584)));
    float _1592 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_1439].xyz));
    float _3478 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
    float _1595 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
    float _3489 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _1596 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    float _1597 = dot(vec3(cbLight._m0[_1439].xyz), vec3(_1582 * _1588, _1583 * _1588, _1584 * _1588));
    float _3500 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
    float _1608 = (exp2(log2(1.0 - (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1614 = (0.5 / ((_1595 + 9.9999999392252902907785028219223e-09) + _1596)) * _1595;
    float _3511 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
    float _1616 = (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * 0.31831014156341552734375;
    uint _1627 = _1439 + 9u;
    float _1633 = cbLight._m0[_1478].x + _310;
    float _1634 = cbLight._m0[_1478].y + _311;
    float _1635 = cbLight._m0[_1478].z + _312;
    float _1639 = inversesqrt(dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635)));
    float _1643 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_1478].xyz));
    float _3522 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
    float _1646 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _1647 = dot(vec3(cbLight._m0[_1478].xyz), vec3(_1633 * _1639, _1634 * _1639, _1635 * _1639));
    float _3533 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
    float _1656 = (exp2(log2(1.0 - (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1660 = (0.5 / ((_1646 + 9.9999999392252902907785028219223e-09) + _1596)) * _1646;
    float _3544 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
    float _1662 = (isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * 0.31831014156341552734375;
    float _1672 = (((_1656 * cbLight._m0[_1627].x) * _1662) * _1463) + (((_1608 * cbLight._m0[_1576].x) * _1616) * _1474);
    float _1673 = (((_1656 * cbLight._m0[_1627].y) * _1662) * _1463) + (((_1608 * cbLight._m0[_1576].y) * _1616) * _1474);
    float _1674 = (((_1656 * cbLight._m0[_1627].z) * _1662) * _1463) + (((_1608 * cbLight._m0[_1576].z) * _1616) * _1474);
    float _1736;
    float _1738;
    float _1740;
    if (_1514)
    {
        _1736 = _1672;
        _1738 = _1673;
        _1740 = _1674;
    }
    else
    {
        uint _1742 = _1439 + 10u;
        uint _1748 = _1439 + 2u;
        float _1754 = cbLight._m0[_1748].x + _310;
        float _1755 = cbLight._m0[_1748].y + _311;
        float _1756 = cbLight._m0[_1748].z + _312;
        float _1760 = inversesqrt(dot(vec3(_1754, _1755, _1756), vec3(_1754, _1755, _1756)));
        float _1764 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_1748].xyz));
        float _3555 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1767 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _1768 = dot(vec3(cbLight._m0[_1748].xyz), vec3(_1754 * _1760, _1755 * _1760, _1756 * _1760));
        float _3566 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1777 = (exp2(log2(1.0 - (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1781 = (0.5 / ((_1767 + 9.9999999392252902907785028219223e-09) + _1596)) * _1767;
        float _3577 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1783 = (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * 0.31831014156341552734375;
        float _1784 = isnan(1.0) ? _1455 : (isnan(_1455) ? 1.0 : min(_1455, 1.0));
        _1736 = (((_1777 * cbLight._m0[_1742].x) * _1783) * _1784) + _1672;
        _1738 = (((_1777 * cbLight._m0[_1742].y) * _1783) * _1784) + _1673;
        _1740 = (((_1777 * cbLight._m0[_1742].z) * _1783) * _1784) + _1674;
    }
    float _1819;
    float _1821;
    float _1823;
    if (_1532)
    {
        _1819 = _1736;
        _1821 = _1738;
        _1823 = _1740;
    }
    else
    {
        uint _1830 = _1439 + 11u;
        uint _1836 = _1439 + 3u;
        float _1842 = cbLight._m0[_1836].x + _310;
        float _1843 = cbLight._m0[_1836].y + _311;
        float _1844 = cbLight._m0[_1836].z + _312;
        float _1848 = inversesqrt(dot(vec3(_1842, _1843, _1844), vec3(_1842, _1843, _1844)));
        float _1852 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_1836].xyz));
        float _3593 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1855 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1856 = dot(vec3(cbLight._m0[_1836].xyz), vec3(_1842 * _1848, _1843 * _1848, _1844 * _1848));
        float _3604 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1865 = (exp2(log2(1.0 - (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1869 = (0.5 / ((_1855 + 9.9999999392252902907785028219223e-09) + _1596)) * _1855;
        float _3615 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1871 = (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))) * 0.31831014156341552734375;
        float _1872 = isnan(1.0) ? _1456 : (isnan(_1456) ? 1.0 : min(_1456, 1.0));
        _1819 = (((_1865 * cbLight._m0[_1830].x) * _1871) * _1872) + _1736;
        _1821 = (((_1865 * cbLight._m0[_1830].y) * _1871) * _1872) + _1738;
        _1823 = (((_1865 * cbLight._m0[_1830].z) * _1871) * _1872) + _1740;
    }
    float _2007;
    float _2009;
    float _2011;
    float _2013;
    float _2015;
    float _2017;
    if (_1437.y == 0u)
    {
        float _1947 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1948 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1947;
        float _1949 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1947;
        float _1950 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1947;
        uvec4 _1962 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1963 = _1962.x;
        uint _1974 = uint((float(_1962.y) * floor(float(uint(cbSceneParam._m0[85u].y * _331) / _1963))) + floor(float(uint(cbSceneParam._m0[85u].x * _330) / _1963)));
        float _1984 = (log2(_1950 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1985 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        uint _1988 = uint(isnan(14.0) ? _1985 : (isnan(_1985) ? 14.0 : min(_1985, 14.0)));
        uvec4 _1993 = texelFetch(g_lightClusterGridBuffer, int(((_1988 << 2u) + (_1974 << 6u)) >> 2u));
        uint _1994 = _1993.x;
        uint _1995 = _1962.z;
        float _2097;
        float _2099;
        float _2101;
        float _2103;
        float _2105;
        float _2107;
        if (((((1u << ((_1995 >> 4u) & 15u)) + 4294967295u) & _1994) == 0u) || ((_1995 & 240u) == 0u))
        {
            _2097 = 0.0;
            _2099 = 0.0;
            _2101 = 0.0;
            _2103 = 0.0;
            _2105 = 0.0;
            _2107 = 0.0;
        }
        else
        {
            float _2098;
            float _2100;
            float _2102;
            float _2104;
            float _2106;
            float _2108;
            float _2248 = 0.0;
            float _2249 = 0.0;
            float _2250 = 0.0;
            float _2251 = 0.0;
            float _2252 = 0.0;
            float _2253 = 0.0;
            uint _2254 = 0u;
            uint _2263;
            bool _2264;
            for (;;)
            {
                _2263 = texelFetch(g_lightClassification, int((((_1988 << 5u) + (_1974 << 9u)) + (_2254 << 2u)) >> 2u)).x;
                _2264 = _2263 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2264)
                {
                    frontier_phi_66_pred = _2248;
                    frontier_phi_66_pred_1 = _2253;
                    frontier_phi_66_pred_2 = _2252;
                    frontier_phi_66_pred_3 = _2251;
                    frontier_phi_66_pred_4 = _2250;
                    frontier_phi_66_pred_5 = _2249;
                }
                else
                {
                    float _2393;
                    float _2394;
                    float _2395;
                    float _2396;
                    float _2397;
                    float _2398;
                    uint _2399;
                    _2393 = _2248;
                    _2394 = _2249;
                    _2395 = _2250;
                    _2396 = _2251;
                    _2397 = _2252;
                    _2398 = _2253;
                    _2399 = _2263;
                    float _2320;
                    float _2321;
                    float _2322;
                    float _2323;
                    float _2324;
                    float _2325;
                    for (;;)
                    {
                        uint _2403 = uint(findLSB(_2399)) + (_2254 << 5u);
                        uint _2400 = (_2399 + 4294967295u) & _2399;
                        uint _2405 = _2403 * 48u;
                        vec4 _2419 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2405)).x, texelFetch(g_PointLightRenderingBuffer, int(_2405 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2405 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2405 + 3u)).x));
                        uint _2425 = (_2403 * 48u) + 4u;
                        vec4 _2438 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2425)).x, texelFetch(g_PointLightRenderingBuffer, int(_2425 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2425 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2425 + 3u)).x));
                        uint _2444 = (_2403 * 48u) + 8u;
                        vec3 _2455 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2444)).x, texelFetch(g_PointLightRenderingBuffer, int(_2444 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2444 + 2u)).x));
                        float _2459 = _2419.x - _1948;
                        float _2460 = _2419.y - _1949;
                        float _2461 = _2419.z - _1950;
                        float _2462 = dot(vec3(_2459, _2460, _2461), vec3(_2459, _2460, _2461));
                        float _2465 = inversesqrt(_2462);
                        float _2474 = 1.0 - (_2462 * _2419.w);
                        float _3641 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
                        float _2475 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
                        float _2476 = sqrt(_2462) * _2438.w;
                        float _2479 = 1.39999997615814208984375 / (_2476 + 1.39999997615814208984375);
                        float _2480 = _2479 * _2479;
                        float _2483 = ((1.0 - _2480) * dot(vec3(_351, _354, _357), vec3(_2465 * _2459, _2465 * _2460, _2465 * _2461))) + _2480;
                        float _2486 = _2476 * _2476;
                        float _2490 = ((isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0))) * _2475) / ((_2486 * 0.699999988079071044921875) + 1.0);
                        float _2494 = (-0.0) - _1948;
                        float _2495 = (-0.0) - _1949;
                        float _2496 = (-0.0) - _1950;
                        float _2500 = inversesqrt(dot(vec3(_2494, _2495, _2496), vec3(_2494, _2495, _2496)));
                        float _2504 = dot(vec3(_351, _354, _357), vec3(_2500 * _2494, _2500 * _2495, _2500 * _2496));
                        float _3657 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
                        float _3668 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
                        float _2508 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
                        float _2512 = (0.5 / (((isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) + 9.9999999392252902907785028219223e-09) + _2508)) * _2508;
                        float _3679 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
                        float _2521 = (((isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * 3.1415927410125732421875) / ((_2486 * 2.1991131305694580078125) + 3.141590118408203125)) * _2475;
                        _2323 = (_2490 * _2438.x) + _2396;
                        _2324 = (_2490 * _2438.y) + _2397;
                        _2325 = (_2490 * _2438.z) + _2398;
                        _2320 = (_2521 * _2455.x) + _2393;
                        _2321 = (_2521 * _2455.y) + _2394;
                        _2322 = (_2521 * _2455.z) + _2395;
                        if (_2400 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2393 = _2320;
                            _2394 = _2321;
                            _2395 = _2322;
                            _2396 = _2323;
                            _2397 = _2324;
                            _2398 = _2325;
                            _2399 = _2400;
                        }
                    }
                    frontier_phi_66_pred = _2320;
                    frontier_phi_66_pred_1 = _2325;
                    frontier_phi_66_pred_2 = _2324;
                    frontier_phi_66_pred_3 = _2323;
                    frontier_phi_66_pred_4 = _2322;
                    frontier_phi_66_pred_5 = _2321;
                }
                _2098 = frontier_phi_66_pred;
                _2108 = frontier_phi_66_pred_1;
                _2106 = frontier_phi_66_pred_2;
                _2104 = frontier_phi_66_pred_3;
                _2102 = frontier_phi_66_pred_4;
                _2100 = frontier_phi_66_pred_5;
                uint _2255 = _2254 + 1u;
                if (_2255 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2248 = _2098;
                    _2249 = _2100;
                    _2250 = _2102;
                    _2251 = _2104;
                    _2252 = _2106;
                    _2253 = _2108;
                    _2254 = _2255;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2097 = _2098;
            _2099 = _2100;
            _2101 = _2102;
            _2103 = _2104;
            _2105 = _2106;
            _2107 = _2108;
        }
        uvec4 _2111 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2112 = _2111.z;
        uint _2114 = (_2112 >> 8u) & 15u;
        float _2219;
        float _2221;
        float _2223;
        float _2225;
        float _2227;
        float _2229;
        if (((4294967295u << _2114) & _1994) == 0u)
        {
            _2219 = _2097;
            _2221 = _2099;
            _2223 = _2101;
            _2225 = _2103;
            _2227 = _2105;
            _2229 = _2107;
        }
        else
        {
            float _2244 = inversesqrt(dot(vec3(_1948, _1949, _1950), vec3(_1948, _1949, _1950)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2114 < ((_2112 >> 12u) & 15u))
            {
                float _2220;
                float _2222;
                float _2224;
                float _2226;
                float _2228;
                float _2230;
                float _2376 = _2097;
                float _2377 = _2099;
                float _2378 = _2101;
                float _2379 = _2103;
                float _2380 = _2105;
                float _2381 = _2107;
                uint _2382 = _2114;
                uint _2391;
                bool _2392;
                for (;;)
                {
                    _2391 = texelFetch(g_lightClassification, int((((_1988 << 5u) + (_1974 << 9u)) + (_2382 << 2u)) >> 2u)).x;
                    _2392 = _2391 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2392)
                    {
                        frontier_phi_77_pred = _2381;
                        frontier_phi_77_pred_1 = _2380;
                        frontier_phi_77_pred_2 = _2379;
                        frontier_phi_77_pred_3 = _2378;
                        frontier_phi_77_pred_4 = _2377;
                        frontier_phi_77_pred_5 = _2376;
                    }
                    else
                    {
                        float _2535;
                        float _2536;
                        float _2537;
                        float _2538;
                        float _2539;
                        float _2540;
                        float _2787;
                        float _2788;
                        float _2789;
                        float _2790;
                        float _2791;
                        float _2792;
                        float _2548 = _2376;
                        float _2549 = _2377;
                        float _2550 = _2378;
                        float _2551 = _2379;
                        float _2552 = _2380;
                        float _2553 = _2381;
                        uint _2554 = _2391;
                        uint _2555;
                        vec4 _2580;
                        float _2581;
                        vec4 _2596;
                        vec3 _2608;
                        vec4 _2624;
                        vec4 _2640;
                        float _2687;
                        bool _2688;
                        for (;;)
                        {
                            uint _2565 = ((_2382 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2554));
                            _2555 = (_2554 + 4294967295u) & _2554;
                            uint _2567 = _2565 * 40u;
                            _2580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2567 + 3u)).x));
                            _2581 = _2580.w;
                            uint _2583 = (_2565 * 40u) + 4u;
                            _2596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2583 + 3u)).x));
                            uint _2598 = (_2565 * 40u) + 8u;
                            _2608 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2598 + 2u)).x));
                            uint _2611 = (_2565 * 40u) + 16u;
                            _2624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 3u)).x));
                            uint _2627 = (_2565 * 40u) + 20u;
                            _2640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2627 + 3u)).x));
                            uint _2643 = (_2565 * 40u) + 24u;
                            vec4 _2656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2643 + 3u)).x));
                            uint _2662 = (_2565 * 40u) + 28u;
                            vec4 _2675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2662 + 3u)).x));
                            _2687 = fma(_1950, _2675.z, fma(_1949, _2675.y, _2675.x * _1948)) + _2675.w;
                            _2688 = !((fma(_1950, _2656.z, fma(_1949, _2656.y, _2656.x * _1948)) + _2656.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2688)
                            {
                                float _2715 = _2580.x - _1948;
                                float _2716 = _2580.y - _1949;
                                float _2717 = _2580.z - _1950;
                                float _2718 = dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717));
                                float _2721 = inversesqrt(_2718);
                                float _2722 = _2721 * _2715;
                                float _2723 = _2721 * _2716;
                                float _2724 = _2721 * _2717;
                                float _2728 = 1.0 - (_2718 / (_2581 * _2581));
                                float _3690 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
                                float _2729 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
                                float _2733 = sqrt(_2718) * _2596.w;
                                float _2735 = 1.39999997615814208984375 / (_2733 + 1.39999997615814208984375);
                                float _2736 = _2735 * _2735;
                                float _2737 = 1.0 - _2736;
                                float _2739 = (_2737 * dot(vec3(_2722, _2723, _2724), vec3(_351, _354, _357))) + _2736;
                                float _2742 = _2733 * _2733;
                                float _2746 = (fma(_1950, _2624.z, fma(_1949, _2624.y, _2624.x * _1948)) + _2624.w) / _2687;
                                float _2747 = (fma(_1950, _2640.z, fma(_1949, _2640.y, _2640.x * _1948)) + _2640.w) / _2687;
                                float _2751 = 1.0 - dot(vec2(_2746, _2747), vec2(_2746, _2747));
                                float _3706 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                                float _2752 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
                                float _2753 = _2752 * (((isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0))) * _2729) / ((_2742 * 0.699999988079071044921875) + 1.0));
                                float _2763 = dot(vec3(_351, _354, _357), vec3((-0.0) - (_1948 * _2244), (-0.0) - (_1949 * _2244), (-0.0) - (_1950 * _2244)));
                                float _3717 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
                                float _2771 = (_2737 * dot(vec3(_351, _354, _357), vec3(_2722, _2723, _2724))) + _2736;
                                float _3728 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
                                float _2772 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
                                float _2776 = (0.5 / (((isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) + 9.9999999392252902907785028219223e-09) + _2772)) * _2772;
                                float _3739 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
                                float _2783 = (_2752 * _2729) * (((isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * 3.1415927410125732421875) / ((_2742 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2753 * _2596.y;
                                frontier_phi_83_pred_1 = _2753 * _2596.x;
                                frontier_phi_83_pred_2 = _2783 * _2608.z;
                                frontier_phi_83_pred_3 = _2783 * _2608.y;
                                frontier_phi_83_pred_4 = _2783 * _2608.x;
                                frontier_phi_83_pred_5 = _2753 * _2596.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2791 = frontier_phi_83_pred;
                            _2790 = frontier_phi_83_pred_1;
                            _2789 = frontier_phi_83_pred_2;
                            _2788 = frontier_phi_83_pred_3;
                            _2787 = frontier_phi_83_pred_4;
                            _2792 = frontier_phi_83_pred_5;
                            _2538 = _2790 + _2551;
                            _2539 = _2791 + _2552;
                            _2540 = _2792 + _2553;
                            _2535 = _2787 + _2548;
                            _2536 = _2788 + _2549;
                            _2537 = _2789 + _2550;
                            if (_2555 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2548 = _2535;
                                _2549 = _2536;
                                _2550 = _2537;
                                _2551 = _2538;
                                _2552 = _2539;
                                _2553 = _2540;
                                _2554 = _2555;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2540;
                        frontier_phi_77_pred_1 = _2539;
                        frontier_phi_77_pred_2 = _2538;
                        frontier_phi_77_pred_3 = _2537;
                        frontier_phi_77_pred_4 = _2536;
                        frontier_phi_77_pred_5 = _2535;
                    }
                    _2230 = frontier_phi_77_pred;
                    _2228 = frontier_phi_77_pred_1;
                    _2226 = frontier_phi_77_pred_2;
                    _2224 = frontier_phi_77_pred_3;
                    _2222 = frontier_phi_77_pred_4;
                    _2220 = frontier_phi_77_pred_5;
                    uint _2383 = _2382 + 1u;
                    if (_2383 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2376 = _2220;
                        _2377 = _2222;
                        _2378 = _2224;
                        _2379 = _2226;
                        _2380 = _2228;
                        _2381 = _2230;
                        _2382 = _2383;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2224;
                frontier_phi_58_59_ladder_1 = _2230;
                frontier_phi_58_59_ladder_2 = _2228;
                frontier_phi_58_59_ladder_3 = _2226;
                frontier_phi_58_59_ladder_4 = _2222;
                frontier_phi_58_59_ladder_5 = _2220;
            }
            else
            {
                frontier_phi_58_59_ladder = _2101;
                frontier_phi_58_59_ladder_1 = _2107;
                frontier_phi_58_59_ladder_2 = _2105;
                frontier_phi_58_59_ladder_3 = _2103;
                frontier_phi_58_59_ladder_4 = _2099;
                frontier_phi_58_59_ladder_5 = _2097;
            }
            _2219 = frontier_phi_58_59_ladder_5;
            _2221 = frontier_phi_58_59_ladder_4;
            _2223 = frontier_phi_58_59_ladder;
            _2225 = frontier_phi_58_59_ladder_3;
            _2227 = frontier_phi_58_59_ladder_2;
            _2229 = frontier_phi_58_59_ladder_1;
        }
        float _2234 = isnan(1.0) ? _396 : (isnan(_396) ? 1.0 : min(_396, 1.0));
        _2007 = (_2234 * _2225) + _1570;
        _2009 = (_2234 * _2227) + _1572;
        _2011 = (_2234 * _2229) + _1574;
        _2013 = ((_2219 * 0.039999999105930328369140625) * _2234) + _1819;
        _2015 = ((_2221 * 0.039999999105930328369140625) * _2234) + _1821;
        _2017 = ((_2223 * 0.039999999105930328369140625) * _2234) + _1823;
    }
    else
    {
        _2007 = _1570;
        _2009 = _1572;
        _2011 = _1574;
        _2013 = _1819;
        _2015 = _1821;
        _2017 = _1823;
    }
    float _3755 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _3766 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _3777 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _3788 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _2035 = ((isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_2007 + ((isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0))) * _396))) + ((_2013 + ((isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))) * _1207)) * cbPerFrame._m0[3u].x);
    float _2036 = ((isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_2009 + ((isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0))) * _396))) + ((_2015 + ((isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))) * _1207)) * cbPerFrame._m0[3u].x);
    float _2037 = ((isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_2011 + ((isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0))) * _396))) + ((_2017 + ((isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))) * _1207)) * cbPerFrame._m0[3u].x);
    float _2042 = cbInstanceData._m0[_370 + 6u].w * (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0)));
    float _2047 = _330 / cbSceneParam._m0[86u].x;
    float _2048 = _331 / cbSceneParam._m0[86u].y;
    vec4 _2062 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2047, _2048, (log2((isnan(cbSceneParam._m0[77u].w) ? _251 : (isnan(_251) ? cbSceneParam._m0[77u].w : min(_251, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2064 = _2062.x;
    float _2065 = _2062.y;
    float _2066 = _2062.z;
    float _2067 = _2062.w;
    float _2159;
    float _2161;
    float _2163;
    float _2165;
    if (_251 > cbSceneParam._m0[78u].w)
    {
        float _2122 = isnan(_251) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _251 : min(cbSceneParam._m0[80u].w, _251));
        float _2123 = _2122 / _251;
        float _2134 = _2123 * _303;
        float _2135 = _304 * _2123;
        float _2136 = (-0.0) - _2135;
        float _2137 = _2123 * _305;
        float _2139 = (cbSceneParam._m0[77u].w * _2136) / _2122;
        float _2140 = _2139 + cbSceneParam._m0[79u].w;
        float _2141 = cbSceneParam._m0[79u].w - _2135;
        float _2147 = sqrt(((_2134 * _2134) + (_2135 * _2135)) + (_2137 * _2137));
        float _2150 = (1.0 - (cbSceneParam._m0[77u].w / _2122)) * _2147;
        float _2155 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2157 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2333;
        if (abs((_2136 - _2139) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2333 = ((((_2140 > 0.0) ? exp2(_2155 * _2140) : (2.0 - exp2(_2157 * _2140))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2150;
        }
        else
        {
            float _2277 = 1.0 / cbSceneParam._m0[80u].x;
            float _2278 = isnan(_2141) ? _2140 : (isnan(_2140) ? _2141 : max(_2140, _2141));
            float _2279 = isnan(_2141) ? _2140 : (isnan(_2140) ? _2141 : min(_2140, _2141));
            float _2288 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : min(_2278, 0.0));
            float _2289 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : min(_2279, 0.0));
            _2333 = ((abs(_2147 / _2136) * cbSceneParam._m0[80u].y) * ((((_2288 - _2289) * 2.0) - ((exp2(_2155 * (isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0)))) - exp2(_2155 * (isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0))))) * _2277)) - ((exp2(_2157 * _2288) - exp2(_2157 * _2289)) * _2277))) + (_2150 * cbSceneParam._m0[80u].z);
        }
        vec4 _2335 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2047, _2048, 1.0), 0.0);
        float _2344 = exp2((_2333 * (-1.44269502162933349609375)) * (1.0 - _2335.w));
        float _2345 = log2(_2344);
        float _2361 = log2(_2067);
        _2159 = (exp2(_2361 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2345 * cbSceneParam._m0[78u].x)) * _2335.x) / cbSceneParam._m0[78u].x)) + _2064;
        _2161 = (exp2(_2361 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2345 * cbSceneParam._m0[78u].y)) * _2335.y) / cbSceneParam._m0[78u].y)) + _2065;
        _2163 = (exp2(_2361 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2345 * cbSceneParam._m0[78u].z)) * _2335.z) / cbSceneParam._m0[78u].z)) + _2066;
        _2165 = _2344 * _2067;
    }
    else
    {
        _2159 = _2064;
        _2161 = _2065;
        _2163 = _2066;
        _2165 = _2067;
    }
    bool _2371;
    vec4 _2175;
    vec4 _2198;
    float _2200;
    float _2204;
    float _2205;
    float _2206;
    float _2207;
    bool _2218;
    for (;;)
    {
        _2175 = cbMatDynParam._m0[0u];
        float _2177 = roundEven(_2175.y);
        bool _2178 = _2177 == 3.0;
        float _2180 = log2(_2165);
        float _2187 = exp2(_2180 * cbSceneParam._m0[78u].x) * _2035;
        float _2188 = exp2(_2180 * cbSceneParam._m0[78u].y) * _2036;
        float _2189 = exp2(_2180 * cbSceneParam._m0[78u].z) * _2037;
        float _2196 = _319 + (-0.5);
        _2198 = cbMtdParam._m0[1u];
        _2200 = _2198.y * _2196;
        float _2203 = (_2177 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2204 = _2203 * (_2178 ? _2187 : (_2187 + (cbSceneParam._m0[72u].w * _2159)));
        _2205 = _2203 * (_2178 ? _2188 : (_2188 + (cbSceneParam._m0[72u].w * _2161)));
        _2206 = _2203 * (_2178 ? _2189 : (_2189 + (cbSceneParam._m0[72u].w * _2163)));
        _2207 = _2196 * 0.999000012874603271484375;
        _2218 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2218)
        {
            if ((cbInstanceData._m0[_370 + 7u].x + _2207) < 0.5)
            {
                _2371 = true;
                break;
            }
        }
        uint _2312 = _372 + uint(_2175.w);
        if ((cbInstanceData._m0[_2312].w < 1.0) && ((cbInstanceData._m0[_2312].w + _2207) < 0.5))
        {
            _2371 = true;
            break;
        }
        if ((_2200 + _192) < _2198.x)
        {
            _2371 = true;
            break;
        }
        _2371 = false;
        break;
    }
    float _2526;
    if (_2371)
    {
        discard_state = true;
        _2526 = 0.0;
    }
    else
    {
        _2526 = _2042;
    }
    SV_Target.x = _2204;
    SV_Target.y = _2205;
    SV_Target.z = _2206;
    SV_Target.w = _2526;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2042;
    discard_exit();
}


