#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Alpha_Soft_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _771;
float _2960;
float _2961;
float _2962;
float _2963;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _168 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _169 = _168 * NORMAL.x;
    float _170 = _168 * NORMAL.y;
    float _171 = _168 * NORMAL.z;
    vec4 _191 = texture(sampler2D(S_A1_M0_Alpha_Soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _194 = _191.w;
    vec4 _207 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _209 = _207.x;
    bool _216 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _233 = ((_216 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _209)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _209))) - POSITION_1.w) / cbMtdParam._m0[11u].x;
    float _2972 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _237 = (_194 * TEXCOORD_1.z) * (isnan(1.0) ? _2972 : (isnan(_2972) ? 1.0 : min(_2972, 1.0)));
    float _241 = inversesqrt(dot(vec3(_169, _170, _171), vec3(_169, _170, _171)));
    float _242 = _241 * _169;
    float _243 = _241 * _170;
    float _244 = _241 * _171;
    float _2983 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _245 = isnan(1.0) ? _2983 : (isnan(_2983) ? 1.0 : min(_2983, 1.0));
    float _2994 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _3005 = isnan(0.0) ? cbMtdParam._m0[10u].y : (isnan(cbMtdParam._m0[10u].y) ? 0.0 : max(cbMtdParam._m0[10u].y, 0.0));
    float _3016 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _253 = _216 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _295 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _305 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _295);
    float _306 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _295);
    float _307 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _295);
    float _311 = inversesqrt(dot(vec3(_305, _306, _307), vec3(_305, _306, _307)));
    float _312 = _305 * _311;
    float _313 = _306 * _311;
    float _314 = _307 * _311;
    vec4 _319 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _321 = _319.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _450 = sqrt(((_305 * _305) + (_306 * _306)) + (_307 * _307));
        float _456 = (cbMatDynParam._m0[5u].x * _450) + cbMatDynParam._m0[5u].y;
        float _3027 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
        float _457 = isnan(1.0) ? _3027 : (isnan(_3027) ? 1.0 : min(_3027, 1.0));
        float _461 = (cbMatDynParam._m0[5u].z * _450) + cbMatDynParam._m0[5u].w;
        float _3038 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3038 : (isnan(_3038) ? 1.0 : min(_3038, 1.0))) - _457)) + _457) < ((_321 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _332 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _333 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _353 = fma(_244, cbSceneParam._m0[5u].z, fma(_243, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _242));
    float _356 = fma(_244, cbSceneParam._m0[6u].z, fma(_243, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _242));
    float _359 = fma(_244, cbSceneParam._m0[7u].z, fma(_243, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _242));
    uint _372 = uint(roundEven(NORMAL.w)) * 13u;
    uint _374 = _372 + 9u;
    uint _375 = _374 + uint(cbMatDynParam._m0[0u].w);
    float _381 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2994 : (isnan(_2994) ? 1.0 : min(_2994, 1.0)))) * cbInstanceData._m0[_375].x;
    float _382 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3005 : (isnan(_3005) ? 1.0 : min(_3005, 1.0)))) * cbInstanceData._m0[_375].y;
    float _383 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3016 : (isnan(_3016) ? 1.0 : min(_3016, 1.0)))) * cbInstanceData._m0[_375].z;
    float _3049 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _384 = isnan(1.0) ? _3049 : (isnan(_3049) ? 1.0 : min(_3049, 1.0));
    float _3060 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _385 = isnan(1.0) ? _3060 : (isnan(_3060) ? 1.0 : min(_3060, 1.0));
    float _3071 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _386 = isnan(1.0) ? _3071 : (isnan(_3071) ? 1.0 : min(_3071, 1.0));
    vec4 _395 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _332, cbSceneParam._m0[86u].y * _333));
    float _398 = _395.x * TEXCOORD_1.w;
    float _399 = dot(vec3(_242, _243, _244), vec3(_312, _313, _314));
    float _402 = _399 * 2.0;
    float _407 = (_402 * _242) - _312;
    float _408 = (_402 * _243) - _313;
    float _409 = (_402 * _244) - _314;
    float _431 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _435 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _439 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _770;
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _495 = fma(_439, cbModelParam._m0[26u].z, fma(_435, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _431));
        float _499 = fma(_439, cbModelParam._m0[27u].z, fma(_435, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _431));
        float _503 = fma(_439, cbModelParam._m0[28u].z, fma(_435, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _431));
        float _528 = _431 + _242;
        float _529 = _435 + _243;
        float _530 = _439 + _244;
        float _540 = fma(_530, cbModelParam._m0[26u].z, fma(_529, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _528)) - _495;
        float _541 = fma(_530, cbModelParam._m0[27u].z, fma(_529, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _528)) - _499;
        float _542 = fma(_530, cbModelParam._m0[28u].z, fma(_529, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _528)) - _503;
        float _546 = inversesqrt(dot(vec3(_540, _541, _542), vec3(_540, _541, _542)));
        float _559 = ((_546 * _540) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_495 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _560 = ((_546 * _541) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_499 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _561 = ((_546 * _542) / cbModelParam._m0[34u].z) + ((((((_503 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _564 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        vec4 _571 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        vec4 _578 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        vec4 _585 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        float _598 = exp2((_564.w + (-0.5)) * 20.0) * 2.0;
        float _599 = _598 * (_564.x + (-0.5));
        float _600 = _598 * (_564.y + (-0.5));
        float _601 = _598 * (_564.z + (-0.5));
        float _608 = exp2((_571.w + (-0.5)) * 20.0) * 2.0;
        float _609 = _608 * (_571.x + (-0.5));
        float _610 = _608 * (_571.y + (-0.5));
        float _611 = _608 * (_571.z + (-0.5));
        float _618 = exp2((_578.w + (-0.5)) * 20.0) * 2.0;
        float _619 = _618 * (_578.x + (-0.5));
        float _620 = _618 * (_578.y + (-0.5));
        float _621 = _618 * (_578.z + (-0.5));
        float _628 = exp2((_585.w + (-0.5)) * 20.0) * 2.0;
        float _629 = _628 * (_585.x + (-0.5));
        float _630 = _628 * (_585.y + (-0.5));
        float _631 = _628 * (_585.z + (-0.5));
        float _632 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
        float _633 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
        float _634 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
        float _635 = _599 * 0.5;
        float _636 = _609 * 0.5;
        float _637 = _619 * 0.5;
        float _638 = dot(vec3(_635, _636, _637), vec3(_635, _636, _637));
        float _643 = (_638 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_638);
        float _652 = (dot(vec3(_242, _243, _244), vec3(_643 * _635, _643 * _636, _643 * _637)) + 1.0) * 0.5;
        float _3097 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        float _662 = sqrt(((_636 * _636) + (_635 * _635)) + (_637 * _637)) / (_632 + 9.9999997473787516355514526367188e-06);
        float _3108 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _663 = isnan(1.0) ? _3108 : (isnan(_3108) ? 1.0 : min(_3108, 1.0));
        float _664 = _663 * 2.0;
        float _668 = (1.0 - _663) / (_663 + 1.0);
        float _3119 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _669 = isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0));
        float _678 = ((((1.0 - _669) * (_664 + 2.0)) * exp2(log2(isnan(1.0) ? _3097 : (isnan(_3097) ? 1.0 : min(_3097, 1.0))) * (_664 + 1.0))) + _669) * _632;
        float _679 = _600 * 0.5;
        float _680 = _610 * 0.5;
        float _681 = _620 * 0.5;
        float _682 = dot(vec3(_679, _680, _681), vec3(_679, _680, _681));
        float _687 = (_682 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_682);
        float _695 = (dot(vec3(_242, _243, _244), vec3(_687 * _679, _687 * _680, _687 * _681)) + 1.0) * 0.5;
        float _3130 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _704 = sqrt(((_680 * _680) + (_679 * _679)) + (_681 * _681)) / (_633 + 9.9999997473787516355514526367188e-06);
        float _3141 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _705 = isnan(1.0) ? _3141 : (isnan(_3141) ? 1.0 : min(_3141, 1.0));
        float _706 = _705 * 2.0;
        float _710 = (1.0 - _705) / (_705 + 1.0);
        float _3152 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _711 = isnan(1.0) ? _3152 : (isnan(_3152) ? 1.0 : min(_3152, 1.0));
        float _720 = ((((1.0 - _711) * (_706 + 2.0)) * exp2(log2(isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0))) * (_706 + 1.0))) + _711) * _633;
        float _721 = _601 * 0.5;
        float _722 = _611 * 0.5;
        float _723 = _621 * 0.5;
        float _724 = dot(vec3(_721, _722, _723), vec3(_721, _722, _723));
        float _729 = (_724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_724);
        float _737 = (dot(vec3(_242, _243, _244), vec3(_729 * _721, _729 * _722, _729 * _723)) + 1.0) * 0.5;
        float _3163 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _746 = sqrt(((_722 * _722) + (_721 * _721)) + (_723 * _723)) / (_634 + 9.9999997473787516355514526367188e-06);
        float _3174 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3174 : (isnan(_3174) ? 1.0 : min(_3174, 1.0));
        float _748 = _747 * 2.0;
        float _752 = (1.0 - _747) / (_747 + 1.0);
        float _3185 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0));
        float _762 = ((((1.0 - _753) * (_748 + 2.0)) * exp2(log2(isnan(1.0) ? _3163 : (isnan(_3163) ? 1.0 : min(_3163, 1.0))) * (_748 + 1.0))) + _753) * _634;
        _770 = _601;
        _772 = _600;
        _773 = _599;
        _774 = _611;
        _775 = _610;
        _776 = _609;
        _777 = _621;
        _778 = _620;
        _779 = _619;
        _780 = _634;
        _781 = _633;
        _782 = _632;
        _783 = cbModelParam._m0[36u].z * (isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0)));
        _784 = cbModelParam._m0[36u].z * (isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0)));
        _785 = cbModelParam._m0[36u].z * (isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0)));
    }
    else
    {
        _770 = _771;
        _772 = _771;
        _773 = _771;
        _774 = _771;
        _775 = _771;
        _776 = _771;
        _777 = _771;
        _778 = _771;
        _779 = _771;
        _780 = _771;
        _781 = _771;
        _782 = _771;
        _783 = 0.0;
        _784 = 0.0;
        _785 = 0.0;
    }
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _814 = fma(_439, cbModelParam._m0[30u].z, fma(_435, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _431));
        float _818 = fma(_439, cbModelParam._m0[31u].z, fma(_435, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _431));
        float _822 = fma(_439, cbModelParam._m0[32u].z, fma(_435, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _431));
        float _845 = _431 + _242;
        float _846 = _435 + _243;
        float _847 = _439 + _244;
        float _857 = fma(_847, cbModelParam._m0[30u].z, fma(_846, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _845)) - _814;
        float _858 = fma(_847, cbModelParam._m0[31u].z, fma(_846, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _845)) - _818;
        float _859 = fma(_847, cbModelParam._m0[32u].z, fma(_846, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _845)) - _822;
        float _863 = inversesqrt(dot(vec3(_857, _858, _859), vec3(_857, _858, _859)));
        float _876 = ((_863 * _857) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_814 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _877 = ((_863 * _858) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_818 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _878 = ((_863 * _859) / cbModelParam._m0[35u].z) + ((((((_822 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        float _913 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_880.x + (-0.5));
        float _915 = _913 * (_880.y + (-0.5));
        float _916 = _913 * (_880.z + (-0.5));
        float _923 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_887.x + (-0.5));
        float _925 = _923 * (_887.y + (-0.5));
        float _926 = _923 * (_887.z + (-0.5));
        float _933 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_894.x + (-0.5));
        float _935 = _933 * (_894.y + (-0.5));
        float _936 = _933 * (_894.z + (-0.5));
        float _943 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_901.x + (-0.5));
        float _945 = _943 * (_901.y + (-0.5));
        float _946 = _943 * (_901.z + (-0.5));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = _914 * 0.5;
        float _951 = _924 * 0.5;
        float _952 = _934 * 0.5;
        float _953 = dot(vec3(_950, _951, _952), vec3(_950, _951, _952));
        float _958 = (_953 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_953);
        float _966 = (dot(vec3(_242, _243, _244), vec3(_958 * _950, _958 * _951, _958 * _952)) + 1.0) * 0.5;
        float _3226 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _975 = sqrt(((_951 * _951) + (_950 * _950)) + (_952 * _952)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _3237 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
        float _977 = _976 * 2.0;
        float _981 = (1.0 - _976) / (_976 + 1.0);
        float _3248 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
        float _991 = ((((1.0 - _982) * (_977 + 2.0)) * exp2(log2(isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0))) * (_977 + 1.0))) + _982) * _947;
        float _992 = _915 * 0.5;
        float _993 = _925 * 0.5;
        float _994 = _935 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1008 = (dot(vec3(_242, _243, _244), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3259 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1017 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_948 + 9.9999997473787516355514526367188e-06);
        float _3270 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3281 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0))) * (_1019 + 1.0))) + _1024) * _948;
        float _1034 = _916 * 0.5;
        float _1035 = _926 * 0.5;
        float _1036 = _936 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_242, _243, _244), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3292 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3303 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3314 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0))) * (_1061 + 1.0))) + _1066) * _949;
        _1083 = _916;
        _1084 = _915;
        _1085 = _914;
        _1086 = _926;
        _1087 = _925;
        _1088 = _924;
        _1089 = _936;
        _1090 = _935;
        _1091 = _934;
        _1092 = _949;
        _1093 = _948;
        _1094 = _947;
        _1095 = cbModelParam._m0[36u].w * (isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)));
        _1096 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
        _1097 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
    }
    else
    {
        _1083 = _771;
        _1084 = _771;
        _1085 = _771;
        _1086 = _771;
        _1087 = _771;
        _1088 = _771;
        _1089 = _771;
        _1090 = _771;
        _1091 = _771;
        _1092 = _771;
        _1093 = _771;
        _1094 = _771;
        _1095 = 0.0;
        _1096 = 0.0;
        _1097 = 0.0;
    }
    float _1107 = (cbModelParam._m0[1u].x * (_1095 - _783)) + _783;
    float _1108 = (cbModelParam._m0[1u].x * (_1096 - _784)) + _784;
    float _1109 = (cbModelParam._m0[1u].x * (_1097 - _785)) + _785;
    float _1130 = fma(_1109, cbSceneParam._m0[89u].z, fma(_1108, cbSceneParam._m0[89u].y, _1107 * cbSceneParam._m0[89u].x));
    float _1133 = fma(_1109, cbSceneParam._m0[90u].z, fma(_1108, cbSceneParam._m0[90u].y, _1107 * cbSceneParam._m0[90u].x));
    float _1136 = fma(_1109, cbSceneParam._m0[91u].z, fma(_1108, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1107));
    float _1151 = _407 * 0.5;
    float _1152 = _408 * 0.5;
    float _1153 = _409 * 0.5;
    float _1154 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_1085, _1088, _1091, _1094));
    float _1157 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_1084, _1087, _1090, _1093));
    float _1160 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_1083, _1086, _1089, _1092));
    float _1194;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1167 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_770, _774, _777, _780));
        float _1171 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_772, _775, _778, _781));
        float _1175 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_773, _776, _779, _782));
        float _1182 = dot(vec4(cbModelParam._m0[39u]), vec4(_1151, _1152, _1153, 1.0));
        _1194 = dot(vec3(isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)), isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)), isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1182) ? 0.0 : (isnan(0.0) ? _1182 : max(0.0, _1182))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1194 = 1.0;
    }
    float _1205;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1196 = dot(vec4(cbModelParam._m0[40u]), vec4(_1151, _1152, _1153, 1.0));
        _1205 = dot(vec3(isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)), isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)), isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1196) ? 0.0 : (isnan(0.0) ? _1196 : max(0.0, _1196))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1205 = 1.0;
    }
    float _1209 = (_1205 * cbModelParam._m0[1u].x) + (_1194 * (1.0 - cbModelParam._m0[1u].x));
    float _1218 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1300;
    float _1302;
    float _1304;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1267 = fma(_439, cbModelParam._m0[13u].z, fma(_435, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _431)) + cbModelParam._m0[13u].w;
        float _1271 = fma(_439, cbModelParam._m0[14u].z, fma(_435, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _431)) + cbModelParam._m0[14u].w;
        float _1275 = fma(_439, cbModelParam._m0[15u].z, fma(_435, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _431)) + cbModelParam._m0[15u].w;
        float _1278 = fma(_409, cbModelParam._m0[13u].z, fma(_408, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _407));
        float _1281 = fma(_409, cbModelParam._m0[14u].z, fma(_408, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _407));
        float _1284 = fma(_409, cbModelParam._m0[15u].z, fma(_408, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _407));
        float _1310;
        if (_1278 > 0.0)
        {
            _1310 = abs((1.0 - _1267) / _1278);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1278 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1267 + 1.0) / _1278);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1310 = frontier_phi_17_15_ladder;
        }
        float _1538;
        if (_1281 > 0.0)
        {
            _1538 = abs((1.0 - _1271) / _1281);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1281 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1271 + 1.0) / _1281);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1538 = frontier_phi_26_22_ladder;
        }
        float _1730;
        if (_1284 > 0.0)
        {
            _1730 = abs((1.0 - _1275) / _1284);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1284 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1275 + 1.0) / _1284);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1730 = frontier_phi_38_33_ladder;
        }
        float _1732 = isnan(_1538) ? _1310 : (isnan(_1310) ? _1538 : min(_1310, _1538));
        float _1733 = isnan(_1730) ? _1732 : (isnan(_1732) ? _1730 : min(_1732, _1730));
        float _1737 = (_1733 * _1278) + _1267;
        float _1738 = (_1733 * _1281) + _1271;
        float _1739 = (_1733 * _1284) + _1275;
        float _1740 = _1733 * 9.9999997473787516355514526367188e-05;
        float _1742 = (-1.0) - _1740;
        float _1744 = _1740 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1739 > _1744) || ((_1739 < _1742) || ((_1738 > _1744) || ((_1738 < _1742) || ((_1737 < _1742) || (_1737 > _1744))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1836 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1739, cbModelParam._m0[9u].z, fma(_1738, cbModelParam._m0[9u].y, _1737 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1739, cbModelParam._m0[10u].z, fma(_1738, cbModelParam._m0[10u].y, _1737 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1739, cbModelParam._m0[11u].z, fma(_1738, cbModelParam._m0[11u].y, _1737 * cbModelParam._m0[11u].x))), _1218);
            frontier_phi_16_38_ladder = _1836.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1836.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1836.x * cbModelParam._m0[1u].y;
        }
        _1300 = frontier_phi_16_38_ladder_2;
        _1302 = frontier_phi_16_38_ladder_1;
        _1304 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1288 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_407, _408, _409), _1218);
        _1300 = _1288.x * cbModelParam._m0[1u].y;
        _1302 = _1288.y * cbModelParam._m0[1u].y;
        _1304 = _1288.z * cbModelParam._m0[1u].y;
    }
    float _1307 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1400;
    float _1402;
    float _1404;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1364 = fma(_439, cbModelParam._m0[21u].z, fma(_435, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _431)) + cbModelParam._m0[21u].w;
        float _1368 = fma(_439, cbModelParam._m0[22u].z, fma(_435, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _431)) + cbModelParam._m0[22u].w;
        float _1372 = fma(_439, cbModelParam._m0[23u].z, fma(_435, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _431)) + cbModelParam._m0[23u].w;
        float _1375 = fma(_409, cbModelParam._m0[21u].z, fma(_408, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _407));
        float _1378 = fma(_409, cbModelParam._m0[22u].z, fma(_408, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _407));
        float _1381 = fma(_409, cbModelParam._m0[23u].z, fma(_408, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _407));
        float _1543;
        if (_1375 > 0.0)
        {
            _1543 = abs((1.0 - _1364) / _1375);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1375 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1364 + 1.0) / _1375);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1543 = frontier_phi_28_24_ladder;
        }
        float _1757;
        if (_1378 > 0.0)
        {
            _1757 = abs((1.0 - _1368) / _1378);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1378 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1368 + 1.0) / _1378);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1757 = frontier_phi_40_35_ladder;
        }
        float _1908;
        if (_1381 > 0.0)
        {
            _1908 = abs((1.0 - _1372) / _1381);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1381 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1372 + 1.0) / _1381);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1908 = frontier_phi_49_46_ladder;
        }
        float _1910 = isnan(_1757) ? _1543 : (isnan(_1543) ? _1757 : min(_1543, _1757));
        float _1911 = isnan(_1908) ? _1910 : (isnan(_1910) ? _1908 : min(_1910, _1908));
        float _1915 = (_1911 * _1375) + _1364;
        float _1916 = (_1911 * _1378) + _1368;
        float _1917 = (_1911 * _1381) + _1372;
        float _1918 = _1911 * 9.9999997473787516355514526367188e-05;
        float _1919 = (-1.0) - _1918;
        float _1921 = _1918 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1917 > _1921) || ((_1917 < _1919) || ((_1916 > _1921) || ((_1916 < _1919) || ((_1915 < _1919) || (_1915 > _1921))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2118 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1917, cbModelParam._m0[17u].z, fma(_1916, cbModelParam._m0[17u].y, _1915 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1917, cbModelParam._m0[18u].z, fma(_1916, cbModelParam._m0[18u].y, _1915 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1917, cbModelParam._m0[19u].z, fma(_1916, cbModelParam._m0[19u].y, _1915 * cbModelParam._m0[19u].x))), _1307);
            frontier_phi_25_49_ladder = _2118.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2118.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2118.x * cbModelParam._m0[1u].z;
        }
        _1400 = frontier_phi_25_49_ladder_2;
        _1402 = frontier_phi_25_49_ladder_1;
        _1404 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1384 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_407, _408, _409), _1307);
        _1400 = _1384.x * cbModelParam._m0[1u].z;
        _1402 = _1384.y * cbModelParam._m0[1u].z;
        _1404 = _1384.z * cbModelParam._m0[1u].z;
    }
    float _1416 = _398 * 0.01200000010430812835693359375;
    float _1418 = _1416 * ((cbModelParam._m0[1u].w * (_1400 - _1300)) + _1300);
    float _1419 = _1416 * ((cbModelParam._m0[1u].w * (_1402 - _1302)) + _1302);
    float _1420 = _1416 * ((cbModelParam._m0[1u].w * (_1404 - _1304)) + _1304);
    float _1423 = fma(_1420, cbSceneParam._m0[89u].z, fma(_1419, cbSceneParam._m0[89u].y, _1418 * cbSceneParam._m0[89u].x));
    float _1426 = fma(_1420, cbSceneParam._m0[90u].z, fma(_1419, cbSceneParam._m0[90u].y, _1418 * cbSceneParam._m0[90u].x));
    float _1429 = fma(_1420, cbSceneParam._m0[91u].z, fma(_1419, cbSceneParam._m0[91u].y, _1418 * cbSceneParam._m0[91u].x));
    vec4 _1437 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_332, _333));
    float _1439 = _1437.w;
    float _1451 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1439);
    float _1452 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1439);
    float _1453 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1439);
    uvec4 _1457 = floatBitsToUint(cbInstanceData._m0[_372 + 5u]);
    uint _1459 = _1457.x * 14u;
    uint _1460 = _1459 + 13u;
    float _1467 = _398 + (-1.0);
    float _1473 = (cbLight._m0[_1460].x * _1467) + 1.0;
    float _1474 = (cbLight._m0[_1460].y * _1467) + 1.0;
    float _1475 = (cbLight._m0[_1460].z * _1467) + 1.0;
    float _1476 = (cbLight._m0[_1460].w * _1467) + 1.0;
    uint _1477 = _1459 + 5u;
    float _1483 = isnan(1.0) ? _1474 : (isnan(_1474) ? 1.0 : min(_1474, 1.0));
    uint _1487 = _1459 + 4u;
    float _1497 = isnan(1.0) ? _1473 : (isnan(_1473) ? 1.0 : min(_1473, 1.0));
    uint _1501 = _1459 | 1u;
    float _1512 = dot(vec3(cbLight._m0[_1459].xyz), vec3(_242, _243, _244));
    float _1515 = dot(vec3(cbLight._m0[_1501].xyz), vec3(_242, _243, _244));
    float _3450 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
    float _3461 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
    float _1520 = (isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) * 0.3183098733425140380859375;
    float _1522 = (isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0))) * 0.3183098733425140380859375;
    float _1529 = ((cbLight._m0[_1477].x * _1483) * _1522) + (((cbLight._m0[_1487].x * _1451) * _1497) * _1520);
    float _1530 = ((_1483 * cbLight._m0[_1477].y) * _1522) + (((cbLight._m0[_1487].y * _1452) * _1497) * _1520);
    float _1531 = ((_1483 * cbLight._m0[_1477].z) * _1522) + (((cbLight._m0[_1487].z * _1453) * _1497) * _1520);
    uvec4 _1535 = floatBitsToUint(cbLight._m0[_1459 + 12u]);
    bool _1537 = _1535.x == 0u;
    float _1548;
    float _1550;
    float _1552;
    if (_1537)
    {
        _1548 = _1529;
        _1550 = _1530;
        _1552 = _1531;
    }
    else
    {
        uint _1556 = _1459 + 6u;
        float _1572 = (dot(vec3(cbLight._m0[_1459 + 2u].xyz), vec3(_242, _243, _244)) * 0.5) + 0.5;
        float _1573 = _1572 * _1572;
        float _3472 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
        float _1575 = isnan(1.0) ? _1475 : (isnan(_1475) ? 1.0 : min(_1475, 1.0));
        _1548 = (((cbLight._m0[_1556].x * 0.3183098733425140380859375) * _1574) * _1575) + _1529;
        _1550 = (((cbLight._m0[_1556].y * 0.3183098733425140380859375) * _1574) * _1575) + _1530;
        _1552 = (((cbLight._m0[_1556].z * 0.3183098733425140380859375) * _1574) * _1575) + _1531;
    }
    bool _1555 = _1535.y == 0u;
    float _1593;
    float _1595;
    float _1597;
    if (_1555)
    {
        _1593 = _1548;
        _1595 = _1550;
        _1597 = _1552;
    }
    else
    {
        uint _1701 = _1459 + 7u;
        float _1717 = (dot(vec3(cbLight._m0[_1459 + 3u].xyz), vec3(_242, _243, _244)) * 0.5) + 0.5;
        float _1718 = _1717 * _1717;
        float _3488 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _1720 = isnan(1.0) ? _1476 : (isnan(_1476) ? 1.0 : min(_1476, 1.0));
        _1593 = (((cbLight._m0[_1701].x * 0.3183098733425140380859375) * _1719) * _1720) + _1548;
        _1595 = (((cbLight._m0[_1701].y * 0.3183098733425140380859375) * _1719) * _1720) + _1550;
        _1597 = (((cbLight._m0[_1701].z * 0.3183098733425140380859375) * _1719) * _1720) + _1552;
    }
    uint _1599 = _1459 + 8u;
    float _1605 = cbLight._m0[_1459].x + _312;
    float _1606 = cbLight._m0[_1459].y + _313;
    float _1607 = cbLight._m0[_1459].z + _314;
    float _1611 = inversesqrt(dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607)));
    float _1615 = dot(vec3(_242, _243, _244), vec3(cbLight._m0[_1459].xyz));
    float _3504 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
    float _1618 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    float _3515 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _1619 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _1620 = dot(vec3(cbLight._m0[_1459].xyz), vec3(_1605 * _1611, _1606 * _1611, _1607 * _1611));
    float _3526 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
    float _1631 = (exp2(log2(1.0 - (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1637 = (0.5 / ((_1618 + 9.9999999392252902907785028219223e-09) + _1619)) * _1618;
    float _3537 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
    float _1639 = (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * 0.31831014156341552734375;
    uint _1653 = _1459 + 9u;
    float _1659 = cbLight._m0[_1501].x + _312;
    float _1660 = cbLight._m0[_1501].y + _313;
    float _1661 = cbLight._m0[_1501].z + _314;
    float _1665 = inversesqrt(dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661)));
    float _1669 = dot(vec3(_242, _243, _244), vec3(cbLight._m0[_1501].xyz));
    float _3548 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
    float _1672 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _1673 = dot(vec3(cbLight._m0[_1501].xyz), vec3(_1659 * _1665, _1660 * _1665, _1661 * _1665));
    float _3559 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
    float _1682 = (exp2(log2(1.0 - (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1686 = (0.5 / ((_1672 + 9.9999999392252902907785028219223e-09) + _1619)) * _1672;
    float _3570 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
    float _1688 = (isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * 0.31831014156341552734375;
    float _1698 = (((_1682 * cbLight._m0[_1653].x) * _1688) * _1483) + ((((cbLight._m0[_1599].x * _1451) * _1631) * _1639) * _1497);
    float _1699 = (((_1682 * cbLight._m0[_1653].y) * _1688) * _1483) + ((((cbLight._m0[_1599].y * _1452) * _1631) * _1639) * _1497);
    float _1700 = (((_1682 * cbLight._m0[_1653].z) * _1688) * _1483) + ((((cbLight._m0[_1599].z * _1453) * _1631) * _1639) * _1497);
    float _1762;
    float _1764;
    float _1766;
    if (_1537)
    {
        _1762 = _1698;
        _1764 = _1699;
        _1766 = _1700;
    }
    else
    {
        uint _1768 = _1459 + 10u;
        uint _1774 = _1459 + 2u;
        float _1780 = cbLight._m0[_1774].x + _312;
        float _1781 = cbLight._m0[_1774].y + _313;
        float _1782 = cbLight._m0[_1774].z + _314;
        float _1786 = inversesqrt(dot(vec3(_1780, _1781, _1782), vec3(_1780, _1781, _1782)));
        float _1790 = dot(vec3(_242, _243, _244), vec3(cbLight._m0[_1774].xyz));
        float _3581 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1793 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _1794 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_1780 * _1786, _1781 * _1786, _1782 * _1786));
        float _3592 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1803 = (exp2(log2(1.0 - (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1807 = (0.5 / ((_1793 + 9.9999999392252902907785028219223e-09) + _1619)) * _1793;
        float _3603 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1809 = (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * 0.31831014156341552734375;
        float _1810 = isnan(1.0) ? _1475 : (isnan(_1475) ? 1.0 : min(_1475, 1.0));
        _1762 = (((_1803 * cbLight._m0[_1768].x) * _1809) * _1810) + _1698;
        _1764 = (((_1803 * cbLight._m0[_1768].y) * _1809) * _1810) + _1699;
        _1766 = (((_1803 * cbLight._m0[_1768].z) * _1809) * _1810) + _1700;
    }
    float _1845;
    float _1847;
    float _1849;
    if (_1555)
    {
        _1845 = _1762;
        _1847 = _1764;
        _1849 = _1766;
    }
    else
    {
        uint _1856 = _1459 + 11u;
        uint _1862 = _1459 + 3u;
        float _1868 = cbLight._m0[_1862].x + _312;
        float _1869 = cbLight._m0[_1862].y + _313;
        float _1870 = cbLight._m0[_1862].z + _314;
        float _1874 = inversesqrt(dot(vec3(_1868, _1869, _1870), vec3(_1868, _1869, _1870)));
        float _1878 = dot(vec3(_242, _243, _244), vec3(cbLight._m0[_1862].xyz));
        float _3619 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1881 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1882 = dot(vec3(cbLight._m0[_1862].xyz), vec3(_1868 * _1874, _1869 * _1874, _1870 * _1874));
        float _3630 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
        float _1891 = (exp2(log2(1.0 - (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1895 = (0.5 / ((_1881 + 9.9999999392252902907785028219223e-09) + _1619)) * _1881;
        float _3641 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1897 = (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * 0.31831014156341552734375;
        float _1898 = isnan(1.0) ? _1476 : (isnan(_1476) ? 1.0 : min(_1476, 1.0));
        _1845 = (((_1891 * cbLight._m0[_1856].x) * _1897) * _1898) + _1762;
        _1847 = (((_1891 * cbLight._m0[_1856].y) * _1897) * _1898) + _1764;
        _1849 = (((_1891 * cbLight._m0[_1856].z) * _1897) * _1898) + _1766;
    }
    float _2033;
    float _2035;
    float _2037;
    float _2039;
    float _2041;
    float _2043;
    if (_1457.y == 0u)
    {
        float _1973 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1974 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1973;
        float _1975 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1973;
        float _1976 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1973;
        uvec4 _1988 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1989 = _1988.x;
        uint _2000 = uint((float(_1988.y) * floor(float(uint(cbSceneParam._m0[85u].y * _333) / _1989))) + floor(float(uint(cbSceneParam._m0[85u].x * _332) / _1989)));
        float _2010 = (log2(_1976 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2011 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        uint _2014 = uint(isnan(14.0) ? _2011 : (isnan(_2011) ? 14.0 : min(_2011, 14.0)));
        uvec4 _2019 = texelFetch(g_lightClusterGridBuffer, int(((_2014 << 2u) + (_2000 << 6u)) >> 2u));
        uint _2020 = _2019.x;
        uint _2021 = _1988.z;
        float _2123;
        float _2125;
        float _2127;
        float _2129;
        float _2131;
        float _2133;
        if (((((1u << ((_2021 >> 4u) & 15u)) + 4294967295u) & _2020) == 0u) || ((_2021 & 240u) == 0u))
        {
            _2123 = 0.0;
            _2125 = 0.0;
            _2127 = 0.0;
            _2129 = 0.0;
            _2131 = 0.0;
            _2133 = 0.0;
        }
        else
        {
            float _2124;
            float _2126;
            float _2128;
            float _2130;
            float _2132;
            float _2134;
            float _2274 = 0.0;
            float _2275 = 0.0;
            float _2276 = 0.0;
            float _2277 = 0.0;
            float _2278 = 0.0;
            float _2279 = 0.0;
            uint _2280 = 0u;
            uint _2289;
            bool _2290;
            for (;;)
            {
                _2289 = texelFetch(g_lightClassification, int((((_2014 << 5u) + (_2000 << 9u)) + (_2280 << 2u)) >> 2u)).x;
                _2290 = _2289 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2290)
                {
                    frontier_phi_66_pred = _2274;
                    frontier_phi_66_pred_1 = _2279;
                    frontier_phi_66_pred_2 = _2278;
                    frontier_phi_66_pred_3 = _2277;
                    frontier_phi_66_pred_4 = _2276;
                    frontier_phi_66_pred_5 = _2275;
                }
                else
                {
                    float _2419;
                    float _2420;
                    float _2421;
                    float _2422;
                    float _2423;
                    float _2424;
                    uint _2425;
                    _2419 = _2274;
                    _2420 = _2275;
                    _2421 = _2276;
                    _2422 = _2277;
                    _2423 = _2278;
                    _2424 = _2279;
                    _2425 = _2289;
                    float _2346;
                    float _2347;
                    float _2348;
                    float _2349;
                    float _2350;
                    float _2351;
                    for (;;)
                    {
                        uint _2429 = uint(findLSB(_2425)) + (_2280 << 5u);
                        uint _2426 = (_2425 + 4294967295u) & _2425;
                        uint _2431 = _2429 * 48u;
                        vec4 _2445 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2431)).x, texelFetch(g_PointLightRenderingBuffer, int(_2431 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2431 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2431 + 3u)).x));
                        uint _2451 = (_2429 * 48u) + 4u;
                        vec4 _2464 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2451)).x, texelFetch(g_PointLightRenderingBuffer, int(_2451 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2451 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2451 + 3u)).x));
                        uint _2470 = (_2429 * 48u) + 8u;
                        vec3 _2481 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2470)).x, texelFetch(g_PointLightRenderingBuffer, int(_2470 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2470 + 2u)).x));
                        float _2485 = _2445.x - _1974;
                        float _2486 = _2445.y - _1975;
                        float _2487 = _2445.z - _1976;
                        float _2488 = dot(vec3(_2485, _2486, _2487), vec3(_2485, _2486, _2487));
                        float _2491 = inversesqrt(_2488);
                        float _2500 = 1.0 - (_2488 * _2445.w);
                        float _3667 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
                        float _2501 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
                        float _2502 = sqrt(_2488) * _2464.w;
                        float _2505 = 1.39999997615814208984375 / (_2502 + 1.39999997615814208984375);
                        float _2506 = _2505 * _2505;
                        float _2509 = ((1.0 - _2506) * dot(vec3(_353, _356, _359), vec3(_2491 * _2485, _2491 * _2486, _2491 * _2487))) + _2506;
                        float _2512 = _2502 * _2502;
                        float _2516 = ((isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0))) * _2501) / ((_2512 * 0.699999988079071044921875) + 1.0);
                        float _2520 = (-0.0) - _1974;
                        float _2521 = (-0.0) - _1975;
                        float _2522 = (-0.0) - _1976;
                        float _2526 = inversesqrt(dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522)));
                        float _2530 = dot(vec3(_353, _356, _359), vec3(_2526 * _2520, _2526 * _2521, _2526 * _2522));
                        float _3683 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
                        float _3694 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
                        float _2534 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
                        float _2538 = (0.5 / (((isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) + 9.9999999392252902907785028219223e-09) + _2534)) * _2534;
                        float _3705 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
                        float _2547 = (((isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * 3.1415927410125732421875) / ((_2512 * 2.1991131305694580078125) + 3.141590118408203125)) * _2501;
                        _2349 = (_2516 * _2464.x) + _2422;
                        _2350 = (_2516 * _2464.y) + _2423;
                        _2351 = (_2516 * _2464.z) + _2424;
                        _2346 = (_2547 * _2481.x) + _2419;
                        _2347 = (_2547 * _2481.y) + _2420;
                        _2348 = (_2547 * _2481.z) + _2421;
                        if (_2426 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2419 = _2346;
                            _2420 = _2347;
                            _2421 = _2348;
                            _2422 = _2349;
                            _2423 = _2350;
                            _2424 = _2351;
                            _2425 = _2426;
                        }
                    }
                    frontier_phi_66_pred = _2346;
                    frontier_phi_66_pred_1 = _2351;
                    frontier_phi_66_pred_2 = _2350;
                    frontier_phi_66_pred_3 = _2349;
                    frontier_phi_66_pred_4 = _2348;
                    frontier_phi_66_pred_5 = _2347;
                }
                _2124 = frontier_phi_66_pred;
                _2134 = frontier_phi_66_pred_1;
                _2132 = frontier_phi_66_pred_2;
                _2130 = frontier_phi_66_pred_3;
                _2128 = frontier_phi_66_pred_4;
                _2126 = frontier_phi_66_pred_5;
                uint _2281 = _2280 + 1u;
                if (_2281 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2274 = _2124;
                    _2275 = _2126;
                    _2276 = _2128;
                    _2277 = _2130;
                    _2278 = _2132;
                    _2279 = _2134;
                    _2280 = _2281;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2123 = _2124;
            _2125 = _2126;
            _2127 = _2128;
            _2129 = _2130;
            _2131 = _2132;
            _2133 = _2134;
        }
        uvec4 _2137 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2138 = _2137.z;
        uint _2140 = (_2138 >> 8u) & 15u;
        float _2245;
        float _2247;
        float _2249;
        float _2251;
        float _2253;
        float _2255;
        if (((4294967295u << _2140) & _2020) == 0u)
        {
            _2245 = _2123;
            _2247 = _2125;
            _2249 = _2127;
            _2251 = _2129;
            _2253 = _2131;
            _2255 = _2133;
        }
        else
        {
            float _2270 = inversesqrt(dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2140 < ((_2138 >> 12u) & 15u))
            {
                float _2246;
                float _2248;
                float _2250;
                float _2252;
                float _2254;
                float _2256;
                float _2402 = _2123;
                float _2403 = _2125;
                float _2404 = _2127;
                float _2405 = _2129;
                float _2406 = _2131;
                float _2407 = _2133;
                uint _2408 = _2140;
                uint _2417;
                bool _2418;
                for (;;)
                {
                    _2417 = texelFetch(g_lightClassification, int((((_2014 << 5u) + (_2000 << 9u)) + (_2408 << 2u)) >> 2u)).x;
                    _2418 = _2417 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2418)
                    {
                        frontier_phi_77_pred = _2407;
                        frontier_phi_77_pred_1 = _2406;
                        frontier_phi_77_pred_2 = _2405;
                        frontier_phi_77_pred_3 = _2404;
                        frontier_phi_77_pred_4 = _2403;
                        frontier_phi_77_pred_5 = _2402;
                    }
                    else
                    {
                        float _2561;
                        float _2562;
                        float _2563;
                        float _2564;
                        float _2565;
                        float _2566;
                        float _2813;
                        float _2814;
                        float _2815;
                        float _2816;
                        float _2817;
                        float _2818;
                        float _2574 = _2402;
                        float _2575 = _2403;
                        float _2576 = _2404;
                        float _2577 = _2405;
                        float _2578 = _2406;
                        float _2579 = _2407;
                        uint _2580 = _2417;
                        uint _2581;
                        vec4 _2606;
                        float _2607;
                        vec4 _2622;
                        vec3 _2634;
                        vec4 _2650;
                        vec4 _2666;
                        float _2713;
                        bool _2714;
                        for (;;)
                        {
                            uint _2591 = ((_2408 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2580));
                            _2581 = (_2580 + 4294967295u) & _2580;
                            uint _2593 = _2591 * 40u;
                            _2606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2593 + 3u)).x));
                            _2607 = _2606.w;
                            uint _2609 = (_2591 * 40u) + 4u;
                            _2622 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2609)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2609 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2609 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2609 + 3u)).x));
                            uint _2624 = (_2591 * 40u) + 8u;
                            _2634 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 2u)).x));
                            uint _2637 = (_2591 * 40u) + 16u;
                            _2650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2637 + 3u)).x));
                            uint _2653 = (_2591 * 40u) + 20u;
                            _2666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2653 + 3u)).x));
                            uint _2669 = (_2591 * 40u) + 24u;
                            vec4 _2682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2669 + 3u)).x));
                            uint _2688 = (_2591 * 40u) + 28u;
                            vec4 _2701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 3u)).x));
                            _2713 = fma(_1976, _2701.z, fma(_1975, _2701.y, _2701.x * _1974)) + _2701.w;
                            _2714 = !((fma(_1976, _2682.z, fma(_1975, _2682.y, _2682.x * _1974)) + _2682.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2714)
                            {
                                float _2741 = _2606.x - _1974;
                                float _2742 = _2606.y - _1975;
                                float _2743 = _2606.z - _1976;
                                float _2744 = dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743));
                                float _2747 = inversesqrt(_2744);
                                float _2748 = _2747 * _2741;
                                float _2749 = _2747 * _2742;
                                float _2750 = _2747 * _2743;
                                float _2754 = 1.0 - (_2744 / (_2607 * _2607));
                                float _3716 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                                float _2755 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
                                float _2759 = sqrt(_2744) * _2622.w;
                                float _2761 = 1.39999997615814208984375 / (_2759 + 1.39999997615814208984375);
                                float _2762 = _2761 * _2761;
                                float _2763 = 1.0 - _2762;
                                float _2765 = (_2763 * dot(vec3(_2748, _2749, _2750), vec3(_353, _356, _359))) + _2762;
                                float _2768 = _2759 * _2759;
                                float _2772 = (fma(_1976, _2650.z, fma(_1975, _2650.y, _2650.x * _1974)) + _2650.w) / _2713;
                                float _2773 = (fma(_1976, _2666.z, fma(_1975, _2666.y, _2666.x * _1974)) + _2666.w) / _2713;
                                float _2777 = 1.0 - dot(vec2(_2772, _2773), vec2(_2772, _2773));
                                float _3732 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                                float _2778 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
                                float _2779 = _2778 * (((isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0))) * _2755) / ((_2768 * 0.699999988079071044921875) + 1.0));
                                float _2789 = dot(vec3(_353, _356, _359), vec3((-0.0) - (_1974 * _2270), (-0.0) - (_1975 * _2270), (-0.0) - (_1976 * _2270)));
                                float _3743 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                                float _2797 = (_2763 * dot(vec3(_353, _356, _359), vec3(_2748, _2749, _2750))) + _2762;
                                float _3754 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                                float _2798 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
                                float _2802 = (0.5 / (((isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) + 9.9999999392252902907785028219223e-09) + _2798)) * _2798;
                                float _3765 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                                float _2809 = (_2778 * _2755) * (((isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * 3.1415927410125732421875) / ((_2768 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2779 * _2622.y;
                                frontier_phi_83_pred_1 = _2779 * _2622.x;
                                frontier_phi_83_pred_2 = _2809 * _2634.z;
                                frontier_phi_83_pred_3 = _2809 * _2634.y;
                                frontier_phi_83_pred_4 = _2809 * _2634.x;
                                frontier_phi_83_pred_5 = _2779 * _2622.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2817 = frontier_phi_83_pred;
                            _2816 = frontier_phi_83_pred_1;
                            _2815 = frontier_phi_83_pred_2;
                            _2814 = frontier_phi_83_pred_3;
                            _2813 = frontier_phi_83_pred_4;
                            _2818 = frontier_phi_83_pred_5;
                            _2564 = _2816 + _2577;
                            _2565 = _2817 + _2578;
                            _2566 = _2818 + _2579;
                            _2561 = _2813 + _2574;
                            _2562 = _2814 + _2575;
                            _2563 = _2815 + _2576;
                            if (_2581 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2574 = _2561;
                                _2575 = _2562;
                                _2576 = _2563;
                                _2577 = _2564;
                                _2578 = _2565;
                                _2579 = _2566;
                                _2580 = _2581;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2566;
                        frontier_phi_77_pred_1 = _2565;
                        frontier_phi_77_pred_2 = _2564;
                        frontier_phi_77_pred_3 = _2563;
                        frontier_phi_77_pred_4 = _2562;
                        frontier_phi_77_pred_5 = _2561;
                    }
                    _2256 = frontier_phi_77_pred;
                    _2254 = frontier_phi_77_pred_1;
                    _2252 = frontier_phi_77_pred_2;
                    _2250 = frontier_phi_77_pred_3;
                    _2248 = frontier_phi_77_pred_4;
                    _2246 = frontier_phi_77_pred_5;
                    uint _2409 = _2408 + 1u;
                    if (_2409 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2402 = _2246;
                        _2403 = _2248;
                        _2404 = _2250;
                        _2405 = _2252;
                        _2406 = _2254;
                        _2407 = _2256;
                        _2408 = _2409;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2250;
                frontier_phi_58_59_ladder_1 = _2256;
                frontier_phi_58_59_ladder_2 = _2254;
                frontier_phi_58_59_ladder_3 = _2252;
                frontier_phi_58_59_ladder_4 = _2248;
                frontier_phi_58_59_ladder_5 = _2246;
            }
            else
            {
                frontier_phi_58_59_ladder = _2127;
                frontier_phi_58_59_ladder_1 = _2133;
                frontier_phi_58_59_ladder_2 = _2131;
                frontier_phi_58_59_ladder_3 = _2129;
                frontier_phi_58_59_ladder_4 = _2125;
                frontier_phi_58_59_ladder_5 = _2123;
            }
            _2245 = frontier_phi_58_59_ladder_5;
            _2247 = frontier_phi_58_59_ladder_4;
            _2249 = frontier_phi_58_59_ladder;
            _2251 = frontier_phi_58_59_ladder_3;
            _2253 = frontier_phi_58_59_ladder_2;
            _2255 = frontier_phi_58_59_ladder_1;
        }
        float _2260 = isnan(1.0) ? _398 : (isnan(_398) ? 1.0 : min(_398, 1.0));
        _2033 = (_2260 * _2251) + _1593;
        _2035 = (_2260 * _2253) + _1595;
        _2037 = (_2260 * _2255) + _1597;
        _2039 = ((_2245 * 0.039999999105930328369140625) * _2260) + _1845;
        _2041 = ((_2247 * 0.039999999105930328369140625) * _2260) + _1847;
        _2043 = ((_2249 * 0.039999999105930328369140625) * _2260) + _1849;
    }
    else
    {
        _2033 = _1593;
        _2035 = _1595;
        _2037 = _1597;
        _2039 = _1845;
        _2041 = _1847;
        _2043 = _1849;
    }
    float _3781 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _3792 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _3803 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _3814 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _2061 = ((isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * (_2033 + ((isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0))) * _398))) + ((_2039 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _1209)) * cbPerFrame._m0[3u].x);
    float _2062 = ((isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_2035 + ((isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0))) * _398))) + ((_2041 + ((isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))) * _1209)) * cbPerFrame._m0[3u].x);
    float _2063 = ((isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_2037 + ((isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0))) * _398))) + ((_2043 + ((isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))) * _1209)) * cbPerFrame._m0[3u].x);
    float _2068 = cbInstanceData._m0[_372 + 6u].w * (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0)));
    float _2073 = _332 / cbSceneParam._m0[86u].x;
    float _2074 = _333 / cbSceneParam._m0[86u].y;
    vec4 _2088 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2073, _2074, (log2((isnan(cbSceneParam._m0[77u].w) ? _253 : (isnan(_253) ? cbSceneParam._m0[77u].w : min(_253, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2090 = _2088.x;
    float _2091 = _2088.y;
    float _2092 = _2088.z;
    float _2093 = _2088.w;
    float _2185;
    float _2187;
    float _2189;
    float _2191;
    if (_253 > cbSceneParam._m0[78u].w)
    {
        float _2148 = isnan(_253) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _253 : min(cbSceneParam._m0[80u].w, _253));
        float _2149 = _2148 / _253;
        float _2160 = _2149 * _305;
        float _2161 = _306 * _2149;
        float _2162 = (-0.0) - _2161;
        float _2163 = _2149 * _307;
        float _2165 = (cbSceneParam._m0[77u].w * _2162) / _2148;
        float _2166 = _2165 + cbSceneParam._m0[79u].w;
        float _2167 = cbSceneParam._m0[79u].w - _2161;
        float _2173 = sqrt(((_2160 * _2160) + (_2161 * _2161)) + (_2163 * _2163));
        float _2176 = (1.0 - (cbSceneParam._m0[77u].w / _2148)) * _2173;
        float _2181 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2183 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2359;
        if (abs((_2162 - _2165) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2359 = ((((_2166 > 0.0) ? exp2(_2181 * _2166) : (2.0 - exp2(_2183 * _2166))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2176;
        }
        else
        {
            float _2303 = 1.0 / cbSceneParam._m0[80u].x;
            float _2304 = isnan(_2167) ? _2166 : (isnan(_2166) ? _2167 : max(_2166, _2167));
            float _2305 = isnan(_2167) ? _2166 : (isnan(_2166) ? _2167 : min(_2166, _2167));
            float _2314 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : min(_2304, 0.0));
            float _2315 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : min(_2305, 0.0));
            _2359 = ((abs(_2173 / _2162) * cbSceneParam._m0[80u].y) * ((((_2314 - _2315) * 2.0) - ((exp2(_2181 * (isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0)))) - exp2(_2181 * (isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0))))) * _2303)) - ((exp2(_2183 * _2314) - exp2(_2183 * _2315)) * _2303))) + (_2176 * cbSceneParam._m0[80u].z);
        }
        vec4 _2361 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2073, _2074, 1.0), 0.0);
        float _2370 = exp2((_2359 * (-1.44269502162933349609375)) * (1.0 - _2361.w));
        float _2371 = log2(_2370);
        float _2387 = log2(_2093);
        _2185 = (exp2(_2387 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2371 * cbSceneParam._m0[78u].x)) * _2361.x) / cbSceneParam._m0[78u].x)) + _2090;
        _2187 = (exp2(_2387 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2371 * cbSceneParam._m0[78u].y)) * _2361.y) / cbSceneParam._m0[78u].y)) + _2091;
        _2189 = (exp2(_2387 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2371 * cbSceneParam._m0[78u].z)) * _2361.z) / cbSceneParam._m0[78u].z)) + _2092;
        _2191 = _2370 * _2093;
    }
    else
    {
        _2185 = _2090;
        _2187 = _2091;
        _2189 = _2092;
        _2191 = _2093;
    }
    bool _2397;
    vec4 _2201;
    vec4 _2224;
    float _2226;
    float _2230;
    float _2231;
    float _2232;
    float _2233;
    bool _2244;
    for (;;)
    {
        _2201 = cbMatDynParam._m0[0u];
        float _2203 = roundEven(_2201.y);
        bool _2204 = _2203 == 3.0;
        float _2206 = log2(_2191);
        float _2213 = exp2(_2206 * cbSceneParam._m0[78u].x) * _2061;
        float _2214 = exp2(_2206 * cbSceneParam._m0[78u].y) * _2062;
        float _2215 = exp2(_2206 * cbSceneParam._m0[78u].z) * _2063;
        float _2222 = _321 + (-0.5);
        _2224 = cbMtdParam._m0[1u];
        _2226 = _2224.y * _2222;
        float _2229 = (_2203 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2230 = _2229 * (_2204 ? _2213 : (_2213 + (cbSceneParam._m0[72u].w * _2185)));
        _2231 = _2229 * (_2204 ? _2214 : (_2214 + (cbSceneParam._m0[72u].w * _2187)));
        _2232 = _2229 * (_2204 ? _2215 : (_2215 + (cbSceneParam._m0[72u].w * _2189)));
        _2233 = _2222 * 0.999000012874603271484375;
        _2244 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2244)
        {
            if ((cbInstanceData._m0[_372 + 7u].x + _2233) < 0.5)
            {
                _2397 = true;
                break;
            }
        }
        uint _2338 = _374 + uint(_2201.w);
        if ((cbInstanceData._m0[_2338].w < 1.0) && ((cbInstanceData._m0[_2338].w + _2233) < 0.5))
        {
            _2397 = true;
            break;
        }
        if ((_2226 + _194) < _2224.x)
        {
            _2397 = true;
            break;
        }
        _2397 = false;
        break;
    }
    float _2552;
    if (_2397)
    {
        discard_state = true;
        _2552 = 0.0;
    }
    else
    {
        _2552 = _2068;
    }
    SV_Target.x = _2230;
    SV_Target.y = _2231;
    SV_Target.z = _2232;
    SV_Target.w = _2552;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2068;
    discard_exit();
}


