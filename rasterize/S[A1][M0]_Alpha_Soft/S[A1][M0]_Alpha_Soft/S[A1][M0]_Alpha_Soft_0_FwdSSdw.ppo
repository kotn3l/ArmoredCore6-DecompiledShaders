#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Alpha_Soft_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _732;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _164 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _165 = _164 * NORMAL.x;
    float _166 = _164 * NORMAL.y;
    float _167 = _164 * NORMAL.z;
    vec4 _187 = texture(sampler2D(S_A1_M0_Alpha_Soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _194 = _187.x * cbMtdParam._m0[9u].x;
    float _195 = _187.y * cbMtdParam._m0[9u].y;
    float _196 = _187.z * cbMtdParam._m0[9u].z;
    vec4 _209 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _211 = _209.x;
    bool _218 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _235 = ((_218 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _211)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _211))) - POSITION_1.w) / cbMtdParam._m0[11u].x;
    float _2866 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _239 = (_187.w * TEXCOORD_1.z) * (isnan(1.0) ? _2866 : (isnan(_2866) ? 1.0 : min(_2866, 1.0)));
    float _243 = inversesqrt(dot(vec3(_165, _166, _167), vec3(_165, _166, _167)));
    float _244 = _243 * _165;
    float _245 = _243 * _166;
    float _246 = _243 * _167;
    float _2877 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _247 = isnan(1.0) ? _2877 : (isnan(_2877) ? 1.0 : min(_2877, 1.0));
    float _2888 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _2899 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _2910 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _255 = _218 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _297 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _307 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _297);
    float _308 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _297);
    float _309 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _297);
    float _313 = inversesqrt(dot(vec3(_307, _308, _309), vec3(_307, _308, _309)));
    float _314 = _307 * _313;
    float _315 = _308 * _313;
    float _316 = _309 * _313;
    float _321 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _322 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _343 = fma(_246, cbSceneParam._m0[5u].z, fma(_245, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _244));
    float _346 = fma(_246, cbSceneParam._m0[6u].z, fma(_245, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _244));
    float _349 = fma(_246, cbSceneParam._m0[7u].z, fma(_245, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _244));
    uint _362 = uint(roundEven(NORMAL.w)) * 13u;
    uint _365 = (_362 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _371 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2888 : (isnan(_2888) ? 1.0 : min(_2888, 1.0)))) * cbInstanceData._m0[_365].x;
    float _372 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2899 : (isnan(_2899) ? 1.0 : min(_2899, 1.0)))) * cbInstanceData._m0[_365].y;
    float _373 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2910 : (isnan(_2910) ? 1.0 : min(_2910, 1.0)))) * cbInstanceData._m0[_365].z;
    float _2921 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _374 = isnan(1.0) ? _2921 : (isnan(_2921) ? 1.0 : min(_2921, 1.0));
    float _2932 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _375 = isnan(1.0) ? _2932 : (isnan(_2932) ? 1.0 : min(_2932, 1.0));
    float _2943 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _376 = isnan(1.0) ? _2943 : (isnan(_2943) ? 1.0 : min(_2943, 1.0));
    vec4 _385 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _321, cbSceneParam._m0[86u].y * _322));
    float _388 = _385.x * TEXCOORD_1.w;
    float _389 = dot(vec3(_244, _245, _246), vec3(_314, _315, _316));
    float _392 = _389 * 2.0;
    float _397 = (_392 * _244) - _314;
    float _398 = (_392 * _245) - _315;
    float _399 = (_392 * _246) - _316;
    float _421 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _425 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _429 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _731;
    float _733;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    float _739;
    float _740;
    float _741;
    float _742;
    float _743;
    float _744;
    float _745;
    float _746;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _456 = fma(_429, cbModelParam._m0[26u].z, fma(_425, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _421));
        float _460 = fma(_429, cbModelParam._m0[27u].z, fma(_425, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _421));
        float _464 = fma(_429, cbModelParam._m0[28u].z, fma(_425, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _421));
        float _489 = _421 + _244;
        float _490 = _425 + _245;
        float _491 = _429 + _246;
        float _501 = fma(_491, cbModelParam._m0[26u].z, fma(_490, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _489)) - _456;
        float _502 = fma(_491, cbModelParam._m0[27u].z, fma(_490, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _489)) - _460;
        float _503 = fma(_491, cbModelParam._m0[28u].z, fma(_490, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _489)) - _464;
        float _507 = inversesqrt(dot(vec3(_501, _502, _503), vec3(_501, _502, _503)));
        float _520 = ((_507 * _501) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_456 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _521 = ((_507 * _502) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_460 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _522 = ((_507 * _503) / cbModelParam._m0[34u].z) + ((((((_464 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _525 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_520, _521, _522), 0.0);
        vec4 _532 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_520, _521, _522), 0.0);
        vec4 _539 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_520, _521, _522), 0.0);
        vec4 _546 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_520, _521, _522), 0.0);
        float _559 = exp2((_525.w + (-0.5)) * 20.0) * 2.0;
        float _560 = _559 * (_525.x + (-0.5));
        float _561 = _559 * (_525.y + (-0.5));
        float _562 = _559 * (_525.z + (-0.5));
        float _569 = exp2((_532.w + (-0.5)) * 20.0) * 2.0;
        float _570 = _569 * (_532.x + (-0.5));
        float _571 = _569 * (_532.y + (-0.5));
        float _572 = _569 * (_532.z + (-0.5));
        float _579 = exp2((_539.w + (-0.5)) * 20.0) * 2.0;
        float _580 = _579 * (_539.x + (-0.5));
        float _581 = _579 * (_539.y + (-0.5));
        float _582 = _579 * (_539.z + (-0.5));
        float _589 = exp2((_546.w + (-0.5)) * 20.0) * 2.0;
        float _590 = _589 * (_546.x + (-0.5));
        float _591 = _589 * (_546.y + (-0.5));
        float _592 = _589 * (_546.z + (-0.5));
        float _593 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
        float _594 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
        float _595 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
        float _596 = _560 * 0.5;
        float _597 = _570 * 0.5;
        float _598 = _580 * 0.5;
        float _599 = dot(vec3(_596, _597, _598), vec3(_596, _597, _598));
        float _604 = (_599 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_599);
        float _613 = (dot(vec3(_244, _245, _246), vec3(_604 * _596, _604 * _597, _604 * _598)) + 1.0) * 0.5;
        float _2969 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
        float _623 = sqrt(((_597 * _597) + (_596 * _596)) + (_598 * _598)) / (_593 + 9.9999997473787516355514526367188e-06);
        float _2980 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
        float _624 = isnan(1.0) ? _2980 : (isnan(_2980) ? 1.0 : min(_2980, 1.0));
        float _625 = _624 * 2.0;
        float _629 = (1.0 - _624) / (_624 + 1.0);
        float _2991 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
        float _630 = isnan(1.0) ? _2991 : (isnan(_2991) ? 1.0 : min(_2991, 1.0));
        float _639 = ((((1.0 - _630) * (_625 + 2.0)) * exp2(log2(isnan(1.0) ? _2969 : (isnan(_2969) ? 1.0 : min(_2969, 1.0))) * (_625 + 1.0))) + _630) * _593;
        float _640 = _561 * 0.5;
        float _641 = _571 * 0.5;
        float _642 = _581 * 0.5;
        float _643 = dot(vec3(_640, _641, _642), vec3(_640, _641, _642));
        float _648 = (_643 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_643);
        float _656 = (dot(vec3(_244, _245, _246), vec3(_648 * _640, _648 * _641, _648 * _642)) + 1.0) * 0.5;
        float _3002 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _665 = sqrt(((_641 * _641) + (_640 * _640)) + (_642 * _642)) / (_594 + 9.9999997473787516355514526367188e-06);
        float _3013 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
        float _666 = isnan(1.0) ? _3013 : (isnan(_3013) ? 1.0 : min(_3013, 1.0));
        float _667 = _666 * 2.0;
        float _671 = (1.0 - _666) / (_666 + 1.0);
        float _3024 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
        float _672 = isnan(1.0) ? _3024 : (isnan(_3024) ? 1.0 : min(_3024, 1.0));
        float _681 = ((((1.0 - _672) * (_667 + 2.0)) * exp2(log2(isnan(1.0) ? _3002 : (isnan(_3002) ? 1.0 : min(_3002, 1.0))) * (_667 + 1.0))) + _672) * _594;
        float _682 = _562 * 0.5;
        float _683 = _572 * 0.5;
        float _684 = _582 * 0.5;
        float _685 = dot(vec3(_682, _683, _684), vec3(_682, _683, _684));
        float _690 = (_685 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_685);
        float _698 = (dot(vec3(_244, _245, _246), vec3(_690 * _682, _690 * _683, _690 * _684)) + 1.0) * 0.5;
        float _3035 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _707 = sqrt(((_683 * _683) + (_682 * _682)) + (_684 * _684)) / (_595 + 9.9999997473787516355514526367188e-06);
        float _3046 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _708 = isnan(1.0) ? _3046 : (isnan(_3046) ? 1.0 : min(_3046, 1.0));
        float _709 = _708 * 2.0;
        float _713 = (1.0 - _708) / (_708 + 1.0);
        float _3057 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _714 = isnan(1.0) ? _3057 : (isnan(_3057) ? 1.0 : min(_3057, 1.0));
        float _723 = ((((1.0 - _714) * (_709 + 2.0)) * exp2(log2(isnan(1.0) ? _3035 : (isnan(_3035) ? 1.0 : min(_3035, 1.0))) * (_709 + 1.0))) + _714) * _595;
        _731 = _562;
        _733 = _561;
        _734 = _560;
        _735 = _572;
        _736 = _571;
        _737 = _570;
        _738 = _582;
        _739 = _581;
        _740 = _580;
        _741 = _595;
        _742 = _594;
        _743 = _593;
        _744 = cbModelParam._m0[36u].z * (isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0)));
        _745 = cbModelParam._m0[36u].z * (isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0)));
        _746 = cbModelParam._m0[36u].z * (isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0)));
    }
    else
    {
        _731 = _732;
        _733 = _732;
        _734 = _732;
        _735 = _732;
        _736 = _732;
        _737 = _732;
        _738 = _732;
        _739 = _732;
        _740 = _732;
        _741 = _732;
        _742 = _732;
        _743 = _732;
        _744 = 0.0;
        _745 = 0.0;
        _746 = 0.0;
    }
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _772 = fma(_429, cbModelParam._m0[30u].z, fma(_425, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _421));
        float _776 = fma(_429, cbModelParam._m0[31u].z, fma(_425, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _421));
        float _780 = fma(_429, cbModelParam._m0[32u].z, fma(_425, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _421));
        float _803 = _421 + _244;
        float _804 = _425 + _245;
        float _805 = _429 + _246;
        float _815 = fma(_805, cbModelParam._m0[30u].z, fma(_804, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _803)) - _772;
        float _816 = fma(_805, cbModelParam._m0[31u].z, fma(_804, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _803)) - _776;
        float _817 = fma(_805, cbModelParam._m0[32u].z, fma(_804, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _803)) - _780;
        float _821 = inversesqrt(dot(vec3(_815, _816, _817), vec3(_815, _816, _817)));
        float _834 = ((_821 * _815) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_772 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _835 = ((_821 * _816) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_776 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _836 = ((_821 * _817) / cbModelParam._m0[35u].z) + ((((((_780 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        float _871 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_838.x + (-0.5));
        float _873 = _871 * (_838.y + (-0.5));
        float _874 = _871 * (_838.z + (-0.5));
        float _881 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_845.x + (-0.5));
        float _883 = _881 * (_845.y + (-0.5));
        float _884 = _881 * (_845.z + (-0.5));
        float _891 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_852.x + (-0.5));
        float _893 = _891 * (_852.y + (-0.5));
        float _894 = _891 * (_852.z + (-0.5));
        float _901 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_859.x + (-0.5));
        float _903 = _901 * (_859.y + (-0.5));
        float _904 = _901 * (_859.z + (-0.5));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = _872 * 0.5;
        float _909 = _882 * 0.5;
        float _910 = _892 * 0.5;
        float _911 = dot(vec3(_908, _909, _910), vec3(_908, _909, _910));
        float _916 = (_911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_911);
        float _924 = (dot(vec3(_244, _245, _246), vec3(_916 * _908, _916 * _909, _916 * _910)) + 1.0) * 0.5;
        float _3098 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _933 = sqrt(((_909 * _909) + (_908 * _908)) + (_910 * _910)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3109 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3109 : (isnan(_3109) ? 1.0 : min(_3109, 1.0));
        float _935 = _934 * 2.0;
        float _939 = (1.0 - _934) / (_934 + 1.0);
        float _3120 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3120 : (isnan(_3120) ? 1.0 : min(_3120, 1.0));
        float _949 = ((((1.0 - _940) * (_935 + 2.0)) * exp2(log2(isnan(1.0) ? _3098 : (isnan(_3098) ? 1.0 : min(_3098, 1.0))) * (_935 + 1.0))) + _940) * _905;
        float _950 = _873 * 0.5;
        float _951 = _883 * 0.5;
        float _952 = _893 * 0.5;
        float _953 = dot(vec3(_950, _951, _952), vec3(_950, _951, _952));
        float _958 = (_953 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_953);
        float _966 = (dot(vec3(_244, _245, _246), vec3(_958 * _950, _958 * _951, _958 * _952)) + 1.0) * 0.5;
        float _3131 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _975 = sqrt(((_951 * _951) + (_950 * _950)) + (_952 * _952)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3142 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3142 : (isnan(_3142) ? 1.0 : min(_3142, 1.0));
        float _977 = _976 * 2.0;
        float _981 = (1.0 - _976) / (_976 + 1.0);
        float _3153 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3153 : (isnan(_3153) ? 1.0 : min(_3153, 1.0));
        float _991 = ((((1.0 - _982) * (_977 + 2.0)) * exp2(log2(isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0))) * (_977 + 1.0))) + _982) * _906;
        float _992 = _874 * 0.5;
        float _993 = _884 * 0.5;
        float _994 = _894 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1008 = (dot(vec3(_244, _245, _246), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3164 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1017 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3175 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3186 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0))) * (_1019 + 1.0))) + _1024) * _907;
        _1041 = _874;
        _1042 = _873;
        _1043 = _872;
        _1044 = _884;
        _1045 = _883;
        _1046 = _882;
        _1047 = _894;
        _1048 = _893;
        _1049 = _892;
        _1050 = _907;
        _1051 = _906;
        _1052 = _905;
        _1053 = cbModelParam._m0[36u].w * (isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0)));
        _1054 = cbModelParam._m0[36u].w * (isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)));
        _1055 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
    }
    else
    {
        _1041 = _732;
        _1042 = _732;
        _1043 = _732;
        _1044 = _732;
        _1045 = _732;
        _1046 = _732;
        _1047 = _732;
        _1048 = _732;
        _1049 = _732;
        _1050 = _732;
        _1051 = _732;
        _1052 = _732;
        _1053 = 0.0;
        _1054 = 0.0;
        _1055 = 0.0;
    }
    float _1065 = (cbModelParam._m0[1u].x * (_1053 - _744)) + _744;
    float _1066 = (cbModelParam._m0[1u].x * (_1054 - _745)) + _745;
    float _1067 = (cbModelParam._m0[1u].x * (_1055 - _746)) + _746;
    float _1088 = fma(_1067, cbSceneParam._m0[89u].z, fma(_1066, cbSceneParam._m0[89u].y, _1065 * cbSceneParam._m0[89u].x));
    float _1091 = fma(_1067, cbSceneParam._m0[90u].z, fma(_1066, cbSceneParam._m0[90u].y, _1065 * cbSceneParam._m0[90u].x));
    float _1094 = fma(_1067, cbSceneParam._m0[91u].z, fma(_1066, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1065));
    float _1109 = _397 * 0.5;
    float _1110 = _398 * 0.5;
    float _1111 = _399 * 0.5;
    float _1112 = dot(vec4(_1109, _1110, _1111, 1.0), vec4(_1043, _1046, _1049, _1052));
    float _1115 = dot(vec4(_1109, _1110, _1111, 1.0), vec4(_1042, _1045, _1048, _1051));
    float _1118 = dot(vec4(_1109, _1110, _1111, 1.0), vec4(_1041, _1044, _1047, _1050));
    float _1152;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1125 = dot(vec4(_1109, _1110, _1111, 1.0), vec4(_731, _735, _738, _741));
        float _1129 = dot(vec4(_1109, _1110, _1111, 1.0), vec4(_733, _736, _739, _742));
        float _1133 = dot(vec4(_1109, _1110, _1111, 1.0), vec4(_734, _737, _740, _743));
        float _1140 = dot(vec4(cbModelParam._m0[39u]), vec4(_1109, _1110, _1111, 1.0));
        _1152 = dot(vec3(isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)), isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)), isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1140) ? 0.0 : (isnan(0.0) ? _1140 : max(0.0, _1140))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1152 = 1.0;
    }
    float _1163;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1154 = dot(vec4(cbModelParam._m0[40u]), vec4(_1109, _1110, _1111, 1.0));
        _1163 = dot(vec3(isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)), isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)), isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1154) ? 0.0 : (isnan(0.0) ? _1154 : max(0.0, _1154))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1163 = 1.0;
    }
    float _1167 = (_1163 * cbModelParam._m0[1u].x) + (_1152 * (1.0 - cbModelParam._m0[1u].x));
    float _1176 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1258;
    float _1260;
    float _1262;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1225 = fma(_429, cbModelParam._m0[13u].z, fma(_425, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _421)) + cbModelParam._m0[13u].w;
        float _1229 = fma(_429, cbModelParam._m0[14u].z, fma(_425, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _421)) + cbModelParam._m0[14u].w;
        float _1233 = fma(_429, cbModelParam._m0[15u].z, fma(_425, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _421)) + cbModelParam._m0[15u].w;
        float _1236 = fma(_399, cbModelParam._m0[13u].z, fma(_398, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _397));
        float _1239 = fma(_399, cbModelParam._m0[14u].z, fma(_398, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _397));
        float _1242 = fma(_399, cbModelParam._m0[15u].z, fma(_398, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _397));
        float _1268;
        if (_1236 > 0.0)
        {
            _1268 = abs((1.0 - _1225) / _1236);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1236 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1225 + 1.0) / _1236);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1268 = frontier_phi_14_12_ladder;
        }
        float _1496;
        if (_1239 > 0.0)
        {
            _1496 = abs((1.0 - _1229) / _1239);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1239 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1229 + 1.0) / _1239);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1496 = frontier_phi_23_19_ladder;
        }
        float _1688;
        if (_1242 > 0.0)
        {
            _1688 = abs((1.0 - _1233) / _1242);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1242 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1233 + 1.0) / _1242);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1688 = frontier_phi_35_30_ladder;
        }
        float _1690 = isnan(_1496) ? _1268 : (isnan(_1268) ? _1496 : min(_1268, _1496));
        float _1691 = isnan(_1688) ? _1690 : (isnan(_1690) ? _1688 : min(_1690, _1688));
        float _1695 = (_1691 * _1236) + _1225;
        float _1696 = (_1691 * _1239) + _1229;
        float _1697 = (_1691 * _1242) + _1233;
        float _1698 = _1691 * 9.9999997473787516355514526367188e-05;
        float _1700 = (-1.0) - _1698;
        float _1702 = _1698 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1697 > _1702) || ((_1697 < _1700) || ((_1696 > _1702) || ((_1696 < _1700) || ((_1695 < _1700) || (_1695 > _1702))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1794 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1697, cbModelParam._m0[9u].z, fma(_1696, cbModelParam._m0[9u].y, _1695 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1697, cbModelParam._m0[10u].z, fma(_1696, cbModelParam._m0[10u].y, _1695 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1697, cbModelParam._m0[11u].z, fma(_1696, cbModelParam._m0[11u].y, _1695 * cbModelParam._m0[11u].x))), _1176);
            frontier_phi_13_35_ladder = _1794.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1794.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1794.x * cbModelParam._m0[1u].y;
        }
        _1258 = frontier_phi_13_35_ladder_2;
        _1260 = frontier_phi_13_35_ladder_1;
        _1262 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1246 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_397, _398, _399), _1176);
        _1258 = _1246.x * cbModelParam._m0[1u].y;
        _1260 = _1246.y * cbModelParam._m0[1u].y;
        _1262 = _1246.z * cbModelParam._m0[1u].y;
    }
    float _1265 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1358;
    float _1360;
    float _1362;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1322 = fma(_429, cbModelParam._m0[21u].z, fma(_425, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _421)) + cbModelParam._m0[21u].w;
        float _1326 = fma(_429, cbModelParam._m0[22u].z, fma(_425, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _421)) + cbModelParam._m0[22u].w;
        float _1330 = fma(_429, cbModelParam._m0[23u].z, fma(_425, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _421)) + cbModelParam._m0[23u].w;
        float _1333 = fma(_399, cbModelParam._m0[21u].z, fma(_398, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _397));
        float _1336 = fma(_399, cbModelParam._m0[22u].z, fma(_398, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _397));
        float _1339 = fma(_399, cbModelParam._m0[23u].z, fma(_398, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _397));
        float _1501;
        if (_1333 > 0.0)
        {
            _1501 = abs((1.0 - _1322) / _1333);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1333 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1322 + 1.0) / _1333);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1501 = frontier_phi_25_21_ladder;
        }
        float _1715;
        if (_1336 > 0.0)
        {
            _1715 = abs((1.0 - _1326) / _1336);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1336 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1326 + 1.0) / _1336);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1715 = frontier_phi_37_32_ladder;
        }
        float _1866;
        if (_1339 > 0.0)
        {
            _1866 = abs((1.0 - _1330) / _1339);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1339 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1330 + 1.0) / _1339);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1866 = frontier_phi_46_43_ladder;
        }
        float _1868 = isnan(_1715) ? _1501 : (isnan(_1501) ? _1715 : min(_1501, _1715));
        float _1869 = isnan(_1866) ? _1868 : (isnan(_1868) ? _1866 : min(_1868, _1866));
        float _1873 = (_1869 * _1333) + _1322;
        float _1874 = (_1869 * _1336) + _1326;
        float _1875 = (_1869 * _1339) + _1330;
        float _1876 = _1869 * 9.9999997473787516355514526367188e-05;
        float _1877 = (-1.0) - _1876;
        float _1879 = _1876 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1875 > _1879) || ((_1875 < _1877) || ((_1874 > _1879) || ((_1874 < _1877) || ((_1873 < _1877) || (_1873 > _1879))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2076 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1875, cbModelParam._m0[17u].z, fma(_1874, cbModelParam._m0[17u].y, _1873 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1875, cbModelParam._m0[18u].z, fma(_1874, cbModelParam._m0[18u].y, _1873 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1875, cbModelParam._m0[19u].z, fma(_1874, cbModelParam._m0[19u].y, _1873 * cbModelParam._m0[19u].x))), _1265);
            frontier_phi_22_46_ladder = _2076.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2076.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2076.x * cbModelParam._m0[1u].z;
        }
        _1358 = frontier_phi_22_46_ladder_2;
        _1360 = frontier_phi_22_46_ladder_1;
        _1362 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1342 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_397, _398, _399), _1265);
        _1358 = _1342.x * cbModelParam._m0[1u].z;
        _1360 = _1342.y * cbModelParam._m0[1u].z;
        _1362 = _1342.z * cbModelParam._m0[1u].z;
    }
    float _1374 = _388 * 0.01200000010430812835693359375;
    float _1376 = _1374 * ((cbModelParam._m0[1u].w * (_1358 - _1258)) + _1258);
    float _1377 = _1374 * ((cbModelParam._m0[1u].w * (_1360 - _1260)) + _1260);
    float _1378 = _1374 * ((cbModelParam._m0[1u].w * (_1362 - _1262)) + _1262);
    float _1381 = fma(_1378, cbSceneParam._m0[89u].z, fma(_1377, cbSceneParam._m0[89u].y, _1376 * cbSceneParam._m0[89u].x));
    float _1384 = fma(_1378, cbSceneParam._m0[90u].z, fma(_1377, cbSceneParam._m0[90u].y, _1376 * cbSceneParam._m0[90u].x));
    float _1387 = fma(_1378, cbSceneParam._m0[91u].z, fma(_1377, cbSceneParam._m0[91u].y, _1376 * cbSceneParam._m0[91u].x));
    vec4 _1395 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_321, _322));
    float _1397 = _1395.w;
    float _1409 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1397);
    float _1410 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1397);
    float _1411 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1397);
    uvec4 _1415 = floatBitsToUint(cbInstanceData._m0[_362 + 5u]);
    uint _1417 = _1415.x * 14u;
    uint _1418 = _1417 + 13u;
    float _1425 = _388 + (-1.0);
    float _1431 = (cbLight._m0[_1418].x * _1425) + 1.0;
    float _1432 = (cbLight._m0[_1418].y * _1425) + 1.0;
    float _1433 = (cbLight._m0[_1418].z * _1425) + 1.0;
    float _1434 = (cbLight._m0[_1418].w * _1425) + 1.0;
    uint _1435 = _1417 + 5u;
    float _1441 = isnan(1.0) ? _1432 : (isnan(_1432) ? 1.0 : min(_1432, 1.0));
    uint _1445 = _1417 + 4u;
    float _1455 = isnan(1.0) ? _1431 : (isnan(_1431) ? 1.0 : min(_1431, 1.0));
    uint _1459 = _1417 | 1u;
    float _1470 = dot(vec3(cbLight._m0[_1417].xyz), vec3(_244, _245, _246));
    float _1473 = dot(vec3(cbLight._m0[_1459].xyz), vec3(_244, _245, _246));
    float _3322 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
    float _3333 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
    float _1478 = (isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0))) * 0.3183098733425140380859375;
    float _1480 = (isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0))) * 0.3183098733425140380859375;
    float _1487 = ((cbLight._m0[_1435].x * _1441) * _1480) + (((cbLight._m0[_1445].x * _1409) * _1455) * _1478);
    float _1488 = ((_1441 * cbLight._m0[_1435].y) * _1480) + (((cbLight._m0[_1445].y * _1410) * _1455) * _1478);
    float _1489 = ((_1441 * cbLight._m0[_1435].z) * _1480) + (((cbLight._m0[_1445].z * _1411) * _1455) * _1478);
    uvec4 _1493 = floatBitsToUint(cbLight._m0[_1417 + 12u]);
    bool _1495 = _1493.x == 0u;
    float _1506;
    float _1508;
    float _1510;
    if (_1495)
    {
        _1506 = _1487;
        _1508 = _1488;
        _1510 = _1489;
    }
    else
    {
        uint _1514 = _1417 + 6u;
        float _1530 = (dot(vec3(cbLight._m0[_1417 + 2u].xyz), vec3(_244, _245, _246)) * 0.5) + 0.5;
        float _1531 = _1530 * _1530;
        float _3344 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
        float _1533 = isnan(1.0) ? _1433 : (isnan(_1433) ? 1.0 : min(_1433, 1.0));
        _1506 = (((cbLight._m0[_1514].x * 0.3183098733425140380859375) * _1532) * _1533) + _1487;
        _1508 = (((cbLight._m0[_1514].y * 0.3183098733425140380859375) * _1532) * _1533) + _1488;
        _1510 = (((cbLight._m0[_1514].z * 0.3183098733425140380859375) * _1532) * _1533) + _1489;
    }
    bool _1513 = _1493.y == 0u;
    float _1551;
    float _1553;
    float _1555;
    if (_1513)
    {
        _1551 = _1506;
        _1553 = _1508;
        _1555 = _1510;
    }
    else
    {
        uint _1659 = _1417 + 7u;
        float _1675 = (dot(vec3(cbLight._m0[_1417 + 3u].xyz), vec3(_244, _245, _246)) * 0.5) + 0.5;
        float _1676 = _1675 * _1675;
        float _3360 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
        float _1678 = isnan(1.0) ? _1434 : (isnan(_1434) ? 1.0 : min(_1434, 1.0));
        _1551 = (((cbLight._m0[_1659].x * 0.3183098733425140380859375) * _1677) * _1678) + _1506;
        _1553 = (((cbLight._m0[_1659].y * 0.3183098733425140380859375) * _1677) * _1678) + _1508;
        _1555 = (((cbLight._m0[_1659].z * 0.3183098733425140380859375) * _1677) * _1678) + _1510;
    }
    uint _1557 = _1417 + 8u;
    float _1563 = cbLight._m0[_1417].x + _314;
    float _1564 = cbLight._m0[_1417].y + _315;
    float _1565 = cbLight._m0[_1417].z + _316;
    float _1569 = inversesqrt(dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565)));
    float _1573 = dot(vec3(_244, _245, _246), vec3(cbLight._m0[_1417].xyz));
    float _3376 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
    float _1576 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
    float _3387 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _1577 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
    float _1578 = dot(vec3(cbLight._m0[_1417].xyz), vec3(_1563 * _1569, _1564 * _1569, _1565 * _1569));
    float _3398 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
    float _1589 = (exp2(log2(1.0 - (isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1595 = (0.5 / ((_1576 + 9.9999999392252902907785028219223e-09) + _1577)) * _1576;
    float _3409 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
    float _1597 = (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))) * 0.31831014156341552734375;
    uint _1611 = _1417 + 9u;
    float _1617 = cbLight._m0[_1459].x + _314;
    float _1618 = cbLight._m0[_1459].y + _315;
    float _1619 = cbLight._m0[_1459].z + _316;
    float _1623 = inversesqrt(dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619)));
    float _1627 = dot(vec3(_244, _245, _246), vec3(cbLight._m0[_1459].xyz));
    float _3420 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
    float _1630 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
    float _1631 = dot(vec3(cbLight._m0[_1459].xyz), vec3(_1617 * _1623, _1618 * _1623, _1619 * _1623));
    float _3431 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
    float _1640 = (exp2(log2(1.0 - (isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1644 = (0.5 / ((_1630 + 9.9999999392252902907785028219223e-09) + _1577)) * _1630;
    float _3442 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
    float _1646 = (isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * 0.31831014156341552734375;
    float _1656 = (((_1640 * cbLight._m0[_1611].x) * _1646) * _1441) + ((((cbLight._m0[_1557].x * _1409) * _1589) * _1597) * _1455);
    float _1657 = (((_1640 * cbLight._m0[_1611].y) * _1646) * _1441) + ((((cbLight._m0[_1557].y * _1410) * _1589) * _1597) * _1455);
    float _1658 = (((_1640 * cbLight._m0[_1611].z) * _1646) * _1441) + ((((cbLight._m0[_1557].z * _1411) * _1589) * _1597) * _1455);
    float _1720;
    float _1722;
    float _1724;
    if (_1495)
    {
        _1720 = _1656;
        _1722 = _1657;
        _1724 = _1658;
    }
    else
    {
        uint _1726 = _1417 + 10u;
        uint _1732 = _1417 + 2u;
        float _1738 = cbLight._m0[_1732].x + _314;
        float _1739 = cbLight._m0[_1732].y + _315;
        float _1740 = cbLight._m0[_1732].z + _316;
        float _1744 = inversesqrt(dot(vec3(_1738, _1739, _1740), vec3(_1738, _1739, _1740)));
        float _1748 = dot(vec3(_244, _245, _246), vec3(cbLight._m0[_1732].xyz));
        float _3453 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1751 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _1752 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_1738 * _1744, _1739 * _1744, _1740 * _1744));
        float _3464 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1761 = (exp2(log2(1.0 - (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1765 = (0.5 / ((_1751 + 9.9999999392252902907785028219223e-09) + _1577)) * _1751;
        float _3475 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1767 = (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * 0.31831014156341552734375;
        float _1768 = isnan(1.0) ? _1433 : (isnan(_1433) ? 1.0 : min(_1433, 1.0));
        _1720 = (((_1761 * cbLight._m0[_1726].x) * _1767) * _1768) + _1656;
        _1722 = (((_1761 * cbLight._m0[_1726].y) * _1767) * _1768) + _1657;
        _1724 = (((_1761 * cbLight._m0[_1726].z) * _1767) * _1768) + _1658;
    }
    float _1803;
    float _1805;
    float _1807;
    if (_1513)
    {
        _1803 = _1720;
        _1805 = _1722;
        _1807 = _1724;
    }
    else
    {
        uint _1814 = _1417 + 11u;
        uint _1820 = _1417 + 3u;
        float _1826 = cbLight._m0[_1820].x + _314;
        float _1827 = cbLight._m0[_1820].y + _315;
        float _1828 = cbLight._m0[_1820].z + _316;
        float _1832 = inversesqrt(dot(vec3(_1826, _1827, _1828), vec3(_1826, _1827, _1828)));
        float _1836 = dot(vec3(_244, _245, _246), vec3(cbLight._m0[_1820].xyz));
        float _3491 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1839 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _1840 = dot(vec3(cbLight._m0[_1820].xyz), vec3(_1826 * _1832, _1827 * _1832, _1828 * _1832));
        float _3502 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1849 = (exp2(log2(1.0 - (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1853 = (0.5 / ((_1839 + 9.9999999392252902907785028219223e-09) + _1577)) * _1839;
        float _3513 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1855 = (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * 0.31831014156341552734375;
        float _1856 = isnan(1.0) ? _1434 : (isnan(_1434) ? 1.0 : min(_1434, 1.0));
        _1803 = (((_1849 * cbLight._m0[_1814].x) * _1855) * _1856) + _1720;
        _1805 = (((_1849 * cbLight._m0[_1814].y) * _1855) * _1856) + _1722;
        _1807 = (((_1849 * cbLight._m0[_1814].z) * _1855) * _1856) + _1724;
    }
    float _1991;
    float _1993;
    float _1995;
    float _1997;
    float _1999;
    float _2001;
    if (_1415.y == 0u)
    {
        float _1931 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1932 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1931;
        float _1933 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1931;
        float _1934 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1931;
        uvec4 _1946 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1947 = _1946.x;
        uint _1958 = uint((float(_1946.y) * floor(float(uint(cbSceneParam._m0[85u].y * _322) / _1947))) + floor(float(uint(cbSceneParam._m0[85u].x * _321) / _1947)));
        float _1968 = (log2(_1934 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1969 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        uint _1972 = uint(isnan(14.0) ? _1969 : (isnan(_1969) ? 14.0 : min(_1969, 14.0)));
        uvec4 _1977 = texelFetch(g_lightClusterGridBuffer, int(((_1972 << 2u) + (_1958 << 6u)) >> 2u));
        uint _1978 = _1977.x;
        uint _1979 = _1946.z;
        float _2081;
        float _2083;
        float _2085;
        float _2087;
        float _2089;
        float _2091;
        if (((((1u << ((_1979 >> 4u) & 15u)) + 4294967295u) & _1978) == 0u) || ((_1979 & 240u) == 0u))
        {
            _2081 = 0.0;
            _2083 = 0.0;
            _2085 = 0.0;
            _2087 = 0.0;
            _2089 = 0.0;
            _2091 = 0.0;
        }
        else
        {
            float _2082;
            float _2084;
            float _2086;
            float _2088;
            float _2090;
            float _2092;
            float _2223 = 0.0;
            float _2224 = 0.0;
            float _2225 = 0.0;
            float _2226 = 0.0;
            float _2227 = 0.0;
            float _2228 = 0.0;
            uint _2229 = 0u;
            uint _2238;
            bool _2239;
            for (;;)
            {
                _2238 = texelFetch(g_lightClassification, int((((_1972 << 5u) + (_1958 << 9u)) + (_2229 << 2u)) >> 2u)).x;
                _2239 = _2238 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2239)
                {
                    frontier_phi_61_pred = _2223;
                    frontier_phi_61_pred_1 = _2228;
                    frontier_phi_61_pred_2 = _2227;
                    frontier_phi_61_pred_3 = _2226;
                    frontier_phi_61_pred_4 = _2225;
                    frontier_phi_61_pred_5 = _2224;
                }
                else
                {
                    float _2347;
                    float _2348;
                    float _2349;
                    float _2350;
                    float _2351;
                    float _2352;
                    uint _2353;
                    _2347 = _2223;
                    _2348 = _2224;
                    _2349 = _2225;
                    _2350 = _2226;
                    _2351 = _2227;
                    _2352 = _2228;
                    _2353 = _2238;
                    float _2279;
                    float _2280;
                    float _2281;
                    float _2282;
                    float _2283;
                    float _2284;
                    for (;;)
                    {
                        uint _2357 = uint(findLSB(_2353)) + (_2229 << 5u);
                        uint _2354 = (_2353 + 4294967295u) & _2353;
                        uint _2359 = _2357 * 48u;
                        vec4 _2373 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2359)).x, texelFetch(g_PointLightRenderingBuffer, int(_2359 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2359 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2359 + 3u)).x));
                        uint _2379 = (_2357 * 48u) + 4u;
                        vec4 _2392 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2379)).x, texelFetch(g_PointLightRenderingBuffer, int(_2379 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2379 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2379 + 3u)).x));
                        uint _2398 = (_2357 * 48u) + 8u;
                        vec3 _2409 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2398)).x, texelFetch(g_PointLightRenderingBuffer, int(_2398 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2398 + 2u)).x));
                        float _2413 = _2373.x - _1932;
                        float _2414 = _2373.y - _1933;
                        float _2415 = _2373.z - _1934;
                        float _2416 = dot(vec3(_2413, _2414, _2415), vec3(_2413, _2414, _2415));
                        float _2419 = inversesqrt(_2416);
                        float _2428 = 1.0 - (_2416 * _2373.w);
                        float _3539 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
                        float _2429 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
                        float _2430 = sqrt(_2416) * _2392.w;
                        float _2433 = 1.39999997615814208984375 / (_2430 + 1.39999997615814208984375);
                        float _2434 = _2433 * _2433;
                        float _2437 = ((1.0 - _2434) * dot(vec3(_343, _346, _349), vec3(_2419 * _2413, _2419 * _2414, _2419 * _2415))) + _2434;
                        float _2440 = _2430 * _2430;
                        float _2444 = ((isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0))) * _2429) / ((_2440 * 0.699999988079071044921875) + 1.0);
                        float _2448 = (-0.0) - _1932;
                        float _2449 = (-0.0) - _1933;
                        float _2450 = (-0.0) - _1934;
                        float _2454 = inversesqrt(dot(vec3(_2448, _2449, _2450), vec3(_2448, _2449, _2450)));
                        float _2458 = dot(vec3(_343, _346, _349), vec3(_2454 * _2448, _2454 * _2449, _2454 * _2450));
                        float _3555 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
                        float _3566 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
                        float _2462 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
                        float _2466 = (0.5 / (((isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) + 9.9999999392252902907785028219223e-09) + _2462)) * _2462;
                        float _3577 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
                        float _2475 = (((isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * 3.1415927410125732421875) / ((_2440 * 2.1991131305694580078125) + 3.141590118408203125)) * _2429;
                        _2282 = (_2444 * _2392.x) + _2350;
                        _2283 = (_2444 * _2392.y) + _2351;
                        _2284 = (_2444 * _2392.z) + _2352;
                        _2279 = (_2475 * _2409.x) + _2347;
                        _2280 = (_2475 * _2409.y) + _2348;
                        _2281 = (_2475 * _2409.z) + _2349;
                        if (_2354 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2347 = _2279;
                            _2348 = _2280;
                            _2349 = _2281;
                            _2350 = _2282;
                            _2351 = _2283;
                            _2352 = _2284;
                            _2353 = _2354;
                        }
                    }
                    frontier_phi_61_pred = _2279;
                    frontier_phi_61_pred_1 = _2284;
                    frontier_phi_61_pred_2 = _2283;
                    frontier_phi_61_pred_3 = _2282;
                    frontier_phi_61_pred_4 = _2281;
                    frontier_phi_61_pred_5 = _2280;
                }
                _2082 = frontier_phi_61_pred;
                _2092 = frontier_phi_61_pred_1;
                _2090 = frontier_phi_61_pred_2;
                _2088 = frontier_phi_61_pred_3;
                _2086 = frontier_phi_61_pred_4;
                _2084 = frontier_phi_61_pred_5;
                uint _2230 = _2229 + 1u;
                if (_2230 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2223 = _2082;
                    _2224 = _2084;
                    _2225 = _2086;
                    _2226 = _2088;
                    _2227 = _2090;
                    _2228 = _2092;
                    _2229 = _2230;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2081 = _2082;
            _2083 = _2084;
            _2085 = _2086;
            _2087 = _2088;
            _2089 = _2090;
            _2091 = _2092;
        }
        uvec4 _2095 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2096 = _2095.z;
        uint _2098 = (_2096 >> 8u) & 15u;
        float _2194;
        float _2196;
        float _2198;
        float _2200;
        float _2202;
        float _2204;
        if (((4294967295u << _2098) & _1978) == 0u)
        {
            _2194 = _2081;
            _2196 = _2083;
            _2198 = _2085;
            _2200 = _2087;
            _2202 = _2089;
            _2204 = _2091;
        }
        else
        {
            float _2219 = inversesqrt(dot(vec3(_1932, _1933, _1934), vec3(_1932, _1933, _1934)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2098 < ((_2096 >> 12u) & 15u))
            {
                float _2195;
                float _2197;
                float _2199;
                float _2201;
                float _2203;
                float _2205;
                float _2330 = _2081;
                float _2331 = _2083;
                float _2332 = _2085;
                float _2333 = _2087;
                float _2334 = _2089;
                float _2335 = _2091;
                uint _2336 = _2098;
                uint _2345;
                bool _2346;
                for (;;)
                {
                    _2345 = texelFetch(g_lightClassification, int((((_1972 << 5u) + (_1958 << 9u)) + (_2336 << 2u)) >> 2u)).x;
                    _2346 = _2345 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2346)
                    {
                        frontier_phi_67_pred = _2333;
                        frontier_phi_67_pred_1 = _2334;
                        frontier_phi_67_pred_2 = _2335;
                        frontier_phi_67_pred_3 = _2332;
                        frontier_phi_67_pred_4 = _2331;
                        frontier_phi_67_pred_5 = _2330;
                    }
                    else
                    {
                        float _2480;
                        float _2481;
                        float _2482;
                        float _2483;
                        float _2484;
                        float _2485;
                        float _2732;
                        float _2733;
                        float _2734;
                        float _2735;
                        float _2736;
                        float _2737;
                        float _2493 = _2330;
                        float _2494 = _2331;
                        float _2495 = _2332;
                        float _2496 = _2333;
                        float _2497 = _2334;
                        float _2498 = _2335;
                        uint _2499 = _2345;
                        uint _2500;
                        vec4 _2525;
                        float _2526;
                        vec4 _2541;
                        vec3 _2553;
                        vec4 _2569;
                        vec4 _2585;
                        float _2632;
                        bool _2633;
                        for (;;)
                        {
                            uint _2510 = ((_2336 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2499));
                            _2500 = (_2499 + 4294967295u) & _2499;
                            uint _2512 = _2510 * 40u;
                            _2525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2512 + 3u)).x));
                            _2526 = _2525.w;
                            uint _2528 = (_2510 * 40u) + 4u;
                            _2541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2528 + 3u)).x));
                            uint _2543 = (_2510 * 40u) + 8u;
                            _2553 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2543 + 2u)).x));
                            uint _2556 = (_2510 * 40u) + 16u;
                            _2569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2556 + 3u)).x));
                            uint _2572 = (_2510 * 40u) + 20u;
                            _2585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2572 + 3u)).x));
                            uint _2588 = (_2510 * 40u) + 24u;
                            vec4 _2601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 3u)).x));
                            uint _2607 = (_2510 * 40u) + 28u;
                            vec4 _2620 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2607 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2607 + 3u)).x));
                            _2632 = fma(_1934, _2620.z, fma(_1933, _2620.y, _2620.x * _1932)) + _2620.w;
                            _2633 = !((fma(_1934, _2601.z, fma(_1933, _2601.y, _2601.x * _1932)) + _2601.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2633)
                            {
                                float _2660 = _2525.x - _1932;
                                float _2661 = _2525.y - _1933;
                                float _2662 = _2525.z - _1934;
                                float _2663 = dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662));
                                float _2666 = inversesqrt(_2663);
                                float _2667 = _2666 * _2660;
                                float _2668 = _2666 * _2661;
                                float _2669 = _2666 * _2662;
                                float _2673 = 1.0 - (_2663 / (_2526 * _2526));
                                float _3588 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
                                float _2674 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
                                float _2678 = sqrt(_2663) * _2541.w;
                                float _2680 = 1.39999997615814208984375 / (_2678 + 1.39999997615814208984375);
                                float _2681 = _2680 * _2680;
                                float _2682 = 1.0 - _2681;
                                float _2684 = (_2682 * dot(vec3(_2667, _2668, _2669), vec3(_343, _346, _349))) + _2681;
                                float _2687 = _2678 * _2678;
                                float _2691 = (fma(_1934, _2569.z, fma(_1933, _2569.y, _2569.x * _1932)) + _2569.w) / _2632;
                                float _2692 = (fma(_1934, _2585.z, fma(_1933, _2585.y, _2585.x * _1932)) + _2585.w) / _2632;
                                float _2696 = 1.0 - dot(vec2(_2691, _2692), vec2(_2691, _2692));
                                float _3604 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
                                float _2697 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
                                float _2698 = _2697 * (((isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0))) * _2674) / ((_2687 * 0.699999988079071044921875) + 1.0));
                                float _2708 = dot(vec3(_343, _346, _349), vec3((-0.0) - (_1932 * _2219), (-0.0) - (_1933 * _2219), (-0.0) - (_1934 * _2219)));
                                float _3615 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
                                float _2716 = (_2682 * dot(vec3(_343, _346, _349), vec3(_2667, _2668, _2669))) + _2681;
                                float _3626 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
                                float _2717 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
                                float _2721 = (0.5 / (((isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))) + 9.9999999392252902907785028219223e-09) + _2717)) * _2717;
                                float _3637 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
                                float _2728 = (_2697 * _2674) * (((isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * 3.1415927410125732421875) / ((_2687 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2728 * _2553.x;
                                frontier_phi_73_pred_1 = _2728 * _2553.y;
                                frontier_phi_73_pred_2 = _2698 * _2541.z;
                                frontier_phi_73_pred_3 = _2698 * _2541.y;
                                frontier_phi_73_pred_4 = _2698 * _2541.x;
                                frontier_phi_73_pred_5 = _2728 * _2553.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2732 = frontier_phi_73_pred;
                            _2733 = frontier_phi_73_pred_1;
                            _2737 = frontier_phi_73_pred_2;
                            _2736 = frontier_phi_73_pred_3;
                            _2735 = frontier_phi_73_pred_4;
                            _2734 = frontier_phi_73_pred_5;
                            _2483 = _2735 + _2496;
                            _2484 = _2736 + _2497;
                            _2485 = _2737 + _2498;
                            _2480 = _2732 + _2493;
                            _2481 = _2733 + _2494;
                            _2482 = _2734 + _2495;
                            if (_2500 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2493 = _2480;
                                _2494 = _2481;
                                _2495 = _2482;
                                _2496 = _2483;
                                _2497 = _2484;
                                _2498 = _2485;
                                _2499 = _2500;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2483;
                        frontier_phi_67_pred_1 = _2484;
                        frontier_phi_67_pred_2 = _2485;
                        frontier_phi_67_pred_3 = _2482;
                        frontier_phi_67_pred_4 = _2481;
                        frontier_phi_67_pred_5 = _2480;
                    }
                    _2201 = frontier_phi_67_pred;
                    _2203 = frontier_phi_67_pred_1;
                    _2205 = frontier_phi_67_pred_2;
                    _2199 = frontier_phi_67_pred_3;
                    _2197 = frontier_phi_67_pred_4;
                    _2195 = frontier_phi_67_pred_5;
                    uint _2337 = _2336 + 1u;
                    if (_2337 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2330 = _2195;
                        _2331 = _2197;
                        _2332 = _2199;
                        _2333 = _2201;
                        _2334 = _2203;
                        _2335 = _2205;
                        _2336 = _2337;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2203;
                frontier_phi_55_56_ladder_1 = _2205;
                frontier_phi_55_56_ladder_2 = _2201;
                frontier_phi_55_56_ladder_3 = _2199;
                frontier_phi_55_56_ladder_4 = _2197;
                frontier_phi_55_56_ladder_5 = _2195;
            }
            else
            {
                frontier_phi_55_56_ladder = _2089;
                frontier_phi_55_56_ladder_1 = _2091;
                frontier_phi_55_56_ladder_2 = _2087;
                frontier_phi_55_56_ladder_3 = _2085;
                frontier_phi_55_56_ladder_4 = _2083;
                frontier_phi_55_56_ladder_5 = _2081;
            }
            _2194 = frontier_phi_55_56_ladder_5;
            _2196 = frontier_phi_55_56_ladder_4;
            _2198 = frontier_phi_55_56_ladder_3;
            _2200 = frontier_phi_55_56_ladder_2;
            _2202 = frontier_phi_55_56_ladder;
            _2204 = frontier_phi_55_56_ladder_1;
        }
        float _2209 = isnan(1.0) ? _388 : (isnan(_388) ? 1.0 : min(_388, 1.0));
        _1991 = (_2209 * _2200) + _1551;
        _1993 = (_2209 * _2202) + _1553;
        _1995 = (_2209 * _2204) + _1555;
        _1997 = ((_2194 * 0.039999999105930328369140625) * _2209) + _1803;
        _1999 = ((_2196 * 0.039999999105930328369140625) * _2209) + _1805;
        _2001 = ((_2198 * 0.039999999105930328369140625) * _2209) + _1807;
    }
    else
    {
        _1991 = _1551;
        _1993 = _1553;
        _1995 = _1555;
        _1997 = _1803;
        _1999 = _1805;
        _2001 = _1807;
    }
    float _3653 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3664 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3675 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3686 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _2026 = cbInstanceData._m0[_362 + 6u].w * (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0)));
    float _2031 = _321 / cbSceneParam._m0[86u].x;
    float _2032 = _322 / cbSceneParam._m0[86u].y;
    vec4 _2046 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2031, _2032, (log2((isnan(cbSceneParam._m0[77u].w) ? _255 : (isnan(_255) ? cbSceneParam._m0[77u].w : min(_255, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2048 = _2046.x;
    float _2049 = _2046.y;
    float _2050 = _2046.z;
    float _2051 = _2046.w;
    float _2143;
    float _2145;
    float _2147;
    float _2149;
    if (_255 > cbSceneParam._m0[78u].w)
    {
        float _2106 = isnan(_255) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _255 : min(cbSceneParam._m0[80u].w, _255));
        float _2107 = _2106 / _255;
        float _2118 = _2107 * _307;
        float _2119 = _308 * _2107;
        float _2120 = (-0.0) - _2119;
        float _2121 = _2107 * _309;
        float _2123 = (cbSceneParam._m0[77u].w * _2120) / _2106;
        float _2124 = _2123 + cbSceneParam._m0[79u].w;
        float _2125 = cbSceneParam._m0[79u].w - _2119;
        float _2131 = sqrt(((_2118 * _2118) + (_2119 * _2119)) + (_2121 * _2121));
        float _2134 = (1.0 - (cbSceneParam._m0[77u].w / _2106)) * _2131;
        float _2139 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2141 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2292;
        if (abs((_2120 - _2123) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2292 = ((((_2124 > 0.0) ? exp2(_2139 * _2124) : (2.0 - exp2(_2141 * _2124))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2134;
        }
        else
        {
            float _2252 = 1.0 / cbSceneParam._m0[80u].x;
            float _2253 = isnan(_2125) ? _2124 : (isnan(_2124) ? _2125 : max(_2124, _2125));
            float _2254 = isnan(_2125) ? _2124 : (isnan(_2124) ? _2125 : min(_2124, _2125));
            float _2263 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : min(_2253, 0.0));
            float _2264 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : min(_2254, 0.0));
            _2292 = ((abs(_2131 / _2120) * cbSceneParam._m0[80u].y) * ((((_2263 - _2264) * 2.0) - ((exp2(_2139 * (isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0)))) - exp2(_2139 * (isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0))))) * _2252)) - ((exp2(_2141 * _2263) - exp2(_2141 * _2264)) * _2252))) + (_2134 * cbSceneParam._m0[80u].z);
        }
        vec4 _2294 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2031, _2032, 1.0), 0.0);
        float _2303 = exp2((_2292 * (-1.44269502162933349609375)) * (1.0 - _2294.w));
        float _2304 = log2(_2303);
        float _2320 = log2(_2051);
        _2143 = (exp2(_2320 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2304 * cbSceneParam._m0[78u].x)) * _2294.x) / cbSceneParam._m0[78u].x)) + _2048;
        _2145 = (exp2(_2320 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2304 * cbSceneParam._m0[78u].y)) * _2294.y) / cbSceneParam._m0[78u].y)) + _2049;
        _2147 = (exp2(_2320 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2304 * cbSceneParam._m0[78u].z)) * _2294.z) / cbSceneParam._m0[78u].z)) + _2050;
        _2149 = _2303 * _2051;
    }
    else
    {
        _2143 = _2048;
        _2145 = _2049;
        _2147 = _2050;
        _2149 = _2051;
    }
    float _2161 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2162 = _2161 == 3.0;
    float _2164 = log2(_2149);
    float _2171 = exp2(_2164 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * (_1991 + ((isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0))) * _388))) + ((_1997 + ((isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))) * _1167)) * cbPerFrame._m0[3u].x));
    float _2172 = exp2(_2164 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_1993 + ((isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0))) * _388))) + ((_1999 + ((isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))) * _1167)) * cbPerFrame._m0[3u].x));
    float _2173 = exp2(_2164 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1995 + ((isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0))) * _388))) + ((_2001 + ((isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))) * _1167)) * cbPerFrame._m0[3u].x));
    float _2182 = (_2161 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2182 * (_2162 ? _2171 : (_2171 + (cbSceneParam._m0[72u].w * _2143)));
    SV_Target.y = _2182 * (_2162 ? _2172 : (_2172 + (cbSceneParam._m0[72u].w * _2145)));
    SV_Target.z = _2182 * (_2162 ? _2173 : (_2173 + (cbSceneParam._m0[72u].w * _2147)));
    SV_Target.w = _2026;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2026;
}


