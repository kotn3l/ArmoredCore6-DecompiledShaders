#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Alpha_Soft_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _775;
float _2940;
float _2941;
float _2942;
float _2943;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _166 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _167 = _166 * NORMAL.x;
    float _168 = _166 * NORMAL.y;
    float _169 = _166 * NORMAL.z;
    vec4 _189 = texture(sampler2D(S_A1_M0_Alpha_Soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _195 = _189.w;
    float _196 = _189.x * cbMtdParam._m0[9u].x;
    float _197 = _189.y * cbMtdParam._m0[9u].y;
    float _198 = _189.z * cbMtdParam._m0[9u].z;
    vec4 _211 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _213 = _211.x;
    bool _220 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _237 = ((_220 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _213)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _213))) - POSITION_1.w) / cbMtdParam._m0[11u].x;
    float _2952 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _241 = (_195 * TEXCOORD_1.z) * (isnan(1.0) ? _2952 : (isnan(_2952) ? 1.0 : min(_2952, 1.0)));
    float _245 = inversesqrt(dot(vec3(_167, _168, _169), vec3(_167, _168, _169)));
    float _246 = _245 * _167;
    float _247 = _245 * _168;
    float _248 = _245 * _169;
    float _2963 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _249 = isnan(1.0) ? _2963 : (isnan(_2963) ? 1.0 : min(_2963, 1.0));
    float _2974 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _2985 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _2996 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _257 = _220 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _299 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _309 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _299);
    float _310 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _299);
    float _311 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _299);
    float _315 = inversesqrt(dot(vec3(_309, _310, _311), vec3(_309, _310, _311)));
    float _316 = _309 * _315;
    float _317 = _310 * _315;
    float _318 = _311 * _315;
    vec4 _323 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _325 = _323.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _454 = sqrt(((_309 * _309) + (_310 * _310)) + (_311 * _311));
        float _460 = (cbMatDynParam._m0[5u].x * _454) + cbMatDynParam._m0[5u].y;
        float _3007 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
        float _461 = isnan(1.0) ? _3007 : (isnan(_3007) ? 1.0 : min(_3007, 1.0));
        float _465 = (cbMatDynParam._m0[5u].z * _454) + cbMatDynParam._m0[5u].w;
        float _3018 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3018 : (isnan(_3018) ? 1.0 : min(_3018, 1.0))) - _461)) + _461) < ((_325 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _336 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _337 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _357 = fma(_248, cbSceneParam._m0[5u].z, fma(_247, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _246));
    float _360 = fma(_248, cbSceneParam._m0[6u].z, fma(_247, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _246));
    float _363 = fma(_248, cbSceneParam._m0[7u].z, fma(_247, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _246));
    uint _376 = uint(roundEven(NORMAL.w)) * 13u;
    uint _378 = _376 + 9u;
    uint _379 = _378 + uint(cbMatDynParam._m0[0u].w);
    float _385 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2974 : (isnan(_2974) ? 1.0 : min(_2974, 1.0)))) * cbInstanceData._m0[_379].x;
    float _386 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2985 : (isnan(_2985) ? 1.0 : min(_2985, 1.0)))) * cbInstanceData._m0[_379].y;
    float _387 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2996 : (isnan(_2996) ? 1.0 : min(_2996, 1.0)))) * cbInstanceData._m0[_379].z;
    float _3029 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _388 = isnan(1.0) ? _3029 : (isnan(_3029) ? 1.0 : min(_3029, 1.0));
    float _3040 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _389 = isnan(1.0) ? _3040 : (isnan(_3040) ? 1.0 : min(_3040, 1.0));
    float _3051 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _390 = isnan(1.0) ? _3051 : (isnan(_3051) ? 1.0 : min(_3051, 1.0));
    vec4 _399 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _336, cbSceneParam._m0[86u].y * _337));
    float _402 = _399.x * TEXCOORD_1.w;
    float _403 = dot(vec3(_246, _247, _248), vec3(_316, _317, _318));
    float _406 = _403 * 2.0;
    float _411 = (_406 * _246) - _316;
    float _412 = (_406 * _247) - _317;
    float _413 = (_406 * _248) - _318;
    float _435 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _439 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _443 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _774;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    float _788;
    float _789;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _499 = fma(_443, cbModelParam._m0[26u].z, fma(_439, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _435));
        float _503 = fma(_443, cbModelParam._m0[27u].z, fma(_439, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _435));
        float _507 = fma(_443, cbModelParam._m0[28u].z, fma(_439, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _435));
        float _532 = _435 + _246;
        float _533 = _439 + _247;
        float _534 = _443 + _248;
        float _544 = fma(_534, cbModelParam._m0[26u].z, fma(_533, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _532)) - _499;
        float _545 = fma(_534, cbModelParam._m0[27u].z, fma(_533, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _532)) - _503;
        float _546 = fma(_534, cbModelParam._m0[28u].z, fma(_533, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _532)) - _507;
        float _550 = inversesqrt(dot(vec3(_544, _545, _546), vec3(_544, _545, _546)));
        float _563 = ((_550 * _544) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_499 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _564 = ((_550 * _545) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_503 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _565 = ((_550 * _546) / cbModelParam._m0[34u].z) + ((((((_507 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _568 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_563, _564, _565), 0.0);
        vec4 _575 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_563, _564, _565), 0.0);
        vec4 _582 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_563, _564, _565), 0.0);
        vec4 _589 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_563, _564, _565), 0.0);
        float _602 = exp2((_568.w + (-0.5)) * 20.0) * 2.0;
        float _603 = _602 * (_568.x + (-0.5));
        float _604 = _602 * (_568.y + (-0.5));
        float _605 = _602 * (_568.z + (-0.5));
        float _612 = exp2((_575.w + (-0.5)) * 20.0) * 2.0;
        float _613 = _612 * (_575.x + (-0.5));
        float _614 = _612 * (_575.y + (-0.5));
        float _615 = _612 * (_575.z + (-0.5));
        float _622 = exp2((_582.w + (-0.5)) * 20.0) * 2.0;
        float _623 = _622 * (_582.x + (-0.5));
        float _624 = _622 * (_582.y + (-0.5));
        float _625 = _622 * (_582.z + (-0.5));
        float _632 = exp2((_589.w + (-0.5)) * 20.0) * 2.0;
        float _633 = _632 * (_589.x + (-0.5));
        float _634 = _632 * (_589.y + (-0.5));
        float _635 = _632 * (_589.z + (-0.5));
        float _636 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
        float _637 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
        float _638 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
        float _639 = _603 * 0.5;
        float _640 = _613 * 0.5;
        float _641 = _623 * 0.5;
        float _642 = dot(vec3(_639, _640, _641), vec3(_639, _640, _641));
        float _647 = (_642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_642);
        float _656 = (dot(vec3(_246, _247, _248), vec3(_647 * _639, _647 * _640, _647 * _641)) + 1.0) * 0.5;
        float _3077 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _666 = sqrt(((_640 * _640) + (_639 * _639)) + (_641 * _641)) / (_636 + 9.9999997473787516355514526367188e-06);
        float _3088 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _667 = isnan(1.0) ? _3088 : (isnan(_3088) ? 1.0 : min(_3088, 1.0));
        float _668 = _667 * 2.0;
        float _672 = (1.0 - _667) / (_667 + 1.0);
        float _3099 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _673 = isnan(1.0) ? _3099 : (isnan(_3099) ? 1.0 : min(_3099, 1.0));
        float _682 = ((((1.0 - _673) * (_668 + 2.0)) * exp2(log2(isnan(1.0) ? _3077 : (isnan(_3077) ? 1.0 : min(_3077, 1.0))) * (_668 + 1.0))) + _673) * _636;
        float _683 = _604 * 0.5;
        float _684 = _614 * 0.5;
        float _685 = _624 * 0.5;
        float _686 = dot(vec3(_683, _684, _685), vec3(_683, _684, _685));
        float _691 = (_686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_686);
        float _699 = (dot(vec3(_246, _247, _248), vec3(_691 * _683, _691 * _684, _691 * _685)) + 1.0) * 0.5;
        float _3110 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _708 = sqrt(((_684 * _684) + (_683 * _683)) + (_685 * _685)) / (_637 + 9.9999997473787516355514526367188e-06);
        float _3121 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _709 = isnan(1.0) ? _3121 : (isnan(_3121) ? 1.0 : min(_3121, 1.0));
        float _710 = _709 * 2.0;
        float _714 = (1.0 - _709) / (_709 + 1.0);
        float _3132 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _715 = isnan(1.0) ? _3132 : (isnan(_3132) ? 1.0 : min(_3132, 1.0));
        float _724 = ((((1.0 - _715) * (_710 + 2.0)) * exp2(log2(isnan(1.0) ? _3110 : (isnan(_3110) ? 1.0 : min(_3110, 1.0))) * (_710 + 1.0))) + _715) * _637;
        float _725 = _605 * 0.5;
        float _726 = _615 * 0.5;
        float _727 = _625 * 0.5;
        float _728 = dot(vec3(_725, _726, _727), vec3(_725, _726, _727));
        float _733 = (_728 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_728);
        float _741 = (dot(vec3(_246, _247, _248), vec3(_733 * _725, _733 * _726, _733 * _727)) + 1.0) * 0.5;
        float _3143 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _750 = sqrt(((_726 * _726) + (_725 * _725)) + (_727 * _727)) / (_638 + 9.9999997473787516355514526367188e-06);
        float _3154 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0));
        float _752 = _751 * 2.0;
        float _756 = (1.0 - _751) / (_751 + 1.0);
        float _3165 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0));
        float _766 = ((((1.0 - _757) * (_752 + 2.0)) * exp2(log2(isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0))) * (_752 + 1.0))) + _757) * _638;
        _774 = _605;
        _776 = _604;
        _777 = _603;
        _778 = _615;
        _779 = _614;
        _780 = _613;
        _781 = _625;
        _782 = _624;
        _783 = _623;
        _784 = _638;
        _785 = _637;
        _786 = _636;
        _787 = cbModelParam._m0[36u].z * (isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0)));
        _788 = cbModelParam._m0[36u].z * (isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0)));
        _789 = cbModelParam._m0[36u].z * (isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0)));
    }
    else
    {
        _774 = _775;
        _776 = _775;
        _777 = _775;
        _778 = _775;
        _779 = _775;
        _780 = _775;
        _781 = _775;
        _782 = _775;
        _783 = _775;
        _784 = _775;
        _785 = _775;
        _786 = _775;
        _787 = 0.0;
        _788 = 0.0;
        _789 = 0.0;
    }
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _818 = fma(_443, cbModelParam._m0[30u].z, fma(_439, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _435));
        float _822 = fma(_443, cbModelParam._m0[31u].z, fma(_439, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _435));
        float _826 = fma(_443, cbModelParam._m0[32u].z, fma(_439, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _435));
        float _849 = _435 + _246;
        float _850 = _439 + _247;
        float _851 = _443 + _248;
        float _861 = fma(_851, cbModelParam._m0[30u].z, fma(_850, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _849)) - _818;
        float _862 = fma(_851, cbModelParam._m0[31u].z, fma(_850, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _849)) - _822;
        float _863 = fma(_851, cbModelParam._m0[32u].z, fma(_850, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _849)) - _826;
        float _867 = inversesqrt(dot(vec3(_861, _862, _863), vec3(_861, _862, _863)));
        float _880 = ((_867 * _861) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_818 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _881 = ((_867 * _862) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_822 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _882 = ((_867 * _863) / cbModelParam._m0[35u].z) + ((((((_826 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        float _917 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_884.x + (-0.5));
        float _919 = _917 * (_884.y + (-0.5));
        float _920 = _917 * (_884.z + (-0.5));
        float _927 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_891.x + (-0.5));
        float _929 = _927 * (_891.y + (-0.5));
        float _930 = _927 * (_891.z + (-0.5));
        float _937 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_898.x + (-0.5));
        float _939 = _937 * (_898.y + (-0.5));
        float _940 = _937 * (_898.z + (-0.5));
        float _947 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_905.x + (-0.5));
        float _949 = _947 * (_905.y + (-0.5));
        float _950 = _947 * (_905.z + (-0.5));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = _918 * 0.5;
        float _955 = _928 * 0.5;
        float _956 = _938 * 0.5;
        float _957 = dot(vec3(_954, _955, _956), vec3(_954, _955, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _970 = (dot(vec3(_246, _247, _248), vec3(_962 * _954, _962 * _955, _962 * _956)) + 1.0) * 0.5;
        float _3206 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _979 = sqrt(((_955 * _955) + (_954 * _954)) + (_956 * _956)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3217 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0));
        float _981 = _980 * 2.0;
        float _985 = (1.0 - _980) / (_980 + 1.0);
        float _3228 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0));
        float _995 = ((((1.0 - _986) * (_981 + 2.0)) * exp2(log2(isnan(1.0) ? _3206 : (isnan(_3206) ? 1.0 : min(_3206, 1.0))) * (_981 + 1.0))) + _986) * _951;
        float _996 = _919 * 0.5;
        float _997 = _929 * 0.5;
        float _998 = _939 * 0.5;
        float _999 = dot(vec3(_996, _997, _998), vec3(_996, _997, _998));
        float _1004 = (_999 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_999);
        float _1012 = (dot(vec3(_246, _247, _248), vec3(_1004 * _996, _1004 * _997, _1004 * _998)) + 1.0) * 0.5;
        float _3239 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1021 = sqrt(((_997 * _997) + (_996 * _996)) + (_998 * _998)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _3250 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0));
        float _1023 = _1022 * 2.0;
        float _1027 = (1.0 - _1022) / (_1022 + 1.0);
        float _3261 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
        float _1037 = ((((1.0 - _1028) * (_1023 + 2.0)) * exp2(log2(isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0))) * (_1023 + 1.0))) + _1028) * _952;
        float _1038 = _920 * 0.5;
        float _1039 = _930 * 0.5;
        float _1040 = _940 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1054 = (dot(vec3(_246, _247, _248), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _3272 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1063 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3283 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3294 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0))) * (_1065 + 1.0))) + _1070) * _953;
        _1087 = _920;
        _1088 = _919;
        _1089 = _918;
        _1090 = _930;
        _1091 = _929;
        _1092 = _928;
        _1093 = _940;
        _1094 = _939;
        _1095 = _938;
        _1096 = _953;
        _1097 = _952;
        _1098 = _951;
        _1099 = cbModelParam._m0[36u].w * (isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0)));
        _1100 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0)));
        _1101 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
    }
    else
    {
        _1087 = _775;
        _1088 = _775;
        _1089 = _775;
        _1090 = _775;
        _1091 = _775;
        _1092 = _775;
        _1093 = _775;
        _1094 = _775;
        _1095 = _775;
        _1096 = _775;
        _1097 = _775;
        _1098 = _775;
        _1099 = 0.0;
        _1100 = 0.0;
        _1101 = 0.0;
    }
    float _1111 = (cbModelParam._m0[1u].x * (_1099 - _787)) + _787;
    float _1112 = (cbModelParam._m0[1u].x * (_1100 - _788)) + _788;
    float _1113 = (cbModelParam._m0[1u].x * (_1101 - _789)) + _789;
    float _1134 = fma(_1113, cbSceneParam._m0[89u].z, fma(_1112, cbSceneParam._m0[89u].y, _1111 * cbSceneParam._m0[89u].x));
    float _1137 = fma(_1113, cbSceneParam._m0[90u].z, fma(_1112, cbSceneParam._m0[90u].y, _1111 * cbSceneParam._m0[90u].x));
    float _1140 = fma(_1113, cbSceneParam._m0[91u].z, fma(_1112, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1111));
    float _1155 = _411 * 0.5;
    float _1156 = _412 * 0.5;
    float _1157 = _413 * 0.5;
    float _1158 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_1089, _1092, _1095, _1098));
    float _1161 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_1088, _1091, _1094, _1097));
    float _1164 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_1087, _1090, _1093, _1096));
    float _1198;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1171 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_774, _778, _781, _784));
        float _1175 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_776, _779, _782, _785));
        float _1179 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_777, _780, _783, _786));
        float _1186 = dot(vec4(cbModelParam._m0[39u]), vec4(_1155, _1156, _1157, 1.0));
        _1198 = dot(vec3(isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)), isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)), isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1186) ? 0.0 : (isnan(0.0) ? _1186 : max(0.0, _1186))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1198 = 1.0;
    }
    float _1209;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1200 = dot(vec4(cbModelParam._m0[40u]), vec4(_1155, _1156, _1157, 1.0));
        _1209 = dot(vec3(isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)), isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)), isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1200) ? 0.0 : (isnan(0.0) ? _1200 : max(0.0, _1200))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1209 = 1.0;
    }
    float _1213 = (_1209 * cbModelParam._m0[1u].x) + (_1198 * (1.0 - cbModelParam._m0[1u].x));
    float _1222 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1304;
    float _1306;
    float _1308;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1271 = fma(_443, cbModelParam._m0[13u].z, fma(_439, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _435)) + cbModelParam._m0[13u].w;
        float _1275 = fma(_443, cbModelParam._m0[14u].z, fma(_439, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _435)) + cbModelParam._m0[14u].w;
        float _1279 = fma(_443, cbModelParam._m0[15u].z, fma(_439, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _435)) + cbModelParam._m0[15u].w;
        float _1282 = fma(_413, cbModelParam._m0[13u].z, fma(_412, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _411));
        float _1285 = fma(_413, cbModelParam._m0[14u].z, fma(_412, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _411));
        float _1288 = fma(_413, cbModelParam._m0[15u].z, fma(_412, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _411));
        float _1314;
        if (_1282 > 0.0)
        {
            _1314 = abs((1.0 - _1271) / _1282);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1282 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1271 + 1.0) / _1282);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1314 = frontier_phi_17_15_ladder;
        }
        float _1521;
        if (_1285 > 0.0)
        {
            _1521 = abs((1.0 - _1275) / _1285);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1285 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1275 + 1.0) / _1285);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1521 = frontier_phi_26_22_ladder;
        }
        float _1710;
        if (_1288 > 0.0)
        {
            _1710 = abs((1.0 - _1279) / _1288);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1288 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1279 + 1.0) / _1288);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1710 = frontier_phi_38_33_ladder;
        }
        float _1712 = isnan(_1521) ? _1314 : (isnan(_1314) ? _1521 : min(_1314, _1521));
        float _1713 = isnan(_1710) ? _1712 : (isnan(_1712) ? _1710 : min(_1712, _1710));
        float _1717 = (_1713 * _1282) + _1271;
        float _1718 = (_1713 * _1285) + _1275;
        float _1719 = (_1713 * _1288) + _1279;
        float _1720 = _1713 * 9.9999997473787516355514526367188e-05;
        float _1722 = (-1.0) - _1720;
        float _1724 = _1720 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1719 > _1724) || ((_1719 < _1722) || ((_1718 > _1724) || ((_1718 < _1722) || ((_1717 < _1722) || (_1717 > _1724))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1816 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1719, cbModelParam._m0[9u].z, fma(_1718, cbModelParam._m0[9u].y, _1717 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1719, cbModelParam._m0[10u].z, fma(_1718, cbModelParam._m0[10u].y, _1717 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1719, cbModelParam._m0[11u].z, fma(_1718, cbModelParam._m0[11u].y, _1717 * cbModelParam._m0[11u].x))), _1222);
            frontier_phi_16_38_ladder = _1816.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1816.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1816.x * cbModelParam._m0[1u].y;
        }
        _1304 = frontier_phi_16_38_ladder_2;
        _1306 = frontier_phi_16_38_ladder_1;
        _1308 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1292 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_411, _412, _413), _1222);
        _1304 = _1292.x * cbModelParam._m0[1u].y;
        _1306 = _1292.y * cbModelParam._m0[1u].y;
        _1308 = _1292.z * cbModelParam._m0[1u].y;
    }
    float _1311 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1404;
    float _1406;
    float _1408;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1368 = fma(_443, cbModelParam._m0[21u].z, fma(_439, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _435)) + cbModelParam._m0[21u].w;
        float _1372 = fma(_443, cbModelParam._m0[22u].z, fma(_439, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _435)) + cbModelParam._m0[22u].w;
        float _1376 = fma(_443, cbModelParam._m0[23u].z, fma(_439, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _435)) + cbModelParam._m0[23u].w;
        float _1379 = fma(_413, cbModelParam._m0[21u].z, fma(_412, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _411));
        float _1382 = fma(_413, cbModelParam._m0[22u].z, fma(_412, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _411));
        float _1385 = fma(_413, cbModelParam._m0[23u].z, fma(_412, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _411));
        float _1526;
        if (_1379 > 0.0)
        {
            _1526 = abs((1.0 - _1368) / _1379);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1379 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1368 + 1.0) / _1379);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1526 = frontier_phi_28_24_ladder;
        }
        float _1737;
        if (_1382 > 0.0)
        {
            _1737 = abs((1.0 - _1372) / _1382);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1382 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1372 + 1.0) / _1382);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1737 = frontier_phi_40_35_ladder;
        }
        float _1888;
        if (_1385 > 0.0)
        {
            _1888 = abs((1.0 - _1376) / _1385);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1385 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1376 + 1.0) / _1385);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1888 = frontier_phi_49_46_ladder;
        }
        float _1890 = isnan(_1737) ? _1526 : (isnan(_1526) ? _1737 : min(_1526, _1737));
        float _1891 = isnan(_1888) ? _1890 : (isnan(_1890) ? _1888 : min(_1890, _1888));
        float _1895 = (_1891 * _1379) + _1368;
        float _1896 = (_1891 * _1382) + _1372;
        float _1897 = (_1891 * _1385) + _1376;
        float _1898 = _1891 * 9.9999997473787516355514526367188e-05;
        float _1899 = (-1.0) - _1898;
        float _1901 = _1898 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1897 > _1901) || ((_1897 < _1899) || ((_1896 > _1901) || ((_1896 < _1899) || ((_1895 < _1899) || (_1895 > _1901))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2098 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1897, cbModelParam._m0[17u].z, fma(_1896, cbModelParam._m0[17u].y, _1895 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1897, cbModelParam._m0[18u].z, fma(_1896, cbModelParam._m0[18u].y, _1895 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1897, cbModelParam._m0[19u].z, fma(_1896, cbModelParam._m0[19u].y, _1895 * cbModelParam._m0[19u].x))), _1311);
            frontier_phi_25_49_ladder = _2098.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2098.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2098.x * cbModelParam._m0[1u].z;
        }
        _1404 = frontier_phi_25_49_ladder_2;
        _1406 = frontier_phi_25_49_ladder_1;
        _1408 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1388 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_411, _412, _413), _1311);
        _1404 = _1388.x * cbModelParam._m0[1u].z;
        _1406 = _1388.y * cbModelParam._m0[1u].z;
        _1408 = _1388.z * cbModelParam._m0[1u].z;
    }
    float _1420 = _402 * 0.01200000010430812835693359375;
    float _1422 = _1420 * ((cbModelParam._m0[1u].w * (_1404 - _1304)) + _1304);
    float _1423 = _1420 * ((cbModelParam._m0[1u].w * (_1406 - _1306)) + _1306);
    float _1424 = _1420 * ((cbModelParam._m0[1u].w * (_1408 - _1308)) + _1308);
    float _1427 = fma(_1424, cbSceneParam._m0[89u].z, fma(_1423, cbSceneParam._m0[89u].y, _1422 * cbSceneParam._m0[89u].x));
    float _1430 = fma(_1424, cbSceneParam._m0[90u].z, fma(_1423, cbSceneParam._m0[90u].y, _1422 * cbSceneParam._m0[90u].x));
    float _1433 = fma(_1424, cbSceneParam._m0[91u].z, fma(_1423, cbSceneParam._m0[91u].y, _1422 * cbSceneParam._m0[91u].x));
    uvec4 _1443 = floatBitsToUint(cbInstanceData._m0[_376 + 5u]);
    uint _1445 = _1443.x * 14u;
    uint _1446 = _1445 + 13u;
    float _1453 = _402 + (-1.0);
    float _1459 = (cbLight._m0[_1446].x * _1453) + 1.0;
    float _1460 = (cbLight._m0[_1446].y * _1453) + 1.0;
    float _1461 = (cbLight._m0[_1446].z * _1453) + 1.0;
    float _1462 = (cbLight._m0[_1446].w * _1453) + 1.0;
    uint _1463 = _1445 + 5u;
    float _1469 = isnan(1.0) ? _1460 : (isnan(_1460) ? 1.0 : min(_1460, 1.0));
    uint _1473 = _1445 + 4u;
    float _1480 = isnan(1.0) ? _1459 : (isnan(_1459) ? 1.0 : min(_1459, 1.0));
    uint _1484 = _1445 | 1u;
    float _1495 = dot(vec3(cbLight._m0[_1445].xyz), vec3(_246, _247, _248));
    float _1498 = dot(vec3(cbLight._m0[_1484].xyz), vec3(_246, _247, _248));
    float _3430 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
    float _3441 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
    float _1503 = (isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))) * 0.3183098733425140380859375;
    float _1505 = (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * 0.3183098733425140380859375;
    float _1512 = ((cbLight._m0[_1463].x * _1469) * _1505) + ((cbLight._m0[_1473].x * _1480) * _1503);
    float _1513 = ((_1469 * cbLight._m0[_1463].y) * _1505) + ((_1480 * cbLight._m0[_1473].y) * _1503);
    float _1514 = ((_1469 * cbLight._m0[_1463].z) * _1505) + ((_1480 * cbLight._m0[_1473].z) * _1503);
    uvec4 _1518 = floatBitsToUint(cbLight._m0[_1445 + 12u]);
    bool _1520 = _1518.x == 0u;
    float _1531;
    float _1533;
    float _1535;
    if (_1520)
    {
        _1531 = _1512;
        _1533 = _1513;
        _1535 = _1514;
    }
    else
    {
        uint _1539 = _1445 + 6u;
        float _1555 = (dot(vec3(cbLight._m0[_1445 + 2u].xyz), vec3(_246, _247, _248)) * 0.5) + 0.5;
        float _1556 = _1555 * _1555;
        float _3452 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _1558 = isnan(1.0) ? _1461 : (isnan(_1461) ? 1.0 : min(_1461, 1.0));
        _1531 = (((cbLight._m0[_1539].x * 0.3183098733425140380859375) * _1557) * _1558) + _1512;
        _1533 = (((cbLight._m0[_1539].y * 0.3183098733425140380859375) * _1557) * _1558) + _1513;
        _1535 = (((cbLight._m0[_1539].z * 0.3183098733425140380859375) * _1557) * _1558) + _1514;
    }
    bool _1538 = _1518.y == 0u;
    float _1576;
    float _1578;
    float _1580;
    if (_1538)
    {
        _1576 = _1531;
        _1578 = _1533;
        _1580 = _1535;
    }
    else
    {
        uint _1681 = _1445 + 7u;
        float _1697 = (dot(vec3(cbLight._m0[_1445 + 3u].xyz), vec3(_246, _247, _248)) * 0.5) + 0.5;
        float _1698 = _1697 * _1697;
        float _3468 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
        float _1700 = isnan(1.0) ? _1462 : (isnan(_1462) ? 1.0 : min(_1462, 1.0));
        _1576 = (((cbLight._m0[_1681].x * 0.3183098733425140380859375) * _1699) * _1700) + _1531;
        _1578 = (((cbLight._m0[_1681].y * 0.3183098733425140380859375) * _1699) * _1700) + _1533;
        _1580 = (((cbLight._m0[_1681].z * 0.3183098733425140380859375) * _1699) * _1700) + _1535;
    }
    uint _1582 = _1445 + 8u;
    float _1588 = cbLight._m0[_1445].x + _316;
    float _1589 = cbLight._m0[_1445].y + _317;
    float _1590 = cbLight._m0[_1445].z + _318;
    float _1594 = inversesqrt(dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590)));
    float _1598 = dot(vec3(_246, _247, _248), vec3(cbLight._m0[_1445].xyz));
    float _3484 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
    float _1601 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
    float _3495 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _1602 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
    float _1603 = dot(vec3(cbLight._m0[_1445].xyz), vec3(_1588 * _1594, _1589 * _1594, _1590 * _1594));
    float _3506 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
    float _1614 = (exp2(log2(1.0 - (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1620 = (0.5 / ((_1601 + 9.9999999392252902907785028219223e-09) + _1602)) * _1601;
    float _3517 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
    float _1622 = (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0))) * 0.31831014156341552734375;
    uint _1633 = _1445 + 9u;
    float _1639 = cbLight._m0[_1484].x + _316;
    float _1640 = cbLight._m0[_1484].y + _317;
    float _1641 = cbLight._m0[_1484].z + _318;
    float _1645 = inversesqrt(dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641)));
    float _1649 = dot(vec3(_246, _247, _248), vec3(cbLight._m0[_1484].xyz));
    float _3528 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
    float _1652 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    float _1653 = dot(vec3(cbLight._m0[_1484].xyz), vec3(_1639 * _1645, _1640 * _1645, _1641 * _1645));
    float _3539 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
    float _1662 = (exp2(log2(1.0 - (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1666 = (0.5 / ((_1652 + 9.9999999392252902907785028219223e-09) + _1602)) * _1652;
    float _3550 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
    float _1668 = (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) * 0.31831014156341552734375;
    float _1678 = (((_1662 * cbLight._m0[_1633].x) * _1668) * _1469) + (((_1614 * cbLight._m0[_1582].x) * _1622) * _1480);
    float _1679 = (((_1662 * cbLight._m0[_1633].y) * _1668) * _1469) + (((_1614 * cbLight._m0[_1582].y) * _1622) * _1480);
    float _1680 = (((_1662 * cbLight._m0[_1633].z) * _1668) * _1469) + (((_1614 * cbLight._m0[_1582].z) * _1622) * _1480);
    float _1742;
    float _1744;
    float _1746;
    if (_1520)
    {
        _1742 = _1678;
        _1744 = _1679;
        _1746 = _1680;
    }
    else
    {
        uint _1748 = _1445 + 10u;
        uint _1754 = _1445 + 2u;
        float _1760 = cbLight._m0[_1754].x + _316;
        float _1761 = cbLight._m0[_1754].y + _317;
        float _1762 = cbLight._m0[_1754].z + _318;
        float _1766 = inversesqrt(dot(vec3(_1760, _1761, _1762), vec3(_1760, _1761, _1762)));
        float _1770 = dot(vec3(_246, _247, _248), vec3(cbLight._m0[_1754].xyz));
        float _3561 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1773 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1774 = dot(vec3(cbLight._m0[_1754].xyz), vec3(_1760 * _1766, _1761 * _1766, _1762 * _1766));
        float _3572 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1783 = (exp2(log2(1.0 - (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1787 = (0.5 / ((_1773 + 9.9999999392252902907785028219223e-09) + _1602)) * _1773;
        float _3583 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1789 = (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * 0.31831014156341552734375;
        float _1790 = isnan(1.0) ? _1461 : (isnan(_1461) ? 1.0 : min(_1461, 1.0));
        _1742 = (((_1783 * cbLight._m0[_1748].x) * _1789) * _1790) + _1678;
        _1744 = (((_1783 * cbLight._m0[_1748].y) * _1789) * _1790) + _1679;
        _1746 = (((_1783 * cbLight._m0[_1748].z) * _1789) * _1790) + _1680;
    }
    float _1825;
    float _1827;
    float _1829;
    if (_1538)
    {
        _1825 = _1742;
        _1827 = _1744;
        _1829 = _1746;
    }
    else
    {
        uint _1836 = _1445 + 11u;
        uint _1842 = _1445 + 3u;
        float _1848 = cbLight._m0[_1842].x + _316;
        float _1849 = cbLight._m0[_1842].y + _317;
        float _1850 = cbLight._m0[_1842].z + _318;
        float _1854 = inversesqrt(dot(vec3(_1848, _1849, _1850), vec3(_1848, _1849, _1850)));
        float _1858 = dot(vec3(_246, _247, _248), vec3(cbLight._m0[_1842].xyz));
        float _3599 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1861 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1862 = dot(vec3(cbLight._m0[_1842].xyz), vec3(_1848 * _1854, _1849 * _1854, _1850 * _1854));
        float _3610 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1871 = (exp2(log2(1.0 - (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1875 = (0.5 / ((_1861 + 9.9999999392252902907785028219223e-09) + _1602)) * _1861;
        float _3621 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1877 = (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * 0.31831014156341552734375;
        float _1878 = isnan(1.0) ? _1462 : (isnan(_1462) ? 1.0 : min(_1462, 1.0));
        _1825 = (((_1871 * cbLight._m0[_1836].x) * _1877) * _1878) + _1742;
        _1827 = (((_1871 * cbLight._m0[_1836].y) * _1877) * _1878) + _1744;
        _1829 = (((_1871 * cbLight._m0[_1836].z) * _1877) * _1878) + _1746;
    }
    float _2013;
    float _2015;
    float _2017;
    float _2019;
    float _2021;
    float _2023;
    if (_1443.y == 0u)
    {
        float _1953 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1954 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1953;
        float _1955 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1953;
        float _1956 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1953;
        uvec4 _1968 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1969 = _1968.x;
        uint _1980 = uint((float(_1968.y) * floor(float(uint(cbSceneParam._m0[85u].y * _337) / _1969))) + floor(float(uint(cbSceneParam._m0[85u].x * _336) / _1969)));
        float _1990 = (log2(_1956 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1991 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
        uint _1994 = uint(isnan(14.0) ? _1991 : (isnan(_1991) ? 14.0 : min(_1991, 14.0)));
        uvec4 _1999 = texelFetch(g_lightClusterGridBuffer, int(((_1994 << 2u) + (_1980 << 6u)) >> 2u));
        uint _2000 = _1999.x;
        uint _2001 = _1968.z;
        float _2103;
        float _2105;
        float _2107;
        float _2109;
        float _2111;
        float _2113;
        if (((((1u << ((_2001 >> 4u) & 15u)) + 4294967295u) & _2000) == 0u) || ((_2001 & 240u) == 0u))
        {
            _2103 = 0.0;
            _2105 = 0.0;
            _2107 = 0.0;
            _2109 = 0.0;
            _2111 = 0.0;
            _2113 = 0.0;
        }
        else
        {
            float _2104;
            float _2106;
            float _2108;
            float _2110;
            float _2112;
            float _2114;
            float _2254 = 0.0;
            float _2255 = 0.0;
            float _2256 = 0.0;
            float _2257 = 0.0;
            float _2258 = 0.0;
            float _2259 = 0.0;
            uint _2260 = 0u;
            uint _2269;
            bool _2270;
            for (;;)
            {
                _2269 = texelFetch(g_lightClassification, int((((_1994 << 5u) + (_1980 << 9u)) + (_2260 << 2u)) >> 2u)).x;
                _2270 = _2269 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2270)
                {
                    frontier_phi_66_pred = _2254;
                    frontier_phi_66_pred_1 = _2259;
                    frontier_phi_66_pred_2 = _2258;
                    frontier_phi_66_pred_3 = _2257;
                    frontier_phi_66_pred_4 = _2256;
                    frontier_phi_66_pred_5 = _2255;
                }
                else
                {
                    float _2399;
                    float _2400;
                    float _2401;
                    float _2402;
                    float _2403;
                    float _2404;
                    uint _2405;
                    _2399 = _2254;
                    _2400 = _2255;
                    _2401 = _2256;
                    _2402 = _2257;
                    _2403 = _2258;
                    _2404 = _2259;
                    _2405 = _2269;
                    float _2326;
                    float _2327;
                    float _2328;
                    float _2329;
                    float _2330;
                    float _2331;
                    for (;;)
                    {
                        uint _2409 = uint(findLSB(_2405)) + (_2260 << 5u);
                        uint _2406 = (_2405 + 4294967295u) & _2405;
                        uint _2411 = _2409 * 48u;
                        vec4 _2425 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2411)).x, texelFetch(g_PointLightRenderingBuffer, int(_2411 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2411 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2411 + 3u)).x));
                        uint _2431 = (_2409 * 48u) + 4u;
                        vec4 _2444 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2431)).x, texelFetch(g_PointLightRenderingBuffer, int(_2431 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2431 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2431 + 3u)).x));
                        uint _2450 = (_2409 * 48u) + 8u;
                        vec3 _2461 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2450)).x, texelFetch(g_PointLightRenderingBuffer, int(_2450 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2450 + 2u)).x));
                        float _2465 = _2425.x - _1954;
                        float _2466 = _2425.y - _1955;
                        float _2467 = _2425.z - _1956;
                        float _2468 = dot(vec3(_2465, _2466, _2467), vec3(_2465, _2466, _2467));
                        float _2471 = inversesqrt(_2468);
                        float _2480 = 1.0 - (_2468 * _2425.w);
                        float _3647 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
                        float _2481 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
                        float _2482 = sqrt(_2468) * _2444.w;
                        float _2485 = 1.39999997615814208984375 / (_2482 + 1.39999997615814208984375);
                        float _2486 = _2485 * _2485;
                        float _2489 = ((1.0 - _2486) * dot(vec3(_357, _360, _363), vec3(_2471 * _2465, _2471 * _2466, _2471 * _2467))) + _2486;
                        float _2492 = _2482 * _2482;
                        float _2496 = ((isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0))) * _2481) / ((_2492 * 0.699999988079071044921875) + 1.0);
                        float _2500 = (-0.0) - _1954;
                        float _2501 = (-0.0) - _1955;
                        float _2502 = (-0.0) - _1956;
                        float _2506 = inversesqrt(dot(vec3(_2500, _2501, _2502), vec3(_2500, _2501, _2502)));
                        float _2510 = dot(vec3(_357, _360, _363), vec3(_2506 * _2500, _2506 * _2501, _2506 * _2502));
                        float _3663 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
                        float _3674 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
                        float _2514 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
                        float _2518 = (0.5 / (((isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) + 9.9999999392252902907785028219223e-09) + _2514)) * _2514;
                        float _3685 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
                        float _2527 = (((isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * 3.1415927410125732421875) / ((_2492 * 2.1991131305694580078125) + 3.141590118408203125)) * _2481;
                        _2329 = (_2496 * _2444.x) + _2402;
                        _2330 = (_2496 * _2444.y) + _2403;
                        _2331 = (_2496 * _2444.z) + _2404;
                        _2326 = (_2527 * _2461.x) + _2399;
                        _2327 = (_2527 * _2461.y) + _2400;
                        _2328 = (_2527 * _2461.z) + _2401;
                        if (_2406 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2399 = _2326;
                            _2400 = _2327;
                            _2401 = _2328;
                            _2402 = _2329;
                            _2403 = _2330;
                            _2404 = _2331;
                            _2405 = _2406;
                        }
                    }
                    frontier_phi_66_pred = _2326;
                    frontier_phi_66_pred_1 = _2331;
                    frontier_phi_66_pred_2 = _2330;
                    frontier_phi_66_pred_3 = _2329;
                    frontier_phi_66_pred_4 = _2328;
                    frontier_phi_66_pred_5 = _2327;
                }
                _2104 = frontier_phi_66_pred;
                _2114 = frontier_phi_66_pred_1;
                _2112 = frontier_phi_66_pred_2;
                _2110 = frontier_phi_66_pred_3;
                _2108 = frontier_phi_66_pred_4;
                _2106 = frontier_phi_66_pred_5;
                uint _2261 = _2260 + 1u;
                if (_2261 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2254 = _2104;
                    _2255 = _2106;
                    _2256 = _2108;
                    _2257 = _2110;
                    _2258 = _2112;
                    _2259 = _2114;
                    _2260 = _2261;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2103 = _2104;
            _2105 = _2106;
            _2107 = _2108;
            _2109 = _2110;
            _2111 = _2112;
            _2113 = _2114;
        }
        uvec4 _2117 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2118 = _2117.z;
        uint _2120 = (_2118 >> 8u) & 15u;
        float _2225;
        float _2227;
        float _2229;
        float _2231;
        float _2233;
        float _2235;
        if (((4294967295u << _2120) & _2000) == 0u)
        {
            _2225 = _2103;
            _2227 = _2105;
            _2229 = _2107;
            _2231 = _2109;
            _2233 = _2111;
            _2235 = _2113;
        }
        else
        {
            float _2250 = inversesqrt(dot(vec3(_1954, _1955, _1956), vec3(_1954, _1955, _1956)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2120 < ((_2118 >> 12u) & 15u))
            {
                float _2226;
                float _2228;
                float _2230;
                float _2232;
                float _2234;
                float _2236;
                float _2382 = _2103;
                float _2383 = _2105;
                float _2384 = _2107;
                float _2385 = _2109;
                float _2386 = _2111;
                float _2387 = _2113;
                uint _2388 = _2120;
                uint _2397;
                bool _2398;
                for (;;)
                {
                    _2397 = texelFetch(g_lightClassification, int((((_1994 << 5u) + (_1980 << 9u)) + (_2388 << 2u)) >> 2u)).x;
                    _2398 = _2397 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2398)
                    {
                        frontier_phi_77_pred = _2387;
                        frontier_phi_77_pred_1 = _2386;
                        frontier_phi_77_pred_2 = _2385;
                        frontier_phi_77_pred_3 = _2384;
                        frontier_phi_77_pred_4 = _2383;
                        frontier_phi_77_pred_5 = _2382;
                    }
                    else
                    {
                        float _2541;
                        float _2542;
                        float _2543;
                        float _2544;
                        float _2545;
                        float _2546;
                        float _2793;
                        float _2794;
                        float _2795;
                        float _2796;
                        float _2797;
                        float _2798;
                        float _2554 = _2382;
                        float _2555 = _2383;
                        float _2556 = _2384;
                        float _2557 = _2385;
                        float _2558 = _2386;
                        float _2559 = _2387;
                        uint _2560 = _2397;
                        uint _2561;
                        vec4 _2586;
                        float _2587;
                        vec4 _2602;
                        vec3 _2614;
                        vec4 _2630;
                        vec4 _2646;
                        float _2693;
                        bool _2694;
                        for (;;)
                        {
                            uint _2571 = ((_2388 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2560));
                            _2561 = (_2560 + 4294967295u) & _2560;
                            uint _2573 = _2571 * 40u;
                            _2586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2573 + 3u)).x));
                            _2587 = _2586.w;
                            uint _2589 = (_2571 * 40u) + 4u;
                            _2602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2589 + 3u)).x));
                            uint _2604 = (_2571 * 40u) + 8u;
                            _2614 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2604 + 2u)).x));
                            uint _2617 = (_2571 * 40u) + 16u;
                            _2630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2617 + 3u)).x));
                            uint _2633 = (_2571 * 40u) + 20u;
                            _2646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2633 + 3u)).x));
                            uint _2649 = (_2571 * 40u) + 24u;
                            vec4 _2662 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2649)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2649 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2649 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2649 + 3u)).x));
                            uint _2668 = (_2571 * 40u) + 28u;
                            vec4 _2681 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2668)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2668 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2668 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2668 + 3u)).x));
                            _2693 = fma(_1956, _2681.z, fma(_1955, _2681.y, _2681.x * _1954)) + _2681.w;
                            _2694 = !((fma(_1956, _2662.z, fma(_1955, _2662.y, _2662.x * _1954)) + _2662.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2694)
                            {
                                float _2721 = _2586.x - _1954;
                                float _2722 = _2586.y - _1955;
                                float _2723 = _2586.z - _1956;
                                float _2724 = dot(vec3(_2721, _2722, _2723), vec3(_2721, _2722, _2723));
                                float _2727 = inversesqrt(_2724);
                                float _2728 = _2727 * _2721;
                                float _2729 = _2727 * _2722;
                                float _2730 = _2727 * _2723;
                                float _2734 = 1.0 - (_2724 / (_2587 * _2587));
                                float _3696 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
                                float _2735 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
                                float _2739 = sqrt(_2724) * _2602.w;
                                float _2741 = 1.39999997615814208984375 / (_2739 + 1.39999997615814208984375);
                                float _2742 = _2741 * _2741;
                                float _2743 = 1.0 - _2742;
                                float _2745 = (_2743 * dot(vec3(_2728, _2729, _2730), vec3(_357, _360, _363))) + _2742;
                                float _2748 = _2739 * _2739;
                                float _2752 = (fma(_1956, _2630.z, fma(_1955, _2630.y, _2630.x * _1954)) + _2630.w) / _2693;
                                float _2753 = (fma(_1956, _2646.z, fma(_1955, _2646.y, _2646.x * _1954)) + _2646.w) / _2693;
                                float _2757 = 1.0 - dot(vec2(_2752, _2753), vec2(_2752, _2753));
                                float _3712 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
                                float _2758 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
                                float _2759 = _2758 * (((isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0))) * _2735) / ((_2748 * 0.699999988079071044921875) + 1.0));
                                float _2769 = dot(vec3(_357, _360, _363), vec3((-0.0) - (_1954 * _2250), (-0.0) - (_1955 * _2250), (-0.0) - (_1956 * _2250)));
                                float _3723 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
                                float _2777 = (_2743 * dot(vec3(_357, _360, _363), vec3(_2728, _2729, _2730))) + _2742;
                                float _3734 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                                float _2778 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
                                float _2782 = (0.5 / (((isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) + 9.9999999392252902907785028219223e-09) + _2778)) * _2778;
                                float _3745 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                                float _2789 = (_2758 * _2735) * (((isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * 3.1415927410125732421875) / ((_2748 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2759 * _2602.y;
                                frontier_phi_83_pred_1 = _2759 * _2602.x;
                                frontier_phi_83_pred_2 = _2789 * _2614.z;
                                frontier_phi_83_pred_3 = _2789 * _2614.y;
                                frontier_phi_83_pred_4 = _2789 * _2614.x;
                                frontier_phi_83_pred_5 = _2759 * _2602.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2797 = frontier_phi_83_pred;
                            _2796 = frontier_phi_83_pred_1;
                            _2795 = frontier_phi_83_pred_2;
                            _2794 = frontier_phi_83_pred_3;
                            _2793 = frontier_phi_83_pred_4;
                            _2798 = frontier_phi_83_pred_5;
                            _2544 = _2796 + _2557;
                            _2545 = _2797 + _2558;
                            _2546 = _2798 + _2559;
                            _2541 = _2793 + _2554;
                            _2542 = _2794 + _2555;
                            _2543 = _2795 + _2556;
                            if (_2561 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2554 = _2541;
                                _2555 = _2542;
                                _2556 = _2543;
                                _2557 = _2544;
                                _2558 = _2545;
                                _2559 = _2546;
                                _2560 = _2561;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2546;
                        frontier_phi_77_pred_1 = _2545;
                        frontier_phi_77_pred_2 = _2544;
                        frontier_phi_77_pred_3 = _2543;
                        frontier_phi_77_pred_4 = _2542;
                        frontier_phi_77_pred_5 = _2541;
                    }
                    _2236 = frontier_phi_77_pred;
                    _2234 = frontier_phi_77_pred_1;
                    _2232 = frontier_phi_77_pred_2;
                    _2230 = frontier_phi_77_pred_3;
                    _2228 = frontier_phi_77_pred_4;
                    _2226 = frontier_phi_77_pred_5;
                    uint _2389 = _2388 + 1u;
                    if (_2389 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2382 = _2226;
                        _2383 = _2228;
                        _2384 = _2230;
                        _2385 = _2232;
                        _2386 = _2234;
                        _2387 = _2236;
                        _2388 = _2389;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2230;
                frontier_phi_58_59_ladder_1 = _2236;
                frontier_phi_58_59_ladder_2 = _2234;
                frontier_phi_58_59_ladder_3 = _2232;
                frontier_phi_58_59_ladder_4 = _2228;
                frontier_phi_58_59_ladder_5 = _2226;
            }
            else
            {
                frontier_phi_58_59_ladder = _2107;
                frontier_phi_58_59_ladder_1 = _2113;
                frontier_phi_58_59_ladder_2 = _2111;
                frontier_phi_58_59_ladder_3 = _2109;
                frontier_phi_58_59_ladder_4 = _2105;
                frontier_phi_58_59_ladder_5 = _2103;
            }
            _2225 = frontier_phi_58_59_ladder_5;
            _2227 = frontier_phi_58_59_ladder_4;
            _2229 = frontier_phi_58_59_ladder;
            _2231 = frontier_phi_58_59_ladder_3;
            _2233 = frontier_phi_58_59_ladder_2;
            _2235 = frontier_phi_58_59_ladder_1;
        }
        float _2240 = isnan(1.0) ? _402 : (isnan(_402) ? 1.0 : min(_402, 1.0));
        _2013 = (_2240 * _2231) + _1576;
        _2015 = (_2240 * _2233) + _1578;
        _2017 = (_2240 * _2235) + _1580;
        _2019 = ((_2225 * 0.039999999105930328369140625) * _2240) + _1825;
        _2021 = ((_2227 * 0.039999999105930328369140625) * _2240) + _1827;
        _2023 = ((_2229 * 0.039999999105930328369140625) * _2240) + _1829;
    }
    else
    {
        _2013 = _1576;
        _2015 = _1578;
        _2017 = _1580;
        _2019 = _1825;
        _2021 = _1827;
        _2023 = _1829;
    }
    float _3761 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _3772 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _3783 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _3794 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _2041 = ((isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_2013 + ((isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0))) * _402))) + ((_2019 + ((isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))) * _1213)) * cbPerFrame._m0[3u].x);
    float _2042 = ((isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_2015 + ((isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0))) * _402))) + ((_2021 + ((isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))) * _1213)) * cbPerFrame._m0[3u].x);
    float _2043 = ((isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_2017 + ((isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0))) * _402))) + ((_2023 + ((isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))) * _1213)) * cbPerFrame._m0[3u].x);
    float _2048 = cbInstanceData._m0[_376 + 6u].w * (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)));
    float _2053 = _336 / cbSceneParam._m0[86u].x;
    float _2054 = _337 / cbSceneParam._m0[86u].y;
    vec4 _2068 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2053, _2054, (log2((isnan(cbSceneParam._m0[77u].w) ? _257 : (isnan(_257) ? cbSceneParam._m0[77u].w : min(_257, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2070 = _2068.x;
    float _2071 = _2068.y;
    float _2072 = _2068.z;
    float _2073 = _2068.w;
    float _2165;
    float _2167;
    float _2169;
    float _2171;
    if (_257 > cbSceneParam._m0[78u].w)
    {
        float _2128 = isnan(_257) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _257 : min(cbSceneParam._m0[80u].w, _257));
        float _2129 = _2128 / _257;
        float _2140 = _2129 * _309;
        float _2141 = _310 * _2129;
        float _2142 = (-0.0) - _2141;
        float _2143 = _2129 * _311;
        float _2145 = (cbSceneParam._m0[77u].w * _2142) / _2128;
        float _2146 = _2145 + cbSceneParam._m0[79u].w;
        float _2147 = cbSceneParam._m0[79u].w - _2141;
        float _2153 = sqrt(((_2140 * _2140) + (_2141 * _2141)) + (_2143 * _2143));
        float _2156 = (1.0 - (cbSceneParam._m0[77u].w / _2128)) * _2153;
        float _2161 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2163 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2339;
        if (abs((_2142 - _2145) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2339 = ((((_2146 > 0.0) ? exp2(_2161 * _2146) : (2.0 - exp2(_2163 * _2146))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2156;
        }
        else
        {
            float _2283 = 1.0 / cbSceneParam._m0[80u].x;
            float _2284 = isnan(_2147) ? _2146 : (isnan(_2146) ? _2147 : max(_2146, _2147));
            float _2285 = isnan(_2147) ? _2146 : (isnan(_2146) ? _2147 : min(_2146, _2147));
            float _2294 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : min(_2284, 0.0));
            float _2295 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : min(_2285, 0.0));
            _2339 = ((abs(_2153 / _2142) * cbSceneParam._m0[80u].y) * ((((_2294 - _2295) * 2.0) - ((exp2(_2161 * (isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0)))) - exp2(_2161 * (isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0))))) * _2283)) - ((exp2(_2163 * _2294) - exp2(_2163 * _2295)) * _2283))) + (_2156 * cbSceneParam._m0[80u].z);
        }
        vec4 _2341 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2053, _2054, 1.0), 0.0);
        float _2350 = exp2((_2339 * (-1.44269502162933349609375)) * (1.0 - _2341.w));
        float _2351 = log2(_2350);
        float _2367 = log2(_2073);
        _2165 = (exp2(_2367 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2351 * cbSceneParam._m0[78u].x)) * _2341.x) / cbSceneParam._m0[78u].x)) + _2070;
        _2167 = (exp2(_2367 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2351 * cbSceneParam._m0[78u].y)) * _2341.y) / cbSceneParam._m0[78u].y)) + _2071;
        _2169 = (exp2(_2367 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2351 * cbSceneParam._m0[78u].z)) * _2341.z) / cbSceneParam._m0[78u].z)) + _2072;
        _2171 = _2350 * _2073;
    }
    else
    {
        _2165 = _2070;
        _2167 = _2071;
        _2169 = _2072;
        _2171 = _2073;
    }
    bool _2377;
    vec4 _2181;
    vec4 _2204;
    float _2206;
    float _2210;
    float _2211;
    float _2212;
    float _2213;
    bool _2224;
    for (;;)
    {
        _2181 = cbMatDynParam._m0[0u];
        float _2183 = roundEven(_2181.y);
        bool _2184 = _2183 == 3.0;
        float _2186 = log2(_2171);
        float _2193 = exp2(_2186 * cbSceneParam._m0[78u].x) * _2041;
        float _2194 = exp2(_2186 * cbSceneParam._m0[78u].y) * _2042;
        float _2195 = exp2(_2186 * cbSceneParam._m0[78u].z) * _2043;
        float _2202 = _325 + (-0.5);
        _2204 = cbMtdParam._m0[1u];
        _2206 = _2204.y * _2202;
        float _2209 = (_2183 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2210 = _2209 * (_2184 ? _2193 : (_2193 + (cbSceneParam._m0[72u].w * _2165)));
        _2211 = _2209 * (_2184 ? _2194 : (_2194 + (cbSceneParam._m0[72u].w * _2167)));
        _2212 = _2209 * (_2184 ? _2195 : (_2195 + (cbSceneParam._m0[72u].w * _2169)));
        _2213 = _2202 * 0.999000012874603271484375;
        _2224 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2224)
        {
            if ((cbInstanceData._m0[_376 + 7u].x + _2213) < 0.5)
            {
                _2377 = true;
                break;
            }
        }
        uint _2318 = _378 + uint(_2181.w);
        if ((cbInstanceData._m0[_2318].w < 1.0) && ((cbInstanceData._m0[_2318].w + _2213) < 0.5))
        {
            _2377 = true;
            break;
        }
        if ((_2206 + _195) < _2204.x)
        {
            _2377 = true;
            break;
        }
        _2377 = false;
        break;
    }
    float _2532;
    if (_2377)
    {
        discard_state = true;
        _2532 = 0.0;
    }
    else
    {
        _2532 = _2048;
    }
    SV_Target.x = _2210;
    SV_Target.y = _2211;
    SV_Target.z = _2212;
    SV_Target.w = _2532;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2048;
    discard_exit();
}


