#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Alpha_Soft_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _734;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _166 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _167 = _166 * NORMAL.x;
    float _168 = _166 * NORMAL.y;
    float _169 = _166 * NORMAL.z;
    vec4 _189 = texture(sampler2D(S_A1_M0_Alpha_Soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _196 = _189.x * cbMtdParam._m0[9u].x;
    float _197 = _189.y * cbMtdParam._m0[9u].y;
    float _198 = _189.z * cbMtdParam._m0[9u].z;
    vec4 _211 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _213 = _211.x;
    bool _220 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _237 = ((_220 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _213)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _213))) - POSITION_1.w) / cbMtdParam._m0[11u].x;
    float _3128 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _241 = (_189.w * TEXCOORD_1.z) * (isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0)));
    float _245 = inversesqrt(dot(vec3(_167, _168, _169), vec3(_167, _168, _169)));
    float _246 = _245 * _167;
    float _247 = _245 * _168;
    float _248 = _245 * _169;
    float _3139 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _249 = isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0));
    float _3150 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _3161 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _3172 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _257 = _220 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _299 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _309 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _299);
    float _310 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _299);
    float _311 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _299);
    float _315 = inversesqrt(dot(vec3(_309, _310, _311), vec3(_309, _310, _311)));
    float _316 = _309 * _315;
    float _317 = _310 * _315;
    float _318 = _311 * _315;
    float _323 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _324 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _345 = fma(_248, cbSceneParam._m0[5u].z, fma(_247, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _246));
    float _348 = fma(_248, cbSceneParam._m0[6u].z, fma(_247, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _246));
    float _351 = fma(_248, cbSceneParam._m0[7u].z, fma(_247, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _246));
    uint _364 = uint(roundEven(NORMAL.w)) * 13u;
    uint _367 = (_364 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _373 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0)))) * cbInstanceData._m0[_367].x;
    float _374 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0)))) * cbInstanceData._m0[_367].y;
    float _375 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0)))) * cbInstanceData._m0[_367].z;
    float _3183 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _376 = isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0));
    float _3194 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _377 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
    float _3205 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _378 = isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0));
    vec4 _387 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _323, cbSceneParam._m0[86u].y * _324));
    float _390 = _387.x * TEXCOORD_1.w;
    float _391 = dot(vec3(_246, _247, _248), vec3(_316, _317, _318));
    float _394 = _391 * 2.0;
    float _399 = (_394 * _246) - _316;
    float _400 = (_394 * _247) - _317;
    float _401 = (_394 * _248) - _318;
    float _423 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _427 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _431 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _733;
    float _735;
    float _736;
    float _737;
    float _738;
    float _739;
    float _740;
    float _741;
    float _742;
    float _743;
    float _744;
    float _745;
    float _746;
    float _747;
    float _748;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _458 = fma(_431, cbModelParam._m0[26u].z, fma(_427, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _423));
        float _462 = fma(_431, cbModelParam._m0[27u].z, fma(_427, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _423));
        float _466 = fma(_431, cbModelParam._m0[28u].z, fma(_427, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _423));
        float _491 = _423 + _246;
        float _492 = _427 + _247;
        float _493 = _431 + _248;
        float _503 = fma(_493, cbModelParam._m0[26u].z, fma(_492, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _491)) - _458;
        float _504 = fma(_493, cbModelParam._m0[27u].z, fma(_492, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _491)) - _462;
        float _505 = fma(_493, cbModelParam._m0[28u].z, fma(_492, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _491)) - _466;
        float _509 = inversesqrt(dot(vec3(_503, _504, _505), vec3(_503, _504, _505)));
        float _522 = ((_509 * _503) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_458 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _523 = ((_509 * _504) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_462 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _524 = ((_509 * _505) / cbModelParam._m0[34u].z) + ((((((_466 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _527 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_522, _523, _524), 0.0);
        vec4 _534 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_522, _523, _524), 0.0);
        vec4 _541 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_522, _523, _524), 0.0);
        vec4 _548 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_522, _523, _524), 0.0);
        float _561 = exp2((_527.w + (-0.5)) * 20.0) * 2.0;
        float _562 = _561 * (_527.x + (-0.5));
        float _563 = _561 * (_527.y + (-0.5));
        float _564 = _561 * (_527.z + (-0.5));
        float _571 = exp2((_534.w + (-0.5)) * 20.0) * 2.0;
        float _572 = _571 * (_534.x + (-0.5));
        float _573 = _571 * (_534.y + (-0.5));
        float _574 = _571 * (_534.z + (-0.5));
        float _581 = exp2((_541.w + (-0.5)) * 20.0) * 2.0;
        float _582 = _581 * (_541.x + (-0.5));
        float _583 = _581 * (_541.y + (-0.5));
        float _584 = _581 * (_541.z + (-0.5));
        float _591 = exp2((_548.w + (-0.5)) * 20.0) * 2.0;
        float _592 = _591 * (_548.x + (-0.5));
        float _593 = _591 * (_548.y + (-0.5));
        float _594 = _591 * (_548.z + (-0.5));
        float _595 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
        float _596 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
        float _597 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
        float _598 = _562 * 0.5;
        float _599 = _572 * 0.5;
        float _600 = _582 * 0.5;
        float _601 = dot(vec3(_598, _599, _600), vec3(_598, _599, _600));
        float _606 = (_601 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_601);
        float _615 = (dot(vec3(_246, _247, _248), vec3(_606 * _598, _606 * _599, _606 * _600)) + 1.0) * 0.5;
        float _3231 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
        float _625 = sqrt(((_599 * _599) + (_598 * _598)) + (_600 * _600)) / (_595 + 9.9999997473787516355514526367188e-06);
        float _3242 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
        float _626 = isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0));
        float _627 = _626 * 2.0;
        float _631 = (1.0 - _626) / (_626 + 1.0);
        float _3253 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
        float _632 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
        float _641 = ((((1.0 - _632) * (_627 + 2.0)) * exp2(log2(isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0))) * (_627 + 1.0))) + _632) * _595;
        float _642 = _563 * 0.5;
        float _643 = _573 * 0.5;
        float _644 = _583 * 0.5;
        float _645 = dot(vec3(_642, _643, _644), vec3(_642, _643, _644));
        float _650 = (_645 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_645);
        float _658 = (dot(vec3(_246, _247, _248), vec3(_650 * _642, _650 * _643, _650 * _644)) + 1.0) * 0.5;
        float _3264 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _667 = sqrt(((_643 * _643) + (_642 * _642)) + (_644 * _644)) / (_596 + 9.9999997473787516355514526367188e-06);
        float _3275 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
        float _668 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
        float _669 = _668 * 2.0;
        float _673 = (1.0 - _668) / (_668 + 1.0);
        float _3286 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
        float _674 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
        float _683 = ((((1.0 - _674) * (_669 + 2.0)) * exp2(log2(isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0))) * (_669 + 1.0))) + _674) * _596;
        float _684 = _564 * 0.5;
        float _685 = _574 * 0.5;
        float _686 = _584 * 0.5;
        float _687 = dot(vec3(_684, _685, _686), vec3(_684, _685, _686));
        float _692 = (_687 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_687);
        float _700 = (dot(vec3(_246, _247, _248), vec3(_692 * _684, _692 * _685, _692 * _686)) + 1.0) * 0.5;
        float _3297 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _709 = sqrt(((_685 * _685) + (_684 * _684)) + (_686 * _686)) / (_597 + 9.9999997473787516355514526367188e-06);
        float _3308 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _710 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
        float _711 = _710 * 2.0;
        float _715 = (1.0 - _710) / (_710 + 1.0);
        float _3319 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _716 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
        float _725 = ((((1.0 - _716) * (_711 + 2.0)) * exp2(log2(isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0))) * (_711 + 1.0))) + _716) * _597;
        _733 = _564;
        _735 = _563;
        _736 = _562;
        _737 = _574;
        _738 = _573;
        _739 = _572;
        _740 = _584;
        _741 = _583;
        _742 = _582;
        _743 = _597;
        _744 = _596;
        _745 = _595;
        _746 = cbModelParam._m0[36u].z * (isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0)));
        _747 = cbModelParam._m0[36u].z * (isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0)));
        _748 = cbModelParam._m0[36u].z * (isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0)));
    }
    else
    {
        _733 = _734;
        _735 = _734;
        _736 = _734;
        _737 = _734;
        _738 = _734;
        _739 = _734;
        _740 = _734;
        _741 = _734;
        _742 = _734;
        _743 = _734;
        _744 = _734;
        _745 = _734;
        _746 = 0.0;
        _747 = 0.0;
        _748 = 0.0;
    }
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _774 = fma(_431, cbModelParam._m0[30u].z, fma(_427, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _423));
        float _778 = fma(_431, cbModelParam._m0[31u].z, fma(_427, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _423));
        float _782 = fma(_431, cbModelParam._m0[32u].z, fma(_427, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _423));
        float _805 = _423 + _246;
        float _806 = _427 + _247;
        float _807 = _431 + _248;
        float _817 = fma(_807, cbModelParam._m0[30u].z, fma(_806, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _805)) - _774;
        float _818 = fma(_807, cbModelParam._m0[31u].z, fma(_806, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _805)) - _778;
        float _819 = fma(_807, cbModelParam._m0[32u].z, fma(_806, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _805)) - _782;
        float _823 = inversesqrt(dot(vec3(_817, _818, _819), vec3(_817, _818, _819)));
        float _836 = ((_823 * _817) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_774 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _837 = ((_823 * _818) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_778 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _838 = ((_823 * _819) / cbModelParam._m0[35u].z) + ((((((_782 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_836, _837, _838), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_836, _837, _838), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_836, _837, _838), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_836, _837, _838), 0.0);
        float _873 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_840.x + (-0.5));
        float _875 = _873 * (_840.y + (-0.5));
        float _876 = _873 * (_840.z + (-0.5));
        float _883 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_847.x + (-0.5));
        float _885 = _883 * (_847.y + (-0.5));
        float _886 = _883 * (_847.z + (-0.5));
        float _893 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_854.x + (-0.5));
        float _895 = _893 * (_854.y + (-0.5));
        float _896 = _893 * (_854.z + (-0.5));
        float _903 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_861.x + (-0.5));
        float _905 = _903 * (_861.y + (-0.5));
        float _906 = _903 * (_861.z + (-0.5));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = _874 * 0.5;
        float _911 = _884 * 0.5;
        float _912 = _894 * 0.5;
        float _913 = dot(vec3(_910, _911, _912), vec3(_910, _911, _912));
        float _918 = (_913 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_913);
        float _926 = (dot(vec3(_246, _247, _248), vec3(_918 * _910, _918 * _911, _918 * _912)) + 1.0) * 0.5;
        float _3360 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _935 = sqrt(((_911 * _911) + (_910 * _910)) + (_912 * _912)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3371 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _937 = _936 * 2.0;
        float _941 = (1.0 - _936) / (_936 + 1.0);
        float _3382 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _951 = ((((1.0 - _942) * (_937 + 2.0)) * exp2(log2(isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * (_937 + 1.0))) + _942) * _907;
        float _952 = _875 * 0.5;
        float _953 = _885 * 0.5;
        float _954 = _895 * 0.5;
        float _955 = dot(vec3(_952, _953, _954), vec3(_952, _953, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _968 = (dot(vec3(_246, _247, _248), vec3(_960 * _952, _960 * _953, _960 * _954)) + 1.0) * 0.5;
        float _3393 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _977 = sqrt(((_953 * _953) + (_952 * _952)) + (_954 * _954)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3404 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3415 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * (_979 + 1.0))) + _984) * _908;
        float _994 = _876 * 0.5;
        float _995 = _886 * 0.5;
        float _996 = _896 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1010 = (dot(vec3(_246, _247, _248), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3426 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1019 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _3437 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3448 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * (_1021 + 1.0))) + _1026) * _909;
        _1043 = _876;
        _1044 = _875;
        _1045 = _874;
        _1046 = _886;
        _1047 = _885;
        _1048 = _884;
        _1049 = _896;
        _1050 = _895;
        _1051 = _894;
        _1052 = _909;
        _1053 = _908;
        _1054 = _907;
        _1055 = cbModelParam._m0[36u].w * (isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0)));
        _1056 = cbModelParam._m0[36u].w * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
        _1057 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
    }
    else
    {
        _1043 = _734;
        _1044 = _734;
        _1045 = _734;
        _1046 = _734;
        _1047 = _734;
        _1048 = _734;
        _1049 = _734;
        _1050 = _734;
        _1051 = _734;
        _1052 = _734;
        _1053 = _734;
        _1054 = _734;
        _1055 = 0.0;
        _1056 = 0.0;
        _1057 = 0.0;
    }
    float _1067 = (cbModelParam._m0[1u].x * (_1055 - _746)) + _746;
    float _1068 = (cbModelParam._m0[1u].x * (_1056 - _747)) + _747;
    float _1069 = (cbModelParam._m0[1u].x * (_1057 - _748)) + _748;
    float _1090 = fma(_1069, cbSceneParam._m0[89u].z, fma(_1068, cbSceneParam._m0[89u].y, _1067 * cbSceneParam._m0[89u].x));
    float _1093 = fma(_1069, cbSceneParam._m0[90u].z, fma(_1068, cbSceneParam._m0[90u].y, _1067 * cbSceneParam._m0[90u].x));
    float _1096 = fma(_1069, cbSceneParam._m0[91u].z, fma(_1068, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1067));
    float _1111 = _399 * 0.5;
    float _1112 = _400 * 0.5;
    float _1113 = _401 * 0.5;
    float _1114 = dot(vec4(_1111, _1112, _1113, 1.0), vec4(_1045, _1048, _1051, _1054));
    float _1117 = dot(vec4(_1111, _1112, _1113, 1.0), vec4(_1044, _1047, _1050, _1053));
    float _1120 = dot(vec4(_1111, _1112, _1113, 1.0), vec4(_1043, _1046, _1049, _1052));
    float _1154;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1127 = dot(vec4(_1111, _1112, _1113, 1.0), vec4(_733, _737, _740, _743));
        float _1131 = dot(vec4(_1111, _1112, _1113, 1.0), vec4(_735, _738, _741, _744));
        float _1135 = dot(vec4(_1111, _1112, _1113, 1.0), vec4(_736, _739, _742, _745));
        float _1142 = dot(vec4(cbModelParam._m0[39u]), vec4(_1111, _1112, _1113, 1.0));
        _1154 = dot(vec3(isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)), isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)), isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1142) ? 0.0 : (isnan(0.0) ? _1142 : max(0.0, _1142))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1154 = 1.0;
    }
    float _1165;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1156 = dot(vec4(cbModelParam._m0[40u]), vec4(_1111, _1112, _1113, 1.0));
        _1165 = dot(vec3(isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)), isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)), isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1156) ? 0.0 : (isnan(0.0) ? _1156 : max(0.0, _1156))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1165 = 1.0;
    }
    float _1169 = (_1165 * cbModelParam._m0[1u].x) + (_1154 * (1.0 - cbModelParam._m0[1u].x));
    float _1178 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1260;
    float _1262;
    float _1264;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1227 = fma(_431, cbModelParam._m0[13u].z, fma(_427, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _423)) + cbModelParam._m0[13u].w;
        float _1231 = fma(_431, cbModelParam._m0[14u].z, fma(_427, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _423)) + cbModelParam._m0[14u].w;
        float _1235 = fma(_431, cbModelParam._m0[15u].z, fma(_427, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _423)) + cbModelParam._m0[15u].w;
        float _1238 = fma(_401, cbModelParam._m0[13u].z, fma(_400, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _399));
        float _1241 = fma(_401, cbModelParam._m0[14u].z, fma(_400, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _399));
        float _1244 = fma(_401, cbModelParam._m0[15u].z, fma(_400, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _399));
        float _1270;
        if (_1238 > 0.0)
        {
            _1270 = abs((1.0 - _1227) / _1238);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1238 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1227 + 1.0) / _1238);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1270 = frontier_phi_14_12_ladder;
        }
        float _1444;
        if (_1241 > 0.0)
        {
            _1444 = abs((1.0 - _1231) / _1241);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1241 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1231 + 1.0) / _1241);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1444 = frontier_phi_23_19_ladder;
        }
        float _1741;
        if (_1244 > 0.0)
        {
            _1741 = abs((1.0 - _1235) / _1244);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1244 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1235 + 1.0) / _1244);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1741 = frontier_phi_35_30_ladder;
        }
        float _1743 = isnan(_1444) ? _1270 : (isnan(_1270) ? _1444 : min(_1270, _1444));
        float _1744 = isnan(_1741) ? _1743 : (isnan(_1743) ? _1741 : min(_1743, _1741));
        float _1748 = (_1744 * _1238) + _1227;
        float _1749 = (_1744 * _1241) + _1231;
        float _1750 = (_1744 * _1244) + _1235;
        float _1751 = _1744 * 9.9999997473787516355514526367188e-05;
        float _1753 = (-1.0) - _1751;
        float _1755 = _1751 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1750 > _1755) || ((_1750 < _1753) || ((_1749 > _1755) || ((_1749 < _1753) || ((_1748 < _1753) || (_1748 > _1755))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1895 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1750, cbModelParam._m0[9u].z, fma(_1749, cbModelParam._m0[9u].y, _1748 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1750, cbModelParam._m0[10u].z, fma(_1749, cbModelParam._m0[10u].y, _1748 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1750, cbModelParam._m0[11u].z, fma(_1749, cbModelParam._m0[11u].y, _1748 * cbModelParam._m0[11u].x))), _1178);
            frontier_phi_13_35_ladder = _1895.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1895.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1895.x * cbModelParam._m0[1u].y;
        }
        _1260 = frontier_phi_13_35_ladder_2;
        _1262 = frontier_phi_13_35_ladder_1;
        _1264 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1248 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_399, _400, _401), _1178);
        _1260 = _1248.x * cbModelParam._m0[1u].y;
        _1262 = _1248.y * cbModelParam._m0[1u].y;
        _1264 = _1248.z * cbModelParam._m0[1u].y;
    }
    float _1267 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1360;
    float _1362;
    float _1364;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1324 = fma(_431, cbModelParam._m0[21u].z, fma(_427, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _423)) + cbModelParam._m0[21u].w;
        float _1328 = fma(_431, cbModelParam._m0[22u].z, fma(_427, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _423)) + cbModelParam._m0[22u].w;
        float _1332 = fma(_431, cbModelParam._m0[23u].z, fma(_427, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _423)) + cbModelParam._m0[23u].w;
        float _1335 = fma(_401, cbModelParam._m0[21u].z, fma(_400, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _399));
        float _1338 = fma(_401, cbModelParam._m0[22u].z, fma(_400, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _399));
        float _1341 = fma(_401, cbModelParam._m0[23u].z, fma(_400, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _399));
        float _1449;
        if (_1335 > 0.0)
        {
            _1449 = abs((1.0 - _1324) / _1335);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1335 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1324 + 1.0) / _1335);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1449 = frontier_phi_25_21_ladder;
        }
        float _1768;
        if (_1338 > 0.0)
        {
            _1768 = abs((1.0 - _1328) / _1338);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1338 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1328 + 1.0) / _1338);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1768 = frontier_phi_37_32_ladder;
        }
        float _2041;
        if (_1341 > 0.0)
        {
            _2041 = abs((1.0 - _1332) / _1341);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1341 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1332 + 1.0) / _1341);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2041 = frontier_phi_47_44_ladder;
        }
        float _2043 = isnan(_1768) ? _1449 : (isnan(_1449) ? _1768 : min(_1449, _1768));
        float _2044 = isnan(_2041) ? _2043 : (isnan(_2043) ? _2041 : min(_2043, _2041));
        float _2048 = (_2044 * _1335) + _1324;
        float _2049 = (_2044 * _1338) + _1328;
        float _2050 = (_2044 * _1341) + _1332;
        float _2051 = _2044 * 9.9999997473787516355514526367188e-05;
        float _2052 = (-1.0) - _2051;
        float _2054 = _2051 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2050 > _2054) || ((_2050 < _2052) || ((_2049 > _2054) || ((_2049 < _2052) || ((_2048 < _2052) || (_2048 > _2054))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2141 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2050, cbModelParam._m0[17u].z, fma(_2049, cbModelParam._m0[17u].y, _2048 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2050, cbModelParam._m0[18u].z, fma(_2049, cbModelParam._m0[18u].y, _2048 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2050, cbModelParam._m0[19u].z, fma(_2049, cbModelParam._m0[19u].y, _2048 * cbModelParam._m0[19u].x))), _1267);
            frontier_phi_22_47_ladder = _2141.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2141.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2141.x * cbModelParam._m0[1u].z;
        }
        _1360 = frontier_phi_22_47_ladder_2;
        _1362 = frontier_phi_22_47_ladder_1;
        _1364 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1344 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_399, _400, _401), _1267);
        _1360 = _1344.x * cbModelParam._m0[1u].z;
        _1362 = _1344.y * cbModelParam._m0[1u].z;
        _1364 = _1344.z * cbModelParam._m0[1u].z;
    }
    float _1376 = _390 * 0.01200000010430812835693359375;
    float _1378 = _1376 * ((cbModelParam._m0[1u].w * (_1360 - _1260)) + _1260);
    float _1379 = _1376 * ((cbModelParam._m0[1u].w * (_1362 - _1262)) + _1262);
    float _1380 = _1376 * ((cbModelParam._m0[1u].w * (_1364 - _1264)) + _1264);
    float _1383 = fma(_1380, cbSceneParam._m0[89u].z, fma(_1379, cbSceneParam._m0[89u].y, _1378 * cbSceneParam._m0[89u].x));
    float _1386 = fma(_1380, cbSceneParam._m0[90u].z, fma(_1379, cbSceneParam._m0[90u].y, _1378 * cbSceneParam._m0[90u].x));
    float _1389 = fma(_1380, cbSceneParam._m0[91u].z, fma(_1379, cbSceneParam._m0[91u].y, _1378 * cbSceneParam._m0[91u].x));
    float _1423 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1427 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1431 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1435 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1436 = _1423 / _1435;
    float _1437 = _1427 / _1435;
    float _1438 = _1431 / _1435;
    float _1585;
    float _1586;
    float _1587;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1465 = ((uint(_1438 > cbSceneParam._m0[59u].y) + uint(_1438 > cbSceneParam._m0[59u].x)) + uint(_1438 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1466 = _1465 + 43u;
        uint _1474 = _1465 + 44u;
        uint _1482 = _1465 + 45u;
        uint _1490 = _1465 + 46u;
        float _1501 = fma(_1435, cbSceneParam._m0[_1466].w, fma(_1431, cbSceneParam._m0[_1466].z, fma(_1427, cbSceneParam._m0[_1466].y, _1423 * cbSceneParam._m0[_1466].x)));
        float _1505 = fma(_1435, cbSceneParam._m0[_1474].w, fma(_1431, cbSceneParam._m0[_1474].z, fma(_1427, cbSceneParam._m0[_1474].y, _1423 * cbSceneParam._m0[_1474].x)));
        float _1513 = fma(_1435, cbSceneParam._m0[_1490].w, fma(_1431, cbSceneParam._m0[_1490].z, fma(_1427, cbSceneParam._m0[_1490].y, _1423 * cbSceneParam._m0[_1490].x)));
        float _1518 = cbSceneParam._m0[33u].z * _1513;
        float _1520 = cbSceneParam._m0[33u].w * _1513;
        float _1523 = fma(_1435, cbSceneParam._m0[_1482].w, fma(_1431, cbSceneParam._m0[_1482].z, fma(_1427, cbSceneParam._m0[_1482].y, _1423 * cbSceneParam._m0[_1482].x))) / _1513;
        float _1571 = (cbSceneParam._m0[33u].x - sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438))) * cbSceneParam._m0[33u].y;
        float _3574 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1578 = (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1518 + _1501) / _1513, (_1520 + _1505) / _1513), _1523), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1520 + _1501) / _1513, (_1505 - _1518) / _1513), _1523), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1501 - _1518) / _1513, (_1505 - _1520) / _1513), _1523), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1501 - _1520) / _1513, (_1518 + _1505) / _1513), _1523), 0.0)).x), vec4(0.25)));
        _1585 = 1.0 - (_1578 * cbSceneParam._m0[34u].x);
        _1586 = 1.0 - (_1578 * cbSceneParam._m0[34u].y);
        _1587 = 1.0 - (_1578 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1585 = 1.0;
        _1586 = 1.0;
        _1587 = 1.0;
    }
    float _1651;
    float _1653;
    float _1655;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1639 = fma(_1435, cbSceneParam._m0[63u].w, fma(_1431, cbSceneParam._m0[63u].z, fma(_1427, cbSceneParam._m0[63u].y, _1423 * cbSceneParam._m0[63u].x)));
        float _1640 = fma(_1435, cbSceneParam._m0[60u].w, fma(_1431, cbSceneParam._m0[60u].z, fma(_1427, cbSceneParam._m0[60u].y, _1423 * cbSceneParam._m0[60u].x))) / _1639;
        float _1641 = fma(_1435, cbSceneParam._m0[61u].w, fma(_1431, cbSceneParam._m0[61u].z, fma(_1427, cbSceneParam._m0[61u].y, _1423 * cbSceneParam._m0[61u].x))) / _1639;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1640 >= cbSceneParam._m0[64u].x) && (_1641 >= cbSceneParam._m0[64u].y)) && (_1640 <= cbSceneParam._m0[64u].z)) && (_1641 <= cbSceneParam._m0[64u].w))
        {
            float _1781 = fma(_1435, cbSceneParam._m0[62u].w, fma(_1431, cbSceneParam._m0[62u].z, fma(_1427, cbSceneParam._m0[62u].y, _1423 * cbSceneParam._m0[62u].x))) / _1639;
            float _1785 = isnan(cbSceneParam._m0[41u].w) ? _1781 : (isnan(_1781) ? cbSceneParam._m0[41u].w : max(_1781, cbSceneParam._m0[41u].w));
            float _1828 = (cbSceneParam._m0[33u].x - sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438))) * cbSceneParam._m0[33u].y;
            float _3590 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
            float _1835 = (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1640, cbSceneParam._m0[33u].w + _1641), _1785), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1640, _1641 - cbSceneParam._m0[33u].z), _1785), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1640 - cbSceneParam._m0[33u].z, _1641 - cbSceneParam._m0[33u].w), _1785), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1640 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1641), _1785), 0.0)).x), vec4(0.25)));
            float _1839 = 1.0 - (_1835 * cbSceneParam._m0[34u].x);
            float _1840 = 1.0 - (_1835 * cbSceneParam._m0[34u].y);
            float _1841 = 1.0 - (_1835 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1841) ? _1587 : (isnan(_1587) ? _1841 : min(_1587, _1841));
            frontier_phi_34_33_ladder_1 = isnan(_1840) ? _1586 : (isnan(_1586) ? _1840 : min(_1586, _1840));
            frontier_phi_34_33_ladder_2 = isnan(_1839) ? _1585 : (isnan(_1585) ? _1839 : min(_1585, _1839));
        }
        else
        {
            frontier_phi_34_33_ladder = _1587;
            frontier_phi_34_33_ladder_1 = _1586;
            frontier_phi_34_33_ladder_2 = _1585;
        }
        _1651 = frontier_phi_34_33_ladder_2;
        _1653 = frontier_phi_34_33_ladder_1;
        _1655 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1651 = _1585;
        _1653 = _1586;
        _1655 = _1587;
    }
    uvec4 _1660 = floatBitsToUint(cbInstanceData._m0[_364 + 5u]);
    uint _1662 = _1660.x * 14u;
    uint _1663 = _1662 + 13u;
    float _1670 = _390 + (-1.0);
    float _1676 = (cbLight._m0[_1663].x * _1670) + 1.0;
    float _1677 = (cbLight._m0[_1663].y * _1670) + 1.0;
    float _1678 = (cbLight._m0[_1663].z * _1670) + 1.0;
    float _1679 = (cbLight._m0[_1663].w * _1670) + 1.0;
    uint _1680 = _1662 + 5u;
    float _1686 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
    uint _1690 = _1662 + 4u;
    float _1700 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
    uint _1704 = _1662 | 1u;
    float _1715 = dot(vec3(cbLight._m0[_1662].xyz), vec3(_246, _247, _248));
    float _1718 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_246, _247, _248));
    float _3626 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _3637 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1723 = (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * 0.3183098733425140380859375;
    float _1725 = (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * 0.3183098733425140380859375;
    float _1732 = ((cbLight._m0[_1680].x * _1686) * _1725) + (((cbLight._m0[_1690].x * _1651) * _1700) * _1723);
    float _1733 = ((_1686 * cbLight._m0[_1680].y) * _1725) + (((cbLight._m0[_1690].y * _1653) * _1700) * _1723);
    float _1734 = ((_1686 * cbLight._m0[_1680].z) * _1725) + (((cbLight._m0[_1690].z * _1655) * _1700) * _1723);
    uvec4 _1738 = floatBitsToUint(cbLight._m0[_1662 + 12u]);
    bool _1740 = _1738.x == 0u;
    float _1842;
    float _1844;
    float _1846;
    if (_1740)
    {
        _1842 = _1732;
        _1844 = _1733;
        _1846 = _1734;
    }
    else
    {
        uint _1850 = _1662 + 6u;
        float _1866 = (dot(vec3(cbLight._m0[_1662 + 2u].xyz), vec3(_246, _247, _248)) * 0.5) + 0.5;
        float _1867 = _1866 * _1866;
        float _3648 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1868 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1869 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
        _1842 = (((cbLight._m0[_1850].x * 0.3183098733425140380859375) * _1868) * _1869) + _1732;
        _1844 = (((cbLight._m0[_1850].y * 0.3183098733425140380859375) * _1868) * _1869) + _1733;
        _1846 = (((cbLight._m0[_1850].z * 0.3183098733425140380859375) * _1868) * _1869) + _1734;
    }
    bool _1849 = _1738.y == 0u;
    float _1904;
    float _1906;
    float _1908;
    if (_1849)
    {
        _1904 = _1842;
        _1906 = _1844;
        _1908 = _1846;
    }
    else
    {
        uint _2012 = _1662 + 7u;
        float _2028 = (dot(vec3(cbLight._m0[_1662 + 3u].xyz), vec3(_246, _247, _248)) * 0.5) + 0.5;
        float _2029 = _2028 * _2028;
        float _3664 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2030 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _2031 = isnan(1.0) ? _1679 : (isnan(_1679) ? 1.0 : min(_1679, 1.0));
        _1904 = (((cbLight._m0[_2012].x * 0.3183098733425140380859375) * _2030) * _2031) + _1842;
        _1906 = (((cbLight._m0[_2012].y * 0.3183098733425140380859375) * _2030) * _2031) + _1844;
        _1908 = (((cbLight._m0[_2012].z * 0.3183098733425140380859375) * _2030) * _2031) + _1846;
    }
    uint _1910 = _1662 + 8u;
    float _1916 = cbLight._m0[_1662].x + _316;
    float _1917 = cbLight._m0[_1662].y + _317;
    float _1918 = cbLight._m0[_1662].z + _318;
    float _1922 = inversesqrt(dot(vec3(_1916, _1917, _1918), vec3(_1916, _1917, _1918)));
    float _1926 = dot(vec3(_246, _247, _248), vec3(cbLight._m0[_1662].xyz));
    float _3680 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1929 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _3691 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _1930 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _1931 = dot(vec3(cbLight._m0[_1662].xyz), vec3(_1916 * _1922, _1917 * _1922, _1918 * _1922));
    float _3702 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1942 = (exp2(log2(1.0 - (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1948 = (0.5 / ((_1929 + 9.9999999392252902907785028219223e-09) + _1930)) * _1929;
    float _3713 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1950 = (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * 0.31831014156341552734375;
    uint _1964 = _1662 + 9u;
    float _1970 = cbLight._m0[_1704].x + _316;
    float _1971 = cbLight._m0[_1704].y + _317;
    float _1972 = cbLight._m0[_1704].z + _318;
    float _1976 = inversesqrt(dot(vec3(_1970, _1971, _1972), vec3(_1970, _1971, _1972)));
    float _1980 = dot(vec3(_246, _247, _248), vec3(cbLight._m0[_1704].xyz));
    float _3724 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1983 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _1984 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_1970 * _1976, _1971 * _1976, _1972 * _1976));
    float _3735 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1993 = (exp2(log2(1.0 - (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1997 = (0.5 / ((_1983 + 9.9999999392252902907785028219223e-09) + _1930)) * _1983;
    float _3746 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _1999 = (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * 0.31831014156341552734375;
    float _2009 = (((_1993 * cbLight._m0[_1964].x) * _1999) * _1686) + ((((cbLight._m0[_1910].x * _1651) * _1942) * _1950) * _1700);
    float _2010 = (((_1993 * cbLight._m0[_1964].y) * _1999) * _1686) + ((((cbLight._m0[_1910].y * _1653) * _1942) * _1950) * _1700);
    float _2011 = (((_1993 * cbLight._m0[_1964].z) * _1999) * _1686) + ((((cbLight._m0[_1910].z * _1655) * _1942) * _1950) * _1700);
    float _2067;
    float _2069;
    float _2071;
    if (_1740)
    {
        _2067 = _2009;
        _2069 = _2010;
        _2071 = _2011;
    }
    else
    {
        uint _2073 = _1662 + 10u;
        uint _2079 = _1662 + 2u;
        float _2085 = cbLight._m0[_2079].x + _316;
        float _2086 = cbLight._m0[_2079].y + _317;
        float _2087 = cbLight._m0[_2079].z + _318;
        float _2091 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
        float _2095 = dot(vec3(_246, _247, _248), vec3(cbLight._m0[_2079].xyz));
        float _3757 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2098 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _2099 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_2085 * _2091, _2086 * _2091, _2087 * _2091));
        float _3768 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2108 = (exp2(log2(1.0 - (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2112 = (0.5 / ((_2098 + 9.9999999392252902907785028219223e-09) + _1930)) * _2098;
        float _3779 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2114 = (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * 0.31831014156341552734375;
        float _2115 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
        _2067 = (((_2108 * cbLight._m0[_2073].x) * _2114) * _2115) + _2009;
        _2069 = (((_2108 * cbLight._m0[_2073].y) * _2114) * _2115) + _2010;
        _2071 = (((_2108 * cbLight._m0[_2073].z) * _2114) * _2115) + _2011;
    }
    float _2146;
    float _2148;
    float _2150;
    if (_1849)
    {
        _2146 = _2067;
        _2148 = _2069;
        _2150 = _2071;
    }
    else
    {
        uint _2157 = _1662 + 11u;
        uint _2163 = _1662 + 3u;
        float _2169 = cbLight._m0[_2163].x + _316;
        float _2170 = cbLight._m0[_2163].y + _317;
        float _2171 = cbLight._m0[_2163].z + _318;
        float _2175 = inversesqrt(dot(vec3(_2169, _2170, _2171), vec3(_2169, _2170, _2171)));
        float _2179 = dot(vec3(_246, _247, _248), vec3(cbLight._m0[_2163].xyz));
        float _3795 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2182 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _2183 = dot(vec3(cbLight._m0[_2163].xyz), vec3(_2169 * _2175, _2170 * _2175, _2171 * _2175));
        float _3806 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2192 = (exp2(log2(1.0 - (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2196 = (0.5 / ((_2182 + 9.9999999392252902907785028219223e-09) + _1930)) * _2182;
        float _3817 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2198 = (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * 0.31831014156341552734375;
        float _2199 = isnan(1.0) ? _1679 : (isnan(_1679) ? 1.0 : min(_1679, 1.0));
        _2146 = (((_2192 * cbLight._m0[_2157].x) * _2198) * _2199) + _2067;
        _2148 = (((_2192 * cbLight._m0[_2157].y) * _2198) * _2199) + _2069;
        _2150 = (((_2192 * cbLight._m0[_2157].z) * _2198) * _2199) + _2071;
    }
    float _2265;
    float _2267;
    float _2269;
    float _2271;
    float _2273;
    float _2275;
    if (_1660.y == 0u)
    {
        uvec4 _2220 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2221 = _2220.x;
        uint _2232 = uint((float(_2220.y) * floor(float(uint(cbSceneParam._m0[85u].y * _324) / _2221))) + floor(float(uint(cbSceneParam._m0[85u].x * _323) / _2221)));
        float _2242 = (log2(_1438 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2243 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        uint _2246 = uint(isnan(14.0) ? _2243 : (isnan(_2243) ? 14.0 : min(_2243, 14.0)));
        uvec4 _2251 = texelFetch(g_lightClusterGridBuffer, int(((_2246 << 2u) + (_2232 << 6u)) >> 2u));
        uint _2252 = _2251.x;
        uint _2253 = _2220.z;
        float _2334;
        float _2336;
        float _2338;
        float _2340;
        float _2342;
        float _2344;
        if (((((1u << ((_2253 >> 4u) & 15u)) + 4294967295u) & _2252) == 0u) || ((_2253 & 240u) == 0u))
        {
            _2334 = 0.0;
            _2336 = 0.0;
            _2338 = 0.0;
            _2340 = 0.0;
            _2342 = 0.0;
            _2344 = 0.0;
        }
        else
        {
            float _2335;
            float _2337;
            float _2339;
            float _2341;
            float _2343;
            float _2345;
            float _2476 = 0.0;
            float _2477 = 0.0;
            float _2478 = 0.0;
            float _2479 = 0.0;
            float _2480 = 0.0;
            float _2481 = 0.0;
            uint _2482 = 0u;
            uint _2491;
            bool _2492;
            for (;;)
            {
                _2491 = texelFetch(g_lightClassification, int((((_2246 << 5u) + (_2232 << 9u)) + (_2482 << 2u)) >> 2u)).x;
                _2492 = _2491 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2492)
                {
                    frontier_phi_66_pred = _2481;
                    frontier_phi_66_pred_1 = _2480;
                    frontier_phi_66_pred_2 = _2479;
                    frontier_phi_66_pred_3 = _2478;
                    frontier_phi_66_pred_4 = _2477;
                    frontier_phi_66_pred_5 = _2476;
                }
                else
                {
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    uint _2606;
                    _2600 = _2476;
                    _2601 = _2477;
                    _2602 = _2478;
                    _2603 = _2479;
                    _2604 = _2480;
                    _2605 = _2481;
                    _2606 = _2491;
                    float _2532;
                    float _2533;
                    float _2534;
                    float _2535;
                    float _2536;
                    float _2537;
                    for (;;)
                    {
                        uint _2610 = uint(findLSB(_2606)) + (_2482 << 5u);
                        uint _2607 = (_2606 + 4294967295u) & _2606;
                        uint _2612 = _2610 * 48u;
                        vec4 _2626 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2612)).x, texelFetch(g_PointLightRenderingBuffer, int(_2612 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2612 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2612 + 3u)).x));
                        uint _2632 = (_2610 * 48u) + 4u;
                        vec4 _2645 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2632)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 3u)).x));
                        uint _2651 = (_2610 * 48u) + 8u;
                        vec3 _2662 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2651)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 2u)).x));
                        float _2666 = _2626.x - _1436;
                        float _2667 = _2626.y - _1437;
                        float _2668 = _2626.z - _1438;
                        float _2669 = dot(vec3(_2666, _2667, _2668), vec3(_2666, _2667, _2668));
                        float _2672 = inversesqrt(_2669);
                        float _2681 = 1.0 - (_2669 * _2626.w);
                        float _3843 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
                        float _2682 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
                        float _2683 = sqrt(_2669) * _2645.w;
                        float _2686 = 1.39999997615814208984375 / (_2683 + 1.39999997615814208984375);
                        float _2687 = _2686 * _2686;
                        float _2690 = ((1.0 - _2687) * dot(vec3(_345, _348, _351), vec3(_2672 * _2666, _2672 * _2667, _2672 * _2668))) + _2687;
                        float _2693 = _2683 * _2683;
                        float _2697 = ((isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0))) * _2682) / ((_2693 * 0.699999988079071044921875) + 1.0);
                        float _2701 = (-0.0) - _1436;
                        float _2702 = (-0.0) - _1437;
                        float _2703 = (-0.0) - _1438;
                        float _2707 = inversesqrt(dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703)));
                        float _2711 = dot(vec3(_345, _348, _351), vec3(_2707 * _2701, _2707 * _2702, _2707 * _2703));
                        float _3859 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
                        float _3870 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
                        float _2715 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
                        float _2719 = (0.5 / (((isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) + 9.9999999392252902907785028219223e-09) + _2715)) * _2715;
                        float _3881 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
                        float _2728 = (((isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * 3.1415927410125732421875) / ((_2693 * 2.1991131305694580078125) + 3.141590118408203125)) * _2682;
                        _2535 = (_2697 * _2645.x) + _2603;
                        _2536 = (_2697 * _2645.y) + _2604;
                        _2537 = (_2697 * _2645.z) + _2605;
                        _2532 = (_2728 * _2662.x) + _2600;
                        _2533 = (_2728 * _2662.y) + _2601;
                        _2534 = (_2728 * _2662.z) + _2602;
                        if (_2607 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2600 = _2532;
                            _2601 = _2533;
                            _2602 = _2534;
                            _2603 = _2535;
                            _2604 = _2536;
                            _2605 = _2537;
                            _2606 = _2607;
                        }
                    }
                    frontier_phi_66_pred = _2537;
                    frontier_phi_66_pred_1 = _2536;
                    frontier_phi_66_pred_2 = _2535;
                    frontier_phi_66_pred_3 = _2534;
                    frontier_phi_66_pred_4 = _2533;
                    frontier_phi_66_pred_5 = _2532;
                }
                _2345 = frontier_phi_66_pred;
                _2343 = frontier_phi_66_pred_1;
                _2341 = frontier_phi_66_pred_2;
                _2339 = frontier_phi_66_pred_3;
                _2337 = frontier_phi_66_pred_4;
                _2335 = frontier_phi_66_pred_5;
                uint _2483 = _2482 + 1u;
                if (_2483 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2476 = _2335;
                    _2477 = _2337;
                    _2478 = _2339;
                    _2479 = _2341;
                    _2480 = _2343;
                    _2481 = _2345;
                    _2482 = _2483;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2334 = _2335;
            _2336 = _2337;
            _2338 = _2339;
            _2340 = _2341;
            _2342 = _2343;
            _2344 = _2345;
        }
        uvec4 _2348 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2349 = _2348.z;
        uint _2351 = (_2349 >> 8u) & 15u;
        float _2447;
        float _2449;
        float _2451;
        float _2453;
        float _2455;
        float _2457;
        if (((4294967295u << _2351) & _2252) == 0u)
        {
            _2447 = _2334;
            _2449 = _2336;
            _2451 = _2338;
            _2453 = _2340;
            _2455 = _2342;
            _2457 = _2344;
        }
        else
        {
            float _2472 = inversesqrt(dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2351 < ((_2349 >> 12u) & 15u))
            {
                float _2448;
                float _2450;
                float _2452;
                float _2454;
                float _2456;
                float _2458;
                float _2583 = _2334;
                float _2584 = _2336;
                float _2585 = _2338;
                float _2586 = _2340;
                float _2587 = _2342;
                float _2588 = _2344;
                uint _2589 = _2351;
                uint _2598;
                bool _2599;
                for (;;)
                {
                    _2598 = texelFetch(g_lightClassification, int((((_2246 << 5u) + (_2232 << 9u)) + (_2589 << 2u)) >> 2u)).x;
                    _2599 = _2598 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2599)
                    {
                        frontier_phi_72_pred = _2588;
                        frontier_phi_72_pred_1 = _2587;
                        frontier_phi_72_pred_2 = _2586;
                        frontier_phi_72_pred_3 = _2585;
                        frontier_phi_72_pred_4 = _2584;
                        frontier_phi_72_pred_5 = _2583;
                    }
                    else
                    {
                        float _2733;
                        float _2734;
                        float _2735;
                        float _2736;
                        float _2737;
                        float _2738;
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _2990;
                        float _2746 = _2583;
                        float _2747 = _2584;
                        float _2748 = _2585;
                        float _2749 = _2586;
                        float _2750 = _2587;
                        float _2751 = _2588;
                        uint _2752 = _2598;
                        uint _2753;
                        vec4 _2778;
                        float _2779;
                        vec4 _2794;
                        vec3 _2806;
                        vec4 _2822;
                        vec4 _2838;
                        float _2885;
                        bool _2886;
                        for (;;)
                        {
                            uint _2763 = ((_2589 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2752));
                            _2753 = (_2752 + 4294967295u) & _2752;
                            uint _2765 = _2763 * 40u;
                            _2778 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2765)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 3u)).x));
                            _2779 = _2778.w;
                            uint _2781 = (_2763 * 40u) + 4u;
                            _2794 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2781)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 3u)).x));
                            uint _2796 = (_2763 * 40u) + 8u;
                            _2806 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2796)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 2u)).x));
                            uint _2809 = (_2763 * 40u) + 16u;
                            _2822 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2809)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 3u)).x));
                            uint _2825 = (_2763 * 40u) + 20u;
                            _2838 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2825)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 3u)).x));
                            uint _2841 = (_2763 * 40u) + 24u;
                            vec4 _2854 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2841)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 3u)).x));
                            uint _2860 = (_2763 * 40u) + 28u;
                            vec4 _2873 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2860)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 3u)).x));
                            _2885 = fma(_1438, _2873.z, fma(_1437, _2873.y, _2873.x * _1436)) + _2873.w;
                            _2886 = !((fma(_1438, _2854.z, fma(_1437, _2854.y, _2854.x * _1436)) + _2854.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_2886)
                            {
                                float _2913 = _2778.x - _1436;
                                float _2914 = _2778.y - _1437;
                                float _2915 = _2778.z - _1438;
                                float _2916 = dot(vec3(_2913, _2914, _2915), vec3(_2913, _2914, _2915));
                                float _2919 = inversesqrt(_2916);
                                float _2920 = _2919 * _2913;
                                float _2921 = _2919 * _2914;
                                float _2922 = _2919 * _2915;
                                float _2926 = 1.0 - (_2916 / (_2779 * _2779));
                                float _3892 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                                float _2927 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
                                float _2931 = sqrt(_2916) * _2794.w;
                                float _2933 = 1.39999997615814208984375 / (_2931 + 1.39999997615814208984375);
                                float _2934 = _2933 * _2933;
                                float _2935 = 1.0 - _2934;
                                float _2937 = (_2935 * dot(vec3(_2920, _2921, _2922), vec3(_345, _348, _351))) + _2934;
                                float _2940 = _2931 * _2931;
                                float _2944 = (fma(_1438, _2822.z, fma(_1437, _2822.y, _2822.x * _1436)) + _2822.w) / _2885;
                                float _2945 = (fma(_1438, _2838.z, fma(_1437, _2838.y, _2838.x * _1436)) + _2838.w) / _2885;
                                float _2949 = 1.0 - dot(vec2(_2944, _2945), vec2(_2944, _2945));
                                float _3908 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                                float _2950 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
                                float _2951 = _2950 * (((isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0))) * _2927) / ((_2940 * 0.699999988079071044921875) + 1.0));
                                float _2961 = dot(vec3(_345, _348, _351), vec3((-0.0) - (_1436 * _2472), (-0.0) - (_1437 * _2472), (-0.0) - (_1438 * _2472)));
                                float _3919 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                                float _2969 = (_2935 * dot(vec3(_345, _348, _351), vec3(_2920, _2921, _2922))) + _2934;
                                float _3930 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                                float _2970 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
                                float _2974 = (0.5 / (((isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) + 9.9999999392252902907785028219223e-09) + _2970)) * _2970;
                                float _3941 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                                float _2981 = (_2950 * _2927) * (((isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * 3.1415927410125732421875) / ((_2940 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_78_pred = _2951 * _2794.y;
                                frontier_phi_78_pred_1 = _2951 * _2794.x;
                                frontier_phi_78_pred_2 = _2981 * _2806.z;
                                frontier_phi_78_pred_3 = _2981 * _2806.y;
                                frontier_phi_78_pred_4 = _2981 * _2806.x;
                                frontier_phi_78_pred_5 = _2951 * _2794.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _2989 = frontier_phi_78_pred;
                            _2988 = frontier_phi_78_pred_1;
                            _2987 = frontier_phi_78_pred_2;
                            _2986 = frontier_phi_78_pred_3;
                            _2985 = frontier_phi_78_pred_4;
                            _2990 = frontier_phi_78_pred_5;
                            _2736 = _2988 + _2749;
                            _2737 = _2989 + _2750;
                            _2738 = _2990 + _2751;
                            _2733 = _2985 + _2746;
                            _2734 = _2986 + _2747;
                            _2735 = _2987 + _2748;
                            if (_2753 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2746 = _2733;
                                _2747 = _2734;
                                _2748 = _2735;
                                _2749 = _2736;
                                _2750 = _2737;
                                _2751 = _2738;
                                _2752 = _2753;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2738;
                        frontier_phi_72_pred_1 = _2737;
                        frontier_phi_72_pred_2 = _2736;
                        frontier_phi_72_pred_3 = _2735;
                        frontier_phi_72_pred_4 = _2734;
                        frontier_phi_72_pred_5 = _2733;
                    }
                    _2458 = frontier_phi_72_pred;
                    _2456 = frontier_phi_72_pred_1;
                    _2454 = frontier_phi_72_pred_2;
                    _2452 = frontier_phi_72_pred_3;
                    _2450 = frontier_phi_72_pred_4;
                    _2448 = frontier_phi_72_pred_5;
                    uint _2590 = _2589 + 1u;
                    if (_2590 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2583 = _2448;
                        _2584 = _2450;
                        _2585 = _2452;
                        _2586 = _2454;
                        _2587 = _2456;
                        _2588 = _2458;
                        _2589 = _2590;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2458;
                frontier_phi_60_61_ladder_1 = _2456;
                frontier_phi_60_61_ladder_2 = _2452;
                frontier_phi_60_61_ladder_3 = _2450;
                frontier_phi_60_61_ladder_4 = _2448;
                frontier_phi_60_61_ladder_5 = _2454;
            }
            else
            {
                frontier_phi_60_61_ladder = _2344;
                frontier_phi_60_61_ladder_1 = _2342;
                frontier_phi_60_61_ladder_2 = _2338;
                frontier_phi_60_61_ladder_3 = _2336;
                frontier_phi_60_61_ladder_4 = _2334;
                frontier_phi_60_61_ladder_5 = _2340;
            }
            _2447 = frontier_phi_60_61_ladder_4;
            _2449 = frontier_phi_60_61_ladder_3;
            _2451 = frontier_phi_60_61_ladder_2;
            _2453 = frontier_phi_60_61_ladder_5;
            _2455 = frontier_phi_60_61_ladder_1;
            _2457 = frontier_phi_60_61_ladder;
        }
        float _2462 = isnan(1.0) ? _390 : (isnan(_390) ? 1.0 : min(_390, 1.0));
        _2265 = (_2462 * _2453) + _1904;
        _2267 = (_2462 * _2455) + _1906;
        _2269 = (_2462 * _2457) + _1908;
        _2271 = ((_2447 * 0.039999999105930328369140625) * _2462) + _2146;
        _2273 = ((_2449 * 0.039999999105930328369140625) * _2462) + _2148;
        _2275 = ((_2451 * 0.039999999105930328369140625) * _2462) + _2150;
    }
    else
    {
        _2265 = _1904;
        _2267 = _1906;
        _2269 = _1908;
        _2271 = _2146;
        _2273 = _2148;
        _2275 = _2150;
    }
    float _3957 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3968 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3979 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _3990 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _2300 = cbInstanceData._m0[_364 + 6u].w * (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)));
    float _2305 = _323 / cbSceneParam._m0[86u].x;
    float _2306 = _324 / cbSceneParam._m0[86u].y;
    vec4 _2320 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2305, _2306, (log2((isnan(cbSceneParam._m0[77u].w) ? _257 : (isnan(_257) ? cbSceneParam._m0[77u].w : min(_257, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2322 = _2320.x;
    float _2323 = _2320.y;
    float _2324 = _2320.z;
    float _2325 = _2320.w;
    float _2396;
    float _2398;
    float _2400;
    float _2402;
    if (_257 > cbSceneParam._m0[78u].w)
    {
        float _2359 = isnan(_257) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _257 : min(cbSceneParam._m0[80u].w, _257));
        float _2360 = _2359 / _257;
        float _2371 = _2360 * _309;
        float _2372 = _310 * _2360;
        float _2373 = (-0.0) - _2372;
        float _2374 = _2360 * _311;
        float _2376 = (cbSceneParam._m0[77u].w * _2373) / _2359;
        float _2377 = _2376 + cbSceneParam._m0[79u].w;
        float _2378 = cbSceneParam._m0[79u].w - _2372;
        float _2384 = sqrt(((_2371 * _2371) + (_2372 * _2372)) + (_2374 * _2374));
        float _2387 = (1.0 - (cbSceneParam._m0[77u].w / _2359)) * _2384;
        float _2392 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2394 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2545;
        if (abs((_2373 - _2376) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2545 = ((((_2377 > 0.0) ? exp2(_2392 * _2377) : (2.0 - exp2(_2394 * _2377))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2387;
        }
        else
        {
            float _2505 = 1.0 / cbSceneParam._m0[80u].x;
            float _2506 = isnan(_2378) ? _2377 : (isnan(_2377) ? _2378 : max(_2377, _2378));
            float _2507 = isnan(_2378) ? _2377 : (isnan(_2377) ? _2378 : min(_2377, _2378));
            float _2516 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : min(_2506, 0.0));
            float _2517 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : min(_2507, 0.0));
            _2545 = ((abs(_2384 / _2373) * cbSceneParam._m0[80u].y) * ((((_2516 - _2517) * 2.0) - ((exp2(_2392 * (isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0)))) - exp2(_2392 * (isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0))))) * _2505)) - ((exp2(_2394 * _2516) - exp2(_2394 * _2517)) * _2505))) + (_2387 * cbSceneParam._m0[80u].z);
        }
        vec4 _2547 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2305, _2306, 1.0), 0.0);
        float _2556 = exp2((_2545 * (-1.44269502162933349609375)) * (1.0 - _2547.w));
        float _2557 = log2(_2556);
        float _2573 = log2(_2325);
        _2396 = (exp2(_2573 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2557 * cbSceneParam._m0[78u].x)) * _2547.x) / cbSceneParam._m0[78u].x)) + _2322;
        _2398 = (exp2(_2573 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2557 * cbSceneParam._m0[78u].y)) * _2547.y) / cbSceneParam._m0[78u].y)) + _2323;
        _2400 = (exp2(_2573 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2557 * cbSceneParam._m0[78u].z)) * _2547.z) / cbSceneParam._m0[78u].z)) + _2324;
        _2402 = _2556 * _2325;
    }
    else
    {
        _2396 = _2322;
        _2398 = _2323;
        _2400 = _2324;
        _2402 = _2325;
    }
    float _2414 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2415 = _2414 == 3.0;
    float _2417 = log2(_2402);
    float _2424 = exp2(_2417 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_2265 + ((isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0))) * _390))) + ((_2271 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _1169)) * cbPerFrame._m0[3u].x));
    float _2425 = exp2(_2417 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_2267 + ((isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0))) * _390))) + ((_2273 + ((isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))) * _1169)) * cbPerFrame._m0[3u].x));
    float _2426 = exp2(_2417 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_2269 + ((isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0))) * _390))) + ((_2275 + ((isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))) * _1169)) * cbPerFrame._m0[3u].x));
    float _2435 = (_2414 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2435 * (_2415 ? _2424 : (_2424 + (cbSceneParam._m0[72u].w * _2396)));
    SV_Target.y = _2435 * (_2415 ? _2425 : (_2425 + (cbSceneParam._m0[72u].w * _2398)));
    SV_Target.z = _2435 * (_2415 ? _2426 : (_2426 + (cbSceneParam._m0[72u].w * _2400)));
    SV_Target.w = _2300;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2300;
}


