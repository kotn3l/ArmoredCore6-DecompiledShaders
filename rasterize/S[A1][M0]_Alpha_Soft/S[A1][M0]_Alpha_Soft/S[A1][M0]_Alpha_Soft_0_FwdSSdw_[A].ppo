#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Alpha_Soft_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _777;
float _2966;
float _2967;
float _2968;
float _2969;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _168 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _169 = _168 * NORMAL.x;
    float _170 = _168 * NORMAL.y;
    float _171 = _168 * NORMAL.z;
    vec4 _191 = texture(sampler2D(S_A1_M0_Alpha_Soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _197 = _191.w;
    float _198 = _191.x * cbMtdParam._m0[9u].x;
    float _199 = _191.y * cbMtdParam._m0[9u].y;
    float _200 = _191.z * cbMtdParam._m0[9u].z;
    vec4 _213 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _215 = _213.x;
    bool _222 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _239 = ((_222 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _215)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _215))) - POSITION_1.w) / cbMtdParam._m0[11u].x;
    float _2978 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _243 = (_197 * TEXCOORD_1.z) * (isnan(1.0) ? _2978 : (isnan(_2978) ? 1.0 : min(_2978, 1.0)));
    float _247 = inversesqrt(dot(vec3(_169, _170, _171), vec3(_169, _170, _171)));
    float _248 = _247 * _169;
    float _249 = _247 * _170;
    float _250 = _247 * _171;
    float _2989 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _251 = isnan(1.0) ? _2989 : (isnan(_2989) ? 1.0 : min(_2989, 1.0));
    float _3000 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _3011 = isnan(0.0) ? _199 : (isnan(_199) ? 0.0 : max(_199, 0.0));
    float _3022 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _259 = _222 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _301 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _311 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _301);
    float _312 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _301);
    float _313 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _301);
    float _317 = inversesqrt(dot(vec3(_311, _312, _313), vec3(_311, _312, _313)));
    float _318 = _311 * _317;
    float _319 = _312 * _317;
    float _320 = _313 * _317;
    vec4 _325 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _327 = _325.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _456 = sqrt(((_311 * _311) + (_312 * _312)) + (_313 * _313));
        float _462 = (cbMatDynParam._m0[5u].x * _456) + cbMatDynParam._m0[5u].y;
        float _3033 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
        float _463 = isnan(1.0) ? _3033 : (isnan(_3033) ? 1.0 : min(_3033, 1.0));
        float _467 = (cbMatDynParam._m0[5u].z * _456) + cbMatDynParam._m0[5u].w;
        float _3044 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3044 : (isnan(_3044) ? 1.0 : min(_3044, 1.0))) - _463)) + _463) < ((_327 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _338 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _339 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _359 = fma(_250, cbSceneParam._m0[5u].z, fma(_249, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _248));
    float _362 = fma(_250, cbSceneParam._m0[6u].z, fma(_249, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _248));
    float _365 = fma(_250, cbSceneParam._m0[7u].z, fma(_249, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _248));
    uint _378 = uint(roundEven(NORMAL.w)) * 13u;
    uint _380 = _378 + 9u;
    uint _381 = _380 + uint(cbMatDynParam._m0[0u].w);
    float _387 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3000 : (isnan(_3000) ? 1.0 : min(_3000, 1.0)))) * cbInstanceData._m0[_381].x;
    float _388 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3011 : (isnan(_3011) ? 1.0 : min(_3011, 1.0)))) * cbInstanceData._m0[_381].y;
    float _389 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3022 : (isnan(_3022) ? 1.0 : min(_3022, 1.0)))) * cbInstanceData._m0[_381].z;
    float _3055 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _390 = isnan(1.0) ? _3055 : (isnan(_3055) ? 1.0 : min(_3055, 1.0));
    float _3066 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _391 = isnan(1.0) ? _3066 : (isnan(_3066) ? 1.0 : min(_3066, 1.0));
    float _3077 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _392 = isnan(1.0) ? _3077 : (isnan(_3077) ? 1.0 : min(_3077, 1.0));
    vec4 _401 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _338, cbSceneParam._m0[86u].y * _339));
    float _404 = _401.x * TEXCOORD_1.w;
    float _405 = dot(vec3(_248, _249, _250), vec3(_318, _319, _320));
    float _408 = _405 * 2.0;
    float _413 = (_408 * _248) - _318;
    float _414 = (_408 * _249) - _319;
    float _415 = (_408 * _250) - _320;
    float _437 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _441 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _445 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _776;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    float _788;
    float _789;
    float _790;
    float _791;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _501 = fma(_445, cbModelParam._m0[26u].z, fma(_441, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _437));
        float _505 = fma(_445, cbModelParam._m0[27u].z, fma(_441, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _437));
        float _509 = fma(_445, cbModelParam._m0[28u].z, fma(_441, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _437));
        float _534 = _437 + _248;
        float _535 = _441 + _249;
        float _536 = _445 + _250;
        float _546 = fma(_536, cbModelParam._m0[26u].z, fma(_535, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _534)) - _501;
        float _547 = fma(_536, cbModelParam._m0[27u].z, fma(_535, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _534)) - _505;
        float _548 = fma(_536, cbModelParam._m0[28u].z, fma(_535, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _534)) - _509;
        float _552 = inversesqrt(dot(vec3(_546, _547, _548), vec3(_546, _547, _548)));
        float _565 = ((_552 * _546) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_501 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _566 = ((_552 * _547) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_505 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _567 = ((_552 * _548) / cbModelParam._m0[34u].z) + ((((((_509 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _570 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_565, _566, _567), 0.0);
        vec4 _577 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_565, _566, _567), 0.0);
        vec4 _584 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_565, _566, _567), 0.0);
        vec4 _591 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_565, _566, _567), 0.0);
        float _604 = exp2((_570.w + (-0.5)) * 20.0) * 2.0;
        float _605 = _604 * (_570.x + (-0.5));
        float _606 = _604 * (_570.y + (-0.5));
        float _607 = _604 * (_570.z + (-0.5));
        float _614 = exp2((_577.w + (-0.5)) * 20.0) * 2.0;
        float _615 = _614 * (_577.x + (-0.5));
        float _616 = _614 * (_577.y + (-0.5));
        float _617 = _614 * (_577.z + (-0.5));
        float _624 = exp2((_584.w + (-0.5)) * 20.0) * 2.0;
        float _625 = _624 * (_584.x + (-0.5));
        float _626 = _624 * (_584.y + (-0.5));
        float _627 = _624 * (_584.z + (-0.5));
        float _634 = exp2((_591.w + (-0.5)) * 20.0) * 2.0;
        float _635 = _634 * (_591.x + (-0.5));
        float _636 = _634 * (_591.y + (-0.5));
        float _637 = _634 * (_591.z + (-0.5));
        float _638 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
        float _639 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
        float _640 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
        float _641 = _605 * 0.5;
        float _642 = _615 * 0.5;
        float _643 = _625 * 0.5;
        float _644 = dot(vec3(_641, _642, _643), vec3(_641, _642, _643));
        float _649 = (_644 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_644);
        float _658 = (dot(vec3(_248, _249, _250), vec3(_649 * _641, _649 * _642, _649 * _643)) + 1.0) * 0.5;
        float _3103 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _668 = sqrt(((_642 * _642) + (_641 * _641)) + (_643 * _643)) / (_638 + 9.9999997473787516355514526367188e-06);
        float _3114 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _669 = isnan(1.0) ? _3114 : (isnan(_3114) ? 1.0 : min(_3114, 1.0));
        float _670 = _669 * 2.0;
        float _674 = (1.0 - _669) / (_669 + 1.0);
        float _3125 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        float _675 = isnan(1.0) ? _3125 : (isnan(_3125) ? 1.0 : min(_3125, 1.0));
        float _684 = ((((1.0 - _675) * (_670 + 2.0)) * exp2(log2(isnan(1.0) ? _3103 : (isnan(_3103) ? 1.0 : min(_3103, 1.0))) * (_670 + 1.0))) + _675) * _638;
        float _685 = _606 * 0.5;
        float _686 = _616 * 0.5;
        float _687 = _626 * 0.5;
        float _688 = dot(vec3(_685, _686, _687), vec3(_685, _686, _687));
        float _693 = (_688 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_688);
        float _701 = (dot(vec3(_248, _249, _250), vec3(_693 * _685, _693 * _686, _693 * _687)) + 1.0) * 0.5;
        float _3136 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _710 = sqrt(((_686 * _686) + (_685 * _685)) + (_687 * _687)) / (_639 + 9.9999997473787516355514526367188e-06);
        float _3147 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _711 = isnan(1.0) ? _3147 : (isnan(_3147) ? 1.0 : min(_3147, 1.0));
        float _712 = _711 * 2.0;
        float _716 = (1.0 - _711) / (_711 + 1.0);
        float _3158 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _717 = isnan(1.0) ? _3158 : (isnan(_3158) ? 1.0 : min(_3158, 1.0));
        float _726 = ((((1.0 - _717) * (_712 + 2.0)) * exp2(log2(isnan(1.0) ? _3136 : (isnan(_3136) ? 1.0 : min(_3136, 1.0))) * (_712 + 1.0))) + _717) * _639;
        float _727 = _607 * 0.5;
        float _728 = _617 * 0.5;
        float _729 = _627 * 0.5;
        float _730 = dot(vec3(_727, _728, _729), vec3(_727, _728, _729));
        float _735 = (_730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_730);
        float _743 = (dot(vec3(_248, _249, _250), vec3(_735 * _727, _735 * _728, _735 * _729)) + 1.0) * 0.5;
        float _3169 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _752 = sqrt(((_728 * _728) + (_727 * _727)) + (_729 * _729)) / (_640 + 9.9999997473787516355514526367188e-06);
        float _3180 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0));
        float _754 = _753 * 2.0;
        float _758 = (1.0 - _753) / (_753 + 1.0);
        float _3191 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0));
        float _768 = ((((1.0 - _759) * (_754 + 2.0)) * exp2(log2(isnan(1.0) ? _3169 : (isnan(_3169) ? 1.0 : min(_3169, 1.0))) * (_754 + 1.0))) + _759) * _640;
        _776 = _607;
        _778 = _606;
        _779 = _605;
        _780 = _617;
        _781 = _616;
        _782 = _615;
        _783 = _627;
        _784 = _626;
        _785 = _625;
        _786 = _640;
        _787 = _639;
        _788 = _638;
        _789 = cbModelParam._m0[36u].z * (isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0)));
        _790 = cbModelParam._m0[36u].z * (isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0)));
        _791 = cbModelParam._m0[36u].z * (isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0)));
    }
    else
    {
        _776 = _777;
        _778 = _777;
        _779 = _777;
        _780 = _777;
        _781 = _777;
        _782 = _777;
        _783 = _777;
        _784 = _777;
        _785 = _777;
        _786 = _777;
        _787 = _777;
        _788 = _777;
        _789 = 0.0;
        _790 = 0.0;
        _791 = 0.0;
    }
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _820 = fma(_445, cbModelParam._m0[30u].z, fma(_441, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _437));
        float _824 = fma(_445, cbModelParam._m0[31u].z, fma(_441, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _437));
        float _828 = fma(_445, cbModelParam._m0[32u].z, fma(_441, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _437));
        float _851 = _437 + _248;
        float _852 = _441 + _249;
        float _853 = _445 + _250;
        float _863 = fma(_853, cbModelParam._m0[30u].z, fma(_852, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _851)) - _820;
        float _864 = fma(_853, cbModelParam._m0[31u].z, fma(_852, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _851)) - _824;
        float _865 = fma(_853, cbModelParam._m0[32u].z, fma(_852, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _851)) - _828;
        float _869 = inversesqrt(dot(vec3(_863, _864, _865), vec3(_863, _864, _865)));
        float _882 = ((_869 * _863) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_820 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _883 = ((_869 * _864) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_824 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _884 = ((_869 * _865) / cbModelParam._m0[35u].z) + ((((((_828 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _886 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        float _919 = exp2((_886.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_886.x + (-0.5));
        float _921 = _919 * (_886.y + (-0.5));
        float _922 = _919 * (_886.z + (-0.5));
        float _929 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_893.x + (-0.5));
        float _931 = _929 * (_893.y + (-0.5));
        float _932 = _929 * (_893.z + (-0.5));
        float _939 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_900.x + (-0.5));
        float _941 = _939 * (_900.y + (-0.5));
        float _942 = _939 * (_900.z + (-0.5));
        float _949 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_907.x + (-0.5));
        float _951 = _949 * (_907.y + (-0.5));
        float _952 = _949 * (_907.z + (-0.5));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = _920 * 0.5;
        float _957 = _930 * 0.5;
        float _958 = _940 * 0.5;
        float _959 = dot(vec3(_956, _957, _958), vec3(_956, _957, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _972 = (dot(vec3(_248, _249, _250), vec3(_964 * _956, _964 * _957, _964 * _958)) + 1.0) * 0.5;
        float _3232 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _981 = sqrt(((_957 * _957) + (_956 * _956)) + (_958 * _958)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3243 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0));
        float _983 = _982 * 2.0;
        float _987 = (1.0 - _982) / (_982 + 1.0);
        float _3254 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0));
        float _997 = ((((1.0 - _988) * (_983 + 2.0)) * exp2(log2(isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0))) * (_983 + 1.0))) + _988) * _953;
        float _998 = _921 * 0.5;
        float _999 = _931 * 0.5;
        float _1000 = _941 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1014 = (dot(vec3(_248, _249, _250), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3265 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1023 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _3276 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _3287 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0))) * (_1025 + 1.0))) + _1030) * _954;
        float _1040 = _922 * 0.5;
        float _1041 = _932 * 0.5;
        float _1042 = _942 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1056 = (dot(vec3(_248, _249, _250), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3298 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1065 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3309 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3320 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0))) * (_1067 + 1.0))) + _1072) * _955;
        _1089 = _922;
        _1090 = _921;
        _1091 = _920;
        _1092 = _932;
        _1093 = _931;
        _1094 = _930;
        _1095 = _942;
        _1096 = _941;
        _1097 = _940;
        _1098 = _955;
        _1099 = _954;
        _1100 = _953;
        _1101 = cbModelParam._m0[36u].w * (isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0)));
        _1102 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
        _1103 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
    }
    else
    {
        _1089 = _777;
        _1090 = _777;
        _1091 = _777;
        _1092 = _777;
        _1093 = _777;
        _1094 = _777;
        _1095 = _777;
        _1096 = _777;
        _1097 = _777;
        _1098 = _777;
        _1099 = _777;
        _1100 = _777;
        _1101 = 0.0;
        _1102 = 0.0;
        _1103 = 0.0;
    }
    float _1113 = (cbModelParam._m0[1u].x * (_1101 - _789)) + _789;
    float _1114 = (cbModelParam._m0[1u].x * (_1102 - _790)) + _790;
    float _1115 = (cbModelParam._m0[1u].x * (_1103 - _791)) + _791;
    float _1136 = fma(_1115, cbSceneParam._m0[89u].z, fma(_1114, cbSceneParam._m0[89u].y, _1113 * cbSceneParam._m0[89u].x));
    float _1139 = fma(_1115, cbSceneParam._m0[90u].z, fma(_1114, cbSceneParam._m0[90u].y, _1113 * cbSceneParam._m0[90u].x));
    float _1142 = fma(_1115, cbSceneParam._m0[91u].z, fma(_1114, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1113));
    float _1157 = _413 * 0.5;
    float _1158 = _414 * 0.5;
    float _1159 = _415 * 0.5;
    float _1160 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_1091, _1094, _1097, _1100));
    float _1163 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_1090, _1093, _1096, _1099));
    float _1166 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_1089, _1092, _1095, _1098));
    float _1200;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1173 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_776, _780, _783, _786));
        float _1177 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_778, _781, _784, _787));
        float _1181 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_779, _782, _785, _788));
        float _1188 = dot(vec4(cbModelParam._m0[39u]), vec4(_1157, _1158, _1159, 1.0));
        _1200 = dot(vec3(isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)), isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)), isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1188) ? 0.0 : (isnan(0.0) ? _1188 : max(0.0, _1188))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1200 = 1.0;
    }
    float _1211;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1202 = dot(vec4(cbModelParam._m0[40u]), vec4(_1157, _1158, _1159, 1.0));
        _1211 = dot(vec3(isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)), isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)), isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1202) ? 0.0 : (isnan(0.0) ? _1202 : max(0.0, _1202))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1211 = 1.0;
    }
    float _1215 = (_1211 * cbModelParam._m0[1u].x) + (_1200 * (1.0 - cbModelParam._m0[1u].x));
    float _1224 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1306;
    float _1308;
    float _1310;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1273 = fma(_445, cbModelParam._m0[13u].z, fma(_441, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _437)) + cbModelParam._m0[13u].w;
        float _1277 = fma(_445, cbModelParam._m0[14u].z, fma(_441, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _437)) + cbModelParam._m0[14u].w;
        float _1281 = fma(_445, cbModelParam._m0[15u].z, fma(_441, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _437)) + cbModelParam._m0[15u].w;
        float _1284 = fma(_415, cbModelParam._m0[13u].z, fma(_414, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _413));
        float _1287 = fma(_415, cbModelParam._m0[14u].z, fma(_414, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _413));
        float _1290 = fma(_415, cbModelParam._m0[15u].z, fma(_414, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _413));
        float _1316;
        if (_1284 > 0.0)
        {
            _1316 = abs((1.0 - _1273) / _1284);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1284 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1273 + 1.0) / _1284);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1316 = frontier_phi_17_15_ladder;
        }
        float _1544;
        if (_1287 > 0.0)
        {
            _1544 = abs((1.0 - _1277) / _1287);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1287 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1277 + 1.0) / _1287);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1544 = frontier_phi_26_22_ladder;
        }
        float _1736;
        if (_1290 > 0.0)
        {
            _1736 = abs((1.0 - _1281) / _1290);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1290 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1281 + 1.0) / _1290);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1736 = frontier_phi_38_33_ladder;
        }
        float _1738 = isnan(_1544) ? _1316 : (isnan(_1316) ? _1544 : min(_1316, _1544));
        float _1739 = isnan(_1736) ? _1738 : (isnan(_1738) ? _1736 : min(_1738, _1736));
        float _1743 = (_1739 * _1284) + _1273;
        float _1744 = (_1739 * _1287) + _1277;
        float _1745 = (_1739 * _1290) + _1281;
        float _1746 = _1739 * 9.9999997473787516355514526367188e-05;
        float _1748 = (-1.0) - _1746;
        float _1750 = _1746 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1745 > _1750) || ((_1745 < _1748) || ((_1744 > _1750) || ((_1744 < _1748) || ((_1743 < _1748) || (_1743 > _1750))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1842 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1745, cbModelParam._m0[9u].z, fma(_1744, cbModelParam._m0[9u].y, _1743 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1745, cbModelParam._m0[10u].z, fma(_1744, cbModelParam._m0[10u].y, _1743 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1745, cbModelParam._m0[11u].z, fma(_1744, cbModelParam._m0[11u].y, _1743 * cbModelParam._m0[11u].x))), _1224);
            frontier_phi_16_38_ladder = _1842.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1842.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1842.x * cbModelParam._m0[1u].y;
        }
        _1306 = frontier_phi_16_38_ladder_2;
        _1308 = frontier_phi_16_38_ladder_1;
        _1310 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1294 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_413, _414, _415), _1224);
        _1306 = _1294.x * cbModelParam._m0[1u].y;
        _1308 = _1294.y * cbModelParam._m0[1u].y;
        _1310 = _1294.z * cbModelParam._m0[1u].y;
    }
    float _1313 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1406;
    float _1408;
    float _1410;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1370 = fma(_445, cbModelParam._m0[21u].z, fma(_441, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _437)) + cbModelParam._m0[21u].w;
        float _1374 = fma(_445, cbModelParam._m0[22u].z, fma(_441, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _437)) + cbModelParam._m0[22u].w;
        float _1378 = fma(_445, cbModelParam._m0[23u].z, fma(_441, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _437)) + cbModelParam._m0[23u].w;
        float _1381 = fma(_415, cbModelParam._m0[21u].z, fma(_414, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _413));
        float _1384 = fma(_415, cbModelParam._m0[22u].z, fma(_414, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _413));
        float _1387 = fma(_415, cbModelParam._m0[23u].z, fma(_414, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _413));
        float _1549;
        if (_1381 > 0.0)
        {
            _1549 = abs((1.0 - _1370) / _1381);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1381 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1370 + 1.0) / _1381);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1549 = frontier_phi_28_24_ladder;
        }
        float _1763;
        if (_1384 > 0.0)
        {
            _1763 = abs((1.0 - _1374) / _1384);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1384 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1374 + 1.0) / _1384);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1763 = frontier_phi_40_35_ladder;
        }
        float _1914;
        if (_1387 > 0.0)
        {
            _1914 = abs((1.0 - _1378) / _1387);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1387 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1378 + 1.0) / _1387);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1914 = frontier_phi_49_46_ladder;
        }
        float _1916 = isnan(_1763) ? _1549 : (isnan(_1549) ? _1763 : min(_1549, _1763));
        float _1917 = isnan(_1914) ? _1916 : (isnan(_1916) ? _1914 : min(_1916, _1914));
        float _1921 = (_1917 * _1381) + _1370;
        float _1922 = (_1917 * _1384) + _1374;
        float _1923 = (_1917 * _1387) + _1378;
        float _1924 = _1917 * 9.9999997473787516355514526367188e-05;
        float _1925 = (-1.0) - _1924;
        float _1927 = _1924 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1923 > _1927) || ((_1923 < _1925) || ((_1922 > _1927) || ((_1922 < _1925) || ((_1921 < _1925) || (_1921 > _1927))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2124 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1923, cbModelParam._m0[17u].z, fma(_1922, cbModelParam._m0[17u].y, _1921 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1923, cbModelParam._m0[18u].z, fma(_1922, cbModelParam._m0[18u].y, _1921 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1923, cbModelParam._m0[19u].z, fma(_1922, cbModelParam._m0[19u].y, _1921 * cbModelParam._m0[19u].x))), _1313);
            frontier_phi_25_49_ladder = _2124.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2124.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2124.x * cbModelParam._m0[1u].z;
        }
        _1406 = frontier_phi_25_49_ladder_2;
        _1408 = frontier_phi_25_49_ladder_1;
        _1410 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1390 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_413, _414, _415), _1313);
        _1406 = _1390.x * cbModelParam._m0[1u].z;
        _1408 = _1390.y * cbModelParam._m0[1u].z;
        _1410 = _1390.z * cbModelParam._m0[1u].z;
    }
    float _1422 = _404 * 0.01200000010430812835693359375;
    float _1424 = _1422 * ((cbModelParam._m0[1u].w * (_1406 - _1306)) + _1306);
    float _1425 = _1422 * ((cbModelParam._m0[1u].w * (_1408 - _1308)) + _1308);
    float _1426 = _1422 * ((cbModelParam._m0[1u].w * (_1410 - _1310)) + _1310);
    float _1429 = fma(_1426, cbSceneParam._m0[89u].z, fma(_1425, cbSceneParam._m0[89u].y, _1424 * cbSceneParam._m0[89u].x));
    float _1432 = fma(_1426, cbSceneParam._m0[90u].z, fma(_1425, cbSceneParam._m0[90u].y, _1424 * cbSceneParam._m0[90u].x));
    float _1435 = fma(_1426, cbSceneParam._m0[91u].z, fma(_1425, cbSceneParam._m0[91u].y, _1424 * cbSceneParam._m0[91u].x));
    vec4 _1443 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_338, _339));
    float _1445 = _1443.w;
    float _1457 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1445);
    float _1458 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1445);
    float _1459 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1445);
    uvec4 _1463 = floatBitsToUint(cbInstanceData._m0[_378 + 5u]);
    uint _1465 = _1463.x * 14u;
    uint _1466 = _1465 + 13u;
    float _1473 = _404 + (-1.0);
    float _1479 = (cbLight._m0[_1466].x * _1473) + 1.0;
    float _1480 = (cbLight._m0[_1466].y * _1473) + 1.0;
    float _1481 = (cbLight._m0[_1466].z * _1473) + 1.0;
    float _1482 = (cbLight._m0[_1466].w * _1473) + 1.0;
    uint _1483 = _1465 + 5u;
    float _1489 = isnan(1.0) ? _1480 : (isnan(_1480) ? 1.0 : min(_1480, 1.0));
    uint _1493 = _1465 + 4u;
    float _1503 = isnan(1.0) ? _1479 : (isnan(_1479) ? 1.0 : min(_1479, 1.0));
    uint _1507 = _1465 | 1u;
    float _1518 = dot(vec3(cbLight._m0[_1465].xyz), vec3(_248, _249, _250));
    float _1521 = dot(vec3(cbLight._m0[_1507].xyz), vec3(_248, _249, _250));
    float _3456 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
    float _3467 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
    float _1526 = (isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * 0.3183098733425140380859375;
    float _1528 = (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * 0.3183098733425140380859375;
    float _1535 = ((cbLight._m0[_1483].x * _1489) * _1528) + (((cbLight._m0[_1493].x * _1457) * _1503) * _1526);
    float _1536 = ((_1489 * cbLight._m0[_1483].y) * _1528) + (((cbLight._m0[_1493].y * _1458) * _1503) * _1526);
    float _1537 = ((_1489 * cbLight._m0[_1483].z) * _1528) + (((cbLight._m0[_1493].z * _1459) * _1503) * _1526);
    uvec4 _1541 = floatBitsToUint(cbLight._m0[_1465 + 12u]);
    bool _1543 = _1541.x == 0u;
    float _1554;
    float _1556;
    float _1558;
    if (_1543)
    {
        _1554 = _1535;
        _1556 = _1536;
        _1558 = _1537;
    }
    else
    {
        uint _1562 = _1465 + 6u;
        float _1578 = (dot(vec3(cbLight._m0[_1465 + 2u].xyz), vec3(_248, _249, _250)) * 0.5) + 0.5;
        float _1579 = _1578 * _1578;
        float _3478 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _1581 = isnan(1.0) ? _1481 : (isnan(_1481) ? 1.0 : min(_1481, 1.0));
        _1554 = (((cbLight._m0[_1562].x * 0.3183098733425140380859375) * _1580) * _1581) + _1535;
        _1556 = (((cbLight._m0[_1562].y * 0.3183098733425140380859375) * _1580) * _1581) + _1536;
        _1558 = (((cbLight._m0[_1562].z * 0.3183098733425140380859375) * _1580) * _1581) + _1537;
    }
    bool _1561 = _1541.y == 0u;
    float _1599;
    float _1601;
    float _1603;
    if (_1561)
    {
        _1599 = _1554;
        _1601 = _1556;
        _1603 = _1558;
    }
    else
    {
        uint _1707 = _1465 + 7u;
        float _1723 = (dot(vec3(cbLight._m0[_1465 + 3u].xyz), vec3(_248, _249, _250)) * 0.5) + 0.5;
        float _1724 = _1723 * _1723;
        float _3494 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _1726 = isnan(1.0) ? _1482 : (isnan(_1482) ? 1.0 : min(_1482, 1.0));
        _1599 = (((cbLight._m0[_1707].x * 0.3183098733425140380859375) * _1725) * _1726) + _1554;
        _1601 = (((cbLight._m0[_1707].y * 0.3183098733425140380859375) * _1725) * _1726) + _1556;
        _1603 = (((cbLight._m0[_1707].z * 0.3183098733425140380859375) * _1725) * _1726) + _1558;
    }
    uint _1605 = _1465 + 8u;
    float _1611 = cbLight._m0[_1465].x + _318;
    float _1612 = cbLight._m0[_1465].y + _319;
    float _1613 = cbLight._m0[_1465].z + _320;
    float _1617 = inversesqrt(dot(vec3(_1611, _1612, _1613), vec3(_1611, _1612, _1613)));
    float _1621 = dot(vec3(_248, _249, _250), vec3(cbLight._m0[_1465].xyz));
    float _3510 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
    float _1624 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _3521 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _1625 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _1626 = dot(vec3(cbLight._m0[_1465].xyz), vec3(_1611 * _1617, _1612 * _1617, _1613 * _1617));
    float _3532 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
    float _1637 = (exp2(log2(1.0 - (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1643 = (0.5 / ((_1624 + 9.9999999392252902907785028219223e-09) + _1625)) * _1624;
    float _3543 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
    float _1645 = (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * 0.31831014156341552734375;
    uint _1659 = _1465 + 9u;
    float _1665 = cbLight._m0[_1507].x + _318;
    float _1666 = cbLight._m0[_1507].y + _319;
    float _1667 = cbLight._m0[_1507].z + _320;
    float _1671 = inversesqrt(dot(vec3(_1665, _1666, _1667), vec3(_1665, _1666, _1667)));
    float _1675 = dot(vec3(_248, _249, _250), vec3(cbLight._m0[_1507].xyz));
    float _3554 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
    float _1678 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _1679 = dot(vec3(cbLight._m0[_1507].xyz), vec3(_1665 * _1671, _1666 * _1671, _1667 * _1671));
    float _3565 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
    float _1688 = (exp2(log2(1.0 - (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1692 = (0.5 / ((_1678 + 9.9999999392252902907785028219223e-09) + _1625)) * _1678;
    float _3576 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
    float _1694 = (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * 0.31831014156341552734375;
    float _1704 = (((_1688 * cbLight._m0[_1659].x) * _1694) * _1489) + ((((cbLight._m0[_1605].x * _1457) * _1637) * _1645) * _1503);
    float _1705 = (((_1688 * cbLight._m0[_1659].y) * _1694) * _1489) + ((((cbLight._m0[_1605].y * _1458) * _1637) * _1645) * _1503);
    float _1706 = (((_1688 * cbLight._m0[_1659].z) * _1694) * _1489) + ((((cbLight._m0[_1605].z * _1459) * _1637) * _1645) * _1503);
    float _1768;
    float _1770;
    float _1772;
    if (_1543)
    {
        _1768 = _1704;
        _1770 = _1705;
        _1772 = _1706;
    }
    else
    {
        uint _1774 = _1465 + 10u;
        uint _1780 = _1465 + 2u;
        float _1786 = cbLight._m0[_1780].x + _318;
        float _1787 = cbLight._m0[_1780].y + _319;
        float _1788 = cbLight._m0[_1780].z + _320;
        float _1792 = inversesqrt(dot(vec3(_1786, _1787, _1788), vec3(_1786, _1787, _1788)));
        float _1796 = dot(vec3(_248, _249, _250), vec3(cbLight._m0[_1780].xyz));
        float _3587 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1799 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _1800 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_1786 * _1792, _1787 * _1792, _1788 * _1792));
        float _3598 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1809 = (exp2(log2(1.0 - (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1813 = (0.5 / ((_1799 + 9.9999999392252902907785028219223e-09) + _1625)) * _1799;
        float _3609 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1815 = (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * 0.31831014156341552734375;
        float _1816 = isnan(1.0) ? _1481 : (isnan(_1481) ? 1.0 : min(_1481, 1.0));
        _1768 = (((_1809 * cbLight._m0[_1774].x) * _1815) * _1816) + _1704;
        _1770 = (((_1809 * cbLight._m0[_1774].y) * _1815) * _1816) + _1705;
        _1772 = (((_1809 * cbLight._m0[_1774].z) * _1815) * _1816) + _1706;
    }
    float _1851;
    float _1853;
    float _1855;
    if (_1561)
    {
        _1851 = _1768;
        _1853 = _1770;
        _1855 = _1772;
    }
    else
    {
        uint _1862 = _1465 + 11u;
        uint _1868 = _1465 + 3u;
        float _1874 = cbLight._m0[_1868].x + _318;
        float _1875 = cbLight._m0[_1868].y + _319;
        float _1876 = cbLight._m0[_1868].z + _320;
        float _1880 = inversesqrt(dot(vec3(_1874, _1875, _1876), vec3(_1874, _1875, _1876)));
        float _1884 = dot(vec3(_248, _249, _250), vec3(cbLight._m0[_1868].xyz));
        float _3625 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1887 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1888 = dot(vec3(cbLight._m0[_1868].xyz), vec3(_1874 * _1880, _1875 * _1880, _1876 * _1880));
        float _3636 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1897 = (exp2(log2(1.0 - (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1901 = (0.5 / ((_1887 + 9.9999999392252902907785028219223e-09) + _1625)) * _1887;
        float _3647 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
        float _1903 = (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * 0.31831014156341552734375;
        float _1904 = isnan(1.0) ? _1482 : (isnan(_1482) ? 1.0 : min(_1482, 1.0));
        _1851 = (((_1897 * cbLight._m0[_1862].x) * _1903) * _1904) + _1768;
        _1853 = (((_1897 * cbLight._m0[_1862].y) * _1903) * _1904) + _1770;
        _1855 = (((_1897 * cbLight._m0[_1862].z) * _1903) * _1904) + _1772;
    }
    float _2039;
    float _2041;
    float _2043;
    float _2045;
    float _2047;
    float _2049;
    if (_1463.y == 0u)
    {
        float _1979 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1980 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1979;
        float _1981 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1979;
        float _1982 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1979;
        uvec4 _1994 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1995 = _1994.x;
        uint _2006 = uint((float(_1994.y) * floor(float(uint(cbSceneParam._m0[85u].y * _339) / _1995))) + floor(float(uint(cbSceneParam._m0[85u].x * _338) / _1995)));
        float _2016 = (log2(_1982 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2017 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        uint _2020 = uint(isnan(14.0) ? _2017 : (isnan(_2017) ? 14.0 : min(_2017, 14.0)));
        uvec4 _2025 = texelFetch(g_lightClusterGridBuffer, int(((_2020 << 2u) + (_2006 << 6u)) >> 2u));
        uint _2026 = _2025.x;
        uint _2027 = _1994.z;
        float _2129;
        float _2131;
        float _2133;
        float _2135;
        float _2137;
        float _2139;
        if (((((1u << ((_2027 >> 4u) & 15u)) + 4294967295u) & _2026) == 0u) || ((_2027 & 240u) == 0u))
        {
            _2129 = 0.0;
            _2131 = 0.0;
            _2133 = 0.0;
            _2135 = 0.0;
            _2137 = 0.0;
            _2139 = 0.0;
        }
        else
        {
            float _2130;
            float _2132;
            float _2134;
            float _2136;
            float _2138;
            float _2140;
            float _2280 = 0.0;
            float _2281 = 0.0;
            float _2282 = 0.0;
            float _2283 = 0.0;
            float _2284 = 0.0;
            float _2285 = 0.0;
            uint _2286 = 0u;
            uint _2295;
            bool _2296;
            for (;;)
            {
                _2295 = texelFetch(g_lightClassification, int((((_2020 << 5u) + (_2006 << 9u)) + (_2286 << 2u)) >> 2u)).x;
                _2296 = _2295 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2296)
                {
                    frontier_phi_66_pred = _2280;
                    frontier_phi_66_pred_1 = _2285;
                    frontier_phi_66_pred_2 = _2284;
                    frontier_phi_66_pred_3 = _2283;
                    frontier_phi_66_pred_4 = _2282;
                    frontier_phi_66_pred_5 = _2281;
                }
                else
                {
                    float _2425;
                    float _2426;
                    float _2427;
                    float _2428;
                    float _2429;
                    float _2430;
                    uint _2431;
                    _2425 = _2280;
                    _2426 = _2281;
                    _2427 = _2282;
                    _2428 = _2283;
                    _2429 = _2284;
                    _2430 = _2285;
                    _2431 = _2295;
                    float _2352;
                    float _2353;
                    float _2354;
                    float _2355;
                    float _2356;
                    float _2357;
                    for (;;)
                    {
                        uint _2435 = uint(findLSB(_2431)) + (_2286 << 5u);
                        uint _2432 = (_2431 + 4294967295u) & _2431;
                        uint _2437 = _2435 * 48u;
                        vec4 _2451 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2437)).x, texelFetch(g_PointLightRenderingBuffer, int(_2437 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2437 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2437 + 3u)).x));
                        uint _2457 = (_2435 * 48u) + 4u;
                        vec4 _2470 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2457)).x, texelFetch(g_PointLightRenderingBuffer, int(_2457 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2457 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2457 + 3u)).x));
                        uint _2476 = (_2435 * 48u) + 8u;
                        vec3 _2487 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2476)).x, texelFetch(g_PointLightRenderingBuffer, int(_2476 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2476 + 2u)).x));
                        float _2491 = _2451.x - _1980;
                        float _2492 = _2451.y - _1981;
                        float _2493 = _2451.z - _1982;
                        float _2494 = dot(vec3(_2491, _2492, _2493), vec3(_2491, _2492, _2493));
                        float _2497 = inversesqrt(_2494);
                        float _2506 = 1.0 - (_2494 * _2451.w);
                        float _3673 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
                        float _2507 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
                        float _2508 = sqrt(_2494) * _2470.w;
                        float _2511 = 1.39999997615814208984375 / (_2508 + 1.39999997615814208984375);
                        float _2512 = _2511 * _2511;
                        float _2515 = ((1.0 - _2512) * dot(vec3(_359, _362, _365), vec3(_2497 * _2491, _2497 * _2492, _2497 * _2493))) + _2512;
                        float _2518 = _2508 * _2508;
                        float _2522 = ((isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0))) * _2507) / ((_2518 * 0.699999988079071044921875) + 1.0);
                        float _2526 = (-0.0) - _1980;
                        float _2527 = (-0.0) - _1981;
                        float _2528 = (-0.0) - _1982;
                        float _2532 = inversesqrt(dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528)));
                        float _2536 = dot(vec3(_359, _362, _365), vec3(_2532 * _2526, _2532 * _2527, _2532 * _2528));
                        float _3689 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
                        float _3700 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
                        float _2540 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
                        float _2544 = (0.5 / (((isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) + 9.9999999392252902907785028219223e-09) + _2540)) * _2540;
                        float _3711 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
                        float _2553 = (((isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * 3.1415927410125732421875) / ((_2518 * 2.1991131305694580078125) + 3.141590118408203125)) * _2507;
                        _2355 = (_2522 * _2470.x) + _2428;
                        _2356 = (_2522 * _2470.y) + _2429;
                        _2357 = (_2522 * _2470.z) + _2430;
                        _2352 = (_2553 * _2487.x) + _2425;
                        _2353 = (_2553 * _2487.y) + _2426;
                        _2354 = (_2553 * _2487.z) + _2427;
                        if (_2432 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2425 = _2352;
                            _2426 = _2353;
                            _2427 = _2354;
                            _2428 = _2355;
                            _2429 = _2356;
                            _2430 = _2357;
                            _2431 = _2432;
                        }
                    }
                    frontier_phi_66_pred = _2352;
                    frontier_phi_66_pred_1 = _2357;
                    frontier_phi_66_pred_2 = _2356;
                    frontier_phi_66_pred_3 = _2355;
                    frontier_phi_66_pred_4 = _2354;
                    frontier_phi_66_pred_5 = _2353;
                }
                _2130 = frontier_phi_66_pred;
                _2140 = frontier_phi_66_pred_1;
                _2138 = frontier_phi_66_pred_2;
                _2136 = frontier_phi_66_pred_3;
                _2134 = frontier_phi_66_pred_4;
                _2132 = frontier_phi_66_pred_5;
                uint _2287 = _2286 + 1u;
                if (_2287 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2280 = _2130;
                    _2281 = _2132;
                    _2282 = _2134;
                    _2283 = _2136;
                    _2284 = _2138;
                    _2285 = _2140;
                    _2286 = _2287;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2129 = _2130;
            _2131 = _2132;
            _2133 = _2134;
            _2135 = _2136;
            _2137 = _2138;
            _2139 = _2140;
        }
        uvec4 _2143 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2144 = _2143.z;
        uint _2146 = (_2144 >> 8u) & 15u;
        float _2251;
        float _2253;
        float _2255;
        float _2257;
        float _2259;
        float _2261;
        if (((4294967295u << _2146) & _2026) == 0u)
        {
            _2251 = _2129;
            _2253 = _2131;
            _2255 = _2133;
            _2257 = _2135;
            _2259 = _2137;
            _2261 = _2139;
        }
        else
        {
            float _2276 = inversesqrt(dot(vec3(_1980, _1981, _1982), vec3(_1980, _1981, _1982)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2146 < ((_2144 >> 12u) & 15u))
            {
                float _2252;
                float _2254;
                float _2256;
                float _2258;
                float _2260;
                float _2262;
                float _2408 = _2129;
                float _2409 = _2131;
                float _2410 = _2133;
                float _2411 = _2135;
                float _2412 = _2137;
                float _2413 = _2139;
                uint _2414 = _2146;
                uint _2423;
                bool _2424;
                for (;;)
                {
                    _2423 = texelFetch(g_lightClassification, int((((_2020 << 5u) + (_2006 << 9u)) + (_2414 << 2u)) >> 2u)).x;
                    _2424 = _2423 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2424)
                    {
                        frontier_phi_77_pred = _2413;
                        frontier_phi_77_pred_1 = _2412;
                        frontier_phi_77_pred_2 = _2411;
                        frontier_phi_77_pred_3 = _2410;
                        frontier_phi_77_pred_4 = _2409;
                        frontier_phi_77_pred_5 = _2408;
                    }
                    else
                    {
                        float _2567;
                        float _2568;
                        float _2569;
                        float _2570;
                        float _2571;
                        float _2572;
                        float _2819;
                        float _2820;
                        float _2821;
                        float _2822;
                        float _2823;
                        float _2824;
                        float _2580 = _2408;
                        float _2581 = _2409;
                        float _2582 = _2410;
                        float _2583 = _2411;
                        float _2584 = _2412;
                        float _2585 = _2413;
                        uint _2586 = _2423;
                        uint _2587;
                        vec4 _2612;
                        float _2613;
                        vec4 _2628;
                        vec3 _2640;
                        vec4 _2656;
                        vec4 _2672;
                        float _2719;
                        bool _2720;
                        for (;;)
                        {
                            uint _2597 = ((_2414 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2586));
                            _2587 = (_2586 + 4294967295u) & _2586;
                            uint _2599 = _2597 * 40u;
                            _2612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2599 + 3u)).x));
                            _2613 = _2612.w;
                            uint _2615 = (_2597 * 40u) + 4u;
                            _2628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2615 + 3u)).x));
                            uint _2630 = (_2597 * 40u) + 8u;
                            _2640 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 2u)).x));
                            uint _2643 = (_2597 * 40u) + 16u;
                            _2656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2643 + 3u)).x));
                            uint _2659 = (_2597 * 40u) + 20u;
                            _2672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2659 + 3u)).x));
                            uint _2675 = (_2597 * 40u) + 24u;
                            vec4 _2688 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2675 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2675 + 3u)).x));
                            uint _2694 = (_2597 * 40u) + 28u;
                            vec4 _2707 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2694 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2694 + 3u)).x));
                            _2719 = fma(_1982, _2707.z, fma(_1981, _2707.y, _2707.x * _1980)) + _2707.w;
                            _2720 = !((fma(_1982, _2688.z, fma(_1981, _2688.y, _2688.x * _1980)) + _2688.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2720)
                            {
                                float _2747 = _2612.x - _1980;
                                float _2748 = _2612.y - _1981;
                                float _2749 = _2612.z - _1982;
                                float _2750 = dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749));
                                float _2753 = inversesqrt(_2750);
                                float _2754 = _2753 * _2747;
                                float _2755 = _2753 * _2748;
                                float _2756 = _2753 * _2749;
                                float _2760 = 1.0 - (_2750 / (_2613 * _2613));
                                float _3722 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
                                float _2761 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
                                float _2765 = sqrt(_2750) * _2628.w;
                                float _2767 = 1.39999997615814208984375 / (_2765 + 1.39999997615814208984375);
                                float _2768 = _2767 * _2767;
                                float _2769 = 1.0 - _2768;
                                float _2771 = (_2769 * dot(vec3(_2754, _2755, _2756), vec3(_359, _362, _365))) + _2768;
                                float _2774 = _2765 * _2765;
                                float _2778 = (fma(_1982, _2656.z, fma(_1981, _2656.y, _2656.x * _1980)) + _2656.w) / _2719;
                                float _2779 = (fma(_1982, _2672.z, fma(_1981, _2672.y, _2672.x * _1980)) + _2672.w) / _2719;
                                float _2783 = 1.0 - dot(vec2(_2778, _2779), vec2(_2778, _2779));
                                float _3738 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
                                float _2784 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
                                float _2785 = _2784 * (((isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0))) * _2761) / ((_2774 * 0.699999988079071044921875) + 1.0));
                                float _2795 = dot(vec3(_359, _362, _365), vec3((-0.0) - (_1980 * _2276), (-0.0) - (_1981 * _2276), (-0.0) - (_1982 * _2276)));
                                float _3749 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
                                float _2803 = (_2769 * dot(vec3(_359, _362, _365), vec3(_2754, _2755, _2756))) + _2768;
                                float _3760 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
                                float _2804 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
                                float _2808 = (0.5 / (((isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) + 9.9999999392252902907785028219223e-09) + _2804)) * _2804;
                                float _3771 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                                float _2815 = (_2784 * _2761) * (((isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * 3.1415927410125732421875) / ((_2774 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2785 * _2628.y;
                                frontier_phi_83_pred_1 = _2785 * _2628.x;
                                frontier_phi_83_pred_2 = _2815 * _2640.z;
                                frontier_phi_83_pred_3 = _2815 * _2640.y;
                                frontier_phi_83_pred_4 = _2815 * _2640.x;
                                frontier_phi_83_pred_5 = _2785 * _2628.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2823 = frontier_phi_83_pred;
                            _2822 = frontier_phi_83_pred_1;
                            _2821 = frontier_phi_83_pred_2;
                            _2820 = frontier_phi_83_pred_3;
                            _2819 = frontier_phi_83_pred_4;
                            _2824 = frontier_phi_83_pred_5;
                            _2570 = _2822 + _2583;
                            _2571 = _2823 + _2584;
                            _2572 = _2824 + _2585;
                            _2567 = _2819 + _2580;
                            _2568 = _2820 + _2581;
                            _2569 = _2821 + _2582;
                            if (_2587 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2580 = _2567;
                                _2581 = _2568;
                                _2582 = _2569;
                                _2583 = _2570;
                                _2584 = _2571;
                                _2585 = _2572;
                                _2586 = _2587;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2572;
                        frontier_phi_77_pred_1 = _2571;
                        frontier_phi_77_pred_2 = _2570;
                        frontier_phi_77_pred_3 = _2569;
                        frontier_phi_77_pred_4 = _2568;
                        frontier_phi_77_pred_5 = _2567;
                    }
                    _2262 = frontier_phi_77_pred;
                    _2260 = frontier_phi_77_pred_1;
                    _2258 = frontier_phi_77_pred_2;
                    _2256 = frontier_phi_77_pred_3;
                    _2254 = frontier_phi_77_pred_4;
                    _2252 = frontier_phi_77_pred_5;
                    uint _2415 = _2414 + 1u;
                    if (_2415 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2408 = _2252;
                        _2409 = _2254;
                        _2410 = _2256;
                        _2411 = _2258;
                        _2412 = _2260;
                        _2413 = _2262;
                        _2414 = _2415;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2256;
                frontier_phi_58_59_ladder_1 = _2262;
                frontier_phi_58_59_ladder_2 = _2260;
                frontier_phi_58_59_ladder_3 = _2258;
                frontier_phi_58_59_ladder_4 = _2254;
                frontier_phi_58_59_ladder_5 = _2252;
            }
            else
            {
                frontier_phi_58_59_ladder = _2133;
                frontier_phi_58_59_ladder_1 = _2139;
                frontier_phi_58_59_ladder_2 = _2137;
                frontier_phi_58_59_ladder_3 = _2135;
                frontier_phi_58_59_ladder_4 = _2131;
                frontier_phi_58_59_ladder_5 = _2129;
            }
            _2251 = frontier_phi_58_59_ladder_5;
            _2253 = frontier_phi_58_59_ladder_4;
            _2255 = frontier_phi_58_59_ladder;
            _2257 = frontier_phi_58_59_ladder_3;
            _2259 = frontier_phi_58_59_ladder_2;
            _2261 = frontier_phi_58_59_ladder_1;
        }
        float _2266 = isnan(1.0) ? _404 : (isnan(_404) ? 1.0 : min(_404, 1.0));
        _2039 = (_2266 * _2257) + _1599;
        _2041 = (_2266 * _2259) + _1601;
        _2043 = (_2266 * _2261) + _1603;
        _2045 = ((_2251 * 0.039999999105930328369140625) * _2266) + _1851;
        _2047 = ((_2253 * 0.039999999105930328369140625) * _2266) + _1853;
        _2049 = ((_2255 * 0.039999999105930328369140625) * _2266) + _1855;
    }
    else
    {
        _2039 = _1599;
        _2041 = _1601;
        _2043 = _1603;
        _2045 = _1851;
        _2047 = _1853;
        _2049 = _1855;
    }
    float _3787 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _3798 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _3809 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _3820 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _2067 = ((isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_2039 + ((isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0))) * _404))) + ((_2045 + ((isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))) * _1215)) * cbPerFrame._m0[3u].x);
    float _2068 = ((isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_2041 + ((isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0))) * _404))) + ((_2047 + ((isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))) * _1215)) * cbPerFrame._m0[3u].x);
    float _2069 = ((isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_2043 + ((isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0))) * _404))) + ((_2049 + ((isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))) * _1215)) * cbPerFrame._m0[3u].x);
    float _2074 = cbInstanceData._m0[_378 + 6u].w * (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0)));
    float _2079 = _338 / cbSceneParam._m0[86u].x;
    float _2080 = _339 / cbSceneParam._m0[86u].y;
    vec4 _2094 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2079, _2080, (log2((isnan(cbSceneParam._m0[77u].w) ? _259 : (isnan(_259) ? cbSceneParam._m0[77u].w : min(_259, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2096 = _2094.x;
    float _2097 = _2094.y;
    float _2098 = _2094.z;
    float _2099 = _2094.w;
    float _2191;
    float _2193;
    float _2195;
    float _2197;
    if (_259 > cbSceneParam._m0[78u].w)
    {
        float _2154 = isnan(_259) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _259 : min(cbSceneParam._m0[80u].w, _259));
        float _2155 = _2154 / _259;
        float _2166 = _2155 * _311;
        float _2167 = _312 * _2155;
        float _2168 = (-0.0) - _2167;
        float _2169 = _2155 * _313;
        float _2171 = (cbSceneParam._m0[77u].w * _2168) / _2154;
        float _2172 = _2171 + cbSceneParam._m0[79u].w;
        float _2173 = cbSceneParam._m0[79u].w - _2167;
        float _2179 = sqrt(((_2166 * _2166) + (_2167 * _2167)) + (_2169 * _2169));
        float _2182 = (1.0 - (cbSceneParam._m0[77u].w / _2154)) * _2179;
        float _2187 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2189 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2365;
        if (abs((_2168 - _2171) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2365 = ((((_2172 > 0.0) ? exp2(_2187 * _2172) : (2.0 - exp2(_2189 * _2172))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2182;
        }
        else
        {
            float _2309 = 1.0 / cbSceneParam._m0[80u].x;
            float _2310 = isnan(_2173) ? _2172 : (isnan(_2172) ? _2173 : max(_2172, _2173));
            float _2311 = isnan(_2173) ? _2172 : (isnan(_2172) ? _2173 : min(_2172, _2173));
            float _2320 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : min(_2310, 0.0));
            float _2321 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : min(_2311, 0.0));
            _2365 = ((abs(_2179 / _2168) * cbSceneParam._m0[80u].y) * ((((_2320 - _2321) * 2.0) - ((exp2(_2187 * (isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0)))) - exp2(_2187 * (isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0))))) * _2309)) - ((exp2(_2189 * _2320) - exp2(_2189 * _2321)) * _2309))) + (_2182 * cbSceneParam._m0[80u].z);
        }
        vec4 _2367 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2079, _2080, 1.0), 0.0);
        float _2376 = exp2((_2365 * (-1.44269502162933349609375)) * (1.0 - _2367.w));
        float _2377 = log2(_2376);
        float _2393 = log2(_2099);
        _2191 = (exp2(_2393 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2377 * cbSceneParam._m0[78u].x)) * _2367.x) / cbSceneParam._m0[78u].x)) + _2096;
        _2193 = (exp2(_2393 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2377 * cbSceneParam._m0[78u].y)) * _2367.y) / cbSceneParam._m0[78u].y)) + _2097;
        _2195 = (exp2(_2393 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2377 * cbSceneParam._m0[78u].z)) * _2367.z) / cbSceneParam._m0[78u].z)) + _2098;
        _2197 = _2376 * _2099;
    }
    else
    {
        _2191 = _2096;
        _2193 = _2097;
        _2195 = _2098;
        _2197 = _2099;
    }
    bool _2403;
    vec4 _2207;
    vec4 _2230;
    float _2232;
    float _2236;
    float _2237;
    float _2238;
    float _2239;
    bool _2250;
    for (;;)
    {
        _2207 = cbMatDynParam._m0[0u];
        float _2209 = roundEven(_2207.y);
        bool _2210 = _2209 == 3.0;
        float _2212 = log2(_2197);
        float _2219 = exp2(_2212 * cbSceneParam._m0[78u].x) * _2067;
        float _2220 = exp2(_2212 * cbSceneParam._m0[78u].y) * _2068;
        float _2221 = exp2(_2212 * cbSceneParam._m0[78u].z) * _2069;
        float _2228 = _327 + (-0.5);
        _2230 = cbMtdParam._m0[1u];
        _2232 = _2230.y * _2228;
        float _2235 = (_2209 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2236 = _2235 * (_2210 ? _2219 : (_2219 + (cbSceneParam._m0[72u].w * _2191)));
        _2237 = _2235 * (_2210 ? _2220 : (_2220 + (cbSceneParam._m0[72u].w * _2193)));
        _2238 = _2235 * (_2210 ? _2221 : (_2221 + (cbSceneParam._m0[72u].w * _2195)));
        _2239 = _2228 * 0.999000012874603271484375;
        _2250 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2250)
        {
            if ((cbInstanceData._m0[_378 + 7u].x + _2239) < 0.5)
            {
                _2403 = true;
                break;
            }
        }
        uint _2344 = _380 + uint(_2207.w);
        if ((cbInstanceData._m0[_2344].w < 1.0) && ((cbInstanceData._m0[_2344].w + _2239) < 0.5))
        {
            _2403 = true;
            break;
        }
        if ((_2232 + _197) < _2230.x)
        {
            _2403 = true;
            break;
        }
        _2403 = false;
        break;
    }
    float _2558;
    if (_2403)
    {
        discard_state = true;
        _2558 = 0.0;
    }
    else
    {
        _2558 = _2074;
    }
    SV_Target.x = _2236;
    SV_Target.y = _2237;
    SV_Target.z = _2238;
    SV_Target.w = _2558;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2074;
    discard_exit();
}


