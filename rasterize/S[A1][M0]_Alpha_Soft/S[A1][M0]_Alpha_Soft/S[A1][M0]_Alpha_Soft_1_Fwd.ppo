#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Alpha_Soft_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _724;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _162 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _163 = _162 * NORMAL.x;
    float _164 = _162 * NORMAL.y;
    float _165 = _162 * NORMAL.z;
    vec4 _201 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _203 = _201.x;
    bool _210 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _227 = ((_210 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _203)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _203))) - POSITION_1.w) / cbMtdParam._m0[11u].x;
    float _2834 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _231 = (texture(sampler2D(S_A1_M0_Alpha_Soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w)).w * TEXCOORD_1.z) * (isnan(1.0) ? _2834 : (isnan(_2834) ? 1.0 : min(_2834, 1.0)));
    float _235 = inversesqrt(dot(vec3(_163, _164, _165), vec3(_163, _164, _165)));
    float _236 = _235 * _163;
    float _237 = _235 * _164;
    float _238 = _235 * _165;
    float _2845 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _239 = isnan(1.0) ? _2845 : (isnan(_2845) ? 1.0 : min(_2845, 1.0));
    float _2856 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _2867 = isnan(0.0) ? cbMtdParam._m0[10u].y : (isnan(cbMtdParam._m0[10u].y) ? 0.0 : max(cbMtdParam._m0[10u].y, 0.0));
    float _2878 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _247 = _210 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _289 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _299 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _289);
    float _300 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _289);
    float _301 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _289);
    float _305 = inversesqrt(dot(vec3(_299, _300, _301), vec3(_299, _300, _301)));
    float _306 = _299 * _305;
    float _307 = _300 * _305;
    float _308 = _301 * _305;
    float _313 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _314 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _335 = fma(_238, cbSceneParam._m0[5u].z, fma(_237, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _236));
    float _338 = fma(_238, cbSceneParam._m0[6u].z, fma(_237, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _236));
    float _341 = fma(_238, cbSceneParam._m0[7u].z, fma(_237, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _236));
    uint _354 = uint(roundEven(NORMAL.w)) * 13u;
    uint _357 = (_354 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _363 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2856 : (isnan(_2856) ? 1.0 : min(_2856, 1.0)))) * cbInstanceData._m0[_357].x;
    float _364 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2867 : (isnan(_2867) ? 1.0 : min(_2867, 1.0)))) * cbInstanceData._m0[_357].y;
    float _365 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2878 : (isnan(_2878) ? 1.0 : min(_2878, 1.0)))) * cbInstanceData._m0[_357].z;
    float _2889 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _366 = isnan(1.0) ? _2889 : (isnan(_2889) ? 1.0 : min(_2889, 1.0));
    float _2900 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _367 = isnan(1.0) ? _2900 : (isnan(_2900) ? 1.0 : min(_2900, 1.0));
    float _2911 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _368 = isnan(1.0) ? _2911 : (isnan(_2911) ? 1.0 : min(_2911, 1.0));
    vec4 _377 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _313, cbSceneParam._m0[86u].y * _314));
    float _380 = _377.x * TEXCOORD_1.w;
    float _381 = dot(vec3(_236, _237, _238), vec3(_306, _307, _308));
    float _384 = _381 * 2.0;
    float _389 = (_384 * _236) - _306;
    float _390 = (_384 * _237) - _307;
    float _391 = (_384 * _238) - _308;
    float _413 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _417 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _421 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _723;
    float _725;
    float _726;
    float _727;
    float _728;
    float _729;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _448 = fma(_421, cbModelParam._m0[26u].z, fma(_417, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _413));
        float _452 = fma(_421, cbModelParam._m0[27u].z, fma(_417, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _413));
        float _456 = fma(_421, cbModelParam._m0[28u].z, fma(_417, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _413));
        float _481 = _413 + _236;
        float _482 = _417 + _237;
        float _483 = _421 + _238;
        float _493 = fma(_483, cbModelParam._m0[26u].z, fma(_482, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _481)) - _448;
        float _494 = fma(_483, cbModelParam._m0[27u].z, fma(_482, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _481)) - _452;
        float _495 = fma(_483, cbModelParam._m0[28u].z, fma(_482, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _481)) - _456;
        float _499 = inversesqrt(dot(vec3(_493, _494, _495), vec3(_493, _494, _495)));
        float _512 = ((_499 * _493) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_448 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _513 = ((_499 * _494) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_452 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _514 = ((_499 * _495) / cbModelParam._m0[34u].z) + ((((((_456 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _517 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_512, _513, _514), 0.0);
        vec4 _524 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_512, _513, _514), 0.0);
        vec4 _531 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_512, _513, _514), 0.0);
        vec4 _538 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_512, _513, _514), 0.0);
        float _551 = exp2((_517.w + (-0.5)) * 20.0) * 2.0;
        float _552 = _551 * (_517.x + (-0.5));
        float _553 = _551 * (_517.y + (-0.5));
        float _554 = _551 * (_517.z + (-0.5));
        float _561 = exp2((_524.w + (-0.5)) * 20.0) * 2.0;
        float _562 = _561 * (_524.x + (-0.5));
        float _563 = _561 * (_524.y + (-0.5));
        float _564 = _561 * (_524.z + (-0.5));
        float _571 = exp2((_531.w + (-0.5)) * 20.0) * 2.0;
        float _572 = _571 * (_531.x + (-0.5));
        float _573 = _571 * (_531.y + (-0.5));
        float _574 = _571 * (_531.z + (-0.5));
        float _581 = exp2((_538.w + (-0.5)) * 20.0) * 2.0;
        float _582 = _581 * (_538.x + (-0.5));
        float _583 = _581 * (_538.y + (-0.5));
        float _584 = _581 * (_538.z + (-0.5));
        float _585 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
        float _586 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
        float _587 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
        float _588 = _552 * 0.5;
        float _589 = _562 * 0.5;
        float _590 = _572 * 0.5;
        float _591 = dot(vec3(_588, _589, _590), vec3(_588, _589, _590));
        float _596 = (_591 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_591);
        float _605 = (dot(vec3(_236, _237, _238), vec3(_596 * _588, _596 * _589, _596 * _590)) + 1.0) * 0.5;
        float _2937 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
        float _615 = sqrt(((_589 * _589) + (_588 * _588)) + (_590 * _590)) / (_585 + 9.9999997473787516355514526367188e-06);
        float _2948 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
        float _616 = isnan(1.0) ? _2948 : (isnan(_2948) ? 1.0 : min(_2948, 1.0));
        float _617 = _616 * 2.0;
        float _621 = (1.0 - _616) / (_616 + 1.0);
        float _2959 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
        float _622 = isnan(1.0) ? _2959 : (isnan(_2959) ? 1.0 : min(_2959, 1.0));
        float _631 = ((((1.0 - _622) * (_617 + 2.0)) * exp2(log2(isnan(1.0) ? _2937 : (isnan(_2937) ? 1.0 : min(_2937, 1.0))) * (_617 + 1.0))) + _622) * _585;
        float _632 = _553 * 0.5;
        float _633 = _563 * 0.5;
        float _634 = _573 * 0.5;
        float _635 = dot(vec3(_632, _633, _634), vec3(_632, _633, _634));
        float _640 = (_635 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_635);
        float _648 = (dot(vec3(_236, _237, _238), vec3(_640 * _632, _640 * _633, _640 * _634)) + 1.0) * 0.5;
        float _2970 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
        float _657 = sqrt(((_633 * _633) + (_632 * _632)) + (_634 * _634)) / (_586 + 9.9999997473787516355514526367188e-06);
        float _2981 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        float _658 = isnan(1.0) ? _2981 : (isnan(_2981) ? 1.0 : min(_2981, 1.0));
        float _659 = _658 * 2.0;
        float _663 = (1.0 - _658) / (_658 + 1.0);
        float _2992 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
        float _664 = isnan(1.0) ? _2992 : (isnan(_2992) ? 1.0 : min(_2992, 1.0));
        float _673 = ((((1.0 - _664) * (_659 + 2.0)) * exp2(log2(isnan(1.0) ? _2970 : (isnan(_2970) ? 1.0 : min(_2970, 1.0))) * (_659 + 1.0))) + _664) * _586;
        float _674 = _554 * 0.5;
        float _675 = _564 * 0.5;
        float _676 = _574 * 0.5;
        float _677 = dot(vec3(_674, _675, _676), vec3(_674, _675, _676));
        float _682 = (_677 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_677);
        float _690 = (dot(vec3(_236, _237, _238), vec3(_682 * _674, _682 * _675, _682 * _676)) + 1.0) * 0.5;
        float _3003 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _699 = sqrt(((_675 * _675) + (_674 * _674)) + (_676 * _676)) / (_587 + 9.9999997473787516355514526367188e-06);
        float _3014 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _700 = isnan(1.0) ? _3014 : (isnan(_3014) ? 1.0 : min(_3014, 1.0));
        float _701 = _700 * 2.0;
        float _705 = (1.0 - _700) / (_700 + 1.0);
        float _3025 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _706 = isnan(1.0) ? _3025 : (isnan(_3025) ? 1.0 : min(_3025, 1.0));
        float _715 = ((((1.0 - _706) * (_701 + 2.0)) * exp2(log2(isnan(1.0) ? _3003 : (isnan(_3003) ? 1.0 : min(_3003, 1.0))) * (_701 + 1.0))) + _706) * _587;
        _723 = _554;
        _725 = _553;
        _726 = _552;
        _727 = _564;
        _728 = _563;
        _729 = _562;
        _730 = _574;
        _731 = _573;
        _732 = _572;
        _733 = _587;
        _734 = _586;
        _735 = _585;
        _736 = cbModelParam._m0[36u].z * (isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0)));
        _737 = cbModelParam._m0[36u].z * (isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0)));
        _738 = cbModelParam._m0[36u].z * (isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0)));
    }
    else
    {
        _723 = _724;
        _725 = _724;
        _726 = _724;
        _727 = _724;
        _728 = _724;
        _729 = _724;
        _730 = _724;
        _731 = _724;
        _732 = _724;
        _733 = _724;
        _734 = _724;
        _735 = _724;
        _736 = 0.0;
        _737 = 0.0;
        _738 = 0.0;
    }
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _764 = fma(_421, cbModelParam._m0[30u].z, fma(_417, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _413));
        float _768 = fma(_421, cbModelParam._m0[31u].z, fma(_417, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _413));
        float _772 = fma(_421, cbModelParam._m0[32u].z, fma(_417, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _413));
        float _795 = _413 + _236;
        float _796 = _417 + _237;
        float _797 = _421 + _238;
        float _807 = fma(_797, cbModelParam._m0[30u].z, fma(_796, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _795)) - _764;
        float _808 = fma(_797, cbModelParam._m0[31u].z, fma(_796, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _795)) - _768;
        float _809 = fma(_797, cbModelParam._m0[32u].z, fma(_796, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _795)) - _772;
        float _813 = inversesqrt(dot(vec3(_807, _808, _809), vec3(_807, _808, _809)));
        float _826 = ((_813 * _807) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_764 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _827 = ((_813 * _808) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_768 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _828 = ((_813 * _809) / cbModelParam._m0[35u].z) + ((((((_772 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        float _863 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_830.x + (-0.5));
        float _865 = _863 * (_830.y + (-0.5));
        float _866 = _863 * (_830.z + (-0.5));
        float _873 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_837.x + (-0.5));
        float _875 = _873 * (_837.y + (-0.5));
        float _876 = _873 * (_837.z + (-0.5));
        float _883 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_844.x + (-0.5));
        float _885 = _883 * (_844.y + (-0.5));
        float _886 = _883 * (_844.z + (-0.5));
        float _893 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_851.x + (-0.5));
        float _895 = _893 * (_851.y + (-0.5));
        float _896 = _893 * (_851.z + (-0.5));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = _864 * 0.5;
        float _901 = _874 * 0.5;
        float _902 = _884 * 0.5;
        float _903 = dot(vec3(_900, _901, _902), vec3(_900, _901, _902));
        float _908 = (_903 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_903);
        float _916 = (dot(vec3(_236, _237, _238), vec3(_908 * _900, _908 * _901, _908 * _902)) + 1.0) * 0.5;
        float _3066 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _925 = sqrt(((_901 * _901) + (_900 * _900)) + (_902 * _902)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3077 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3077 : (isnan(_3077) ? 1.0 : min(_3077, 1.0));
        float _927 = _926 * 2.0;
        float _931 = (1.0 - _926) / (_926 + 1.0);
        float _3088 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3088 : (isnan(_3088) ? 1.0 : min(_3088, 1.0));
        float _941 = ((((1.0 - _932) * (_927 + 2.0)) * exp2(log2(isnan(1.0) ? _3066 : (isnan(_3066) ? 1.0 : min(_3066, 1.0))) * (_927 + 1.0))) + _932) * _897;
        float _942 = _865 * 0.5;
        float _943 = _875 * 0.5;
        float _944 = _885 * 0.5;
        float _945 = dot(vec3(_942, _943, _944), vec3(_942, _943, _944));
        float _950 = (_945 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_945);
        float _958 = (dot(vec3(_236, _237, _238), vec3(_950 * _942, _950 * _943, _950 * _944)) + 1.0) * 0.5;
        float _3099 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _967 = sqrt(((_943 * _943) + (_942 * _942)) + (_944 * _944)) / (_898 + 9.9999997473787516355514526367188e-06);
        float _3110 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3110 : (isnan(_3110) ? 1.0 : min(_3110, 1.0));
        float _969 = _968 * 2.0;
        float _973 = (1.0 - _968) / (_968 + 1.0);
        float _3121 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3121 : (isnan(_3121) ? 1.0 : min(_3121, 1.0));
        float _983 = ((((1.0 - _974) * (_969 + 2.0)) * exp2(log2(isnan(1.0) ? _3099 : (isnan(_3099) ? 1.0 : min(_3099, 1.0))) * (_969 + 1.0))) + _974) * _898;
        float _984 = _866 * 0.5;
        float _985 = _876 * 0.5;
        float _986 = _886 * 0.5;
        float _987 = dot(vec3(_984, _985, _986), vec3(_984, _985, _986));
        float _992 = (_987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_987);
        float _1000 = (dot(vec3(_236, _237, _238), vec3(_992 * _984, _992 * _985, _992 * _986)) + 1.0) * 0.5;
        float _3132 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1009 = sqrt(((_985 * _985) + (_984 * _984)) + (_986 * _986)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3143 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3154 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3132 : (isnan(_3132) ? 1.0 : min(_3132, 1.0))) * (_1011 + 1.0))) + _1016) * _899;
        _1033 = _866;
        _1034 = _865;
        _1035 = _864;
        _1036 = _876;
        _1037 = _875;
        _1038 = _874;
        _1039 = _886;
        _1040 = _885;
        _1041 = _884;
        _1042 = _899;
        _1043 = _898;
        _1044 = _897;
        _1045 = cbModelParam._m0[36u].w * (isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0)));
        _1046 = cbModelParam._m0[36u].w * (isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0)));
        _1047 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
    }
    else
    {
        _1033 = _724;
        _1034 = _724;
        _1035 = _724;
        _1036 = _724;
        _1037 = _724;
        _1038 = _724;
        _1039 = _724;
        _1040 = _724;
        _1041 = _724;
        _1042 = _724;
        _1043 = _724;
        _1044 = _724;
        _1045 = 0.0;
        _1046 = 0.0;
        _1047 = 0.0;
    }
    float _1057 = (cbModelParam._m0[1u].x * (_1045 - _736)) + _736;
    float _1058 = (cbModelParam._m0[1u].x * (_1046 - _737)) + _737;
    float _1059 = (cbModelParam._m0[1u].x * (_1047 - _738)) + _738;
    float _1080 = fma(_1059, cbSceneParam._m0[89u].z, fma(_1058, cbSceneParam._m0[89u].y, _1057 * cbSceneParam._m0[89u].x));
    float _1083 = fma(_1059, cbSceneParam._m0[90u].z, fma(_1058, cbSceneParam._m0[90u].y, _1057 * cbSceneParam._m0[90u].x));
    float _1086 = fma(_1059, cbSceneParam._m0[91u].z, fma(_1058, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1057));
    float _1101 = _389 * 0.5;
    float _1102 = _390 * 0.5;
    float _1103 = _391 * 0.5;
    float _1104 = dot(vec4(_1101, _1102, _1103, 1.0), vec4(_1035, _1038, _1041, _1044));
    float _1107 = dot(vec4(_1101, _1102, _1103, 1.0), vec4(_1034, _1037, _1040, _1043));
    float _1110 = dot(vec4(_1101, _1102, _1103, 1.0), vec4(_1033, _1036, _1039, _1042));
    float _1144;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1117 = dot(vec4(_1101, _1102, _1103, 1.0), vec4(_723, _727, _730, _733));
        float _1121 = dot(vec4(_1101, _1102, _1103, 1.0), vec4(_725, _728, _731, _734));
        float _1125 = dot(vec4(_1101, _1102, _1103, 1.0), vec4(_726, _729, _732, _735));
        float _1132 = dot(vec4(cbModelParam._m0[39u]), vec4(_1101, _1102, _1103, 1.0));
        _1144 = dot(vec3(isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)), isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)), isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1132) ? 0.0 : (isnan(0.0) ? _1132 : max(0.0, _1132))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1144 = 1.0;
    }
    float _1155;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1146 = dot(vec4(cbModelParam._m0[40u]), vec4(_1101, _1102, _1103, 1.0));
        _1155 = dot(vec3(isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)), isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)), isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1146) ? 0.0 : (isnan(0.0) ? _1146 : max(0.0, _1146))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1155 = 1.0;
    }
    float _1159 = (_1155 * cbModelParam._m0[1u].x) + (_1144 * (1.0 - cbModelParam._m0[1u].x));
    float _1168 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1250;
    float _1252;
    float _1254;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1217 = fma(_421, cbModelParam._m0[13u].z, fma(_417, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _413)) + cbModelParam._m0[13u].w;
        float _1221 = fma(_421, cbModelParam._m0[14u].z, fma(_417, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _413)) + cbModelParam._m0[14u].w;
        float _1225 = fma(_421, cbModelParam._m0[15u].z, fma(_417, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _413)) + cbModelParam._m0[15u].w;
        float _1228 = fma(_391, cbModelParam._m0[13u].z, fma(_390, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _389));
        float _1231 = fma(_391, cbModelParam._m0[14u].z, fma(_390, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _389));
        float _1234 = fma(_391, cbModelParam._m0[15u].z, fma(_390, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _389));
        float _1260;
        if (_1228 > 0.0)
        {
            _1260 = abs((1.0 - _1217) / _1228);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1228 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1217 + 1.0) / _1228);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1260 = frontier_phi_14_12_ladder;
        }
        float _1467;
        if (_1231 > 0.0)
        {
            _1467 = abs((1.0 - _1221) / _1231);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1231 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1221 + 1.0) / _1231);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1467 = frontier_phi_23_19_ladder;
        }
        float _1656;
        if (_1234 > 0.0)
        {
            _1656 = abs((1.0 - _1225) / _1234);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1234 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1225 + 1.0) / _1234);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1656 = frontier_phi_35_30_ladder;
        }
        float _1658 = isnan(_1467) ? _1260 : (isnan(_1260) ? _1467 : min(_1260, _1467));
        float _1659 = isnan(_1656) ? _1658 : (isnan(_1658) ? _1656 : min(_1658, _1656));
        float _1663 = (_1659 * _1228) + _1217;
        float _1664 = (_1659 * _1231) + _1221;
        float _1665 = (_1659 * _1234) + _1225;
        float _1666 = _1659 * 9.9999997473787516355514526367188e-05;
        float _1668 = (-1.0) - _1666;
        float _1670 = _1666 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1665 > _1670) || ((_1665 < _1668) || ((_1664 > _1670) || ((_1664 < _1668) || ((_1663 < _1668) || (_1663 > _1670))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1762 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1665, cbModelParam._m0[9u].z, fma(_1664, cbModelParam._m0[9u].y, _1663 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1665, cbModelParam._m0[10u].z, fma(_1664, cbModelParam._m0[10u].y, _1663 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1665, cbModelParam._m0[11u].z, fma(_1664, cbModelParam._m0[11u].y, _1663 * cbModelParam._m0[11u].x))), _1168);
            frontier_phi_13_35_ladder = _1762.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1762.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1762.x * cbModelParam._m0[1u].y;
        }
        _1250 = frontier_phi_13_35_ladder_2;
        _1252 = frontier_phi_13_35_ladder_1;
        _1254 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1238 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_389, _390, _391), _1168);
        _1250 = _1238.x * cbModelParam._m0[1u].y;
        _1252 = _1238.y * cbModelParam._m0[1u].y;
        _1254 = _1238.z * cbModelParam._m0[1u].y;
    }
    float _1257 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1350;
    float _1352;
    float _1354;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1314 = fma(_421, cbModelParam._m0[21u].z, fma(_417, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _413)) + cbModelParam._m0[21u].w;
        float _1318 = fma(_421, cbModelParam._m0[22u].z, fma(_417, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _413)) + cbModelParam._m0[22u].w;
        float _1322 = fma(_421, cbModelParam._m0[23u].z, fma(_417, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _413)) + cbModelParam._m0[23u].w;
        float _1325 = fma(_391, cbModelParam._m0[21u].z, fma(_390, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _389));
        float _1328 = fma(_391, cbModelParam._m0[22u].z, fma(_390, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _389));
        float _1331 = fma(_391, cbModelParam._m0[23u].z, fma(_390, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _389));
        float _1472;
        if (_1325 > 0.0)
        {
            _1472 = abs((1.0 - _1314) / _1325);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1325 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1314 + 1.0) / _1325);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1472 = frontier_phi_25_21_ladder;
        }
        float _1683;
        if (_1328 > 0.0)
        {
            _1683 = abs((1.0 - _1318) / _1328);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1328 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1318 + 1.0) / _1328);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1683 = frontier_phi_37_32_ladder;
        }
        float _1834;
        if (_1331 > 0.0)
        {
            _1834 = abs((1.0 - _1322) / _1331);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1331 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1322 + 1.0) / _1331);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1834 = frontier_phi_46_43_ladder;
        }
        float _1836 = isnan(_1683) ? _1472 : (isnan(_1472) ? _1683 : min(_1472, _1683));
        float _1837 = isnan(_1834) ? _1836 : (isnan(_1836) ? _1834 : min(_1836, _1834));
        float _1841 = (_1837 * _1325) + _1314;
        float _1842 = (_1837 * _1328) + _1318;
        float _1843 = (_1837 * _1331) + _1322;
        float _1844 = _1837 * 9.9999997473787516355514526367188e-05;
        float _1845 = (-1.0) - _1844;
        float _1847 = _1844 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1843 > _1847) || ((_1843 < _1845) || ((_1842 > _1847) || ((_1842 < _1845) || ((_1841 < _1845) || (_1841 > _1847))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2044 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1843, cbModelParam._m0[17u].z, fma(_1842, cbModelParam._m0[17u].y, _1841 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1843, cbModelParam._m0[18u].z, fma(_1842, cbModelParam._m0[18u].y, _1841 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1843, cbModelParam._m0[19u].z, fma(_1842, cbModelParam._m0[19u].y, _1841 * cbModelParam._m0[19u].x))), _1257);
            frontier_phi_22_46_ladder = _2044.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2044.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2044.x * cbModelParam._m0[1u].z;
        }
        _1350 = frontier_phi_22_46_ladder_2;
        _1352 = frontier_phi_22_46_ladder_1;
        _1354 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1334 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_389, _390, _391), _1257);
        _1350 = _1334.x * cbModelParam._m0[1u].z;
        _1352 = _1334.y * cbModelParam._m0[1u].z;
        _1354 = _1334.z * cbModelParam._m0[1u].z;
    }
    float _1366 = _380 * 0.01200000010430812835693359375;
    float _1368 = _1366 * ((cbModelParam._m0[1u].w * (_1350 - _1250)) + _1250);
    float _1369 = _1366 * ((cbModelParam._m0[1u].w * (_1352 - _1252)) + _1252);
    float _1370 = _1366 * ((cbModelParam._m0[1u].w * (_1354 - _1254)) + _1254);
    float _1373 = fma(_1370, cbSceneParam._m0[89u].z, fma(_1369, cbSceneParam._m0[89u].y, _1368 * cbSceneParam._m0[89u].x));
    float _1376 = fma(_1370, cbSceneParam._m0[90u].z, fma(_1369, cbSceneParam._m0[90u].y, _1368 * cbSceneParam._m0[90u].x));
    float _1379 = fma(_1370, cbSceneParam._m0[91u].z, fma(_1369, cbSceneParam._m0[91u].y, _1368 * cbSceneParam._m0[91u].x));
    uvec4 _1389 = floatBitsToUint(cbInstanceData._m0[_354 + 5u]);
    uint _1391 = _1389.x * 14u;
    uint _1392 = _1391 + 13u;
    float _1399 = _380 + (-1.0);
    float _1405 = (cbLight._m0[_1392].x * _1399) + 1.0;
    float _1406 = (cbLight._m0[_1392].y * _1399) + 1.0;
    float _1407 = (cbLight._m0[_1392].z * _1399) + 1.0;
    float _1408 = (cbLight._m0[_1392].w * _1399) + 1.0;
    uint _1409 = _1391 + 5u;
    float _1415 = isnan(1.0) ? _1406 : (isnan(_1406) ? 1.0 : min(_1406, 1.0));
    uint _1419 = _1391 + 4u;
    float _1426 = isnan(1.0) ? _1405 : (isnan(_1405) ? 1.0 : min(_1405, 1.0));
    uint _1430 = _1391 | 1u;
    float _1441 = dot(vec3(cbLight._m0[_1391].xyz), vec3(_236, _237, _238));
    float _1444 = dot(vec3(cbLight._m0[_1430].xyz), vec3(_236, _237, _238));
    float _3290 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
    float _3301 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
    float _1449 = (isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0))) * 0.3183098733425140380859375;
    float _1451 = (isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0))) * 0.3183098733425140380859375;
    float _1458 = ((cbLight._m0[_1409].x * _1415) * _1451) + ((cbLight._m0[_1419].x * _1426) * _1449);
    float _1459 = ((_1415 * cbLight._m0[_1409].y) * _1451) + ((_1426 * cbLight._m0[_1419].y) * _1449);
    float _1460 = ((_1415 * cbLight._m0[_1409].z) * _1451) + ((_1426 * cbLight._m0[_1419].z) * _1449);
    uvec4 _1464 = floatBitsToUint(cbLight._m0[_1391 + 12u]);
    bool _1466 = _1464.x == 0u;
    float _1477;
    float _1479;
    float _1481;
    if (_1466)
    {
        _1477 = _1458;
        _1479 = _1459;
        _1481 = _1460;
    }
    else
    {
        uint _1485 = _1391 + 6u;
        float _1501 = (dot(vec3(cbLight._m0[_1391 + 2u].xyz), vec3(_236, _237, _238)) * 0.5) + 0.5;
        float _1502 = _1501 * _1501;
        float _3312 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
        float _1504 = isnan(1.0) ? _1407 : (isnan(_1407) ? 1.0 : min(_1407, 1.0));
        _1477 = (((cbLight._m0[_1485].x * 0.3183098733425140380859375) * _1503) * _1504) + _1458;
        _1479 = (((cbLight._m0[_1485].y * 0.3183098733425140380859375) * _1503) * _1504) + _1459;
        _1481 = (((cbLight._m0[_1485].z * 0.3183098733425140380859375) * _1503) * _1504) + _1460;
    }
    bool _1484 = _1464.y == 0u;
    float _1522;
    float _1524;
    float _1526;
    if (_1484)
    {
        _1522 = _1477;
        _1524 = _1479;
        _1526 = _1481;
    }
    else
    {
        uint _1627 = _1391 + 7u;
        float _1643 = (dot(vec3(cbLight._m0[_1391 + 3u].xyz), vec3(_236, _237, _238)) * 0.5) + 0.5;
        float _1644 = _1643 * _1643;
        float _3328 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
        float _1646 = isnan(1.0) ? _1408 : (isnan(_1408) ? 1.0 : min(_1408, 1.0));
        _1522 = (((cbLight._m0[_1627].x * 0.3183098733425140380859375) * _1645) * _1646) + _1477;
        _1524 = (((cbLight._m0[_1627].y * 0.3183098733425140380859375) * _1645) * _1646) + _1479;
        _1526 = (((cbLight._m0[_1627].z * 0.3183098733425140380859375) * _1645) * _1646) + _1481;
    }
    uint _1528 = _1391 + 8u;
    float _1534 = cbLight._m0[_1391].x + _306;
    float _1535 = cbLight._m0[_1391].y + _307;
    float _1536 = cbLight._m0[_1391].z + _308;
    float _1540 = inversesqrt(dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536)));
    float _1544 = dot(vec3(_236, _237, _238), vec3(cbLight._m0[_1391].xyz));
    float _3344 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
    float _1547 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
    float _3355 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _1548 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
    float _1549 = dot(vec3(cbLight._m0[_1391].xyz), vec3(_1534 * _1540, _1535 * _1540, _1536 * _1540));
    float _3366 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
    float _1560 = (exp2(log2(1.0 - (isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1566 = (0.5 / ((_1547 + 9.9999999392252902907785028219223e-09) + _1548)) * _1547;
    float _3377 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
    float _1568 = (isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))) * 0.31831014156341552734375;
    uint _1579 = _1391 + 9u;
    float _1585 = cbLight._m0[_1430].x + _306;
    float _1586 = cbLight._m0[_1430].y + _307;
    float _1587 = cbLight._m0[_1430].z + _308;
    float _1591 = inversesqrt(dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587)));
    float _1595 = dot(vec3(_236, _237, _238), vec3(cbLight._m0[_1430].xyz));
    float _3388 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
    float _1598 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
    float _1599 = dot(vec3(cbLight._m0[_1430].xyz), vec3(_1585 * _1591, _1586 * _1591, _1587 * _1591));
    float _3399 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
    float _1608 = (exp2(log2(1.0 - (isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1612 = (0.5 / ((_1598 + 9.9999999392252902907785028219223e-09) + _1548)) * _1598;
    float _3410 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
    float _1614 = (isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) * 0.31831014156341552734375;
    float _1624 = (((_1608 * cbLight._m0[_1579].x) * _1614) * _1415) + (((_1560 * cbLight._m0[_1528].x) * _1568) * _1426);
    float _1625 = (((_1608 * cbLight._m0[_1579].y) * _1614) * _1415) + (((_1560 * cbLight._m0[_1528].y) * _1568) * _1426);
    float _1626 = (((_1608 * cbLight._m0[_1579].z) * _1614) * _1415) + (((_1560 * cbLight._m0[_1528].z) * _1568) * _1426);
    float _1688;
    float _1690;
    float _1692;
    if (_1466)
    {
        _1688 = _1624;
        _1690 = _1625;
        _1692 = _1626;
    }
    else
    {
        uint _1694 = _1391 + 10u;
        uint _1700 = _1391 + 2u;
        float _1706 = cbLight._m0[_1700].x + _306;
        float _1707 = cbLight._m0[_1700].y + _307;
        float _1708 = cbLight._m0[_1700].z + _308;
        float _1712 = inversesqrt(dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708)));
        float _1716 = dot(vec3(_236, _237, _238), vec3(cbLight._m0[_1700].xyz));
        float _3421 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1719 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _1720 = dot(vec3(cbLight._m0[_1700].xyz), vec3(_1706 * _1712, _1707 * _1712, _1708 * _1712));
        float _3432 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1729 = (exp2(log2(1.0 - (isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1733 = (0.5 / ((_1719 + 9.9999999392252902907785028219223e-09) + _1548)) * _1719;
        float _3443 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1735 = (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) * 0.31831014156341552734375;
        float _1736 = isnan(1.0) ? _1407 : (isnan(_1407) ? 1.0 : min(_1407, 1.0));
        _1688 = (((_1729 * cbLight._m0[_1694].x) * _1735) * _1736) + _1624;
        _1690 = (((_1729 * cbLight._m0[_1694].y) * _1735) * _1736) + _1625;
        _1692 = (((_1729 * cbLight._m0[_1694].z) * _1735) * _1736) + _1626;
    }
    float _1771;
    float _1773;
    float _1775;
    if (_1484)
    {
        _1771 = _1688;
        _1773 = _1690;
        _1775 = _1692;
    }
    else
    {
        uint _1782 = _1391 + 11u;
        uint _1788 = _1391 + 3u;
        float _1794 = cbLight._m0[_1788].x + _306;
        float _1795 = cbLight._m0[_1788].y + _307;
        float _1796 = cbLight._m0[_1788].z + _308;
        float _1800 = inversesqrt(dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796)));
        float _1804 = dot(vec3(_236, _237, _238), vec3(cbLight._m0[_1788].xyz));
        float _3459 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1807 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _1808 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_1794 * _1800, _1795 * _1800, _1796 * _1800));
        float _3470 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1817 = (exp2(log2(1.0 - (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1821 = (0.5 / ((_1807 + 9.9999999392252902907785028219223e-09) + _1548)) * _1807;
        float _3481 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1823 = (isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) * 0.31831014156341552734375;
        float _1824 = isnan(1.0) ? _1408 : (isnan(_1408) ? 1.0 : min(_1408, 1.0));
        _1771 = (((_1817 * cbLight._m0[_1782].x) * _1823) * _1824) + _1688;
        _1773 = (((_1817 * cbLight._m0[_1782].y) * _1823) * _1824) + _1690;
        _1775 = (((_1817 * cbLight._m0[_1782].z) * _1823) * _1824) + _1692;
    }
    float _1959;
    float _1961;
    float _1963;
    float _1965;
    float _1967;
    float _1969;
    if (_1389.y == 0u)
    {
        float _1899 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1900 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1899;
        float _1901 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1899;
        float _1902 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1899;
        uvec4 _1914 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1915 = _1914.x;
        uint _1926 = uint((float(_1914.y) * floor(float(uint(cbSceneParam._m0[85u].y * _314) / _1915))) + floor(float(uint(cbSceneParam._m0[85u].x * _313) / _1915)));
        float _1936 = (log2(_1902 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1937 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        uint _1940 = uint(isnan(14.0) ? _1937 : (isnan(_1937) ? 14.0 : min(_1937, 14.0)));
        uvec4 _1945 = texelFetch(g_lightClusterGridBuffer, int(((_1940 << 2u) + (_1926 << 6u)) >> 2u));
        uint _1946 = _1945.x;
        uint _1947 = _1914.z;
        float _2049;
        float _2051;
        float _2053;
        float _2055;
        float _2057;
        float _2059;
        if (((((1u << ((_1947 >> 4u) & 15u)) + 4294967295u) & _1946) == 0u) || ((_1947 & 240u) == 0u))
        {
            _2049 = 0.0;
            _2051 = 0.0;
            _2053 = 0.0;
            _2055 = 0.0;
            _2057 = 0.0;
            _2059 = 0.0;
        }
        else
        {
            float _2050;
            float _2052;
            float _2054;
            float _2056;
            float _2058;
            float _2060;
            float _2191 = 0.0;
            float _2192 = 0.0;
            float _2193 = 0.0;
            float _2194 = 0.0;
            float _2195 = 0.0;
            float _2196 = 0.0;
            uint _2197 = 0u;
            uint _2206;
            bool _2207;
            for (;;)
            {
                _2206 = texelFetch(g_lightClassification, int((((_1940 << 5u) + (_1926 << 9u)) + (_2197 << 2u)) >> 2u)).x;
                _2207 = _2206 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2207)
                {
                    frontier_phi_61_pred = _2191;
                    frontier_phi_61_pred_1 = _2196;
                    frontier_phi_61_pred_2 = _2195;
                    frontier_phi_61_pred_3 = _2194;
                    frontier_phi_61_pred_4 = _2193;
                    frontier_phi_61_pred_5 = _2192;
                }
                else
                {
                    float _2315;
                    float _2316;
                    float _2317;
                    float _2318;
                    float _2319;
                    float _2320;
                    uint _2321;
                    _2315 = _2191;
                    _2316 = _2192;
                    _2317 = _2193;
                    _2318 = _2194;
                    _2319 = _2195;
                    _2320 = _2196;
                    _2321 = _2206;
                    float _2247;
                    float _2248;
                    float _2249;
                    float _2250;
                    float _2251;
                    float _2252;
                    for (;;)
                    {
                        uint _2325 = uint(findLSB(_2321)) + (_2197 << 5u);
                        uint _2322 = (_2321 + 4294967295u) & _2321;
                        uint _2327 = _2325 * 48u;
                        vec4 _2341 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2327)).x, texelFetch(g_PointLightRenderingBuffer, int(_2327 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2327 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2327 + 3u)).x));
                        uint _2347 = (_2325 * 48u) + 4u;
                        vec4 _2360 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2347)).x, texelFetch(g_PointLightRenderingBuffer, int(_2347 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2347 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2347 + 3u)).x));
                        uint _2366 = (_2325 * 48u) + 8u;
                        vec3 _2377 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2366)).x, texelFetch(g_PointLightRenderingBuffer, int(_2366 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2366 + 2u)).x));
                        float _2381 = _2341.x - _1900;
                        float _2382 = _2341.y - _1901;
                        float _2383 = _2341.z - _1902;
                        float _2384 = dot(vec3(_2381, _2382, _2383), vec3(_2381, _2382, _2383));
                        float _2387 = inversesqrt(_2384);
                        float _2396 = 1.0 - (_2384 * _2341.w);
                        float _3507 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
                        float _2397 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
                        float _2398 = sqrt(_2384) * _2360.w;
                        float _2401 = 1.39999997615814208984375 / (_2398 + 1.39999997615814208984375);
                        float _2402 = _2401 * _2401;
                        float _2405 = ((1.0 - _2402) * dot(vec3(_335, _338, _341), vec3(_2387 * _2381, _2387 * _2382, _2387 * _2383))) + _2402;
                        float _2408 = _2398 * _2398;
                        float _2412 = ((isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0))) * _2397) / ((_2408 * 0.699999988079071044921875) + 1.0);
                        float _2416 = (-0.0) - _1900;
                        float _2417 = (-0.0) - _1901;
                        float _2418 = (-0.0) - _1902;
                        float _2422 = inversesqrt(dot(vec3(_2416, _2417, _2418), vec3(_2416, _2417, _2418)));
                        float _2426 = dot(vec3(_335, _338, _341), vec3(_2422 * _2416, _2422 * _2417, _2422 * _2418));
                        float _3523 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
                        float _3534 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
                        float _2430 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
                        float _2434 = (0.5 / (((isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) + 9.9999999392252902907785028219223e-09) + _2430)) * _2430;
                        float _3545 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
                        float _2443 = (((isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) * 3.1415927410125732421875) / ((_2408 * 2.1991131305694580078125) + 3.141590118408203125)) * _2397;
                        _2250 = (_2412 * _2360.x) + _2318;
                        _2251 = (_2412 * _2360.y) + _2319;
                        _2252 = (_2412 * _2360.z) + _2320;
                        _2247 = (_2443 * _2377.x) + _2315;
                        _2248 = (_2443 * _2377.y) + _2316;
                        _2249 = (_2443 * _2377.z) + _2317;
                        if (_2322 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2315 = _2247;
                            _2316 = _2248;
                            _2317 = _2249;
                            _2318 = _2250;
                            _2319 = _2251;
                            _2320 = _2252;
                            _2321 = _2322;
                        }
                    }
                    frontier_phi_61_pred = _2247;
                    frontier_phi_61_pred_1 = _2252;
                    frontier_phi_61_pred_2 = _2251;
                    frontier_phi_61_pred_3 = _2250;
                    frontier_phi_61_pred_4 = _2249;
                    frontier_phi_61_pred_5 = _2248;
                }
                _2050 = frontier_phi_61_pred;
                _2060 = frontier_phi_61_pred_1;
                _2058 = frontier_phi_61_pred_2;
                _2056 = frontier_phi_61_pred_3;
                _2054 = frontier_phi_61_pred_4;
                _2052 = frontier_phi_61_pred_5;
                uint _2198 = _2197 + 1u;
                if (_2198 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2191 = _2050;
                    _2192 = _2052;
                    _2193 = _2054;
                    _2194 = _2056;
                    _2195 = _2058;
                    _2196 = _2060;
                    _2197 = _2198;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2049 = _2050;
            _2051 = _2052;
            _2053 = _2054;
            _2055 = _2056;
            _2057 = _2058;
            _2059 = _2060;
        }
        uvec4 _2063 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2064 = _2063.z;
        uint _2066 = (_2064 >> 8u) & 15u;
        float _2162;
        float _2164;
        float _2166;
        float _2168;
        float _2170;
        float _2172;
        if (((4294967295u << _2066) & _1946) == 0u)
        {
            _2162 = _2049;
            _2164 = _2051;
            _2166 = _2053;
            _2168 = _2055;
            _2170 = _2057;
            _2172 = _2059;
        }
        else
        {
            float _2187 = inversesqrt(dot(vec3(_1900, _1901, _1902), vec3(_1900, _1901, _1902)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2066 < ((_2064 >> 12u) & 15u))
            {
                float _2163;
                float _2165;
                float _2167;
                float _2169;
                float _2171;
                float _2173;
                float _2298 = _2049;
                float _2299 = _2051;
                float _2300 = _2053;
                float _2301 = _2055;
                float _2302 = _2057;
                float _2303 = _2059;
                uint _2304 = _2066;
                uint _2313;
                bool _2314;
                for (;;)
                {
                    _2313 = texelFetch(g_lightClassification, int((((_1940 << 5u) + (_1926 << 9u)) + (_2304 << 2u)) >> 2u)).x;
                    _2314 = _2313 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2314)
                    {
                        frontier_phi_67_pred = _2301;
                        frontier_phi_67_pred_1 = _2302;
                        frontier_phi_67_pred_2 = _2303;
                        frontier_phi_67_pred_3 = _2300;
                        frontier_phi_67_pred_4 = _2299;
                        frontier_phi_67_pred_5 = _2298;
                    }
                    else
                    {
                        float _2448;
                        float _2449;
                        float _2450;
                        float _2451;
                        float _2452;
                        float _2453;
                        float _2700;
                        float _2701;
                        float _2702;
                        float _2703;
                        float _2704;
                        float _2705;
                        float _2461 = _2298;
                        float _2462 = _2299;
                        float _2463 = _2300;
                        float _2464 = _2301;
                        float _2465 = _2302;
                        float _2466 = _2303;
                        uint _2467 = _2313;
                        uint _2468;
                        vec4 _2493;
                        float _2494;
                        vec4 _2509;
                        vec3 _2521;
                        vec4 _2537;
                        vec4 _2553;
                        float _2600;
                        bool _2601;
                        for (;;)
                        {
                            uint _2478 = ((_2304 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2467));
                            _2468 = (_2467 + 4294967295u) & _2467;
                            uint _2480 = _2478 * 40u;
                            _2493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2480 + 3u)).x));
                            _2494 = _2493.w;
                            uint _2496 = (_2478 * 40u) + 4u;
                            _2509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2496 + 3u)).x));
                            uint _2511 = (_2478 * 40u) + 8u;
                            _2521 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2511 + 2u)).x));
                            uint _2524 = (_2478 * 40u) + 16u;
                            _2537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2524 + 3u)).x));
                            uint _2540 = (_2478 * 40u) + 20u;
                            _2553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2540 + 3u)).x));
                            uint _2556 = (_2478 * 40u) + 24u;
                            vec4 _2569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2556 + 3u)).x));
                            uint _2575 = (_2478 * 40u) + 28u;
                            vec4 _2588 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2575 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2575 + 3u)).x));
                            _2600 = fma(_1902, _2588.z, fma(_1901, _2588.y, _2588.x * _1900)) + _2588.w;
                            _2601 = !((fma(_1902, _2569.z, fma(_1901, _2569.y, _2569.x * _1900)) + _2569.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2601)
                            {
                                float _2628 = _2493.x - _1900;
                                float _2629 = _2493.y - _1901;
                                float _2630 = _2493.z - _1902;
                                float _2631 = dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630));
                                float _2634 = inversesqrt(_2631);
                                float _2635 = _2634 * _2628;
                                float _2636 = _2634 * _2629;
                                float _2637 = _2634 * _2630;
                                float _2641 = 1.0 - (_2631 / (_2494 * _2494));
                                float _3556 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
                                float _2642 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
                                float _2646 = sqrt(_2631) * _2509.w;
                                float _2648 = 1.39999997615814208984375 / (_2646 + 1.39999997615814208984375);
                                float _2649 = _2648 * _2648;
                                float _2650 = 1.0 - _2649;
                                float _2652 = (_2650 * dot(vec3(_2635, _2636, _2637), vec3(_335, _338, _341))) + _2649;
                                float _2655 = _2646 * _2646;
                                float _2659 = (fma(_1902, _2537.z, fma(_1901, _2537.y, _2537.x * _1900)) + _2537.w) / _2600;
                                float _2660 = (fma(_1902, _2553.z, fma(_1901, _2553.y, _2553.x * _1900)) + _2553.w) / _2600;
                                float _2664 = 1.0 - dot(vec2(_2659, _2660), vec2(_2659, _2660));
                                float _3572 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
                                float _2665 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
                                float _2666 = _2665 * (((isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0))) * _2642) / ((_2655 * 0.699999988079071044921875) + 1.0));
                                float _2676 = dot(vec3(_335, _338, _341), vec3((-0.0) - (_1900 * _2187), (-0.0) - (_1901 * _2187), (-0.0) - (_1902 * _2187)));
                                float _3583 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
                                float _2684 = (_2650 * dot(vec3(_335, _338, _341), vec3(_2635, _2636, _2637))) + _2649;
                                float _3594 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
                                float _2685 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
                                float _2689 = (0.5 / (((isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) + 9.9999999392252902907785028219223e-09) + _2685)) * _2685;
                                float _3605 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
                                float _2696 = (_2665 * _2642) * (((isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * 3.1415927410125732421875) / ((_2655 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2696 * _2521.x;
                                frontier_phi_73_pred_1 = _2696 * _2521.y;
                                frontier_phi_73_pred_2 = _2666 * _2509.z;
                                frontier_phi_73_pred_3 = _2666 * _2509.y;
                                frontier_phi_73_pred_4 = _2666 * _2509.x;
                                frontier_phi_73_pred_5 = _2696 * _2521.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2700 = frontier_phi_73_pred;
                            _2701 = frontier_phi_73_pred_1;
                            _2705 = frontier_phi_73_pred_2;
                            _2704 = frontier_phi_73_pred_3;
                            _2703 = frontier_phi_73_pred_4;
                            _2702 = frontier_phi_73_pred_5;
                            _2451 = _2703 + _2464;
                            _2452 = _2704 + _2465;
                            _2453 = _2705 + _2466;
                            _2448 = _2700 + _2461;
                            _2449 = _2701 + _2462;
                            _2450 = _2702 + _2463;
                            if (_2468 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2461 = _2448;
                                _2462 = _2449;
                                _2463 = _2450;
                                _2464 = _2451;
                                _2465 = _2452;
                                _2466 = _2453;
                                _2467 = _2468;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2451;
                        frontier_phi_67_pred_1 = _2452;
                        frontier_phi_67_pred_2 = _2453;
                        frontier_phi_67_pred_3 = _2450;
                        frontier_phi_67_pred_4 = _2449;
                        frontier_phi_67_pred_5 = _2448;
                    }
                    _2169 = frontier_phi_67_pred;
                    _2171 = frontier_phi_67_pred_1;
                    _2173 = frontier_phi_67_pred_2;
                    _2167 = frontier_phi_67_pred_3;
                    _2165 = frontier_phi_67_pred_4;
                    _2163 = frontier_phi_67_pred_5;
                    uint _2305 = _2304 + 1u;
                    if (_2305 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2298 = _2163;
                        _2299 = _2165;
                        _2300 = _2167;
                        _2301 = _2169;
                        _2302 = _2171;
                        _2303 = _2173;
                        _2304 = _2305;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2171;
                frontier_phi_55_56_ladder_1 = _2173;
                frontier_phi_55_56_ladder_2 = _2169;
                frontier_phi_55_56_ladder_3 = _2167;
                frontier_phi_55_56_ladder_4 = _2165;
                frontier_phi_55_56_ladder_5 = _2163;
            }
            else
            {
                frontier_phi_55_56_ladder = _2057;
                frontier_phi_55_56_ladder_1 = _2059;
                frontier_phi_55_56_ladder_2 = _2055;
                frontier_phi_55_56_ladder_3 = _2053;
                frontier_phi_55_56_ladder_4 = _2051;
                frontier_phi_55_56_ladder_5 = _2049;
            }
            _2162 = frontier_phi_55_56_ladder_5;
            _2164 = frontier_phi_55_56_ladder_4;
            _2166 = frontier_phi_55_56_ladder_3;
            _2168 = frontier_phi_55_56_ladder_2;
            _2170 = frontier_phi_55_56_ladder;
            _2172 = frontier_phi_55_56_ladder_1;
        }
        float _2177 = isnan(1.0) ? _380 : (isnan(_380) ? 1.0 : min(_380, 1.0));
        _1959 = (_2177 * _2168) + _1522;
        _1961 = (_2177 * _2170) + _1524;
        _1963 = (_2177 * _2172) + _1526;
        _1965 = ((_2162 * 0.039999999105930328369140625) * _2177) + _1771;
        _1967 = ((_2164 * 0.039999999105930328369140625) * _2177) + _1773;
        _1969 = ((_2166 * 0.039999999105930328369140625) * _2177) + _1775;
    }
    else
    {
        _1959 = _1522;
        _1961 = _1524;
        _1963 = _1526;
        _1965 = _1771;
        _1967 = _1773;
        _1969 = _1775;
    }
    float _3621 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _3632 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _3643 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _3654 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _1994 = cbInstanceData._m0[_354 + 6u].w * (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0)));
    float _1999 = _313 / cbSceneParam._m0[86u].x;
    float _2000 = _314 / cbSceneParam._m0[86u].y;
    vec4 _2014 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1999, _2000, (log2((isnan(cbSceneParam._m0[77u].w) ? _247 : (isnan(_247) ? cbSceneParam._m0[77u].w : min(_247, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2016 = _2014.x;
    float _2017 = _2014.y;
    float _2018 = _2014.z;
    float _2019 = _2014.w;
    float _2111;
    float _2113;
    float _2115;
    float _2117;
    if (_247 > cbSceneParam._m0[78u].w)
    {
        float _2074 = isnan(_247) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _247 : min(cbSceneParam._m0[80u].w, _247));
        float _2075 = _2074 / _247;
        float _2086 = _2075 * _299;
        float _2087 = _300 * _2075;
        float _2088 = (-0.0) - _2087;
        float _2089 = _2075 * _301;
        float _2091 = (cbSceneParam._m0[77u].w * _2088) / _2074;
        float _2092 = _2091 + cbSceneParam._m0[79u].w;
        float _2093 = cbSceneParam._m0[79u].w - _2087;
        float _2099 = sqrt(((_2086 * _2086) + (_2087 * _2087)) + (_2089 * _2089));
        float _2102 = (1.0 - (cbSceneParam._m0[77u].w / _2074)) * _2099;
        float _2107 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2109 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2260;
        if (abs((_2088 - _2091) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2260 = ((((_2092 > 0.0) ? exp2(_2107 * _2092) : (2.0 - exp2(_2109 * _2092))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2102;
        }
        else
        {
            float _2220 = 1.0 / cbSceneParam._m0[80u].x;
            float _2221 = isnan(_2093) ? _2092 : (isnan(_2092) ? _2093 : max(_2092, _2093));
            float _2222 = isnan(_2093) ? _2092 : (isnan(_2092) ? _2093 : min(_2092, _2093));
            float _2231 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : min(_2221, 0.0));
            float _2232 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : min(_2222, 0.0));
            _2260 = ((abs(_2099 / _2088) * cbSceneParam._m0[80u].y) * ((((_2231 - _2232) * 2.0) - ((exp2(_2107 * (isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0)))) - exp2(_2107 * (isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0))))) * _2220)) - ((exp2(_2109 * _2231) - exp2(_2109 * _2232)) * _2220))) + (_2102 * cbSceneParam._m0[80u].z);
        }
        vec4 _2262 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1999, _2000, 1.0), 0.0);
        float _2271 = exp2((_2260 * (-1.44269502162933349609375)) * (1.0 - _2262.w));
        float _2272 = log2(_2271);
        float _2288 = log2(_2019);
        _2111 = (exp2(_2288 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2272 * cbSceneParam._m0[78u].x)) * _2262.x) / cbSceneParam._m0[78u].x)) + _2016;
        _2113 = (exp2(_2288 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2272 * cbSceneParam._m0[78u].y)) * _2262.y) / cbSceneParam._m0[78u].y)) + _2017;
        _2115 = (exp2(_2288 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2272 * cbSceneParam._m0[78u].z)) * _2262.z) / cbSceneParam._m0[78u].z)) + _2018;
        _2117 = _2271 * _2019;
    }
    else
    {
        _2111 = _2016;
        _2113 = _2017;
        _2115 = _2018;
        _2117 = _2019;
    }
    float _2129 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2130 = _2129 == 3.0;
    float _2132 = log2(_2117);
    float _2139 = exp2(_2132 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * (_1959 + ((isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0))) * _380))) + ((_1965 + ((isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))) * _1159)) * cbPerFrame._m0[3u].x));
    float _2140 = exp2(_2132 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * (_1961 + ((isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0))) * _380))) + ((_1967 + ((isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))) * _1159)) * cbPerFrame._m0[3u].x));
    float _2141 = exp2(_2132 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_1963 + ((isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0))) * _380))) + ((_1969 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _1159)) * cbPerFrame._m0[3u].x));
    float _2150 = (_2129 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2150 * (_2130 ? _2139 : (_2139 + (cbSceneParam._m0[72u].w * _2111)));
    SV_Target.y = _2150 * (_2130 ? _2140 : (_2140 + (cbSceneParam._m0[72u].w * _2113)));
    SV_Target.z = _2150 * (_2130 ? _2141 : (_2141 + (cbSceneParam._m0[72u].w * _2115)));
    SV_Target.w = _1994;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _1994;
}


