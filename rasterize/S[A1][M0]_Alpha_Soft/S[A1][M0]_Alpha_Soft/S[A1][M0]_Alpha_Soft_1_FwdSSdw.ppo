#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Alpha_Soft_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _726;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _164 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _165 = _164 * NORMAL.x;
    float _166 = _164 * NORMAL.y;
    float _167 = _164 * NORMAL.z;
    vec4 _203 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _205 = _203.x;
    bool _212 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _229 = ((_212 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _205)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _205))) - POSITION_1.w) / cbMtdParam._m0[11u].x;
    float _2860 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _233 = (texture(sampler2D(S_A1_M0_Alpha_Soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w)).w * TEXCOORD_1.z) * (isnan(1.0) ? _2860 : (isnan(_2860) ? 1.0 : min(_2860, 1.0)));
    float _237 = inversesqrt(dot(vec3(_165, _166, _167), vec3(_165, _166, _167)));
    float _238 = _237 * _165;
    float _239 = _237 * _166;
    float _240 = _237 * _167;
    float _2871 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _241 = isnan(1.0) ? _2871 : (isnan(_2871) ? 1.0 : min(_2871, 1.0));
    float _2882 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _2893 = isnan(0.0) ? cbMtdParam._m0[10u].y : (isnan(cbMtdParam._m0[10u].y) ? 0.0 : max(cbMtdParam._m0[10u].y, 0.0));
    float _2904 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _249 = _212 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _291 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _301 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _291);
    float _302 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _291);
    float _303 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _291);
    float _307 = inversesqrt(dot(vec3(_301, _302, _303), vec3(_301, _302, _303)));
    float _308 = _301 * _307;
    float _309 = _302 * _307;
    float _310 = _303 * _307;
    float _315 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _316 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _337 = fma(_240, cbSceneParam._m0[5u].z, fma(_239, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _238));
    float _340 = fma(_240, cbSceneParam._m0[6u].z, fma(_239, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _238));
    float _343 = fma(_240, cbSceneParam._m0[7u].z, fma(_239, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _238));
    uint _356 = uint(roundEven(NORMAL.w)) * 13u;
    uint _359 = (_356 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _365 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2882 : (isnan(_2882) ? 1.0 : min(_2882, 1.0)))) * cbInstanceData._m0[_359].x;
    float _366 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2893 : (isnan(_2893) ? 1.0 : min(_2893, 1.0)))) * cbInstanceData._m0[_359].y;
    float _367 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2904 : (isnan(_2904) ? 1.0 : min(_2904, 1.0)))) * cbInstanceData._m0[_359].z;
    float _2915 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _368 = isnan(1.0) ? _2915 : (isnan(_2915) ? 1.0 : min(_2915, 1.0));
    float _2926 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _369 = isnan(1.0) ? _2926 : (isnan(_2926) ? 1.0 : min(_2926, 1.0));
    float _2937 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _370 = isnan(1.0) ? _2937 : (isnan(_2937) ? 1.0 : min(_2937, 1.0));
    vec4 _379 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _315, cbSceneParam._m0[86u].y * _316));
    float _382 = _379.x * TEXCOORD_1.w;
    float _383 = dot(vec3(_238, _239, _240), vec3(_308, _309, _310));
    float _386 = _383 * 2.0;
    float _391 = (_386 * _238) - _308;
    float _392 = (_386 * _239) - _309;
    float _393 = (_386 * _240) - _310;
    float _415 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _419 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _423 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _725;
    float _727;
    float _728;
    float _729;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    float _739;
    float _740;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _450 = fma(_423, cbModelParam._m0[26u].z, fma(_419, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _415));
        float _454 = fma(_423, cbModelParam._m0[27u].z, fma(_419, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _415));
        float _458 = fma(_423, cbModelParam._m0[28u].z, fma(_419, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _415));
        float _483 = _415 + _238;
        float _484 = _419 + _239;
        float _485 = _423 + _240;
        float _495 = fma(_485, cbModelParam._m0[26u].z, fma(_484, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _483)) - _450;
        float _496 = fma(_485, cbModelParam._m0[27u].z, fma(_484, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _483)) - _454;
        float _497 = fma(_485, cbModelParam._m0[28u].z, fma(_484, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _483)) - _458;
        float _501 = inversesqrt(dot(vec3(_495, _496, _497), vec3(_495, _496, _497)));
        float _514 = ((_501 * _495) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_450 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _515 = ((_501 * _496) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_454 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _516 = ((_501 * _497) / cbModelParam._m0[34u].z) + ((((((_458 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _519 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_514, _515, _516), 0.0);
        vec4 _526 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_514, _515, _516), 0.0);
        vec4 _533 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_514, _515, _516), 0.0);
        vec4 _540 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_514, _515, _516), 0.0);
        float _553 = exp2((_519.w + (-0.5)) * 20.0) * 2.0;
        float _554 = _553 * (_519.x + (-0.5));
        float _555 = _553 * (_519.y + (-0.5));
        float _556 = _553 * (_519.z + (-0.5));
        float _563 = exp2((_526.w + (-0.5)) * 20.0) * 2.0;
        float _564 = _563 * (_526.x + (-0.5));
        float _565 = _563 * (_526.y + (-0.5));
        float _566 = _563 * (_526.z + (-0.5));
        float _573 = exp2((_533.w + (-0.5)) * 20.0) * 2.0;
        float _574 = _573 * (_533.x + (-0.5));
        float _575 = _573 * (_533.y + (-0.5));
        float _576 = _573 * (_533.z + (-0.5));
        float _583 = exp2((_540.w + (-0.5)) * 20.0) * 2.0;
        float _584 = _583 * (_540.x + (-0.5));
        float _585 = _583 * (_540.y + (-0.5));
        float _586 = _583 * (_540.z + (-0.5));
        float _587 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
        float _588 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
        float _589 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
        float _590 = _554 * 0.5;
        float _591 = _564 * 0.5;
        float _592 = _574 * 0.5;
        float _593 = dot(vec3(_590, _591, _592), vec3(_590, _591, _592));
        float _598 = (_593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_593);
        float _607 = (dot(vec3(_238, _239, _240), vec3(_598 * _590, _598 * _591, _598 * _592)) + 1.0) * 0.5;
        float _2963 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
        float _617 = sqrt(((_591 * _591) + (_590 * _590)) + (_592 * _592)) / (_587 + 9.9999997473787516355514526367188e-06);
        float _2974 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
        float _618 = isnan(1.0) ? _2974 : (isnan(_2974) ? 1.0 : min(_2974, 1.0));
        float _619 = _618 * 2.0;
        float _623 = (1.0 - _618) / (_618 + 1.0);
        float _2985 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
        float _624 = isnan(1.0) ? _2985 : (isnan(_2985) ? 1.0 : min(_2985, 1.0));
        float _633 = ((((1.0 - _624) * (_619 + 2.0)) * exp2(log2(isnan(1.0) ? _2963 : (isnan(_2963) ? 1.0 : min(_2963, 1.0))) * (_619 + 1.0))) + _624) * _587;
        float _634 = _555 * 0.5;
        float _635 = _565 * 0.5;
        float _636 = _575 * 0.5;
        float _637 = dot(vec3(_634, _635, _636), vec3(_634, _635, _636));
        float _642 = (_637 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_637);
        float _650 = (dot(vec3(_238, _239, _240), vec3(_642 * _634, _642 * _635, _642 * _636)) + 1.0) * 0.5;
        float _2996 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
        float _659 = sqrt(((_635 * _635) + (_634 * _634)) + (_636 * _636)) / (_588 + 9.9999997473787516355514526367188e-06);
        float _3007 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _660 = isnan(1.0) ? _3007 : (isnan(_3007) ? 1.0 : min(_3007, 1.0));
        float _661 = _660 * 2.0;
        float _665 = (1.0 - _660) / (_660 + 1.0);
        float _3018 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
        float _666 = isnan(1.0) ? _3018 : (isnan(_3018) ? 1.0 : min(_3018, 1.0));
        float _675 = ((((1.0 - _666) * (_661 + 2.0)) * exp2(log2(isnan(1.0) ? _2996 : (isnan(_2996) ? 1.0 : min(_2996, 1.0))) * (_661 + 1.0))) + _666) * _588;
        float _676 = _556 * 0.5;
        float _677 = _566 * 0.5;
        float _678 = _576 * 0.5;
        float _679 = dot(vec3(_676, _677, _678), vec3(_676, _677, _678));
        float _684 = (_679 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_679);
        float _692 = (dot(vec3(_238, _239, _240), vec3(_684 * _676, _684 * _677, _684 * _678)) + 1.0) * 0.5;
        float _3029 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _701 = sqrt(((_677 * _677) + (_676 * _676)) + (_678 * _678)) / (_589 + 9.9999997473787516355514526367188e-06);
        float _3040 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _702 = isnan(1.0) ? _3040 : (isnan(_3040) ? 1.0 : min(_3040, 1.0));
        float _703 = _702 * 2.0;
        float _707 = (1.0 - _702) / (_702 + 1.0);
        float _3051 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _708 = isnan(1.0) ? _3051 : (isnan(_3051) ? 1.0 : min(_3051, 1.0));
        float _717 = ((((1.0 - _708) * (_703 + 2.0)) * exp2(log2(isnan(1.0) ? _3029 : (isnan(_3029) ? 1.0 : min(_3029, 1.0))) * (_703 + 1.0))) + _708) * _589;
        _725 = _556;
        _727 = _555;
        _728 = _554;
        _729 = _566;
        _730 = _565;
        _731 = _564;
        _732 = _576;
        _733 = _575;
        _734 = _574;
        _735 = _589;
        _736 = _588;
        _737 = _587;
        _738 = cbModelParam._m0[36u].z * (isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0)));
        _739 = cbModelParam._m0[36u].z * (isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0)));
        _740 = cbModelParam._m0[36u].z * (isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0)));
    }
    else
    {
        _725 = _726;
        _727 = _726;
        _728 = _726;
        _729 = _726;
        _730 = _726;
        _731 = _726;
        _732 = _726;
        _733 = _726;
        _734 = _726;
        _735 = _726;
        _736 = _726;
        _737 = _726;
        _738 = 0.0;
        _739 = 0.0;
        _740 = 0.0;
    }
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _766 = fma(_423, cbModelParam._m0[30u].z, fma(_419, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _415));
        float _770 = fma(_423, cbModelParam._m0[31u].z, fma(_419, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _415));
        float _774 = fma(_423, cbModelParam._m0[32u].z, fma(_419, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _415));
        float _797 = _415 + _238;
        float _798 = _419 + _239;
        float _799 = _423 + _240;
        float _809 = fma(_799, cbModelParam._m0[30u].z, fma(_798, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _797)) - _766;
        float _810 = fma(_799, cbModelParam._m0[31u].z, fma(_798, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _797)) - _770;
        float _811 = fma(_799, cbModelParam._m0[32u].z, fma(_798, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _797)) - _774;
        float _815 = inversesqrt(dot(vec3(_809, _810, _811), vec3(_809, _810, _811)));
        float _828 = ((_815 * _809) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_766 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _829 = ((_815 * _810) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_770 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _830 = ((_815 * _811) / cbModelParam._m0[35u].z) + ((((((_774 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        float _865 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_832.x + (-0.5));
        float _867 = _865 * (_832.y + (-0.5));
        float _868 = _865 * (_832.z + (-0.5));
        float _875 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_839.x + (-0.5));
        float _877 = _875 * (_839.y + (-0.5));
        float _878 = _875 * (_839.z + (-0.5));
        float _885 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_846.x + (-0.5));
        float _887 = _885 * (_846.y + (-0.5));
        float _888 = _885 * (_846.z + (-0.5));
        float _895 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_853.x + (-0.5));
        float _897 = _895 * (_853.y + (-0.5));
        float _898 = _895 * (_853.z + (-0.5));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _901 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _902 = _866 * 0.5;
        float _903 = _876 * 0.5;
        float _904 = _886 * 0.5;
        float _905 = dot(vec3(_902, _903, _904), vec3(_902, _903, _904));
        float _910 = (_905 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_905);
        float _918 = (dot(vec3(_238, _239, _240), vec3(_910 * _902, _910 * _903, _910 * _904)) + 1.0) * 0.5;
        float _3092 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _927 = sqrt(((_903 * _903) + (_902 * _902)) + (_904 * _904)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3103 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3103 : (isnan(_3103) ? 1.0 : min(_3103, 1.0));
        float _929 = _928 * 2.0;
        float _933 = (1.0 - _928) / (_928 + 1.0);
        float _3114 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3114 : (isnan(_3114) ? 1.0 : min(_3114, 1.0));
        float _943 = ((((1.0 - _934) * (_929 + 2.0)) * exp2(log2(isnan(1.0) ? _3092 : (isnan(_3092) ? 1.0 : min(_3092, 1.0))) * (_929 + 1.0))) + _934) * _899;
        float _944 = _867 * 0.5;
        float _945 = _877 * 0.5;
        float _946 = _887 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _960 = (dot(vec3(_238, _239, _240), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3125 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _969 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_900 + 9.9999997473787516355514526367188e-06);
        float _3136 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3136 : (isnan(_3136) ? 1.0 : min(_3136, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3147 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3147 : (isnan(_3147) ? 1.0 : min(_3147, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3125 : (isnan(_3125) ? 1.0 : min(_3125, 1.0))) * (_971 + 1.0))) + _976) * _900;
        float _986 = _868 * 0.5;
        float _987 = _878 * 0.5;
        float _988 = _888 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1002 = (dot(vec3(_238, _239, _240), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3158 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1011 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_901 + 9.9999997473787516355514526367188e-06);
        float _3169 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3169 : (isnan(_3169) ? 1.0 : min(_3169, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3180 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3158 : (isnan(_3158) ? 1.0 : min(_3158, 1.0))) * (_1013 + 1.0))) + _1018) * _901;
        _1035 = _868;
        _1036 = _867;
        _1037 = _866;
        _1038 = _878;
        _1039 = _877;
        _1040 = _876;
        _1041 = _888;
        _1042 = _887;
        _1043 = _886;
        _1044 = _901;
        _1045 = _900;
        _1046 = _899;
        _1047 = cbModelParam._m0[36u].w * (isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0)));
        _1048 = cbModelParam._m0[36u].w * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
        _1049 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
    }
    else
    {
        _1035 = _726;
        _1036 = _726;
        _1037 = _726;
        _1038 = _726;
        _1039 = _726;
        _1040 = _726;
        _1041 = _726;
        _1042 = _726;
        _1043 = _726;
        _1044 = _726;
        _1045 = _726;
        _1046 = _726;
        _1047 = 0.0;
        _1048 = 0.0;
        _1049 = 0.0;
    }
    float _1059 = (cbModelParam._m0[1u].x * (_1047 - _738)) + _738;
    float _1060 = (cbModelParam._m0[1u].x * (_1048 - _739)) + _739;
    float _1061 = (cbModelParam._m0[1u].x * (_1049 - _740)) + _740;
    float _1082 = fma(_1061, cbSceneParam._m0[89u].z, fma(_1060, cbSceneParam._m0[89u].y, _1059 * cbSceneParam._m0[89u].x));
    float _1085 = fma(_1061, cbSceneParam._m0[90u].z, fma(_1060, cbSceneParam._m0[90u].y, _1059 * cbSceneParam._m0[90u].x));
    float _1088 = fma(_1061, cbSceneParam._m0[91u].z, fma(_1060, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1059));
    float _1103 = _391 * 0.5;
    float _1104 = _392 * 0.5;
    float _1105 = _393 * 0.5;
    float _1106 = dot(vec4(_1103, _1104, _1105, 1.0), vec4(_1037, _1040, _1043, _1046));
    float _1109 = dot(vec4(_1103, _1104, _1105, 1.0), vec4(_1036, _1039, _1042, _1045));
    float _1112 = dot(vec4(_1103, _1104, _1105, 1.0), vec4(_1035, _1038, _1041, _1044));
    float _1146;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1119 = dot(vec4(_1103, _1104, _1105, 1.0), vec4(_725, _729, _732, _735));
        float _1123 = dot(vec4(_1103, _1104, _1105, 1.0), vec4(_727, _730, _733, _736));
        float _1127 = dot(vec4(_1103, _1104, _1105, 1.0), vec4(_728, _731, _734, _737));
        float _1134 = dot(vec4(cbModelParam._m0[39u]), vec4(_1103, _1104, _1105, 1.0));
        _1146 = dot(vec3(isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)), isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)), isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1134) ? 0.0 : (isnan(0.0) ? _1134 : max(0.0, _1134))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1146 = 1.0;
    }
    float _1157;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1148 = dot(vec4(cbModelParam._m0[40u]), vec4(_1103, _1104, _1105, 1.0));
        _1157 = dot(vec3(isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)), isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)), isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1148) ? 0.0 : (isnan(0.0) ? _1148 : max(0.0, _1148))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1157 = 1.0;
    }
    float _1161 = (_1157 * cbModelParam._m0[1u].x) + (_1146 * (1.0 - cbModelParam._m0[1u].x));
    float _1170 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1252;
    float _1254;
    float _1256;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1219 = fma(_423, cbModelParam._m0[13u].z, fma(_419, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _415)) + cbModelParam._m0[13u].w;
        float _1223 = fma(_423, cbModelParam._m0[14u].z, fma(_419, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _415)) + cbModelParam._m0[14u].w;
        float _1227 = fma(_423, cbModelParam._m0[15u].z, fma(_419, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _415)) + cbModelParam._m0[15u].w;
        float _1230 = fma(_393, cbModelParam._m0[13u].z, fma(_392, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _391));
        float _1233 = fma(_393, cbModelParam._m0[14u].z, fma(_392, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _391));
        float _1236 = fma(_393, cbModelParam._m0[15u].z, fma(_392, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _391));
        float _1262;
        if (_1230 > 0.0)
        {
            _1262 = abs((1.0 - _1219) / _1230);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1230 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1219 + 1.0) / _1230);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1262 = frontier_phi_14_12_ladder;
        }
        float _1490;
        if (_1233 > 0.0)
        {
            _1490 = abs((1.0 - _1223) / _1233);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1233 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1223 + 1.0) / _1233);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1490 = frontier_phi_23_19_ladder;
        }
        float _1682;
        if (_1236 > 0.0)
        {
            _1682 = abs((1.0 - _1227) / _1236);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1236 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1227 + 1.0) / _1236);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1682 = frontier_phi_35_30_ladder;
        }
        float _1684 = isnan(_1490) ? _1262 : (isnan(_1262) ? _1490 : min(_1262, _1490));
        float _1685 = isnan(_1682) ? _1684 : (isnan(_1684) ? _1682 : min(_1684, _1682));
        float _1689 = (_1685 * _1230) + _1219;
        float _1690 = (_1685 * _1233) + _1223;
        float _1691 = (_1685 * _1236) + _1227;
        float _1692 = _1685 * 9.9999997473787516355514526367188e-05;
        float _1694 = (-1.0) - _1692;
        float _1696 = _1692 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1691 > _1696) || ((_1691 < _1694) || ((_1690 > _1696) || ((_1690 < _1694) || ((_1689 < _1694) || (_1689 > _1696))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1788 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1691, cbModelParam._m0[9u].z, fma(_1690, cbModelParam._m0[9u].y, _1689 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1691, cbModelParam._m0[10u].z, fma(_1690, cbModelParam._m0[10u].y, _1689 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1691, cbModelParam._m0[11u].z, fma(_1690, cbModelParam._m0[11u].y, _1689 * cbModelParam._m0[11u].x))), _1170);
            frontier_phi_13_35_ladder = _1788.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1788.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1788.x * cbModelParam._m0[1u].y;
        }
        _1252 = frontier_phi_13_35_ladder_2;
        _1254 = frontier_phi_13_35_ladder_1;
        _1256 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1240 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_391, _392, _393), _1170);
        _1252 = _1240.x * cbModelParam._m0[1u].y;
        _1254 = _1240.y * cbModelParam._m0[1u].y;
        _1256 = _1240.z * cbModelParam._m0[1u].y;
    }
    float _1259 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1352;
    float _1354;
    float _1356;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1316 = fma(_423, cbModelParam._m0[21u].z, fma(_419, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _415)) + cbModelParam._m0[21u].w;
        float _1320 = fma(_423, cbModelParam._m0[22u].z, fma(_419, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _415)) + cbModelParam._m0[22u].w;
        float _1324 = fma(_423, cbModelParam._m0[23u].z, fma(_419, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _415)) + cbModelParam._m0[23u].w;
        float _1327 = fma(_393, cbModelParam._m0[21u].z, fma(_392, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _391));
        float _1330 = fma(_393, cbModelParam._m0[22u].z, fma(_392, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _391));
        float _1333 = fma(_393, cbModelParam._m0[23u].z, fma(_392, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _391));
        float _1495;
        if (_1327 > 0.0)
        {
            _1495 = abs((1.0 - _1316) / _1327);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1327 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1316 + 1.0) / _1327);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1495 = frontier_phi_25_21_ladder;
        }
        float _1709;
        if (_1330 > 0.0)
        {
            _1709 = abs((1.0 - _1320) / _1330);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1330 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1320 + 1.0) / _1330);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1709 = frontier_phi_37_32_ladder;
        }
        float _1860;
        if (_1333 > 0.0)
        {
            _1860 = abs((1.0 - _1324) / _1333);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1333 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1324 + 1.0) / _1333);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1860 = frontier_phi_46_43_ladder;
        }
        float _1862 = isnan(_1709) ? _1495 : (isnan(_1495) ? _1709 : min(_1495, _1709));
        float _1863 = isnan(_1860) ? _1862 : (isnan(_1862) ? _1860 : min(_1862, _1860));
        float _1867 = (_1863 * _1327) + _1316;
        float _1868 = (_1863 * _1330) + _1320;
        float _1869 = (_1863 * _1333) + _1324;
        float _1870 = _1863 * 9.9999997473787516355514526367188e-05;
        float _1871 = (-1.0) - _1870;
        float _1873 = _1870 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1869 > _1873) || ((_1869 < _1871) || ((_1868 > _1873) || ((_1868 < _1871) || ((_1867 < _1871) || (_1867 > _1873))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2070 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1869, cbModelParam._m0[17u].z, fma(_1868, cbModelParam._m0[17u].y, _1867 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1869, cbModelParam._m0[18u].z, fma(_1868, cbModelParam._m0[18u].y, _1867 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1869, cbModelParam._m0[19u].z, fma(_1868, cbModelParam._m0[19u].y, _1867 * cbModelParam._m0[19u].x))), _1259);
            frontier_phi_22_46_ladder = _2070.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2070.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2070.x * cbModelParam._m0[1u].z;
        }
        _1352 = frontier_phi_22_46_ladder_2;
        _1354 = frontier_phi_22_46_ladder_1;
        _1356 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1336 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_391, _392, _393), _1259);
        _1352 = _1336.x * cbModelParam._m0[1u].z;
        _1354 = _1336.y * cbModelParam._m0[1u].z;
        _1356 = _1336.z * cbModelParam._m0[1u].z;
    }
    float _1368 = _382 * 0.01200000010430812835693359375;
    float _1370 = _1368 * ((cbModelParam._m0[1u].w * (_1352 - _1252)) + _1252);
    float _1371 = _1368 * ((cbModelParam._m0[1u].w * (_1354 - _1254)) + _1254);
    float _1372 = _1368 * ((cbModelParam._m0[1u].w * (_1356 - _1256)) + _1256);
    float _1375 = fma(_1372, cbSceneParam._m0[89u].z, fma(_1371, cbSceneParam._m0[89u].y, _1370 * cbSceneParam._m0[89u].x));
    float _1378 = fma(_1372, cbSceneParam._m0[90u].z, fma(_1371, cbSceneParam._m0[90u].y, _1370 * cbSceneParam._m0[90u].x));
    float _1381 = fma(_1372, cbSceneParam._m0[91u].z, fma(_1371, cbSceneParam._m0[91u].y, _1370 * cbSceneParam._m0[91u].x));
    vec4 _1389 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_315, _316));
    float _1391 = _1389.w;
    float _1403 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1391);
    float _1404 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1391);
    float _1405 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1391);
    uvec4 _1409 = floatBitsToUint(cbInstanceData._m0[_356 + 5u]);
    uint _1411 = _1409.x * 14u;
    uint _1412 = _1411 + 13u;
    float _1419 = _382 + (-1.0);
    float _1425 = (cbLight._m0[_1412].x * _1419) + 1.0;
    float _1426 = (cbLight._m0[_1412].y * _1419) + 1.0;
    float _1427 = (cbLight._m0[_1412].z * _1419) + 1.0;
    float _1428 = (cbLight._m0[_1412].w * _1419) + 1.0;
    uint _1429 = _1411 + 5u;
    float _1435 = isnan(1.0) ? _1426 : (isnan(_1426) ? 1.0 : min(_1426, 1.0));
    uint _1439 = _1411 + 4u;
    float _1449 = isnan(1.0) ? _1425 : (isnan(_1425) ? 1.0 : min(_1425, 1.0));
    uint _1453 = _1411 | 1u;
    float _1464 = dot(vec3(cbLight._m0[_1411].xyz), vec3(_238, _239, _240));
    float _1467 = dot(vec3(cbLight._m0[_1453].xyz), vec3(_238, _239, _240));
    float _3316 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
    float _3327 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
    float _1472 = (isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0))) * 0.3183098733425140380859375;
    float _1474 = (isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0))) * 0.3183098733425140380859375;
    float _1481 = ((cbLight._m0[_1429].x * _1435) * _1474) + (((cbLight._m0[_1439].x * _1403) * _1449) * _1472);
    float _1482 = ((_1435 * cbLight._m0[_1429].y) * _1474) + (((cbLight._m0[_1439].y * _1404) * _1449) * _1472);
    float _1483 = ((_1435 * cbLight._m0[_1429].z) * _1474) + (((cbLight._m0[_1439].z * _1405) * _1449) * _1472);
    uvec4 _1487 = floatBitsToUint(cbLight._m0[_1411 + 12u]);
    bool _1489 = _1487.x == 0u;
    float _1500;
    float _1502;
    float _1504;
    if (_1489)
    {
        _1500 = _1481;
        _1502 = _1482;
        _1504 = _1483;
    }
    else
    {
        uint _1508 = _1411 + 6u;
        float _1524 = (dot(vec3(cbLight._m0[_1411 + 2u].xyz), vec3(_238, _239, _240)) * 0.5) + 0.5;
        float _1525 = _1524 * _1524;
        float _3338 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
        float _1527 = isnan(1.0) ? _1427 : (isnan(_1427) ? 1.0 : min(_1427, 1.0));
        _1500 = (((cbLight._m0[_1508].x * 0.3183098733425140380859375) * _1526) * _1527) + _1481;
        _1502 = (((cbLight._m0[_1508].y * 0.3183098733425140380859375) * _1526) * _1527) + _1482;
        _1504 = (((cbLight._m0[_1508].z * 0.3183098733425140380859375) * _1526) * _1527) + _1483;
    }
    bool _1507 = _1487.y == 0u;
    float _1545;
    float _1547;
    float _1549;
    if (_1507)
    {
        _1545 = _1500;
        _1547 = _1502;
        _1549 = _1504;
    }
    else
    {
        uint _1653 = _1411 + 7u;
        float _1669 = (dot(vec3(cbLight._m0[_1411 + 3u].xyz), vec3(_238, _239, _240)) * 0.5) + 0.5;
        float _1670 = _1669 * _1669;
        float _3354 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0));
        float _1672 = isnan(1.0) ? _1428 : (isnan(_1428) ? 1.0 : min(_1428, 1.0));
        _1545 = (((cbLight._m0[_1653].x * 0.3183098733425140380859375) * _1671) * _1672) + _1500;
        _1547 = (((cbLight._m0[_1653].y * 0.3183098733425140380859375) * _1671) * _1672) + _1502;
        _1549 = (((cbLight._m0[_1653].z * 0.3183098733425140380859375) * _1671) * _1672) + _1504;
    }
    uint _1551 = _1411 + 8u;
    float _1557 = cbLight._m0[_1411].x + _308;
    float _1558 = cbLight._m0[_1411].y + _309;
    float _1559 = cbLight._m0[_1411].z + _310;
    float _1563 = inversesqrt(dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559)));
    float _1567 = dot(vec3(_238, _239, _240), vec3(cbLight._m0[_1411].xyz));
    float _3370 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
    float _1570 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
    float _3381 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _1571 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
    float _1572 = dot(vec3(cbLight._m0[_1411].xyz), vec3(_1557 * _1563, _1558 * _1563, _1559 * _1563));
    float _3392 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
    float _1583 = (exp2(log2(1.0 - (isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1589 = (0.5 / ((_1570 + 9.9999999392252902907785028219223e-09) + _1571)) * _1570;
    float _3403 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
    float _1591 = (isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0))) * 0.31831014156341552734375;
    uint _1605 = _1411 + 9u;
    float _1611 = cbLight._m0[_1453].x + _308;
    float _1612 = cbLight._m0[_1453].y + _309;
    float _1613 = cbLight._m0[_1453].z + _310;
    float _1617 = inversesqrt(dot(vec3(_1611, _1612, _1613), vec3(_1611, _1612, _1613)));
    float _1621 = dot(vec3(_238, _239, _240), vec3(cbLight._m0[_1453].xyz));
    float _3414 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
    float _1624 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
    float _1625 = dot(vec3(cbLight._m0[_1453].xyz), vec3(_1611 * _1617, _1612 * _1617, _1613 * _1617));
    float _3425 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
    float _1634 = (exp2(log2(1.0 - (isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1638 = (0.5 / ((_1624 + 9.9999999392252902907785028219223e-09) + _1571)) * _1624;
    float _3436 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
    float _1640 = (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * 0.31831014156341552734375;
    float _1650 = (((_1634 * cbLight._m0[_1605].x) * _1640) * _1435) + ((((cbLight._m0[_1551].x * _1403) * _1583) * _1591) * _1449);
    float _1651 = (((_1634 * cbLight._m0[_1605].y) * _1640) * _1435) + ((((cbLight._m0[_1551].y * _1404) * _1583) * _1591) * _1449);
    float _1652 = (((_1634 * cbLight._m0[_1605].z) * _1640) * _1435) + ((((cbLight._m0[_1551].z * _1405) * _1583) * _1591) * _1449);
    float _1714;
    float _1716;
    float _1718;
    if (_1489)
    {
        _1714 = _1650;
        _1716 = _1651;
        _1718 = _1652;
    }
    else
    {
        uint _1720 = _1411 + 10u;
        uint _1726 = _1411 + 2u;
        float _1732 = cbLight._m0[_1726].x + _308;
        float _1733 = cbLight._m0[_1726].y + _309;
        float _1734 = cbLight._m0[_1726].z + _310;
        float _1738 = inversesqrt(dot(vec3(_1732, _1733, _1734), vec3(_1732, _1733, _1734)));
        float _1742 = dot(vec3(_238, _239, _240), vec3(cbLight._m0[_1726].xyz));
        float _3447 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1745 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _1746 = dot(vec3(cbLight._m0[_1726].xyz), vec3(_1732 * _1738, _1733 * _1738, _1734 * _1738));
        float _3458 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1755 = (exp2(log2(1.0 - (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1759 = (0.5 / ((_1745 + 9.9999999392252902907785028219223e-09) + _1571)) * _1745;
        float _3469 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1761 = (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) * 0.31831014156341552734375;
        float _1762 = isnan(1.0) ? _1427 : (isnan(_1427) ? 1.0 : min(_1427, 1.0));
        _1714 = (((_1755 * cbLight._m0[_1720].x) * _1761) * _1762) + _1650;
        _1716 = (((_1755 * cbLight._m0[_1720].y) * _1761) * _1762) + _1651;
        _1718 = (((_1755 * cbLight._m0[_1720].z) * _1761) * _1762) + _1652;
    }
    float _1797;
    float _1799;
    float _1801;
    if (_1507)
    {
        _1797 = _1714;
        _1799 = _1716;
        _1801 = _1718;
    }
    else
    {
        uint _1808 = _1411 + 11u;
        uint _1814 = _1411 + 3u;
        float _1820 = cbLight._m0[_1814].x + _308;
        float _1821 = cbLight._m0[_1814].y + _309;
        float _1822 = cbLight._m0[_1814].z + _310;
        float _1826 = inversesqrt(dot(vec3(_1820, _1821, _1822), vec3(_1820, _1821, _1822)));
        float _1830 = dot(vec3(_238, _239, _240), vec3(cbLight._m0[_1814].xyz));
        float _3485 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1833 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _1834 = dot(vec3(cbLight._m0[_1814].xyz), vec3(_1820 * _1826, _1821 * _1826, _1822 * _1826));
        float _3496 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1843 = (exp2(log2(1.0 - (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1847 = (0.5 / ((_1833 + 9.9999999392252902907785028219223e-09) + _1571)) * _1833;
        float _3507 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1849 = (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * 0.31831014156341552734375;
        float _1850 = isnan(1.0) ? _1428 : (isnan(_1428) ? 1.0 : min(_1428, 1.0));
        _1797 = (((_1843 * cbLight._m0[_1808].x) * _1849) * _1850) + _1714;
        _1799 = (((_1843 * cbLight._m0[_1808].y) * _1849) * _1850) + _1716;
        _1801 = (((_1843 * cbLight._m0[_1808].z) * _1849) * _1850) + _1718;
    }
    float _1985;
    float _1987;
    float _1989;
    float _1991;
    float _1993;
    float _1995;
    if (_1409.y == 0u)
    {
        float _1925 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1926 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1925;
        float _1927 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1925;
        float _1928 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1925;
        uvec4 _1940 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1941 = _1940.x;
        uint _1952 = uint((float(_1940.y) * floor(float(uint(cbSceneParam._m0[85u].y * _316) / _1941))) + floor(float(uint(cbSceneParam._m0[85u].x * _315) / _1941)));
        float _1962 = (log2(_1928 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1963 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        uint _1966 = uint(isnan(14.0) ? _1963 : (isnan(_1963) ? 14.0 : min(_1963, 14.0)));
        uvec4 _1971 = texelFetch(g_lightClusterGridBuffer, int(((_1966 << 2u) + (_1952 << 6u)) >> 2u));
        uint _1972 = _1971.x;
        uint _1973 = _1940.z;
        float _2075;
        float _2077;
        float _2079;
        float _2081;
        float _2083;
        float _2085;
        if (((((1u << ((_1973 >> 4u) & 15u)) + 4294967295u) & _1972) == 0u) || ((_1973 & 240u) == 0u))
        {
            _2075 = 0.0;
            _2077 = 0.0;
            _2079 = 0.0;
            _2081 = 0.0;
            _2083 = 0.0;
            _2085 = 0.0;
        }
        else
        {
            float _2076;
            float _2078;
            float _2080;
            float _2082;
            float _2084;
            float _2086;
            float _2217 = 0.0;
            float _2218 = 0.0;
            float _2219 = 0.0;
            float _2220 = 0.0;
            float _2221 = 0.0;
            float _2222 = 0.0;
            uint _2223 = 0u;
            uint _2232;
            bool _2233;
            for (;;)
            {
                _2232 = texelFetch(g_lightClassification, int((((_1966 << 5u) + (_1952 << 9u)) + (_2223 << 2u)) >> 2u)).x;
                _2233 = _2232 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2233)
                {
                    frontier_phi_61_pred = _2217;
                    frontier_phi_61_pred_1 = _2222;
                    frontier_phi_61_pred_2 = _2221;
                    frontier_phi_61_pred_3 = _2220;
                    frontier_phi_61_pred_4 = _2219;
                    frontier_phi_61_pred_5 = _2218;
                }
                else
                {
                    float _2341;
                    float _2342;
                    float _2343;
                    float _2344;
                    float _2345;
                    float _2346;
                    uint _2347;
                    _2341 = _2217;
                    _2342 = _2218;
                    _2343 = _2219;
                    _2344 = _2220;
                    _2345 = _2221;
                    _2346 = _2222;
                    _2347 = _2232;
                    float _2273;
                    float _2274;
                    float _2275;
                    float _2276;
                    float _2277;
                    float _2278;
                    for (;;)
                    {
                        uint _2351 = uint(findLSB(_2347)) + (_2223 << 5u);
                        uint _2348 = (_2347 + 4294967295u) & _2347;
                        uint _2353 = _2351 * 48u;
                        vec4 _2367 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2353)).x, texelFetch(g_PointLightRenderingBuffer, int(_2353 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2353 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2353 + 3u)).x));
                        uint _2373 = (_2351 * 48u) + 4u;
                        vec4 _2386 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2373)).x, texelFetch(g_PointLightRenderingBuffer, int(_2373 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2373 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2373 + 3u)).x));
                        uint _2392 = (_2351 * 48u) + 8u;
                        vec3 _2403 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2392)).x, texelFetch(g_PointLightRenderingBuffer, int(_2392 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2392 + 2u)).x));
                        float _2407 = _2367.x - _1926;
                        float _2408 = _2367.y - _1927;
                        float _2409 = _2367.z - _1928;
                        float _2410 = dot(vec3(_2407, _2408, _2409), vec3(_2407, _2408, _2409));
                        float _2413 = inversesqrt(_2410);
                        float _2422 = 1.0 - (_2410 * _2367.w);
                        float _3533 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
                        float _2423 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
                        float _2424 = sqrt(_2410) * _2386.w;
                        float _2427 = 1.39999997615814208984375 / (_2424 + 1.39999997615814208984375);
                        float _2428 = _2427 * _2427;
                        float _2431 = ((1.0 - _2428) * dot(vec3(_337, _340, _343), vec3(_2413 * _2407, _2413 * _2408, _2413 * _2409))) + _2428;
                        float _2434 = _2424 * _2424;
                        float _2438 = ((isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0))) * _2423) / ((_2434 * 0.699999988079071044921875) + 1.0);
                        float _2442 = (-0.0) - _1926;
                        float _2443 = (-0.0) - _1927;
                        float _2444 = (-0.0) - _1928;
                        float _2448 = inversesqrt(dot(vec3(_2442, _2443, _2444), vec3(_2442, _2443, _2444)));
                        float _2452 = dot(vec3(_337, _340, _343), vec3(_2448 * _2442, _2448 * _2443, _2448 * _2444));
                        float _3549 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
                        float _3560 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
                        float _2456 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
                        float _2460 = (0.5 / (((isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))) + 9.9999999392252902907785028219223e-09) + _2456)) * _2456;
                        float _3571 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
                        float _2469 = (((isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * 3.1415927410125732421875) / ((_2434 * 2.1991131305694580078125) + 3.141590118408203125)) * _2423;
                        _2276 = (_2438 * _2386.x) + _2344;
                        _2277 = (_2438 * _2386.y) + _2345;
                        _2278 = (_2438 * _2386.z) + _2346;
                        _2273 = (_2469 * _2403.x) + _2341;
                        _2274 = (_2469 * _2403.y) + _2342;
                        _2275 = (_2469 * _2403.z) + _2343;
                        if (_2348 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2341 = _2273;
                            _2342 = _2274;
                            _2343 = _2275;
                            _2344 = _2276;
                            _2345 = _2277;
                            _2346 = _2278;
                            _2347 = _2348;
                        }
                    }
                    frontier_phi_61_pred = _2273;
                    frontier_phi_61_pred_1 = _2278;
                    frontier_phi_61_pred_2 = _2277;
                    frontier_phi_61_pred_3 = _2276;
                    frontier_phi_61_pred_4 = _2275;
                    frontier_phi_61_pred_5 = _2274;
                }
                _2076 = frontier_phi_61_pred;
                _2086 = frontier_phi_61_pred_1;
                _2084 = frontier_phi_61_pred_2;
                _2082 = frontier_phi_61_pred_3;
                _2080 = frontier_phi_61_pred_4;
                _2078 = frontier_phi_61_pred_5;
                uint _2224 = _2223 + 1u;
                if (_2224 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2217 = _2076;
                    _2218 = _2078;
                    _2219 = _2080;
                    _2220 = _2082;
                    _2221 = _2084;
                    _2222 = _2086;
                    _2223 = _2224;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2075 = _2076;
            _2077 = _2078;
            _2079 = _2080;
            _2081 = _2082;
            _2083 = _2084;
            _2085 = _2086;
        }
        uvec4 _2089 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2090 = _2089.z;
        uint _2092 = (_2090 >> 8u) & 15u;
        float _2188;
        float _2190;
        float _2192;
        float _2194;
        float _2196;
        float _2198;
        if (((4294967295u << _2092) & _1972) == 0u)
        {
            _2188 = _2075;
            _2190 = _2077;
            _2192 = _2079;
            _2194 = _2081;
            _2196 = _2083;
            _2198 = _2085;
        }
        else
        {
            float _2213 = inversesqrt(dot(vec3(_1926, _1927, _1928), vec3(_1926, _1927, _1928)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2092 < ((_2090 >> 12u) & 15u))
            {
                float _2189;
                float _2191;
                float _2193;
                float _2195;
                float _2197;
                float _2199;
                float _2324 = _2075;
                float _2325 = _2077;
                float _2326 = _2079;
                float _2327 = _2081;
                float _2328 = _2083;
                float _2329 = _2085;
                uint _2330 = _2092;
                uint _2339;
                bool _2340;
                for (;;)
                {
                    _2339 = texelFetch(g_lightClassification, int((((_1966 << 5u) + (_1952 << 9u)) + (_2330 << 2u)) >> 2u)).x;
                    _2340 = _2339 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2340)
                    {
                        frontier_phi_67_pred = _2327;
                        frontier_phi_67_pred_1 = _2328;
                        frontier_phi_67_pred_2 = _2329;
                        frontier_phi_67_pred_3 = _2326;
                        frontier_phi_67_pred_4 = _2325;
                        frontier_phi_67_pred_5 = _2324;
                    }
                    else
                    {
                        float _2474;
                        float _2475;
                        float _2476;
                        float _2477;
                        float _2478;
                        float _2479;
                        float _2726;
                        float _2727;
                        float _2728;
                        float _2729;
                        float _2730;
                        float _2731;
                        float _2487 = _2324;
                        float _2488 = _2325;
                        float _2489 = _2326;
                        float _2490 = _2327;
                        float _2491 = _2328;
                        float _2492 = _2329;
                        uint _2493 = _2339;
                        uint _2494;
                        vec4 _2519;
                        float _2520;
                        vec4 _2535;
                        vec3 _2547;
                        vec4 _2563;
                        vec4 _2579;
                        float _2626;
                        bool _2627;
                        for (;;)
                        {
                            uint _2504 = ((_2330 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2493));
                            _2494 = (_2493 + 4294967295u) & _2493;
                            uint _2506 = _2504 * 40u;
                            _2519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2506 + 3u)).x));
                            _2520 = _2519.w;
                            uint _2522 = (_2504 * 40u) + 4u;
                            _2535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2522 + 3u)).x));
                            uint _2537 = (_2504 * 40u) + 8u;
                            _2547 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2537 + 2u)).x));
                            uint _2550 = (_2504 * 40u) + 16u;
                            _2563 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2550 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2550 + 3u)).x));
                            uint _2566 = (_2504 * 40u) + 20u;
                            _2579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2566 + 3u)).x));
                            uint _2582 = (_2504 * 40u) + 24u;
                            vec4 _2595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2582 + 3u)).x));
                            uint _2601 = (_2504 * 40u) + 28u;
                            vec4 _2614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2601 + 3u)).x));
                            _2626 = fma(_1928, _2614.z, fma(_1927, _2614.y, _2614.x * _1926)) + _2614.w;
                            _2627 = !((fma(_1928, _2595.z, fma(_1927, _2595.y, _2595.x * _1926)) + _2595.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2627)
                            {
                                float _2654 = _2519.x - _1926;
                                float _2655 = _2519.y - _1927;
                                float _2656 = _2519.z - _1928;
                                float _2657 = dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656));
                                float _2660 = inversesqrt(_2657);
                                float _2661 = _2660 * _2654;
                                float _2662 = _2660 * _2655;
                                float _2663 = _2660 * _2656;
                                float _2667 = 1.0 - (_2657 / (_2520 * _2520));
                                float _3582 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
                                float _2668 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
                                float _2672 = sqrt(_2657) * _2535.w;
                                float _2674 = 1.39999997615814208984375 / (_2672 + 1.39999997615814208984375);
                                float _2675 = _2674 * _2674;
                                float _2676 = 1.0 - _2675;
                                float _2678 = (_2676 * dot(vec3(_2661, _2662, _2663), vec3(_337, _340, _343))) + _2675;
                                float _2681 = _2672 * _2672;
                                float _2685 = (fma(_1928, _2563.z, fma(_1927, _2563.y, _2563.x * _1926)) + _2563.w) / _2626;
                                float _2686 = (fma(_1928, _2579.z, fma(_1927, _2579.y, _2579.x * _1926)) + _2579.w) / _2626;
                                float _2690 = 1.0 - dot(vec2(_2685, _2686), vec2(_2685, _2686));
                                float _3598 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
                                float _2691 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
                                float _2692 = _2691 * (((isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0))) * _2668) / ((_2681 * 0.699999988079071044921875) + 1.0));
                                float _2702 = dot(vec3(_337, _340, _343), vec3((-0.0) - (_1926 * _2213), (-0.0) - (_1927 * _2213), (-0.0) - (_1928 * _2213)));
                                float _3609 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
                                float _2710 = (_2676 * dot(vec3(_337, _340, _343), vec3(_2661, _2662, _2663))) + _2675;
                                float _3620 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
                                float _2711 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
                                float _2715 = (0.5 / (((isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) + 9.9999999392252902907785028219223e-09) + _2711)) * _2711;
                                float _3631 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
                                float _2722 = (_2691 * _2668) * (((isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * 3.1415927410125732421875) / ((_2681 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2722 * _2547.x;
                                frontier_phi_73_pred_1 = _2722 * _2547.y;
                                frontier_phi_73_pred_2 = _2692 * _2535.z;
                                frontier_phi_73_pred_3 = _2692 * _2535.y;
                                frontier_phi_73_pred_4 = _2692 * _2535.x;
                                frontier_phi_73_pred_5 = _2722 * _2547.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2726 = frontier_phi_73_pred;
                            _2727 = frontier_phi_73_pred_1;
                            _2731 = frontier_phi_73_pred_2;
                            _2730 = frontier_phi_73_pred_3;
                            _2729 = frontier_phi_73_pred_4;
                            _2728 = frontier_phi_73_pred_5;
                            _2477 = _2729 + _2490;
                            _2478 = _2730 + _2491;
                            _2479 = _2731 + _2492;
                            _2474 = _2726 + _2487;
                            _2475 = _2727 + _2488;
                            _2476 = _2728 + _2489;
                            if (_2494 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2487 = _2474;
                                _2488 = _2475;
                                _2489 = _2476;
                                _2490 = _2477;
                                _2491 = _2478;
                                _2492 = _2479;
                                _2493 = _2494;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2477;
                        frontier_phi_67_pred_1 = _2478;
                        frontier_phi_67_pred_2 = _2479;
                        frontier_phi_67_pred_3 = _2476;
                        frontier_phi_67_pred_4 = _2475;
                        frontier_phi_67_pred_5 = _2474;
                    }
                    _2195 = frontier_phi_67_pred;
                    _2197 = frontier_phi_67_pred_1;
                    _2199 = frontier_phi_67_pred_2;
                    _2193 = frontier_phi_67_pred_3;
                    _2191 = frontier_phi_67_pred_4;
                    _2189 = frontier_phi_67_pred_5;
                    uint _2331 = _2330 + 1u;
                    if (_2331 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2324 = _2189;
                        _2325 = _2191;
                        _2326 = _2193;
                        _2327 = _2195;
                        _2328 = _2197;
                        _2329 = _2199;
                        _2330 = _2331;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2197;
                frontier_phi_55_56_ladder_1 = _2199;
                frontier_phi_55_56_ladder_2 = _2195;
                frontier_phi_55_56_ladder_3 = _2193;
                frontier_phi_55_56_ladder_4 = _2191;
                frontier_phi_55_56_ladder_5 = _2189;
            }
            else
            {
                frontier_phi_55_56_ladder = _2083;
                frontier_phi_55_56_ladder_1 = _2085;
                frontier_phi_55_56_ladder_2 = _2081;
                frontier_phi_55_56_ladder_3 = _2079;
                frontier_phi_55_56_ladder_4 = _2077;
                frontier_phi_55_56_ladder_5 = _2075;
            }
            _2188 = frontier_phi_55_56_ladder_5;
            _2190 = frontier_phi_55_56_ladder_4;
            _2192 = frontier_phi_55_56_ladder_3;
            _2194 = frontier_phi_55_56_ladder_2;
            _2196 = frontier_phi_55_56_ladder;
            _2198 = frontier_phi_55_56_ladder_1;
        }
        float _2203 = isnan(1.0) ? _382 : (isnan(_382) ? 1.0 : min(_382, 1.0));
        _1985 = (_2203 * _2194) + _1545;
        _1987 = (_2203 * _2196) + _1547;
        _1989 = (_2203 * _2198) + _1549;
        _1991 = ((_2188 * 0.039999999105930328369140625) * _2203) + _1797;
        _1993 = ((_2190 * 0.039999999105930328369140625) * _2203) + _1799;
        _1995 = ((_2192 * 0.039999999105930328369140625) * _2203) + _1801;
    }
    else
    {
        _1985 = _1545;
        _1987 = _1547;
        _1989 = _1549;
        _1991 = _1797;
        _1993 = _1799;
        _1995 = _1801;
    }
    float _3647 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _3658 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _3669 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _3680 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _2020 = cbInstanceData._m0[_356 + 6u].w * (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)));
    float _2025 = _315 / cbSceneParam._m0[86u].x;
    float _2026 = _316 / cbSceneParam._m0[86u].y;
    vec4 _2040 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2025, _2026, (log2((isnan(cbSceneParam._m0[77u].w) ? _249 : (isnan(_249) ? cbSceneParam._m0[77u].w : min(_249, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2042 = _2040.x;
    float _2043 = _2040.y;
    float _2044 = _2040.z;
    float _2045 = _2040.w;
    float _2137;
    float _2139;
    float _2141;
    float _2143;
    if (_249 > cbSceneParam._m0[78u].w)
    {
        float _2100 = isnan(_249) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _249 : min(cbSceneParam._m0[80u].w, _249));
        float _2101 = _2100 / _249;
        float _2112 = _2101 * _301;
        float _2113 = _302 * _2101;
        float _2114 = (-0.0) - _2113;
        float _2115 = _2101 * _303;
        float _2117 = (cbSceneParam._m0[77u].w * _2114) / _2100;
        float _2118 = _2117 + cbSceneParam._m0[79u].w;
        float _2119 = cbSceneParam._m0[79u].w - _2113;
        float _2125 = sqrt(((_2112 * _2112) + (_2113 * _2113)) + (_2115 * _2115));
        float _2128 = (1.0 - (cbSceneParam._m0[77u].w / _2100)) * _2125;
        float _2133 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2135 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2286;
        if (abs((_2114 - _2117) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2286 = ((((_2118 > 0.0) ? exp2(_2133 * _2118) : (2.0 - exp2(_2135 * _2118))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2128;
        }
        else
        {
            float _2246 = 1.0 / cbSceneParam._m0[80u].x;
            float _2247 = isnan(_2119) ? _2118 : (isnan(_2118) ? _2119 : max(_2118, _2119));
            float _2248 = isnan(_2119) ? _2118 : (isnan(_2118) ? _2119 : min(_2118, _2119));
            float _2257 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : min(_2247, 0.0));
            float _2258 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : min(_2248, 0.0));
            _2286 = ((abs(_2125 / _2114) * cbSceneParam._m0[80u].y) * ((((_2257 - _2258) * 2.0) - ((exp2(_2133 * (isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0)))) - exp2(_2133 * (isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0))))) * _2246)) - ((exp2(_2135 * _2257) - exp2(_2135 * _2258)) * _2246))) + (_2128 * cbSceneParam._m0[80u].z);
        }
        vec4 _2288 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2025, _2026, 1.0), 0.0);
        float _2297 = exp2((_2286 * (-1.44269502162933349609375)) * (1.0 - _2288.w));
        float _2298 = log2(_2297);
        float _2314 = log2(_2045);
        _2137 = (exp2(_2314 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2298 * cbSceneParam._m0[78u].x)) * _2288.x) / cbSceneParam._m0[78u].x)) + _2042;
        _2139 = (exp2(_2314 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2298 * cbSceneParam._m0[78u].y)) * _2288.y) / cbSceneParam._m0[78u].y)) + _2043;
        _2141 = (exp2(_2314 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2298 * cbSceneParam._m0[78u].z)) * _2288.z) / cbSceneParam._m0[78u].z)) + _2044;
        _2143 = _2297 * _2045;
    }
    else
    {
        _2137 = _2042;
        _2139 = _2043;
        _2141 = _2044;
        _2143 = _2045;
    }
    float _2155 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2156 = _2155 == 3.0;
    float _2158 = log2(_2143);
    float _2165 = exp2(_2158 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1985 + ((isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0))) * _382))) + ((_1991 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _1161)) * cbPerFrame._m0[3u].x));
    float _2166 = exp2(_2158 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * (_1987 + ((isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0))) * _382))) + ((_1993 + ((isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))) * _1161)) * cbPerFrame._m0[3u].x));
    float _2167 = exp2(_2158 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (_1989 + ((isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0))) * _382))) + ((_1995 + ((isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))) * _1161)) * cbPerFrame._m0[3u].x));
    float _2176 = (_2155 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2176 * (_2156 ? _2165 : (_2165 + (cbSceneParam._m0[72u].w * _2137)));
    SV_Target.y = _2176 * (_2156 ? _2166 : (_2166 + (cbSceneParam._m0[72u].w * _2139)));
    SV_Target.z = _2176 * (_2156 ? _2167 : (_2167 + (cbSceneParam._m0[72u].w * _2141)));
    SV_Target.w = _2020;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2020;
}


