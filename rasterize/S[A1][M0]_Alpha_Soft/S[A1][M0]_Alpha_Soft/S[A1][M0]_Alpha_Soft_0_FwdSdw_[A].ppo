#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Alpha_Soft_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _779;
float _3228;
float _3229;
float _3230;
float _3231;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _170 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _171 = _170 * NORMAL.x;
    float _172 = _170 * NORMAL.y;
    float _173 = _170 * NORMAL.z;
    vec4 _193 = texture(sampler2D(S_A1_M0_Alpha_Soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _199 = _193.w;
    float _200 = _193.x * cbMtdParam._m0[9u].x;
    float _201 = _193.y * cbMtdParam._m0[9u].y;
    float _202 = _193.z * cbMtdParam._m0[9u].z;
    vec4 _215 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _217 = _215.x;
    bool _224 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _241 = ((_224 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _217)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _217))) - POSITION_1.w) / cbMtdParam._m0[11u].x;
    float _3240 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _245 = (_199 * TEXCOORD_1.z) * (isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0)));
    float _249 = inversesqrt(dot(vec3(_171, _172, _173), vec3(_171, _172, _173)));
    float _250 = _249 * _171;
    float _251 = _249 * _172;
    float _252 = _249 * _173;
    float _3251 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _253 = isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0));
    float _3262 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _3273 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _3284 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _261 = _224 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _303 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _313 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _303);
    float _314 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _303);
    float _315 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _303);
    float _319 = inversesqrt(dot(vec3(_313, _314, _315), vec3(_313, _314, _315)));
    float _320 = _313 * _319;
    float _321 = _314 * _319;
    float _322 = _315 * _319;
    vec4 _327 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _329 = _327.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _458 = sqrt(((_313 * _313) + (_314 * _314)) + (_315 * _315));
        float _464 = (cbMatDynParam._m0[5u].x * _458) + cbMatDynParam._m0[5u].y;
        float _3295 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
        float _465 = isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0));
        float _469 = (cbMatDynParam._m0[5u].z * _458) + cbMatDynParam._m0[5u].w;
        float _3306 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0))) - _465)) + _465) < ((_329 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _340 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _341 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _361 = fma(_252, cbSceneParam._m0[5u].z, fma(_251, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _250));
    float _364 = fma(_252, cbSceneParam._m0[6u].z, fma(_251, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _250));
    float _367 = fma(_252, cbSceneParam._m0[7u].z, fma(_251, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _250));
    uint _380 = uint(roundEven(NORMAL.w)) * 13u;
    uint _382 = _380 + 9u;
    uint _383 = _382 + uint(cbMatDynParam._m0[0u].w);
    float _389 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0)))) * cbInstanceData._m0[_383].x;
    float _390 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0)))) * cbInstanceData._m0[_383].y;
    float _391 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0)))) * cbInstanceData._m0[_383].z;
    float _3317 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _392 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
    float _3328 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _393 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
    float _3339 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _394 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
    vec4 _403 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _340, cbSceneParam._m0[86u].y * _341));
    float _406 = _403.x * TEXCOORD_1.w;
    float _407 = dot(vec3(_250, _251, _252), vec3(_320, _321, _322));
    float _410 = _407 * 2.0;
    float _415 = (_410 * _250) - _320;
    float _416 = (_410 * _251) - _321;
    float _417 = (_410 * _252) - _322;
    float _439 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _443 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _447 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _778;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    float _788;
    float _789;
    float _790;
    float _791;
    float _792;
    float _793;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _503 = fma(_447, cbModelParam._m0[26u].z, fma(_443, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _439));
        float _507 = fma(_447, cbModelParam._m0[27u].z, fma(_443, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _439));
        float _511 = fma(_447, cbModelParam._m0[28u].z, fma(_443, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _439));
        float _536 = _439 + _250;
        float _537 = _443 + _251;
        float _538 = _447 + _252;
        float _548 = fma(_538, cbModelParam._m0[26u].z, fma(_537, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _536)) - _503;
        float _549 = fma(_538, cbModelParam._m0[27u].z, fma(_537, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _536)) - _507;
        float _550 = fma(_538, cbModelParam._m0[28u].z, fma(_537, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _536)) - _511;
        float _554 = inversesqrt(dot(vec3(_548, _549, _550), vec3(_548, _549, _550)));
        float _567 = ((_554 * _548) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_503 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _568 = ((_554 * _549) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_507 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _569 = ((_554 * _550) / cbModelParam._m0[34u].z) + ((((((_511 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _572 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_567, _568, _569), 0.0);
        vec4 _579 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_567, _568, _569), 0.0);
        vec4 _586 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_567, _568, _569), 0.0);
        vec4 _593 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_567, _568, _569), 0.0);
        float _606 = exp2((_572.w + (-0.5)) * 20.0) * 2.0;
        float _607 = _606 * (_572.x + (-0.5));
        float _608 = _606 * (_572.y + (-0.5));
        float _609 = _606 * (_572.z + (-0.5));
        float _616 = exp2((_579.w + (-0.5)) * 20.0) * 2.0;
        float _617 = _616 * (_579.x + (-0.5));
        float _618 = _616 * (_579.y + (-0.5));
        float _619 = _616 * (_579.z + (-0.5));
        float _626 = exp2((_586.w + (-0.5)) * 20.0) * 2.0;
        float _627 = _626 * (_586.x + (-0.5));
        float _628 = _626 * (_586.y + (-0.5));
        float _629 = _626 * (_586.z + (-0.5));
        float _636 = exp2((_593.w + (-0.5)) * 20.0) * 2.0;
        float _637 = _636 * (_593.x + (-0.5));
        float _638 = _636 * (_593.y + (-0.5));
        float _639 = _636 * (_593.z + (-0.5));
        float _640 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
        float _641 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
        float _642 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
        float _643 = _607 * 0.5;
        float _644 = _617 * 0.5;
        float _645 = _627 * 0.5;
        float _646 = dot(vec3(_643, _644, _645), vec3(_643, _644, _645));
        float _651 = (_646 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_646);
        float _660 = (dot(vec3(_250, _251, _252), vec3(_651 * _643, _651 * _644, _651 * _645)) + 1.0) * 0.5;
        float _3365 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        float _670 = sqrt(((_644 * _644) + (_643 * _643)) + (_645 * _645)) / (_640 + 9.9999997473787516355514526367188e-06);
        float _3376 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _671 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
        float _672 = _671 * 2.0;
        float _676 = (1.0 - _671) / (_671 + 1.0);
        float _3387 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
        float _677 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
        float _686 = ((((1.0 - _677) * (_672 + 2.0)) * exp2(log2(isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0))) * (_672 + 1.0))) + _677) * _640;
        float _687 = _608 * 0.5;
        float _688 = _618 * 0.5;
        float _689 = _628 * 0.5;
        float _690 = dot(vec3(_687, _688, _689), vec3(_687, _688, _689));
        float _695 = (_690 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_690);
        float _703 = (dot(vec3(_250, _251, _252), vec3(_695 * _687, _695 * _688, _695 * _689)) + 1.0) * 0.5;
        float _3398 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _712 = sqrt(((_688 * _688) + (_687 * _687)) + (_689 * _689)) / (_641 + 9.9999997473787516355514526367188e-06);
        float _3409 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _713 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _714 = _713 * 2.0;
        float _718 = (1.0 - _713) / (_713 + 1.0);
        float _3420 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _719 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _728 = ((((1.0 - _719) * (_714 + 2.0)) * exp2(log2(isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0))) * (_714 + 1.0))) + _719) * _641;
        float _729 = _609 * 0.5;
        float _730 = _619 * 0.5;
        float _731 = _629 * 0.5;
        float _732 = dot(vec3(_729, _730, _731), vec3(_729, _730, _731));
        float _737 = (_732 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_732);
        float _745 = (dot(vec3(_250, _251, _252), vec3(_737 * _729, _737 * _730, _737 * _731)) + 1.0) * 0.5;
        float _3431 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _754 = sqrt(((_730 * _730) + (_729 * _729)) + (_731 * _731)) / (_642 + 9.9999997473787516355514526367188e-06);
        float _3442 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
        float _756 = _755 * 2.0;
        float _760 = (1.0 - _755) / (_755 + 1.0);
        float _3453 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _770 = ((((1.0 - _761) * (_756 + 2.0)) * exp2(log2(isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) * (_756 + 1.0))) + _761) * _642;
        _778 = _609;
        _780 = _608;
        _781 = _607;
        _782 = _619;
        _783 = _618;
        _784 = _617;
        _785 = _629;
        _786 = _628;
        _787 = _627;
        _788 = _642;
        _789 = _641;
        _790 = _640;
        _791 = cbModelParam._m0[36u].z * (isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0)));
        _792 = cbModelParam._m0[36u].z * (isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0)));
        _793 = cbModelParam._m0[36u].z * (isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0)));
    }
    else
    {
        _778 = _779;
        _780 = _779;
        _781 = _779;
        _782 = _779;
        _783 = _779;
        _784 = _779;
        _785 = _779;
        _786 = _779;
        _787 = _779;
        _788 = _779;
        _789 = _779;
        _790 = _779;
        _791 = 0.0;
        _792 = 0.0;
        _793 = 0.0;
    }
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _822 = fma(_447, cbModelParam._m0[30u].z, fma(_443, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _439));
        float _826 = fma(_447, cbModelParam._m0[31u].z, fma(_443, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _439));
        float _830 = fma(_447, cbModelParam._m0[32u].z, fma(_443, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _439));
        float _853 = _439 + _250;
        float _854 = _443 + _251;
        float _855 = _447 + _252;
        float _865 = fma(_855, cbModelParam._m0[30u].z, fma(_854, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _853)) - _822;
        float _866 = fma(_855, cbModelParam._m0[31u].z, fma(_854, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _853)) - _826;
        float _867 = fma(_855, cbModelParam._m0[32u].z, fma(_854, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _853)) - _830;
        float _871 = inversesqrt(dot(vec3(_865, _866, _867), vec3(_865, _866, _867)));
        float _884 = ((_871 * _865) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_822 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _885 = ((_871 * _866) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_826 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _886 = ((_871 * _867) / cbModelParam._m0[35u].z) + ((((((_830 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        float _921 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_888.x + (-0.5));
        float _923 = _921 * (_888.y + (-0.5));
        float _924 = _921 * (_888.z + (-0.5));
        float _931 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_895.x + (-0.5));
        float _933 = _931 * (_895.y + (-0.5));
        float _934 = _931 * (_895.z + (-0.5));
        float _941 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_902.x + (-0.5));
        float _943 = _941 * (_902.y + (-0.5));
        float _944 = _941 * (_902.z + (-0.5));
        float _951 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_909.x + (-0.5));
        float _953 = _951 * (_909.y + (-0.5));
        float _954 = _951 * (_909.z + (-0.5));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = _922 * 0.5;
        float _959 = _932 * 0.5;
        float _960 = _942 * 0.5;
        float _961 = dot(vec3(_958, _959, _960), vec3(_958, _959, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _974 = (dot(vec3(_250, _251, _252), vec3(_966 * _958, _966 * _959, _966 * _960)) + 1.0) * 0.5;
        float _3494 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _983 = sqrt(((_959 * _959) + (_958 * _958)) + (_960 * _960)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3505 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _985 = _984 * 2.0;
        float _989 = (1.0 - _984) / (_984 + 1.0);
        float _3516 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _999 = ((((1.0 - _990) * (_985 + 2.0)) * exp2(log2(isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * (_985 + 1.0))) + _990) * _955;
        float _1000 = _923 * 0.5;
        float _1001 = _933 * 0.5;
        float _1002 = _943 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1016 = (dot(vec3(_250, _251, _252), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3527 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1025 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3538 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3549 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))) * (_1027 + 1.0))) + _1032) * _956;
        float _1042 = _924 * 0.5;
        float _1043 = _934 * 0.5;
        float _1044 = _944 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1058 = (dot(vec3(_250, _251, _252), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _3560 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1067 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3571 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _3582 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * (_1069 + 1.0))) + _1074) * _957;
        _1091 = _924;
        _1092 = _923;
        _1093 = _922;
        _1094 = _934;
        _1095 = _933;
        _1096 = _932;
        _1097 = _944;
        _1098 = _943;
        _1099 = _942;
        _1100 = _957;
        _1101 = _956;
        _1102 = _955;
        _1103 = cbModelParam._m0[36u].w * (isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0)));
        _1104 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
        _1105 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
    }
    else
    {
        _1091 = _779;
        _1092 = _779;
        _1093 = _779;
        _1094 = _779;
        _1095 = _779;
        _1096 = _779;
        _1097 = _779;
        _1098 = _779;
        _1099 = _779;
        _1100 = _779;
        _1101 = _779;
        _1102 = _779;
        _1103 = 0.0;
        _1104 = 0.0;
        _1105 = 0.0;
    }
    float _1115 = (cbModelParam._m0[1u].x * (_1103 - _791)) + _791;
    float _1116 = (cbModelParam._m0[1u].x * (_1104 - _792)) + _792;
    float _1117 = (cbModelParam._m0[1u].x * (_1105 - _793)) + _793;
    float _1138 = fma(_1117, cbSceneParam._m0[89u].z, fma(_1116, cbSceneParam._m0[89u].y, _1115 * cbSceneParam._m0[89u].x));
    float _1141 = fma(_1117, cbSceneParam._m0[90u].z, fma(_1116, cbSceneParam._m0[90u].y, _1115 * cbSceneParam._m0[90u].x));
    float _1144 = fma(_1117, cbSceneParam._m0[91u].z, fma(_1116, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1115));
    float _1159 = _415 * 0.5;
    float _1160 = _416 * 0.5;
    float _1161 = _417 * 0.5;
    float _1162 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_1093, _1096, _1099, _1102));
    float _1165 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_1092, _1095, _1098, _1101));
    float _1168 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_1091, _1094, _1097, _1100));
    float _1202;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1175 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_778, _782, _785, _788));
        float _1179 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_780, _783, _786, _789));
        float _1183 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_781, _784, _787, _790));
        float _1190 = dot(vec4(cbModelParam._m0[39u]), vec4(_1159, _1160, _1161, 1.0));
        _1202 = dot(vec3(isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)), isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)), isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1190) ? 0.0 : (isnan(0.0) ? _1190 : max(0.0, _1190))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1202 = 1.0;
    }
    float _1213;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1204 = dot(vec4(cbModelParam._m0[40u]), vec4(_1159, _1160, _1161, 1.0));
        _1213 = dot(vec3(isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)), isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)), isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1204) ? 0.0 : (isnan(0.0) ? _1204 : max(0.0, _1204))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1213 = 1.0;
    }
    float _1217 = (_1213 * cbModelParam._m0[1u].x) + (_1202 * (1.0 - cbModelParam._m0[1u].x));
    float _1226 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1308;
    float _1310;
    float _1312;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1275 = fma(_447, cbModelParam._m0[13u].z, fma(_443, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _439)) + cbModelParam._m0[13u].w;
        float _1279 = fma(_447, cbModelParam._m0[14u].z, fma(_443, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _439)) + cbModelParam._m0[14u].w;
        float _1283 = fma(_447, cbModelParam._m0[15u].z, fma(_443, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _439)) + cbModelParam._m0[15u].w;
        float _1286 = fma(_417, cbModelParam._m0[13u].z, fma(_416, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _415));
        float _1289 = fma(_417, cbModelParam._m0[14u].z, fma(_416, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _415));
        float _1292 = fma(_417, cbModelParam._m0[15u].z, fma(_416, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _415));
        float _1318;
        if (_1286 > 0.0)
        {
            _1318 = abs((1.0 - _1275) / _1286);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1286 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1275 + 1.0) / _1286);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1318 = frontier_phi_17_15_ladder;
        }
        float _1492;
        if (_1289 > 0.0)
        {
            _1492 = abs((1.0 - _1279) / _1289);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1289 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1279 + 1.0) / _1289);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1492 = frontier_phi_26_22_ladder;
        }
        float _1789;
        if (_1292 > 0.0)
        {
            _1789 = abs((1.0 - _1283) / _1292);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1292 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1283 + 1.0) / _1292);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1789 = frontier_phi_38_33_ladder;
        }
        float _1791 = isnan(_1492) ? _1318 : (isnan(_1318) ? _1492 : min(_1318, _1492));
        float _1792 = isnan(_1789) ? _1791 : (isnan(_1791) ? _1789 : min(_1791, _1789));
        float _1796 = (_1792 * _1286) + _1275;
        float _1797 = (_1792 * _1289) + _1279;
        float _1798 = (_1792 * _1292) + _1283;
        float _1799 = _1792 * 9.9999997473787516355514526367188e-05;
        float _1801 = (-1.0) - _1799;
        float _1803 = _1799 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1798 > _1803) || ((_1798 < _1801) || ((_1797 > _1803) || ((_1797 < _1801) || ((_1796 < _1801) || (_1796 > _1803))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1943 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1798, cbModelParam._m0[9u].z, fma(_1797, cbModelParam._m0[9u].y, _1796 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1798, cbModelParam._m0[10u].z, fma(_1797, cbModelParam._m0[10u].y, _1796 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1798, cbModelParam._m0[11u].z, fma(_1797, cbModelParam._m0[11u].y, _1796 * cbModelParam._m0[11u].x))), _1226);
            frontier_phi_16_38_ladder = _1943.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1943.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1943.x * cbModelParam._m0[1u].y;
        }
        _1308 = frontier_phi_16_38_ladder_2;
        _1310 = frontier_phi_16_38_ladder_1;
        _1312 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1296 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_415, _416, _417), _1226);
        _1308 = _1296.x * cbModelParam._m0[1u].y;
        _1310 = _1296.y * cbModelParam._m0[1u].y;
        _1312 = _1296.z * cbModelParam._m0[1u].y;
    }
    float _1315 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1408;
    float _1410;
    float _1412;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1372 = fma(_447, cbModelParam._m0[21u].z, fma(_443, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _439)) + cbModelParam._m0[21u].w;
        float _1376 = fma(_447, cbModelParam._m0[22u].z, fma(_443, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _439)) + cbModelParam._m0[22u].w;
        float _1380 = fma(_447, cbModelParam._m0[23u].z, fma(_443, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _439)) + cbModelParam._m0[23u].w;
        float _1383 = fma(_417, cbModelParam._m0[21u].z, fma(_416, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _415));
        float _1386 = fma(_417, cbModelParam._m0[22u].z, fma(_416, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _415));
        float _1389 = fma(_417, cbModelParam._m0[23u].z, fma(_416, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _415));
        float _1497;
        if (_1383 > 0.0)
        {
            _1497 = abs((1.0 - _1372) / _1383);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1383 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1372 + 1.0) / _1383);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1497 = frontier_phi_28_24_ladder;
        }
        float _1816;
        if (_1386 > 0.0)
        {
            _1816 = abs((1.0 - _1376) / _1386);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1386 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1376 + 1.0) / _1386);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1816 = frontier_phi_40_35_ladder;
        }
        float _2089;
        if (_1389 > 0.0)
        {
            _2089 = abs((1.0 - _1380) / _1389);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1389 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1380 + 1.0) / _1389);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2089 = frontier_phi_50_47_ladder;
        }
        float _2091 = isnan(_1816) ? _1497 : (isnan(_1497) ? _1816 : min(_1497, _1816));
        float _2092 = isnan(_2089) ? _2091 : (isnan(_2091) ? _2089 : min(_2091, _2089));
        float _2096 = (_2092 * _1383) + _1372;
        float _2097 = (_2092 * _1386) + _1376;
        float _2098 = (_2092 * _1389) + _1380;
        float _2099 = _2092 * 9.9999997473787516355514526367188e-05;
        float _2100 = (-1.0) - _2099;
        float _2102 = _2099 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2098 > _2102) || ((_2098 < _2100) || ((_2097 > _2102) || ((_2097 < _2100) || ((_2096 < _2100) || (_2096 > _2102))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2189 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2098, cbModelParam._m0[17u].z, fma(_2097, cbModelParam._m0[17u].y, _2096 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2098, cbModelParam._m0[18u].z, fma(_2097, cbModelParam._m0[18u].y, _2096 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2098, cbModelParam._m0[19u].z, fma(_2097, cbModelParam._m0[19u].y, _2096 * cbModelParam._m0[19u].x))), _1315);
            frontier_phi_25_50_ladder = _2189.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2189.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2189.x * cbModelParam._m0[1u].z;
        }
        _1408 = frontier_phi_25_50_ladder_2;
        _1410 = frontier_phi_25_50_ladder_1;
        _1412 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1392 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_415, _416, _417), _1315);
        _1408 = _1392.x * cbModelParam._m0[1u].z;
        _1410 = _1392.y * cbModelParam._m0[1u].z;
        _1412 = _1392.z * cbModelParam._m0[1u].z;
    }
    float _1424 = _406 * 0.01200000010430812835693359375;
    float _1426 = _1424 * ((cbModelParam._m0[1u].w * (_1408 - _1308)) + _1308);
    float _1427 = _1424 * ((cbModelParam._m0[1u].w * (_1410 - _1310)) + _1310);
    float _1428 = _1424 * ((cbModelParam._m0[1u].w * (_1412 - _1312)) + _1312);
    float _1431 = fma(_1428, cbSceneParam._m0[89u].z, fma(_1427, cbSceneParam._m0[89u].y, _1426 * cbSceneParam._m0[89u].x));
    float _1434 = fma(_1428, cbSceneParam._m0[90u].z, fma(_1427, cbSceneParam._m0[90u].y, _1426 * cbSceneParam._m0[90u].x));
    float _1437 = fma(_1428, cbSceneParam._m0[91u].z, fma(_1427, cbSceneParam._m0[91u].y, _1426 * cbSceneParam._m0[91u].x));
    float _1471 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1475 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1479 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1483 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1484 = _1471 / _1483;
    float _1485 = _1475 / _1483;
    float _1486 = _1479 / _1483;
    float _1633;
    float _1634;
    float _1635;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1513 = ((uint(_1486 > cbSceneParam._m0[59u].y) + uint(_1486 > cbSceneParam._m0[59u].x)) + uint(_1486 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1514 = _1513 + 43u;
        uint _1522 = _1513 + 44u;
        uint _1530 = _1513 + 45u;
        uint _1538 = _1513 + 46u;
        float _1549 = fma(_1483, cbSceneParam._m0[_1514].w, fma(_1479, cbSceneParam._m0[_1514].z, fma(_1475, cbSceneParam._m0[_1514].y, _1471 * cbSceneParam._m0[_1514].x)));
        float _1553 = fma(_1483, cbSceneParam._m0[_1522].w, fma(_1479, cbSceneParam._m0[_1522].z, fma(_1475, cbSceneParam._m0[_1522].y, _1471 * cbSceneParam._m0[_1522].x)));
        float _1561 = fma(_1483, cbSceneParam._m0[_1538].w, fma(_1479, cbSceneParam._m0[_1538].z, fma(_1475, cbSceneParam._m0[_1538].y, _1471 * cbSceneParam._m0[_1538].x)));
        float _1566 = cbSceneParam._m0[33u].z * _1561;
        float _1568 = cbSceneParam._m0[33u].w * _1561;
        float _1571 = fma(_1483, cbSceneParam._m0[_1530].w, fma(_1479, cbSceneParam._m0[_1530].z, fma(_1475, cbSceneParam._m0[_1530].y, _1471 * cbSceneParam._m0[_1530].x))) / _1561;
        float _1619 = (cbSceneParam._m0[33u].x - sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486))) * cbSceneParam._m0[33u].y;
        float _3708 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1626 = (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1566 + _1549) / _1561, (_1568 + _1553) / _1561), _1571), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1568 + _1549) / _1561, (_1553 - _1566) / _1561), _1571), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1549 - _1566) / _1561, (_1553 - _1568) / _1561), _1571), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1549 - _1568) / _1561, (_1566 + _1553) / _1561), _1571), 0.0)).x), vec4(0.25)));
        _1633 = 1.0 - (_1626 * cbSceneParam._m0[34u].x);
        _1634 = 1.0 - (_1626 * cbSceneParam._m0[34u].y);
        _1635 = 1.0 - (_1626 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1633 = 1.0;
        _1634 = 1.0;
        _1635 = 1.0;
    }
    float _1699;
    float _1701;
    float _1703;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1687 = fma(_1483, cbSceneParam._m0[63u].w, fma(_1479, cbSceneParam._m0[63u].z, fma(_1475, cbSceneParam._m0[63u].y, _1471 * cbSceneParam._m0[63u].x)));
        float _1688 = fma(_1483, cbSceneParam._m0[60u].w, fma(_1479, cbSceneParam._m0[60u].z, fma(_1475, cbSceneParam._m0[60u].y, _1471 * cbSceneParam._m0[60u].x))) / _1687;
        float _1689 = fma(_1483, cbSceneParam._m0[61u].w, fma(_1479, cbSceneParam._m0[61u].z, fma(_1475, cbSceneParam._m0[61u].y, _1471 * cbSceneParam._m0[61u].x))) / _1687;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1688 >= cbSceneParam._m0[64u].x) && (_1689 >= cbSceneParam._m0[64u].y)) && (_1688 <= cbSceneParam._m0[64u].z)) && (_1689 <= cbSceneParam._m0[64u].w))
        {
            float _1829 = fma(_1483, cbSceneParam._m0[62u].w, fma(_1479, cbSceneParam._m0[62u].z, fma(_1475, cbSceneParam._m0[62u].y, _1471 * cbSceneParam._m0[62u].x))) / _1687;
            float _1833 = isnan(cbSceneParam._m0[41u].w) ? _1829 : (isnan(_1829) ? cbSceneParam._m0[41u].w : max(_1829, cbSceneParam._m0[41u].w));
            float _1876 = (cbSceneParam._m0[33u].x - sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486))) * cbSceneParam._m0[33u].y;
            float _3724 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
            float _1883 = (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1688, cbSceneParam._m0[33u].w + _1689), _1833), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1688, _1689 - cbSceneParam._m0[33u].z), _1833), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1688 - cbSceneParam._m0[33u].z, _1689 - cbSceneParam._m0[33u].w), _1833), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1688 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1689), _1833), 0.0)).x), vec4(0.25)));
            float _1887 = 1.0 - (_1883 * cbSceneParam._m0[34u].x);
            float _1888 = 1.0 - (_1883 * cbSceneParam._m0[34u].y);
            float _1889 = 1.0 - (_1883 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1889) ? _1635 : (isnan(_1635) ? _1889 : min(_1635, _1889));
            frontier_phi_37_36_ladder_1 = isnan(_1888) ? _1634 : (isnan(_1634) ? _1888 : min(_1634, _1888));
            frontier_phi_37_36_ladder_2 = isnan(_1887) ? _1633 : (isnan(_1633) ? _1887 : min(_1633, _1887));
        }
        else
        {
            frontier_phi_37_36_ladder = _1635;
            frontier_phi_37_36_ladder_1 = _1634;
            frontier_phi_37_36_ladder_2 = _1633;
        }
        _1699 = frontier_phi_37_36_ladder_2;
        _1701 = frontier_phi_37_36_ladder_1;
        _1703 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1699 = _1633;
        _1701 = _1634;
        _1703 = _1635;
    }
    uvec4 _1708 = floatBitsToUint(cbInstanceData._m0[_380 + 5u]);
    uint _1710 = _1708.x * 14u;
    uint _1711 = _1710 + 13u;
    float _1718 = _406 + (-1.0);
    float _1724 = (cbLight._m0[_1711].x * _1718) + 1.0;
    float _1725 = (cbLight._m0[_1711].y * _1718) + 1.0;
    float _1726 = (cbLight._m0[_1711].z * _1718) + 1.0;
    float _1727 = (cbLight._m0[_1711].w * _1718) + 1.0;
    uint _1728 = _1710 + 5u;
    float _1734 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
    uint _1738 = _1710 + 4u;
    float _1748 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
    uint _1752 = _1710 | 1u;
    float _1763 = dot(vec3(cbLight._m0[_1710].xyz), vec3(_250, _251, _252));
    float _1766 = dot(vec3(cbLight._m0[_1752].xyz), vec3(_250, _251, _252));
    float _3760 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _3771 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1771 = (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * 0.3183098733425140380859375;
    float _1773 = (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * 0.3183098733425140380859375;
    float _1780 = ((cbLight._m0[_1728].x * _1734) * _1773) + (((cbLight._m0[_1738].x * _1699) * _1748) * _1771);
    float _1781 = ((_1734 * cbLight._m0[_1728].y) * _1773) + (((cbLight._m0[_1738].y * _1701) * _1748) * _1771);
    float _1782 = ((_1734 * cbLight._m0[_1728].z) * _1773) + (((cbLight._m0[_1738].z * _1703) * _1748) * _1771);
    uvec4 _1786 = floatBitsToUint(cbLight._m0[_1710 + 12u]);
    bool _1788 = _1786.x == 0u;
    float _1890;
    float _1892;
    float _1894;
    if (_1788)
    {
        _1890 = _1780;
        _1892 = _1781;
        _1894 = _1782;
    }
    else
    {
        uint _1898 = _1710 + 6u;
        float _1914 = (dot(vec3(cbLight._m0[_1710 + 2u].xyz), vec3(_250, _251, _252)) * 0.5) + 0.5;
        float _1915 = _1914 * _1914;
        float _3782 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
        float _1916 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1917 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
        _1890 = (((cbLight._m0[_1898].x * 0.3183098733425140380859375) * _1916) * _1917) + _1780;
        _1892 = (((cbLight._m0[_1898].y * 0.3183098733425140380859375) * _1916) * _1917) + _1781;
        _1894 = (((cbLight._m0[_1898].z * 0.3183098733425140380859375) * _1916) * _1917) + _1782;
    }
    bool _1897 = _1786.y == 0u;
    float _1952;
    float _1954;
    float _1956;
    if (_1897)
    {
        _1952 = _1890;
        _1954 = _1892;
        _1956 = _1894;
    }
    else
    {
        uint _2060 = _1710 + 7u;
        float _2076 = (dot(vec3(cbLight._m0[_1710 + 3u].xyz), vec3(_250, _251, _252)) * 0.5) + 0.5;
        float _2077 = _2076 * _2076;
        float _3798 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2078 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _2079 = isnan(1.0) ? _1727 : (isnan(_1727) ? 1.0 : min(_1727, 1.0));
        _1952 = (((cbLight._m0[_2060].x * 0.3183098733425140380859375) * _2078) * _2079) + _1890;
        _1954 = (((cbLight._m0[_2060].y * 0.3183098733425140380859375) * _2078) * _2079) + _1892;
        _1956 = (((cbLight._m0[_2060].z * 0.3183098733425140380859375) * _2078) * _2079) + _1894;
    }
    uint _1958 = _1710 + 8u;
    float _1964 = cbLight._m0[_1710].x + _320;
    float _1965 = cbLight._m0[_1710].y + _321;
    float _1966 = cbLight._m0[_1710].z + _322;
    float _1970 = inversesqrt(dot(vec3(_1964, _1965, _1966), vec3(_1964, _1965, _1966)));
    float _1974 = dot(vec3(_250, _251, _252), vec3(cbLight._m0[_1710].xyz));
    float _3814 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1977 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _3825 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _1978 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _1979 = dot(vec3(cbLight._m0[_1710].xyz), vec3(_1964 * _1970, _1965 * _1970, _1966 * _1970));
    float _3836 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1990 = (exp2(log2(1.0 - (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1996 = (0.5 / ((_1977 + 9.9999999392252902907785028219223e-09) + _1978)) * _1977;
    float _3847 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1998 = (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * 0.31831014156341552734375;
    uint _2012 = _1710 + 9u;
    float _2018 = cbLight._m0[_1752].x + _320;
    float _2019 = cbLight._m0[_1752].y + _321;
    float _2020 = cbLight._m0[_1752].z + _322;
    float _2024 = inversesqrt(dot(vec3(_2018, _2019, _2020), vec3(_2018, _2019, _2020)));
    float _2028 = dot(vec3(_250, _251, _252), vec3(cbLight._m0[_1752].xyz));
    float _3858 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2031 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _2032 = dot(vec3(cbLight._m0[_1752].xyz), vec3(_2018 * _2024, _2019 * _2024, _2020 * _2024));
    float _3869 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2041 = (exp2(log2(1.0 - (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2045 = (0.5 / ((_2031 + 9.9999999392252902907785028219223e-09) + _1978)) * _2031;
    float _3880 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2047 = (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * 0.31831014156341552734375;
    float _2057 = (((_2041 * cbLight._m0[_2012].x) * _2047) * _1734) + ((((cbLight._m0[_1958].x * _1699) * _1990) * _1998) * _1748);
    float _2058 = (((_2041 * cbLight._m0[_2012].y) * _2047) * _1734) + ((((cbLight._m0[_1958].y * _1701) * _1990) * _1998) * _1748);
    float _2059 = (((_2041 * cbLight._m0[_2012].z) * _2047) * _1734) + ((((cbLight._m0[_1958].z * _1703) * _1990) * _1998) * _1748);
    float _2115;
    float _2117;
    float _2119;
    if (_1788)
    {
        _2115 = _2057;
        _2117 = _2058;
        _2119 = _2059;
    }
    else
    {
        uint _2121 = _1710 + 10u;
        uint _2127 = _1710 + 2u;
        float _2133 = cbLight._m0[_2127].x + _320;
        float _2134 = cbLight._m0[_2127].y + _321;
        float _2135 = cbLight._m0[_2127].z + _322;
        float _2139 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
        float _2143 = dot(vec3(_250, _251, _252), vec3(cbLight._m0[_2127].xyz));
        float _3891 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2146 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _2147 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_2133 * _2139, _2134 * _2139, _2135 * _2139));
        float _3902 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2156 = (exp2(log2(1.0 - (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2160 = (0.5 / ((_2146 + 9.9999999392252902907785028219223e-09) + _1978)) * _2146;
        float _3913 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2162 = (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * 0.31831014156341552734375;
        float _2163 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
        _2115 = (((_2156 * cbLight._m0[_2121].x) * _2162) * _2163) + _2057;
        _2117 = (((_2156 * cbLight._m0[_2121].y) * _2162) * _2163) + _2058;
        _2119 = (((_2156 * cbLight._m0[_2121].z) * _2162) * _2163) + _2059;
    }
    float _2194;
    float _2196;
    float _2198;
    if (_1897)
    {
        _2194 = _2115;
        _2196 = _2117;
        _2198 = _2119;
    }
    else
    {
        uint _2205 = _1710 + 11u;
        uint _2211 = _1710 + 3u;
        float _2217 = cbLight._m0[_2211].x + _320;
        float _2218 = cbLight._m0[_2211].y + _321;
        float _2219 = cbLight._m0[_2211].z + _322;
        float _2223 = inversesqrt(dot(vec3(_2217, _2218, _2219), vec3(_2217, _2218, _2219)));
        float _2227 = dot(vec3(_250, _251, _252), vec3(cbLight._m0[_2211].xyz));
        float _3929 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2230 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _2231 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_2217 * _2223, _2218 * _2223, _2219 * _2223));
        float _3940 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2240 = (exp2(log2(1.0 - (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2244 = (0.5 / ((_2230 + 9.9999999392252902907785028219223e-09) + _1978)) * _2230;
        float _3951 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2246 = (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * 0.31831014156341552734375;
        float _2247 = isnan(1.0) ? _1727 : (isnan(_1727) ? 1.0 : min(_1727, 1.0));
        _2194 = (((_2240 * cbLight._m0[_2205].x) * _2246) * _2247) + _2115;
        _2196 = (((_2240 * cbLight._m0[_2205].y) * _2246) * _2247) + _2117;
        _2198 = (((_2240 * cbLight._m0[_2205].z) * _2246) * _2247) + _2119;
    }
    float _2313;
    float _2315;
    float _2317;
    float _2319;
    float _2321;
    float _2323;
    if (_1708.y == 0u)
    {
        uvec4 _2268 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2269 = _2268.x;
        uint _2280 = uint((float(_2268.y) * floor(float(uint(cbSceneParam._m0[85u].y * _341) / _2269))) + floor(float(uint(cbSceneParam._m0[85u].x * _340) / _2269)));
        float _2290 = (log2(_1486 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2291 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        uint _2294 = uint(isnan(14.0) ? _2291 : (isnan(_2291) ? 14.0 : min(_2291, 14.0)));
        uvec4 _2299 = texelFetch(g_lightClusterGridBuffer, int(((_2294 << 2u) + (_2280 << 6u)) >> 2u));
        uint _2300 = _2299.x;
        uint _2301 = _2268.z;
        float _2382;
        float _2384;
        float _2386;
        float _2388;
        float _2390;
        float _2392;
        if (((((1u << ((_2301 >> 4u) & 15u)) + 4294967295u) & _2300) == 0u) || ((_2301 & 240u) == 0u))
        {
            _2382 = 0.0;
            _2384 = 0.0;
            _2386 = 0.0;
            _2388 = 0.0;
            _2390 = 0.0;
            _2392 = 0.0;
        }
        else
        {
            float _2383;
            float _2385;
            float _2387;
            float _2389;
            float _2391;
            float _2393;
            float _2533 = 0.0;
            float _2534 = 0.0;
            float _2535 = 0.0;
            float _2536 = 0.0;
            float _2537 = 0.0;
            float _2538 = 0.0;
            uint _2539 = 0u;
            uint _2548;
            bool _2549;
            for (;;)
            {
                _2548 = texelFetch(g_lightClassification, int((((_2294 << 5u) + (_2280 << 9u)) + (_2539 << 2u)) >> 2u)).x;
                _2549 = _2548 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2549)
                {
                    frontier_phi_71_pred = _2538;
                    frontier_phi_71_pred_1 = _2537;
                    frontier_phi_71_pred_2 = _2536;
                    frontier_phi_71_pred_3 = _2535;
                    frontier_phi_71_pred_4 = _2534;
                    frontier_phi_71_pred_5 = _2533;
                }
                else
                {
                    float _2678;
                    float _2679;
                    float _2680;
                    float _2681;
                    float _2682;
                    float _2683;
                    uint _2684;
                    _2678 = _2533;
                    _2679 = _2534;
                    _2680 = _2535;
                    _2681 = _2536;
                    _2682 = _2537;
                    _2683 = _2538;
                    _2684 = _2548;
                    float _2605;
                    float _2606;
                    float _2607;
                    float _2608;
                    float _2609;
                    float _2610;
                    for (;;)
                    {
                        uint _2688 = uint(findLSB(_2684)) + (_2539 << 5u);
                        uint _2685 = (_2684 + 4294967295u) & _2684;
                        uint _2690 = _2688 * 48u;
                        vec4 _2704 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2690)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 3u)).x));
                        uint _2710 = (_2688 * 48u) + 4u;
                        vec4 _2723 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2710)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 3u)).x));
                        uint _2729 = (_2688 * 48u) + 8u;
                        vec3 _2740 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2729)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 2u)).x));
                        float _2744 = _2704.x - _1484;
                        float _2745 = _2704.y - _1485;
                        float _2746 = _2704.z - _1486;
                        float _2747 = dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746));
                        float _2750 = inversesqrt(_2747);
                        float _2759 = 1.0 - (_2747 * _2704.w);
                        float _3977 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                        float _2760 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
                        float _2761 = sqrt(_2747) * _2723.w;
                        float _2764 = 1.39999997615814208984375 / (_2761 + 1.39999997615814208984375);
                        float _2765 = _2764 * _2764;
                        float _2768 = ((1.0 - _2765) * dot(vec3(_361, _364, _367), vec3(_2750 * _2744, _2750 * _2745, _2750 * _2746))) + _2765;
                        float _2771 = _2761 * _2761;
                        float _2775 = ((isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0))) * _2760) / ((_2771 * 0.699999988079071044921875) + 1.0);
                        float _2779 = (-0.0) - _1484;
                        float _2780 = (-0.0) - _1485;
                        float _2781 = (-0.0) - _1486;
                        float _2785 = inversesqrt(dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781)));
                        float _2789 = dot(vec3(_361, _364, _367), vec3(_2785 * _2779, _2785 * _2780, _2785 * _2781));
                        float _3993 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                        float _4004 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
                        float _2793 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
                        float _2797 = (0.5 / (((isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) + 9.9999999392252902907785028219223e-09) + _2793)) * _2793;
                        float _4015 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                        float _2806 = (((isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * 3.1415927410125732421875) / ((_2771 * 2.1991131305694580078125) + 3.141590118408203125)) * _2760;
                        _2608 = (_2775 * _2723.x) + _2681;
                        _2609 = (_2775 * _2723.y) + _2682;
                        _2610 = (_2775 * _2723.z) + _2683;
                        _2605 = (_2806 * _2740.x) + _2678;
                        _2606 = (_2806 * _2740.y) + _2679;
                        _2607 = (_2806 * _2740.z) + _2680;
                        if (_2685 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2678 = _2605;
                            _2679 = _2606;
                            _2680 = _2607;
                            _2681 = _2608;
                            _2682 = _2609;
                            _2683 = _2610;
                            _2684 = _2685;
                        }
                    }
                    frontier_phi_71_pred = _2610;
                    frontier_phi_71_pred_1 = _2609;
                    frontier_phi_71_pred_2 = _2608;
                    frontier_phi_71_pred_3 = _2607;
                    frontier_phi_71_pred_4 = _2606;
                    frontier_phi_71_pred_5 = _2605;
                }
                _2393 = frontier_phi_71_pred;
                _2391 = frontier_phi_71_pred_1;
                _2389 = frontier_phi_71_pred_2;
                _2387 = frontier_phi_71_pred_3;
                _2385 = frontier_phi_71_pred_4;
                _2383 = frontier_phi_71_pred_5;
                uint _2540 = _2539 + 1u;
                if (_2540 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2533 = _2383;
                    _2534 = _2385;
                    _2535 = _2387;
                    _2536 = _2389;
                    _2537 = _2391;
                    _2538 = _2393;
                    _2539 = _2540;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2382 = _2383;
            _2384 = _2385;
            _2386 = _2387;
            _2388 = _2389;
            _2390 = _2391;
            _2392 = _2393;
        }
        uvec4 _2396 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2397 = _2396.z;
        uint _2399 = (_2397 >> 8u) & 15u;
        float _2504;
        float _2506;
        float _2508;
        float _2510;
        float _2512;
        float _2514;
        if (((4294967295u << _2399) & _2300) == 0u)
        {
            _2504 = _2382;
            _2506 = _2384;
            _2508 = _2386;
            _2510 = _2388;
            _2512 = _2390;
            _2514 = _2392;
        }
        else
        {
            float _2529 = inversesqrt(dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486)));
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2399 < ((_2397 >> 12u) & 15u))
            {
                float _2505;
                float _2507;
                float _2509;
                float _2511;
                float _2513;
                float _2515;
                float _2661 = _2382;
                float _2662 = _2384;
                float _2663 = _2386;
                float _2664 = _2388;
                float _2665 = _2390;
                float _2666 = _2392;
                uint _2667 = _2399;
                uint _2676;
                bool _2677;
                for (;;)
                {
                    _2676 = texelFetch(g_lightClassification, int((((_2294 << 5u) + (_2280 << 9u)) + (_2667 << 2u)) >> 2u)).x;
                    _2677 = _2676 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2677)
                    {
                        frontier_phi_82_pred = _2666;
                        frontier_phi_82_pred_1 = _2665;
                        frontier_phi_82_pred_2 = _2664;
                        frontier_phi_82_pred_3 = _2663;
                        frontier_phi_82_pred_4 = _2662;
                        frontier_phi_82_pred_5 = _2661;
                    }
                    else
                    {
                        float _2820;
                        float _2821;
                        float _2822;
                        float _2823;
                        float _2824;
                        float _2825;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _2833 = _2661;
                        float _2834 = _2662;
                        float _2835 = _2663;
                        float _2836 = _2664;
                        float _2837 = _2665;
                        float _2838 = _2666;
                        uint _2839 = _2676;
                        uint _2840;
                        vec4 _2865;
                        float _2866;
                        vec4 _2881;
                        vec3 _2893;
                        vec4 _2909;
                        vec4 _2925;
                        float _2972;
                        bool _2973;
                        for (;;)
                        {
                            uint _2850 = ((_2667 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2839));
                            _2840 = (_2839 + 4294967295u) & _2839;
                            uint _2852 = _2850 * 40u;
                            _2865 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 3u)).x));
                            _2866 = _2865.w;
                            uint _2868 = (_2850 * 40u) + 4u;
                            _2881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 3u)).x));
                            uint _2883 = (_2850 * 40u) + 8u;
                            _2893 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 2u)).x));
                            uint _2896 = (_2850 * 40u) + 16u;
                            _2909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 3u)).x));
                            uint _2912 = (_2850 * 40u) + 20u;
                            _2925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 3u)).x));
                            uint _2928 = (_2850 * 40u) + 24u;
                            vec4 _2941 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 3u)).x));
                            uint _2947 = (_2850 * 40u) + 28u;
                            vec4 _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            _2972 = fma(_1486, _2960.z, fma(_1485, _2960.y, _2960.x * _1484)) + _2960.w;
                            _2973 = !((fma(_1486, _2941.z, fma(_1485, _2941.y, _2941.x * _1484)) + _2941.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_2973)
                            {
                                float _3000 = _2865.x - _1484;
                                float _3001 = _2865.y - _1485;
                                float _3002 = _2865.z - _1486;
                                float _3003 = dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002));
                                float _3006 = inversesqrt(_3003);
                                float _3007 = _3006 * _3000;
                                float _3008 = _3006 * _3001;
                                float _3009 = _3006 * _3002;
                                float _3013 = 1.0 - (_3003 / (_2866 * _2866));
                                float _4026 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                                float _3014 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
                                float _3018 = sqrt(_3003) * _2881.w;
                                float _3020 = 1.39999997615814208984375 / (_3018 + 1.39999997615814208984375);
                                float _3021 = _3020 * _3020;
                                float _3022 = 1.0 - _3021;
                                float _3024 = (_3022 * dot(vec3(_3007, _3008, _3009), vec3(_361, _364, _367))) + _3021;
                                float _3027 = _3018 * _3018;
                                float _3031 = (fma(_1486, _2909.z, fma(_1485, _2909.y, _2909.x * _1484)) + _2909.w) / _2972;
                                float _3032 = (fma(_1486, _2925.z, fma(_1485, _2925.y, _2925.x * _1484)) + _2925.w) / _2972;
                                float _3036 = 1.0 - dot(vec2(_3031, _3032), vec2(_3031, _3032));
                                float _4042 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                                float _3037 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                                float _3038 = _3037 * (((isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0))) * _3014) / ((_3027 * 0.699999988079071044921875) + 1.0));
                                float _3048 = dot(vec3(_361, _364, _367), vec3((-0.0) - (_1484 * _2529), (-0.0) - (_1485 * _2529), (-0.0) - (_1486 * _2529)));
                                float _4053 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                                float _3056 = (_3022 * dot(vec3(_361, _364, _367), vec3(_3007, _3008, _3009))) + _3021;
                                float _4064 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                                float _3057 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
                                float _3061 = (0.5 / (((isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) + 9.9999999392252902907785028219223e-09) + _3057)) * _3057;
                                float _4075 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                                float _3068 = (_3037 * _3014) * (((isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * 3.1415927410125732421875) / ((_3027 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_88_pred = _3038 * _2881.z;
                                frontier_phi_88_pred_1 = _3038 * _2881.y;
                                frontier_phi_88_pred_2 = _3038 * _2881.x;
                                frontier_phi_88_pred_3 = _3068 * _2893.z;
                                frontier_phi_88_pred_4 = _3068 * _2893.y;
                                frontier_phi_88_pred_5 = _3068 * _2893.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3077 = frontier_phi_88_pred;
                            _3076 = frontier_phi_88_pred_1;
                            _3075 = frontier_phi_88_pred_2;
                            _3074 = frontier_phi_88_pred_3;
                            _3073 = frontier_phi_88_pred_4;
                            _3072 = frontier_phi_88_pred_5;
                            _2823 = _3075 + _2836;
                            _2824 = _3076 + _2837;
                            _2825 = _3077 + _2838;
                            _2820 = _3072 + _2833;
                            _2821 = _3073 + _2834;
                            _2822 = _3074 + _2835;
                            if (_2840 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2833 = _2820;
                                _2834 = _2821;
                                _2835 = _2822;
                                _2836 = _2823;
                                _2837 = _2824;
                                _2838 = _2825;
                                _2839 = _2840;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2825;
                        frontier_phi_82_pred_1 = _2824;
                        frontier_phi_82_pred_2 = _2823;
                        frontier_phi_82_pred_3 = _2822;
                        frontier_phi_82_pred_4 = _2821;
                        frontier_phi_82_pred_5 = _2820;
                    }
                    _2515 = frontier_phi_82_pred;
                    _2513 = frontier_phi_82_pred_1;
                    _2511 = frontier_phi_82_pred_2;
                    _2509 = frontier_phi_82_pred_3;
                    _2507 = frontier_phi_82_pred_4;
                    _2505 = frontier_phi_82_pred_5;
                    uint _2668 = _2667 + 1u;
                    if (_2668 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2661 = _2505;
                        _2662 = _2507;
                        _2663 = _2509;
                        _2664 = _2511;
                        _2665 = _2513;
                        _2666 = _2515;
                        _2667 = _2668;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2511;
                frontier_phi_63_64_ladder_1 = _2515;
                frontier_phi_63_64_ladder_2 = _2513;
                frontier_phi_63_64_ladder_3 = _2509;
                frontier_phi_63_64_ladder_4 = _2507;
                frontier_phi_63_64_ladder_5 = _2505;
            }
            else
            {
                frontier_phi_63_64_ladder = _2388;
                frontier_phi_63_64_ladder_1 = _2392;
                frontier_phi_63_64_ladder_2 = _2390;
                frontier_phi_63_64_ladder_3 = _2386;
                frontier_phi_63_64_ladder_4 = _2384;
                frontier_phi_63_64_ladder_5 = _2382;
            }
            _2504 = frontier_phi_63_64_ladder_5;
            _2506 = frontier_phi_63_64_ladder_4;
            _2508 = frontier_phi_63_64_ladder_3;
            _2510 = frontier_phi_63_64_ladder;
            _2512 = frontier_phi_63_64_ladder_2;
            _2514 = frontier_phi_63_64_ladder_1;
        }
        float _2519 = isnan(1.0) ? _406 : (isnan(_406) ? 1.0 : min(_406, 1.0));
        _2313 = (_2519 * _2510) + _1952;
        _2315 = (_2519 * _2512) + _1954;
        _2317 = (_2519 * _2514) + _1956;
        _2319 = ((_2504 * 0.039999999105930328369140625) * _2519) + _2194;
        _2321 = ((_2506 * 0.039999999105930328369140625) * _2519) + _2196;
        _2323 = ((_2508 * 0.039999999105930328369140625) * _2519) + _2198;
    }
    else
    {
        _2313 = _1952;
        _2315 = _1954;
        _2317 = _1956;
        _2319 = _2194;
        _2321 = _2196;
        _2323 = _2198;
    }
    float _4091 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _4102 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _4113 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _4124 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _2341 = ((isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_2313 + ((isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0))) * _406))) + ((_2319 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _1217)) * cbPerFrame._m0[3u].x);
    float _2342 = ((isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_2315 + ((isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0))) * _406))) + ((_2321 + ((isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))) * _1217)) * cbPerFrame._m0[3u].x);
    float _2343 = ((isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_2317 + ((isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0))) * _406))) + ((_2323 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _1217)) * cbPerFrame._m0[3u].x);
    float _2348 = cbInstanceData._m0[_380 + 6u].w * (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)));
    float _2353 = _340 / cbSceneParam._m0[86u].x;
    float _2354 = _341 / cbSceneParam._m0[86u].y;
    vec4 _2368 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2353, _2354, (log2((isnan(cbSceneParam._m0[77u].w) ? _261 : (isnan(_261) ? cbSceneParam._m0[77u].w : min(_261, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2370 = _2368.x;
    float _2371 = _2368.y;
    float _2372 = _2368.z;
    float _2373 = _2368.w;
    float _2444;
    float _2446;
    float _2448;
    float _2450;
    if (_261 > cbSceneParam._m0[78u].w)
    {
        float _2407 = isnan(_261) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _261 : min(cbSceneParam._m0[80u].w, _261));
        float _2408 = _2407 / _261;
        float _2419 = _2408 * _313;
        float _2420 = _314 * _2408;
        float _2421 = (-0.0) - _2420;
        float _2422 = _2408 * _315;
        float _2424 = (cbSceneParam._m0[77u].w * _2421) / _2407;
        float _2425 = _2424 + cbSceneParam._m0[79u].w;
        float _2426 = cbSceneParam._m0[79u].w - _2420;
        float _2432 = sqrt(((_2419 * _2419) + (_2420 * _2420)) + (_2422 * _2422));
        float _2435 = (1.0 - (cbSceneParam._m0[77u].w / _2407)) * _2432;
        float _2440 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2442 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2618;
        if (abs((_2421 - _2424) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2618 = ((((_2425 > 0.0) ? exp2(_2440 * _2425) : (2.0 - exp2(_2442 * _2425))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2435;
        }
        else
        {
            float _2562 = 1.0 / cbSceneParam._m0[80u].x;
            float _2563 = isnan(_2426) ? _2425 : (isnan(_2425) ? _2426 : max(_2425, _2426));
            float _2564 = isnan(_2426) ? _2425 : (isnan(_2425) ? _2426 : min(_2425, _2426));
            float _2573 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : min(_2563, 0.0));
            float _2574 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : min(_2564, 0.0));
            _2618 = ((abs(_2432 / _2421) * cbSceneParam._m0[80u].y) * ((((_2573 - _2574) * 2.0) - ((exp2(_2440 * (isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0)))) - exp2(_2440 * (isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0))))) * _2562)) - ((exp2(_2442 * _2573) - exp2(_2442 * _2574)) * _2562))) + (_2435 * cbSceneParam._m0[80u].z);
        }
        vec4 _2620 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2353, _2354, 1.0), 0.0);
        float _2629 = exp2((_2618 * (-1.44269502162933349609375)) * (1.0 - _2620.w));
        float _2630 = log2(_2629);
        float _2646 = log2(_2373);
        _2444 = (exp2(_2646 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2630 * cbSceneParam._m0[78u].x)) * _2620.x) / cbSceneParam._m0[78u].x)) + _2370;
        _2446 = (exp2(_2646 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2630 * cbSceneParam._m0[78u].y)) * _2620.y) / cbSceneParam._m0[78u].y)) + _2371;
        _2448 = (exp2(_2646 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2630 * cbSceneParam._m0[78u].z)) * _2620.z) / cbSceneParam._m0[78u].z)) + _2372;
        _2450 = _2629 * _2373;
    }
    else
    {
        _2444 = _2370;
        _2446 = _2371;
        _2448 = _2372;
        _2450 = _2373;
    }
    bool _2656;
    vec4 _2460;
    vec4 _2483;
    float _2485;
    float _2489;
    float _2490;
    float _2491;
    float _2492;
    bool _2503;
    for (;;)
    {
        _2460 = cbMatDynParam._m0[0u];
        float _2462 = roundEven(_2460.y);
        bool _2463 = _2462 == 3.0;
        float _2465 = log2(_2450);
        float _2472 = exp2(_2465 * cbSceneParam._m0[78u].x) * _2341;
        float _2473 = exp2(_2465 * cbSceneParam._m0[78u].y) * _2342;
        float _2474 = exp2(_2465 * cbSceneParam._m0[78u].z) * _2343;
        float _2481 = _329 + (-0.5);
        _2483 = cbMtdParam._m0[1u];
        _2485 = _2483.y * _2481;
        float _2488 = (_2462 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2489 = _2488 * (_2463 ? _2472 : (_2472 + (cbSceneParam._m0[72u].w * _2444)));
        _2490 = _2488 * (_2463 ? _2473 : (_2473 + (cbSceneParam._m0[72u].w * _2446)));
        _2491 = _2488 * (_2463 ? _2474 : (_2474 + (cbSceneParam._m0[72u].w * _2448)));
        _2492 = _2481 * 0.999000012874603271484375;
        _2503 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2503)
        {
            if ((cbInstanceData._m0[_380 + 7u].x + _2492) < 0.5)
            {
                _2656 = true;
                break;
            }
        }
        uint _2597 = _382 + uint(_2460.w);
        if ((cbInstanceData._m0[_2597].w < 1.0) && ((cbInstanceData._m0[_2597].w + _2492) < 0.5))
        {
            _2656 = true;
            break;
        }
        if ((_2485 + _199) < _2483.x)
        {
            _2656 = true;
            break;
        }
        _2656 = false;
        break;
    }
    float _2811;
    if (_2656)
    {
        discard_state = true;
        _2811 = 0.0;
    }
    else
    {
        _2811 = _2348;
    }
    SV_Target.x = _2489;
    SV_Target.y = _2490;
    SV_Target.z = _2491;
    SV_Target.w = _2811;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2348;
    discard_exit();
}


