#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Alpha_Soft_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _773;
float _3222;
float _3223;
float _3224;
float _3225;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _170 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _171 = _170 * NORMAL.x;
    float _172 = _170 * NORMAL.y;
    float _173 = _170 * NORMAL.z;
    vec4 _193 = texture(sampler2D(S_A1_M0_Alpha_Soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _196 = _193.w;
    vec4 _209 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _211 = _209.x;
    bool _218 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _235 = ((_218 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _211)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _211))) - POSITION_1.w) / cbMtdParam._m0[11u].x;
    float _3234 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _239 = (_196 * TEXCOORD_1.z) * (isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0)));
    float _243 = inversesqrt(dot(vec3(_171, _172, _173), vec3(_171, _172, _173)));
    float _244 = _243 * _171;
    float _245 = _243 * _172;
    float _246 = _243 * _173;
    float _3245 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _247 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
    float _3256 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _3267 = isnan(0.0) ? cbMtdParam._m0[10u].y : (isnan(cbMtdParam._m0[10u].y) ? 0.0 : max(cbMtdParam._m0[10u].y, 0.0));
    float _3278 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _255 = _218 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _297 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _307 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _297);
    float _308 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _297);
    float _309 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _297);
    float _313 = inversesqrt(dot(vec3(_307, _308, _309), vec3(_307, _308, _309)));
    float _314 = _307 * _313;
    float _315 = _308 * _313;
    float _316 = _309 * _313;
    vec4 _321 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _323 = _321.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _452 = sqrt(((_307 * _307) + (_308 * _308)) + (_309 * _309));
        float _458 = (cbMatDynParam._m0[5u].x * _452) + cbMatDynParam._m0[5u].y;
        float _3289 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
        float _459 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
        float _463 = (cbMatDynParam._m0[5u].z * _452) + cbMatDynParam._m0[5u].w;
        float _3300 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0))) - _459)) + _459) < ((_323 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _334 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _335 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _355 = fma(_246, cbSceneParam._m0[5u].z, fma(_245, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _244));
    float _358 = fma(_246, cbSceneParam._m0[6u].z, fma(_245, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _244));
    float _361 = fma(_246, cbSceneParam._m0[7u].z, fma(_245, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _244));
    uint _374 = uint(roundEven(NORMAL.w)) * 13u;
    uint _376 = _374 + 9u;
    uint _377 = _376 + uint(cbMatDynParam._m0[0u].w);
    float _383 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0)))) * cbInstanceData._m0[_377].x;
    float _384 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0)))) * cbInstanceData._m0[_377].y;
    float _385 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0)))) * cbInstanceData._m0[_377].z;
    float _3311 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _386 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
    float _3322 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _387 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
    float _3333 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _388 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
    vec4 _397 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _334, cbSceneParam._m0[86u].y * _335));
    float _400 = _397.x * TEXCOORD_1.w;
    float _401 = dot(vec3(_244, _245, _246), vec3(_314, _315, _316));
    float _404 = _401 * 2.0;
    float _409 = (_404 * _244) - _314;
    float _410 = (_404 * _245) - _315;
    float _411 = (_404 * _246) - _316;
    float _433 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _437 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _441 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _772;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _497 = fma(_441, cbModelParam._m0[26u].z, fma(_437, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _433));
        float _501 = fma(_441, cbModelParam._m0[27u].z, fma(_437, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _433));
        float _505 = fma(_441, cbModelParam._m0[28u].z, fma(_437, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _433));
        float _530 = _433 + _244;
        float _531 = _437 + _245;
        float _532 = _441 + _246;
        float _542 = fma(_532, cbModelParam._m0[26u].z, fma(_531, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _530)) - _497;
        float _543 = fma(_532, cbModelParam._m0[27u].z, fma(_531, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _530)) - _501;
        float _544 = fma(_532, cbModelParam._m0[28u].z, fma(_531, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _530)) - _505;
        float _548 = inversesqrt(dot(vec3(_542, _543, _544), vec3(_542, _543, _544)));
        float _561 = ((_548 * _542) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_497 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _562 = ((_548 * _543) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_501 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _563 = ((_548 * _544) / cbModelParam._m0[34u].z) + ((((((_505 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _566 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_561, _562, _563), 0.0);
        vec4 _573 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_561, _562, _563), 0.0);
        vec4 _580 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_561, _562, _563), 0.0);
        vec4 _587 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_561, _562, _563), 0.0);
        float _600 = exp2((_566.w + (-0.5)) * 20.0) * 2.0;
        float _601 = _600 * (_566.x + (-0.5));
        float _602 = _600 * (_566.y + (-0.5));
        float _603 = _600 * (_566.z + (-0.5));
        float _610 = exp2((_573.w + (-0.5)) * 20.0) * 2.0;
        float _611 = _610 * (_573.x + (-0.5));
        float _612 = _610 * (_573.y + (-0.5));
        float _613 = _610 * (_573.z + (-0.5));
        float _620 = exp2((_580.w + (-0.5)) * 20.0) * 2.0;
        float _621 = _620 * (_580.x + (-0.5));
        float _622 = _620 * (_580.y + (-0.5));
        float _623 = _620 * (_580.z + (-0.5));
        float _630 = exp2((_587.w + (-0.5)) * 20.0) * 2.0;
        float _631 = _630 * (_587.x + (-0.5));
        float _632 = _630 * (_587.y + (-0.5));
        float _633 = _630 * (_587.z + (-0.5));
        float _634 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
        float _635 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
        float _636 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
        float _637 = _601 * 0.5;
        float _638 = _611 * 0.5;
        float _639 = _621 * 0.5;
        float _640 = dot(vec3(_637, _638, _639), vec3(_637, _638, _639));
        float _645 = (_640 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_640);
        float _654 = (dot(vec3(_244, _245, _246), vec3(_645 * _637, _645 * _638, _645 * _639)) + 1.0) * 0.5;
        float _3359 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
        float _664 = sqrt(((_638 * _638) + (_637 * _637)) + (_639 * _639)) / (_634 + 9.9999997473787516355514526367188e-06);
        float _3370 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _665 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
        float _666 = _665 * 2.0;
        float _670 = (1.0 - _665) / (_665 + 1.0);
        float _3381 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _671 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
        float _680 = ((((1.0 - _671) * (_666 + 2.0)) * exp2(log2(isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0))) * (_666 + 1.0))) + _671) * _634;
        float _681 = _602 * 0.5;
        float _682 = _612 * 0.5;
        float _683 = _622 * 0.5;
        float _684 = dot(vec3(_681, _682, _683), vec3(_681, _682, _683));
        float _689 = (_684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_684);
        float _697 = (dot(vec3(_244, _245, _246), vec3(_689 * _681, _689 * _682, _689 * _683)) + 1.0) * 0.5;
        float _3392 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
        float _706 = sqrt(((_682 * _682) + (_681 * _681)) + (_683 * _683)) / (_635 + 9.9999997473787516355514526367188e-06);
        float _3403 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _707 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
        float _708 = _707 * 2.0;
        float _712 = (1.0 - _707) / (_707 + 1.0);
        float _3414 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _713 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
        float _722 = ((((1.0 - _713) * (_708 + 2.0)) * exp2(log2(isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))) * (_708 + 1.0))) + _713) * _635;
        float _723 = _603 * 0.5;
        float _724 = _613 * 0.5;
        float _725 = _623 * 0.5;
        float _726 = dot(vec3(_723, _724, _725), vec3(_723, _724, _725));
        float _731 = (_726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_726);
        float _739 = (dot(vec3(_244, _245, _246), vec3(_731 * _723, _731 * _724, _731 * _725)) + 1.0) * 0.5;
        float _3425 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _748 = sqrt(((_724 * _724) + (_723 * _723)) + (_725 * _725)) / (_636 + 9.9999997473787516355514526367188e-06);
        float _3436 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _750 = _749 * 2.0;
        float _754 = (1.0 - _749) / (_749 + 1.0);
        float _3447 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _764 = ((((1.0 - _755) * (_750 + 2.0)) * exp2(log2(isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0))) * (_750 + 1.0))) + _755) * _636;
        _772 = _603;
        _774 = _602;
        _775 = _601;
        _776 = _613;
        _777 = _612;
        _778 = _611;
        _779 = _623;
        _780 = _622;
        _781 = _621;
        _782 = _636;
        _783 = _635;
        _784 = _634;
        _785 = cbModelParam._m0[36u].z * (isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0)));
        _786 = cbModelParam._m0[36u].z * (isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0)));
        _787 = cbModelParam._m0[36u].z * (isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0)));
    }
    else
    {
        _772 = _773;
        _774 = _773;
        _775 = _773;
        _776 = _773;
        _777 = _773;
        _778 = _773;
        _779 = _773;
        _780 = _773;
        _781 = _773;
        _782 = _773;
        _783 = _773;
        _784 = _773;
        _785 = 0.0;
        _786 = 0.0;
        _787 = 0.0;
    }
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _816 = fma(_441, cbModelParam._m0[30u].z, fma(_437, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _433));
        float _820 = fma(_441, cbModelParam._m0[31u].z, fma(_437, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _433));
        float _824 = fma(_441, cbModelParam._m0[32u].z, fma(_437, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _433));
        float _847 = _433 + _244;
        float _848 = _437 + _245;
        float _849 = _441 + _246;
        float _859 = fma(_849, cbModelParam._m0[30u].z, fma(_848, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _847)) - _816;
        float _860 = fma(_849, cbModelParam._m0[31u].z, fma(_848, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _847)) - _820;
        float _861 = fma(_849, cbModelParam._m0[32u].z, fma(_848, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _847)) - _824;
        float _865 = inversesqrt(dot(vec3(_859, _860, _861), vec3(_859, _860, _861)));
        float _878 = ((_865 * _859) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_816 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _879 = ((_865 * _860) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_820 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _880 = ((_865 * _861) / cbModelParam._m0[35u].z) + ((((((_824 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        float _915 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_882.x + (-0.5));
        float _917 = _915 * (_882.y + (-0.5));
        float _918 = _915 * (_882.z + (-0.5));
        float _925 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_889.x + (-0.5));
        float _927 = _925 * (_889.y + (-0.5));
        float _928 = _925 * (_889.z + (-0.5));
        float _935 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_896.x + (-0.5));
        float _937 = _935 * (_896.y + (-0.5));
        float _938 = _935 * (_896.z + (-0.5));
        float _945 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_903.x + (-0.5));
        float _947 = _945 * (_903.y + (-0.5));
        float _948 = _945 * (_903.z + (-0.5));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = _916 * 0.5;
        float _953 = _926 * 0.5;
        float _954 = _936 * 0.5;
        float _955 = dot(vec3(_952, _953, _954), vec3(_952, _953, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _968 = (dot(vec3(_244, _245, _246), vec3(_960 * _952, _960 * _953, _960 * _954)) + 1.0) * 0.5;
        float _3488 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _977 = sqrt(((_953 * _953) + (_952 * _952)) + (_954 * _954)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3499 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3510 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * (_979 + 1.0))) + _984) * _949;
        float _994 = _917 * 0.5;
        float _995 = _927 * 0.5;
        float _996 = _937 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1010 = (dot(vec3(_244, _245, _246), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3521 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1019 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_950 + 9.9999997473787516355514526367188e-06);
        float _3532 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3543 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * (_1021 + 1.0))) + _1026) * _950;
        float _1036 = _918 * 0.5;
        float _1037 = _928 * 0.5;
        float _1038 = _938 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_244, _245, _246), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3554 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3565 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3576 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * (_1063 + 1.0))) + _1068) * _951;
        _1085 = _918;
        _1086 = _917;
        _1087 = _916;
        _1088 = _928;
        _1089 = _927;
        _1090 = _926;
        _1091 = _938;
        _1092 = _937;
        _1093 = _936;
        _1094 = _951;
        _1095 = _950;
        _1096 = _949;
        _1097 = cbModelParam._m0[36u].w * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
        _1098 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
        _1099 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
    }
    else
    {
        _1085 = _773;
        _1086 = _773;
        _1087 = _773;
        _1088 = _773;
        _1089 = _773;
        _1090 = _773;
        _1091 = _773;
        _1092 = _773;
        _1093 = _773;
        _1094 = _773;
        _1095 = _773;
        _1096 = _773;
        _1097 = 0.0;
        _1098 = 0.0;
        _1099 = 0.0;
    }
    float _1109 = (cbModelParam._m0[1u].x * (_1097 - _785)) + _785;
    float _1110 = (cbModelParam._m0[1u].x * (_1098 - _786)) + _786;
    float _1111 = (cbModelParam._m0[1u].x * (_1099 - _787)) + _787;
    float _1132 = fma(_1111, cbSceneParam._m0[89u].z, fma(_1110, cbSceneParam._m0[89u].y, _1109 * cbSceneParam._m0[89u].x));
    float _1135 = fma(_1111, cbSceneParam._m0[90u].z, fma(_1110, cbSceneParam._m0[90u].y, _1109 * cbSceneParam._m0[90u].x));
    float _1138 = fma(_1111, cbSceneParam._m0[91u].z, fma(_1110, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1109));
    float _1153 = _409 * 0.5;
    float _1154 = _410 * 0.5;
    float _1155 = _411 * 0.5;
    float _1156 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_1087, _1090, _1093, _1096));
    float _1159 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_1086, _1089, _1092, _1095));
    float _1162 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_1085, _1088, _1091, _1094));
    float _1196;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1169 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_772, _776, _779, _782));
        float _1173 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_774, _777, _780, _783));
        float _1177 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_775, _778, _781, _784));
        float _1184 = dot(vec4(cbModelParam._m0[39u]), vec4(_1153, _1154, _1155, 1.0));
        _1196 = dot(vec3(isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)), isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)), isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1184) ? 0.0 : (isnan(0.0) ? _1184 : max(0.0, _1184))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1196 = 1.0;
    }
    float _1207;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1198 = dot(vec4(cbModelParam._m0[40u]), vec4(_1153, _1154, _1155, 1.0));
        _1207 = dot(vec3(isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)), isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)), isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1198) ? 0.0 : (isnan(0.0) ? _1198 : max(0.0, _1198))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1207 = 1.0;
    }
    float _1211 = (_1207 * cbModelParam._m0[1u].x) + (_1196 * (1.0 - cbModelParam._m0[1u].x));
    float _1220 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1302;
    float _1304;
    float _1306;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1269 = fma(_441, cbModelParam._m0[13u].z, fma(_437, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _433)) + cbModelParam._m0[13u].w;
        float _1273 = fma(_441, cbModelParam._m0[14u].z, fma(_437, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _433)) + cbModelParam._m0[14u].w;
        float _1277 = fma(_441, cbModelParam._m0[15u].z, fma(_437, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _433)) + cbModelParam._m0[15u].w;
        float _1280 = fma(_411, cbModelParam._m0[13u].z, fma(_410, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _409));
        float _1283 = fma(_411, cbModelParam._m0[14u].z, fma(_410, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _409));
        float _1286 = fma(_411, cbModelParam._m0[15u].z, fma(_410, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _409));
        float _1312;
        if (_1280 > 0.0)
        {
            _1312 = abs((1.0 - _1269) / _1280);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1280 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1269 + 1.0) / _1280);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1312 = frontier_phi_17_15_ladder;
        }
        float _1486;
        if (_1283 > 0.0)
        {
            _1486 = abs((1.0 - _1273) / _1283);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1283 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1273 + 1.0) / _1283);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1486 = frontier_phi_26_22_ladder;
        }
        float _1783;
        if (_1286 > 0.0)
        {
            _1783 = abs((1.0 - _1277) / _1286);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1286 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1277 + 1.0) / _1286);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1783 = frontier_phi_38_33_ladder;
        }
        float _1785 = isnan(_1486) ? _1312 : (isnan(_1312) ? _1486 : min(_1312, _1486));
        float _1786 = isnan(_1783) ? _1785 : (isnan(_1785) ? _1783 : min(_1785, _1783));
        float _1790 = (_1786 * _1280) + _1269;
        float _1791 = (_1786 * _1283) + _1273;
        float _1792 = (_1786 * _1286) + _1277;
        float _1793 = _1786 * 9.9999997473787516355514526367188e-05;
        float _1795 = (-1.0) - _1793;
        float _1797 = _1793 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1792 > _1797) || ((_1792 < _1795) || ((_1791 > _1797) || ((_1791 < _1795) || ((_1790 < _1795) || (_1790 > _1797))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1937 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1792, cbModelParam._m0[9u].z, fma(_1791, cbModelParam._m0[9u].y, _1790 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1792, cbModelParam._m0[10u].z, fma(_1791, cbModelParam._m0[10u].y, _1790 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1792, cbModelParam._m0[11u].z, fma(_1791, cbModelParam._m0[11u].y, _1790 * cbModelParam._m0[11u].x))), _1220);
            frontier_phi_16_38_ladder = _1937.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1937.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1937.x * cbModelParam._m0[1u].y;
        }
        _1302 = frontier_phi_16_38_ladder_2;
        _1304 = frontier_phi_16_38_ladder_1;
        _1306 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1290 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_409, _410, _411), _1220);
        _1302 = _1290.x * cbModelParam._m0[1u].y;
        _1304 = _1290.y * cbModelParam._m0[1u].y;
        _1306 = _1290.z * cbModelParam._m0[1u].y;
    }
    float _1309 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1402;
    float _1404;
    float _1406;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1366 = fma(_441, cbModelParam._m0[21u].z, fma(_437, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _433)) + cbModelParam._m0[21u].w;
        float _1370 = fma(_441, cbModelParam._m0[22u].z, fma(_437, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _433)) + cbModelParam._m0[22u].w;
        float _1374 = fma(_441, cbModelParam._m0[23u].z, fma(_437, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _433)) + cbModelParam._m0[23u].w;
        float _1377 = fma(_411, cbModelParam._m0[21u].z, fma(_410, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _409));
        float _1380 = fma(_411, cbModelParam._m0[22u].z, fma(_410, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _409));
        float _1383 = fma(_411, cbModelParam._m0[23u].z, fma(_410, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _409));
        float _1491;
        if (_1377 > 0.0)
        {
            _1491 = abs((1.0 - _1366) / _1377);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1377 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1366 + 1.0) / _1377);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1491 = frontier_phi_28_24_ladder;
        }
        float _1810;
        if (_1380 > 0.0)
        {
            _1810 = abs((1.0 - _1370) / _1380);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1380 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1370 + 1.0) / _1380);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1810 = frontier_phi_40_35_ladder;
        }
        float _2083;
        if (_1383 > 0.0)
        {
            _2083 = abs((1.0 - _1374) / _1383);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1383 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1374 + 1.0) / _1383);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2083 = frontier_phi_50_47_ladder;
        }
        float _2085 = isnan(_1810) ? _1491 : (isnan(_1491) ? _1810 : min(_1491, _1810));
        float _2086 = isnan(_2083) ? _2085 : (isnan(_2085) ? _2083 : min(_2085, _2083));
        float _2090 = (_2086 * _1377) + _1366;
        float _2091 = (_2086 * _1380) + _1370;
        float _2092 = (_2086 * _1383) + _1374;
        float _2093 = _2086 * 9.9999997473787516355514526367188e-05;
        float _2094 = (-1.0) - _2093;
        float _2096 = _2093 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2092 > _2096) || ((_2092 < _2094) || ((_2091 > _2096) || ((_2091 < _2094) || ((_2090 < _2094) || (_2090 > _2096))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2183 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2092, cbModelParam._m0[17u].z, fma(_2091, cbModelParam._m0[17u].y, _2090 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2092, cbModelParam._m0[18u].z, fma(_2091, cbModelParam._m0[18u].y, _2090 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2092, cbModelParam._m0[19u].z, fma(_2091, cbModelParam._m0[19u].y, _2090 * cbModelParam._m0[19u].x))), _1309);
            frontier_phi_25_50_ladder = _2183.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2183.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2183.x * cbModelParam._m0[1u].z;
        }
        _1402 = frontier_phi_25_50_ladder_2;
        _1404 = frontier_phi_25_50_ladder_1;
        _1406 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1386 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_409, _410, _411), _1309);
        _1402 = _1386.x * cbModelParam._m0[1u].z;
        _1404 = _1386.y * cbModelParam._m0[1u].z;
        _1406 = _1386.z * cbModelParam._m0[1u].z;
    }
    float _1418 = _400 * 0.01200000010430812835693359375;
    float _1420 = _1418 * ((cbModelParam._m0[1u].w * (_1402 - _1302)) + _1302);
    float _1421 = _1418 * ((cbModelParam._m0[1u].w * (_1404 - _1304)) + _1304);
    float _1422 = _1418 * ((cbModelParam._m0[1u].w * (_1406 - _1306)) + _1306);
    float _1425 = fma(_1422, cbSceneParam._m0[89u].z, fma(_1421, cbSceneParam._m0[89u].y, _1420 * cbSceneParam._m0[89u].x));
    float _1428 = fma(_1422, cbSceneParam._m0[90u].z, fma(_1421, cbSceneParam._m0[90u].y, _1420 * cbSceneParam._m0[90u].x));
    float _1431 = fma(_1422, cbSceneParam._m0[91u].z, fma(_1421, cbSceneParam._m0[91u].y, _1420 * cbSceneParam._m0[91u].x));
    float _1465 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1469 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1473 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1477 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1478 = _1465 / _1477;
    float _1479 = _1469 / _1477;
    float _1480 = _1473 / _1477;
    float _1627;
    float _1628;
    float _1629;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1507 = ((uint(_1480 > cbSceneParam._m0[59u].y) + uint(_1480 > cbSceneParam._m0[59u].x)) + uint(_1480 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1508 = _1507 + 43u;
        uint _1516 = _1507 + 44u;
        uint _1524 = _1507 + 45u;
        uint _1532 = _1507 + 46u;
        float _1543 = fma(_1477, cbSceneParam._m0[_1508].w, fma(_1473, cbSceneParam._m0[_1508].z, fma(_1469, cbSceneParam._m0[_1508].y, _1465 * cbSceneParam._m0[_1508].x)));
        float _1547 = fma(_1477, cbSceneParam._m0[_1516].w, fma(_1473, cbSceneParam._m0[_1516].z, fma(_1469, cbSceneParam._m0[_1516].y, _1465 * cbSceneParam._m0[_1516].x)));
        float _1555 = fma(_1477, cbSceneParam._m0[_1532].w, fma(_1473, cbSceneParam._m0[_1532].z, fma(_1469, cbSceneParam._m0[_1532].y, _1465 * cbSceneParam._m0[_1532].x)));
        float _1560 = cbSceneParam._m0[33u].z * _1555;
        float _1562 = cbSceneParam._m0[33u].w * _1555;
        float _1565 = fma(_1477, cbSceneParam._m0[_1524].w, fma(_1473, cbSceneParam._m0[_1524].z, fma(_1469, cbSceneParam._m0[_1524].y, _1465 * cbSceneParam._m0[_1524].x))) / _1555;
        float _1613 = (cbSceneParam._m0[33u].x - sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480))) * cbSceneParam._m0[33u].y;
        float _3702 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1620 = (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1560 + _1543) / _1555, (_1562 + _1547) / _1555), _1565), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1562 + _1543) / _1555, (_1547 - _1560) / _1555), _1565), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1543 - _1560) / _1555, (_1547 - _1562) / _1555), _1565), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1543 - _1562) / _1555, (_1560 + _1547) / _1555), _1565), 0.0)).x), vec4(0.25)));
        _1627 = 1.0 - (_1620 * cbSceneParam._m0[34u].x);
        _1628 = 1.0 - (_1620 * cbSceneParam._m0[34u].y);
        _1629 = 1.0 - (_1620 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1627 = 1.0;
        _1628 = 1.0;
        _1629 = 1.0;
    }
    float _1693;
    float _1695;
    float _1697;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1681 = fma(_1477, cbSceneParam._m0[63u].w, fma(_1473, cbSceneParam._m0[63u].z, fma(_1469, cbSceneParam._m0[63u].y, _1465 * cbSceneParam._m0[63u].x)));
        float _1682 = fma(_1477, cbSceneParam._m0[60u].w, fma(_1473, cbSceneParam._m0[60u].z, fma(_1469, cbSceneParam._m0[60u].y, _1465 * cbSceneParam._m0[60u].x))) / _1681;
        float _1683 = fma(_1477, cbSceneParam._m0[61u].w, fma(_1473, cbSceneParam._m0[61u].z, fma(_1469, cbSceneParam._m0[61u].y, _1465 * cbSceneParam._m0[61u].x))) / _1681;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1682 >= cbSceneParam._m0[64u].x) && (_1683 >= cbSceneParam._m0[64u].y)) && (_1682 <= cbSceneParam._m0[64u].z)) && (_1683 <= cbSceneParam._m0[64u].w))
        {
            float _1823 = fma(_1477, cbSceneParam._m0[62u].w, fma(_1473, cbSceneParam._m0[62u].z, fma(_1469, cbSceneParam._m0[62u].y, _1465 * cbSceneParam._m0[62u].x))) / _1681;
            float _1827 = isnan(cbSceneParam._m0[41u].w) ? _1823 : (isnan(_1823) ? cbSceneParam._m0[41u].w : max(_1823, cbSceneParam._m0[41u].w));
            float _1870 = (cbSceneParam._m0[33u].x - sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480))) * cbSceneParam._m0[33u].y;
            float _3718 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
            float _1877 = (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1682, cbSceneParam._m0[33u].w + _1683), _1827), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1682, _1683 - cbSceneParam._m0[33u].z), _1827), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1682 - cbSceneParam._m0[33u].z, _1683 - cbSceneParam._m0[33u].w), _1827), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1682 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1683), _1827), 0.0)).x), vec4(0.25)));
            float _1881 = 1.0 - (_1877 * cbSceneParam._m0[34u].x);
            float _1882 = 1.0 - (_1877 * cbSceneParam._m0[34u].y);
            float _1883 = 1.0 - (_1877 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1883) ? _1629 : (isnan(_1629) ? _1883 : min(_1629, _1883));
            frontier_phi_37_36_ladder_1 = isnan(_1882) ? _1628 : (isnan(_1628) ? _1882 : min(_1628, _1882));
            frontier_phi_37_36_ladder_2 = isnan(_1881) ? _1627 : (isnan(_1627) ? _1881 : min(_1627, _1881));
        }
        else
        {
            frontier_phi_37_36_ladder = _1629;
            frontier_phi_37_36_ladder_1 = _1628;
            frontier_phi_37_36_ladder_2 = _1627;
        }
        _1693 = frontier_phi_37_36_ladder_2;
        _1695 = frontier_phi_37_36_ladder_1;
        _1697 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1693 = _1627;
        _1695 = _1628;
        _1697 = _1629;
    }
    uvec4 _1702 = floatBitsToUint(cbInstanceData._m0[_374 + 5u]);
    uint _1704 = _1702.x * 14u;
    uint _1705 = _1704 + 13u;
    float _1712 = _400 + (-1.0);
    float _1718 = (cbLight._m0[_1705].x * _1712) + 1.0;
    float _1719 = (cbLight._m0[_1705].y * _1712) + 1.0;
    float _1720 = (cbLight._m0[_1705].z * _1712) + 1.0;
    float _1721 = (cbLight._m0[_1705].w * _1712) + 1.0;
    uint _1722 = _1704 + 5u;
    float _1728 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
    uint _1732 = _1704 + 4u;
    float _1742 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
    uint _1746 = _1704 | 1u;
    float _1757 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_244, _245, _246));
    float _1760 = dot(vec3(cbLight._m0[_1746].xyz), vec3(_244, _245, _246));
    float _3754 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _3765 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1765 = (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * 0.3183098733425140380859375;
    float _1767 = (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * 0.3183098733425140380859375;
    float _1774 = ((cbLight._m0[_1722].x * _1728) * _1767) + (((cbLight._m0[_1732].x * _1693) * _1742) * _1765);
    float _1775 = ((_1728 * cbLight._m0[_1722].y) * _1767) + (((cbLight._m0[_1732].y * _1695) * _1742) * _1765);
    float _1776 = ((_1728 * cbLight._m0[_1722].z) * _1767) + (((cbLight._m0[_1732].z * _1697) * _1742) * _1765);
    uvec4 _1780 = floatBitsToUint(cbLight._m0[_1704 + 12u]);
    bool _1782 = _1780.x == 0u;
    float _1884;
    float _1886;
    float _1888;
    if (_1782)
    {
        _1884 = _1774;
        _1886 = _1775;
        _1888 = _1776;
    }
    else
    {
        uint _1892 = _1704 + 6u;
        float _1908 = (dot(vec3(cbLight._m0[_1704 + 2u].xyz), vec3(_244, _245, _246)) * 0.5) + 0.5;
        float _1909 = _1908 * _1908;
        float _3776 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        float _1910 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1911 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
        _1884 = (((cbLight._m0[_1892].x * 0.3183098733425140380859375) * _1910) * _1911) + _1774;
        _1886 = (((cbLight._m0[_1892].y * 0.3183098733425140380859375) * _1910) * _1911) + _1775;
        _1888 = (((cbLight._m0[_1892].z * 0.3183098733425140380859375) * _1910) * _1911) + _1776;
    }
    bool _1891 = _1780.y == 0u;
    float _1946;
    float _1948;
    float _1950;
    if (_1891)
    {
        _1946 = _1884;
        _1948 = _1886;
        _1950 = _1888;
    }
    else
    {
        uint _2054 = _1704 + 7u;
        float _2070 = (dot(vec3(cbLight._m0[_1704 + 3u].xyz), vec3(_244, _245, _246)) * 0.5) + 0.5;
        float _2071 = _2070 * _2070;
        float _3792 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2072 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _2073 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
        _1946 = (((cbLight._m0[_2054].x * 0.3183098733425140380859375) * _2072) * _2073) + _1884;
        _1948 = (((cbLight._m0[_2054].y * 0.3183098733425140380859375) * _2072) * _2073) + _1886;
        _1950 = (((cbLight._m0[_2054].z * 0.3183098733425140380859375) * _2072) * _2073) + _1888;
    }
    uint _1952 = _1704 + 8u;
    float _1958 = cbLight._m0[_1704].x + _314;
    float _1959 = cbLight._m0[_1704].y + _315;
    float _1960 = cbLight._m0[_1704].z + _316;
    float _1964 = inversesqrt(dot(vec3(_1958, _1959, _1960), vec3(_1958, _1959, _1960)));
    float _1968 = dot(vec3(_244, _245, _246), vec3(cbLight._m0[_1704].xyz));
    float _3808 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1971 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _3819 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _1972 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _1973 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_1958 * _1964, _1959 * _1964, _1960 * _1964));
    float _3830 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1984 = (exp2(log2(1.0 - (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1990 = (0.5 / ((_1971 + 9.9999999392252902907785028219223e-09) + _1972)) * _1971;
    float _3841 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1992 = (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * 0.31831014156341552734375;
    uint _2006 = _1704 + 9u;
    float _2012 = cbLight._m0[_1746].x + _314;
    float _2013 = cbLight._m0[_1746].y + _315;
    float _2014 = cbLight._m0[_1746].z + _316;
    float _2018 = inversesqrt(dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014)));
    float _2022 = dot(vec3(_244, _245, _246), vec3(cbLight._m0[_1746].xyz));
    float _3852 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2025 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _2026 = dot(vec3(cbLight._m0[_1746].xyz), vec3(_2012 * _2018, _2013 * _2018, _2014 * _2018));
    float _3863 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2035 = (exp2(log2(1.0 - (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2039 = (0.5 / ((_2025 + 9.9999999392252902907785028219223e-09) + _1972)) * _2025;
    float _3874 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2041 = (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * 0.31831014156341552734375;
    float _2051 = (((_2035 * cbLight._m0[_2006].x) * _2041) * _1728) + ((((cbLight._m0[_1952].x * _1693) * _1984) * _1992) * _1742);
    float _2052 = (((_2035 * cbLight._m0[_2006].y) * _2041) * _1728) + ((((cbLight._m0[_1952].y * _1695) * _1984) * _1992) * _1742);
    float _2053 = (((_2035 * cbLight._m0[_2006].z) * _2041) * _1728) + ((((cbLight._m0[_1952].z * _1697) * _1984) * _1992) * _1742);
    float _2109;
    float _2111;
    float _2113;
    if (_1782)
    {
        _2109 = _2051;
        _2111 = _2052;
        _2113 = _2053;
    }
    else
    {
        uint _2115 = _1704 + 10u;
        uint _2121 = _1704 + 2u;
        float _2127 = cbLight._m0[_2121].x + _314;
        float _2128 = cbLight._m0[_2121].y + _315;
        float _2129 = cbLight._m0[_2121].z + _316;
        float _2133 = inversesqrt(dot(vec3(_2127, _2128, _2129), vec3(_2127, _2128, _2129)));
        float _2137 = dot(vec3(_244, _245, _246), vec3(cbLight._m0[_2121].xyz));
        float _3885 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2140 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _2141 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_2127 * _2133, _2128 * _2133, _2129 * _2133));
        float _3896 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2150 = (exp2(log2(1.0 - (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2154 = (0.5 / ((_2140 + 9.9999999392252902907785028219223e-09) + _1972)) * _2140;
        float _3907 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2156 = (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * 0.31831014156341552734375;
        float _2157 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
        _2109 = (((_2150 * cbLight._m0[_2115].x) * _2156) * _2157) + _2051;
        _2111 = (((_2150 * cbLight._m0[_2115].y) * _2156) * _2157) + _2052;
        _2113 = (((_2150 * cbLight._m0[_2115].z) * _2156) * _2157) + _2053;
    }
    float _2188;
    float _2190;
    float _2192;
    if (_1891)
    {
        _2188 = _2109;
        _2190 = _2111;
        _2192 = _2113;
    }
    else
    {
        uint _2199 = _1704 + 11u;
        uint _2205 = _1704 + 3u;
        float _2211 = cbLight._m0[_2205].x + _314;
        float _2212 = cbLight._m0[_2205].y + _315;
        float _2213 = cbLight._m0[_2205].z + _316;
        float _2217 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
        float _2221 = dot(vec3(_244, _245, _246), vec3(cbLight._m0[_2205].xyz));
        float _3923 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2224 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _2225 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_2211 * _2217, _2212 * _2217, _2213 * _2217));
        float _3934 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2234 = (exp2(log2(1.0 - (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2238 = (0.5 / ((_2224 + 9.9999999392252902907785028219223e-09) + _1972)) * _2224;
        float _3945 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2240 = (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * 0.31831014156341552734375;
        float _2241 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
        _2188 = (((_2234 * cbLight._m0[_2199].x) * _2240) * _2241) + _2109;
        _2190 = (((_2234 * cbLight._m0[_2199].y) * _2240) * _2241) + _2111;
        _2192 = (((_2234 * cbLight._m0[_2199].z) * _2240) * _2241) + _2113;
    }
    float _2307;
    float _2309;
    float _2311;
    float _2313;
    float _2315;
    float _2317;
    if (_1702.y == 0u)
    {
        uvec4 _2262 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2263 = _2262.x;
        uint _2274 = uint((float(_2262.y) * floor(float(uint(cbSceneParam._m0[85u].y * _335) / _2263))) + floor(float(uint(cbSceneParam._m0[85u].x * _334) / _2263)));
        float _2284 = (log2(_1480 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2285 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        uint _2288 = uint(isnan(14.0) ? _2285 : (isnan(_2285) ? 14.0 : min(_2285, 14.0)));
        uvec4 _2293 = texelFetch(g_lightClusterGridBuffer, int(((_2288 << 2u) + (_2274 << 6u)) >> 2u));
        uint _2294 = _2293.x;
        uint _2295 = _2262.z;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        float _2384;
        float _2386;
        if (((((1u << ((_2295 >> 4u) & 15u)) + 4294967295u) & _2294) == 0u) || ((_2295 & 240u) == 0u))
        {
            _2376 = 0.0;
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
            _2384 = 0.0;
            _2386 = 0.0;
        }
        else
        {
            float _2377;
            float _2379;
            float _2381;
            float _2383;
            float _2385;
            float _2387;
            float _2527 = 0.0;
            float _2528 = 0.0;
            float _2529 = 0.0;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            uint _2533 = 0u;
            uint _2542;
            bool _2543;
            for (;;)
            {
                _2542 = texelFetch(g_lightClassification, int((((_2288 << 5u) + (_2274 << 9u)) + (_2533 << 2u)) >> 2u)).x;
                _2543 = _2542 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2543)
                {
                    frontier_phi_71_pred = _2532;
                    frontier_phi_71_pred_1 = _2531;
                    frontier_phi_71_pred_2 = _2530;
                    frontier_phi_71_pred_3 = _2529;
                    frontier_phi_71_pred_4 = _2528;
                    frontier_phi_71_pred_5 = _2527;
                }
                else
                {
                    float _2672;
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    uint _2678;
                    _2672 = _2527;
                    _2673 = _2528;
                    _2674 = _2529;
                    _2675 = _2530;
                    _2676 = _2531;
                    _2677 = _2532;
                    _2678 = _2542;
                    float _2599;
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    for (;;)
                    {
                        uint _2682 = uint(findLSB(_2678)) + (_2533 << 5u);
                        uint _2679 = (_2678 + 4294967295u) & _2678;
                        uint _2684 = _2682 * 48u;
                        vec4 _2698 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2684)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 3u)).x));
                        uint _2704 = (_2682 * 48u) + 4u;
                        vec4 _2717 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2704)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 3u)).x));
                        uint _2723 = (_2682 * 48u) + 8u;
                        vec3 _2734 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2723)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 2u)).x));
                        float _2738 = _2698.x - _1478;
                        float _2739 = _2698.y - _1479;
                        float _2740 = _2698.z - _1480;
                        float _2741 = dot(vec3(_2738, _2739, _2740), vec3(_2738, _2739, _2740));
                        float _2744 = inversesqrt(_2741);
                        float _2753 = 1.0 - (_2741 * _2698.w);
                        float _3971 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                        float _2754 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
                        float _2755 = sqrt(_2741) * _2717.w;
                        float _2758 = 1.39999997615814208984375 / (_2755 + 1.39999997615814208984375);
                        float _2759 = _2758 * _2758;
                        float _2762 = ((1.0 - _2759) * dot(vec3(_355, _358, _361), vec3(_2744 * _2738, _2744 * _2739, _2744 * _2740))) + _2759;
                        float _2765 = _2755 * _2755;
                        float _2769 = ((isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0))) * _2754) / ((_2765 * 0.699999988079071044921875) + 1.0);
                        float _2773 = (-0.0) - _1478;
                        float _2774 = (-0.0) - _1479;
                        float _2775 = (-0.0) - _1480;
                        float _2779 = inversesqrt(dot(vec3(_2773, _2774, _2775), vec3(_2773, _2774, _2775)));
                        float _2783 = dot(vec3(_355, _358, _361), vec3(_2779 * _2773, _2779 * _2774, _2779 * _2775));
                        float _3987 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
                        float _3998 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                        float _2787 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
                        float _2791 = (0.5 / (((isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) + 9.9999999392252902907785028219223e-09) + _2787)) * _2787;
                        float _4009 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
                        float _2800 = (((isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * 3.1415927410125732421875) / ((_2765 * 2.1991131305694580078125) + 3.141590118408203125)) * _2754;
                        _2602 = (_2769 * _2717.x) + _2675;
                        _2603 = (_2769 * _2717.y) + _2676;
                        _2604 = (_2769 * _2717.z) + _2677;
                        _2599 = (_2800 * _2734.x) + _2672;
                        _2600 = (_2800 * _2734.y) + _2673;
                        _2601 = (_2800 * _2734.z) + _2674;
                        if (_2679 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2672 = _2599;
                            _2673 = _2600;
                            _2674 = _2601;
                            _2675 = _2602;
                            _2676 = _2603;
                            _2677 = _2604;
                            _2678 = _2679;
                        }
                    }
                    frontier_phi_71_pred = _2604;
                    frontier_phi_71_pred_1 = _2603;
                    frontier_phi_71_pred_2 = _2602;
                    frontier_phi_71_pred_3 = _2601;
                    frontier_phi_71_pred_4 = _2600;
                    frontier_phi_71_pred_5 = _2599;
                }
                _2387 = frontier_phi_71_pred;
                _2385 = frontier_phi_71_pred_1;
                _2383 = frontier_phi_71_pred_2;
                _2381 = frontier_phi_71_pred_3;
                _2379 = frontier_phi_71_pred_4;
                _2377 = frontier_phi_71_pred_5;
                uint _2534 = _2533 + 1u;
                if (_2534 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2527 = _2377;
                    _2528 = _2379;
                    _2529 = _2381;
                    _2530 = _2383;
                    _2531 = _2385;
                    _2532 = _2387;
                    _2533 = _2534;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2376 = _2377;
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
            _2384 = _2385;
            _2386 = _2387;
        }
        uvec4 _2390 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2391 = _2390.z;
        uint _2393 = (_2391 >> 8u) & 15u;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        float _2508;
        if (((4294967295u << _2393) & _2294) == 0u)
        {
            _2498 = _2376;
            _2500 = _2378;
            _2502 = _2380;
            _2504 = _2382;
            _2506 = _2384;
            _2508 = _2386;
        }
        else
        {
            float _2523 = inversesqrt(dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480)));
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2393 < ((_2391 >> 12u) & 15u))
            {
                float _2499;
                float _2501;
                float _2503;
                float _2505;
                float _2507;
                float _2509;
                float _2655 = _2376;
                float _2656 = _2378;
                float _2657 = _2380;
                float _2658 = _2382;
                float _2659 = _2384;
                float _2660 = _2386;
                uint _2661 = _2393;
                uint _2670;
                bool _2671;
                for (;;)
                {
                    _2670 = texelFetch(g_lightClassification, int((((_2288 << 5u) + (_2274 << 9u)) + (_2661 << 2u)) >> 2u)).x;
                    _2671 = _2670 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2671)
                    {
                        frontier_phi_82_pred = _2660;
                        frontier_phi_82_pred_1 = _2659;
                        frontier_phi_82_pred_2 = _2658;
                        frontier_phi_82_pred_3 = _2657;
                        frontier_phi_82_pred_4 = _2656;
                        frontier_phi_82_pred_5 = _2655;
                    }
                    else
                    {
                        float _2814;
                        float _2815;
                        float _2816;
                        float _2817;
                        float _2818;
                        float _2819;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _2827 = _2655;
                        float _2828 = _2656;
                        float _2829 = _2657;
                        float _2830 = _2658;
                        float _2831 = _2659;
                        float _2832 = _2660;
                        uint _2833 = _2670;
                        uint _2834;
                        vec4 _2859;
                        float _2860;
                        vec4 _2875;
                        vec3 _2887;
                        vec4 _2903;
                        vec4 _2919;
                        float _2966;
                        bool _2967;
                        for (;;)
                        {
                            uint _2844 = ((_2661 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2833));
                            _2834 = (_2833 + 4294967295u) & _2833;
                            uint _2846 = _2844 * 40u;
                            _2859 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2846)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 3u)).x));
                            _2860 = _2859.w;
                            uint _2862 = (_2844 * 40u) + 4u;
                            _2875 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2862)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 3u)).x));
                            uint _2877 = (_2844 * 40u) + 8u;
                            _2887 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x));
                            uint _2890 = (_2844 * 40u) + 16u;
                            _2903 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2890)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 3u)).x));
                            uint _2906 = (_2844 * 40u) + 20u;
                            _2919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 3u)).x));
                            uint _2922 = (_2844 * 40u) + 24u;
                            vec4 _2935 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 3u)).x));
                            uint _2941 = (_2844 * 40u) + 28u;
                            vec4 _2954 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 3u)).x));
                            _2966 = fma(_1480, _2954.z, fma(_1479, _2954.y, _2954.x * _1478)) + _2954.w;
                            _2967 = !((fma(_1480, _2935.z, fma(_1479, _2935.y, _2935.x * _1478)) + _2935.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_2967)
                            {
                                float _2994 = _2859.x - _1478;
                                float _2995 = _2859.y - _1479;
                                float _2996 = _2859.z - _1480;
                                float _2997 = dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996));
                                float _3000 = inversesqrt(_2997);
                                float _3001 = _3000 * _2994;
                                float _3002 = _3000 * _2995;
                                float _3003 = _3000 * _2996;
                                float _3007 = 1.0 - (_2997 / (_2860 * _2860));
                                float _4020 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                                float _3008 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                                float _3012 = sqrt(_2997) * _2875.w;
                                float _3014 = 1.39999997615814208984375 / (_3012 + 1.39999997615814208984375);
                                float _3015 = _3014 * _3014;
                                float _3016 = 1.0 - _3015;
                                float _3018 = (_3016 * dot(vec3(_3001, _3002, _3003), vec3(_355, _358, _361))) + _3015;
                                float _3021 = _3012 * _3012;
                                float _3025 = (fma(_1480, _2903.z, fma(_1479, _2903.y, _2903.x * _1478)) + _2903.w) / _2966;
                                float _3026 = (fma(_1480, _2919.z, fma(_1479, _2919.y, _2919.x * _1478)) + _2919.w) / _2966;
                                float _3030 = 1.0 - dot(vec2(_3025, _3026), vec2(_3025, _3026));
                                float _4036 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                                float _3031 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
                                float _3032 = _3031 * (((isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0))) * _3008) / ((_3021 * 0.699999988079071044921875) + 1.0));
                                float _3042 = dot(vec3(_355, _358, _361), vec3((-0.0) - (_1478 * _2523), (-0.0) - (_1479 * _2523), (-0.0) - (_1480 * _2523)));
                                float _4047 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                                float _3050 = (_3016 * dot(vec3(_355, _358, _361), vec3(_3001, _3002, _3003))) + _3015;
                                float _4058 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                                float _3051 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
                                float _3055 = (0.5 / (((isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) + 9.9999999392252902907785028219223e-09) + _3051)) * _3051;
                                float _4069 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                                float _3062 = (_3031 * _3008) * (((isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * 3.1415927410125732421875) / ((_3021 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_88_pred = _3032 * _2875.z;
                                frontier_phi_88_pred_1 = _3032 * _2875.y;
                                frontier_phi_88_pred_2 = _3032 * _2875.x;
                                frontier_phi_88_pred_3 = _3062 * _2887.z;
                                frontier_phi_88_pred_4 = _3062 * _2887.y;
                                frontier_phi_88_pred_5 = _3062 * _2887.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3071 = frontier_phi_88_pred;
                            _3070 = frontier_phi_88_pred_1;
                            _3069 = frontier_phi_88_pred_2;
                            _3068 = frontier_phi_88_pred_3;
                            _3067 = frontier_phi_88_pred_4;
                            _3066 = frontier_phi_88_pred_5;
                            _2817 = _3069 + _2830;
                            _2818 = _3070 + _2831;
                            _2819 = _3071 + _2832;
                            _2814 = _3066 + _2827;
                            _2815 = _3067 + _2828;
                            _2816 = _3068 + _2829;
                            if (_2834 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2827 = _2814;
                                _2828 = _2815;
                                _2829 = _2816;
                                _2830 = _2817;
                                _2831 = _2818;
                                _2832 = _2819;
                                _2833 = _2834;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2819;
                        frontier_phi_82_pred_1 = _2818;
                        frontier_phi_82_pred_2 = _2817;
                        frontier_phi_82_pred_3 = _2816;
                        frontier_phi_82_pred_4 = _2815;
                        frontier_phi_82_pred_5 = _2814;
                    }
                    _2509 = frontier_phi_82_pred;
                    _2507 = frontier_phi_82_pred_1;
                    _2505 = frontier_phi_82_pred_2;
                    _2503 = frontier_phi_82_pred_3;
                    _2501 = frontier_phi_82_pred_4;
                    _2499 = frontier_phi_82_pred_5;
                    uint _2662 = _2661 + 1u;
                    if (_2662 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2655 = _2499;
                        _2656 = _2501;
                        _2657 = _2503;
                        _2658 = _2505;
                        _2659 = _2507;
                        _2660 = _2509;
                        _2661 = _2662;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2505;
                frontier_phi_63_64_ladder_1 = _2509;
                frontier_phi_63_64_ladder_2 = _2507;
                frontier_phi_63_64_ladder_3 = _2503;
                frontier_phi_63_64_ladder_4 = _2501;
                frontier_phi_63_64_ladder_5 = _2499;
            }
            else
            {
                frontier_phi_63_64_ladder = _2382;
                frontier_phi_63_64_ladder_1 = _2386;
                frontier_phi_63_64_ladder_2 = _2384;
                frontier_phi_63_64_ladder_3 = _2380;
                frontier_phi_63_64_ladder_4 = _2378;
                frontier_phi_63_64_ladder_5 = _2376;
            }
            _2498 = frontier_phi_63_64_ladder_5;
            _2500 = frontier_phi_63_64_ladder_4;
            _2502 = frontier_phi_63_64_ladder_3;
            _2504 = frontier_phi_63_64_ladder;
            _2506 = frontier_phi_63_64_ladder_2;
            _2508 = frontier_phi_63_64_ladder_1;
        }
        float _2513 = isnan(1.0) ? _400 : (isnan(_400) ? 1.0 : min(_400, 1.0));
        _2307 = (_2513 * _2504) + _1946;
        _2309 = (_2513 * _2506) + _1948;
        _2311 = (_2513 * _2508) + _1950;
        _2313 = ((_2498 * 0.039999999105930328369140625) * _2513) + _2188;
        _2315 = ((_2500 * 0.039999999105930328369140625) * _2513) + _2190;
        _2317 = ((_2502 * 0.039999999105930328369140625) * _2513) + _2192;
    }
    else
    {
        _2307 = _1946;
        _2309 = _1948;
        _2311 = _1950;
        _2313 = _2188;
        _2315 = _2190;
        _2317 = _2192;
    }
    float _4085 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _4096 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _4107 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _4118 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _2335 = ((isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_2307 + ((isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0))) * _400))) + ((_2313 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _1211)) * cbPerFrame._m0[3u].x);
    float _2336 = ((isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_2309 + ((isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0))) * _400))) + ((_2315 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _1211)) * cbPerFrame._m0[3u].x);
    float _2337 = ((isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_2311 + ((isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0))) * _400))) + ((_2317 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _1211)) * cbPerFrame._m0[3u].x);
    float _2342 = cbInstanceData._m0[_374 + 6u].w * (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)));
    float _2347 = _334 / cbSceneParam._m0[86u].x;
    float _2348 = _335 / cbSceneParam._m0[86u].y;
    vec4 _2362 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2347, _2348, (log2((isnan(cbSceneParam._m0[77u].w) ? _255 : (isnan(_255) ? cbSceneParam._m0[77u].w : min(_255, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2364 = _2362.x;
    float _2365 = _2362.y;
    float _2366 = _2362.z;
    float _2367 = _2362.w;
    float _2438;
    float _2440;
    float _2442;
    float _2444;
    if (_255 > cbSceneParam._m0[78u].w)
    {
        float _2401 = isnan(_255) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _255 : min(cbSceneParam._m0[80u].w, _255));
        float _2402 = _2401 / _255;
        float _2413 = _2402 * _307;
        float _2414 = _308 * _2402;
        float _2415 = (-0.0) - _2414;
        float _2416 = _2402 * _309;
        float _2418 = (cbSceneParam._m0[77u].w * _2415) / _2401;
        float _2419 = _2418 + cbSceneParam._m0[79u].w;
        float _2420 = cbSceneParam._m0[79u].w - _2414;
        float _2426 = sqrt(((_2413 * _2413) + (_2414 * _2414)) + (_2416 * _2416));
        float _2429 = (1.0 - (cbSceneParam._m0[77u].w / _2401)) * _2426;
        float _2434 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2436 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2612;
        if (abs((_2415 - _2418) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2612 = ((((_2419 > 0.0) ? exp2(_2434 * _2419) : (2.0 - exp2(_2436 * _2419))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2429;
        }
        else
        {
            float _2556 = 1.0 / cbSceneParam._m0[80u].x;
            float _2557 = isnan(_2420) ? _2419 : (isnan(_2419) ? _2420 : max(_2419, _2420));
            float _2558 = isnan(_2420) ? _2419 : (isnan(_2419) ? _2420 : min(_2419, _2420));
            float _2567 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : min(_2557, 0.0));
            float _2568 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : min(_2558, 0.0));
            _2612 = ((abs(_2426 / _2415) * cbSceneParam._m0[80u].y) * ((((_2567 - _2568) * 2.0) - ((exp2(_2434 * (isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0)))) - exp2(_2434 * (isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0))))) * _2556)) - ((exp2(_2436 * _2567) - exp2(_2436 * _2568)) * _2556))) + (_2429 * cbSceneParam._m0[80u].z);
        }
        vec4 _2614 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2347, _2348, 1.0), 0.0);
        float _2623 = exp2((_2612 * (-1.44269502162933349609375)) * (1.0 - _2614.w));
        float _2624 = log2(_2623);
        float _2640 = log2(_2367);
        _2438 = (exp2(_2640 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2624 * cbSceneParam._m0[78u].x)) * _2614.x) / cbSceneParam._m0[78u].x)) + _2364;
        _2440 = (exp2(_2640 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2624 * cbSceneParam._m0[78u].y)) * _2614.y) / cbSceneParam._m0[78u].y)) + _2365;
        _2442 = (exp2(_2640 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2624 * cbSceneParam._m0[78u].z)) * _2614.z) / cbSceneParam._m0[78u].z)) + _2366;
        _2444 = _2623 * _2367;
    }
    else
    {
        _2438 = _2364;
        _2440 = _2365;
        _2442 = _2366;
        _2444 = _2367;
    }
    bool _2650;
    vec4 _2454;
    vec4 _2477;
    float _2479;
    float _2483;
    float _2484;
    float _2485;
    float _2486;
    bool _2497;
    for (;;)
    {
        _2454 = cbMatDynParam._m0[0u];
        float _2456 = roundEven(_2454.y);
        bool _2457 = _2456 == 3.0;
        float _2459 = log2(_2444);
        float _2466 = exp2(_2459 * cbSceneParam._m0[78u].x) * _2335;
        float _2467 = exp2(_2459 * cbSceneParam._m0[78u].y) * _2336;
        float _2468 = exp2(_2459 * cbSceneParam._m0[78u].z) * _2337;
        float _2475 = _323 + (-0.5);
        _2477 = cbMtdParam._m0[1u];
        _2479 = _2477.y * _2475;
        float _2482 = (_2456 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2483 = _2482 * (_2457 ? _2466 : (_2466 + (cbSceneParam._m0[72u].w * _2438)));
        _2484 = _2482 * (_2457 ? _2467 : (_2467 + (cbSceneParam._m0[72u].w * _2440)));
        _2485 = _2482 * (_2457 ? _2468 : (_2468 + (cbSceneParam._m0[72u].w * _2442)));
        _2486 = _2475 * 0.999000012874603271484375;
        _2497 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2497)
        {
            if ((cbInstanceData._m0[_374 + 7u].x + _2486) < 0.5)
            {
                _2650 = true;
                break;
            }
        }
        uint _2591 = _376 + uint(_2454.w);
        if ((cbInstanceData._m0[_2591].w < 1.0) && ((cbInstanceData._m0[_2591].w + _2486) < 0.5))
        {
            _2650 = true;
            break;
        }
        if ((_2479 + _196) < _2477.x)
        {
            _2650 = true;
            break;
        }
        _2650 = false;
        break;
    }
    float _2805;
    if (_2650)
    {
        discard_state = true;
        _2805 = 0.0;
    }
    else
    {
        _2805 = _2342;
    }
    SV_Target.x = _2483;
    SV_Target.y = _2484;
    SV_Target.z = _2485;
    SV_Target.w = _2805;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2342;
    discard_exit();
}


