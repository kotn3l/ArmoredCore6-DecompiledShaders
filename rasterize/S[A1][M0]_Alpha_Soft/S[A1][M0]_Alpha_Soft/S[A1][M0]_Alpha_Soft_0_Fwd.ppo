#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A1_M0_Alpha_Soft_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _730;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _162 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _163 = _162 * NORMAL.x;
    float _164 = _162 * NORMAL.y;
    float _165 = _162 * NORMAL.z;
    vec4 _185 = texture(sampler2D(S_A1_M0_Alpha_Soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _192 = _185.x * cbMtdParam._m0[9u].x;
    float _193 = _185.y * cbMtdParam._m0[9u].y;
    float _194 = _185.z * cbMtdParam._m0[9u].z;
    vec4 _207 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _209 = _207.x;
    bool _216 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _233 = ((_216 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _209)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _209))) - POSITION_1.w) / cbMtdParam._m0[11u].x;
    float _2840 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _237 = (_185.w * TEXCOORD_1.z) * (isnan(1.0) ? _2840 : (isnan(_2840) ? 1.0 : min(_2840, 1.0)));
    float _241 = inversesqrt(dot(vec3(_163, _164, _165), vec3(_163, _164, _165)));
    float _242 = _241 * _163;
    float _243 = _241 * _164;
    float _244 = _241 * _165;
    float _2851 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _245 = isnan(1.0) ? _2851 : (isnan(_2851) ? 1.0 : min(_2851, 1.0));
    float _2862 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _2873 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _2884 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _253 = _216 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _295 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _305 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _295);
    float _306 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _295);
    float _307 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _295);
    float _311 = inversesqrt(dot(vec3(_305, _306, _307), vec3(_305, _306, _307)));
    float _312 = _305 * _311;
    float _313 = _306 * _311;
    float _314 = _307 * _311;
    float _319 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _320 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _341 = fma(_244, cbSceneParam._m0[5u].z, fma(_243, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _242));
    float _344 = fma(_244, cbSceneParam._m0[6u].z, fma(_243, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _242));
    float _347 = fma(_244, cbSceneParam._m0[7u].z, fma(_243, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _242));
    uint _360 = uint(roundEven(NORMAL.w)) * 13u;
    uint _363 = (_360 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _369 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2862 : (isnan(_2862) ? 1.0 : min(_2862, 1.0)))) * cbInstanceData._m0[_363].x;
    float _370 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2873 : (isnan(_2873) ? 1.0 : min(_2873, 1.0)))) * cbInstanceData._m0[_363].y;
    float _371 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2884 : (isnan(_2884) ? 1.0 : min(_2884, 1.0)))) * cbInstanceData._m0[_363].z;
    float _2895 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _372 = isnan(1.0) ? _2895 : (isnan(_2895) ? 1.0 : min(_2895, 1.0));
    float _2906 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _373 = isnan(1.0) ? _2906 : (isnan(_2906) ? 1.0 : min(_2906, 1.0));
    float _2917 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _374 = isnan(1.0) ? _2917 : (isnan(_2917) ? 1.0 : min(_2917, 1.0));
    vec4 _383 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _319, cbSceneParam._m0[86u].y * _320));
    float _386 = _383.x * TEXCOORD_1.w;
    float _387 = dot(vec3(_242, _243, _244), vec3(_312, _313, _314));
    float _390 = _387 * 2.0;
    float _395 = (_390 * _242) - _312;
    float _396 = (_390 * _243) - _313;
    float _397 = (_390 * _244) - _314;
    float _419 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _423 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _427 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _729;
    float _731;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    float _739;
    float _740;
    float _741;
    float _742;
    float _743;
    float _744;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _454 = fma(_427, cbModelParam._m0[26u].z, fma(_423, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _419));
        float _458 = fma(_427, cbModelParam._m0[27u].z, fma(_423, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _419));
        float _462 = fma(_427, cbModelParam._m0[28u].z, fma(_423, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _419));
        float _487 = _419 + _242;
        float _488 = _423 + _243;
        float _489 = _427 + _244;
        float _499 = fma(_489, cbModelParam._m0[26u].z, fma(_488, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _487)) - _454;
        float _500 = fma(_489, cbModelParam._m0[27u].z, fma(_488, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _487)) - _458;
        float _501 = fma(_489, cbModelParam._m0[28u].z, fma(_488, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _487)) - _462;
        float _505 = inversesqrt(dot(vec3(_499, _500, _501), vec3(_499, _500, _501)));
        float _518 = ((_505 * _499) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_454 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _519 = ((_505 * _500) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_458 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _520 = ((_505 * _501) / cbModelParam._m0[34u].z) + ((((((_462 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _523 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_518, _519, _520), 0.0);
        vec4 _530 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_518, _519, _520), 0.0);
        vec4 _537 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_518, _519, _520), 0.0);
        vec4 _544 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_518, _519, _520), 0.0);
        float _557 = exp2((_523.w + (-0.5)) * 20.0) * 2.0;
        float _558 = _557 * (_523.x + (-0.5));
        float _559 = _557 * (_523.y + (-0.5));
        float _560 = _557 * (_523.z + (-0.5));
        float _567 = exp2((_530.w + (-0.5)) * 20.0) * 2.0;
        float _568 = _567 * (_530.x + (-0.5));
        float _569 = _567 * (_530.y + (-0.5));
        float _570 = _567 * (_530.z + (-0.5));
        float _577 = exp2((_537.w + (-0.5)) * 20.0) * 2.0;
        float _578 = _577 * (_537.x + (-0.5));
        float _579 = _577 * (_537.y + (-0.5));
        float _580 = _577 * (_537.z + (-0.5));
        float _587 = exp2((_544.w + (-0.5)) * 20.0) * 2.0;
        float _588 = _587 * (_544.x + (-0.5));
        float _589 = _587 * (_544.y + (-0.5));
        float _590 = _587 * (_544.z + (-0.5));
        float _591 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
        float _592 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
        float _593 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
        float _594 = _558 * 0.5;
        float _595 = _568 * 0.5;
        float _596 = _578 * 0.5;
        float _597 = dot(vec3(_594, _595, _596), vec3(_594, _595, _596));
        float _602 = (_597 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_597);
        float _611 = (dot(vec3(_242, _243, _244), vec3(_602 * _594, _602 * _595, _602 * _596)) + 1.0) * 0.5;
        float _2943 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
        float _621 = sqrt(((_595 * _595) + (_594 * _594)) + (_596 * _596)) / (_591 + 9.9999997473787516355514526367188e-06);
        float _2954 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
        float _622 = isnan(1.0) ? _2954 : (isnan(_2954) ? 1.0 : min(_2954, 1.0));
        float _623 = _622 * 2.0;
        float _627 = (1.0 - _622) / (_622 + 1.0);
        float _2965 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
        float _628 = isnan(1.0) ? _2965 : (isnan(_2965) ? 1.0 : min(_2965, 1.0));
        float _637 = ((((1.0 - _628) * (_623 + 2.0)) * exp2(log2(isnan(1.0) ? _2943 : (isnan(_2943) ? 1.0 : min(_2943, 1.0))) * (_623 + 1.0))) + _628) * _591;
        float _638 = _559 * 0.5;
        float _639 = _569 * 0.5;
        float _640 = _579 * 0.5;
        float _641 = dot(vec3(_638, _639, _640), vec3(_638, _639, _640));
        float _646 = (_641 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_641);
        float _654 = (dot(vec3(_242, _243, _244), vec3(_646 * _638, _646 * _639, _646 * _640)) + 1.0) * 0.5;
        float _2976 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
        float _663 = sqrt(((_639 * _639) + (_638 * _638)) + (_640 * _640)) / (_592 + 9.9999997473787516355514526367188e-06);
        float _2987 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
        float _664 = isnan(1.0) ? _2987 : (isnan(_2987) ? 1.0 : min(_2987, 1.0));
        float _665 = _664 * 2.0;
        float _669 = (1.0 - _664) / (_664 + 1.0);
        float _2998 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
        float _670 = isnan(1.0) ? _2998 : (isnan(_2998) ? 1.0 : min(_2998, 1.0));
        float _679 = ((((1.0 - _670) * (_665 + 2.0)) * exp2(log2(isnan(1.0) ? _2976 : (isnan(_2976) ? 1.0 : min(_2976, 1.0))) * (_665 + 1.0))) + _670) * _592;
        float _680 = _560 * 0.5;
        float _681 = _570 * 0.5;
        float _682 = _580 * 0.5;
        float _683 = dot(vec3(_680, _681, _682), vec3(_680, _681, _682));
        float _688 = (_683 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_683);
        float _696 = (dot(vec3(_242, _243, _244), vec3(_688 * _680, _688 * _681, _688 * _682)) + 1.0) * 0.5;
        float _3009 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _705 = sqrt(((_681 * _681) + (_680 * _680)) + (_682 * _682)) / (_593 + 9.9999997473787516355514526367188e-06);
        float _3020 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _706 = isnan(1.0) ? _3020 : (isnan(_3020) ? 1.0 : min(_3020, 1.0));
        float _707 = _706 * 2.0;
        float _711 = (1.0 - _706) / (_706 + 1.0);
        float _3031 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _712 = isnan(1.0) ? _3031 : (isnan(_3031) ? 1.0 : min(_3031, 1.0));
        float _721 = ((((1.0 - _712) * (_707 + 2.0)) * exp2(log2(isnan(1.0) ? _3009 : (isnan(_3009) ? 1.0 : min(_3009, 1.0))) * (_707 + 1.0))) + _712) * _593;
        _729 = _560;
        _731 = _559;
        _732 = _558;
        _733 = _570;
        _734 = _569;
        _735 = _568;
        _736 = _580;
        _737 = _579;
        _738 = _578;
        _739 = _593;
        _740 = _592;
        _741 = _591;
        _742 = cbModelParam._m0[36u].z * (isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0)));
        _743 = cbModelParam._m0[36u].z * (isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0)));
        _744 = cbModelParam._m0[36u].z * (isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0)));
    }
    else
    {
        _729 = _730;
        _731 = _730;
        _732 = _730;
        _733 = _730;
        _734 = _730;
        _735 = _730;
        _736 = _730;
        _737 = _730;
        _738 = _730;
        _739 = _730;
        _740 = _730;
        _741 = _730;
        _742 = 0.0;
        _743 = 0.0;
        _744 = 0.0;
    }
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _770 = fma(_427, cbModelParam._m0[30u].z, fma(_423, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _419));
        float _774 = fma(_427, cbModelParam._m0[31u].z, fma(_423, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _419));
        float _778 = fma(_427, cbModelParam._m0[32u].z, fma(_423, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _419));
        float _801 = _419 + _242;
        float _802 = _423 + _243;
        float _803 = _427 + _244;
        float _813 = fma(_803, cbModelParam._m0[30u].z, fma(_802, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _801)) - _770;
        float _814 = fma(_803, cbModelParam._m0[31u].z, fma(_802, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _801)) - _774;
        float _815 = fma(_803, cbModelParam._m0[32u].z, fma(_802, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _801)) - _778;
        float _819 = inversesqrt(dot(vec3(_813, _814, _815), vec3(_813, _814, _815)));
        float _832 = ((_819 * _813) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_770 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _833 = ((_819 * _814) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_774 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _834 = ((_819 * _815) / cbModelParam._m0[35u].z) + ((((((_778 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        float _869 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_836.x + (-0.5));
        float _871 = _869 * (_836.y + (-0.5));
        float _872 = _869 * (_836.z + (-0.5));
        float _879 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_843.x + (-0.5));
        float _881 = _879 * (_843.y + (-0.5));
        float _882 = _879 * (_843.z + (-0.5));
        float _889 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_850.x + (-0.5));
        float _891 = _889 * (_850.y + (-0.5));
        float _892 = _889 * (_850.z + (-0.5));
        float _899 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_857.x + (-0.5));
        float _901 = _899 * (_857.y + (-0.5));
        float _902 = _899 * (_857.z + (-0.5));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = _870 * 0.5;
        float _907 = _880 * 0.5;
        float _908 = _890 * 0.5;
        float _909 = dot(vec3(_906, _907, _908), vec3(_906, _907, _908));
        float _914 = (_909 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_909);
        float _922 = (dot(vec3(_242, _243, _244), vec3(_914 * _906, _914 * _907, _914 * _908)) + 1.0) * 0.5;
        float _3072 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _931 = sqrt(((_907 * _907) + (_906 * _906)) + (_908 * _908)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3083 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3083 : (isnan(_3083) ? 1.0 : min(_3083, 1.0));
        float _933 = _932 * 2.0;
        float _937 = (1.0 - _932) / (_932 + 1.0);
        float _3094 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3094 : (isnan(_3094) ? 1.0 : min(_3094, 1.0));
        float _947 = ((((1.0 - _938) * (_933 + 2.0)) * exp2(log2(isnan(1.0) ? _3072 : (isnan(_3072) ? 1.0 : min(_3072, 1.0))) * (_933 + 1.0))) + _938) * _903;
        float _948 = _871 * 0.5;
        float _949 = _881 * 0.5;
        float _950 = _891 * 0.5;
        float _951 = dot(vec3(_948, _949, _950), vec3(_948, _949, _950));
        float _956 = (_951 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_951);
        float _964 = (dot(vec3(_242, _243, _244), vec3(_956 * _948, _956 * _949, _956 * _950)) + 1.0) * 0.5;
        float _3105 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _973 = sqrt(((_949 * _949) + (_948 * _948)) + (_950 * _950)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3116 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3127 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0))) * (_975 + 1.0))) + _980) * _904;
        float _990 = _872 * 0.5;
        float _991 = _882 * 0.5;
        float _992 = _892 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1006 = (dot(vec3(_242, _243, _244), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3138 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1015 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3149 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3160 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0))) * (_1017 + 1.0))) + _1022) * _905;
        _1039 = _872;
        _1040 = _871;
        _1041 = _870;
        _1042 = _882;
        _1043 = _881;
        _1044 = _880;
        _1045 = _892;
        _1046 = _891;
        _1047 = _890;
        _1048 = _905;
        _1049 = _904;
        _1050 = _903;
        _1051 = cbModelParam._m0[36u].w * (isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0)));
        _1052 = cbModelParam._m0[36u].w * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
        _1053 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
    }
    else
    {
        _1039 = _730;
        _1040 = _730;
        _1041 = _730;
        _1042 = _730;
        _1043 = _730;
        _1044 = _730;
        _1045 = _730;
        _1046 = _730;
        _1047 = _730;
        _1048 = _730;
        _1049 = _730;
        _1050 = _730;
        _1051 = 0.0;
        _1052 = 0.0;
        _1053 = 0.0;
    }
    float _1063 = (cbModelParam._m0[1u].x * (_1051 - _742)) + _742;
    float _1064 = (cbModelParam._m0[1u].x * (_1052 - _743)) + _743;
    float _1065 = (cbModelParam._m0[1u].x * (_1053 - _744)) + _744;
    float _1086 = fma(_1065, cbSceneParam._m0[89u].z, fma(_1064, cbSceneParam._m0[89u].y, _1063 * cbSceneParam._m0[89u].x));
    float _1089 = fma(_1065, cbSceneParam._m0[90u].z, fma(_1064, cbSceneParam._m0[90u].y, _1063 * cbSceneParam._m0[90u].x));
    float _1092 = fma(_1065, cbSceneParam._m0[91u].z, fma(_1064, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1063));
    float _1107 = _395 * 0.5;
    float _1108 = _396 * 0.5;
    float _1109 = _397 * 0.5;
    float _1110 = dot(vec4(_1107, _1108, _1109, 1.0), vec4(_1041, _1044, _1047, _1050));
    float _1113 = dot(vec4(_1107, _1108, _1109, 1.0), vec4(_1040, _1043, _1046, _1049));
    float _1116 = dot(vec4(_1107, _1108, _1109, 1.0), vec4(_1039, _1042, _1045, _1048));
    float _1150;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1123 = dot(vec4(_1107, _1108, _1109, 1.0), vec4(_729, _733, _736, _739));
        float _1127 = dot(vec4(_1107, _1108, _1109, 1.0), vec4(_731, _734, _737, _740));
        float _1131 = dot(vec4(_1107, _1108, _1109, 1.0), vec4(_732, _735, _738, _741));
        float _1138 = dot(vec4(cbModelParam._m0[39u]), vec4(_1107, _1108, _1109, 1.0));
        _1150 = dot(vec3(isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)), isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)), isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1138) ? 0.0 : (isnan(0.0) ? _1138 : max(0.0, _1138))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1150 = 1.0;
    }
    float _1161;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1152 = dot(vec4(cbModelParam._m0[40u]), vec4(_1107, _1108, _1109, 1.0));
        _1161 = dot(vec3(isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)), isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)), isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1152) ? 0.0 : (isnan(0.0) ? _1152 : max(0.0, _1152))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1161 = 1.0;
    }
    float _1165 = (_1161 * cbModelParam._m0[1u].x) + (_1150 * (1.0 - cbModelParam._m0[1u].x));
    float _1174 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1256;
    float _1258;
    float _1260;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1223 = fma(_427, cbModelParam._m0[13u].z, fma(_423, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _419)) + cbModelParam._m0[13u].w;
        float _1227 = fma(_427, cbModelParam._m0[14u].z, fma(_423, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _419)) + cbModelParam._m0[14u].w;
        float _1231 = fma(_427, cbModelParam._m0[15u].z, fma(_423, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _419)) + cbModelParam._m0[15u].w;
        float _1234 = fma(_397, cbModelParam._m0[13u].z, fma(_396, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _395));
        float _1237 = fma(_397, cbModelParam._m0[14u].z, fma(_396, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _395));
        float _1240 = fma(_397, cbModelParam._m0[15u].z, fma(_396, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _395));
        float _1266;
        if (_1234 > 0.0)
        {
            _1266 = abs((1.0 - _1223) / _1234);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1234 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1223 + 1.0) / _1234);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1266 = frontier_phi_14_12_ladder;
        }
        float _1473;
        if (_1237 > 0.0)
        {
            _1473 = abs((1.0 - _1227) / _1237);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1237 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1227 + 1.0) / _1237);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1473 = frontier_phi_23_19_ladder;
        }
        float _1662;
        if (_1240 > 0.0)
        {
            _1662 = abs((1.0 - _1231) / _1240);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1240 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1231 + 1.0) / _1240);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1662 = frontier_phi_35_30_ladder;
        }
        float _1664 = isnan(_1473) ? _1266 : (isnan(_1266) ? _1473 : min(_1266, _1473));
        float _1665 = isnan(_1662) ? _1664 : (isnan(_1664) ? _1662 : min(_1664, _1662));
        float _1669 = (_1665 * _1234) + _1223;
        float _1670 = (_1665 * _1237) + _1227;
        float _1671 = (_1665 * _1240) + _1231;
        float _1672 = _1665 * 9.9999997473787516355514526367188e-05;
        float _1674 = (-1.0) - _1672;
        float _1676 = _1672 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1671 > _1676) || ((_1671 < _1674) || ((_1670 > _1676) || ((_1670 < _1674) || ((_1669 < _1674) || (_1669 > _1676))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1768 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1671, cbModelParam._m0[9u].z, fma(_1670, cbModelParam._m0[9u].y, _1669 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1671, cbModelParam._m0[10u].z, fma(_1670, cbModelParam._m0[10u].y, _1669 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1671, cbModelParam._m0[11u].z, fma(_1670, cbModelParam._m0[11u].y, _1669 * cbModelParam._m0[11u].x))), _1174);
            frontier_phi_13_35_ladder = _1768.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1768.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1768.x * cbModelParam._m0[1u].y;
        }
        _1256 = frontier_phi_13_35_ladder_2;
        _1258 = frontier_phi_13_35_ladder_1;
        _1260 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1244 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_395, _396, _397), _1174);
        _1256 = _1244.x * cbModelParam._m0[1u].y;
        _1258 = _1244.y * cbModelParam._m0[1u].y;
        _1260 = _1244.z * cbModelParam._m0[1u].y;
    }
    float _1263 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1356;
    float _1358;
    float _1360;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1320 = fma(_427, cbModelParam._m0[21u].z, fma(_423, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _419)) + cbModelParam._m0[21u].w;
        float _1324 = fma(_427, cbModelParam._m0[22u].z, fma(_423, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _419)) + cbModelParam._m0[22u].w;
        float _1328 = fma(_427, cbModelParam._m0[23u].z, fma(_423, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _419)) + cbModelParam._m0[23u].w;
        float _1331 = fma(_397, cbModelParam._m0[21u].z, fma(_396, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _395));
        float _1334 = fma(_397, cbModelParam._m0[22u].z, fma(_396, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _395));
        float _1337 = fma(_397, cbModelParam._m0[23u].z, fma(_396, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _395));
        float _1478;
        if (_1331 > 0.0)
        {
            _1478 = abs((1.0 - _1320) / _1331);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1331 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1320 + 1.0) / _1331);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1478 = frontier_phi_25_21_ladder;
        }
        float _1689;
        if (_1334 > 0.0)
        {
            _1689 = abs((1.0 - _1324) / _1334);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1334 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1324 + 1.0) / _1334);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1689 = frontier_phi_37_32_ladder;
        }
        float _1840;
        if (_1337 > 0.0)
        {
            _1840 = abs((1.0 - _1328) / _1337);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1337 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1328 + 1.0) / _1337);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1840 = frontier_phi_46_43_ladder;
        }
        float _1842 = isnan(_1689) ? _1478 : (isnan(_1478) ? _1689 : min(_1478, _1689));
        float _1843 = isnan(_1840) ? _1842 : (isnan(_1842) ? _1840 : min(_1842, _1840));
        float _1847 = (_1843 * _1331) + _1320;
        float _1848 = (_1843 * _1334) + _1324;
        float _1849 = (_1843 * _1337) + _1328;
        float _1850 = _1843 * 9.9999997473787516355514526367188e-05;
        float _1851 = (-1.0) - _1850;
        float _1853 = _1850 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1849 > _1853) || ((_1849 < _1851) || ((_1848 > _1853) || ((_1848 < _1851) || ((_1847 < _1851) || (_1847 > _1853))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2050 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1849, cbModelParam._m0[17u].z, fma(_1848, cbModelParam._m0[17u].y, _1847 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1849, cbModelParam._m0[18u].z, fma(_1848, cbModelParam._m0[18u].y, _1847 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1849, cbModelParam._m0[19u].z, fma(_1848, cbModelParam._m0[19u].y, _1847 * cbModelParam._m0[19u].x))), _1263);
            frontier_phi_22_46_ladder = _2050.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2050.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2050.x * cbModelParam._m0[1u].z;
        }
        _1356 = frontier_phi_22_46_ladder_2;
        _1358 = frontier_phi_22_46_ladder_1;
        _1360 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1340 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_395, _396, _397), _1263);
        _1356 = _1340.x * cbModelParam._m0[1u].z;
        _1358 = _1340.y * cbModelParam._m0[1u].z;
        _1360 = _1340.z * cbModelParam._m0[1u].z;
    }
    float _1372 = _386 * 0.01200000010430812835693359375;
    float _1374 = _1372 * ((cbModelParam._m0[1u].w * (_1356 - _1256)) + _1256);
    float _1375 = _1372 * ((cbModelParam._m0[1u].w * (_1358 - _1258)) + _1258);
    float _1376 = _1372 * ((cbModelParam._m0[1u].w * (_1360 - _1260)) + _1260);
    float _1379 = fma(_1376, cbSceneParam._m0[89u].z, fma(_1375, cbSceneParam._m0[89u].y, _1374 * cbSceneParam._m0[89u].x));
    float _1382 = fma(_1376, cbSceneParam._m0[90u].z, fma(_1375, cbSceneParam._m0[90u].y, _1374 * cbSceneParam._m0[90u].x));
    float _1385 = fma(_1376, cbSceneParam._m0[91u].z, fma(_1375, cbSceneParam._m0[91u].y, _1374 * cbSceneParam._m0[91u].x));
    uvec4 _1395 = floatBitsToUint(cbInstanceData._m0[_360 + 5u]);
    uint _1397 = _1395.x * 14u;
    uint _1398 = _1397 + 13u;
    float _1405 = _386 + (-1.0);
    float _1411 = (cbLight._m0[_1398].x * _1405) + 1.0;
    float _1412 = (cbLight._m0[_1398].y * _1405) + 1.0;
    float _1413 = (cbLight._m0[_1398].z * _1405) + 1.0;
    float _1414 = (cbLight._m0[_1398].w * _1405) + 1.0;
    uint _1415 = _1397 + 5u;
    float _1421 = isnan(1.0) ? _1412 : (isnan(_1412) ? 1.0 : min(_1412, 1.0));
    uint _1425 = _1397 + 4u;
    float _1432 = isnan(1.0) ? _1411 : (isnan(_1411) ? 1.0 : min(_1411, 1.0));
    uint _1436 = _1397 | 1u;
    float _1447 = dot(vec3(cbLight._m0[_1397].xyz), vec3(_242, _243, _244));
    float _1450 = dot(vec3(cbLight._m0[_1436].xyz), vec3(_242, _243, _244));
    float _3296 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
    float _3307 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
    float _1455 = (isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0))) * 0.3183098733425140380859375;
    float _1457 = (isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0))) * 0.3183098733425140380859375;
    float _1464 = ((cbLight._m0[_1415].x * _1421) * _1457) + ((cbLight._m0[_1425].x * _1432) * _1455);
    float _1465 = ((_1421 * cbLight._m0[_1415].y) * _1457) + ((_1432 * cbLight._m0[_1425].y) * _1455);
    float _1466 = ((_1421 * cbLight._m0[_1415].z) * _1457) + ((_1432 * cbLight._m0[_1425].z) * _1455);
    uvec4 _1470 = floatBitsToUint(cbLight._m0[_1397 + 12u]);
    bool _1472 = _1470.x == 0u;
    float _1483;
    float _1485;
    float _1487;
    if (_1472)
    {
        _1483 = _1464;
        _1485 = _1465;
        _1487 = _1466;
    }
    else
    {
        uint _1491 = _1397 + 6u;
        float _1507 = (dot(vec3(cbLight._m0[_1397 + 2u].xyz), vec3(_242, _243, _244)) * 0.5) + 0.5;
        float _1508 = _1507 * _1507;
        float _3318 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0));
        float _1510 = isnan(1.0) ? _1413 : (isnan(_1413) ? 1.0 : min(_1413, 1.0));
        _1483 = (((cbLight._m0[_1491].x * 0.3183098733425140380859375) * _1509) * _1510) + _1464;
        _1485 = (((cbLight._m0[_1491].y * 0.3183098733425140380859375) * _1509) * _1510) + _1465;
        _1487 = (((cbLight._m0[_1491].z * 0.3183098733425140380859375) * _1509) * _1510) + _1466;
    }
    bool _1490 = _1470.y == 0u;
    float _1528;
    float _1530;
    float _1532;
    if (_1490)
    {
        _1528 = _1483;
        _1530 = _1485;
        _1532 = _1487;
    }
    else
    {
        uint _1633 = _1397 + 7u;
        float _1649 = (dot(vec3(cbLight._m0[_1397 + 3u].xyz), vec3(_242, _243, _244)) * 0.5) + 0.5;
        float _1650 = _1649 * _1649;
        float _3334 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
        float _1652 = isnan(1.0) ? _1414 : (isnan(_1414) ? 1.0 : min(_1414, 1.0));
        _1528 = (((cbLight._m0[_1633].x * 0.3183098733425140380859375) * _1651) * _1652) + _1483;
        _1530 = (((cbLight._m0[_1633].y * 0.3183098733425140380859375) * _1651) * _1652) + _1485;
        _1532 = (((cbLight._m0[_1633].z * 0.3183098733425140380859375) * _1651) * _1652) + _1487;
    }
    uint _1534 = _1397 + 8u;
    float _1540 = cbLight._m0[_1397].x + _312;
    float _1541 = cbLight._m0[_1397].y + _313;
    float _1542 = cbLight._m0[_1397].z + _314;
    float _1546 = inversesqrt(dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542)));
    float _1550 = dot(vec3(_242, _243, _244), vec3(cbLight._m0[_1397].xyz));
    float _3350 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
    float _1553 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
    float _3361 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _1554 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
    float _1555 = dot(vec3(cbLight._m0[_1397].xyz), vec3(_1540 * _1546, _1541 * _1546, _1542 * _1546));
    float _3372 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
    float _1566 = (exp2(log2(1.0 - (isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1572 = (0.5 / ((_1553 + 9.9999999392252902907785028219223e-09) + _1554)) * _1553;
    float _3383 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
    float _1574 = (isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))) * 0.31831014156341552734375;
    uint _1585 = _1397 + 9u;
    float _1591 = cbLight._m0[_1436].x + _312;
    float _1592 = cbLight._m0[_1436].y + _313;
    float _1593 = cbLight._m0[_1436].z + _314;
    float _1597 = inversesqrt(dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593)));
    float _1601 = dot(vec3(_242, _243, _244), vec3(cbLight._m0[_1436].xyz));
    float _3394 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
    float _1604 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
    float _1605 = dot(vec3(cbLight._m0[_1436].xyz), vec3(_1591 * _1597, _1592 * _1597, _1593 * _1597));
    float _3405 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
    float _1614 = (exp2(log2(1.0 - (isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1618 = (0.5 / ((_1604 + 9.9999999392252902907785028219223e-09) + _1554)) * _1604;
    float _3416 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
    float _1620 = (isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0))) * 0.31831014156341552734375;
    float _1630 = (((_1614 * cbLight._m0[_1585].x) * _1620) * _1421) + (((_1566 * cbLight._m0[_1534].x) * _1574) * _1432);
    float _1631 = (((_1614 * cbLight._m0[_1585].y) * _1620) * _1421) + (((_1566 * cbLight._m0[_1534].y) * _1574) * _1432);
    float _1632 = (((_1614 * cbLight._m0[_1585].z) * _1620) * _1421) + (((_1566 * cbLight._m0[_1534].z) * _1574) * _1432);
    float _1694;
    float _1696;
    float _1698;
    if (_1472)
    {
        _1694 = _1630;
        _1696 = _1631;
        _1698 = _1632;
    }
    else
    {
        uint _1700 = _1397 + 10u;
        uint _1706 = _1397 + 2u;
        float _1712 = cbLight._m0[_1706].x + _312;
        float _1713 = cbLight._m0[_1706].y + _313;
        float _1714 = cbLight._m0[_1706].z + _314;
        float _1718 = inversesqrt(dot(vec3(_1712, _1713, _1714), vec3(_1712, _1713, _1714)));
        float _1722 = dot(vec3(_242, _243, _244), vec3(cbLight._m0[_1706].xyz));
        float _3427 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1725 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _1726 = dot(vec3(cbLight._m0[_1706].xyz), vec3(_1712 * _1718, _1713 * _1718, _1714 * _1718));
        float _3438 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1735 = (exp2(log2(1.0 - (isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1739 = (0.5 / ((_1725 + 9.9999999392252902907785028219223e-09) + _1554)) * _1725;
        float _3449 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1741 = (isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))) * 0.31831014156341552734375;
        float _1742 = isnan(1.0) ? _1413 : (isnan(_1413) ? 1.0 : min(_1413, 1.0));
        _1694 = (((_1735 * cbLight._m0[_1700].x) * _1741) * _1742) + _1630;
        _1696 = (((_1735 * cbLight._m0[_1700].y) * _1741) * _1742) + _1631;
        _1698 = (((_1735 * cbLight._m0[_1700].z) * _1741) * _1742) + _1632;
    }
    float _1777;
    float _1779;
    float _1781;
    if (_1490)
    {
        _1777 = _1694;
        _1779 = _1696;
        _1781 = _1698;
    }
    else
    {
        uint _1788 = _1397 + 11u;
        uint _1794 = _1397 + 3u;
        float _1800 = cbLight._m0[_1794].x + _312;
        float _1801 = cbLight._m0[_1794].y + _313;
        float _1802 = cbLight._m0[_1794].z + _314;
        float _1806 = inversesqrt(dot(vec3(_1800, _1801, _1802), vec3(_1800, _1801, _1802)));
        float _1810 = dot(vec3(_242, _243, _244), vec3(cbLight._m0[_1794].xyz));
        float _3465 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1813 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _1814 = dot(vec3(cbLight._m0[_1794].xyz), vec3(_1800 * _1806, _1801 * _1806, _1802 * _1806));
        float _3476 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1823 = (exp2(log2(1.0 - (isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1827 = (0.5 / ((_1813 + 9.9999999392252902907785028219223e-09) + _1554)) * _1813;
        float _3487 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1829 = (isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) * 0.31831014156341552734375;
        float _1830 = isnan(1.0) ? _1414 : (isnan(_1414) ? 1.0 : min(_1414, 1.0));
        _1777 = (((_1823 * cbLight._m0[_1788].x) * _1829) * _1830) + _1694;
        _1779 = (((_1823 * cbLight._m0[_1788].y) * _1829) * _1830) + _1696;
        _1781 = (((_1823 * cbLight._m0[_1788].z) * _1829) * _1830) + _1698;
    }
    float _1965;
    float _1967;
    float _1969;
    float _1971;
    float _1973;
    float _1975;
    if (_1395.y == 0u)
    {
        float _1905 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1906 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1905;
        float _1907 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1905;
        float _1908 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1905;
        uvec4 _1920 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1921 = _1920.x;
        uint _1932 = uint((float(_1920.y) * floor(float(uint(cbSceneParam._m0[85u].y * _320) / _1921))) + floor(float(uint(cbSceneParam._m0[85u].x * _319) / _1921)));
        float _1942 = (log2(_1908 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1943 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        uint _1946 = uint(isnan(14.0) ? _1943 : (isnan(_1943) ? 14.0 : min(_1943, 14.0)));
        uvec4 _1951 = texelFetch(g_lightClusterGridBuffer, int(((_1946 << 2u) + (_1932 << 6u)) >> 2u));
        uint _1952 = _1951.x;
        uint _1953 = _1920.z;
        float _2055;
        float _2057;
        float _2059;
        float _2061;
        float _2063;
        float _2065;
        if (((((1u << ((_1953 >> 4u) & 15u)) + 4294967295u) & _1952) == 0u) || ((_1953 & 240u) == 0u))
        {
            _2055 = 0.0;
            _2057 = 0.0;
            _2059 = 0.0;
            _2061 = 0.0;
            _2063 = 0.0;
            _2065 = 0.0;
        }
        else
        {
            float _2056;
            float _2058;
            float _2060;
            float _2062;
            float _2064;
            float _2066;
            float _2197 = 0.0;
            float _2198 = 0.0;
            float _2199 = 0.0;
            float _2200 = 0.0;
            float _2201 = 0.0;
            float _2202 = 0.0;
            uint _2203 = 0u;
            uint _2212;
            bool _2213;
            for (;;)
            {
                _2212 = texelFetch(g_lightClassification, int((((_1946 << 5u) + (_1932 << 9u)) + (_2203 << 2u)) >> 2u)).x;
                _2213 = _2212 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2213)
                {
                    frontier_phi_61_pred = _2197;
                    frontier_phi_61_pred_1 = _2202;
                    frontier_phi_61_pred_2 = _2201;
                    frontier_phi_61_pred_3 = _2200;
                    frontier_phi_61_pred_4 = _2199;
                    frontier_phi_61_pred_5 = _2198;
                }
                else
                {
                    float _2321;
                    float _2322;
                    float _2323;
                    float _2324;
                    float _2325;
                    float _2326;
                    uint _2327;
                    _2321 = _2197;
                    _2322 = _2198;
                    _2323 = _2199;
                    _2324 = _2200;
                    _2325 = _2201;
                    _2326 = _2202;
                    _2327 = _2212;
                    float _2253;
                    float _2254;
                    float _2255;
                    float _2256;
                    float _2257;
                    float _2258;
                    for (;;)
                    {
                        uint _2331 = uint(findLSB(_2327)) + (_2203 << 5u);
                        uint _2328 = (_2327 + 4294967295u) & _2327;
                        uint _2333 = _2331 * 48u;
                        vec4 _2347 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2333)).x, texelFetch(g_PointLightRenderingBuffer, int(_2333 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2333 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2333 + 3u)).x));
                        uint _2353 = (_2331 * 48u) + 4u;
                        vec4 _2366 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2353)).x, texelFetch(g_PointLightRenderingBuffer, int(_2353 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2353 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2353 + 3u)).x));
                        uint _2372 = (_2331 * 48u) + 8u;
                        vec3 _2383 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2372)).x, texelFetch(g_PointLightRenderingBuffer, int(_2372 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2372 + 2u)).x));
                        float _2387 = _2347.x - _1906;
                        float _2388 = _2347.y - _1907;
                        float _2389 = _2347.z - _1908;
                        float _2390 = dot(vec3(_2387, _2388, _2389), vec3(_2387, _2388, _2389));
                        float _2393 = inversesqrt(_2390);
                        float _2402 = 1.0 - (_2390 * _2347.w);
                        float _3513 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
                        float _2403 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
                        float _2404 = sqrt(_2390) * _2366.w;
                        float _2407 = 1.39999997615814208984375 / (_2404 + 1.39999997615814208984375);
                        float _2408 = _2407 * _2407;
                        float _2411 = ((1.0 - _2408) * dot(vec3(_341, _344, _347), vec3(_2393 * _2387, _2393 * _2388, _2393 * _2389))) + _2408;
                        float _2414 = _2404 * _2404;
                        float _2418 = ((isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0))) * _2403) / ((_2414 * 0.699999988079071044921875) + 1.0);
                        float _2422 = (-0.0) - _1906;
                        float _2423 = (-0.0) - _1907;
                        float _2424 = (-0.0) - _1908;
                        float _2428 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
                        float _2432 = dot(vec3(_341, _344, _347), vec3(_2428 * _2422, _2428 * _2423, _2428 * _2424));
                        float _3529 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
                        float _3540 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
                        float _2436 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
                        float _2440 = (0.5 / (((isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) + 9.9999999392252902907785028219223e-09) + _2436)) * _2436;
                        float _3551 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
                        float _2449 = (((isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * 3.1415927410125732421875) / ((_2414 * 2.1991131305694580078125) + 3.141590118408203125)) * _2403;
                        _2256 = (_2418 * _2366.x) + _2324;
                        _2257 = (_2418 * _2366.y) + _2325;
                        _2258 = (_2418 * _2366.z) + _2326;
                        _2253 = (_2449 * _2383.x) + _2321;
                        _2254 = (_2449 * _2383.y) + _2322;
                        _2255 = (_2449 * _2383.z) + _2323;
                        if (_2328 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2321 = _2253;
                            _2322 = _2254;
                            _2323 = _2255;
                            _2324 = _2256;
                            _2325 = _2257;
                            _2326 = _2258;
                            _2327 = _2328;
                        }
                    }
                    frontier_phi_61_pred = _2253;
                    frontier_phi_61_pred_1 = _2258;
                    frontier_phi_61_pred_2 = _2257;
                    frontier_phi_61_pred_3 = _2256;
                    frontier_phi_61_pred_4 = _2255;
                    frontier_phi_61_pred_5 = _2254;
                }
                _2056 = frontier_phi_61_pred;
                _2066 = frontier_phi_61_pred_1;
                _2064 = frontier_phi_61_pred_2;
                _2062 = frontier_phi_61_pred_3;
                _2060 = frontier_phi_61_pred_4;
                _2058 = frontier_phi_61_pred_5;
                uint _2204 = _2203 + 1u;
                if (_2204 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2197 = _2056;
                    _2198 = _2058;
                    _2199 = _2060;
                    _2200 = _2062;
                    _2201 = _2064;
                    _2202 = _2066;
                    _2203 = _2204;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2055 = _2056;
            _2057 = _2058;
            _2059 = _2060;
            _2061 = _2062;
            _2063 = _2064;
            _2065 = _2066;
        }
        uvec4 _2069 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2070 = _2069.z;
        uint _2072 = (_2070 >> 8u) & 15u;
        float _2168;
        float _2170;
        float _2172;
        float _2174;
        float _2176;
        float _2178;
        if (((4294967295u << _2072) & _1952) == 0u)
        {
            _2168 = _2055;
            _2170 = _2057;
            _2172 = _2059;
            _2174 = _2061;
            _2176 = _2063;
            _2178 = _2065;
        }
        else
        {
            float _2193 = inversesqrt(dot(vec3(_1906, _1907, _1908), vec3(_1906, _1907, _1908)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2072 < ((_2070 >> 12u) & 15u))
            {
                float _2169;
                float _2171;
                float _2173;
                float _2175;
                float _2177;
                float _2179;
                float _2304 = _2055;
                float _2305 = _2057;
                float _2306 = _2059;
                float _2307 = _2061;
                float _2308 = _2063;
                float _2309 = _2065;
                uint _2310 = _2072;
                uint _2319;
                bool _2320;
                for (;;)
                {
                    _2319 = texelFetch(g_lightClassification, int((((_1946 << 5u) + (_1932 << 9u)) + (_2310 << 2u)) >> 2u)).x;
                    _2320 = _2319 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2320)
                    {
                        frontier_phi_67_pred = _2307;
                        frontier_phi_67_pred_1 = _2308;
                        frontier_phi_67_pred_2 = _2309;
                        frontier_phi_67_pred_3 = _2306;
                        frontier_phi_67_pred_4 = _2305;
                        frontier_phi_67_pred_5 = _2304;
                    }
                    else
                    {
                        float _2454;
                        float _2455;
                        float _2456;
                        float _2457;
                        float _2458;
                        float _2459;
                        float _2706;
                        float _2707;
                        float _2708;
                        float _2709;
                        float _2710;
                        float _2711;
                        float _2467 = _2304;
                        float _2468 = _2305;
                        float _2469 = _2306;
                        float _2470 = _2307;
                        float _2471 = _2308;
                        float _2472 = _2309;
                        uint _2473 = _2319;
                        uint _2474;
                        vec4 _2499;
                        float _2500;
                        vec4 _2515;
                        vec3 _2527;
                        vec4 _2543;
                        vec4 _2559;
                        float _2606;
                        bool _2607;
                        for (;;)
                        {
                            uint _2484 = ((_2310 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2473));
                            _2474 = (_2473 + 4294967295u) & _2473;
                            uint _2486 = _2484 * 40u;
                            _2499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2486 + 3u)).x));
                            _2500 = _2499.w;
                            uint _2502 = (_2484 * 40u) + 4u;
                            _2515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2502 + 3u)).x));
                            uint _2517 = (_2484 * 40u) + 8u;
                            _2527 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2517 + 2u)).x));
                            uint _2530 = (_2484 * 40u) + 16u;
                            _2543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2530 + 3u)).x));
                            uint _2546 = (_2484 * 40u) + 20u;
                            _2559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2546 + 3u)).x));
                            uint _2562 = (_2484 * 40u) + 24u;
                            vec4 _2575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2562 + 3u)).x));
                            uint _2581 = (_2484 * 40u) + 28u;
                            vec4 _2594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2581 + 3u)).x));
                            _2606 = fma(_1908, _2594.z, fma(_1907, _2594.y, _2594.x * _1906)) + _2594.w;
                            _2607 = !((fma(_1908, _2575.z, fma(_1907, _2575.y, _2575.x * _1906)) + _2575.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2607)
                            {
                                float _2634 = _2499.x - _1906;
                                float _2635 = _2499.y - _1907;
                                float _2636 = _2499.z - _1908;
                                float _2637 = dot(vec3(_2634, _2635, _2636), vec3(_2634, _2635, _2636));
                                float _2640 = inversesqrt(_2637);
                                float _2641 = _2640 * _2634;
                                float _2642 = _2640 * _2635;
                                float _2643 = _2640 * _2636;
                                float _2647 = 1.0 - (_2637 / (_2500 * _2500));
                                float _3562 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
                                float _2648 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
                                float _2652 = sqrt(_2637) * _2515.w;
                                float _2654 = 1.39999997615814208984375 / (_2652 + 1.39999997615814208984375);
                                float _2655 = _2654 * _2654;
                                float _2656 = 1.0 - _2655;
                                float _2658 = (_2656 * dot(vec3(_2641, _2642, _2643), vec3(_341, _344, _347))) + _2655;
                                float _2661 = _2652 * _2652;
                                float _2665 = (fma(_1908, _2543.z, fma(_1907, _2543.y, _2543.x * _1906)) + _2543.w) / _2606;
                                float _2666 = (fma(_1908, _2559.z, fma(_1907, _2559.y, _2559.x * _1906)) + _2559.w) / _2606;
                                float _2670 = 1.0 - dot(vec2(_2665, _2666), vec2(_2665, _2666));
                                float _3578 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
                                float _2671 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
                                float _2672 = _2671 * (((isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0))) * _2648) / ((_2661 * 0.699999988079071044921875) + 1.0));
                                float _2682 = dot(vec3(_341, _344, _347), vec3((-0.0) - (_1906 * _2193), (-0.0) - (_1907 * _2193), (-0.0) - (_1908 * _2193)));
                                float _3589 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
                                float _2690 = (_2656 * dot(vec3(_341, _344, _347), vec3(_2641, _2642, _2643))) + _2655;
                                float _3600 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
                                float _2691 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
                                float _2695 = (0.5 / (((isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) + 9.9999999392252902907785028219223e-09) + _2691)) * _2691;
                                float _3611 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
                                float _2702 = (_2671 * _2648) * (((isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * 3.1415927410125732421875) / ((_2661 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2702 * _2527.x;
                                frontier_phi_73_pred_1 = _2702 * _2527.y;
                                frontier_phi_73_pred_2 = _2672 * _2515.z;
                                frontier_phi_73_pred_3 = _2672 * _2515.y;
                                frontier_phi_73_pred_4 = _2672 * _2515.x;
                                frontier_phi_73_pred_5 = _2702 * _2527.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2706 = frontier_phi_73_pred;
                            _2707 = frontier_phi_73_pred_1;
                            _2711 = frontier_phi_73_pred_2;
                            _2710 = frontier_phi_73_pred_3;
                            _2709 = frontier_phi_73_pred_4;
                            _2708 = frontier_phi_73_pred_5;
                            _2457 = _2709 + _2470;
                            _2458 = _2710 + _2471;
                            _2459 = _2711 + _2472;
                            _2454 = _2706 + _2467;
                            _2455 = _2707 + _2468;
                            _2456 = _2708 + _2469;
                            if (_2474 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2467 = _2454;
                                _2468 = _2455;
                                _2469 = _2456;
                                _2470 = _2457;
                                _2471 = _2458;
                                _2472 = _2459;
                                _2473 = _2474;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2457;
                        frontier_phi_67_pred_1 = _2458;
                        frontier_phi_67_pred_2 = _2459;
                        frontier_phi_67_pred_3 = _2456;
                        frontier_phi_67_pred_4 = _2455;
                        frontier_phi_67_pred_5 = _2454;
                    }
                    _2175 = frontier_phi_67_pred;
                    _2177 = frontier_phi_67_pred_1;
                    _2179 = frontier_phi_67_pred_2;
                    _2173 = frontier_phi_67_pred_3;
                    _2171 = frontier_phi_67_pred_4;
                    _2169 = frontier_phi_67_pred_5;
                    uint _2311 = _2310 + 1u;
                    if (_2311 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2304 = _2169;
                        _2305 = _2171;
                        _2306 = _2173;
                        _2307 = _2175;
                        _2308 = _2177;
                        _2309 = _2179;
                        _2310 = _2311;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2177;
                frontier_phi_55_56_ladder_1 = _2179;
                frontier_phi_55_56_ladder_2 = _2175;
                frontier_phi_55_56_ladder_3 = _2173;
                frontier_phi_55_56_ladder_4 = _2171;
                frontier_phi_55_56_ladder_5 = _2169;
            }
            else
            {
                frontier_phi_55_56_ladder = _2063;
                frontier_phi_55_56_ladder_1 = _2065;
                frontier_phi_55_56_ladder_2 = _2061;
                frontier_phi_55_56_ladder_3 = _2059;
                frontier_phi_55_56_ladder_4 = _2057;
                frontier_phi_55_56_ladder_5 = _2055;
            }
            _2168 = frontier_phi_55_56_ladder_5;
            _2170 = frontier_phi_55_56_ladder_4;
            _2172 = frontier_phi_55_56_ladder_3;
            _2174 = frontier_phi_55_56_ladder_2;
            _2176 = frontier_phi_55_56_ladder;
            _2178 = frontier_phi_55_56_ladder_1;
        }
        float _2183 = isnan(1.0) ? _386 : (isnan(_386) ? 1.0 : min(_386, 1.0));
        _1965 = (_2183 * _2174) + _1528;
        _1967 = (_2183 * _2176) + _1530;
        _1969 = (_2183 * _2178) + _1532;
        _1971 = ((_2168 * 0.039999999105930328369140625) * _2183) + _1777;
        _1973 = ((_2170 * 0.039999999105930328369140625) * _2183) + _1779;
        _1975 = ((_2172 * 0.039999999105930328369140625) * _2183) + _1781;
    }
    else
    {
        _1965 = _1528;
        _1967 = _1530;
        _1969 = _1532;
        _1971 = _1777;
        _1973 = _1779;
        _1975 = _1781;
    }
    float _3627 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _3638 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3649 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3660 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _2000 = cbInstanceData._m0[_360 + 6u].w * (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0)));
    float _2005 = _319 / cbSceneParam._m0[86u].x;
    float _2006 = _320 / cbSceneParam._m0[86u].y;
    vec4 _2020 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2005, _2006, (log2((isnan(cbSceneParam._m0[77u].w) ? _253 : (isnan(_253) ? cbSceneParam._m0[77u].w : min(_253, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2022 = _2020.x;
    float _2023 = _2020.y;
    float _2024 = _2020.z;
    float _2025 = _2020.w;
    float _2117;
    float _2119;
    float _2121;
    float _2123;
    if (_253 > cbSceneParam._m0[78u].w)
    {
        float _2080 = isnan(_253) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _253 : min(cbSceneParam._m0[80u].w, _253));
        float _2081 = _2080 / _253;
        float _2092 = _2081 * _305;
        float _2093 = _306 * _2081;
        float _2094 = (-0.0) - _2093;
        float _2095 = _2081 * _307;
        float _2097 = (cbSceneParam._m0[77u].w * _2094) / _2080;
        float _2098 = _2097 + cbSceneParam._m0[79u].w;
        float _2099 = cbSceneParam._m0[79u].w - _2093;
        float _2105 = sqrt(((_2092 * _2092) + (_2093 * _2093)) + (_2095 * _2095));
        float _2108 = (1.0 - (cbSceneParam._m0[77u].w / _2080)) * _2105;
        float _2113 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2115 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2266;
        if (abs((_2094 - _2097) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2266 = ((((_2098 > 0.0) ? exp2(_2113 * _2098) : (2.0 - exp2(_2115 * _2098))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2108;
        }
        else
        {
            float _2226 = 1.0 / cbSceneParam._m0[80u].x;
            float _2227 = isnan(_2099) ? _2098 : (isnan(_2098) ? _2099 : max(_2098, _2099));
            float _2228 = isnan(_2099) ? _2098 : (isnan(_2098) ? _2099 : min(_2098, _2099));
            float _2237 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : min(_2227, 0.0));
            float _2238 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : min(_2228, 0.0));
            _2266 = ((abs(_2105 / _2094) * cbSceneParam._m0[80u].y) * ((((_2237 - _2238) * 2.0) - ((exp2(_2113 * (isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0)))) - exp2(_2113 * (isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0))))) * _2226)) - ((exp2(_2115 * _2237) - exp2(_2115 * _2238)) * _2226))) + (_2108 * cbSceneParam._m0[80u].z);
        }
        vec4 _2268 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2005, _2006, 1.0), 0.0);
        float _2277 = exp2((_2266 * (-1.44269502162933349609375)) * (1.0 - _2268.w));
        float _2278 = log2(_2277);
        float _2294 = log2(_2025);
        _2117 = (exp2(_2294 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2278 * cbSceneParam._m0[78u].x)) * _2268.x) / cbSceneParam._m0[78u].x)) + _2022;
        _2119 = (exp2(_2294 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2278 * cbSceneParam._m0[78u].y)) * _2268.y) / cbSceneParam._m0[78u].y)) + _2023;
        _2121 = (exp2(_2294 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2278 * cbSceneParam._m0[78u].z)) * _2268.z) / cbSceneParam._m0[78u].z)) + _2024;
        _2123 = _2277 * _2025;
    }
    else
    {
        _2117 = _2022;
        _2119 = _2023;
        _2121 = _2024;
        _2123 = _2025;
    }
    float _2135 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2136 = _2135 == 3.0;
    float _2138 = log2(_2123);
    float _2145 = exp2(_2138 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * (_1965 + ((isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0))) * _386))) + ((_1971 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _1165)) * cbPerFrame._m0[3u].x));
    float _2146 = exp2(_2138 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_1967 + ((isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0))) * _386))) + ((_1973 + ((isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))) * _1165)) * cbPerFrame._m0[3u].x));
    float _2147 = exp2(_2138 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * (_1969 + ((isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0))) * _386))) + ((_1975 + ((isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))) * _1165)) * cbPerFrame._m0[3u].x));
    float _2156 = (_2135 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2156 * (_2136 ? _2145 : (_2145 + (cbSceneParam._m0[72u].w * _2117)));
    SV_Target.y = _2156 * (_2136 ? _2146 : (_2146 + (cbSceneParam._m0[72u].w * _2119)));
    SV_Target.z = _2156 * (_2136 ? _2147 : (_2147 + (cbSceneParam._m0[72u].w * _2121)));
    SV_Target.w = _2000;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2000;
}


