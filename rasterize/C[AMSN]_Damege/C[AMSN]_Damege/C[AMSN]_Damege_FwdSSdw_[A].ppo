#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[18];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1003;
float _3456;
float _3457;
float _3458;
float _3459;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = _208 * NORMAL.x;
    float _210 = _208 * NORMAL.y;
    float _211 = _208 * NORMAL.z;
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223;
    float _224;
    float _225;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
    }
    else
    {
        _223 = _209;
        _224 = _210;
        _225 = _211;
    }
    vec4 _243 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _246 = _243.x;
    float _247 = _243.y;
    float _248 = _243.z;
    float _249 = _243.w;
    vec4 _261 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _266 = _261.w;
    float _272 = (((cbMatDynParam._m0[17u].x * 10.0) + (-1.0)) + _266) * _266;
    vec4 _285 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_7, SS_ClampLinear), vec2((_272 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_272 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _287 = _285.x;
    float _288 = _285.y;
    float _289 = _285.z;
    float _296 = ((_287 - _246) * cbMatDynParam._m0[17u].x) + _246;
    float _297 = ((_288 - _247) * cbMatDynParam._m0[17u].x) + _247;
    float _298 = ((_289 - _248) * cbMatDynParam._m0[17u].x) + _248;
    float _305 = ((_261.x - _296) * cbMatDynParam._m0[17u].x) + _296;
    float _306 = ((_261.y - _297) * cbMatDynParam._m0[17u].x) + _297;
    float _307 = ((_261.z - _298) * cbMatDynParam._m0[17u].x) + _298;
    vec4 _323 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _325 = _323.x;
    vec4 _339 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _344 = (_325 + cbMtdParam._m0[9u].x) + ((_339.x - _325) * cbMatDynParam._m0[17u].x);
    vec4 _356 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _358 = _356.x;
    float _359 = _356.y;
    float _360 = _356.z;
    vec4 _373 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _386 = ((_373.z - _360) * cbMatDynParam._m0[17u].x) + _360;
    float _390 = ((((_373.x - _358) * cbMatDynParam._m0[17u].x) + _358) * 2.0) + (-1.0);
    float _391 = ((((_373.y - _359) * cbMatDynParam._m0[17u].x) + _359) * 2.0) + (-1.0);
    float _392 = dot(vec2(_390, _391), vec2(_390, _391));
    float _3468 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _398 = sqrt(1.0 - (isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))));
    float _405 = fma(_398, _223, fma(_391, _215 * TANGENT.x, (_201 * _194) * _390));
    float _408 = fma(_398, _224, fma(_391, _215 * TANGENT.y, (_201 * _195) * _390));
    float _411 = fma(_398, _225, fma(_391, _215 * TANGENT.z, (_201 * _196) * _390));
    float _415 = inversesqrt(dot(vec3(_405, _408, _411), vec3(_405, _408, _411)));
    float _416 = _415 * _405;
    float _417 = _415 * _408;
    float _418 = _415 * _411;
    float _3479 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _419 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
    float _3490 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _420 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
    float _3501 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3512 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _3523 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3534 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _424 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _440 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _482 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _492 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _482);
    float _493 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _482);
    float _494 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _482);
    float _498 = inversesqrt(dot(vec3(_492, _493, _494), vec3(_492, _493, _494)));
    float _499 = _492 * _498;
    float _500 = _493 * _498;
    float _501 = _494 * _498;
    vec4 _506 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _508 = _506.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _682 = sqrt(((_492 * _492) + (_493 * _493)) + (_494 * _494));
        float _688 = (cbMatDynParam._m0[5u].x * _682) + cbMatDynParam._m0[5u].y;
        float _3545 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _689 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _693 = (cbMatDynParam._m0[5u].z * _682) + cbMatDynParam._m0[5u].w;
        float _3556 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) - _689)) + _689) < ((_508 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _519 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _520 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _539 = fma(_418, cbSceneParam._m0[5u].z, fma(_417, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _416));
    float _542 = fma(_418, cbSceneParam._m0[6u].z, fma(_417, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _416));
    float _545 = fma(_418, cbSceneParam._m0[7u].z, fma(_417, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _416));
    uint _558 = uint(roundEven(NORMAL.w)) * 13u;
    uint _560 = _558 + 9u;
    uint _561 = _560 + uint(cbMatDynParam._m0[0u].w);
    float _567 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0)))) * cbInstanceData._m0[_561].x;
    float _568 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0)))) * cbInstanceData._m0[_561].y;
    float _569 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0)))) * cbInstanceData._m0[_561].z;
    float _3567 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _570 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _3578 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _571 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _3589 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _572 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    float _573 = 1.0 - _424;
    float _574 = _570 * _573;
    float _575 = _571 * _573;
    float _576 = _572 * _573;
    float _581 = (_570 + (-0.039999999105930328369140625)) * _424;
    float _582 = (_571 + (-0.039999999105930328369140625)) * _424;
    float _583 = (_572 + (-0.039999999105930328369140625)) * _424;
    float _584 = _581 + 0.039999999105930328369140625;
    float _586 = _582 + 0.039999999105930328369140625;
    float _587 = _583 + 0.039999999105930328369140625;
    vec4 _596 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _519, cbSceneParam._m0[86u].y * _520));
    float _599 = _596.x * TEXCOORD.z;
    float _600 = dot(vec3(_416, _417, _418), vec3(_499, _500, _501));
    float _603 = _600 * 2.0;
    float _607 = (_603 * _416) - _499;
    float _608 = (_603 * _417) - _500;
    float _609 = (_603 * _418) - _501;
    float _613 = abs(dot(vec3(_499, _500, _501), vec3(_416, _417, _418)));
    float _3600 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _615 = sqrt(_420);
    float _628 = exp2((_615 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_615 * 3.0));
    float _634 = (1.0 - _628) * ((_615 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _635 = _628 * _615;
    float _663 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _667 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _671 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1002;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _727 = fma(_671, cbModelParam._m0[26u].z, fma(_667, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _663));
        float _731 = fma(_671, cbModelParam._m0[27u].z, fma(_667, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _663));
        float _735 = fma(_671, cbModelParam._m0[28u].z, fma(_667, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _663));
        float _760 = _663 + _416;
        float _761 = _667 + _417;
        float _762 = _671 + _418;
        float _772 = fma(_762, cbModelParam._m0[26u].z, fma(_761, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _760)) - _727;
        float _773 = fma(_762, cbModelParam._m0[27u].z, fma(_761, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _760)) - _731;
        float _774 = fma(_762, cbModelParam._m0[28u].z, fma(_761, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _760)) - _735;
        float _778 = inversesqrt(dot(vec3(_772, _773, _774), vec3(_772, _773, _774)));
        float _791 = ((_778 * _772) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_727 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _792 = ((_778 * _773) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_731 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _793 = ((_778 * _774) / cbModelParam._m0[34u].z) + ((((((_735 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _796 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_791, _792, _793), 0.0);
        vec4 _803 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_791, _792, _793), 0.0);
        vec4 _810 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_791, _792, _793), 0.0);
        vec4 _817 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_791, _792, _793), 0.0);
        float _830 = exp2((_796.w + (-0.5)) * 20.0) * 2.0;
        float _831 = _830 * (_796.x + (-0.5));
        float _832 = _830 * (_796.y + (-0.5));
        float _833 = _830 * (_796.z + (-0.5));
        float _840 = exp2((_803.w + (-0.5)) * 20.0) * 2.0;
        float _841 = _840 * (_803.x + (-0.5));
        float _842 = _840 * (_803.y + (-0.5));
        float _843 = _840 * (_803.z + (-0.5));
        float _850 = exp2((_810.w + (-0.5)) * 20.0) * 2.0;
        float _851 = _850 * (_810.x + (-0.5));
        float _852 = _850 * (_810.y + (-0.5));
        float _853 = _850 * (_810.z + (-0.5));
        float _860 = exp2((_817.w + (-0.5)) * 20.0) * 2.0;
        float _861 = _860 * (_817.x + (-0.5));
        float _862 = _860 * (_817.y + (-0.5));
        float _863 = _860 * (_817.z + (-0.5));
        float _864 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _865 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _866 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _867 = _831 * 0.5;
        float _868 = _841 * 0.5;
        float _869 = _851 * 0.5;
        float _870 = dot(vec3(_867, _868, _869), vec3(_867, _868, _869));
        float _875 = (_870 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_870);
        float _884 = (dot(vec3(_416, _417, _418), vec3(_875 * _867, _875 * _868, _875 * _869)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _894 = sqrt(((_868 * _868) + (_867 * _867)) + (_869 * _869)) / (_864 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _896 = _895 * 2.0;
        float _900 = (1.0 - _895) / (_895 + 1.0);
        float _3648 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _910 = ((((1.0 - _901) * (_896 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_896 + 1.0))) + _901) * _864;
        float _911 = _832 * 0.5;
        float _912 = _842 * 0.5;
        float _913 = _852 * 0.5;
        float _914 = dot(vec3(_911, _912, _913), vec3(_911, _912, _913));
        float _919 = (_914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_914);
        float _927 = (dot(vec3(_416, _417, _418), vec3(_919 * _911, _919 * _912, _919 * _913)) + 1.0) * 0.5;
        float _3659 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _936 = sqrt(((_912 * _912) + (_911 * _911)) + (_913 * _913)) / (_865 + 9.9999997473787516355514526367188e-06);
        float _3670 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3681 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_938 + 1.0))) + _943) * _865;
        float _953 = _833 * 0.5;
        float _954 = _843 * 0.5;
        float _955 = _853 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _969 = (dot(vec3(_416, _417, _418), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3692 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _978 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_866 + 9.9999997473787516355514526367188e-06);
        float _3703 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3714 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_980 + 1.0))) + _985) * _866;
        _1002 = _833;
        _1004 = _832;
        _1005 = _831;
        _1006 = _843;
        _1007 = _842;
        _1008 = _841;
        _1009 = _853;
        _1010 = _852;
        _1011 = _851;
        _1012 = _866;
        _1013 = _865;
        _1014 = _864;
        _1015 = cbModelParam._m0[36u].z * (isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0)));
        _1016 = cbModelParam._m0[36u].z * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
        _1017 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
    }
    else
    {
        _1002 = _1003;
        _1004 = _1003;
        _1005 = _1003;
        _1006 = _1003;
        _1007 = _1003;
        _1008 = _1003;
        _1009 = _1003;
        _1010 = _1003;
        _1011 = _1003;
        _1012 = _1003;
        _1013 = _1003;
        _1014 = _1003;
        _1015 = 0.0;
        _1016 = 0.0;
        _1017 = 0.0;
    }
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1046 = fma(_671, cbModelParam._m0[30u].z, fma(_667, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _663));
        float _1050 = fma(_671, cbModelParam._m0[31u].z, fma(_667, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _663));
        float _1054 = fma(_671, cbModelParam._m0[32u].z, fma(_667, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _663));
        float _1077 = _663 + _416;
        float _1078 = _667 + _417;
        float _1079 = _671 + _418;
        float _1089 = fma(_1079, cbModelParam._m0[30u].z, fma(_1078, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1077)) - _1046;
        float _1090 = fma(_1079, cbModelParam._m0[31u].z, fma(_1078, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1077)) - _1050;
        float _1091 = fma(_1079, cbModelParam._m0[32u].z, fma(_1078, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1077)) - _1054;
        float _1095 = inversesqrt(dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091)));
        float _1108 = ((_1095 * _1089) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1046 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1095 * _1090) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1050 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1110 = ((_1095 * _1091) / cbModelParam._m0[35u].z) + ((((((_1054 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        float _1145 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1112.x + (-0.5));
        float _1147 = _1145 * (_1112.y + (-0.5));
        float _1148 = _1145 * (_1112.z + (-0.5));
        float _1155 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1119.x + (-0.5));
        float _1157 = _1155 * (_1119.y + (-0.5));
        float _1158 = _1155 * (_1119.z + (-0.5));
        float _1165 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1126.x + (-0.5));
        float _1167 = _1165 * (_1126.y + (-0.5));
        float _1168 = _1165 * (_1126.z + (-0.5));
        float _1175 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1133.x + (-0.5));
        float _1177 = _1175 * (_1133.y + (-0.5));
        float _1178 = _1175 * (_1133.z + (-0.5));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = _1146 * 0.5;
        float _1183 = _1156 * 0.5;
        float _1184 = _1166 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1198 = (dot(vec3(_416, _417, _418), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1207 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _3777 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1209 + 1.0))) + _1214) * _1179;
        float _1224 = _1147 * 0.5;
        float _1225 = _1157 * 0.5;
        float _1226 = _1167 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_416, _417, _418), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _3810 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1251 + 1.0))) + _1256) * _1180;
        float _1266 = _1148 * 0.5;
        float _1267 = _1158 * 0.5;
        float _1268 = _1168 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_416, _417, _418), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _3843 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1293 + 1.0))) + _1298) * _1181;
        _1315 = _1148;
        _1316 = _1147;
        _1317 = _1146;
        _1318 = _1158;
        _1319 = _1157;
        _1320 = _1156;
        _1321 = _1168;
        _1322 = _1167;
        _1323 = _1166;
        _1324 = _1181;
        _1325 = _1180;
        _1326 = _1179;
        _1327 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
        _1328 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
        _1329 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
    }
    else
    {
        _1315 = _1003;
        _1316 = _1003;
        _1317 = _1003;
        _1318 = _1003;
        _1319 = _1003;
        _1320 = _1003;
        _1321 = _1003;
        _1322 = _1003;
        _1323 = _1003;
        _1324 = _1003;
        _1325 = _1003;
        _1326 = _1003;
        _1327 = 0.0;
        _1328 = 0.0;
        _1329 = 0.0;
    }
    float _1339 = (cbModelParam._m0[1u].x * (_1327 - _1015)) + _1015;
    float _1340 = (cbModelParam._m0[1u].x * (_1328 - _1016)) + _1016;
    float _1341 = (cbModelParam._m0[1u].x * (_1329 - _1017)) + _1017;
    float _1362 = fma(_1341, cbSceneParam._m0[89u].z, fma(_1340, cbSceneParam._m0[89u].y, _1339 * cbSceneParam._m0[89u].x));
    float _1365 = fma(_1341, cbSceneParam._m0[90u].z, fma(_1340, cbSceneParam._m0[90u].y, _1339 * cbSceneParam._m0[90u].x));
    float _1368 = fma(_1341, cbSceneParam._m0[91u].z, fma(_1340, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1339));
    float _1383 = _607 * 0.5;
    float _1384 = _608 * 0.5;
    float _1385 = _609 * 0.5;
    float _1386 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1317, _1320, _1323, _1326));
    float _1389 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1316, _1319, _1322, _1325));
    float _1392 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1315, _1318, _1321, _1324));
    float _1426;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1399 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1002, _1006, _1009, _1012));
        float _1403 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1004, _1007, _1010, _1013));
        float _1407 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1005, _1008, _1011, _1014));
        float _1414 = dot(vec4(cbModelParam._m0[39u]), vec4(_1383, _1384, _1385, 1.0));
        _1426 = dot(vec3(isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)), isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)), isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1414) ? 0.0 : (isnan(0.0) ? _1414 : max(0.0, _1414))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1426 = 1.0;
    }
    float _1437;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1428 = dot(vec4(cbModelParam._m0[40u]), vec4(_1383, _1384, _1385, 1.0));
        _1437 = dot(vec3(isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)), isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)), isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1428) ? 0.0 : (isnan(0.0) ? _1428 : max(0.0, _1428))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1437 = 1.0;
    }
    float _1441 = (_1437 * cbModelParam._m0[1u].x) + (_1426 * (1.0 - cbModelParam._m0[1u].x));
    float _1451 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _420);
    float _1452 = isnan(_1451) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1451 : min(cbModelParam._m0[25u].z, _1451));
    float _1534;
    float _1536;
    float _1538;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1501 = fma(_671, cbModelParam._m0[13u].z, fma(_667, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _663)) + cbModelParam._m0[13u].w;
        float _1505 = fma(_671, cbModelParam._m0[14u].z, fma(_667, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _663)) + cbModelParam._m0[14u].w;
        float _1509 = fma(_671, cbModelParam._m0[15u].z, fma(_667, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _663)) + cbModelParam._m0[15u].w;
        float _1512 = fma(_609, cbModelParam._m0[13u].z, fma(_608, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _607));
        float _1515 = fma(_609, cbModelParam._m0[14u].z, fma(_608, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _607));
        float _1518 = fma(_609, cbModelParam._m0[15u].z, fma(_608, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _607));
        float _1546;
        if (_1512 > 0.0)
        {
            _1546 = abs((1.0 - _1501) / _1512);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1501 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1546 = frontier_phi_19_17_ladder;
        }
        float _1773;
        if (_1515 > 0.0)
        {
            _1773 = abs((1.0 - _1505) / _1515);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1505 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1773 = frontier_phi_28_24_ladder;
        }
        float _2030;
        if (_1518 > 0.0)
        {
            _2030 = abs((1.0 - _1509) / _1518);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1509 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2030 = frontier_phi_40_35_ladder;
        }
        float _2032 = isnan(_1773) ? _1546 : (isnan(_1546) ? _1773 : min(_1546, _1773));
        float _2033 = isnan(_2030) ? _2032 : (isnan(_2032) ? _2030 : min(_2032, _2030));
        float _2037 = (_2033 * _1512) + _1501;
        float _2038 = (_2033 * _1515) + _1505;
        float _2039 = (_2033 * _1518) + _1509;
        float _2040 = _2033 * 9.9999997473787516355514526367188e-05;
        float _2042 = (-1.0) - _2040;
        float _2044 = _2040 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2039 > _2044) || ((_2039 < _2042) || ((_2038 > _2044) || ((_2038 < _2042) || ((_2037 < _2042) || (_2037 > _2044))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2167 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2039, cbModelParam._m0[9u].z, fma(_2038, cbModelParam._m0[9u].y, _2037 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2039, cbModelParam._m0[10u].z, fma(_2038, cbModelParam._m0[10u].y, _2037 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2039, cbModelParam._m0[11u].z, fma(_2038, cbModelParam._m0[11u].y, _2037 * cbModelParam._m0[11u].x))), _1452);
            frontier_phi_18_40_ladder = _2167.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2167.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2167.x * cbModelParam._m0[1u].y;
        }
        _1534 = frontier_phi_18_40_ladder_2;
        _1536 = frontier_phi_18_40_ladder_1;
        _1538 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1522 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_607, _608, _609), _1452);
        _1534 = _1522.x * cbModelParam._m0[1u].y;
        _1536 = _1522.y * cbModelParam._m0[1u].y;
        _1538 = _1522.z * cbModelParam._m0[1u].y;
    }
    float _1542 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _420);
    float _1543 = isnan(_1542) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1542 : min(cbModelParam._m0[25u].w, _1542));
    float _1635;
    float _1637;
    float _1639;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1599 = fma(_671, cbModelParam._m0[21u].z, fma(_667, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _663)) + cbModelParam._m0[21u].w;
        float _1603 = fma(_671, cbModelParam._m0[22u].z, fma(_667, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _663)) + cbModelParam._m0[22u].w;
        float _1607 = fma(_671, cbModelParam._m0[23u].z, fma(_667, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _663)) + cbModelParam._m0[23u].w;
        float _1610 = fma(_609, cbModelParam._m0[21u].z, fma(_608, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _607));
        float _1613 = fma(_609, cbModelParam._m0[22u].z, fma(_608, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _607));
        float _1616 = fma(_609, cbModelParam._m0[23u].z, fma(_608, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _607));
        float _1778;
        if (_1610 > 0.0)
        {
            _1778 = abs((1.0 - _1599) / _1610);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1599 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1778 = frontier_phi_30_26_ladder;
        }
        float _2057;
        if (_1613 > 0.0)
        {
            _2057 = abs((1.0 - _1603) / _1613);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1603 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2057 = frontier_phi_42_37_ladder;
        }
        float _2270;
        if (_1616 > 0.0)
        {
            _2270 = abs((1.0 - _1607) / _1616);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1607 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2270 = frontier_phi_51_48_ladder;
        }
        float _2272 = isnan(_2057) ? _1778 : (isnan(_1778) ? _2057 : min(_1778, _2057));
        float _2273 = isnan(_2270) ? _2272 : (isnan(_2272) ? _2270 : min(_2272, _2270));
        float _2277 = (_2273 * _1610) + _1599;
        float _2278 = (_2273 * _1613) + _1603;
        float _2279 = (_2273 * _1616) + _1607;
        float _2280 = _2273 * 9.9999997473787516355514526367188e-05;
        float _2281 = (-1.0) - _2280;
        float _2283 = _2280 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2279 > _2283) || ((_2279 < _2281) || ((_2278 > _2283) || ((_2278 < _2281) || ((_2277 < _2281) || (_2277 > _2283))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2508 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2279, cbModelParam._m0[17u].z, fma(_2278, cbModelParam._m0[17u].y, _2277 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2279, cbModelParam._m0[18u].z, fma(_2278, cbModelParam._m0[18u].y, _2277 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2279, cbModelParam._m0[19u].z, fma(_2278, cbModelParam._m0[19u].y, _2277 * cbModelParam._m0[19u].x))), _1543);
            frontier_phi_27_51_ladder = _2508.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2508.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2508.x * cbModelParam._m0[1u].z;
        }
        _1635 = frontier_phi_27_51_ladder_2;
        _1637 = frontier_phi_27_51_ladder_1;
        _1639 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1619 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_607, _608, _609), _1543);
        _1635 = _1619.x * cbModelParam._m0[1u].z;
        _1637 = _1619.y * cbModelParam._m0[1u].z;
        _1639 = _1619.z * cbModelParam._m0[1u].z;
    }
    float _1652 = (((_634 * _584) + _635) * _599) * ((cbModelParam._m0[1u].w * (_1635 - _1534)) + _1534);
    float _1654 = (((_634 * _586) + _635) * _599) * ((cbModelParam._m0[1u].w * (_1637 - _1536)) + _1536);
    float _1656 = (((_634 * _587) + _635) * _599) * ((cbModelParam._m0[1u].w * (_1639 - _1538)) + _1538);
    float _1659 = fma(_1656, cbSceneParam._m0[89u].z, fma(_1654, cbSceneParam._m0[89u].y, _1652 * cbSceneParam._m0[89u].x));
    float _1662 = fma(_1656, cbSceneParam._m0[90u].z, fma(_1654, cbSceneParam._m0[90u].y, _1652 * cbSceneParam._m0[90u].x));
    float _1665 = fma(_1656, cbSceneParam._m0[91u].z, fma(_1654, cbSceneParam._m0[91u].y, _1652 * cbSceneParam._m0[91u].x));
    vec4 _1673 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_519, _520));
    float _1675 = _1673.w;
    float _1687 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1675);
    float _1688 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1675);
    float _1689 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1675);
    uvec4 _1693 = floatBitsToUint(cbInstanceData._m0[_558 + 5u]);
    uint _1695 = _1693.x * 14u;
    uint _1696 = _1695 + 13u;
    float _1703 = _599 + (-1.0);
    float _1708 = (cbLight._m0[_1696].x * _1703) + 1.0;
    float _1709 = (cbLight._m0[_1696].y * _1703) + 1.0;
    float _1710 = (cbLight._m0[_1696].z * _1703) + 1.0;
    float _1711 = (cbLight._m0[_1696].w * _1703) + 1.0;
    uint _1712 = _1695 + 5u;
    float _1718 = isnan(1.0) ? _1709 : (isnan(_1709) ? 1.0 : min(_1709, 1.0));
    uint _1722 = _1695 + 4u;
    float _1731 = isnan(1.0) ? _1708 : (isnan(_1708) ? 1.0 : min(_1708, 1.0));
    uint _1735 = _1695 | 1u;
    float _1746 = dot(vec3(cbLight._m0[_1695].xyz), vec3(_416, _417, _418));
    float _1749 = dot(vec3(cbLight._m0[_1735].xyz), vec3(_416, _417, _418));
    float _3979 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _3990 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _1754 = (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * 0.3183098733425140380859375;
    float _1756 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * 0.3183098733425140380859375;
    float _1763 = ((cbLight._m0[_1712].x * _1718) * _1756) + (((cbLight._m0[_1722].x * _1687) * _1731) * _1754);
    float _1764 = ((_1718 * cbLight._m0[_1712].y) * _1756) + (((cbLight._m0[_1722].y * _1688) * _1731) * _1754);
    float _1765 = ((_1718 * cbLight._m0[_1712].z) * _1756) + (((cbLight._m0[_1722].z * _1689) * _1731) * _1754);
    uvec4 _1770 = floatBitsToUint(cbLight._m0[_1695 + 12u]);
    bool _1772 = _1770.x == 0u;
    float _1783;
    float _1785;
    float _1787;
    if (_1772)
    {
        _1783 = _1763;
        _1785 = _1764;
        _1787 = _1765;
    }
    else
    {
        uint _1791 = _1695 + 6u;
        float _1807 = (dot(vec3(cbLight._m0[_1695 + 2u].xyz), vec3(_416, _417, _418)) * 0.5) + 0.5;
        float _1808 = _1807 * _1807;
        float _4001 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1809 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1810 = isnan(1.0) ? _1710 : (isnan(_1710) ? 1.0 : min(_1710, 1.0));
        _1783 = (((cbLight._m0[_1791].x * 0.3183098733425140380859375) * _1809) * _1810) + _1763;
        _1785 = (((cbLight._m0[_1791].y * 0.3183098733425140380859375) * _1809) * _1810) + _1764;
        _1787 = (((cbLight._m0[_1791].z * 0.3183098733425140380859375) * _1809) * _1810) + _1765;
    }
    bool _1790 = _1770.y == 0u;
    float _1828;
    float _1830;
    float _1832;
    if (_1790)
    {
        _1828 = _1783;
        _1830 = _1785;
        _1832 = _1787;
    }
    else
    {
        uint _2001 = _1695 + 7u;
        float _2017 = (dot(vec3(cbLight._m0[_1695 + 3u].xyz), vec3(_416, _417, _418)) * 0.5) + 0.5;
        float _2018 = _2017 * _2017;
        float _4017 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2019 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _2020 = isnan(1.0) ? _1711 : (isnan(_1711) ? 1.0 : min(_1711, 1.0));
        _1828 = (((cbLight._m0[_2001].x * 0.3183098733425140380859375) * _2019) * _2020) + _1783;
        _1830 = (((cbLight._m0[_2001].y * 0.3183098733425140380859375) * _2019) * _2020) + _1785;
        _1832 = (((cbLight._m0[_2001].z * 0.3183098733425140380859375) * _2019) * _2020) + _1787;
    }
    uint _1835 = _1695 + 8u;
    float _1848 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1695].w)) * _420) * 0.949999988079071044921875);
    float _1849 = _1848 * _1848;
    float _1850 = cbLight._m0[_1695].x + _499;
    float _1851 = cbLight._m0[_1695].y + _500;
    float _1852 = cbLight._m0[_1695].z + _501;
    float _1856 = inversesqrt(dot(vec3(_1850, _1851, _1852), vec3(_1850, _1851, _1852)));
    float _1857 = _1856 * _1850;
    float _1858 = _1856 * _1851;
    float _1859 = _1856 * _1852;
    float _1860 = dot(vec3(_416, _417, _418), vec3(cbLight._m0[_1695].xyz));
    float _4033 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1863 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _4044 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _1864 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _1865 = dot(vec3(_416, _417, _418), vec3(_1857, _1858, _1859));
    float _4055 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1868 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _1869 = dot(vec3(cbLight._m0[_1695].xyz), vec3(_1857, _1858, _1859));
    float _4066 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1873 = _1849 * _1849;
    float _1877 = ((_1868 * _1868) * (_1873 + (-1.0))) + 1.0;
    float _1885 = exp2(log2(1.0 - (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) * 5.0);
    float _1886 = 0.959999978542327880859375 - _581;
    float _1888 = 0.959999978542327880859375 - _582;
    float _1889 = 0.959999978542327880859375 - _583;
    float _1896 = 1.0 - _1849;
    float _1907 = (0.5 / (((_1864 * ((_1863 * _1896) + _1849)) + 9.9999999392252902907785028219223e-09) + (((_1864 * _1896) + _1849) * _1863))) * _1863;
    float _4077 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1909 = (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1873 / ((_1877 * _1877) * 3.141590118408203125));
    uint _1923 = _1695 + 9u;
    float _1934 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1735].w)) * _420) * 0.949999988079071044921875);
    float _1935 = _1934 * _1934;
    float _1936 = cbLight._m0[_1735].x + _499;
    float _1937 = cbLight._m0[_1735].y + _500;
    float _1938 = cbLight._m0[_1735].z + _501;
    float _1942 = inversesqrt(dot(vec3(_1936, _1937, _1938), vec3(_1936, _1937, _1938)));
    float _1943 = _1942 * _1936;
    float _1944 = _1942 * _1937;
    float _1945 = _1942 * _1938;
    float _1946 = dot(vec3(_416, _417, _418), vec3(cbLight._m0[_1735].xyz));
    float _4088 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1949 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _1950 = dot(vec3(_416, _417, _418), vec3(_1943, _1944, _1945));
    float _4099 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1953 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _1954 = dot(vec3(cbLight._m0[_1735].xyz), vec3(_1943, _1944, _1945));
    float _4110 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1958 = _1935 * _1935;
    float _1962 = ((_1953 * _1953) * (_1958 + (-1.0))) + 1.0;
    float _1969 = exp2(log2(1.0 - (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * 5.0);
    float _1976 = 1.0 - _1935;
    float _1986 = (0.5 / (((_1864 * ((_1949 * _1976) + _1935)) + 9.9999999392252902907785028219223e-09) + (((_1864 * _1976) + _1935) * _1949))) * _1949;
    float _4121 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1988 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1958 / ((_1962 * _1962) * 3.141590118408203125));
    float _1998 = (((((_1969 * _1886) + _584) * cbLight._m0[_1923].x) * _1988) * _1718) + ((((cbLight._m0[_1835].x * _1687) * ((_1885 * _1886) + _584)) * _1909) * _1731);
    float _1999 = (((((_1969 * _1888) + _586) * cbLight._m0[_1923].y) * _1988) * _1718) + ((((cbLight._m0[_1835].y * _1688) * ((_1885 * _1888) + _586)) * _1909) * _1731);
    float _2000 = (((((_1969 * _1889) + _587) * cbLight._m0[_1923].z) * _1988) * _1718) + ((((cbLight._m0[_1835].z * _1689) * ((_1885 * _1889) + _587)) * _1909) * _1731);
    float _2062;
    float _2064;
    float _2066;
    if (_1772)
    {
        _2062 = _1998;
        _2064 = _1999;
        _2066 = _2000;
    }
    else
    {
        uint _2068 = _1695 + 2u;
        uint _2072 = _1695 + 10u;
        float _2086 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2068].w)) * _420) * 0.949999988079071044921875);
        float _2087 = _2086 * _2086;
        float _2088 = cbLight._m0[_2068].x + _499;
        float _2089 = cbLight._m0[_2068].y + _500;
        float _2090 = cbLight._m0[_2068].z + _501;
        float _2094 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
        float _2095 = _2094 * _2088;
        float _2096 = _2094 * _2089;
        float _2097 = _2094 * _2090;
        float _2098 = dot(vec3(_416, _417, _418), vec3(cbLight._m0[_2068].xyz));
        float _4132 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2101 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _2102 = dot(vec3(_416, _417, _418), vec3(_2095, _2096, _2097));
        float _4143 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2105 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _2106 = dot(vec3(cbLight._m0[_2068].xyz), vec3(_2095, _2096, _2097));
        float _4154 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2110 = _2087 * _2087;
        float _2114 = ((_2105 * _2105) * (_2110 + (-1.0))) + 1.0;
        float _2121 = exp2(log2(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * 5.0);
        float _2128 = 1.0 - _2087;
        float _2138 = (0.5 / (((_1864 * ((_2101 * _2128) + _2087)) + 9.9999999392252902907785028219223e-09) + (((_1864 * _2128) + _2087) * _2101))) * _2101;
        float _4165 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2140 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2110 / ((_2114 * _2114) * 3.141590118408203125));
        float _2141 = isnan(1.0) ? _1710 : (isnan(_1710) ? 1.0 : min(_1710, 1.0));
        _2062 = (((((_2121 * _1886) + _584) * cbLight._m0[_2072].x) * _2140) * _2141) + _1998;
        _2064 = (((((_2121 * _1888) + _586) * cbLight._m0[_2072].y) * _2140) * _2141) + _1999;
        _2066 = (((((_2121 * _1889) + _587) * cbLight._m0[_2072].z) * _2140) * _2141) + _2000;
    }
    float _2176;
    float _2178;
    float _2180;
    if (_1790)
    {
        _2176 = _2062;
        _2178 = _2064;
        _2180 = _2066;
    }
    else
    {
        uint _2187 = _1695 + 3u;
        uint _2191 = _1695 + 11u;
        float _2205 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2187].w)) * _420) * 0.949999988079071044921875);
        float _2206 = _2205 * _2205;
        float _2207 = cbLight._m0[_2187].x + _499;
        float _2208 = cbLight._m0[_2187].y + _500;
        float _2209 = cbLight._m0[_2187].z + _501;
        float _2213 = inversesqrt(dot(vec3(_2207, _2208, _2209), vec3(_2207, _2208, _2209)));
        float _2214 = _2213 * _2207;
        float _2215 = _2213 * _2208;
        float _2216 = _2213 * _2209;
        float _2217 = dot(vec3(_416, _417, _418), vec3(cbLight._m0[_2187].xyz));
        float _4181 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2220 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _2221 = dot(vec3(_416, _417, _418), vec3(_2214, _2215, _2216));
        float _4192 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2224 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _2225 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_2214, _2215, _2216));
        float _4203 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2229 = _2206 * _2206;
        float _2233 = ((_2224 * _2224) * (_2229 + (-1.0))) + 1.0;
        float _2240 = exp2(log2(1.0 - (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * 5.0);
        float _2247 = 1.0 - _2206;
        float _2257 = (0.5 / (((_1864 * ((_2220 * _2247) + _2206)) + 9.9999999392252902907785028219223e-09) + (((_1864 * _2247) + _2206) * _2220))) * _2220;
        float _4214 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2259 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_2229 / ((_2233 * _2233) * 3.141590118408203125));
        float _2260 = isnan(1.0) ? _1711 : (isnan(_1711) ? 1.0 : min(_1711, 1.0));
        _2176 = (((((_2240 * _1886) + _584) * cbLight._m0[_2191].x) * _2259) * _2260) + _2062;
        _2178 = (((((_2240 * _1888) + _586) * cbLight._m0[_2191].y) * _2259) * _2260) + _2064;
        _2180 = (((((_2240 * _1889) + _587) * cbLight._m0[_2191].z) * _2259) * _2260) + _2066;
    }
    float _2394;
    float _2396;
    float _2398;
    float _2400;
    float _2402;
    float _2404;
    if (_1693.y == 0u)
    {
        float _2335 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2336 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2335;
        float _2337 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2335;
        float _2338 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2335;
        uvec4 _2350 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2351 = _2350.x;
        uint _2362 = uint((float(_2350.y) * floor(float(uint(cbSceneParam._m0[85u].y * _520) / _2351))) + floor(float(uint(cbSceneParam._m0[85u].x * _519) / _2351)));
        float _2372 = (log2(_2338 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2373 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        uint _2376 = uint(isnan(14.0) ? _2373 : (isnan(_2373) ? 14.0 : min(_2373, 14.0)));
        uvec4 _2381 = texelFetch(g_lightClusterGridBuffer, int(((_2376 << 2u) + (_2362 << 6u)) >> 2u));
        uint _2382 = _2381.x;
        uint _2383 = _2350.z;
        float _2513;
        float _2515;
        float _2517;
        float _2519;
        float _2521;
        float _2523;
        if (((((1u << ((_2383 >> 4u) & 15u)) + 4294967295u) & _2382) == 0u) || ((_2383 & 240u) == 0u))
        {
            _2513 = 0.0;
            _2515 = 0.0;
            _2517 = 0.0;
            _2519 = 0.0;
            _2521 = 0.0;
            _2523 = 0.0;
        }
        else
        {
            float _2514;
            float _2516;
            float _2518;
            float _2520;
            float _2522;
            float _2524;
            float _2674 = 0.0;
            float _2675 = 0.0;
            float _2676 = 0.0;
            float _2677 = 0.0;
            float _2678 = 0.0;
            float _2679 = 0.0;
            uint _2680 = 0u;
            uint _2689;
            bool _2690;
            for (;;)
            {
                _2689 = texelFetch(g_lightClassification, int((((_2376 << 5u) + (_2362 << 9u)) + (_2680 << 2u)) >> 2u)).x;
                _2690 = _2689 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2690)
                {
                    frontier_phi_68_pred = _2676;
                    frontier_phi_68_pred_1 = _2679;
                    frontier_phi_68_pred_2 = _2678;
                    frontier_phi_68_pred_3 = _2677;
                    frontier_phi_68_pred_4 = _2675;
                    frontier_phi_68_pred_5 = _2674;
                }
                else
                {
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    float _2823;
                    float _2824;
                    uint _2825;
                    _2819 = _2674;
                    _2820 = _2675;
                    _2821 = _2676;
                    _2822 = _2677;
                    _2823 = _2678;
                    _2824 = _2679;
                    _2825 = _2689;
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    float _2751;
                    for (;;)
                    {
                        uint _2829 = uint(findLSB(_2825)) + (_2680 << 5u);
                        uint _2826 = (_2825 + 4294967295u) & _2825;
                        uint _2831 = _2829 * 48u;
                        vec4 _2845 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2831)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 3u)).x));
                        uint _2851 = (_2829 * 48u) + 4u;
                        vec4 _2864 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2851)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 3u)).x));
                        uint _2870 = (_2829 * 48u) + 8u;
                        vec3 _2881 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2870)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 2u)).x));
                        float _2885 = _2845.x - _2336;
                        float _2886 = _2845.y - _2337;
                        float _2887 = _2845.z - _2338;
                        float _2888 = dot(vec3(_2885, _2886, _2887), vec3(_2885, _2886, _2887));
                        float _2891 = inversesqrt(_2888);
                        float _2892 = _2891 * _2885;
                        float _2893 = _2891 * _2886;
                        float _2894 = _2891 * _2887;
                        float _2895 = dot(vec3(_539, _542, _545), vec3(_2892, _2893, _2894));
                        float _2900 = 1.0 - (_2888 * _2845.w);
                        float _4240 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                        float _2901 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                        float _2902 = sqrt(_2888) * _2864.w;
                        float _2905 = 1.39999997615814208984375 / (_2902 + 1.39999997615814208984375);
                        float _2906 = _2905 * _2905;
                        float _2909 = ((1.0 - _2906) * _2895) + _2906;
                        float _2912 = _2902 * _2902;
                        float _2916 = ((isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0))) * _2901) / ((_2912 * 0.699999988079071044921875) + 1.0);
                        float _2920 = (-0.0) - _2336;
                        float _2921 = (-0.0) - _2337;
                        float _2922 = (-0.0) - _2338;
                        float _2926 = inversesqrt(dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922)));
                        float _2927 = _2926 * _2920;
                        float _2928 = _2926 * _2921;
                        float _2929 = _2926 * _2922;
                        float _2937 = exp2(log2(1.0 / ((_2912 * 3.5) + 5.0)) * 0.25);
                        float _2938 = 1.0 - _615;
                        float _2945 = sqrt(1.0 - ((1.0 - (_2938 * _2938)) * (1.0 - (_2937 * _2937))));
                        float _2946 = _2945 * _2945;
                        float _2947 = _2946 * _2946;
                        float _2948 = _2927 + _2892;
                        float _2949 = _2928 + _2893;
                        float _2950 = _2929 + _2894;
                        float _2954 = inversesqrt(dot(vec3(_2948, _2949, _2950), vec3(_2948, _2949, _2950)));
                        float _2958 = dot(vec3(_539, _542, _545), vec3(_2927, _2928, _2929));
                        float _4256 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                        float _2961 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                        float _2962 = dot(vec3(_539, _542, _545), vec3(_2954 * _2948, _2954 * _2949, _2954 * _2950));
                        float _4267 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                        float _2965 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                        float _2969 = ((_2965 * _2965) * (_2947 + (-1.0))) + 1.0;
                        float _2970 = _2905 * _2946;
                        float _2971 = _2970 * _2970;
                        float _2974 = ((1.0 - _2971) * _2895) + _2971;
                        float _4278 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                        float _2975 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                        float _2976 = 1.0 - _2946;
                        float _2986 = (0.5 / (((_2975 * ((_2961 * _2976) + _2946)) + 9.9999999392252902907785028219223e-09) + (((_2975 * _2976) + _2946) * _2961))) * _2975;
                        float _4289 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                        float _2997 = (((_2947 * 3.1415927410125732421875) * (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) / ((_2969 * _2969) * ((_2912 * 2.1991131305694580078125) + 3.141590118408203125))) * _2901;
                        _2749 = (_2916 * _2864.x) + _2822;
                        _2750 = (_2916 * _2864.y) + _2823;
                        _2751 = (_2916 * _2864.z) + _2824;
                        _2746 = (_2997 * _2881.x) + _2819;
                        _2747 = (_2997 * _2881.y) + _2820;
                        _2748 = (_2997 * _2881.z) + _2821;
                        if (_2826 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2819 = _2746;
                            _2820 = _2747;
                            _2821 = _2748;
                            _2822 = _2749;
                            _2823 = _2750;
                            _2824 = _2751;
                            _2825 = _2826;
                        }
                    }
                    frontier_phi_68_pred = _2748;
                    frontier_phi_68_pred_1 = _2751;
                    frontier_phi_68_pred_2 = _2750;
                    frontier_phi_68_pred_3 = _2749;
                    frontier_phi_68_pred_4 = _2747;
                    frontier_phi_68_pred_5 = _2746;
                }
                _2518 = frontier_phi_68_pred;
                _2524 = frontier_phi_68_pred_1;
                _2522 = frontier_phi_68_pred_2;
                _2520 = frontier_phi_68_pred_3;
                _2516 = frontier_phi_68_pred_4;
                _2514 = frontier_phi_68_pred_5;
                uint _2681 = _2680 + 1u;
                if (_2681 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2674 = _2514;
                    _2675 = _2516;
                    _2676 = _2518;
                    _2677 = _2520;
                    _2678 = _2522;
                    _2679 = _2524;
                    _2680 = _2681;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2513 = _2514;
            _2515 = _2516;
            _2517 = _2518;
            _2519 = _2520;
            _2521 = _2522;
            _2523 = _2524;
        }
        uvec4 _2527 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2528 = _2527.z;
        uint _2530 = (_2528 >> 8u) & 15u;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        if (((4294967295u << _2530) & _2382) == 0u)
        {
            _2642 = _2513;
            _2644 = _2515;
            _2646 = _2517;
            _2648 = _2519;
            _2650 = _2521;
            _2652 = _2523;
        }
        else
        {
            float _2667 = inversesqrt(dot(vec3(_2336, _2337, _2338), vec3(_2336, _2337, _2338)));
            float _2668 = _2667 * _2336;
            float _2669 = _2667 * _2337;
            float _2670 = _2667 * _2338;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2530 < ((_2528 >> 12u) & 15u))
            {
                float _2643;
                float _2645;
                float _2647;
                float _2649;
                float _2651;
                float _2653;
                float _2802 = _2513;
                float _2803 = _2515;
                float _2804 = _2517;
                float _2805 = _2519;
                float _2806 = _2521;
                float _2807 = _2523;
                uint _2808 = _2530;
                uint _2817;
                bool _2818;
                for (;;)
                {
                    _2817 = texelFetch(g_lightClassification, int((((_2376 << 5u) + (_2362 << 9u)) + (_2808 << 2u)) >> 2u)).x;
                    _2818 = _2817 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2818)
                    {
                        frontier_phi_79_pred = _2807;
                        frontier_phi_79_pred_1 = _2806;
                        frontier_phi_79_pred_2 = _2805;
                        frontier_phi_79_pred_3 = _2804;
                        frontier_phi_79_pred_4 = _2803;
                        frontier_phi_79_pred_5 = _2802;
                    }
                    else
                    {
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3015;
                        float _3016;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3024 = _2802;
                        float _3025 = _2803;
                        float _3026 = _2804;
                        float _3027 = _2805;
                        float _3028 = _2806;
                        float _3029 = _2807;
                        uint _3030 = _2817;
                        uint _3031;
                        vec4 _3056;
                        float _3057;
                        vec4 _3072;
                        vec3 _3084;
                        vec4 _3100;
                        vec4 _3116;
                        float _3163;
                        bool _3164;
                        for (;;)
                        {
                            uint _3041 = ((_2808 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3030));
                            _3031 = (_3030 + 4294967295u) & _3030;
                            uint _3043 = _3041 * 40u;
                            _3056 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 3u)).x));
                            _3057 = _3056.w;
                            uint _3059 = (_3041 * 40u) + 4u;
                            _3072 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 3u)).x));
                            uint _3074 = (_3041 * 40u) + 8u;
                            _3084 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x));
                            uint _3087 = (_3041 * 40u) + 16u;
                            _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            uint _3103 = (_3041 * 40u) + 20u;
                            _3116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 3u)).x));
                            uint _3119 = (_3041 * 40u) + 24u;
                            vec4 _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            uint _3138 = (_3041 * 40u) + 28u;
                            vec4 _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            _3163 = fma(_2338, _3151.z, fma(_2337, _3151.y, _3151.x * _2336)) + _3151.w;
                            _3164 = !((fma(_2338, _3132.z, fma(_2337, _3132.y, _3132.x * _2336)) + _3132.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3164)
                            {
                                float _3191 = _3056.x - _2336;
                                float _3192 = _3056.y - _2337;
                                float _3193 = _3056.z - _2338;
                                float _3194 = dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193));
                                float _3197 = inversesqrt(_3194);
                                float _3198 = _3197 * _3191;
                                float _3199 = _3197 * _3192;
                                float _3200 = _3197 * _3193;
                                float _3204 = 1.0 - (_3194 / (_3057 * _3057));
                                float _4300 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                                float _3205 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                                float _3209 = sqrt(_3194) * _3072.w;
                                float _3211 = 1.39999997615814208984375 / (_3209 + 1.39999997615814208984375);
                                float _3212 = _3211 * _3211;
                                float _3215 = ((1.0 - _3212) * dot(vec3(_3198, _3199, _3200), vec3(_539, _542, _545))) + _3212;
                                float _3218 = _3209 * _3209;
                                float _3222 = (fma(_2338, _3100.z, fma(_2337, _3100.y, _3100.x * _2336)) + _3100.w) / _3163;
                                float _3223 = (fma(_2338, _3116.z, fma(_2337, _3116.y, _3116.x * _2336)) + _3116.w) / _3163;
                                float _3227 = 1.0 - dot(vec2(_3222, _3223), vec2(_3222, _3223));
                                float _4316 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3228 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                                float _3229 = _3228 * (((isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0))) * _3205) / ((_3218 * 0.699999988079071044921875) + 1.0));
                                float _3241 = exp2(log2(1.0 / ((_3218 * 3.5) + 5.0)) * 0.25);
                                float _3242 = 1.0 - _615;
                                float _3249 = sqrt(1.0 - ((1.0 - (_3242 * _3242)) * (1.0 - (_3241 * _3241))));
                                float _3250 = _3249 * _3249;
                                float _3251 = _3250 * _3250;
                                float _3252 = _3198 - _2668;
                                float _3253 = _3199 - _2669;
                                float _3254 = _3200 - _2670;
                                float _3258 = inversesqrt(dot(vec3(_3252, _3253, _3254), vec3(_3252, _3253, _3254)));
                                float _3262 = dot(vec3(_539, _542, _545), vec3((-0.0) - _2668, (-0.0) - _2669, (-0.0) - _2670));
                                float _4327 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3265 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                                float _3266 = dot(vec3(_539, _542, _545), vec3(_3258 * _3252, _3258 * _3253, _3258 * _3254));
                                float _4338 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3269 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                                float _3273 = ((_3269 * _3269) * (_3251 + (-1.0))) + 1.0;
                                float _3274 = _3211 * _3250;
                                float _3275 = _3274 * _3274;
                                float _3281 = ((1.0 - _3275) * dot(vec3(_539, _542, _545), vec3(_3198, _3199, _3200))) + _3275;
                                float _4349 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                                float _3282 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                                float _3283 = 1.0 - _3250;
                                float _3293 = (0.5 / (((_3282 * ((_3265 * _3283) + _3250)) + 9.9999999392252902907785028219223e-09) + (((_3282 * _3283) + _3250) * _3265))) * _3282;
                                float _4360 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3303 = (_3228 * _3205) * (((_3251 * 3.1415927410125732421875) * (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) / ((_3273 * _3273) * ((_3218 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3229 * _3072.z;
                                frontier_phi_85_pred_1 = _3229 * _3072.y;
                                frontier_phi_85_pred_2 = _3229 * _3072.x;
                                frontier_phi_85_pred_3 = _3303 * _3084.z;
                                frontier_phi_85_pred_4 = _3303 * _3084.y;
                                frontier_phi_85_pred_5 = _3303 * _3084.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3312 = frontier_phi_85_pred;
                            _3311 = frontier_phi_85_pred_1;
                            _3310 = frontier_phi_85_pred_2;
                            _3309 = frontier_phi_85_pred_3;
                            _3308 = frontier_phi_85_pred_4;
                            _3307 = frontier_phi_85_pred_5;
                            _3014 = _3310 + _3027;
                            _3015 = _3311 + _3028;
                            _3016 = _3312 + _3029;
                            _3011 = _3307 + _3024;
                            _3012 = _3308 + _3025;
                            _3013 = _3309 + _3026;
                            if (_3031 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3024 = _3011;
                                _3025 = _3012;
                                _3026 = _3013;
                                _3027 = _3014;
                                _3028 = _3015;
                                _3029 = _3016;
                                _3030 = _3031;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3016;
                        frontier_phi_79_pred_1 = _3015;
                        frontier_phi_79_pred_2 = _3014;
                        frontier_phi_79_pred_3 = _3013;
                        frontier_phi_79_pred_4 = _3012;
                        frontier_phi_79_pred_5 = _3011;
                    }
                    _2653 = frontier_phi_79_pred;
                    _2651 = frontier_phi_79_pred_1;
                    _2649 = frontier_phi_79_pred_2;
                    _2647 = frontier_phi_79_pred_3;
                    _2645 = frontier_phi_79_pred_4;
                    _2643 = frontier_phi_79_pred_5;
                    uint _2809 = _2808 + 1u;
                    if (_2809 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2802 = _2643;
                        _2803 = _2645;
                        _2804 = _2647;
                        _2805 = _2649;
                        _2806 = _2651;
                        _2807 = _2653;
                        _2808 = _2809;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2649;
                frontier_phi_60_61_ladder_1 = _2653;
                frontier_phi_60_61_ladder_2 = _2651;
                frontier_phi_60_61_ladder_3 = _2647;
                frontier_phi_60_61_ladder_4 = _2645;
                frontier_phi_60_61_ladder_5 = _2643;
            }
            else
            {
                frontier_phi_60_61_ladder = _2519;
                frontier_phi_60_61_ladder_1 = _2523;
                frontier_phi_60_61_ladder_2 = _2521;
                frontier_phi_60_61_ladder_3 = _2517;
                frontier_phi_60_61_ladder_4 = _2515;
                frontier_phi_60_61_ladder_5 = _2513;
            }
            _2642 = frontier_phi_60_61_ladder_5;
            _2644 = frontier_phi_60_61_ladder_4;
            _2646 = frontier_phi_60_61_ladder_3;
            _2648 = frontier_phi_60_61_ladder;
            _2650 = frontier_phi_60_61_ladder_2;
            _2652 = frontier_phi_60_61_ladder_1;
        }
        float _2657 = isnan(1.0) ? _599 : (isnan(_599) ? 1.0 : min(_599, 1.0));
        _2394 = (_2657 * _2648) + _1828;
        _2396 = (_2657 * _2650) + _1830;
        _2398 = (_2657 * _2652) + _1832;
        _2400 = ((_2642 * _584) * _2657) + _2176;
        _2402 = ((_2644 * _586) * _2657) + _2178;
        _2404 = ((_2646 * _587) * _2657) + _2180;
    }
    else
    {
        _2394 = _1828;
        _2396 = _1830;
        _2398 = _1832;
        _2400 = _2176;
        _2402 = _2178;
        _2404 = _2180;
    }
    uint _2410 = _560 + uint(cbMatDynParam._m0[0u].w);
    float _2416 = (cbMatDynParam._m0[17u].y * _287) * cbInstanceData._m0[_2410].x;
    float _2417 = (cbMatDynParam._m0[17u].y * _288) * cbInstanceData._m0[_2410].y;
    float _2418 = (cbMatDynParam._m0[17u].y * _289) * cbInstanceData._m0[_2410].z;
    float _4376 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _4387 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _4398 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _4409 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _2436 = (((isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2394 + ((isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))) * _599))) + ((_2400 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _1441)) * cbPerFrame._m0[3u].x)) + _2416;
    float _2438 = (_2417 + ((_2402 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _1441)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2396 + ((isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))) * _599)));
    float _2440 = (_2418 + ((_2404 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _1441)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2398 + ((isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))) * _599)));
    float _2441 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2442 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2443 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2449 = cbMtdParam._m0[2u].x * _2416;
    float _2450 = cbMtdParam._m0[2u].y * _2417;
    float _2451 = cbMtdParam._m0[2u].z * _2418;
    float _4435 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2453 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _2458 = cbInstanceData._m0[_558 + 6u].w * (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)));
    float _2463 = _519 / cbSceneParam._m0[86u].x;
    float _2464 = _520 / cbSceneParam._m0[86u].y;
    vec4 _2478 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2463, _2464, (log2((isnan(cbSceneParam._m0[77u].w) ? _440 : (isnan(_440) ? cbSceneParam._m0[77u].w : min(_440, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2480 = _2478.x;
    float _2481 = _2478.y;
    float _2482 = _2478.z;
    float _2483 = _2478.w;
    float _2575;
    float _2577;
    float _2579;
    float _2581;
    if (_440 > cbSceneParam._m0[78u].w)
    {
        float _2538 = isnan(_440) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _440 : min(cbSceneParam._m0[80u].w, _440));
        float _2539 = _2538 / _440;
        float _2550 = _2539 * _492;
        float _2551 = _493 * _2539;
        float _2552 = (-0.0) - _2551;
        float _2553 = _2539 * _494;
        float _2555 = (cbSceneParam._m0[77u].w * _2552) / _2538;
        float _2556 = _2555 + cbSceneParam._m0[79u].w;
        float _2557 = cbSceneParam._m0[79u].w - _2551;
        float _2563 = sqrt(((_2550 * _2550) + (_2551 * _2551)) + (_2553 * _2553));
        float _2566 = (1.0 - (cbSceneParam._m0[77u].w / _2538)) * _2563;
        float _2571 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2573 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2759;
        if (abs((_2552 - _2555) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2759 = ((((_2556 > 0.0) ? exp2(_2571 * _2556) : (2.0 - exp2(_2573 * _2556))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2566;
        }
        else
        {
            float _2703 = 1.0 / cbSceneParam._m0[80u].x;
            float _2704 = isnan(_2557) ? _2556 : (isnan(_2556) ? _2557 : max(_2556, _2557));
            float _2705 = isnan(_2557) ? _2556 : (isnan(_2556) ? _2557 : min(_2556, _2557));
            float _2714 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : min(_2704, 0.0));
            float _2715 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : min(_2705, 0.0));
            _2759 = ((abs(_2563 / _2552) * cbSceneParam._m0[80u].y) * ((((_2714 - _2715) * 2.0) - ((exp2(_2571 * (isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0)))) - exp2(_2571 * (isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0))))) * _2703)) - ((exp2(_2573 * _2714) - exp2(_2573 * _2715)) * _2703))) + (_2566 * cbSceneParam._m0[80u].z);
        }
        vec4 _2761 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2463, _2464, 1.0), 0.0);
        float _2770 = exp2((_2759 * (-1.44269502162933349609375)) * (1.0 - _2761.w));
        float _2771 = log2(_2770);
        float _2787 = log2(_2483);
        _2575 = (exp2(_2787 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2771 * cbSceneParam._m0[78u].x)) * _2761.x) / cbSceneParam._m0[78u].x)) + _2480;
        _2577 = (exp2(_2787 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2771 * cbSceneParam._m0[78u].y)) * _2761.y) / cbSceneParam._m0[78u].y)) + _2481;
        _2579 = (exp2(_2787 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2771 * cbSceneParam._m0[78u].z)) * _2761.z) / cbSceneParam._m0[78u].z)) + _2482;
        _2581 = _2770 * _2483;
    }
    else
    {
        _2575 = _2480;
        _2577 = _2481;
        _2579 = _2482;
        _2581 = _2483;
    }
    bool _2797;
    vec4 _2591;
    vec4 _2613;
    float _2615;
    float _2619;
    float _2620;
    float _2621;
    float _2624;
    float _2627;
    float _2630;
    float _2631;
    bool _2641;
    for (;;)
    {
        _2591 = cbMatDynParam._m0[0u];
        float _2593 = roundEven(_2591.y);
        bool _2594 = _2593 == 3.0;
        float _2595 = log2(_2581);
        float _2599 = exp2(_2595 * cbSceneParam._m0[78u].x);
        float _2600 = exp2(_2595 * cbSceneParam._m0[78u].y);
        float _2601 = exp2(_2595 * cbSceneParam._m0[78u].z);
        float _2602 = _2599 * _2441;
        float _2603 = _2600 * _2442;
        float _2604 = _2601 * _2443;
        float _2611 = _508 + (-0.5);
        _2613 = cbMtdParam._m0[1u];
        _2615 = _2613.y * _2611;
        float _2618 = (_2593 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2619 = _2618 * (_2594 ? _2602 : (_2602 + (cbSceneParam._m0[72u].w * _2575)));
        _2620 = _2618 * (_2594 ? _2603 : (_2603 + (cbSceneParam._m0[72u].w * _2577)));
        _2621 = _2618 * (_2594 ? _2604 : (_2604 + (cbSceneParam._m0[72u].w * _2579)));
        _2624 = ((_2449 * _2453) * _2599) * _2618;
        _2627 = ((_2450 * _2453) * _2600) * _2618;
        _2630 = ((_2451 * _2453) * _2601) * _2618;
        _2631 = _2611 * 0.999000012874603271484375;
        _2641 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2641)
        {
            if ((cbInstanceData._m0[_558 + 7u].x + _2631) < 0.5)
            {
                _2797 = true;
                break;
            }
        }
        uint _2738 = _560 + uint(_2591.w);
        if ((cbInstanceData._m0[_2738].w < 1.0) && ((cbInstanceData._m0[_2738].w + _2631) < 0.5))
        {
            _2797 = true;
            break;
        }
        if ((_2615 + _249) < _2613.x)
        {
            _2797 = true;
            break;
        }
        _2797 = false;
        break;
    }
    float _3002;
    if (_2797)
    {
        discard_state = true;
        _3002 = 0.0;
    }
    else
    {
        _3002 = _2458;
    }
    SV_Target.x = _2619;
    SV_Target.y = _2620;
    SV_Target.z = _2621;
    SV_Target.w = _3002;
    SV_Target_1.x = _2624;
    SV_Target_1.y = _2627;
    SV_Target_1.z = _2630;
    SV_Target_1.w = _2458;
    discard_exit();
}


