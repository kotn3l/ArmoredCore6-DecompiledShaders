#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[18];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_Damege_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1005;
float _3717;
float _3718;
float _3719;
float _3720;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = _210 * NORMAL.x;
    float _212 = _210 * NORMAL.y;
    float _213 = _210 * NORMAL.z;
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225;
    float _226;
    float _227;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
    }
    else
    {
        _225 = _211;
        _226 = _212;
        _227 = _213;
    }
    vec4 _245 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _248 = _245.x;
    float _249 = _245.y;
    float _250 = _245.z;
    float _251 = _245.w;
    vec4 _263 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _268 = _263.w;
    float _274 = (((cbMatDynParam._m0[17u].x * 10.0) + (-1.0)) + _268) * _268;
    vec4 _287 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_7, SS_ClampLinear), vec2((_274 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_274 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _289 = _287.x;
    float _290 = _287.y;
    float _291 = _287.z;
    float _298 = ((_289 - _248) * cbMatDynParam._m0[17u].x) + _248;
    float _299 = ((_290 - _249) * cbMatDynParam._m0[17u].x) + _249;
    float _300 = ((_291 - _250) * cbMatDynParam._m0[17u].x) + _250;
    float _307 = ((_263.x - _298) * cbMatDynParam._m0[17u].x) + _298;
    float _308 = ((_263.y - _299) * cbMatDynParam._m0[17u].x) + _299;
    float _309 = ((_263.z - _300) * cbMatDynParam._m0[17u].x) + _300;
    vec4 _325 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _327 = _325.x;
    vec4 _341 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _346 = (_327 + cbMtdParam._m0[9u].x) + ((_341.x - _327) * cbMatDynParam._m0[17u].x);
    vec4 _358 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _360 = _358.x;
    float _361 = _358.y;
    float _362 = _358.z;
    vec4 _375 = texture(sampler2D(C_AMSN_Damege_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _388 = ((_375.z - _362) * cbMatDynParam._m0[17u].x) + _362;
    float _392 = ((((_375.x - _360) * cbMatDynParam._m0[17u].x) + _360) * 2.0) + (-1.0);
    float _393 = ((((_375.y - _361) * cbMatDynParam._m0[17u].x) + _361) * 2.0) + (-1.0);
    float _394 = dot(vec2(_392, _393), vec2(_392, _393));
    float _3729 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _400 = sqrt(1.0 - (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))));
    float _407 = fma(_400, _225, fma(_393, _217 * TANGENT.x, (_203 * _196) * _392));
    float _410 = fma(_400, _226, fma(_393, _217 * TANGENT.y, (_203 * _197) * _392));
    float _413 = fma(_400, _227, fma(_393, _217 * TANGENT.z, (_203 * _198) * _392));
    float _417 = inversesqrt(dot(vec3(_407, _410, _413), vec3(_407, _410, _413)));
    float _418 = _417 * _407;
    float _419 = _417 * _410;
    float _420 = _417 * _413;
    float _3740 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _421 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _3751 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _422 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _3762 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3773 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _3784 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3795 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _426 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _442 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _484 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _494 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _484);
    float _495 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _484);
    float _496 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _484);
    float _500 = inversesqrt(dot(vec3(_494, _495, _496), vec3(_494, _495, _496)));
    float _501 = _494 * _500;
    float _502 = _495 * _500;
    float _503 = _496 * _500;
    vec4 _508 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _510 = _508.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _684 = sqrt(((_494 * _494) + (_495 * _495)) + (_496 * _496));
        float _690 = (cbMatDynParam._m0[5u].x * _684) + cbMatDynParam._m0[5u].y;
        float _3806 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _691 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _695 = (cbMatDynParam._m0[5u].z * _684) + cbMatDynParam._m0[5u].w;
        float _3817 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) - _691)) + _691) < ((_510 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _521 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _522 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _541 = fma(_420, cbSceneParam._m0[5u].z, fma(_419, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _418));
    float _544 = fma(_420, cbSceneParam._m0[6u].z, fma(_419, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _418));
    float _547 = fma(_420, cbSceneParam._m0[7u].z, fma(_419, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _418));
    uint _560 = uint(roundEven(NORMAL.w)) * 13u;
    uint _562 = _560 + 9u;
    uint _563 = _562 + uint(cbMatDynParam._m0[0u].w);
    float _569 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) * cbInstanceData._m0[_563].x;
    float _570 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) * cbInstanceData._m0[_563].y;
    float _571 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) * cbInstanceData._m0[_563].z;
    float _3828 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _572 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _3839 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _573 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _3850 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _574 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _575 = 1.0 - _426;
    float _576 = _572 * _575;
    float _577 = _573 * _575;
    float _578 = _574 * _575;
    float _583 = (_572 + (-0.039999999105930328369140625)) * _426;
    float _584 = (_573 + (-0.039999999105930328369140625)) * _426;
    float _585 = (_574 + (-0.039999999105930328369140625)) * _426;
    float _586 = _583 + 0.039999999105930328369140625;
    float _588 = _584 + 0.039999999105930328369140625;
    float _589 = _585 + 0.039999999105930328369140625;
    vec4 _598 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _521, cbSceneParam._m0[86u].y * _522));
    float _601 = _598.x * TEXCOORD.z;
    float _602 = dot(vec3(_418, _419, _420), vec3(_501, _502, _503));
    float _605 = _602 * 2.0;
    float _609 = (_605 * _418) - _501;
    float _610 = (_605 * _419) - _502;
    float _611 = (_605 * _420) - _503;
    float _615 = abs(dot(vec3(_501, _502, _503), vec3(_418, _419, _420)));
    float _3861 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _617 = sqrt(_422);
    float _630 = exp2((_617 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_617 * 3.0));
    float _636 = (1.0 - _630) * ((_617 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _637 = _630 * _617;
    float _665 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _669 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _673 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1004;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _729 = fma(_673, cbModelParam._m0[26u].z, fma(_669, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _665));
        float _733 = fma(_673, cbModelParam._m0[27u].z, fma(_669, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _665));
        float _737 = fma(_673, cbModelParam._m0[28u].z, fma(_669, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _665));
        float _762 = _665 + _418;
        float _763 = _669 + _419;
        float _764 = _673 + _420;
        float _774 = fma(_764, cbModelParam._m0[26u].z, fma(_763, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _762)) - _729;
        float _775 = fma(_764, cbModelParam._m0[27u].z, fma(_763, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _762)) - _733;
        float _776 = fma(_764, cbModelParam._m0[28u].z, fma(_763, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _762)) - _737;
        float _780 = inversesqrt(dot(vec3(_774, _775, _776), vec3(_774, _775, _776)));
        float _793 = ((_780 * _774) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_729 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _794 = ((_780 * _775) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_733 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _795 = ((_780 * _776) / cbModelParam._m0[34u].z) + ((((((_737 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _798 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        vec4 _805 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        vec4 _812 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        float _832 = exp2((_798.w + (-0.5)) * 20.0) * 2.0;
        float _833 = _832 * (_798.x + (-0.5));
        float _834 = _832 * (_798.y + (-0.5));
        float _835 = _832 * (_798.z + (-0.5));
        float _842 = exp2((_805.w + (-0.5)) * 20.0) * 2.0;
        float _843 = _842 * (_805.x + (-0.5));
        float _844 = _842 * (_805.y + (-0.5));
        float _845 = _842 * (_805.z + (-0.5));
        float _852 = exp2((_812.w + (-0.5)) * 20.0) * 2.0;
        float _853 = _852 * (_812.x + (-0.5));
        float _854 = _852 * (_812.y + (-0.5));
        float _855 = _852 * (_812.z + (-0.5));
        float _862 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _863 = _862 * (_819.x + (-0.5));
        float _864 = _862 * (_819.y + (-0.5));
        float _865 = _862 * (_819.z + (-0.5));
        float _866 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _867 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _868 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _869 = _833 * 0.5;
        float _870 = _843 * 0.5;
        float _871 = _853 * 0.5;
        float _872 = dot(vec3(_869, _870, _871), vec3(_869, _870, _871));
        float _877 = (_872 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_872);
        float _886 = (dot(vec3(_418, _419, _420), vec3(_877 * _869, _877 * _870, _877 * _871)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _896 = sqrt(((_870 * _870) + (_869 * _869)) + (_871 * _871)) / (_866 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _898 = _897 * 2.0;
        float _902 = (1.0 - _897) / (_897 + 1.0);
        float _3909 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _912 = ((((1.0 - _903) * (_898 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_898 + 1.0))) + _903) * _866;
        float _913 = _834 * 0.5;
        float _914 = _844 * 0.5;
        float _915 = _854 * 0.5;
        float _916 = dot(vec3(_913, _914, _915), vec3(_913, _914, _915));
        float _921 = (_916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_916);
        float _929 = (dot(vec3(_418, _419, _420), vec3(_921 * _913, _921 * _914, _921 * _915)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _938 = sqrt(((_914 * _914) + (_913 * _913)) + (_915 * _915)) / (_867 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _940 = _939 * 2.0;
        float _944 = (1.0 - _939) / (_939 + 1.0);
        float _3942 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _954 = ((((1.0 - _945) * (_940 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_940 + 1.0))) + _945) * _867;
        float _955 = _835 * 0.5;
        float _956 = _845 * 0.5;
        float _957 = _855 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _971 = (dot(vec3(_418, _419, _420), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _3953 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _980 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_868 + 9.9999997473787516355514526367188e-06);
        float _3964 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3975 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_982 + 1.0))) + _987) * _868;
        _1004 = _835;
        _1006 = _834;
        _1007 = _833;
        _1008 = _845;
        _1009 = _844;
        _1010 = _843;
        _1011 = _855;
        _1012 = _854;
        _1013 = _853;
        _1014 = _868;
        _1015 = _867;
        _1016 = _866;
        _1017 = cbModelParam._m0[36u].z * (isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0)));
        _1018 = cbModelParam._m0[36u].z * (isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0)));
        _1019 = cbModelParam._m0[36u].z * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
    }
    else
    {
        _1004 = _1005;
        _1006 = _1005;
        _1007 = _1005;
        _1008 = _1005;
        _1009 = _1005;
        _1010 = _1005;
        _1011 = _1005;
        _1012 = _1005;
        _1013 = _1005;
        _1014 = _1005;
        _1015 = _1005;
        _1016 = _1005;
        _1017 = 0.0;
        _1018 = 0.0;
        _1019 = 0.0;
    }
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1048 = fma(_673, cbModelParam._m0[30u].z, fma(_669, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _665));
        float _1052 = fma(_673, cbModelParam._m0[31u].z, fma(_669, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _665));
        float _1056 = fma(_673, cbModelParam._m0[32u].z, fma(_669, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _665));
        float _1079 = _665 + _418;
        float _1080 = _669 + _419;
        float _1081 = _673 + _420;
        float _1091 = fma(_1081, cbModelParam._m0[30u].z, fma(_1080, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1079)) - _1048;
        float _1092 = fma(_1081, cbModelParam._m0[31u].z, fma(_1080, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1079)) - _1052;
        float _1093 = fma(_1081, cbModelParam._m0[32u].z, fma(_1080, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1079)) - _1056;
        float _1097 = inversesqrt(dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093)));
        float _1110 = ((_1097 * _1091) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1048 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1111 = ((_1097 * _1092) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1052 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1112 = ((_1097 * _1093) / cbModelParam._m0[35u].z) + ((((((_1056 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        float _1147 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1114.x + (-0.5));
        float _1149 = _1147 * (_1114.y + (-0.5));
        float _1150 = _1147 * (_1114.z + (-0.5));
        float _1157 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1121.x + (-0.5));
        float _1159 = _1157 * (_1121.y + (-0.5));
        float _1160 = _1157 * (_1121.z + (-0.5));
        float _1167 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1128.x + (-0.5));
        float _1169 = _1167 * (_1128.y + (-0.5));
        float _1170 = _1167 * (_1128.z + (-0.5));
        float _1177 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1135.x + (-0.5));
        float _1179 = _1177 * (_1135.y + (-0.5));
        float _1180 = _1177 * (_1135.z + (-0.5));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = _1148 * 0.5;
        float _1185 = _1158 * 0.5;
        float _1186 = _1168 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_418, _419, _420), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _4038 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1211 + 1.0))) + _1216) * _1181;
        float _1226 = _1149 * 0.5;
        float _1227 = _1159 * 0.5;
        float _1228 = _1169 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_418, _419, _420), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _4071 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1253 + 1.0))) + _1258) * _1182;
        float _1268 = _1150 * 0.5;
        float _1269 = _1160 * 0.5;
        float _1270 = _1170 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_418, _419, _420), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _4104 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1295 + 1.0))) + _1300) * _1183;
        _1317 = _1150;
        _1318 = _1149;
        _1319 = _1148;
        _1320 = _1160;
        _1321 = _1159;
        _1322 = _1158;
        _1323 = _1170;
        _1324 = _1169;
        _1325 = _1168;
        _1326 = _1183;
        _1327 = _1182;
        _1328 = _1181;
        _1329 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
        _1330 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1331 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
    }
    else
    {
        _1317 = _1005;
        _1318 = _1005;
        _1319 = _1005;
        _1320 = _1005;
        _1321 = _1005;
        _1322 = _1005;
        _1323 = _1005;
        _1324 = _1005;
        _1325 = _1005;
        _1326 = _1005;
        _1327 = _1005;
        _1328 = _1005;
        _1329 = 0.0;
        _1330 = 0.0;
        _1331 = 0.0;
    }
    float _1341 = (cbModelParam._m0[1u].x * (_1329 - _1017)) + _1017;
    float _1342 = (cbModelParam._m0[1u].x * (_1330 - _1018)) + _1018;
    float _1343 = (cbModelParam._m0[1u].x * (_1331 - _1019)) + _1019;
    float _1364 = fma(_1343, cbSceneParam._m0[89u].z, fma(_1342, cbSceneParam._m0[89u].y, _1341 * cbSceneParam._m0[89u].x));
    float _1367 = fma(_1343, cbSceneParam._m0[90u].z, fma(_1342, cbSceneParam._m0[90u].y, _1341 * cbSceneParam._m0[90u].x));
    float _1370 = fma(_1343, cbSceneParam._m0[91u].z, fma(_1342, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1341));
    float _1385 = _609 * 0.5;
    float _1386 = _610 * 0.5;
    float _1387 = _611 * 0.5;
    float _1388 = dot(vec4(_1385, _1386, _1387, 1.0), vec4(_1319, _1322, _1325, _1328));
    float _1391 = dot(vec4(_1385, _1386, _1387, 1.0), vec4(_1318, _1321, _1324, _1327));
    float _1394 = dot(vec4(_1385, _1386, _1387, 1.0), vec4(_1317, _1320, _1323, _1326));
    float _1428;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1401 = dot(vec4(_1385, _1386, _1387, 1.0), vec4(_1004, _1008, _1011, _1014));
        float _1405 = dot(vec4(_1385, _1386, _1387, 1.0), vec4(_1006, _1009, _1012, _1015));
        float _1409 = dot(vec4(_1385, _1386, _1387, 1.0), vec4(_1007, _1010, _1013, _1016));
        float _1416 = dot(vec4(cbModelParam._m0[39u]), vec4(_1385, _1386, _1387, 1.0));
        _1428 = dot(vec3(isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)), isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)), isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1416) ? 0.0 : (isnan(0.0) ? _1416 : max(0.0, _1416))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1428 = 1.0;
    }
    float _1439;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1430 = dot(vec4(cbModelParam._m0[40u]), vec4(_1385, _1386, _1387, 1.0));
        _1439 = dot(vec3(isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)), isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1430) ? 0.0 : (isnan(0.0) ? _1430 : max(0.0, _1430))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1439 = 1.0;
    }
    float _1443 = (_1439 * cbModelParam._m0[1u].x) + (_1428 * (1.0 - cbModelParam._m0[1u].x));
    float _1453 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _422);
    float _1454 = isnan(_1453) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1453 : min(cbModelParam._m0[25u].z, _1453));
    float _1536;
    float _1538;
    float _1540;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1503 = fma(_673, cbModelParam._m0[13u].z, fma(_669, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _665)) + cbModelParam._m0[13u].w;
        float _1507 = fma(_673, cbModelParam._m0[14u].z, fma(_669, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _665)) + cbModelParam._m0[14u].w;
        float _1511 = fma(_673, cbModelParam._m0[15u].z, fma(_669, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _665)) + cbModelParam._m0[15u].w;
        float _1514 = fma(_611, cbModelParam._m0[13u].z, fma(_610, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _609));
        float _1517 = fma(_611, cbModelParam._m0[14u].z, fma(_610, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _609));
        float _1520 = fma(_611, cbModelParam._m0[15u].z, fma(_610, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _609));
        float _1548;
        if (_1514 > 0.0)
        {
            _1548 = abs((1.0 - _1503) / _1514);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1503 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1548 = frontier_phi_19_17_ladder;
        }
        float _1723;
        if (_1517 > 0.0)
        {
            _1723 = abs((1.0 - _1507) / _1517);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1507 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1723 = frontier_phi_28_24_ladder;
        }
        float _2018;
        if (_1520 > 0.0)
        {
            _2018 = abs((1.0 - _1511) / _1520);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1511 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2018 = frontier_phi_40_35_ladder;
        }
        float _2020 = isnan(_1723) ? _1548 : (isnan(_1548) ? _1723 : min(_1548, _1723));
        float _2021 = isnan(_2018) ? _2020 : (isnan(_2020) ? _2018 : min(_2020, _2018));
        float _2025 = (_2021 * _1514) + _1503;
        float _2026 = (_2021 * _1517) + _1507;
        float _2027 = (_2021 * _1520) + _1511;
        float _2028 = _2021 * 9.9999997473787516355514526367188e-05;
        float _2030 = (-1.0) - _2028;
        float _2032 = _2028 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2027 > _2032) || ((_2027 < _2030) || ((_2026 > _2032) || ((_2026 < _2030) || ((_2025 < _2030) || (_2025 > _2032))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2172 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2027, cbModelParam._m0[9u].z, fma(_2026, cbModelParam._m0[9u].y, _2025 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2027, cbModelParam._m0[10u].z, fma(_2026, cbModelParam._m0[10u].y, _2025 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2027, cbModelParam._m0[11u].z, fma(_2026, cbModelParam._m0[11u].y, _2025 * cbModelParam._m0[11u].x))), _1454);
            frontier_phi_18_40_ladder = _2172.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2172.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2172.x * cbModelParam._m0[1u].y;
        }
        _1536 = frontier_phi_18_40_ladder_2;
        _1538 = frontier_phi_18_40_ladder_1;
        _1540 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1524 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_609, _610, _611), _1454);
        _1536 = _1524.x * cbModelParam._m0[1u].y;
        _1538 = _1524.y * cbModelParam._m0[1u].y;
        _1540 = _1524.z * cbModelParam._m0[1u].y;
    }
    float _1544 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _422);
    float _1545 = isnan(_1544) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1544 : min(cbModelParam._m0[25u].w, _1544));
    float _1637;
    float _1639;
    float _1641;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1601 = fma(_673, cbModelParam._m0[21u].z, fma(_669, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _665)) + cbModelParam._m0[21u].w;
        float _1605 = fma(_673, cbModelParam._m0[22u].z, fma(_669, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _665)) + cbModelParam._m0[22u].w;
        float _1609 = fma(_673, cbModelParam._m0[23u].z, fma(_669, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _665)) + cbModelParam._m0[23u].w;
        float _1612 = fma(_611, cbModelParam._m0[21u].z, fma(_610, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _609));
        float _1615 = fma(_611, cbModelParam._m0[22u].z, fma(_610, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _609));
        float _1618 = fma(_611, cbModelParam._m0[23u].z, fma(_610, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _609));
        float _1728;
        if (_1612 > 0.0)
        {
            _1728 = abs((1.0 - _1601) / _1612);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1601 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1728 = frontier_phi_30_26_ladder;
        }
        float _2045;
        if (_1615 > 0.0)
        {
            _2045 = abs((1.0 - _1605) / _1615);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1605 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2045 = frontier_phi_42_37_ladder;
        }
        float _2383;
        if (_1618 > 0.0)
        {
            _2383 = abs((1.0 - _1609) / _1618);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1609 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2383 = frontier_phi_52_49_ladder;
        }
        float _2385 = isnan(_2045) ? _1728 : (isnan(_1728) ? _2045 : min(_1728, _2045));
        float _2386 = isnan(_2383) ? _2385 : (isnan(_2385) ? _2383 : min(_2385, _2383));
        float _2390 = (_2386 * _1612) + _1601;
        float _2391 = (_2386 * _1615) + _1605;
        float _2392 = (_2386 * _1618) + _1609;
        float _2393 = _2386 * 9.9999997473787516355514526367188e-05;
        float _2394 = (-1.0) - _2393;
        float _2396 = _2393 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2392 > _2396) || ((_2392 < _2394) || ((_2391 > _2396) || ((_2391 < _2394) || ((_2390 < _2394) || (_2390 > _2396))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2514 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2392, cbModelParam._m0[17u].z, fma(_2391, cbModelParam._m0[17u].y, _2390 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2392, cbModelParam._m0[18u].z, fma(_2391, cbModelParam._m0[18u].y, _2390 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2392, cbModelParam._m0[19u].z, fma(_2391, cbModelParam._m0[19u].y, _2390 * cbModelParam._m0[19u].x))), _1545);
            frontier_phi_27_52_ladder = _2514.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2514.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2514.x * cbModelParam._m0[1u].z;
        }
        _1637 = frontier_phi_27_52_ladder_2;
        _1639 = frontier_phi_27_52_ladder_1;
        _1641 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1621 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_609, _610, _611), _1545);
        _1637 = _1621.x * cbModelParam._m0[1u].z;
        _1639 = _1621.y * cbModelParam._m0[1u].z;
        _1641 = _1621.z * cbModelParam._m0[1u].z;
    }
    float _1654 = (((_636 * _586) + _637) * _601) * ((cbModelParam._m0[1u].w * (_1637 - _1536)) + _1536);
    float _1656 = (((_636 * _588) + _637) * _601) * ((cbModelParam._m0[1u].w * (_1639 - _1538)) + _1538);
    float _1658 = (((_636 * _589) + _637) * _601) * ((cbModelParam._m0[1u].w * (_1641 - _1540)) + _1540);
    float _1661 = fma(_1658, cbSceneParam._m0[89u].z, fma(_1656, cbSceneParam._m0[89u].y, _1654 * cbSceneParam._m0[89u].x));
    float _1664 = fma(_1658, cbSceneParam._m0[90u].z, fma(_1656, cbSceneParam._m0[90u].y, _1654 * cbSceneParam._m0[90u].x));
    float _1667 = fma(_1658, cbSceneParam._m0[91u].z, fma(_1656, cbSceneParam._m0[91u].y, _1654 * cbSceneParam._m0[91u].x));
    float _1702 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1706 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1710 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1714 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1715 = _1702 / _1714;
    float _1716 = _1706 / _1714;
    float _1717 = _1710 / _1714;
    float _1864;
    float _1865;
    float _1866;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1744 = ((uint(_1717 > cbSceneParam._m0[59u].y) + uint(_1717 > cbSceneParam._m0[59u].x)) + uint(_1717 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1745 = _1744 + 43u;
        uint _1753 = _1744 + 44u;
        uint _1761 = _1744 + 45u;
        uint _1769 = _1744 + 46u;
        float _1780 = fma(_1714, cbSceneParam._m0[_1745].w, fma(_1710, cbSceneParam._m0[_1745].z, fma(_1706, cbSceneParam._m0[_1745].y, _1702 * cbSceneParam._m0[_1745].x)));
        float _1784 = fma(_1714, cbSceneParam._m0[_1753].w, fma(_1710, cbSceneParam._m0[_1753].z, fma(_1706, cbSceneParam._m0[_1753].y, _1702 * cbSceneParam._m0[_1753].x)));
        float _1792 = fma(_1714, cbSceneParam._m0[_1769].w, fma(_1710, cbSceneParam._m0[_1769].z, fma(_1706, cbSceneParam._m0[_1769].y, _1702 * cbSceneParam._m0[_1769].x)));
        float _1797 = cbSceneParam._m0[33u].z * _1792;
        float _1799 = cbSceneParam._m0[33u].w * _1792;
        float _1802 = fma(_1714, cbSceneParam._m0[_1761].w, fma(_1710, cbSceneParam._m0[_1761].z, fma(_1706, cbSceneParam._m0[_1761].y, _1702 * cbSceneParam._m0[_1761].x))) / _1792;
        float _1850 = (cbSceneParam._m0[33u].x - sqrt(((_1716 * _1716) + (_1715 * _1715)) + (_1717 * _1717))) * cbSceneParam._m0[33u].y;
        float _4230 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1857 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1797 + _1780) / _1792, (_1799 + _1784) / _1792), _1802), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1799 + _1780) / _1792, (_1784 - _1797) / _1792), _1802), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1780 - _1797) / _1792, (_1784 - _1799) / _1792), _1802), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1780 - _1799) / _1792, (_1797 + _1784) / _1792), _1802), 0.0)).x), vec4(0.25)));
        _1864 = 1.0 - (_1857 * cbSceneParam._m0[34u].x);
        _1865 = 1.0 - (_1857 * cbSceneParam._m0[34u].y);
        _1866 = 1.0 - (_1857 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1864 = 1.0;
        _1865 = 1.0;
        _1866 = 1.0;
    }
    float _1930;
    float _1932;
    float _1934;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1918 = fma(_1714, cbSceneParam._m0[63u].w, fma(_1710, cbSceneParam._m0[63u].z, fma(_1706, cbSceneParam._m0[63u].y, _1702 * cbSceneParam._m0[63u].x)));
        float _1919 = fma(_1714, cbSceneParam._m0[60u].w, fma(_1710, cbSceneParam._m0[60u].z, fma(_1706, cbSceneParam._m0[60u].y, _1702 * cbSceneParam._m0[60u].x))) / _1918;
        float _1920 = fma(_1714, cbSceneParam._m0[61u].w, fma(_1710, cbSceneParam._m0[61u].z, fma(_1706, cbSceneParam._m0[61u].y, _1702 * cbSceneParam._m0[61u].x))) / _1918;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1919 >= cbSceneParam._m0[64u].x) && (_1920 >= cbSceneParam._m0[64u].y)) && (_1919 <= cbSceneParam._m0[64u].z)) && (_1920 <= cbSceneParam._m0[64u].w))
        {
            float _2058 = fma(_1714, cbSceneParam._m0[62u].w, fma(_1710, cbSceneParam._m0[62u].z, fma(_1706, cbSceneParam._m0[62u].y, _1702 * cbSceneParam._m0[62u].x))) / _1918;
            float _2062 = isnan(cbSceneParam._m0[41u].w) ? _2058 : (isnan(_2058) ? cbSceneParam._m0[41u].w : max(_2058, cbSceneParam._m0[41u].w));
            float _2105 = (cbSceneParam._m0[33u].x - sqrt(((_1716 * _1716) + (_1715 * _1715)) + (_1717 * _1717))) * cbSceneParam._m0[33u].y;
            float _4246 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
            float _2112 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1919, cbSceneParam._m0[33u].w + _1920), _2062), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1919, _1920 - cbSceneParam._m0[33u].z), _2062), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1919 - cbSceneParam._m0[33u].z, _1920 - cbSceneParam._m0[33u].w), _2062), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1919 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1920), _2062), 0.0)).x), vec4(0.25)));
            float _2116 = 1.0 - (_2112 * cbSceneParam._m0[34u].x);
            float _2117 = 1.0 - (_2112 * cbSceneParam._m0[34u].y);
            float _2118 = 1.0 - (_2112 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2117) ? _1865 : (isnan(_1865) ? _2117 : min(_1865, _2117));
            frontier_phi_39_38_ladder_1 = isnan(_2116) ? _1864 : (isnan(_1864) ? _2116 : min(_1864, _2116));
            frontier_phi_39_38_ladder_2 = isnan(_2118) ? _1866 : (isnan(_1866) ? _2118 : min(_1866, _2118));
        }
        else
        {
            frontier_phi_39_38_ladder = _1865;
            frontier_phi_39_38_ladder_1 = _1864;
            frontier_phi_39_38_ladder_2 = _1866;
        }
        _1930 = frontier_phi_39_38_ladder_1;
        _1932 = frontier_phi_39_38_ladder;
        _1934 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1930 = _1864;
        _1932 = _1865;
        _1934 = _1866;
    }
    uvec4 _1939 = floatBitsToUint(cbInstanceData._m0[_560 + 5u]);
    uint _1941 = _1939.x * 14u;
    uint _1942 = _1941 + 13u;
    float _1949 = _601 + (-1.0);
    float _1954 = (cbLight._m0[_1942].x * _1949) + 1.0;
    float _1955 = (cbLight._m0[_1942].y * _1949) + 1.0;
    float _1956 = (cbLight._m0[_1942].z * _1949) + 1.0;
    float _1957 = (cbLight._m0[_1942].w * _1949) + 1.0;
    uint _1958 = _1941 + 5u;
    float _1964 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
    uint _1968 = _1941 + 4u;
    float _1977 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
    uint _1981 = _1941 | 1u;
    float _1992 = dot(vec3(cbLight._m0[_1941].xyz), vec3(_418, _419, _420));
    float _1995 = dot(vec3(cbLight._m0[_1981].xyz), vec3(_418, _419, _420));
    float _4282 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _4293 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _2000 = (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * 0.3183098733425140380859375;
    float _2002 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * 0.3183098733425140380859375;
    float _2009 = ((cbLight._m0[_1958].x * _1964) * _2002) + (((cbLight._m0[_1968].x * _1930) * _1977) * _2000);
    float _2010 = ((_1964 * cbLight._m0[_1958].y) * _2002) + (((cbLight._m0[_1968].y * _1932) * _1977) * _2000);
    float _2011 = ((_1964 * cbLight._m0[_1958].z) * _2002) + (((cbLight._m0[_1968].z * _1934) * _1977) * _2000);
    uvec4 _2015 = floatBitsToUint(cbLight._m0[_1941 + 12u]);
    bool _2017 = _2015.x == 0u;
    float _2119;
    float _2121;
    float _2123;
    if (_2017)
    {
        _2119 = _2009;
        _2121 = _2010;
        _2123 = _2011;
    }
    else
    {
        uint _2127 = _1941 + 6u;
        float _2143 = (dot(vec3(cbLight._m0[_1941 + 2u].xyz), vec3(_418, _419, _420)) * 0.5) + 0.5;
        float _2144 = _2143 * _2143;
        float _4304 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2145 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _2146 = isnan(1.0) ? _1956 : (isnan(_1956) ? 1.0 : min(_1956, 1.0));
        _2119 = (((cbLight._m0[_2127].x * 0.3183098733425140380859375) * _2145) * _2146) + _2009;
        _2121 = (((cbLight._m0[_2127].y * 0.3183098733425140380859375) * _2145) * _2146) + _2010;
        _2123 = (((cbLight._m0[_2127].z * 0.3183098733425140380859375) * _2145) * _2146) + _2011;
    }
    bool _2126 = _2015.y == 0u;
    float _2181;
    float _2183;
    float _2185;
    if (_2126)
    {
        _2181 = _2119;
        _2183 = _2121;
        _2185 = _2123;
    }
    else
    {
        uint _2354 = _1941 + 7u;
        float _2370 = (dot(vec3(cbLight._m0[_1941 + 3u].xyz), vec3(_418, _419, _420)) * 0.5) + 0.5;
        float _2371 = _2370 * _2370;
        float _4320 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2372 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2373 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
        _2181 = (((cbLight._m0[_2354].x * 0.3183098733425140380859375) * _2372) * _2373) + _2119;
        _2183 = (((cbLight._m0[_2354].y * 0.3183098733425140380859375) * _2372) * _2373) + _2121;
        _2185 = (((cbLight._m0[_2354].z * 0.3183098733425140380859375) * _2372) * _2373) + _2123;
    }
    uint _2188 = _1941 + 8u;
    float _2201 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1941].w)) * _422) * 0.949999988079071044921875);
    float _2202 = _2201 * _2201;
    float _2203 = cbLight._m0[_1941].x + _501;
    float _2204 = cbLight._m0[_1941].y + _502;
    float _2205 = cbLight._m0[_1941].z + _503;
    float _2209 = inversesqrt(dot(vec3(_2203, _2204, _2205), vec3(_2203, _2204, _2205)));
    float _2210 = _2209 * _2203;
    float _2211 = _2209 * _2204;
    float _2212 = _2209 * _2205;
    float _2213 = dot(vec3(_418, _419, _420), vec3(cbLight._m0[_1941].xyz));
    float _4336 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2216 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _4347 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _2217 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _2218 = dot(vec3(_418, _419, _420), vec3(_2210, _2211, _2212));
    float _4358 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2221 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _2222 = dot(vec3(cbLight._m0[_1941].xyz), vec3(_2210, _2211, _2212));
    float _4369 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2226 = _2202 * _2202;
    float _2230 = ((_2221 * _2221) * (_2226 + (-1.0))) + 1.0;
    float _2238 = exp2(log2(1.0 - (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) * 5.0);
    float _2239 = 0.959999978542327880859375 - _583;
    float _2241 = 0.959999978542327880859375 - _584;
    float _2242 = 0.959999978542327880859375 - _585;
    float _2249 = 1.0 - _2202;
    float _2260 = (0.5 / (((_2217 * ((_2216 * _2249) + _2202)) + 9.9999999392252902907785028219223e-09) + (((_2217 * _2249) + _2202) * _2216))) * _2216;
    float _4380 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2262 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_2226 / ((_2230 * _2230) * 3.141590118408203125));
    uint _2276 = _1941 + 9u;
    float _2287 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1981].w)) * _422) * 0.949999988079071044921875);
    float _2288 = _2287 * _2287;
    float _2289 = cbLight._m0[_1981].x + _501;
    float _2290 = cbLight._m0[_1981].y + _502;
    float _2291 = cbLight._m0[_1981].z + _503;
    float _2295 = inversesqrt(dot(vec3(_2289, _2290, _2291), vec3(_2289, _2290, _2291)));
    float _2296 = _2295 * _2289;
    float _2297 = _2295 * _2290;
    float _2298 = _2295 * _2291;
    float _2299 = dot(vec3(_418, _419, _420), vec3(cbLight._m0[_1981].xyz));
    float _4391 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2302 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _2303 = dot(vec3(_418, _419, _420), vec3(_2296, _2297, _2298));
    float _4402 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2306 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _2307 = dot(vec3(cbLight._m0[_1981].xyz), vec3(_2296, _2297, _2298));
    float _4413 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2311 = _2288 * _2288;
    float _2315 = ((_2306 * _2306) * (_2311 + (-1.0))) + 1.0;
    float _2322 = exp2(log2(1.0 - (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) * 5.0);
    float _2329 = 1.0 - _2288;
    float _2339 = (0.5 / (((_2217 * ((_2302 * _2329) + _2288)) + 9.9999999392252902907785028219223e-09) + (((_2217 * _2329) + _2288) * _2302))) * _2302;
    float _4424 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2341 = (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2311 / ((_2315 * _2315) * 3.141590118408203125));
    float _2351 = (((((_2322 * _2239) + _586) * cbLight._m0[_2276].x) * _2341) * _1964) + ((((cbLight._m0[_2188].x * _1930) * ((_2238 * _2239) + _586)) * _2262) * _1977);
    float _2352 = (((((_2322 * _2241) + _588) * cbLight._m0[_2276].y) * _2341) * _1964) + ((((cbLight._m0[_2188].y * _1932) * ((_2238 * _2241) + _588)) * _2262) * _1977);
    float _2353 = (((((_2322 * _2242) + _589) * cbLight._m0[_2276].z) * _2341) * _1964) + ((((cbLight._m0[_2188].z * _1934) * ((_2238 * _2242) + _589)) * _2262) * _1977);
    float _2409;
    float _2411;
    float _2413;
    if (_2017)
    {
        _2409 = _2351;
        _2411 = _2352;
        _2413 = _2353;
    }
    else
    {
        uint _2415 = _1941 + 2u;
        uint _2419 = _1941 + 10u;
        float _2433 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2415].w)) * _422) * 0.949999988079071044921875);
        float _2434 = _2433 * _2433;
        float _2435 = cbLight._m0[_2415].x + _501;
        float _2436 = cbLight._m0[_2415].y + _502;
        float _2437 = cbLight._m0[_2415].z + _503;
        float _2441 = inversesqrt(dot(vec3(_2435, _2436, _2437), vec3(_2435, _2436, _2437)));
        float _2442 = _2441 * _2435;
        float _2443 = _2441 * _2436;
        float _2444 = _2441 * _2437;
        float _2445 = dot(vec3(_418, _419, _420), vec3(cbLight._m0[_2415].xyz));
        float _4435 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2448 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _2449 = dot(vec3(_418, _419, _420), vec3(_2442, _2443, _2444));
        float _4446 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2452 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _2453 = dot(vec3(cbLight._m0[_2415].xyz), vec3(_2442, _2443, _2444));
        float _4457 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2457 = _2434 * _2434;
        float _2461 = ((_2452 * _2452) * (_2457 + (-1.0))) + 1.0;
        float _2468 = exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0);
        float _2475 = 1.0 - _2434;
        float _2485 = (0.5 / (((_2217 * ((_2448 * _2475) + _2434)) + 9.9999999392252902907785028219223e-09) + (((_2217 * _2475) + _2434) * _2448))) * _2448;
        float _4468 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2487 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2457 / ((_2461 * _2461) * 3.141590118408203125));
        float _2488 = isnan(1.0) ? _1956 : (isnan(_1956) ? 1.0 : min(_1956, 1.0));
        _2409 = (((((_2468 * _2239) + _586) * cbLight._m0[_2419].x) * _2487) * _2488) + _2351;
        _2411 = (((((_2468 * _2241) + _588) * cbLight._m0[_2419].y) * _2487) * _2488) + _2352;
        _2413 = (((((_2468 * _2242) + _589) * cbLight._m0[_2419].z) * _2487) * _2488) + _2353;
    }
    float _2519;
    float _2521;
    float _2523;
    if (_2126)
    {
        _2519 = _2409;
        _2521 = _2411;
        _2523 = _2413;
    }
    else
    {
        uint _2530 = _1941 + 3u;
        uint _2534 = _1941 + 11u;
        float _2548 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2530].w)) * _422) * 0.949999988079071044921875);
        float _2549 = _2548 * _2548;
        float _2550 = cbLight._m0[_2530].x + _501;
        float _2551 = cbLight._m0[_2530].y + _502;
        float _2552 = cbLight._m0[_2530].z + _503;
        float _2556 = inversesqrt(dot(vec3(_2550, _2551, _2552), vec3(_2550, _2551, _2552)));
        float _2557 = _2556 * _2550;
        float _2558 = _2556 * _2551;
        float _2559 = _2556 * _2552;
        float _2560 = dot(vec3(_418, _419, _420), vec3(cbLight._m0[_2530].xyz));
        float _4484 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2563 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _2564 = dot(vec3(_418, _419, _420), vec3(_2557, _2558, _2559));
        float _4495 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2567 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2568 = dot(vec3(cbLight._m0[_2530].xyz), vec3(_2557, _2558, _2559));
        float _4506 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2572 = _2549 * _2549;
        float _2576 = ((_2567 * _2567) * (_2572 + (-1.0))) + 1.0;
        float _2583 = exp2(log2(1.0 - (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) * 5.0);
        float _2590 = 1.0 - _2549;
        float _2600 = (0.5 / (((_2217 * ((_2563 * _2590) + _2549)) + 9.9999999392252902907785028219223e-09) + (((_2217 * _2590) + _2549) * _2563))) * _2563;
        float _4517 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2602 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_2572 / ((_2576 * _2576) * 3.141590118408203125));
        float _2603 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
        _2519 = (((((_2583 * _2239) + _586) * cbLight._m0[_2534].x) * _2602) * _2603) + _2409;
        _2521 = (((((_2583 * _2241) + _588) * cbLight._m0[_2534].y) * _2602) * _2603) + _2411;
        _2523 = (((((_2583 * _2242) + _589) * cbLight._m0[_2534].z) * _2602) * _2603) + _2413;
    }
    float _2668;
    float _2670;
    float _2672;
    float _2674;
    float _2676;
    float _2678;
    if (_1939.y == 0u)
    {
        uvec4 _2624 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2625 = _2624.x;
        uint _2636 = uint((float(_2624.y) * floor(float(uint(cbSceneParam._m0[85u].y * _522) / _2625))) + floor(float(uint(cbSceneParam._m0[85u].x * _521) / _2625)));
        float _2646 = (log2(_1717 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2647 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        uint _2650 = uint(isnan(14.0) ? _2647 : (isnan(_2647) ? 14.0 : min(_2647, 14.0)));
        uvec4 _2655 = texelFetch(g_lightClusterGridBuffer, int(((_2650 << 2u) + (_2636 << 6u)) >> 2u));
        uint _2656 = _2655.x;
        uint _2657 = _2624.z;
        float _2766;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        if (((((1u << ((_2657 >> 4u) & 15u)) + 4294967295u) & _2656) == 0u) || ((_2657 & 240u) == 0u))
        {
            _2766 = 0.0;
            _2768 = 0.0;
            _2770 = 0.0;
            _2772 = 0.0;
            _2774 = 0.0;
            _2776 = 0.0;
        }
        else
        {
            float _2767;
            float _2769;
            float _2771;
            float _2773;
            float _2775;
            float _2777;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            uint _2933 = 0u;
            uint _2942;
            bool _2943;
            for (;;)
            {
                _2942 = texelFetch(g_lightClassification, int((((_2650 << 5u) + (_2636 << 9u)) + (_2933 << 2u)) >> 2u)).x;
                _2943 = _2942 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2943)
                {
                    frontier_phi_73_pred = _2932;
                    frontier_phi_73_pred_1 = _2931;
                    frontier_phi_73_pred_2 = _2930;
                    frontier_phi_73_pred_3 = _2929;
                    frontier_phi_73_pred_4 = _2928;
                    frontier_phi_73_pred_5 = _2927;
                }
                else
                {
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    uint _3078;
                    _3072 = _2927;
                    _3073 = _2928;
                    _3074 = _2929;
                    _3075 = _2930;
                    _3076 = _2931;
                    _3077 = _2932;
                    _3078 = _2942;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    for (;;)
                    {
                        uint _3082 = uint(findLSB(_3078)) + (_2933 << 5u);
                        uint _3079 = (_3078 + 4294967295u) & _3078;
                        uint _3084 = _3082 * 48u;
                        vec4 _3098 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3084)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 3u)).x));
                        uint _3104 = (_3082 * 48u) + 4u;
                        vec4 _3117 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3104)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 3u)).x));
                        uint _3123 = (_3082 * 48u) + 8u;
                        vec3 _3134 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3123)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 2u)).x));
                        float _3138 = _3098.x - _1715;
                        float _3139 = _3098.y - _1716;
                        float _3140 = _3098.z - _1717;
                        float _3141 = dot(vec3(_3138, _3139, _3140), vec3(_3138, _3139, _3140));
                        float _3144 = inversesqrt(_3141);
                        float _3145 = _3144 * _3138;
                        float _3146 = _3144 * _3139;
                        float _3147 = _3144 * _3140;
                        float _3148 = dot(vec3(_541, _544, _547), vec3(_3145, _3146, _3147));
                        float _3153 = 1.0 - (_3141 * _3098.w);
                        float _4543 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                        float _3154 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                        float _3155 = sqrt(_3141) * _3117.w;
                        float _3158 = 1.39999997615814208984375 / (_3155 + 1.39999997615814208984375);
                        float _3159 = _3158 * _3158;
                        float _3162 = ((1.0 - _3159) * _3148) + _3159;
                        float _3165 = _3155 * _3155;
                        float _3169 = ((isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0))) * _3154) / ((_3165 * 0.699999988079071044921875) + 1.0);
                        float _3173 = (-0.0) - _1715;
                        float _3174 = (-0.0) - _1716;
                        float _3175 = (-0.0) - _1717;
                        float _3179 = inversesqrt(dot(vec3(_3173, _3174, _3175), vec3(_3173, _3174, _3175)));
                        float _3180 = _3179 * _3173;
                        float _3181 = _3179 * _3174;
                        float _3182 = _3179 * _3175;
                        float _3189 = exp2(log2(1.0 / ((_3165 * 3.5) + 5.0)) * 0.25);
                        float _3190 = 1.0 - _617;
                        float _3197 = sqrt(1.0 - ((1.0 - (_3190 * _3190)) * (1.0 - (_3189 * _3189))));
                        float _3198 = _3197 * _3197;
                        float _3199 = _3198 * _3198;
                        float _3200 = _3180 + _3145;
                        float _3201 = _3181 + _3146;
                        float _3202 = _3182 + _3147;
                        float _3206 = inversesqrt(dot(vec3(_3200, _3201, _3202), vec3(_3200, _3201, _3202)));
                        float _3210 = dot(vec3(_541, _544, _547), vec3(_3180, _3181, _3182));
                        float _4559 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3213 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                        float _3214 = dot(vec3(_541, _544, _547), vec3(_3206 * _3200, _3206 * _3201, _3206 * _3202));
                        float _4570 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3217 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                        float _3221 = ((_3217 * _3217) * (_3199 + (-1.0))) + 1.0;
                        float _3222 = _3158 * _3198;
                        float _3223 = _3222 * _3222;
                        float _3226 = ((1.0 - _3223) * _3148) + _3223;
                        float _4581 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3227 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                        float _3228 = 1.0 - _3198;
                        float _3238 = (0.5 / (((_3227 * ((_3213 * _3228) + _3198)) + 9.9999999392252902907785028219223e-09) + (((_3227 * _3228) + _3198) * _3213))) * _3227;
                        float _4592 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3249 = (((_3199 * 3.1415927410125732421875) * (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) / ((_3221 * _3221) * ((_3165 * 2.1991131305694580078125) + 3.141590118408203125))) * _3154;
                        _3002 = (_3169 * _3117.x) + _3075;
                        _3003 = (_3169 * _3117.y) + _3076;
                        _3004 = (_3169 * _3117.z) + _3077;
                        _2999 = (_3249 * _3134.x) + _3072;
                        _3000 = (_3249 * _3134.y) + _3073;
                        _3001 = (_3249 * _3134.z) + _3074;
                        if (_3079 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3072 = _2999;
                            _3073 = _3000;
                            _3074 = _3001;
                            _3075 = _3002;
                            _3076 = _3003;
                            _3077 = _3004;
                            _3078 = _3079;
                        }
                    }
                    frontier_phi_73_pred = _3004;
                    frontier_phi_73_pred_1 = _3003;
                    frontier_phi_73_pred_2 = _3002;
                    frontier_phi_73_pred_3 = _3001;
                    frontier_phi_73_pred_4 = _3000;
                    frontier_phi_73_pred_5 = _2999;
                }
                _2777 = frontier_phi_73_pred;
                _2775 = frontier_phi_73_pred_1;
                _2773 = frontier_phi_73_pred_2;
                _2771 = frontier_phi_73_pred_3;
                _2769 = frontier_phi_73_pred_4;
                _2767 = frontier_phi_73_pred_5;
                uint _2934 = _2933 + 1u;
                if (_2934 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2927 = _2767;
                    _2928 = _2769;
                    _2929 = _2771;
                    _2930 = _2773;
                    _2931 = _2775;
                    _2932 = _2777;
                    _2933 = _2934;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2766 = _2767;
            _2768 = _2769;
            _2770 = _2771;
            _2772 = _2773;
            _2774 = _2775;
            _2776 = _2777;
        }
        uvec4 _2780 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2781 = _2780.z;
        uint _2783 = (_2781 >> 8u) & 15u;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        if (((4294967295u << _2783) & _2656) == 0u)
        {
            _2895 = _2766;
            _2897 = _2768;
            _2899 = _2770;
            _2901 = _2772;
            _2903 = _2774;
            _2905 = _2776;
        }
        else
        {
            float _2920 = inversesqrt(dot(vec3(_1715, _1716, _1717), vec3(_1715, _1716, _1717)));
            float _2921 = _2920 * _1715;
            float _2922 = _2920 * _1716;
            float _2923 = _2920 * _1717;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2783 < ((_2781 >> 12u) & 15u))
            {
                float _2896;
                float _2898;
                float _2900;
                float _2902;
                float _2904;
                float _2906;
                float _3055 = _2766;
                float _3056 = _2768;
                float _3057 = _2770;
                float _3058 = _2772;
                float _3059 = _2774;
                float _3060 = _2776;
                uint _3061 = _2783;
                uint _3070;
                bool _3071;
                for (;;)
                {
                    _3070 = texelFetch(g_lightClassification, int((((_2650 << 5u) + (_2636 << 9u)) + (_3061 << 2u)) >> 2u)).x;
                    _3071 = _3070 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3071)
                    {
                        frontier_phi_84_pred = _3059;
                        frontier_phi_84_pred_1 = _3058;
                        frontier_phi_84_pred_2 = _3057;
                        frontier_phi_84_pred_3 = _3056;
                        frontier_phi_84_pred_4 = _3055;
                        frontier_phi_84_pred_5 = _3060;
                    }
                    else
                    {
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3276 = _3055;
                        float _3277 = _3056;
                        float _3278 = _3057;
                        float _3279 = _3058;
                        float _3280 = _3059;
                        float _3281 = _3060;
                        uint _3282 = _3070;
                        uint _3283;
                        vec4 _3308;
                        float _3309;
                        vec4 _3324;
                        vec3 _3336;
                        vec4 _3352;
                        vec4 _3368;
                        float _3415;
                        bool _3416;
                        for (;;)
                        {
                            uint _3293 = ((_3061 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3282));
                            _3283 = (_3282 + 4294967295u) & _3282;
                            uint _3295 = _3293 * 40u;
                            _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            _3309 = _3308.w;
                            uint _3311 = (_3293 * 40u) + 4u;
                            _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            uint _3326 = (_3293 * 40u) + 8u;
                            _3336 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x));
                            uint _3339 = (_3293 * 40u) + 16u;
                            _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            uint _3355 = (_3293 * 40u) + 20u;
                            _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            uint _3371 = (_3293 * 40u) + 24u;
                            vec4 _3384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 3u)).x));
                            uint _3390 = (_3293 * 40u) + 28u;
                            vec4 _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            _3415 = fma(_1717, _3403.z, fma(_1716, _3403.y, _3403.x * _1715)) + _3403.w;
                            _3416 = !((fma(_1717, _3384.z, fma(_1716, _3384.y, _3384.x * _1715)) + _3384.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3416)
                            {
                                float _3443 = _3308.x - _1715;
                                float _3444 = _3308.y - _1716;
                                float _3445 = _3308.z - _1717;
                                float _3446 = dot(vec3(_3443, _3444, _3445), vec3(_3443, _3444, _3445));
                                float _3449 = inversesqrt(_3446);
                                float _3450 = _3449 * _3443;
                                float _3451 = _3449 * _3444;
                                float _3452 = _3449 * _3445;
                                float _3456 = 1.0 - (_3446 / (_3309 * _3309));
                                float _4603 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3457 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3461 = sqrt(_3446) * _3324.w;
                                float _3463 = 1.39999997615814208984375 / (_3461 + 1.39999997615814208984375);
                                float _3464 = _3463 * _3463;
                                float _3467 = ((1.0 - _3464) * dot(vec3(_3450, _3451, _3452), vec3(_541, _544, _547))) + _3464;
                                float _3470 = _3461 * _3461;
                                float _3474 = (fma(_1717, _3352.z, fma(_1716, _3352.y, _3352.x * _1715)) + _3352.w) / _3415;
                                float _3475 = (fma(_1717, _3368.z, fma(_1716, _3368.y, _3368.x * _1715)) + _3368.w) / _3415;
                                float _3479 = 1.0 - dot(vec2(_3474, _3475), vec2(_3474, _3475));
                                float _4619 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3480 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                                float _3481 = _3480 * (((isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0))) * _3457) / ((_3470 * 0.699999988079071044921875) + 1.0));
                                float _3493 = exp2(log2(1.0 / ((_3470 * 3.5) + 5.0)) * 0.25);
                                float _3494 = 1.0 - _617;
                                float _3501 = sqrt(1.0 - ((1.0 - (_3494 * _3494)) * (1.0 - (_3493 * _3493))));
                                float _3502 = _3501 * _3501;
                                float _3503 = _3502 * _3502;
                                float _3504 = _3450 - _2921;
                                float _3505 = _3451 - _2922;
                                float _3506 = _3452 - _2923;
                                float _3510 = inversesqrt(dot(vec3(_3504, _3505, _3506), vec3(_3504, _3505, _3506)));
                                float _3514 = dot(vec3(_541, _544, _547), vec3((-0.0) - _2921, (-0.0) - _2922, (-0.0) - _2923));
                                float _4630 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3517 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                                float _3518 = dot(vec3(_541, _544, _547), vec3(_3510 * _3504, _3510 * _3505, _3510 * _3506));
                                float _4641 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3521 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                                float _3525 = ((_3521 * _3521) * (_3503 + (-1.0))) + 1.0;
                                float _3526 = _3463 * _3502;
                                float _3527 = _3526 * _3526;
                                float _3533 = ((1.0 - _3527) * dot(vec3(_541, _544, _547), vec3(_3450, _3451, _3452))) + _3527;
                                float _4652 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                                float _3534 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                                float _3535 = 1.0 - _3502;
                                float _3545 = (0.5 / (((_3534 * ((_3517 * _3535) + _3502)) + 9.9999999392252902907785028219223e-09) + (((_3534 * _3535) + _3502) * _3517))) * _3534;
                                float _4663 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3555 = (_3480 * _3457) * (((_3503 * 3.1415927410125732421875) * (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) / ((_3525 * _3525) * ((_3470 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3481 * _3324.y;
                                frontier_phi_90_pred_1 = _3481 * _3324.x;
                                frontier_phi_90_pred_2 = _3555 * _3336.z;
                                frontier_phi_90_pred_3 = _3555 * _3336.y;
                                frontier_phi_90_pred_4 = _3555 * _3336.x;
                                frontier_phi_90_pred_5 = _3481 * _3324.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3563 = frontier_phi_90_pred;
                            _3562 = frontier_phi_90_pred_1;
                            _3561 = frontier_phi_90_pred_2;
                            _3560 = frontier_phi_90_pred_3;
                            _3559 = frontier_phi_90_pred_4;
                            _3564 = frontier_phi_90_pred_5;
                            _3266 = _3562 + _3279;
                            _3267 = _3563 + _3280;
                            _3268 = _3564 + _3281;
                            _3263 = _3559 + _3276;
                            _3264 = _3560 + _3277;
                            _3265 = _3561 + _3278;
                            if (_3283 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3283;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3267;
                        frontier_phi_84_pred_1 = _3266;
                        frontier_phi_84_pred_2 = _3265;
                        frontier_phi_84_pred_3 = _3264;
                        frontier_phi_84_pred_4 = _3263;
                        frontier_phi_84_pred_5 = _3268;
                    }
                    _2904 = frontier_phi_84_pred;
                    _2902 = frontier_phi_84_pred_1;
                    _2900 = frontier_phi_84_pred_2;
                    _2898 = frontier_phi_84_pred_3;
                    _2896 = frontier_phi_84_pred_4;
                    _2906 = frontier_phi_84_pred_5;
                    uint _3062 = _3061 + 1u;
                    if (_3062 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3055 = _2896;
                        _3056 = _2898;
                        _3057 = _2900;
                        _3058 = _2902;
                        _3059 = _2904;
                        _3060 = _2906;
                        _3061 = _3062;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2906;
                frontier_phi_65_66_ladder_1 = _2902;
                frontier_phi_65_66_ladder_2 = _2904;
                frontier_phi_65_66_ladder_3 = _2898;
                frontier_phi_65_66_ladder_4 = _2896;
                frontier_phi_65_66_ladder_5 = _2900;
            }
            else
            {
                frontier_phi_65_66_ladder = _2776;
                frontier_phi_65_66_ladder_1 = _2772;
                frontier_phi_65_66_ladder_2 = _2774;
                frontier_phi_65_66_ladder_3 = _2768;
                frontier_phi_65_66_ladder_4 = _2766;
                frontier_phi_65_66_ladder_5 = _2770;
            }
            _2895 = frontier_phi_65_66_ladder_4;
            _2897 = frontier_phi_65_66_ladder_3;
            _2899 = frontier_phi_65_66_ladder_5;
            _2901 = frontier_phi_65_66_ladder_1;
            _2903 = frontier_phi_65_66_ladder_2;
            _2905 = frontier_phi_65_66_ladder;
        }
        float _2910 = isnan(1.0) ? _601 : (isnan(_601) ? 1.0 : min(_601, 1.0));
        _2668 = (_2910 * _2901) + _2181;
        _2670 = (_2910 * _2903) + _2183;
        _2672 = (_2910 * _2905) + _2185;
        _2674 = ((_2895 * _586) * _2910) + _2519;
        _2676 = ((_2897 * _588) * _2910) + _2521;
        _2678 = ((_2899 * _589) * _2910) + _2523;
    }
    else
    {
        _2668 = _2181;
        _2670 = _2183;
        _2672 = _2185;
        _2674 = _2519;
        _2676 = _2521;
        _2678 = _2523;
    }
    uint _2684 = _562 + uint(cbMatDynParam._m0[0u].w);
    float _2690 = (cbMatDynParam._m0[17u].y * _289) * cbInstanceData._m0[_2684].x;
    float _2691 = (cbMatDynParam._m0[17u].y * _290) * cbInstanceData._m0[_2684].y;
    float _2692 = (cbMatDynParam._m0[17u].y * _291) * cbInstanceData._m0[_2684].z;
    float _4679 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _4690 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _4701 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _4712 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _2710 = (((isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2668 + ((isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))) * _601))) + ((_2674 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _1443)) * cbPerFrame._m0[3u].x)) + _2690;
    float _2712 = (_2691 + ((_2676 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _1443)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_2670 + ((isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))) * _601)));
    float _2714 = (_2692 + ((_2678 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _1443)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2672 + ((isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0))) * _601)));
    float _2715 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
    float _2716 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
    float _2717 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
    float _2723 = cbMtdParam._m0[2u].x * _2690;
    float _2724 = cbMtdParam._m0[2u].y * _2691;
    float _2725 = cbMtdParam._m0[2u].z * _2692;
    float _4738 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2727 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
    float _2732 = cbInstanceData._m0[_560 + 6u].w * (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0)));
    float _2737 = _521 / cbSceneParam._m0[86u].x;
    float _2738 = _522 / cbSceneParam._m0[86u].y;
    vec4 _2752 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2737, _2738, (log2((isnan(cbSceneParam._m0[77u].w) ? _442 : (isnan(_442) ? cbSceneParam._m0[77u].w : min(_442, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2754 = _2752.x;
    float _2755 = _2752.y;
    float _2756 = _2752.z;
    float _2757 = _2752.w;
    float _2828;
    float _2830;
    float _2832;
    float _2834;
    if (_442 > cbSceneParam._m0[78u].w)
    {
        float _2791 = isnan(_442) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _442 : min(cbSceneParam._m0[80u].w, _442));
        float _2792 = _2791 / _442;
        float _2803 = _2792 * _494;
        float _2804 = _495 * _2792;
        float _2805 = (-0.0) - _2804;
        float _2806 = _2792 * _496;
        float _2808 = (cbSceneParam._m0[77u].w * _2805) / _2791;
        float _2809 = _2808 + cbSceneParam._m0[79u].w;
        float _2810 = cbSceneParam._m0[79u].w - _2804;
        float _2816 = sqrt(((_2803 * _2803) + (_2804 * _2804)) + (_2806 * _2806));
        float _2819 = (1.0 - (cbSceneParam._m0[77u].w / _2791)) * _2816;
        float _2824 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2826 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3012;
        if (abs((_2805 - _2808) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3012 = ((((_2809 > 0.0) ? exp2(_2824 * _2809) : (2.0 - exp2(_2826 * _2809))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2819;
        }
        else
        {
            float _2956 = 1.0 / cbSceneParam._m0[80u].x;
            float _2957 = isnan(_2810) ? _2809 : (isnan(_2809) ? _2810 : max(_2809, _2810));
            float _2958 = isnan(_2810) ? _2809 : (isnan(_2809) ? _2810 : min(_2809, _2810));
            float _2967 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : min(_2957, 0.0));
            float _2968 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : min(_2958, 0.0));
            _3012 = ((abs(_2816 / _2805) * cbSceneParam._m0[80u].y) * ((((_2967 - _2968) * 2.0) - ((exp2(_2824 * (isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0)))) - exp2(_2824 * (isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0))))) * _2956)) - ((exp2(_2826 * _2967) - exp2(_2826 * _2968)) * _2956))) + (_2819 * cbSceneParam._m0[80u].z);
        }
        vec4 _3014 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2737, _2738, 1.0), 0.0);
        float _3023 = exp2((_3012 * (-1.44269502162933349609375)) * (1.0 - _3014.w));
        float _3024 = log2(_3023);
        float _3040 = log2(_2757);
        _2828 = (exp2(_3040 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3024 * cbSceneParam._m0[78u].x)) * _3014.x) / cbSceneParam._m0[78u].x)) + _2754;
        _2830 = (exp2(_3040 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3024 * cbSceneParam._m0[78u].y)) * _3014.y) / cbSceneParam._m0[78u].y)) + _2755;
        _2832 = (exp2(_3040 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3024 * cbSceneParam._m0[78u].z)) * _3014.z) / cbSceneParam._m0[78u].z)) + _2756;
        _2834 = _3023 * _2757;
    }
    else
    {
        _2828 = _2754;
        _2830 = _2755;
        _2832 = _2756;
        _2834 = _2757;
    }
    bool _3050;
    vec4 _2844;
    vec4 _2866;
    float _2868;
    float _2872;
    float _2873;
    float _2874;
    float _2877;
    float _2880;
    float _2883;
    float _2884;
    bool _2894;
    for (;;)
    {
        _2844 = cbMatDynParam._m0[0u];
        float _2846 = roundEven(_2844.y);
        bool _2847 = _2846 == 3.0;
        float _2848 = log2(_2834);
        float _2852 = exp2(_2848 * cbSceneParam._m0[78u].x);
        float _2853 = exp2(_2848 * cbSceneParam._m0[78u].y);
        float _2854 = exp2(_2848 * cbSceneParam._m0[78u].z);
        float _2855 = _2852 * _2715;
        float _2856 = _2853 * _2716;
        float _2857 = _2854 * _2717;
        float _2864 = _510 + (-0.5);
        _2866 = cbMtdParam._m0[1u];
        _2868 = _2866.y * _2864;
        float _2871 = (_2846 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2872 = _2871 * (_2847 ? _2855 : (_2855 + (cbSceneParam._m0[72u].w * _2828)));
        _2873 = _2871 * (_2847 ? _2856 : (_2856 + (cbSceneParam._m0[72u].w * _2830)));
        _2874 = _2871 * (_2847 ? _2857 : (_2857 + (cbSceneParam._m0[72u].w * _2832)));
        _2877 = ((_2723 * _2727) * _2852) * _2871;
        _2880 = ((_2724 * _2727) * _2853) * _2871;
        _2883 = ((_2725 * _2727) * _2854) * _2871;
        _2884 = _2864 * 0.999000012874603271484375;
        _2894 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2894)
        {
            if ((cbInstanceData._m0[_560 + 7u].x + _2884) < 0.5)
            {
                _3050 = true;
                break;
            }
        }
        uint _2991 = _562 + uint(_2844.w);
        if ((cbInstanceData._m0[_2991].w < 1.0) && ((cbInstanceData._m0[_2991].w + _2884) < 0.5))
        {
            _3050 = true;
            break;
        }
        if ((_2868 + _251) < _2866.x)
        {
            _3050 = true;
            break;
        }
        _3050 = false;
        break;
    }
    float _3254;
    if (_3050)
    {
        discard_state = true;
        _3254 = 0.0;
    }
    else
    {
        _3254 = _2732;
    }
    SV_Target.x = _2872;
    SV_Target.y = _2873;
    SV_Target.z = _2874;
    SV_Target.w = _3254;
    SV_Target_1.x = _2877;
    SV_Target_1.y = _2880;
    SV_Target_1.z = _2883;
    SV_Target_1.w = _2732;
    discard_exit();
}


