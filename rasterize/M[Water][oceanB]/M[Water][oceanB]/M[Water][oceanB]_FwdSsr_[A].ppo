#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 0, std140) uniform cbPerSceneUBO
{
    vec4 _m0[39];
} cbPerScene;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 26) uniform texture2D g_PrevFrameTexture;
layout(set = 0, binding = 27) uniform texture2D g_ConvertedDepthTexture;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in vec3 TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _96 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _97 = _96 * NORMAL.x;
    float _98 = _96 * NORMAL.y;
    float _99 = _96 * NORMAL.z;
    float _104;
    float _105;
    float _106;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _104 = (-0.0) - _97;
        _105 = (-0.0) - _98;
        _106 = (-0.0) - _99;
    }
    else
    {
        _104 = _97;
        _105 = _98;
        _106 = _99;
    }
    float _151 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _161 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _151);
    float _162 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _151);
    float _163 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _151);
    float _173 = sqrt(((_161 * _161) + (_162 * _162)) + (_163 * _163));
    float _176 = cbMtdParam._m0[13u].y - cbMtdParam._m0[13u].x;
    float _195 = (cbMtdParam._m0[15u].x + ((_173 - cbMtdParam._m0[13u].x) / (isnan(0.0) ? _176 : (isnan(_176) ? 0.0 : max(_176, 0.0))))) * cbMtdParam._m0[14u].y;
    float _809 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _200 = ((isnan(1.0) ? _809 : (isnan(_809) ? 1.0 : min(_809, 1.0))) * (cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].x)) + cbMtdParam._m0[11u].x;
    float _820 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _201 = isnan(1.0) ? _820 : (isnan(_820) ? 1.0 : min(_820, 1.0));
    float _215 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _249 = (cbMatDynParam._m0[5u].x * _173) + cbMatDynParam._m0[5u].y;
        float _831 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
        float _250 = isnan(1.0) ? _831 : (isnan(_831) ? 1.0 : min(_831, 1.0));
        float _254 = (cbMatDynParam._m0[5u].z * _173) + cbMatDynParam._m0[5u].w;
        float _842 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _842 : (isnan(_842) ? 1.0 : min(_842, 1.0))) - _250)) + _250) < ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _225 = POSITION_1.x / POSITION_1.w;
    float _226 = POSITION_1.y / POSITION_1.w;
    float _230 = (_225 * 0.5) + 0.5;
    float _231 = 0.5 - (_226 * 0.5);
    float _267;
    float _269;
    float _271;
    float _273;
    if (_201 < cbPerScene._m0[22u].z)
    {
        _267 = 0.0;
        _269 = 0.0;
        _271 = 0.0;
        _273 = 0.0;
    }
    else
    {
        float _279 = 1.0 / _215;
        float frontier_phi_5_6_ladder;
        float frontier_phi_5_6_ladder_1;
        float frontier_phi_5_6_ladder_2;
        float frontier_phi_5_6_ladder_3;
        if (!(cbPerScene._m0[21u].y >= _279))
        {
            float _305 = fma(_106, cbPerScene._m0[8u].z, fma(_105, cbPerScene._m0[8u].y, cbPerScene._m0[8u].x * _104));
            float _308 = fma(_106, cbPerScene._m0[9u].z, fma(_105, cbPerScene._m0[9u].y, cbPerScene._m0[9u].x * _104));
            float _311 = fma(_106, cbPerScene._m0[10u].z, fma(_105, cbPerScene._m0[10u].y, cbPerScene._m0[10u].x * _104));
            float _318 = (_225 * _215) * cbPerScene._m0[28u].x;
            float _320 = (_226 * _215) * cbPerScene._m0[28u].y;
            float _324 = inversesqrt(dot(vec3(_318, _320, _215), vec3(_318, _320, _215)));
            float _325 = _318 * _324;
            float _326 = _320 * _324;
            float _327 = _324 * _215;
            float _331 = dot(vec3(_325, _326, _327), vec3(_305, _308, _311)) * 2.0;
            float _336 = _325 - (_331 * _305);
            float _337 = _326 - (_331 * _308);
            float _338 = _327 - (_331 * _311);
            float _342 = inversesqrt(dot(vec3(_336, _337, _338), vec3(_336, _337, _338)));
            float _345 = _338 * _342;
            float frontier_phi_5_6_ladder_8_ladder;
            float frontier_phi_5_6_ladder_8_ladder_1;
            float frontier_phi_5_6_ladder_8_ladder_2;
            float frontier_phi_5_6_ladder_8_ladder_3;
            if (_345 < cbPerScene._m0[16u].x)
            {
                frontier_phi_5_6_ladder_8_ladder = 0.0;
                frontier_phi_5_6_ladder_8_ladder_1 = 0.0;
                frontier_phi_5_6_ladder_8_ladder_2 = 0.0;
                frontier_phi_5_6_ladder_8_ladder_3 = 0.0;
            }
            else
            {
                float _357 = abs(dot(vec3((-0.0) - _325, (-0.0) - _326, (-0.0) - _327), vec3(_305, _308, _311)));
                float _853 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
                float _368 = (((_201 * _201) * 0.959999978542327880859375) * exp2(log2(1.0 - (isnan(1.0) ? _853 : (isnan(_853) ? 1.0 : min(_853, 1.0)))) * 5.0)) + 0.039999999105930328369140625;
                float _377 = (cbPerScene._m0[29u].x * (1.0 - _201)) + cbPerScene._m0[29u].y;
                float _864 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
                float _386 = ((cbPerScene._m0[23u].w - cbPerScene._m0[23u].z) * (isnan(1.0) ? _864 : (isnan(_864) ? 1.0 : min(_864, 1.0)))) + cbPerScene._m0[23u].z;
                float frontier_phi_5_6_ladder_8_ladder_9_ladder;
                float frontier_phi_5_6_ladder_8_ladder_9_ladder_1;
                float frontier_phi_5_6_ladder_8_ladder_9_ladder_2;
                float frontier_phi_5_6_ladder_8_ladder_9_ladder_3;
                if (_368 < cbPerScene._m0[22u].x)
                {
                    frontier_phi_5_6_ladder_8_ladder_9_ladder = 0.0;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_1 = 0.0;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_2 = 0.0;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_3 = 0.0;
                }
                else
                {
                    float _389 = _345 - cbPerScene._m0[16u].x;
                    float _875 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
                    float _390 = isnan(1.0) ? _875 : (isnan(_875) ? 1.0 : min(_875, 1.0));
                    float _391 = _390 * _390;
                    float _393 = (_368 - cbPerScene._m0[22u].x) * 10.0;
                    float _886 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
                    float _395 = isnan(1.0) ? _886 : (isnan(_886) ? 1.0 : min(_886, 1.0));
                    float _396 = isnan(_395) ? _391 : (isnan(_391) ? _395 : min(_391, _395));
                    float _400 = (cbPerScene._m0[21u].x - _215) * cbPerScene._m0[21u].z;
                    float _902 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
                    float _401 = isnan(1.0) ? _902 : (isnan(_902) ? 1.0 : min(_902, 1.0));
                    float _402 = isnan(_401) ? _396 : (isnan(_396) ? _401 : min(_396, _401));
                    float _403 = (_336 * _342) + _318;
                    float _404 = (_337 * _342) + _320;
                    float _405 = _345 + _215;
                    float _437 = fma(_405, cbPerScene._m0[7u].z, fma(_404, cbPerScene._m0[7u].y, cbPerScene._m0[7u].x * _403)) + cbPerScene._m0[7u].w;
                    float _441 = ((fma(_405, cbPerScene._m0[4u].z, fma(_404, cbPerScene._m0[4u].y, cbPerScene._m0[4u].x * _403)) + cbPerScene._m0[4u].w) / _437) - _230;
                    float _442 = ((fma(_405, cbPerScene._m0[5u].z, fma(_404, cbPerScene._m0[5u].y, cbPerScene._m0[5u].x * _403)) + cbPerScene._m0[5u].w) / _437) - _231;
                    float _449 = cbPerScene._m0[18u].x * _441;
                    float _450 = cbPerScene._m0[18u].y * _442;
                    float _455 = sqrt((_449 * _449) + (_450 * _450)) + 9.9999997473787516355514526367188e-06;
                    float _460 = (_441 / _455) * _386;
                    float _461 = (_442 / _455) * _386;
                    float _462 = (((1.0 / _405) - _279) / _455) * _386;
                    float _491 = abs(float(_460 > 0.0) - _230) / (abs(_460) + 1.0000000116860974230803549289703e-07);
                    float _492 = abs(float(_461 > 0.0) - _231) / (abs(_461) + 1.0000000116860974230803549289703e-07);
                    float _494 = (abs(((_462 > 0.0) ? cbPerScene._m0[20u].x : cbPerScene._m0[20u].y) - _279) / (abs(_462) + 1.0000000116860974230803549289703e-07)) + 2.0;
                    float _495 = isnan(_492) ? _491 : (isnan(_491) ? _492 : min(_491, _492));
                    float _496 = isnan(_494) ? _495 : (isnan(_495) ? _494 : min(_495, _494));
                    uint _499 = uint(int(isnan(cbPerScene._m0[23u].y) ? _496 : (isnan(_496) ? cbPerScene._m0[23u].y : min(_496, cbPerScene._m0[23u].y))));
                    float _274;
                    float _504;
                    float _506;
                    float _508;
                    if (int(_499) > int(0u))
                    {
                        float _501 = _462 + _279;
                        float _502 = _461 + _231;
                        float _503 = _460 + _230;
                        float _505;
                        float _507;
                        float _509;
                        float _510;
                        uint _521;
                        float _523;
                        float _525;
                        float _527;
                        float _529;
                        float _531;
                        float _533;
                        float _535;
                        uint _537;
                        float _539;
                        float _541;
                        float _543;
                        float _516 = 0.0;
                        float _517 = 0.0;
                        float _518 = 0.0;
                        float _519 = 0.0;
                        uint _520 = 0u;
                        float _522 = _279;
                        float _524 = _503;
                        float _526 = _502;
                        float _528 = _501;
                        float _530 = _230;
                        float _532 = _231;
                        float _534 = _279;
                        uint _536 = 1u;
                        float _538 = 0.0;
                        float _540 = 0.0;
                        float _542 = 0.0;
                        float _554;
                        float _560;
                        float _561;
                        float _562;
                        float _563;
                        float _564;
                        float _565;
                        uint _566;
                        float _567;
                        bool _574;
                        for (;;)
                        {
                            _554 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _524, cbSceneParam._m0[86u].y * _526), 0.0).x;
                            bool _559 = _520 == (_499 + 4294967295u);
                            _560 = _559 ? _538 : _524;
                            _561 = _559 ? _540 : _526;
                            _562 = _559 ? _542 : _528;
                            _563 = _559 ? _538 : _530;
                            _564 = _559 ? _540 : _532;
                            _565 = _559 ? _542 : _534;
                            _566 = _559 ? 1u : _536;
                            _567 = _559 ? (-1.0) : (_528 - _554);
                            _574 = (_566 != 0u) && ((_567 <= 0.0) && ((_559 ? (-1.0) : (_554 - (_522 * cbPerScene._m0[19u].y))) < 0.0));
                            float frontier_phi_19_pred;
                            float frontier_phi_19_pred_1;
                            float frontier_phi_19_pred_2;
                            float frontier_phi_19_pred_3;
                            float frontier_phi_19_pred_4;
                            float frontier_phi_19_pred_5;
                            float frontier_phi_19_pred_6;
                            uint frontier_phi_19_pred_7;
                            float frontier_phi_19_pred_8;
                            float frontier_phi_19_pred_9;
                            float frontier_phi_19_pred_10;
                            float frontier_phi_19_pred_11;
                            float frontier_phi_19_pred_12;
                            float frontier_phi_19_pred_13;
                            float frontier_phi_19_pred_14;
                            uint frontier_phi_19_pred_15;
                            if (_574)
                            {
                                uint _584 = uint(int(log2(_386) + 0.999000012874603271484375));
                                float _595;
                                float _597;
                                float _599;
                                float _601;
                                float _603;
                                float _605;
                                float _607;
                                if (int(_584) > int(0u))
                                {
                                    uint _705;
                                    float _707;
                                    float _708;
                                    float _709;
                                    float _710;
                                    float _711;
                                    float _712;
                                    float _713;
                                    _705 = 0u;
                                    _707 = _560;
                                    _708 = _561;
                                    _709 = _562;
                                    _710 = _563;
                                    _711 = _564;
                                    _712 = _565;
                                    _713 = _554;
                                    float _596;
                                    float _598;
                                    float _600;
                                    float _602;
                                    float _604;
                                    float _606;
                                    float _608;
                                    for (;;)
                                    {
                                        float _717 = (_710 + _707) * 0.5;
                                        float _718 = (_711 + _708) * 0.5;
                                        float _719 = (_712 + _709) * 0.5;
                                        vec4 _727 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _717, cbSceneParam._m0[86u].y * _718), 0.0);
                                        float _729 = _727.x;
                                        bool _731 = (_719 - _729) < 0.0;
                                        _596 = _731 ? _717 : _707;
                                        _598 = _731 ? _718 : _708;
                                        _600 = _731 ? _719 : _709;
                                        _602 = _731 ? _710 : _717;
                                        _604 = _731 ? _711 : _718;
                                        _606 = _731 ? _712 : _719;
                                        _608 = _731 ? _729 : _713;
                                        uint _706 = _705 + 1u;
                                        if (_706 == _584)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            _705 = _706;
                                            _707 = _596;
                                            _708 = _598;
                                            _709 = _600;
                                            _710 = _602;
                                            _711 = _604;
                                            _712 = _606;
                                            _713 = _608;
                                        }
                                    }
                                    _595 = _596;
                                    _597 = _598;
                                    _599 = _600;
                                    _601 = _602;
                                    _603 = _604;
                                    _605 = _606;
                                    _607 = _608;
                                }
                                else
                                {
                                    _595 = _560;
                                    _597 = _561;
                                    _599 = _562;
                                    _601 = _563;
                                    _603 = _564;
                                    _605 = _565;
                                    _607 = _554;
                                }
                                float _617 = cbPerScene._m0[28u].x * ((_595 * 2.0) + (-1.0));
                                float _618 = cbPerScene._m0[28u].y * (1.0 - (_597 * 2.0));
                                float _650 = fma(_607, cbPerScene._m0[27u].w, fma(_618, cbPerScene._m0[27u].y, cbPerScene._m0[27u].x * _617) + cbPerScene._m0[27u].z);
                                float _651 = fma(_607, cbPerScene._m0[24u].w, fma(_618, cbPerScene._m0[24u].y, _617 * cbPerScene._m0[24u].x) + cbPerScene._m0[24u].z) / _650;
                                float _652 = fma(_607, cbPerScene._m0[25u].w, fma(_618, cbPerScene._m0[25u].y, cbPerScene._m0[25u].x * _617) + cbPerScene._m0[25u].z) / _650;
                                vec4 _661 = textureLod(sampler2D(g_PrevFrameTexture, SS_ClampLinear), vec2(cbSceneParam._m0[87u].z * _651, cbSceneParam._m0[87u].w * _652), 0.0);
                                float _666 = isnan(_402) ? 1.0 : (isnan(1.0) ? _402 : min(1.0, _402));
                                float _667 = 0.5 - _651;
                                float _668 = 0.5 - _652;
                                float _669 = _667 * 2.0;
                                float _670 = _668 * 2.0;
                                float _671 = _669 * _669;
                                float _672 = _670 * _670;
                                float _938 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
                                float _949 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
                                float _681 = inversesqrt(dot(vec2(_460, _461), vec2(_460, _461)));
                                float _687 = inversesqrt(dot(vec2(_669, _670), vec2(_669, _670)));
                                float _693 = dot(vec2((_667 * (-2.0)) * _687, (_668 * (-2.0)) * _687), vec2(_681 * _460, _681 * _461));
                                float _960 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
                                float _700 = ((1.0 - (isnan(1.0) ? _949 : (isnan(_949) ? 1.0 : min(_949, 1.0)))) * (1.0 - (isnan(1.0) ? _938 : (isnan(_938) ? 1.0 : min(_938, 1.0))))) * (4.0 - ((isnan(1.0) ? _960 : (isnan(_960) ? 1.0 : min(_960, 1.0))) * 2.0));
                                float _971 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
                                float _701 = isnan(1.0) ? _971 : (isnan(_971) ? 1.0 : min(_971, 1.0));
                                float _702 = _701 * _701;
                                frontier_phi_19_pred = _605;
                                frontier_phi_19_pred_1 = _603;
                                frontier_phi_19_pred_2 = _540;
                                frontier_phi_19_pred_3 = _601;
                                frontier_phi_19_pred_4 = _599;
                                frontier_phi_19_pred_5 = _597;
                                frontier_phi_19_pred_6 = _522;
                                frontier_phi_19_pred_7 = _499;
                                frontier_phi_19_pred_8 = isnan(_702) ? _666 : (isnan(_666) ? _702 : min(_666, _702));
                                frontier_phi_19_pred_9 = _661.z;
                                frontier_phi_19_pred_10 = _661.y;
                                frontier_phi_19_pred_11 = _661.x;
                                frontier_phi_19_pred_12 = _595;
                                frontier_phi_19_pred_13 = _542;
                                frontier_phi_19_pred_14 = _538;
                                frontier_phi_19_pred_15 = _566;
                            }
                            else
                            {
                                bool _586 = _567 > 0.0;
                                frontier_phi_19_pred = _562;
                                frontier_phi_19_pred_1 = _561;
                                frontier_phi_19_pred_2 = _586 ? _561 : _540;
                                frontier_phi_19_pred_3 = _560;
                                frontier_phi_19_pred_4 = _562 + _462;
                                frontier_phi_19_pred_5 = _561 + _461;
                                frontier_phi_19_pred_6 = _554;
                                frontier_phi_19_pred_7 = _520 + 1u;
                                frontier_phi_19_pred_8 = _519;
                                frontier_phi_19_pred_9 = _518;
                                frontier_phi_19_pred_10 = _517;
                                frontier_phi_19_pred_11 = _516;
                                frontier_phi_19_pred_12 = _560 + _460;
                                frontier_phi_19_pred_13 = _586 ? _562 : _542;
                                frontier_phi_19_pred_14 = _586 ? _560 : _538;
                                frontier_phi_19_pred_15 = uint(_586);
                            }
                            _535 = frontier_phi_19_pred;
                            _533 = frontier_phi_19_pred_1;
                            _541 = frontier_phi_19_pred_2;
                            _531 = frontier_phi_19_pred_3;
                            _529 = frontier_phi_19_pred_4;
                            _527 = frontier_phi_19_pred_5;
                            _523 = frontier_phi_19_pred_6;
                            _521 = frontier_phi_19_pred_7;
                            _510 = frontier_phi_19_pred_8;
                            _509 = frontier_phi_19_pred_9;
                            _507 = frontier_phi_19_pred_10;
                            _505 = frontier_phi_19_pred_11;
                            _525 = frontier_phi_19_pred_12;
                            _543 = frontier_phi_19_pred_13;
                            _539 = frontier_phi_19_pred_14;
                            _537 = frontier_phi_19_pred_15;
                            if (int(_521) < int(_499))
                            {
                                _516 = _505;
                                _517 = _507;
                                _518 = _509;
                                _519 = _510;
                                _520 = _521;
                                _522 = _523;
                                _524 = _525;
                                _526 = _527;
                                _528 = _529;
                                _530 = _531;
                                _532 = _533;
                                _534 = _535;
                                _536 = _537;
                                _538 = _539;
                                _540 = _541;
                                _542 = _543;
                                continue;
                            }
                            else
                            {
                                break;
                            }
                        }
                        _504 = _505;
                        _506 = _507;
                        _508 = _509;
                        _274 = _510;
                    }
                    else
                    {
                        _504 = 0.0;
                        _506 = 0.0;
                        _508 = 0.0;
                        _274 = 0.0;
                    }
                    float frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder;
                    float frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_1;
                    float frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_2;
                    float frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_3;
                    if ((isnan(_504) || isnan(_506)) || isnan(_508))
                    {
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder = 0.0;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_1 = 0.0;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_2 = 0.0;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_3 = 0.0;
                    }
                    else
                    {
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder = (_274 * _504) * cbPerScene._m0[28u].w;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_1 = _274;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_2 = (_274 * _508) * cbPerScene._m0[28u].w;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_3 = (_274 * _506) * cbPerScene._m0[28u].w;
                    }
                    frontier_phi_5_6_ladder_8_ladder_9_ladder = frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_1 = frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_1;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_2 = frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_2;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_3 = frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_3;
                }
                frontier_phi_5_6_ladder_8_ladder = frontier_phi_5_6_ladder_8_ladder_9_ladder;
                frontier_phi_5_6_ladder_8_ladder_1 = frontier_phi_5_6_ladder_8_ladder_9_ladder_1;
                frontier_phi_5_6_ladder_8_ladder_2 = frontier_phi_5_6_ladder_8_ladder_9_ladder_2;
                frontier_phi_5_6_ladder_8_ladder_3 = frontier_phi_5_6_ladder_8_ladder_9_ladder_3;
            }
            frontier_phi_5_6_ladder = frontier_phi_5_6_ladder_8_ladder;
            frontier_phi_5_6_ladder_1 = frontier_phi_5_6_ladder_8_ladder_1;
            frontier_phi_5_6_ladder_2 = frontier_phi_5_6_ladder_8_ladder_2;
            frontier_phi_5_6_ladder_3 = frontier_phi_5_6_ladder_8_ladder_3;
        }
        else
        {
            frontier_phi_5_6_ladder = 0.0;
            frontier_phi_5_6_ladder_1 = 0.0;
            frontier_phi_5_6_ladder_2 = 0.0;
            frontier_phi_5_6_ladder_3 = 0.0;
        }
        _267 = frontier_phi_5_6_ladder;
        _269 = frontier_phi_5_6_ladder_3;
        _271 = frontier_phi_5_6_ladder_2;
        _273 = frontier_phi_5_6_ladder_1;
    }
    SV_Target.x = _267;
    SV_Target.y = _269;
    SV_Target.z = _271;
    SV_Target.w = _273;
    discard_exit();
}


