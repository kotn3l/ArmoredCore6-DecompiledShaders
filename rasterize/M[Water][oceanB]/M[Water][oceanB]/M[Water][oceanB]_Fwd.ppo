#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_oceanB_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_oceanB_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_oceanB_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in vec3 TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1242;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _215 = _214 * _207;
    float _216 = _214 * _208;
    float _217 = _214 * _209;
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    float _282 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _292 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _282);
    float _293 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _282);
    float _294 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _282);
    float _311 = cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x;
    vec4 _328 = texture(sampler2D(M_Water_oceanB_snp_0_Texture2D_2, SS_BumpMap), vec2((((_311 * cbMtdParam._m0[19u].w) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_311 * cbMtdParam._m0[20u].x) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _331 = _328.x;
    float _332 = _328.y;
    float _352 = cbMtdParam._m0[13u].y - cbMtdParam._m0[13u].x;
    float _354 = (sqrt(((_292 * _292) + (_293 * _293)) + (_294 * _294)) - cbMtdParam._m0[13u].x) / (isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0)));
    float _361 = (cbMtdParam._m0[13u].w + _354) * cbMtdParam._m0[15u].y;
    float _3583 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    vec4 _375 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _377 = _375.x;
    bool _384 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _400 = ((_384 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _377)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _377))) - POSITION_1.w) / (((isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * (cbMtdParam._m0[12u].w - cbMtdParam._m0[12u].y)) + cbMtdParam._m0[12u].y);
    float _3594 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _401 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _407 = 1.0 - (isnan(cbMtdParam._m0[16u].z) ? _401 : (isnan(_401) ? cbMtdParam._m0[16u].z : max(_401, cbMtdParam._m0[16u].z)));
    float _3610 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _408 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _409 = _328.z - _408;
    float _3621 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _422 = (_410 * 0.004999999888241291046142578125) + TEXCOORD.x;
    float _424 = (_410 * (-0.004999999888241291046142578125)) + TEXCOORD.y;
    vec4 _437 = texture(sampler2D(M_Water_oceanB_snp_0_Texture2D_0, SS_BumpMap), vec2(((_422 + (cbMtdParam._m0[18u].y * _311)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_424 + (cbMtdParam._m0[18u].z * _311)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _441 = _437.z;
    vec4 _454 = texture(sampler2D(M_Water_oceanB_snp_0_Texture2D_0, SS_BumpMap), vec2(((_422 + (cbMtdParam._m0[17u].w * _311)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_424 + (cbMtdParam._m0[18u].x * _311)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _458 = _454.z;
    float _461 = (_407 - _328.w) + (isnan(_458) ? _441 : (isnan(_441) ? _458 : max(_441, _458)));
    float _3637 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _465 = (TEXCOORD_5.x - _407) + cbMtdParam._m0[16u].y;
    float _466 = _465 * (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0)));
    float _478 = (_466 + cbMtdParam._m0[9u].x) + (cbMtdParam._m0[10u].x * _410);
    float _479 = (_466 + cbMtdParam._m0[9u].y) + (cbMtdParam._m0[10u].y * _410);
    float _480 = (_466 + cbMtdParam._m0[9u].z) + (cbMtdParam._m0[10u].z * _410);
    float _3648 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _482 = 1.0 - (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0)));
    float _489 = ((_482 - _478) * _408) + _478;
    float _490 = ((_482 - _479) * _408) + _479;
    float _491 = ((_482 - _480) * _408) + _480;
    float _496 = _354 / cbMtdParam._m0[15u].w;
    float _3659 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _499 = (1.0 - (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) * cbMtdParam._m0[15u].z;
    float _512 = (cbMtdParam._m0[15u].x + _354) * cbMtdParam._m0[14u].y;
    float _3670 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _516 = ((isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].x)) + cbMtdParam._m0[11u].x;
    float _3681 = isnan(0.0) ? TEXCOORD_5.y : (isnan(TEXCOORD_5.y) ? 0.0 : max(TEXCOORD_5.y, 0.0));
    float _517 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _526 = _354 / cbMtdParam._m0[14u].w;
    float _3692 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _527 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    vec4 _547 = texture(sampler2D(M_Water_oceanB_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[20u].y * _311) + TEXCOORD.z) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[20u].z * _311) + TEXCOORD.w) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _556 = ((_454.x + (-0.5)) * 0.5) + _437.x;
    float _557 = ((_454.y + (-0.5)) * 0.5) + _437.y;
    float _565 = _410 * 0.119999997317790985107421875;
    float _567 = _410 * (-0.100000001490116119384765625);
    float _578 = cbMtdParam._m0[21u].y * TEXCOORD.x;
    float _579 = cbMtdParam._m0[21u].z * TEXCOORD.y;
    vec4 _588 = texture(sampler2D(M_Water_oceanB_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[20u].w * _311) + _565) + _578) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[21u].x * _311) + _567) + _579) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _606 = texture(sampler2D(M_Water_oceanB_snp_0_Texture2D_0, SS_BumpMap), vec2((((_578 + _565) + (cbMtdParam._m0[21u].w * _311)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_579 + _567) + (cbMtdParam._m0[22u].x * _311)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _618 = (((0.5 - _556) * 0.10999999940395355224609375) + _556) + (((_588.x + (-1.0)) + _606.x) * cbMtdParam._m0[16u].x);
    float _619 = (((0.5 - _557) * 0.10999999940395355224609375) + _557) + (((_588.y + (-1.0)) + _606.y) * cbMtdParam._m0[16u].x);
    float _624 = ((_547.x - _618) * _527) + _618;
    float _625 = ((_547.y - _619) * _527) + _619;
    float _627 = _354 / cbMtdParam._m0[14u].z;
    float _3703 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _628 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _645 = ((((_517 * (0.5 - _331)) + _331) + (((_624 + (-0.5)) + ((0.5 - _624) * _628)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _646 = ((((_517 * (0.5 - _332)) + _332) + (((_625 + (-0.5)) + ((0.5 - _625) * _628)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _647 = dot(vec2(_645, _646), vec2(_645, _646));
    float _3714 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _652 = sqrt(1.0 - (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))));
    float _660 = (cbMtdParam._m0[13u].z + _354) * cbMtdParam._m0[14u].x;
    float _3725 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _662 = (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * cbMtdParam._m0[17u].x;
    float _3736 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _663 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _678 = fma(_652, _236, fma(_646, _228 * TANGENT.x, _645 * _215));
    float _681 = fma(_652, _237, fma(_646, _228 * TANGENT.y, _645 * _216));
    float _684 = fma(_652, _238, fma(_646, _228 * TANGENT.z, _645 * _217));
    float _688 = inversesqrt(dot(vec3(_678, _681, _684), vec3(_678, _681, _684)));
    float _689 = _688 * _678;
    float _690 = _688 * _681;
    float _691 = _688 * _684;
    float _3747 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _3758 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _693 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _3769 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _3780 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _3791 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _701 = _384 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _750 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _741);
    float _751 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _741);
    float _752 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _741);
    float _756 = inversesqrt(dot(vec3(_750, _751, _752), vec3(_750, _751, _752)));
    float _757 = _750 * _756;
    float _758 = _751 * _756;
    float _759 = _752 * _756;
    float _764 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _765 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _767 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD_8.x, TEXCOORD_8.y));
    float _776 = (_767.x * 2.0) + (-1.0);
    float _777 = (_767.y * 2.0) + (-1.0);
    float _778 = (_767.z * 2.0) + (-1.0);
    float _782 = inversesqrt(dot(vec3(_776, _777, _778), vec3(_776, _777, _778)));
    float _793 = ((TEXCOORD_8.y >= 1.0) || (((TEXCOORD_8.x <= 0.0) || (TEXCOORD_8.x >= 1.0)) || (TEXCOORD_8.y <= 0.0))) ? 0.0 : _767.w;
    float _800 = (((_776 * _782) - _689) * _793) + _689;
    float _801 = (((_777 * _782) - _690) * _793) + _690;
    float _802 = (((_778 * _782) - _691) * _793) + _691;
    float _823 = fma(_802, cbSceneParam._m0[5u].z, fma(_801, cbSceneParam._m0[5u].y, _800 * cbSceneParam._m0[5u].x));
    float _826 = fma(_802, cbSceneParam._m0[6u].z, fma(_801, cbSceneParam._m0[6u].y, _800 * cbSceneParam._m0[6u].x));
    float _829 = fma(_802, cbSceneParam._m0[7u].z, fma(_801, cbSceneParam._m0[7u].y, _800 * cbSceneParam._m0[7u].x));
    uint _842 = uint(roundEven(NORMAL.w)) * 13u;
    uint _844 = (_842 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _850 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) * cbInstanceData._m0[_844].x;
    float _851 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * cbInstanceData._m0[_844].y;
    float _852 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * cbInstanceData._m0[_844].z;
    float _3802 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _853 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _3813 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _854 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _3824 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _855 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    vec4 _864 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _764, cbSceneParam._m0[86u].y * _765));
    float _867 = _864.x * TEXCOORD_5.w;
    float _868 = dot(vec3(_800, _801, _802), vec3(_757, _758, _759));
    float _871 = _868 * 2.0;
    float _875 = (_871 * _800) - _757;
    float _876 = (_871 * _801) - _758;
    float _877 = (_871 * _802) - _759;
    float _881 = abs(dot(vec3(_757, _758, _759), vec3(_800, _801, _802)));
    float _3835 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _882 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _890 = 10.0 / (_701 + 10.0);
    float _891 = sqrt(_693);
    float _903 = exp2((_891 * 5.0) * log2(1.0 - (_882 * 0.999000012874603271484375))) / (4.0 - (_891 * 3.0));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1241;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _968 = fma(_942, cbModelParam._m0[26u].z, fma(_938, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _934));
        float _972 = fma(_942, cbModelParam._m0[27u].z, fma(_938, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _934));
        float _976 = fma(_942, cbModelParam._m0[28u].z, fma(_938, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _934));
        float _999 = _934 + _800;
        float _1000 = _938 + _801;
        float _1001 = _942 + _802;
        float _1011 = fma(_1001, cbModelParam._m0[26u].z, fma(_1000, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _999)) - _968;
        float _1012 = fma(_1001, cbModelParam._m0[27u].z, fma(_1000, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _999)) - _972;
        float _1013 = fma(_1001, cbModelParam._m0[28u].z, fma(_1000, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _999)) - _976;
        float _1017 = inversesqrt(dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013)));
        float _1030 = ((_1017 * _1011) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_968 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1031 = ((_1017 * _1012) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_972 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1032 = ((_1017 * _1013) / cbModelParam._m0[34u].z) + ((((((_976 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        float _1069 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1035.x + (-0.5));
        float _1071 = _1069 * (_1035.y + (-0.5));
        float _1072 = _1069 * (_1035.z + (-0.5));
        float _1079 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1042.x + (-0.5));
        float _1081 = _1079 * (_1042.y + (-0.5));
        float _1082 = _1079 * (_1042.z + (-0.5));
        float _1089 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1049.x + (-0.5));
        float _1091 = _1089 * (_1049.y + (-0.5));
        float _1092 = _1089 * (_1049.z + (-0.5));
        float _1099 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1056.x + (-0.5));
        float _1101 = _1099 * (_1056.y + (-0.5));
        float _1102 = _1099 * (_1056.z + (-0.5));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = _1070 * 0.5;
        float _1107 = _1080 * 0.5;
        float _1108 = _1090 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1123 = (dot(vec3(_800, _801, _802), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1133 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3883 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1135 + 1.0))) + _1140) * _1103;
        float _1150 = _1071 * 0.5;
        float _1151 = _1081 * 0.5;
        float _1152 = _1091 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_800, _801, _802), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3916 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1177 + 1.0))) + _1182) * _1104;
        float _1192 = _1072 * 0.5;
        float _1193 = _1082 * 0.5;
        float _1194 = _1092 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_800, _801, _802), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3949 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1219 + 1.0))) + _1224) * _1105;
        _1241 = _1072;
        _1243 = _1071;
        _1244 = _1070;
        _1245 = _1082;
        _1246 = _1081;
        _1247 = _1080;
        _1248 = _1092;
        _1249 = _1091;
        _1250 = _1090;
        _1251 = _1105;
        _1252 = _1104;
        _1253 = _1103;
        _1254 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
        _1255 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1256 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
    }
    else
    {
        _1241 = _1242;
        _1243 = _1242;
        _1244 = _1242;
        _1245 = _1242;
        _1246 = _1242;
        _1247 = _1242;
        _1248 = _1242;
        _1249 = _1242;
        _1250 = _1242;
        _1251 = _1242;
        _1252 = _1242;
        _1253 = _1242;
        _1254 = 0.0;
        _1255 = 0.0;
        _1256 = 0.0;
    }
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1282 = fma(_942, cbModelParam._m0[30u].z, fma(_938, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _934));
        float _1286 = fma(_942, cbModelParam._m0[31u].z, fma(_938, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _934));
        float _1290 = fma(_942, cbModelParam._m0[32u].z, fma(_938, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _934));
        float _1313 = _934 + _800;
        float _1314 = _938 + _801;
        float _1315 = _942 + _802;
        float _1325 = fma(_1315, cbModelParam._m0[30u].z, fma(_1314, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1313)) - _1282;
        float _1326 = fma(_1315, cbModelParam._m0[31u].z, fma(_1314, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1313)) - _1286;
        float _1327 = fma(_1315, cbModelParam._m0[32u].z, fma(_1314, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1313)) - _1290;
        float _1331 = inversesqrt(dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327)));
        float _1344 = ((_1331 * _1325) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1282 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1345 = ((_1331 * _1326) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1286 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1346 = ((_1331 * _1327) / cbModelParam._m0[35u].z) + ((((((_1290 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        float _1381 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1348.x + (-0.5));
        float _1383 = _1381 * (_1348.y + (-0.5));
        float _1384 = _1381 * (_1348.z + (-0.5));
        float _1391 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1355.x + (-0.5));
        float _1393 = _1391 * (_1355.y + (-0.5));
        float _1394 = _1391 * (_1355.z + (-0.5));
        float _1401 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1362.x + (-0.5));
        float _1403 = _1401 * (_1362.y + (-0.5));
        float _1404 = _1401 * (_1362.z + (-0.5));
        float _1411 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1369.x + (-0.5));
        float _1413 = _1411 * (_1369.y + (-0.5));
        float _1414 = _1411 * (_1369.z + (-0.5));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = _1382 * 0.5;
        float _1419 = _1392 * 0.5;
        float _1420 = _1402 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_800, _801, _802), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _4012 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1445 + 1.0))) + _1450) * _1415;
        float _1460 = _1383 * 0.5;
        float _1461 = _1393 * 0.5;
        float _1462 = _1403 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_800, _801, _802), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4045 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1487 + 1.0))) + _1492) * _1416;
        float _1502 = _1384 * 0.5;
        float _1503 = _1394 * 0.5;
        float _1504 = _1404 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_800, _801, _802), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4078 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1529 + 1.0))) + _1534) * _1417;
        _1551 = _1384;
        _1552 = _1383;
        _1553 = _1382;
        _1554 = _1394;
        _1555 = _1393;
        _1556 = _1392;
        _1557 = _1404;
        _1558 = _1403;
        _1559 = _1402;
        _1560 = _1417;
        _1561 = _1416;
        _1562 = _1415;
        _1563 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1564 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1565 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
    }
    else
    {
        _1551 = _1242;
        _1552 = _1242;
        _1553 = _1242;
        _1554 = _1242;
        _1555 = _1242;
        _1556 = _1242;
        _1557 = _1242;
        _1558 = _1242;
        _1559 = _1242;
        _1560 = _1242;
        _1561 = _1242;
        _1562 = _1242;
        _1563 = 0.0;
        _1564 = 0.0;
        _1565 = 0.0;
    }
    float _1575 = (cbModelParam._m0[1u].x * (_1563 - _1254)) + _1254;
    float _1576 = (cbModelParam._m0[1u].x * (_1564 - _1255)) + _1255;
    float _1577 = (cbModelParam._m0[1u].x * (_1565 - _1256)) + _1256;
    float _1598 = fma(_1577, cbSceneParam._m0[89u].z, fma(_1576, cbSceneParam._m0[89u].y, _1575 * cbSceneParam._m0[89u].x));
    float _1601 = fma(_1577, cbSceneParam._m0[90u].z, fma(_1576, cbSceneParam._m0[90u].y, _1575 * cbSceneParam._m0[90u].x));
    float _1604 = fma(_1577, cbSceneParam._m0[91u].z, fma(_1576, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1575));
    float _1619 = _875 * 0.5;
    float _1620 = _876 * 0.5;
    float _1621 = _877 * 0.5;
    float _1622 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1553, _1556, _1559, _1562));
    float _1625 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1552, _1555, _1558, _1561));
    float _1628 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1551, _1554, _1557, _1560));
    float _1662;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1635 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1241, _1245, _1248, _1251));
        float _1639 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1243, _1246, _1249, _1252));
        float _1643 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1244, _1247, _1250, _1253));
        float _1650 = dot(vec4(cbModelParam._m0[39u]), vec4(_1619, _1620, _1621, 1.0));
        _1662 = dot(vec3(isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1650) ? 0.0 : (isnan(0.0) ? _1650 : max(0.0, _1650))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1662 = 1.0;
    }
    float _1673;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1664 = dot(vec4(cbModelParam._m0[40u]), vec4(_1619, _1620, _1621, 1.0));
        _1673 = dot(vec3(isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1664) ? 0.0 : (isnan(0.0) ? _1664 : max(0.0, _1664))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1673 = 1.0;
    }
    float _1677 = (_1673 * cbModelParam._m0[1u].x) + (_1662 * (1.0 - cbModelParam._m0[1u].x));
    float _1687 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _693);
    float _1688 = isnan(_1687) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1687 : min(cbModelParam._m0[25u].z, _1687));
    float _1768;
    float _1770;
    float _1772;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1735 = fma(_942, cbModelParam._m0[13u].z, fma(_938, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _934)) + cbModelParam._m0[13u].w;
        float _1739 = fma(_942, cbModelParam._m0[14u].z, fma(_938, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _934)) + cbModelParam._m0[14u].w;
        float _1743 = fma(_942, cbModelParam._m0[15u].z, fma(_938, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _934)) + cbModelParam._m0[15u].w;
        float _1746 = fma(_877, cbModelParam._m0[13u].z, fma(_876, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _875));
        float _1749 = fma(_877, cbModelParam._m0[14u].z, fma(_876, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _875));
        float _1752 = fma(_877, cbModelParam._m0[15u].z, fma(_876, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _875));
        float _1780;
        if (_1746 > 0.0)
        {
            _1780 = abs((1.0 - _1735) / _1746);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1735 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1780 = frontier_phi_16_14_ladder;
        }
        float _2179;
        if (_1749 > 0.0)
        {
            _2179 = abs((1.0 - _1739) / _1749);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1739 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2179 = frontier_phi_25_21_ladder;
        }
        float _2591;
        if (_1752 > 0.0)
        {
            _2591 = abs((1.0 - _1743) / _1752);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1743 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2591 = frontier_phi_39_32_ladder;
        }
        float _2593 = isnan(_2179) ? _1780 : (isnan(_1780) ? _2179 : min(_1780, _2179));
        float _2594 = isnan(_2591) ? _2593 : (isnan(_2593) ? _2591 : min(_2593, _2591));
        float _2598 = (_2594 * _1746) + _1735;
        float _2599 = (_2594 * _1749) + _1739;
        float _2600 = (_2594 * _1752) + _1743;
        float _2601 = _2594 * 9.9999997473787516355514526367188e-05;
        float _2603 = (-1.0) - _2601;
        float _2605 = _2601 + 1.0;
        float frontier_phi_15_39_ladder;
        float frontier_phi_15_39_ladder_1;
        float frontier_phi_15_39_ladder_2;
        if ((_2600 > _2605) || ((_2600 < _2603) || ((_2599 > _2605) || ((_2599 < _2603) || ((_2598 < _2603) || (_2598 > _2605))))))
        {
            frontier_phi_15_39_ladder = 0.0;
            frontier_phi_15_39_ladder_1 = 0.0;
            frontier_phi_15_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2809 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2600, cbModelParam._m0[9u].z, fma(_2599, cbModelParam._m0[9u].y, _2598 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2600, cbModelParam._m0[10u].z, fma(_2599, cbModelParam._m0[10u].y, _2598 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2600, cbModelParam._m0[11u].z, fma(_2599, cbModelParam._m0[11u].y, _2598 * cbModelParam._m0[11u].x))), _1688);
            frontier_phi_15_39_ladder = _2809.z * cbModelParam._m0[1u].y;
            frontier_phi_15_39_ladder_1 = _2809.y * cbModelParam._m0[1u].y;
            frontier_phi_15_39_ladder_2 = _2809.x * cbModelParam._m0[1u].y;
        }
        _1768 = frontier_phi_15_39_ladder_2;
        _1770 = frontier_phi_15_39_ladder_1;
        _1772 = frontier_phi_15_39_ladder;
    }
    else
    {
        vec4 _1756 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_875, _876, _877), _1688);
        _1768 = _1756.x * cbModelParam._m0[1u].y;
        _1770 = _1756.y * cbModelParam._m0[1u].y;
        _1772 = _1756.z * cbModelParam._m0[1u].y;
    }
    float _1776 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _693);
    float _1777 = isnan(_1776) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1776 : min(cbModelParam._m0[25u].w, _1776));
    float _1866;
    float _1868;
    float _1870;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1830 = fma(_942, cbModelParam._m0[21u].z, fma(_938, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _934)) + cbModelParam._m0[21u].w;
        float _1834 = fma(_942, cbModelParam._m0[22u].z, fma(_938, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _934)) + cbModelParam._m0[22u].w;
        float _1838 = fma(_942, cbModelParam._m0[23u].z, fma(_938, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _934)) + cbModelParam._m0[23u].w;
        float _1841 = fma(_877, cbModelParam._m0[21u].z, fma(_876, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _875));
        float _1844 = fma(_877, cbModelParam._m0[22u].z, fma(_876, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _875));
        float _1847 = fma(_877, cbModelParam._m0[23u].z, fma(_876, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _875));
        float _2184;
        if (_1841 > 0.0)
        {
            _2184 = abs((1.0 - _1830) / _1841);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1830 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2184 = frontier_phi_27_23_ladder;
        }
        float _2618;
        if (_1844 > 0.0)
        {
            _2618 = abs((1.0 - _1834) / _1844);
        }
        else
        {
            float frontier_phi_41_34_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_41_34_ladder = abs((_1834 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_41_34_ladder = 5000.0;
            }
            _2618 = frontier_phi_41_34_ladder;
        }
        float _2870;
        if (_1847 > 0.0)
        {
            _2870 = abs((1.0 - _1838) / _1847);
        }
        else
        {
            float frontier_phi_56_50_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_56_50_ladder = abs((_1838 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_56_50_ladder = 5000.0;
            }
            _2870 = frontier_phi_56_50_ladder;
        }
        float _2872 = isnan(_2618) ? _2184 : (isnan(_2184) ? _2618 : min(_2184, _2618));
        float _2873 = isnan(_2870) ? _2872 : (isnan(_2872) ? _2870 : min(_2872, _2870));
        float _2877 = (_2873 * _1841) + _1830;
        float _2878 = (_2873 * _1844) + _1834;
        float _2879 = (_2873 * _1847) + _1838;
        float _2880 = _2873 * 9.9999997473787516355514526367188e-05;
        float _2881 = (-1.0) - _2880;
        float _2883 = _2880 + 1.0;
        float frontier_phi_24_56_ladder;
        float frontier_phi_24_56_ladder_1;
        float frontier_phi_24_56_ladder_2;
        if ((_2879 > _2883) || ((_2879 < _2881) || ((_2878 > _2883) || ((_2878 < _2881) || ((_2877 < _2881) || (_2877 > _2883))))))
        {
            frontier_phi_24_56_ladder = 0.0;
            frontier_phi_24_56_ladder_1 = 0.0;
            frontier_phi_24_56_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3150 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2879, cbModelParam._m0[17u].z, fma(_2878, cbModelParam._m0[17u].y, _2877 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2879, cbModelParam._m0[18u].z, fma(_2878, cbModelParam._m0[18u].y, _2877 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2879, cbModelParam._m0[19u].z, fma(_2878, cbModelParam._m0[19u].y, _2877 * cbModelParam._m0[19u].x))), _1777);
            frontier_phi_24_56_ladder = _3150.y * cbModelParam._m0[1u].z;
            frontier_phi_24_56_ladder_1 = _3150.z * cbModelParam._m0[1u].z;
            frontier_phi_24_56_ladder_2 = _3150.x * cbModelParam._m0[1u].z;
        }
        _1866 = frontier_phi_24_56_ladder_2;
        _1868 = frontier_phi_24_56_ladder;
        _1870 = frontier_phi_24_56_ladder_1;
    }
    else
    {
        vec4 _1850 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_875, _876, _877), _1777);
        _1866 = _1850.x * cbModelParam._m0[1u].z;
        _1868 = _1850.y * cbModelParam._m0[1u].z;
        _1870 = _1850.z * cbModelParam._m0[1u].z;
    }
    float _1882 = ((((1.0 - _903) * ((_891 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_903 * _891)) * _867;
    float _1883 = _1882 * ((cbModelParam._m0[1u].w * (_1866 - _1768)) + _1768);
    float _1884 = _1882 * ((cbModelParam._m0[1u].w * (_1868 - _1770)) + _1770);
    float _1885 = _1882 * ((cbModelParam._m0[1u].w * (_1870 - _1772)) + _1772);
    float _1888 = fma(_1885, cbSceneParam._m0[89u].z, fma(_1884, cbSceneParam._m0[89u].y, _1883 * cbSceneParam._m0[89u].x));
    float _1891 = fma(_1885, cbSceneParam._m0[90u].z, fma(_1884, cbSceneParam._m0[90u].y, _1883 * cbSceneParam._m0[90u].x));
    float _1894 = fma(_1885, cbSceneParam._m0[91u].z, fma(_1884, cbSceneParam._m0[91u].y, _1883 * cbSceneParam._m0[91u].x));
    float _1905 = _764 / cbSceneParam._m0[86u].x;
    float _1913 = (cbSceneParam._m0[88u].y * (1.0 - _693)) + cbSceneParam._m0[88u].z;
    float _4204 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1915 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * 5.0;
    float _1920 = (_890 * cbMtdParam._m0[11u].w) * dot(vec3(_800, _801, _802), vec3(1.0, 0.0, 0.0));
    vec4 _1930 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1920 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1920 + _1905) * cbSceneParam._m0[86u].x, _765), _1915).w) + _1905) * cbSceneParam._m0[86u].x, _765), _1915);
    float _1946 = 1.0 - _1930.w;
    uint _1953 = _842 + 5u;
    uvec4 _1956 = floatBitsToUint(cbInstanceData._m0[_1953]);
    uint _1958 = _1956.x * 14u;
    uint _1959 = _1958 + 13u;
    float _1964 = _867 + (-1.0);
    float _1967 = (cbLight._m0[_1959].x * _1964) + 1.0;
    float _1968 = (cbLight._m0[_1959].y * _1964) + 1.0;
    uint _1969 = _1958 + 5u;
    float _1975 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
    uint _1979 = _1958 + 4u;
    float _1986 = isnan(1.0) ? _1967 : (isnan(_1967) ? 1.0 : min(_1967, 1.0));
    uint _1990 = _1958 | 1u;
    float _2001 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_800, _801, _802));
    float _2004 = dot(vec3(cbLight._m0[_1990].xyz), vec3(_800, _801, _802));
    float _4225 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _4236 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2009 = (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * 0.3183098733425140380859375;
    float _2011 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * 0.3183098733425140380859375;
    float _2018 = ((cbLight._m0[_1969].x * _1975) * _2011) + ((cbLight._m0[_1979].x * _1986) * _2009);
    float _2019 = ((_1975 * cbLight._m0[_1969].y) * _2011) + ((_1986 * cbLight._m0[_1979].y) * _2009);
    float _2020 = ((_1975 * cbLight._m0[_1969].z) * _2011) + ((_1986 * cbLight._m0[_1979].z) * _2009);
    uint _2022 = _1958 + 8u;
    float _2035 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1958].w)) * _693) * 0.949999988079071044921875);
    float _2036 = _2035 * _2035;
    float _2037 = cbLight._m0[_1958].x + _757;
    float _2038 = cbLight._m0[_1958].y + _758;
    float _2039 = cbLight._m0[_1958].z + _759;
    float _2043 = inversesqrt(dot(vec3(_2037, _2038, _2039), vec3(_2037, _2038, _2039)));
    float _2044 = _2043 * _2037;
    float _2045 = _2043 * _2038;
    float _2046 = _2043 * _2039;
    float _2047 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_1958].xyz));
    float _4247 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2050 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _4258 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _2051 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _2052 = dot(vec3(_800, _801, _802), vec3(_2044, _2045, _2046));
    float _4269 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2055 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _2056 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_2044, _2045, _2046));
    float _4280 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2060 = _2036 * _2036;
    float _2064 = ((_2055 * _2055) * (_2060 + (-1.0))) + 1.0;
    float _2075 = (exp2(log2(1.0 - (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2076 = 1.0 - _2036;
    float _2087 = (0.5 / (((_2051 * ((_2050 * _2076) + _2036)) + 9.9999999392252902907785028219223e-09) + (((_2051 * _2076) + _2036) * _2050))) * _2050;
    float _4291 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2089 = (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_2060 / ((_2064 * _2064) * 3.141590118408203125));
    uint _2100 = _1958 + 9u;
    float _2111 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1990].w)) * _693) * 0.949999988079071044921875);
    float _2112 = _2111 * _2111;
    float _2113 = cbLight._m0[_1990].x + _757;
    float _2114 = cbLight._m0[_1990].y + _758;
    float _2115 = cbLight._m0[_1990].z + _759;
    float _2119 = inversesqrt(dot(vec3(_2113, _2114, _2115), vec3(_2113, _2114, _2115)));
    float _2120 = _2119 * _2113;
    float _2121 = _2119 * _2114;
    float _2122 = _2119 * _2115;
    float _2123 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_1990].xyz));
    float _4302 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2126 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _2127 = dot(vec3(_800, _801, _802), vec3(_2120, _2121, _2122));
    float _4313 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2130 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _2131 = dot(vec3(cbLight._m0[_1990].xyz), vec3(_2120, _2121, _2122));
    float _4324 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2135 = _2112 * _2112;
    float _2139 = ((_2130 * _2130) * (_2135 + (-1.0))) + 1.0;
    float _2148 = (exp2(log2(1.0 - (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2149 = 1.0 - _2112;
    float _2159 = (0.5 / (((_2051 * ((_2126 * _2149) + _2112)) + 9.9999999392252902907785028219223e-09) + (((_2051 * _2149) + _2112) * _2126))) * _2126;
    float _4335 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2161 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2135 / ((_2139 * _2139) * 3.141590118408203125));
    float _2171 = (((_2148 * cbLight._m0[_2100].x) * _2161) * _1975) + (((_2075 * cbLight._m0[_2022].x) * _2089) * _1986);
    float _2172 = (((_2148 * cbLight._m0[_2100].y) * _2161) * _1975) + (((_2075 * cbLight._m0[_2022].y) * _2089) * _1986);
    float _2173 = (((_2148 * cbLight._m0[_2100].z) * _2161) * _1975) + (((_2075 * cbLight._m0[_2022].z) * _2089) * _1986);
    float _2287;
    float _2289;
    float _2291;
    float _2293;
    float _2295;
    float _2297;
    if (_1956.y == 0u)
    {
        float _2228 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2229 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2228;
        float _2230 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2228;
        float _2231 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2228;
        uvec4 _2243 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2244 = _2243.x;
        uint _2255 = uint((float(_2243.y) * floor(float(uint(cbSceneParam._m0[85u].y * _765) / _2244))) + floor(float(uint(cbSceneParam._m0[85u].x * _764) / _2244)));
        float _2265 = (log2(_2231 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2266 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        uint _2269 = uint(isnan(14.0) ? _2266 : (isnan(_2266) ? 14.0 : min(_2266, 14.0)));
        uvec4 _2274 = texelFetch(g_lightClusterGridBuffer, int(((_2269 << 2u) + (_2255 << 6u)) >> 2u));
        uint _2275 = _2274.x;
        uint _2276 = _2243.z;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        float _2423;
        float _2425;
        if (((((1u << ((_2276 >> 4u) & 15u)) + 4294967295u) & _2275) == 0u) || ((_2276 & 240u) == 0u))
        {
            _2415 = 0.0;
            _2417 = 0.0;
            _2419 = 0.0;
            _2421 = 0.0;
            _2423 = 0.0;
            _2425 = 0.0;
        }
        else
        {
            float _2416;
            float _2418;
            float _2420;
            float _2422;
            float _2424;
            float _2426;
            float _2655 = 0.0;
            float _2656 = 0.0;
            float _2657 = 0.0;
            float _2658 = 0.0;
            float _2659 = 0.0;
            float _2660 = 0.0;
            uint _2661 = 0u;
            uint _2670;
            bool _2671;
            for (;;)
            {
                _2670 = texelFetch(g_lightClassification, int((((_2269 << 5u) + (_2255 << 9u)) + (_2661 << 2u)) >> 2u)).x;
                _2671 = _2670 == 0u;
                float frontier_phi_52_pred;
                float frontier_phi_52_pred_1;
                float frontier_phi_52_pred_2;
                float frontier_phi_52_pred_3;
                float frontier_phi_52_pred_4;
                float frontier_phi_52_pred_5;
                if (_2671)
                {
                    frontier_phi_52_pred = _2657;
                    frontier_phi_52_pred_1 = _2660;
                    frontier_phi_52_pred_2 = _2659;
                    frontier_phi_52_pred_3 = _2658;
                    frontier_phi_52_pred_4 = _2656;
                    frontier_phi_52_pred_5 = _2655;
                }
                else
                {
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    uint _2919;
                    _2913 = _2655;
                    _2914 = _2656;
                    _2915 = _2657;
                    _2916 = _2658;
                    _2917 = _2659;
                    _2918 = _2660;
                    _2919 = _2670;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    float _2823;
                    for (;;)
                    {
                        uint _2923 = uint(findLSB(_2919)) + (_2661 << 5u);
                        uint _2920 = (_2919 + 4294967295u) & _2919;
                        uint _2925 = _2923 * 48u;
                        vec4 _2939 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2925)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 3u)).x));
                        uint _2945 = (_2923 * 48u) + 4u;
                        vec4 _2958 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2945)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 3u)).x));
                        uint _2964 = (_2923 * 48u) + 8u;
                        vec3 _2975 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2964)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 2u)).x));
                        float _2979 = _2939.x - _2229;
                        float _2980 = _2939.y - _2230;
                        float _2981 = _2939.z - _2231;
                        float _2982 = dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981));
                        float _2985 = inversesqrt(_2982);
                        float _2986 = _2985 * _2979;
                        float _2987 = _2985 * _2980;
                        float _2988 = _2985 * _2981;
                        float _2989 = dot(vec3(_823, _826, _829), vec3(_2986, _2987, _2988));
                        float _2994 = 1.0 - (_2982 * _2939.w);
                        float _4356 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                        float _2995 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                        float _2996 = sqrt(_2982) * _2958.w;
                        float _2999 = 1.39999997615814208984375 / (_2996 + 1.39999997615814208984375);
                        float _3000 = _2999 * _2999;
                        float _3003 = ((1.0 - _3000) * _2989) + _3000;
                        float _3006 = _2996 * _2996;
                        float _3010 = ((isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0))) * _2995) / ((_3006 * 0.699999988079071044921875) + 1.0);
                        float _3014 = (-0.0) - _2229;
                        float _3015 = (-0.0) - _2230;
                        float _3016 = (-0.0) - _2231;
                        float _3020 = inversesqrt(dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016)));
                        float _3021 = _3020 * _3014;
                        float _3022 = _3020 * _3015;
                        float _3023 = _3020 * _3016;
                        float _3031 = exp2(log2(1.0 / ((_3006 * 3.5) + 5.0)) * 0.25);
                        float _3032 = 1.0 - _891;
                        float _3039 = sqrt(1.0 - ((1.0 - (_3032 * _3032)) * (1.0 - (_3031 * _3031))));
                        float _3040 = _3039 * _3039;
                        float _3041 = _3040 * _3040;
                        float _3042 = _3021 + _2986;
                        float _3043 = _3022 + _2987;
                        float _3044 = _3023 + _2988;
                        float _3048 = inversesqrt(dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044)));
                        float _3052 = dot(vec3(_823, _826, _829), vec3(_3021, _3022, _3023));
                        float _4372 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3055 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                        float _3056 = dot(vec3(_823, _826, _829), vec3(_3048 * _3042, _3048 * _3043, _3048 * _3044));
                        float _4383 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3059 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                        float _3063 = ((_3059 * _3059) * (_3041 + (-1.0))) + 1.0;
                        float _3064 = _2999 * _3040;
                        float _3065 = _3064 * _3064;
                        float _3068 = ((1.0 - _3065) * _2989) + _3065;
                        float _4394 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3069 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                        float _3070 = 1.0 - _3040;
                        float _3080 = (0.5 / (((_3069 * ((_3055 * _3070) + _3040)) + 9.9999999392252902907785028219223e-09) + (((_3069 * _3070) + _3040) * _3055))) * _3069;
                        float _4405 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3091 = (((_3041 * 3.1415927410125732421875) * (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0)))) / ((_3063 * _3063) * ((_3006 * 2.1991131305694580078125) + 3.141590118408203125))) * _2995;
                        _2821 = (_3010 * _2958.x) + _2916;
                        _2822 = (_3010 * _2958.y) + _2917;
                        _2823 = (_3010 * _2958.z) + _2918;
                        _2818 = (_3091 * _2975.x) + _2913;
                        _2819 = (_3091 * _2975.y) + _2914;
                        _2820 = (_3091 * _2975.z) + _2915;
                        if (_2920 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2913 = _2818;
                            _2914 = _2819;
                            _2915 = _2820;
                            _2916 = _2821;
                            _2917 = _2822;
                            _2918 = _2823;
                            _2919 = _2920;
                        }
                    }
                    frontier_phi_52_pred = _2820;
                    frontier_phi_52_pred_1 = _2823;
                    frontier_phi_52_pred_2 = _2822;
                    frontier_phi_52_pred_3 = _2821;
                    frontier_phi_52_pred_4 = _2819;
                    frontier_phi_52_pred_5 = _2818;
                }
                _2420 = frontier_phi_52_pred;
                _2426 = frontier_phi_52_pred_1;
                _2424 = frontier_phi_52_pred_2;
                _2422 = frontier_phi_52_pred_3;
                _2418 = frontier_phi_52_pred_4;
                _2416 = frontier_phi_52_pred_5;
                uint _2662 = _2661 + 1u;
                if (_2662 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2655 = _2416;
                    _2656 = _2418;
                    _2657 = _2420;
                    _2658 = _2422;
                    _2659 = _2424;
                    _2660 = _2426;
                    _2661 = _2662;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2415 = _2416;
            _2417 = _2418;
            _2419 = _2420;
            _2421 = _2422;
            _2423 = _2424;
            _2425 = _2426;
        }
        uvec4 _2429 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2430 = _2429.z;
        uint _2432 = (_2430 >> 8u) & 15u;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        if (((4294967295u << _2432) & _2275) == 0u)
        {
            _2623 = _2415;
            _2625 = _2417;
            _2627 = _2419;
            _2629 = _2421;
            _2631 = _2423;
            _2633 = _2425;
        }
        else
        {
            float _2648 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
            float _2649 = _2648 * _2229;
            float _2650 = _2648 * _2230;
            float _2651 = _2648 * _2231;
            float frontier_phi_43_44_ladder;
            float frontier_phi_43_44_ladder_1;
            float frontier_phi_43_44_ladder_2;
            float frontier_phi_43_44_ladder_3;
            float frontier_phi_43_44_ladder_4;
            float frontier_phi_43_44_ladder_5;
            if (_2432 < ((_2430 >> 12u) & 15u))
            {
                float _2624;
                float _2626;
                float _2628;
                float _2630;
                float _2632;
                float _2634;
                float _2896 = _2415;
                float _2897 = _2417;
                float _2898 = _2419;
                float _2899 = _2421;
                float _2900 = _2423;
                float _2901 = _2425;
                uint _2902 = _2432;
                uint _2911;
                bool _2912;
                for (;;)
                {
                    _2911 = texelFetch(g_lightClassification, int((((_2269 << 5u) + (_2255 << 9u)) + (_2902 << 2u)) >> 2u)).x;
                    _2912 = _2911 == 0u;
                    float frontier_phi_63_pred;
                    float frontier_phi_63_pred_1;
                    float frontier_phi_63_pred_2;
                    float frontier_phi_63_pred_3;
                    float frontier_phi_63_pred_4;
                    float frontier_phi_63_pred_5;
                    if (_2912)
                    {
                        frontier_phi_63_pred = _2901;
                        frontier_phi_63_pred_1 = _2900;
                        frontier_phi_63_pred_2 = _2899;
                        frontier_phi_63_pred_3 = _2898;
                        frontier_phi_63_pred_4 = _2897;
                        frontier_phi_63_pred_5 = _2896;
                    }
                    else
                    {
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3168 = _2896;
                        float _3169 = _2897;
                        float _3170 = _2898;
                        float _3171 = _2899;
                        float _3172 = _2900;
                        float _3173 = _2901;
                        uint _3174 = _2911;
                        uint _3175;
                        vec4 _3200;
                        float _3201;
                        vec4 _3216;
                        vec3 _3228;
                        vec4 _3243;
                        vec4 _3258;
                        float _3304;
                        bool _3305;
                        for (;;)
                        {
                            uint _3185 = ((_2902 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3174));
                            _3175 = (_3174 + 4294967295u) & _3174;
                            uint _3187 = _3185 * 40u;
                            _3200 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 3u)).x));
                            _3201 = _3200.w;
                            uint _3203 = (_3185 * 40u) + 4u;
                            _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            uint _3218 = (_3185 * 40u) + 8u;
                            _3228 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x));
                            uint _3230 = (_3185 * 40u) + 16u;
                            _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            uint _3245 = (_3185 * 40u) + 20u;
                            _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            uint _3260 = (_3185 * 40u) + 24u;
                            vec4 _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            uint _3279 = (_3185 * 40u) + 28u;
                            vec4 _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            _3304 = fma(_2231, _3292.z, fma(_2230, _3292.y, _3292.x * _2229)) + _3292.w;
                            _3305 = !((fma(_2231, _3273.z, fma(_2230, _3273.y, _3273.x * _2229)) + _3273.w) <= 0.0);
                            float frontier_phi_69_pred;
                            float frontier_phi_69_pred_1;
                            float frontier_phi_69_pred_2;
                            float frontier_phi_69_pred_3;
                            float frontier_phi_69_pred_4;
                            float frontier_phi_69_pred_5;
                            if (_3305)
                            {
                                float _3332 = _3200.x - _2229;
                                float _3333 = _3200.y - _2230;
                                float _3334 = _3200.z - _2231;
                                float _3335 = dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334));
                                float _3338 = inversesqrt(_3335);
                                float _3339 = _3338 * _3332;
                                float _3340 = _3338 * _3333;
                                float _3341 = _3338 * _3334;
                                float _3345 = 1.0 - (_3335 / (_3201 * _3201));
                                float _4416 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3346 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                                float _3350 = sqrt(_3335) * _3216.w;
                                float _3352 = 1.39999997615814208984375 / (_3350 + 1.39999997615814208984375);
                                float _3353 = _3352 * _3352;
                                float _3356 = ((1.0 - _3353) * dot(vec3(_3339, _3340, _3341), vec3(_823, _826, _829))) + _3353;
                                float _3359 = _3350 * _3350;
                                float _3363 = (fma(_2231, _3243.z, fma(_2230, _3243.y, _3243.x * _2229)) + _3243.w) / _3304;
                                float _3364 = (fma(_2231, _3258.z, fma(_2230, _3258.y, _3258.x * _2229)) + _3258.w) / _3304;
                                float _3368 = 1.0 - dot(vec2(_3363, _3364), vec2(_3363, _3364));
                                float _4432 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3369 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3370 = _3369 * (((isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0))) * _3346) / ((_3359 * 0.699999988079071044921875) + 1.0));
                                float _3382 = exp2(log2(1.0 / ((_3359 * 3.5) + 5.0)) * 0.25);
                                float _3383 = 1.0 - _891;
                                float _3390 = sqrt(1.0 - ((1.0 - (_3383 * _3383)) * (1.0 - (_3382 * _3382))));
                                float _3391 = _3390 * _3390;
                                float _3392 = _3391 * _3391;
                                float _3393 = _3339 - _2649;
                                float _3394 = _3340 - _2650;
                                float _3395 = _3341 - _2651;
                                float _3399 = inversesqrt(dot(vec3(_3393, _3394, _3395), vec3(_3393, _3394, _3395)));
                                float _3403 = dot(vec3(_823, _826, _829), vec3((-0.0) - _2649, (-0.0) - _2650, (-0.0) - _2651));
                                float _4443 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                                float _3406 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                                float _3407 = dot(vec3(_823, _826, _829), vec3(_3399 * _3393, _3399 * _3394, _3399 * _3395));
                                float _4454 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3410 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                                float _3414 = ((_3410 * _3410) * (_3392 + (-1.0))) + 1.0;
                                float _3415 = _3352 * _3391;
                                float _3416 = _3415 * _3415;
                                float _3422 = ((1.0 - _3416) * dot(vec3(_823, _826, _829), vec3(_3339, _3340, _3341))) + _3416;
                                float _4465 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3423 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                                float _3424 = 1.0 - _3391;
                                float _3434 = (0.5 / (((_3423 * ((_3406 * _3424) + _3391)) + 9.9999999392252902907785028219223e-09) + (((_3423 * _3424) + _3391) * _3406))) * _3423;
                                float _4476 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3444 = (_3369 * _3346) * (((_3392 * 3.1415927410125732421875) * (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) / ((_3414 * _3414) * ((_3359 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_69_pred = _3444 * _3228.z;
                                frontier_phi_69_pred_1 = _3370 * _3216.z;
                                frontier_phi_69_pred_2 = _3370 * _3216.y;
                                frontier_phi_69_pred_3 = _3370 * _3216.x;
                                frontier_phi_69_pred_4 = _3444 * _3228.y;
                                frontier_phi_69_pred_5 = _3444 * _3228.x;
                            }
                            else
                            {
                                frontier_phi_69_pred = 0.0;
                                frontier_phi_69_pred_1 = 0.0;
                                frontier_phi_69_pred_2 = 0.0;
                                frontier_phi_69_pred_3 = 0.0;
                                frontier_phi_69_pred_4 = 0.0;
                                frontier_phi_69_pred_5 = 0.0;
                            }
                            _3450 = frontier_phi_69_pred;
                            _3453 = frontier_phi_69_pred_1;
                            _3452 = frontier_phi_69_pred_2;
                            _3451 = frontier_phi_69_pred_3;
                            _3449 = frontier_phi_69_pred_4;
                            _3448 = frontier_phi_69_pred_5;
                            _3158 = _3451 + _3171;
                            _3159 = _3452 + _3172;
                            _3160 = _3453 + _3173;
                            _3155 = _3448 + _3168;
                            _3156 = _3449 + _3169;
                            _3157 = _3450 + _3170;
                            if (_3175 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3175;
                                continue;
                            }
                        }
                        frontier_phi_63_pred = _3160;
                        frontier_phi_63_pred_1 = _3159;
                        frontier_phi_63_pred_2 = _3158;
                        frontier_phi_63_pred_3 = _3157;
                        frontier_phi_63_pred_4 = _3156;
                        frontier_phi_63_pred_5 = _3155;
                    }
                    _2634 = frontier_phi_63_pred;
                    _2632 = frontier_phi_63_pred_1;
                    _2630 = frontier_phi_63_pred_2;
                    _2628 = frontier_phi_63_pred_3;
                    _2626 = frontier_phi_63_pred_4;
                    _2624 = frontier_phi_63_pred_5;
                    uint _2903 = _2902 + 1u;
                    if (_2903 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2896 = _2624;
                        _2897 = _2626;
                        _2898 = _2628;
                        _2899 = _2630;
                        _2900 = _2632;
                        _2901 = _2634;
                        _2902 = _2903;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_43_44_ladder = _2634;
                frontier_phi_43_44_ladder_1 = _2624;
                frontier_phi_43_44_ladder_2 = _2632;
                frontier_phi_43_44_ladder_3 = _2630;
                frontier_phi_43_44_ladder_4 = _2628;
                frontier_phi_43_44_ladder_5 = _2626;
            }
            else
            {
                frontier_phi_43_44_ladder = _2425;
                frontier_phi_43_44_ladder_1 = _2415;
                frontier_phi_43_44_ladder_2 = _2423;
                frontier_phi_43_44_ladder_3 = _2421;
                frontier_phi_43_44_ladder_4 = _2419;
                frontier_phi_43_44_ladder_5 = _2417;
            }
            _2623 = frontier_phi_43_44_ladder_1;
            _2625 = frontier_phi_43_44_ladder_5;
            _2627 = frontier_phi_43_44_ladder_4;
            _2629 = frontier_phi_43_44_ladder_3;
            _2631 = frontier_phi_43_44_ladder_2;
            _2633 = frontier_phi_43_44_ladder;
        }
        float _2638 = isnan(1.0) ? _867 : (isnan(_867) ? 1.0 : min(_867, 1.0));
        _2287 = (_2638 * _2629) + _2018;
        _2289 = (_2638 * _2631) + _2019;
        _2291 = (_2638 * _2633) + _2020;
        _2293 = ((_2623 * 0.039999999105930328369140625) * _2638) + _2171;
        _2295 = ((_2625 * 0.039999999105930328369140625) * _2638) + _2172;
        _2297 = ((_2627 * 0.039999999105930328369140625) * _2638) + _2173;
    }
    else
    {
        _2287 = _2018;
        _2289 = _2019;
        _2291 = _2020;
        _2293 = _2171;
        _2295 = _2172;
        _2297 = _2173;
    }
    float _2311 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2312 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2313 = cbSceneParam._m0[86u].x * (_1905 + ((_890 * cbMtdParam._m0[11u].y) * dot(vec3(_800, _801, _802), vec3(_215, _216, _217))));
    float _2314 = isnan(_2311) ? _2313 : (isnan(_2313) ? _2311 : min(_2313, _2311));
    float _2315 = isnan(_2312) ? _765 : (isnan(_765) ? _2312 : min(_765, _2312));
    vec4 _2317 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2314, _2315), 0.0);
    float _2319 = _2317.x;
    bool _2339 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2319)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2319))) > _701;
    float _2340 = _2339 ? _2314 : _764;
    float _2341 = _2339 ? _2315 : _765;
    vec4 _2343 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2340, _2341));
    vec4 _2348 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2340, _2341));
    float _2350 = _2348.x;
    bool _2355 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _2364 = (-0.0) - cbSceneParam._m0[2u].z;
    float _2370 = (_2355 ? (_2364 / (cbSceneParam._m0[2u].x - _2350)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2350))) - _701;
    float _2372 = cbMtdParam._m0[24u].y + cbMtdParam._m0[22u].w;
    float _2373 = cbMtdParam._m0[24u].z + cbMtdParam._m0[23u].x;
    float _2374 = cbMtdParam._m0[24u].w + cbMtdParam._m0[23u].y;
    bool _2380 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2384 = (isnan(_2370) ? 0.0 : (isnan(0.0) ? _2370 : max(0.0, _2370))) * (-1.44269502162933349609375);
    float _4507 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _4518 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _4529 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _2518;
    float _2519;
    float _2520;
    if ((1.0 - _663) > 0.00999999977648258209228515625)
    {
        vec4 _2437 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2340, _2341), 0.0);
        float _2439 = _2437.x;
        float _2445 = (_2355 ? (_2364 / (cbSceneParam._m0[2u].x - _2439)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2439))) - _701;
        uint _2451 = floatBitsToUint(cbInstanceData._m0[_1953]).x * 14u;
        uint _2457 = _2451 + 4u;
        float _2466 = dot(vec3(cbLight._m0[_2451].xyz), vec3(_236, _237, _238));
        float _2474 = dot(vec3((-0.0) - _757, (-0.0) - _758, (-0.0) - _759), vec3((-0.0) - _236, (-0.0) - _237, (-0.0) - _238));
        float _2479 = ((isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0))) / (isnan(0.001000000047497451305389404296875) ? _2466 : (isnan(_2466) ? 0.001000000047497451305389404296875 : max(_2466, 0.001000000047497451305389404296875)))) + 1.0;
        float _2481 = (-0.0) - ((isnan(_2445) ? 0.0 : (isnan(0.0) ? _2445 : max(0.0, _2445))) * _2479);
        _2518 = _2380 ? 0.0 : ((((cbMtdParam._m0[22u].w * 0.079577468335628509521484375) * cbLight._m0[_2457].x) / ((_2479 * _2372) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2372 * 1.44269502162933349609375) * _2481)));
        _2519 = _2380 ? 0.0 : ((((cbMtdParam._m0[23u].x * 0.079577468335628509521484375) * cbLight._m0[_2457].y) / ((_2479 * _2373) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2373 * 1.44269502162933349609375) * _2481)));
        _2520 = _2380 ? 0.0 : ((((cbMtdParam._m0[23u].y * 0.079577468335628509521484375) * cbLight._m0[_2457].z) / ((_2479 * _2374) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2374 * 1.44269502162933349609375) * _2481)));
    }
    else
    {
        _2518 = 0.0;
        _2519 = 0.0;
        _2520 = 0.0;
    }
    float _2537 = 0.959999978542327880859375 - (exp2(log2(1.0 - _882) * 5.0) * 0.959999978542327880859375);
    float _2538 = (_2518 + ((exp2(_2384 * (_2380 ? 0.0 : _2372)) * _2343.x) * cbSceneParam._m0[72u].w)) * _2537;
    float _2539 = (_2519 + ((exp2(_2384 * (_2380 ? 0.0 : _2373)) * _2343.y) * cbSceneParam._m0[72u].w)) * _2537;
    float _2540 = (_2520 + ((exp2(_2384 * (_2380 ? 0.0 : _2374)) * _2343.z) * cbSceneParam._m0[72u].w)) * _2537;
    float _2562 = _764 / cbSceneParam._m0[86u].x;
    float _2563 = _765 / cbSceneParam._m0[86u].y;
    vec4 _2577 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2562, _2563, (log2((isnan(cbSceneParam._m0[77u].w) ? _701 : (isnan(_701) ? cbSceneParam._m0[77u].w : min(_701, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2579 = _2577.x;
    float _2580 = _2577.y;
    float _2581 = _2577.z;
    float _2582 = _2577.w;
    float _2711;
    float _2713;
    float _2715;
    float _2717;
    if (_701 > cbSceneParam._m0[78u].w)
    {
        float _2676 = isnan(_701) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _701 : min(cbSceneParam._m0[80u].w, _701));
        float _2677 = _2676 / _701;
        float _2688 = _2677 * _750;
        float _2689 = _751 * _2677;
        float _2690 = (-0.0) - _2689;
        float _2691 = _2677 * _752;
        float _2693 = (cbSceneParam._m0[77u].w * _2690) / _2676;
        float _2694 = _2693 + cbSceneParam._m0[79u].w;
        float _2695 = cbSceneParam._m0[79u].w - _2689;
        float _2701 = sqrt(((_2688 * _2688) + (_2689 * _2689)) + (_2691 * _2691));
        float _2704 = (1.0 - (cbSceneParam._m0[77u].w / _2676)) * _2701;
        float _2709 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2710 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3096;
        if (abs((_2690 - _2693) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3096 = ((((_2694 > 0.0) ? exp2(_2709 * _2694) : (2.0 - exp2(_2710 * _2694))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2704;
        }
        else
        {
            float _2843 = 1.0 / cbSceneParam._m0[80u].x;
            float _2844 = isnan(_2695) ? _2694 : (isnan(_2694) ? _2695 : max(_2694, _2695));
            float _2845 = isnan(_2695) ? _2694 : (isnan(_2694) ? _2695 : min(_2694, _2695));
            float _2854 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : min(_2844, 0.0));
            float _2855 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : min(_2845, 0.0));
            _3096 = ((abs(_2701 / _2690) * cbSceneParam._m0[80u].y) * ((((_2854 - _2855) * 2.0) - ((exp2(_2709 * (isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0)))) - exp2(_2709 * (isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0))))) * _2843)) - ((exp2(_2710 * _2854) - exp2(_2710 * _2855)) * _2843))) + (_2704 * cbSceneParam._m0[80u].z);
        }
        vec4 _3098 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2562, _2563, 1.0), 0.0);
        float _3107 = exp2((_3096 * (-1.44269502162933349609375)) * (1.0 - _3098.w));
        float _3108 = log2(_3107);
        float _3124 = log2(_2582);
        _2711 = (exp2(_3124 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3108 * cbSceneParam._m0[78u].x)) * _3098.x) / cbSceneParam._m0[78u].x)) + _2579;
        _2713 = (exp2(_3124 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3108 * cbSceneParam._m0[78u].y)) * _3098.y) / cbSceneParam._m0[78u].y)) + _2580;
        _2715 = (exp2(_3124 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3108 * cbSceneParam._m0[78u].z)) * _3098.z) / cbSceneParam._m0[78u].z)) + _2581;
        _2717 = _3107 * _2582;
    }
    else
    {
        _2711 = _2579;
        _2713 = _2580;
        _2715 = _2581;
        _2717 = _2582;
    }
    bool _2729 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2730 = log2(_2717);
    float _2737 = exp2(_2730 * cbSceneParam._m0[78u].x) * ((_2538 + (((((_1882 * _1930.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1677) * _1946)) + _2293) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2287 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _867))) - _2538) * _663));
    float _2738 = exp2(_2730 * cbSceneParam._m0[78u].y) * ((_2539 + (((((_1882 * _1930.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1677) * _1946)) + _2295) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_2289 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _867))) - _2539) * _663));
    float _2739 = exp2(_2730 * cbSceneParam._m0[78u].z) * ((_2540 + (((((_1882 * _1930.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1677) * _1946)) + _2297) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_2291 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _867))) - _2540) * _663));
    vec4 _2747 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_764, _765));
    float _2749 = _2747.x;
    float _2770 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2749)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2749))) - _701) * 3.0;
    float _4595 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
    float _2772 = (cbInstanceData._m0[_842 + 6u].w * (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) * (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)));
    float _2781 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2781 * (_2729 ? _2737 : (_2737 + (cbSceneParam._m0[72u].w * _2711)));
    SV_Target.y = _2781 * (_2729 ? _2738 : (_2738 + (cbSceneParam._m0[72u].w * _2713)));
    SV_Target.z = _2781 * (_2729 ? _2739 : (_2739 + (cbSceneParam._m0[72u].w * _2715)));
    SV_Target.w = _2772;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2772;
}


