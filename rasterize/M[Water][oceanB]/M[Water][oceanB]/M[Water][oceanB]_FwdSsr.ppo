#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 0, std140) uniform cbPerSceneUBO
{
    vec4 _m0[39];
} cbPerScene;

layout(set = 0, binding = 26) uniform texture2D g_PrevFrameTexture;
layout(set = 0, binding = 27) uniform texture2D g_ConvertedDepthTexture;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in vec3 TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _83 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _84 = _83 * NORMAL.x;
    float _85 = _83 * NORMAL.y;
    float _86 = _83 * NORMAL.z;
    float _91;
    float _92;
    float _93;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _91 = (-0.0) - _84;
        _92 = (-0.0) - _85;
        _93 = (-0.0) - _86;
    }
    else
    {
        _91 = _84;
        _92 = _85;
        _93 = _86;
    }
    float _138 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _148 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _138);
    float _149 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _138);
    float _150 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _138);
    float _163 = cbMtdParam._m0[13u].y - cbMtdParam._m0[13u].x;
    float _182 = (cbMtdParam._m0[15u].x + ((sqrt(((_148 * _148) + (_149 * _149)) + (_150 * _150)) - cbMtdParam._m0[13u].x) / (isnan(0.0) ? _163 : (isnan(_163) ? 0.0 : max(_163, 0.0))))) * cbMtdParam._m0[14u].y;
    float _745 = isnan(0.0) ? _182 : (isnan(_182) ? 0.0 : max(_182, 0.0));
    float _187 = ((isnan(1.0) ? _745 : (isnan(_745) ? 1.0 : min(_745, 1.0))) * (cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].x)) + cbMtdParam._m0[11u].x;
    float _756 = isnan(0.0) ? _187 : (isnan(_187) ? 0.0 : max(_187, 0.0));
    float _188 = isnan(1.0) ? _756 : (isnan(_756) ? 1.0 : min(_756, 1.0));
    float _202 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _203 = POSITION_1.x / POSITION_1.w;
    float _204 = POSITION_1.y / POSITION_1.w;
    float _208 = (_203 * 0.5) + 0.5;
    float _209 = 0.5 - (_204 * 0.5);
    float _215;
    float _217;
    float _219;
    float _221;
    if (_188 < cbPerScene._m0[22u].z)
    {
        _215 = 0.0;
        _217 = 0.0;
        _219 = 0.0;
        _221 = 0.0;
    }
    else
    {
        float _227 = 1.0 / _202;
        float frontier_phi_3_4_ladder;
        float frontier_phi_3_4_ladder_1;
        float frontier_phi_3_4_ladder_2;
        float frontier_phi_3_4_ladder_3;
        if (!(cbPerScene._m0[21u].y >= _227))
        {
            float _250 = fma(_93, cbPerScene._m0[8u].z, fma(_92, cbPerScene._m0[8u].y, cbPerScene._m0[8u].x * _91));
            float _253 = fma(_93, cbPerScene._m0[9u].z, fma(_92, cbPerScene._m0[9u].y, cbPerScene._m0[9u].x * _91));
            float _256 = fma(_93, cbPerScene._m0[10u].z, fma(_92, cbPerScene._m0[10u].y, cbPerScene._m0[10u].x * _91));
            float _263 = (_202 * _203) * cbPerScene._m0[28u].x;
            float _265 = (_202 * _204) * cbPerScene._m0[28u].y;
            float _269 = inversesqrt(dot(vec3(_263, _265, _202), vec3(_263, _265, _202)));
            float _270 = _263 * _269;
            float _271 = _265 * _269;
            float _272 = _269 * _202;
            float _276 = dot(vec3(_270, _271, _272), vec3(_250, _253, _256)) * 2.0;
            float _281 = _270 - (_276 * _250);
            float _282 = _271 - (_276 * _253);
            float _283 = _272 - (_276 * _256);
            float _287 = inversesqrt(dot(vec3(_281, _282, _283), vec3(_281, _282, _283)));
            float _290 = _283 * _287;
            float frontier_phi_3_4_ladder_5_ladder;
            float frontier_phi_3_4_ladder_5_ladder_1;
            float frontier_phi_3_4_ladder_5_ladder_2;
            float frontier_phi_3_4_ladder_5_ladder_3;
            if (_290 < cbPerScene._m0[16u].x)
            {
                frontier_phi_3_4_ladder_5_ladder = 0.0;
                frontier_phi_3_4_ladder_5_ladder_1 = 0.0;
                frontier_phi_3_4_ladder_5_ladder_2 = 0.0;
                frontier_phi_3_4_ladder_5_ladder_3 = 0.0;
            }
            else
            {
                float _302 = abs(dot(vec3((-0.0) - _270, (-0.0) - _271, (-0.0) - _272), vec3(_250, _253, _256)));
                float _767 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
                float _313 = (((_188 * _188) * 0.959999978542327880859375) * exp2(log2(1.0 - (isnan(1.0) ? _767 : (isnan(_767) ? 1.0 : min(_767, 1.0)))) * 5.0)) + 0.039999999105930328369140625;
                float _322 = (cbPerScene._m0[29u].x * (1.0 - _188)) + cbPerScene._m0[29u].y;
                float _778 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
                float _331 = ((cbPerScene._m0[23u].w - cbPerScene._m0[23u].z) * (isnan(1.0) ? _778 : (isnan(_778) ? 1.0 : min(_778, 1.0)))) + cbPerScene._m0[23u].z;
                float frontier_phi_3_4_ladder_5_ladder_6_ladder;
                float frontier_phi_3_4_ladder_5_ladder_6_ladder_1;
                float frontier_phi_3_4_ladder_5_ladder_6_ladder_2;
                float frontier_phi_3_4_ladder_5_ladder_6_ladder_3;
                if (_313 < cbPerScene._m0[22u].x)
                {
                    frontier_phi_3_4_ladder_5_ladder_6_ladder = 0.0;
                    frontier_phi_3_4_ladder_5_ladder_6_ladder_1 = 0.0;
                    frontier_phi_3_4_ladder_5_ladder_6_ladder_2 = 0.0;
                    frontier_phi_3_4_ladder_5_ladder_6_ladder_3 = 0.0;
                }
                else
                {
                    float _334 = _290 - cbPerScene._m0[16u].x;
                    float _789 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
                    float _335 = isnan(1.0) ? _789 : (isnan(_789) ? 1.0 : min(_789, 1.0));
                    float _336 = _335 * _335;
                    float _338 = (_313 - cbPerScene._m0[22u].x) * 10.0;
                    float _800 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
                    float _340 = isnan(1.0) ? _800 : (isnan(_800) ? 1.0 : min(_800, 1.0));
                    float _341 = isnan(_340) ? _336 : (isnan(_336) ? _340 : min(_336, _340));
                    float _345 = (cbPerScene._m0[21u].x - _202) * cbPerScene._m0[21u].z;
                    float _816 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
                    float _346 = isnan(1.0) ? _816 : (isnan(_816) ? 1.0 : min(_816, 1.0));
                    float _347 = isnan(_346) ? _341 : (isnan(_341) ? _346 : min(_341, _346));
                    float _348 = (_281 * _287) + _263;
                    float _349 = (_282 * _287) + _265;
                    float _350 = _290 + _202;
                    float _383 = fma(_350, cbPerScene._m0[7u].z, fma(_349, cbPerScene._m0[7u].y, cbPerScene._m0[7u].x * _348)) + cbPerScene._m0[7u].w;
                    float _387 = ((fma(_350, cbPerScene._m0[4u].z, fma(_349, cbPerScene._m0[4u].y, cbPerScene._m0[4u].x * _348)) + cbPerScene._m0[4u].w) / _383) - _208;
                    float _388 = ((fma(_350, cbPerScene._m0[5u].z, fma(_349, cbPerScene._m0[5u].y, cbPerScene._m0[5u].x * _348)) + cbPerScene._m0[5u].w) / _383) - _209;
                    float _395 = cbPerScene._m0[18u].x * _387;
                    float _396 = cbPerScene._m0[18u].y * _388;
                    float _401 = sqrt((_395 * _395) + (_396 * _396)) + 9.9999997473787516355514526367188e-06;
                    float _406 = (_387 / _401) * _331;
                    float _407 = (_388 / _401) * _331;
                    float _408 = (((1.0 / _350) - _227) / _401) * _331;
                    float _437 = abs(float(_406 > 0.0) - _208) / (abs(_406) + 1.0000000116860974230803549289703e-07);
                    float _438 = abs(float(_407 > 0.0) - _209) / (abs(_407) + 1.0000000116860974230803549289703e-07);
                    float _440 = (abs(((_408 > 0.0) ? cbPerScene._m0[20u].x : cbPerScene._m0[20u].y) - _227) / (abs(_408) + 1.0000000116860974230803549289703e-07)) + 2.0;
                    float _441 = isnan(_438) ? _437 : (isnan(_437) ? _438 : min(_437, _438));
                    float _442 = isnan(_440) ? _441 : (isnan(_441) ? _440 : min(_441, _440));
                    uint _445 = uint(int(isnan(cbPerScene._m0[23u].y) ? _442 : (isnan(_442) ? cbPerScene._m0[23u].y : min(_442, cbPerScene._m0[23u].y))));
                    float _222;
                    float _450;
                    float _452;
                    float _454;
                    if (int(_445) > int(0u))
                    {
                        float _447 = _408 + _227;
                        float _448 = _407 + _209;
                        float _449 = _406 + _208;
                        float _451;
                        float _453;
                        float _455;
                        float _456;
                        uint _467;
                        float _469;
                        float _471;
                        float _473;
                        float _475;
                        float _477;
                        float _479;
                        float _481;
                        uint _483;
                        float _485;
                        float _487;
                        float _489;
                        float _462 = 0.0;
                        float _463 = 0.0;
                        float _464 = 0.0;
                        float _465 = 0.0;
                        uint _466 = 0u;
                        float _468 = _227;
                        float _470 = _449;
                        float _472 = _448;
                        float _474 = _447;
                        float _476 = _208;
                        float _478 = _209;
                        float _480 = _227;
                        uint _482 = 1u;
                        float _484 = 0.0;
                        float _486 = 0.0;
                        float _488 = 0.0;
                        float _502;
                        float _508;
                        float _509;
                        float _510;
                        float _511;
                        float _512;
                        float _513;
                        uint _514;
                        float _515;
                        bool _522;
                        for (;;)
                        {
                            _502 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _470, cbSceneParam._m0[86u].y * _472), 0.0).x;
                            bool _507 = _466 == (_445 + 4294967295u);
                            _508 = _507 ? _484 : _470;
                            _509 = _507 ? _486 : _472;
                            _510 = _507 ? _488 : _474;
                            _511 = _507 ? _484 : _476;
                            _512 = _507 ? _486 : _478;
                            _513 = _507 ? _488 : _480;
                            _514 = _507 ? 1u : _482;
                            _515 = _507 ? (-1.0) : (_474 - _502);
                            _522 = (_514 != 0u) && ((_515 <= 0.0) && ((_507 ? (-1.0) : (_502 - (_468 * cbPerScene._m0[19u].y))) < 0.0));
                            float frontier_phi_16_pred;
                            float frontier_phi_16_pred_1;
                            float frontier_phi_16_pred_2;
                            float frontier_phi_16_pred_3;
                            float frontier_phi_16_pred_4;
                            float frontier_phi_16_pred_5;
                            float frontier_phi_16_pred_6;
                            uint frontier_phi_16_pred_7;
                            float frontier_phi_16_pred_8;
                            float frontier_phi_16_pred_9;
                            float frontier_phi_16_pred_10;
                            float frontier_phi_16_pred_11;
                            float frontier_phi_16_pred_12;
                            float frontier_phi_16_pred_13;
                            float frontier_phi_16_pred_14;
                            uint frontier_phi_16_pred_15;
                            if (_522)
                            {
                                uint _532 = uint(int(log2(_331) + 0.999000012874603271484375));
                                float _543;
                                float _545;
                                float _547;
                                float _549;
                                float _551;
                                float _553;
                                float _555;
                                if (int(_532) > int(0u))
                                {
                                    uint _653;
                                    float _655;
                                    float _656;
                                    float _657;
                                    float _658;
                                    float _659;
                                    float _660;
                                    float _661;
                                    _653 = 0u;
                                    _655 = _508;
                                    _656 = _509;
                                    _657 = _510;
                                    _658 = _511;
                                    _659 = _512;
                                    _660 = _513;
                                    _661 = _502;
                                    float _544;
                                    float _546;
                                    float _548;
                                    float _550;
                                    float _552;
                                    float _554;
                                    float _556;
                                    for (;;)
                                    {
                                        float _665 = (_658 + _655) * 0.5;
                                        float _666 = (_659 + _656) * 0.5;
                                        float _667 = (_660 + _657) * 0.5;
                                        vec4 _675 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _665, cbSceneParam._m0[86u].y * _666), 0.0);
                                        float _677 = _675.x;
                                        bool _679 = (_667 - _677) < 0.0;
                                        _544 = _679 ? _665 : _655;
                                        _546 = _679 ? _666 : _656;
                                        _548 = _679 ? _667 : _657;
                                        _550 = _679 ? _658 : _665;
                                        _552 = _679 ? _659 : _666;
                                        _554 = _679 ? _660 : _667;
                                        _556 = _679 ? _677 : _661;
                                        uint _654 = _653 + 1u;
                                        if (_654 == _532)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            _653 = _654;
                                            _655 = _544;
                                            _656 = _546;
                                            _657 = _548;
                                            _658 = _550;
                                            _659 = _552;
                                            _660 = _554;
                                            _661 = _556;
                                        }
                                    }
                                    _543 = _544;
                                    _545 = _546;
                                    _547 = _548;
                                    _549 = _550;
                                    _551 = _552;
                                    _553 = _554;
                                    _555 = _556;
                                }
                                else
                                {
                                    _543 = _508;
                                    _545 = _509;
                                    _547 = _510;
                                    _549 = _511;
                                    _551 = _512;
                                    _553 = _513;
                                    _555 = _502;
                                }
                                float _565 = cbPerScene._m0[28u].x * ((_543 * 2.0) + (-1.0));
                                float _566 = cbPerScene._m0[28u].y * (1.0 - (_545 * 2.0));
                                float _598 = fma(_555, cbPerScene._m0[27u].w, fma(_566, cbPerScene._m0[27u].y, cbPerScene._m0[27u].x * _565) + cbPerScene._m0[27u].z);
                                float _599 = fma(_555, cbPerScene._m0[24u].w, fma(_566, cbPerScene._m0[24u].y, _565 * cbPerScene._m0[24u].x) + cbPerScene._m0[24u].z) / _598;
                                float _600 = fma(_555, cbPerScene._m0[25u].w, fma(_566, cbPerScene._m0[25u].y, cbPerScene._m0[25u].x * _565) + cbPerScene._m0[25u].z) / _598;
                                vec4 _609 = textureLod(sampler2D(g_PrevFrameTexture, SS_ClampLinear), vec2(cbSceneParam._m0[87u].z * _599, cbSceneParam._m0[87u].w * _600), 0.0);
                                float _614 = isnan(_347) ? 1.0 : (isnan(1.0) ? _347 : min(1.0, _347));
                                float _615 = 0.5 - _599;
                                float _616 = 0.5 - _600;
                                float _617 = _615 * 2.0;
                                float _618 = _616 * 2.0;
                                float _619 = _617 * _617;
                                float _620 = _618 * _618;
                                float _852 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
                                float _863 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
                                float _629 = inversesqrt(dot(vec2(_406, _407), vec2(_406, _407)));
                                float _635 = inversesqrt(dot(vec2(_617, _618), vec2(_617, _618)));
                                float _641 = dot(vec2((_615 * (-2.0)) * _635, (_616 * (-2.0)) * _635), vec2(_629 * _406, _629 * _407));
                                float _874 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
                                float _648 = ((1.0 - (isnan(1.0) ? _863 : (isnan(_863) ? 1.0 : min(_863, 1.0)))) * (1.0 - (isnan(1.0) ? _852 : (isnan(_852) ? 1.0 : min(_852, 1.0))))) * (4.0 - ((isnan(1.0) ? _874 : (isnan(_874) ? 1.0 : min(_874, 1.0))) * 2.0));
                                float _885 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
                                float _649 = isnan(1.0) ? _885 : (isnan(_885) ? 1.0 : min(_885, 1.0));
                                float _650 = _649 * _649;
                                frontier_phi_16_pred = _553;
                                frontier_phi_16_pred_1 = _551;
                                frontier_phi_16_pred_2 = _486;
                                frontier_phi_16_pred_3 = _549;
                                frontier_phi_16_pred_4 = _547;
                                frontier_phi_16_pred_5 = _545;
                                frontier_phi_16_pred_6 = _468;
                                frontier_phi_16_pred_7 = _445;
                                frontier_phi_16_pred_8 = isnan(_650) ? _614 : (isnan(_614) ? _650 : min(_614, _650));
                                frontier_phi_16_pred_9 = _609.z;
                                frontier_phi_16_pred_10 = _609.y;
                                frontier_phi_16_pred_11 = _609.x;
                                frontier_phi_16_pred_12 = _543;
                                frontier_phi_16_pred_13 = _488;
                                frontier_phi_16_pred_14 = _484;
                                frontier_phi_16_pred_15 = _514;
                            }
                            else
                            {
                                bool _534 = _515 > 0.0;
                                frontier_phi_16_pred = _510;
                                frontier_phi_16_pred_1 = _509;
                                frontier_phi_16_pred_2 = _534 ? _509 : _486;
                                frontier_phi_16_pred_3 = _508;
                                frontier_phi_16_pred_4 = _510 + _408;
                                frontier_phi_16_pred_5 = _509 + _407;
                                frontier_phi_16_pred_6 = _502;
                                frontier_phi_16_pred_7 = _466 + 1u;
                                frontier_phi_16_pred_8 = _465;
                                frontier_phi_16_pred_9 = _464;
                                frontier_phi_16_pred_10 = _463;
                                frontier_phi_16_pred_11 = _462;
                                frontier_phi_16_pred_12 = _508 + _406;
                                frontier_phi_16_pred_13 = _534 ? _510 : _488;
                                frontier_phi_16_pred_14 = _534 ? _508 : _484;
                                frontier_phi_16_pred_15 = uint(_534);
                            }
                            _481 = frontier_phi_16_pred;
                            _479 = frontier_phi_16_pred_1;
                            _487 = frontier_phi_16_pred_2;
                            _477 = frontier_phi_16_pred_3;
                            _475 = frontier_phi_16_pred_4;
                            _473 = frontier_phi_16_pred_5;
                            _469 = frontier_phi_16_pred_6;
                            _467 = frontier_phi_16_pred_7;
                            _456 = frontier_phi_16_pred_8;
                            _455 = frontier_phi_16_pred_9;
                            _453 = frontier_phi_16_pred_10;
                            _451 = frontier_phi_16_pred_11;
                            _471 = frontier_phi_16_pred_12;
                            _489 = frontier_phi_16_pred_13;
                            _485 = frontier_phi_16_pred_14;
                            _483 = frontier_phi_16_pred_15;
                            if (int(_467) < int(_445))
                            {
                                _462 = _451;
                                _463 = _453;
                                _464 = _455;
                                _465 = _456;
                                _466 = _467;
                                _468 = _469;
                                _470 = _471;
                                _472 = _473;
                                _474 = _475;
                                _476 = _477;
                                _478 = _479;
                                _480 = _481;
                                _482 = _483;
                                _484 = _485;
                                _486 = _487;
                                _488 = _489;
                                continue;
                            }
                            else
                            {
                                break;
                            }
                        }
                        _450 = _451;
                        _452 = _453;
                        _454 = _455;
                        _222 = _456;
                    }
                    else
                    {
                        _450 = 0.0;
                        _452 = 0.0;
                        _454 = 0.0;
                        _222 = 0.0;
                    }
                    float frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder;
                    float frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_1;
                    float frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_2;
                    float frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_3;
                    if ((isnan(_450) || isnan(_452)) || isnan(_454))
                    {
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder = 0.0;
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_1 = 0.0;
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_2 = 0.0;
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_3 = 0.0;
                    }
                    else
                    {
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder = (_222 * _450) * cbPerScene._m0[28u].w;
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_1 = _222;
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_2 = (_222 * _454) * cbPerScene._m0[28u].w;
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_3 = (_222 * _452) * cbPerScene._m0[28u].w;
                    }
                    frontier_phi_3_4_ladder_5_ladder_6_ladder = frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder;
                    frontier_phi_3_4_ladder_5_ladder_6_ladder_1 = frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_1;
                    frontier_phi_3_4_ladder_5_ladder_6_ladder_2 = frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_2;
                    frontier_phi_3_4_ladder_5_ladder_6_ladder_3 = frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_3;
                }
                frontier_phi_3_4_ladder_5_ladder = frontier_phi_3_4_ladder_5_ladder_6_ladder;
                frontier_phi_3_4_ladder_5_ladder_1 = frontier_phi_3_4_ladder_5_ladder_6_ladder_1;
                frontier_phi_3_4_ladder_5_ladder_2 = frontier_phi_3_4_ladder_5_ladder_6_ladder_2;
                frontier_phi_3_4_ladder_5_ladder_3 = frontier_phi_3_4_ladder_5_ladder_6_ladder_3;
            }
            frontier_phi_3_4_ladder = frontier_phi_3_4_ladder_5_ladder;
            frontier_phi_3_4_ladder_1 = frontier_phi_3_4_ladder_5_ladder_1;
            frontier_phi_3_4_ladder_2 = frontier_phi_3_4_ladder_5_ladder_2;
            frontier_phi_3_4_ladder_3 = frontier_phi_3_4_ladder_5_ladder_3;
        }
        else
        {
            frontier_phi_3_4_ladder = 0.0;
            frontier_phi_3_4_ladder_1 = 0.0;
            frontier_phi_3_4_ladder_2 = 0.0;
            frontier_phi_3_4_ladder_3 = 0.0;
        }
        _215 = frontier_phi_3_4_ladder;
        _217 = frontier_phi_3_4_ladder_3;
        _219 = frontier_phi_3_4_ladder_2;
        _221 = frontier_phi_3_4_ladder_1;
    }
    SV_Target.x = _215;
    SV_Target.y = _217;
    SV_Target.z = _219;
    SV_Target.w = _221;
}


