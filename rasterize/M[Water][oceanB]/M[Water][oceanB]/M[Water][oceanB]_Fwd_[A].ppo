#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_oceanB_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_oceanB_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_oceanB_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in vec3 TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1287;
float _3676;
float _3677;
float _3678;
float _3679;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _219 = _218 * _211;
    float _220 = _218 * _212;
    float _221 = _218 * _213;
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240;
    float _241;
    float _242;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
    }
    else
    {
        _240 = _226;
        _241 = _227;
        _242 = _228;
    }
    float _286 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _296 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _286);
    float _297 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _286);
    float _298 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _286);
    float _315 = cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x;
    vec4 _332 = texture(sampler2D(M_Water_oceanB_snp_0_Texture2D_2, SS_BumpMap), vec2((((_315 * cbMtdParam._m0[19u].w) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_315 * cbMtdParam._m0[20u].x) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _335 = _332.x;
    float _336 = _332.y;
    float _356 = cbMtdParam._m0[13u].y - cbMtdParam._m0[13u].x;
    float _358 = (sqrt(((_296 * _296) + (_297 * _297)) + (_298 * _298)) - cbMtdParam._m0[13u].x) / (isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0)));
    float _365 = (cbMtdParam._m0[13u].w + _358) * cbMtdParam._m0[15u].y;
    float _3693 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    vec4 _379 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _381 = _379.x;
    bool _388 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _404 = ((_388 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _381)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _381))) - POSITION_1.w) / (((isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * (cbMtdParam._m0[12u].w - cbMtdParam._m0[12u].y)) + cbMtdParam._m0[12u].y);
    float _3704 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _405 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _411 = 1.0 - (isnan(cbMtdParam._m0[16u].z) ? _405 : (isnan(_405) ? cbMtdParam._m0[16u].z : max(_405, cbMtdParam._m0[16u].z)));
    float _3720 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _412 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _413 = _332.z - _412;
    float _3731 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _414 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _426 = (_414 * 0.004999999888241291046142578125) + TEXCOORD.x;
    float _428 = (_414 * (-0.004999999888241291046142578125)) + TEXCOORD.y;
    vec4 _441 = texture(sampler2D(M_Water_oceanB_snp_0_Texture2D_0, SS_BumpMap), vec2(((_426 + (cbMtdParam._m0[18u].y * _315)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_428 + (cbMtdParam._m0[18u].z * _315)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _445 = _441.z;
    vec4 _458 = texture(sampler2D(M_Water_oceanB_snp_0_Texture2D_0, SS_BumpMap), vec2(((_426 + (cbMtdParam._m0[17u].w * _315)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_428 + (cbMtdParam._m0[18u].x * _315)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _462 = _458.z;
    float _465 = (_411 - _332.w) + (isnan(_462) ? _445 : (isnan(_445) ? _462 : max(_445, _462)));
    float _3747 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _469 = (TEXCOORD_5.x - _411) + cbMtdParam._m0[16u].y;
    float _470 = _469 * (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)));
    float _482 = (_470 + cbMtdParam._m0[9u].x) + (cbMtdParam._m0[10u].x * _414);
    float _483 = (_470 + cbMtdParam._m0[9u].y) + (cbMtdParam._m0[10u].y * _414);
    float _484 = (_470 + cbMtdParam._m0[9u].z) + (cbMtdParam._m0[10u].z * _414);
    float _3758 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _486 = 1.0 - (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)));
    float _493 = ((_486 - _482) * _412) + _482;
    float _494 = ((_486 - _483) * _412) + _483;
    float _495 = ((_486 - _484) * _412) + _484;
    float _500 = _358 / cbMtdParam._m0[15u].w;
    float _3769 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _503 = (1.0 - (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) * cbMtdParam._m0[15u].z;
    float _516 = (cbMtdParam._m0[15u].x + _358) * cbMtdParam._m0[14u].y;
    float _3780 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _520 = ((isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].x)) + cbMtdParam._m0[11u].x;
    float _3791 = isnan(0.0) ? TEXCOORD_5.y : (isnan(TEXCOORD_5.y) ? 0.0 : max(TEXCOORD_5.y, 0.0));
    float _521 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _530 = _358 / cbMtdParam._m0[14u].w;
    float _3802 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _531 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    vec4 _551 = texture(sampler2D(M_Water_oceanB_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[20u].y * _315) + TEXCOORD.z) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[20u].z * _315) + TEXCOORD.w) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _560 = ((_458.x + (-0.5)) * 0.5) + _441.x;
    float _561 = ((_458.y + (-0.5)) * 0.5) + _441.y;
    float _569 = _414 * 0.119999997317790985107421875;
    float _571 = _414 * (-0.100000001490116119384765625);
    float _582 = cbMtdParam._m0[21u].y * TEXCOORD.x;
    float _583 = cbMtdParam._m0[21u].z * TEXCOORD.y;
    vec4 _592 = texture(sampler2D(M_Water_oceanB_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[20u].w * _315) + _569) + _582) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[21u].x * _315) + _571) + _583) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _610 = texture(sampler2D(M_Water_oceanB_snp_0_Texture2D_0, SS_BumpMap), vec2((((_582 + _569) + (cbMtdParam._m0[21u].w * _315)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_583 + _571) + (cbMtdParam._m0[22u].x * _315)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _622 = (((0.5 - _560) * 0.10999999940395355224609375) + _560) + (((_592.x + (-1.0)) + _610.x) * cbMtdParam._m0[16u].x);
    float _623 = (((0.5 - _561) * 0.10999999940395355224609375) + _561) + (((_592.y + (-1.0)) + _610.y) * cbMtdParam._m0[16u].x);
    float _628 = ((_551.x - _622) * _531) + _622;
    float _629 = ((_551.y - _623) * _531) + _623;
    float _631 = _358 / cbMtdParam._m0[14u].z;
    float _3813 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _632 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _649 = ((((_521 * (0.5 - _335)) + _335) + (((_628 + (-0.5)) + ((0.5 - _628) * _632)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _650 = ((((_521 * (0.5 - _336)) + _336) + (((_629 + (-0.5)) + ((0.5 - _629) * _632)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _651 = dot(vec2(_649, _650), vec2(_649, _650));
    float _3824 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _656 = sqrt(1.0 - (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))));
    float _664 = (cbMtdParam._m0[13u].z + _358) * cbMtdParam._m0[14u].x;
    float _3835 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _666 = (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * cbMtdParam._m0[17u].x;
    float _3846 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _667 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _682 = fma(_656, _240, fma(_650, _232 * TANGENT.x, _649 * _219));
    float _685 = fma(_656, _241, fma(_650, _232 * TANGENT.y, _649 * _220));
    float _688 = fma(_656, _242, fma(_650, _232 * TANGENT.z, _649 * _221));
    float _692 = inversesqrt(dot(vec3(_682, _685, _688), vec3(_682, _685, _688)));
    float _693 = _692 * _682;
    float _694 = _692 * _685;
    float _695 = _692 * _688;
    float _3857 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _3868 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _697 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _3879 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _3890 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _3901 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _705 = _388 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _754 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _745);
    float _755 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _745);
    float _756 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _745);
    float _760 = inversesqrt(dot(vec3(_754, _755, _756), vec3(_754, _755, _756)));
    float _761 = _754 * _760;
    float _762 = _755 * _760;
    float _763 = _756 * _760;
    vec4 _768 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _770 = _768.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _969 = sqrt(((_754 * _754) + (_755 * _755)) + (_756 * _756));
        float _975 = (cbMatDynParam._m0[5u].x * _969) + cbMatDynParam._m0[5u].y;
        float _3912 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _980 = (cbMatDynParam._m0[5u].z * _969) + cbMatDynParam._m0[5u].w;
        float _3923 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) - _976)) + _976) < ((_770 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _781 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _782 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _784 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD_8.x, TEXCOORD_8.y));
    float _793 = (_784.x * 2.0) + (-1.0);
    float _794 = (_784.y * 2.0) + (-1.0);
    float _795 = (_784.z * 2.0) + (-1.0);
    float _799 = inversesqrt(dot(vec3(_793, _794, _795), vec3(_793, _794, _795)));
    float _810 = ((TEXCOORD_8.y >= 1.0) || (((TEXCOORD_8.x <= 0.0) || (TEXCOORD_8.x >= 1.0)) || (TEXCOORD_8.y <= 0.0))) ? 0.0 : _784.w;
    float _817 = (((_793 * _799) - _693) * _810) + _693;
    float _818 = (((_794 * _799) - _694) * _810) + _694;
    float _819 = (((_795 * _799) - _695) * _810) + _695;
    float _839 = fma(_819, cbSceneParam._m0[5u].z, fma(_818, cbSceneParam._m0[5u].y, _817 * cbSceneParam._m0[5u].x));
    float _842 = fma(_819, cbSceneParam._m0[6u].z, fma(_818, cbSceneParam._m0[6u].y, _817 * cbSceneParam._m0[6u].x));
    float _845 = fma(_819, cbSceneParam._m0[7u].z, fma(_818, cbSceneParam._m0[7u].y, _817 * cbSceneParam._m0[7u].x));
    uint _858 = uint(roundEven(NORMAL.w)) * 13u;
    uint _859 = _858 + 9u;
    uint _860 = _859 + uint(cbMatDynParam._m0[0u].w);
    float _866 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) * cbInstanceData._m0[_860].x;
    float _867 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) * cbInstanceData._m0[_860].y;
    float _868 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * cbInstanceData._m0[_860].z;
    float _3934 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _869 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _3945 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _870 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _3956 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _871 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    vec4 _880 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _781, cbSceneParam._m0[86u].y * _782));
    float _883 = _880.x * TEXCOORD_5.w;
    float _884 = dot(vec3(_817, _818, _819), vec3(_761, _762, _763));
    float _887 = _884 * 2.0;
    float _891 = (_887 * _817) - _761;
    float _892 = (_887 * _818) - _762;
    float _893 = (_887 * _819) - _763;
    float _897 = abs(dot(vec3(_761, _762, _763), vec3(_817, _818, _819)));
    float _3967 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _898 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _906 = 10.0 / (_705 + 10.0);
    float _907 = sqrt(_697);
    float _919 = exp2((_907 * 5.0) * log2(1.0 - (_898 * 0.999000012874603271484375))) / (4.0 - (_907 * 3.0));
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _958 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1286;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1013 = fma(_958, cbModelParam._m0[26u].z, fma(_954, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _950));
        float _1017 = fma(_958, cbModelParam._m0[27u].z, fma(_954, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _950));
        float _1021 = fma(_958, cbModelParam._m0[28u].z, fma(_954, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _950));
        float _1044 = _950 + _817;
        float _1045 = _954 + _818;
        float _1046 = _958 + _819;
        float _1056 = fma(_1046, cbModelParam._m0[26u].z, fma(_1045, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1044)) - _1013;
        float _1057 = fma(_1046, cbModelParam._m0[27u].z, fma(_1045, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1044)) - _1017;
        float _1058 = fma(_1046, cbModelParam._m0[28u].z, fma(_1045, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1044)) - _1021;
        float _1062 = inversesqrt(dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058)));
        float _1075 = ((_1062 * _1056) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1013 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1076 = ((_1062 * _1057) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1017 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1077 = ((_1062 * _1058) / cbModelParam._m0[34u].z) + ((((((_1021 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        float _1114 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1080.x + (-0.5));
        float _1116 = _1114 * (_1080.y + (-0.5));
        float _1117 = _1114 * (_1080.z + (-0.5));
        float _1124 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1087.x + (-0.5));
        float _1126 = _1124 * (_1087.y + (-0.5));
        float _1127 = _1124 * (_1087.z + (-0.5));
        float _1134 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1094.x + (-0.5));
        float _1136 = _1134 * (_1094.y + (-0.5));
        float _1137 = _1134 * (_1094.z + (-0.5));
        float _1144 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1101.x + (-0.5));
        float _1146 = _1144 * (_1101.y + (-0.5));
        float _1147 = _1144 * (_1101.z + (-0.5));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = _1115 * 0.5;
        float _1152 = _1125 * 0.5;
        float _1153 = _1135 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1168 = (dot(vec3(_817, _818, _819), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1178 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _4015 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1180 + 1.0))) + _1185) * _1148;
        float _1195 = _1116 * 0.5;
        float _1196 = _1126 * 0.5;
        float _1197 = _1136 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_817, _818, _819), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _4048 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1222 + 1.0))) + _1227) * _1149;
        float _1237 = _1117 * 0.5;
        float _1238 = _1127 * 0.5;
        float _1239 = _1137 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_817, _818, _819), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _4081 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1264 + 1.0))) + _1269) * _1150;
        _1286 = _1117;
        _1288 = _1116;
        _1289 = _1115;
        _1290 = _1127;
        _1291 = _1126;
        _1292 = _1125;
        _1293 = _1137;
        _1294 = _1136;
        _1295 = _1135;
        _1296 = _1150;
        _1297 = _1149;
        _1298 = _1148;
        _1299 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
        _1300 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
        _1301 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
    }
    else
    {
        _1286 = _1287;
        _1288 = _1287;
        _1289 = _1287;
        _1290 = _1287;
        _1291 = _1287;
        _1292 = _1287;
        _1293 = _1287;
        _1294 = _1287;
        _1295 = _1287;
        _1296 = _1287;
        _1297 = _1287;
        _1298 = _1287;
        _1299 = 0.0;
        _1300 = 0.0;
        _1301 = 0.0;
    }
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1330 = fma(_958, cbModelParam._m0[30u].z, fma(_954, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _950));
        float _1334 = fma(_958, cbModelParam._m0[31u].z, fma(_954, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _950));
        float _1338 = fma(_958, cbModelParam._m0[32u].z, fma(_954, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _950));
        float _1361 = _950 + _817;
        float _1362 = _954 + _818;
        float _1363 = _958 + _819;
        float _1373 = fma(_1363, cbModelParam._m0[30u].z, fma(_1362, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1361)) - _1330;
        float _1374 = fma(_1363, cbModelParam._m0[31u].z, fma(_1362, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1361)) - _1334;
        float _1375 = fma(_1363, cbModelParam._m0[32u].z, fma(_1362, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1361)) - _1338;
        float _1379 = inversesqrt(dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375)));
        float _1392 = ((_1379 * _1373) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1330 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1393 = ((_1379 * _1374) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1334 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1394 = ((_1379 * _1375) / cbModelParam._m0[35u].z) + ((((((_1338 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        float _1429 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1396.x + (-0.5));
        float _1431 = _1429 * (_1396.y + (-0.5));
        float _1432 = _1429 * (_1396.z + (-0.5));
        float _1439 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1403.x + (-0.5));
        float _1441 = _1439 * (_1403.y + (-0.5));
        float _1442 = _1439 * (_1403.z + (-0.5));
        float _1449 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1450 = _1449 * (_1410.x + (-0.5));
        float _1451 = _1449 * (_1410.y + (-0.5));
        float _1452 = _1449 * (_1410.z + (-0.5));
        float _1459 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1460 = _1459 * (_1417.x + (-0.5));
        float _1461 = _1459 * (_1417.y + (-0.5));
        float _1462 = _1459 * (_1417.z + (-0.5));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1465 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1466 = _1430 * 0.5;
        float _1467 = _1440 * 0.5;
        float _1468 = _1450 * 0.5;
        float _1469 = dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468));
        float _1474 = (_1469 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1469);
        float _1482 = (dot(vec3(_817, _818, _819), vec3(_1474 * _1466, _1474 * _1467, _1474 * _1468)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1491 = sqrt(((_1467 * _1467) + (_1466 * _1466)) + (_1468 * _1468)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1493 = _1492 * 2.0;
        float _1497 = (1.0 - _1492) / (_1492 + 1.0);
        float _4144 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1507 = ((((1.0 - _1498) * (_1493 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1493 + 1.0))) + _1498) * _1463;
        float _1508 = _1431 * 0.5;
        float _1509 = _1441 * 0.5;
        float _1510 = _1451 * 0.5;
        float _1511 = dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510));
        float _1516 = (_1511 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1511);
        float _1524 = (dot(vec3(_817, _818, _819), vec3(_1516 * _1508, _1516 * _1509, _1516 * _1510)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1533 = sqrt(((_1509 * _1509) + (_1508 * _1508)) + (_1510 * _1510)) / (_1464 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1535 = _1534 * 2.0;
        float _1539 = (1.0 - _1534) / (_1534 + 1.0);
        float _4177 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1549 = ((((1.0 - _1540) * (_1535 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1535 + 1.0))) + _1540) * _1464;
        float _1550 = _1432 * 0.5;
        float _1551 = _1442 * 0.5;
        float _1552 = _1452 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_817, _818, _819), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1465 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _4210 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1577 + 1.0))) + _1582) * _1465;
        _1599 = _1432;
        _1600 = _1431;
        _1601 = _1430;
        _1602 = _1442;
        _1603 = _1441;
        _1604 = _1440;
        _1605 = _1452;
        _1606 = _1451;
        _1607 = _1450;
        _1608 = _1465;
        _1609 = _1464;
        _1610 = _1463;
        _1611 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)));
        _1612 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)));
        _1613 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
    }
    else
    {
        _1599 = _1287;
        _1600 = _1287;
        _1601 = _1287;
        _1602 = _1287;
        _1603 = _1287;
        _1604 = _1287;
        _1605 = _1287;
        _1606 = _1287;
        _1607 = _1287;
        _1608 = _1287;
        _1609 = _1287;
        _1610 = _1287;
        _1611 = 0.0;
        _1612 = 0.0;
        _1613 = 0.0;
    }
    float _1623 = (cbModelParam._m0[1u].x * (_1611 - _1299)) + _1299;
    float _1624 = (cbModelParam._m0[1u].x * (_1612 - _1300)) + _1300;
    float _1625 = (cbModelParam._m0[1u].x * (_1613 - _1301)) + _1301;
    float _1646 = fma(_1625, cbSceneParam._m0[89u].z, fma(_1624, cbSceneParam._m0[89u].y, _1623 * cbSceneParam._m0[89u].x));
    float _1649 = fma(_1625, cbSceneParam._m0[90u].z, fma(_1624, cbSceneParam._m0[90u].y, _1623 * cbSceneParam._m0[90u].x));
    float _1652 = fma(_1625, cbSceneParam._m0[91u].z, fma(_1624, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1623));
    float _1667 = _891 * 0.5;
    float _1668 = _892 * 0.5;
    float _1669 = _893 * 0.5;
    float _1670 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1601, _1604, _1607, _1610));
    float _1673 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1600, _1603, _1606, _1609));
    float _1676 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1599, _1602, _1605, _1608));
    float _1710;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1683 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1286, _1290, _1293, _1296));
        float _1687 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1288, _1291, _1294, _1297));
        float _1691 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1289, _1292, _1295, _1298));
        float _1698 = dot(vec4(cbModelParam._m0[39u]), vec4(_1667, _1668, _1669, 1.0));
        _1710 = dot(vec3(isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1698) ? 0.0 : (isnan(0.0) ? _1698 : max(0.0, _1698))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1710 = 1.0;
    }
    float _1721;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1712 = dot(vec4(cbModelParam._m0[40u]), vec4(_1667, _1668, _1669, 1.0));
        _1721 = dot(vec3(isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)), isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1712) ? 0.0 : (isnan(0.0) ? _1712 : max(0.0, _1712))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1721 = 1.0;
    }
    float _1725 = (_1721 * cbModelParam._m0[1u].x) + (_1710 * (1.0 - cbModelParam._m0[1u].x));
    float _1735 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _697);
    float _1736 = isnan(_1735) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1735 : min(cbModelParam._m0[25u].z, _1735));
    float _1816;
    float _1818;
    float _1820;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1783 = fma(_958, cbModelParam._m0[13u].z, fma(_954, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _950)) + cbModelParam._m0[13u].w;
        float _1787 = fma(_958, cbModelParam._m0[14u].z, fma(_954, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _950)) + cbModelParam._m0[14u].w;
        float _1791 = fma(_958, cbModelParam._m0[15u].z, fma(_954, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _950)) + cbModelParam._m0[15u].w;
        float _1794 = fma(_893, cbModelParam._m0[13u].z, fma(_892, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _891));
        float _1797 = fma(_893, cbModelParam._m0[14u].z, fma(_892, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _891));
        float _1800 = fma(_893, cbModelParam._m0[15u].z, fma(_892, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _891));
        float _1828;
        if (_1794 > 0.0)
        {
            _1828 = abs((1.0 - _1783) / _1794);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1783 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1828 = frontier_phi_19_17_ladder;
        }
        float _2227;
        if (_1797 > 0.0)
        {
            _2227 = abs((1.0 - _1787) / _1797);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1787 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2227 = frontier_phi_28_24_ladder;
        }
        float _2638;
        if (_1800 > 0.0)
        {
            _2638 = abs((1.0 - _1791) / _1800);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_1791 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _2638 = frontier_phi_42_35_ladder;
        }
        float _2640 = isnan(_2227) ? _1828 : (isnan(_1828) ? _2227 : min(_1828, _2227));
        float _2641 = isnan(_2638) ? _2640 : (isnan(_2640) ? _2638 : min(_2640, _2638));
        float _2645 = (_2641 * _1794) + _1783;
        float _2646 = (_2641 * _1797) + _1787;
        float _2647 = (_2641 * _1800) + _1791;
        float _2648 = _2641 * 9.9999997473787516355514526367188e-05;
        float _2650 = (-1.0) - _2648;
        float _2652 = _2648 + 1.0;
        float frontier_phi_18_42_ladder;
        float frontier_phi_18_42_ladder_1;
        float frontier_phi_18_42_ladder_2;
        if ((_2647 > _2652) || ((_2647 < _2650) || ((_2646 > _2652) || ((_2646 < _2650) || ((_2645 < _2650) || (_2645 > _2652))))))
        {
            frontier_phi_18_42_ladder = 0.0;
            frontier_phi_18_42_ladder_1 = 0.0;
            frontier_phi_18_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2864 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2647, cbModelParam._m0[9u].z, fma(_2646, cbModelParam._m0[9u].y, _2645 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2647, cbModelParam._m0[10u].z, fma(_2646, cbModelParam._m0[10u].y, _2645 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2647, cbModelParam._m0[11u].z, fma(_2646, cbModelParam._m0[11u].y, _2645 * cbModelParam._m0[11u].x))), _1736);
            frontier_phi_18_42_ladder = _2864.z * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_1 = _2864.y * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_2 = _2864.x * cbModelParam._m0[1u].y;
        }
        _1816 = frontier_phi_18_42_ladder_2;
        _1818 = frontier_phi_18_42_ladder_1;
        _1820 = frontier_phi_18_42_ladder;
    }
    else
    {
        vec4 _1804 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_891, _892, _893), _1736);
        _1816 = _1804.x * cbModelParam._m0[1u].y;
        _1818 = _1804.y * cbModelParam._m0[1u].y;
        _1820 = _1804.z * cbModelParam._m0[1u].y;
    }
    float _1824 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _697);
    float _1825 = isnan(_1824) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1824 : min(cbModelParam._m0[25u].w, _1824));
    float _1914;
    float _1916;
    float _1918;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1878 = fma(_958, cbModelParam._m0[21u].z, fma(_954, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _950)) + cbModelParam._m0[21u].w;
        float _1882 = fma(_958, cbModelParam._m0[22u].z, fma(_954, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _950)) + cbModelParam._m0[22u].w;
        float _1886 = fma(_958, cbModelParam._m0[23u].z, fma(_954, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _950)) + cbModelParam._m0[23u].w;
        float _1889 = fma(_893, cbModelParam._m0[21u].z, fma(_892, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _891));
        float _1892 = fma(_893, cbModelParam._m0[22u].z, fma(_892, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _891));
        float _1895 = fma(_893, cbModelParam._m0[23u].z, fma(_892, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _891));
        float _2232;
        if (_1889 > 0.0)
        {
            _2232 = abs((1.0 - _1878) / _1889);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1878 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2232 = frontier_phi_30_26_ladder;
        }
        float _2665;
        if (_1892 > 0.0)
        {
            _2665 = abs((1.0 - _1882) / _1892);
        }
        else
        {
            float frontier_phi_44_37_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_44_37_ladder = abs((_1882 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_44_37_ladder = 5000.0;
            }
            _2665 = frontier_phi_44_37_ladder;
        }
        float _2941;
        if (_1895 > 0.0)
        {
            _2941 = abs((1.0 - _1886) / _1895);
        }
        else
        {
            float frontier_phi_61_53_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_61_53_ladder = abs((_1886 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_61_53_ladder = 5000.0;
            }
            _2941 = frontier_phi_61_53_ladder;
        }
        float _2943 = isnan(_2665) ? _2232 : (isnan(_2232) ? _2665 : min(_2232, _2665));
        float _2944 = isnan(_2941) ? _2943 : (isnan(_2943) ? _2941 : min(_2943, _2941));
        float _2948 = (_2944 * _1889) + _1878;
        float _2949 = (_2944 * _1892) + _1882;
        float _2950 = (_2944 * _1895) + _1886;
        float _2951 = _2944 * 9.9999997473787516355514526367188e-05;
        float _2952 = (-1.0) - _2951;
        float _2954 = _2951 + 1.0;
        float frontier_phi_27_61_ladder;
        float frontier_phi_27_61_ladder_1;
        float frontier_phi_27_61_ladder_2;
        if ((_2950 > _2954) || ((_2950 < _2952) || ((_2949 > _2954) || ((_2949 < _2952) || ((_2948 < _2952) || (_2948 > _2954))))))
        {
            frontier_phi_27_61_ladder = 0.0;
            frontier_phi_27_61_ladder_1 = 0.0;
            frontier_phi_27_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3226 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2950, cbModelParam._m0[17u].z, fma(_2949, cbModelParam._m0[17u].y, _2948 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2950, cbModelParam._m0[18u].z, fma(_2949, cbModelParam._m0[18u].y, _2948 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2950, cbModelParam._m0[19u].z, fma(_2949, cbModelParam._m0[19u].y, _2948 * cbModelParam._m0[19u].x))), _1825);
            frontier_phi_27_61_ladder = _3226.y * cbModelParam._m0[1u].z;
            frontier_phi_27_61_ladder_1 = _3226.z * cbModelParam._m0[1u].z;
            frontier_phi_27_61_ladder_2 = _3226.x * cbModelParam._m0[1u].z;
        }
        _1914 = frontier_phi_27_61_ladder_2;
        _1916 = frontier_phi_27_61_ladder;
        _1918 = frontier_phi_27_61_ladder_1;
    }
    else
    {
        vec4 _1898 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_891, _892, _893), _1825);
        _1914 = _1898.x * cbModelParam._m0[1u].z;
        _1916 = _1898.y * cbModelParam._m0[1u].z;
        _1918 = _1898.z * cbModelParam._m0[1u].z;
    }
    float _1930 = ((((1.0 - _919) * ((_907 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_919 * _907)) * _883;
    float _1931 = _1930 * ((cbModelParam._m0[1u].w * (_1914 - _1816)) + _1816);
    float _1932 = _1930 * ((cbModelParam._m0[1u].w * (_1916 - _1818)) + _1818);
    float _1933 = _1930 * ((cbModelParam._m0[1u].w * (_1918 - _1820)) + _1820);
    float _1936 = fma(_1933, cbSceneParam._m0[89u].z, fma(_1932, cbSceneParam._m0[89u].y, _1931 * cbSceneParam._m0[89u].x));
    float _1939 = fma(_1933, cbSceneParam._m0[90u].z, fma(_1932, cbSceneParam._m0[90u].y, _1931 * cbSceneParam._m0[90u].x));
    float _1942 = fma(_1933, cbSceneParam._m0[91u].z, fma(_1932, cbSceneParam._m0[91u].y, _1931 * cbSceneParam._m0[91u].x));
    float _1953 = _781 / cbSceneParam._m0[86u].x;
    float _1961 = (cbSceneParam._m0[88u].y * (1.0 - _697)) + cbSceneParam._m0[88u].z;
    float _4336 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1963 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * 5.0;
    float _1968 = (_906 * cbMtdParam._m0[11u].w) * dot(vec3(_817, _818, _819), vec3(1.0, 0.0, 0.0));
    vec4 _1978 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1968 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1968 + _1953) * cbSceneParam._m0[86u].x, _782), _1963).w) + _1953) * cbSceneParam._m0[86u].x, _782), _1963);
    float _1994 = 1.0 - _1978.w;
    uint _2001 = _858 + 5u;
    uvec4 _2004 = floatBitsToUint(cbInstanceData._m0[_2001]);
    uint _2006 = _2004.x * 14u;
    uint _2007 = _2006 + 13u;
    float _2012 = _883 + (-1.0);
    float _2015 = (cbLight._m0[_2007].x * _2012) + 1.0;
    float _2016 = (cbLight._m0[_2007].y * _2012) + 1.0;
    uint _2017 = _2006 + 5u;
    float _2023 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
    uint _2027 = _2006 + 4u;
    float _2034 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
    uint _2038 = _2006 | 1u;
    float _2049 = dot(vec3(cbLight._m0[_2006].xyz), vec3(_817, _818, _819));
    float _2052 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_817, _818, _819));
    float _4357 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _4368 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2057 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * 0.3183098733425140380859375;
    float _2059 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * 0.3183098733425140380859375;
    float _2066 = ((cbLight._m0[_2017].x * _2023) * _2059) + ((cbLight._m0[_2027].x * _2034) * _2057);
    float _2067 = ((_2023 * cbLight._m0[_2017].y) * _2059) + ((_2034 * cbLight._m0[_2027].y) * _2057);
    float _2068 = ((_2023 * cbLight._m0[_2017].z) * _2059) + ((_2034 * cbLight._m0[_2027].z) * _2057);
    uint _2070 = _2006 + 8u;
    float _2083 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2006].w)) * _697) * 0.949999988079071044921875);
    float _2084 = _2083 * _2083;
    float _2085 = cbLight._m0[_2006].x + _761;
    float _2086 = cbLight._m0[_2006].y + _762;
    float _2087 = cbLight._m0[_2006].z + _763;
    float _2091 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
    float _2092 = _2091 * _2085;
    float _2093 = _2091 * _2086;
    float _2094 = _2091 * _2087;
    float _2095 = dot(vec3(_817, _818, _819), vec3(cbLight._m0[_2006].xyz));
    float _4379 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2098 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _4390 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _2099 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
    float _2100 = dot(vec3(_817, _818, _819), vec3(_2092, _2093, _2094));
    float _4401 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2103 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    float _2104 = dot(vec3(cbLight._m0[_2006].xyz), vec3(_2092, _2093, _2094));
    float _4412 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2108 = _2084 * _2084;
    float _2112 = ((_2103 * _2103) * (_2108 + (-1.0))) + 1.0;
    float _2123 = (exp2(log2(1.0 - (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2124 = 1.0 - _2084;
    float _2135 = (0.5 / (((_2099 * ((_2098 * _2124) + _2084)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2124) + _2084) * _2098))) * _2098;
    float _4423 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2137 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2108 / ((_2112 * _2112) * 3.141590118408203125));
    uint _2148 = _2006 + 9u;
    float _2159 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2038].w)) * _697) * 0.949999988079071044921875);
    float _2160 = _2159 * _2159;
    float _2161 = cbLight._m0[_2038].x + _761;
    float _2162 = cbLight._m0[_2038].y + _762;
    float _2163 = cbLight._m0[_2038].z + _763;
    float _2167 = inversesqrt(dot(vec3(_2161, _2162, _2163), vec3(_2161, _2162, _2163)));
    float _2168 = _2167 * _2161;
    float _2169 = _2167 * _2162;
    float _2170 = _2167 * _2163;
    float _2171 = dot(vec3(_817, _818, _819), vec3(cbLight._m0[_2038].xyz));
    float _4434 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2174 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _2175 = dot(vec3(_817, _818, _819), vec3(_2168, _2169, _2170));
    float _4445 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2178 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
    float _2179 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_2168, _2169, _2170));
    float _4456 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2183 = _2160 * _2160;
    float _2187 = ((_2178 * _2178) * (_2183 + (-1.0))) + 1.0;
    float _2196 = (exp2(log2(1.0 - (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2197 = 1.0 - _2160;
    float _2207 = (0.5 / (((_2099 * ((_2174 * _2197) + _2160)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2197) + _2160) * _2174))) * _2174;
    float _4467 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2209 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2183 / ((_2187 * _2187) * 3.141590118408203125));
    float _2219 = (((_2196 * cbLight._m0[_2148].x) * _2209) * _2023) + (((_2123 * cbLight._m0[_2070].x) * _2137) * _2034);
    float _2220 = (((_2196 * cbLight._m0[_2148].y) * _2209) * _2023) + (((_2123 * cbLight._m0[_2070].y) * _2137) * _2034);
    float _2221 = (((_2196 * cbLight._m0[_2148].z) * _2209) * _2023) + (((_2123 * cbLight._m0[_2070].z) * _2137) * _2034);
    float _2335;
    float _2337;
    float _2339;
    float _2341;
    float _2343;
    float _2345;
    if (_2004.y == 0u)
    {
        float _2276 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2277 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2276;
        float _2278 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2276;
        float _2279 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2276;
        uvec4 _2291 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2292 = _2291.x;
        uint _2303 = uint((float(_2291.y) * floor(float(uint(cbSceneParam._m0[85u].y * _782) / _2292))) + floor(float(uint(cbSceneParam._m0[85u].x * _781) / _2292)));
        float _2313 = (log2(_2279 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2314 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        uint _2317 = uint(isnan(14.0) ? _2314 : (isnan(_2314) ? 14.0 : min(_2314, 14.0)));
        uvec4 _2322 = texelFetch(g_lightClusterGridBuffer, int(((_2317 << 2u) + (_2303 << 6u)) >> 2u));
        uint _2323 = _2322.x;
        uint _2324 = _2291.z;
        float _2462;
        float _2464;
        float _2466;
        float _2468;
        float _2470;
        float _2472;
        if (((((1u << ((_2324 >> 4u) & 15u)) + 4294967295u) & _2323) == 0u) || ((_2324 & 240u) == 0u))
        {
            _2462 = 0.0;
            _2464 = 0.0;
            _2466 = 0.0;
            _2468 = 0.0;
            _2470 = 0.0;
            _2472 = 0.0;
        }
        else
        {
            float _2463;
            float _2465;
            float _2467;
            float _2469;
            float _2471;
            float _2473;
            float _2702 = 0.0;
            float _2703 = 0.0;
            float _2704 = 0.0;
            float _2705 = 0.0;
            float _2706 = 0.0;
            float _2707 = 0.0;
            uint _2708 = 0u;
            uint _2717;
            bool _2718;
            for (;;)
            {
                _2717 = texelFetch(g_lightClassification, int((((_2317 << 5u) + (_2303 << 9u)) + (_2708 << 2u)) >> 2u)).x;
                _2718 = _2717 == 0u;
                float frontier_phi_55_pred;
                float frontier_phi_55_pred_1;
                float frontier_phi_55_pred_2;
                float frontier_phi_55_pred_3;
                float frontier_phi_55_pred_4;
                float frontier_phi_55_pred_5;
                if (_2718)
                {
                    frontier_phi_55_pred = _2706;
                    frontier_phi_55_pred_1 = _2707;
                    frontier_phi_55_pred_2 = _2705;
                    frontier_phi_55_pred_3 = _2704;
                    frontier_phi_55_pred_4 = _2703;
                    frontier_phi_55_pred_5 = _2702;
                }
                else
                {
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    uint _2990;
                    _2984 = _2702;
                    _2985 = _2703;
                    _2986 = _2704;
                    _2987 = _2705;
                    _2988 = _2706;
                    _2989 = _2707;
                    _2990 = _2717;
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    for (;;)
                    {
                        uint _2994 = uint(findLSB(_2990)) + (_2708 << 5u);
                        uint _2991 = (_2990 + 4294967295u) & _2990;
                        uint _2996 = _2994 * 48u;
                        vec4 _3010 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2996)).x, texelFetch(g_PointLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2996 + 3u)).x));
                        uint _3016 = (_2994 * 48u) + 4u;
                        vec4 _3029 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3016)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 3u)).x));
                        uint _3035 = (_2994 * 48u) + 8u;
                        vec3 _3046 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3035)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 2u)).x));
                        float _3050 = _3010.x - _2277;
                        float _3051 = _3010.y - _2278;
                        float _3052 = _3010.z - _2279;
                        float _3053 = dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052));
                        float _3056 = inversesqrt(_3053);
                        float _3057 = _3056 * _3050;
                        float _3058 = _3056 * _3051;
                        float _3059 = _3056 * _3052;
                        float _3060 = dot(vec3(_839, _842, _845), vec3(_3057, _3058, _3059));
                        float _3065 = 1.0 - (_3053 * _3010.w);
                        float _4488 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                        float _3066 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                        float _3067 = sqrt(_3053) * _3029.w;
                        float _3070 = 1.39999997615814208984375 / (_3067 + 1.39999997615814208984375);
                        float _3071 = _3070 * _3070;
                        float _3074 = ((1.0 - _3071) * _3060) + _3071;
                        float _3077 = _3067 * _3067;
                        float _3081 = ((isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0))) * _3066) / ((_3077 * 0.699999988079071044921875) + 1.0);
                        float _3085 = (-0.0) - _2277;
                        float _3086 = (-0.0) - _2278;
                        float _3087 = (-0.0) - _2279;
                        float _3091 = inversesqrt(dot(vec3(_3085, _3086, _3087), vec3(_3085, _3086, _3087)));
                        float _3092 = _3091 * _3085;
                        float _3093 = _3091 * _3086;
                        float _3094 = _3091 * _3087;
                        float _3102 = exp2(log2(1.0 / ((_3077 * 3.5) + 5.0)) * 0.25);
                        float _3103 = 1.0 - _907;
                        float _3110 = sqrt(1.0 - ((1.0 - (_3103 * _3103)) * (1.0 - (_3102 * _3102))));
                        float _3111 = _3110 * _3110;
                        float _3112 = _3111 * _3111;
                        float _3113 = _3092 + _3057;
                        float _3114 = _3093 + _3058;
                        float _3115 = _3094 + _3059;
                        float _3119 = inversesqrt(dot(vec3(_3113, _3114, _3115), vec3(_3113, _3114, _3115)));
                        float _3123 = dot(vec3(_839, _842, _845), vec3(_3092, _3093, _3094));
                        float _4504 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                        float _3126 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                        float _3127 = dot(vec3(_839, _842, _845), vec3(_3119 * _3113, _3119 * _3114, _3119 * _3115));
                        float _4515 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                        float _3130 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                        float _3134 = ((_3130 * _3130) * (_3112 + (-1.0))) + 1.0;
                        float _3135 = _3070 * _3111;
                        float _3136 = _3135 * _3135;
                        float _3139 = ((1.0 - _3136) * _3060) + _3136;
                        float _4526 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3140 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                        float _3141 = 1.0 - _3111;
                        float _3151 = (0.5 / (((_3140 * ((_3126 * _3141) + _3111)) + 9.9999999392252902907785028219223e-09) + (((_3140 * _3141) + _3111) * _3126))) * _3140;
                        float _4537 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3162 = (((_3112 * 3.1415927410125732421875) * (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0)))) / ((_3134 * _3134) * ((_3077 * 2.1991131305694580078125) + 3.141590118408203125))) * _3066;
                        _2876 = (_3081 * _3029.x) + _2987;
                        _2877 = (_3081 * _3029.y) + _2988;
                        _2878 = (_3081 * _3029.z) + _2989;
                        _2873 = (_3162 * _3046.x) + _2984;
                        _2874 = (_3162 * _3046.y) + _2985;
                        _2875 = (_3162 * _3046.z) + _2986;
                        if (_2991 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2984 = _2873;
                            _2985 = _2874;
                            _2986 = _2875;
                            _2987 = _2876;
                            _2988 = _2877;
                            _2989 = _2878;
                            _2990 = _2991;
                        }
                    }
                    frontier_phi_55_pred = _2877;
                    frontier_phi_55_pred_1 = _2878;
                    frontier_phi_55_pred_2 = _2876;
                    frontier_phi_55_pred_3 = _2875;
                    frontier_phi_55_pred_4 = _2874;
                    frontier_phi_55_pred_5 = _2873;
                }
                _2471 = frontier_phi_55_pred;
                _2473 = frontier_phi_55_pred_1;
                _2469 = frontier_phi_55_pred_2;
                _2467 = frontier_phi_55_pred_3;
                _2465 = frontier_phi_55_pred_4;
                _2463 = frontier_phi_55_pred_5;
                uint _2709 = _2708 + 1u;
                if (_2709 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2702 = _2463;
                    _2703 = _2465;
                    _2704 = _2467;
                    _2705 = _2469;
                    _2706 = _2471;
                    _2707 = _2473;
                    _2708 = _2709;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2462 = _2463;
            _2464 = _2465;
            _2466 = _2467;
            _2468 = _2469;
            _2470 = _2471;
            _2472 = _2473;
        }
        uvec4 _2476 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2477 = _2476.z;
        uint _2479 = (_2477 >> 8u) & 15u;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        float _2680;
        if (((4294967295u << _2479) & _2323) == 0u)
        {
            _2670 = _2462;
            _2672 = _2464;
            _2674 = _2466;
            _2676 = _2468;
            _2678 = _2470;
            _2680 = _2472;
        }
        else
        {
            float _2695 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
            float _2696 = _2695 * _2277;
            float _2697 = _2695 * _2278;
            float _2698 = _2695 * _2279;
            float frontier_phi_46_47_ladder;
            float frontier_phi_46_47_ladder_1;
            float frontier_phi_46_47_ladder_2;
            float frontier_phi_46_47_ladder_3;
            float frontier_phi_46_47_ladder_4;
            float frontier_phi_46_47_ladder_5;
            if (_2479 < ((_2477 >> 12u) & 15u))
            {
                float _2671;
                float _2673;
                float _2675;
                float _2677;
                float _2679;
                float _2681;
                float _2967 = _2462;
                float _2968 = _2464;
                float _2969 = _2466;
                float _2970 = _2468;
                float _2971 = _2470;
                float _2972 = _2472;
                uint _2973 = _2479;
                uint _2982;
                bool _2983;
                for (;;)
                {
                    _2982 = texelFetch(g_lightClassification, int((((_2317 << 5u) + (_2303 << 9u)) + (_2973 << 2u)) >> 2u)).x;
                    _2983 = _2982 == 0u;
                    float frontier_phi_70_pred;
                    float frontier_phi_70_pred_1;
                    float frontier_phi_70_pred_2;
                    float frontier_phi_70_pred_3;
                    float frontier_phi_70_pred_4;
                    float frontier_phi_70_pred_5;
                    if (_2983)
                    {
                        frontier_phi_70_pred = _2967;
                        frontier_phi_70_pred_1 = _2972;
                        frontier_phi_70_pred_2 = _2971;
                        frontier_phi_70_pred_3 = _2970;
                        frontier_phi_70_pred_4 = _2969;
                        frontier_phi_70_pred_5 = _2968;
                    }
                    else
                    {
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3253 = _2967;
                        float _3254 = _2968;
                        float _3255 = _2969;
                        float _3256 = _2970;
                        float _3257 = _2971;
                        float _3258 = _2972;
                        uint _3259 = _2982;
                        uint _3260;
                        vec4 _3285;
                        float _3286;
                        vec4 _3301;
                        vec3 _3313;
                        vec4 _3328;
                        vec4 _3343;
                        float _3389;
                        bool _3390;
                        for (;;)
                        {
                            uint _3270 = ((_2973 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3259));
                            _3260 = (_3259 + 4294967295u) & _3259;
                            uint _3272 = _3270 * 40u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            _3286 = _3285.w;
                            uint _3288 = (_3270 * 40u) + 4u;
                            _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3303 = (_3270 * 40u) + 8u;
                            _3313 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x));
                            uint _3315 = (_3270 * 40u) + 16u;
                            _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            uint _3330 = (_3270 * 40u) + 20u;
                            _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            uint _3345 = (_3270 * 40u) + 24u;
                            vec4 _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            uint _3364 = (_3270 * 40u) + 28u;
                            vec4 _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            _3389 = fma(_2279, _3377.z, fma(_2278, _3377.y, _3377.x * _2277)) + _3377.w;
                            _3390 = !((fma(_2279, _3358.z, fma(_2278, _3358.y, _3358.x * _2277)) + _3358.w) <= 0.0);
                            float frontier_phi_79_pred;
                            float frontier_phi_79_pred_1;
                            float frontier_phi_79_pred_2;
                            float frontier_phi_79_pred_3;
                            float frontier_phi_79_pred_4;
                            float frontier_phi_79_pred_5;
                            if (_3390)
                            {
                                float _3417 = _3285.x - _2277;
                                float _3418 = _3285.y - _2278;
                                float _3419 = _3285.z - _2279;
                                float _3420 = dot(vec3(_3417, _3418, _3419), vec3(_3417, _3418, _3419));
                                float _3423 = inversesqrt(_3420);
                                float _3424 = _3423 * _3417;
                                float _3425 = _3423 * _3418;
                                float _3426 = _3423 * _3419;
                                float _3430 = 1.0 - (_3420 / (_3286 * _3286));
                                float _4548 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3431 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                                float _3435 = sqrt(_3420) * _3301.w;
                                float _3437 = 1.39999997615814208984375 / (_3435 + 1.39999997615814208984375);
                                float _3438 = _3437 * _3437;
                                float _3441 = ((1.0 - _3438) * dot(vec3(_3424, _3425, _3426), vec3(_839, _842, _845))) + _3438;
                                float _3444 = _3435 * _3435;
                                float _3448 = (fma(_2279, _3328.z, fma(_2278, _3328.y, _3328.x * _2277)) + _3328.w) / _3389;
                                float _3449 = (fma(_2279, _3343.z, fma(_2278, _3343.y, _3343.x * _2277)) + _3343.w) / _3389;
                                float _3453 = 1.0 - dot(vec2(_3448, _3449), vec2(_3448, _3449));
                                float _4564 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3454 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                                float _3455 = _3454 * (((isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0))) * _3431) / ((_3444 * 0.699999988079071044921875) + 1.0));
                                float _3467 = exp2(log2(1.0 / ((_3444 * 3.5) + 5.0)) * 0.25);
                                float _3468 = 1.0 - _907;
                                float _3475 = sqrt(1.0 - ((1.0 - (_3468 * _3468)) * (1.0 - (_3467 * _3467))));
                                float _3476 = _3475 * _3475;
                                float _3477 = _3476 * _3476;
                                float _3478 = _3424 - _2696;
                                float _3479 = _3425 - _2697;
                                float _3480 = _3426 - _2698;
                                float _3484 = inversesqrt(dot(vec3(_3478, _3479, _3480), vec3(_3478, _3479, _3480)));
                                float _3488 = dot(vec3(_839, _842, _845), vec3((-0.0) - _2696, (-0.0) - _2697, (-0.0) - _2698));
                                float _4575 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3491 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                                float _3492 = dot(vec3(_839, _842, _845), vec3(_3484 * _3478, _3484 * _3479, _3484 * _3480));
                                float _4586 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3495 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                                float _3499 = ((_3495 * _3495) * (_3477 + (-1.0))) + 1.0;
                                float _3500 = _3437 * _3476;
                                float _3501 = _3500 * _3500;
                                float _3507 = ((1.0 - _3501) * dot(vec3(_839, _842, _845), vec3(_3424, _3425, _3426))) + _3501;
                                float _4597 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3508 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                                float _3509 = 1.0 - _3476;
                                float _3519 = (0.5 / (((_3508 * ((_3491 * _3509) + _3476)) + 9.9999999392252902907785028219223e-09) + (((_3508 * _3509) + _3476) * _3491))) * _3508;
                                float _4608 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3529 = (_3454 * _3431) * (((_3477 * 3.1415927410125732421875) * (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) / ((_3499 * _3499) * ((_3444 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_79_pred = _3529 * _3313.z;
                                frontier_phi_79_pred_1 = _3455 * _3301.z;
                                frontier_phi_79_pred_2 = _3455 * _3301.y;
                                frontier_phi_79_pred_3 = _3455 * _3301.x;
                                frontier_phi_79_pred_4 = _3529 * _3313.y;
                                frontier_phi_79_pred_5 = _3529 * _3313.x;
                            }
                            else
                            {
                                frontier_phi_79_pred = 0.0;
                                frontier_phi_79_pred_1 = 0.0;
                                frontier_phi_79_pred_2 = 0.0;
                                frontier_phi_79_pred_3 = 0.0;
                                frontier_phi_79_pred_4 = 0.0;
                                frontier_phi_79_pred_5 = 0.0;
                            }
                            _3535 = frontier_phi_79_pred;
                            _3538 = frontier_phi_79_pred_1;
                            _3537 = frontier_phi_79_pred_2;
                            _3536 = frontier_phi_79_pred_3;
                            _3534 = frontier_phi_79_pred_4;
                            _3533 = frontier_phi_79_pred_5;
                            _3234 = _3536 + _3256;
                            _3235 = _3537 + _3257;
                            _3236 = _3538 + _3258;
                            _3231 = _3533 + _3253;
                            _3232 = _3534 + _3254;
                            _3233 = _3535 + _3255;
                            if (_3260 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3253 = _3231;
                                _3254 = _3232;
                                _3255 = _3233;
                                _3256 = _3234;
                                _3257 = _3235;
                                _3258 = _3236;
                                _3259 = _3260;
                                continue;
                            }
                        }
                        frontier_phi_70_pred = _3231;
                        frontier_phi_70_pred_1 = _3236;
                        frontier_phi_70_pred_2 = _3235;
                        frontier_phi_70_pred_3 = _3234;
                        frontier_phi_70_pred_4 = _3233;
                        frontier_phi_70_pred_5 = _3232;
                    }
                    _2671 = frontier_phi_70_pred;
                    _2681 = frontier_phi_70_pred_1;
                    _2679 = frontier_phi_70_pred_2;
                    _2677 = frontier_phi_70_pred_3;
                    _2675 = frontier_phi_70_pred_4;
                    _2673 = frontier_phi_70_pred_5;
                    uint _2974 = _2973 + 1u;
                    if (_2974 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2967 = _2671;
                        _2968 = _2673;
                        _2969 = _2675;
                        _2970 = _2677;
                        _2971 = _2679;
                        _2972 = _2681;
                        _2973 = _2974;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_46_47_ladder = _2675;
                frontier_phi_46_47_ladder_1 = _2677;
                frontier_phi_46_47_ladder_2 = _2679;
                frontier_phi_46_47_ladder_3 = _2681;
                frontier_phi_46_47_ladder_4 = _2673;
                frontier_phi_46_47_ladder_5 = _2671;
            }
            else
            {
                frontier_phi_46_47_ladder = _2466;
                frontier_phi_46_47_ladder_1 = _2468;
                frontier_phi_46_47_ladder_2 = _2470;
                frontier_phi_46_47_ladder_3 = _2472;
                frontier_phi_46_47_ladder_4 = _2464;
                frontier_phi_46_47_ladder_5 = _2462;
            }
            _2670 = frontier_phi_46_47_ladder_5;
            _2672 = frontier_phi_46_47_ladder_4;
            _2674 = frontier_phi_46_47_ladder;
            _2676 = frontier_phi_46_47_ladder_1;
            _2678 = frontier_phi_46_47_ladder_2;
            _2680 = frontier_phi_46_47_ladder_3;
        }
        float _2685 = isnan(1.0) ? _883 : (isnan(_883) ? 1.0 : min(_883, 1.0));
        _2335 = (_2685 * _2676) + _2066;
        _2337 = (_2685 * _2678) + _2067;
        _2339 = (_2685 * _2680) + _2068;
        _2341 = ((_2670 * 0.039999999105930328369140625) * _2685) + _2219;
        _2343 = ((_2672 * 0.039999999105930328369140625) * _2685) + _2220;
        _2345 = ((_2674 * 0.039999999105930328369140625) * _2685) + _2221;
    }
    else
    {
        _2335 = _2066;
        _2337 = _2067;
        _2339 = _2068;
        _2341 = _2219;
        _2343 = _2220;
        _2345 = _2221;
    }
    float _2359 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2360 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2361 = cbSceneParam._m0[86u].x * (_1953 + ((_906 * cbMtdParam._m0[11u].y) * dot(vec3(_817, _818, _819), vec3(_219, _220, _221))));
    float _2362 = isnan(_2359) ? _2361 : (isnan(_2361) ? _2359 : min(_2361, _2359));
    float _2363 = isnan(_2360) ? _782 : (isnan(_782) ? _2360 : min(_782, _2360));
    vec4 _2365 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2362, _2363), 0.0);
    float _2367 = _2365.x;
    bool _2387 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2367)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2367))) > _705;
    float _2388 = _2387 ? _2362 : _781;
    float _2389 = _2387 ? _2363 : _782;
    vec4 _2391 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2388, _2389));
    vec4 _2396 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2388, _2389));
    float _2398 = _2396.x;
    bool _2403 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _2412 = (-0.0) - cbSceneParam._m0[2u].z;
    float _2418 = (_2403 ? (_2412 / (cbSceneParam._m0[2u].x - _2398)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2398))) - _705;
    float _2420 = cbMtdParam._m0[24u].y + cbMtdParam._m0[22u].w;
    float _2421 = cbMtdParam._m0[24u].z + cbMtdParam._m0[23u].x;
    float _2422 = cbMtdParam._m0[24u].w + cbMtdParam._m0[23u].y;
    bool _2428 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2432 = (isnan(_2418) ? 0.0 : (isnan(0.0) ? _2418 : max(0.0, _2418))) * (-1.44269502162933349609375);
    float _4639 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _4650 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _4661 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _2565;
    float _2566;
    float _2567;
    if ((1.0 - _667) > 0.00999999977648258209228515625)
    {
        vec4 _2484 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2388, _2389), 0.0);
        float _2486 = _2484.x;
        float _2492 = (_2403 ? (_2412 / (cbSceneParam._m0[2u].x - _2486)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2486))) - _705;
        uint _2498 = floatBitsToUint(cbInstanceData._m0[_2001]).x * 14u;
        uint _2504 = _2498 + 4u;
        float _2513 = dot(vec3(cbLight._m0[_2498].xyz), vec3(_240, _241, _242));
        float _2521 = dot(vec3((-0.0) - _761, (-0.0) - _762, (-0.0) - _763), vec3((-0.0) - _240, (-0.0) - _241, (-0.0) - _242));
        float _2526 = ((isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0))) / (isnan(0.001000000047497451305389404296875) ? _2513 : (isnan(_2513) ? 0.001000000047497451305389404296875 : max(_2513, 0.001000000047497451305389404296875)))) + 1.0;
        float _2528 = (-0.0) - ((isnan(_2492) ? 0.0 : (isnan(0.0) ? _2492 : max(0.0, _2492))) * _2526);
        _2565 = _2428 ? 0.0 : ((((cbMtdParam._m0[22u].w * 0.079577468335628509521484375) * cbLight._m0[_2504].x) / ((_2526 * _2420) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2420 * 1.44269502162933349609375) * _2528)));
        _2566 = _2428 ? 0.0 : ((((cbMtdParam._m0[23u].x * 0.079577468335628509521484375) * cbLight._m0[_2504].y) / ((_2526 * _2421) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2421 * 1.44269502162933349609375) * _2528)));
        _2567 = _2428 ? 0.0 : ((((cbMtdParam._m0[23u].y * 0.079577468335628509521484375) * cbLight._m0[_2504].z) / ((_2526 * _2422) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2422 * 1.44269502162933349609375) * _2528)));
    }
    else
    {
        _2565 = 0.0;
        _2566 = 0.0;
        _2567 = 0.0;
    }
    float _2584 = 0.959999978542327880859375 - (exp2(log2(1.0 - _898) * 5.0) * 0.959999978542327880859375);
    float _2585 = (_2565 + ((exp2(_2432 * (_2428 ? 0.0 : _2420)) * _2391.x) * cbSceneParam._m0[72u].w)) * _2584;
    float _2586 = (_2566 + ((exp2(_2432 * (_2428 ? 0.0 : _2421)) * _2391.y) * cbSceneParam._m0[72u].w)) * _2584;
    float _2587 = (_2567 + ((exp2(_2432 * (_2428 ? 0.0 : _2422)) * _2391.z) * cbSceneParam._m0[72u].w)) * _2584;
    float _2595 = (_2585 + (((((_1930 * _1978.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))) * _1725) * _1994)) + _2341) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2335 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _883))) - _2585) * _667);
    float _2597 = (_2586 + (((((_1930 * _1978.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0))) * _1725) * _1994)) + _2343) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * (_2337 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _883))) - _2586) * _667);
    float _2599 = (_2587 + (((((_1930 * _1978.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0))) * _1725) * _1994)) + _2345) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * (_2339 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _883))) - _2587) * _667);
    float _2604 = cbInstanceData._m0[_858 + 6u].w * (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)));
    float _2609 = _781 / cbSceneParam._m0[86u].x;
    float _2610 = _782 / cbSceneParam._m0[86u].y;
    vec4 _2624 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2609, _2610, (log2((isnan(cbSceneParam._m0[77u].w) ? _705 : (isnan(_705) ? cbSceneParam._m0[77u].w : min(_705, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2626 = _2624.x;
    float _2627 = _2624.y;
    float _2628 = _2624.z;
    float _2629 = _2624.w;
    float _2758;
    float _2760;
    float _2762;
    float _2764;
    if (_705 > cbSceneParam._m0[78u].w)
    {
        float _2723 = isnan(_705) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _705 : min(cbSceneParam._m0[80u].w, _705));
        float _2724 = _2723 / _705;
        float _2735 = _2724 * _754;
        float _2736 = _755 * _2724;
        float _2737 = (-0.0) - _2736;
        float _2738 = _2724 * _756;
        float _2740 = (cbSceneParam._m0[77u].w * _2737) / _2723;
        float _2741 = _2740 + cbSceneParam._m0[79u].w;
        float _2742 = cbSceneParam._m0[79u].w - _2736;
        float _2748 = sqrt(((_2735 * _2735) + (_2736 * _2736)) + (_2738 * _2738));
        float _2751 = (1.0 - (cbSceneParam._m0[77u].w / _2723)) * _2748;
        float _2756 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2757 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3167;
        if (abs((_2737 - _2740) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3167 = ((((_2741 > 0.0) ? exp2(_2756 * _2741) : (2.0 - exp2(_2757 * _2741))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2751;
        }
        else
        {
            float _2898 = 1.0 / cbSceneParam._m0[80u].x;
            float _2899 = isnan(_2742) ? _2741 : (isnan(_2741) ? _2742 : max(_2741, _2742));
            float _2900 = isnan(_2742) ? _2741 : (isnan(_2741) ? _2742 : min(_2741, _2742));
            float _2909 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : min(_2899, 0.0));
            float _2910 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : min(_2900, 0.0));
            _3167 = ((abs(_2748 / _2737) * cbSceneParam._m0[80u].y) * ((((_2909 - _2910) * 2.0) - ((exp2(_2756 * (isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0)))) - exp2(_2756 * (isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0))))) * _2898)) - ((exp2(_2757 * _2909) - exp2(_2757 * _2910)) * _2898))) + (_2751 * cbSceneParam._m0[80u].z);
        }
        vec4 _3169 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2609, _2610, 1.0), 0.0);
        float _3178 = exp2((_3167 * (-1.44269502162933349609375)) * (1.0 - _3169.w));
        float _3179 = log2(_3178);
        float _3195 = log2(_2629);
        _2758 = (exp2(_3195 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3179 * cbSceneParam._m0[78u].x)) * _3169.x) / cbSceneParam._m0[78u].x)) + _2626;
        _2760 = (exp2(_3195 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3179 * cbSceneParam._m0[78u].y)) * _3169.y) / cbSceneParam._m0[78u].y)) + _2627;
        _2762 = (exp2(_3195 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3179 * cbSceneParam._m0[78u].z)) * _3169.z) / cbSceneParam._m0[78u].z)) + _2628;
        _2764 = _3178 * _2629;
    }
    else
    {
        _2758 = _2626;
        _2760 = _2627;
        _2762 = _2628;
        _2764 = _2629;
    }
    bool _3205;
    float _2819;
    vec4 _2822;
    float _2824;
    vec4 _2826;
    float _2834;
    float _2835;
    float _2836;
    float _2837;
    bool _2847;
    for (;;)
    {
        bool _2776 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2777 = log2(_2764);
        float _2784 = exp2(_2777 * cbSceneParam._m0[78u].x) * _2595;
        float _2785 = exp2(_2777 * cbSceneParam._m0[78u].y) * _2597;
        float _2786 = exp2(_2777 * cbSceneParam._m0[78u].z) * _2599;
        vec4 _2794 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_781, _782));
        float _2796 = _2794.x;
        float _2817 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2796)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2796))) - _705) * 3.0;
        float _4727 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        _2819 = _2604 * (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0)));
        float _2820 = _770 + (-0.5);
        _2822 = cbMtdParam._m0[1u];
        _2824 = _2822.y * _2820;
        _2826 = cbMatDynParam._m0[0u];
        float _2833 = (roundEven(_2826.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2834 = _2833 * (_2776 ? _2784 : (_2784 + (cbSceneParam._m0[72u].w * _2758)));
        _2835 = _2833 * (_2776 ? _2785 : (_2785 + (cbSceneParam._m0[72u].w * _2760)));
        _2836 = _2833 * (_2776 ? _2786 : (_2786 + (cbSceneParam._m0[72u].w * _2762)));
        _2837 = _2820 * 0.999000012874603271484375;
        _2847 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2847)
        {
            if ((cbInstanceData._m0[_858 + 7u].x + _2837) < 0.5)
            {
                _3205 = true;
                break;
            }
        }
        uint _2933 = _859 + uint(_2826.w);
        if ((cbInstanceData._m0[_2933].w < 1.0) && ((cbInstanceData._m0[_2933].w + _2837) < 0.5))
        {
            _3205 = true;
            break;
        }
        if ((_2824 + 1.0) < _2822.x)
        {
            _3205 = true;
            break;
        }
        _3205 = false;
        break;
    }
    float _3244;
    if (_3205)
    {
        discard_state = true;
        _3244 = 0.0;
    }
    else
    {
        _3244 = _2819;
    }
    SV_Target.x = _2834;
    SV_Target.y = _2835;
    SV_Target.z = _2836;
    SV_Target.w = _3244;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2819;
    discard_exit();
}


