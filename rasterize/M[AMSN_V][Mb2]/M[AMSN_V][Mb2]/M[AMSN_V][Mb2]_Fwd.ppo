#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[20];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 5, component = 1) in float TEXCOORD_5;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _929;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _243 = texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_5) + cbTextureTilingScale._m0[1u].w));
    float _249 = _243.x * cbMatDynParam._m0[17u].x;
    float _250 = _243.y * cbMatDynParam._m0[17u].y;
    float _251 = _243.z * cbMatDynParam._m0[17u].z;
    vec4 _270 = texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_5) + cbTextureTilingScale._m0[4u].w));
    float _303 = (TEXCOORD_7.x - ((cbMatDynParam._m0[19u].x * (1.0 - TEXCOORD_7.x)) * (texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbMatDynParam._m0[19u].z * TEXCOORD_4) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMatDynParam._m0[19u].z * TEXCOORD_5) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMatDynParam._m0[19u].y * TEXCOORD.w) + 1.0);
    float _3265 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _304 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
    float _311 = (_304 * ((_270.x * cbMatDynParam._m0[18u].x) - _249)) + _249;
    float _312 = (_304 * ((_270.y * cbMatDynParam._m0[18u].y) - _250)) + _250;
    float _313 = (_304 * ((_270.z * cbMatDynParam._m0[18u].z) - _251)) + _251;
    vec4 _326 = texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_5) + cbTextureTilingScale._m0[2u].w));
    float _328 = _326.x;
    float _329 = _326.y;
    float _330 = _326.z;
    vec4 _342 = texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_5) + cbTextureTilingScale._m0[3u].w));
    float _355 = ((_342.z - _330) * _304) + _330;
    float _359 = ((((_342.x - _328) * _304) + _328) * 2.0) + (-1.0);
    float _361 = ((((_342.y - _329) * _304) + _329) * 2.0) + (-1.0);
    float _362 = dot(vec2(_359, _361), vec2(_359, _361));
    float _3276 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _367 = sqrt(1.0 - (isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0))));
    float _370 = fma(_367, _215, fma(_361, _207 * TANGENT.x, (_193 * _185) * _359));
    float _373 = fma(_367, _216, fma(_361, _207 * TANGENT.y, (_193 * _186) * _359));
    float _376 = fma(_367, _217, fma(_361, _207 * TANGENT.z, (_193 * _187) * _359));
    float _380 = inversesqrt(dot(vec3(_370, _373, _376), vec3(_370, _373, _376)));
    float _381 = _380 * _370;
    float _382 = _380 * _373;
    float _383 = _380 * _376;
    float _3287 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _384 = isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0));
    float _3298 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3309 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3320 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3331 = isnan(0.0) ? cbMatDynParam._m0[19u].w : (isnan(cbMatDynParam._m0[19u].w) ? 0.0 : max(cbMatDynParam._m0[19u].w, 0.0));
    float _388 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    float _404 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _447 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _457 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _447);
    float _458 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _447);
    float _459 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _447);
    float _463 = inversesqrt(dot(vec3(_457, _458, _459), vec3(_457, _458, _459)));
    float _464 = _457 * _463;
    float _465 = _458 * _463;
    float _466 = _459 * _463;
    float _472 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _473 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _494 = fma(_383, cbSceneParam._m0[5u].z, fma(_382, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _381));
    float _497 = fma(_383, cbSceneParam._m0[6u].z, fma(_382, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _381));
    float _500 = fma(_383, cbSceneParam._m0[7u].z, fma(_382, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _381));
    uint _513 = uint(roundEven(NORMAL.w)) * 13u;
    uint _516 = (_513 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _522 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0)))) * cbInstanceData._m0[_516].x;
    float _523 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0)))) * cbInstanceData._m0[_516].y;
    float _524 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0)))) * cbInstanceData._m0[_516].z;
    float _3342 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _525 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
    float _3353 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _526 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
    float _3364 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _527 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
    float _528 = 1.0 - _388;
    float _529 = _525 * _528;
    float _530 = _526 * _528;
    float _531 = _527 * _528;
    float _536 = (_525 + (-0.039999999105930328369140625)) * _388;
    float _537 = (_526 + (-0.039999999105930328369140625)) * _388;
    float _538 = (_527 + (-0.039999999105930328369140625)) * _388;
    float _539 = _536 + 0.039999999105930328369140625;
    float _541 = _537 + 0.039999999105930328369140625;
    float _542 = _538 + 0.039999999105930328369140625;
    vec4 _551 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _472, cbSceneParam._m0[86u].y * _473));
    float _554 = _551.x * TEXCOORD_7.w;
    float _555 = dot(vec3(_381, _382, _383), vec3(_464, _465, _466));
    float _558 = _555 * 2.0;
    float _562 = (_558 * _381) - _464;
    float _563 = (_558 * _382) - _465;
    float _564 = (_558 * _383) - _466;
    float _568 = abs(dot(vec3(_464, _465, _466), vec3(_381, _382, _383)));
    float _3375 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _570 = sqrt(_384);
    float _583 = exp2((_570 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_570 * 3.0));
    float _589 = (1.0 - _583) * ((_570 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _590 = _583 * _570;
    float _618 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _622 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _626 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _928;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _653 = fma(_626, cbModelParam._m0[26u].z, fma(_622, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _618));
        float _657 = fma(_626, cbModelParam._m0[27u].z, fma(_622, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _618));
        float _661 = fma(_626, cbModelParam._m0[28u].z, fma(_622, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _618));
        float _686 = _618 + _381;
        float _687 = _622 + _382;
        float _688 = _626 + _383;
        float _698 = fma(_688, cbModelParam._m0[26u].z, fma(_687, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _686)) - _653;
        float _699 = fma(_688, cbModelParam._m0[27u].z, fma(_687, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _686)) - _657;
        float _700 = fma(_688, cbModelParam._m0[28u].z, fma(_687, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _686)) - _661;
        float _704 = inversesqrt(dot(vec3(_698, _699, _700), vec3(_698, _699, _700)));
        float _717 = ((_704 * _698) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_653 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _718 = ((_704 * _699) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_657 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _719 = ((_704 * _700) / cbModelParam._m0[34u].z) + ((((((_661 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _722 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_717, _718, _719), 0.0);
        vec4 _729 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_717, _718, _719), 0.0);
        vec4 _736 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_717, _718, _719), 0.0);
        vec4 _743 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_717, _718, _719), 0.0);
        float _756 = exp2((_722.w + (-0.5)) * 20.0) * 2.0;
        float _757 = _756 * (_722.x + (-0.5));
        float _758 = _756 * (_722.y + (-0.5));
        float _759 = _756 * (_722.z + (-0.5));
        float _766 = exp2((_729.w + (-0.5)) * 20.0) * 2.0;
        float _767 = _766 * (_729.x + (-0.5));
        float _768 = _766 * (_729.y + (-0.5));
        float _769 = _766 * (_729.z + (-0.5));
        float _776 = exp2((_736.w + (-0.5)) * 20.0) * 2.0;
        float _777 = _776 * (_736.x + (-0.5));
        float _778 = _776 * (_736.y + (-0.5));
        float _779 = _776 * (_736.z + (-0.5));
        float _786 = exp2((_743.w + (-0.5)) * 20.0) * 2.0;
        float _787 = _786 * (_743.x + (-0.5));
        float _788 = _786 * (_743.y + (-0.5));
        float _789 = _786 * (_743.z + (-0.5));
        float _790 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _791 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _792 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _793 = _757 * 0.5;
        float _794 = _767 * 0.5;
        float _795 = _777 * 0.5;
        float _796 = dot(vec3(_793, _794, _795), vec3(_793, _794, _795));
        float _801 = (_796 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_796);
        float _810 = (dot(vec3(_381, _382, _383), vec3(_801 * _793, _801 * _794, _801 * _795)) + 1.0) * 0.5;
        float _3401 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _820 = sqrt(((_794 * _794) + (_793 * _793)) + (_795 * _795)) / (_790 + 9.9999997473787516355514526367188e-06);
        float _3412 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _822 = _821 * 2.0;
        float _826 = (1.0 - _821) / (_821 + 1.0);
        float _3423 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _836 = ((((1.0 - _827) * (_822 + 2.0)) * exp2(log2(isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * (_822 + 1.0))) + _827) * _790;
        float _837 = _758 * 0.5;
        float _838 = _768 * 0.5;
        float _839 = _778 * 0.5;
        float _840 = dot(vec3(_837, _838, _839), vec3(_837, _838, _839));
        float _845 = (_840 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_840);
        float _853 = (dot(vec3(_381, _382, _383), vec3(_845 * _837, _845 * _838, _845 * _839)) + 1.0) * 0.5;
        float _3434 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _862 = sqrt(((_838 * _838) + (_837 * _837)) + (_839 * _839)) / (_791 + 9.9999997473787516355514526367188e-06);
        float _3445 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _864 = _863 * 2.0;
        float _868 = (1.0 - _863) / (_863 + 1.0);
        float _3456 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _878 = ((((1.0 - _869) * (_864 + 2.0)) * exp2(log2(isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * (_864 + 1.0))) + _869) * _791;
        float _879 = _759 * 0.5;
        float _880 = _769 * 0.5;
        float _881 = _779 * 0.5;
        float _882 = dot(vec3(_879, _880, _881), vec3(_879, _880, _881));
        float _887 = (_882 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_882);
        float _895 = (dot(vec3(_381, _382, _383), vec3(_887 * _879, _887 * _880, _887 * _881)) + 1.0) * 0.5;
        float _3467 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _904 = sqrt(((_880 * _880) + (_879 * _879)) + (_881 * _881)) / (_792 + 9.9999997473787516355514526367188e-06);
        float _3478 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _906 = _905 * 2.0;
        float _910 = (1.0 - _905) / (_905 + 1.0);
        float _3489 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _911 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _920 = ((((1.0 - _911) * (_906 + 2.0)) * exp2(log2(isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * (_906 + 1.0))) + _911) * _792;
        _928 = _759;
        _930 = _758;
        _931 = _757;
        _932 = _769;
        _933 = _768;
        _934 = _767;
        _935 = _779;
        _936 = _778;
        _937 = _777;
        _938 = _792;
        _939 = _791;
        _940 = _790;
        _941 = cbModelParam._m0[36u].z * (isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0)));
        _942 = cbModelParam._m0[36u].z * (isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0)));
        _943 = cbModelParam._m0[36u].z * (isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0)));
    }
    else
    {
        _928 = _929;
        _930 = _929;
        _931 = _929;
        _932 = _929;
        _933 = _929;
        _934 = _929;
        _935 = _929;
        _936 = _929;
        _937 = _929;
        _938 = _929;
        _939 = _929;
        _940 = _929;
        _941 = 0.0;
        _942 = 0.0;
        _943 = 0.0;
    }
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _969 = fma(_626, cbModelParam._m0[30u].z, fma(_622, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _618));
        float _973 = fma(_626, cbModelParam._m0[31u].z, fma(_622, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _618));
        float _977 = fma(_626, cbModelParam._m0[32u].z, fma(_622, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _618));
        float _1000 = _618 + _381;
        float _1001 = _622 + _382;
        float _1002 = _626 + _383;
        float _1012 = fma(_1002, cbModelParam._m0[30u].z, fma(_1001, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1000)) - _969;
        float _1013 = fma(_1002, cbModelParam._m0[31u].z, fma(_1001, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1000)) - _973;
        float _1014 = fma(_1002, cbModelParam._m0[32u].z, fma(_1001, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1000)) - _977;
        float _1018 = inversesqrt(dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014)));
        float _1031 = ((_1018 * _1012) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_969 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1032 = ((_1018 * _1013) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_973 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1033 = ((_1018 * _1014) / cbModelParam._m0[35u].z) + ((((((_977 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        float _1068 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1035.x + (-0.5));
        float _1070 = _1068 * (_1035.y + (-0.5));
        float _1071 = _1068 * (_1035.z + (-0.5));
        float _1078 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1042.x + (-0.5));
        float _1080 = _1078 * (_1042.y + (-0.5));
        float _1081 = _1078 * (_1042.z + (-0.5));
        float _1088 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1049.x + (-0.5));
        float _1090 = _1088 * (_1049.y + (-0.5));
        float _1091 = _1088 * (_1049.z + (-0.5));
        float _1098 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1056.x + (-0.5));
        float _1100 = _1098 * (_1056.y + (-0.5));
        float _1101 = _1098 * (_1056.z + (-0.5));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = _1069 * 0.5;
        float _1106 = _1079 * 0.5;
        float _1107 = _1089 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_381, _382, _383), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3530 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3541 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3552 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * (_1132 + 1.0))) + _1137) * _1102;
        float _1147 = _1070 * 0.5;
        float _1148 = _1080 * 0.5;
        float _1149 = _1090 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_381, _382, _383), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3563 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _3574 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3585 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * (_1174 + 1.0))) + _1179) * _1103;
        float _1189 = _1071 * 0.5;
        float _1190 = _1081 * 0.5;
        float _1191 = _1091 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_381, _382, _383), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3618 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1216 + 1.0))) + _1221) * _1104;
        _1238 = _1071;
        _1239 = _1070;
        _1240 = _1069;
        _1241 = _1081;
        _1242 = _1080;
        _1243 = _1079;
        _1244 = _1091;
        _1245 = _1090;
        _1246 = _1089;
        _1247 = _1104;
        _1248 = _1103;
        _1249 = _1102;
        _1250 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
        _1251 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
        _1252 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
    }
    else
    {
        _1238 = _929;
        _1239 = _929;
        _1240 = _929;
        _1241 = _929;
        _1242 = _929;
        _1243 = _929;
        _1244 = _929;
        _1245 = _929;
        _1246 = _929;
        _1247 = _929;
        _1248 = _929;
        _1249 = _929;
        _1250 = 0.0;
        _1251 = 0.0;
        _1252 = 0.0;
    }
    float _1262 = (cbModelParam._m0[1u].x * (_1250 - _941)) + _941;
    float _1263 = (cbModelParam._m0[1u].x * (_1251 - _942)) + _942;
    float _1264 = (cbModelParam._m0[1u].x * (_1252 - _943)) + _943;
    float _1285 = fma(_1264, cbSceneParam._m0[89u].z, fma(_1263, cbSceneParam._m0[89u].y, _1262 * cbSceneParam._m0[89u].x));
    float _1288 = fma(_1264, cbSceneParam._m0[90u].z, fma(_1263, cbSceneParam._m0[90u].y, _1262 * cbSceneParam._m0[90u].x));
    float _1291 = fma(_1264, cbSceneParam._m0[91u].z, fma(_1263, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1262));
    float _1306 = _562 * 0.5;
    float _1307 = _563 * 0.5;
    float _1308 = _564 * 0.5;
    float _1309 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_1240, _1243, _1246, _1249));
    float _1312 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_1239, _1242, _1245, _1248));
    float _1315 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_1238, _1241, _1244, _1247));
    float _1349;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1322 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_928, _932, _935, _938));
        float _1326 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_930, _933, _936, _939));
        float _1330 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_931, _934, _937, _940));
        float _1337 = dot(vec4(cbModelParam._m0[39u]), vec4(_1306, _1307, _1308, 1.0));
        _1349 = dot(vec3(isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)), isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)), isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1337) ? 0.0 : (isnan(0.0) ? _1337 : max(0.0, _1337))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1349 = 1.0;
    }
    float _1360;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1351 = dot(vec4(cbModelParam._m0[40u]), vec4(_1306, _1307, _1308, 1.0));
        _1360 = dot(vec3(isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)), isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1351) ? 0.0 : (isnan(0.0) ? _1351 : max(0.0, _1351))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1360 = 1.0;
    }
    float _1364 = (_1360 * cbModelParam._m0[1u].x) + (_1349 * (1.0 - cbModelParam._m0[1u].x));
    float _1374 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _384);
    float _1375 = isnan(_1374) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1374 : min(cbModelParam._m0[25u].z, _1374));
    float _1457;
    float _1459;
    float _1461;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1424 = fma(_626, cbModelParam._m0[13u].z, fma(_622, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _618)) + cbModelParam._m0[13u].w;
        float _1428 = fma(_626, cbModelParam._m0[14u].z, fma(_622, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _618)) + cbModelParam._m0[14u].w;
        float _1432 = fma(_626, cbModelParam._m0[15u].z, fma(_622, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _618)) + cbModelParam._m0[15u].w;
        float _1435 = fma(_564, cbModelParam._m0[13u].z, fma(_563, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _562));
        float _1438 = fma(_564, cbModelParam._m0[14u].z, fma(_563, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _562));
        float _1441 = fma(_564, cbModelParam._m0[15u].z, fma(_563, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _562));
        float _1469;
        if (_1435 > 0.0)
        {
            _1469 = abs((1.0 - _1424) / _1435);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1435 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1424 + 1.0) / _1435);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1469 = frontier_phi_16_14_ladder;
        }
        float _1674;
        if (_1438 > 0.0)
        {
            _1674 = abs((1.0 - _1428) / _1438);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1438 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1428 + 1.0) / _1438);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1674 = frontier_phi_25_21_ladder;
        }
        float _1928;
        if (_1441 > 0.0)
        {
            _1928 = abs((1.0 - _1432) / _1441);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1432 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1928 = frontier_phi_37_32_ladder;
        }
        float _1930 = isnan(_1674) ? _1469 : (isnan(_1469) ? _1674 : min(_1469, _1674));
        float _1931 = isnan(_1928) ? _1930 : (isnan(_1930) ? _1928 : min(_1930, _1928));
        float _1935 = (_1931 * _1435) + _1424;
        float _1936 = (_1931 * _1438) + _1428;
        float _1937 = (_1931 * _1441) + _1432;
        float _1938 = _1931 * 9.9999997473787516355514526367188e-05;
        float _1940 = (-1.0) - _1938;
        float _1942 = _1938 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1937 > _1942) || ((_1937 < _1940) || ((_1936 > _1942) || ((_1936 < _1940) || ((_1935 < _1940) || (_1935 > _1942))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2065 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1937, cbModelParam._m0[9u].z, fma(_1936, cbModelParam._m0[9u].y, _1935 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1937, cbModelParam._m0[10u].z, fma(_1936, cbModelParam._m0[10u].y, _1935 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1937, cbModelParam._m0[11u].z, fma(_1936, cbModelParam._m0[11u].y, _1935 * cbModelParam._m0[11u].x))), _1375);
            frontier_phi_15_37_ladder = _2065.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2065.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2065.x * cbModelParam._m0[1u].y;
        }
        _1457 = frontier_phi_15_37_ladder_2;
        _1459 = frontier_phi_15_37_ladder_1;
        _1461 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1445 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_562, _563, _564), _1375);
        _1457 = _1445.x * cbModelParam._m0[1u].y;
        _1459 = _1445.y * cbModelParam._m0[1u].y;
        _1461 = _1445.z * cbModelParam._m0[1u].y;
    }
    float _1465 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _384);
    float _1466 = isnan(_1465) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1465 : min(cbModelParam._m0[25u].w, _1465));
    float _1557;
    float _1559;
    float _1561;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1521 = fma(_626, cbModelParam._m0[21u].z, fma(_622, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _618)) + cbModelParam._m0[21u].w;
        float _1525 = fma(_626, cbModelParam._m0[22u].z, fma(_622, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _618)) + cbModelParam._m0[22u].w;
        float _1529 = fma(_626, cbModelParam._m0[23u].z, fma(_622, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _618)) + cbModelParam._m0[23u].w;
        float _1532 = fma(_564, cbModelParam._m0[21u].z, fma(_563, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _562));
        float _1535 = fma(_564, cbModelParam._m0[22u].z, fma(_563, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _562));
        float _1538 = fma(_564, cbModelParam._m0[23u].z, fma(_563, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _562));
        float _1679;
        if (_1532 > 0.0)
        {
            _1679 = abs((1.0 - _1521) / _1532);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1521 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1679 = frontier_phi_27_23_ladder;
        }
        float _1955;
        if (_1535 > 0.0)
        {
            _1955 = abs((1.0 - _1525) / _1535);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1525 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1955 = frontier_phi_39_34_ladder;
        }
        float _2168;
        if (_1538 > 0.0)
        {
            _2168 = abs((1.0 - _1529) / _1538);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1529 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2168 = frontier_phi_48_45_ladder;
        }
        float _2170 = isnan(_1955) ? _1679 : (isnan(_1679) ? _1955 : min(_1679, _1955));
        float _2171 = isnan(_2168) ? _2170 : (isnan(_2170) ? _2168 : min(_2170, _2168));
        float _2175 = (_2171 * _1532) + _1521;
        float _2176 = (_2171 * _1535) + _1525;
        float _2177 = (_2171 * _1538) + _1529;
        float _2178 = _2171 * 9.9999997473787516355514526367188e-05;
        float _2179 = (-1.0) - _2178;
        float _2181 = _2178 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2177 > _2181) || ((_2177 < _2179) || ((_2176 > _2181) || ((_2176 < _2179) || ((_2175 < _2179) || (_2175 > _2181))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2378 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2177, cbModelParam._m0[17u].z, fma(_2176, cbModelParam._m0[17u].y, _2175 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2177, cbModelParam._m0[18u].z, fma(_2176, cbModelParam._m0[18u].y, _2175 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2177, cbModelParam._m0[19u].z, fma(_2176, cbModelParam._m0[19u].y, _2175 * cbModelParam._m0[19u].x))), _1466);
            frontier_phi_24_48_ladder = _2378.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2378.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2378.x * cbModelParam._m0[1u].z;
        }
        _1557 = frontier_phi_24_48_ladder_2;
        _1559 = frontier_phi_24_48_ladder_1;
        _1561 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1541 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_562, _563, _564), _1466);
        _1557 = _1541.x * cbModelParam._m0[1u].z;
        _1559 = _1541.y * cbModelParam._m0[1u].z;
        _1561 = _1541.z * cbModelParam._m0[1u].z;
    }
    float _1574 = (((_589 * _539) + _590) * _554) * ((cbModelParam._m0[1u].w * (_1557 - _1457)) + _1457);
    float _1576 = (((_589 * _541) + _590) * _554) * ((cbModelParam._m0[1u].w * (_1559 - _1459)) + _1459);
    float _1578 = (((_589 * _542) + _590) * _554) * ((cbModelParam._m0[1u].w * (_1561 - _1461)) + _1461);
    float _1581 = fma(_1578, cbSceneParam._m0[89u].z, fma(_1576, cbSceneParam._m0[89u].y, _1574 * cbSceneParam._m0[89u].x));
    float _1584 = fma(_1578, cbSceneParam._m0[90u].z, fma(_1576, cbSceneParam._m0[90u].y, _1574 * cbSceneParam._m0[90u].x));
    float _1587 = fma(_1578, cbSceneParam._m0[91u].z, fma(_1576, cbSceneParam._m0[91u].y, _1574 * cbSceneParam._m0[91u].x));
    uvec4 _1597 = floatBitsToUint(cbInstanceData._m0[_513 + 5u]);
    uint _1599 = _1597.x * 14u;
    uint _1600 = _1599 + 13u;
    float _1607 = _554 + (-1.0);
    float _1612 = (cbLight._m0[_1600].x * _1607) + 1.0;
    float _1613 = (cbLight._m0[_1600].y * _1607) + 1.0;
    float _1614 = (cbLight._m0[_1600].z * _1607) + 1.0;
    float _1615 = (cbLight._m0[_1600].w * _1607) + 1.0;
    uint _1616 = _1599 + 5u;
    float _1622 = isnan(1.0) ? _1613 : (isnan(_1613) ? 1.0 : min(_1613, 1.0));
    uint _1626 = _1599 + 4u;
    float _1632 = isnan(1.0) ? _1612 : (isnan(_1612) ? 1.0 : min(_1612, 1.0));
    uint _1636 = _1599 | 1u;
    float _1647 = dot(vec3(cbLight._m0[_1599].xyz), vec3(_381, _382, _383));
    float _1650 = dot(vec3(cbLight._m0[_1636].xyz), vec3(_381, _382, _383));
    float _3754 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
    float _3765 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
    float _1655 = (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * 0.3183098733425140380859375;
    float _1657 = (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * 0.3183098733425140380859375;
    float _1664 = ((cbLight._m0[_1616].x * _1622) * _1657) + ((cbLight._m0[_1626].x * _1632) * _1655);
    float _1665 = ((_1622 * cbLight._m0[_1616].y) * _1657) + ((_1632 * cbLight._m0[_1626].y) * _1655);
    float _1666 = ((_1622 * cbLight._m0[_1616].z) * _1657) + ((_1632 * cbLight._m0[_1626].z) * _1655);
    uvec4 _1671 = floatBitsToUint(cbLight._m0[_1599 + 12u]);
    bool _1673 = _1671.x == 0u;
    float _1684;
    float _1686;
    float _1688;
    if (_1673)
    {
        _1684 = _1664;
        _1686 = _1665;
        _1688 = _1666;
    }
    else
    {
        uint _1692 = _1599 + 6u;
        float _1708 = (dot(vec3(cbLight._m0[_1599 + 2u].xyz), vec3(_381, _382, _383)) * 0.5) + 0.5;
        float _1709 = _1708 * _1708;
        float _3776 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1711 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
        _1684 = (((cbLight._m0[_1692].x * 0.3183098733425140380859375) * _1710) * _1711) + _1664;
        _1686 = (((cbLight._m0[_1692].y * 0.3183098733425140380859375) * _1710) * _1711) + _1665;
        _1688 = (((cbLight._m0[_1692].z * 0.3183098733425140380859375) * _1710) * _1711) + _1666;
    }
    bool _1691 = _1671.y == 0u;
    float _1729;
    float _1731;
    float _1733;
    if (_1691)
    {
        _1729 = _1684;
        _1731 = _1686;
        _1733 = _1688;
    }
    else
    {
        uint _1899 = _1599 + 7u;
        float _1915 = (dot(vec3(cbLight._m0[_1599 + 3u].xyz), vec3(_381, _382, _383)) * 0.5) + 0.5;
        float _1916 = _1915 * _1915;
        float _3792 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
        float _1917 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1918 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _1729 = (((cbLight._m0[_1899].x * 0.3183098733425140380859375) * _1917) * _1918) + _1684;
        _1731 = (((cbLight._m0[_1899].y * 0.3183098733425140380859375) * _1917) * _1918) + _1686;
        _1733 = (((cbLight._m0[_1899].z * 0.3183098733425140380859375) * _1917) * _1918) + _1688;
    }
    uint _1736 = _1599 + 8u;
    float _1749 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1599].w)) * _384) * 0.949999988079071044921875);
    float _1750 = _1749 * _1749;
    float _1751 = cbLight._m0[_1599].x + _464;
    float _1752 = cbLight._m0[_1599].y + _465;
    float _1753 = cbLight._m0[_1599].z + _466;
    float _1757 = inversesqrt(dot(vec3(_1751, _1752, _1753), vec3(_1751, _1752, _1753)));
    float _1758 = _1757 * _1751;
    float _1759 = _1757 * _1752;
    float _1760 = _1757 * _1753;
    float _1761 = dot(vec3(_381, _382, _383), vec3(cbLight._m0[_1599].xyz));
    float _3808 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1764 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _3819 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _1765 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _1766 = dot(vec3(_381, _382, _383), vec3(_1758, _1759, _1760));
    float _3830 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1769 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _1770 = dot(vec3(cbLight._m0[_1599].xyz), vec3(_1758, _1759, _1760));
    float _3841 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1774 = _1750 * _1750;
    float _1778 = ((_1769 * _1769) * (_1774 + (-1.0))) + 1.0;
    float _1786 = exp2(log2(1.0 - (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) * 5.0);
    float _1787 = 0.959999978542327880859375 - _536;
    float _1789 = 0.959999978542327880859375 - _537;
    float _1790 = 0.959999978542327880859375 - _538;
    float _1797 = 1.0 - _1750;
    float _1808 = (0.5 / (((_1765 * ((_1764 * _1797) + _1750)) + 9.9999999392252902907785028219223e-09) + (((_1765 * _1797) + _1750) * _1764))) * _1764;
    float _3852 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1810 = (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1774 / ((_1778 * _1778) * 3.141590118408203125));
    uint _1821 = _1599 + 9u;
    float _1832 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1636].w)) * _384) * 0.949999988079071044921875);
    float _1833 = _1832 * _1832;
    float _1834 = cbLight._m0[_1636].x + _464;
    float _1835 = cbLight._m0[_1636].y + _465;
    float _1836 = cbLight._m0[_1636].z + _466;
    float _1840 = inversesqrt(dot(vec3(_1834, _1835, _1836), vec3(_1834, _1835, _1836)));
    float _1841 = _1840 * _1834;
    float _1842 = _1840 * _1835;
    float _1843 = _1840 * _1836;
    float _1844 = dot(vec3(_381, _382, _383), vec3(cbLight._m0[_1636].xyz));
    float _3863 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1847 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _1848 = dot(vec3(_381, _382, _383), vec3(_1841, _1842, _1843));
    float _3874 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1851 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _1852 = dot(vec3(cbLight._m0[_1636].xyz), vec3(_1841, _1842, _1843));
    float _3885 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1856 = _1833 * _1833;
    float _1860 = ((_1851 * _1851) * (_1856 + (-1.0))) + 1.0;
    float _1867 = exp2(log2(1.0 - (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * 5.0);
    float _1874 = 1.0 - _1833;
    float _1884 = (0.5 / (((_1765 * ((_1847 * _1874) + _1833)) + 9.9999999392252902907785028219223e-09) + (((_1765 * _1874) + _1833) * _1847))) * _1847;
    float _3896 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1886 = (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1856 / ((_1860 * _1860) * 3.141590118408203125));
    float _1896 = (((((_1867 * _1787) + _539) * cbLight._m0[_1821].x) * _1886) * _1622) + (((((_1786 * _1787) + _539) * cbLight._m0[_1736].x) * _1810) * _1632);
    float _1897 = (((((_1867 * _1789) + _541) * cbLight._m0[_1821].y) * _1886) * _1622) + (((((_1786 * _1789) + _541) * cbLight._m0[_1736].y) * _1810) * _1632);
    float _1898 = (((((_1867 * _1790) + _542) * cbLight._m0[_1821].z) * _1886) * _1622) + (((((_1786 * _1790) + _542) * cbLight._m0[_1736].z) * _1810) * _1632);
    float _1960;
    float _1962;
    float _1964;
    if (_1673)
    {
        _1960 = _1896;
        _1962 = _1897;
        _1964 = _1898;
    }
    else
    {
        uint _1966 = _1599 + 2u;
        uint _1970 = _1599 + 10u;
        float _1984 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1966].w)) * _384) * 0.949999988079071044921875);
        float _1985 = _1984 * _1984;
        float _1986 = cbLight._m0[_1966].x + _464;
        float _1987 = cbLight._m0[_1966].y + _465;
        float _1988 = cbLight._m0[_1966].z + _466;
        float _1992 = inversesqrt(dot(vec3(_1986, _1987, _1988), vec3(_1986, _1987, _1988)));
        float _1993 = _1992 * _1986;
        float _1994 = _1992 * _1987;
        float _1995 = _1992 * _1988;
        float _1996 = dot(vec3(_381, _382, _383), vec3(cbLight._m0[_1966].xyz));
        float _3907 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _1999 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _2000 = dot(vec3(_381, _382, _383), vec3(_1993, _1994, _1995));
        float _3918 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        float _2003 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _2004 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_1993, _1994, _1995));
        float _3929 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2008 = _1985 * _1985;
        float _2012 = ((_2003 * _2003) * (_2008 + (-1.0))) + 1.0;
        float _2019 = exp2(log2(1.0 - (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * 5.0);
        float _2026 = 1.0 - _1985;
        float _2036 = (0.5 / (((_1765 * ((_1999 * _2026) + _1985)) + 9.9999999392252902907785028219223e-09) + (((_1765 * _2026) + _1985) * _1999))) * _1999;
        float _3940 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2038 = (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_2008 / ((_2012 * _2012) * 3.141590118408203125));
        float _2039 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
        _1960 = (((((_2019 * _1787) + _539) * cbLight._m0[_1970].x) * _2038) * _2039) + _1896;
        _1962 = (((((_2019 * _1789) + _541) * cbLight._m0[_1970].y) * _2038) * _2039) + _1897;
        _1964 = (((((_2019 * _1790) + _542) * cbLight._m0[_1970].z) * _2038) * _2039) + _1898;
    }
    float _2074;
    float _2076;
    float _2078;
    if (_1691)
    {
        _2074 = _1960;
        _2076 = _1962;
        _2078 = _1964;
    }
    else
    {
        uint _2085 = _1599 + 3u;
        uint _2089 = _1599 + 11u;
        float _2103 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2085].w)) * _384) * 0.949999988079071044921875);
        float _2104 = _2103 * _2103;
        float _2105 = cbLight._m0[_2085].x + _464;
        float _2106 = cbLight._m0[_2085].y + _465;
        float _2107 = cbLight._m0[_2085].z + _466;
        float _2111 = inversesqrt(dot(vec3(_2105, _2106, _2107), vec3(_2105, _2106, _2107)));
        float _2112 = _2111 * _2105;
        float _2113 = _2111 * _2106;
        float _2114 = _2111 * _2107;
        float _2115 = dot(vec3(_381, _382, _383), vec3(cbLight._m0[_2085].xyz));
        float _3956 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2118 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _2119 = dot(vec3(_381, _382, _383), vec3(_2112, _2113, _2114));
        float _3967 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2122 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _2123 = dot(vec3(cbLight._m0[_2085].xyz), vec3(_2112, _2113, _2114));
        float _3978 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2127 = _2104 * _2104;
        float _2131 = ((_2122 * _2122) * (_2127 + (-1.0))) + 1.0;
        float _2138 = exp2(log2(1.0 - (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) * 5.0);
        float _2145 = 1.0 - _2104;
        float _2155 = (0.5 / (((_1765 * ((_2118 * _2145) + _2104)) + 9.9999999392252902907785028219223e-09) + (((_1765 * _2145) + _2104) * _2118))) * _2118;
        float _3989 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2157 = (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_2127 / ((_2131 * _2131) * 3.141590118408203125));
        float _2158 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _2074 = (((((_2138 * _1787) + _539) * cbLight._m0[_2089].x) * _2157) * _2158) + _1960;
        _2076 = (((((_2138 * _1789) + _541) * cbLight._m0[_2089].y) * _2157) * _2158) + _1962;
        _2078 = (((((_2138 * _1790) + _542) * cbLight._m0[_2089].z) * _2157) * _2158) + _1964;
    }
    float _2292;
    float _2294;
    float _2296;
    float _2298;
    float _2300;
    float _2302;
    if (_1597.y == 0u)
    {
        float _2233 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2234 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2233;
        float _2235 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2233;
        float _2236 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2233;
        uvec4 _2248 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2249 = _2248.x;
        uint _2260 = uint((float(_2248.y) * floor(float(uint(cbSceneParam._m0[85u].y * _473) / _2249))) + floor(float(uint(cbSceneParam._m0[85u].x * _472) / _2249)));
        float _2270 = (log2(_2236 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2271 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        uint _2274 = uint(isnan(14.0) ? _2271 : (isnan(_2271) ? 14.0 : min(_2271, 14.0)));
        uvec4 _2279 = texelFetch(g_lightClusterGridBuffer, int(((_2274 << 2u) + (_2260 << 6u)) >> 2u));
        uint _2280 = _2279.x;
        uint _2281 = _2248.z;
        float _2383;
        float _2385;
        float _2387;
        float _2389;
        float _2391;
        float _2393;
        if (((((1u << ((_2281 >> 4u) & 15u)) + 4294967295u) & _2280) == 0u) || ((_2281 & 240u) == 0u))
        {
            _2383 = 0.0;
            _2385 = 0.0;
            _2387 = 0.0;
            _2389 = 0.0;
            _2391 = 0.0;
            _2393 = 0.0;
        }
        else
        {
            float _2384;
            float _2386;
            float _2388;
            float _2390;
            float _2392;
            float _2394;
            float _2527 = 0.0;
            float _2528 = 0.0;
            float _2529 = 0.0;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            uint _2533 = 0u;
            uint _2542;
            bool _2543;
            for (;;)
            {
                _2542 = texelFetch(g_lightClassification, int((((_2274 << 5u) + (_2260 << 9u)) + (_2533 << 2u)) >> 2u)).x;
                _2543 = _2542 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2543)
                {
                    frontier_phi_63_pred = _2532;
                    frontier_phi_63_pred_1 = _2531;
                    frontier_phi_63_pred_2 = _2530;
                    frontier_phi_63_pred_3 = _2529;
                    frontier_phi_63_pred_4 = _2528;
                    frontier_phi_63_pred_5 = _2527;
                }
                else
                {
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    uint _2657;
                    _2651 = _2527;
                    _2652 = _2528;
                    _2653 = _2529;
                    _2654 = _2530;
                    _2655 = _2531;
                    _2656 = _2532;
                    _2657 = _2542;
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    for (;;)
                    {
                        uint _2661 = uint(findLSB(_2657)) + (_2533 << 5u);
                        uint _2658 = (_2657 + 4294967295u) & _2657;
                        uint _2663 = _2661 * 48u;
                        vec4 _2677 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2663)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 3u)).x));
                        uint _2683 = (_2661 * 48u) + 4u;
                        vec4 _2696 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2683)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 3u)).x));
                        uint _2702 = (_2661 * 48u) + 8u;
                        vec3 _2713 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2702)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 2u)).x));
                        float _2717 = _2677.x - _2234;
                        float _2718 = _2677.y - _2235;
                        float _2719 = _2677.z - _2236;
                        float _2720 = dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719));
                        float _2723 = inversesqrt(_2720);
                        float _2724 = _2723 * _2717;
                        float _2725 = _2723 * _2718;
                        float _2726 = _2723 * _2719;
                        float _2727 = dot(vec3(_494, _497, _500), vec3(_2724, _2725, _2726));
                        float _2732 = 1.0 - (_2720 * _2677.w);
                        float _4015 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
                        float _2733 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
                        float _2734 = sqrt(_2720) * _2696.w;
                        float _2737 = 1.39999997615814208984375 / (_2734 + 1.39999997615814208984375);
                        float _2738 = _2737 * _2737;
                        float _2741 = ((1.0 - _2738) * _2727) + _2738;
                        float _2744 = _2734 * _2734;
                        float _2748 = ((isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0))) * _2733) / ((_2744 * 0.699999988079071044921875) + 1.0);
                        float _2752 = (-0.0) - _2234;
                        float _2753 = (-0.0) - _2235;
                        float _2754 = (-0.0) - _2236;
                        float _2758 = inversesqrt(dot(vec3(_2752, _2753, _2754), vec3(_2752, _2753, _2754)));
                        float _2759 = _2758 * _2752;
                        float _2760 = _2758 * _2753;
                        float _2761 = _2758 * _2754;
                        float _2769 = exp2(log2(1.0 / ((_2744 * 3.5) + 5.0)) * 0.25);
                        float _2770 = 1.0 - _570;
                        float _2777 = sqrt(1.0 - ((1.0 - (_2770 * _2770)) * (1.0 - (_2769 * _2769))));
                        float _2778 = _2777 * _2777;
                        float _2779 = _2778 * _2778;
                        float _2780 = _2759 + _2724;
                        float _2781 = _2760 + _2725;
                        float _2782 = _2761 + _2726;
                        float _2786 = inversesqrt(dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782)));
                        float _2790 = dot(vec3(_494, _497, _500), vec3(_2759, _2760, _2761));
                        float _4031 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                        float _2793 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                        float _2794 = dot(vec3(_494, _497, _500), vec3(_2786 * _2780, _2786 * _2781, _2786 * _2782));
                        float _4042 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                        float _2797 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                        float _2801 = ((_2797 * _2797) * (_2779 + (-1.0))) + 1.0;
                        float _2802 = _2737 * _2778;
                        float _2803 = _2802 * _2802;
                        float _2806 = ((1.0 - _2803) * _2727) + _2803;
                        float _4053 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
                        float _2807 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
                        float _2808 = 1.0 - _2778;
                        float _2818 = (0.5 / (((_2807 * ((_2793 * _2808) + _2778)) + 9.9999999392252902907785028219223e-09) + (((_2807 * _2808) + _2778) * _2793))) * _2807;
                        float _4064 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2829 = (((_2779 * 3.1415927410125732421875) * (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) / ((_2801 * _2801) * ((_2744 * 2.1991131305694580078125) + 3.141590118408203125))) * _2733;
                        _2586 = (_2748 * _2696.x) + _2654;
                        _2587 = (_2748 * _2696.y) + _2655;
                        _2588 = (_2748 * _2696.z) + _2656;
                        _2583 = (_2829 * _2713.x) + _2651;
                        _2584 = (_2829 * _2713.y) + _2652;
                        _2585 = (_2829 * _2713.z) + _2653;
                        if (_2658 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2651 = _2583;
                            _2652 = _2584;
                            _2653 = _2585;
                            _2654 = _2586;
                            _2655 = _2587;
                            _2656 = _2588;
                            _2657 = _2658;
                        }
                    }
                    frontier_phi_63_pred = _2588;
                    frontier_phi_63_pred_1 = _2587;
                    frontier_phi_63_pred_2 = _2586;
                    frontier_phi_63_pred_3 = _2585;
                    frontier_phi_63_pred_4 = _2584;
                    frontier_phi_63_pred_5 = _2583;
                }
                _2394 = frontier_phi_63_pred;
                _2392 = frontier_phi_63_pred_1;
                _2390 = frontier_phi_63_pred_2;
                _2388 = frontier_phi_63_pred_3;
                _2386 = frontier_phi_63_pred_4;
                _2384 = frontier_phi_63_pred_5;
                uint _2534 = _2533 + 1u;
                if (_2534 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2527 = _2384;
                    _2528 = _2386;
                    _2529 = _2388;
                    _2530 = _2390;
                    _2531 = _2392;
                    _2532 = _2394;
                    _2533 = _2534;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2383 = _2384;
            _2385 = _2386;
            _2387 = _2388;
            _2389 = _2390;
            _2391 = _2392;
            _2393 = _2394;
        }
        uvec4 _2397 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2398 = _2397.z;
        uint _2400 = (_2398 >> 8u) & 15u;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        if (((4294967295u << _2400) & _2280) == 0u)
        {
            _2495 = _2383;
            _2497 = _2385;
            _2499 = _2387;
            _2501 = _2389;
            _2503 = _2391;
            _2505 = _2393;
        }
        else
        {
            float _2520 = inversesqrt(dot(vec3(_2234, _2235, _2236), vec3(_2234, _2235, _2236)));
            float _2521 = _2520 * _2234;
            float _2522 = _2520 * _2235;
            float _2523 = _2520 * _2236;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2400 < ((_2398 >> 12u) & 15u))
            {
                float _2496;
                float _2498;
                float _2500;
                float _2502;
                float _2504;
                float _2506;
                float _2634 = _2383;
                float _2635 = _2385;
                float _2636 = _2387;
                float _2637 = _2389;
                float _2638 = _2391;
                float _2639 = _2393;
                uint _2640 = _2400;
                uint _2649;
                bool _2650;
                for (;;)
                {
                    _2649 = texelFetch(g_lightClassification, int((((_2274 << 5u) + (_2260 << 9u)) + (_2640 << 2u)) >> 2u)).x;
                    _2650 = _2649 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2650)
                    {
                        frontier_phi_69_pred = _2639;
                        frontier_phi_69_pred_1 = _2638;
                        frontier_phi_69_pred_2 = _2637;
                        frontier_phi_69_pred_3 = _2636;
                        frontier_phi_69_pred_4 = _2635;
                        frontier_phi_69_pred_5 = _2634;
                    }
                    else
                    {
                        float _2834;
                        float _2835;
                        float _2836;
                        float _2837;
                        float _2838;
                        float _2839;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _3134;
                        float _2847 = _2634;
                        float _2848 = _2635;
                        float _2849 = _2636;
                        float _2850 = _2637;
                        float _2851 = _2638;
                        float _2852 = _2639;
                        uint _2853 = _2649;
                        uint _2854;
                        vec4 _2879;
                        float _2880;
                        vec4 _2895;
                        vec3 _2907;
                        vec4 _2923;
                        vec4 _2938;
                        float _2985;
                        bool _2986;
                        for (;;)
                        {
                            uint _2864 = ((_2640 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2853));
                            _2854 = (_2853 + 4294967295u) & _2853;
                            uint _2866 = _2864 * 40u;
                            _2879 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2866)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 3u)).x));
                            _2880 = _2879.w;
                            uint _2882 = (_2864 * 40u) + 4u;
                            _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            uint _2897 = (_2864 * 40u) + 8u;
                            _2907 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 2u)).x));
                            uint _2910 = (_2864 * 40u) + 16u;
                            _2923 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 3u)).x));
                            uint _2925 = (_2864 * 40u) + 20u;
                            _2938 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 3u)).x));
                            uint _2941 = (_2864 * 40u) + 24u;
                            vec4 _2954 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 3u)).x));
                            uint _2960 = (_2864 * 40u) + 28u;
                            vec4 _2973 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2960)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 3u)).x));
                            _2985 = fma(_2236, _2973.z, fma(_2235, _2973.y, _2973.x * _2234)) + _2973.w;
                            _2986 = !((fma(_2236, _2954.z, fma(_2235, _2954.y, _2954.x * _2234)) + _2954.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2986)
                            {
                                float _3013 = _2879.x - _2234;
                                float _3014 = _2879.y - _2235;
                                float _3015 = _2879.z - _2236;
                                float _3016 = dot(vec3(_3013, _3014, _3015), vec3(_3013, _3014, _3015));
                                float _3019 = inversesqrt(_3016);
                                float _3020 = _3019 * _3013;
                                float _3021 = _3019 * _3014;
                                float _3022 = _3019 * _3015;
                                float _3026 = 1.0 - (_3016 / (_2880 * _2880));
                                float _4075 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                                float _3027 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                                float _3031 = sqrt(_3016) * _2895.w;
                                float _3033 = 1.39999997615814208984375 / (_3031 + 1.39999997615814208984375);
                                float _3034 = _3033 * _3033;
                                float _3037 = ((1.0 - _3034) * dot(vec3(_3020, _3021, _3022), vec3(_494, _497, _500))) + _3034;
                                float _3040 = _3031 * _3031;
                                float _3044 = (fma(_2236, _2923.z, fma(_2235, _2923.y, _2923.x * _2234)) + _2923.w) / _2985;
                                float _3045 = (fma(_2236, _2938.z, fma(_2235, _2938.y, _2938.x * _2234)) + _2938.w) / _2985;
                                float _3049 = 1.0 - dot(vec2(_3044, _3045), vec2(_3044, _3045));
                                float _4091 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                                float _3050 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                                float _3051 = _3050 * (((isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0))) * _3027) / ((_3040 * 0.699999988079071044921875) + 1.0));
                                float _3063 = exp2(log2(1.0 / ((_3040 * 3.5) + 5.0)) * 0.25);
                                float _3064 = 1.0 - _570;
                                float _3071 = sqrt(1.0 - ((1.0 - (_3064 * _3064)) * (1.0 - (_3063 * _3063))));
                                float _3072 = _3071 * _3071;
                                float _3073 = _3072 * _3072;
                                float _3074 = _3020 - _2521;
                                float _3075 = _3021 - _2522;
                                float _3076 = _3022 - _2523;
                                float _3080 = inversesqrt(dot(vec3(_3074, _3075, _3076), vec3(_3074, _3075, _3076)));
                                float _3084 = dot(vec3(_494, _497, _500), vec3((-0.0) - _2521, (-0.0) - _2522, (-0.0) - _2523));
                                float _4102 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                                float _3087 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
                                float _3088 = dot(vec3(_494, _497, _500), vec3(_3080 * _3074, _3080 * _3075, _3080 * _3076));
                                float _4113 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                                float _3091 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                                float _3095 = ((_3091 * _3091) * (_3073 + (-1.0))) + 1.0;
                                float _3096 = _3033 * _3072;
                                float _3097 = _3096 * _3096;
                                float _3103 = ((1.0 - _3097) * dot(vec3(_494, _497, _500), vec3(_3020, _3021, _3022))) + _3097;
                                float _4124 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                                float _3104 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
                                float _3105 = 1.0 - _3072;
                                float _3115 = (0.5 / (((_3104 * ((_3087 * _3105) + _3072)) + 9.9999999392252902907785028219223e-09) + (((_3104 * _3105) + _3072) * _3087))) * _3104;
                                float _4135 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3125 = (_3050 * _3027) * (((_3073 * 3.1415927410125732421875) * (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) / ((_3095 * _3095) * ((_3040 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3051 * _2895.z;
                                frontier_phi_75_pred_1 = _3051 * _2895.y;
                                frontier_phi_75_pred_2 = _3051 * _2895.x;
                                frontier_phi_75_pred_3 = _3125 * _2907.z;
                                frontier_phi_75_pred_4 = _3125 * _2907.y;
                                frontier_phi_75_pred_5 = _3125 * _2907.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3134 = frontier_phi_75_pred;
                            _3133 = frontier_phi_75_pred_1;
                            _3132 = frontier_phi_75_pred_2;
                            _3131 = frontier_phi_75_pred_3;
                            _3130 = frontier_phi_75_pred_4;
                            _3129 = frontier_phi_75_pred_5;
                            _2837 = _3132 + _2850;
                            _2838 = _3133 + _2851;
                            _2839 = _3134 + _2852;
                            _2834 = _3129 + _2847;
                            _2835 = _3130 + _2848;
                            _2836 = _3131 + _2849;
                            if (_2854 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2847 = _2834;
                                _2848 = _2835;
                                _2849 = _2836;
                                _2850 = _2837;
                                _2851 = _2838;
                                _2852 = _2839;
                                _2853 = _2854;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2839;
                        frontier_phi_69_pred_1 = _2838;
                        frontier_phi_69_pred_2 = _2837;
                        frontier_phi_69_pred_3 = _2836;
                        frontier_phi_69_pred_4 = _2835;
                        frontier_phi_69_pred_5 = _2834;
                    }
                    _2506 = frontier_phi_69_pred;
                    _2504 = frontier_phi_69_pred_1;
                    _2502 = frontier_phi_69_pred_2;
                    _2500 = frontier_phi_69_pred_3;
                    _2498 = frontier_phi_69_pred_4;
                    _2496 = frontier_phi_69_pred_5;
                    uint _2641 = _2640 + 1u;
                    if (_2641 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2634 = _2496;
                        _2635 = _2498;
                        _2636 = _2500;
                        _2637 = _2502;
                        _2638 = _2504;
                        _2639 = _2506;
                        _2640 = _2641;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2506;
                frontier_phi_57_58_ladder_1 = _2504;
                frontier_phi_57_58_ladder_2 = _2502;
                frontier_phi_57_58_ladder_3 = _2500;
                frontier_phi_57_58_ladder_4 = _2498;
                frontier_phi_57_58_ladder_5 = _2496;
            }
            else
            {
                frontier_phi_57_58_ladder = _2393;
                frontier_phi_57_58_ladder_1 = _2391;
                frontier_phi_57_58_ladder_2 = _2389;
                frontier_phi_57_58_ladder_3 = _2387;
                frontier_phi_57_58_ladder_4 = _2385;
                frontier_phi_57_58_ladder_5 = _2383;
            }
            _2495 = frontier_phi_57_58_ladder_5;
            _2497 = frontier_phi_57_58_ladder_4;
            _2499 = frontier_phi_57_58_ladder_3;
            _2501 = frontier_phi_57_58_ladder_2;
            _2503 = frontier_phi_57_58_ladder_1;
            _2505 = frontier_phi_57_58_ladder;
        }
        float _2510 = isnan(1.0) ? _554 : (isnan(_554) ? 1.0 : min(_554, 1.0));
        _2292 = (_2510 * _2501) + _1729;
        _2294 = (_2510 * _2503) + _1731;
        _2296 = (_2510 * _2505) + _1733;
        _2298 = ((_2495 * _539) * _2510) + _2074;
        _2300 = ((_2497 * _541) * _2510) + _2076;
        _2302 = ((_2499 * _542) * _2510) + _2078;
    }
    else
    {
        _2292 = _1729;
        _2294 = _1731;
        _2296 = _1733;
        _2298 = _2074;
        _2300 = _2076;
        _2302 = _2078;
    }
    float _4151 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _4162 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _4173 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _2319 = ((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_2292 + ((isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))) * _554))) + ((_2298 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _1364)) * cbPerFrame._m0[3u].x);
    float _2320 = ((isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2294 + ((isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0))) * _554))) + ((_2300 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _1364)) * cbPerFrame._m0[3u].x);
    float _2321 = ((isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_2296 + ((isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))) * _554))) + ((_2302 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _1364)) * cbPerFrame._m0[3u].x);
    uint _2325 = _513 + 6u;
    float _2333 = _472 / cbSceneParam._m0[86u].x;
    float _2334 = _473 / cbSceneParam._m0[86u].y;
    vec4 _2348 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2333, _2334, (log2((isnan(cbSceneParam._m0[77u].w) ? _404 : (isnan(_404) ? cbSceneParam._m0[77u].w : min(_404, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2350 = _2348.x;
    float _2351 = _2348.y;
    float _2352 = _2348.z;
    float _2353 = _2348.w;
    float _2445;
    float _2447;
    float _2449;
    float _2451;
    if (_404 > cbSceneParam._m0[78u].w)
    {
        float _2408 = isnan(_404) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _404 : min(cbSceneParam._m0[80u].w, _404));
        float _2409 = _2408 / _404;
        float _2420 = _2409 * _457;
        float _2421 = _458 * _2409;
        float _2422 = (-0.0) - _2421;
        float _2423 = _2409 * _459;
        float _2425 = (cbSceneParam._m0[77u].w * _2422) / _2408;
        float _2426 = _2425 + cbSceneParam._m0[79u].w;
        float _2427 = cbSceneParam._m0[79u].w - _2421;
        float _2433 = sqrt(((_2420 * _2420) + (_2421 * _2421)) + (_2423 * _2423));
        float _2436 = (1.0 - (cbSceneParam._m0[77u].w / _2408)) * _2433;
        float _2441 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2443 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2596;
        if (abs((_2422 - _2425) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2596 = ((((_2426 > 0.0) ? exp2(_2441 * _2426) : (2.0 - exp2(_2443 * _2426))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2436;
        }
        else
        {
            float _2556 = 1.0 / cbSceneParam._m0[80u].x;
            float _2557 = isnan(_2427) ? _2426 : (isnan(_2426) ? _2427 : max(_2426, _2427));
            float _2558 = isnan(_2427) ? _2426 : (isnan(_2426) ? _2427 : min(_2426, _2427));
            float _2567 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : min(_2557, 0.0));
            float _2568 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : min(_2558, 0.0));
            _2596 = ((abs(_2433 / _2422) * cbSceneParam._m0[80u].y) * ((((_2567 - _2568) * 2.0) - ((exp2(_2441 * (isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0)))) - exp2(_2441 * (isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0))))) * _2556)) - ((exp2(_2443 * _2567) - exp2(_2443 * _2568)) * _2556))) + (_2436 * cbSceneParam._m0[80u].z);
        }
        vec4 _2598 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2333, _2334, 1.0), 0.0);
        float _2607 = exp2((_2596 * (-1.44269502162933349609375)) * (1.0 - _2598.w));
        float _2608 = log2(_2607);
        float _2624 = log2(_2353);
        _2445 = (exp2(_2624 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2608 * cbSceneParam._m0[78u].x)) * _2598.x) / cbSceneParam._m0[78u].x)) + _2350;
        _2447 = (exp2(_2624 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2608 * cbSceneParam._m0[78u].y)) * _2598.y) / cbSceneParam._m0[78u].y)) + _2351;
        _2449 = (exp2(_2624 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2608 * cbSceneParam._m0[78u].z)) * _2598.z) / cbSceneParam._m0[78u].z)) + _2352;
        _2451 = _2607 * _2353;
    }
    else
    {
        _2445 = _2350;
        _2447 = _2351;
        _2449 = _2352;
        _2451 = _2353;
    }
    float _2463 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2464 = _2463 == 3.0;
    float _2465 = log2(_2451);
    float _2472 = exp2(_2465 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0)));
    float _2473 = exp2(_2465 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0)));
    float _2474 = exp2(_2465 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0)));
    float _2483 = (_2463 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2483 * (_2464 ? _2472 : (_2472 + (cbSceneParam._m0[72u].w * _2445)));
    SV_Target.y = _2483 * (_2464 ? _2473 : (_2473 + (cbSceneParam._m0[72u].w * _2447)));
    SV_Target.z = _2483 * (_2464 ? _2474 : (_2474 + (cbSceneParam._m0[72u].w * _2449)));
    SV_Target.w = cbInstanceData._m0[_2325].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2325].w;
}


