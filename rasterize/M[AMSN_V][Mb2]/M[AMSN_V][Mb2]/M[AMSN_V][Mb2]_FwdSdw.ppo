#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[20];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 5, component = 1) in float TEXCOORD_5;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _933;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219;
    float _220;
    float _221;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
    }
    else
    {
        _219 = _205;
        _220 = _206;
        _221 = _207;
    }
    vec4 _247 = texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_5) + cbTextureTilingScale._m0[1u].w));
    float _253 = _247.x * cbMatDynParam._m0[17u].x;
    float _254 = _247.y * cbMatDynParam._m0[17u].y;
    float _255 = _247.z * cbMatDynParam._m0[17u].z;
    vec4 _274 = texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_5) + cbTextureTilingScale._m0[4u].w));
    float _307 = (TEXCOORD_7.x - ((cbMatDynParam._m0[19u].x * (1.0 - TEXCOORD_7.x)) * (texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbMatDynParam._m0[19u].z * TEXCOORD_4) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMatDynParam._m0[19u].z * TEXCOORD_5) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMatDynParam._m0[19u].y * TEXCOORD.w) + 1.0);
    float _3552 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _308 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _315 = (_308 * ((_274.x * cbMatDynParam._m0[18u].x) - _253)) + _253;
    float _316 = (_308 * ((_274.y * cbMatDynParam._m0[18u].y) - _254)) + _254;
    float _317 = (_308 * ((_274.z * cbMatDynParam._m0[18u].z) - _255)) + _255;
    vec4 _330 = texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_5) + cbTextureTilingScale._m0[2u].w));
    float _332 = _330.x;
    float _333 = _330.y;
    float _334 = _330.z;
    vec4 _346 = texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_5) + cbTextureTilingScale._m0[3u].w));
    float _359 = ((_346.z - _334) * _308) + _334;
    float _363 = ((((_346.x - _332) * _308) + _332) * 2.0) + (-1.0);
    float _365 = ((((_346.y - _333) * _308) + _333) * 2.0) + (-1.0);
    float _366 = dot(vec2(_363, _365), vec2(_363, _365));
    float _3563 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _371 = sqrt(1.0 - (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))));
    float _374 = fma(_371, _219, fma(_365, _211 * TANGENT.x, (_197 * _189) * _363));
    float _377 = fma(_371, _220, fma(_365, _211 * TANGENT.y, (_197 * _190) * _363));
    float _380 = fma(_371, _221, fma(_365, _211 * TANGENT.z, (_197 * _191) * _363));
    float _384 = inversesqrt(dot(vec3(_374, _377, _380), vec3(_374, _377, _380)));
    float _385 = _384 * _374;
    float _386 = _384 * _377;
    float _387 = _384 * _380;
    float _3574 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _388 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    float _3585 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3596 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3607 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3618 = isnan(0.0) ? cbMatDynParam._m0[19u].w : (isnan(cbMatDynParam._m0[19u].w) ? 0.0 : max(cbMatDynParam._m0[19u].w, 0.0));
    float _392 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    float _408 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _451 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _461 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _451);
    float _462 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _451);
    float _463 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _451);
    float _467 = inversesqrt(dot(vec3(_461, _462, _463), vec3(_461, _462, _463)));
    float _468 = _461 * _467;
    float _469 = _462 * _467;
    float _470 = _463 * _467;
    float _476 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _477 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _498 = fma(_387, cbSceneParam._m0[5u].z, fma(_386, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _385));
    float _501 = fma(_387, cbSceneParam._m0[6u].z, fma(_386, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _385));
    float _504 = fma(_387, cbSceneParam._m0[7u].z, fma(_386, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _385));
    uint _517 = uint(roundEven(NORMAL.w)) * 13u;
    uint _520 = (_517 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _526 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0)))) * cbInstanceData._m0[_520].x;
    float _527 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0)))) * cbInstanceData._m0[_520].y;
    float _528 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0)))) * cbInstanceData._m0[_520].z;
    float _3629 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _529 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _3640 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _530 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _3651 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _531 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _532 = 1.0 - _392;
    float _533 = _529 * _532;
    float _534 = _530 * _532;
    float _535 = _531 * _532;
    float _540 = (_529 + (-0.039999999105930328369140625)) * _392;
    float _541 = (_530 + (-0.039999999105930328369140625)) * _392;
    float _542 = (_531 + (-0.039999999105930328369140625)) * _392;
    float _543 = _540 + 0.039999999105930328369140625;
    float _545 = _541 + 0.039999999105930328369140625;
    float _546 = _542 + 0.039999999105930328369140625;
    vec4 _555 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _476, cbSceneParam._m0[86u].y * _477));
    float _558 = _555.x * TEXCOORD_7.w;
    float _559 = dot(vec3(_385, _386, _387), vec3(_468, _469, _470));
    float _562 = _559 * 2.0;
    float _566 = (_562 * _385) - _468;
    float _567 = (_562 * _386) - _469;
    float _568 = (_562 * _387) - _470;
    float _572 = abs(dot(vec3(_468, _469, _470), vec3(_385, _386, _387)));
    float _3662 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _574 = sqrt(_388);
    float _587 = exp2((_574 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_574 * 3.0));
    float _593 = (1.0 - _587) * ((_574 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _594 = _587 * _574;
    float _622 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _626 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _630 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _932;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _657 = fma(_630, cbModelParam._m0[26u].z, fma(_626, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _622));
        float _661 = fma(_630, cbModelParam._m0[27u].z, fma(_626, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _622));
        float _665 = fma(_630, cbModelParam._m0[28u].z, fma(_626, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _622));
        float _690 = _622 + _385;
        float _691 = _626 + _386;
        float _692 = _630 + _387;
        float _702 = fma(_692, cbModelParam._m0[26u].z, fma(_691, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _690)) - _657;
        float _703 = fma(_692, cbModelParam._m0[27u].z, fma(_691, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _690)) - _661;
        float _704 = fma(_692, cbModelParam._m0[28u].z, fma(_691, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _690)) - _665;
        float _708 = inversesqrt(dot(vec3(_702, _703, _704), vec3(_702, _703, _704)));
        float _721 = ((_708 * _702) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_657 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _722 = ((_708 * _703) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_661 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _723 = ((_708 * _704) / cbModelParam._m0[34u].z) + ((((((_665 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _726 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_721, _722, _723), 0.0);
        vec4 _733 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_721, _722, _723), 0.0);
        vec4 _740 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_721, _722, _723), 0.0);
        vec4 _747 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_721, _722, _723), 0.0);
        float _760 = exp2((_726.w + (-0.5)) * 20.0) * 2.0;
        float _761 = _760 * (_726.x + (-0.5));
        float _762 = _760 * (_726.y + (-0.5));
        float _763 = _760 * (_726.z + (-0.5));
        float _770 = exp2((_733.w + (-0.5)) * 20.0) * 2.0;
        float _771 = _770 * (_733.x + (-0.5));
        float _772 = _770 * (_733.y + (-0.5));
        float _773 = _770 * (_733.z + (-0.5));
        float _780 = exp2((_740.w + (-0.5)) * 20.0) * 2.0;
        float _781 = _780 * (_740.x + (-0.5));
        float _782 = _780 * (_740.y + (-0.5));
        float _783 = _780 * (_740.z + (-0.5));
        float _790 = exp2((_747.w + (-0.5)) * 20.0) * 2.0;
        float _791 = _790 * (_747.x + (-0.5));
        float _792 = _790 * (_747.y + (-0.5));
        float _793 = _790 * (_747.z + (-0.5));
        float _794 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _795 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _796 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _797 = _761 * 0.5;
        float _798 = _771 * 0.5;
        float _799 = _781 * 0.5;
        float _800 = dot(vec3(_797, _798, _799), vec3(_797, _798, _799));
        float _805 = (_800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_800);
        float _814 = (dot(vec3(_385, _386, _387), vec3(_805 * _797, _805 * _798, _805 * _799)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _824 = sqrt(((_798 * _798) + (_797 * _797)) + (_799 * _799)) / (_794 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _826 = _825 * 2.0;
        float _830 = (1.0 - _825) / (_825 + 1.0);
        float _3710 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _840 = ((((1.0 - _831) * (_826 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_826 + 1.0))) + _831) * _794;
        float _841 = _762 * 0.5;
        float _842 = _772 * 0.5;
        float _843 = _782 * 0.5;
        float _844 = dot(vec3(_841, _842, _843), vec3(_841, _842, _843));
        float _849 = (_844 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_844);
        float _857 = (dot(vec3(_385, _386, _387), vec3(_849 * _841, _849 * _842, _849 * _843)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _866 = sqrt(((_842 * _842) + (_841 * _841)) + (_843 * _843)) / (_795 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _868 = _867 * 2.0;
        float _872 = (1.0 - _867) / (_867 + 1.0);
        float _3743 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _882 = ((((1.0 - _873) * (_868 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_868 + 1.0))) + _873) * _795;
        float _883 = _763 * 0.5;
        float _884 = _773 * 0.5;
        float _885 = _783 * 0.5;
        float _886 = dot(vec3(_883, _884, _885), vec3(_883, _884, _885));
        float _891 = (_886 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_886);
        float _899 = (dot(vec3(_385, _386, _387), vec3(_891 * _883, _891 * _884, _891 * _885)) + 1.0) * 0.5;
        float _3754 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _908 = sqrt(((_884 * _884) + (_883 * _883)) + (_885 * _885)) / (_796 + 9.9999997473787516355514526367188e-06);
        float _3765 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _910 = _909 * 2.0;
        float _914 = (1.0 - _909) / (_909 + 1.0);
        float _3776 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _924 = ((((1.0 - _915) * (_910 + 2.0)) * exp2(log2(isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_910 + 1.0))) + _915) * _796;
        _932 = _763;
        _934 = _762;
        _935 = _761;
        _936 = _773;
        _937 = _772;
        _938 = _771;
        _939 = _783;
        _940 = _782;
        _941 = _781;
        _942 = _796;
        _943 = _795;
        _944 = _794;
        _945 = cbModelParam._m0[36u].z * (isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0)));
        _946 = cbModelParam._m0[36u].z * (isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0)));
        _947 = cbModelParam._m0[36u].z * (isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0)));
    }
    else
    {
        _932 = _933;
        _934 = _933;
        _935 = _933;
        _936 = _933;
        _937 = _933;
        _938 = _933;
        _939 = _933;
        _940 = _933;
        _941 = _933;
        _942 = _933;
        _943 = _933;
        _944 = _933;
        _945 = 0.0;
        _946 = 0.0;
        _947 = 0.0;
    }
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _973 = fma(_630, cbModelParam._m0[30u].z, fma(_626, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _622));
        float _977 = fma(_630, cbModelParam._m0[31u].z, fma(_626, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _622));
        float _981 = fma(_630, cbModelParam._m0[32u].z, fma(_626, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _622));
        float _1004 = _622 + _385;
        float _1005 = _626 + _386;
        float _1006 = _630 + _387;
        float _1016 = fma(_1006, cbModelParam._m0[30u].z, fma(_1005, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1004)) - _973;
        float _1017 = fma(_1006, cbModelParam._m0[31u].z, fma(_1005, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1004)) - _977;
        float _1018 = fma(_1006, cbModelParam._m0[32u].z, fma(_1005, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1004)) - _981;
        float _1022 = inversesqrt(dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018)));
        float _1035 = ((_1022 * _1016) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_973 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1022 * _1017) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_977 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1022 * _1018) / cbModelParam._m0[35u].z) + ((((((_981 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        float _1072 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1039.x + (-0.5));
        float _1074 = _1072 * (_1039.y + (-0.5));
        float _1075 = _1072 * (_1039.z + (-0.5));
        float _1082 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1046.x + (-0.5));
        float _1084 = _1082 * (_1046.y + (-0.5));
        float _1085 = _1082 * (_1046.z + (-0.5));
        float _1092 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1053.x + (-0.5));
        float _1094 = _1092 * (_1053.y + (-0.5));
        float _1095 = _1092 * (_1053.z + (-0.5));
        float _1102 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1060.x + (-0.5));
        float _1104 = _1102 * (_1060.y + (-0.5));
        float _1105 = _1102 * (_1060.z + (-0.5));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = _1073 * 0.5;
        float _1110 = _1083 * 0.5;
        float _1111 = _1093 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_385, _386, _387), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3839 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1136 + 1.0))) + _1141) * _1106;
        float _1151 = _1074 * 0.5;
        float _1152 = _1084 * 0.5;
        float _1153 = _1094 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(_385, _386, _387), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _3872 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1178 + 1.0))) + _1183) * _1107;
        float _1193 = _1075 * 0.5;
        float _1194 = _1085 * 0.5;
        float _1195 = _1095 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_385, _386, _387), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _3905 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1220 + 1.0))) + _1225) * _1108;
        _1242 = _1075;
        _1243 = _1074;
        _1244 = _1073;
        _1245 = _1085;
        _1246 = _1084;
        _1247 = _1083;
        _1248 = _1095;
        _1249 = _1094;
        _1250 = _1093;
        _1251 = _1108;
        _1252 = _1107;
        _1253 = _1106;
        _1254 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
        _1255 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
        _1256 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
    }
    else
    {
        _1242 = _933;
        _1243 = _933;
        _1244 = _933;
        _1245 = _933;
        _1246 = _933;
        _1247 = _933;
        _1248 = _933;
        _1249 = _933;
        _1250 = _933;
        _1251 = _933;
        _1252 = _933;
        _1253 = _933;
        _1254 = 0.0;
        _1255 = 0.0;
        _1256 = 0.0;
    }
    float _1266 = (cbModelParam._m0[1u].x * (_1254 - _945)) + _945;
    float _1267 = (cbModelParam._m0[1u].x * (_1255 - _946)) + _946;
    float _1268 = (cbModelParam._m0[1u].x * (_1256 - _947)) + _947;
    float _1289 = fma(_1268, cbSceneParam._m0[89u].z, fma(_1267, cbSceneParam._m0[89u].y, _1266 * cbSceneParam._m0[89u].x));
    float _1292 = fma(_1268, cbSceneParam._m0[90u].z, fma(_1267, cbSceneParam._m0[90u].y, _1266 * cbSceneParam._m0[90u].x));
    float _1295 = fma(_1268, cbSceneParam._m0[91u].z, fma(_1267, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1266));
    float _1310 = _566 * 0.5;
    float _1311 = _567 * 0.5;
    float _1312 = _568 * 0.5;
    float _1313 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_1244, _1247, _1250, _1253));
    float _1316 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_1243, _1246, _1249, _1252));
    float _1319 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_1242, _1245, _1248, _1251));
    float _1353;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1326 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_932, _936, _939, _942));
        float _1330 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_934, _937, _940, _943));
        float _1334 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_935, _938, _941, _944));
        float _1341 = dot(vec4(cbModelParam._m0[39u]), vec4(_1310, _1311, _1312, 1.0));
        _1353 = dot(vec3(isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)), isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)), isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1341) ? 0.0 : (isnan(0.0) ? _1341 : max(0.0, _1341))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1353 = 1.0;
    }
    float _1364;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1355 = dot(vec4(cbModelParam._m0[40u]), vec4(_1310, _1311, _1312, 1.0));
        _1364 = dot(vec3(isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)), isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)), isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1355) ? 0.0 : (isnan(0.0) ? _1355 : max(0.0, _1355))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1364 = 1.0;
    }
    float _1368 = (_1364 * cbModelParam._m0[1u].x) + (_1353 * (1.0 - cbModelParam._m0[1u].x));
    float _1378 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _388);
    float _1379 = isnan(_1378) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1378 : min(cbModelParam._m0[25u].z, _1378));
    float _1461;
    float _1463;
    float _1465;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1428 = fma(_630, cbModelParam._m0[13u].z, fma(_626, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _622)) + cbModelParam._m0[13u].w;
        float _1432 = fma(_630, cbModelParam._m0[14u].z, fma(_626, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _622)) + cbModelParam._m0[14u].w;
        float _1436 = fma(_630, cbModelParam._m0[15u].z, fma(_626, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _622)) + cbModelParam._m0[15u].w;
        float _1439 = fma(_568, cbModelParam._m0[13u].z, fma(_567, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _566));
        float _1442 = fma(_568, cbModelParam._m0[14u].z, fma(_567, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _566));
        float _1445 = fma(_568, cbModelParam._m0[15u].z, fma(_567, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _566));
        float _1473;
        if (_1439 > 0.0)
        {
            _1473 = abs((1.0 - _1428) / _1439);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1428 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1473 = frontier_phi_16_14_ladder;
        }
        float _1647;
        if (_1442 > 0.0)
        {
            _1647 = abs((1.0 - _1432) / _1442);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1442 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1432 + 1.0) / _1442);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1647 = frontier_phi_25_21_ladder;
        }
        float _1942;
        if (_1445 > 0.0)
        {
            _1942 = abs((1.0 - _1436) / _1445);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1436 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1942 = frontier_phi_37_32_ladder;
        }
        float _1944 = isnan(_1647) ? _1473 : (isnan(_1473) ? _1647 : min(_1473, _1647));
        float _1945 = isnan(_1942) ? _1944 : (isnan(_1944) ? _1942 : min(_1944, _1942));
        float _1949 = (_1945 * _1439) + _1428;
        float _1950 = (_1945 * _1442) + _1432;
        float _1951 = (_1945 * _1445) + _1436;
        float _1952 = _1945 * 9.9999997473787516355514526367188e-05;
        float _1954 = (-1.0) - _1952;
        float _1956 = _1952 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1951 > _1956) || ((_1951 < _1954) || ((_1950 > _1956) || ((_1950 < _1954) || ((_1949 < _1954) || (_1949 > _1956))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2096 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1951, cbModelParam._m0[9u].z, fma(_1950, cbModelParam._m0[9u].y, _1949 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1951, cbModelParam._m0[10u].z, fma(_1950, cbModelParam._m0[10u].y, _1949 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1951, cbModelParam._m0[11u].z, fma(_1950, cbModelParam._m0[11u].y, _1949 * cbModelParam._m0[11u].x))), _1379);
            frontier_phi_15_37_ladder = _2096.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2096.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2096.z * cbModelParam._m0[1u].y;
        }
        _1461 = frontier_phi_15_37_ladder_1;
        _1463 = frontier_phi_15_37_ladder;
        _1465 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1449 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_566, _567, _568), _1379);
        _1461 = _1449.x * cbModelParam._m0[1u].y;
        _1463 = _1449.y * cbModelParam._m0[1u].y;
        _1465 = _1449.z * cbModelParam._m0[1u].y;
    }
    float _1469 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _388);
    float _1470 = isnan(_1469) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1469 : min(cbModelParam._m0[25u].w, _1469));
    float _1561;
    float _1563;
    float _1565;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1525 = fma(_630, cbModelParam._m0[21u].z, fma(_626, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _622)) + cbModelParam._m0[21u].w;
        float _1529 = fma(_630, cbModelParam._m0[22u].z, fma(_626, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _622)) + cbModelParam._m0[22u].w;
        float _1533 = fma(_630, cbModelParam._m0[23u].z, fma(_626, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _622)) + cbModelParam._m0[23u].w;
        float _1536 = fma(_568, cbModelParam._m0[21u].z, fma(_567, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _566));
        float _1539 = fma(_568, cbModelParam._m0[22u].z, fma(_567, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _566));
        float _1542 = fma(_568, cbModelParam._m0[23u].z, fma(_567, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _566));
        float _1652;
        if (_1536 > 0.0)
        {
            _1652 = abs((1.0 - _1525) / _1536);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1525 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1652 = frontier_phi_27_23_ladder;
        }
        float _1969;
        if (_1539 > 0.0)
        {
            _1969 = abs((1.0 - _1529) / _1539);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1529 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1969 = frontier_phi_39_34_ladder;
        }
        float _2307;
        if (_1542 > 0.0)
        {
            _2307 = abs((1.0 - _1533) / _1542);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1533 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2307 = frontier_phi_49_46_ladder;
        }
        float _2309 = isnan(_1969) ? _1652 : (isnan(_1652) ? _1969 : min(_1652, _1969));
        float _2310 = isnan(_2307) ? _2309 : (isnan(_2309) ? _2307 : min(_2309, _2307));
        float _2314 = (_2310 * _1536) + _1525;
        float _2315 = (_2310 * _1539) + _1529;
        float _2316 = (_2310 * _1542) + _1533;
        float _2317 = _2310 * 9.9999997473787516355514526367188e-05;
        float _2318 = (-1.0) - _2317;
        float _2320 = _2317 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2316 > _2320) || ((_2316 < _2318) || ((_2315 > _2320) || ((_2315 < _2318) || ((_2314 < _2318) || (_2314 > _2320))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2438 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2316, cbModelParam._m0[17u].z, fma(_2315, cbModelParam._m0[17u].y, _2314 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2316, cbModelParam._m0[18u].z, fma(_2315, cbModelParam._m0[18u].y, _2314 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2316, cbModelParam._m0[19u].z, fma(_2315, cbModelParam._m0[19u].y, _2314 * cbModelParam._m0[19u].x))), _1470);
            frontier_phi_24_49_ladder = _2438.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2438.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2438.x * cbModelParam._m0[1u].z;
        }
        _1561 = frontier_phi_24_49_ladder_2;
        _1563 = frontier_phi_24_49_ladder_1;
        _1565 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1545 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_566, _567, _568), _1470);
        _1561 = _1545.x * cbModelParam._m0[1u].z;
        _1563 = _1545.y * cbModelParam._m0[1u].z;
        _1565 = _1545.z * cbModelParam._m0[1u].z;
    }
    float _1578 = (((_593 * _543) + _594) * _558) * ((cbModelParam._m0[1u].w * (_1561 - _1461)) + _1461);
    float _1580 = (((_593 * _545) + _594) * _558) * ((cbModelParam._m0[1u].w * (_1563 - _1463)) + _1463);
    float _1582 = (((_593 * _546) + _594) * _558) * ((cbModelParam._m0[1u].w * (_1565 - _1465)) + _1465);
    float _1585 = fma(_1582, cbSceneParam._m0[89u].z, fma(_1580, cbSceneParam._m0[89u].y, _1578 * cbSceneParam._m0[89u].x));
    float _1588 = fma(_1582, cbSceneParam._m0[90u].z, fma(_1580, cbSceneParam._m0[90u].y, _1578 * cbSceneParam._m0[90u].x));
    float _1591 = fma(_1582, cbSceneParam._m0[91u].z, fma(_1580, cbSceneParam._m0[91u].y, _1578 * cbSceneParam._m0[91u].x));
    float _1626 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1630 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1634 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1638 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1639 = _1626 / _1638;
    float _1640 = _1630 / _1638;
    float _1641 = _1634 / _1638;
    float _1788;
    float _1789;
    float _1790;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1668 = ((uint(_1641 > cbSceneParam._m0[59u].y) + uint(_1641 > cbSceneParam._m0[59u].x)) + uint(_1641 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1669 = _1668 + 43u;
        uint _1677 = _1668 + 44u;
        uint _1685 = _1668 + 45u;
        uint _1693 = _1668 + 46u;
        float _1704 = fma(_1638, cbSceneParam._m0[_1669].w, fma(_1634, cbSceneParam._m0[_1669].z, fma(_1630, cbSceneParam._m0[_1669].y, _1626 * cbSceneParam._m0[_1669].x)));
        float _1708 = fma(_1638, cbSceneParam._m0[_1677].w, fma(_1634, cbSceneParam._m0[_1677].z, fma(_1630, cbSceneParam._m0[_1677].y, _1626 * cbSceneParam._m0[_1677].x)));
        float _1716 = fma(_1638, cbSceneParam._m0[_1693].w, fma(_1634, cbSceneParam._m0[_1693].z, fma(_1630, cbSceneParam._m0[_1693].y, _1626 * cbSceneParam._m0[_1693].x)));
        float _1721 = cbSceneParam._m0[33u].z * _1716;
        float _1723 = cbSceneParam._m0[33u].w * _1716;
        float _1726 = fma(_1638, cbSceneParam._m0[_1685].w, fma(_1634, cbSceneParam._m0[_1685].z, fma(_1630, cbSceneParam._m0[_1685].y, _1626 * cbSceneParam._m0[_1685].x))) / _1716;
        float _1774 = (cbSceneParam._m0[33u].x - sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641))) * cbSceneParam._m0[33u].y;
        float _4031 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1781 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1721 + _1704) / _1716, (_1723 + _1708) / _1716), _1726), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1723 + _1704) / _1716, (_1708 - _1721) / _1716), _1726), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1704 - _1721) / _1716, (_1708 - _1723) / _1716), _1726), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1704 - _1723) / _1716, (_1721 + _1708) / _1716), _1726), 0.0)).x), vec4(0.25)));
        _1788 = 1.0 - (_1781 * cbSceneParam._m0[34u].x);
        _1789 = 1.0 - (_1781 * cbSceneParam._m0[34u].y);
        _1790 = 1.0 - (_1781 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1788 = 1.0;
        _1789 = 1.0;
        _1790 = 1.0;
    }
    float _1854;
    float _1856;
    float _1858;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1842 = fma(_1638, cbSceneParam._m0[63u].w, fma(_1634, cbSceneParam._m0[63u].z, fma(_1630, cbSceneParam._m0[63u].y, _1626 * cbSceneParam._m0[63u].x)));
        float _1843 = fma(_1638, cbSceneParam._m0[60u].w, fma(_1634, cbSceneParam._m0[60u].z, fma(_1630, cbSceneParam._m0[60u].y, _1626 * cbSceneParam._m0[60u].x))) / _1842;
        float _1844 = fma(_1638, cbSceneParam._m0[61u].w, fma(_1634, cbSceneParam._m0[61u].z, fma(_1630, cbSceneParam._m0[61u].y, _1626 * cbSceneParam._m0[61u].x))) / _1842;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1843 >= cbSceneParam._m0[64u].x) && (_1844 >= cbSceneParam._m0[64u].y)) && (_1843 <= cbSceneParam._m0[64u].z)) && (_1844 <= cbSceneParam._m0[64u].w))
        {
            float _1982 = fma(_1638, cbSceneParam._m0[62u].w, fma(_1634, cbSceneParam._m0[62u].z, fma(_1630, cbSceneParam._m0[62u].y, _1626 * cbSceneParam._m0[62u].x))) / _1842;
            float _1986 = isnan(cbSceneParam._m0[41u].w) ? _1982 : (isnan(_1982) ? cbSceneParam._m0[41u].w : max(_1982, cbSceneParam._m0[41u].w));
            float _2029 = (cbSceneParam._m0[33u].x - sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641))) * cbSceneParam._m0[33u].y;
            float _4047 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
            float _2036 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1843, cbSceneParam._m0[33u].w + _1844), _1986), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1843, _1844 - cbSceneParam._m0[33u].z), _1986), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1843 - cbSceneParam._m0[33u].z, _1844 - cbSceneParam._m0[33u].w), _1986), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1843 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1844), _1986), 0.0)).x), vec4(0.25)));
            float _2040 = 1.0 - (_2036 * cbSceneParam._m0[34u].x);
            float _2041 = 1.0 - (_2036 * cbSceneParam._m0[34u].y);
            float _2042 = 1.0 - (_2036 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2041) ? _1789 : (isnan(_1789) ? _2041 : min(_1789, _2041));
            frontier_phi_36_35_ladder_1 = isnan(_2042) ? _1790 : (isnan(_1790) ? _2042 : min(_1790, _2042));
            frontier_phi_36_35_ladder_2 = isnan(_2040) ? _1788 : (isnan(_1788) ? _2040 : min(_1788, _2040));
        }
        else
        {
            frontier_phi_36_35_ladder = _1789;
            frontier_phi_36_35_ladder_1 = _1790;
            frontier_phi_36_35_ladder_2 = _1788;
        }
        _1854 = frontier_phi_36_35_ladder_2;
        _1856 = frontier_phi_36_35_ladder;
        _1858 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1854 = _1788;
        _1856 = _1789;
        _1858 = _1790;
    }
    uvec4 _1863 = floatBitsToUint(cbInstanceData._m0[_517 + 5u]);
    uint _1865 = _1863.x * 14u;
    uint _1866 = _1865 + 13u;
    float _1873 = _558 + (-1.0);
    float _1878 = (cbLight._m0[_1866].x * _1873) + 1.0;
    float _1879 = (cbLight._m0[_1866].y * _1873) + 1.0;
    float _1880 = (cbLight._m0[_1866].z * _1873) + 1.0;
    float _1881 = (cbLight._m0[_1866].w * _1873) + 1.0;
    uint _1882 = _1865 + 5u;
    float _1888 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
    uint _1892 = _1865 + 4u;
    float _1901 = isnan(1.0) ? _1878 : (isnan(_1878) ? 1.0 : min(_1878, 1.0));
    uint _1905 = _1865 | 1u;
    float _1916 = dot(vec3(cbLight._m0[_1865].xyz), vec3(_385, _386, _387));
    float _1919 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_385, _386, _387));
    float _4083 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _4094 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1924 = (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * 0.3183098733425140380859375;
    float _1926 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * 0.3183098733425140380859375;
    float _1933 = ((cbLight._m0[_1882].x * _1888) * _1926) + (((cbLight._m0[_1892].x * _1854) * _1901) * _1924);
    float _1934 = ((_1888 * cbLight._m0[_1882].y) * _1926) + (((cbLight._m0[_1892].y * _1856) * _1901) * _1924);
    float _1935 = ((_1888 * cbLight._m0[_1882].z) * _1926) + (((cbLight._m0[_1892].z * _1858) * _1901) * _1924);
    uvec4 _1939 = floatBitsToUint(cbLight._m0[_1865 + 12u]);
    bool _1941 = _1939.x == 0u;
    float _2043;
    float _2045;
    float _2047;
    if (_1941)
    {
        _2043 = _1933;
        _2045 = _1934;
        _2047 = _1935;
    }
    else
    {
        uint _2051 = _1865 + 6u;
        float _2067 = (dot(vec3(cbLight._m0[_1865 + 2u].xyz), vec3(_385, _386, _387)) * 0.5) + 0.5;
        float _2068 = _2067 * _2067;
        float _4105 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2069 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _2070 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
        _2043 = (((cbLight._m0[_2051].x * 0.3183098733425140380859375) * _2069) * _2070) + _1933;
        _2045 = (((cbLight._m0[_2051].y * 0.3183098733425140380859375) * _2069) * _2070) + _1934;
        _2047 = (((cbLight._m0[_2051].z * 0.3183098733425140380859375) * _2069) * _2070) + _1935;
    }
    bool _2050 = _1939.y == 0u;
    float _2105;
    float _2107;
    float _2109;
    if (_2050)
    {
        _2105 = _2043;
        _2107 = _2045;
        _2109 = _2047;
    }
    else
    {
        uint _2278 = _1865 + 7u;
        float _2294 = (dot(vec3(cbLight._m0[_1865 + 3u].xyz), vec3(_385, _386, _387)) * 0.5) + 0.5;
        float _2295 = _2294 * _2294;
        float _4121 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2296 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _2297 = isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0));
        _2105 = (((cbLight._m0[_2278].x * 0.3183098733425140380859375) * _2296) * _2297) + _2043;
        _2107 = (((cbLight._m0[_2278].y * 0.3183098733425140380859375) * _2296) * _2297) + _2045;
        _2109 = (((cbLight._m0[_2278].z * 0.3183098733425140380859375) * _2296) * _2297) + _2047;
    }
    uint _2112 = _1865 + 8u;
    float _2125 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1865].w)) * _388) * 0.949999988079071044921875);
    float _2126 = _2125 * _2125;
    float _2127 = cbLight._m0[_1865].x + _468;
    float _2128 = cbLight._m0[_1865].y + _469;
    float _2129 = cbLight._m0[_1865].z + _470;
    float _2133 = inversesqrt(dot(vec3(_2127, _2128, _2129), vec3(_2127, _2128, _2129)));
    float _2134 = _2133 * _2127;
    float _2135 = _2133 * _2128;
    float _2136 = _2133 * _2129;
    float _2137 = dot(vec3(_385, _386, _387), vec3(cbLight._m0[_1865].xyz));
    float _4137 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2140 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _4148 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _2141 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _2142 = dot(vec3(_385, _386, _387), vec3(_2134, _2135, _2136));
    float _4159 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2145 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _2146 = dot(vec3(cbLight._m0[_1865].xyz), vec3(_2134, _2135, _2136));
    float _4170 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2150 = _2126 * _2126;
    float _2154 = ((_2145 * _2145) * (_2150 + (-1.0))) + 1.0;
    float _2162 = exp2(log2(1.0 - (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) * 5.0);
    float _2163 = 0.959999978542327880859375 - _540;
    float _2165 = 0.959999978542327880859375 - _541;
    float _2166 = 0.959999978542327880859375 - _542;
    float _2173 = 1.0 - _2126;
    float _2184 = (0.5 / (((_2141 * ((_2140 * _2173) + _2126)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2173) + _2126) * _2140))) * _2140;
    float _4181 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2186 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_2150 / ((_2154 * _2154) * 3.141590118408203125));
    uint _2200 = _1865 + 9u;
    float _2211 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1905].w)) * _388) * 0.949999988079071044921875);
    float _2212 = _2211 * _2211;
    float _2213 = cbLight._m0[_1905].x + _468;
    float _2214 = cbLight._m0[_1905].y + _469;
    float _2215 = cbLight._m0[_1905].z + _470;
    float _2219 = inversesqrt(dot(vec3(_2213, _2214, _2215), vec3(_2213, _2214, _2215)));
    float _2220 = _2219 * _2213;
    float _2221 = _2219 * _2214;
    float _2222 = _2219 * _2215;
    float _2223 = dot(vec3(_385, _386, _387), vec3(cbLight._m0[_1905].xyz));
    float _4192 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2226 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _2227 = dot(vec3(_385, _386, _387), vec3(_2220, _2221, _2222));
    float _4203 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2230 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _2231 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_2220, _2221, _2222));
    float _4214 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2235 = _2212 * _2212;
    float _2239 = ((_2230 * _2230) * (_2235 + (-1.0))) + 1.0;
    float _2246 = exp2(log2(1.0 - (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) * 5.0);
    float _2253 = 1.0 - _2212;
    float _2263 = (0.5 / (((_2141 * ((_2226 * _2253) + _2212)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2253) + _2212) * _2226))) * _2226;
    float _4225 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2265 = (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_2235 / ((_2239 * _2239) * 3.141590118408203125));
    float _2275 = (((((_2246 * _2163) + _543) * cbLight._m0[_2200].x) * _2265) * _1888) + ((((cbLight._m0[_2112].x * _1854) * ((_2162 * _2163) + _543)) * _2186) * _1901);
    float _2276 = (((((_2246 * _2165) + _545) * cbLight._m0[_2200].y) * _2265) * _1888) + ((((cbLight._m0[_2112].y * _1856) * ((_2162 * _2165) + _545)) * _2186) * _1901);
    float _2277 = (((((_2246 * _2166) + _546) * cbLight._m0[_2200].z) * _2265) * _1888) + ((((cbLight._m0[_2112].z * _1858) * ((_2162 * _2166) + _546)) * _2186) * _1901);
    float _2333;
    float _2335;
    float _2337;
    if (_1941)
    {
        _2333 = _2275;
        _2335 = _2276;
        _2337 = _2277;
    }
    else
    {
        uint _2339 = _1865 + 2u;
        uint _2343 = _1865 + 10u;
        float _2357 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2339].w)) * _388) * 0.949999988079071044921875);
        float _2358 = _2357 * _2357;
        float _2359 = cbLight._m0[_2339].x + _468;
        float _2360 = cbLight._m0[_2339].y + _469;
        float _2361 = cbLight._m0[_2339].z + _470;
        float _2365 = inversesqrt(dot(vec3(_2359, _2360, _2361), vec3(_2359, _2360, _2361)));
        float _2366 = _2365 * _2359;
        float _2367 = _2365 * _2360;
        float _2368 = _2365 * _2361;
        float _2369 = dot(vec3(_385, _386, _387), vec3(cbLight._m0[_2339].xyz));
        float _4236 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2372 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _2373 = dot(vec3(_385, _386, _387), vec3(_2366, _2367, _2368));
        float _4247 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2376 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _2377 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_2366, _2367, _2368));
        float _4258 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2381 = _2358 * _2358;
        float _2385 = ((_2376 * _2376) * (_2381 + (-1.0))) + 1.0;
        float _2392 = exp2(log2(1.0 - (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) * 5.0);
        float _2399 = 1.0 - _2358;
        float _2409 = (0.5 / (((_2141 * ((_2372 * _2399) + _2358)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2399) + _2358) * _2372))) * _2372;
        float _4269 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2411 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2381 / ((_2385 * _2385) * 3.141590118408203125));
        float _2412 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
        _2333 = (((((_2392 * _2163) + _543) * cbLight._m0[_2343].x) * _2411) * _2412) + _2275;
        _2335 = (((((_2392 * _2165) + _545) * cbLight._m0[_2343].y) * _2411) * _2412) + _2276;
        _2337 = (((((_2392 * _2166) + _546) * cbLight._m0[_2343].z) * _2411) * _2412) + _2277;
    }
    float _2443;
    float _2445;
    float _2447;
    if (_2050)
    {
        _2443 = _2333;
        _2445 = _2335;
        _2447 = _2337;
    }
    else
    {
        uint _2454 = _1865 + 3u;
        uint _2458 = _1865 + 11u;
        float _2472 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2454].w)) * _388) * 0.949999988079071044921875);
        float _2473 = _2472 * _2472;
        float _2474 = cbLight._m0[_2454].x + _468;
        float _2475 = cbLight._m0[_2454].y + _469;
        float _2476 = cbLight._m0[_2454].z + _470;
        float _2480 = inversesqrt(dot(vec3(_2474, _2475, _2476), vec3(_2474, _2475, _2476)));
        float _2481 = _2480 * _2474;
        float _2482 = _2480 * _2475;
        float _2483 = _2480 * _2476;
        float _2484 = dot(vec3(_385, _386, _387), vec3(cbLight._m0[_2454].xyz));
        float _4285 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2487 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _2488 = dot(vec3(_385, _386, _387), vec3(_2481, _2482, _2483));
        float _4296 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2491 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _2492 = dot(vec3(cbLight._m0[_2454].xyz), vec3(_2481, _2482, _2483));
        float _4307 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2496 = _2473 * _2473;
        float _2500 = ((_2491 * _2491) * (_2496 + (-1.0))) + 1.0;
        float _2507 = exp2(log2(1.0 - (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * 5.0);
        float _2514 = 1.0 - _2473;
        float _2524 = (0.5 / (((_2141 * ((_2487 * _2514) + _2473)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2514) + _2473) * _2487))) * _2487;
        float _4318 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2526 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2496 / ((_2500 * _2500) * 3.141590118408203125));
        float _2527 = isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0));
        _2443 = (((((_2507 * _2163) + _543) * cbLight._m0[_2458].x) * _2526) * _2527) + _2333;
        _2445 = (((((_2507 * _2165) + _545) * cbLight._m0[_2458].y) * _2526) * _2527) + _2335;
        _2447 = (((((_2507 * _2166) + _546) * cbLight._m0[_2458].z) * _2526) * _2527) + _2337;
    }
    float _2592;
    float _2594;
    float _2596;
    float _2598;
    float _2600;
    float _2602;
    if (_1863.y == 0u)
    {
        uvec4 _2548 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2549 = _2548.x;
        uint _2560 = uint((float(_2548.y) * floor(float(uint(cbSceneParam._m0[85u].y * _477) / _2549))) + floor(float(uint(cbSceneParam._m0[85u].x * _476) / _2549)));
        float _2570 = (log2(_1641 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2571 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        uint _2574 = uint(isnan(14.0) ? _2571 : (isnan(_2571) ? 14.0 : min(_2571, 14.0)));
        uvec4 _2579 = texelFetch(g_lightClusterGridBuffer, int(((_2574 << 2u) + (_2560 << 6u)) >> 2u));
        uint _2580 = _2579.x;
        uint _2581 = _2548.z;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        if (((((1u << ((_2581 >> 4u) & 15u)) + 4294967295u) & _2580) == 0u) || ((_2581 & 240u) == 0u))
        {
            _2662 = 0.0;
            _2664 = 0.0;
            _2666 = 0.0;
            _2668 = 0.0;
            _2670 = 0.0;
            _2672 = 0.0;
        }
        else
        {
            float _2663;
            float _2665;
            float _2667;
            float _2669;
            float _2671;
            float _2673;
            float _2806 = 0.0;
            float _2807 = 0.0;
            float _2808 = 0.0;
            float _2809 = 0.0;
            float _2810 = 0.0;
            float _2811 = 0.0;
            uint _2812 = 0u;
            uint _2821;
            bool _2822;
            for (;;)
            {
                _2821 = texelFetch(g_lightClassification, int((((_2574 << 5u) + (_2560 << 9u)) + (_2812 << 2u)) >> 2u)).x;
                _2822 = _2821 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2822)
                {
                    frontier_phi_68_pred = _2811;
                    frontier_phi_68_pred_1 = _2810;
                    frontier_phi_68_pred_2 = _2809;
                    frontier_phi_68_pred_3 = _2807;
                    frontier_phi_68_pred_4 = _2806;
                    frontier_phi_68_pred_5 = _2808;
                }
                else
                {
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    uint _2936;
                    _2930 = _2806;
                    _2931 = _2807;
                    _2932 = _2808;
                    _2933 = _2809;
                    _2934 = _2810;
                    _2935 = _2811;
                    _2936 = _2821;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    for (;;)
                    {
                        uint _2940 = uint(findLSB(_2936)) + (_2812 << 5u);
                        uint _2937 = (_2936 + 4294967295u) & _2936;
                        uint _2942 = _2940 * 48u;
                        vec4 _2956 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2942)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 3u)).x));
                        uint _2962 = (_2940 * 48u) + 4u;
                        vec4 _2975 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2962)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 3u)).x));
                        uint _2981 = (_2940 * 48u) + 8u;
                        vec3 _2992 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2981)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 2u)).x));
                        float _2996 = _2956.x - _1639;
                        float _2997 = _2956.y - _1640;
                        float _2998 = _2956.z - _1641;
                        float _2999 = dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998));
                        float _3002 = inversesqrt(_2999);
                        float _3003 = _3002 * _2996;
                        float _3004 = _3002 * _2997;
                        float _3005 = _3002 * _2998;
                        float _3006 = dot(vec3(_498, _501, _504), vec3(_3003, _3004, _3005));
                        float _3011 = 1.0 - (_2999 * _2956.w);
                        float _4344 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3012 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                        float _3013 = sqrt(_2999) * _2975.w;
                        float _3016 = 1.39999997615814208984375 / (_3013 + 1.39999997615814208984375);
                        float _3017 = _3016 * _3016;
                        float _3020 = ((1.0 - _3017) * _3006) + _3017;
                        float _3023 = _3013 * _3013;
                        float _3027 = ((isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0))) * _3012) / ((_3023 * 0.699999988079071044921875) + 1.0);
                        float _3031 = (-0.0) - _1639;
                        float _3032 = (-0.0) - _1640;
                        float _3033 = (-0.0) - _1641;
                        float _3037 = inversesqrt(dot(vec3(_3031, _3032, _3033), vec3(_3031, _3032, _3033)));
                        float _3038 = _3037 * _3031;
                        float _3039 = _3037 * _3032;
                        float _3040 = _3037 * _3033;
                        float _3047 = exp2(log2(1.0 / ((_3023 * 3.5) + 5.0)) * 0.25);
                        float _3048 = 1.0 - _574;
                        float _3055 = sqrt(1.0 - ((1.0 - (_3048 * _3048)) * (1.0 - (_3047 * _3047))));
                        float _3056 = _3055 * _3055;
                        float _3057 = _3056 * _3056;
                        float _3058 = _3038 + _3003;
                        float _3059 = _3039 + _3004;
                        float _3060 = _3040 + _3005;
                        float _3064 = inversesqrt(dot(vec3(_3058, _3059, _3060), vec3(_3058, _3059, _3060)));
                        float _3068 = dot(vec3(_498, _501, _504), vec3(_3038, _3039, _3040));
                        float _4360 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3071 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                        float _3072 = dot(vec3(_498, _501, _504), vec3(_3064 * _3058, _3064 * _3059, _3064 * _3060));
                        float _4371 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3075 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                        float _3079 = ((_3075 * _3075) * (_3057 + (-1.0))) + 1.0;
                        float _3080 = _3016 * _3056;
                        float _3081 = _3080 * _3080;
                        float _3084 = ((1.0 - _3081) * _3006) + _3081;
                        float _4382 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                        float _3085 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                        float _3086 = 1.0 - _3056;
                        float _3096 = (0.5 / (((_3085 * ((_3071 * _3086) + _3056)) + 9.9999999392252902907785028219223e-09) + (((_3085 * _3086) + _3056) * _3071))) * _3085;
                        float _4393 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                        float _3107 = (((_3057 * 3.1415927410125732421875) * (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) / ((_3079 * _3079) * ((_3023 * 2.1991131305694580078125) + 3.141590118408203125))) * _3012;
                        _2865 = (_3027 * _2975.x) + _2933;
                        _2866 = (_3027 * _2975.y) + _2934;
                        _2867 = (_3027 * _2975.z) + _2935;
                        _2862 = (_3107 * _2992.x) + _2930;
                        _2863 = (_3107 * _2992.y) + _2931;
                        _2864 = (_3107 * _2992.z) + _2932;
                        if (_2937 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2930 = _2862;
                            _2931 = _2863;
                            _2932 = _2864;
                            _2933 = _2865;
                            _2934 = _2866;
                            _2935 = _2867;
                            _2936 = _2937;
                        }
                    }
                    frontier_phi_68_pred = _2867;
                    frontier_phi_68_pred_1 = _2866;
                    frontier_phi_68_pred_2 = _2865;
                    frontier_phi_68_pred_3 = _2863;
                    frontier_phi_68_pred_4 = _2862;
                    frontier_phi_68_pred_5 = _2864;
                }
                _2673 = frontier_phi_68_pred;
                _2671 = frontier_phi_68_pred_1;
                _2669 = frontier_phi_68_pred_2;
                _2665 = frontier_phi_68_pred_3;
                _2663 = frontier_phi_68_pred_4;
                _2667 = frontier_phi_68_pred_5;
                uint _2813 = _2812 + 1u;
                if (_2813 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2806 = _2663;
                    _2807 = _2665;
                    _2808 = _2667;
                    _2809 = _2669;
                    _2810 = _2671;
                    _2811 = _2673;
                    _2812 = _2813;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2662 = _2663;
            _2664 = _2665;
            _2666 = _2667;
            _2668 = _2669;
            _2670 = _2671;
            _2672 = _2673;
        }
        uvec4 _2676 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2677 = _2676.z;
        uint _2679 = (_2677 >> 8u) & 15u;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        if (((4294967295u << _2679) & _2580) == 0u)
        {
            _2774 = _2662;
            _2776 = _2664;
            _2778 = _2666;
            _2780 = _2668;
            _2782 = _2670;
            _2784 = _2672;
        }
        else
        {
            float _2799 = inversesqrt(dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641)));
            float _2800 = _2799 * _1639;
            float _2801 = _2799 * _1640;
            float _2802 = _2799 * _1641;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2679 < ((_2677 >> 12u) & 15u))
            {
                float _2775;
                float _2777;
                float _2779;
                float _2781;
                float _2783;
                float _2785;
                float _2913 = _2662;
                float _2914 = _2664;
                float _2915 = _2666;
                float _2916 = _2668;
                float _2917 = _2670;
                float _2918 = _2672;
                uint _2919 = _2679;
                uint _2928;
                bool _2929;
                for (;;)
                {
                    _2928 = texelFetch(g_lightClassification, int((((_2574 << 5u) + (_2560 << 9u)) + (_2919 << 2u)) >> 2u)).x;
                    _2929 = _2928 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2929)
                    {
                        frontier_phi_74_pred = _2915;
                        frontier_phi_74_pred_1 = _2914;
                        frontier_phi_74_pred_2 = _2913;
                        frontier_phi_74_pred_3 = _2918;
                        frontier_phi_74_pred_4 = _2917;
                        frontier_phi_74_pred_5 = _2916;
                    }
                    else
                    {
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3125 = _2913;
                        float _3126 = _2914;
                        float _3127 = _2915;
                        float _3128 = _2916;
                        float _3129 = _2917;
                        float _3130 = _2918;
                        uint _3131 = _2928;
                        uint _3132;
                        vec4 _3157;
                        float _3158;
                        vec4 _3173;
                        vec3 _3185;
                        vec4 _3201;
                        vec4 _3216;
                        float _3263;
                        bool _3264;
                        for (;;)
                        {
                            uint _3142 = ((_2919 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3131));
                            _3132 = (_3131 + 4294967295u) & _3131;
                            uint _3144 = _3142 * 40u;
                            _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            _3158 = _3157.w;
                            uint _3160 = (_3142 * 40u) + 4u;
                            _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            uint _3175 = (_3142 * 40u) + 8u;
                            _3185 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3175)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 2u)).x));
                            uint _3188 = (_3142 * 40u) + 16u;
                            _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            uint _3203 = (_3142 * 40u) + 20u;
                            _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            uint _3219 = (_3142 * 40u) + 24u;
                            vec4 _3232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 3u)).x));
                            uint _3238 = (_3142 * 40u) + 28u;
                            vec4 _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            _3263 = fma(_1641, _3251.z, fma(_1640, _3251.y, _3251.x * _1639)) + _3251.w;
                            _3264 = !((fma(_1641, _3232.z, fma(_1640, _3232.y, _3232.x * _1639)) + _3232.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3264)
                            {
                                float _3291 = _3157.x - _1639;
                                float _3292 = _3157.y - _1640;
                                float _3293 = _3157.z - _1641;
                                float _3294 = dot(vec3(_3291, _3292, _3293), vec3(_3291, _3292, _3293));
                                float _3297 = inversesqrt(_3294);
                                float _3298 = _3297 * _3291;
                                float _3299 = _3297 * _3292;
                                float _3300 = _3297 * _3293;
                                float _3304 = 1.0 - (_3294 / (_3158 * _3158));
                                float _4404 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                                float _3305 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                                float _3309 = sqrt(_3294) * _3173.w;
                                float _3311 = 1.39999997615814208984375 / (_3309 + 1.39999997615814208984375);
                                float _3312 = _3311 * _3311;
                                float _3315 = ((1.0 - _3312) * dot(vec3(_3298, _3299, _3300), vec3(_498, _501, _504))) + _3312;
                                float _3318 = _3309 * _3309;
                                float _3322 = (fma(_1641, _3201.z, fma(_1640, _3201.y, _3201.x * _1639)) + _3201.w) / _3263;
                                float _3323 = (fma(_1641, _3216.z, fma(_1640, _3216.y, _3216.x * _1639)) + _3216.w) / _3263;
                                float _3327 = 1.0 - dot(vec2(_3322, _3323), vec2(_3322, _3323));
                                float _4420 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3328 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                                float _3329 = _3328 * (((isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0))) * _3305) / ((_3318 * 0.699999988079071044921875) + 1.0));
                                float _3341 = exp2(log2(1.0 / ((_3318 * 3.5) + 5.0)) * 0.25);
                                float _3342 = 1.0 - _574;
                                float _3349 = sqrt(1.0 - ((1.0 - (_3342 * _3342)) * (1.0 - (_3341 * _3341))));
                                float _3350 = _3349 * _3349;
                                float _3351 = _3350 * _3350;
                                float _3352 = _3298 - _2800;
                                float _3353 = _3299 - _2801;
                                float _3354 = _3300 - _2802;
                                float _3358 = inversesqrt(dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354)));
                                float _3362 = dot(vec3(_498, _501, _504), vec3((-0.0) - _2800, (-0.0) - _2801, (-0.0) - _2802));
                                float _4431 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3365 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                                float _3366 = dot(vec3(_498, _501, _504), vec3(_3358 * _3352, _3358 * _3353, _3358 * _3354));
                                float _4442 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                                float _3369 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                                float _3373 = ((_3369 * _3369) * (_3351 + (-1.0))) + 1.0;
                                float _3374 = _3311 * _3350;
                                float _3375 = _3374 * _3374;
                                float _3381 = ((1.0 - _3375) * dot(vec3(_498, _501, _504), vec3(_3298, _3299, _3300))) + _3375;
                                float _4453 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3382 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                                float _3383 = 1.0 - _3350;
                                float _3393 = (0.5 / (((_3382 * ((_3365 * _3383) + _3350)) + 9.9999999392252902907785028219223e-09) + (((_3382 * _3383) + _3350) * _3365))) * _3382;
                                float _4464 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3403 = (_3328 * _3305) * (((_3351 * 3.1415927410125732421875) * (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) / ((_3373 * _3373) * ((_3318 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3403 * _3185.z;
                                frontier_phi_80_pred_1 = _3403 * _3185.y;
                                frontier_phi_80_pred_2 = _3403 * _3185.x;
                                frontier_phi_80_pred_3 = _3329 * _3173.z;
                                frontier_phi_80_pred_4 = _3329 * _3173.y;
                                frontier_phi_80_pred_5 = _3329 * _3173.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3409 = frontier_phi_80_pred;
                            _3408 = frontier_phi_80_pred_1;
                            _3407 = frontier_phi_80_pred_2;
                            _3412 = frontier_phi_80_pred_3;
                            _3411 = frontier_phi_80_pred_4;
                            _3410 = frontier_phi_80_pred_5;
                            _3115 = _3410 + _3128;
                            _3116 = _3411 + _3129;
                            _3117 = _3412 + _3130;
                            _3112 = _3407 + _3125;
                            _3113 = _3408 + _3126;
                            _3114 = _3409 + _3127;
                            if (_3132 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3114;
                                _3128 = _3115;
                                _3129 = _3116;
                                _3130 = _3117;
                                _3131 = _3132;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3114;
                        frontier_phi_74_pred_1 = _3113;
                        frontier_phi_74_pred_2 = _3112;
                        frontier_phi_74_pred_3 = _3117;
                        frontier_phi_74_pred_4 = _3116;
                        frontier_phi_74_pred_5 = _3115;
                    }
                    _2779 = frontier_phi_74_pred;
                    _2777 = frontier_phi_74_pred_1;
                    _2775 = frontier_phi_74_pred_2;
                    _2785 = frontier_phi_74_pred_3;
                    _2783 = frontier_phi_74_pred_4;
                    _2781 = frontier_phi_74_pred_5;
                    uint _2920 = _2919 + 1u;
                    if (_2920 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2913 = _2775;
                        _2914 = _2777;
                        _2915 = _2779;
                        _2916 = _2781;
                        _2917 = _2783;
                        _2918 = _2785;
                        _2919 = _2920;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2783;
                frontier_phi_62_63_ladder_1 = _2781;
                frontier_phi_62_63_ladder_2 = _2779;
                frontier_phi_62_63_ladder_3 = _2785;
                frontier_phi_62_63_ladder_4 = _2777;
                frontier_phi_62_63_ladder_5 = _2775;
            }
            else
            {
                frontier_phi_62_63_ladder = _2670;
                frontier_phi_62_63_ladder_1 = _2668;
                frontier_phi_62_63_ladder_2 = _2666;
                frontier_phi_62_63_ladder_3 = _2672;
                frontier_phi_62_63_ladder_4 = _2664;
                frontier_phi_62_63_ladder_5 = _2662;
            }
            _2774 = frontier_phi_62_63_ladder_5;
            _2776 = frontier_phi_62_63_ladder_4;
            _2778 = frontier_phi_62_63_ladder_2;
            _2780 = frontier_phi_62_63_ladder_1;
            _2782 = frontier_phi_62_63_ladder;
            _2784 = frontier_phi_62_63_ladder_3;
        }
        float _2789 = isnan(1.0) ? _558 : (isnan(_558) ? 1.0 : min(_558, 1.0));
        _2592 = (_2789 * _2780) + _2105;
        _2594 = (_2789 * _2782) + _2107;
        _2596 = (_2789 * _2784) + _2109;
        _2598 = ((_2774 * _543) * _2789) + _2443;
        _2600 = ((_2776 * _545) * _2789) + _2445;
        _2602 = ((_2778 * _546) * _2789) + _2447;
    }
    else
    {
        _2592 = _2105;
        _2594 = _2107;
        _2596 = _2109;
        _2598 = _2443;
        _2600 = _2445;
        _2602 = _2447;
    }
    float _4480 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _4491 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _4502 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _2619 = ((isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2592 + ((isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))) * _558))) + ((_2598 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _1368)) * cbPerFrame._m0[3u].x);
    float _2620 = ((isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2594 + ((isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))) * _558))) + ((_2600 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _1368)) * cbPerFrame._m0[3u].x);
    float _2621 = ((isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_2596 + ((isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))) * _558))) + ((_2602 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _1368)) * cbPerFrame._m0[3u].x);
    uint _2625 = _517 + 6u;
    float _2633 = _476 / cbSceneParam._m0[86u].x;
    float _2634 = _477 / cbSceneParam._m0[86u].y;
    vec4 _2648 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2633, _2634, (log2((isnan(cbSceneParam._m0[77u].w) ? _408 : (isnan(_408) ? cbSceneParam._m0[77u].w : min(_408, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2650 = _2648.x;
    float _2651 = _2648.y;
    float _2652 = _2648.z;
    float _2653 = _2648.w;
    float _2724;
    float _2726;
    float _2728;
    float _2730;
    if (_408 > cbSceneParam._m0[78u].w)
    {
        float _2687 = isnan(_408) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _408 : min(cbSceneParam._m0[80u].w, _408));
        float _2688 = _2687 / _408;
        float _2699 = _2688 * _461;
        float _2700 = _462 * _2688;
        float _2701 = (-0.0) - _2700;
        float _2702 = _2688 * _463;
        float _2704 = (cbSceneParam._m0[77u].w * _2701) / _2687;
        float _2705 = _2704 + cbSceneParam._m0[79u].w;
        float _2706 = cbSceneParam._m0[79u].w - _2700;
        float _2712 = sqrt(((_2699 * _2699) + (_2700 * _2700)) + (_2702 * _2702));
        float _2715 = (1.0 - (cbSceneParam._m0[77u].w / _2687)) * _2712;
        float _2720 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2722 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2875;
        if (abs((_2701 - _2704) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2875 = ((((_2705 > 0.0) ? exp2(_2720 * _2705) : (2.0 - exp2(_2722 * _2705))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2715;
        }
        else
        {
            float _2835 = 1.0 / cbSceneParam._m0[80u].x;
            float _2836 = isnan(_2706) ? _2705 : (isnan(_2705) ? _2706 : max(_2705, _2706));
            float _2837 = isnan(_2706) ? _2705 : (isnan(_2705) ? _2706 : min(_2705, _2706));
            float _2846 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : min(_2836, 0.0));
            float _2847 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : min(_2837, 0.0));
            _2875 = ((abs(_2712 / _2701) * cbSceneParam._m0[80u].y) * ((((_2846 - _2847) * 2.0) - ((exp2(_2720 * (isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0)))) - exp2(_2720 * (isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0))))) * _2835)) - ((exp2(_2722 * _2846) - exp2(_2722 * _2847)) * _2835))) + (_2715 * cbSceneParam._m0[80u].z);
        }
        vec4 _2877 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2633, _2634, 1.0), 0.0);
        float _2886 = exp2((_2875 * (-1.44269502162933349609375)) * (1.0 - _2877.w));
        float _2887 = log2(_2886);
        float _2903 = log2(_2653);
        _2724 = (exp2(_2903 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2887 * cbSceneParam._m0[78u].x)) * _2877.x) / cbSceneParam._m0[78u].x)) + _2650;
        _2726 = (exp2(_2903 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2887 * cbSceneParam._m0[78u].y)) * _2877.y) / cbSceneParam._m0[78u].y)) + _2651;
        _2728 = (exp2(_2903 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2887 * cbSceneParam._m0[78u].z)) * _2877.z) / cbSceneParam._m0[78u].z)) + _2652;
        _2730 = _2886 * _2653;
    }
    else
    {
        _2724 = _2650;
        _2726 = _2651;
        _2728 = _2652;
        _2730 = _2653;
    }
    float _2742 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2743 = _2742 == 3.0;
    float _2744 = log2(_2730);
    float _2751 = exp2(_2744 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0)));
    float _2752 = exp2(_2744 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0)));
    float _2753 = exp2(_2744 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0)));
    float _2762 = (_2742 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2762 * (_2743 ? _2751 : (_2751 + (cbSceneParam._m0[72u].w * _2724)));
    SV_Target.y = _2762 * (_2743 ? _2752 : (_2752 + (cbSceneParam._m0[72u].w * _2726)));
    SV_Target.z = _2762 * (_2743 ? _2753 : (_2753 + (cbSceneParam._m0[72u].w * _2728)));
    SV_Target.w = cbInstanceData._m0[_2625].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2625].w;
}


