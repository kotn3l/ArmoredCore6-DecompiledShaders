#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[20];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 5, component = 1) in float TEXCOORD_5;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _931;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    vec4 _245 = texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_5) + cbTextureTilingScale._m0[1u].w));
    float _251 = _245.x * cbMatDynParam._m0[17u].x;
    float _252 = _245.y * cbMatDynParam._m0[17u].y;
    float _253 = _245.z * cbMatDynParam._m0[17u].z;
    vec4 _272 = texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_5) + cbTextureTilingScale._m0[4u].w));
    float _305 = (TEXCOORD_7.x - ((cbMatDynParam._m0[19u].x * (1.0 - TEXCOORD_7.x)) * (texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbMatDynParam._m0[19u].z * TEXCOORD_4) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMatDynParam._m0[19u].z * TEXCOORD_5) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMatDynParam._m0[19u].y * TEXCOORD.w) + 1.0);
    float _3291 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _306 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
    float _313 = (_306 * ((_272.x * cbMatDynParam._m0[18u].x) - _251)) + _251;
    float _314 = (_306 * ((_272.y * cbMatDynParam._m0[18u].y) - _252)) + _252;
    float _315 = (_306 * ((_272.z * cbMatDynParam._m0[18u].z) - _253)) + _253;
    vec4 _328 = texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_5) + cbTextureTilingScale._m0[2u].w));
    float _330 = _328.x;
    float _331 = _328.y;
    float _332 = _328.z;
    vec4 _344 = texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_5) + cbTextureTilingScale._m0[3u].w));
    float _357 = ((_344.z - _332) * _306) + _332;
    float _361 = ((((_344.x - _330) * _306) + _330) * 2.0) + (-1.0);
    float _363 = ((((_344.y - _331) * _306) + _331) * 2.0) + (-1.0);
    float _364 = dot(vec2(_361, _363), vec2(_361, _363));
    float _3302 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _369 = sqrt(1.0 - (isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0))));
    float _372 = fma(_369, _217, fma(_363, _209 * TANGENT.x, (_195 * _187) * _361));
    float _375 = fma(_369, _218, fma(_363, _209 * TANGENT.y, (_195 * _188) * _361));
    float _378 = fma(_369, _219, fma(_363, _209 * TANGENT.z, (_195 * _189) * _361));
    float _382 = inversesqrt(dot(vec3(_372, _375, _378), vec3(_372, _375, _378)));
    float _383 = _382 * _372;
    float _384 = _382 * _375;
    float _385 = _382 * _378;
    float _3313 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _386 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
    float _3324 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3335 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3346 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3357 = isnan(0.0) ? cbMatDynParam._m0[19u].w : (isnan(cbMatDynParam._m0[19u].w) ? 0.0 : max(cbMatDynParam._m0[19u].w, 0.0));
    float _390 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
    float _406 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _449 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _459 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _449);
    float _460 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _449);
    float _461 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _449);
    float _465 = inversesqrt(dot(vec3(_459, _460, _461), vec3(_459, _460, _461)));
    float _466 = _459 * _465;
    float _467 = _460 * _465;
    float _468 = _461 * _465;
    float _474 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _475 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _496 = fma(_385, cbSceneParam._m0[5u].z, fma(_384, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _383));
    float _499 = fma(_385, cbSceneParam._m0[6u].z, fma(_384, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _383));
    float _502 = fma(_385, cbSceneParam._m0[7u].z, fma(_384, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _383));
    uint _515 = uint(roundEven(NORMAL.w)) * 13u;
    uint _518 = (_515 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _524 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0)))) * cbInstanceData._m0[_518].x;
    float _525 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0)))) * cbInstanceData._m0[_518].y;
    float _526 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0)))) * cbInstanceData._m0[_518].z;
    float _3368 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _527 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
    float _3379 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _528 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
    float _3390 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _529 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
    float _530 = 1.0 - _390;
    float _531 = _527 * _530;
    float _532 = _528 * _530;
    float _533 = _529 * _530;
    float _538 = (_527 + (-0.039999999105930328369140625)) * _390;
    float _539 = (_528 + (-0.039999999105930328369140625)) * _390;
    float _540 = (_529 + (-0.039999999105930328369140625)) * _390;
    float _541 = _538 + 0.039999999105930328369140625;
    float _543 = _539 + 0.039999999105930328369140625;
    float _544 = _540 + 0.039999999105930328369140625;
    vec4 _553 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _474, cbSceneParam._m0[86u].y * _475));
    float _556 = _553.x * TEXCOORD_7.w;
    float _557 = dot(vec3(_383, _384, _385), vec3(_466, _467, _468));
    float _560 = _557 * 2.0;
    float _564 = (_560 * _383) - _466;
    float _565 = (_560 * _384) - _467;
    float _566 = (_560 * _385) - _468;
    float _570 = abs(dot(vec3(_466, _467, _468), vec3(_383, _384, _385)));
    float _3401 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _572 = sqrt(_386);
    float _585 = exp2((_572 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_572 * 3.0));
    float _591 = (1.0 - _585) * ((_572 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _592 = _585 * _572;
    float _620 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _624 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _628 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _930;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _655 = fma(_628, cbModelParam._m0[26u].z, fma(_624, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _620));
        float _659 = fma(_628, cbModelParam._m0[27u].z, fma(_624, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _620));
        float _663 = fma(_628, cbModelParam._m0[28u].z, fma(_624, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _620));
        float _688 = _620 + _383;
        float _689 = _624 + _384;
        float _690 = _628 + _385;
        float _700 = fma(_690, cbModelParam._m0[26u].z, fma(_689, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _688)) - _655;
        float _701 = fma(_690, cbModelParam._m0[27u].z, fma(_689, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _688)) - _659;
        float _702 = fma(_690, cbModelParam._m0[28u].z, fma(_689, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _688)) - _663;
        float _706 = inversesqrt(dot(vec3(_700, _701, _702), vec3(_700, _701, _702)));
        float _719 = ((_706 * _700) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_655 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _720 = ((_706 * _701) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_659 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _721 = ((_706 * _702) / cbModelParam._m0[34u].z) + ((((((_663 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _724 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_719, _720, _721), 0.0);
        vec4 _731 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_719, _720, _721), 0.0);
        vec4 _738 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_719, _720, _721), 0.0);
        vec4 _745 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_719, _720, _721), 0.0);
        float _758 = exp2((_724.w + (-0.5)) * 20.0) * 2.0;
        float _759 = _758 * (_724.x + (-0.5));
        float _760 = _758 * (_724.y + (-0.5));
        float _761 = _758 * (_724.z + (-0.5));
        float _768 = exp2((_731.w + (-0.5)) * 20.0) * 2.0;
        float _769 = _768 * (_731.x + (-0.5));
        float _770 = _768 * (_731.y + (-0.5));
        float _771 = _768 * (_731.z + (-0.5));
        float _778 = exp2((_738.w + (-0.5)) * 20.0) * 2.0;
        float _779 = _778 * (_738.x + (-0.5));
        float _780 = _778 * (_738.y + (-0.5));
        float _781 = _778 * (_738.z + (-0.5));
        float _788 = exp2((_745.w + (-0.5)) * 20.0) * 2.0;
        float _789 = _788 * (_745.x + (-0.5));
        float _790 = _788 * (_745.y + (-0.5));
        float _791 = _788 * (_745.z + (-0.5));
        float _792 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _793 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _794 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _795 = _759 * 0.5;
        float _796 = _769 * 0.5;
        float _797 = _779 * 0.5;
        float _798 = dot(vec3(_795, _796, _797), vec3(_795, _796, _797));
        float _803 = (_798 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_798);
        float _812 = (dot(vec3(_383, _384, _385), vec3(_803 * _795, _803 * _796, _803 * _797)) + 1.0) * 0.5;
        float _3427 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _822 = sqrt(((_796 * _796) + (_795 * _795)) + (_797 * _797)) / (_792 + 9.9999997473787516355514526367188e-06);
        float _3438 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _824 = _823 * 2.0;
        float _828 = (1.0 - _823) / (_823 + 1.0);
        float _3449 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _838 = ((((1.0 - _829) * (_824 + 2.0)) * exp2(log2(isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) * (_824 + 1.0))) + _829) * _792;
        float _839 = _760 * 0.5;
        float _840 = _770 * 0.5;
        float _841 = _780 * 0.5;
        float _842 = dot(vec3(_839, _840, _841), vec3(_839, _840, _841));
        float _847 = (_842 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_842);
        float _855 = (dot(vec3(_383, _384, _385), vec3(_847 * _839, _847 * _840, _847 * _841)) + 1.0) * 0.5;
        float _3460 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _864 = sqrt(((_840 * _840) + (_839 * _839)) + (_841 * _841)) / (_793 + 9.9999997473787516355514526367188e-06);
        float _3471 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _866 = _865 * 2.0;
        float _870 = (1.0 - _865) / (_865 + 1.0);
        float _3482 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _880 = ((((1.0 - _871) * (_866 + 2.0)) * exp2(log2(isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * (_866 + 1.0))) + _871) * _793;
        float _881 = _761 * 0.5;
        float _882 = _771 * 0.5;
        float _883 = _781 * 0.5;
        float _884 = dot(vec3(_881, _882, _883), vec3(_881, _882, _883));
        float _889 = (_884 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_884);
        float _897 = (dot(vec3(_383, _384, _385), vec3(_889 * _881, _889 * _882, _889 * _883)) + 1.0) * 0.5;
        float _3493 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _906 = sqrt(((_882 * _882) + (_881 * _881)) + (_883 * _883)) / (_794 + 9.9999997473787516355514526367188e-06);
        float _3504 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _908 = _907 * 2.0;
        float _912 = (1.0 - _907) / (_907 + 1.0);
        float _3515 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _922 = ((((1.0 - _913) * (_908 + 2.0)) * exp2(log2(isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * (_908 + 1.0))) + _913) * _794;
        _930 = _761;
        _932 = _760;
        _933 = _759;
        _934 = _771;
        _935 = _770;
        _936 = _769;
        _937 = _781;
        _938 = _780;
        _939 = _779;
        _940 = _794;
        _941 = _793;
        _942 = _792;
        _943 = cbModelParam._m0[36u].z * (isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0)));
        _944 = cbModelParam._m0[36u].z * (isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0)));
        _945 = cbModelParam._m0[36u].z * (isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0)));
    }
    else
    {
        _930 = _931;
        _932 = _931;
        _933 = _931;
        _934 = _931;
        _935 = _931;
        _936 = _931;
        _937 = _931;
        _938 = _931;
        _939 = _931;
        _940 = _931;
        _941 = _931;
        _942 = _931;
        _943 = 0.0;
        _944 = 0.0;
        _945 = 0.0;
    }
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _971 = fma(_628, cbModelParam._m0[30u].z, fma(_624, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _620));
        float _975 = fma(_628, cbModelParam._m0[31u].z, fma(_624, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _620));
        float _979 = fma(_628, cbModelParam._m0[32u].z, fma(_624, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _620));
        float _1002 = _620 + _383;
        float _1003 = _624 + _384;
        float _1004 = _628 + _385;
        float _1014 = fma(_1004, cbModelParam._m0[30u].z, fma(_1003, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1002)) - _971;
        float _1015 = fma(_1004, cbModelParam._m0[31u].z, fma(_1003, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1002)) - _975;
        float _1016 = fma(_1004, cbModelParam._m0[32u].z, fma(_1003, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1002)) - _979;
        float _1020 = inversesqrt(dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016)));
        float _1033 = ((_1020 * _1014) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_971 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1034 = ((_1020 * _1015) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_975 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1035 = ((_1020 * _1016) / cbModelParam._m0[35u].z) + ((((((_979 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        float _1070 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1037.x + (-0.5));
        float _1072 = _1070 * (_1037.y + (-0.5));
        float _1073 = _1070 * (_1037.z + (-0.5));
        float _1080 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1044.x + (-0.5));
        float _1082 = _1080 * (_1044.y + (-0.5));
        float _1083 = _1080 * (_1044.z + (-0.5));
        float _1090 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1051.x + (-0.5));
        float _1092 = _1090 * (_1051.y + (-0.5));
        float _1093 = _1090 * (_1051.z + (-0.5));
        float _1100 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1058.x + (-0.5));
        float _1102 = _1100 * (_1058.y + (-0.5));
        float _1103 = _1100 * (_1058.z + (-0.5));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = _1071 * 0.5;
        float _1108 = _1081 * 0.5;
        float _1109 = _1091 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_383, _384, _385), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3556 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _3567 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3578 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * (_1134 + 1.0))) + _1139) * _1104;
        float _1149 = _1072 * 0.5;
        float _1150 = _1082 * 0.5;
        float _1151 = _1092 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_383, _384, _385), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _3611 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_1176 + 1.0))) + _1181) * _1105;
        float _1191 = _1073 * 0.5;
        float _1192 = _1083 * 0.5;
        float _1193 = _1093 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_383, _384, _385), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _3644 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_1218 + 1.0))) + _1223) * _1106;
        _1240 = _1073;
        _1241 = _1072;
        _1242 = _1071;
        _1243 = _1083;
        _1244 = _1082;
        _1245 = _1081;
        _1246 = _1093;
        _1247 = _1092;
        _1248 = _1091;
        _1249 = _1106;
        _1250 = _1105;
        _1251 = _1104;
        _1252 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
        _1253 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
        _1254 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
    }
    else
    {
        _1240 = _931;
        _1241 = _931;
        _1242 = _931;
        _1243 = _931;
        _1244 = _931;
        _1245 = _931;
        _1246 = _931;
        _1247 = _931;
        _1248 = _931;
        _1249 = _931;
        _1250 = _931;
        _1251 = _931;
        _1252 = 0.0;
        _1253 = 0.0;
        _1254 = 0.0;
    }
    float _1264 = (cbModelParam._m0[1u].x * (_1252 - _943)) + _943;
    float _1265 = (cbModelParam._m0[1u].x * (_1253 - _944)) + _944;
    float _1266 = (cbModelParam._m0[1u].x * (_1254 - _945)) + _945;
    float _1287 = fma(_1266, cbSceneParam._m0[89u].z, fma(_1265, cbSceneParam._m0[89u].y, _1264 * cbSceneParam._m0[89u].x));
    float _1290 = fma(_1266, cbSceneParam._m0[90u].z, fma(_1265, cbSceneParam._m0[90u].y, _1264 * cbSceneParam._m0[90u].x));
    float _1293 = fma(_1266, cbSceneParam._m0[91u].z, fma(_1265, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1264));
    float _1308 = _564 * 0.5;
    float _1309 = _565 * 0.5;
    float _1310 = _566 * 0.5;
    float _1311 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_1242, _1245, _1248, _1251));
    float _1314 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_1241, _1244, _1247, _1250));
    float _1317 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_1240, _1243, _1246, _1249));
    float _1351;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1324 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_930, _934, _937, _940));
        float _1328 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_932, _935, _938, _941));
        float _1332 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_933, _936, _939, _942));
        float _1339 = dot(vec4(cbModelParam._m0[39u]), vec4(_1308, _1309, _1310, 1.0));
        _1351 = dot(vec3(isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)), isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)), isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1339) ? 0.0 : (isnan(0.0) ? _1339 : max(0.0, _1339))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1351 = 1.0;
    }
    float _1362;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1353 = dot(vec4(cbModelParam._m0[40u]), vec4(_1308, _1309, _1310, 1.0));
        _1362 = dot(vec3(isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)), isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1353) ? 0.0 : (isnan(0.0) ? _1353 : max(0.0, _1353))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1362 = 1.0;
    }
    float _1366 = (_1362 * cbModelParam._m0[1u].x) + (_1351 * (1.0 - cbModelParam._m0[1u].x));
    float _1376 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _386);
    float _1377 = isnan(_1376) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1376 : min(cbModelParam._m0[25u].z, _1376));
    float _1459;
    float _1461;
    float _1463;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1426 = fma(_628, cbModelParam._m0[13u].z, fma(_624, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _620)) + cbModelParam._m0[13u].w;
        float _1430 = fma(_628, cbModelParam._m0[14u].z, fma(_624, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _620)) + cbModelParam._m0[14u].w;
        float _1434 = fma(_628, cbModelParam._m0[15u].z, fma(_624, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _620)) + cbModelParam._m0[15u].w;
        float _1437 = fma(_566, cbModelParam._m0[13u].z, fma(_565, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _564));
        float _1440 = fma(_566, cbModelParam._m0[14u].z, fma(_565, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _564));
        float _1443 = fma(_566, cbModelParam._m0[15u].z, fma(_565, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _564));
        float _1471;
        if (_1437 > 0.0)
        {
            _1471 = abs((1.0 - _1426) / _1437);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1437 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1426 + 1.0) / _1437);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1471 = frontier_phi_16_14_ladder;
        }
        float _1697;
        if (_1440 > 0.0)
        {
            _1697 = abs((1.0 - _1430) / _1440);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1440 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1430 + 1.0) / _1440);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1697 = frontier_phi_25_21_ladder;
        }
        float _1954;
        if (_1443 > 0.0)
        {
            _1954 = abs((1.0 - _1434) / _1443);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1434 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1954 = frontier_phi_37_32_ladder;
        }
        float _1956 = isnan(_1697) ? _1471 : (isnan(_1471) ? _1697 : min(_1471, _1697));
        float _1957 = isnan(_1954) ? _1956 : (isnan(_1956) ? _1954 : min(_1956, _1954));
        float _1961 = (_1957 * _1437) + _1426;
        float _1962 = (_1957 * _1440) + _1430;
        float _1963 = (_1957 * _1443) + _1434;
        float _1964 = _1957 * 9.9999997473787516355514526367188e-05;
        float _1966 = (-1.0) - _1964;
        float _1968 = _1964 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1963 > _1968) || ((_1963 < _1966) || ((_1962 > _1968) || ((_1962 < _1966) || ((_1961 < _1966) || (_1961 > _1968))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2091 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1963, cbModelParam._m0[9u].z, fma(_1962, cbModelParam._m0[9u].y, _1961 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1963, cbModelParam._m0[10u].z, fma(_1962, cbModelParam._m0[10u].y, _1961 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1963, cbModelParam._m0[11u].z, fma(_1962, cbModelParam._m0[11u].y, _1961 * cbModelParam._m0[11u].x))), _1377);
            frontier_phi_15_37_ladder = _2091.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2091.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2091.x * cbModelParam._m0[1u].y;
        }
        _1459 = frontier_phi_15_37_ladder_2;
        _1461 = frontier_phi_15_37_ladder_1;
        _1463 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1447 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_564, _565, _566), _1377);
        _1459 = _1447.x * cbModelParam._m0[1u].y;
        _1461 = _1447.y * cbModelParam._m0[1u].y;
        _1463 = _1447.z * cbModelParam._m0[1u].y;
    }
    float _1467 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _386);
    float _1468 = isnan(_1467) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1467 : min(cbModelParam._m0[25u].w, _1467));
    float _1559;
    float _1561;
    float _1563;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1523 = fma(_628, cbModelParam._m0[21u].z, fma(_624, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _620)) + cbModelParam._m0[21u].w;
        float _1527 = fma(_628, cbModelParam._m0[22u].z, fma(_624, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _620)) + cbModelParam._m0[22u].w;
        float _1531 = fma(_628, cbModelParam._m0[23u].z, fma(_624, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _620)) + cbModelParam._m0[23u].w;
        float _1534 = fma(_566, cbModelParam._m0[21u].z, fma(_565, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _564));
        float _1537 = fma(_566, cbModelParam._m0[22u].z, fma(_565, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _564));
        float _1540 = fma(_566, cbModelParam._m0[23u].z, fma(_565, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _564));
        float _1702;
        if (_1534 > 0.0)
        {
            _1702 = abs((1.0 - _1523) / _1534);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1523 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1702 = frontier_phi_27_23_ladder;
        }
        float _1981;
        if (_1537 > 0.0)
        {
            _1981 = abs((1.0 - _1527) / _1537);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1527 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1981 = frontier_phi_39_34_ladder;
        }
        float _2194;
        if (_1540 > 0.0)
        {
            _2194 = abs((1.0 - _1531) / _1540);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1531 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2194 = frontier_phi_48_45_ladder;
        }
        float _2196 = isnan(_1981) ? _1702 : (isnan(_1702) ? _1981 : min(_1702, _1981));
        float _2197 = isnan(_2194) ? _2196 : (isnan(_2196) ? _2194 : min(_2196, _2194));
        float _2201 = (_2197 * _1534) + _1523;
        float _2202 = (_2197 * _1537) + _1527;
        float _2203 = (_2197 * _1540) + _1531;
        float _2204 = _2197 * 9.9999997473787516355514526367188e-05;
        float _2205 = (-1.0) - _2204;
        float _2207 = _2204 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2203 > _2207) || ((_2203 < _2205) || ((_2202 > _2207) || ((_2202 < _2205) || ((_2201 < _2205) || (_2201 > _2207))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2404 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2203, cbModelParam._m0[17u].z, fma(_2202, cbModelParam._m0[17u].y, _2201 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2203, cbModelParam._m0[18u].z, fma(_2202, cbModelParam._m0[18u].y, _2201 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2203, cbModelParam._m0[19u].z, fma(_2202, cbModelParam._m0[19u].y, _2201 * cbModelParam._m0[19u].x))), _1468);
            frontier_phi_24_48_ladder = _2404.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2404.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2404.x * cbModelParam._m0[1u].z;
        }
        _1559 = frontier_phi_24_48_ladder_2;
        _1561 = frontier_phi_24_48_ladder_1;
        _1563 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1543 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_564, _565, _566), _1468);
        _1559 = _1543.x * cbModelParam._m0[1u].z;
        _1561 = _1543.y * cbModelParam._m0[1u].z;
        _1563 = _1543.z * cbModelParam._m0[1u].z;
    }
    float _1576 = (((_591 * _541) + _592) * _556) * ((cbModelParam._m0[1u].w * (_1559 - _1459)) + _1459);
    float _1578 = (((_591 * _543) + _592) * _556) * ((cbModelParam._m0[1u].w * (_1561 - _1461)) + _1461);
    float _1580 = (((_591 * _544) + _592) * _556) * ((cbModelParam._m0[1u].w * (_1563 - _1463)) + _1463);
    float _1583 = fma(_1580, cbSceneParam._m0[89u].z, fma(_1578, cbSceneParam._m0[89u].y, _1576 * cbSceneParam._m0[89u].x));
    float _1586 = fma(_1580, cbSceneParam._m0[90u].z, fma(_1578, cbSceneParam._m0[90u].y, _1576 * cbSceneParam._m0[90u].x));
    float _1589 = fma(_1580, cbSceneParam._m0[91u].z, fma(_1578, cbSceneParam._m0[91u].y, _1576 * cbSceneParam._m0[91u].x));
    vec4 _1597 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_474, _475));
    float _1599 = _1597.w;
    float _1611 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1599);
    float _1612 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1599);
    float _1613 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1599);
    uvec4 _1617 = floatBitsToUint(cbInstanceData._m0[_515 + 5u]);
    uint _1619 = _1617.x * 14u;
    uint _1620 = _1619 + 13u;
    float _1627 = _556 + (-1.0);
    float _1632 = (cbLight._m0[_1620].x * _1627) + 1.0;
    float _1633 = (cbLight._m0[_1620].y * _1627) + 1.0;
    float _1634 = (cbLight._m0[_1620].z * _1627) + 1.0;
    float _1635 = (cbLight._m0[_1620].w * _1627) + 1.0;
    uint _1636 = _1619 + 5u;
    float _1642 = isnan(1.0) ? _1633 : (isnan(_1633) ? 1.0 : min(_1633, 1.0));
    uint _1646 = _1619 + 4u;
    float _1655 = isnan(1.0) ? _1632 : (isnan(_1632) ? 1.0 : min(_1632, 1.0));
    uint _1659 = _1619 | 1u;
    float _1670 = dot(vec3(cbLight._m0[_1619].xyz), vec3(_383, _384, _385));
    float _1673 = dot(vec3(cbLight._m0[_1659].xyz), vec3(_383, _384, _385));
    float _3780 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
    float _3791 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
    float _1678 = (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * 0.3183098733425140380859375;
    float _1680 = (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * 0.3183098733425140380859375;
    float _1687 = ((cbLight._m0[_1636].x * _1642) * _1680) + (((cbLight._m0[_1646].x * _1611) * _1655) * _1678);
    float _1688 = ((_1642 * cbLight._m0[_1636].y) * _1680) + (((cbLight._m0[_1646].y * _1612) * _1655) * _1678);
    float _1689 = ((_1642 * cbLight._m0[_1636].z) * _1680) + (((cbLight._m0[_1646].z * _1613) * _1655) * _1678);
    uvec4 _1694 = floatBitsToUint(cbLight._m0[_1619 + 12u]);
    bool _1696 = _1694.x == 0u;
    float _1707;
    float _1709;
    float _1711;
    if (_1696)
    {
        _1707 = _1687;
        _1709 = _1688;
        _1711 = _1689;
    }
    else
    {
        uint _1715 = _1619 + 6u;
        float _1731 = (dot(vec3(cbLight._m0[_1619 + 2u].xyz), vec3(_383, _384, _385)) * 0.5) + 0.5;
        float _1732 = _1731 * _1731;
        float _3802 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1734 = isnan(1.0) ? _1634 : (isnan(_1634) ? 1.0 : min(_1634, 1.0));
        _1707 = (((cbLight._m0[_1715].x * 0.3183098733425140380859375) * _1733) * _1734) + _1687;
        _1709 = (((cbLight._m0[_1715].y * 0.3183098733425140380859375) * _1733) * _1734) + _1688;
        _1711 = (((cbLight._m0[_1715].z * 0.3183098733425140380859375) * _1733) * _1734) + _1689;
    }
    bool _1714 = _1694.y == 0u;
    float _1752;
    float _1754;
    float _1756;
    if (_1714)
    {
        _1752 = _1707;
        _1754 = _1709;
        _1756 = _1711;
    }
    else
    {
        uint _1925 = _1619 + 7u;
        float _1941 = (dot(vec3(cbLight._m0[_1619 + 3u].xyz), vec3(_383, _384, _385)) * 0.5) + 0.5;
        float _1942 = _1941 * _1941;
        float _3818 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1943 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1944 = isnan(1.0) ? _1635 : (isnan(_1635) ? 1.0 : min(_1635, 1.0));
        _1752 = (((cbLight._m0[_1925].x * 0.3183098733425140380859375) * _1943) * _1944) + _1707;
        _1754 = (((cbLight._m0[_1925].y * 0.3183098733425140380859375) * _1943) * _1944) + _1709;
        _1756 = (((cbLight._m0[_1925].z * 0.3183098733425140380859375) * _1943) * _1944) + _1711;
    }
    uint _1759 = _1619 + 8u;
    float _1772 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1619].w)) * _386) * 0.949999988079071044921875);
    float _1773 = _1772 * _1772;
    float _1774 = cbLight._m0[_1619].x + _466;
    float _1775 = cbLight._m0[_1619].y + _467;
    float _1776 = cbLight._m0[_1619].z + _468;
    float _1780 = inversesqrt(dot(vec3(_1774, _1775, _1776), vec3(_1774, _1775, _1776)));
    float _1781 = _1780 * _1774;
    float _1782 = _1780 * _1775;
    float _1783 = _1780 * _1776;
    float _1784 = dot(vec3(_383, _384, _385), vec3(cbLight._m0[_1619].xyz));
    float _3834 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1787 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _3845 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _1788 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _1789 = dot(vec3(_383, _384, _385), vec3(_1781, _1782, _1783));
    float _3856 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1792 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _1793 = dot(vec3(cbLight._m0[_1619].xyz), vec3(_1781, _1782, _1783));
    float _3867 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _1797 = _1773 * _1773;
    float _1801 = ((_1792 * _1792) * (_1797 + (-1.0))) + 1.0;
    float _1809 = exp2(log2(1.0 - (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) * 5.0);
    float _1810 = 0.959999978542327880859375 - _538;
    float _1812 = 0.959999978542327880859375 - _539;
    float _1813 = 0.959999978542327880859375 - _540;
    float _1820 = 1.0 - _1773;
    float _1831 = (0.5 / (((_1788 * ((_1787 * _1820) + _1773)) + 9.9999999392252902907785028219223e-09) + (((_1788 * _1820) + _1773) * _1787))) * _1787;
    float _3878 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1833 = (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * (_1797 / ((_1801 * _1801) * 3.141590118408203125));
    uint _1847 = _1619 + 9u;
    float _1858 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1659].w)) * _386) * 0.949999988079071044921875);
    float _1859 = _1858 * _1858;
    float _1860 = cbLight._m0[_1659].x + _466;
    float _1861 = cbLight._m0[_1659].y + _467;
    float _1862 = cbLight._m0[_1659].z + _468;
    float _1866 = inversesqrt(dot(vec3(_1860, _1861, _1862), vec3(_1860, _1861, _1862)));
    float _1867 = _1866 * _1860;
    float _1868 = _1866 * _1861;
    float _1869 = _1866 * _1862;
    float _1870 = dot(vec3(_383, _384, _385), vec3(cbLight._m0[_1659].xyz));
    float _3889 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1873 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _1874 = dot(vec3(_383, _384, _385), vec3(_1867, _1868, _1869));
    float _3900 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1877 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _1878 = dot(vec3(cbLight._m0[_1659].xyz), vec3(_1867, _1868, _1869));
    float _3911 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1882 = _1859 * _1859;
    float _1886 = ((_1877 * _1877) * (_1882 + (-1.0))) + 1.0;
    float _1893 = exp2(log2(1.0 - (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * 5.0);
    float _1900 = 1.0 - _1859;
    float _1910 = (0.5 / (((_1788 * ((_1873 * _1900) + _1859)) + 9.9999999392252902907785028219223e-09) + (((_1788 * _1900) + _1859) * _1873))) * _1873;
    float _3922 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1912 = (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1882 / ((_1886 * _1886) * 3.141590118408203125));
    float _1922 = (((((_1893 * _1810) + _541) * cbLight._m0[_1847].x) * _1912) * _1642) + ((((cbLight._m0[_1759].x * _1611) * ((_1809 * _1810) + _541)) * _1833) * _1655);
    float _1923 = (((((_1893 * _1812) + _543) * cbLight._m0[_1847].y) * _1912) * _1642) + ((((cbLight._m0[_1759].y * _1612) * ((_1809 * _1812) + _543)) * _1833) * _1655);
    float _1924 = (((((_1893 * _1813) + _544) * cbLight._m0[_1847].z) * _1912) * _1642) + ((((cbLight._m0[_1759].z * _1613) * ((_1809 * _1813) + _544)) * _1833) * _1655);
    float _1986;
    float _1988;
    float _1990;
    if (_1696)
    {
        _1986 = _1922;
        _1988 = _1923;
        _1990 = _1924;
    }
    else
    {
        uint _1992 = _1619 + 2u;
        uint _1996 = _1619 + 10u;
        float _2010 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1992].w)) * _386) * 0.949999988079071044921875);
        float _2011 = _2010 * _2010;
        float _2012 = cbLight._m0[_1992].x + _466;
        float _2013 = cbLight._m0[_1992].y + _467;
        float _2014 = cbLight._m0[_1992].z + _468;
        float _2018 = inversesqrt(dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014)));
        float _2019 = _2018 * _2012;
        float _2020 = _2018 * _2013;
        float _2021 = _2018 * _2014;
        float _2022 = dot(vec3(_383, _384, _385), vec3(cbLight._m0[_1992].xyz));
        float _3933 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2025 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _2026 = dot(vec3(_383, _384, _385), vec3(_2019, _2020, _2021));
        float _3944 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2029 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _2030 = dot(vec3(cbLight._m0[_1992].xyz), vec3(_2019, _2020, _2021));
        float _3955 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        float _2034 = _2011 * _2011;
        float _2038 = ((_2029 * _2029) * (_2034 + (-1.0))) + 1.0;
        float _2045 = exp2(log2(1.0 - (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) * 5.0);
        float _2052 = 1.0 - _2011;
        float _2062 = (0.5 / (((_1788 * ((_2025 * _2052) + _2011)) + 9.9999999392252902907785028219223e-09) + (((_1788 * _2052) + _2011) * _2025))) * _2025;
        float _3966 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2064 = (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_2034 / ((_2038 * _2038) * 3.141590118408203125));
        float _2065 = isnan(1.0) ? _1634 : (isnan(_1634) ? 1.0 : min(_1634, 1.0));
        _1986 = (((((_2045 * _1810) + _541) * cbLight._m0[_1996].x) * _2064) * _2065) + _1922;
        _1988 = (((((_2045 * _1812) + _543) * cbLight._m0[_1996].y) * _2064) * _2065) + _1923;
        _1990 = (((((_2045 * _1813) + _544) * cbLight._m0[_1996].z) * _2064) * _2065) + _1924;
    }
    float _2100;
    float _2102;
    float _2104;
    if (_1714)
    {
        _2100 = _1986;
        _2102 = _1988;
        _2104 = _1990;
    }
    else
    {
        uint _2111 = _1619 + 3u;
        uint _2115 = _1619 + 11u;
        float _2129 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2111].w)) * _386) * 0.949999988079071044921875);
        float _2130 = _2129 * _2129;
        float _2131 = cbLight._m0[_2111].x + _466;
        float _2132 = cbLight._m0[_2111].y + _467;
        float _2133 = cbLight._m0[_2111].z + _468;
        float _2137 = inversesqrt(dot(vec3(_2131, _2132, _2133), vec3(_2131, _2132, _2133)));
        float _2138 = _2137 * _2131;
        float _2139 = _2137 * _2132;
        float _2140 = _2137 * _2133;
        float _2141 = dot(vec3(_383, _384, _385), vec3(cbLight._m0[_2111].xyz));
        float _3982 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2144 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _2145 = dot(vec3(_383, _384, _385), vec3(_2138, _2139, _2140));
        float _3993 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2148 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _2149 = dot(vec3(cbLight._m0[_2111].xyz), vec3(_2138, _2139, _2140));
        float _4004 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2153 = _2130 * _2130;
        float _2157 = ((_2148 * _2148) * (_2153 + (-1.0))) + 1.0;
        float _2164 = exp2(log2(1.0 - (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * 5.0);
        float _2171 = 1.0 - _2130;
        float _2181 = (0.5 / (((_1788 * ((_2144 * _2171) + _2130)) + 9.9999999392252902907785028219223e-09) + (((_1788 * _2171) + _2130) * _2144))) * _2144;
        float _4015 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2183 = (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_2153 / ((_2157 * _2157) * 3.141590118408203125));
        float _2184 = isnan(1.0) ? _1635 : (isnan(_1635) ? 1.0 : min(_1635, 1.0));
        _2100 = (((((_2164 * _1810) + _541) * cbLight._m0[_2115].x) * _2183) * _2184) + _1986;
        _2102 = (((((_2164 * _1812) + _543) * cbLight._m0[_2115].y) * _2183) * _2184) + _1988;
        _2104 = (((((_2164 * _1813) + _544) * cbLight._m0[_2115].z) * _2183) * _2184) + _1990;
    }
    float _2318;
    float _2320;
    float _2322;
    float _2324;
    float _2326;
    float _2328;
    if (_1617.y == 0u)
    {
        float _2259 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2260 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2259;
        float _2261 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2259;
        float _2262 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2259;
        uvec4 _2274 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2275 = _2274.x;
        uint _2286 = uint((float(_2274.y) * floor(float(uint(cbSceneParam._m0[85u].y * _475) / _2275))) + floor(float(uint(cbSceneParam._m0[85u].x * _474) / _2275)));
        float _2296 = (log2(_2262 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2297 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        uint _2300 = uint(isnan(14.0) ? _2297 : (isnan(_2297) ? 14.0 : min(_2297, 14.0)));
        uvec4 _2305 = texelFetch(g_lightClusterGridBuffer, int(((_2300 << 2u) + (_2286 << 6u)) >> 2u));
        uint _2306 = _2305.x;
        uint _2307 = _2274.z;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        float _2419;
        if (((((1u << ((_2307 >> 4u) & 15u)) + 4294967295u) & _2306) == 0u) || ((_2307 & 240u) == 0u))
        {
            _2409 = 0.0;
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
            _2419 = 0.0;
        }
        else
        {
            float _2410;
            float _2412;
            float _2414;
            float _2416;
            float _2418;
            float _2420;
            float _2553 = 0.0;
            float _2554 = 0.0;
            float _2555 = 0.0;
            float _2556 = 0.0;
            float _2557 = 0.0;
            float _2558 = 0.0;
            uint _2559 = 0u;
            uint _2568;
            bool _2569;
            for (;;)
            {
                _2568 = texelFetch(g_lightClassification, int((((_2300 << 5u) + (_2286 << 9u)) + (_2559 << 2u)) >> 2u)).x;
                _2569 = _2568 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2569)
                {
                    frontier_phi_63_pred = _2558;
                    frontier_phi_63_pred_1 = _2557;
                    frontier_phi_63_pred_2 = _2556;
                    frontier_phi_63_pred_3 = _2555;
                    frontier_phi_63_pred_4 = _2554;
                    frontier_phi_63_pred_5 = _2553;
                }
                else
                {
                    float _2677;
                    float _2678;
                    float _2679;
                    float _2680;
                    float _2681;
                    float _2682;
                    uint _2683;
                    _2677 = _2553;
                    _2678 = _2554;
                    _2679 = _2555;
                    _2680 = _2556;
                    _2681 = _2557;
                    _2682 = _2558;
                    _2683 = _2568;
                    float _2609;
                    float _2610;
                    float _2611;
                    float _2612;
                    float _2613;
                    float _2614;
                    for (;;)
                    {
                        uint _2687 = uint(findLSB(_2683)) + (_2559 << 5u);
                        uint _2684 = (_2683 + 4294967295u) & _2683;
                        uint _2689 = _2687 * 48u;
                        vec4 _2703 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2689)).x, texelFetch(g_PointLightRenderingBuffer, int(_2689 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2689 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2689 + 3u)).x));
                        uint _2709 = (_2687 * 48u) + 4u;
                        vec4 _2722 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2709)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 3u)).x));
                        uint _2728 = (_2687 * 48u) + 8u;
                        vec3 _2739 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2728)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 2u)).x));
                        float _2743 = _2703.x - _2260;
                        float _2744 = _2703.y - _2261;
                        float _2745 = _2703.z - _2262;
                        float _2746 = dot(vec3(_2743, _2744, _2745), vec3(_2743, _2744, _2745));
                        float _2749 = inversesqrt(_2746);
                        float _2750 = _2749 * _2743;
                        float _2751 = _2749 * _2744;
                        float _2752 = _2749 * _2745;
                        float _2753 = dot(vec3(_496, _499, _502), vec3(_2750, _2751, _2752));
                        float _2758 = 1.0 - (_2746 * _2703.w);
                        float _4041 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
                        float _2759 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
                        float _2760 = sqrt(_2746) * _2722.w;
                        float _2763 = 1.39999997615814208984375 / (_2760 + 1.39999997615814208984375);
                        float _2764 = _2763 * _2763;
                        float _2767 = ((1.0 - _2764) * _2753) + _2764;
                        float _2770 = _2760 * _2760;
                        float _2774 = ((isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0))) * _2759) / ((_2770 * 0.699999988079071044921875) + 1.0);
                        float _2778 = (-0.0) - _2260;
                        float _2779 = (-0.0) - _2261;
                        float _2780 = (-0.0) - _2262;
                        float _2784 = inversesqrt(dot(vec3(_2778, _2779, _2780), vec3(_2778, _2779, _2780)));
                        float _2785 = _2784 * _2778;
                        float _2786 = _2784 * _2779;
                        float _2787 = _2784 * _2780;
                        float _2795 = exp2(log2(1.0 / ((_2770 * 3.5) + 5.0)) * 0.25);
                        float _2796 = 1.0 - _572;
                        float _2803 = sqrt(1.0 - ((1.0 - (_2796 * _2796)) * (1.0 - (_2795 * _2795))));
                        float _2804 = _2803 * _2803;
                        float _2805 = _2804 * _2804;
                        float _2806 = _2785 + _2750;
                        float _2807 = _2786 + _2751;
                        float _2808 = _2787 + _2752;
                        float _2812 = inversesqrt(dot(vec3(_2806, _2807, _2808), vec3(_2806, _2807, _2808)));
                        float _2816 = dot(vec3(_496, _499, _502), vec3(_2785, _2786, _2787));
                        float _4057 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _2819 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
                        float _2820 = dot(vec3(_496, _499, _502), vec3(_2812 * _2806, _2812 * _2807, _2812 * _2808));
                        float _4068 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
                        float _2823 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
                        float _2827 = ((_2823 * _2823) * (_2805 + (-1.0))) + 1.0;
                        float _2828 = _2763 * _2804;
                        float _2829 = _2828 * _2828;
                        float _2832 = ((1.0 - _2829) * _2753) + _2829;
                        float _4079 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                        float _2833 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
                        float _2834 = 1.0 - _2804;
                        float _2844 = (0.5 / (((_2833 * ((_2819 * _2834) + _2804)) + 9.9999999392252902907785028219223e-09) + (((_2833 * _2834) + _2804) * _2819))) * _2833;
                        float _4090 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                        float _2855 = (((_2805 * 3.1415927410125732421875) * (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) / ((_2827 * _2827) * ((_2770 * 2.1991131305694580078125) + 3.141590118408203125))) * _2759;
                        _2612 = (_2774 * _2722.x) + _2680;
                        _2613 = (_2774 * _2722.y) + _2681;
                        _2614 = (_2774 * _2722.z) + _2682;
                        _2609 = (_2855 * _2739.x) + _2677;
                        _2610 = (_2855 * _2739.y) + _2678;
                        _2611 = (_2855 * _2739.z) + _2679;
                        if (_2684 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2677 = _2609;
                            _2678 = _2610;
                            _2679 = _2611;
                            _2680 = _2612;
                            _2681 = _2613;
                            _2682 = _2614;
                            _2683 = _2684;
                        }
                    }
                    frontier_phi_63_pred = _2614;
                    frontier_phi_63_pred_1 = _2613;
                    frontier_phi_63_pred_2 = _2612;
                    frontier_phi_63_pred_3 = _2611;
                    frontier_phi_63_pred_4 = _2610;
                    frontier_phi_63_pred_5 = _2609;
                }
                _2420 = frontier_phi_63_pred;
                _2418 = frontier_phi_63_pred_1;
                _2416 = frontier_phi_63_pred_2;
                _2414 = frontier_phi_63_pred_3;
                _2412 = frontier_phi_63_pred_4;
                _2410 = frontier_phi_63_pred_5;
                uint _2560 = _2559 + 1u;
                if (_2560 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2553 = _2410;
                    _2554 = _2412;
                    _2555 = _2414;
                    _2556 = _2416;
                    _2557 = _2418;
                    _2558 = _2420;
                    _2559 = _2560;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2409 = _2410;
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
            _2419 = _2420;
        }
        uvec4 _2423 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2424 = _2423.z;
        uint _2426 = (_2424 >> 8u) & 15u;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        float _2531;
        if (((4294967295u << _2426) & _2306) == 0u)
        {
            _2521 = _2409;
            _2523 = _2411;
            _2525 = _2413;
            _2527 = _2415;
            _2529 = _2417;
            _2531 = _2419;
        }
        else
        {
            float _2546 = inversesqrt(dot(vec3(_2260, _2261, _2262), vec3(_2260, _2261, _2262)));
            float _2547 = _2546 * _2260;
            float _2548 = _2546 * _2261;
            float _2549 = _2546 * _2262;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2426 < ((_2424 >> 12u) & 15u))
            {
                float _2522;
                float _2524;
                float _2526;
                float _2528;
                float _2530;
                float _2532;
                float _2660 = _2409;
                float _2661 = _2411;
                float _2662 = _2413;
                float _2663 = _2415;
                float _2664 = _2417;
                float _2665 = _2419;
                uint _2666 = _2426;
                uint _2675;
                bool _2676;
                for (;;)
                {
                    _2675 = texelFetch(g_lightClassification, int((((_2300 << 5u) + (_2286 << 9u)) + (_2666 << 2u)) >> 2u)).x;
                    _2676 = _2675 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2676)
                    {
                        frontier_phi_69_pred = _2665;
                        frontier_phi_69_pred_1 = _2664;
                        frontier_phi_69_pred_2 = _2663;
                        frontier_phi_69_pred_3 = _2662;
                        frontier_phi_69_pred_4 = _2661;
                        frontier_phi_69_pred_5 = _2660;
                    }
                    else
                    {
                        float _2860;
                        float _2861;
                        float _2862;
                        float _2863;
                        float _2864;
                        float _2865;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _2873 = _2660;
                        float _2874 = _2661;
                        float _2875 = _2662;
                        float _2876 = _2663;
                        float _2877 = _2664;
                        float _2878 = _2665;
                        uint _2879 = _2675;
                        uint _2880;
                        vec4 _2905;
                        float _2906;
                        vec4 _2921;
                        vec3 _2933;
                        vec4 _2949;
                        vec4 _2964;
                        float _3011;
                        bool _3012;
                        for (;;)
                        {
                            uint _2890 = ((_2666 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2879));
                            _2880 = (_2879 + 4294967295u) & _2879;
                            uint _2892 = _2890 * 40u;
                            _2905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 3u)).x));
                            _2906 = _2905.w;
                            uint _2908 = (_2890 * 40u) + 4u;
                            _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            uint _2923 = (_2890 * 40u) + 8u;
                            _2933 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x));
                            uint _2936 = (_2890 * 40u) + 16u;
                            _2949 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 3u)).x));
                            uint _2951 = (_2890 * 40u) + 20u;
                            _2964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 3u)).x));
                            uint _2967 = (_2890 * 40u) + 24u;
                            vec4 _2980 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2967)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 3u)).x));
                            uint _2986 = (_2890 * 40u) + 28u;
                            vec4 _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            _3011 = fma(_2262, _2999.z, fma(_2261, _2999.y, _2999.x * _2260)) + _2999.w;
                            _3012 = !((fma(_2262, _2980.z, fma(_2261, _2980.y, _2980.x * _2260)) + _2980.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3012)
                            {
                                float _3039 = _2905.x - _2260;
                                float _3040 = _2905.y - _2261;
                                float _3041 = _2905.z - _2262;
                                float _3042 = dot(vec3(_3039, _3040, _3041), vec3(_3039, _3040, _3041));
                                float _3045 = inversesqrt(_3042);
                                float _3046 = _3045 * _3039;
                                float _3047 = _3045 * _3040;
                                float _3048 = _3045 * _3041;
                                float _3052 = 1.0 - (_3042 / (_2906 * _2906));
                                float _4101 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                                float _3053 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                                float _3057 = sqrt(_3042) * _2921.w;
                                float _3059 = 1.39999997615814208984375 / (_3057 + 1.39999997615814208984375);
                                float _3060 = _3059 * _3059;
                                float _3063 = ((1.0 - _3060) * dot(vec3(_3046, _3047, _3048), vec3(_496, _499, _502))) + _3060;
                                float _3066 = _3057 * _3057;
                                float _3070 = (fma(_2262, _2949.z, fma(_2261, _2949.y, _2949.x * _2260)) + _2949.w) / _3011;
                                float _3071 = (fma(_2262, _2964.z, fma(_2261, _2964.y, _2964.x * _2260)) + _2964.w) / _3011;
                                float _3075 = 1.0 - dot(vec2(_3070, _3071), vec2(_3070, _3071));
                                float _4117 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                                float _3076 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                                float _3077 = _3076 * (((isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0))) * _3053) / ((_3066 * 0.699999988079071044921875) + 1.0));
                                float _3089 = exp2(log2(1.0 / ((_3066 * 3.5) + 5.0)) * 0.25);
                                float _3090 = 1.0 - _572;
                                float _3097 = sqrt(1.0 - ((1.0 - (_3090 * _3090)) * (1.0 - (_3089 * _3089))));
                                float _3098 = _3097 * _3097;
                                float _3099 = _3098 * _3098;
                                float _3100 = _3046 - _2547;
                                float _3101 = _3047 - _2548;
                                float _3102 = _3048 - _2549;
                                float _3106 = inversesqrt(dot(vec3(_3100, _3101, _3102), vec3(_3100, _3101, _3102)));
                                float _3110 = dot(vec3(_496, _499, _502), vec3((-0.0) - _2547, (-0.0) - _2548, (-0.0) - _2549));
                                float _4128 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3113 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
                                float _3114 = dot(vec3(_496, _499, _502), vec3(_3106 * _3100, _3106 * _3101, _3106 * _3102));
                                float _4139 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                                float _3117 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
                                float _3121 = ((_3117 * _3117) * (_3099 + (-1.0))) + 1.0;
                                float _3122 = _3059 * _3098;
                                float _3123 = _3122 * _3122;
                                float _3129 = ((1.0 - _3123) * dot(vec3(_496, _499, _502), vec3(_3046, _3047, _3048))) + _3123;
                                float _4150 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                                float _3130 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
                                float _3131 = 1.0 - _3098;
                                float _3141 = (0.5 / (((_3130 * ((_3113 * _3131) + _3098)) + 9.9999999392252902907785028219223e-09) + (((_3130 * _3131) + _3098) * _3113))) * _3130;
                                float _4161 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                                float _3151 = (_3076 * _3053) * (((_3099 * 3.1415927410125732421875) * (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) / ((_3121 * _3121) * ((_3066 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3077 * _2921.z;
                                frontier_phi_75_pred_1 = _3077 * _2921.y;
                                frontier_phi_75_pred_2 = _3077 * _2921.x;
                                frontier_phi_75_pred_3 = _3151 * _2933.z;
                                frontier_phi_75_pred_4 = _3151 * _2933.y;
                                frontier_phi_75_pred_5 = _3151 * _2933.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3160 = frontier_phi_75_pred;
                            _3159 = frontier_phi_75_pred_1;
                            _3158 = frontier_phi_75_pred_2;
                            _3157 = frontier_phi_75_pred_3;
                            _3156 = frontier_phi_75_pred_4;
                            _3155 = frontier_phi_75_pred_5;
                            _2863 = _3158 + _2876;
                            _2864 = _3159 + _2877;
                            _2865 = _3160 + _2878;
                            _2860 = _3155 + _2873;
                            _2861 = _3156 + _2874;
                            _2862 = _3157 + _2875;
                            if (_2880 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2873 = _2860;
                                _2874 = _2861;
                                _2875 = _2862;
                                _2876 = _2863;
                                _2877 = _2864;
                                _2878 = _2865;
                                _2879 = _2880;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2865;
                        frontier_phi_69_pred_1 = _2864;
                        frontier_phi_69_pred_2 = _2863;
                        frontier_phi_69_pred_3 = _2862;
                        frontier_phi_69_pred_4 = _2861;
                        frontier_phi_69_pred_5 = _2860;
                    }
                    _2532 = frontier_phi_69_pred;
                    _2530 = frontier_phi_69_pred_1;
                    _2528 = frontier_phi_69_pred_2;
                    _2526 = frontier_phi_69_pred_3;
                    _2524 = frontier_phi_69_pred_4;
                    _2522 = frontier_phi_69_pred_5;
                    uint _2667 = _2666 + 1u;
                    if (_2667 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2660 = _2522;
                        _2661 = _2524;
                        _2662 = _2526;
                        _2663 = _2528;
                        _2664 = _2530;
                        _2665 = _2532;
                        _2666 = _2667;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2532;
                frontier_phi_57_58_ladder_1 = _2530;
                frontier_phi_57_58_ladder_2 = _2528;
                frontier_phi_57_58_ladder_3 = _2526;
                frontier_phi_57_58_ladder_4 = _2524;
                frontier_phi_57_58_ladder_5 = _2522;
            }
            else
            {
                frontier_phi_57_58_ladder = _2419;
                frontier_phi_57_58_ladder_1 = _2417;
                frontier_phi_57_58_ladder_2 = _2415;
                frontier_phi_57_58_ladder_3 = _2413;
                frontier_phi_57_58_ladder_4 = _2411;
                frontier_phi_57_58_ladder_5 = _2409;
            }
            _2521 = frontier_phi_57_58_ladder_5;
            _2523 = frontier_phi_57_58_ladder_4;
            _2525 = frontier_phi_57_58_ladder_3;
            _2527 = frontier_phi_57_58_ladder_2;
            _2529 = frontier_phi_57_58_ladder_1;
            _2531 = frontier_phi_57_58_ladder;
        }
        float _2536 = isnan(1.0) ? _556 : (isnan(_556) ? 1.0 : min(_556, 1.0));
        _2318 = (_2536 * _2527) + _1752;
        _2320 = (_2536 * _2529) + _1754;
        _2322 = (_2536 * _2531) + _1756;
        _2324 = ((_2521 * _541) * _2536) + _2100;
        _2326 = ((_2523 * _543) * _2536) + _2102;
        _2328 = ((_2525 * _544) * _2536) + _2104;
    }
    else
    {
        _2318 = _1752;
        _2320 = _1754;
        _2322 = _1756;
        _2324 = _2100;
        _2326 = _2102;
        _2328 = _2104;
    }
    float _4177 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _4188 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _4199 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _2345 = ((isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_2318 + ((isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))) * _556))) + ((_2324 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _1366)) * cbPerFrame._m0[3u].x);
    float _2346 = ((isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_2320 + ((isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0))) * _556))) + ((_2326 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _1366)) * cbPerFrame._m0[3u].x);
    float _2347 = ((isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_2322 + ((isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))) * _556))) + ((_2328 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _1366)) * cbPerFrame._m0[3u].x);
    uint _2351 = _515 + 6u;
    float _2359 = _474 / cbSceneParam._m0[86u].x;
    float _2360 = _475 / cbSceneParam._m0[86u].y;
    vec4 _2374 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2359, _2360, (log2((isnan(cbSceneParam._m0[77u].w) ? _406 : (isnan(_406) ? cbSceneParam._m0[77u].w : min(_406, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2376 = _2374.x;
    float _2377 = _2374.y;
    float _2378 = _2374.z;
    float _2379 = _2374.w;
    float _2471;
    float _2473;
    float _2475;
    float _2477;
    if (_406 > cbSceneParam._m0[78u].w)
    {
        float _2434 = isnan(_406) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _406 : min(cbSceneParam._m0[80u].w, _406));
        float _2435 = _2434 / _406;
        float _2446 = _2435 * _459;
        float _2447 = _460 * _2435;
        float _2448 = (-0.0) - _2447;
        float _2449 = _2435 * _461;
        float _2451 = (cbSceneParam._m0[77u].w * _2448) / _2434;
        float _2452 = _2451 + cbSceneParam._m0[79u].w;
        float _2453 = cbSceneParam._m0[79u].w - _2447;
        float _2459 = sqrt(((_2446 * _2446) + (_2447 * _2447)) + (_2449 * _2449));
        float _2462 = (1.0 - (cbSceneParam._m0[77u].w / _2434)) * _2459;
        float _2467 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2469 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2622;
        if (abs((_2448 - _2451) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2622 = ((((_2452 > 0.0) ? exp2(_2467 * _2452) : (2.0 - exp2(_2469 * _2452))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2462;
        }
        else
        {
            float _2582 = 1.0 / cbSceneParam._m0[80u].x;
            float _2583 = isnan(_2453) ? _2452 : (isnan(_2452) ? _2453 : max(_2452, _2453));
            float _2584 = isnan(_2453) ? _2452 : (isnan(_2452) ? _2453 : min(_2452, _2453));
            float _2593 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : min(_2583, 0.0));
            float _2594 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : min(_2584, 0.0));
            _2622 = ((abs(_2459 / _2448) * cbSceneParam._m0[80u].y) * ((((_2593 - _2594) * 2.0) - ((exp2(_2467 * (isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0)))) - exp2(_2467 * (isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0))))) * _2582)) - ((exp2(_2469 * _2593) - exp2(_2469 * _2594)) * _2582))) + (_2462 * cbSceneParam._m0[80u].z);
        }
        vec4 _2624 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2359, _2360, 1.0), 0.0);
        float _2633 = exp2((_2622 * (-1.44269502162933349609375)) * (1.0 - _2624.w));
        float _2634 = log2(_2633);
        float _2650 = log2(_2379);
        _2471 = (exp2(_2650 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2634 * cbSceneParam._m0[78u].x)) * _2624.x) / cbSceneParam._m0[78u].x)) + _2376;
        _2473 = (exp2(_2650 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2634 * cbSceneParam._m0[78u].y)) * _2624.y) / cbSceneParam._m0[78u].y)) + _2377;
        _2475 = (exp2(_2650 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2634 * cbSceneParam._m0[78u].z)) * _2624.z) / cbSceneParam._m0[78u].z)) + _2378;
        _2477 = _2633 * _2379;
    }
    else
    {
        _2471 = _2376;
        _2473 = _2377;
        _2475 = _2378;
        _2477 = _2379;
    }
    float _2489 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2490 = _2489 == 3.0;
    float _2491 = log2(_2477);
    float _2498 = exp2(_2491 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0)));
    float _2499 = exp2(_2491 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0)));
    float _2500 = exp2(_2491 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0)));
    float _2509 = (_2489 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2509 * (_2490 ? _2498 : (_2498 + (cbSceneParam._m0[72u].w * _2471)));
    SV_Target.y = _2509 * (_2490 ? _2499 : (_2499 + (cbSceneParam._m0[72u].w * _2473)));
    SV_Target.z = _2509 * (_2490 ? _2500 : (_2500 + (cbSceneParam._m0[72u].w * _2475)));
    SV_Target.w = cbInstanceData._m0[_2351].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2351].w;
}


