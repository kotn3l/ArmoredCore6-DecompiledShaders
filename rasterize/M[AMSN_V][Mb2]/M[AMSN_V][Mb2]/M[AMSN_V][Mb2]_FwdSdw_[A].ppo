#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[20];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 5, component = 1) in float TEXCOORD_5;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _977;
float _3650;
float _3651;
float _3652;
float _3653;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = _208 * NORMAL.x;
    float _210 = _208 * NORMAL.y;
    float _211 = _208 * NORMAL.z;
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223;
    float _224;
    float _225;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
    }
    else
    {
        _223 = _209;
        _224 = _210;
        _225 = _211;
    }
    vec4 _251 = texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_5) + cbTextureTilingScale._m0[1u].w));
    float _257 = _251.x * cbMatDynParam._m0[17u].x;
    float _258 = _251.y * cbMatDynParam._m0[17u].y;
    float _259 = _251.z * cbMatDynParam._m0[17u].z;
    vec4 _278 = texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_5) + cbTextureTilingScale._m0[4u].w));
    float _311 = (TEXCOORD_7.x - ((cbMatDynParam._m0[19u].x * (1.0 - TEXCOORD_7.x)) * (texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbMatDynParam._m0[19u].z * TEXCOORD_4) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMatDynParam._m0[19u].z * TEXCOORD_5) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMatDynParam._m0[19u].y * TEXCOORD.w) + 1.0);
    float _3662 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _312 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _319 = (_312 * ((_278.x * cbMatDynParam._m0[18u].x) - _257)) + _257;
    float _320 = (_312 * ((_278.y * cbMatDynParam._m0[18u].y) - _258)) + _258;
    float _321 = (_312 * ((_278.z * cbMatDynParam._m0[18u].z) - _259)) + _259;
    vec4 _334 = texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_5) + cbTextureTilingScale._m0[2u].w));
    float _336 = _334.x;
    float _337 = _334.y;
    float _338 = _334.z;
    vec4 _350 = texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_5) + cbTextureTilingScale._m0[3u].w));
    float _363 = ((_350.z - _338) * _312) + _338;
    float _367 = ((((_350.x - _336) * _312) + _336) * 2.0) + (-1.0);
    float _369 = ((((_350.y - _337) * _312) + _337) * 2.0) + (-1.0);
    float _370 = dot(vec2(_367, _369), vec2(_367, _369));
    float _3673 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _375 = sqrt(1.0 - (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))));
    float _378 = fma(_375, _223, fma(_369, _215 * TANGENT.x, (_201 * _193) * _367));
    float _381 = fma(_375, _224, fma(_369, _215 * TANGENT.y, (_201 * _194) * _367));
    float _384 = fma(_375, _225, fma(_369, _215 * TANGENT.z, (_201 * _195) * _367));
    float _388 = inversesqrt(dot(vec3(_378, _381, _384), vec3(_378, _381, _384)));
    float _389 = _388 * _378;
    float _390 = _388 * _381;
    float _391 = _388 * _384;
    float _3684 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _392 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _3695 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3706 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3717 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _3728 = isnan(0.0) ? cbMatDynParam._m0[19u].w : (isnan(cbMatDynParam._m0[19u].w) ? 0.0 : max(cbMatDynParam._m0[19u].w, 0.0));
    float _396 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _412 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _455 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _465 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _455);
    float _466 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _455);
    float _467 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _455);
    float _471 = inversesqrt(dot(vec3(_465, _466, _467), vec3(_465, _466, _467)));
    float _472 = _465 * _471;
    float _473 = _466 * _471;
    float _474 = _467 * _471;
    vec4 _479 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _481 = _479.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _657 = sqrt(((_465 * _465) + (_466 * _466)) + (_467 * _467));
        float _663 = (cbMatDynParam._m0[5u].x * _657) + cbMatDynParam._m0[5u].y;
        float _3739 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
        float _664 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _668 = (cbMatDynParam._m0[5u].z * _657) + cbMatDynParam._m0[5u].w;
        float _3750 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) - _664)) + _664) < ((_481 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _493 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _494 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _514 = fma(_391, cbSceneParam._m0[5u].z, fma(_390, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _389));
    float _517 = fma(_391, cbSceneParam._m0[6u].z, fma(_390, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _389));
    float _520 = fma(_391, cbSceneParam._m0[7u].z, fma(_390, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _389));
    uint _533 = uint(roundEven(NORMAL.w)) * 13u;
    uint _535 = _533 + 9u;
    uint _536 = _535 + uint(cbMatDynParam._m0[0u].w);
    float _542 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0)))) * cbInstanceData._m0[_536].x;
    float _543 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0)))) * cbInstanceData._m0[_536].y;
    float _544 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0)))) * cbInstanceData._m0[_536].z;
    float _3761 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _545 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _3772 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _546 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _3783 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _547 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _548 = 1.0 - _396;
    float _549 = _545 * _548;
    float _550 = _546 * _548;
    float _551 = _547 * _548;
    float _556 = (_545 + (-0.039999999105930328369140625)) * _396;
    float _557 = (_546 + (-0.039999999105930328369140625)) * _396;
    float _558 = (_547 + (-0.039999999105930328369140625)) * _396;
    float _559 = _556 + 0.039999999105930328369140625;
    float _561 = _557 + 0.039999999105930328369140625;
    float _562 = _558 + 0.039999999105930328369140625;
    vec4 _571 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _493, cbSceneParam._m0[86u].y * _494));
    float _574 = _571.x * TEXCOORD_7.w;
    float _575 = dot(vec3(_389, _390, _391), vec3(_472, _473, _474));
    float _578 = _575 * 2.0;
    float _582 = (_578 * _389) - _472;
    float _583 = (_578 * _390) - _473;
    float _584 = (_578 * _391) - _474;
    float _588 = abs(dot(vec3(_472, _473, _474), vec3(_389, _390, _391)));
    float _3794 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _590 = sqrt(_392);
    float _603 = exp2((_590 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_590 * 3.0));
    float _609 = (1.0 - _603) * ((_590 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _610 = _603 * _590;
    float _638 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _642 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _646 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _976;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _701 = fma(_646, cbModelParam._m0[26u].z, fma(_642, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _638));
        float _705 = fma(_646, cbModelParam._m0[27u].z, fma(_642, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _638));
        float _709 = fma(_646, cbModelParam._m0[28u].z, fma(_642, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _638));
        float _734 = _638 + _389;
        float _735 = _642 + _390;
        float _736 = _646 + _391;
        float _746 = fma(_736, cbModelParam._m0[26u].z, fma(_735, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _734)) - _701;
        float _747 = fma(_736, cbModelParam._m0[27u].z, fma(_735, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _734)) - _705;
        float _748 = fma(_736, cbModelParam._m0[28u].z, fma(_735, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _734)) - _709;
        float _752 = inversesqrt(dot(vec3(_746, _747, _748), vec3(_746, _747, _748)));
        float _765 = ((_752 * _746) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_701 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _766 = ((_752 * _747) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_705 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _767 = ((_752 * _748) / cbModelParam._m0[34u].z) + ((((((_709 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _770 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        vec4 _777 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        vec4 _784 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        vec4 _791 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        float _804 = exp2((_770.w + (-0.5)) * 20.0) * 2.0;
        float _805 = _804 * (_770.x + (-0.5));
        float _806 = _804 * (_770.y + (-0.5));
        float _807 = _804 * (_770.z + (-0.5));
        float _814 = exp2((_777.w + (-0.5)) * 20.0) * 2.0;
        float _815 = _814 * (_777.x + (-0.5));
        float _816 = _814 * (_777.y + (-0.5));
        float _817 = _814 * (_777.z + (-0.5));
        float _824 = exp2((_784.w + (-0.5)) * 20.0) * 2.0;
        float _825 = _824 * (_784.x + (-0.5));
        float _826 = _824 * (_784.y + (-0.5));
        float _827 = _824 * (_784.z + (-0.5));
        float _834 = exp2((_791.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_791.x + (-0.5));
        float _836 = _834 * (_791.y + (-0.5));
        float _837 = _834 * (_791.z + (-0.5));
        float _838 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _839 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _840 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _841 = _805 * 0.5;
        float _842 = _815 * 0.5;
        float _843 = _825 * 0.5;
        float _844 = dot(vec3(_841, _842, _843), vec3(_841, _842, _843));
        float _849 = (_844 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_844);
        float _858 = (dot(vec3(_389, _390, _391), vec3(_849 * _841, _849 * _842, _849 * _843)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _868 = sqrt(((_842 * _842) + (_841 * _841)) + (_843 * _843)) / (_838 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _870 = _869 * 2.0;
        float _874 = (1.0 - _869) / (_869 + 1.0);
        float _3842 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _884 = ((((1.0 - _875) * (_870 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_870 + 1.0))) + _875) * _838;
        float _885 = _806 * 0.5;
        float _886 = _816 * 0.5;
        float _887 = _826 * 0.5;
        float _888 = dot(vec3(_885, _886, _887), vec3(_885, _886, _887));
        float _893 = (_888 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_888);
        float _901 = (dot(vec3(_389, _390, _391), vec3(_893 * _885, _893 * _886, _893 * _887)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _910 = sqrt(((_886 * _886) + (_885 * _885)) + (_887 * _887)) / (_839 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _911 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _912 = _911 * 2.0;
        float _916 = (1.0 - _911) / (_911 + 1.0);
        float _3875 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _926 = ((((1.0 - _917) * (_912 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_912 + 1.0))) + _917) * _839;
        float _927 = _807 * 0.5;
        float _928 = _817 * 0.5;
        float _929 = _827 * 0.5;
        float _930 = dot(vec3(_927, _928, _929), vec3(_927, _928, _929));
        float _935 = (_930 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_930);
        float _943 = (dot(vec3(_389, _390, _391), vec3(_935 * _927, _935 * _928, _935 * _929)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _952 = sqrt(((_928 * _928) + (_927 * _927)) + (_929 * _929)) / (_840 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _954 = _953 * 2.0;
        float _958 = (1.0 - _953) / (_953 + 1.0);
        float _3908 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _968 = ((((1.0 - _959) * (_954 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_954 + 1.0))) + _959) * _840;
        _976 = _807;
        _978 = _806;
        _979 = _805;
        _980 = _817;
        _981 = _816;
        _982 = _815;
        _983 = _827;
        _984 = _826;
        _985 = _825;
        _986 = _840;
        _987 = _839;
        _988 = _838;
        _989 = cbModelParam._m0[36u].z * (isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0)));
        _990 = cbModelParam._m0[36u].z * (isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0)));
        _991 = cbModelParam._m0[36u].z * (isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0)));
    }
    else
    {
        _976 = _977;
        _978 = _977;
        _979 = _977;
        _980 = _977;
        _981 = _977;
        _982 = _977;
        _983 = _977;
        _984 = _977;
        _985 = _977;
        _986 = _977;
        _987 = _977;
        _988 = _977;
        _989 = 0.0;
        _990 = 0.0;
        _991 = 0.0;
    }
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1020 = fma(_646, cbModelParam._m0[30u].z, fma(_642, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _638));
        float _1024 = fma(_646, cbModelParam._m0[31u].z, fma(_642, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _638));
        float _1028 = fma(_646, cbModelParam._m0[32u].z, fma(_642, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _638));
        float _1051 = _638 + _389;
        float _1052 = _642 + _390;
        float _1053 = _646 + _391;
        float _1063 = fma(_1053, cbModelParam._m0[30u].z, fma(_1052, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1051)) - _1020;
        float _1064 = fma(_1053, cbModelParam._m0[31u].z, fma(_1052, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1051)) - _1024;
        float _1065 = fma(_1053, cbModelParam._m0[32u].z, fma(_1052, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1051)) - _1028;
        float _1069 = inversesqrt(dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065)));
        float _1082 = ((_1069 * _1063) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1020 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1083 = ((_1069 * _1064) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1024 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1084 = ((_1069 * _1065) / cbModelParam._m0[35u].z) + ((((((_1028 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        float _1119 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1086.x + (-0.5));
        float _1121 = _1119 * (_1086.y + (-0.5));
        float _1122 = _1119 * (_1086.z + (-0.5));
        float _1129 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1093.x + (-0.5));
        float _1131 = _1129 * (_1093.y + (-0.5));
        float _1132 = _1129 * (_1093.z + (-0.5));
        float _1139 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1100.x + (-0.5));
        float _1141 = _1139 * (_1100.y + (-0.5));
        float _1142 = _1139 * (_1100.z + (-0.5));
        float _1149 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1107.x + (-0.5));
        float _1151 = _1149 * (_1107.y + (-0.5));
        float _1152 = _1149 * (_1107.z + (-0.5));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = _1120 * 0.5;
        float _1157 = _1130 * 0.5;
        float _1158 = _1140 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_389, _390, _391), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3971 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1183 + 1.0))) + _1188) * _1153;
        float _1198 = _1121 * 0.5;
        float _1199 = _1131 * 0.5;
        float _1200 = _1141 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_389, _390, _391), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _4004 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1225 + 1.0))) + _1230) * _1154;
        float _1240 = _1122 * 0.5;
        float _1241 = _1132 * 0.5;
        float _1242 = _1142 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_389, _390, _391), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _4037 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1267 + 1.0))) + _1272) * _1155;
        _1289 = _1122;
        _1290 = _1121;
        _1291 = _1120;
        _1292 = _1132;
        _1293 = _1131;
        _1294 = _1130;
        _1295 = _1142;
        _1296 = _1141;
        _1297 = _1140;
        _1298 = _1155;
        _1299 = _1154;
        _1300 = _1153;
        _1301 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1302 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1303 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
    }
    else
    {
        _1289 = _977;
        _1290 = _977;
        _1291 = _977;
        _1292 = _977;
        _1293 = _977;
        _1294 = _977;
        _1295 = _977;
        _1296 = _977;
        _1297 = _977;
        _1298 = _977;
        _1299 = _977;
        _1300 = _977;
        _1301 = 0.0;
        _1302 = 0.0;
        _1303 = 0.0;
    }
    float _1313 = (cbModelParam._m0[1u].x * (_1301 - _989)) + _989;
    float _1314 = (cbModelParam._m0[1u].x * (_1302 - _990)) + _990;
    float _1315 = (cbModelParam._m0[1u].x * (_1303 - _991)) + _991;
    float _1336 = fma(_1315, cbSceneParam._m0[89u].z, fma(_1314, cbSceneParam._m0[89u].y, _1313 * cbSceneParam._m0[89u].x));
    float _1339 = fma(_1315, cbSceneParam._m0[90u].z, fma(_1314, cbSceneParam._m0[90u].y, _1313 * cbSceneParam._m0[90u].x));
    float _1342 = fma(_1315, cbSceneParam._m0[91u].z, fma(_1314, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1313));
    float _1357 = _582 * 0.5;
    float _1358 = _583 * 0.5;
    float _1359 = _584 * 0.5;
    float _1360 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1291, _1294, _1297, _1300));
    float _1363 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1290, _1293, _1296, _1299));
    float _1366 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1289, _1292, _1295, _1298));
    float _1400;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1373 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_976, _980, _983, _986));
        float _1377 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_978, _981, _984, _987));
        float _1381 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_979, _982, _985, _988));
        float _1388 = dot(vec4(cbModelParam._m0[39u]), vec4(_1357, _1358, _1359, 1.0));
        _1400 = dot(vec3(isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)), isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1388) ? 0.0 : (isnan(0.0) ? _1388 : max(0.0, _1388))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1400 = 1.0;
    }
    float _1411;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1402 = dot(vec4(cbModelParam._m0[40u]), vec4(_1357, _1358, _1359, 1.0));
        _1411 = dot(vec3(isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)), isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)), isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1402) ? 0.0 : (isnan(0.0) ? _1402 : max(0.0, _1402))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1411 = 1.0;
    }
    float _1415 = (_1411 * cbModelParam._m0[1u].x) + (_1400 * (1.0 - cbModelParam._m0[1u].x));
    float _1425 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _392);
    float _1426 = isnan(_1425) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1425 : min(cbModelParam._m0[25u].z, _1425));
    float _1508;
    float _1510;
    float _1512;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1475 = fma(_646, cbModelParam._m0[13u].z, fma(_642, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _638)) + cbModelParam._m0[13u].w;
        float _1479 = fma(_646, cbModelParam._m0[14u].z, fma(_642, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _638)) + cbModelParam._m0[14u].w;
        float _1483 = fma(_646, cbModelParam._m0[15u].z, fma(_642, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _638)) + cbModelParam._m0[15u].w;
        float _1486 = fma(_584, cbModelParam._m0[13u].z, fma(_583, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _582));
        float _1489 = fma(_584, cbModelParam._m0[14u].z, fma(_583, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _582));
        float _1492 = fma(_584, cbModelParam._m0[15u].z, fma(_583, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _582));
        float _1520;
        if (_1486 > 0.0)
        {
            _1520 = abs((1.0 - _1475) / _1486);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1475 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1520 = frontier_phi_19_17_ladder;
        }
        float _1694;
        if (_1489 > 0.0)
        {
            _1694 = abs((1.0 - _1479) / _1489);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1479 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1694 = frontier_phi_28_24_ladder;
        }
        float _1989;
        if (_1492 > 0.0)
        {
            _1989 = abs((1.0 - _1483) / _1492);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1483 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1989 = frontier_phi_40_35_ladder;
        }
        float _1991 = isnan(_1694) ? _1520 : (isnan(_1520) ? _1694 : min(_1520, _1694));
        float _1992 = isnan(_1989) ? _1991 : (isnan(_1991) ? _1989 : min(_1991, _1989));
        float _1996 = (_1992 * _1486) + _1475;
        float _1997 = (_1992 * _1489) + _1479;
        float _1998 = (_1992 * _1492) + _1483;
        float _1999 = _1992 * 9.9999997473787516355514526367188e-05;
        float _2001 = (-1.0) - _1999;
        float _2003 = _1999 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1998 > _2003) || ((_1998 < _2001) || ((_1997 > _2003) || ((_1997 < _2001) || ((_1996 < _2001) || (_1996 > _2003))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2143 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1998, cbModelParam._m0[9u].z, fma(_1997, cbModelParam._m0[9u].y, _1996 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1998, cbModelParam._m0[10u].z, fma(_1997, cbModelParam._m0[10u].y, _1996 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1998, cbModelParam._m0[11u].z, fma(_1997, cbModelParam._m0[11u].y, _1996 * cbModelParam._m0[11u].x))), _1426);
            frontier_phi_18_40_ladder = _2143.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2143.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2143.x * cbModelParam._m0[1u].y;
        }
        _1508 = frontier_phi_18_40_ladder_2;
        _1510 = frontier_phi_18_40_ladder_1;
        _1512 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1496 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_582, _583, _584), _1426);
        _1508 = _1496.x * cbModelParam._m0[1u].y;
        _1510 = _1496.y * cbModelParam._m0[1u].y;
        _1512 = _1496.z * cbModelParam._m0[1u].y;
    }
    float _1516 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _392);
    float _1517 = isnan(_1516) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1516 : min(cbModelParam._m0[25u].w, _1516));
    float _1608;
    float _1610;
    float _1612;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1572 = fma(_646, cbModelParam._m0[21u].z, fma(_642, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _638)) + cbModelParam._m0[21u].w;
        float _1576 = fma(_646, cbModelParam._m0[22u].z, fma(_642, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _638)) + cbModelParam._m0[22u].w;
        float _1580 = fma(_646, cbModelParam._m0[23u].z, fma(_642, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _638)) + cbModelParam._m0[23u].w;
        float _1583 = fma(_584, cbModelParam._m0[21u].z, fma(_583, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _582));
        float _1586 = fma(_584, cbModelParam._m0[22u].z, fma(_583, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _582));
        float _1589 = fma(_584, cbModelParam._m0[23u].z, fma(_583, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _582));
        float _1699;
        if (_1583 > 0.0)
        {
            _1699 = abs((1.0 - _1572) / _1583);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1572 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1699 = frontier_phi_30_26_ladder;
        }
        float _2016;
        if (_1586 > 0.0)
        {
            _2016 = abs((1.0 - _1576) / _1586);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1576 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2016 = frontier_phi_42_37_ladder;
        }
        float _2354;
        if (_1589 > 0.0)
        {
            _2354 = abs((1.0 - _1580) / _1589);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1580 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2354 = frontier_phi_52_49_ladder;
        }
        float _2356 = isnan(_2016) ? _1699 : (isnan(_1699) ? _2016 : min(_1699, _2016));
        float _2357 = isnan(_2354) ? _2356 : (isnan(_2356) ? _2354 : min(_2356, _2354));
        float _2361 = (_2357 * _1583) + _1572;
        float _2362 = (_2357 * _1586) + _1576;
        float _2363 = (_2357 * _1589) + _1580;
        float _2364 = _2357 * 9.9999997473787516355514526367188e-05;
        float _2365 = (-1.0) - _2364;
        float _2367 = _2364 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2363 > _2367) || ((_2363 < _2365) || ((_2362 > _2367) || ((_2362 < _2365) || ((_2361 < _2365) || (_2361 > _2367))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2485 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2363, cbModelParam._m0[17u].z, fma(_2362, cbModelParam._m0[17u].y, _2361 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2363, cbModelParam._m0[18u].z, fma(_2362, cbModelParam._m0[18u].y, _2361 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2363, cbModelParam._m0[19u].z, fma(_2362, cbModelParam._m0[19u].y, _2361 * cbModelParam._m0[19u].x))), _1517);
            frontier_phi_27_52_ladder = _2485.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2485.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2485.x * cbModelParam._m0[1u].z;
        }
        _1608 = frontier_phi_27_52_ladder_2;
        _1610 = frontier_phi_27_52_ladder_1;
        _1612 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1592 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_582, _583, _584), _1517);
        _1608 = _1592.x * cbModelParam._m0[1u].z;
        _1610 = _1592.y * cbModelParam._m0[1u].z;
        _1612 = _1592.z * cbModelParam._m0[1u].z;
    }
    float _1625 = (((_609 * _559) + _610) * _574) * ((cbModelParam._m0[1u].w * (_1608 - _1508)) + _1508);
    float _1627 = (((_609 * _561) + _610) * _574) * ((cbModelParam._m0[1u].w * (_1610 - _1510)) + _1510);
    float _1629 = (((_609 * _562) + _610) * _574) * ((cbModelParam._m0[1u].w * (_1612 - _1512)) + _1512);
    float _1632 = fma(_1629, cbSceneParam._m0[89u].z, fma(_1627, cbSceneParam._m0[89u].y, _1625 * cbSceneParam._m0[89u].x));
    float _1635 = fma(_1629, cbSceneParam._m0[90u].z, fma(_1627, cbSceneParam._m0[90u].y, _1625 * cbSceneParam._m0[90u].x));
    float _1638 = fma(_1629, cbSceneParam._m0[91u].z, fma(_1627, cbSceneParam._m0[91u].y, _1625 * cbSceneParam._m0[91u].x));
    float _1673 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1677 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1681 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1685 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1686 = _1673 / _1685;
    float _1687 = _1677 / _1685;
    float _1688 = _1681 / _1685;
    float _1835;
    float _1836;
    float _1837;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1715 = ((uint(_1688 > cbSceneParam._m0[59u].y) + uint(_1688 > cbSceneParam._m0[59u].x)) + uint(_1688 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1716 = _1715 + 43u;
        uint _1724 = _1715 + 44u;
        uint _1732 = _1715 + 45u;
        uint _1740 = _1715 + 46u;
        float _1751 = fma(_1685, cbSceneParam._m0[_1716].w, fma(_1681, cbSceneParam._m0[_1716].z, fma(_1677, cbSceneParam._m0[_1716].y, _1673 * cbSceneParam._m0[_1716].x)));
        float _1755 = fma(_1685, cbSceneParam._m0[_1724].w, fma(_1681, cbSceneParam._m0[_1724].z, fma(_1677, cbSceneParam._m0[_1724].y, _1673 * cbSceneParam._m0[_1724].x)));
        float _1763 = fma(_1685, cbSceneParam._m0[_1740].w, fma(_1681, cbSceneParam._m0[_1740].z, fma(_1677, cbSceneParam._m0[_1740].y, _1673 * cbSceneParam._m0[_1740].x)));
        float _1768 = cbSceneParam._m0[33u].z * _1763;
        float _1770 = cbSceneParam._m0[33u].w * _1763;
        float _1773 = fma(_1685, cbSceneParam._m0[_1732].w, fma(_1681, cbSceneParam._m0[_1732].z, fma(_1677, cbSceneParam._m0[_1732].y, _1673 * cbSceneParam._m0[_1732].x))) / _1763;
        float _1821 = (cbSceneParam._m0[33u].x - sqrt(((_1687 * _1687) + (_1686 * _1686)) + (_1688 * _1688))) * cbSceneParam._m0[33u].y;
        float _4163 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1828 = (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1768 + _1751) / _1763, (_1770 + _1755) / _1763), _1773), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1770 + _1751) / _1763, (_1755 - _1768) / _1763), _1773), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1751 - _1768) / _1763, (_1755 - _1770) / _1763), _1773), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1751 - _1770) / _1763, (_1768 + _1755) / _1763), _1773), 0.0)).x), vec4(0.25)));
        _1835 = 1.0 - (_1828 * cbSceneParam._m0[34u].x);
        _1836 = 1.0 - (_1828 * cbSceneParam._m0[34u].y);
        _1837 = 1.0 - (_1828 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1835 = 1.0;
        _1836 = 1.0;
        _1837 = 1.0;
    }
    float _1901;
    float _1903;
    float _1905;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1889 = fma(_1685, cbSceneParam._m0[63u].w, fma(_1681, cbSceneParam._m0[63u].z, fma(_1677, cbSceneParam._m0[63u].y, _1673 * cbSceneParam._m0[63u].x)));
        float _1890 = fma(_1685, cbSceneParam._m0[60u].w, fma(_1681, cbSceneParam._m0[60u].z, fma(_1677, cbSceneParam._m0[60u].y, _1673 * cbSceneParam._m0[60u].x))) / _1889;
        float _1891 = fma(_1685, cbSceneParam._m0[61u].w, fma(_1681, cbSceneParam._m0[61u].z, fma(_1677, cbSceneParam._m0[61u].y, _1673 * cbSceneParam._m0[61u].x))) / _1889;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1890 >= cbSceneParam._m0[64u].x) && (_1891 >= cbSceneParam._m0[64u].y)) && (_1890 <= cbSceneParam._m0[64u].z)) && (_1891 <= cbSceneParam._m0[64u].w))
        {
            float _2029 = fma(_1685, cbSceneParam._m0[62u].w, fma(_1681, cbSceneParam._m0[62u].z, fma(_1677, cbSceneParam._m0[62u].y, _1673 * cbSceneParam._m0[62u].x))) / _1889;
            float _2033 = isnan(cbSceneParam._m0[41u].w) ? _2029 : (isnan(_2029) ? cbSceneParam._m0[41u].w : max(_2029, cbSceneParam._m0[41u].w));
            float _2076 = (cbSceneParam._m0[33u].x - sqrt(((_1687 * _1687) + (_1686 * _1686)) + (_1688 * _1688))) * cbSceneParam._m0[33u].y;
            float _4179 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
            float _2083 = (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1890, cbSceneParam._m0[33u].w + _1891), _2033), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1890, _1891 - cbSceneParam._m0[33u].z), _2033), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1890 - cbSceneParam._m0[33u].z, _1891 - cbSceneParam._m0[33u].w), _2033), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1890 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1891), _2033), 0.0)).x), vec4(0.25)));
            float _2087 = 1.0 - (_2083 * cbSceneParam._m0[34u].x);
            float _2088 = 1.0 - (_2083 * cbSceneParam._m0[34u].y);
            float _2089 = 1.0 - (_2083 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2088) ? _1836 : (isnan(_1836) ? _2088 : min(_1836, _2088));
            frontier_phi_39_38_ladder_1 = isnan(_2087) ? _1835 : (isnan(_1835) ? _2087 : min(_1835, _2087));
            frontier_phi_39_38_ladder_2 = isnan(_2089) ? _1837 : (isnan(_1837) ? _2089 : min(_1837, _2089));
        }
        else
        {
            frontier_phi_39_38_ladder = _1836;
            frontier_phi_39_38_ladder_1 = _1835;
            frontier_phi_39_38_ladder_2 = _1837;
        }
        _1901 = frontier_phi_39_38_ladder_1;
        _1903 = frontier_phi_39_38_ladder;
        _1905 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1901 = _1835;
        _1903 = _1836;
        _1905 = _1837;
    }
    uvec4 _1910 = floatBitsToUint(cbInstanceData._m0[_533 + 5u]);
    uint _1912 = _1910.x * 14u;
    uint _1913 = _1912 + 13u;
    float _1920 = _574 + (-1.0);
    float _1925 = (cbLight._m0[_1913].x * _1920) + 1.0;
    float _1926 = (cbLight._m0[_1913].y * _1920) + 1.0;
    float _1927 = (cbLight._m0[_1913].z * _1920) + 1.0;
    float _1928 = (cbLight._m0[_1913].w * _1920) + 1.0;
    uint _1929 = _1912 + 5u;
    float _1935 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
    uint _1939 = _1912 + 4u;
    float _1948 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
    uint _1952 = _1912 | 1u;
    float _1963 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_389, _390, _391));
    float _1966 = dot(vec3(cbLight._m0[_1952].xyz), vec3(_389, _390, _391));
    float _4215 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _4226 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1971 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * 0.3183098733425140380859375;
    float _1973 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * 0.3183098733425140380859375;
    float _1980 = ((cbLight._m0[_1929].x * _1935) * _1973) + (((cbLight._m0[_1939].x * _1901) * _1948) * _1971);
    float _1981 = ((_1935 * cbLight._m0[_1929].y) * _1973) + (((cbLight._m0[_1939].y * _1903) * _1948) * _1971);
    float _1982 = ((_1935 * cbLight._m0[_1929].z) * _1973) + (((cbLight._m0[_1939].z * _1905) * _1948) * _1971);
    uvec4 _1986 = floatBitsToUint(cbLight._m0[_1912 + 12u]);
    bool _1988 = _1986.x == 0u;
    float _2090;
    float _2092;
    float _2094;
    if (_1988)
    {
        _2090 = _1980;
        _2092 = _1981;
        _2094 = _1982;
    }
    else
    {
        uint _2098 = _1912 + 6u;
        float _2114 = (dot(vec3(cbLight._m0[_1912 + 2u].xyz), vec3(_389, _390, _391)) * 0.5) + 0.5;
        float _2115 = _2114 * _2114;
        float _4237 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2116 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _2117 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
        _2090 = (((cbLight._m0[_2098].x * 0.3183098733425140380859375) * _2116) * _2117) + _1980;
        _2092 = (((cbLight._m0[_2098].y * 0.3183098733425140380859375) * _2116) * _2117) + _1981;
        _2094 = (((cbLight._m0[_2098].z * 0.3183098733425140380859375) * _2116) * _2117) + _1982;
    }
    bool _2097 = _1986.y == 0u;
    float _2152;
    float _2154;
    float _2156;
    if (_2097)
    {
        _2152 = _2090;
        _2154 = _2092;
        _2156 = _2094;
    }
    else
    {
        uint _2325 = _1912 + 7u;
        float _2341 = (dot(vec3(cbLight._m0[_1912 + 3u].xyz), vec3(_389, _390, _391)) * 0.5) + 0.5;
        float _2342 = _2341 * _2341;
        float _4253 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2343 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _2344 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
        _2152 = (((cbLight._m0[_2325].x * 0.3183098733425140380859375) * _2343) * _2344) + _2090;
        _2154 = (((cbLight._m0[_2325].y * 0.3183098733425140380859375) * _2343) * _2344) + _2092;
        _2156 = (((cbLight._m0[_2325].z * 0.3183098733425140380859375) * _2343) * _2344) + _2094;
    }
    uint _2159 = _1912 + 8u;
    float _2172 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1912].w)) * _392) * 0.949999988079071044921875);
    float _2173 = _2172 * _2172;
    float _2174 = cbLight._m0[_1912].x + _472;
    float _2175 = cbLight._m0[_1912].y + _473;
    float _2176 = cbLight._m0[_1912].z + _474;
    float _2180 = inversesqrt(dot(vec3(_2174, _2175, _2176), vec3(_2174, _2175, _2176)));
    float _2181 = _2180 * _2174;
    float _2182 = _2180 * _2175;
    float _2183 = _2180 * _2176;
    float _2184 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_1912].xyz));
    float _4269 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2187 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _4280 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _2188 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _2189 = dot(vec3(_389, _390, _391), vec3(_2181, _2182, _2183));
    float _4291 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2192 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2193 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_2181, _2182, _2183));
    float _4302 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2197 = _2173 * _2173;
    float _2201 = ((_2192 * _2192) * (_2197 + (-1.0))) + 1.0;
    float _2209 = exp2(log2(1.0 - (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * 5.0);
    float _2210 = 0.959999978542327880859375 - _556;
    float _2212 = 0.959999978542327880859375 - _557;
    float _2213 = 0.959999978542327880859375 - _558;
    float _2220 = 1.0 - _2173;
    float _2231 = (0.5 / (((_2188 * ((_2187 * _2220) + _2173)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2220) + _2173) * _2187))) * _2187;
    float _4313 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2233 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2197 / ((_2201 * _2201) * 3.141590118408203125));
    uint _2247 = _1912 + 9u;
    float _2258 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1952].w)) * _392) * 0.949999988079071044921875);
    float _2259 = _2258 * _2258;
    float _2260 = cbLight._m0[_1952].x + _472;
    float _2261 = cbLight._m0[_1952].y + _473;
    float _2262 = cbLight._m0[_1952].z + _474;
    float _2266 = inversesqrt(dot(vec3(_2260, _2261, _2262), vec3(_2260, _2261, _2262)));
    float _2267 = _2266 * _2260;
    float _2268 = _2266 * _2261;
    float _2269 = _2266 * _2262;
    float _2270 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_1952].xyz));
    float _4324 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2273 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _2274 = dot(vec3(_389, _390, _391), vec3(_2267, _2268, _2269));
    float _4335 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _2278 = dot(vec3(cbLight._m0[_1952].xyz), vec3(_2267, _2268, _2269));
    float _4346 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2282 = _2259 * _2259;
    float _2286 = ((_2277 * _2277) * (_2282 + (-1.0))) + 1.0;
    float _2293 = exp2(log2(1.0 - (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) * 5.0);
    float _2300 = 1.0 - _2259;
    float _2310 = (0.5 / (((_2188 * ((_2273 * _2300) + _2259)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2300) + _2259) * _2273))) * _2273;
    float _4357 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2312 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2282 / ((_2286 * _2286) * 3.141590118408203125));
    float _2322 = (((((_2293 * _2210) + _559) * cbLight._m0[_2247].x) * _2312) * _1935) + ((((cbLight._m0[_2159].x * _1901) * ((_2209 * _2210) + _559)) * _2233) * _1948);
    float _2323 = (((((_2293 * _2212) + _561) * cbLight._m0[_2247].y) * _2312) * _1935) + ((((cbLight._m0[_2159].y * _1903) * ((_2209 * _2212) + _561)) * _2233) * _1948);
    float _2324 = (((((_2293 * _2213) + _562) * cbLight._m0[_2247].z) * _2312) * _1935) + ((((cbLight._m0[_2159].z * _1905) * ((_2209 * _2213) + _562)) * _2233) * _1948);
    float _2380;
    float _2382;
    float _2384;
    if (_1988)
    {
        _2380 = _2322;
        _2382 = _2323;
        _2384 = _2324;
    }
    else
    {
        uint _2386 = _1912 + 2u;
        uint _2390 = _1912 + 10u;
        float _2404 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2386].w)) * _392) * 0.949999988079071044921875);
        float _2405 = _2404 * _2404;
        float _2406 = cbLight._m0[_2386].x + _472;
        float _2407 = cbLight._m0[_2386].y + _473;
        float _2408 = cbLight._m0[_2386].z + _474;
        float _2412 = inversesqrt(dot(vec3(_2406, _2407, _2408), vec3(_2406, _2407, _2408)));
        float _2413 = _2412 * _2406;
        float _2414 = _2412 * _2407;
        float _2415 = _2412 * _2408;
        float _2416 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_2386].xyz));
        float _4368 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2419 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _2420 = dot(vec3(_389, _390, _391), vec3(_2413, _2414, _2415));
        float _4379 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2423 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2424 = dot(vec3(cbLight._m0[_2386].xyz), vec3(_2413, _2414, _2415));
        float _4390 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2428 = _2405 * _2405;
        float _2432 = ((_2423 * _2423) * (_2428 + (-1.0))) + 1.0;
        float _2439 = exp2(log2(1.0 - (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) * 5.0);
        float _2446 = 1.0 - _2405;
        float _2456 = (0.5 / (((_2188 * ((_2419 * _2446) + _2405)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2446) + _2405) * _2419))) * _2419;
        float _4401 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2458 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_2428 / ((_2432 * _2432) * 3.141590118408203125));
        float _2459 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
        _2380 = (((((_2439 * _2210) + _559) * cbLight._m0[_2390].x) * _2458) * _2459) + _2322;
        _2382 = (((((_2439 * _2212) + _561) * cbLight._m0[_2390].y) * _2458) * _2459) + _2323;
        _2384 = (((((_2439 * _2213) + _562) * cbLight._m0[_2390].z) * _2458) * _2459) + _2324;
    }
    float _2490;
    float _2492;
    float _2494;
    if (_2097)
    {
        _2490 = _2380;
        _2492 = _2382;
        _2494 = _2384;
    }
    else
    {
        uint _2501 = _1912 + 3u;
        uint _2505 = _1912 + 11u;
        float _2519 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2501].w)) * _392) * 0.949999988079071044921875);
        float _2520 = _2519 * _2519;
        float _2521 = cbLight._m0[_2501].x + _472;
        float _2522 = cbLight._m0[_2501].y + _473;
        float _2523 = cbLight._m0[_2501].z + _474;
        float _2527 = inversesqrt(dot(vec3(_2521, _2522, _2523), vec3(_2521, _2522, _2523)));
        float _2528 = _2527 * _2521;
        float _2529 = _2527 * _2522;
        float _2530 = _2527 * _2523;
        float _2531 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_2501].xyz));
        float _4417 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2534 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _2535 = dot(vec3(_389, _390, _391), vec3(_2528, _2529, _2530));
        float _4428 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2538 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2539 = dot(vec3(cbLight._m0[_2501].xyz), vec3(_2528, _2529, _2530));
        float _4439 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2543 = _2520 * _2520;
        float _2547 = ((_2538 * _2538) * (_2543 + (-1.0))) + 1.0;
        float _2554 = exp2(log2(1.0 - (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) * 5.0);
        float _2561 = 1.0 - _2520;
        float _2571 = (0.5 / (((_2188 * ((_2534 * _2561) + _2520)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2561) + _2520) * _2534))) * _2534;
        float _4450 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2573 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2543 / ((_2547 * _2547) * 3.141590118408203125));
        float _2574 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
        _2490 = (((((_2554 * _2210) + _559) * cbLight._m0[_2505].x) * _2573) * _2574) + _2380;
        _2492 = (((((_2554 * _2212) + _561) * cbLight._m0[_2505].y) * _2573) * _2574) + _2382;
        _2494 = (((((_2554 * _2213) + _562) * cbLight._m0[_2505].z) * _2573) * _2574) + _2384;
    }
    float _2639;
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    float _2649;
    if (_1910.y == 0u)
    {
        uvec4 _2595 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2596 = _2595.x;
        uint _2607 = uint((float(_2595.y) * floor(float(uint(cbSceneParam._m0[85u].y * _494) / _2596))) + floor(float(uint(cbSceneParam._m0[85u].x * _493) / _2596)));
        float _2617 = (log2(_1688 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2618 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        uint _2621 = uint(isnan(14.0) ? _2618 : (isnan(_2618) ? 14.0 : min(_2618, 14.0)));
        uvec4 _2626 = texelFetch(g_lightClusterGridBuffer, int(((_2621 << 2u) + (_2607 << 6u)) >> 2u));
        uint _2627 = _2626.x;
        uint _2628 = _2595.z;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        if (((((1u << ((_2628 >> 4u) & 15u)) + 4294967295u) & _2627) == 0u) || ((_2628 & 240u) == 0u))
        {
            _2709 = 0.0;
            _2711 = 0.0;
            _2713 = 0.0;
            _2715 = 0.0;
            _2717 = 0.0;
            _2719 = 0.0;
        }
        else
        {
            float _2710;
            float _2712;
            float _2714;
            float _2716;
            float _2718;
            float _2720;
            float _2861 = 0.0;
            float _2862 = 0.0;
            float _2863 = 0.0;
            float _2864 = 0.0;
            float _2865 = 0.0;
            float _2866 = 0.0;
            uint _2867 = 0u;
            uint _2876;
            bool _2877;
            for (;;)
            {
                _2876 = texelFetch(g_lightClassification, int((((_2621 << 5u) + (_2607 << 9u)) + (_2867 << 2u)) >> 2u)).x;
                _2877 = _2876 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2877)
                {
                    frontier_phi_73_pred = _2866;
                    frontier_phi_73_pred_1 = _2865;
                    frontier_phi_73_pred_2 = _2864;
                    frontier_phi_73_pred_3 = _2863;
                    frontier_phi_73_pred_4 = _2862;
                    frontier_phi_73_pred_5 = _2861;
                }
                else
                {
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    uint _3012;
                    _3006 = _2861;
                    _3007 = _2862;
                    _3008 = _2863;
                    _3009 = _2864;
                    _3010 = _2865;
                    _3011 = _2866;
                    _3012 = _2876;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    for (;;)
                    {
                        uint _3016 = uint(findLSB(_3012)) + (_2867 << 5u);
                        uint _3013 = (_3012 + 4294967295u) & _3012;
                        uint _3018 = _3016 * 48u;
                        vec4 _3032 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3018)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 3u)).x));
                        uint _3038 = (_3016 * 48u) + 4u;
                        vec4 _3051 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3038)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 3u)).x));
                        uint _3057 = (_3016 * 48u) + 8u;
                        vec3 _3068 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3057)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 2u)).x));
                        float _3072 = _3032.x - _1686;
                        float _3073 = _3032.y - _1687;
                        float _3074 = _3032.z - _1688;
                        float _3075 = dot(vec3(_3072, _3073, _3074), vec3(_3072, _3073, _3074));
                        float _3078 = inversesqrt(_3075);
                        float _3079 = _3078 * _3072;
                        float _3080 = _3078 * _3073;
                        float _3081 = _3078 * _3074;
                        float _3082 = dot(vec3(_514, _517, _520), vec3(_3079, _3080, _3081));
                        float _3087 = 1.0 - (_3075 * _3032.w);
                        float _4476 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                        float _3088 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                        float _3089 = sqrt(_3075) * _3051.w;
                        float _3092 = 1.39999997615814208984375 / (_3089 + 1.39999997615814208984375);
                        float _3093 = _3092 * _3092;
                        float _3096 = ((1.0 - _3093) * _3082) + _3093;
                        float _3099 = _3089 * _3089;
                        float _3103 = ((isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0))) * _3088) / ((_3099 * 0.699999988079071044921875) + 1.0);
                        float _3107 = (-0.0) - _1686;
                        float _3108 = (-0.0) - _1687;
                        float _3109 = (-0.0) - _1688;
                        float _3113 = inversesqrt(dot(vec3(_3107, _3108, _3109), vec3(_3107, _3108, _3109)));
                        float _3114 = _3113 * _3107;
                        float _3115 = _3113 * _3108;
                        float _3116 = _3113 * _3109;
                        float _3123 = exp2(log2(1.0 / ((_3099 * 3.5) + 5.0)) * 0.25);
                        float _3124 = 1.0 - _590;
                        float _3131 = sqrt(1.0 - ((1.0 - (_3124 * _3124)) * (1.0 - (_3123 * _3123))));
                        float _3132 = _3131 * _3131;
                        float _3133 = _3132 * _3132;
                        float _3134 = _3114 + _3079;
                        float _3135 = _3115 + _3080;
                        float _3136 = _3116 + _3081;
                        float _3140 = inversesqrt(dot(vec3(_3134, _3135, _3136), vec3(_3134, _3135, _3136)));
                        float _3144 = dot(vec3(_514, _517, _520), vec3(_3114, _3115, _3116));
                        float _4492 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                        float _3147 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                        float _3148 = dot(vec3(_514, _517, _520), vec3(_3140 * _3134, _3140 * _3135, _3140 * _3136));
                        float _4503 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3151 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                        float _3155 = ((_3151 * _3151) * (_3133 + (-1.0))) + 1.0;
                        float _3156 = _3092 * _3132;
                        float _3157 = _3156 * _3156;
                        float _3160 = ((1.0 - _3157) * _3082) + _3157;
                        float _4514 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                        float _3161 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                        float _3162 = 1.0 - _3132;
                        float _3172 = (0.5 / (((_3161 * ((_3147 * _3162) + _3132)) + 9.9999999392252902907785028219223e-09) + (((_3161 * _3162) + _3132) * _3147))) * _3161;
                        float _4525 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                        float _3183 = (((_3133 * 3.1415927410125732421875) * (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) / ((_3155 * _3155) * ((_3099 * 2.1991131305694580078125) + 3.141590118408203125))) * _3088;
                        _2936 = (_3103 * _3051.x) + _3009;
                        _2937 = (_3103 * _3051.y) + _3010;
                        _2938 = (_3103 * _3051.z) + _3011;
                        _2933 = (_3183 * _3068.x) + _3006;
                        _2934 = (_3183 * _3068.y) + _3007;
                        _2935 = (_3183 * _3068.z) + _3008;
                        if (_3013 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3006 = _2933;
                            _3007 = _2934;
                            _3008 = _2935;
                            _3009 = _2936;
                            _3010 = _2937;
                            _3011 = _2938;
                            _3012 = _3013;
                        }
                    }
                    frontier_phi_73_pred = _2938;
                    frontier_phi_73_pred_1 = _2937;
                    frontier_phi_73_pred_2 = _2936;
                    frontier_phi_73_pred_3 = _2935;
                    frontier_phi_73_pred_4 = _2934;
                    frontier_phi_73_pred_5 = _2933;
                }
                _2720 = frontier_phi_73_pred;
                _2718 = frontier_phi_73_pred_1;
                _2716 = frontier_phi_73_pred_2;
                _2714 = frontier_phi_73_pred_3;
                _2712 = frontier_phi_73_pred_4;
                _2710 = frontier_phi_73_pred_5;
                uint _2868 = _2867 + 1u;
                if (_2868 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2861 = _2710;
                    _2862 = _2712;
                    _2863 = _2714;
                    _2864 = _2716;
                    _2865 = _2718;
                    _2866 = _2720;
                    _2867 = _2868;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2709 = _2710;
            _2711 = _2712;
            _2713 = _2714;
            _2715 = _2716;
            _2717 = _2718;
            _2719 = _2720;
        }
        uvec4 _2723 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2724 = _2723.z;
        uint _2726 = (_2724 >> 8u) & 15u;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        if (((4294967295u << _2726) & _2627) == 0u)
        {
            _2829 = _2709;
            _2831 = _2711;
            _2833 = _2713;
            _2835 = _2715;
            _2837 = _2717;
            _2839 = _2719;
        }
        else
        {
            float _2854 = inversesqrt(dot(vec3(_1686, _1687, _1688), vec3(_1686, _1687, _1688)));
            float _2855 = _2854 * _1686;
            float _2856 = _2854 * _1687;
            float _2857 = _2854 * _1688;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2726 < ((_2724 >> 12u) & 15u))
            {
                float _2830;
                float _2832;
                float _2834;
                float _2836;
                float _2838;
                float _2840;
                float _2989 = _2709;
                float _2990 = _2711;
                float _2991 = _2713;
                float _2992 = _2715;
                float _2993 = _2717;
                float _2994 = _2719;
                uint _2995 = _2726;
                uint _3004;
                bool _3005;
                for (;;)
                {
                    _3004 = texelFetch(g_lightClassification, int((((_2621 << 5u) + (_2607 << 9u)) + (_2995 << 2u)) >> 2u)).x;
                    _3005 = _3004 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3005)
                    {
                        frontier_phi_84_pred = _2993;
                        frontier_phi_84_pred_1 = _2992;
                        frontier_phi_84_pred_2 = _2991;
                        frontier_phi_84_pred_3 = _2990;
                        frontier_phi_84_pred_4 = _2989;
                        frontier_phi_84_pred_5 = _2994;
                    }
                    else
                    {
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3210 = _2989;
                        float _3211 = _2990;
                        float _3212 = _2991;
                        float _3213 = _2992;
                        float _3214 = _2993;
                        float _3215 = _2994;
                        uint _3216 = _3004;
                        uint _3217;
                        vec4 _3242;
                        float _3243;
                        vec4 _3258;
                        vec3 _3270;
                        vec4 _3286;
                        vec4 _3301;
                        float _3348;
                        bool _3349;
                        for (;;)
                        {
                            uint _3227 = ((_2995 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3216));
                            _3217 = (_3216 + 4294967295u) & _3216;
                            uint _3229 = _3227 * 40u;
                            _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            _3243 = _3242.w;
                            uint _3245 = (_3227 * 40u) + 4u;
                            _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            uint _3260 = (_3227 * 40u) + 8u;
                            _3270 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x));
                            uint _3273 = (_3227 * 40u) + 16u;
                            _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            uint _3288 = (_3227 * 40u) + 20u;
                            _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3304 = (_3227 * 40u) + 24u;
                            vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            uint _3323 = (_3227 * 40u) + 28u;
                            vec4 _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            _3348 = fma(_1688, _3336.z, fma(_1687, _3336.y, _3336.x * _1686)) + _3336.w;
                            _3349 = !((fma(_1688, _3317.z, fma(_1687, _3317.y, _3317.x * _1686)) + _3317.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3349)
                            {
                                float _3376 = _3242.x - _1686;
                                float _3377 = _3242.y - _1687;
                                float _3378 = _3242.z - _1688;
                                float _3379 = dot(vec3(_3376, _3377, _3378), vec3(_3376, _3377, _3378));
                                float _3382 = inversesqrt(_3379);
                                float _3383 = _3382 * _3376;
                                float _3384 = _3382 * _3377;
                                float _3385 = _3382 * _3378;
                                float _3389 = 1.0 - (_3379 / (_3243 * _3243));
                                float _4536 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3390 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                                float _3394 = sqrt(_3379) * _3258.w;
                                float _3396 = 1.39999997615814208984375 / (_3394 + 1.39999997615814208984375);
                                float _3397 = _3396 * _3396;
                                float _3400 = ((1.0 - _3397) * dot(vec3(_3383, _3384, _3385), vec3(_514, _517, _520))) + _3397;
                                float _3403 = _3394 * _3394;
                                float _3407 = (fma(_1688, _3286.z, fma(_1687, _3286.y, _3286.x * _1686)) + _3286.w) / _3348;
                                float _3408 = (fma(_1688, _3301.z, fma(_1687, _3301.y, _3301.x * _1686)) + _3301.w) / _3348;
                                float _3412 = 1.0 - dot(vec2(_3407, _3408), vec2(_3407, _3408));
                                float _4552 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3413 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                                float _3414 = _3413 * (((isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0))) * _3390) / ((_3403 * 0.699999988079071044921875) + 1.0));
                                float _3426 = exp2(log2(1.0 / ((_3403 * 3.5) + 5.0)) * 0.25);
                                float _3427 = 1.0 - _590;
                                float _3434 = sqrt(1.0 - ((1.0 - (_3427 * _3427)) * (1.0 - (_3426 * _3426))));
                                float _3435 = _3434 * _3434;
                                float _3436 = _3435 * _3435;
                                float _3437 = _3383 - _2855;
                                float _3438 = _3384 - _2856;
                                float _3439 = _3385 - _2857;
                                float _3443 = inversesqrt(dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439)));
                                float _3447 = dot(vec3(_514, _517, _520), vec3((-0.0) - _2855, (-0.0) - _2856, (-0.0) - _2857));
                                float _4563 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3450 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                                float _3451 = dot(vec3(_514, _517, _520), vec3(_3443 * _3437, _3443 * _3438, _3443 * _3439));
                                float _4574 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3454 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                                float _3458 = ((_3454 * _3454) * (_3436 + (-1.0))) + 1.0;
                                float _3459 = _3396 * _3435;
                                float _3460 = _3459 * _3459;
                                float _3466 = ((1.0 - _3460) * dot(vec3(_514, _517, _520), vec3(_3383, _3384, _3385))) + _3460;
                                float _4585 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3467 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                                float _3468 = 1.0 - _3435;
                                float _3478 = (0.5 / (((_3467 * ((_3450 * _3468) + _3435)) + 9.9999999392252902907785028219223e-09) + (((_3467 * _3468) + _3435) * _3450))) * _3467;
                                float _4596 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3488 = (_3413 * _3390) * (((_3436 * 3.1415927410125732421875) * (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0)))) / ((_3458 * _3458) * ((_3403 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3414 * _3258.y;
                                frontier_phi_90_pred_1 = _3414 * _3258.x;
                                frontier_phi_90_pred_2 = _3488 * _3270.z;
                                frontier_phi_90_pred_3 = _3488 * _3270.y;
                                frontier_phi_90_pred_4 = _3488 * _3270.x;
                                frontier_phi_90_pred_5 = _3414 * _3258.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3496 = frontier_phi_90_pred;
                            _3495 = frontier_phi_90_pred_1;
                            _3494 = frontier_phi_90_pred_2;
                            _3493 = frontier_phi_90_pred_3;
                            _3492 = frontier_phi_90_pred_4;
                            _3497 = frontier_phi_90_pred_5;
                            _3200 = _3495 + _3213;
                            _3201 = _3496 + _3214;
                            _3202 = _3497 + _3215;
                            _3197 = _3492 + _3210;
                            _3198 = _3493 + _3211;
                            _3199 = _3494 + _3212;
                            if (_3217 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3202;
                                _3216 = _3217;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3201;
                        frontier_phi_84_pred_1 = _3200;
                        frontier_phi_84_pred_2 = _3199;
                        frontier_phi_84_pred_3 = _3198;
                        frontier_phi_84_pred_4 = _3197;
                        frontier_phi_84_pred_5 = _3202;
                    }
                    _2838 = frontier_phi_84_pred;
                    _2836 = frontier_phi_84_pred_1;
                    _2834 = frontier_phi_84_pred_2;
                    _2832 = frontier_phi_84_pred_3;
                    _2830 = frontier_phi_84_pred_4;
                    _2840 = frontier_phi_84_pred_5;
                    uint _2996 = _2995 + 1u;
                    if (_2996 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2989 = _2830;
                        _2990 = _2832;
                        _2991 = _2834;
                        _2992 = _2836;
                        _2993 = _2838;
                        _2994 = _2840;
                        _2995 = _2996;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2840;
                frontier_phi_65_66_ladder_1 = _2836;
                frontier_phi_65_66_ladder_2 = _2838;
                frontier_phi_65_66_ladder_3 = _2832;
                frontier_phi_65_66_ladder_4 = _2830;
                frontier_phi_65_66_ladder_5 = _2834;
            }
            else
            {
                frontier_phi_65_66_ladder = _2719;
                frontier_phi_65_66_ladder_1 = _2715;
                frontier_phi_65_66_ladder_2 = _2717;
                frontier_phi_65_66_ladder_3 = _2711;
                frontier_phi_65_66_ladder_4 = _2709;
                frontier_phi_65_66_ladder_5 = _2713;
            }
            _2829 = frontier_phi_65_66_ladder_4;
            _2831 = frontier_phi_65_66_ladder_3;
            _2833 = frontier_phi_65_66_ladder_5;
            _2835 = frontier_phi_65_66_ladder_1;
            _2837 = frontier_phi_65_66_ladder_2;
            _2839 = frontier_phi_65_66_ladder;
        }
        float _2844 = isnan(1.0) ? _574 : (isnan(_574) ? 1.0 : min(_574, 1.0));
        _2639 = (_2844 * _2835) + _2152;
        _2641 = (_2844 * _2837) + _2154;
        _2643 = (_2844 * _2839) + _2156;
        _2645 = ((_2829 * _559) * _2844) + _2490;
        _2647 = ((_2831 * _561) * _2844) + _2492;
        _2649 = ((_2833 * _562) * _2844) + _2494;
    }
    else
    {
        _2639 = _2152;
        _2641 = _2154;
        _2643 = _2156;
        _2645 = _2490;
        _2647 = _2492;
        _2649 = _2494;
    }
    float _4612 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _4623 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _4634 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _2666 = ((isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (_2639 + ((isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))) * _574))) + ((_2645 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _1415)) * cbPerFrame._m0[3u].x);
    float _2667 = ((isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2641 + ((isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0))) * _574))) + ((_2647 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _1415)) * cbPerFrame._m0[3u].x);
    float _2668 = ((isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2643 + ((isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))) * _574))) + ((_2649 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _1415)) * cbPerFrame._m0[3u].x);
    float _2669 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
    float _2670 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
    float _2671 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    uint _2672 = _533 + 6u;
    float _2680 = _493 / cbSceneParam._m0[86u].x;
    float _2681 = _494 / cbSceneParam._m0[86u].y;
    vec4 _2695 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2680, _2681, (log2((isnan(cbSceneParam._m0[77u].w) ? _412 : (isnan(_412) ? cbSceneParam._m0[77u].w : min(_412, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2697 = _2695.x;
    float _2698 = _2695.y;
    float _2699 = _2695.z;
    float _2700 = _2695.w;
    float _2771;
    float _2773;
    float _2775;
    float _2777;
    if (_412 > cbSceneParam._m0[78u].w)
    {
        float _2734 = isnan(_412) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _412 : min(cbSceneParam._m0[80u].w, _412));
        float _2735 = _2734 / _412;
        float _2746 = _2735 * _465;
        float _2747 = _466 * _2735;
        float _2748 = (-0.0) - _2747;
        float _2749 = _2735 * _467;
        float _2751 = (cbSceneParam._m0[77u].w * _2748) / _2734;
        float _2752 = _2751 + cbSceneParam._m0[79u].w;
        float _2753 = cbSceneParam._m0[79u].w - _2747;
        float _2759 = sqrt(((_2746 * _2746) + (_2747 * _2747)) + (_2749 * _2749));
        float _2762 = (1.0 - (cbSceneParam._m0[77u].w / _2734)) * _2759;
        float _2767 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2769 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2946;
        if (abs((_2748 - _2751) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2946 = ((((_2752 > 0.0) ? exp2(_2767 * _2752) : (2.0 - exp2(_2769 * _2752))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2762;
        }
        else
        {
            float _2890 = 1.0 / cbSceneParam._m0[80u].x;
            float _2891 = isnan(_2753) ? _2752 : (isnan(_2752) ? _2753 : max(_2752, _2753));
            float _2892 = isnan(_2753) ? _2752 : (isnan(_2752) ? _2753 : min(_2752, _2753));
            float _2901 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : min(_2891, 0.0));
            float _2902 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : min(_2892, 0.0));
            _2946 = ((abs(_2759 / _2748) * cbSceneParam._m0[80u].y) * ((((_2901 - _2902) * 2.0) - ((exp2(_2767 * (isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0)))) - exp2(_2767 * (isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0))))) * _2890)) - ((exp2(_2769 * _2901) - exp2(_2769 * _2902)) * _2890))) + (_2762 * cbSceneParam._m0[80u].z);
        }
        vec4 _2948 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2680, _2681, 1.0), 0.0);
        float _2957 = exp2((_2946 * (-1.44269502162933349609375)) * (1.0 - _2948.w));
        float _2958 = log2(_2957);
        float _2974 = log2(_2700);
        _2771 = (exp2(_2974 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2958 * cbSceneParam._m0[78u].x)) * _2948.x) / cbSceneParam._m0[78u].x)) + _2697;
        _2773 = (exp2(_2974 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2958 * cbSceneParam._m0[78u].y)) * _2948.y) / cbSceneParam._m0[78u].y)) + _2698;
        _2775 = (exp2(_2974 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2958 * cbSceneParam._m0[78u].z)) * _2948.z) / cbSceneParam._m0[78u].z)) + _2699;
        _2777 = _2957 * _2700;
    }
    else
    {
        _2771 = _2697;
        _2773 = _2698;
        _2775 = _2699;
        _2777 = _2700;
    }
    bool _2984;
    vec4 _2787;
    vec4 _2809;
    float _2811;
    float _2815;
    float _2816;
    float _2817;
    float _2818;
    bool _2828;
    for (;;)
    {
        _2787 = cbMatDynParam._m0[0u];
        float _2789 = roundEven(_2787.y);
        bool _2790 = _2789 == 3.0;
        float _2791 = log2(_2777);
        float _2798 = exp2(_2791 * cbSceneParam._m0[78u].x) * _2669;
        float _2799 = exp2(_2791 * cbSceneParam._m0[78u].y) * _2670;
        float _2800 = exp2(_2791 * cbSceneParam._m0[78u].z) * _2671;
        float _2807 = _481 + (-0.5);
        _2809 = cbMtdParam._m0[1u];
        _2811 = _2809.y * _2807;
        float _2814 = (_2789 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2815 = _2814 * (_2790 ? _2798 : (_2798 + (cbSceneParam._m0[72u].w * _2771)));
        _2816 = _2814 * (_2790 ? _2799 : (_2799 + (cbSceneParam._m0[72u].w * _2773)));
        _2817 = _2814 * (_2790 ? _2800 : (_2800 + (cbSceneParam._m0[72u].w * _2775)));
        _2818 = _2807 * 0.999000012874603271484375;
        _2828 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2828)
        {
            if ((cbInstanceData._m0[_533 + 7u].x + _2818) < 0.5)
            {
                _2984 = true;
                break;
            }
        }
        uint _2925 = _535 + uint(_2787.w);
        if ((cbInstanceData._m0[_2925].w < 1.0) && ((cbInstanceData._m0[_2925].w + _2818) < 0.5))
        {
            _2984 = true;
            break;
        }
        if ((_2811 + 1.0) < _2809.x)
        {
            _2984 = true;
            break;
        }
        _2984 = false;
        break;
    }
    float _3188;
    if (_2984)
    {
        discard_state = true;
        _3188 = 0.0;
    }
    else
    {
        _3188 = cbInstanceData._m0[_2672].w;
    }
    SV_Target.x = _2815;
    SV_Target.y = _2816;
    SV_Target.z = _2817;
    SV_Target.w = _3188;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2672].w;
    discard_exit();
}


