#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[20];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 5, component = 1) in float TEXCOORD_5;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _975;
float _3389;
float _3390;
float _3391;
float _3392;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221;
    float _222;
    float _223;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
    }
    else
    {
        _221 = _207;
        _222 = _208;
        _223 = _209;
    }
    vec4 _249 = texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_5) + cbTextureTilingScale._m0[1u].w));
    float _255 = _249.x * cbMatDynParam._m0[17u].x;
    float _256 = _249.y * cbMatDynParam._m0[17u].y;
    float _257 = _249.z * cbMatDynParam._m0[17u].z;
    vec4 _276 = texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_5) + cbTextureTilingScale._m0[4u].w));
    float _309 = (TEXCOORD_7.x - ((cbMatDynParam._m0[19u].x * (1.0 - TEXCOORD_7.x)) * (texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbMatDynParam._m0[19u].z * TEXCOORD_4) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMatDynParam._m0[19u].z * TEXCOORD_5) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMatDynParam._m0[19u].y * TEXCOORD.w) + 1.0);
    float _3401 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _310 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
    float _317 = (_310 * ((_276.x * cbMatDynParam._m0[18u].x) - _255)) + _255;
    float _318 = (_310 * ((_276.y * cbMatDynParam._m0[18u].y) - _256)) + _256;
    float _319 = (_310 * ((_276.z * cbMatDynParam._m0[18u].z) - _257)) + _257;
    vec4 _332 = texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_5) + cbTextureTilingScale._m0[2u].w));
    float _334 = _332.x;
    float _335 = _332.y;
    float _336 = _332.z;
    vec4 _348 = texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_5) + cbTextureTilingScale._m0[3u].w));
    float _361 = ((_348.z - _336) * _310) + _336;
    float _365 = ((((_348.x - _334) * _310) + _334) * 2.0) + (-1.0);
    float _367 = ((((_348.y - _335) * _310) + _335) * 2.0) + (-1.0);
    float _368 = dot(vec2(_365, _367), vec2(_365, _367));
    float _3412 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _373 = sqrt(1.0 - (isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0))));
    float _376 = fma(_373, _221, fma(_367, _213 * TANGENT.x, (_199 * _191) * _365));
    float _379 = fma(_373, _222, fma(_367, _213 * TANGENT.y, (_199 * _192) * _365));
    float _382 = fma(_373, _223, fma(_367, _213 * TANGENT.z, (_199 * _193) * _365));
    float _386 = inversesqrt(dot(vec3(_376, _379, _382), vec3(_376, _379, _382)));
    float _387 = _386 * _376;
    float _388 = _386 * _379;
    float _389 = _386 * _382;
    float _3423 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _390 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _3434 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3445 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3456 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3467 = isnan(0.0) ? cbMatDynParam._m0[19u].w : (isnan(cbMatDynParam._m0[19u].w) ? 0.0 : max(cbMatDynParam._m0[19u].w, 0.0));
    float _394 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
    float _410 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _453 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _463 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _453);
    float _464 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _453);
    float _465 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _453);
    float _469 = inversesqrt(dot(vec3(_463, _464, _465), vec3(_463, _464, _465)));
    float _470 = _463 * _469;
    float _471 = _464 * _469;
    float _472 = _465 * _469;
    vec4 _477 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _479 = _477.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _655 = sqrt(((_463 * _463) + (_464 * _464)) + (_465 * _465));
        float _661 = (cbMatDynParam._m0[5u].x * _655) + cbMatDynParam._m0[5u].y;
        float _3478 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        float _662 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _666 = (cbMatDynParam._m0[5u].z * _655) + cbMatDynParam._m0[5u].w;
        float _3489 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) - _662)) + _662) < ((_479 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _491 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _492 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _512 = fma(_389, cbSceneParam._m0[5u].z, fma(_388, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _387));
    float _515 = fma(_389, cbSceneParam._m0[6u].z, fma(_388, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _387));
    float _518 = fma(_389, cbSceneParam._m0[7u].z, fma(_388, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _387));
    uint _531 = uint(roundEven(NORMAL.w)) * 13u;
    uint _533 = _531 + 9u;
    uint _534 = _533 + uint(cbMatDynParam._m0[0u].w);
    float _540 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0)))) * cbInstanceData._m0[_534].x;
    float _541 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0)))) * cbInstanceData._m0[_534].y;
    float _542 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0)))) * cbInstanceData._m0[_534].z;
    float _3500 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _543 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    float _3511 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _544 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _3522 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _545 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _546 = 1.0 - _394;
    float _547 = _543 * _546;
    float _548 = _544 * _546;
    float _549 = _545 * _546;
    float _554 = (_543 + (-0.039999999105930328369140625)) * _394;
    float _555 = (_544 + (-0.039999999105930328369140625)) * _394;
    float _556 = (_545 + (-0.039999999105930328369140625)) * _394;
    float _557 = _554 + 0.039999999105930328369140625;
    float _559 = _555 + 0.039999999105930328369140625;
    float _560 = _556 + 0.039999999105930328369140625;
    vec4 _569 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _491, cbSceneParam._m0[86u].y * _492));
    float _572 = _569.x * TEXCOORD_7.w;
    float _573 = dot(vec3(_387, _388, _389), vec3(_470, _471, _472));
    float _576 = _573 * 2.0;
    float _580 = (_576 * _387) - _470;
    float _581 = (_576 * _388) - _471;
    float _582 = (_576 * _389) - _472;
    float _586 = abs(dot(vec3(_470, _471, _472), vec3(_387, _388, _389)));
    float _3533 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _588 = sqrt(_390);
    float _601 = exp2((_588 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_588 * 3.0));
    float _607 = (1.0 - _601) * ((_588 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _608 = _601 * _588;
    float _636 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _640 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _644 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _974;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _699 = fma(_644, cbModelParam._m0[26u].z, fma(_640, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _636));
        float _703 = fma(_644, cbModelParam._m0[27u].z, fma(_640, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _636));
        float _707 = fma(_644, cbModelParam._m0[28u].z, fma(_640, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _636));
        float _732 = _636 + _387;
        float _733 = _640 + _388;
        float _734 = _644 + _389;
        float _744 = fma(_734, cbModelParam._m0[26u].z, fma(_733, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _732)) - _699;
        float _745 = fma(_734, cbModelParam._m0[27u].z, fma(_733, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _732)) - _703;
        float _746 = fma(_734, cbModelParam._m0[28u].z, fma(_733, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _732)) - _707;
        float _750 = inversesqrt(dot(vec3(_744, _745, _746), vec3(_744, _745, _746)));
        float _763 = ((_750 * _744) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_699 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _764 = ((_750 * _745) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_703 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _765 = ((_750 * _746) / cbModelParam._m0[34u].z) + ((((((_707 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _768 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_763, _764, _765), 0.0);
        vec4 _775 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_763, _764, _765), 0.0);
        vec4 _782 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_763, _764, _765), 0.0);
        vec4 _789 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_763, _764, _765), 0.0);
        float _802 = exp2((_768.w + (-0.5)) * 20.0) * 2.0;
        float _803 = _802 * (_768.x + (-0.5));
        float _804 = _802 * (_768.y + (-0.5));
        float _805 = _802 * (_768.z + (-0.5));
        float _812 = exp2((_775.w + (-0.5)) * 20.0) * 2.0;
        float _813 = _812 * (_775.x + (-0.5));
        float _814 = _812 * (_775.y + (-0.5));
        float _815 = _812 * (_775.z + (-0.5));
        float _822 = exp2((_782.w + (-0.5)) * 20.0) * 2.0;
        float _823 = _822 * (_782.x + (-0.5));
        float _824 = _822 * (_782.y + (-0.5));
        float _825 = _822 * (_782.z + (-0.5));
        float _832 = exp2((_789.w + (-0.5)) * 20.0) * 2.0;
        float _833 = _832 * (_789.x + (-0.5));
        float _834 = _832 * (_789.y + (-0.5));
        float _835 = _832 * (_789.z + (-0.5));
        float _836 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _837 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _838 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _839 = _803 * 0.5;
        float _840 = _813 * 0.5;
        float _841 = _823 * 0.5;
        float _842 = dot(vec3(_839, _840, _841), vec3(_839, _840, _841));
        float _847 = (_842 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_842);
        float _856 = (dot(vec3(_387, _388, _389), vec3(_847 * _839, _847 * _840, _847 * _841)) + 1.0) * 0.5;
        float _3559 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _866 = sqrt(((_840 * _840) + (_839 * _839)) + (_841 * _841)) / (_836 + 9.9999997473787516355514526367188e-06);
        float _3570 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _868 = _867 * 2.0;
        float _872 = (1.0 - _867) / (_867 + 1.0);
        float _3581 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _882 = ((((1.0 - _873) * (_868 + 2.0)) * exp2(log2(isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * (_868 + 1.0))) + _873) * _836;
        float _883 = _804 * 0.5;
        float _884 = _814 * 0.5;
        float _885 = _824 * 0.5;
        float _886 = dot(vec3(_883, _884, _885), vec3(_883, _884, _885));
        float _891 = (_886 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_886);
        float _899 = (dot(vec3(_387, _388, _389), vec3(_891 * _883, _891 * _884, _891 * _885)) + 1.0) * 0.5;
        float _3592 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _908 = sqrt(((_884 * _884) + (_883 * _883)) + (_885 * _885)) / (_837 + 9.9999997473787516355514526367188e-06);
        float _3603 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _910 = _909 * 2.0;
        float _914 = (1.0 - _909) / (_909 + 1.0);
        float _3614 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _924 = ((((1.0 - _915) * (_910 + 2.0)) * exp2(log2(isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) * (_910 + 1.0))) + _915) * _837;
        float _925 = _805 * 0.5;
        float _926 = _815 * 0.5;
        float _927 = _825 * 0.5;
        float _928 = dot(vec3(_925, _926, _927), vec3(_925, _926, _927));
        float _933 = (_928 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_928);
        float _941 = (dot(vec3(_387, _388, _389), vec3(_933 * _925, _933 * _926, _933 * _927)) + 1.0) * 0.5;
        float _3625 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _950 = sqrt(((_926 * _926) + (_925 * _925)) + (_927 * _927)) / (_838 + 9.9999997473787516355514526367188e-06);
        float _3636 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _952 = _951 * 2.0;
        float _956 = (1.0 - _951) / (_951 + 1.0);
        float _3647 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _966 = ((((1.0 - _957) * (_952 + 2.0)) * exp2(log2(isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * (_952 + 1.0))) + _957) * _838;
        _974 = _805;
        _976 = _804;
        _977 = _803;
        _978 = _815;
        _979 = _814;
        _980 = _813;
        _981 = _825;
        _982 = _824;
        _983 = _823;
        _984 = _838;
        _985 = _837;
        _986 = _836;
        _987 = cbModelParam._m0[36u].z * (isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0)));
        _988 = cbModelParam._m0[36u].z * (isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0)));
        _989 = cbModelParam._m0[36u].z * (isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0)));
    }
    else
    {
        _974 = _975;
        _976 = _975;
        _977 = _975;
        _978 = _975;
        _979 = _975;
        _980 = _975;
        _981 = _975;
        _982 = _975;
        _983 = _975;
        _984 = _975;
        _985 = _975;
        _986 = _975;
        _987 = 0.0;
        _988 = 0.0;
        _989 = 0.0;
    }
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1018 = fma(_644, cbModelParam._m0[30u].z, fma(_640, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _636));
        float _1022 = fma(_644, cbModelParam._m0[31u].z, fma(_640, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _636));
        float _1026 = fma(_644, cbModelParam._m0[32u].z, fma(_640, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _636));
        float _1049 = _636 + _387;
        float _1050 = _640 + _388;
        float _1051 = _644 + _389;
        float _1061 = fma(_1051, cbModelParam._m0[30u].z, fma(_1050, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1049)) - _1018;
        float _1062 = fma(_1051, cbModelParam._m0[31u].z, fma(_1050, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1049)) - _1022;
        float _1063 = fma(_1051, cbModelParam._m0[32u].z, fma(_1050, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1049)) - _1026;
        float _1067 = inversesqrt(dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063)));
        float _1080 = ((_1067 * _1061) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1018 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1081 = ((_1067 * _1062) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1022 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1082 = ((_1067 * _1063) / cbModelParam._m0[35u].z) + ((((((_1026 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        float _1117 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1084.x + (-0.5));
        float _1119 = _1117 * (_1084.y + (-0.5));
        float _1120 = _1117 * (_1084.z + (-0.5));
        float _1127 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1091.x + (-0.5));
        float _1129 = _1127 * (_1091.y + (-0.5));
        float _1130 = _1127 * (_1091.z + (-0.5));
        float _1137 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1098.x + (-0.5));
        float _1139 = _1137 * (_1098.y + (-0.5));
        float _1140 = _1137 * (_1098.z + (-0.5));
        float _1147 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1105.x + (-0.5));
        float _1149 = _1147 * (_1105.y + (-0.5));
        float _1150 = _1147 * (_1105.z + (-0.5));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = _1118 * 0.5;
        float _1155 = _1128 * 0.5;
        float _1156 = _1138 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_387, _388, _389), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3710 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_1181 + 1.0))) + _1186) * _1151;
        float _1196 = _1119 * 0.5;
        float _1197 = _1129 * 0.5;
        float _1198 = _1139 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_387, _388, _389), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3743 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_1223 + 1.0))) + _1228) * _1152;
        float _1238 = _1120 * 0.5;
        float _1239 = _1130 * 0.5;
        float _1240 = _1140 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_387, _388, _389), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _3754 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3765 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _3776 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_1265 + 1.0))) + _1270) * _1153;
        _1287 = _1120;
        _1288 = _1119;
        _1289 = _1118;
        _1290 = _1130;
        _1291 = _1129;
        _1292 = _1128;
        _1293 = _1140;
        _1294 = _1139;
        _1295 = _1138;
        _1296 = _1153;
        _1297 = _1152;
        _1298 = _1151;
        _1299 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
        _1300 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
        _1301 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
    }
    else
    {
        _1287 = _975;
        _1288 = _975;
        _1289 = _975;
        _1290 = _975;
        _1291 = _975;
        _1292 = _975;
        _1293 = _975;
        _1294 = _975;
        _1295 = _975;
        _1296 = _975;
        _1297 = _975;
        _1298 = _975;
        _1299 = 0.0;
        _1300 = 0.0;
        _1301 = 0.0;
    }
    float _1311 = (cbModelParam._m0[1u].x * (_1299 - _987)) + _987;
    float _1312 = (cbModelParam._m0[1u].x * (_1300 - _988)) + _988;
    float _1313 = (cbModelParam._m0[1u].x * (_1301 - _989)) + _989;
    float _1334 = fma(_1313, cbSceneParam._m0[89u].z, fma(_1312, cbSceneParam._m0[89u].y, _1311 * cbSceneParam._m0[89u].x));
    float _1337 = fma(_1313, cbSceneParam._m0[90u].z, fma(_1312, cbSceneParam._m0[90u].y, _1311 * cbSceneParam._m0[90u].x));
    float _1340 = fma(_1313, cbSceneParam._m0[91u].z, fma(_1312, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1311));
    float _1355 = _580 * 0.5;
    float _1356 = _581 * 0.5;
    float _1357 = _582 * 0.5;
    float _1358 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_1289, _1292, _1295, _1298));
    float _1361 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_1288, _1291, _1294, _1297));
    float _1364 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_1287, _1290, _1293, _1296));
    float _1398;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1371 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_974, _978, _981, _984));
        float _1375 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_976, _979, _982, _985));
        float _1379 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_977, _980, _983, _986));
        float _1386 = dot(vec4(cbModelParam._m0[39u]), vec4(_1355, _1356, _1357, 1.0));
        _1398 = dot(vec3(isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)), isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1386) ? 0.0 : (isnan(0.0) ? _1386 : max(0.0, _1386))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1398 = 1.0;
    }
    float _1409;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1400 = dot(vec4(cbModelParam._m0[40u]), vec4(_1355, _1356, _1357, 1.0));
        _1409 = dot(vec3(isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)), isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1400) ? 0.0 : (isnan(0.0) ? _1400 : max(0.0, _1400))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1409 = 1.0;
    }
    float _1413 = (_1409 * cbModelParam._m0[1u].x) + (_1398 * (1.0 - cbModelParam._m0[1u].x));
    float _1423 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _390);
    float _1424 = isnan(_1423) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1423 : min(cbModelParam._m0[25u].z, _1423));
    float _1506;
    float _1508;
    float _1510;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1473 = fma(_644, cbModelParam._m0[13u].z, fma(_640, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _636)) + cbModelParam._m0[13u].w;
        float _1477 = fma(_644, cbModelParam._m0[14u].z, fma(_640, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _636)) + cbModelParam._m0[14u].w;
        float _1481 = fma(_644, cbModelParam._m0[15u].z, fma(_640, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _636)) + cbModelParam._m0[15u].w;
        float _1484 = fma(_582, cbModelParam._m0[13u].z, fma(_581, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _580));
        float _1487 = fma(_582, cbModelParam._m0[14u].z, fma(_581, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _580));
        float _1490 = fma(_582, cbModelParam._m0[15u].z, fma(_581, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _580));
        float _1518;
        if (_1484 > 0.0)
        {
            _1518 = abs((1.0 - _1473) / _1484);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1473 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1518 = frontier_phi_19_17_ladder;
        }
        float _1744;
        if (_1487 > 0.0)
        {
            _1744 = abs((1.0 - _1477) / _1487);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1477 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1744 = frontier_phi_28_24_ladder;
        }
        float _2001;
        if (_1490 > 0.0)
        {
            _2001 = abs((1.0 - _1481) / _1490);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1481 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2001 = frontier_phi_40_35_ladder;
        }
        float _2003 = isnan(_1744) ? _1518 : (isnan(_1518) ? _1744 : min(_1518, _1744));
        float _2004 = isnan(_2001) ? _2003 : (isnan(_2003) ? _2001 : min(_2003, _2001));
        float _2008 = (_2004 * _1484) + _1473;
        float _2009 = (_2004 * _1487) + _1477;
        float _2010 = (_2004 * _1490) + _1481;
        float _2011 = _2004 * 9.9999997473787516355514526367188e-05;
        float _2013 = (-1.0) - _2011;
        float _2015 = _2011 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2010 > _2015) || ((_2010 < _2013) || ((_2009 > _2015) || ((_2009 < _2013) || ((_2008 < _2013) || (_2008 > _2015))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2138 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2010, cbModelParam._m0[9u].z, fma(_2009, cbModelParam._m0[9u].y, _2008 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2010, cbModelParam._m0[10u].z, fma(_2009, cbModelParam._m0[10u].y, _2008 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2010, cbModelParam._m0[11u].z, fma(_2009, cbModelParam._m0[11u].y, _2008 * cbModelParam._m0[11u].x))), _1424);
            frontier_phi_18_40_ladder = _2138.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2138.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2138.x * cbModelParam._m0[1u].y;
        }
        _1506 = frontier_phi_18_40_ladder_2;
        _1508 = frontier_phi_18_40_ladder_1;
        _1510 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1494 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_580, _581, _582), _1424);
        _1506 = _1494.x * cbModelParam._m0[1u].y;
        _1508 = _1494.y * cbModelParam._m0[1u].y;
        _1510 = _1494.z * cbModelParam._m0[1u].y;
    }
    float _1514 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _390);
    float _1515 = isnan(_1514) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1514 : min(cbModelParam._m0[25u].w, _1514));
    float _1606;
    float _1608;
    float _1610;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1570 = fma(_644, cbModelParam._m0[21u].z, fma(_640, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _636)) + cbModelParam._m0[21u].w;
        float _1574 = fma(_644, cbModelParam._m0[22u].z, fma(_640, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _636)) + cbModelParam._m0[22u].w;
        float _1578 = fma(_644, cbModelParam._m0[23u].z, fma(_640, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _636)) + cbModelParam._m0[23u].w;
        float _1581 = fma(_582, cbModelParam._m0[21u].z, fma(_581, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _580));
        float _1584 = fma(_582, cbModelParam._m0[22u].z, fma(_581, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _580));
        float _1587 = fma(_582, cbModelParam._m0[23u].z, fma(_581, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _580));
        float _1749;
        if (_1581 > 0.0)
        {
            _1749 = abs((1.0 - _1570) / _1581);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1570 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1749 = frontier_phi_30_26_ladder;
        }
        float _2028;
        if (_1584 > 0.0)
        {
            _2028 = abs((1.0 - _1574) / _1584);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1574 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2028 = frontier_phi_42_37_ladder;
        }
        float _2241;
        if (_1587 > 0.0)
        {
            _2241 = abs((1.0 - _1578) / _1587);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1578 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2241 = frontier_phi_51_48_ladder;
        }
        float _2243 = isnan(_2028) ? _1749 : (isnan(_1749) ? _2028 : min(_1749, _2028));
        float _2244 = isnan(_2241) ? _2243 : (isnan(_2243) ? _2241 : min(_2243, _2241));
        float _2248 = (_2244 * _1581) + _1570;
        float _2249 = (_2244 * _1584) + _1574;
        float _2250 = (_2244 * _1587) + _1578;
        float _2251 = _2244 * 9.9999997473787516355514526367188e-05;
        float _2252 = (-1.0) - _2251;
        float _2254 = _2251 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2250 > _2254) || ((_2250 < _2252) || ((_2249 > _2254) || ((_2249 < _2252) || ((_2248 < _2252) || (_2248 > _2254))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2451 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2250, cbModelParam._m0[17u].z, fma(_2249, cbModelParam._m0[17u].y, _2248 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2250, cbModelParam._m0[18u].z, fma(_2249, cbModelParam._m0[18u].y, _2248 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2250, cbModelParam._m0[19u].z, fma(_2249, cbModelParam._m0[19u].y, _2248 * cbModelParam._m0[19u].x))), _1515);
            frontier_phi_27_51_ladder = _2451.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2451.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2451.x * cbModelParam._m0[1u].z;
        }
        _1606 = frontier_phi_27_51_ladder_2;
        _1608 = frontier_phi_27_51_ladder_1;
        _1610 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1590 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_580, _581, _582), _1515);
        _1606 = _1590.x * cbModelParam._m0[1u].z;
        _1608 = _1590.y * cbModelParam._m0[1u].z;
        _1610 = _1590.z * cbModelParam._m0[1u].z;
    }
    float _1623 = (((_607 * _557) + _608) * _572) * ((cbModelParam._m0[1u].w * (_1606 - _1506)) + _1506);
    float _1625 = (((_607 * _559) + _608) * _572) * ((cbModelParam._m0[1u].w * (_1608 - _1508)) + _1508);
    float _1627 = (((_607 * _560) + _608) * _572) * ((cbModelParam._m0[1u].w * (_1610 - _1510)) + _1510);
    float _1630 = fma(_1627, cbSceneParam._m0[89u].z, fma(_1625, cbSceneParam._m0[89u].y, _1623 * cbSceneParam._m0[89u].x));
    float _1633 = fma(_1627, cbSceneParam._m0[90u].z, fma(_1625, cbSceneParam._m0[90u].y, _1623 * cbSceneParam._m0[90u].x));
    float _1636 = fma(_1627, cbSceneParam._m0[91u].z, fma(_1625, cbSceneParam._m0[91u].y, _1623 * cbSceneParam._m0[91u].x));
    vec4 _1644 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_491, _492));
    float _1646 = _1644.w;
    float _1658 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1646);
    float _1659 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1646);
    float _1660 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1646);
    uvec4 _1664 = floatBitsToUint(cbInstanceData._m0[_531 + 5u]);
    uint _1666 = _1664.x * 14u;
    uint _1667 = _1666 + 13u;
    float _1674 = _572 + (-1.0);
    float _1679 = (cbLight._m0[_1667].x * _1674) + 1.0;
    float _1680 = (cbLight._m0[_1667].y * _1674) + 1.0;
    float _1681 = (cbLight._m0[_1667].z * _1674) + 1.0;
    float _1682 = (cbLight._m0[_1667].w * _1674) + 1.0;
    uint _1683 = _1666 + 5u;
    float _1689 = isnan(1.0) ? _1680 : (isnan(_1680) ? 1.0 : min(_1680, 1.0));
    uint _1693 = _1666 + 4u;
    float _1702 = isnan(1.0) ? _1679 : (isnan(_1679) ? 1.0 : min(_1679, 1.0));
    uint _1706 = _1666 | 1u;
    float _1717 = dot(vec3(cbLight._m0[_1666].xyz), vec3(_387, _388, _389));
    float _1720 = dot(vec3(cbLight._m0[_1706].xyz), vec3(_387, _388, _389));
    float _3912 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _3923 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
    float _1725 = (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * 0.3183098733425140380859375;
    float _1727 = (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * 0.3183098733425140380859375;
    float _1734 = ((cbLight._m0[_1683].x * _1689) * _1727) + (((cbLight._m0[_1693].x * _1658) * _1702) * _1725);
    float _1735 = ((_1689 * cbLight._m0[_1683].y) * _1727) + (((cbLight._m0[_1693].y * _1659) * _1702) * _1725);
    float _1736 = ((_1689 * cbLight._m0[_1683].z) * _1727) + (((cbLight._m0[_1693].z * _1660) * _1702) * _1725);
    uvec4 _1741 = floatBitsToUint(cbLight._m0[_1666 + 12u]);
    bool _1743 = _1741.x == 0u;
    float _1754;
    float _1756;
    float _1758;
    if (_1743)
    {
        _1754 = _1734;
        _1756 = _1735;
        _1758 = _1736;
    }
    else
    {
        uint _1762 = _1666 + 6u;
        float _1778 = (dot(vec3(cbLight._m0[_1666 + 2u].xyz), vec3(_387, _388, _389)) * 0.5) + 0.5;
        float _1779 = _1778 * _1778;
        float _3934 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1780 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1781 = isnan(1.0) ? _1681 : (isnan(_1681) ? 1.0 : min(_1681, 1.0));
        _1754 = (((cbLight._m0[_1762].x * 0.3183098733425140380859375) * _1780) * _1781) + _1734;
        _1756 = (((cbLight._m0[_1762].y * 0.3183098733425140380859375) * _1780) * _1781) + _1735;
        _1758 = (((cbLight._m0[_1762].z * 0.3183098733425140380859375) * _1780) * _1781) + _1736;
    }
    bool _1761 = _1741.y == 0u;
    float _1799;
    float _1801;
    float _1803;
    if (_1761)
    {
        _1799 = _1754;
        _1801 = _1756;
        _1803 = _1758;
    }
    else
    {
        uint _1972 = _1666 + 7u;
        float _1988 = (dot(vec3(cbLight._m0[_1666 + 3u].xyz), vec3(_387, _388, _389)) * 0.5) + 0.5;
        float _1989 = _1988 * _1988;
        float _3950 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1990 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1991 = isnan(1.0) ? _1682 : (isnan(_1682) ? 1.0 : min(_1682, 1.0));
        _1799 = (((cbLight._m0[_1972].x * 0.3183098733425140380859375) * _1990) * _1991) + _1754;
        _1801 = (((cbLight._m0[_1972].y * 0.3183098733425140380859375) * _1990) * _1991) + _1756;
        _1803 = (((cbLight._m0[_1972].z * 0.3183098733425140380859375) * _1990) * _1991) + _1758;
    }
    uint _1806 = _1666 + 8u;
    float _1819 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1666].w)) * _390) * 0.949999988079071044921875);
    float _1820 = _1819 * _1819;
    float _1821 = cbLight._m0[_1666].x + _470;
    float _1822 = cbLight._m0[_1666].y + _471;
    float _1823 = cbLight._m0[_1666].z + _472;
    float _1827 = inversesqrt(dot(vec3(_1821, _1822, _1823), vec3(_1821, _1822, _1823)));
    float _1828 = _1827 * _1821;
    float _1829 = _1827 * _1822;
    float _1830 = _1827 * _1823;
    float _1831 = dot(vec3(_387, _388, _389), vec3(cbLight._m0[_1666].xyz));
    float _3966 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1834 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _3977 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _1835 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _1836 = dot(vec3(_387, _388, _389), vec3(_1828, _1829, _1830));
    float _3988 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1839 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _1840 = dot(vec3(cbLight._m0[_1666].xyz), vec3(_1828, _1829, _1830));
    float _3999 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1844 = _1820 * _1820;
    float _1848 = ((_1839 * _1839) * (_1844 + (-1.0))) + 1.0;
    float _1856 = exp2(log2(1.0 - (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * 5.0);
    float _1857 = 0.959999978542327880859375 - _554;
    float _1859 = 0.959999978542327880859375 - _555;
    float _1860 = 0.959999978542327880859375 - _556;
    float _1867 = 1.0 - _1820;
    float _1878 = (0.5 / (((_1835 * ((_1834 * _1867) + _1820)) + 9.9999999392252902907785028219223e-09) + (((_1835 * _1867) + _1820) * _1834))) * _1834;
    float _4010 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1880 = (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1844 / ((_1848 * _1848) * 3.141590118408203125));
    uint _1894 = _1666 + 9u;
    float _1905 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1706].w)) * _390) * 0.949999988079071044921875);
    float _1906 = _1905 * _1905;
    float _1907 = cbLight._m0[_1706].x + _470;
    float _1908 = cbLight._m0[_1706].y + _471;
    float _1909 = cbLight._m0[_1706].z + _472;
    float _1913 = inversesqrt(dot(vec3(_1907, _1908, _1909), vec3(_1907, _1908, _1909)));
    float _1914 = _1913 * _1907;
    float _1915 = _1913 * _1908;
    float _1916 = _1913 * _1909;
    float _1917 = dot(vec3(_387, _388, _389), vec3(cbLight._m0[_1706].xyz));
    float _4021 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1920 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _1921 = dot(vec3(_387, _388, _389), vec3(_1914, _1915, _1916));
    float _4032 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _1924 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _1925 = dot(vec3(cbLight._m0[_1706].xyz), vec3(_1914, _1915, _1916));
    float _4043 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1929 = _1906 * _1906;
    float _1933 = ((_1924 * _1924) * (_1929 + (-1.0))) + 1.0;
    float _1940 = exp2(log2(1.0 - (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * 5.0);
    float _1947 = 1.0 - _1906;
    float _1957 = (0.5 / (((_1835 * ((_1920 * _1947) + _1906)) + 9.9999999392252902907785028219223e-09) + (((_1835 * _1947) + _1906) * _1920))) * _1920;
    float _4054 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1959 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1929 / ((_1933 * _1933) * 3.141590118408203125));
    float _1969 = (((((_1940 * _1857) + _557) * cbLight._m0[_1894].x) * _1959) * _1689) + ((((cbLight._m0[_1806].x * _1658) * ((_1856 * _1857) + _557)) * _1880) * _1702);
    float _1970 = (((((_1940 * _1859) + _559) * cbLight._m0[_1894].y) * _1959) * _1689) + ((((cbLight._m0[_1806].y * _1659) * ((_1856 * _1859) + _559)) * _1880) * _1702);
    float _1971 = (((((_1940 * _1860) + _560) * cbLight._m0[_1894].z) * _1959) * _1689) + ((((cbLight._m0[_1806].z * _1660) * ((_1856 * _1860) + _560)) * _1880) * _1702);
    float _2033;
    float _2035;
    float _2037;
    if (_1743)
    {
        _2033 = _1969;
        _2035 = _1970;
        _2037 = _1971;
    }
    else
    {
        uint _2039 = _1666 + 2u;
        uint _2043 = _1666 + 10u;
        float _2057 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2039].w)) * _390) * 0.949999988079071044921875);
        float _2058 = _2057 * _2057;
        float _2059 = cbLight._m0[_2039].x + _470;
        float _2060 = cbLight._m0[_2039].y + _471;
        float _2061 = cbLight._m0[_2039].z + _472;
        float _2065 = inversesqrt(dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061)));
        float _2066 = _2065 * _2059;
        float _2067 = _2065 * _2060;
        float _2068 = _2065 * _2061;
        float _2069 = dot(vec3(_387, _388, _389), vec3(cbLight._m0[_2039].xyz));
        float _4065 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2072 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _2073 = dot(vec3(_387, _388, _389), vec3(_2066, _2067, _2068));
        float _4076 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2076 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _2077 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_2066, _2067, _2068));
        float _4087 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2081 = _2058 * _2058;
        float _2085 = ((_2076 * _2076) * (_2081 + (-1.0))) + 1.0;
        float _2092 = exp2(log2(1.0 - (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * 5.0);
        float _2099 = 1.0 - _2058;
        float _2109 = (0.5 / (((_1835 * ((_2072 * _2099) + _2058)) + 9.9999999392252902907785028219223e-09) + (((_1835 * _2099) + _2058) * _2072))) * _2072;
        float _4098 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2111 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_2081 / ((_2085 * _2085) * 3.141590118408203125));
        float _2112 = isnan(1.0) ? _1681 : (isnan(_1681) ? 1.0 : min(_1681, 1.0));
        _2033 = (((((_2092 * _1857) + _557) * cbLight._m0[_2043].x) * _2111) * _2112) + _1969;
        _2035 = (((((_2092 * _1859) + _559) * cbLight._m0[_2043].y) * _2111) * _2112) + _1970;
        _2037 = (((((_2092 * _1860) + _560) * cbLight._m0[_2043].z) * _2111) * _2112) + _1971;
    }
    float _2147;
    float _2149;
    float _2151;
    if (_1761)
    {
        _2147 = _2033;
        _2149 = _2035;
        _2151 = _2037;
    }
    else
    {
        uint _2158 = _1666 + 3u;
        uint _2162 = _1666 + 11u;
        float _2176 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2158].w)) * _390) * 0.949999988079071044921875);
        float _2177 = _2176 * _2176;
        float _2178 = cbLight._m0[_2158].x + _470;
        float _2179 = cbLight._m0[_2158].y + _471;
        float _2180 = cbLight._m0[_2158].z + _472;
        float _2184 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
        float _2185 = _2184 * _2178;
        float _2186 = _2184 * _2179;
        float _2187 = _2184 * _2180;
        float _2188 = dot(vec3(_387, _388, _389), vec3(cbLight._m0[_2158].xyz));
        float _4114 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2191 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _2192 = dot(vec3(_387, _388, _389), vec3(_2185, _2186, _2187));
        float _4125 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2195 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _2196 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_2185, _2186, _2187));
        float _4136 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2200 = _2177 * _2177;
        float _2204 = ((_2195 * _2195) * (_2200 + (-1.0))) + 1.0;
        float _2211 = exp2(log2(1.0 - (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) * 5.0);
        float _2218 = 1.0 - _2177;
        float _2228 = (0.5 / (((_1835 * ((_2191 * _2218) + _2177)) + 9.9999999392252902907785028219223e-09) + (((_1835 * _2218) + _2177) * _2191))) * _2191;
        float _4147 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2230 = (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_2200 / ((_2204 * _2204) * 3.141590118408203125));
        float _2231 = isnan(1.0) ? _1682 : (isnan(_1682) ? 1.0 : min(_1682, 1.0));
        _2147 = (((((_2211 * _1857) + _557) * cbLight._m0[_2162].x) * _2230) * _2231) + _2033;
        _2149 = (((((_2211 * _1859) + _559) * cbLight._m0[_2162].y) * _2230) * _2231) + _2035;
        _2151 = (((((_2211 * _1860) + _560) * cbLight._m0[_2162].z) * _2230) * _2231) + _2037;
    }
    float _2365;
    float _2367;
    float _2369;
    float _2371;
    float _2373;
    float _2375;
    if (_1664.y == 0u)
    {
        float _2306 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2307 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2306;
        float _2308 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2306;
        float _2309 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2306;
        uvec4 _2321 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2322 = _2321.x;
        uint _2333 = uint((float(_2321.y) * floor(float(uint(cbSceneParam._m0[85u].y * _492) / _2322))) + floor(float(uint(cbSceneParam._m0[85u].x * _491) / _2322)));
        float _2343 = (log2(_2309 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2344 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        uint _2347 = uint(isnan(14.0) ? _2344 : (isnan(_2344) ? 14.0 : min(_2344, 14.0)));
        uvec4 _2352 = texelFetch(g_lightClusterGridBuffer, int(((_2347 << 2u) + (_2333 << 6u)) >> 2u));
        uint _2353 = _2352.x;
        uint _2354 = _2321.z;
        float _2456;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        float _2466;
        if (((((1u << ((_2354 >> 4u) & 15u)) + 4294967295u) & _2353) == 0u) || ((_2354 & 240u) == 0u))
        {
            _2456 = 0.0;
            _2458 = 0.0;
            _2460 = 0.0;
            _2462 = 0.0;
            _2464 = 0.0;
            _2466 = 0.0;
        }
        else
        {
            float _2457;
            float _2459;
            float _2461;
            float _2463;
            float _2465;
            float _2467;
            float _2608 = 0.0;
            float _2609 = 0.0;
            float _2610 = 0.0;
            float _2611 = 0.0;
            float _2612 = 0.0;
            float _2613 = 0.0;
            uint _2614 = 0u;
            uint _2623;
            bool _2624;
            for (;;)
            {
                _2623 = texelFetch(g_lightClassification, int((((_2347 << 5u) + (_2333 << 9u)) + (_2614 << 2u)) >> 2u)).x;
                _2624 = _2623 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2624)
                {
                    frontier_phi_68_pred = _2610;
                    frontier_phi_68_pred_1 = _2613;
                    frontier_phi_68_pred_2 = _2612;
                    frontier_phi_68_pred_3 = _2611;
                    frontier_phi_68_pred_4 = _2609;
                    frontier_phi_68_pred_5 = _2608;
                }
                else
                {
                    float _2753;
                    float _2754;
                    float _2755;
                    float _2756;
                    float _2757;
                    float _2758;
                    uint _2759;
                    _2753 = _2608;
                    _2754 = _2609;
                    _2755 = _2610;
                    _2756 = _2611;
                    _2757 = _2612;
                    _2758 = _2613;
                    _2759 = _2623;
                    float _2680;
                    float _2681;
                    float _2682;
                    float _2683;
                    float _2684;
                    float _2685;
                    for (;;)
                    {
                        uint _2763 = uint(findLSB(_2759)) + (_2614 << 5u);
                        uint _2760 = (_2759 + 4294967295u) & _2759;
                        uint _2765 = _2763 * 48u;
                        vec4 _2779 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2765)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 3u)).x));
                        uint _2785 = (_2763 * 48u) + 4u;
                        vec4 _2798 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2785)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 3u)).x));
                        uint _2804 = (_2763 * 48u) + 8u;
                        vec3 _2815 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2804)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 2u)).x));
                        float _2819 = _2779.x - _2307;
                        float _2820 = _2779.y - _2308;
                        float _2821 = _2779.z - _2309;
                        float _2822 = dot(vec3(_2819, _2820, _2821), vec3(_2819, _2820, _2821));
                        float _2825 = inversesqrt(_2822);
                        float _2826 = _2825 * _2819;
                        float _2827 = _2825 * _2820;
                        float _2828 = _2825 * _2821;
                        float _2829 = dot(vec3(_512, _515, _518), vec3(_2826, _2827, _2828));
                        float _2834 = 1.0 - (_2822 * _2779.w);
                        float _4173 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
                        float _2835 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
                        float _2836 = sqrt(_2822) * _2798.w;
                        float _2839 = 1.39999997615814208984375 / (_2836 + 1.39999997615814208984375);
                        float _2840 = _2839 * _2839;
                        float _2843 = ((1.0 - _2840) * _2829) + _2840;
                        float _2846 = _2836 * _2836;
                        float _2850 = ((isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0))) * _2835) / ((_2846 * 0.699999988079071044921875) + 1.0);
                        float _2854 = (-0.0) - _2307;
                        float _2855 = (-0.0) - _2308;
                        float _2856 = (-0.0) - _2309;
                        float _2860 = inversesqrt(dot(vec3(_2854, _2855, _2856), vec3(_2854, _2855, _2856)));
                        float _2861 = _2860 * _2854;
                        float _2862 = _2860 * _2855;
                        float _2863 = _2860 * _2856;
                        float _2871 = exp2(log2(1.0 / ((_2846 * 3.5) + 5.0)) * 0.25);
                        float _2872 = 1.0 - _588;
                        float _2879 = sqrt(1.0 - ((1.0 - (_2872 * _2872)) * (1.0 - (_2871 * _2871))));
                        float _2880 = _2879 * _2879;
                        float _2881 = _2880 * _2880;
                        float _2882 = _2861 + _2826;
                        float _2883 = _2862 + _2827;
                        float _2884 = _2863 + _2828;
                        float _2888 = inversesqrt(dot(vec3(_2882, _2883, _2884), vec3(_2882, _2883, _2884)));
                        float _2892 = dot(vec3(_512, _515, _518), vec3(_2861, _2862, _2863));
                        float _4189 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
                        float _2895 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                        float _2896 = dot(vec3(_512, _515, _518), vec3(_2888 * _2882, _2888 * _2883, _2888 * _2884));
                        float _4200 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
                        float _2899 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                        float _2903 = ((_2899 * _2899) * (_2881 + (-1.0))) + 1.0;
                        float _2904 = _2839 * _2880;
                        float _2905 = _2904 * _2904;
                        float _2908 = ((1.0 - _2905) * _2829) + _2905;
                        float _4211 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
                        float _2909 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                        float _2910 = 1.0 - _2880;
                        float _2920 = (0.5 / (((_2909 * ((_2895 * _2910) + _2880)) + 9.9999999392252902907785028219223e-09) + (((_2909 * _2910) + _2880) * _2895))) * _2909;
                        float _4222 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
                        float _2931 = (((_2881 * 3.1415927410125732421875) * (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) / ((_2903 * _2903) * ((_2846 * 2.1991131305694580078125) + 3.141590118408203125))) * _2835;
                        _2683 = (_2850 * _2798.x) + _2756;
                        _2684 = (_2850 * _2798.y) + _2757;
                        _2685 = (_2850 * _2798.z) + _2758;
                        _2680 = (_2931 * _2815.x) + _2753;
                        _2681 = (_2931 * _2815.y) + _2754;
                        _2682 = (_2931 * _2815.z) + _2755;
                        if (_2760 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2753 = _2680;
                            _2754 = _2681;
                            _2755 = _2682;
                            _2756 = _2683;
                            _2757 = _2684;
                            _2758 = _2685;
                            _2759 = _2760;
                        }
                    }
                    frontier_phi_68_pred = _2682;
                    frontier_phi_68_pred_1 = _2685;
                    frontier_phi_68_pred_2 = _2684;
                    frontier_phi_68_pred_3 = _2683;
                    frontier_phi_68_pred_4 = _2681;
                    frontier_phi_68_pred_5 = _2680;
                }
                _2461 = frontier_phi_68_pred;
                _2467 = frontier_phi_68_pred_1;
                _2465 = frontier_phi_68_pred_2;
                _2463 = frontier_phi_68_pred_3;
                _2459 = frontier_phi_68_pred_4;
                _2457 = frontier_phi_68_pred_5;
                uint _2615 = _2614 + 1u;
                if (_2615 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2608 = _2457;
                    _2609 = _2459;
                    _2610 = _2461;
                    _2611 = _2463;
                    _2612 = _2465;
                    _2613 = _2467;
                    _2614 = _2615;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2456 = _2457;
            _2458 = _2459;
            _2460 = _2461;
            _2462 = _2463;
            _2464 = _2465;
            _2466 = _2467;
        }
        uvec4 _2470 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2471 = _2470.z;
        uint _2473 = (_2471 >> 8u) & 15u;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        float _2586;
        if (((4294967295u << _2473) & _2353) == 0u)
        {
            _2576 = _2456;
            _2578 = _2458;
            _2580 = _2460;
            _2582 = _2462;
            _2584 = _2464;
            _2586 = _2466;
        }
        else
        {
            float _2601 = inversesqrt(dot(vec3(_2307, _2308, _2309), vec3(_2307, _2308, _2309)));
            float _2602 = _2601 * _2307;
            float _2603 = _2601 * _2308;
            float _2604 = _2601 * _2309;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2473 < ((_2471 >> 12u) & 15u))
            {
                float _2577;
                float _2579;
                float _2581;
                float _2583;
                float _2585;
                float _2587;
                float _2736 = _2456;
                float _2737 = _2458;
                float _2738 = _2460;
                float _2739 = _2462;
                float _2740 = _2464;
                float _2741 = _2466;
                uint _2742 = _2473;
                uint _2751;
                bool _2752;
                for (;;)
                {
                    _2751 = texelFetch(g_lightClassification, int((((_2347 << 5u) + (_2333 << 9u)) + (_2742 << 2u)) >> 2u)).x;
                    _2752 = _2751 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2752)
                    {
                        frontier_phi_79_pred = _2741;
                        frontier_phi_79_pred_1 = _2740;
                        frontier_phi_79_pred_2 = _2739;
                        frontier_phi_79_pred_3 = _2738;
                        frontier_phi_79_pred_4 = _2737;
                        frontier_phi_79_pred_5 = _2736;
                    }
                    else
                    {
                        float _2945;
                        float _2946;
                        float _2947;
                        float _2948;
                        float _2949;
                        float _2950;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _2958 = _2736;
                        float _2959 = _2737;
                        float _2960 = _2738;
                        float _2961 = _2739;
                        float _2962 = _2740;
                        float _2963 = _2741;
                        uint _2964 = _2751;
                        uint _2965;
                        vec4 _2990;
                        float _2991;
                        vec4 _3006;
                        vec3 _3018;
                        vec4 _3034;
                        vec4 _3049;
                        float _3096;
                        bool _3097;
                        for (;;)
                        {
                            uint _2975 = ((_2742 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2964));
                            _2965 = (_2964 + 4294967295u) & _2964;
                            uint _2977 = _2975 * 40u;
                            _2990 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 3u)).x));
                            _2991 = _2990.w;
                            uint _2993 = (_2975 * 40u) + 4u;
                            _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            uint _3008 = (_2975 * 40u) + 8u;
                            _3018 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3008)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 2u)).x));
                            uint _3021 = (_2975 * 40u) + 16u;
                            _3034 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 3u)).x));
                            uint _3036 = (_2975 * 40u) + 20u;
                            _3049 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 3u)).x));
                            uint _3052 = (_2975 * 40u) + 24u;
                            vec4 _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            uint _3071 = (_2975 * 40u) + 28u;
                            vec4 _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            _3096 = fma(_2309, _3084.z, fma(_2308, _3084.y, _3084.x * _2307)) + _3084.w;
                            _3097 = !((fma(_2309, _3065.z, fma(_2308, _3065.y, _3065.x * _2307)) + _3065.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3097)
                            {
                                float _3124 = _2990.x - _2307;
                                float _3125 = _2990.y - _2308;
                                float _3126 = _2990.z - _2309;
                                float _3127 = dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126));
                                float _3130 = inversesqrt(_3127);
                                float _3131 = _3130 * _3124;
                                float _3132 = _3130 * _3125;
                                float _3133 = _3130 * _3126;
                                float _3137 = 1.0 - (_3127 / (_2991 * _2991));
                                float _4233 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3138 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                                float _3142 = sqrt(_3127) * _3006.w;
                                float _3144 = 1.39999997615814208984375 / (_3142 + 1.39999997615814208984375);
                                float _3145 = _3144 * _3144;
                                float _3148 = ((1.0 - _3145) * dot(vec3(_3131, _3132, _3133), vec3(_512, _515, _518))) + _3145;
                                float _3151 = _3142 * _3142;
                                float _3155 = (fma(_2309, _3034.z, fma(_2308, _3034.y, _3034.x * _2307)) + _3034.w) / _3096;
                                float _3156 = (fma(_2309, _3049.z, fma(_2308, _3049.y, _3049.x * _2307)) + _3049.w) / _3096;
                                float _3160 = 1.0 - dot(vec2(_3155, _3156), vec2(_3155, _3156));
                                float _4249 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3161 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                                float _3162 = _3161 * (((isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0))) * _3138) / ((_3151 * 0.699999988079071044921875) + 1.0));
                                float _3174 = exp2(log2(1.0 / ((_3151 * 3.5) + 5.0)) * 0.25);
                                float _3175 = 1.0 - _588;
                                float _3182 = sqrt(1.0 - ((1.0 - (_3175 * _3175)) * (1.0 - (_3174 * _3174))));
                                float _3183 = _3182 * _3182;
                                float _3184 = _3183 * _3183;
                                float _3185 = _3131 - _2602;
                                float _3186 = _3132 - _2603;
                                float _3187 = _3133 - _2604;
                                float _3191 = inversesqrt(dot(vec3(_3185, _3186, _3187), vec3(_3185, _3186, _3187)));
                                float _3195 = dot(vec3(_512, _515, _518), vec3((-0.0) - _2602, (-0.0) - _2603, (-0.0) - _2604));
                                float _4260 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3198 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                                float _3199 = dot(vec3(_512, _515, _518), vec3(_3191 * _3185, _3191 * _3186, _3191 * _3187));
                                float _4271 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                                float _3202 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                                float _3206 = ((_3202 * _3202) * (_3184 + (-1.0))) + 1.0;
                                float _3207 = _3144 * _3183;
                                float _3208 = _3207 * _3207;
                                float _3214 = ((1.0 - _3208) * dot(vec3(_512, _515, _518), vec3(_3131, _3132, _3133))) + _3208;
                                float _4282 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3215 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                                float _3216 = 1.0 - _3183;
                                float _3226 = (0.5 / (((_3215 * ((_3198 * _3216) + _3183)) + 9.9999999392252902907785028219223e-09) + (((_3215 * _3216) + _3183) * _3198))) * _3215;
                                float _4293 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3236 = (_3161 * _3138) * (((_3184 * 3.1415927410125732421875) * (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) / ((_3206 * _3206) * ((_3151 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3162 * _3006.z;
                                frontier_phi_85_pred_1 = _3162 * _3006.y;
                                frontier_phi_85_pred_2 = _3162 * _3006.x;
                                frontier_phi_85_pred_3 = _3236 * _3018.z;
                                frontier_phi_85_pred_4 = _3236 * _3018.y;
                                frontier_phi_85_pred_5 = _3236 * _3018.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3245 = frontier_phi_85_pred;
                            _3244 = frontier_phi_85_pred_1;
                            _3243 = frontier_phi_85_pred_2;
                            _3242 = frontier_phi_85_pred_3;
                            _3241 = frontier_phi_85_pred_4;
                            _3240 = frontier_phi_85_pred_5;
                            _2948 = _3243 + _2961;
                            _2949 = _3244 + _2962;
                            _2950 = _3245 + _2963;
                            _2945 = _3240 + _2958;
                            _2946 = _3241 + _2959;
                            _2947 = _3242 + _2960;
                            if (_2965 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2958 = _2945;
                                _2959 = _2946;
                                _2960 = _2947;
                                _2961 = _2948;
                                _2962 = _2949;
                                _2963 = _2950;
                                _2964 = _2965;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2950;
                        frontier_phi_79_pred_1 = _2949;
                        frontier_phi_79_pred_2 = _2948;
                        frontier_phi_79_pred_3 = _2947;
                        frontier_phi_79_pred_4 = _2946;
                        frontier_phi_79_pred_5 = _2945;
                    }
                    _2587 = frontier_phi_79_pred;
                    _2585 = frontier_phi_79_pred_1;
                    _2583 = frontier_phi_79_pred_2;
                    _2581 = frontier_phi_79_pred_3;
                    _2579 = frontier_phi_79_pred_4;
                    _2577 = frontier_phi_79_pred_5;
                    uint _2743 = _2742 + 1u;
                    if (_2743 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2736 = _2577;
                        _2737 = _2579;
                        _2738 = _2581;
                        _2739 = _2583;
                        _2740 = _2585;
                        _2741 = _2587;
                        _2742 = _2743;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2583;
                frontier_phi_60_61_ladder_1 = _2587;
                frontier_phi_60_61_ladder_2 = _2585;
                frontier_phi_60_61_ladder_3 = _2581;
                frontier_phi_60_61_ladder_4 = _2579;
                frontier_phi_60_61_ladder_5 = _2577;
            }
            else
            {
                frontier_phi_60_61_ladder = _2462;
                frontier_phi_60_61_ladder_1 = _2466;
                frontier_phi_60_61_ladder_2 = _2464;
                frontier_phi_60_61_ladder_3 = _2460;
                frontier_phi_60_61_ladder_4 = _2458;
                frontier_phi_60_61_ladder_5 = _2456;
            }
            _2576 = frontier_phi_60_61_ladder_5;
            _2578 = frontier_phi_60_61_ladder_4;
            _2580 = frontier_phi_60_61_ladder_3;
            _2582 = frontier_phi_60_61_ladder;
            _2584 = frontier_phi_60_61_ladder_2;
            _2586 = frontier_phi_60_61_ladder_1;
        }
        float _2591 = isnan(1.0) ? _572 : (isnan(_572) ? 1.0 : min(_572, 1.0));
        _2365 = (_2591 * _2582) + _1799;
        _2367 = (_2591 * _2584) + _1801;
        _2369 = (_2591 * _2586) + _1803;
        _2371 = ((_2576 * _557) * _2591) + _2147;
        _2373 = ((_2578 * _559) * _2591) + _2149;
        _2375 = ((_2580 * _560) * _2591) + _2151;
    }
    else
    {
        _2365 = _1799;
        _2367 = _1801;
        _2369 = _1803;
        _2371 = _2147;
        _2373 = _2149;
        _2375 = _2151;
    }
    float _4309 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _4320 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _4331 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _2392 = ((isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_2365 + ((isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))) * _572))) + ((_2371 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _1413)) * cbPerFrame._m0[3u].x);
    float _2393 = ((isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2367 + ((isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0))) * _572))) + ((_2373 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _1413)) * cbPerFrame._m0[3u].x);
    float _2394 = ((isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2369 + ((isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))) * _572))) + ((_2375 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _1413)) * cbPerFrame._m0[3u].x);
    float _2395 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2396 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2397 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    uint _2398 = _531 + 6u;
    float _2406 = _491 / cbSceneParam._m0[86u].x;
    float _2407 = _492 / cbSceneParam._m0[86u].y;
    vec4 _2421 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2406, _2407, (log2((isnan(cbSceneParam._m0[77u].w) ? _410 : (isnan(_410) ? cbSceneParam._m0[77u].w : min(_410, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2423 = _2421.x;
    float _2424 = _2421.y;
    float _2425 = _2421.z;
    float _2426 = _2421.w;
    float _2518;
    float _2520;
    float _2522;
    float _2524;
    if (_410 > cbSceneParam._m0[78u].w)
    {
        float _2481 = isnan(_410) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _410 : min(cbSceneParam._m0[80u].w, _410));
        float _2482 = _2481 / _410;
        float _2493 = _2482 * _463;
        float _2494 = _464 * _2482;
        float _2495 = (-0.0) - _2494;
        float _2496 = _2482 * _465;
        float _2498 = (cbSceneParam._m0[77u].w * _2495) / _2481;
        float _2499 = _2498 + cbSceneParam._m0[79u].w;
        float _2500 = cbSceneParam._m0[79u].w - _2494;
        float _2506 = sqrt(((_2493 * _2493) + (_2494 * _2494)) + (_2496 * _2496));
        float _2509 = (1.0 - (cbSceneParam._m0[77u].w / _2481)) * _2506;
        float _2514 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2516 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2693;
        if (abs((_2495 - _2498) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2693 = ((((_2499 > 0.0) ? exp2(_2514 * _2499) : (2.0 - exp2(_2516 * _2499))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2509;
        }
        else
        {
            float _2637 = 1.0 / cbSceneParam._m0[80u].x;
            float _2638 = isnan(_2500) ? _2499 : (isnan(_2499) ? _2500 : max(_2499, _2500));
            float _2639 = isnan(_2500) ? _2499 : (isnan(_2499) ? _2500 : min(_2499, _2500));
            float _2648 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : min(_2638, 0.0));
            float _2649 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : min(_2639, 0.0));
            _2693 = ((abs(_2506 / _2495) * cbSceneParam._m0[80u].y) * ((((_2648 - _2649) * 2.0) - ((exp2(_2514 * (isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0)))) - exp2(_2514 * (isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0))))) * _2637)) - ((exp2(_2516 * _2648) - exp2(_2516 * _2649)) * _2637))) + (_2509 * cbSceneParam._m0[80u].z);
        }
        vec4 _2695 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2406, _2407, 1.0), 0.0);
        float _2704 = exp2((_2693 * (-1.44269502162933349609375)) * (1.0 - _2695.w));
        float _2705 = log2(_2704);
        float _2721 = log2(_2426);
        _2518 = (exp2(_2721 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2705 * cbSceneParam._m0[78u].x)) * _2695.x) / cbSceneParam._m0[78u].x)) + _2423;
        _2520 = (exp2(_2721 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2705 * cbSceneParam._m0[78u].y)) * _2695.y) / cbSceneParam._m0[78u].y)) + _2424;
        _2522 = (exp2(_2721 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2705 * cbSceneParam._m0[78u].z)) * _2695.z) / cbSceneParam._m0[78u].z)) + _2425;
        _2524 = _2704 * _2426;
    }
    else
    {
        _2518 = _2423;
        _2520 = _2424;
        _2522 = _2425;
        _2524 = _2426;
    }
    bool _2731;
    vec4 _2534;
    vec4 _2556;
    float _2558;
    float _2562;
    float _2563;
    float _2564;
    float _2565;
    bool _2575;
    for (;;)
    {
        _2534 = cbMatDynParam._m0[0u];
        float _2536 = roundEven(_2534.y);
        bool _2537 = _2536 == 3.0;
        float _2538 = log2(_2524);
        float _2545 = exp2(_2538 * cbSceneParam._m0[78u].x) * _2395;
        float _2546 = exp2(_2538 * cbSceneParam._m0[78u].y) * _2396;
        float _2547 = exp2(_2538 * cbSceneParam._m0[78u].z) * _2397;
        float _2554 = _479 + (-0.5);
        _2556 = cbMtdParam._m0[1u];
        _2558 = _2556.y * _2554;
        float _2561 = (_2536 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2562 = _2561 * (_2537 ? _2545 : (_2545 + (cbSceneParam._m0[72u].w * _2518)));
        _2563 = _2561 * (_2537 ? _2546 : (_2546 + (cbSceneParam._m0[72u].w * _2520)));
        _2564 = _2561 * (_2537 ? _2547 : (_2547 + (cbSceneParam._m0[72u].w * _2522)));
        _2565 = _2554 * 0.999000012874603271484375;
        _2575 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2575)
        {
            if ((cbInstanceData._m0[_531 + 7u].x + _2565) < 0.5)
            {
                _2731 = true;
                break;
            }
        }
        uint _2672 = _533 + uint(_2534.w);
        if ((cbInstanceData._m0[_2672].w < 1.0) && ((cbInstanceData._m0[_2672].w + _2565) < 0.5))
        {
            _2731 = true;
            break;
        }
        if ((_2558 + 1.0) < _2556.x)
        {
            _2731 = true;
            break;
        }
        _2731 = false;
        break;
    }
    float _2936;
    if (_2731)
    {
        discard_state = true;
        _2936 = 0.0;
    }
    else
    {
        _2936 = cbInstanceData._m0[_2398].w;
    }
    SV_Target.x = _2562;
    SV_Target.y = _2563;
    SV_Target.z = _2564;
    SV_Target.w = _2936;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2398].w;
    discard_exit();
}


