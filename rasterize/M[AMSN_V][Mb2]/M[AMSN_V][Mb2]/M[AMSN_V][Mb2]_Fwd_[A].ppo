#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[20];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb2_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 5, component = 1) in float TEXCOORD_5;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _973;
float _3363;
float _3364;
float _3365;
float _3366;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219;
    float _220;
    float _221;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
    }
    else
    {
        _219 = _205;
        _220 = _206;
        _221 = _207;
    }
    vec4 _247 = texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_5) + cbTextureTilingScale._m0[1u].w));
    float _253 = _247.x * cbMatDynParam._m0[17u].x;
    float _254 = _247.y * cbMatDynParam._m0[17u].y;
    float _255 = _247.z * cbMatDynParam._m0[17u].z;
    vec4 _274 = texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_5) + cbTextureTilingScale._m0[4u].w));
    float _307 = (TEXCOORD_7.x - ((cbMatDynParam._m0[19u].x * (1.0 - TEXCOORD_7.x)) * (texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbMatDynParam._m0[19u].z * TEXCOORD_4) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMatDynParam._m0[19u].z * TEXCOORD_5) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMatDynParam._m0[19u].y * TEXCOORD.w) + 1.0);
    float _3375 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _308 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
    float _315 = (_308 * ((_274.x * cbMatDynParam._m0[18u].x) - _253)) + _253;
    float _316 = (_308 * ((_274.y * cbMatDynParam._m0[18u].y) - _254)) + _254;
    float _317 = (_308 * ((_274.z * cbMatDynParam._m0[18u].z) - _255)) + _255;
    vec4 _330 = texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_5) + cbTextureTilingScale._m0[2u].w));
    float _332 = _330.x;
    float _333 = _330.y;
    float _334 = _330.z;
    vec4 _346 = texture(sampler2D(M_AMSN_V_Mb2_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_5) + cbTextureTilingScale._m0[3u].w));
    float _359 = ((_346.z - _334) * _308) + _334;
    float _363 = ((((_346.x - _332) * _308) + _332) * 2.0) + (-1.0);
    float _365 = ((((_346.y - _333) * _308) + _333) * 2.0) + (-1.0);
    float _366 = dot(vec2(_363, _365), vec2(_363, _365));
    float _3386 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _371 = sqrt(1.0 - (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0))));
    float _374 = fma(_371, _219, fma(_365, _211 * TANGENT.x, (_197 * _189) * _363));
    float _377 = fma(_371, _220, fma(_365, _211 * TANGENT.y, (_197 * _190) * _363));
    float _380 = fma(_371, _221, fma(_365, _211 * TANGENT.z, (_197 * _191) * _363));
    float _384 = inversesqrt(dot(vec3(_374, _377, _380), vec3(_374, _377, _380)));
    float _385 = _384 * _374;
    float _386 = _384 * _377;
    float _387 = _384 * _380;
    float _3397 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _388 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    float _3408 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3419 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3430 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3441 = isnan(0.0) ? cbMatDynParam._m0[19u].w : (isnan(cbMatDynParam._m0[19u].w) ? 0.0 : max(cbMatDynParam._m0[19u].w, 0.0));
    float _392 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
    float _408 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _451 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _461 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _451);
    float _462 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _451);
    float _463 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _451);
    float _467 = inversesqrt(dot(vec3(_461, _462, _463), vec3(_461, _462, _463)));
    float _468 = _461 * _467;
    float _469 = _462 * _467;
    float _470 = _463 * _467;
    vec4 _475 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _477 = _475.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _653 = sqrt(((_461 * _461) + (_462 * _462)) + (_463 * _463));
        float _659 = (cbMatDynParam._m0[5u].x * _653) + cbMatDynParam._m0[5u].y;
        float _3452 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _660 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _664 = (cbMatDynParam._m0[5u].z * _653) + cbMatDynParam._m0[5u].w;
        float _3463 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))) - _660)) + _660) < ((_477 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _489 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _490 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _510 = fma(_387, cbSceneParam._m0[5u].z, fma(_386, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _385));
    float _513 = fma(_387, cbSceneParam._m0[6u].z, fma(_386, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _385));
    float _516 = fma(_387, cbSceneParam._m0[7u].z, fma(_386, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _385));
    uint _529 = uint(roundEven(NORMAL.w)) * 13u;
    uint _531 = _529 + 9u;
    uint _532 = _531 + uint(cbMatDynParam._m0[0u].w);
    float _538 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0)))) * cbInstanceData._m0[_532].x;
    float _539 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0)))) * cbInstanceData._m0[_532].y;
    float _540 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0)))) * cbInstanceData._m0[_532].z;
    float _3474 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _541 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _3485 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _542 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _3496 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _543 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _544 = 1.0 - _392;
    float _545 = _541 * _544;
    float _546 = _542 * _544;
    float _547 = _543 * _544;
    float _552 = (_541 + (-0.039999999105930328369140625)) * _392;
    float _553 = (_542 + (-0.039999999105930328369140625)) * _392;
    float _554 = (_543 + (-0.039999999105930328369140625)) * _392;
    float _555 = _552 + 0.039999999105930328369140625;
    float _557 = _553 + 0.039999999105930328369140625;
    float _558 = _554 + 0.039999999105930328369140625;
    vec4 _567 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _489, cbSceneParam._m0[86u].y * _490));
    float _570 = _567.x * TEXCOORD_7.w;
    float _571 = dot(vec3(_385, _386, _387), vec3(_468, _469, _470));
    float _574 = _571 * 2.0;
    float _578 = (_574 * _385) - _468;
    float _579 = (_574 * _386) - _469;
    float _580 = (_574 * _387) - _470;
    float _584 = abs(dot(vec3(_468, _469, _470), vec3(_385, _386, _387)));
    float _3507 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _586 = sqrt(_388);
    float _599 = exp2((_586 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_586 * 3.0));
    float _605 = (1.0 - _599) * ((_586 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _606 = _599 * _586;
    float _634 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _638 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _642 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _972;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _697 = fma(_642, cbModelParam._m0[26u].z, fma(_638, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _634));
        float _701 = fma(_642, cbModelParam._m0[27u].z, fma(_638, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _634));
        float _705 = fma(_642, cbModelParam._m0[28u].z, fma(_638, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _634));
        float _730 = _634 + _385;
        float _731 = _638 + _386;
        float _732 = _642 + _387;
        float _742 = fma(_732, cbModelParam._m0[26u].z, fma(_731, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _730)) - _697;
        float _743 = fma(_732, cbModelParam._m0[27u].z, fma(_731, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _730)) - _701;
        float _744 = fma(_732, cbModelParam._m0[28u].z, fma(_731, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _730)) - _705;
        float _748 = inversesqrt(dot(vec3(_742, _743, _744), vec3(_742, _743, _744)));
        float _761 = ((_748 * _742) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_697 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _762 = ((_748 * _743) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_701 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _763 = ((_748 * _744) / cbModelParam._m0[34u].z) + ((((((_705 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _766 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        vec4 _773 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        vec4 _780 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        vec4 _787 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        float _800 = exp2((_766.w + (-0.5)) * 20.0) * 2.0;
        float _801 = _800 * (_766.x + (-0.5));
        float _802 = _800 * (_766.y + (-0.5));
        float _803 = _800 * (_766.z + (-0.5));
        float _810 = exp2((_773.w + (-0.5)) * 20.0) * 2.0;
        float _811 = _810 * (_773.x + (-0.5));
        float _812 = _810 * (_773.y + (-0.5));
        float _813 = _810 * (_773.z + (-0.5));
        float _820 = exp2((_780.w + (-0.5)) * 20.0) * 2.0;
        float _821 = _820 * (_780.x + (-0.5));
        float _822 = _820 * (_780.y + (-0.5));
        float _823 = _820 * (_780.z + (-0.5));
        float _830 = exp2((_787.w + (-0.5)) * 20.0) * 2.0;
        float _831 = _830 * (_787.x + (-0.5));
        float _832 = _830 * (_787.y + (-0.5));
        float _833 = _830 * (_787.z + (-0.5));
        float _834 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _835 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _836 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _837 = _801 * 0.5;
        float _838 = _811 * 0.5;
        float _839 = _821 * 0.5;
        float _840 = dot(vec3(_837, _838, _839), vec3(_837, _838, _839));
        float _845 = (_840 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_840);
        float _854 = (dot(vec3(_385, _386, _387), vec3(_845 * _837, _845 * _838, _845 * _839)) + 1.0) * 0.5;
        float _3533 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _864 = sqrt(((_838 * _838) + (_837 * _837)) + (_839 * _839)) / (_834 + 9.9999997473787516355514526367188e-06);
        float _3544 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _866 = _865 * 2.0;
        float _870 = (1.0 - _865) / (_865 + 1.0);
        float _3555 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _880 = ((((1.0 - _871) * (_866 + 2.0)) * exp2(log2(isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * (_866 + 1.0))) + _871) * _834;
        float _881 = _802 * 0.5;
        float _882 = _812 * 0.5;
        float _883 = _822 * 0.5;
        float _884 = dot(vec3(_881, _882, _883), vec3(_881, _882, _883));
        float _889 = (_884 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_884);
        float _897 = (dot(vec3(_385, _386, _387), vec3(_889 * _881, _889 * _882, _889 * _883)) + 1.0) * 0.5;
        float _3566 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _906 = sqrt(((_882 * _882) + (_881 * _881)) + (_883 * _883)) / (_835 + 9.9999997473787516355514526367188e-06);
        float _3577 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _908 = _907 * 2.0;
        float _912 = (1.0 - _907) / (_907 + 1.0);
        float _3588 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _922 = ((((1.0 - _913) * (_908 + 2.0)) * exp2(log2(isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) * (_908 + 1.0))) + _913) * _835;
        float _923 = _803 * 0.5;
        float _924 = _813 * 0.5;
        float _925 = _823 * 0.5;
        float _926 = dot(vec3(_923, _924, _925), vec3(_923, _924, _925));
        float _931 = (_926 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_926);
        float _939 = (dot(vec3(_385, _386, _387), vec3(_931 * _923, _931 * _924, _931 * _925)) + 1.0) * 0.5;
        float _3599 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _948 = sqrt(((_924 * _924) + (_923 * _923)) + (_925 * _925)) / (_836 + 9.9999997473787516355514526367188e-06);
        float _3610 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _950 = _949 * 2.0;
        float _954 = (1.0 - _949) / (_949 + 1.0);
        float _3621 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _964 = ((((1.0 - _955) * (_950 + 2.0)) * exp2(log2(isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * (_950 + 1.0))) + _955) * _836;
        _972 = _803;
        _974 = _802;
        _975 = _801;
        _976 = _813;
        _977 = _812;
        _978 = _811;
        _979 = _823;
        _980 = _822;
        _981 = _821;
        _982 = _836;
        _983 = _835;
        _984 = _834;
        _985 = cbModelParam._m0[36u].z * (isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0)));
        _986 = cbModelParam._m0[36u].z * (isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0)));
        _987 = cbModelParam._m0[36u].z * (isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0)));
    }
    else
    {
        _972 = _973;
        _974 = _973;
        _975 = _973;
        _976 = _973;
        _977 = _973;
        _978 = _973;
        _979 = _973;
        _980 = _973;
        _981 = _973;
        _982 = _973;
        _983 = _973;
        _984 = _973;
        _985 = 0.0;
        _986 = 0.0;
        _987 = 0.0;
    }
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1016 = fma(_642, cbModelParam._m0[30u].z, fma(_638, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _634));
        float _1020 = fma(_642, cbModelParam._m0[31u].z, fma(_638, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _634));
        float _1024 = fma(_642, cbModelParam._m0[32u].z, fma(_638, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _634));
        float _1047 = _634 + _385;
        float _1048 = _638 + _386;
        float _1049 = _642 + _387;
        float _1059 = fma(_1049, cbModelParam._m0[30u].z, fma(_1048, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1047)) - _1016;
        float _1060 = fma(_1049, cbModelParam._m0[31u].z, fma(_1048, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1047)) - _1020;
        float _1061 = fma(_1049, cbModelParam._m0[32u].z, fma(_1048, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1047)) - _1024;
        float _1065 = inversesqrt(dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061)));
        float _1078 = ((_1065 * _1059) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1016 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1079 = ((_1065 * _1060) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1020 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1065 * _1061) / cbModelParam._m0[35u].z) + ((((((_1024 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        float _1115 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1082.x + (-0.5));
        float _1117 = _1115 * (_1082.y + (-0.5));
        float _1118 = _1115 * (_1082.z + (-0.5));
        float _1125 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1089.x + (-0.5));
        float _1127 = _1125 * (_1089.y + (-0.5));
        float _1128 = _1125 * (_1089.z + (-0.5));
        float _1135 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1096.x + (-0.5));
        float _1137 = _1135 * (_1096.y + (-0.5));
        float _1138 = _1135 * (_1096.z + (-0.5));
        float _1145 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1103.x + (-0.5));
        float _1147 = _1145 * (_1103.y + (-0.5));
        float _1148 = _1145 * (_1103.z + (-0.5));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = _1116 * 0.5;
        float _1153 = _1126 * 0.5;
        float _1154 = _1136 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_385, _386, _387), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3684 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1179 + 1.0))) + _1184) * _1149;
        float _1194 = _1117 * 0.5;
        float _1195 = _1127 * 0.5;
        float _1196 = _1137 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_385, _386, _387), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3695 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _3706 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3717 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * (_1221 + 1.0))) + _1226) * _1150;
        float _1236 = _1118 * 0.5;
        float _1237 = _1128 * 0.5;
        float _1238 = _1138 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(_385, _386, _387), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _3750 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_1263 + 1.0))) + _1268) * _1151;
        _1285 = _1118;
        _1286 = _1117;
        _1287 = _1116;
        _1288 = _1128;
        _1289 = _1127;
        _1290 = _1126;
        _1291 = _1138;
        _1292 = _1137;
        _1293 = _1136;
        _1294 = _1151;
        _1295 = _1150;
        _1296 = _1149;
        _1297 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
        _1298 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
        _1299 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
    }
    else
    {
        _1285 = _973;
        _1286 = _973;
        _1287 = _973;
        _1288 = _973;
        _1289 = _973;
        _1290 = _973;
        _1291 = _973;
        _1292 = _973;
        _1293 = _973;
        _1294 = _973;
        _1295 = _973;
        _1296 = _973;
        _1297 = 0.0;
        _1298 = 0.0;
        _1299 = 0.0;
    }
    float _1309 = (cbModelParam._m0[1u].x * (_1297 - _985)) + _985;
    float _1310 = (cbModelParam._m0[1u].x * (_1298 - _986)) + _986;
    float _1311 = (cbModelParam._m0[1u].x * (_1299 - _987)) + _987;
    float _1332 = fma(_1311, cbSceneParam._m0[89u].z, fma(_1310, cbSceneParam._m0[89u].y, _1309 * cbSceneParam._m0[89u].x));
    float _1335 = fma(_1311, cbSceneParam._m0[90u].z, fma(_1310, cbSceneParam._m0[90u].y, _1309 * cbSceneParam._m0[90u].x));
    float _1338 = fma(_1311, cbSceneParam._m0[91u].z, fma(_1310, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1309));
    float _1353 = _578 * 0.5;
    float _1354 = _579 * 0.5;
    float _1355 = _580 * 0.5;
    float _1356 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_1287, _1290, _1293, _1296));
    float _1359 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_1286, _1289, _1292, _1295));
    float _1362 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_1285, _1288, _1291, _1294));
    float _1396;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1369 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_972, _976, _979, _982));
        float _1373 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_974, _977, _980, _983));
        float _1377 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_975, _978, _981, _984));
        float _1384 = dot(vec4(cbModelParam._m0[39u]), vec4(_1353, _1354, _1355, 1.0));
        _1396 = dot(vec3(isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)), isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)), isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1384) ? 0.0 : (isnan(0.0) ? _1384 : max(0.0, _1384))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1396 = 1.0;
    }
    float _1407;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1398 = dot(vec4(cbModelParam._m0[40u]), vec4(_1353, _1354, _1355, 1.0));
        _1407 = dot(vec3(isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)), isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)), isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1398) ? 0.0 : (isnan(0.0) ? _1398 : max(0.0, _1398))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1407 = 1.0;
    }
    float _1411 = (_1407 * cbModelParam._m0[1u].x) + (_1396 * (1.0 - cbModelParam._m0[1u].x));
    float _1421 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _388);
    float _1422 = isnan(_1421) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1421 : min(cbModelParam._m0[25u].z, _1421));
    float _1504;
    float _1506;
    float _1508;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1471 = fma(_642, cbModelParam._m0[13u].z, fma(_638, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _634)) + cbModelParam._m0[13u].w;
        float _1475 = fma(_642, cbModelParam._m0[14u].z, fma(_638, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _634)) + cbModelParam._m0[14u].w;
        float _1479 = fma(_642, cbModelParam._m0[15u].z, fma(_638, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _634)) + cbModelParam._m0[15u].w;
        float _1482 = fma(_580, cbModelParam._m0[13u].z, fma(_579, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _578));
        float _1485 = fma(_580, cbModelParam._m0[14u].z, fma(_579, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _578));
        float _1488 = fma(_580, cbModelParam._m0[15u].z, fma(_579, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _578));
        float _1516;
        if (_1482 > 0.0)
        {
            _1516 = abs((1.0 - _1471) / _1482);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1471 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1516 = frontier_phi_19_17_ladder;
        }
        float _1721;
        if (_1485 > 0.0)
        {
            _1721 = abs((1.0 - _1475) / _1485);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1475 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1721 = frontier_phi_28_24_ladder;
        }
        float _1975;
        if (_1488 > 0.0)
        {
            _1975 = abs((1.0 - _1479) / _1488);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1479 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1975 = frontier_phi_40_35_ladder;
        }
        float _1977 = isnan(_1721) ? _1516 : (isnan(_1516) ? _1721 : min(_1516, _1721));
        float _1978 = isnan(_1975) ? _1977 : (isnan(_1977) ? _1975 : min(_1977, _1975));
        float _1982 = (_1978 * _1482) + _1471;
        float _1983 = (_1978 * _1485) + _1475;
        float _1984 = (_1978 * _1488) + _1479;
        float _1985 = _1978 * 9.9999997473787516355514526367188e-05;
        float _1987 = (-1.0) - _1985;
        float _1989 = _1985 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1984 > _1989) || ((_1984 < _1987) || ((_1983 > _1989) || ((_1983 < _1987) || ((_1982 < _1987) || (_1982 > _1989))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2112 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1984, cbModelParam._m0[9u].z, fma(_1983, cbModelParam._m0[9u].y, _1982 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1984, cbModelParam._m0[10u].z, fma(_1983, cbModelParam._m0[10u].y, _1982 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1984, cbModelParam._m0[11u].z, fma(_1983, cbModelParam._m0[11u].y, _1982 * cbModelParam._m0[11u].x))), _1422);
            frontier_phi_18_40_ladder = _2112.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2112.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2112.x * cbModelParam._m0[1u].y;
        }
        _1504 = frontier_phi_18_40_ladder_2;
        _1506 = frontier_phi_18_40_ladder_1;
        _1508 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1492 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_578, _579, _580), _1422);
        _1504 = _1492.x * cbModelParam._m0[1u].y;
        _1506 = _1492.y * cbModelParam._m0[1u].y;
        _1508 = _1492.z * cbModelParam._m0[1u].y;
    }
    float _1512 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _388);
    float _1513 = isnan(_1512) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1512 : min(cbModelParam._m0[25u].w, _1512));
    float _1604;
    float _1606;
    float _1608;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1568 = fma(_642, cbModelParam._m0[21u].z, fma(_638, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _634)) + cbModelParam._m0[21u].w;
        float _1572 = fma(_642, cbModelParam._m0[22u].z, fma(_638, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _634)) + cbModelParam._m0[22u].w;
        float _1576 = fma(_642, cbModelParam._m0[23u].z, fma(_638, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _634)) + cbModelParam._m0[23u].w;
        float _1579 = fma(_580, cbModelParam._m0[21u].z, fma(_579, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _578));
        float _1582 = fma(_580, cbModelParam._m0[22u].z, fma(_579, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _578));
        float _1585 = fma(_580, cbModelParam._m0[23u].z, fma(_579, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _578));
        float _1726;
        if (_1579 > 0.0)
        {
            _1726 = abs((1.0 - _1568) / _1579);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1568 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1726 = frontier_phi_30_26_ladder;
        }
        float _2002;
        if (_1582 > 0.0)
        {
            _2002 = abs((1.0 - _1572) / _1582);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1572 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2002 = frontier_phi_42_37_ladder;
        }
        float _2215;
        if (_1585 > 0.0)
        {
            _2215 = abs((1.0 - _1576) / _1585);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1576 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2215 = frontier_phi_51_48_ladder;
        }
        float _2217 = isnan(_2002) ? _1726 : (isnan(_1726) ? _2002 : min(_1726, _2002));
        float _2218 = isnan(_2215) ? _2217 : (isnan(_2217) ? _2215 : min(_2217, _2215));
        float _2222 = (_2218 * _1579) + _1568;
        float _2223 = (_2218 * _1582) + _1572;
        float _2224 = (_2218 * _1585) + _1576;
        float _2225 = _2218 * 9.9999997473787516355514526367188e-05;
        float _2226 = (-1.0) - _2225;
        float _2228 = _2225 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2224 > _2228) || ((_2224 < _2226) || ((_2223 > _2228) || ((_2223 < _2226) || ((_2222 < _2226) || (_2222 > _2228))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2425 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2224, cbModelParam._m0[17u].z, fma(_2223, cbModelParam._m0[17u].y, _2222 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2224, cbModelParam._m0[18u].z, fma(_2223, cbModelParam._m0[18u].y, _2222 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2224, cbModelParam._m0[19u].z, fma(_2223, cbModelParam._m0[19u].y, _2222 * cbModelParam._m0[19u].x))), _1513);
            frontier_phi_27_51_ladder = _2425.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2425.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2425.x * cbModelParam._m0[1u].z;
        }
        _1604 = frontier_phi_27_51_ladder_2;
        _1606 = frontier_phi_27_51_ladder_1;
        _1608 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1588 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_578, _579, _580), _1513);
        _1604 = _1588.x * cbModelParam._m0[1u].z;
        _1606 = _1588.y * cbModelParam._m0[1u].z;
        _1608 = _1588.z * cbModelParam._m0[1u].z;
    }
    float _1621 = (((_605 * _555) + _606) * _570) * ((cbModelParam._m0[1u].w * (_1604 - _1504)) + _1504);
    float _1623 = (((_605 * _557) + _606) * _570) * ((cbModelParam._m0[1u].w * (_1606 - _1506)) + _1506);
    float _1625 = (((_605 * _558) + _606) * _570) * ((cbModelParam._m0[1u].w * (_1608 - _1508)) + _1508);
    float _1628 = fma(_1625, cbSceneParam._m0[89u].z, fma(_1623, cbSceneParam._m0[89u].y, _1621 * cbSceneParam._m0[89u].x));
    float _1631 = fma(_1625, cbSceneParam._m0[90u].z, fma(_1623, cbSceneParam._m0[90u].y, _1621 * cbSceneParam._m0[90u].x));
    float _1634 = fma(_1625, cbSceneParam._m0[91u].z, fma(_1623, cbSceneParam._m0[91u].y, _1621 * cbSceneParam._m0[91u].x));
    uvec4 _1644 = floatBitsToUint(cbInstanceData._m0[_529 + 5u]);
    uint _1646 = _1644.x * 14u;
    uint _1647 = _1646 + 13u;
    float _1654 = _570 + (-1.0);
    float _1659 = (cbLight._m0[_1647].x * _1654) + 1.0;
    float _1660 = (cbLight._m0[_1647].y * _1654) + 1.0;
    float _1661 = (cbLight._m0[_1647].z * _1654) + 1.0;
    float _1662 = (cbLight._m0[_1647].w * _1654) + 1.0;
    uint _1663 = _1646 + 5u;
    float _1669 = isnan(1.0) ? _1660 : (isnan(_1660) ? 1.0 : min(_1660, 1.0));
    uint _1673 = _1646 + 4u;
    float _1679 = isnan(1.0) ? _1659 : (isnan(_1659) ? 1.0 : min(_1659, 1.0));
    uint _1683 = _1646 | 1u;
    float _1694 = dot(vec3(cbLight._m0[_1646].xyz), vec3(_385, _386, _387));
    float _1697 = dot(vec3(cbLight._m0[_1683].xyz), vec3(_385, _386, _387));
    float _3886 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
    float _3897 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _1702 = (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * 0.3183098733425140380859375;
    float _1704 = (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * 0.3183098733425140380859375;
    float _1711 = ((cbLight._m0[_1663].x * _1669) * _1704) + ((cbLight._m0[_1673].x * _1679) * _1702);
    float _1712 = ((_1669 * cbLight._m0[_1663].y) * _1704) + ((_1679 * cbLight._m0[_1673].y) * _1702);
    float _1713 = ((_1669 * cbLight._m0[_1663].z) * _1704) + ((_1679 * cbLight._m0[_1673].z) * _1702);
    uvec4 _1718 = floatBitsToUint(cbLight._m0[_1646 + 12u]);
    bool _1720 = _1718.x == 0u;
    float _1731;
    float _1733;
    float _1735;
    if (_1720)
    {
        _1731 = _1711;
        _1733 = _1712;
        _1735 = _1713;
    }
    else
    {
        uint _1739 = _1646 + 6u;
        float _1755 = (dot(vec3(cbLight._m0[_1646 + 2u].xyz), vec3(_385, _386, _387)) * 0.5) + 0.5;
        float _1756 = _1755 * _1755;
        float _3908 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1758 = isnan(1.0) ? _1661 : (isnan(_1661) ? 1.0 : min(_1661, 1.0));
        _1731 = (((cbLight._m0[_1739].x * 0.3183098733425140380859375) * _1757) * _1758) + _1711;
        _1733 = (((cbLight._m0[_1739].y * 0.3183098733425140380859375) * _1757) * _1758) + _1712;
        _1735 = (((cbLight._m0[_1739].z * 0.3183098733425140380859375) * _1757) * _1758) + _1713;
    }
    bool _1738 = _1718.y == 0u;
    float _1776;
    float _1778;
    float _1780;
    if (_1738)
    {
        _1776 = _1731;
        _1778 = _1733;
        _1780 = _1735;
    }
    else
    {
        uint _1946 = _1646 + 7u;
        float _1962 = (dot(vec3(cbLight._m0[_1646 + 3u].xyz), vec3(_385, _386, _387)) * 0.5) + 0.5;
        float _1963 = _1962 * _1962;
        float _3924 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        float _1964 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1965 = isnan(1.0) ? _1662 : (isnan(_1662) ? 1.0 : min(_1662, 1.0));
        _1776 = (((cbLight._m0[_1946].x * 0.3183098733425140380859375) * _1964) * _1965) + _1731;
        _1778 = (((cbLight._m0[_1946].y * 0.3183098733425140380859375) * _1964) * _1965) + _1733;
        _1780 = (((cbLight._m0[_1946].z * 0.3183098733425140380859375) * _1964) * _1965) + _1735;
    }
    uint _1783 = _1646 + 8u;
    float _1796 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1646].w)) * _388) * 0.949999988079071044921875);
    float _1797 = _1796 * _1796;
    float _1798 = cbLight._m0[_1646].x + _468;
    float _1799 = cbLight._m0[_1646].y + _469;
    float _1800 = cbLight._m0[_1646].z + _470;
    float _1804 = inversesqrt(dot(vec3(_1798, _1799, _1800), vec3(_1798, _1799, _1800)));
    float _1805 = _1804 * _1798;
    float _1806 = _1804 * _1799;
    float _1807 = _1804 * _1800;
    float _1808 = dot(vec3(_385, _386, _387), vec3(cbLight._m0[_1646].xyz));
    float _3940 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1811 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _3951 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _1812 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _1813 = dot(vec3(_385, _386, _387), vec3(_1805, _1806, _1807));
    float _3962 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1816 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _1817 = dot(vec3(cbLight._m0[_1646].xyz), vec3(_1805, _1806, _1807));
    float _3973 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1821 = _1797 * _1797;
    float _1825 = ((_1816 * _1816) * (_1821 + (-1.0))) + 1.0;
    float _1833 = exp2(log2(1.0 - (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) * 5.0);
    float _1834 = 0.959999978542327880859375 - _552;
    float _1836 = 0.959999978542327880859375 - _553;
    float _1837 = 0.959999978542327880859375 - _554;
    float _1844 = 1.0 - _1797;
    float _1855 = (0.5 / (((_1812 * ((_1811 * _1844) + _1797)) + 9.9999999392252902907785028219223e-09) + (((_1812 * _1844) + _1797) * _1811))) * _1811;
    float _3984 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1857 = (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1821 / ((_1825 * _1825) * 3.141590118408203125));
    uint _1868 = _1646 + 9u;
    float _1879 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1683].w)) * _388) * 0.949999988079071044921875);
    float _1880 = _1879 * _1879;
    float _1881 = cbLight._m0[_1683].x + _468;
    float _1882 = cbLight._m0[_1683].y + _469;
    float _1883 = cbLight._m0[_1683].z + _470;
    float _1887 = inversesqrt(dot(vec3(_1881, _1882, _1883), vec3(_1881, _1882, _1883)));
    float _1888 = _1887 * _1881;
    float _1889 = _1887 * _1882;
    float _1890 = _1887 * _1883;
    float _1891 = dot(vec3(_385, _386, _387), vec3(cbLight._m0[_1683].xyz));
    float _3995 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1894 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _1895 = dot(vec3(_385, _386, _387), vec3(_1888, _1889, _1890));
    float _4006 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1898 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _1899 = dot(vec3(cbLight._m0[_1683].xyz), vec3(_1888, _1889, _1890));
    float _4017 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1903 = _1880 * _1880;
    float _1907 = ((_1898 * _1898) * (_1903 + (-1.0))) + 1.0;
    float _1914 = exp2(log2(1.0 - (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * 5.0);
    float _1921 = 1.0 - _1880;
    float _1931 = (0.5 / (((_1812 * ((_1894 * _1921) + _1880)) + 9.9999999392252902907785028219223e-09) + (((_1812 * _1921) + _1880) * _1894))) * _1894;
    float _4028 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1933 = (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1903 / ((_1907 * _1907) * 3.141590118408203125));
    float _1943 = (((((_1914 * _1834) + _555) * cbLight._m0[_1868].x) * _1933) * _1669) + (((((_1833 * _1834) + _555) * cbLight._m0[_1783].x) * _1857) * _1679);
    float _1944 = (((((_1914 * _1836) + _557) * cbLight._m0[_1868].y) * _1933) * _1669) + (((((_1833 * _1836) + _557) * cbLight._m0[_1783].y) * _1857) * _1679);
    float _1945 = (((((_1914 * _1837) + _558) * cbLight._m0[_1868].z) * _1933) * _1669) + (((((_1833 * _1837) + _558) * cbLight._m0[_1783].z) * _1857) * _1679);
    float _2007;
    float _2009;
    float _2011;
    if (_1720)
    {
        _2007 = _1943;
        _2009 = _1944;
        _2011 = _1945;
    }
    else
    {
        uint _2013 = _1646 + 2u;
        uint _2017 = _1646 + 10u;
        float _2031 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2013].w)) * _388) * 0.949999988079071044921875);
        float _2032 = _2031 * _2031;
        float _2033 = cbLight._m0[_2013].x + _468;
        float _2034 = cbLight._m0[_2013].y + _469;
        float _2035 = cbLight._m0[_2013].z + _470;
        float _2039 = inversesqrt(dot(vec3(_2033, _2034, _2035), vec3(_2033, _2034, _2035)));
        float _2040 = _2039 * _2033;
        float _2041 = _2039 * _2034;
        float _2042 = _2039 * _2035;
        float _2043 = dot(vec3(_385, _386, _387), vec3(cbLight._m0[_2013].xyz));
        float _4039 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2046 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _2047 = dot(vec3(_385, _386, _387), vec3(_2040, _2041, _2042));
        float _4050 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2050 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _2051 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_2040, _2041, _2042));
        float _4061 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2055 = _2032 * _2032;
        float _2059 = ((_2050 * _2050) * (_2055 + (-1.0))) + 1.0;
        float _2066 = exp2(log2(1.0 - (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) * 5.0);
        float _2073 = 1.0 - _2032;
        float _2083 = (0.5 / (((_1812 * ((_2046 * _2073) + _2032)) + 9.9999999392252902907785028219223e-09) + (((_1812 * _2073) + _2032) * _2046))) * _2046;
        float _4072 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2085 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_2055 / ((_2059 * _2059) * 3.141590118408203125));
        float _2086 = isnan(1.0) ? _1661 : (isnan(_1661) ? 1.0 : min(_1661, 1.0));
        _2007 = (((((_2066 * _1834) + _555) * cbLight._m0[_2017].x) * _2085) * _2086) + _1943;
        _2009 = (((((_2066 * _1836) + _557) * cbLight._m0[_2017].y) * _2085) * _2086) + _1944;
        _2011 = (((((_2066 * _1837) + _558) * cbLight._m0[_2017].z) * _2085) * _2086) + _1945;
    }
    float _2121;
    float _2123;
    float _2125;
    if (_1738)
    {
        _2121 = _2007;
        _2123 = _2009;
        _2125 = _2011;
    }
    else
    {
        uint _2132 = _1646 + 3u;
        uint _2136 = _1646 + 11u;
        float _2150 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2132].w)) * _388) * 0.949999988079071044921875);
        float _2151 = _2150 * _2150;
        float _2152 = cbLight._m0[_2132].x + _468;
        float _2153 = cbLight._m0[_2132].y + _469;
        float _2154 = cbLight._m0[_2132].z + _470;
        float _2158 = inversesqrt(dot(vec3(_2152, _2153, _2154), vec3(_2152, _2153, _2154)));
        float _2159 = _2158 * _2152;
        float _2160 = _2158 * _2153;
        float _2161 = _2158 * _2154;
        float _2162 = dot(vec3(_385, _386, _387), vec3(cbLight._m0[_2132].xyz));
        float _4088 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2165 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _2166 = dot(vec3(_385, _386, _387), vec3(_2159, _2160, _2161));
        float _4099 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2169 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _2170 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_2159, _2160, _2161));
        float _4110 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2174 = _2151 * _2151;
        float _2178 = ((_2169 * _2169) * (_2174 + (-1.0))) + 1.0;
        float _2185 = exp2(log2(1.0 - (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * 5.0);
        float _2192 = 1.0 - _2151;
        float _2202 = (0.5 / (((_1812 * ((_2165 * _2192) + _2151)) + 9.9999999392252902907785028219223e-09) + (((_1812 * _2192) + _2151) * _2165))) * _2165;
        float _4121 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2204 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_2174 / ((_2178 * _2178) * 3.141590118408203125));
        float _2205 = isnan(1.0) ? _1662 : (isnan(_1662) ? 1.0 : min(_1662, 1.0));
        _2121 = (((((_2185 * _1834) + _555) * cbLight._m0[_2136].x) * _2204) * _2205) + _2007;
        _2123 = (((((_2185 * _1836) + _557) * cbLight._m0[_2136].y) * _2204) * _2205) + _2009;
        _2125 = (((((_2185 * _1837) + _558) * cbLight._m0[_2136].z) * _2204) * _2205) + _2011;
    }
    float _2339;
    float _2341;
    float _2343;
    float _2345;
    float _2347;
    float _2349;
    if (_1644.y == 0u)
    {
        float _2280 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2281 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2280;
        float _2282 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2280;
        float _2283 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2280;
        uvec4 _2295 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2296 = _2295.x;
        uint _2307 = uint((float(_2295.y) * floor(float(uint(cbSceneParam._m0[85u].y * _490) / _2296))) + floor(float(uint(cbSceneParam._m0[85u].x * _489) / _2296)));
        float _2317 = (log2(_2283 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2318 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        uint _2321 = uint(isnan(14.0) ? _2318 : (isnan(_2318) ? 14.0 : min(_2318, 14.0)));
        uvec4 _2326 = texelFetch(g_lightClusterGridBuffer, int(((_2321 << 2u) + (_2307 << 6u)) >> 2u));
        uint _2327 = _2326.x;
        uint _2328 = _2295.z;
        float _2430;
        float _2432;
        float _2434;
        float _2436;
        float _2438;
        float _2440;
        if (((((1u << ((_2328 >> 4u) & 15u)) + 4294967295u) & _2327) == 0u) || ((_2328 & 240u) == 0u))
        {
            _2430 = 0.0;
            _2432 = 0.0;
            _2434 = 0.0;
            _2436 = 0.0;
            _2438 = 0.0;
            _2440 = 0.0;
        }
        else
        {
            float _2431;
            float _2433;
            float _2435;
            float _2437;
            float _2439;
            float _2441;
            float _2582 = 0.0;
            float _2583 = 0.0;
            float _2584 = 0.0;
            float _2585 = 0.0;
            float _2586 = 0.0;
            float _2587 = 0.0;
            uint _2588 = 0u;
            uint _2597;
            bool _2598;
            for (;;)
            {
                _2597 = texelFetch(g_lightClassification, int((((_2321 << 5u) + (_2307 << 9u)) + (_2588 << 2u)) >> 2u)).x;
                _2598 = _2597 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2598)
                {
                    frontier_phi_68_pred = _2584;
                    frontier_phi_68_pred_1 = _2587;
                    frontier_phi_68_pred_2 = _2586;
                    frontier_phi_68_pred_3 = _2585;
                    frontier_phi_68_pred_4 = _2583;
                    frontier_phi_68_pred_5 = _2582;
                }
                else
                {
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    uint _2733;
                    _2727 = _2582;
                    _2728 = _2583;
                    _2729 = _2584;
                    _2730 = _2585;
                    _2731 = _2586;
                    _2732 = _2587;
                    _2733 = _2597;
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    for (;;)
                    {
                        uint _2737 = uint(findLSB(_2733)) + (_2588 << 5u);
                        uint _2734 = (_2733 + 4294967295u) & _2733;
                        uint _2739 = _2737 * 48u;
                        vec4 _2753 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2739)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 3u)).x));
                        uint _2759 = (_2737 * 48u) + 4u;
                        vec4 _2772 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2759)).x, texelFetch(g_PointLightRenderingBuffer, int(_2759 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2759 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2759 + 3u)).x));
                        uint _2778 = (_2737 * 48u) + 8u;
                        vec3 _2789 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2778)).x, texelFetch(g_PointLightRenderingBuffer, int(_2778 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2778 + 2u)).x));
                        float _2793 = _2753.x - _2281;
                        float _2794 = _2753.y - _2282;
                        float _2795 = _2753.z - _2283;
                        float _2796 = dot(vec3(_2793, _2794, _2795), vec3(_2793, _2794, _2795));
                        float _2799 = inversesqrt(_2796);
                        float _2800 = _2799 * _2793;
                        float _2801 = _2799 * _2794;
                        float _2802 = _2799 * _2795;
                        float _2803 = dot(vec3(_510, _513, _516), vec3(_2800, _2801, _2802));
                        float _2808 = 1.0 - (_2796 * _2753.w);
                        float _4147 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                        float _2809 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
                        float _2810 = sqrt(_2796) * _2772.w;
                        float _2813 = 1.39999997615814208984375 / (_2810 + 1.39999997615814208984375);
                        float _2814 = _2813 * _2813;
                        float _2817 = ((1.0 - _2814) * _2803) + _2814;
                        float _2820 = _2810 * _2810;
                        float _2824 = ((isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0))) * _2809) / ((_2820 * 0.699999988079071044921875) + 1.0);
                        float _2828 = (-0.0) - _2281;
                        float _2829 = (-0.0) - _2282;
                        float _2830 = (-0.0) - _2283;
                        float _2834 = inversesqrt(dot(vec3(_2828, _2829, _2830), vec3(_2828, _2829, _2830)));
                        float _2835 = _2834 * _2828;
                        float _2836 = _2834 * _2829;
                        float _2837 = _2834 * _2830;
                        float _2845 = exp2(log2(1.0 / ((_2820 * 3.5) + 5.0)) * 0.25);
                        float _2846 = 1.0 - _586;
                        float _2853 = sqrt(1.0 - ((1.0 - (_2846 * _2846)) * (1.0 - (_2845 * _2845))));
                        float _2854 = _2853 * _2853;
                        float _2855 = _2854 * _2854;
                        float _2856 = _2835 + _2800;
                        float _2857 = _2836 + _2801;
                        float _2858 = _2837 + _2802;
                        float _2862 = inversesqrt(dot(vec3(_2856, _2857, _2858), vec3(_2856, _2857, _2858)));
                        float _2866 = dot(vec3(_510, _513, _516), vec3(_2835, _2836, _2837));
                        float _4163 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
                        float _2869 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                        float _2870 = dot(vec3(_510, _513, _516), vec3(_2862 * _2856, _2862 * _2857, _2862 * _2858));
                        float _4174 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                        float _2873 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                        float _2877 = ((_2873 * _2873) * (_2855 + (-1.0))) + 1.0;
                        float _2878 = _2813 * _2854;
                        float _2879 = _2878 * _2878;
                        float _2882 = ((1.0 - _2879) * _2803) + _2879;
                        float _4185 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
                        float _2883 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                        float _2884 = 1.0 - _2854;
                        float _2894 = (0.5 / (((_2883 * ((_2869 * _2884) + _2854)) + 9.9999999392252902907785028219223e-09) + (((_2883 * _2884) + _2854) * _2869))) * _2883;
                        float _4196 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
                        float _2905 = (((_2855 * 3.1415927410125732421875) * (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0)))) / ((_2877 * _2877) * ((_2820 * 2.1991131305694580078125) + 3.141590118408203125))) * _2809;
                        _2657 = (_2824 * _2772.x) + _2730;
                        _2658 = (_2824 * _2772.y) + _2731;
                        _2659 = (_2824 * _2772.z) + _2732;
                        _2654 = (_2905 * _2789.x) + _2727;
                        _2655 = (_2905 * _2789.y) + _2728;
                        _2656 = (_2905 * _2789.z) + _2729;
                        if (_2734 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2727 = _2654;
                            _2728 = _2655;
                            _2729 = _2656;
                            _2730 = _2657;
                            _2731 = _2658;
                            _2732 = _2659;
                            _2733 = _2734;
                        }
                    }
                    frontier_phi_68_pred = _2656;
                    frontier_phi_68_pred_1 = _2659;
                    frontier_phi_68_pred_2 = _2658;
                    frontier_phi_68_pred_3 = _2657;
                    frontier_phi_68_pred_4 = _2655;
                    frontier_phi_68_pred_5 = _2654;
                }
                _2435 = frontier_phi_68_pred;
                _2441 = frontier_phi_68_pred_1;
                _2439 = frontier_phi_68_pred_2;
                _2437 = frontier_phi_68_pred_3;
                _2433 = frontier_phi_68_pred_4;
                _2431 = frontier_phi_68_pred_5;
                uint _2589 = _2588 + 1u;
                if (_2589 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2582 = _2431;
                    _2583 = _2433;
                    _2584 = _2435;
                    _2585 = _2437;
                    _2586 = _2439;
                    _2587 = _2441;
                    _2588 = _2589;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2430 = _2431;
            _2432 = _2433;
            _2434 = _2435;
            _2436 = _2437;
            _2438 = _2439;
            _2440 = _2441;
        }
        uvec4 _2444 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2445 = _2444.z;
        uint _2447 = (_2445 >> 8u) & 15u;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        float _2558;
        float _2560;
        if (((4294967295u << _2447) & _2327) == 0u)
        {
            _2550 = _2430;
            _2552 = _2432;
            _2554 = _2434;
            _2556 = _2436;
            _2558 = _2438;
            _2560 = _2440;
        }
        else
        {
            float _2575 = inversesqrt(dot(vec3(_2281, _2282, _2283), vec3(_2281, _2282, _2283)));
            float _2576 = _2575 * _2281;
            float _2577 = _2575 * _2282;
            float _2578 = _2575 * _2283;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2447 < ((_2445 >> 12u) & 15u))
            {
                float _2551;
                float _2553;
                float _2555;
                float _2557;
                float _2559;
                float _2561;
                float _2710 = _2430;
                float _2711 = _2432;
                float _2712 = _2434;
                float _2713 = _2436;
                float _2714 = _2438;
                float _2715 = _2440;
                uint _2716 = _2447;
                uint _2725;
                bool _2726;
                for (;;)
                {
                    _2725 = texelFetch(g_lightClassification, int((((_2321 << 5u) + (_2307 << 9u)) + (_2716 << 2u)) >> 2u)).x;
                    _2726 = _2725 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2726)
                    {
                        frontier_phi_79_pred = _2715;
                        frontier_phi_79_pred_1 = _2714;
                        frontier_phi_79_pred_2 = _2713;
                        frontier_phi_79_pred_3 = _2712;
                        frontier_phi_79_pred_4 = _2711;
                        frontier_phi_79_pred_5 = _2710;
                    }
                    else
                    {
                        float _2919;
                        float _2920;
                        float _2921;
                        float _2922;
                        float _2923;
                        float _2924;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _2932 = _2710;
                        float _2933 = _2711;
                        float _2934 = _2712;
                        float _2935 = _2713;
                        float _2936 = _2714;
                        float _2937 = _2715;
                        uint _2938 = _2725;
                        uint _2939;
                        vec4 _2964;
                        float _2965;
                        vec4 _2980;
                        vec3 _2992;
                        vec4 _3008;
                        vec4 _3023;
                        float _3070;
                        bool _3071;
                        for (;;)
                        {
                            uint _2949 = ((_2716 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2938));
                            _2939 = (_2938 + 4294967295u) & _2938;
                            uint _2951 = _2949 * 40u;
                            _2964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 3u)).x));
                            _2965 = _2964.w;
                            uint _2967 = (_2949 * 40u) + 4u;
                            _2980 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2967)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 3u)).x));
                            uint _2982 = (_2949 * 40u) + 8u;
                            _2992 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x));
                            uint _2995 = (_2949 * 40u) + 16u;
                            _3008 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2995)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 3u)).x));
                            uint _3010 = (_2949 * 40u) + 20u;
                            _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            uint _3026 = (_2949 * 40u) + 24u;
                            vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            uint _3045 = (_2949 * 40u) + 28u;
                            vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            _3070 = fma(_2283, _3058.z, fma(_2282, _3058.y, _3058.x * _2281)) + _3058.w;
                            _3071 = !((fma(_2283, _3039.z, fma(_2282, _3039.y, _3039.x * _2281)) + _3039.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3071)
                            {
                                float _3098 = _2964.x - _2281;
                                float _3099 = _2964.y - _2282;
                                float _3100 = _2964.z - _2283;
                                float _3101 = dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100));
                                float _3104 = inversesqrt(_3101);
                                float _3105 = _3104 * _3098;
                                float _3106 = _3104 * _3099;
                                float _3107 = _3104 * _3100;
                                float _3111 = 1.0 - (_3101 / (_2965 * _2965));
                                float _4207 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3112 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                                float _3116 = sqrt(_3101) * _2980.w;
                                float _3118 = 1.39999997615814208984375 / (_3116 + 1.39999997615814208984375);
                                float _3119 = _3118 * _3118;
                                float _3122 = ((1.0 - _3119) * dot(vec3(_3105, _3106, _3107), vec3(_510, _513, _516))) + _3119;
                                float _3125 = _3116 * _3116;
                                float _3129 = (fma(_2283, _3008.z, fma(_2282, _3008.y, _3008.x * _2281)) + _3008.w) / _3070;
                                float _3130 = (fma(_2283, _3023.z, fma(_2282, _3023.y, _3023.x * _2281)) + _3023.w) / _3070;
                                float _3134 = 1.0 - dot(vec2(_3129, _3130), vec2(_3129, _3130));
                                float _4223 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3135 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                                float _3136 = _3135 * (((isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0))) * _3112) / ((_3125 * 0.699999988079071044921875) + 1.0));
                                float _3148 = exp2(log2(1.0 / ((_3125 * 3.5) + 5.0)) * 0.25);
                                float _3149 = 1.0 - _586;
                                float _3156 = sqrt(1.0 - ((1.0 - (_3149 * _3149)) * (1.0 - (_3148 * _3148))));
                                float _3157 = _3156 * _3156;
                                float _3158 = _3157 * _3157;
                                float _3159 = _3105 - _2576;
                                float _3160 = _3106 - _2577;
                                float _3161 = _3107 - _2578;
                                float _3165 = inversesqrt(dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161)));
                                float _3169 = dot(vec3(_510, _513, _516), vec3((-0.0) - _2576, (-0.0) - _2577, (-0.0) - _2578));
                                float _4234 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3172 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3173 = dot(vec3(_510, _513, _516), vec3(_3165 * _3159, _3165 * _3160, _3165 * _3161));
                                float _4245 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3176 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3180 = ((_3176 * _3176) * (_3158 + (-1.0))) + 1.0;
                                float _3181 = _3118 * _3157;
                                float _3182 = _3181 * _3181;
                                float _3188 = ((1.0 - _3182) * dot(vec3(_510, _513, _516), vec3(_3105, _3106, _3107))) + _3182;
                                float _4256 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3189 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                                float _3190 = 1.0 - _3157;
                                float _3200 = (0.5 / (((_3189 * ((_3172 * _3190) + _3157)) + 9.9999999392252902907785028219223e-09) + (((_3189 * _3190) + _3157) * _3172))) * _3189;
                                float _4267 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3210 = (_3135 * _3112) * (((_3158 * 3.1415927410125732421875) * (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) / ((_3180 * _3180) * ((_3125 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3136 * _2980.z;
                                frontier_phi_85_pred_1 = _3136 * _2980.y;
                                frontier_phi_85_pred_2 = _3136 * _2980.x;
                                frontier_phi_85_pred_3 = _3210 * _2992.z;
                                frontier_phi_85_pred_4 = _3210 * _2992.y;
                                frontier_phi_85_pred_5 = _3210 * _2992.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3219 = frontier_phi_85_pred;
                            _3218 = frontier_phi_85_pred_1;
                            _3217 = frontier_phi_85_pred_2;
                            _3216 = frontier_phi_85_pred_3;
                            _3215 = frontier_phi_85_pred_4;
                            _3214 = frontier_phi_85_pred_5;
                            _2922 = _3217 + _2935;
                            _2923 = _3218 + _2936;
                            _2924 = _3219 + _2937;
                            _2919 = _3214 + _2932;
                            _2920 = _3215 + _2933;
                            _2921 = _3216 + _2934;
                            if (_2939 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2932 = _2919;
                                _2933 = _2920;
                                _2934 = _2921;
                                _2935 = _2922;
                                _2936 = _2923;
                                _2937 = _2924;
                                _2938 = _2939;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2924;
                        frontier_phi_79_pred_1 = _2923;
                        frontier_phi_79_pred_2 = _2922;
                        frontier_phi_79_pred_3 = _2921;
                        frontier_phi_79_pred_4 = _2920;
                        frontier_phi_79_pred_5 = _2919;
                    }
                    _2561 = frontier_phi_79_pred;
                    _2559 = frontier_phi_79_pred_1;
                    _2557 = frontier_phi_79_pred_2;
                    _2555 = frontier_phi_79_pred_3;
                    _2553 = frontier_phi_79_pred_4;
                    _2551 = frontier_phi_79_pred_5;
                    uint _2717 = _2716 + 1u;
                    if (_2717 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2710 = _2551;
                        _2711 = _2553;
                        _2712 = _2555;
                        _2713 = _2557;
                        _2714 = _2559;
                        _2715 = _2561;
                        _2716 = _2717;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2557;
                frontier_phi_60_61_ladder_1 = _2561;
                frontier_phi_60_61_ladder_2 = _2559;
                frontier_phi_60_61_ladder_3 = _2555;
                frontier_phi_60_61_ladder_4 = _2553;
                frontier_phi_60_61_ladder_5 = _2551;
            }
            else
            {
                frontier_phi_60_61_ladder = _2436;
                frontier_phi_60_61_ladder_1 = _2440;
                frontier_phi_60_61_ladder_2 = _2438;
                frontier_phi_60_61_ladder_3 = _2434;
                frontier_phi_60_61_ladder_4 = _2432;
                frontier_phi_60_61_ladder_5 = _2430;
            }
            _2550 = frontier_phi_60_61_ladder_5;
            _2552 = frontier_phi_60_61_ladder_4;
            _2554 = frontier_phi_60_61_ladder_3;
            _2556 = frontier_phi_60_61_ladder;
            _2558 = frontier_phi_60_61_ladder_2;
            _2560 = frontier_phi_60_61_ladder_1;
        }
        float _2565 = isnan(1.0) ? _570 : (isnan(_570) ? 1.0 : min(_570, 1.0));
        _2339 = (_2565 * _2556) + _1776;
        _2341 = (_2565 * _2558) + _1778;
        _2343 = (_2565 * _2560) + _1780;
        _2345 = ((_2550 * _555) * _2565) + _2121;
        _2347 = ((_2552 * _557) * _2565) + _2123;
        _2349 = ((_2554 * _558) * _2565) + _2125;
    }
    else
    {
        _2339 = _1776;
        _2341 = _1778;
        _2343 = _1780;
        _2345 = _2121;
        _2347 = _2123;
        _2349 = _2125;
    }
    float _4283 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _4294 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _4305 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _2366 = ((isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2339 + ((isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0))) * _570))) + ((_2345 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _1411)) * cbPerFrame._m0[3u].x);
    float _2367 = ((isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2341 + ((isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0))) * _570))) + ((_2347 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _1411)) * cbPerFrame._m0[3u].x);
    float _2368 = ((isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2343 + ((isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0))) * _570))) + ((_2349 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _1411)) * cbPerFrame._m0[3u].x);
    float _2369 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2370 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2371 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    uint _2372 = _529 + 6u;
    float _2380 = _489 / cbSceneParam._m0[86u].x;
    float _2381 = _490 / cbSceneParam._m0[86u].y;
    vec4 _2395 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2380, _2381, (log2((isnan(cbSceneParam._m0[77u].w) ? _408 : (isnan(_408) ? cbSceneParam._m0[77u].w : min(_408, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2397 = _2395.x;
    float _2398 = _2395.y;
    float _2399 = _2395.z;
    float _2400 = _2395.w;
    float _2492;
    float _2494;
    float _2496;
    float _2498;
    if (_408 > cbSceneParam._m0[78u].w)
    {
        float _2455 = isnan(_408) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _408 : min(cbSceneParam._m0[80u].w, _408));
        float _2456 = _2455 / _408;
        float _2467 = _2456 * _461;
        float _2468 = _462 * _2456;
        float _2469 = (-0.0) - _2468;
        float _2470 = _2456 * _463;
        float _2472 = (cbSceneParam._m0[77u].w * _2469) / _2455;
        float _2473 = _2472 + cbSceneParam._m0[79u].w;
        float _2474 = cbSceneParam._m0[79u].w - _2468;
        float _2480 = sqrt(((_2467 * _2467) + (_2468 * _2468)) + (_2470 * _2470));
        float _2483 = (1.0 - (cbSceneParam._m0[77u].w / _2455)) * _2480;
        float _2488 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2490 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2667;
        if (abs((_2469 - _2472) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2667 = ((((_2473 > 0.0) ? exp2(_2488 * _2473) : (2.0 - exp2(_2490 * _2473))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2483;
        }
        else
        {
            float _2611 = 1.0 / cbSceneParam._m0[80u].x;
            float _2612 = isnan(_2474) ? _2473 : (isnan(_2473) ? _2474 : max(_2473, _2474));
            float _2613 = isnan(_2474) ? _2473 : (isnan(_2473) ? _2474 : min(_2473, _2474));
            float _2622 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : min(_2612, 0.0));
            float _2623 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : min(_2613, 0.0));
            _2667 = ((abs(_2480 / _2469) * cbSceneParam._m0[80u].y) * ((((_2622 - _2623) * 2.0) - ((exp2(_2488 * (isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0)))) - exp2(_2488 * (isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0))))) * _2611)) - ((exp2(_2490 * _2622) - exp2(_2490 * _2623)) * _2611))) + (_2483 * cbSceneParam._m0[80u].z);
        }
        vec4 _2669 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2380, _2381, 1.0), 0.0);
        float _2678 = exp2((_2667 * (-1.44269502162933349609375)) * (1.0 - _2669.w));
        float _2679 = log2(_2678);
        float _2695 = log2(_2400);
        _2492 = (exp2(_2695 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2679 * cbSceneParam._m0[78u].x)) * _2669.x) / cbSceneParam._m0[78u].x)) + _2397;
        _2494 = (exp2(_2695 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2679 * cbSceneParam._m0[78u].y)) * _2669.y) / cbSceneParam._m0[78u].y)) + _2398;
        _2496 = (exp2(_2695 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2679 * cbSceneParam._m0[78u].z)) * _2669.z) / cbSceneParam._m0[78u].z)) + _2399;
        _2498 = _2678 * _2400;
    }
    else
    {
        _2492 = _2397;
        _2494 = _2398;
        _2496 = _2399;
        _2498 = _2400;
    }
    bool _2705;
    vec4 _2508;
    vec4 _2530;
    float _2532;
    float _2536;
    float _2537;
    float _2538;
    float _2539;
    bool _2549;
    for (;;)
    {
        _2508 = cbMatDynParam._m0[0u];
        float _2510 = roundEven(_2508.y);
        bool _2511 = _2510 == 3.0;
        float _2512 = log2(_2498);
        float _2519 = exp2(_2512 * cbSceneParam._m0[78u].x) * _2369;
        float _2520 = exp2(_2512 * cbSceneParam._m0[78u].y) * _2370;
        float _2521 = exp2(_2512 * cbSceneParam._m0[78u].z) * _2371;
        float _2528 = _477 + (-0.5);
        _2530 = cbMtdParam._m0[1u];
        _2532 = _2530.y * _2528;
        float _2535 = (_2510 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2536 = _2535 * (_2511 ? _2519 : (_2519 + (cbSceneParam._m0[72u].w * _2492)));
        _2537 = _2535 * (_2511 ? _2520 : (_2520 + (cbSceneParam._m0[72u].w * _2494)));
        _2538 = _2535 * (_2511 ? _2521 : (_2521 + (cbSceneParam._m0[72u].w * _2496)));
        _2539 = _2528 * 0.999000012874603271484375;
        _2549 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2549)
        {
            if ((cbInstanceData._m0[_529 + 7u].x + _2539) < 0.5)
            {
                _2705 = true;
                break;
            }
        }
        uint _2646 = _531 + uint(_2508.w);
        if ((cbInstanceData._m0[_2646].w < 1.0) && ((cbInstanceData._m0[_2646].w + _2539) < 0.5))
        {
            _2705 = true;
            break;
        }
        if ((_2532 + 1.0) < _2530.x)
        {
            _2705 = true;
            break;
        }
        _2705 = false;
        break;
    }
    float _2910;
    if (_2705)
    {
        discard_state = true;
        _2910 = 0.0;
    }
    else
    {
        _2910 = cbInstanceData._m0[_2372].w;
    }
    SV_Target.x = _2536;
    SV_Target.y = _2537;
    SV_Target.z = _2538;
    SV_Target.w = _2910;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2372].w;
    discard_exit();
}


