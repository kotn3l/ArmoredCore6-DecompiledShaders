#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _777;
float _3010;
float _3011;
float _3012;
float _3013;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _169 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _170 = _169 * NORMAL.x;
    float _171 = _169 * NORMAL.y;
    float _172 = _169 * NORMAL.z;
    float _177;
    float _178;
    float _179;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _177 = (-0.0) - _170;
        _178 = (-0.0) - _171;
        _179 = (-0.0) - _172;
    }
    else
    {
        _177 = _170;
        _178 = _171;
        _179 = _172;
    }
    vec4 _199 = texture(sampler2D(M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _205 = _199.x * cbMtdParam._m0[9u].x;
    float _206 = _199.y * cbMtdParam._m0[9u].y;
    float _207 = _199.z * cbMtdParam._m0[9u].z;
    vec4 _219 = texture(sampler2D(M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _237 = inversesqrt(dot(vec3(_177, _178, _179), vec3(_177, _178, _179)));
    float _238 = _237 * _177;
    float _239 = _237 * _178;
    float _240 = _237 * _179;
    float _3022 = isnan(0.0) ? _205 : (isnan(_205) ? 0.0 : max(_205, 0.0));
    float _3033 = isnan(0.0) ? _206 : (isnan(_206) ? 0.0 : max(_206, 0.0));
    float _3044 = isnan(0.0) ? _207 : (isnan(_207) ? 0.0 : max(_207, 0.0));
    float _260 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _301 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _311 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _301);
    float _312 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _301);
    float _313 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _301);
    float _317 = inversesqrt(dot(vec3(_311, _312, _313), vec3(_311, _312, _313)));
    float _318 = _311 * _317;
    float _319 = _312 * _317;
    float _320 = _313 * _317;
    vec4 _325 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _327 = _325.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _456 = sqrt(((_311 * _311) + (_312 * _312)) + (_313 * _313));
        float _462 = (cbMatDynParam._m0[5u].x * _456) + cbMatDynParam._m0[5u].y;
        float _3055 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
        float _463 = isnan(1.0) ? _3055 : (isnan(_3055) ? 1.0 : min(_3055, 1.0));
        float _467 = (cbMatDynParam._m0[5u].z * _456) + cbMatDynParam._m0[5u].w;
        float _3066 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3066 : (isnan(_3066) ? 1.0 : min(_3066, 1.0))) - _463)) + _463) < ((_327 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _339 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _340 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _360 = fma(_240, cbSceneParam._m0[5u].z, fma(_239, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _238));
    float _363 = fma(_240, cbSceneParam._m0[6u].z, fma(_239, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _238));
    float _366 = fma(_240, cbSceneParam._m0[7u].z, fma(_239, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _238));
    uint _379 = uint(roundEven(NORMAL.w)) * 13u;
    uint _380 = _379 + 9u;
    uint _381 = _380 + uint(cbMatDynParam._m0[0u].w);
    float _387 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3022 : (isnan(_3022) ? 1.0 : min(_3022, 1.0)))) * cbInstanceData._m0[_381].x;
    float _388 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3033 : (isnan(_3033) ? 1.0 : min(_3033, 1.0)))) * cbInstanceData._m0[_381].y;
    float _389 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3044 : (isnan(_3044) ? 1.0 : min(_3044, 1.0)))) * cbInstanceData._m0[_381].z;
    float _3077 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _390 = isnan(1.0) ? _3077 : (isnan(_3077) ? 1.0 : min(_3077, 1.0));
    float _3088 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _391 = isnan(1.0) ? _3088 : (isnan(_3088) ? 1.0 : min(_3088, 1.0));
    float _3099 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _392 = isnan(1.0) ? _3099 : (isnan(_3099) ? 1.0 : min(_3099, 1.0));
    vec4 _401 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _339, cbSceneParam._m0[86u].y * _340));
    float _404 = _401.x * TEXCOORD.z;
    float _405 = dot(vec3(_238, _239, _240), vec3(_318, _319, _320));
    float _408 = _405 * 2.0;
    float _413 = (_408 * _238) - _318;
    float _414 = (_408 * _239) - _319;
    float _415 = (_408 * _240) - _320;
    float _437 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _441 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _445 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _776;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    float _788;
    float _789;
    float _790;
    float _791;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _501 = fma(_445, cbModelParam._m0[26u].z, fma(_441, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _437));
        float _505 = fma(_445, cbModelParam._m0[27u].z, fma(_441, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _437));
        float _509 = fma(_445, cbModelParam._m0[28u].z, fma(_441, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _437));
        float _534 = _437 + _238;
        float _535 = _441 + _239;
        float _536 = _445 + _240;
        float _546 = fma(_536, cbModelParam._m0[26u].z, fma(_535, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _534)) - _501;
        float _547 = fma(_536, cbModelParam._m0[27u].z, fma(_535, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _534)) - _505;
        float _548 = fma(_536, cbModelParam._m0[28u].z, fma(_535, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _534)) - _509;
        float _552 = inversesqrt(dot(vec3(_546, _547, _548), vec3(_546, _547, _548)));
        float _565 = ((_552 * _546) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_501 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _566 = ((_552 * _547) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_505 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _567 = ((_552 * _548) / cbModelParam._m0[34u].z) + ((((((_509 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _570 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_565, _566, _567), 0.0);
        vec4 _577 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_565, _566, _567), 0.0);
        vec4 _584 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_565, _566, _567), 0.0);
        vec4 _591 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_565, _566, _567), 0.0);
        float _604 = exp2((_570.w + (-0.5)) * 20.0) * 2.0;
        float _605 = _604 * (_570.x + (-0.5));
        float _606 = _604 * (_570.y + (-0.5));
        float _607 = _604 * (_570.z + (-0.5));
        float _614 = exp2((_577.w + (-0.5)) * 20.0) * 2.0;
        float _615 = _614 * (_577.x + (-0.5));
        float _616 = _614 * (_577.y + (-0.5));
        float _617 = _614 * (_577.z + (-0.5));
        float _624 = exp2((_584.w + (-0.5)) * 20.0) * 2.0;
        float _625 = _624 * (_584.x + (-0.5));
        float _626 = _624 * (_584.y + (-0.5));
        float _627 = _624 * (_584.z + (-0.5));
        float _634 = exp2((_591.w + (-0.5)) * 20.0) * 2.0;
        float _635 = _634 * (_591.x + (-0.5));
        float _636 = _634 * (_591.y + (-0.5));
        float _637 = _634 * (_591.z + (-0.5));
        float _638 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
        float _639 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
        float _640 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
        float _641 = _605 * 0.5;
        float _642 = _615 * 0.5;
        float _643 = _625 * 0.5;
        float _644 = dot(vec3(_641, _642, _643), vec3(_641, _642, _643));
        float _649 = (_644 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_644);
        float _658 = (dot(vec3(_238, _239, _240), vec3(_649 * _641, _649 * _642, _649 * _643)) + 1.0) * 0.5;
        float _3125 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _668 = sqrt(((_642 * _642) + (_641 * _641)) + (_643 * _643)) / (_638 + 9.9999997473787516355514526367188e-06);
        float _3136 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _669 = isnan(1.0) ? _3136 : (isnan(_3136) ? 1.0 : min(_3136, 1.0));
        float _670 = _669 * 2.0;
        float _674 = (1.0 - _669) / (_669 + 1.0);
        float _3147 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        float _675 = isnan(1.0) ? _3147 : (isnan(_3147) ? 1.0 : min(_3147, 1.0));
        float _684 = ((((1.0 - _675) * (_670 + 2.0)) * exp2(log2(isnan(1.0) ? _3125 : (isnan(_3125) ? 1.0 : min(_3125, 1.0))) * (_670 + 1.0))) + _675) * _638;
        float _685 = _606 * 0.5;
        float _686 = _616 * 0.5;
        float _687 = _626 * 0.5;
        float _688 = dot(vec3(_685, _686, _687), vec3(_685, _686, _687));
        float _693 = (_688 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_688);
        float _701 = (dot(vec3(_238, _239, _240), vec3(_693 * _685, _693 * _686, _693 * _687)) + 1.0) * 0.5;
        float _3158 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _710 = sqrt(((_686 * _686) + (_685 * _685)) + (_687 * _687)) / (_639 + 9.9999997473787516355514526367188e-06);
        float _3169 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _711 = isnan(1.0) ? _3169 : (isnan(_3169) ? 1.0 : min(_3169, 1.0));
        float _712 = _711 * 2.0;
        float _716 = (1.0 - _711) / (_711 + 1.0);
        float _3180 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _717 = isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0));
        float _726 = ((((1.0 - _717) * (_712 + 2.0)) * exp2(log2(isnan(1.0) ? _3158 : (isnan(_3158) ? 1.0 : min(_3158, 1.0))) * (_712 + 1.0))) + _717) * _639;
        float _727 = _607 * 0.5;
        float _728 = _617 * 0.5;
        float _729 = _627 * 0.5;
        float _730 = dot(vec3(_727, _728, _729), vec3(_727, _728, _729));
        float _735 = (_730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_730);
        float _743 = (dot(vec3(_238, _239, _240), vec3(_735 * _727, _735 * _728, _735 * _729)) + 1.0) * 0.5;
        float _3191 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _752 = sqrt(((_728 * _728) + (_727 * _727)) + (_729 * _729)) / (_640 + 9.9999997473787516355514526367188e-06);
        float _3202 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0));
        float _754 = _753 * 2.0;
        float _758 = (1.0 - _753) / (_753 + 1.0);
        float _3213 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0));
        float _768 = ((((1.0 - _759) * (_754 + 2.0)) * exp2(log2(isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0))) * (_754 + 1.0))) + _759) * _640;
        _776 = _607;
        _778 = _606;
        _779 = _605;
        _780 = _617;
        _781 = _616;
        _782 = _615;
        _783 = _627;
        _784 = _626;
        _785 = _625;
        _786 = _640;
        _787 = _639;
        _788 = _638;
        _789 = cbModelParam._m0[36u].z * (isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0)));
        _790 = cbModelParam._m0[36u].z * (isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0)));
        _791 = cbModelParam._m0[36u].z * (isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0)));
    }
    else
    {
        _776 = _777;
        _778 = _777;
        _779 = _777;
        _780 = _777;
        _781 = _777;
        _782 = _777;
        _783 = _777;
        _784 = _777;
        _785 = _777;
        _786 = _777;
        _787 = _777;
        _788 = _777;
        _789 = 0.0;
        _790 = 0.0;
        _791 = 0.0;
    }
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _820 = fma(_445, cbModelParam._m0[30u].z, fma(_441, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _437));
        float _824 = fma(_445, cbModelParam._m0[31u].z, fma(_441, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _437));
        float _828 = fma(_445, cbModelParam._m0[32u].z, fma(_441, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _437));
        float _851 = _437 + _238;
        float _852 = _441 + _239;
        float _853 = _445 + _240;
        float _863 = fma(_853, cbModelParam._m0[30u].z, fma(_852, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _851)) - _820;
        float _864 = fma(_853, cbModelParam._m0[31u].z, fma(_852, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _851)) - _824;
        float _865 = fma(_853, cbModelParam._m0[32u].z, fma(_852, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _851)) - _828;
        float _869 = inversesqrt(dot(vec3(_863, _864, _865), vec3(_863, _864, _865)));
        float _882 = ((_869 * _863) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_820 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _883 = ((_869 * _864) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_824 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _884 = ((_869 * _865) / cbModelParam._m0[35u].z) + ((((((_828 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _886 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        float _919 = exp2((_886.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_886.x + (-0.5));
        float _921 = _919 * (_886.y + (-0.5));
        float _922 = _919 * (_886.z + (-0.5));
        float _929 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_893.x + (-0.5));
        float _931 = _929 * (_893.y + (-0.5));
        float _932 = _929 * (_893.z + (-0.5));
        float _939 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_900.x + (-0.5));
        float _941 = _939 * (_900.y + (-0.5));
        float _942 = _939 * (_900.z + (-0.5));
        float _949 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_907.x + (-0.5));
        float _951 = _949 * (_907.y + (-0.5));
        float _952 = _949 * (_907.z + (-0.5));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = _920 * 0.5;
        float _957 = _930 * 0.5;
        float _958 = _940 * 0.5;
        float _959 = dot(vec3(_956, _957, _958), vec3(_956, _957, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _972 = (dot(vec3(_238, _239, _240), vec3(_964 * _956, _964 * _957, _964 * _958)) + 1.0) * 0.5;
        float _3254 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _981 = sqrt(((_957 * _957) + (_956 * _956)) + (_958 * _958)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3265 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
        float _983 = _982 * 2.0;
        float _987 = (1.0 - _982) / (_982 + 1.0);
        float _3276 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
        float _997 = ((((1.0 - _988) * (_983 + 2.0)) * exp2(log2(isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0))) * (_983 + 1.0))) + _988) * _953;
        float _998 = _921 * 0.5;
        float _999 = _931 * 0.5;
        float _1000 = _941 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1014 = (dot(vec3(_238, _239, _240), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3287 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1023 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _3298 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _3309 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0))) * (_1025 + 1.0))) + _1030) * _954;
        float _1040 = _922 * 0.5;
        float _1041 = _932 * 0.5;
        float _1042 = _942 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1056 = (dot(vec3(_238, _239, _240), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3320 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1065 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3331 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3342 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0))) * (_1067 + 1.0))) + _1072) * _955;
        _1089 = _922;
        _1090 = _921;
        _1091 = _920;
        _1092 = _932;
        _1093 = _931;
        _1094 = _930;
        _1095 = _942;
        _1096 = _941;
        _1097 = _940;
        _1098 = _955;
        _1099 = _954;
        _1100 = _953;
        _1101 = cbModelParam._m0[36u].w * (isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0)));
        _1102 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
        _1103 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
    }
    else
    {
        _1089 = _777;
        _1090 = _777;
        _1091 = _777;
        _1092 = _777;
        _1093 = _777;
        _1094 = _777;
        _1095 = _777;
        _1096 = _777;
        _1097 = _777;
        _1098 = _777;
        _1099 = _777;
        _1100 = _777;
        _1101 = 0.0;
        _1102 = 0.0;
        _1103 = 0.0;
    }
    float _1113 = (cbModelParam._m0[1u].x * (_1101 - _789)) + _789;
    float _1114 = (cbModelParam._m0[1u].x * (_1102 - _790)) + _790;
    float _1115 = (cbModelParam._m0[1u].x * (_1103 - _791)) + _791;
    float _1136 = fma(_1115, cbSceneParam._m0[89u].z, fma(_1114, cbSceneParam._m0[89u].y, _1113 * cbSceneParam._m0[89u].x));
    float _1139 = fma(_1115, cbSceneParam._m0[90u].z, fma(_1114, cbSceneParam._m0[90u].y, _1113 * cbSceneParam._m0[90u].x));
    float _1142 = fma(_1115, cbSceneParam._m0[91u].z, fma(_1114, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1113));
    float _1157 = _413 * 0.5;
    float _1158 = _414 * 0.5;
    float _1159 = _415 * 0.5;
    float _1160 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_1091, _1094, _1097, _1100));
    float _1163 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_1090, _1093, _1096, _1099));
    float _1166 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_1089, _1092, _1095, _1098));
    float _1200;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1173 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_776, _780, _783, _786));
        float _1177 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_778, _781, _784, _787));
        float _1181 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_779, _782, _785, _788));
        float _1188 = dot(vec4(cbModelParam._m0[39u]), vec4(_1157, _1158, _1159, 1.0));
        _1200 = dot(vec3(isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)), isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)), isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1188) ? 0.0 : (isnan(0.0) ? _1188 : max(0.0, _1188))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1200 = 1.0;
    }
    float _1211;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1202 = dot(vec4(cbModelParam._m0[40u]), vec4(_1157, _1158, _1159, 1.0));
        _1211 = dot(vec3(isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)), isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)), isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1202) ? 0.0 : (isnan(0.0) ? _1202 : max(0.0, _1202))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1211 = 1.0;
    }
    float _1215 = (_1211 * cbModelParam._m0[1u].x) + (_1200 * (1.0 - cbModelParam._m0[1u].x));
    float _1224 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1306;
    float _1308;
    float _1310;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1273 = fma(_445, cbModelParam._m0[13u].z, fma(_441, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _437)) + cbModelParam._m0[13u].w;
        float _1277 = fma(_445, cbModelParam._m0[14u].z, fma(_441, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _437)) + cbModelParam._m0[14u].w;
        float _1281 = fma(_445, cbModelParam._m0[15u].z, fma(_441, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _437)) + cbModelParam._m0[15u].w;
        float _1284 = fma(_415, cbModelParam._m0[13u].z, fma(_414, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _413));
        float _1287 = fma(_415, cbModelParam._m0[14u].z, fma(_414, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _413));
        float _1290 = fma(_415, cbModelParam._m0[15u].z, fma(_414, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _413));
        float _1316;
        if (_1284 > 0.0)
        {
            _1316 = abs((1.0 - _1273) / _1284);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1284 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1273 + 1.0) / _1284);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1316 = frontier_phi_19_17_ladder;
        }
        float _1545;
        if (_1287 > 0.0)
        {
            _1545 = abs((1.0 - _1277) / _1287);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1287 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1277 + 1.0) / _1287);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1545 = frontier_phi_28_24_ladder;
        }
        float _1737;
        if (_1290 > 0.0)
        {
            _1737 = abs((1.0 - _1281) / _1290);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1290 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1281 + 1.0) / _1290);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1737 = frontier_phi_40_35_ladder;
        }
        float _1739 = isnan(_1545) ? _1316 : (isnan(_1316) ? _1545 : min(_1316, _1545));
        float _1740 = isnan(_1737) ? _1739 : (isnan(_1739) ? _1737 : min(_1739, _1737));
        float _1744 = (_1740 * _1284) + _1273;
        float _1745 = (_1740 * _1287) + _1277;
        float _1746 = (_1740 * _1290) + _1281;
        float _1747 = _1740 * 9.9999997473787516355514526367188e-05;
        float _1749 = (-1.0) - _1747;
        float _1751 = _1747 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1746 > _1751) || ((_1746 < _1749) || ((_1745 > _1751) || ((_1745 < _1749) || ((_1744 < _1749) || (_1744 > _1751))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1843 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1746, cbModelParam._m0[9u].z, fma(_1745, cbModelParam._m0[9u].y, _1744 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1746, cbModelParam._m0[10u].z, fma(_1745, cbModelParam._m0[10u].y, _1744 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1746, cbModelParam._m0[11u].z, fma(_1745, cbModelParam._m0[11u].y, _1744 * cbModelParam._m0[11u].x))), _1224);
            frontier_phi_18_40_ladder = _1843.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1843.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1843.x * cbModelParam._m0[1u].y;
        }
        _1306 = frontier_phi_18_40_ladder_2;
        _1308 = frontier_phi_18_40_ladder_1;
        _1310 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1294 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_413, _414, _415), _1224);
        _1306 = _1294.x * cbModelParam._m0[1u].y;
        _1308 = _1294.y * cbModelParam._m0[1u].y;
        _1310 = _1294.z * cbModelParam._m0[1u].y;
    }
    float _1313 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1406;
    float _1408;
    float _1410;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1370 = fma(_445, cbModelParam._m0[21u].z, fma(_441, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _437)) + cbModelParam._m0[21u].w;
        float _1374 = fma(_445, cbModelParam._m0[22u].z, fma(_441, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _437)) + cbModelParam._m0[22u].w;
        float _1378 = fma(_445, cbModelParam._m0[23u].z, fma(_441, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _437)) + cbModelParam._m0[23u].w;
        float _1381 = fma(_415, cbModelParam._m0[21u].z, fma(_414, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _413));
        float _1384 = fma(_415, cbModelParam._m0[22u].z, fma(_414, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _413));
        float _1387 = fma(_415, cbModelParam._m0[23u].z, fma(_414, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _413));
        float _1550;
        if (_1381 > 0.0)
        {
            _1550 = abs((1.0 - _1370) / _1381);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1381 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1370 + 1.0) / _1381);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1550 = frontier_phi_30_26_ladder;
        }
        float _1764;
        if (_1384 > 0.0)
        {
            _1764 = abs((1.0 - _1374) / _1384);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1384 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1374 + 1.0) / _1384);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1764 = frontier_phi_42_37_ladder;
        }
        float _1915;
        if (_1387 > 0.0)
        {
            _1915 = abs((1.0 - _1378) / _1387);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1387 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1378 + 1.0) / _1387);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1915 = frontier_phi_51_48_ladder;
        }
        float _1917 = isnan(_1764) ? _1550 : (isnan(_1550) ? _1764 : min(_1550, _1764));
        float _1918 = isnan(_1915) ? _1917 : (isnan(_1917) ? _1915 : min(_1917, _1915));
        float _1922 = (_1918 * _1381) + _1370;
        float _1923 = (_1918 * _1384) + _1374;
        float _1924 = (_1918 * _1387) + _1378;
        float _1925 = _1918 * 9.9999997473787516355514526367188e-05;
        float _1926 = (-1.0) - _1925;
        float _1928 = _1925 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1924 > _1928) || ((_1924 < _1926) || ((_1923 > _1928) || ((_1923 < _1926) || ((_1922 < _1926) || (_1922 > _1928))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2157 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1924, cbModelParam._m0[17u].z, fma(_1923, cbModelParam._m0[17u].y, _1922 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1924, cbModelParam._m0[18u].z, fma(_1923, cbModelParam._m0[18u].y, _1922 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1924, cbModelParam._m0[19u].z, fma(_1923, cbModelParam._m0[19u].y, _1922 * cbModelParam._m0[19u].x))), _1313);
            frontier_phi_27_51_ladder = _2157.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2157.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2157.x * cbModelParam._m0[1u].z;
        }
        _1406 = frontier_phi_27_51_ladder_2;
        _1408 = frontier_phi_27_51_ladder_1;
        _1410 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1390 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_413, _414, _415), _1313);
        _1406 = _1390.x * cbModelParam._m0[1u].z;
        _1408 = _1390.y * cbModelParam._m0[1u].z;
        _1410 = _1390.z * cbModelParam._m0[1u].z;
    }
    float _1422 = _404 * 0.01200000010430812835693359375;
    float _1424 = _1422 * ((cbModelParam._m0[1u].w * (_1406 - _1306)) + _1306);
    float _1425 = _1422 * ((cbModelParam._m0[1u].w * (_1408 - _1308)) + _1308);
    float _1426 = _1422 * ((cbModelParam._m0[1u].w * (_1410 - _1310)) + _1310);
    float _1429 = fma(_1426, cbSceneParam._m0[89u].z, fma(_1425, cbSceneParam._m0[89u].y, _1424 * cbSceneParam._m0[89u].x));
    float _1432 = fma(_1426, cbSceneParam._m0[90u].z, fma(_1425, cbSceneParam._m0[90u].y, _1424 * cbSceneParam._m0[90u].x));
    float _1435 = fma(_1426, cbSceneParam._m0[91u].z, fma(_1425, cbSceneParam._m0[91u].y, _1424 * cbSceneParam._m0[91u].x));
    vec4 _1443 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_339, _340));
    float _1445 = _1443.w;
    float _1457 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1445);
    float _1458 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1445);
    float _1459 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1445);
    uvec4 _1463 = floatBitsToUint(cbInstanceData._m0[_379 + 5u]);
    uint _1465 = _1463.x * 14u;
    uint _1466 = _1465 + 13u;
    float _1473 = _404 + (-1.0);
    float _1479 = (cbLight._m0[_1466].x * _1473) + 1.0;
    float _1480 = (cbLight._m0[_1466].y * _1473) + 1.0;
    float _1481 = (cbLight._m0[_1466].z * _1473) + 1.0;
    float _1482 = (cbLight._m0[_1466].w * _1473) + 1.0;
    uint _1483 = _1465 + 5u;
    float _1489 = isnan(1.0) ? _1480 : (isnan(_1480) ? 1.0 : min(_1480, 1.0));
    uint _1493 = _1465 + 4u;
    float _1503 = isnan(1.0) ? _1479 : (isnan(_1479) ? 1.0 : min(_1479, 1.0));
    uint _1507 = _1465 | 1u;
    float _1518 = dot(vec3(cbLight._m0[_1465].xyz), vec3(_238, _239, _240));
    float _1521 = dot(vec3(cbLight._m0[_1507].xyz), vec3(_238, _239, _240));
    float _3478 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
    float _3489 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
    float _1526 = (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) * 0.3183098733425140380859375;
    float _1528 = (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * 0.3183098733425140380859375;
    float _1535 = ((cbLight._m0[_1483].x * _1489) * _1528) + (((cbLight._m0[_1493].x * _1457) * _1503) * _1526);
    float _1536 = ((_1489 * cbLight._m0[_1483].y) * _1528) + (((cbLight._m0[_1493].y * _1458) * _1503) * _1526);
    float _1537 = ((_1489 * cbLight._m0[_1483].z) * _1528) + (((cbLight._m0[_1493].z * _1459) * _1503) * _1526);
    uvec4 _1542 = floatBitsToUint(cbLight._m0[_1465 + 12u]);
    bool _1544 = _1542.x == 0u;
    float _1555;
    float _1557;
    float _1559;
    if (_1544)
    {
        _1555 = _1535;
        _1557 = _1536;
        _1559 = _1537;
    }
    else
    {
        uint _1563 = _1465 + 6u;
        float _1579 = (dot(vec3(cbLight._m0[_1465 + 2u].xyz), vec3(_238, _239, _240)) * 0.5) + 0.5;
        float _1580 = _1579 * _1579;
        float _3500 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _1582 = isnan(1.0) ? _1481 : (isnan(_1481) ? 1.0 : min(_1481, 1.0));
        _1555 = (((cbLight._m0[_1563].x * 0.3183098733425140380859375) * _1581) * _1582) + _1535;
        _1557 = (((cbLight._m0[_1563].y * 0.3183098733425140380859375) * _1581) * _1582) + _1536;
        _1559 = (((cbLight._m0[_1563].z * 0.3183098733425140380859375) * _1581) * _1582) + _1537;
    }
    bool _1562 = _1542.y == 0u;
    float _1600;
    float _1602;
    float _1604;
    if (_1562)
    {
        _1600 = _1555;
        _1602 = _1557;
        _1604 = _1559;
    }
    else
    {
        uint _1708 = _1465 + 7u;
        float _1724 = (dot(vec3(cbLight._m0[_1465 + 3u].xyz), vec3(_238, _239, _240)) * 0.5) + 0.5;
        float _1725 = _1724 * _1724;
        float _3516 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _1727 = isnan(1.0) ? _1482 : (isnan(_1482) ? 1.0 : min(_1482, 1.0));
        _1600 = (((cbLight._m0[_1708].x * 0.3183098733425140380859375) * _1726) * _1727) + _1555;
        _1602 = (((cbLight._m0[_1708].y * 0.3183098733425140380859375) * _1726) * _1727) + _1557;
        _1604 = (((cbLight._m0[_1708].z * 0.3183098733425140380859375) * _1726) * _1727) + _1559;
    }
    uint _1606 = _1465 + 8u;
    float _1612 = cbLight._m0[_1465].x + _318;
    float _1613 = cbLight._m0[_1465].y + _319;
    float _1614 = cbLight._m0[_1465].z + _320;
    float _1618 = inversesqrt(dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614)));
    float _1622 = dot(vec3(_238, _239, _240), vec3(cbLight._m0[_1465].xyz));
    float _3532 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
    float _1625 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    float _3543 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _1626 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _1627 = dot(vec3(cbLight._m0[_1465].xyz), vec3(_1612 * _1618, _1613 * _1618, _1614 * _1618));
    float _3554 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
    float _1638 = (exp2(log2(1.0 - (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1644 = (0.5 / ((_1625 + 9.9999999392252902907785028219223e-09) + _1626)) * _1625;
    float _3565 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
    float _1646 = (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * 0.31831014156341552734375;
    uint _1660 = _1465 + 9u;
    float _1666 = cbLight._m0[_1507].x + _318;
    float _1667 = cbLight._m0[_1507].y + _319;
    float _1668 = cbLight._m0[_1507].z + _320;
    float _1672 = inversesqrt(dot(vec3(_1666, _1667, _1668), vec3(_1666, _1667, _1668)));
    float _1676 = dot(vec3(_238, _239, _240), vec3(cbLight._m0[_1507].xyz));
    float _3576 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
    float _1679 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _1680 = dot(vec3(cbLight._m0[_1507].xyz), vec3(_1666 * _1672, _1667 * _1672, _1668 * _1672));
    float _3587 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
    float _1689 = (exp2(log2(1.0 - (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1693 = (0.5 / ((_1679 + 9.9999999392252902907785028219223e-09) + _1626)) * _1679;
    float _3598 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
    float _1695 = (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * 0.31831014156341552734375;
    float _1705 = (((_1689 * cbLight._m0[_1660].x) * _1695) * _1489) + ((((cbLight._m0[_1606].x * _1457) * _1638) * _1646) * _1503);
    float _1706 = (((_1689 * cbLight._m0[_1660].y) * _1695) * _1489) + ((((cbLight._m0[_1606].y * _1458) * _1638) * _1646) * _1503);
    float _1707 = (((_1689 * cbLight._m0[_1660].z) * _1695) * _1489) + ((((cbLight._m0[_1606].z * _1459) * _1638) * _1646) * _1503);
    float _1769;
    float _1771;
    float _1773;
    if (_1544)
    {
        _1769 = _1705;
        _1771 = _1706;
        _1773 = _1707;
    }
    else
    {
        uint _1775 = _1465 + 10u;
        uint _1781 = _1465 + 2u;
        float _1787 = cbLight._m0[_1781].x + _318;
        float _1788 = cbLight._m0[_1781].y + _319;
        float _1789 = cbLight._m0[_1781].z + _320;
        float _1793 = inversesqrt(dot(vec3(_1787, _1788, _1789), vec3(_1787, _1788, _1789)));
        float _1797 = dot(vec3(_238, _239, _240), vec3(cbLight._m0[_1781].xyz));
        float _3609 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1800 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1801 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_1787 * _1793, _1788 * _1793, _1789 * _1793));
        float _3620 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1810 = (exp2(log2(1.0 - (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1814 = (0.5 / ((_1800 + 9.9999999392252902907785028219223e-09) + _1626)) * _1800;
        float _3631 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1816 = (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * 0.31831014156341552734375;
        float _1817 = isnan(1.0) ? _1481 : (isnan(_1481) ? 1.0 : min(_1481, 1.0));
        _1769 = (((_1810 * cbLight._m0[_1775].x) * _1816) * _1817) + _1705;
        _1771 = (((_1810 * cbLight._m0[_1775].y) * _1816) * _1817) + _1706;
        _1773 = (((_1810 * cbLight._m0[_1775].z) * _1816) * _1817) + _1707;
    }
    float _1852;
    float _1854;
    float _1856;
    if (_1562)
    {
        _1852 = _1769;
        _1854 = _1771;
        _1856 = _1773;
    }
    else
    {
        uint _1863 = _1465 + 11u;
        uint _1869 = _1465 + 3u;
        float _1875 = cbLight._m0[_1869].x + _318;
        float _1876 = cbLight._m0[_1869].y + _319;
        float _1877 = cbLight._m0[_1869].z + _320;
        float _1881 = inversesqrt(dot(vec3(_1875, _1876, _1877), vec3(_1875, _1876, _1877)));
        float _1885 = dot(vec3(_238, _239, _240), vec3(cbLight._m0[_1869].xyz));
        float _3647 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1888 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1889 = dot(vec3(cbLight._m0[_1869].xyz), vec3(_1875 * _1881, _1876 * _1881, _1877 * _1881));
        float _3658 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1898 = (exp2(log2(1.0 - (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1902 = (0.5 / ((_1888 + 9.9999999392252902907785028219223e-09) + _1626)) * _1888;
        float _3669 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1904 = (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * 0.31831014156341552734375;
        float _1905 = isnan(1.0) ? _1482 : (isnan(_1482) ? 1.0 : min(_1482, 1.0));
        _1852 = (((_1898 * cbLight._m0[_1863].x) * _1904) * _1905) + _1769;
        _1854 = (((_1898 * cbLight._m0[_1863].y) * _1904) * _1905) + _1771;
        _1856 = (((_1898 * cbLight._m0[_1863].z) * _1904) * _1905) + _1773;
    }
    float _2039;
    float _2041;
    float _2043;
    float _2045;
    float _2047;
    float _2049;
    if (_1463.y == 0u)
    {
        float _1980 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1981 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1980;
        float _1982 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1980;
        float _1983 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1980;
        uvec4 _1995 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1996 = _1995.x;
        uint _2007 = uint((float(_1995.y) * floor(float(uint(cbSceneParam._m0[85u].y * _340) / _1996))) + floor(float(uint(cbSceneParam._m0[85u].x * _339) / _1996)));
        float _2017 = (log2(_1983 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2018 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        uint _2021 = uint(isnan(14.0) ? _2018 : (isnan(_2018) ? 14.0 : min(_2018, 14.0)));
        uvec4 _2026 = texelFetch(g_lightClusterGridBuffer, int(((_2021 << 2u) + (_2007 << 6u)) >> 2u));
        uint _2027 = _2026.x;
        uint _2028 = _1995.z;
        float _2162;
        float _2164;
        float _2166;
        float _2168;
        float _2170;
        float _2172;
        if (((((1u << ((_2028 >> 4u) & 15u)) + 4294967295u) & _2027) == 0u) || ((_2028 & 240u) == 0u))
        {
            _2162 = 0.0;
            _2164 = 0.0;
            _2166 = 0.0;
            _2168 = 0.0;
            _2170 = 0.0;
            _2172 = 0.0;
        }
        else
        {
            float _2163;
            float _2165;
            float _2167;
            float _2169;
            float _2171;
            float _2173;
            float _2322 = 0.0;
            float _2323 = 0.0;
            float _2324 = 0.0;
            float _2325 = 0.0;
            float _2326 = 0.0;
            float _2327 = 0.0;
            uint _2328 = 0u;
            uint _2337;
            bool _2338;
            for (;;)
            {
                _2337 = texelFetch(g_lightClassification, int((((_2021 << 5u) + (_2007 << 9u)) + (_2328 << 2u)) >> 2u)).x;
                _2338 = _2337 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2338)
                {
                    frontier_phi_68_pred = _2324;
                    frontier_phi_68_pred_1 = _2327;
                    frontier_phi_68_pred_2 = _2326;
                    frontier_phi_68_pred_3 = _2325;
                    frontier_phi_68_pred_4 = _2323;
                    frontier_phi_68_pred_5 = _2322;
                }
                else
                {
                    float _2467;
                    float _2468;
                    float _2469;
                    float _2470;
                    float _2471;
                    float _2472;
                    uint _2473;
                    _2467 = _2322;
                    _2468 = _2323;
                    _2469 = _2324;
                    _2470 = _2325;
                    _2471 = _2326;
                    _2472 = _2327;
                    _2473 = _2337;
                    float _2394;
                    float _2395;
                    float _2396;
                    float _2397;
                    float _2398;
                    float _2399;
                    for (;;)
                    {
                        uint _2477 = uint(findLSB(_2473)) + (_2328 << 5u);
                        uint _2474 = (_2473 + 4294967295u) & _2473;
                        uint _2479 = _2477 * 48u;
                        vec4 _2493 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2479)).x, texelFetch(g_PointLightRenderingBuffer, int(_2479 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2479 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2479 + 3u)).x));
                        uint _2499 = (_2477 * 48u) + 4u;
                        vec4 _2512 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2499)).x, texelFetch(g_PointLightRenderingBuffer, int(_2499 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2499 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2499 + 3u)).x));
                        uint _2518 = (_2477 * 48u) + 8u;
                        vec3 _2529 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2518)).x, texelFetch(g_PointLightRenderingBuffer, int(_2518 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2518 + 2u)).x));
                        float _2533 = _2493.x - _1981;
                        float _2534 = _2493.y - _1982;
                        float _2535 = _2493.z - _1983;
                        float _2536 = dot(vec3(_2533, _2534, _2535), vec3(_2533, _2534, _2535));
                        float _2539 = inversesqrt(_2536);
                        float _2548 = 1.0 - (_2536 * _2493.w);
                        float _3695 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
                        float _2549 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
                        float _2550 = sqrt(_2536) * _2512.w;
                        float _2553 = 1.39999997615814208984375 / (_2550 + 1.39999997615814208984375);
                        float _2554 = _2553 * _2553;
                        float _2557 = ((1.0 - _2554) * dot(vec3(_360, _363, _366), vec3(_2539 * _2533, _2539 * _2534, _2539 * _2535))) + _2554;
                        float _2560 = _2550 * _2550;
                        float _2564 = ((isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0))) * _2549) / ((_2560 * 0.699999988079071044921875) + 1.0);
                        float _2568 = (-0.0) - _1981;
                        float _2569 = (-0.0) - _1982;
                        float _2570 = (-0.0) - _1983;
                        float _2574 = inversesqrt(dot(vec3(_2568, _2569, _2570), vec3(_2568, _2569, _2570)));
                        float _2578 = dot(vec3(_360, _363, _366), vec3(_2574 * _2568, _2574 * _2569, _2574 * _2570));
                        float _3711 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
                        float _3722 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
                        float _2582 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
                        float _2586 = (0.5 / (((isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) + 9.9999999392252902907785028219223e-09) + _2582)) * _2582;
                        float _3733 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
                        float _2595 = (((isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * 3.1415927410125732421875) / ((_2560 * 2.1991131305694580078125) + 3.141590118408203125)) * _2549;
                        _2397 = (_2564 * _2512.x) + _2470;
                        _2398 = (_2564 * _2512.y) + _2471;
                        _2399 = (_2564 * _2512.z) + _2472;
                        _2394 = (_2595 * _2529.x) + _2467;
                        _2395 = (_2595 * _2529.y) + _2468;
                        _2396 = (_2595 * _2529.z) + _2469;
                        if (_2474 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2467 = _2394;
                            _2468 = _2395;
                            _2469 = _2396;
                            _2470 = _2397;
                            _2471 = _2398;
                            _2472 = _2399;
                            _2473 = _2474;
                        }
                    }
                    frontier_phi_68_pred = _2396;
                    frontier_phi_68_pred_1 = _2399;
                    frontier_phi_68_pred_2 = _2398;
                    frontier_phi_68_pred_3 = _2397;
                    frontier_phi_68_pred_4 = _2395;
                    frontier_phi_68_pred_5 = _2394;
                }
                _2167 = frontier_phi_68_pred;
                _2173 = frontier_phi_68_pred_1;
                _2171 = frontier_phi_68_pred_2;
                _2169 = frontier_phi_68_pred_3;
                _2165 = frontier_phi_68_pred_4;
                _2163 = frontier_phi_68_pred_5;
                uint _2329 = _2328 + 1u;
                if (_2329 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2322 = _2163;
                    _2323 = _2165;
                    _2324 = _2167;
                    _2325 = _2169;
                    _2326 = _2171;
                    _2327 = _2173;
                    _2328 = _2329;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2162 = _2163;
            _2164 = _2165;
            _2166 = _2167;
            _2168 = _2169;
            _2170 = _2171;
            _2172 = _2173;
        }
        uvec4 _2176 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2177 = _2176.z;
        uint _2179 = (_2177 >> 8u) & 15u;
        float _2293;
        float _2295;
        float _2297;
        float _2299;
        float _2301;
        float _2303;
        if (((4294967295u << _2179) & _2027) == 0u)
        {
            _2293 = _2162;
            _2295 = _2164;
            _2297 = _2166;
            _2299 = _2168;
            _2301 = _2170;
            _2303 = _2172;
        }
        else
        {
            float _2318 = inversesqrt(dot(vec3(_1981, _1982, _1983), vec3(_1981, _1982, _1983)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2179 < ((_2177 >> 12u) & 15u))
            {
                float _2294;
                float _2296;
                float _2298;
                float _2300;
                float _2302;
                float _2304;
                float _2450 = _2162;
                float _2451 = _2164;
                float _2452 = _2166;
                float _2453 = _2168;
                float _2454 = _2170;
                float _2455 = _2172;
                uint _2456 = _2179;
                uint _2465;
                bool _2466;
                for (;;)
                {
                    _2465 = texelFetch(g_lightClassification, int((((_2021 << 5u) + (_2007 << 9u)) + (_2456 << 2u)) >> 2u)).x;
                    _2466 = _2465 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2466)
                    {
                        frontier_phi_79_pred = _2455;
                        frontier_phi_79_pred_1 = _2454;
                        frontier_phi_79_pred_2 = _2453;
                        frontier_phi_79_pred_3 = _2452;
                        frontier_phi_79_pred_4 = _2451;
                        frontier_phi_79_pred_5 = _2450;
                    }
                    else
                    {
                        float _2609;
                        float _2610;
                        float _2611;
                        float _2612;
                        float _2613;
                        float _2614;
                        float _2861;
                        float _2862;
                        float _2863;
                        float _2864;
                        float _2865;
                        float _2866;
                        float _2622 = _2450;
                        float _2623 = _2451;
                        float _2624 = _2452;
                        float _2625 = _2453;
                        float _2626 = _2454;
                        float _2627 = _2455;
                        uint _2628 = _2465;
                        uint _2629;
                        vec4 _2654;
                        float _2655;
                        vec4 _2670;
                        vec3 _2682;
                        vec4 _2698;
                        vec4 _2714;
                        float _2761;
                        bool _2762;
                        for (;;)
                        {
                            uint _2639 = ((_2456 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2628));
                            _2629 = (_2628 + 4294967295u) & _2628;
                            uint _2641 = _2639 * 40u;
                            _2654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 3u)).x));
                            _2655 = _2654.w;
                            uint _2657 = (_2639 * 40u) + 4u;
                            _2670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2657 + 3u)).x));
                            uint _2672 = (_2639 * 40u) + 8u;
                            _2682 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 2u)).x));
                            uint _2685 = (_2639 * 40u) + 16u;
                            _2698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2685 + 3u)).x));
                            uint _2701 = (_2639 * 40u) + 20u;
                            _2714 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 3u)).x));
                            uint _2717 = (_2639 * 40u) + 24u;
                            vec4 _2730 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 3u)).x));
                            uint _2736 = (_2639 * 40u) + 28u;
                            vec4 _2749 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2736)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 3u)).x));
                            _2761 = fma(_1983, _2749.z, fma(_1982, _2749.y, _2749.x * _1981)) + _2749.w;
                            _2762 = !((fma(_1983, _2730.z, fma(_1982, _2730.y, _2730.x * _1981)) + _2730.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2762)
                            {
                                float _2789 = _2654.x - _1981;
                                float _2790 = _2654.y - _1982;
                                float _2791 = _2654.z - _1983;
                                float _2792 = dot(vec3(_2789, _2790, _2791), vec3(_2789, _2790, _2791));
                                float _2795 = inversesqrt(_2792);
                                float _2796 = _2795 * _2789;
                                float _2797 = _2795 * _2790;
                                float _2798 = _2795 * _2791;
                                float _2802 = 1.0 - (_2792 / (_2655 * _2655));
                                float _3744 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                                float _2803 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
                                float _2807 = sqrt(_2792) * _2670.w;
                                float _2809 = 1.39999997615814208984375 / (_2807 + 1.39999997615814208984375);
                                float _2810 = _2809 * _2809;
                                float _2811 = 1.0 - _2810;
                                float _2813 = (_2811 * dot(vec3(_2796, _2797, _2798), vec3(_360, _363, _366))) + _2810;
                                float _2816 = _2807 * _2807;
                                float _2820 = (fma(_1983, _2698.z, fma(_1982, _2698.y, _2698.x * _1981)) + _2698.w) / _2761;
                                float _2821 = (fma(_1983, _2714.z, fma(_1982, _2714.y, _2714.x * _1981)) + _2714.w) / _2761;
                                float _2825 = 1.0 - dot(vec2(_2820, _2821), vec2(_2820, _2821));
                                float _3760 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
                                float _2826 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
                                float _2827 = _2826 * (((isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0))) * _2803) / ((_2816 * 0.699999988079071044921875) + 1.0));
                                float _2837 = dot(vec3(_360, _363, _366), vec3((-0.0) - (_1981 * _2318), (-0.0) - (_1982 * _2318), (-0.0) - (_1983 * _2318)));
                                float _3771 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
                                float _2845 = (_2811 * dot(vec3(_360, _363, _366), vec3(_2796, _2797, _2798))) + _2810;
                                float _3782 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
                                float _2846 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
                                float _2850 = (0.5 / (((isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) + 9.9999999392252902907785028219223e-09) + _2846)) * _2846;
                                float _3793 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                                float _2857 = (_2826 * _2803) * (((isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * 3.1415927410125732421875) / ((_2816 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2827 * _2670.z;
                                frontier_phi_85_pred_1 = _2827 * _2670.y;
                                frontier_phi_85_pred_2 = _2827 * _2670.x;
                                frontier_phi_85_pred_3 = _2857 * _2682.z;
                                frontier_phi_85_pred_4 = _2857 * _2682.y;
                                frontier_phi_85_pred_5 = _2857 * _2682.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2866 = frontier_phi_85_pred;
                            _2865 = frontier_phi_85_pred_1;
                            _2864 = frontier_phi_85_pred_2;
                            _2863 = frontier_phi_85_pred_3;
                            _2862 = frontier_phi_85_pred_4;
                            _2861 = frontier_phi_85_pred_5;
                            _2612 = _2864 + _2625;
                            _2613 = _2865 + _2626;
                            _2614 = _2866 + _2627;
                            _2609 = _2861 + _2622;
                            _2610 = _2862 + _2623;
                            _2611 = _2863 + _2624;
                            if (_2629 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2622 = _2609;
                                _2623 = _2610;
                                _2624 = _2611;
                                _2625 = _2612;
                                _2626 = _2613;
                                _2627 = _2614;
                                _2628 = _2629;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2614;
                        frontier_phi_79_pred_1 = _2613;
                        frontier_phi_79_pred_2 = _2612;
                        frontier_phi_79_pred_3 = _2611;
                        frontier_phi_79_pred_4 = _2610;
                        frontier_phi_79_pred_5 = _2609;
                    }
                    _2304 = frontier_phi_79_pred;
                    _2302 = frontier_phi_79_pred_1;
                    _2300 = frontier_phi_79_pred_2;
                    _2298 = frontier_phi_79_pred_3;
                    _2296 = frontier_phi_79_pred_4;
                    _2294 = frontier_phi_79_pred_5;
                    uint _2457 = _2456 + 1u;
                    if (_2457 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2450 = _2294;
                        _2451 = _2296;
                        _2452 = _2298;
                        _2453 = _2300;
                        _2454 = _2302;
                        _2455 = _2304;
                        _2456 = _2457;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2300;
                frontier_phi_60_61_ladder_1 = _2304;
                frontier_phi_60_61_ladder_2 = _2302;
                frontier_phi_60_61_ladder_3 = _2298;
                frontier_phi_60_61_ladder_4 = _2296;
                frontier_phi_60_61_ladder_5 = _2294;
            }
            else
            {
                frontier_phi_60_61_ladder = _2168;
                frontier_phi_60_61_ladder_1 = _2172;
                frontier_phi_60_61_ladder_2 = _2170;
                frontier_phi_60_61_ladder_3 = _2166;
                frontier_phi_60_61_ladder_4 = _2164;
                frontier_phi_60_61_ladder_5 = _2162;
            }
            _2293 = frontier_phi_60_61_ladder_5;
            _2295 = frontier_phi_60_61_ladder_4;
            _2297 = frontier_phi_60_61_ladder_3;
            _2299 = frontier_phi_60_61_ladder;
            _2301 = frontier_phi_60_61_ladder_2;
            _2303 = frontier_phi_60_61_ladder_1;
        }
        float _2308 = isnan(1.0) ? _404 : (isnan(_404) ? 1.0 : min(_404, 1.0));
        _2039 = (_2308 * _2299) + _1600;
        _2041 = (_2308 * _2301) + _1602;
        _2043 = (_2308 * _2303) + _1604;
        _2045 = ((_2293 * 0.039999999105930328369140625) * _2308) + _1852;
        _2047 = ((_2295 * 0.039999999105930328369140625) * _2308) + _1854;
        _2049 = ((_2297 * 0.039999999105930328369140625) * _2308) + _1856;
    }
    else
    {
        _2039 = _1600;
        _2041 = _1602;
        _2043 = _1604;
        _2045 = _1852;
        _2047 = _1854;
        _2049 = _1856;
    }
    uint _2055 = _380 + uint(cbMatDynParam._m0[0u].w);
    float _2063 = ((cbMtdParam._m0[11u].x * _219.x) * cbMtdParam._m0[10u].x) * cbInstanceData._m0[_2055].x;
    float _2066 = ((cbMtdParam._m0[11u].x * _219.y) * cbMtdParam._m0[10u].y) * cbInstanceData._m0[_2055].y;
    float _2069 = ((cbMtdParam._m0[11u].x * _219.z) * cbMtdParam._m0[10u].z) * cbInstanceData._m0[_2055].z;
    float _3809 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _3820 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _3831 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _2086 = (((isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_2039 + ((isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0))) * _404))) + ((_2045 + ((isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))) * _1215)) * cbPerFrame._m0[3u].x)) + _2063;
    float _2088 = (_2066 + ((_2047 + ((isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))) * _1215)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_2041 + ((isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0))) * _404)));
    float _2090 = (_2069 + ((_2049 + ((isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))) * _1215)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_2043 + ((isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0))) * _404)));
    float _2091 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2092 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2093 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2099 = cbMtdParam._m0[2u].x * _2063;
    float _2100 = cbMtdParam._m0[2u].y * _2066;
    float _2101 = cbMtdParam._m0[2u].z * _2069;
    float _3857 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2103 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    uint _2104 = _379 + 6u;
    float _2112 = _339 / cbSceneParam._m0[86u].x;
    float _2113 = _340 / cbSceneParam._m0[86u].y;
    vec4 _2127 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2112, _2113, (log2((isnan(cbSceneParam._m0[77u].w) ? _260 : (isnan(_260) ? cbSceneParam._m0[77u].w : min(_260, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2129 = _2127.x;
    float _2130 = _2127.y;
    float _2131 = _2127.z;
    float _2132 = _2127.w;
    float _2224;
    float _2226;
    float _2228;
    float _2230;
    if (_260 > cbSceneParam._m0[78u].w)
    {
        float _2187 = isnan(_260) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _260 : min(cbSceneParam._m0[80u].w, _260));
        float _2188 = _2187 / _260;
        float _2199 = _2188 * _311;
        float _2200 = _312 * _2188;
        float _2201 = (-0.0) - _2200;
        float _2202 = _2188 * _313;
        float _2204 = (cbSceneParam._m0[77u].w * _2201) / _2187;
        float _2205 = _2204 + cbSceneParam._m0[79u].w;
        float _2206 = cbSceneParam._m0[79u].w - _2200;
        float _2212 = sqrt(((_2199 * _2199) + (_2200 * _2200)) + (_2202 * _2202));
        float _2215 = (1.0 - (cbSceneParam._m0[77u].w / _2187)) * _2212;
        float _2220 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2222 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2407;
        if (abs((_2201 - _2204) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2407 = ((((_2205 > 0.0) ? exp2(_2220 * _2205) : (2.0 - exp2(_2222 * _2205))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2215;
        }
        else
        {
            float _2351 = 1.0 / cbSceneParam._m0[80u].x;
            float _2352 = isnan(_2206) ? _2205 : (isnan(_2205) ? _2206 : max(_2205, _2206));
            float _2353 = isnan(_2206) ? _2205 : (isnan(_2205) ? _2206 : min(_2205, _2206));
            float _2362 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : min(_2352, 0.0));
            float _2363 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : min(_2353, 0.0));
            _2407 = ((abs(_2212 / _2201) * cbSceneParam._m0[80u].y) * ((((_2362 - _2363) * 2.0) - ((exp2(_2220 * (isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0)))) - exp2(_2220 * (isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0))))) * _2351)) - ((exp2(_2222 * _2362) - exp2(_2222 * _2363)) * _2351))) + (_2215 * cbSceneParam._m0[80u].z);
        }
        vec4 _2409 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2112, _2113, 1.0), 0.0);
        float _2418 = exp2((_2407 * (-1.44269502162933349609375)) * (1.0 - _2409.w));
        float _2419 = log2(_2418);
        float _2435 = log2(_2132);
        _2224 = (exp2(_2435 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2419 * cbSceneParam._m0[78u].x)) * _2409.x) / cbSceneParam._m0[78u].x)) + _2129;
        _2226 = (exp2(_2435 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2419 * cbSceneParam._m0[78u].y)) * _2409.y) / cbSceneParam._m0[78u].y)) + _2130;
        _2228 = (exp2(_2435 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2419 * cbSceneParam._m0[78u].z)) * _2409.z) / cbSceneParam._m0[78u].z)) + _2131;
        _2230 = _2418 * _2132;
    }
    else
    {
        _2224 = _2129;
        _2226 = _2130;
        _2228 = _2131;
        _2230 = _2132;
    }
    bool _2445;
    vec4 _2240;
    vec4 _2263;
    float _2265;
    float _2269;
    float _2270;
    float _2271;
    float _2274;
    float _2277;
    float _2280;
    float _2281;
    bool _2292;
    for (;;)
    {
        _2240 = cbMatDynParam._m0[0u];
        float _2242 = roundEven(_2240.y);
        bool _2243 = _2242 == 3.0;
        float _2245 = log2(_2230);
        float _2249 = exp2(_2245 * cbSceneParam._m0[78u].x);
        float _2250 = exp2(_2245 * cbSceneParam._m0[78u].y);
        float _2251 = exp2(_2245 * cbSceneParam._m0[78u].z);
        float _2252 = _2249 * _2091;
        float _2253 = _2250 * _2092;
        float _2254 = _2251 * _2093;
        float _2261 = _327 + (-0.5);
        _2263 = cbMtdParam._m0[1u];
        _2265 = _2263.y * _2261;
        float _2268 = (_2242 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2269 = _2268 * (_2243 ? _2252 : (_2252 + (cbSceneParam._m0[72u].w * _2224)));
        _2270 = _2268 * (_2243 ? _2253 : (_2253 + (cbSceneParam._m0[72u].w * _2226)));
        _2271 = _2268 * (_2243 ? _2254 : (_2254 + (cbSceneParam._m0[72u].w * _2228)));
        _2274 = ((_2099 * _2103) * _2249) * _2268;
        _2277 = ((_2100 * _2103) * _2250) * _2268;
        _2280 = ((_2101 * _2103) * _2251) * _2268;
        _2281 = _2261 * 0.999000012874603271484375;
        _2292 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2292)
        {
            if ((cbInstanceData._m0[_379 + 7u].x + _2281) < 0.5)
            {
                _2445 = true;
                break;
            }
        }
        uint _2386 = _380 + uint(_2240.w);
        if ((cbInstanceData._m0[_2386].w < 1.0) && ((cbInstanceData._m0[_2386].w + _2281) < 0.5))
        {
            _2445 = true;
            break;
        }
        if ((_2265 + 1.0) < _2263.x)
        {
            _2445 = true;
            break;
        }
        _2445 = false;
        break;
    }
    float _2600;
    if (_2445)
    {
        discard_state = true;
        _2600 = 0.0;
    }
    else
    {
        _2600 = cbInstanceData._m0[_2104].w;
    }
    SV_Target.x = _2269;
    SV_Target.y = _2270;
    SV_Target.z = _2271;
    SV_Target.w = _2600;
    SV_Target_1.x = _2274;
    SV_Target_1.y = _2277;
    SV_Target_1.z = _2280;
    SV_Target_1.w = cbInstanceData._m0[_2104].w;
    discard_exit();
}


