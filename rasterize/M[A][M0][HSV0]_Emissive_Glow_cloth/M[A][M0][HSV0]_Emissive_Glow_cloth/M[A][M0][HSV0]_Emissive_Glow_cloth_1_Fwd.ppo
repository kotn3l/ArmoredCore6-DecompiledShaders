#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _775;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _163 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _164 = _163 * NORMAL.x;
    float _165 = _163 * NORMAL.y;
    float _166 = _163 * NORMAL.z;
    float _171;
    float _172;
    float _173;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _171 = (-0.0) - _164;
        _172 = (-0.0) - _165;
        _173 = (-0.0) - _166;
    }
    else
    {
        _171 = _164;
        _172 = _165;
        _173 = _166;
    }
    vec4 _193 = texture(sampler2D(M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _199 = _193.x * cbMtdParam._m0[9u].x;
    float _200 = _193.y * cbMtdParam._m0[9u].y;
    float _201 = _193.z * cbMtdParam._m0[9u].z;
    vec4 _222 = texture(sampler2D(M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _224 = _222.x;
    float _225 = _222.y;
    float _226 = _222.z;
    float _227 = cbMtdParam._m0[11u].w * cbMtdParam._m0[12u].x;
    float _228 = _227 * _224;
    float _229 = _227 * _225;
    float _230 = _227 * _226;
    float _231 = isnan(_229) ? _228 : (isnan(_228) ? _229 : max(_228, _229));
    float _232 = isnan(_230) ? _231 : (isnan(_231) ? _230 : max(_231, _230));
    float _235;
    float _237;
    if (_232 < 1.1920928955078125e-07)
    {
        _235 = 0.0;
        _237 = 0.0;
    }
    else
    {
        float _263 = isnan(_229) ? _228 : (isnan(_228) ? _229 : min(_228, _229));
        float _265 = _232 - (isnan(_230) ? _263 : (isnan(_263) ? _230 : min(_263, _230)));
        float _238 = _265 / _232;
        float frontier_phi_3_4_ladder;
        float frontier_phi_3_4_ladder_1;
        if (_265 < 1.1920928955078125e-07)
        {
            frontier_phi_3_4_ladder = _238;
            frontier_phi_3_4_ladder_1 = 0.0;
        }
        else
        {
            float _1176;
            if (_232 == _228)
            {
                _1176 = ((_227 * (_225 - _226)) / _265) * 0.16666667163372039794921875;
            }
            else
            {
                float frontier_phi_16_12_ladder;
                if (_232 == _229)
                {
                    frontier_phi_16_12_ladder = (((_227 * (_226 - _224)) / _265) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
                }
                else
                {
                    frontier_phi_16_12_ladder = (((_227 * (_224 - _225)) / _265) * 0.16666667163372039794921875) + 0.666666686534881591796875;
                }
                _1176 = frontier_phi_16_12_ladder;
            }
            float _1181 = (_1176 < 0.0) ? (_1176 + 1.0) : _1176;
            frontier_phi_3_4_ladder = _238;
            frontier_phi_3_4_ladder_1 = _1181 - floor(_1181);
        }
        _235 = frontier_phi_3_4_ladder_1;
        _237 = frontier_phi_3_4_ladder;
    }
    float _239 = _237 + cbMtdParam._m0[11u].y;
    float _243 = fract(cbMtdParam._m0[11u].z + _235) * 6.0;
    uint _246 = uint(int(floor(_243)));
    float _248 = _243 - float(int(_246));
    float _251 = (1.0 - _239) * _232;
    float _254 = (1.0 - (_248 * _239)) * _232;
    float _258 = (1.0 - ((1.0 - _248) * _239)) * _232;
    float _267;
    float _269;
    float _270;
    if ((_246 == 0u) || (_246 == 6u))
    {
        _267 = _232;
        _269 = _258;
        _270 = _251;
    }
    else
    {
        float frontier_phi_5_6_ladder;
        float frontier_phi_5_6_ladder_1;
        float frontier_phi_5_6_ladder_2;
        if (_246 == 1u)
        {
            frontier_phi_5_6_ladder = _251;
            frontier_phi_5_6_ladder_1 = _232;
            frontier_phi_5_6_ladder_2 = _254;
        }
        else
        {
            float frontier_phi_5_6_ladder_10_ladder;
            float frontier_phi_5_6_ladder_10_ladder_1;
            float frontier_phi_5_6_ladder_10_ladder_2;
            if (_246 == 2u)
            {
                frontier_phi_5_6_ladder_10_ladder = _258;
                frontier_phi_5_6_ladder_10_ladder_1 = _232;
                frontier_phi_5_6_ladder_10_ladder_2 = _251;
            }
            else
            {
                float frontier_phi_5_6_ladder_10_ladder_15_ladder;
                float frontier_phi_5_6_ladder_10_ladder_15_ladder_1;
                float frontier_phi_5_6_ladder_10_ladder_15_ladder_2;
                if (_246 == 3u)
                {
                    frontier_phi_5_6_ladder_10_ladder_15_ladder = _232;
                    frontier_phi_5_6_ladder_10_ladder_15_ladder_1 = _254;
                    frontier_phi_5_6_ladder_10_ladder_15_ladder_2 = _251;
                }
                else
                {
                    bool _1222 = _246 == 4u;
                    frontier_phi_5_6_ladder_10_ladder_15_ladder = _1222 ? _232 : _254;
                    frontier_phi_5_6_ladder_10_ladder_15_ladder_1 = _251;
                    frontier_phi_5_6_ladder_10_ladder_15_ladder_2 = _1222 ? _258 : _232;
                }
                frontier_phi_5_6_ladder_10_ladder = frontier_phi_5_6_ladder_10_ladder_15_ladder;
                frontier_phi_5_6_ladder_10_ladder_1 = frontier_phi_5_6_ladder_10_ladder_15_ladder_1;
                frontier_phi_5_6_ladder_10_ladder_2 = frontier_phi_5_6_ladder_10_ladder_15_ladder_2;
            }
            frontier_phi_5_6_ladder = frontier_phi_5_6_ladder_10_ladder;
            frontier_phi_5_6_ladder_1 = frontier_phi_5_6_ladder_10_ladder_1;
            frontier_phi_5_6_ladder_2 = frontier_phi_5_6_ladder_10_ladder_2;
        }
        _267 = frontier_phi_5_6_ladder_2;
        _269 = frontier_phi_5_6_ladder_1;
        _270 = frontier_phi_5_6_ladder;
    }
    float _275 = inversesqrt(dot(vec3(_171, _172, _173), vec3(_171, _172, _173)));
    float _276 = _275 * _171;
    float _277 = _275 * _172;
    float _278 = _275 * _173;
    float _2998 = isnan(0.0) ? _199 : (isnan(_199) ? 0.0 : max(_199, 0.0));
    float _3009 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _3020 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _297 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _339 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _349 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _339);
    float _350 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _339);
    float _351 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _339);
    float _355 = inversesqrt(dot(vec3(_349, _350, _351), vec3(_349, _350, _351)));
    float _356 = _349 * _355;
    float _357 = _350 * _355;
    float _358 = _351 * _355;
    float _364 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _365 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _385 = fma(_278, cbSceneParam._m0[5u].z, fma(_277, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _276));
    float _388 = fma(_278, cbSceneParam._m0[6u].z, fma(_277, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _276));
    float _391 = fma(_278, cbSceneParam._m0[7u].z, fma(_277, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _276));
    uint _404 = uint(roundEven(NORMAL.w)) * 13u;
    uint _405 = _404 + 9u;
    uint _406 = _405 + uint(cbMatDynParam._m0[0u].w);
    float _412 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2998 : (isnan(_2998) ? 1.0 : min(_2998, 1.0)))) * cbInstanceData._m0[_406].x;
    float _413 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3009 : (isnan(_3009) ? 1.0 : min(_3009, 1.0)))) * cbInstanceData._m0[_406].y;
    float _414 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3020 : (isnan(_3020) ? 1.0 : min(_3020, 1.0)))) * cbInstanceData._m0[_406].z;
    float _3031 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _415 = isnan(1.0) ? _3031 : (isnan(_3031) ? 1.0 : min(_3031, 1.0));
    float _3042 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _416 = isnan(1.0) ? _3042 : (isnan(_3042) ? 1.0 : min(_3042, 1.0));
    float _3053 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _417 = isnan(1.0) ? _3053 : (isnan(_3053) ? 1.0 : min(_3053, 1.0));
    vec4 _426 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _364, cbSceneParam._m0[86u].y * _365));
    float _429 = _426.x * TEXCOORD.z;
    float _430 = dot(vec3(_276, _277, _278), vec3(_356, _357, _358));
    float _433 = _430 * 2.0;
    float _438 = (_433 * _276) - _356;
    float _439 = (_433 * _277) - _357;
    float _440 = (_433 * _278) - _358;
    float _462 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _466 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _470 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _774;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    float _788;
    float _789;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _499 = fma(_470, cbModelParam._m0[26u].z, fma(_466, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _462));
        float _503 = fma(_470, cbModelParam._m0[27u].z, fma(_466, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _462));
        float _507 = fma(_470, cbModelParam._m0[28u].z, fma(_466, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _462));
        float _532 = _462 + _276;
        float _533 = _466 + _277;
        float _534 = _470 + _278;
        float _544 = fma(_534, cbModelParam._m0[26u].z, fma(_533, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _532)) - _499;
        float _545 = fma(_534, cbModelParam._m0[27u].z, fma(_533, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _532)) - _503;
        float _546 = fma(_534, cbModelParam._m0[28u].z, fma(_533, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _532)) - _507;
        float _550 = inversesqrt(dot(vec3(_544, _545, _546), vec3(_544, _545, _546)));
        float _563 = ((_550 * _544) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_499 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _564 = ((_550 * _545) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_503 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _565 = ((_550 * _546) / cbModelParam._m0[34u].z) + ((((((_507 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _568 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_563, _564, _565), 0.0);
        vec4 _575 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_563, _564, _565), 0.0);
        vec4 _582 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_563, _564, _565), 0.0);
        vec4 _589 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_563, _564, _565), 0.0);
        float _602 = exp2((_568.w + (-0.5)) * 20.0) * 2.0;
        float _603 = _602 * (_568.x + (-0.5));
        float _604 = _602 * (_568.y + (-0.5));
        float _605 = _602 * (_568.z + (-0.5));
        float _612 = exp2((_575.w + (-0.5)) * 20.0) * 2.0;
        float _613 = _612 * (_575.x + (-0.5));
        float _614 = _612 * (_575.y + (-0.5));
        float _615 = _612 * (_575.z + (-0.5));
        float _622 = exp2((_582.w + (-0.5)) * 20.0) * 2.0;
        float _623 = _622 * (_582.x + (-0.5));
        float _624 = _622 * (_582.y + (-0.5));
        float _625 = _622 * (_582.z + (-0.5));
        float _632 = exp2((_589.w + (-0.5)) * 20.0) * 2.0;
        float _633 = _632 * (_589.x + (-0.5));
        float _634 = _632 * (_589.y + (-0.5));
        float _635 = _632 * (_589.z + (-0.5));
        float _636 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
        float _637 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
        float _638 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
        float _639 = _603 * 0.5;
        float _640 = _613 * 0.5;
        float _641 = _623 * 0.5;
        float _642 = dot(vec3(_639, _640, _641), vec3(_639, _640, _641));
        float _647 = (_642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_642);
        float _656 = (dot(vec3(_276, _277, _278), vec3(_647 * _639, _647 * _640, _647 * _641)) + 1.0) * 0.5;
        float _3079 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _666 = sqrt(((_640 * _640) + (_639 * _639)) + (_641 * _641)) / (_636 + 9.9999997473787516355514526367188e-06);
        float _3090 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _667 = isnan(1.0) ? _3090 : (isnan(_3090) ? 1.0 : min(_3090, 1.0));
        float _668 = _667 * 2.0;
        float _672 = (1.0 - _667) / (_667 + 1.0);
        float _3101 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _673 = isnan(1.0) ? _3101 : (isnan(_3101) ? 1.0 : min(_3101, 1.0));
        float _682 = ((((1.0 - _673) * (_668 + 2.0)) * exp2(log2(isnan(1.0) ? _3079 : (isnan(_3079) ? 1.0 : min(_3079, 1.0))) * (_668 + 1.0))) + _673) * _636;
        float _683 = _604 * 0.5;
        float _684 = _614 * 0.5;
        float _685 = _624 * 0.5;
        float _686 = dot(vec3(_683, _684, _685), vec3(_683, _684, _685));
        float _691 = (_686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_686);
        float _699 = (dot(vec3(_276, _277, _278), vec3(_691 * _683, _691 * _684, _691 * _685)) + 1.0) * 0.5;
        float _3112 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _708 = sqrt(((_684 * _684) + (_683 * _683)) + (_685 * _685)) / (_637 + 9.9999997473787516355514526367188e-06);
        float _3123 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _709 = isnan(1.0) ? _3123 : (isnan(_3123) ? 1.0 : min(_3123, 1.0));
        float _710 = _709 * 2.0;
        float _714 = (1.0 - _709) / (_709 + 1.0);
        float _3134 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _715 = isnan(1.0) ? _3134 : (isnan(_3134) ? 1.0 : min(_3134, 1.0));
        float _724 = ((((1.0 - _715) * (_710 + 2.0)) * exp2(log2(isnan(1.0) ? _3112 : (isnan(_3112) ? 1.0 : min(_3112, 1.0))) * (_710 + 1.0))) + _715) * _637;
        float _725 = _605 * 0.5;
        float _726 = _615 * 0.5;
        float _727 = _625 * 0.5;
        float _728 = dot(vec3(_725, _726, _727), vec3(_725, _726, _727));
        float _733 = (_728 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_728);
        float _741 = (dot(vec3(_276, _277, _278), vec3(_733 * _725, _733 * _726, _733 * _727)) + 1.0) * 0.5;
        float _3145 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _750 = sqrt(((_726 * _726) + (_725 * _725)) + (_727 * _727)) / (_638 + 9.9999997473787516355514526367188e-06);
        float _3156 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3156 : (isnan(_3156) ? 1.0 : min(_3156, 1.0));
        float _752 = _751 * 2.0;
        float _756 = (1.0 - _751) / (_751 + 1.0);
        float _3167 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3167 : (isnan(_3167) ? 1.0 : min(_3167, 1.0));
        float _766 = ((((1.0 - _757) * (_752 + 2.0)) * exp2(log2(isnan(1.0) ? _3145 : (isnan(_3145) ? 1.0 : min(_3145, 1.0))) * (_752 + 1.0))) + _757) * _638;
        _774 = _605;
        _776 = _604;
        _777 = _603;
        _778 = _615;
        _779 = _614;
        _780 = _613;
        _781 = _625;
        _782 = _624;
        _783 = _623;
        _784 = _638;
        _785 = _637;
        _786 = _636;
        _787 = cbModelParam._m0[36u].z * (isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0)));
        _788 = cbModelParam._m0[36u].z * (isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0)));
        _789 = cbModelParam._m0[36u].z * (isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0)));
    }
    else
    {
        _774 = _775;
        _776 = _775;
        _777 = _775;
        _778 = _775;
        _779 = _775;
        _780 = _775;
        _781 = _775;
        _782 = _775;
        _783 = _775;
        _784 = _775;
        _785 = _775;
        _786 = _775;
        _787 = 0.0;
        _788 = 0.0;
        _789 = 0.0;
    }
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _822 = fma(_470, cbModelParam._m0[30u].z, fma(_466, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _462));
        float _826 = fma(_470, cbModelParam._m0[31u].z, fma(_466, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _462));
        float _830 = fma(_470, cbModelParam._m0[32u].z, fma(_466, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _462));
        float _853 = _462 + _276;
        float _854 = _466 + _277;
        float _855 = _470 + _278;
        float _865 = fma(_855, cbModelParam._m0[30u].z, fma(_854, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _853)) - _822;
        float _866 = fma(_855, cbModelParam._m0[31u].z, fma(_854, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _853)) - _826;
        float _867 = fma(_855, cbModelParam._m0[32u].z, fma(_854, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _853)) - _830;
        float _871 = inversesqrt(dot(vec3(_865, _866, _867), vec3(_865, _866, _867)));
        float _884 = ((_871 * _865) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_822 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _885 = ((_871 * _866) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_826 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _886 = ((_871 * _867) / cbModelParam._m0[35u].z) + ((((((_830 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        float _921 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_888.x + (-0.5));
        float _923 = _921 * (_888.y + (-0.5));
        float _924 = _921 * (_888.z + (-0.5));
        float _931 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_895.x + (-0.5));
        float _933 = _931 * (_895.y + (-0.5));
        float _934 = _931 * (_895.z + (-0.5));
        float _941 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_902.x + (-0.5));
        float _943 = _941 * (_902.y + (-0.5));
        float _944 = _941 * (_902.z + (-0.5));
        float _951 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_909.x + (-0.5));
        float _953 = _951 * (_909.y + (-0.5));
        float _954 = _951 * (_909.z + (-0.5));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = _922 * 0.5;
        float _959 = _932 * 0.5;
        float _960 = _942 * 0.5;
        float _961 = dot(vec3(_958, _959, _960), vec3(_958, _959, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _974 = (dot(vec3(_276, _277, _278), vec3(_966 * _958, _966 * _959, _966 * _960)) + 1.0) * 0.5;
        float _3208 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _983 = sqrt(((_959 * _959) + (_958 * _958)) + (_960 * _960)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3219 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0));
        float _985 = _984 * 2.0;
        float _989 = (1.0 - _984) / (_984 + 1.0);
        float _3230 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0));
        float _999 = ((((1.0 - _990) * (_985 + 2.0)) * exp2(log2(isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0))) * (_985 + 1.0))) + _990) * _955;
        float _1000 = _923 * 0.5;
        float _1001 = _933 * 0.5;
        float _1002 = _943 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1016 = (dot(vec3(_276, _277, _278), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3241 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1025 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3252 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3263 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0))) * (_1027 + 1.0))) + _1032) * _956;
        float _1042 = _924 * 0.5;
        float _1043 = _934 * 0.5;
        float _1044 = _944 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1058 = (dot(vec3(_276, _277, _278), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _3274 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1067 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3285 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _3296 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0))) * (_1069 + 1.0))) + _1074) * _957;
        _1091 = _924;
        _1092 = _923;
        _1093 = _922;
        _1094 = _934;
        _1095 = _933;
        _1096 = _932;
        _1097 = _944;
        _1098 = _943;
        _1099 = _942;
        _1100 = _957;
        _1101 = _956;
        _1102 = _955;
        _1103 = cbModelParam._m0[36u].w * (isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0)));
        _1104 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
        _1105 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
    }
    else
    {
        _1091 = _775;
        _1092 = _775;
        _1093 = _775;
        _1094 = _775;
        _1095 = _775;
        _1096 = _775;
        _1097 = _775;
        _1098 = _775;
        _1099 = _775;
        _1100 = _775;
        _1101 = _775;
        _1102 = _775;
        _1103 = 0.0;
        _1104 = 0.0;
        _1105 = 0.0;
    }
    float _1115 = (cbModelParam._m0[1u].x * (_1103 - _787)) + _787;
    float _1116 = (cbModelParam._m0[1u].x * (_1104 - _788)) + _788;
    float _1117 = (cbModelParam._m0[1u].x * (_1105 - _789)) + _789;
    float _1138 = fma(_1117, cbSceneParam._m0[89u].z, fma(_1116, cbSceneParam._m0[89u].y, _1115 * cbSceneParam._m0[89u].x));
    float _1141 = fma(_1117, cbSceneParam._m0[90u].z, fma(_1116, cbSceneParam._m0[90u].y, _1115 * cbSceneParam._m0[90u].x));
    float _1144 = fma(_1117, cbSceneParam._m0[91u].z, fma(_1116, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1115));
    float _1159 = _438 * 0.5;
    float _1160 = _439 * 0.5;
    float _1161 = _440 * 0.5;
    float _1162 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_1093, _1096, _1099, _1102));
    float _1165 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_1092, _1095, _1098, _1101));
    float _1168 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_1091, _1094, _1097, _1100));
    float _1220;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1193 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_774, _778, _781, _784));
        float _1197 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_776, _779, _782, _785));
        float _1201 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_777, _780, _783, _786));
        float _1208 = dot(vec4(cbModelParam._m0[39u]), vec4(_1159, _1160, _1161, 1.0));
        _1220 = dot(vec3(isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)), isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)), isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1208) ? 0.0 : (isnan(0.0) ? _1208 : max(0.0, _1208))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1220 = 1.0;
    }
    float _1233;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1224 = dot(vec4(cbModelParam._m0[40u]), vec4(_1159, _1160, _1161, 1.0));
        _1233 = dot(vec3(isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)), isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)), isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1224) ? 0.0 : (isnan(0.0) ? _1224 : max(0.0, _1224))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1233 = 1.0;
    }
    float _1237 = (_1233 * cbModelParam._m0[1u].x) + (_1220 * (1.0 - cbModelParam._m0[1u].x));
    float _1246 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1328;
    float _1330;
    float _1332;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1295 = fma(_470, cbModelParam._m0[13u].z, fma(_466, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _462)) + cbModelParam._m0[13u].w;
        float _1299 = fma(_470, cbModelParam._m0[14u].z, fma(_466, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _462)) + cbModelParam._m0[14u].w;
        float _1303 = fma(_470, cbModelParam._m0[15u].z, fma(_466, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _462)) + cbModelParam._m0[15u].w;
        float _1306 = fma(_440, cbModelParam._m0[13u].z, fma(_439, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _438));
        float _1309 = fma(_440, cbModelParam._m0[14u].z, fma(_439, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _438));
        float _1312 = fma(_440, cbModelParam._m0[15u].z, fma(_439, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _438));
        float _1338;
        if (_1306 > 0.0)
        {
            _1338 = abs((1.0 - _1295) / _1306);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1306 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1295 + 1.0) / _1306);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1338 = frontier_phi_29_27_ladder;
        }
        float _1544;
        if (_1309 > 0.0)
        {
            _1544 = abs((1.0 - _1299) / _1309);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1309 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1299 + 1.0) / _1309);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1544 = frontier_phi_38_34_ladder;
        }
        float _1733;
        if (_1312 > 0.0)
        {
            _1733 = abs((1.0 - _1303) / _1312);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1312 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1303 + 1.0) / _1312);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _1733 = frontier_phi_50_45_ladder;
        }
        float _1735 = isnan(_1544) ? _1338 : (isnan(_1338) ? _1544 : min(_1338, _1544));
        float _1736 = isnan(_1733) ? _1735 : (isnan(_1735) ? _1733 : min(_1735, _1733));
        float _1740 = (_1736 * _1306) + _1295;
        float _1741 = (_1736 * _1309) + _1299;
        float _1742 = (_1736 * _1312) + _1303;
        float _1743 = _1736 * 9.9999997473787516355514526367188e-05;
        float _1745 = (-1.0) - _1743;
        float _1747 = _1743 + 1.0;
        float frontier_phi_28_50_ladder;
        float frontier_phi_28_50_ladder_1;
        float frontier_phi_28_50_ladder_2;
        if ((_1742 > _1747) || ((_1742 < _1745) || ((_1741 > _1747) || ((_1741 < _1745) || ((_1740 < _1745) || (_1740 > _1747))))))
        {
            frontier_phi_28_50_ladder = 0.0;
            frontier_phi_28_50_ladder_1 = 0.0;
            frontier_phi_28_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1839 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1742, cbModelParam._m0[9u].z, fma(_1741, cbModelParam._m0[9u].y, _1740 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1742, cbModelParam._m0[10u].z, fma(_1741, cbModelParam._m0[10u].y, _1740 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1742, cbModelParam._m0[11u].z, fma(_1741, cbModelParam._m0[11u].y, _1740 * cbModelParam._m0[11u].x))), _1246);
            frontier_phi_28_50_ladder = _1839.z * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_1 = _1839.y * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_2 = _1839.x * cbModelParam._m0[1u].y;
        }
        _1328 = frontier_phi_28_50_ladder_2;
        _1330 = frontier_phi_28_50_ladder_1;
        _1332 = frontier_phi_28_50_ladder;
    }
    else
    {
        vec4 _1316 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_438, _439, _440), _1246);
        _1328 = _1316.x * cbModelParam._m0[1u].y;
        _1330 = _1316.y * cbModelParam._m0[1u].y;
        _1332 = _1316.z * cbModelParam._m0[1u].y;
    }
    float _1335 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1428;
    float _1430;
    float _1432;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1392 = fma(_470, cbModelParam._m0[21u].z, fma(_466, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _462)) + cbModelParam._m0[21u].w;
        float _1396 = fma(_470, cbModelParam._m0[22u].z, fma(_466, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _462)) + cbModelParam._m0[22u].w;
        float _1400 = fma(_470, cbModelParam._m0[23u].z, fma(_466, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _462)) + cbModelParam._m0[23u].w;
        float _1403 = fma(_440, cbModelParam._m0[21u].z, fma(_439, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _438));
        float _1406 = fma(_440, cbModelParam._m0[22u].z, fma(_439, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _438));
        float _1409 = fma(_440, cbModelParam._m0[23u].z, fma(_439, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _438));
        float _1549;
        if (_1403 > 0.0)
        {
            _1549 = abs((1.0 - _1392) / _1403);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1392 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1549 = frontier_phi_40_36_ladder;
        }
        float _1760;
        if (_1406 > 0.0)
        {
            _1760 = abs((1.0 - _1396) / _1406);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1396 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _1760 = frontier_phi_52_47_ladder;
        }
        float _1911;
        if (_1409 > 0.0)
        {
            _1911 = abs((1.0 - _1400) / _1409);
        }
        else
        {
            float frontier_phi_61_58_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_61_58_ladder = abs((_1400 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_61_58_ladder = 5000.0;
            }
            _1911 = frontier_phi_61_58_ladder;
        }
        float _1913 = isnan(_1760) ? _1549 : (isnan(_1549) ? _1760 : min(_1549, _1760));
        float _1914 = isnan(_1911) ? _1913 : (isnan(_1913) ? _1911 : min(_1913, _1911));
        float _1918 = (_1914 * _1403) + _1392;
        float _1919 = (_1914 * _1406) + _1396;
        float _1920 = (_1914 * _1409) + _1400;
        float _1921 = _1914 * 9.9999997473787516355514526367188e-05;
        float _1922 = (-1.0) - _1921;
        float _1924 = _1921 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_1920 > _1924) || ((_1920 < _1922) || ((_1919 > _1924) || ((_1919 < _1922) || ((_1918 < _1922) || (_1918 > _1924))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2147 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1920, cbModelParam._m0[17u].z, fma(_1919, cbModelParam._m0[17u].y, _1918 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1920, cbModelParam._m0[18u].z, fma(_1919, cbModelParam._m0[18u].y, _1918 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1920, cbModelParam._m0[19u].z, fma(_1919, cbModelParam._m0[19u].y, _1918 * cbModelParam._m0[19u].x))), _1335);
            frontier_phi_37_61_ladder = _2147.y * cbModelParam._m0[1u].z;
            frontier_phi_37_61_ladder_1 = _2147.z * cbModelParam._m0[1u].z;
            frontier_phi_37_61_ladder_2 = _2147.x * cbModelParam._m0[1u].z;
        }
        _1428 = frontier_phi_37_61_ladder_2;
        _1430 = frontier_phi_37_61_ladder;
        _1432 = frontier_phi_37_61_ladder_1;
    }
    else
    {
        vec4 _1412 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_438, _439, _440), _1335);
        _1428 = _1412.x * cbModelParam._m0[1u].z;
        _1430 = _1412.y * cbModelParam._m0[1u].z;
        _1432 = _1412.z * cbModelParam._m0[1u].z;
    }
    float _1444 = _429 * 0.01200000010430812835693359375;
    float _1446 = _1444 * ((cbModelParam._m0[1u].w * (_1428 - _1328)) + _1328);
    float _1447 = _1444 * ((cbModelParam._m0[1u].w * (_1430 - _1330)) + _1330);
    float _1448 = _1444 * ((cbModelParam._m0[1u].w * (_1432 - _1332)) + _1332);
    float _1451 = fma(_1448, cbSceneParam._m0[89u].z, fma(_1447, cbSceneParam._m0[89u].y, _1446 * cbSceneParam._m0[89u].x));
    float _1454 = fma(_1448, cbSceneParam._m0[90u].z, fma(_1447, cbSceneParam._m0[90u].y, _1446 * cbSceneParam._m0[90u].x));
    float _1457 = fma(_1448, cbSceneParam._m0[91u].z, fma(_1447, cbSceneParam._m0[91u].y, _1446 * cbSceneParam._m0[91u].x));
    uvec4 _1467 = floatBitsToUint(cbInstanceData._m0[_404 + 5u]);
    uint _1469 = _1467.x * 14u;
    uint _1470 = _1469 + 13u;
    float _1477 = _429 + (-1.0);
    float _1483 = (cbLight._m0[_1470].x * _1477) + 1.0;
    float _1484 = (cbLight._m0[_1470].y * _1477) + 1.0;
    float _1485 = (cbLight._m0[_1470].z * _1477) + 1.0;
    float _1486 = (cbLight._m0[_1470].w * _1477) + 1.0;
    uint _1487 = _1469 + 5u;
    float _1493 = isnan(1.0) ? _1484 : (isnan(_1484) ? 1.0 : min(_1484, 1.0));
    uint _1497 = _1469 + 4u;
    float _1503 = isnan(1.0) ? _1483 : (isnan(_1483) ? 1.0 : min(_1483, 1.0));
    uint _1507 = _1469 | 1u;
    float _1518 = dot(vec3(cbLight._m0[_1469].xyz), vec3(_276, _277, _278));
    float _1521 = dot(vec3(cbLight._m0[_1507].xyz), vec3(_276, _277, _278));
    float _3432 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
    float _3443 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
    float _1526 = (isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0))) * 0.3183098733425140380859375;
    float _1528 = (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) * 0.3183098733425140380859375;
    float _1535 = ((cbLight._m0[_1487].x * _1493) * _1528) + ((cbLight._m0[_1497].x * _1503) * _1526);
    float _1536 = ((_1493 * cbLight._m0[_1487].y) * _1528) + ((_1503 * cbLight._m0[_1497].y) * _1526);
    float _1537 = ((_1493 * cbLight._m0[_1487].z) * _1528) + ((_1503 * cbLight._m0[_1497].z) * _1526);
    uvec4 _1541 = floatBitsToUint(cbLight._m0[_1469 + 12u]);
    bool _1543 = _1541.x == 0u;
    float _1554;
    float _1556;
    float _1558;
    if (_1543)
    {
        _1554 = _1535;
        _1556 = _1536;
        _1558 = _1537;
    }
    else
    {
        uint _1562 = _1469 + 6u;
        float _1578 = (dot(vec3(cbLight._m0[_1469 + 2u].xyz), vec3(_276, _277, _278)) * 0.5) + 0.5;
        float _1579 = _1578 * _1578;
        float _3454 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _1581 = isnan(1.0) ? _1485 : (isnan(_1485) ? 1.0 : min(_1485, 1.0));
        _1554 = (((cbLight._m0[_1562].x * 0.3183098733425140380859375) * _1580) * _1581) + _1535;
        _1556 = (((cbLight._m0[_1562].y * 0.3183098733425140380859375) * _1580) * _1581) + _1536;
        _1558 = (((cbLight._m0[_1562].z * 0.3183098733425140380859375) * _1580) * _1581) + _1537;
    }
    bool _1561 = _1541.y == 0u;
    float _1599;
    float _1601;
    float _1603;
    if (_1561)
    {
        _1599 = _1554;
        _1601 = _1556;
        _1603 = _1558;
    }
    else
    {
        uint _1704 = _1469 + 7u;
        float _1720 = (dot(vec3(cbLight._m0[_1469 + 3u].xyz), vec3(_276, _277, _278)) * 0.5) + 0.5;
        float _1721 = _1720 * _1720;
        float _3470 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1722 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _1723 = isnan(1.0) ? _1486 : (isnan(_1486) ? 1.0 : min(_1486, 1.0));
        _1599 = (((cbLight._m0[_1704].x * 0.3183098733425140380859375) * _1722) * _1723) + _1554;
        _1601 = (((cbLight._m0[_1704].y * 0.3183098733425140380859375) * _1722) * _1723) + _1556;
        _1603 = (((cbLight._m0[_1704].z * 0.3183098733425140380859375) * _1722) * _1723) + _1558;
    }
    uint _1605 = _1469 + 8u;
    float _1611 = cbLight._m0[_1469].x + _356;
    float _1612 = cbLight._m0[_1469].y + _357;
    float _1613 = cbLight._m0[_1469].z + _358;
    float _1617 = inversesqrt(dot(vec3(_1611, _1612, _1613), vec3(_1611, _1612, _1613)));
    float _1621 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_1469].xyz));
    float _3486 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
    float _1624 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _3497 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _1625 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    float _1626 = dot(vec3(cbLight._m0[_1469].xyz), vec3(_1611 * _1617, _1612 * _1617, _1613 * _1617));
    float _3508 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
    float _1637 = (exp2(log2(1.0 - (isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1643 = (0.5 / ((_1624 + 9.9999999392252902907785028219223e-09) + _1625)) * _1624;
    float _3519 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
    float _1645 = (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))) * 0.31831014156341552734375;
    uint _1656 = _1469 + 9u;
    float _1662 = cbLight._m0[_1507].x + _356;
    float _1663 = cbLight._m0[_1507].y + _357;
    float _1664 = cbLight._m0[_1507].z + _358;
    float _1668 = inversesqrt(dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664)));
    float _1672 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_1507].xyz));
    float _3530 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
    float _1675 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _1676 = dot(vec3(cbLight._m0[_1507].xyz), vec3(_1662 * _1668, _1663 * _1668, _1664 * _1668));
    float _3541 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
    float _1685 = (exp2(log2(1.0 - (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1689 = (0.5 / ((_1675 + 9.9999999392252902907785028219223e-09) + _1625)) * _1675;
    float _3552 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
    float _1691 = (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))) * 0.31831014156341552734375;
    float _1701 = (((_1685 * cbLight._m0[_1656].x) * _1691) * _1493) + (((_1637 * cbLight._m0[_1605].x) * _1645) * _1503);
    float _1702 = (((_1685 * cbLight._m0[_1656].y) * _1691) * _1493) + (((_1637 * cbLight._m0[_1605].y) * _1645) * _1503);
    float _1703 = (((_1685 * cbLight._m0[_1656].z) * _1691) * _1493) + (((_1637 * cbLight._m0[_1605].z) * _1645) * _1503);
    float _1765;
    float _1767;
    float _1769;
    if (_1543)
    {
        _1765 = _1701;
        _1767 = _1702;
        _1769 = _1703;
    }
    else
    {
        uint _1771 = _1469 + 10u;
        uint _1777 = _1469 + 2u;
        float _1783 = cbLight._m0[_1777].x + _356;
        float _1784 = cbLight._m0[_1777].y + _357;
        float _1785 = cbLight._m0[_1777].z + _358;
        float _1789 = inversesqrt(dot(vec3(_1783, _1784, _1785), vec3(_1783, _1784, _1785)));
        float _1793 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_1777].xyz));
        float _3563 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1796 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _1797 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_1783 * _1789, _1784 * _1789, _1785 * _1789));
        float _3574 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1806 = (exp2(log2(1.0 - (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1810 = (0.5 / ((_1796 + 9.9999999392252902907785028219223e-09) + _1625)) * _1796;
        float _3585 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1812 = (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * 0.31831014156341552734375;
        float _1813 = isnan(1.0) ? _1485 : (isnan(_1485) ? 1.0 : min(_1485, 1.0));
        _1765 = (((_1806 * cbLight._m0[_1771].x) * _1812) * _1813) + _1701;
        _1767 = (((_1806 * cbLight._m0[_1771].y) * _1812) * _1813) + _1702;
        _1769 = (((_1806 * cbLight._m0[_1771].z) * _1812) * _1813) + _1703;
    }
    float _1848;
    float _1850;
    float _1852;
    if (_1561)
    {
        _1848 = _1765;
        _1850 = _1767;
        _1852 = _1769;
    }
    else
    {
        uint _1859 = _1469 + 11u;
        uint _1865 = _1469 + 3u;
        float _1871 = cbLight._m0[_1865].x + _356;
        float _1872 = cbLight._m0[_1865].y + _357;
        float _1873 = cbLight._m0[_1865].z + _358;
        float _1877 = inversesqrt(dot(vec3(_1871, _1872, _1873), vec3(_1871, _1872, _1873)));
        float _1881 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_1865].xyz));
        float _3601 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1884 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _1885 = dot(vec3(cbLight._m0[_1865].xyz), vec3(_1871 * _1877, _1872 * _1877, _1873 * _1877));
        float _3612 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1894 = (exp2(log2(1.0 - (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1898 = (0.5 / ((_1884 + 9.9999999392252902907785028219223e-09) + _1625)) * _1884;
        float _3623 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1900 = (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * 0.31831014156341552734375;
        float _1901 = isnan(1.0) ? _1486 : (isnan(_1486) ? 1.0 : min(_1486, 1.0));
        _1848 = (((_1894 * cbLight._m0[_1859].x) * _1900) * _1901) + _1765;
        _1850 = (((_1894 * cbLight._m0[_1859].y) * _1900) * _1901) + _1767;
        _1852 = (((_1894 * cbLight._m0[_1859].z) * _1900) * _1901) + _1769;
    }
    float _2035;
    float _2037;
    float _2039;
    float _2041;
    float _2043;
    float _2045;
    if (_1467.y == 0u)
    {
        float _1976 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1977 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1976;
        float _1978 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1976;
        float _1979 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1976;
        uvec4 _1991 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1992 = _1991.x;
        uint _2003 = uint((float(_1991.y) * floor(float(uint(cbSceneParam._m0[85u].y * _365) / _1992))) + floor(float(uint(cbSceneParam._m0[85u].x * _364) / _1992)));
        float _2013 = (log2(_1979 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2014 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        uint _2017 = uint(isnan(14.0) ? _2014 : (isnan(_2014) ? 14.0 : min(_2014, 14.0)));
        uvec4 _2022 = texelFetch(g_lightClusterGridBuffer, int(((_2017 << 2u) + (_2003 << 6u)) >> 2u));
        uint _2023 = _2022.x;
        uint _2024 = _1991.z;
        float _2152;
        float _2154;
        float _2156;
        float _2158;
        float _2160;
        float _2162;
        if (((((1u << ((_2024 >> 4u) & 15u)) + 4294967295u) & _2023) == 0u) || ((_2024 & 240u) == 0u))
        {
            _2152 = 0.0;
            _2154 = 0.0;
            _2156 = 0.0;
            _2158 = 0.0;
            _2160 = 0.0;
            _2162 = 0.0;
        }
        else
        {
            float _2153;
            float _2155;
            float _2157;
            float _2159;
            float _2161;
            float _2163;
            float _2303 = 0.0;
            float _2304 = 0.0;
            float _2305 = 0.0;
            float _2306 = 0.0;
            float _2307 = 0.0;
            float _2308 = 0.0;
            uint _2309 = 0u;
            uint _2318;
            bool _2319;
            for (;;)
            {
                _2318 = texelFetch(g_lightClassification, int((((_2017 << 5u) + (_2003 << 9u)) + (_2309 << 2u)) >> 2u)).x;
                _2319 = _2318 == 0u;
                float frontier_phi_76_pred;
                float frontier_phi_76_pred_1;
                float frontier_phi_76_pred_2;
                float frontier_phi_76_pred_3;
                float frontier_phi_76_pred_4;
                float frontier_phi_76_pred_5;
                if (_2319)
                {
                    frontier_phi_76_pred = _2308;
                    frontier_phi_76_pred_1 = _2307;
                    frontier_phi_76_pred_2 = _2306;
                    frontier_phi_76_pred_3 = _2304;
                    frontier_phi_76_pred_4 = _2303;
                    frontier_phi_76_pred_5 = _2305;
                }
                else
                {
                    float _2427;
                    float _2428;
                    float _2429;
                    float _2430;
                    float _2431;
                    float _2432;
                    uint _2433;
                    _2427 = _2303;
                    _2428 = _2304;
                    _2429 = _2305;
                    _2430 = _2306;
                    _2431 = _2307;
                    _2432 = _2308;
                    _2433 = _2318;
                    float _2359;
                    float _2360;
                    float _2361;
                    float _2362;
                    float _2363;
                    float _2364;
                    for (;;)
                    {
                        uint _2437 = uint(findLSB(_2433)) + (_2309 << 5u);
                        uint _2434 = (_2433 + 4294967295u) & _2433;
                        uint _2439 = _2437 * 48u;
                        vec4 _2453 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2439)).x, texelFetch(g_PointLightRenderingBuffer, int(_2439 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2439 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2439 + 3u)).x));
                        uint _2459 = (_2437 * 48u) + 4u;
                        vec4 _2472 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2459)).x, texelFetch(g_PointLightRenderingBuffer, int(_2459 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2459 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2459 + 3u)).x));
                        uint _2478 = (_2437 * 48u) + 8u;
                        vec3 _2489 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2478)).x, texelFetch(g_PointLightRenderingBuffer, int(_2478 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2478 + 2u)).x));
                        float _2493 = _2453.x - _1977;
                        float _2494 = _2453.y - _1978;
                        float _2495 = _2453.z - _1979;
                        float _2496 = dot(vec3(_2493, _2494, _2495), vec3(_2493, _2494, _2495));
                        float _2499 = inversesqrt(_2496);
                        float _2508 = 1.0 - (_2496 * _2453.w);
                        float _3649 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
                        float _2509 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
                        float _2510 = sqrt(_2496) * _2472.w;
                        float _2513 = 1.39999997615814208984375 / (_2510 + 1.39999997615814208984375);
                        float _2514 = _2513 * _2513;
                        float _2517 = ((1.0 - _2514) * dot(vec3(_385, _388, _391), vec3(_2499 * _2493, _2499 * _2494, _2499 * _2495))) + _2514;
                        float _2520 = _2510 * _2510;
                        float _2524 = ((isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0))) * _2509) / ((_2520 * 0.699999988079071044921875) + 1.0);
                        float _2528 = (-0.0) - _1977;
                        float _2529 = (-0.0) - _1978;
                        float _2530 = (-0.0) - _1979;
                        float _2534 = inversesqrt(dot(vec3(_2528, _2529, _2530), vec3(_2528, _2529, _2530)));
                        float _2538 = dot(vec3(_385, _388, _391), vec3(_2534 * _2528, _2534 * _2529, _2534 * _2530));
                        float _3665 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
                        float _3676 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
                        float _2542 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
                        float _2546 = (0.5 / (((isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) + 9.9999999392252902907785028219223e-09) + _2542)) * _2542;
                        float _3687 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
                        float _2555 = (((isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * 3.1415927410125732421875) / ((_2520 * 2.1991131305694580078125) + 3.141590118408203125)) * _2509;
                        _2362 = (_2524 * _2472.x) + _2430;
                        _2363 = (_2524 * _2472.y) + _2431;
                        _2364 = (_2524 * _2472.z) + _2432;
                        _2359 = (_2555 * _2489.x) + _2427;
                        _2360 = (_2555 * _2489.y) + _2428;
                        _2361 = (_2555 * _2489.z) + _2429;
                        if (_2434 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2427 = _2359;
                            _2428 = _2360;
                            _2429 = _2361;
                            _2430 = _2362;
                            _2431 = _2363;
                            _2432 = _2364;
                            _2433 = _2434;
                        }
                    }
                    frontier_phi_76_pred = _2364;
                    frontier_phi_76_pred_1 = _2363;
                    frontier_phi_76_pred_2 = _2362;
                    frontier_phi_76_pred_3 = _2360;
                    frontier_phi_76_pred_4 = _2359;
                    frontier_phi_76_pred_5 = _2361;
                }
                _2163 = frontier_phi_76_pred;
                _2161 = frontier_phi_76_pred_1;
                _2159 = frontier_phi_76_pred_2;
                _2155 = frontier_phi_76_pred_3;
                _2153 = frontier_phi_76_pred_4;
                _2157 = frontier_phi_76_pred_5;
                uint _2310 = _2309 + 1u;
                if (_2310 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2303 = _2153;
                    _2304 = _2155;
                    _2305 = _2157;
                    _2306 = _2159;
                    _2307 = _2161;
                    _2308 = _2163;
                    _2309 = _2310;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2152 = _2153;
            _2154 = _2155;
            _2156 = _2157;
            _2158 = _2159;
            _2160 = _2161;
            _2162 = _2163;
        }
        uvec4 _2166 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2167 = _2166.z;
        uint _2169 = (_2167 >> 8u) & 15u;
        float _2274;
        float _2276;
        float _2278;
        float _2280;
        float _2282;
        float _2284;
        if (((4294967295u << _2169) & _2023) == 0u)
        {
            _2274 = _2152;
            _2276 = _2154;
            _2278 = _2156;
            _2280 = _2158;
            _2282 = _2160;
            _2284 = _2162;
        }
        else
        {
            float _2299 = inversesqrt(dot(vec3(_1977, _1978, _1979), vec3(_1977, _1978, _1979)));
            float frontier_phi_70_71_ladder;
            float frontier_phi_70_71_ladder_1;
            float frontier_phi_70_71_ladder_2;
            float frontier_phi_70_71_ladder_3;
            float frontier_phi_70_71_ladder_4;
            float frontier_phi_70_71_ladder_5;
            if (_2169 < ((_2167 >> 12u) & 15u))
            {
                float _2275;
                float _2277;
                float _2279;
                float _2281;
                float _2283;
                float _2285;
                float _2410 = _2152;
                float _2411 = _2154;
                float _2412 = _2156;
                float _2413 = _2158;
                float _2414 = _2160;
                float _2415 = _2162;
                uint _2416 = _2169;
                uint _2425;
                bool _2426;
                for (;;)
                {
                    _2425 = texelFetch(g_lightClassification, int((((_2017 << 5u) + (_2003 << 9u)) + (_2416 << 2u)) >> 2u)).x;
                    _2426 = _2425 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2426)
                    {
                        frontier_phi_82_pred = _2412;
                        frontier_phi_82_pred_1 = _2411;
                        frontier_phi_82_pred_2 = _2410;
                        frontier_phi_82_pred_3 = _2415;
                        frontier_phi_82_pred_4 = _2414;
                        frontier_phi_82_pred_5 = _2413;
                    }
                    else
                    {
                        float _2560;
                        float _2561;
                        float _2562;
                        float _2563;
                        float _2564;
                        float _2565;
                        float _2812;
                        float _2813;
                        float _2814;
                        float _2815;
                        float _2816;
                        float _2817;
                        float _2573 = _2410;
                        float _2574 = _2411;
                        float _2575 = _2412;
                        float _2576 = _2413;
                        float _2577 = _2414;
                        float _2578 = _2415;
                        uint _2579 = _2425;
                        uint _2580;
                        vec4 _2605;
                        float _2606;
                        vec4 _2621;
                        vec3 _2633;
                        vec4 _2649;
                        vec4 _2665;
                        float _2712;
                        bool _2713;
                        for (;;)
                        {
                            uint _2590 = ((_2416 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2579));
                            _2580 = (_2579 + 4294967295u) & _2579;
                            uint _2592 = _2590 * 40u;
                            _2605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2592 + 3u)).x));
                            _2606 = _2605.w;
                            uint _2608 = (_2590 * 40u) + 4u;
                            _2621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2608 + 3u)).x));
                            uint _2623 = (_2590 * 40u) + 8u;
                            _2633 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2623 + 2u)).x));
                            uint _2636 = (_2590 * 40u) + 16u;
                            _2649 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2636 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2636 + 3u)).x));
                            uint _2652 = (_2590 * 40u) + 20u;
                            _2665 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2652 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2652 + 3u)).x));
                            uint _2668 = (_2590 * 40u) + 24u;
                            vec4 _2681 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2668)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2668 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2668 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2668 + 3u)).x));
                            uint _2687 = (_2590 * 40u) + 28u;
                            vec4 _2700 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2687 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2687 + 3u)).x));
                            _2712 = fma(_1979, _2700.z, fma(_1978, _2700.y, _2700.x * _1977)) + _2700.w;
                            _2713 = !((fma(_1979, _2681.z, fma(_1978, _2681.y, _2681.x * _1977)) + _2681.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_2713)
                            {
                                float _2740 = _2605.x - _1977;
                                float _2741 = _2605.y - _1978;
                                float _2742 = _2605.z - _1979;
                                float _2743 = dot(vec3(_2740, _2741, _2742), vec3(_2740, _2741, _2742));
                                float _2746 = inversesqrt(_2743);
                                float _2747 = _2746 * _2740;
                                float _2748 = _2746 * _2741;
                                float _2749 = _2746 * _2742;
                                float _2753 = 1.0 - (_2743 / (_2606 * _2606));
                                float _3698 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                                float _2754 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
                                float _2758 = sqrt(_2743) * _2621.w;
                                float _2760 = 1.39999997615814208984375 / (_2758 + 1.39999997615814208984375);
                                float _2761 = _2760 * _2760;
                                float _2762 = 1.0 - _2761;
                                float _2764 = (_2762 * dot(vec3(_2747, _2748, _2749), vec3(_385, _388, _391))) + _2761;
                                float _2767 = _2758 * _2758;
                                float _2771 = (fma(_1979, _2649.z, fma(_1978, _2649.y, _2649.x * _1977)) + _2649.w) / _2712;
                                float _2772 = (fma(_1979, _2665.z, fma(_1978, _2665.y, _2665.x * _1977)) + _2665.w) / _2712;
                                float _2776 = 1.0 - dot(vec2(_2771, _2772), vec2(_2771, _2772));
                                float _3714 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
                                float _2777 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
                                float _2778 = _2777 * (((isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0))) * _2754) / ((_2767 * 0.699999988079071044921875) + 1.0));
                                float _2788 = dot(vec3(_385, _388, _391), vec3((-0.0) - (_1977 * _2299), (-0.0) - (_1978 * _2299), (-0.0) - (_1979 * _2299)));
                                float _3725 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                                float _2796 = (_2762 * dot(vec3(_385, _388, _391), vec3(_2747, _2748, _2749))) + _2761;
                                float _3736 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                                float _2797 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
                                float _2801 = (0.5 / (((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) + 9.9999999392252902907785028219223e-09) + _2797)) * _2797;
                                float _3747 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                                float _2808 = (_2777 * _2754) * (((isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * 3.1415927410125732421875) / ((_2767 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_88_pred = _2808 * _2633.z;
                                frontier_phi_88_pred_1 = _2808 * _2633.y;
                                frontier_phi_88_pred_2 = _2808 * _2633.x;
                                frontier_phi_88_pred_3 = _2778 * _2621.z;
                                frontier_phi_88_pred_4 = _2778 * _2621.y;
                                frontier_phi_88_pred_5 = _2778 * _2621.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _2814 = frontier_phi_88_pred;
                            _2813 = frontier_phi_88_pred_1;
                            _2812 = frontier_phi_88_pred_2;
                            _2817 = frontier_phi_88_pred_3;
                            _2816 = frontier_phi_88_pred_4;
                            _2815 = frontier_phi_88_pred_5;
                            _2563 = _2815 + _2576;
                            _2564 = _2816 + _2577;
                            _2565 = _2817 + _2578;
                            _2560 = _2812 + _2573;
                            _2561 = _2813 + _2574;
                            _2562 = _2814 + _2575;
                            if (_2580 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2573 = _2560;
                                _2574 = _2561;
                                _2575 = _2562;
                                _2576 = _2563;
                                _2577 = _2564;
                                _2578 = _2565;
                                _2579 = _2580;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2562;
                        frontier_phi_82_pred_1 = _2561;
                        frontier_phi_82_pred_2 = _2560;
                        frontier_phi_82_pred_3 = _2565;
                        frontier_phi_82_pred_4 = _2564;
                        frontier_phi_82_pred_5 = _2563;
                    }
                    _2279 = frontier_phi_82_pred;
                    _2277 = frontier_phi_82_pred_1;
                    _2275 = frontier_phi_82_pred_2;
                    _2285 = frontier_phi_82_pred_3;
                    _2283 = frontier_phi_82_pred_4;
                    _2281 = frontier_phi_82_pred_5;
                    uint _2417 = _2416 + 1u;
                    if (_2417 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2410 = _2275;
                        _2411 = _2277;
                        _2412 = _2279;
                        _2413 = _2281;
                        _2414 = _2283;
                        _2415 = _2285;
                        _2416 = _2417;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_70_71_ladder = _2283;
                frontier_phi_70_71_ladder_1 = _2281;
                frontier_phi_70_71_ladder_2 = _2279;
                frontier_phi_70_71_ladder_3 = _2285;
                frontier_phi_70_71_ladder_4 = _2277;
                frontier_phi_70_71_ladder_5 = _2275;
            }
            else
            {
                frontier_phi_70_71_ladder = _2160;
                frontier_phi_70_71_ladder_1 = _2158;
                frontier_phi_70_71_ladder_2 = _2156;
                frontier_phi_70_71_ladder_3 = _2162;
                frontier_phi_70_71_ladder_4 = _2154;
                frontier_phi_70_71_ladder_5 = _2152;
            }
            _2274 = frontier_phi_70_71_ladder_5;
            _2276 = frontier_phi_70_71_ladder_4;
            _2278 = frontier_phi_70_71_ladder_2;
            _2280 = frontier_phi_70_71_ladder_1;
            _2282 = frontier_phi_70_71_ladder;
            _2284 = frontier_phi_70_71_ladder_3;
        }
        float _2289 = isnan(1.0) ? _429 : (isnan(_429) ? 1.0 : min(_429, 1.0));
        _2035 = (_2289 * _2280) + _1599;
        _2037 = (_2289 * _2282) + _1601;
        _2039 = (_2289 * _2284) + _1603;
        _2041 = ((_2274 * 0.039999999105930328369140625) * _2289) + _1848;
        _2043 = ((_2276 * 0.039999999105930328369140625) * _2289) + _1850;
        _2045 = ((_2278 * 0.039999999105930328369140625) * _2289) + _1852;
    }
    else
    {
        _2035 = _1599;
        _2037 = _1601;
        _2039 = _1603;
        _2041 = _1848;
        _2043 = _1850;
        _2045 = _1852;
    }
    uint _2051 = _405 + uint(cbMatDynParam._m0[0u].w);
    float _2057 = cbInstanceData._m0[_2051].x * _267;
    float _2058 = cbInstanceData._m0[_2051].y * _269;
    float _2059 = cbInstanceData._m0[_2051].z * _270;
    float _3763 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _3774 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _3785 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _2076 = (((isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_2035 + ((isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0))) * _429))) + ((_2041 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _1237)) * cbPerFrame._m0[3u].x)) + _2057;
    float _2078 = (_2058 + ((_2043 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _1237)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_2037 + ((isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0))) * _429)));
    float _2080 = (_2059 + ((_2045 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _1237)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * (_2039 + ((isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0))) * _429)));
    float _3811 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2093 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    uint _2094 = _404 + 6u;
    float _2102 = _364 / cbSceneParam._m0[86u].x;
    float _2103 = _365 / cbSceneParam._m0[86u].y;
    vec4 _2117 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2102, _2103, (log2((isnan(cbSceneParam._m0[77u].w) ? _297 : (isnan(_297) ? cbSceneParam._m0[77u].w : min(_297, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2119 = _2117.x;
    float _2120 = _2117.y;
    float _2121 = _2117.z;
    float _2122 = _2117.w;
    float _2214;
    float _2216;
    float _2218;
    float _2220;
    if (_297 > cbSceneParam._m0[78u].w)
    {
        float _2177 = isnan(_297) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _297 : min(cbSceneParam._m0[80u].w, _297));
        float _2178 = _2177 / _297;
        float _2189 = _2178 * _349;
        float _2190 = _350 * _2178;
        float _2191 = (-0.0) - _2190;
        float _2192 = _2178 * _351;
        float _2194 = (cbSceneParam._m0[77u].w * _2191) / _2177;
        float _2195 = _2194 + cbSceneParam._m0[79u].w;
        float _2196 = cbSceneParam._m0[79u].w - _2190;
        float _2202 = sqrt(((_2189 * _2189) + (_2190 * _2190)) + (_2192 * _2192));
        float _2205 = (1.0 - (cbSceneParam._m0[77u].w / _2177)) * _2202;
        float _2210 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2212 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2372;
        if (abs((_2191 - _2194) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2372 = ((((_2195 > 0.0) ? exp2(_2210 * _2195) : (2.0 - exp2(_2212 * _2195))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2205;
        }
        else
        {
            float _2332 = 1.0 / cbSceneParam._m0[80u].x;
            float _2333 = isnan(_2196) ? _2195 : (isnan(_2195) ? _2196 : max(_2195, _2196));
            float _2334 = isnan(_2196) ? _2195 : (isnan(_2195) ? _2196 : min(_2195, _2196));
            float _2343 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : min(_2333, 0.0));
            float _2344 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : min(_2334, 0.0));
            _2372 = ((abs(_2202 / _2191) * cbSceneParam._m0[80u].y) * ((((_2343 - _2344) * 2.0) - ((exp2(_2210 * (isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0)))) - exp2(_2210 * (isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0))))) * _2332)) - ((exp2(_2212 * _2343) - exp2(_2212 * _2344)) * _2332))) + (_2205 * cbSceneParam._m0[80u].z);
        }
        vec4 _2374 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2102, _2103, 1.0), 0.0);
        float _2383 = exp2((_2372 * (-1.44269502162933349609375)) * (1.0 - _2374.w));
        float _2384 = log2(_2383);
        float _2400 = log2(_2122);
        _2214 = (exp2(_2400 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2384 * cbSceneParam._m0[78u].x)) * _2374.x) / cbSceneParam._m0[78u].x)) + _2119;
        _2216 = (exp2(_2400 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2384 * cbSceneParam._m0[78u].y)) * _2374.y) / cbSceneParam._m0[78u].y)) + _2120;
        _2218 = (exp2(_2400 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2384 * cbSceneParam._m0[78u].z)) * _2374.z) / cbSceneParam._m0[78u].z)) + _2121;
        _2220 = _2383 * _2122;
    }
    else
    {
        _2214 = _2119;
        _2216 = _2120;
        _2218 = _2121;
        _2220 = _2122;
    }
    float _2232 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2233 = _2232 == 3.0;
    float _2235 = log2(_2220);
    float _2239 = exp2(_2235 * cbSceneParam._m0[78u].x);
    float _2240 = exp2(_2235 * cbSceneParam._m0[78u].y);
    float _2241 = exp2(_2235 * cbSceneParam._m0[78u].z);
    float _2242 = _2239 * (isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0)));
    float _2243 = _2240 * (isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0)));
    float _2244 = _2241 * (isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0)));
    float _2253 = (_2232 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2253 * (_2233 ? _2242 : (_2242 + (cbSceneParam._m0[72u].w * _2214)));
    SV_Target.y = _2253 * (_2233 ? _2243 : (_2243 + (cbSceneParam._m0[72u].w * _2216)));
    SV_Target.z = _2253 * (_2233 ? _2244 : (_2244 + (cbSceneParam._m0[72u].w * _2218)));
    SV_Target.w = cbInstanceData._m0[_2094].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2057) * _2093) * _2239) * _2253;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2058) * _2093) * _2240) * _2253;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2059) * _2093) * _2241) * _2253;
    SV_Target_1.w = cbInstanceData._m0[_2094].w;
}


