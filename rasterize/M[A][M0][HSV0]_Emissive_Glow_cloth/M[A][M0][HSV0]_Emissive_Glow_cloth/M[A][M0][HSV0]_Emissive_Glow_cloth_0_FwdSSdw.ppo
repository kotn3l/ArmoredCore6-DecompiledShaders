#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _732;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _165 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _166 = _165 * NORMAL.x;
    float _167 = _165 * NORMAL.y;
    float _168 = _165 * NORMAL.z;
    float _173;
    float _174;
    float _175;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _173 = (-0.0) - _166;
        _174 = (-0.0) - _167;
        _175 = (-0.0) - _168;
    }
    else
    {
        _173 = _166;
        _174 = _167;
        _175 = _168;
    }
    vec4 _195 = texture(sampler2D(M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _201 = _195.x * cbMtdParam._m0[9u].x;
    float _202 = _195.y * cbMtdParam._m0[9u].y;
    float _203 = _195.z * cbMtdParam._m0[9u].z;
    vec4 _215 = texture(sampler2D(M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _233 = inversesqrt(dot(vec3(_173, _174, _175), vec3(_173, _174, _175)));
    float _234 = _233 * _173;
    float _235 = _233 * _174;
    float _236 = _233 * _175;
    float _2910 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _2921 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _2932 = isnan(0.0) ? _203 : (isnan(_203) ? 0.0 : max(_203, 0.0));
    float _256 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _297 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _307 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _297);
    float _308 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _297);
    float _309 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _297);
    float _313 = inversesqrt(dot(vec3(_307, _308, _309), vec3(_307, _308, _309)));
    float _314 = _307 * _313;
    float _315 = _308 * _313;
    float _316 = _309 * _313;
    float _322 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _323 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _344 = fma(_236, cbSceneParam._m0[5u].z, fma(_235, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _234));
    float _347 = fma(_236, cbSceneParam._m0[6u].z, fma(_235, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _234));
    float _350 = fma(_236, cbSceneParam._m0[7u].z, fma(_235, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _234));
    uint _363 = uint(roundEven(NORMAL.w)) * 13u;
    uint _364 = _363 + 9u;
    uint _365 = _364 + uint(cbMatDynParam._m0[0u].w);
    float _371 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2910 : (isnan(_2910) ? 1.0 : min(_2910, 1.0)))) * cbInstanceData._m0[_365].x;
    float _372 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2921 : (isnan(_2921) ? 1.0 : min(_2921, 1.0)))) * cbInstanceData._m0[_365].y;
    float _373 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2932 : (isnan(_2932) ? 1.0 : min(_2932, 1.0)))) * cbInstanceData._m0[_365].z;
    float _2943 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _374 = isnan(1.0) ? _2943 : (isnan(_2943) ? 1.0 : min(_2943, 1.0));
    float _2954 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _375 = isnan(1.0) ? _2954 : (isnan(_2954) ? 1.0 : min(_2954, 1.0));
    float _2965 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _376 = isnan(1.0) ? _2965 : (isnan(_2965) ? 1.0 : min(_2965, 1.0));
    vec4 _385 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _322, cbSceneParam._m0[86u].y * _323));
    float _388 = _385.x * TEXCOORD.z;
    float _389 = dot(vec3(_234, _235, _236), vec3(_314, _315, _316));
    float _392 = _389 * 2.0;
    float _397 = (_392 * _234) - _314;
    float _398 = (_392 * _235) - _315;
    float _399 = (_392 * _236) - _316;
    float _421 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _425 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _429 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _731;
    float _733;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    float _739;
    float _740;
    float _741;
    float _742;
    float _743;
    float _744;
    float _745;
    float _746;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _456 = fma(_429, cbModelParam._m0[26u].z, fma(_425, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _421));
        float _460 = fma(_429, cbModelParam._m0[27u].z, fma(_425, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _421));
        float _464 = fma(_429, cbModelParam._m0[28u].z, fma(_425, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _421));
        float _489 = _421 + _234;
        float _490 = _425 + _235;
        float _491 = _429 + _236;
        float _501 = fma(_491, cbModelParam._m0[26u].z, fma(_490, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _489)) - _456;
        float _502 = fma(_491, cbModelParam._m0[27u].z, fma(_490, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _489)) - _460;
        float _503 = fma(_491, cbModelParam._m0[28u].z, fma(_490, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _489)) - _464;
        float _507 = inversesqrt(dot(vec3(_501, _502, _503), vec3(_501, _502, _503)));
        float _520 = ((_507 * _501) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_456 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _521 = ((_507 * _502) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_460 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _522 = ((_507 * _503) / cbModelParam._m0[34u].z) + ((((((_464 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _525 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_520, _521, _522), 0.0);
        vec4 _532 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_520, _521, _522), 0.0);
        vec4 _539 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_520, _521, _522), 0.0);
        vec4 _546 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_520, _521, _522), 0.0);
        float _559 = exp2((_525.w + (-0.5)) * 20.0) * 2.0;
        float _560 = _559 * (_525.x + (-0.5));
        float _561 = _559 * (_525.y + (-0.5));
        float _562 = _559 * (_525.z + (-0.5));
        float _569 = exp2((_532.w + (-0.5)) * 20.0) * 2.0;
        float _570 = _569 * (_532.x + (-0.5));
        float _571 = _569 * (_532.y + (-0.5));
        float _572 = _569 * (_532.z + (-0.5));
        float _579 = exp2((_539.w + (-0.5)) * 20.0) * 2.0;
        float _580 = _579 * (_539.x + (-0.5));
        float _581 = _579 * (_539.y + (-0.5));
        float _582 = _579 * (_539.z + (-0.5));
        float _589 = exp2((_546.w + (-0.5)) * 20.0) * 2.0;
        float _590 = _589 * (_546.x + (-0.5));
        float _591 = _589 * (_546.y + (-0.5));
        float _592 = _589 * (_546.z + (-0.5));
        float _593 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
        float _594 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
        float _595 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
        float _596 = _560 * 0.5;
        float _597 = _570 * 0.5;
        float _598 = _580 * 0.5;
        float _599 = dot(vec3(_596, _597, _598), vec3(_596, _597, _598));
        float _604 = (_599 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_599);
        float _613 = (dot(vec3(_234, _235, _236), vec3(_604 * _596, _604 * _597, _604 * _598)) + 1.0) * 0.5;
        float _2991 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
        float _623 = sqrt(((_597 * _597) + (_596 * _596)) + (_598 * _598)) / (_593 + 9.9999997473787516355514526367188e-06);
        float _3002 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
        float _624 = isnan(1.0) ? _3002 : (isnan(_3002) ? 1.0 : min(_3002, 1.0));
        float _625 = _624 * 2.0;
        float _629 = (1.0 - _624) / (_624 + 1.0);
        float _3013 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
        float _630 = isnan(1.0) ? _3013 : (isnan(_3013) ? 1.0 : min(_3013, 1.0));
        float _639 = ((((1.0 - _630) * (_625 + 2.0)) * exp2(log2(isnan(1.0) ? _2991 : (isnan(_2991) ? 1.0 : min(_2991, 1.0))) * (_625 + 1.0))) + _630) * _593;
        float _640 = _561 * 0.5;
        float _641 = _571 * 0.5;
        float _642 = _581 * 0.5;
        float _643 = dot(vec3(_640, _641, _642), vec3(_640, _641, _642));
        float _648 = (_643 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_643);
        float _656 = (dot(vec3(_234, _235, _236), vec3(_648 * _640, _648 * _641, _648 * _642)) + 1.0) * 0.5;
        float _3024 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _665 = sqrt(((_641 * _641) + (_640 * _640)) + (_642 * _642)) / (_594 + 9.9999997473787516355514526367188e-06);
        float _3035 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
        float _666 = isnan(1.0) ? _3035 : (isnan(_3035) ? 1.0 : min(_3035, 1.0));
        float _667 = _666 * 2.0;
        float _671 = (1.0 - _666) / (_666 + 1.0);
        float _3046 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
        float _672 = isnan(1.0) ? _3046 : (isnan(_3046) ? 1.0 : min(_3046, 1.0));
        float _681 = ((((1.0 - _672) * (_667 + 2.0)) * exp2(log2(isnan(1.0) ? _3024 : (isnan(_3024) ? 1.0 : min(_3024, 1.0))) * (_667 + 1.0))) + _672) * _594;
        float _682 = _562 * 0.5;
        float _683 = _572 * 0.5;
        float _684 = _582 * 0.5;
        float _685 = dot(vec3(_682, _683, _684), vec3(_682, _683, _684));
        float _690 = (_685 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_685);
        float _698 = (dot(vec3(_234, _235, _236), vec3(_690 * _682, _690 * _683, _690 * _684)) + 1.0) * 0.5;
        float _3057 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _707 = sqrt(((_683 * _683) + (_682 * _682)) + (_684 * _684)) / (_595 + 9.9999997473787516355514526367188e-06);
        float _3068 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _708 = isnan(1.0) ? _3068 : (isnan(_3068) ? 1.0 : min(_3068, 1.0));
        float _709 = _708 * 2.0;
        float _713 = (1.0 - _708) / (_708 + 1.0);
        float _3079 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _714 = isnan(1.0) ? _3079 : (isnan(_3079) ? 1.0 : min(_3079, 1.0));
        float _723 = ((((1.0 - _714) * (_709 + 2.0)) * exp2(log2(isnan(1.0) ? _3057 : (isnan(_3057) ? 1.0 : min(_3057, 1.0))) * (_709 + 1.0))) + _714) * _595;
        _731 = _562;
        _733 = _561;
        _734 = _560;
        _735 = _572;
        _736 = _571;
        _737 = _570;
        _738 = _582;
        _739 = _581;
        _740 = _580;
        _741 = _595;
        _742 = _594;
        _743 = _593;
        _744 = cbModelParam._m0[36u].z * (isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0)));
        _745 = cbModelParam._m0[36u].z * (isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0)));
        _746 = cbModelParam._m0[36u].z * (isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0)));
    }
    else
    {
        _731 = _732;
        _733 = _732;
        _734 = _732;
        _735 = _732;
        _736 = _732;
        _737 = _732;
        _738 = _732;
        _739 = _732;
        _740 = _732;
        _741 = _732;
        _742 = _732;
        _743 = _732;
        _744 = 0.0;
        _745 = 0.0;
        _746 = 0.0;
    }
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _772 = fma(_429, cbModelParam._m0[30u].z, fma(_425, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _421));
        float _776 = fma(_429, cbModelParam._m0[31u].z, fma(_425, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _421));
        float _780 = fma(_429, cbModelParam._m0[32u].z, fma(_425, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _421));
        float _803 = _421 + _234;
        float _804 = _425 + _235;
        float _805 = _429 + _236;
        float _815 = fma(_805, cbModelParam._m0[30u].z, fma(_804, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _803)) - _772;
        float _816 = fma(_805, cbModelParam._m0[31u].z, fma(_804, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _803)) - _776;
        float _817 = fma(_805, cbModelParam._m0[32u].z, fma(_804, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _803)) - _780;
        float _821 = inversesqrt(dot(vec3(_815, _816, _817), vec3(_815, _816, _817)));
        float _834 = ((_821 * _815) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_772 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _835 = ((_821 * _816) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_776 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _836 = ((_821 * _817) / cbModelParam._m0[35u].z) + ((((((_780 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        float _871 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_838.x + (-0.5));
        float _873 = _871 * (_838.y + (-0.5));
        float _874 = _871 * (_838.z + (-0.5));
        float _881 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_845.x + (-0.5));
        float _883 = _881 * (_845.y + (-0.5));
        float _884 = _881 * (_845.z + (-0.5));
        float _891 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_852.x + (-0.5));
        float _893 = _891 * (_852.y + (-0.5));
        float _894 = _891 * (_852.z + (-0.5));
        float _901 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_859.x + (-0.5));
        float _903 = _901 * (_859.y + (-0.5));
        float _904 = _901 * (_859.z + (-0.5));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = _872 * 0.5;
        float _909 = _882 * 0.5;
        float _910 = _892 * 0.5;
        float _911 = dot(vec3(_908, _909, _910), vec3(_908, _909, _910));
        float _916 = (_911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_911);
        float _924 = (dot(vec3(_234, _235, _236), vec3(_916 * _908, _916 * _909, _916 * _910)) + 1.0) * 0.5;
        float _3120 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _933 = sqrt(((_909 * _909) + (_908 * _908)) + (_910 * _910)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3131 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0));
        float _935 = _934 * 2.0;
        float _939 = (1.0 - _934) / (_934 + 1.0);
        float _3142 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3142 : (isnan(_3142) ? 1.0 : min(_3142, 1.0));
        float _949 = ((((1.0 - _940) * (_935 + 2.0)) * exp2(log2(isnan(1.0) ? _3120 : (isnan(_3120) ? 1.0 : min(_3120, 1.0))) * (_935 + 1.0))) + _940) * _905;
        float _950 = _873 * 0.5;
        float _951 = _883 * 0.5;
        float _952 = _893 * 0.5;
        float _953 = dot(vec3(_950, _951, _952), vec3(_950, _951, _952));
        float _958 = (_953 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_953);
        float _966 = (dot(vec3(_234, _235, _236), vec3(_958 * _950, _958 * _951, _958 * _952)) + 1.0) * 0.5;
        float _3153 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _975 = sqrt(((_951 * _951) + (_950 * _950)) + (_952 * _952)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3164 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0));
        float _977 = _976 * 2.0;
        float _981 = (1.0 - _976) / (_976 + 1.0);
        float _3175 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0));
        float _991 = ((((1.0 - _982) * (_977 + 2.0)) * exp2(log2(isnan(1.0) ? _3153 : (isnan(_3153) ? 1.0 : min(_3153, 1.0))) * (_977 + 1.0))) + _982) * _906;
        float _992 = _874 * 0.5;
        float _993 = _884 * 0.5;
        float _994 = _894 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1008 = (dot(vec3(_234, _235, _236), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3186 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1017 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3197 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3208 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0))) * (_1019 + 1.0))) + _1024) * _907;
        _1041 = _874;
        _1042 = _873;
        _1043 = _872;
        _1044 = _884;
        _1045 = _883;
        _1046 = _882;
        _1047 = _894;
        _1048 = _893;
        _1049 = _892;
        _1050 = _907;
        _1051 = _906;
        _1052 = _905;
        _1053 = cbModelParam._m0[36u].w * (isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0)));
        _1054 = cbModelParam._m0[36u].w * (isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)));
        _1055 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
    }
    else
    {
        _1041 = _732;
        _1042 = _732;
        _1043 = _732;
        _1044 = _732;
        _1045 = _732;
        _1046 = _732;
        _1047 = _732;
        _1048 = _732;
        _1049 = _732;
        _1050 = _732;
        _1051 = _732;
        _1052 = _732;
        _1053 = 0.0;
        _1054 = 0.0;
        _1055 = 0.0;
    }
    float _1065 = (cbModelParam._m0[1u].x * (_1053 - _744)) + _744;
    float _1066 = (cbModelParam._m0[1u].x * (_1054 - _745)) + _745;
    float _1067 = (cbModelParam._m0[1u].x * (_1055 - _746)) + _746;
    float _1088 = fma(_1067, cbSceneParam._m0[89u].z, fma(_1066, cbSceneParam._m0[89u].y, _1065 * cbSceneParam._m0[89u].x));
    float _1091 = fma(_1067, cbSceneParam._m0[90u].z, fma(_1066, cbSceneParam._m0[90u].y, _1065 * cbSceneParam._m0[90u].x));
    float _1094 = fma(_1067, cbSceneParam._m0[91u].z, fma(_1066, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1065));
    float _1109 = _397 * 0.5;
    float _1110 = _398 * 0.5;
    float _1111 = _399 * 0.5;
    float _1112 = dot(vec4(_1109, _1110, _1111, 1.0), vec4(_1043, _1046, _1049, _1052));
    float _1115 = dot(vec4(_1109, _1110, _1111, 1.0), vec4(_1042, _1045, _1048, _1051));
    float _1118 = dot(vec4(_1109, _1110, _1111, 1.0), vec4(_1041, _1044, _1047, _1050));
    float _1152;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1125 = dot(vec4(_1109, _1110, _1111, 1.0), vec4(_731, _735, _738, _741));
        float _1129 = dot(vec4(_1109, _1110, _1111, 1.0), vec4(_733, _736, _739, _742));
        float _1133 = dot(vec4(_1109, _1110, _1111, 1.0), vec4(_734, _737, _740, _743));
        float _1140 = dot(vec4(cbModelParam._m0[39u]), vec4(_1109, _1110, _1111, 1.0));
        _1152 = dot(vec3(isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)), isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)), isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1140) ? 0.0 : (isnan(0.0) ? _1140 : max(0.0, _1140))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1152 = 1.0;
    }
    float _1163;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1154 = dot(vec4(cbModelParam._m0[40u]), vec4(_1109, _1110, _1111, 1.0));
        _1163 = dot(vec3(isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)), isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)), isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1154) ? 0.0 : (isnan(0.0) ? _1154 : max(0.0, _1154))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1163 = 1.0;
    }
    float _1167 = (_1163 * cbModelParam._m0[1u].x) + (_1152 * (1.0 - cbModelParam._m0[1u].x));
    float _1176 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1258;
    float _1260;
    float _1262;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1225 = fma(_429, cbModelParam._m0[13u].z, fma(_425, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _421)) + cbModelParam._m0[13u].w;
        float _1229 = fma(_429, cbModelParam._m0[14u].z, fma(_425, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _421)) + cbModelParam._m0[14u].w;
        float _1233 = fma(_429, cbModelParam._m0[15u].z, fma(_425, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _421)) + cbModelParam._m0[15u].w;
        float _1236 = fma(_399, cbModelParam._m0[13u].z, fma(_398, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _397));
        float _1239 = fma(_399, cbModelParam._m0[14u].z, fma(_398, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _397));
        float _1242 = fma(_399, cbModelParam._m0[15u].z, fma(_398, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _397));
        float _1268;
        if (_1236 > 0.0)
        {
            _1268 = abs((1.0 - _1225) / _1236);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1236 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1225 + 1.0) / _1236);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1268 = frontier_phi_16_14_ladder;
        }
        float _1497;
        if (_1239 > 0.0)
        {
            _1497 = abs((1.0 - _1229) / _1239);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1239 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1229 + 1.0) / _1239);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1497 = frontier_phi_25_21_ladder;
        }
        float _1689;
        if (_1242 > 0.0)
        {
            _1689 = abs((1.0 - _1233) / _1242);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1242 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1233 + 1.0) / _1242);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1689 = frontier_phi_37_32_ladder;
        }
        float _1691 = isnan(_1497) ? _1268 : (isnan(_1268) ? _1497 : min(_1268, _1497));
        float _1692 = isnan(_1689) ? _1691 : (isnan(_1691) ? _1689 : min(_1691, _1689));
        float _1696 = (_1692 * _1236) + _1225;
        float _1697 = (_1692 * _1239) + _1229;
        float _1698 = (_1692 * _1242) + _1233;
        float _1699 = _1692 * 9.9999997473787516355514526367188e-05;
        float _1701 = (-1.0) - _1699;
        float _1703 = _1699 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1698 > _1703) || ((_1698 < _1701) || ((_1697 > _1703) || ((_1697 < _1701) || ((_1696 < _1701) || (_1696 > _1703))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1795 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1698, cbModelParam._m0[9u].z, fma(_1697, cbModelParam._m0[9u].y, _1696 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1698, cbModelParam._m0[10u].z, fma(_1697, cbModelParam._m0[10u].y, _1696 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1698, cbModelParam._m0[11u].z, fma(_1697, cbModelParam._m0[11u].y, _1696 * cbModelParam._m0[11u].x))), _1176);
            frontier_phi_15_37_ladder = _1795.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1795.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1795.x * cbModelParam._m0[1u].y;
        }
        _1258 = frontier_phi_15_37_ladder_2;
        _1260 = frontier_phi_15_37_ladder_1;
        _1262 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1246 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_397, _398, _399), _1176);
        _1258 = _1246.x * cbModelParam._m0[1u].y;
        _1260 = _1246.y * cbModelParam._m0[1u].y;
        _1262 = _1246.z * cbModelParam._m0[1u].y;
    }
    float _1265 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1358;
    float _1360;
    float _1362;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1322 = fma(_429, cbModelParam._m0[21u].z, fma(_425, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _421)) + cbModelParam._m0[21u].w;
        float _1326 = fma(_429, cbModelParam._m0[22u].z, fma(_425, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _421)) + cbModelParam._m0[22u].w;
        float _1330 = fma(_429, cbModelParam._m0[23u].z, fma(_425, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _421)) + cbModelParam._m0[23u].w;
        float _1333 = fma(_399, cbModelParam._m0[21u].z, fma(_398, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _397));
        float _1336 = fma(_399, cbModelParam._m0[22u].z, fma(_398, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _397));
        float _1339 = fma(_399, cbModelParam._m0[23u].z, fma(_398, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _397));
        float _1502;
        if (_1333 > 0.0)
        {
            _1502 = abs((1.0 - _1322) / _1333);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1333 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1322 + 1.0) / _1333);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1502 = frontier_phi_27_23_ladder;
        }
        float _1716;
        if (_1336 > 0.0)
        {
            _1716 = abs((1.0 - _1326) / _1336);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1336 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1326 + 1.0) / _1336);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1716 = frontier_phi_39_34_ladder;
        }
        float _1867;
        if (_1339 > 0.0)
        {
            _1867 = abs((1.0 - _1330) / _1339);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1339 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1330 + 1.0) / _1339);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1867 = frontier_phi_48_45_ladder;
        }
        float _1869 = isnan(_1716) ? _1502 : (isnan(_1502) ? _1716 : min(_1502, _1716));
        float _1870 = isnan(_1867) ? _1869 : (isnan(_1869) ? _1867 : min(_1869, _1867));
        float _1874 = (_1870 * _1333) + _1322;
        float _1875 = (_1870 * _1336) + _1326;
        float _1876 = (_1870 * _1339) + _1330;
        float _1877 = _1870 * 9.9999997473787516355514526367188e-05;
        float _1878 = (-1.0) - _1877;
        float _1880 = _1877 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1876 > _1880) || ((_1876 < _1878) || ((_1875 > _1880) || ((_1875 < _1878) || ((_1874 < _1878) || (_1874 > _1880))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2109 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1876, cbModelParam._m0[17u].z, fma(_1875, cbModelParam._m0[17u].y, _1874 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1876, cbModelParam._m0[18u].z, fma(_1875, cbModelParam._m0[18u].y, _1874 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1876, cbModelParam._m0[19u].z, fma(_1875, cbModelParam._m0[19u].y, _1874 * cbModelParam._m0[19u].x))), _1265);
            frontier_phi_24_48_ladder = _2109.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2109.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2109.x * cbModelParam._m0[1u].z;
        }
        _1358 = frontier_phi_24_48_ladder_2;
        _1360 = frontier_phi_24_48_ladder_1;
        _1362 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1342 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_397, _398, _399), _1265);
        _1358 = _1342.x * cbModelParam._m0[1u].z;
        _1360 = _1342.y * cbModelParam._m0[1u].z;
        _1362 = _1342.z * cbModelParam._m0[1u].z;
    }
    float _1374 = _388 * 0.01200000010430812835693359375;
    float _1376 = _1374 * ((cbModelParam._m0[1u].w * (_1358 - _1258)) + _1258);
    float _1377 = _1374 * ((cbModelParam._m0[1u].w * (_1360 - _1260)) + _1260);
    float _1378 = _1374 * ((cbModelParam._m0[1u].w * (_1362 - _1262)) + _1262);
    float _1381 = fma(_1378, cbSceneParam._m0[89u].z, fma(_1377, cbSceneParam._m0[89u].y, _1376 * cbSceneParam._m0[89u].x));
    float _1384 = fma(_1378, cbSceneParam._m0[90u].z, fma(_1377, cbSceneParam._m0[90u].y, _1376 * cbSceneParam._m0[90u].x));
    float _1387 = fma(_1378, cbSceneParam._m0[91u].z, fma(_1377, cbSceneParam._m0[91u].y, _1376 * cbSceneParam._m0[91u].x));
    vec4 _1395 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_322, _323));
    float _1397 = _1395.w;
    float _1409 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1397);
    float _1410 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1397);
    float _1411 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1397);
    uvec4 _1415 = floatBitsToUint(cbInstanceData._m0[_363 + 5u]);
    uint _1417 = _1415.x * 14u;
    uint _1418 = _1417 + 13u;
    float _1425 = _388 + (-1.0);
    float _1431 = (cbLight._m0[_1418].x * _1425) + 1.0;
    float _1432 = (cbLight._m0[_1418].y * _1425) + 1.0;
    float _1433 = (cbLight._m0[_1418].z * _1425) + 1.0;
    float _1434 = (cbLight._m0[_1418].w * _1425) + 1.0;
    uint _1435 = _1417 + 5u;
    float _1441 = isnan(1.0) ? _1432 : (isnan(_1432) ? 1.0 : min(_1432, 1.0));
    uint _1445 = _1417 + 4u;
    float _1455 = isnan(1.0) ? _1431 : (isnan(_1431) ? 1.0 : min(_1431, 1.0));
    uint _1459 = _1417 | 1u;
    float _1470 = dot(vec3(cbLight._m0[_1417].xyz), vec3(_234, _235, _236));
    float _1473 = dot(vec3(cbLight._m0[_1459].xyz), vec3(_234, _235, _236));
    float _3344 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
    float _3355 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
    float _1478 = (isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0))) * 0.3183098733425140380859375;
    float _1480 = (isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0))) * 0.3183098733425140380859375;
    float _1487 = ((cbLight._m0[_1435].x * _1441) * _1480) + (((cbLight._m0[_1445].x * _1409) * _1455) * _1478);
    float _1488 = ((_1441 * cbLight._m0[_1435].y) * _1480) + (((cbLight._m0[_1445].y * _1410) * _1455) * _1478);
    float _1489 = ((_1441 * cbLight._m0[_1435].z) * _1480) + (((cbLight._m0[_1445].z * _1411) * _1455) * _1478);
    uvec4 _1494 = floatBitsToUint(cbLight._m0[_1417 + 12u]);
    bool _1496 = _1494.x == 0u;
    float _1507;
    float _1509;
    float _1511;
    if (_1496)
    {
        _1507 = _1487;
        _1509 = _1488;
        _1511 = _1489;
    }
    else
    {
        uint _1515 = _1417 + 6u;
        float _1531 = (dot(vec3(cbLight._m0[_1417 + 2u].xyz), vec3(_234, _235, _236)) * 0.5) + 0.5;
        float _1532 = _1531 * _1531;
        float _3366 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
        float _1534 = isnan(1.0) ? _1433 : (isnan(_1433) ? 1.0 : min(_1433, 1.0));
        _1507 = (((cbLight._m0[_1515].x * 0.3183098733425140380859375) * _1533) * _1534) + _1487;
        _1509 = (((cbLight._m0[_1515].y * 0.3183098733425140380859375) * _1533) * _1534) + _1488;
        _1511 = (((cbLight._m0[_1515].z * 0.3183098733425140380859375) * _1533) * _1534) + _1489;
    }
    bool _1514 = _1494.y == 0u;
    float _1552;
    float _1554;
    float _1556;
    if (_1514)
    {
        _1552 = _1507;
        _1554 = _1509;
        _1556 = _1511;
    }
    else
    {
        uint _1660 = _1417 + 7u;
        float _1676 = (dot(vec3(cbLight._m0[_1417 + 3u].xyz), vec3(_234, _235, _236)) * 0.5) + 0.5;
        float _1677 = _1676 * _1676;
        float _3382 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _1679 = isnan(1.0) ? _1434 : (isnan(_1434) ? 1.0 : min(_1434, 1.0));
        _1552 = (((cbLight._m0[_1660].x * 0.3183098733425140380859375) * _1678) * _1679) + _1507;
        _1554 = (((cbLight._m0[_1660].y * 0.3183098733425140380859375) * _1678) * _1679) + _1509;
        _1556 = (((cbLight._m0[_1660].z * 0.3183098733425140380859375) * _1678) * _1679) + _1511;
    }
    uint _1558 = _1417 + 8u;
    float _1564 = cbLight._m0[_1417].x + _314;
    float _1565 = cbLight._m0[_1417].y + _315;
    float _1566 = cbLight._m0[_1417].z + _316;
    float _1570 = inversesqrt(dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566)));
    float _1574 = dot(vec3(_234, _235, _236), vec3(cbLight._m0[_1417].xyz));
    float _3398 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
    float _1577 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
    float _3409 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _1578 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
    float _1579 = dot(vec3(cbLight._m0[_1417].xyz), vec3(_1564 * _1570, _1565 * _1570, _1566 * _1570));
    float _3420 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
    float _1590 = (exp2(log2(1.0 - (isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1596 = (0.5 / ((_1577 + 9.9999999392252902907785028219223e-09) + _1578)) * _1577;
    float _3431 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
    float _1598 = (isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) * 0.31831014156341552734375;
    uint _1612 = _1417 + 9u;
    float _1618 = cbLight._m0[_1459].x + _314;
    float _1619 = cbLight._m0[_1459].y + _315;
    float _1620 = cbLight._m0[_1459].z + _316;
    float _1624 = inversesqrt(dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620)));
    float _1628 = dot(vec3(_234, _235, _236), vec3(cbLight._m0[_1459].xyz));
    float _3442 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
    float _1631 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    float _1632 = dot(vec3(cbLight._m0[_1459].xyz), vec3(_1618 * _1624, _1619 * _1624, _1620 * _1624));
    float _3453 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
    float _1641 = (exp2(log2(1.0 - (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1645 = (0.5 / ((_1631 + 9.9999999392252902907785028219223e-09) + _1578)) * _1631;
    float _3464 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
    float _1647 = (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * 0.31831014156341552734375;
    float _1657 = (((_1641 * cbLight._m0[_1612].x) * _1647) * _1441) + ((((cbLight._m0[_1558].x * _1409) * _1590) * _1598) * _1455);
    float _1658 = (((_1641 * cbLight._m0[_1612].y) * _1647) * _1441) + ((((cbLight._m0[_1558].y * _1410) * _1590) * _1598) * _1455);
    float _1659 = (((_1641 * cbLight._m0[_1612].z) * _1647) * _1441) + ((((cbLight._m0[_1558].z * _1411) * _1590) * _1598) * _1455);
    float _1721;
    float _1723;
    float _1725;
    if (_1496)
    {
        _1721 = _1657;
        _1723 = _1658;
        _1725 = _1659;
    }
    else
    {
        uint _1727 = _1417 + 10u;
        uint _1733 = _1417 + 2u;
        float _1739 = cbLight._m0[_1733].x + _314;
        float _1740 = cbLight._m0[_1733].y + _315;
        float _1741 = cbLight._m0[_1733].z + _316;
        float _1745 = inversesqrt(dot(vec3(_1739, _1740, _1741), vec3(_1739, _1740, _1741)));
        float _1749 = dot(vec3(_234, _235, _236), vec3(cbLight._m0[_1733].xyz));
        float _3475 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1752 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _1753 = dot(vec3(cbLight._m0[_1733].xyz), vec3(_1739 * _1745, _1740 * _1745, _1741 * _1745));
        float _3486 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1762 = (exp2(log2(1.0 - (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1766 = (0.5 / ((_1752 + 9.9999999392252902907785028219223e-09) + _1578)) * _1752;
        float _3497 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1768 = (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * 0.31831014156341552734375;
        float _1769 = isnan(1.0) ? _1433 : (isnan(_1433) ? 1.0 : min(_1433, 1.0));
        _1721 = (((_1762 * cbLight._m0[_1727].x) * _1768) * _1769) + _1657;
        _1723 = (((_1762 * cbLight._m0[_1727].y) * _1768) * _1769) + _1658;
        _1725 = (((_1762 * cbLight._m0[_1727].z) * _1768) * _1769) + _1659;
    }
    float _1804;
    float _1806;
    float _1808;
    if (_1514)
    {
        _1804 = _1721;
        _1806 = _1723;
        _1808 = _1725;
    }
    else
    {
        uint _1815 = _1417 + 11u;
        uint _1821 = _1417 + 3u;
        float _1827 = cbLight._m0[_1821].x + _314;
        float _1828 = cbLight._m0[_1821].y + _315;
        float _1829 = cbLight._m0[_1821].z + _316;
        float _1833 = inversesqrt(dot(vec3(_1827, _1828, _1829), vec3(_1827, _1828, _1829)));
        float _1837 = dot(vec3(_234, _235, _236), vec3(cbLight._m0[_1821].xyz));
        float _3513 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1840 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _1841 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_1827 * _1833, _1828 * _1833, _1829 * _1833));
        float _3524 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1850 = (exp2(log2(1.0 - (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1854 = (0.5 / ((_1840 + 9.9999999392252902907785028219223e-09) + _1578)) * _1840;
        float _3535 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1856 = (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * 0.31831014156341552734375;
        float _1857 = isnan(1.0) ? _1434 : (isnan(_1434) ? 1.0 : min(_1434, 1.0));
        _1804 = (((_1850 * cbLight._m0[_1815].x) * _1856) * _1857) + _1721;
        _1806 = (((_1850 * cbLight._m0[_1815].y) * _1856) * _1857) + _1723;
        _1808 = (((_1850 * cbLight._m0[_1815].z) * _1856) * _1857) + _1725;
    }
    float _1991;
    float _1993;
    float _1995;
    float _1997;
    float _1999;
    float _2001;
    if (_1415.y == 0u)
    {
        float _1932 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1933 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1932;
        float _1934 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1932;
        float _1935 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1932;
        uvec4 _1947 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1948 = _1947.x;
        uint _1959 = uint((float(_1947.y) * floor(float(uint(cbSceneParam._m0[85u].y * _323) / _1948))) + floor(float(uint(cbSceneParam._m0[85u].x * _322) / _1948)));
        float _1969 = (log2(_1935 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1970 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        uint _1973 = uint(isnan(14.0) ? _1970 : (isnan(_1970) ? 14.0 : min(_1970, 14.0)));
        uvec4 _1978 = texelFetch(g_lightClusterGridBuffer, int(((_1973 << 2u) + (_1959 << 6u)) >> 2u));
        uint _1979 = _1978.x;
        uint _1980 = _1947.z;
        float _2114;
        float _2116;
        float _2118;
        float _2120;
        float _2122;
        float _2124;
        if (((((1u << ((_1980 >> 4u) & 15u)) + 4294967295u) & _1979) == 0u) || ((_1980 & 240u) == 0u))
        {
            _2114 = 0.0;
            _2116 = 0.0;
            _2118 = 0.0;
            _2120 = 0.0;
            _2122 = 0.0;
            _2124 = 0.0;
        }
        else
        {
            float _2115;
            float _2117;
            float _2119;
            float _2121;
            float _2123;
            float _2125;
            float _2265 = 0.0;
            float _2266 = 0.0;
            float _2267 = 0.0;
            float _2268 = 0.0;
            float _2269 = 0.0;
            float _2270 = 0.0;
            uint _2271 = 0u;
            uint _2280;
            bool _2281;
            for (;;)
            {
                _2280 = texelFetch(g_lightClassification, int((((_1973 << 5u) + (_1959 << 9u)) + (_2271 << 2u)) >> 2u)).x;
                _2281 = _2280 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2281)
                {
                    frontier_phi_63_pred = _2270;
                    frontier_phi_63_pred_1 = _2269;
                    frontier_phi_63_pred_2 = _2268;
                    frontier_phi_63_pred_3 = _2267;
                    frontier_phi_63_pred_4 = _2266;
                    frontier_phi_63_pred_5 = _2265;
                }
                else
                {
                    float _2389;
                    float _2390;
                    float _2391;
                    float _2392;
                    float _2393;
                    float _2394;
                    uint _2395;
                    _2389 = _2265;
                    _2390 = _2266;
                    _2391 = _2267;
                    _2392 = _2268;
                    _2393 = _2269;
                    _2394 = _2270;
                    _2395 = _2280;
                    float _2321;
                    float _2322;
                    float _2323;
                    float _2324;
                    float _2325;
                    float _2326;
                    for (;;)
                    {
                        uint _2399 = uint(findLSB(_2395)) + (_2271 << 5u);
                        uint _2396 = (_2395 + 4294967295u) & _2395;
                        uint _2401 = _2399 * 48u;
                        vec4 _2415 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2401)).x, texelFetch(g_PointLightRenderingBuffer, int(_2401 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2401 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2401 + 3u)).x));
                        uint _2421 = (_2399 * 48u) + 4u;
                        vec4 _2434 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2421)).x, texelFetch(g_PointLightRenderingBuffer, int(_2421 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2421 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2421 + 3u)).x));
                        uint _2440 = (_2399 * 48u) + 8u;
                        vec3 _2451 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2440)).x, texelFetch(g_PointLightRenderingBuffer, int(_2440 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2440 + 2u)).x));
                        float _2455 = _2415.x - _1933;
                        float _2456 = _2415.y - _1934;
                        float _2457 = _2415.z - _1935;
                        float _2458 = dot(vec3(_2455, _2456, _2457), vec3(_2455, _2456, _2457));
                        float _2461 = inversesqrt(_2458);
                        float _2470 = 1.0 - (_2458 * _2415.w);
                        float _3561 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
                        float _2471 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
                        float _2472 = sqrt(_2458) * _2434.w;
                        float _2475 = 1.39999997615814208984375 / (_2472 + 1.39999997615814208984375);
                        float _2476 = _2475 * _2475;
                        float _2479 = ((1.0 - _2476) * dot(vec3(_344, _347, _350), vec3(_2461 * _2455, _2461 * _2456, _2461 * _2457))) + _2476;
                        float _2482 = _2472 * _2472;
                        float _2486 = ((isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0))) * _2471) / ((_2482 * 0.699999988079071044921875) + 1.0);
                        float _2490 = (-0.0) - _1933;
                        float _2491 = (-0.0) - _1934;
                        float _2492 = (-0.0) - _1935;
                        float _2496 = inversesqrt(dot(vec3(_2490, _2491, _2492), vec3(_2490, _2491, _2492)));
                        float _2500 = dot(vec3(_344, _347, _350), vec3(_2496 * _2490, _2496 * _2491, _2496 * _2492));
                        float _3577 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
                        float _3588 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
                        float _2504 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
                        float _2508 = (0.5 / (((isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) + 9.9999999392252902907785028219223e-09) + _2504)) * _2504;
                        float _3599 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
                        float _2517 = (((isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * 3.1415927410125732421875) / ((_2482 * 2.1991131305694580078125) + 3.141590118408203125)) * _2471;
                        _2324 = (_2486 * _2434.x) + _2392;
                        _2325 = (_2486 * _2434.y) + _2393;
                        _2326 = (_2486 * _2434.z) + _2394;
                        _2321 = (_2517 * _2451.x) + _2389;
                        _2322 = (_2517 * _2451.y) + _2390;
                        _2323 = (_2517 * _2451.z) + _2391;
                        if (_2396 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2389 = _2321;
                            _2390 = _2322;
                            _2391 = _2323;
                            _2392 = _2324;
                            _2393 = _2325;
                            _2394 = _2326;
                            _2395 = _2396;
                        }
                    }
                    frontier_phi_63_pred = _2326;
                    frontier_phi_63_pred_1 = _2325;
                    frontier_phi_63_pred_2 = _2324;
                    frontier_phi_63_pred_3 = _2323;
                    frontier_phi_63_pred_4 = _2322;
                    frontier_phi_63_pred_5 = _2321;
                }
                _2125 = frontier_phi_63_pred;
                _2123 = frontier_phi_63_pred_1;
                _2121 = frontier_phi_63_pred_2;
                _2119 = frontier_phi_63_pred_3;
                _2117 = frontier_phi_63_pred_4;
                _2115 = frontier_phi_63_pred_5;
                uint _2272 = _2271 + 1u;
                if (_2272 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2265 = _2115;
                    _2266 = _2117;
                    _2267 = _2119;
                    _2268 = _2121;
                    _2269 = _2123;
                    _2270 = _2125;
                    _2271 = _2272;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2114 = _2115;
            _2116 = _2117;
            _2118 = _2119;
            _2120 = _2121;
            _2122 = _2123;
            _2124 = _2125;
        }
        uvec4 _2128 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2129 = _2128.z;
        uint _2131 = (_2129 >> 8u) & 15u;
        float _2236;
        float _2238;
        float _2240;
        float _2242;
        float _2244;
        float _2246;
        if (((4294967295u << _2131) & _1979) == 0u)
        {
            _2236 = _2114;
            _2238 = _2116;
            _2240 = _2118;
            _2242 = _2120;
            _2244 = _2122;
            _2246 = _2124;
        }
        else
        {
            float _2261 = inversesqrt(dot(vec3(_1933, _1934, _1935), vec3(_1933, _1934, _1935)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2131 < ((_2129 >> 12u) & 15u))
            {
                float _2237;
                float _2239;
                float _2241;
                float _2243;
                float _2245;
                float _2247;
                float _2372 = _2114;
                float _2373 = _2116;
                float _2374 = _2118;
                float _2375 = _2120;
                float _2376 = _2122;
                float _2377 = _2124;
                uint _2378 = _2131;
                uint _2387;
                bool _2388;
                for (;;)
                {
                    _2387 = texelFetch(g_lightClassification, int((((_1973 << 5u) + (_1959 << 9u)) + (_2378 << 2u)) >> 2u)).x;
                    _2388 = _2387 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2388)
                    {
                        frontier_phi_69_pred = _2377;
                        frontier_phi_69_pred_1 = _2376;
                        frontier_phi_69_pred_2 = _2375;
                        frontier_phi_69_pred_3 = _2374;
                        frontier_phi_69_pred_4 = _2373;
                        frontier_phi_69_pred_5 = _2372;
                    }
                    else
                    {
                        float _2522;
                        float _2523;
                        float _2524;
                        float _2525;
                        float _2526;
                        float _2527;
                        float _2774;
                        float _2775;
                        float _2776;
                        float _2777;
                        float _2778;
                        float _2779;
                        float _2535 = _2372;
                        float _2536 = _2373;
                        float _2537 = _2374;
                        float _2538 = _2375;
                        float _2539 = _2376;
                        float _2540 = _2377;
                        uint _2541 = _2387;
                        uint _2542;
                        vec4 _2567;
                        float _2568;
                        vec4 _2583;
                        vec3 _2595;
                        vec4 _2611;
                        vec4 _2627;
                        float _2674;
                        bool _2675;
                        for (;;)
                        {
                            uint _2552 = ((_2378 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2541));
                            _2542 = (_2541 + 4294967295u) & _2541;
                            uint _2554 = _2552 * 40u;
                            _2567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2554 + 3u)).x));
                            _2568 = _2567.w;
                            uint _2570 = (_2552 * 40u) + 4u;
                            _2583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2570 + 3u)).x));
                            uint _2585 = (_2552 * 40u) + 8u;
                            _2595 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2585 + 2u)).x));
                            uint _2598 = (_2552 * 40u) + 16u;
                            _2611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2598 + 3u)).x));
                            uint _2614 = (_2552 * 40u) + 20u;
                            _2627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 3u)).x));
                            uint _2630 = (_2552 * 40u) + 24u;
                            vec4 _2643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 3u)).x));
                            uint _2649 = (_2552 * 40u) + 28u;
                            vec4 _2662 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2649)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2649 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2649 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2649 + 3u)).x));
                            _2674 = fma(_1935, _2662.z, fma(_1934, _2662.y, _2662.x * _1933)) + _2662.w;
                            _2675 = !((fma(_1935, _2643.z, fma(_1934, _2643.y, _2643.x * _1933)) + _2643.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2675)
                            {
                                float _2702 = _2567.x - _1933;
                                float _2703 = _2567.y - _1934;
                                float _2704 = _2567.z - _1935;
                                float _2705 = dot(vec3(_2702, _2703, _2704), vec3(_2702, _2703, _2704));
                                float _2708 = inversesqrt(_2705);
                                float _2709 = _2708 * _2702;
                                float _2710 = _2708 * _2703;
                                float _2711 = _2708 * _2704;
                                float _2715 = 1.0 - (_2705 / (_2568 * _2568));
                                float _3610 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
                                float _2716 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
                                float _2720 = sqrt(_2705) * _2583.w;
                                float _2722 = 1.39999997615814208984375 / (_2720 + 1.39999997615814208984375);
                                float _2723 = _2722 * _2722;
                                float _2724 = 1.0 - _2723;
                                float _2726 = (_2724 * dot(vec3(_2709, _2710, _2711), vec3(_344, _347, _350))) + _2723;
                                float _2729 = _2720 * _2720;
                                float _2733 = (fma(_1935, _2611.z, fma(_1934, _2611.y, _2611.x * _1933)) + _2611.w) / _2674;
                                float _2734 = (fma(_1935, _2627.z, fma(_1934, _2627.y, _2627.x * _1933)) + _2627.w) / _2674;
                                float _2738 = 1.0 - dot(vec2(_2733, _2734), vec2(_2733, _2734));
                                float _3626 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
                                float _2739 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
                                float _2740 = _2739 * (((isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0))) * _2716) / ((_2729 * 0.699999988079071044921875) + 1.0));
                                float _2750 = dot(vec3(_344, _347, _350), vec3((-0.0) - (_1933 * _2261), (-0.0) - (_1934 * _2261), (-0.0) - (_1935 * _2261)));
                                float _3637 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
                                float _2758 = (_2724 * dot(vec3(_344, _347, _350), vec3(_2709, _2710, _2711))) + _2723;
                                float _3648 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
                                float _2759 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
                                float _2763 = (0.5 / (((isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) + 9.9999999392252902907785028219223e-09) + _2759)) * _2759;
                                float _3659 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
                                float _2770 = (_2739 * _2716) * (((isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * 3.1415927410125732421875) / ((_2729 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2740 * _2583.z;
                                frontier_phi_75_pred_1 = _2740 * _2583.y;
                                frontier_phi_75_pred_2 = _2740 * _2583.x;
                                frontier_phi_75_pred_3 = _2770 * _2595.z;
                                frontier_phi_75_pred_4 = _2770 * _2595.y;
                                frontier_phi_75_pred_5 = _2770 * _2595.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2779 = frontier_phi_75_pred;
                            _2778 = frontier_phi_75_pred_1;
                            _2777 = frontier_phi_75_pred_2;
                            _2776 = frontier_phi_75_pred_3;
                            _2775 = frontier_phi_75_pred_4;
                            _2774 = frontier_phi_75_pred_5;
                            _2525 = _2777 + _2538;
                            _2526 = _2778 + _2539;
                            _2527 = _2779 + _2540;
                            _2522 = _2774 + _2535;
                            _2523 = _2775 + _2536;
                            _2524 = _2776 + _2537;
                            if (_2542 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2535 = _2522;
                                _2536 = _2523;
                                _2537 = _2524;
                                _2538 = _2525;
                                _2539 = _2526;
                                _2540 = _2527;
                                _2541 = _2542;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2527;
                        frontier_phi_69_pred_1 = _2526;
                        frontier_phi_69_pred_2 = _2525;
                        frontier_phi_69_pred_3 = _2524;
                        frontier_phi_69_pred_4 = _2523;
                        frontier_phi_69_pred_5 = _2522;
                    }
                    _2247 = frontier_phi_69_pred;
                    _2245 = frontier_phi_69_pred_1;
                    _2243 = frontier_phi_69_pred_2;
                    _2241 = frontier_phi_69_pred_3;
                    _2239 = frontier_phi_69_pred_4;
                    _2237 = frontier_phi_69_pred_5;
                    uint _2379 = _2378 + 1u;
                    if (_2379 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2372 = _2237;
                        _2373 = _2239;
                        _2374 = _2241;
                        _2375 = _2243;
                        _2376 = _2245;
                        _2377 = _2247;
                        _2378 = _2379;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2247;
                frontier_phi_57_58_ladder_1 = _2245;
                frontier_phi_57_58_ladder_2 = _2243;
                frontier_phi_57_58_ladder_3 = _2241;
                frontier_phi_57_58_ladder_4 = _2239;
                frontier_phi_57_58_ladder_5 = _2237;
            }
            else
            {
                frontier_phi_57_58_ladder = _2124;
                frontier_phi_57_58_ladder_1 = _2122;
                frontier_phi_57_58_ladder_2 = _2120;
                frontier_phi_57_58_ladder_3 = _2118;
                frontier_phi_57_58_ladder_4 = _2116;
                frontier_phi_57_58_ladder_5 = _2114;
            }
            _2236 = frontier_phi_57_58_ladder_5;
            _2238 = frontier_phi_57_58_ladder_4;
            _2240 = frontier_phi_57_58_ladder_3;
            _2242 = frontier_phi_57_58_ladder_2;
            _2244 = frontier_phi_57_58_ladder_1;
            _2246 = frontier_phi_57_58_ladder;
        }
        float _2251 = isnan(1.0) ? _388 : (isnan(_388) ? 1.0 : min(_388, 1.0));
        _1991 = (_2251 * _2242) + _1552;
        _1993 = (_2251 * _2244) + _1554;
        _1995 = (_2251 * _2246) + _1556;
        _1997 = ((_2236 * 0.039999999105930328369140625) * _2251) + _1804;
        _1999 = ((_2238 * 0.039999999105930328369140625) * _2251) + _1806;
        _2001 = ((_2240 * 0.039999999105930328369140625) * _2251) + _1808;
    }
    else
    {
        _1991 = _1552;
        _1993 = _1554;
        _1995 = _1556;
        _1997 = _1804;
        _1999 = _1806;
        _2001 = _1808;
    }
    uint _2007 = _364 + uint(cbMatDynParam._m0[0u].w);
    float _2015 = ((cbMtdParam._m0[11u].x * _215.x) * cbMtdParam._m0[10u].x) * cbInstanceData._m0[_2007].x;
    float _2018 = ((cbMtdParam._m0[11u].x * _215.y) * cbMtdParam._m0[10u].y) * cbInstanceData._m0[_2007].y;
    float _2021 = ((cbMtdParam._m0[11u].x * _215.z) * cbMtdParam._m0[10u].z) * cbInstanceData._m0[_2007].z;
    float _3675 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3686 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3697 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _2038 = (((isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1991 + ((isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0))) * _388))) + ((_1997 + ((isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))) * _1167)) * cbPerFrame._m0[3u].x)) + _2015;
    float _2040 = (_2018 + ((_1999 + ((isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))) * _1167)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (_1993 + ((isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0))) * _388)));
    float _2042 = (_2021 + ((_2001 + ((isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))) * _1167)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1995 + ((isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0))) * _388)));
    float _3723 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2055 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    uint _2056 = _363 + 6u;
    float _2064 = _322 / cbSceneParam._m0[86u].x;
    float _2065 = _323 / cbSceneParam._m0[86u].y;
    vec4 _2079 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2064, _2065, (log2((isnan(cbSceneParam._m0[77u].w) ? _256 : (isnan(_256) ? cbSceneParam._m0[77u].w : min(_256, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2081 = _2079.x;
    float _2082 = _2079.y;
    float _2083 = _2079.z;
    float _2084 = _2079.w;
    float _2176;
    float _2178;
    float _2180;
    float _2182;
    if (_256 > cbSceneParam._m0[78u].w)
    {
        float _2139 = isnan(_256) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _256 : min(cbSceneParam._m0[80u].w, _256));
        float _2140 = _2139 / _256;
        float _2151 = _2140 * _307;
        float _2152 = _308 * _2140;
        float _2153 = (-0.0) - _2152;
        float _2154 = _2140 * _309;
        float _2156 = (cbSceneParam._m0[77u].w * _2153) / _2139;
        float _2157 = _2156 + cbSceneParam._m0[79u].w;
        float _2158 = cbSceneParam._m0[79u].w - _2152;
        float _2164 = sqrt(((_2151 * _2151) + (_2152 * _2152)) + (_2154 * _2154));
        float _2167 = (1.0 - (cbSceneParam._m0[77u].w / _2139)) * _2164;
        float _2172 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2174 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2334;
        if (abs((_2153 - _2156) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2334 = ((((_2157 > 0.0) ? exp2(_2172 * _2157) : (2.0 - exp2(_2174 * _2157))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2167;
        }
        else
        {
            float _2294 = 1.0 / cbSceneParam._m0[80u].x;
            float _2295 = isnan(_2158) ? _2157 : (isnan(_2157) ? _2158 : max(_2157, _2158));
            float _2296 = isnan(_2158) ? _2157 : (isnan(_2157) ? _2158 : min(_2157, _2158));
            float _2305 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : min(_2295, 0.0));
            float _2306 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : min(_2296, 0.0));
            _2334 = ((abs(_2164 / _2153) * cbSceneParam._m0[80u].y) * ((((_2305 - _2306) * 2.0) - ((exp2(_2172 * (isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0)))) - exp2(_2172 * (isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0))))) * _2294)) - ((exp2(_2174 * _2305) - exp2(_2174 * _2306)) * _2294))) + (_2167 * cbSceneParam._m0[80u].z);
        }
        vec4 _2336 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2064, _2065, 1.0), 0.0);
        float _2345 = exp2((_2334 * (-1.44269502162933349609375)) * (1.0 - _2336.w));
        float _2346 = log2(_2345);
        float _2362 = log2(_2084);
        _2176 = (exp2(_2362 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2346 * cbSceneParam._m0[78u].x)) * _2336.x) / cbSceneParam._m0[78u].x)) + _2081;
        _2178 = (exp2(_2362 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2346 * cbSceneParam._m0[78u].y)) * _2336.y) / cbSceneParam._m0[78u].y)) + _2082;
        _2180 = (exp2(_2362 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2346 * cbSceneParam._m0[78u].z)) * _2336.z) / cbSceneParam._m0[78u].z)) + _2083;
        _2182 = _2345 * _2084;
    }
    else
    {
        _2176 = _2081;
        _2178 = _2082;
        _2180 = _2083;
        _2182 = _2084;
    }
    float _2194 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2195 = _2194 == 3.0;
    float _2197 = log2(_2182);
    float _2201 = exp2(_2197 * cbSceneParam._m0[78u].x);
    float _2202 = exp2(_2197 * cbSceneParam._m0[78u].y);
    float _2203 = exp2(_2197 * cbSceneParam._m0[78u].z);
    float _2204 = _2201 * (isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0)));
    float _2205 = _2202 * (isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0)));
    float _2206 = _2203 * (isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0)));
    float _2215 = (_2194 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2215 * (_2195 ? _2204 : (_2204 + (cbSceneParam._m0[72u].w * _2176)));
    SV_Target.y = _2215 * (_2195 ? _2205 : (_2205 + (cbSceneParam._m0[72u].w * _2178)));
    SV_Target.z = _2215 * (_2195 ? _2206 : (_2206 + (cbSceneParam._m0[72u].w * _2180)));
    SV_Target.w = cbInstanceData._m0[_2056].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2015) * _2055) * _2201) * _2215;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2018) * _2055) * _2202) * _2215;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2021) * _2055) * _2203) * _2215;
    SV_Target_1.w = cbInstanceData._m0[_2056].w;
}


