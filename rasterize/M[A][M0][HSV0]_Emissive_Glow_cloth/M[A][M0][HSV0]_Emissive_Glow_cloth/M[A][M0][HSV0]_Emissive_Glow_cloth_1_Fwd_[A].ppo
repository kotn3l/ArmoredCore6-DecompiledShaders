#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _827;
float _3078;
float _3079;
float _3080;
float _3081;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _167 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _168 = _167 * NORMAL.x;
    float _169 = _167 * NORMAL.y;
    float _170 = _167 * NORMAL.z;
    float _175;
    float _176;
    float _177;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _175 = (-0.0) - _168;
        _176 = (-0.0) - _169;
        _177 = (-0.0) - _170;
    }
    else
    {
        _175 = _168;
        _176 = _169;
        _177 = _170;
    }
    vec4 _197 = texture(sampler2D(M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _203 = _197.x * cbMtdParam._m0[9u].x;
    float _204 = _197.y * cbMtdParam._m0[9u].y;
    float _205 = _197.z * cbMtdParam._m0[9u].z;
    vec4 _226 = texture(sampler2D(M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _228 = _226.x;
    float _229 = _226.y;
    float _230 = _226.z;
    float _231 = cbMtdParam._m0[11u].w * cbMtdParam._m0[12u].x;
    float _232 = _231 * _228;
    float _233 = _231 * _229;
    float _234 = _231 * _230;
    float _235 = isnan(_233) ? _232 : (isnan(_232) ? _233 : max(_232, _233));
    float _236 = isnan(_234) ? _235 : (isnan(_235) ? _234 : max(_235, _234));
    float _239;
    float _241;
    if (_236 < 1.1920928955078125e-07)
    {
        _239 = 0.0;
        _241 = 0.0;
    }
    else
    {
        float _267 = isnan(_233) ? _232 : (isnan(_232) ? _233 : min(_232, _233));
        float _269 = _236 - (isnan(_234) ? _267 : (isnan(_267) ? _234 : min(_267, _234)));
        float _242 = _269 / _236;
        float frontier_phi_3_4_ladder;
        float frontier_phi_3_4_ladder_1;
        if (_269 < 1.1920928955078125e-07)
        {
            frontier_phi_3_4_ladder = _242;
            frontier_phi_3_4_ladder_1 = 0.0;
        }
        else
        {
            float _848;
            if (_236 == _232)
            {
                _848 = ((_231 * (_229 - _230)) / _269) * 0.16666667163372039794921875;
            }
            else
            {
                float frontier_phi_17_12_ladder;
                if (_236 == _233)
                {
                    frontier_phi_17_12_ladder = (((_231 * (_230 - _228)) / _269) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
                }
                else
                {
                    frontier_phi_17_12_ladder = (((_231 * (_228 - _229)) / _269) * 0.16666667163372039794921875) + 0.666666686534881591796875;
                }
                _848 = frontier_phi_17_12_ladder;
            }
            float _853 = (_848 < 0.0) ? (_848 + 1.0) : _848;
            frontier_phi_3_4_ladder = _242;
            frontier_phi_3_4_ladder_1 = _853 - floor(_853);
        }
        _239 = frontier_phi_3_4_ladder_1;
        _241 = frontier_phi_3_4_ladder;
    }
    float _243 = _241 + cbMtdParam._m0[11u].y;
    float _247 = fract(cbMtdParam._m0[11u].z + _239) * 6.0;
    uint _250 = uint(int(floor(_247)));
    float _252 = _247 - float(int(_250));
    float _255 = (1.0 - _243) * _236;
    float _258 = (1.0 - (_252 * _243)) * _236;
    float _262 = (1.0 - ((1.0 - _252) * _243)) * _236;
    float _271;
    float _273;
    float _274;
    if ((_250 == 0u) || (_250 == 6u))
    {
        _271 = _236;
        _273 = _262;
        _274 = _255;
    }
    else
    {
        float frontier_phi_5_6_ladder;
        float frontier_phi_5_6_ladder_1;
        float frontier_phi_5_6_ladder_2;
        if (_250 == 1u)
        {
            frontier_phi_5_6_ladder = _255;
            frontier_phi_5_6_ladder_1 = _236;
            frontier_phi_5_6_ladder_2 = _258;
        }
        else
        {
            float frontier_phi_5_6_ladder_10_ladder;
            float frontier_phi_5_6_ladder_10_ladder_1;
            float frontier_phi_5_6_ladder_10_ladder_2;
            if (_250 == 2u)
            {
                frontier_phi_5_6_ladder_10_ladder = _262;
                frontier_phi_5_6_ladder_10_ladder_1 = _236;
                frontier_phi_5_6_ladder_10_ladder_2 = _255;
            }
            else
            {
                float frontier_phi_5_6_ladder_10_ladder_16_ladder;
                float frontier_phi_5_6_ladder_10_ladder_16_ladder_1;
                float frontier_phi_5_6_ladder_10_ladder_16_ladder_2;
                if (_250 == 3u)
                {
                    frontier_phi_5_6_ladder_10_ladder_16_ladder = _236;
                    frontier_phi_5_6_ladder_10_ladder_16_ladder_1 = _258;
                    frontier_phi_5_6_ladder_10_ladder_16_ladder_2 = _255;
                }
                else
                {
                    bool _1241 = _250 == 4u;
                    frontier_phi_5_6_ladder_10_ladder_16_ladder = _1241 ? _236 : _258;
                    frontier_phi_5_6_ladder_10_ladder_16_ladder_1 = _255;
                    frontier_phi_5_6_ladder_10_ladder_16_ladder_2 = _1241 ? _262 : _236;
                }
                frontier_phi_5_6_ladder_10_ladder = frontier_phi_5_6_ladder_10_ladder_16_ladder;
                frontier_phi_5_6_ladder_10_ladder_1 = frontier_phi_5_6_ladder_10_ladder_16_ladder_1;
                frontier_phi_5_6_ladder_10_ladder_2 = frontier_phi_5_6_ladder_10_ladder_16_ladder_2;
            }
            frontier_phi_5_6_ladder = frontier_phi_5_6_ladder_10_ladder;
            frontier_phi_5_6_ladder_1 = frontier_phi_5_6_ladder_10_ladder_1;
            frontier_phi_5_6_ladder_2 = frontier_phi_5_6_ladder_10_ladder_2;
        }
        _271 = frontier_phi_5_6_ladder_2;
        _273 = frontier_phi_5_6_ladder_1;
        _274 = frontier_phi_5_6_ladder;
    }
    float _279 = inversesqrt(dot(vec3(_175, _176, _177), vec3(_175, _176, _177)));
    float _280 = _279 * _175;
    float _281 = _279 * _176;
    float _282 = _279 * _177;
    float _3110 = isnan(0.0) ? _203 : (isnan(_203) ? 0.0 : max(_203, 0.0));
    float _3121 = isnan(0.0) ? _204 : (isnan(_204) ? 0.0 : max(_204, 0.0));
    float _3132 = isnan(0.0) ? _205 : (isnan(_205) ? 0.0 : max(_205, 0.0));
    float _301 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _343 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _353 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _343);
    float _354 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _343);
    float _355 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _343);
    float _359 = inversesqrt(dot(vec3(_353, _354, _355), vec3(_353, _354, _355)));
    float _360 = _353 * _359;
    float _361 = _354 * _359;
    float _362 = _355 * _359;
    vec4 _367 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _369 = _367.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _499 = sqrt(((_353 * _353) + (_354 * _354)) + (_355 * _355));
        float _505 = (cbMatDynParam._m0[5u].x * _499) + cbMatDynParam._m0[5u].y;
        float _3143 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
        float _506 = isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0));
        float _510 = (cbMatDynParam._m0[5u].z * _499) + cbMatDynParam._m0[5u].w;
        float _3154 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0))) - _506)) + _506) < ((_369 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _382 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _383 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _403 = fma(_282, cbSceneParam._m0[5u].z, fma(_281, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _280));
    float _406 = fma(_282, cbSceneParam._m0[6u].z, fma(_281, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _280));
    float _409 = fma(_282, cbSceneParam._m0[7u].z, fma(_281, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _280));
    uint _422 = uint(roundEven(NORMAL.w)) * 13u;
    uint _423 = _422 + 9u;
    uint _424 = _423 + uint(cbMatDynParam._m0[0u].w);
    float _430 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3110 : (isnan(_3110) ? 1.0 : min(_3110, 1.0)))) * cbInstanceData._m0[_424].x;
    float _431 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3121 : (isnan(_3121) ? 1.0 : min(_3121, 1.0)))) * cbInstanceData._m0[_424].y;
    float _432 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3132 : (isnan(_3132) ? 1.0 : min(_3132, 1.0)))) * cbInstanceData._m0[_424].z;
    float _3165 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _433 = isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0));
    float _3176 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _434 = isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0));
    float _3187 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _435 = isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0));
    vec4 _444 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _382, cbSceneParam._m0[86u].y * _383));
    float _447 = _444.x * TEXCOORD.z;
    float _448 = dot(vec3(_280, _281, _282), vec3(_360, _361, _362));
    float _451 = _448 * 2.0;
    float _456 = (_451 * _280) - _360;
    float _457 = (_451 * _281) - _361;
    float _458 = (_451 * _282) - _362;
    float _480 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _484 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _488 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _826;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _551 = fma(_488, cbModelParam._m0[26u].z, fma(_484, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _480));
        float _555 = fma(_488, cbModelParam._m0[27u].z, fma(_484, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _480));
        float _559 = fma(_488, cbModelParam._m0[28u].z, fma(_484, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _480));
        float _584 = _480 + _280;
        float _585 = _484 + _281;
        float _586 = _488 + _282;
        float _596 = fma(_586, cbModelParam._m0[26u].z, fma(_585, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _584)) - _551;
        float _597 = fma(_586, cbModelParam._m0[27u].z, fma(_585, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _584)) - _555;
        float _598 = fma(_586, cbModelParam._m0[28u].z, fma(_585, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _584)) - _559;
        float _602 = inversesqrt(dot(vec3(_596, _597, _598), vec3(_596, _597, _598)));
        float _615 = ((_602 * _596) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_551 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _616 = ((_602 * _597) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_555 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _617 = ((_602 * _598) / cbModelParam._m0[34u].z) + ((((((_559 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _620 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_615, _616, _617), 0.0);
        vec4 _627 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_615, _616, _617), 0.0);
        vec4 _634 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_615, _616, _617), 0.0);
        vec4 _641 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_615, _616, _617), 0.0);
        float _654 = exp2((_620.w + (-0.5)) * 20.0) * 2.0;
        float _655 = _654 * (_620.x + (-0.5));
        float _656 = _654 * (_620.y + (-0.5));
        float _657 = _654 * (_620.z + (-0.5));
        float _664 = exp2((_627.w + (-0.5)) * 20.0) * 2.0;
        float _665 = _664 * (_627.x + (-0.5));
        float _666 = _664 * (_627.y + (-0.5));
        float _667 = _664 * (_627.z + (-0.5));
        float _674 = exp2((_634.w + (-0.5)) * 20.0) * 2.0;
        float _675 = _674 * (_634.x + (-0.5));
        float _676 = _674 * (_634.y + (-0.5));
        float _677 = _674 * (_634.z + (-0.5));
        float _684 = exp2((_641.w + (-0.5)) * 20.0) * 2.0;
        float _685 = _684 * (_641.x + (-0.5));
        float _686 = _684 * (_641.y + (-0.5));
        float _687 = _684 * (_641.z + (-0.5));
        float _688 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _689 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _690 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        float _691 = _655 * 0.5;
        float _692 = _665 * 0.5;
        float _693 = _675 * 0.5;
        float _694 = dot(vec3(_691, _692, _693), vec3(_691, _692, _693));
        float _699 = (_694 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_694);
        float _708 = (dot(vec3(_280, _281, _282), vec3(_699 * _691, _699 * _692, _699 * _693)) + 1.0) * 0.5;
        float _3213 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _718 = sqrt(((_692 * _692) + (_691 * _691)) + (_693 * _693)) / (_688 + 9.9999997473787516355514526367188e-06);
        float _3224 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _719 = isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0));
        float _720 = _719 * 2.0;
        float _724 = (1.0 - _719) / (_719 + 1.0);
        float _3235 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _725 = isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0));
        float _734 = ((((1.0 - _725) * (_720 + 2.0)) * exp2(log2(isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0))) * (_720 + 1.0))) + _725) * _688;
        float _735 = _656 * 0.5;
        float _736 = _666 * 0.5;
        float _737 = _676 * 0.5;
        float _738 = dot(vec3(_735, _736, _737), vec3(_735, _736, _737));
        float _743 = (_738 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_738);
        float _751 = (dot(vec3(_280, _281, _282), vec3(_743 * _735, _743 * _736, _743 * _737)) + 1.0) * 0.5;
        float _3246 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _760 = sqrt(((_736 * _736) + (_735 * _735)) + (_737 * _737)) / (_689 + 9.9999997473787516355514526367188e-06);
        float _3257 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0));
        float _762 = _761 * 2.0;
        float _766 = (1.0 - _761) / (_761 + 1.0);
        float _3268 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0));
        float _776 = ((((1.0 - _767) * (_762 + 2.0)) * exp2(log2(isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0))) * (_762 + 1.0))) + _767) * _689;
        float _777 = _657 * 0.5;
        float _778 = _667 * 0.5;
        float _779 = _677 * 0.5;
        float _780 = dot(vec3(_777, _778, _779), vec3(_777, _778, _779));
        float _785 = (_780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_780);
        float _793 = (dot(vec3(_280, _281, _282), vec3(_785 * _777, _785 * _778, _785 * _779)) + 1.0) * 0.5;
        float _3279 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _802 = sqrt(((_778 * _778) + (_777 * _777)) + (_779 * _779)) / (_690 + 9.9999997473787516355514526367188e-06);
        float _3290 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
        float _804 = _803 * 2.0;
        float _808 = (1.0 - _803) / (_803 + 1.0);
        float _3301 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
        float _818 = ((((1.0 - _809) * (_804 + 2.0)) * exp2(log2(isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0))) * (_804 + 1.0))) + _809) * _690;
        _826 = _657;
        _828 = _656;
        _829 = _655;
        _830 = _667;
        _831 = _666;
        _832 = _665;
        _833 = _677;
        _834 = _676;
        _835 = _675;
        _836 = _690;
        _837 = _689;
        _838 = _688;
        _839 = cbModelParam._m0[36u].z * (isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0)));
        _840 = cbModelParam._m0[36u].z * (isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0)));
        _841 = cbModelParam._m0[36u].z * (isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0)));
    }
    else
    {
        _826 = _827;
        _828 = _827;
        _829 = _827;
        _830 = _827;
        _831 = _827;
        _832 = _827;
        _833 = _827;
        _834 = _827;
        _835 = _827;
        _836 = _827;
        _837 = _827;
        _838 = _827;
        _839 = 0.0;
        _840 = 0.0;
        _841 = 0.0;
    }
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _888 = fma(_488, cbModelParam._m0[30u].z, fma(_484, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _480));
        float _892 = fma(_488, cbModelParam._m0[31u].z, fma(_484, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _480));
        float _896 = fma(_488, cbModelParam._m0[32u].z, fma(_484, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _480));
        float _919 = _480 + _280;
        float _920 = _484 + _281;
        float _921 = _488 + _282;
        float _931 = fma(_921, cbModelParam._m0[30u].z, fma(_920, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _919)) - _888;
        float _932 = fma(_921, cbModelParam._m0[31u].z, fma(_920, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _919)) - _892;
        float _933 = fma(_921, cbModelParam._m0[32u].z, fma(_920, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _919)) - _896;
        float _937 = inversesqrt(dot(vec3(_931, _932, _933), vec3(_931, _932, _933)));
        float _950 = ((_937 * _931) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_888 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _951 = ((_937 * _932) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_892 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_937 * _933) / cbModelParam._m0[35u].z) + ((((((_896 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        float _987 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_954.x + (-0.5));
        float _989 = _987 * (_954.y + (-0.5));
        float _990 = _987 * (_954.z + (-0.5));
        float _997 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_961.x + (-0.5));
        float _999 = _997 * (_961.y + (-0.5));
        float _1000 = _997 * (_961.z + (-0.5));
        float _1007 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_968.x + (-0.5));
        float _1009 = _1007 * (_968.y + (-0.5));
        float _1010 = _1007 * (_968.z + (-0.5));
        float _1017 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_975.x + (-0.5));
        float _1019 = _1017 * (_975.y + (-0.5));
        float _1020 = _1017 * (_975.z + (-0.5));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = _988 * 0.5;
        float _1025 = _998 * 0.5;
        float _1026 = _1008 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1040 = (dot(vec3(_280, _281, _282), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _3342 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1049 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3353 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
        float _1051 = _1050 * 2.0;
        float _1055 = (1.0 - _1050) / (_1050 + 1.0);
        float _3364 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
        float _1065 = ((((1.0 - _1056) * (_1051 + 2.0)) * exp2(log2(isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0))) * (_1051 + 1.0))) + _1056) * _1021;
        float _1066 = _989 * 0.5;
        float _1067 = _999 * 0.5;
        float _1068 = _1009 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1082 = (dot(vec3(_280, _281, _282), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _3375 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1091 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3386 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _3397 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))) * (_1093 + 1.0))) + _1098) * _1022;
        float _1108 = _990 * 0.5;
        float _1109 = _1000 * 0.5;
        float _1110 = _1010 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_280, _281, _282), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3408 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3419 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3430 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))) * (_1135 + 1.0))) + _1140) * _1023;
        _1157 = _990;
        _1158 = _989;
        _1159 = _988;
        _1160 = _1000;
        _1161 = _999;
        _1162 = _998;
        _1163 = _1010;
        _1164 = _1009;
        _1165 = _1008;
        _1166 = _1023;
        _1167 = _1022;
        _1168 = _1021;
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0)));
        _1170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
        _1171 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
    }
    else
    {
        _1157 = _827;
        _1158 = _827;
        _1159 = _827;
        _1160 = _827;
        _1161 = _827;
        _1162 = _827;
        _1163 = _827;
        _1164 = _827;
        _1165 = _827;
        _1166 = _827;
        _1167 = _827;
        _1168 = _827;
        _1169 = 0.0;
        _1170 = 0.0;
        _1171 = 0.0;
    }
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _839)) + _839;
    float _1182 = (cbModelParam._m0[1u].x * (_1170 - _840)) + _840;
    float _1183 = (cbModelParam._m0[1u].x * (_1171 - _841)) + _841;
    float _1204 = fma(_1183, cbSceneParam._m0[89u].z, fma(_1182, cbSceneParam._m0[89u].y, _1181 * cbSceneParam._m0[89u].x));
    float _1207 = fma(_1183, cbSceneParam._m0[90u].z, fma(_1182, cbSceneParam._m0[90u].y, _1181 * cbSceneParam._m0[90u].x));
    float _1210 = fma(_1183, cbSceneParam._m0[91u].z, fma(_1182, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1181));
    float _1225 = _456 * 0.5;
    float _1226 = _457 * 0.5;
    float _1227 = _458 * 0.5;
    float _1228 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1159, _1162, _1165, _1168));
    float _1231 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1158, _1161, _1164, _1167));
    float _1234 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1270;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1243 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_826, _830, _833, _836));
        float _1247 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_828, _831, _834, _837));
        float _1251 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_829, _832, _835, _838));
        float _1258 = dot(vec4(cbModelParam._m0[39u]), vec4(_1225, _1226, _1227, 1.0));
        _1270 = dot(vec3(isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)), isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1258) ? 0.0 : (isnan(0.0) ? _1258 : max(0.0, _1258))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1270 = 1.0;
    }
    float _1281;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1272 = dot(vec4(cbModelParam._m0[40u]), vec4(_1225, _1226, _1227, 1.0));
        _1281 = dot(vec3(isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)), isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)), isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1272) ? 0.0 : (isnan(0.0) ? _1272 : max(0.0, _1272))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1281 = 1.0;
    }
    float _1285 = (_1281 * cbModelParam._m0[1u].x) + (_1270 * (1.0 - cbModelParam._m0[1u].x));
    float _1294 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1376;
    float _1378;
    float _1380;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1343 = fma(_488, cbModelParam._m0[13u].z, fma(_484, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _480)) + cbModelParam._m0[13u].w;
        float _1347 = fma(_488, cbModelParam._m0[14u].z, fma(_484, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _480)) + cbModelParam._m0[14u].w;
        float _1351 = fma(_488, cbModelParam._m0[15u].z, fma(_484, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _480)) + cbModelParam._m0[15u].w;
        float _1354 = fma(_458, cbModelParam._m0[13u].z, fma(_457, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _456));
        float _1357 = fma(_458, cbModelParam._m0[14u].z, fma(_457, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _456));
        float _1360 = fma(_458, cbModelParam._m0[15u].z, fma(_457, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _456));
        float _1386;
        if (_1354 > 0.0)
        {
            _1386 = abs((1.0 - _1343) / _1354);
        }
        else
        {
            float frontier_phi_32_30_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_32_30_ladder = abs((_1343 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_32_30_ladder = 5000.0;
            }
            _1386 = frontier_phi_32_30_ladder;
        }
        float _1592;
        if (_1357 > 0.0)
        {
            _1592 = abs((1.0 - _1347) / _1357);
        }
        else
        {
            float frontier_phi_41_37_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_41_37_ladder = abs((_1347 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_41_37_ladder = 5000.0;
            }
            _1592 = frontier_phi_41_37_ladder;
        }
        float _1781;
        if (_1360 > 0.0)
        {
            _1781 = abs((1.0 - _1351) / _1360);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1360 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1351 + 1.0) / _1360);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _1781 = frontier_phi_53_48_ladder;
        }
        float _1783 = isnan(_1592) ? _1386 : (isnan(_1386) ? _1592 : min(_1386, _1592));
        float _1784 = isnan(_1781) ? _1783 : (isnan(_1783) ? _1781 : min(_1783, _1781));
        float _1788 = (_1784 * _1354) + _1343;
        float _1789 = (_1784 * _1357) + _1347;
        float _1790 = (_1784 * _1360) + _1351;
        float _1791 = _1784 * 9.9999997473787516355514526367188e-05;
        float _1793 = (-1.0) - _1791;
        float _1795 = _1791 + 1.0;
        float frontier_phi_31_53_ladder;
        float frontier_phi_31_53_ladder_1;
        float frontier_phi_31_53_ladder_2;
        if ((_1790 > _1795) || ((_1790 < _1793) || ((_1789 > _1795) || ((_1789 < _1793) || ((_1788 < _1793) || (_1788 > _1795))))))
        {
            frontier_phi_31_53_ladder = 0.0;
            frontier_phi_31_53_ladder_1 = 0.0;
            frontier_phi_31_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1887 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1790, cbModelParam._m0[9u].z, fma(_1789, cbModelParam._m0[9u].y, _1788 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1790, cbModelParam._m0[10u].z, fma(_1789, cbModelParam._m0[10u].y, _1788 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1790, cbModelParam._m0[11u].z, fma(_1789, cbModelParam._m0[11u].y, _1788 * cbModelParam._m0[11u].x))), _1294);
            frontier_phi_31_53_ladder = _1887.z * cbModelParam._m0[1u].y;
            frontier_phi_31_53_ladder_1 = _1887.y * cbModelParam._m0[1u].y;
            frontier_phi_31_53_ladder_2 = _1887.x * cbModelParam._m0[1u].y;
        }
        _1376 = frontier_phi_31_53_ladder_2;
        _1378 = frontier_phi_31_53_ladder_1;
        _1380 = frontier_phi_31_53_ladder;
    }
    else
    {
        vec4 _1364 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_456, _457, _458), _1294);
        _1376 = _1364.x * cbModelParam._m0[1u].y;
        _1378 = _1364.y * cbModelParam._m0[1u].y;
        _1380 = _1364.z * cbModelParam._m0[1u].y;
    }
    float _1383 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1476;
    float _1478;
    float _1480;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1440 = fma(_488, cbModelParam._m0[21u].z, fma(_484, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _480)) + cbModelParam._m0[21u].w;
        float _1444 = fma(_488, cbModelParam._m0[22u].z, fma(_484, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _480)) + cbModelParam._m0[22u].w;
        float _1448 = fma(_488, cbModelParam._m0[23u].z, fma(_484, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _480)) + cbModelParam._m0[23u].w;
        float _1451 = fma(_458, cbModelParam._m0[21u].z, fma(_457, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _456));
        float _1454 = fma(_458, cbModelParam._m0[22u].z, fma(_457, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _456));
        float _1457 = fma(_458, cbModelParam._m0[23u].z, fma(_457, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _456));
        float _1597;
        if (_1451 > 0.0)
        {
            _1597 = abs((1.0 - _1440) / _1451);
        }
        else
        {
            float frontier_phi_43_39_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_43_39_ladder = abs((_1440 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_43_39_ladder = 5000.0;
            }
            _1597 = frontier_phi_43_39_ladder;
        }
        float _1808;
        if (_1454 > 0.0)
        {
            _1808 = abs((1.0 - _1444) / _1454);
        }
        else
        {
            float frontier_phi_55_50_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_55_50_ladder = abs((_1444 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_55_50_ladder = 5000.0;
            }
            _1808 = frontier_phi_55_50_ladder;
        }
        float _1959;
        if (_1457 > 0.0)
        {
            _1959 = abs((1.0 - _1448) / _1457);
        }
        else
        {
            float frontier_phi_64_61_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_64_61_ladder = abs((_1448 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_64_61_ladder = 5000.0;
            }
            _1959 = frontier_phi_64_61_ladder;
        }
        float _1961 = isnan(_1808) ? _1597 : (isnan(_1597) ? _1808 : min(_1597, _1808));
        float _1962 = isnan(_1959) ? _1961 : (isnan(_1961) ? _1959 : min(_1961, _1959));
        float _1966 = (_1962 * _1451) + _1440;
        float _1967 = (_1962 * _1454) + _1444;
        float _1968 = (_1962 * _1457) + _1448;
        float _1969 = _1962 * 9.9999997473787516355514526367188e-05;
        float _1970 = (-1.0) - _1969;
        float _1972 = _1969 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_1968 > _1972) || ((_1968 < _1970) || ((_1967 > _1972) || ((_1967 < _1970) || ((_1966 < _1970) || (_1966 > _1972))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2195 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1968, cbModelParam._m0[17u].z, fma(_1967, cbModelParam._m0[17u].y, _1966 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1968, cbModelParam._m0[18u].z, fma(_1967, cbModelParam._m0[18u].y, _1966 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1968, cbModelParam._m0[19u].z, fma(_1967, cbModelParam._m0[19u].y, _1966 * cbModelParam._m0[19u].x))), _1383);
            frontier_phi_40_64_ladder = _2195.y * cbModelParam._m0[1u].z;
            frontier_phi_40_64_ladder_1 = _2195.x * cbModelParam._m0[1u].z;
            frontier_phi_40_64_ladder_2 = _2195.z * cbModelParam._m0[1u].z;
        }
        _1476 = frontier_phi_40_64_ladder_1;
        _1478 = frontier_phi_40_64_ladder;
        _1480 = frontier_phi_40_64_ladder_2;
    }
    else
    {
        vec4 _1460 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_456, _457, _458), _1383);
        _1476 = _1460.x * cbModelParam._m0[1u].z;
        _1478 = _1460.y * cbModelParam._m0[1u].z;
        _1480 = _1460.z * cbModelParam._m0[1u].z;
    }
    float _1492 = _447 * 0.01200000010430812835693359375;
    float _1494 = _1492 * ((cbModelParam._m0[1u].w * (_1476 - _1376)) + _1376);
    float _1495 = _1492 * ((cbModelParam._m0[1u].w * (_1478 - _1378)) + _1378);
    float _1496 = _1492 * ((cbModelParam._m0[1u].w * (_1480 - _1380)) + _1380);
    float _1499 = fma(_1496, cbSceneParam._m0[89u].z, fma(_1495, cbSceneParam._m0[89u].y, _1494 * cbSceneParam._m0[89u].x));
    float _1502 = fma(_1496, cbSceneParam._m0[90u].z, fma(_1495, cbSceneParam._m0[90u].y, _1494 * cbSceneParam._m0[90u].x));
    float _1505 = fma(_1496, cbSceneParam._m0[91u].z, fma(_1495, cbSceneParam._m0[91u].y, _1494 * cbSceneParam._m0[91u].x));
    uvec4 _1515 = floatBitsToUint(cbInstanceData._m0[_422 + 5u]);
    uint _1517 = _1515.x * 14u;
    uint _1518 = _1517 + 13u;
    float _1525 = _447 + (-1.0);
    float _1531 = (cbLight._m0[_1518].x * _1525) + 1.0;
    float _1532 = (cbLight._m0[_1518].y * _1525) + 1.0;
    float _1533 = (cbLight._m0[_1518].z * _1525) + 1.0;
    float _1534 = (cbLight._m0[_1518].w * _1525) + 1.0;
    uint _1535 = _1517 + 5u;
    float _1541 = isnan(1.0) ? _1532 : (isnan(_1532) ? 1.0 : min(_1532, 1.0));
    uint _1545 = _1517 + 4u;
    float _1551 = isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0));
    uint _1555 = _1517 | 1u;
    float _1566 = dot(vec3(cbLight._m0[_1517].xyz), vec3(_280, _281, _282));
    float _1569 = dot(vec3(cbLight._m0[_1555].xyz), vec3(_280, _281, _282));
    float _3566 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
    float _3577 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
    float _1574 = (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) * 0.3183098733425140380859375;
    float _1576 = (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * 0.3183098733425140380859375;
    float _1583 = ((cbLight._m0[_1535].x * _1541) * _1576) + ((cbLight._m0[_1545].x * _1551) * _1574);
    float _1584 = ((_1541 * cbLight._m0[_1535].y) * _1576) + ((_1551 * cbLight._m0[_1545].y) * _1574);
    float _1585 = ((_1541 * cbLight._m0[_1535].z) * _1576) + ((_1551 * cbLight._m0[_1545].z) * _1574);
    uvec4 _1589 = floatBitsToUint(cbLight._m0[_1517 + 12u]);
    bool _1591 = _1589.x == 0u;
    float _1602;
    float _1604;
    float _1606;
    if (_1591)
    {
        _1602 = _1583;
        _1604 = _1584;
        _1606 = _1585;
    }
    else
    {
        uint _1610 = _1517 + 6u;
        float _1626 = (dot(vec3(cbLight._m0[_1517 + 2u].xyz), vec3(_280, _281, _282)) * 0.5) + 0.5;
        float _1627 = _1626 * _1626;
        float _3588 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1629 = isnan(1.0) ? _1533 : (isnan(_1533) ? 1.0 : min(_1533, 1.0));
        _1602 = (((cbLight._m0[_1610].x * 0.3183098733425140380859375) * _1628) * _1629) + _1583;
        _1604 = (((cbLight._m0[_1610].y * 0.3183098733425140380859375) * _1628) * _1629) + _1584;
        _1606 = (((cbLight._m0[_1610].z * 0.3183098733425140380859375) * _1628) * _1629) + _1585;
    }
    bool _1609 = _1589.y == 0u;
    float _1647;
    float _1649;
    float _1651;
    if (_1609)
    {
        _1647 = _1602;
        _1649 = _1604;
        _1651 = _1606;
    }
    else
    {
        uint _1752 = _1517 + 7u;
        float _1768 = (dot(vec3(cbLight._m0[_1517 + 3u].xyz), vec3(_280, _281, _282)) * 0.5) + 0.5;
        float _1769 = _1768 * _1768;
        float _3604 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _1771 = isnan(1.0) ? _1534 : (isnan(_1534) ? 1.0 : min(_1534, 1.0));
        _1647 = (((cbLight._m0[_1752].x * 0.3183098733425140380859375) * _1770) * _1771) + _1602;
        _1649 = (((cbLight._m0[_1752].y * 0.3183098733425140380859375) * _1770) * _1771) + _1604;
        _1651 = (((cbLight._m0[_1752].z * 0.3183098733425140380859375) * _1770) * _1771) + _1606;
    }
    uint _1653 = _1517 + 8u;
    float _1659 = cbLight._m0[_1517].x + _360;
    float _1660 = cbLight._m0[_1517].y + _361;
    float _1661 = cbLight._m0[_1517].z + _362;
    float _1665 = inversesqrt(dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661)));
    float _1669 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1517].xyz));
    float _3620 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
    float _1672 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _3631 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _1673 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _1674 = dot(vec3(cbLight._m0[_1517].xyz), vec3(_1659 * _1665, _1660 * _1665, _1661 * _1665));
    float _3642 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
    float _1685 = (exp2(log2(1.0 - (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1691 = (0.5 / ((_1672 + 9.9999999392252902907785028219223e-09) + _1673)) * _1672;
    float _3653 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
    float _1693 = (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * 0.31831014156341552734375;
    uint _1704 = _1517 + 9u;
    float _1710 = cbLight._m0[_1555].x + _360;
    float _1711 = cbLight._m0[_1555].y + _361;
    float _1712 = cbLight._m0[_1555].z + _362;
    float _1716 = inversesqrt(dot(vec3(_1710, _1711, _1712), vec3(_1710, _1711, _1712)));
    float _1720 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1555].xyz));
    float _3664 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
    float _1723 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _1724 = dot(vec3(cbLight._m0[_1555].xyz), vec3(_1710 * _1716, _1711 * _1716, _1712 * _1716));
    float _3675 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
    float _1733 = (exp2(log2(1.0 - (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1737 = (0.5 / ((_1723 + 9.9999999392252902907785028219223e-09) + _1673)) * _1723;
    float _3686 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _1739 = (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * 0.31831014156341552734375;
    float _1749 = (((_1733 * cbLight._m0[_1704].x) * _1739) * _1541) + (((_1685 * cbLight._m0[_1653].x) * _1693) * _1551);
    float _1750 = (((_1733 * cbLight._m0[_1704].y) * _1739) * _1541) + (((_1685 * cbLight._m0[_1653].y) * _1693) * _1551);
    float _1751 = (((_1733 * cbLight._m0[_1704].z) * _1739) * _1541) + (((_1685 * cbLight._m0[_1653].z) * _1693) * _1551);
    float _1813;
    float _1815;
    float _1817;
    if (_1591)
    {
        _1813 = _1749;
        _1815 = _1750;
        _1817 = _1751;
    }
    else
    {
        uint _1819 = _1517 + 10u;
        uint _1825 = _1517 + 2u;
        float _1831 = cbLight._m0[_1825].x + _360;
        float _1832 = cbLight._m0[_1825].y + _361;
        float _1833 = cbLight._m0[_1825].z + _362;
        float _1837 = inversesqrt(dot(vec3(_1831, _1832, _1833), vec3(_1831, _1832, _1833)));
        float _1841 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1825].xyz));
        float _3697 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1844 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1845 = dot(vec3(cbLight._m0[_1825].xyz), vec3(_1831 * _1837, _1832 * _1837, _1833 * _1837));
        float _3708 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1854 = (exp2(log2(1.0 - (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1858 = (0.5 / ((_1844 + 9.9999999392252902907785028219223e-09) + _1673)) * _1844;
        float _3719 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1860 = (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * 0.31831014156341552734375;
        float _1861 = isnan(1.0) ? _1533 : (isnan(_1533) ? 1.0 : min(_1533, 1.0));
        _1813 = (((_1854 * cbLight._m0[_1819].x) * _1860) * _1861) + _1749;
        _1815 = (((_1854 * cbLight._m0[_1819].y) * _1860) * _1861) + _1750;
        _1817 = (((_1854 * cbLight._m0[_1819].z) * _1860) * _1861) + _1751;
    }
    float _1896;
    float _1898;
    float _1900;
    if (_1609)
    {
        _1896 = _1813;
        _1898 = _1815;
        _1900 = _1817;
    }
    else
    {
        uint _1907 = _1517 + 11u;
        uint _1913 = _1517 + 3u;
        float _1919 = cbLight._m0[_1913].x + _360;
        float _1920 = cbLight._m0[_1913].y + _361;
        float _1921 = cbLight._m0[_1913].z + _362;
        float _1925 = inversesqrt(dot(vec3(_1919, _1920, _1921), vec3(_1919, _1920, _1921)));
        float _1929 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1913].xyz));
        float _3735 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        float _1932 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1933 = dot(vec3(cbLight._m0[_1913].xyz), vec3(_1919 * _1925, _1920 * _1925, _1921 * _1925));
        float _3746 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1942 = (exp2(log2(1.0 - (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1946 = (0.5 / ((_1932 + 9.9999999392252902907785028219223e-09) + _1673)) * _1932;
        float _3757 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
        float _1948 = (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * 0.31831014156341552734375;
        float _1949 = isnan(1.0) ? _1534 : (isnan(_1534) ? 1.0 : min(_1534, 1.0));
        _1896 = (((_1942 * cbLight._m0[_1907].x) * _1948) * _1949) + _1813;
        _1898 = (((_1942 * cbLight._m0[_1907].y) * _1948) * _1949) + _1815;
        _1900 = (((_1942 * cbLight._m0[_1907].z) * _1948) * _1949) + _1817;
    }
    float _2083;
    float _2085;
    float _2087;
    float _2089;
    float _2091;
    float _2093;
    if (_1515.y == 0u)
    {
        float _2024 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2025 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2024;
        float _2026 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2024;
        float _2027 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2024;
        uvec4 _2039 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2040 = _2039.x;
        uint _2051 = uint((float(_2039.y) * floor(float(uint(cbSceneParam._m0[85u].y * _383) / _2040))) + floor(float(uint(cbSceneParam._m0[85u].x * _382) / _2040)));
        float _2061 = (log2(_2027 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2062 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        uint _2065 = uint(isnan(14.0) ? _2062 : (isnan(_2062) ? 14.0 : min(_2062, 14.0)));
        uvec4 _2070 = texelFetch(g_lightClusterGridBuffer, int(((_2065 << 2u) + (_2051 << 6u)) >> 2u));
        uint _2071 = _2070.x;
        uint _2072 = _2039.z;
        float _2200;
        float _2202;
        float _2204;
        float _2206;
        float _2208;
        float _2210;
        if (((((1u << ((_2072 >> 4u) & 15u)) + 4294967295u) & _2071) == 0u) || ((_2072 & 240u) == 0u))
        {
            _2200 = 0.0;
            _2202 = 0.0;
            _2204 = 0.0;
            _2206 = 0.0;
            _2208 = 0.0;
            _2210 = 0.0;
        }
        else
        {
            float _2201;
            float _2203;
            float _2205;
            float _2207;
            float _2209;
            float _2211;
            float _2360 = 0.0;
            float _2361 = 0.0;
            float _2362 = 0.0;
            float _2363 = 0.0;
            float _2364 = 0.0;
            float _2365 = 0.0;
            uint _2366 = 0u;
            uint _2375;
            bool _2376;
            for (;;)
            {
                _2375 = texelFetch(g_lightClassification, int((((_2065 << 5u) + (_2051 << 9u)) + (_2366 << 2u)) >> 2u)).x;
                _2376 = _2375 == 0u;
                float frontier_phi_81_pred;
                float frontier_phi_81_pred_1;
                float frontier_phi_81_pred_2;
                float frontier_phi_81_pred_3;
                float frontier_phi_81_pred_4;
                float frontier_phi_81_pred_5;
                if (_2376)
                {
                    frontier_phi_81_pred = _2365;
                    frontier_phi_81_pred_1 = _2364;
                    frontier_phi_81_pred_2 = _2363;
                    frontier_phi_81_pred_3 = _2362;
                    frontier_phi_81_pred_4 = _2361;
                    frontier_phi_81_pred_5 = _2360;
                }
                else
                {
                    float _2505;
                    float _2506;
                    float _2507;
                    float _2508;
                    float _2509;
                    float _2510;
                    uint _2511;
                    _2505 = _2360;
                    _2506 = _2361;
                    _2507 = _2362;
                    _2508 = _2363;
                    _2509 = _2364;
                    _2510 = _2365;
                    _2511 = _2375;
                    float _2432;
                    float _2433;
                    float _2434;
                    float _2435;
                    float _2436;
                    float _2437;
                    for (;;)
                    {
                        uint _2515 = uint(findLSB(_2511)) + (_2366 << 5u);
                        uint _2512 = (_2511 + 4294967295u) & _2511;
                        uint _2517 = _2515 * 48u;
                        vec4 _2531 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2517)).x, texelFetch(g_PointLightRenderingBuffer, int(_2517 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2517 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2517 + 3u)).x));
                        uint _2537 = (_2515 * 48u) + 4u;
                        vec4 _2550 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2537)).x, texelFetch(g_PointLightRenderingBuffer, int(_2537 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2537 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2537 + 3u)).x));
                        uint _2556 = (_2515 * 48u) + 8u;
                        vec3 _2567 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2556)).x, texelFetch(g_PointLightRenderingBuffer, int(_2556 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2556 + 2u)).x));
                        float _2571 = _2531.x - _2025;
                        float _2572 = _2531.y - _2026;
                        float _2573 = _2531.z - _2027;
                        float _2574 = dot(vec3(_2571, _2572, _2573), vec3(_2571, _2572, _2573));
                        float _2577 = inversesqrt(_2574);
                        float _2586 = 1.0 - (_2574 * _2531.w);
                        float _3783 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
                        float _2587 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
                        float _2588 = sqrt(_2574) * _2550.w;
                        float _2591 = 1.39999997615814208984375 / (_2588 + 1.39999997615814208984375);
                        float _2592 = _2591 * _2591;
                        float _2595 = ((1.0 - _2592) * dot(vec3(_403, _406, _409), vec3(_2577 * _2571, _2577 * _2572, _2577 * _2573))) + _2592;
                        float _2598 = _2588 * _2588;
                        float _2602 = ((isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0))) * _2587) / ((_2598 * 0.699999988079071044921875) + 1.0);
                        float _2606 = (-0.0) - _2025;
                        float _2607 = (-0.0) - _2026;
                        float _2608 = (-0.0) - _2027;
                        float _2612 = inversesqrt(dot(vec3(_2606, _2607, _2608), vec3(_2606, _2607, _2608)));
                        float _2616 = dot(vec3(_403, _406, _409), vec3(_2612 * _2606, _2612 * _2607, _2612 * _2608));
                        float _3799 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
                        float _3810 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
                        float _2620 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
                        float _2624 = (0.5 / (((isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) + 9.9999999392252902907785028219223e-09) + _2620)) * _2620;
                        float _3821 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
                        float _2633 = (((isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * 3.1415927410125732421875) / ((_2598 * 2.1991131305694580078125) + 3.141590118408203125)) * _2587;
                        _2435 = (_2602 * _2550.x) + _2508;
                        _2436 = (_2602 * _2550.y) + _2509;
                        _2437 = (_2602 * _2550.z) + _2510;
                        _2432 = (_2633 * _2567.x) + _2505;
                        _2433 = (_2633 * _2567.y) + _2506;
                        _2434 = (_2633 * _2567.z) + _2507;
                        if (_2512 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2505 = _2432;
                            _2506 = _2433;
                            _2507 = _2434;
                            _2508 = _2435;
                            _2509 = _2436;
                            _2510 = _2437;
                            _2511 = _2512;
                        }
                    }
                    frontier_phi_81_pred = _2437;
                    frontier_phi_81_pred_1 = _2436;
                    frontier_phi_81_pred_2 = _2435;
                    frontier_phi_81_pred_3 = _2434;
                    frontier_phi_81_pred_4 = _2433;
                    frontier_phi_81_pred_5 = _2432;
                }
                _2211 = frontier_phi_81_pred;
                _2209 = frontier_phi_81_pred_1;
                _2207 = frontier_phi_81_pred_2;
                _2205 = frontier_phi_81_pred_3;
                _2203 = frontier_phi_81_pred_4;
                _2201 = frontier_phi_81_pred_5;
                uint _2367 = _2366 + 1u;
                if (_2367 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2360 = _2201;
                    _2361 = _2203;
                    _2362 = _2205;
                    _2363 = _2207;
                    _2364 = _2209;
                    _2365 = _2211;
                    _2366 = _2367;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2200 = _2201;
            _2202 = _2203;
            _2204 = _2205;
            _2206 = _2207;
            _2208 = _2209;
            _2210 = _2211;
        }
        uvec4 _2214 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2215 = _2214.z;
        uint _2217 = (_2215 >> 8u) & 15u;
        float _2331;
        float _2333;
        float _2335;
        float _2337;
        float _2339;
        float _2341;
        if (((4294967295u << _2217) & _2071) == 0u)
        {
            _2331 = _2200;
            _2333 = _2202;
            _2335 = _2204;
            _2337 = _2206;
            _2339 = _2208;
            _2341 = _2210;
        }
        else
        {
            float _2356 = inversesqrt(dot(vec3(_2025, _2026, _2027), vec3(_2025, _2026, _2027)));
            float frontier_phi_73_74_ladder;
            float frontier_phi_73_74_ladder_1;
            float frontier_phi_73_74_ladder_2;
            float frontier_phi_73_74_ladder_3;
            float frontier_phi_73_74_ladder_4;
            float frontier_phi_73_74_ladder_5;
            if (_2217 < ((_2215 >> 12u) & 15u))
            {
                float _2332;
                float _2334;
                float _2336;
                float _2338;
                float _2340;
                float _2342;
                float _2488 = _2200;
                float _2489 = _2202;
                float _2490 = _2204;
                float _2491 = _2206;
                float _2492 = _2208;
                float _2493 = _2210;
                uint _2494 = _2217;
                uint _2503;
                bool _2504;
                for (;;)
                {
                    _2503 = texelFetch(g_lightClassification, int((((_2065 << 5u) + (_2051 << 9u)) + (_2494 << 2u)) >> 2u)).x;
                    _2504 = _2503 == 0u;
                    float frontier_phi_92_pred;
                    float frontier_phi_92_pred_1;
                    float frontier_phi_92_pred_2;
                    float frontier_phi_92_pred_3;
                    float frontier_phi_92_pred_4;
                    float frontier_phi_92_pred_5;
                    if (_2504)
                    {
                        frontier_phi_92_pred = _2492;
                        frontier_phi_92_pred_1 = _2491;
                        frontier_phi_92_pred_2 = _2490;
                        frontier_phi_92_pred_3 = _2489;
                        frontier_phi_92_pred_4 = _2488;
                        frontier_phi_92_pred_5 = _2493;
                    }
                    else
                    {
                        float _2647;
                        float _2648;
                        float _2649;
                        float _2650;
                        float _2651;
                        float _2652;
                        float _2899;
                        float _2900;
                        float _2901;
                        float _2902;
                        float _2903;
                        float _2904;
                        float _2660 = _2488;
                        float _2661 = _2489;
                        float _2662 = _2490;
                        float _2663 = _2491;
                        float _2664 = _2492;
                        float _2665 = _2493;
                        uint _2666 = _2503;
                        uint _2667;
                        vec4 _2692;
                        float _2693;
                        vec4 _2708;
                        vec3 _2720;
                        vec4 _2736;
                        vec4 _2752;
                        float _2799;
                        bool _2800;
                        for (;;)
                        {
                            uint _2677 = ((_2494 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2666));
                            _2667 = (_2666 + 4294967295u) & _2666;
                            uint _2679 = _2677 * 40u;
                            _2692 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 3u)).x));
                            _2693 = _2692.w;
                            uint _2695 = (_2677 * 40u) + 4u;
                            _2708 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2695)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2695 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2695 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2695 + 3u)).x));
                            uint _2710 = (_2677 * 40u) + 8u;
                            _2720 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2710)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2710 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2710 + 2u)).x));
                            uint _2723 = (_2677 * 40u) + 16u;
                            _2736 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2723)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2723 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2723 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2723 + 3u)).x));
                            uint _2739 = (_2677 * 40u) + 20u;
                            _2752 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2739)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2739 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2739 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2739 + 3u)).x));
                            uint _2755 = (_2677 * 40u) + 24u;
                            vec4 _2768 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2755)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 3u)).x));
                            uint _2774 = (_2677 * 40u) + 28u;
                            vec4 _2787 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2774)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 3u)).x));
                            _2799 = fma(_2027, _2787.z, fma(_2026, _2787.y, _2787.x * _2025)) + _2787.w;
                            _2800 = !((fma(_2027, _2768.z, fma(_2026, _2768.y, _2768.x * _2025)) + _2768.w) <= 0.0);
                            float frontier_phi_98_pred;
                            float frontier_phi_98_pred_1;
                            float frontier_phi_98_pred_2;
                            float frontier_phi_98_pred_3;
                            float frontier_phi_98_pred_4;
                            float frontier_phi_98_pred_5;
                            if (_2800)
                            {
                                float _2827 = _2692.x - _2025;
                                float _2828 = _2692.y - _2026;
                                float _2829 = _2692.z - _2027;
                                float _2830 = dot(vec3(_2827, _2828, _2829), vec3(_2827, _2828, _2829));
                                float _2833 = inversesqrt(_2830);
                                float _2834 = _2833 * _2827;
                                float _2835 = _2833 * _2828;
                                float _2836 = _2833 * _2829;
                                float _2840 = 1.0 - (_2830 / (_2693 * _2693));
                                float _3832 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                                float _2841 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
                                float _2845 = sqrt(_2830) * _2708.w;
                                float _2847 = 1.39999997615814208984375 / (_2845 + 1.39999997615814208984375);
                                float _2848 = _2847 * _2847;
                                float _2849 = 1.0 - _2848;
                                float _2851 = (_2849 * dot(vec3(_2834, _2835, _2836), vec3(_403, _406, _409))) + _2848;
                                float _2854 = _2845 * _2845;
                                float _2858 = (fma(_2027, _2736.z, fma(_2026, _2736.y, _2736.x * _2025)) + _2736.w) / _2799;
                                float _2859 = (fma(_2027, _2752.z, fma(_2026, _2752.y, _2752.x * _2025)) + _2752.w) / _2799;
                                float _2863 = 1.0 - dot(vec2(_2858, _2859), vec2(_2858, _2859));
                                float _3848 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                                float _2864 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
                                float _2865 = _2864 * (((isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0))) * _2841) / ((_2854 * 0.699999988079071044921875) + 1.0));
                                float _2875 = dot(vec3(_403, _406, _409), vec3((-0.0) - (_2025 * _2356), (-0.0) - (_2026 * _2356), (-0.0) - (_2027 * _2356)));
                                float _3859 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                                float _2883 = (_2849 * dot(vec3(_403, _406, _409), vec3(_2834, _2835, _2836))) + _2848;
                                float _3870 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                                float _2884 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
                                float _2888 = (0.5 / (((isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) + 9.9999999392252902907785028219223e-09) + _2884)) * _2884;
                                float _3881 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                                float _2895 = (_2864 * _2841) * (((isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * 3.1415927410125732421875) / ((_2854 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_98_pred = _2865 * _2708.y;
                                frontier_phi_98_pred_1 = _2865 * _2708.x;
                                frontier_phi_98_pred_2 = _2895 * _2720.z;
                                frontier_phi_98_pred_3 = _2895 * _2720.y;
                                frontier_phi_98_pred_4 = _2895 * _2720.x;
                                frontier_phi_98_pred_5 = _2865 * _2708.z;
                            }
                            else
                            {
                                frontier_phi_98_pred = 0.0;
                                frontier_phi_98_pred_1 = 0.0;
                                frontier_phi_98_pred_2 = 0.0;
                                frontier_phi_98_pred_3 = 0.0;
                                frontier_phi_98_pred_4 = 0.0;
                                frontier_phi_98_pred_5 = 0.0;
                            }
                            _2903 = frontier_phi_98_pred;
                            _2902 = frontier_phi_98_pred_1;
                            _2901 = frontier_phi_98_pred_2;
                            _2900 = frontier_phi_98_pred_3;
                            _2899 = frontier_phi_98_pred_4;
                            _2904 = frontier_phi_98_pred_5;
                            _2650 = _2902 + _2663;
                            _2651 = _2903 + _2664;
                            _2652 = _2904 + _2665;
                            _2647 = _2899 + _2660;
                            _2648 = _2900 + _2661;
                            _2649 = _2901 + _2662;
                            if (_2667 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2660 = _2647;
                                _2661 = _2648;
                                _2662 = _2649;
                                _2663 = _2650;
                                _2664 = _2651;
                                _2665 = _2652;
                                _2666 = _2667;
                                continue;
                            }
                        }
                        frontier_phi_92_pred = _2651;
                        frontier_phi_92_pred_1 = _2650;
                        frontier_phi_92_pred_2 = _2649;
                        frontier_phi_92_pred_3 = _2648;
                        frontier_phi_92_pred_4 = _2647;
                        frontier_phi_92_pred_5 = _2652;
                    }
                    _2340 = frontier_phi_92_pred;
                    _2338 = frontier_phi_92_pred_1;
                    _2336 = frontier_phi_92_pred_2;
                    _2334 = frontier_phi_92_pred_3;
                    _2332 = frontier_phi_92_pred_4;
                    _2342 = frontier_phi_92_pred_5;
                    uint _2495 = _2494 + 1u;
                    if (_2495 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2488 = _2332;
                        _2489 = _2334;
                        _2490 = _2336;
                        _2491 = _2338;
                        _2492 = _2340;
                        _2493 = _2342;
                        _2494 = _2495;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_73_74_ladder = _2342;
                frontier_phi_73_74_ladder_1 = _2338;
                frontier_phi_73_74_ladder_2 = _2340;
                frontier_phi_73_74_ladder_3 = _2334;
                frontier_phi_73_74_ladder_4 = _2332;
                frontier_phi_73_74_ladder_5 = _2336;
            }
            else
            {
                frontier_phi_73_74_ladder = _2210;
                frontier_phi_73_74_ladder_1 = _2206;
                frontier_phi_73_74_ladder_2 = _2208;
                frontier_phi_73_74_ladder_3 = _2202;
                frontier_phi_73_74_ladder_4 = _2200;
                frontier_phi_73_74_ladder_5 = _2204;
            }
            _2331 = frontier_phi_73_74_ladder_4;
            _2333 = frontier_phi_73_74_ladder_3;
            _2335 = frontier_phi_73_74_ladder_5;
            _2337 = frontier_phi_73_74_ladder_1;
            _2339 = frontier_phi_73_74_ladder_2;
            _2341 = frontier_phi_73_74_ladder;
        }
        float _2346 = isnan(1.0) ? _447 : (isnan(_447) ? 1.0 : min(_447, 1.0));
        _2083 = (_2346 * _2337) + _1647;
        _2085 = (_2346 * _2339) + _1649;
        _2087 = (_2346 * _2341) + _1651;
        _2089 = ((_2331 * 0.039999999105930328369140625) * _2346) + _1896;
        _2091 = ((_2333 * 0.039999999105930328369140625) * _2346) + _1898;
        _2093 = ((_2335 * 0.039999999105930328369140625) * _2346) + _1900;
    }
    else
    {
        _2083 = _1647;
        _2085 = _1649;
        _2087 = _1651;
        _2089 = _1896;
        _2091 = _1898;
        _2093 = _1900;
    }
    uint _2099 = _423 + uint(cbMatDynParam._m0[0u].w);
    float _2105 = cbInstanceData._m0[_2099].x * _271;
    float _2106 = cbInstanceData._m0[_2099].y * _273;
    float _2107 = cbInstanceData._m0[_2099].z * _274;
    float _3897 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _3908 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _3919 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _2124 = (((isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_2083 + ((isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))) * _447))) + ((_2089 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _1285)) * cbPerFrame._m0[3u].x)) + _2105;
    float _2126 = (_2106 + ((_2091 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _1285)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_2085 + ((isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))) * _447)));
    float _2128 = (_2107 + ((_2093 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _1285)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_2087 + ((isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0))) * _447)));
    float _2129 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2130 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2131 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2137 = cbMtdParam._m0[2u].x * _2105;
    float _2138 = cbMtdParam._m0[2u].y * _2106;
    float _2139 = cbMtdParam._m0[2u].z * _2107;
    float _3945 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2141 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    uint _2142 = _422 + 6u;
    float _2150 = _382 / cbSceneParam._m0[86u].x;
    float _2151 = _383 / cbSceneParam._m0[86u].y;
    vec4 _2165 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2150, _2151, (log2((isnan(cbSceneParam._m0[77u].w) ? _301 : (isnan(_301) ? cbSceneParam._m0[77u].w : min(_301, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2167 = _2165.x;
    float _2168 = _2165.y;
    float _2169 = _2165.z;
    float _2170 = _2165.w;
    float _2262;
    float _2264;
    float _2266;
    float _2268;
    if (_301 > cbSceneParam._m0[78u].w)
    {
        float _2225 = isnan(_301) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _301 : min(cbSceneParam._m0[80u].w, _301));
        float _2226 = _2225 / _301;
        float _2237 = _2226 * _353;
        float _2238 = _354 * _2226;
        float _2239 = (-0.0) - _2238;
        float _2240 = _2226 * _355;
        float _2242 = (cbSceneParam._m0[77u].w * _2239) / _2225;
        float _2243 = _2242 + cbSceneParam._m0[79u].w;
        float _2244 = cbSceneParam._m0[79u].w - _2238;
        float _2250 = sqrt(((_2237 * _2237) + (_2238 * _2238)) + (_2240 * _2240));
        float _2253 = (1.0 - (cbSceneParam._m0[77u].w / _2225)) * _2250;
        float _2258 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2260 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2445;
        if (abs((_2239 - _2242) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2445 = ((((_2243 > 0.0) ? exp2(_2258 * _2243) : (2.0 - exp2(_2260 * _2243))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2253;
        }
        else
        {
            float _2389 = 1.0 / cbSceneParam._m0[80u].x;
            float _2390 = isnan(_2244) ? _2243 : (isnan(_2243) ? _2244 : max(_2243, _2244));
            float _2391 = isnan(_2244) ? _2243 : (isnan(_2243) ? _2244 : min(_2243, _2244));
            float _2400 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : min(_2390, 0.0));
            float _2401 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : min(_2391, 0.0));
            _2445 = ((abs(_2250 / _2239) * cbSceneParam._m0[80u].y) * ((((_2400 - _2401) * 2.0) - ((exp2(_2258 * (isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0)))) - exp2(_2258 * (isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0))))) * _2389)) - ((exp2(_2260 * _2400) - exp2(_2260 * _2401)) * _2389))) + (_2253 * cbSceneParam._m0[80u].z);
        }
        vec4 _2447 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2150, _2151, 1.0), 0.0);
        float _2456 = exp2((_2445 * (-1.44269502162933349609375)) * (1.0 - _2447.w));
        float _2457 = log2(_2456);
        float _2473 = log2(_2170);
        _2262 = (exp2(_2473 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2457 * cbSceneParam._m0[78u].x)) * _2447.x) / cbSceneParam._m0[78u].x)) + _2167;
        _2264 = (exp2(_2473 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2457 * cbSceneParam._m0[78u].y)) * _2447.y) / cbSceneParam._m0[78u].y)) + _2168;
        _2266 = (exp2(_2473 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2457 * cbSceneParam._m0[78u].z)) * _2447.z) / cbSceneParam._m0[78u].z)) + _2169;
        _2268 = _2456 * _2170;
    }
    else
    {
        _2262 = _2167;
        _2264 = _2168;
        _2266 = _2169;
        _2268 = _2170;
    }
    bool _2483;
    vec4 _2278;
    vec4 _2301;
    float _2303;
    float _2307;
    float _2308;
    float _2309;
    float _2312;
    float _2315;
    float _2318;
    float _2319;
    bool _2330;
    for (;;)
    {
        _2278 = cbMatDynParam._m0[0u];
        float _2280 = roundEven(_2278.y);
        bool _2281 = _2280 == 3.0;
        float _2283 = log2(_2268);
        float _2287 = exp2(_2283 * cbSceneParam._m0[78u].x);
        float _2288 = exp2(_2283 * cbSceneParam._m0[78u].y);
        float _2289 = exp2(_2283 * cbSceneParam._m0[78u].z);
        float _2290 = _2287 * _2129;
        float _2291 = _2288 * _2130;
        float _2292 = _2289 * _2131;
        float _2299 = _369 + (-0.5);
        _2301 = cbMtdParam._m0[1u];
        _2303 = _2301.y * _2299;
        float _2306 = (_2280 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2307 = _2306 * (_2281 ? _2290 : (_2290 + (cbSceneParam._m0[72u].w * _2262)));
        _2308 = _2306 * (_2281 ? _2291 : (_2291 + (cbSceneParam._m0[72u].w * _2264)));
        _2309 = _2306 * (_2281 ? _2292 : (_2292 + (cbSceneParam._m0[72u].w * _2266)));
        _2312 = ((_2137 * _2141) * _2287) * _2306;
        _2315 = ((_2138 * _2141) * _2288) * _2306;
        _2318 = ((_2139 * _2141) * _2289) * _2306;
        _2319 = _2299 * 0.999000012874603271484375;
        _2330 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2330)
        {
            if ((cbInstanceData._m0[_422 + 7u].x + _2319) < 0.5)
            {
                _2483 = true;
                break;
            }
        }
        uint _2424 = _423 + uint(_2278.w);
        if ((cbInstanceData._m0[_2424].w < 1.0) && ((cbInstanceData._m0[_2424].w + _2319) < 0.5))
        {
            _2483 = true;
            break;
        }
        if ((_2303 + 1.0) < _2301.x)
        {
            _2483 = true;
            break;
        }
        _2483 = false;
        break;
    }
    float _2638;
    if (_2483)
    {
        discard_state = true;
        _2638 = 0.0;
    }
    else
    {
        _2638 = cbInstanceData._m0[_2142].w;
    }
    SV_Target.x = _2307;
    SV_Target.y = _2308;
    SV_Target.z = _2309;
    SV_Target.w = _2638;
    SV_Target_1.x = _2312;
    SV_Target_1.y = _2315;
    SV_Target_1.z = _2318;
    SV_Target_1.w = cbInstanceData._m0[_2142].w;
    discard_exit();
}


