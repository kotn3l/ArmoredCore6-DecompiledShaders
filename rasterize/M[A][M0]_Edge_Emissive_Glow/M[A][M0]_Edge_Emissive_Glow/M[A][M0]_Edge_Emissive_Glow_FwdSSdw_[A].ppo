#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _779;
float _3011;
float _3012;
float _3013;
float _3014;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _169 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _170 = _169 * NORMAL.x;
    float _171 = _169 * NORMAL.y;
    float _172 = _169 * NORMAL.z;
    float _177;
    float _178;
    float _179;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _177 = (-0.0) - _170;
        _178 = (-0.0) - _171;
        _179 = (-0.0) - _172;
    }
    else
    {
        _177 = _170;
        _178 = _171;
        _179 = _172;
    }
    vec4 _199 = texture(sampler2D(M_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _205 = _199.w;
    float _206 = _199.x * cbMtdParam._m0[9u].x;
    float _207 = _199.y * cbMtdParam._m0[9u].y;
    float _208 = _199.z * cbMtdParam._m0[9u].z;
    vec4 _230 = texture(sampler2D(M_A_M0_Edge_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _238 = inversesqrt(dot(vec3(_177, _178, _179), vec3(_177, _178, _179)));
    float _239 = _238 * _177;
    float _240 = _238 * _178;
    float _241 = _238 * _179;
    float _3023 = isnan(0.0) ? _206 : (isnan(_206) ? 0.0 : max(_206, 0.0));
    float _3034 = isnan(0.0) ? _207 : (isnan(_207) ? 0.0 : max(_207, 0.0));
    float _3045 = isnan(0.0) ? _208 : (isnan(_208) ? 0.0 : max(_208, 0.0));
    float _261 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _302 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _312 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _302);
    float _313 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _302);
    float _314 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _302);
    float _318 = inversesqrt(dot(vec3(_312, _313, _314), vec3(_312, _313, _314)));
    float _319 = _312 * _318;
    float _320 = _313 * _318;
    float _321 = _314 * _318;
    vec4 _326 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _328 = _326.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _458 = sqrt(((_312 * _312) + (_313 * _313)) + (_314 * _314));
        float _464 = (cbMatDynParam._m0[5u].x * _458) + cbMatDynParam._m0[5u].y;
        float _3056 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
        float _465 = isnan(1.0) ? _3056 : (isnan(_3056) ? 1.0 : min(_3056, 1.0));
        float _469 = (cbMatDynParam._m0[5u].z * _458) + cbMatDynParam._m0[5u].w;
        float _3067 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0))) - _465)) + _465) < ((_328 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _340 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _341 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _361 = fma(_241, cbSceneParam._m0[5u].z, fma(_240, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _239));
    float _364 = fma(_241, cbSceneParam._m0[6u].z, fma(_240, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _239));
    float _367 = fma(_241, cbSceneParam._m0[7u].z, fma(_240, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _239));
    uint _380 = uint(roundEven(NORMAL.w)) * 13u;
    uint _382 = _380 + 9u;
    uint _383 = _382 + uint(cbMatDynParam._m0[0u].w);
    float _389 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3023 : (isnan(_3023) ? 1.0 : min(_3023, 1.0)))) * cbInstanceData._m0[_383].x;
    float _390 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3034 : (isnan(_3034) ? 1.0 : min(_3034, 1.0)))) * cbInstanceData._m0[_383].y;
    float _391 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3045 : (isnan(_3045) ? 1.0 : min(_3045, 1.0)))) * cbInstanceData._m0[_383].z;
    float _3078 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _392 = isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0));
    float _3089 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _393 = isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0));
    float _3100 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _394 = isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0));
    vec4 _403 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _340, cbSceneParam._m0[86u].y * _341));
    float _406 = _403.x * TEXCOORD.z;
    float _407 = dot(vec3(_239, _240, _241), vec3(_319, _320, _321));
    float _410 = _407 * 2.0;
    float _415 = (_410 * _239) - _319;
    float _416 = (_410 * _240) - _320;
    float _417 = (_410 * _241) - _321;
    float _439 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _443 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _447 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _778;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    float _788;
    float _789;
    float _790;
    float _791;
    float _792;
    float _793;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _503 = fma(_447, cbModelParam._m0[26u].z, fma(_443, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _439));
        float _507 = fma(_447, cbModelParam._m0[27u].z, fma(_443, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _439));
        float _511 = fma(_447, cbModelParam._m0[28u].z, fma(_443, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _439));
        float _536 = _439 + _239;
        float _537 = _443 + _240;
        float _538 = _447 + _241;
        float _548 = fma(_538, cbModelParam._m0[26u].z, fma(_537, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _536)) - _503;
        float _549 = fma(_538, cbModelParam._m0[27u].z, fma(_537, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _536)) - _507;
        float _550 = fma(_538, cbModelParam._m0[28u].z, fma(_537, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _536)) - _511;
        float _554 = inversesqrt(dot(vec3(_548, _549, _550), vec3(_548, _549, _550)));
        float _567 = ((_554 * _548) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_503 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _568 = ((_554 * _549) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_507 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _569 = ((_554 * _550) / cbModelParam._m0[34u].z) + ((((((_511 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _572 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_567, _568, _569), 0.0);
        vec4 _579 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_567, _568, _569), 0.0);
        vec4 _586 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_567, _568, _569), 0.0);
        vec4 _593 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_567, _568, _569), 0.0);
        float _606 = exp2((_572.w + (-0.5)) * 20.0) * 2.0;
        float _607 = _606 * (_572.x + (-0.5));
        float _608 = _606 * (_572.y + (-0.5));
        float _609 = _606 * (_572.z + (-0.5));
        float _616 = exp2((_579.w + (-0.5)) * 20.0) * 2.0;
        float _617 = _616 * (_579.x + (-0.5));
        float _618 = _616 * (_579.y + (-0.5));
        float _619 = _616 * (_579.z + (-0.5));
        float _626 = exp2((_586.w + (-0.5)) * 20.0) * 2.0;
        float _627 = _626 * (_586.x + (-0.5));
        float _628 = _626 * (_586.y + (-0.5));
        float _629 = _626 * (_586.z + (-0.5));
        float _636 = exp2((_593.w + (-0.5)) * 20.0) * 2.0;
        float _637 = _636 * (_593.x + (-0.5));
        float _638 = _636 * (_593.y + (-0.5));
        float _639 = _636 * (_593.z + (-0.5));
        float _640 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
        float _641 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
        float _642 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
        float _643 = _607 * 0.5;
        float _644 = _617 * 0.5;
        float _645 = _627 * 0.5;
        float _646 = dot(vec3(_643, _644, _645), vec3(_643, _644, _645));
        float _651 = (_646 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_646);
        float _660 = (dot(vec3(_239, _240, _241), vec3(_651 * _643, _651 * _644, _651 * _645)) + 1.0) * 0.5;
        float _3126 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        float _670 = sqrt(((_644 * _644) + (_643 * _643)) + (_645 * _645)) / (_640 + 9.9999997473787516355514526367188e-06);
        float _3137 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _671 = isnan(1.0) ? _3137 : (isnan(_3137) ? 1.0 : min(_3137, 1.0));
        float _672 = _671 * 2.0;
        float _676 = (1.0 - _671) / (_671 + 1.0);
        float _3148 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
        float _677 = isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0));
        float _686 = ((((1.0 - _677) * (_672 + 2.0)) * exp2(log2(isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0))) * (_672 + 1.0))) + _677) * _640;
        float _687 = _608 * 0.5;
        float _688 = _618 * 0.5;
        float _689 = _628 * 0.5;
        float _690 = dot(vec3(_687, _688, _689), vec3(_687, _688, _689));
        float _695 = (_690 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_690);
        float _703 = (dot(vec3(_239, _240, _241), vec3(_695 * _687, _695 * _688, _695 * _689)) + 1.0) * 0.5;
        float _3159 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _712 = sqrt(((_688 * _688) + (_687 * _687)) + (_689 * _689)) / (_641 + 9.9999997473787516355514526367188e-06);
        float _3170 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _713 = isnan(1.0) ? _3170 : (isnan(_3170) ? 1.0 : min(_3170, 1.0));
        float _714 = _713 * 2.0;
        float _718 = (1.0 - _713) / (_713 + 1.0);
        float _3181 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _719 = isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0));
        float _728 = ((((1.0 - _719) * (_714 + 2.0)) * exp2(log2(isnan(1.0) ? _3159 : (isnan(_3159) ? 1.0 : min(_3159, 1.0))) * (_714 + 1.0))) + _719) * _641;
        float _729 = _609 * 0.5;
        float _730 = _619 * 0.5;
        float _731 = _629 * 0.5;
        float _732 = dot(vec3(_729, _730, _731), vec3(_729, _730, _731));
        float _737 = (_732 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_732);
        float _745 = (dot(vec3(_239, _240, _241), vec3(_737 * _729, _737 * _730, _737 * _731)) + 1.0) * 0.5;
        float _3192 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _754 = sqrt(((_730 * _730) + (_729 * _729)) + (_731 * _731)) / (_642 + 9.9999997473787516355514526367188e-06);
        float _3203 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0));
        float _756 = _755 * 2.0;
        float _760 = (1.0 - _755) / (_755 + 1.0);
        float _3214 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0));
        float _770 = ((((1.0 - _761) * (_756 + 2.0)) * exp2(log2(isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0))) * (_756 + 1.0))) + _761) * _642;
        _778 = _609;
        _780 = _608;
        _781 = _607;
        _782 = _619;
        _783 = _618;
        _784 = _617;
        _785 = _629;
        _786 = _628;
        _787 = _627;
        _788 = _642;
        _789 = _641;
        _790 = _640;
        _791 = cbModelParam._m0[36u].z * (isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0)));
        _792 = cbModelParam._m0[36u].z * (isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0)));
        _793 = cbModelParam._m0[36u].z * (isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0)));
    }
    else
    {
        _778 = _779;
        _780 = _779;
        _781 = _779;
        _782 = _779;
        _783 = _779;
        _784 = _779;
        _785 = _779;
        _786 = _779;
        _787 = _779;
        _788 = _779;
        _789 = _779;
        _790 = _779;
        _791 = 0.0;
        _792 = 0.0;
        _793 = 0.0;
    }
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _822 = fma(_447, cbModelParam._m0[30u].z, fma(_443, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _439));
        float _826 = fma(_447, cbModelParam._m0[31u].z, fma(_443, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _439));
        float _830 = fma(_447, cbModelParam._m0[32u].z, fma(_443, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _439));
        float _853 = _439 + _239;
        float _854 = _443 + _240;
        float _855 = _447 + _241;
        float _865 = fma(_855, cbModelParam._m0[30u].z, fma(_854, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _853)) - _822;
        float _866 = fma(_855, cbModelParam._m0[31u].z, fma(_854, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _853)) - _826;
        float _867 = fma(_855, cbModelParam._m0[32u].z, fma(_854, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _853)) - _830;
        float _871 = inversesqrt(dot(vec3(_865, _866, _867), vec3(_865, _866, _867)));
        float _884 = ((_871 * _865) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_822 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _885 = ((_871 * _866) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_826 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _886 = ((_871 * _867) / cbModelParam._m0[35u].z) + ((((((_830 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        float _921 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_888.x + (-0.5));
        float _923 = _921 * (_888.y + (-0.5));
        float _924 = _921 * (_888.z + (-0.5));
        float _931 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_895.x + (-0.5));
        float _933 = _931 * (_895.y + (-0.5));
        float _934 = _931 * (_895.z + (-0.5));
        float _941 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_902.x + (-0.5));
        float _943 = _941 * (_902.y + (-0.5));
        float _944 = _941 * (_902.z + (-0.5));
        float _951 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_909.x + (-0.5));
        float _953 = _951 * (_909.y + (-0.5));
        float _954 = _951 * (_909.z + (-0.5));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = _922 * 0.5;
        float _959 = _932 * 0.5;
        float _960 = _942 * 0.5;
        float _961 = dot(vec3(_958, _959, _960), vec3(_958, _959, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _974 = (dot(vec3(_239, _240, _241), vec3(_966 * _958, _966 * _959, _966 * _960)) + 1.0) * 0.5;
        float _3255 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _983 = sqrt(((_959 * _959) + (_958 * _958)) + (_960 * _960)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3266 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0));
        float _985 = _984 * 2.0;
        float _989 = (1.0 - _984) / (_984 + 1.0);
        float _3277 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0));
        float _999 = ((((1.0 - _990) * (_985 + 2.0)) * exp2(log2(isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0))) * (_985 + 1.0))) + _990) * _955;
        float _1000 = _923 * 0.5;
        float _1001 = _933 * 0.5;
        float _1002 = _943 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1016 = (dot(vec3(_239, _240, _241), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3288 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1025 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3299 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3310 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0))) * (_1027 + 1.0))) + _1032) * _956;
        float _1042 = _924 * 0.5;
        float _1043 = _934 * 0.5;
        float _1044 = _944 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1058 = (dot(vec3(_239, _240, _241), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _3321 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1067 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3332 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _3343 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0))) * (_1069 + 1.0))) + _1074) * _957;
        _1091 = _924;
        _1092 = _923;
        _1093 = _922;
        _1094 = _934;
        _1095 = _933;
        _1096 = _932;
        _1097 = _944;
        _1098 = _943;
        _1099 = _942;
        _1100 = _957;
        _1101 = _956;
        _1102 = _955;
        _1103 = cbModelParam._m0[36u].w * (isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0)));
        _1104 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
        _1105 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
    }
    else
    {
        _1091 = _779;
        _1092 = _779;
        _1093 = _779;
        _1094 = _779;
        _1095 = _779;
        _1096 = _779;
        _1097 = _779;
        _1098 = _779;
        _1099 = _779;
        _1100 = _779;
        _1101 = _779;
        _1102 = _779;
        _1103 = 0.0;
        _1104 = 0.0;
        _1105 = 0.0;
    }
    float _1115 = (cbModelParam._m0[1u].x * (_1103 - _791)) + _791;
    float _1116 = (cbModelParam._m0[1u].x * (_1104 - _792)) + _792;
    float _1117 = (cbModelParam._m0[1u].x * (_1105 - _793)) + _793;
    float _1138 = fma(_1117, cbSceneParam._m0[89u].z, fma(_1116, cbSceneParam._m0[89u].y, _1115 * cbSceneParam._m0[89u].x));
    float _1141 = fma(_1117, cbSceneParam._m0[90u].z, fma(_1116, cbSceneParam._m0[90u].y, _1115 * cbSceneParam._m0[90u].x));
    float _1144 = fma(_1117, cbSceneParam._m0[91u].z, fma(_1116, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1115));
    float _1159 = _415 * 0.5;
    float _1160 = _416 * 0.5;
    float _1161 = _417 * 0.5;
    float _1162 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_1093, _1096, _1099, _1102));
    float _1165 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_1092, _1095, _1098, _1101));
    float _1168 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_1091, _1094, _1097, _1100));
    float _1202;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1175 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_778, _782, _785, _788));
        float _1179 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_780, _783, _786, _789));
        float _1183 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_781, _784, _787, _790));
        float _1190 = dot(vec4(cbModelParam._m0[39u]), vec4(_1159, _1160, _1161, 1.0));
        _1202 = dot(vec3(isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)), isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)), isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1190) ? 0.0 : (isnan(0.0) ? _1190 : max(0.0, _1190))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1202 = 1.0;
    }
    float _1213;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1204 = dot(vec4(cbModelParam._m0[40u]), vec4(_1159, _1160, _1161, 1.0));
        _1213 = dot(vec3(isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)), isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)), isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1204) ? 0.0 : (isnan(0.0) ? _1204 : max(0.0, _1204))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1213 = 1.0;
    }
    float _1217 = (_1213 * cbModelParam._m0[1u].x) + (_1202 * (1.0 - cbModelParam._m0[1u].x));
    float _1226 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1308;
    float _1310;
    float _1312;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1275 = fma(_447, cbModelParam._m0[13u].z, fma(_443, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _439)) + cbModelParam._m0[13u].w;
        float _1279 = fma(_447, cbModelParam._m0[14u].z, fma(_443, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _439)) + cbModelParam._m0[14u].w;
        float _1283 = fma(_447, cbModelParam._m0[15u].z, fma(_443, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _439)) + cbModelParam._m0[15u].w;
        float _1286 = fma(_417, cbModelParam._m0[13u].z, fma(_416, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _415));
        float _1289 = fma(_417, cbModelParam._m0[14u].z, fma(_416, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _415));
        float _1292 = fma(_417, cbModelParam._m0[15u].z, fma(_416, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _415));
        float _1318;
        if (_1286 > 0.0)
        {
            _1318 = abs((1.0 - _1275) / _1286);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1286 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1275 + 1.0) / _1286);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1318 = frontier_phi_19_17_ladder;
        }
        float _1546;
        if (_1289 > 0.0)
        {
            _1546 = abs((1.0 - _1279) / _1289);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1289 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1279 + 1.0) / _1289);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1546 = frontier_phi_28_24_ladder;
        }
        float _1738;
        if (_1292 > 0.0)
        {
            _1738 = abs((1.0 - _1283) / _1292);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1292 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1283 + 1.0) / _1292);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1738 = frontier_phi_40_35_ladder;
        }
        float _1740 = isnan(_1546) ? _1318 : (isnan(_1318) ? _1546 : min(_1318, _1546));
        float _1741 = isnan(_1738) ? _1740 : (isnan(_1740) ? _1738 : min(_1740, _1738));
        float _1745 = (_1741 * _1286) + _1275;
        float _1746 = (_1741 * _1289) + _1279;
        float _1747 = (_1741 * _1292) + _1283;
        float _1748 = _1741 * 9.9999997473787516355514526367188e-05;
        float _1750 = (-1.0) - _1748;
        float _1752 = _1748 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1747 > _1752) || ((_1747 < _1750) || ((_1746 > _1752) || ((_1746 < _1750) || ((_1745 < _1750) || (_1745 > _1752))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1844 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1747, cbModelParam._m0[9u].z, fma(_1746, cbModelParam._m0[9u].y, _1745 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1747, cbModelParam._m0[10u].z, fma(_1746, cbModelParam._m0[10u].y, _1745 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1747, cbModelParam._m0[11u].z, fma(_1746, cbModelParam._m0[11u].y, _1745 * cbModelParam._m0[11u].x))), _1226);
            frontier_phi_18_40_ladder = _1844.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1844.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1844.x * cbModelParam._m0[1u].y;
        }
        _1308 = frontier_phi_18_40_ladder_2;
        _1310 = frontier_phi_18_40_ladder_1;
        _1312 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1296 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_415, _416, _417), _1226);
        _1308 = _1296.x * cbModelParam._m0[1u].y;
        _1310 = _1296.y * cbModelParam._m0[1u].y;
        _1312 = _1296.z * cbModelParam._m0[1u].y;
    }
    float _1315 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1408;
    float _1410;
    float _1412;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1372 = fma(_447, cbModelParam._m0[21u].z, fma(_443, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _439)) + cbModelParam._m0[21u].w;
        float _1376 = fma(_447, cbModelParam._m0[22u].z, fma(_443, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _439)) + cbModelParam._m0[22u].w;
        float _1380 = fma(_447, cbModelParam._m0[23u].z, fma(_443, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _439)) + cbModelParam._m0[23u].w;
        float _1383 = fma(_417, cbModelParam._m0[21u].z, fma(_416, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _415));
        float _1386 = fma(_417, cbModelParam._m0[22u].z, fma(_416, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _415));
        float _1389 = fma(_417, cbModelParam._m0[23u].z, fma(_416, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _415));
        float _1551;
        if (_1383 > 0.0)
        {
            _1551 = abs((1.0 - _1372) / _1383);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1383 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1372 + 1.0) / _1383);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1551 = frontier_phi_30_26_ladder;
        }
        float _1765;
        if (_1386 > 0.0)
        {
            _1765 = abs((1.0 - _1376) / _1386);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1386 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1376 + 1.0) / _1386);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1765 = frontier_phi_42_37_ladder;
        }
        float _1916;
        if (_1389 > 0.0)
        {
            _1916 = abs((1.0 - _1380) / _1389);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1389 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1380 + 1.0) / _1389);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1916 = frontier_phi_51_48_ladder;
        }
        float _1918 = isnan(_1765) ? _1551 : (isnan(_1551) ? _1765 : min(_1551, _1765));
        float _1919 = isnan(_1916) ? _1918 : (isnan(_1918) ? _1916 : min(_1918, _1916));
        float _1923 = (_1919 * _1383) + _1372;
        float _1924 = (_1919 * _1386) + _1376;
        float _1925 = (_1919 * _1389) + _1380;
        float _1926 = _1919 * 9.9999997473787516355514526367188e-05;
        float _1927 = (-1.0) - _1926;
        float _1929 = _1926 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1925 > _1929) || ((_1925 < _1927) || ((_1924 > _1929) || ((_1924 < _1927) || ((_1923 < _1927) || (_1923 > _1929))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2158 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1925, cbModelParam._m0[17u].z, fma(_1924, cbModelParam._m0[17u].y, _1923 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1925, cbModelParam._m0[18u].z, fma(_1924, cbModelParam._m0[18u].y, _1923 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1925, cbModelParam._m0[19u].z, fma(_1924, cbModelParam._m0[19u].y, _1923 * cbModelParam._m0[19u].x))), _1315);
            frontier_phi_27_51_ladder = _2158.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2158.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2158.x * cbModelParam._m0[1u].z;
        }
        _1408 = frontier_phi_27_51_ladder_2;
        _1410 = frontier_phi_27_51_ladder_1;
        _1412 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1392 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_415, _416, _417), _1315);
        _1408 = _1392.x * cbModelParam._m0[1u].z;
        _1410 = _1392.y * cbModelParam._m0[1u].z;
        _1412 = _1392.z * cbModelParam._m0[1u].z;
    }
    float _1424 = _406 * 0.01200000010430812835693359375;
    float _1426 = _1424 * ((cbModelParam._m0[1u].w * (_1408 - _1308)) + _1308);
    float _1427 = _1424 * ((cbModelParam._m0[1u].w * (_1410 - _1310)) + _1310);
    float _1428 = _1424 * ((cbModelParam._m0[1u].w * (_1412 - _1312)) + _1312);
    float _1431 = fma(_1428, cbSceneParam._m0[89u].z, fma(_1427, cbSceneParam._m0[89u].y, _1426 * cbSceneParam._m0[89u].x));
    float _1434 = fma(_1428, cbSceneParam._m0[90u].z, fma(_1427, cbSceneParam._m0[90u].y, _1426 * cbSceneParam._m0[90u].x));
    float _1437 = fma(_1428, cbSceneParam._m0[91u].z, fma(_1427, cbSceneParam._m0[91u].y, _1426 * cbSceneParam._m0[91u].x));
    vec4 _1445 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_340, _341));
    float _1447 = _1445.w;
    float _1459 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1447);
    float _1460 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1447);
    float _1461 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1447);
    uvec4 _1465 = floatBitsToUint(cbInstanceData._m0[_380 + 5u]);
    uint _1467 = _1465.x * 14u;
    uint _1468 = _1467 + 13u;
    float _1475 = _406 + (-1.0);
    float _1481 = (cbLight._m0[_1468].x * _1475) + 1.0;
    float _1482 = (cbLight._m0[_1468].y * _1475) + 1.0;
    float _1483 = (cbLight._m0[_1468].z * _1475) + 1.0;
    float _1484 = (cbLight._m0[_1468].w * _1475) + 1.0;
    uint _1485 = _1467 + 5u;
    float _1491 = isnan(1.0) ? _1482 : (isnan(_1482) ? 1.0 : min(_1482, 1.0));
    uint _1495 = _1467 + 4u;
    float _1505 = isnan(1.0) ? _1481 : (isnan(_1481) ? 1.0 : min(_1481, 1.0));
    uint _1509 = _1467 | 1u;
    float _1520 = dot(vec3(cbLight._m0[_1467].xyz), vec3(_239, _240, _241));
    float _1523 = dot(vec3(cbLight._m0[_1509].xyz), vec3(_239, _240, _241));
    float _3479 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
    float _3490 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
    float _1528 = (isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))) * 0.3183098733425140380859375;
    float _1530 = (isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0))) * 0.3183098733425140380859375;
    float _1537 = ((cbLight._m0[_1485].x * _1491) * _1530) + (((cbLight._m0[_1495].x * _1459) * _1505) * _1528);
    float _1538 = ((_1491 * cbLight._m0[_1485].y) * _1530) + (((cbLight._m0[_1495].y * _1460) * _1505) * _1528);
    float _1539 = ((_1491 * cbLight._m0[_1485].z) * _1530) + (((cbLight._m0[_1495].z * _1461) * _1505) * _1528);
    uvec4 _1543 = floatBitsToUint(cbLight._m0[_1467 + 12u]);
    bool _1545 = _1543.x == 0u;
    float _1556;
    float _1558;
    float _1560;
    if (_1545)
    {
        _1556 = _1537;
        _1558 = _1538;
        _1560 = _1539;
    }
    else
    {
        uint _1564 = _1467 + 6u;
        float _1580 = (dot(vec3(cbLight._m0[_1467 + 2u].xyz), vec3(_239, _240, _241)) * 0.5) + 0.5;
        float _1581 = _1580 * _1580;
        float _3501 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _1583 = isnan(1.0) ? _1483 : (isnan(_1483) ? 1.0 : min(_1483, 1.0));
        _1556 = (((cbLight._m0[_1564].x * 0.3183098733425140380859375) * _1582) * _1583) + _1537;
        _1558 = (((cbLight._m0[_1564].y * 0.3183098733425140380859375) * _1582) * _1583) + _1538;
        _1560 = (((cbLight._m0[_1564].z * 0.3183098733425140380859375) * _1582) * _1583) + _1539;
    }
    bool _1563 = _1543.y == 0u;
    float _1601;
    float _1603;
    float _1605;
    if (_1563)
    {
        _1601 = _1556;
        _1603 = _1558;
        _1605 = _1560;
    }
    else
    {
        uint _1709 = _1467 + 7u;
        float _1725 = (dot(vec3(cbLight._m0[_1467 + 3u].xyz), vec3(_239, _240, _241)) * 0.5) + 0.5;
        float _1726 = _1725 * _1725;
        float _3517 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _1728 = isnan(1.0) ? _1484 : (isnan(_1484) ? 1.0 : min(_1484, 1.0));
        _1601 = (((cbLight._m0[_1709].x * 0.3183098733425140380859375) * _1727) * _1728) + _1556;
        _1603 = (((cbLight._m0[_1709].y * 0.3183098733425140380859375) * _1727) * _1728) + _1558;
        _1605 = (((cbLight._m0[_1709].z * 0.3183098733425140380859375) * _1727) * _1728) + _1560;
    }
    uint _1607 = _1467 + 8u;
    float _1613 = cbLight._m0[_1467].x + _319;
    float _1614 = cbLight._m0[_1467].y + _320;
    float _1615 = cbLight._m0[_1467].z + _321;
    float _1619 = inversesqrt(dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615)));
    float _1623 = dot(vec3(_239, _240, _241), vec3(cbLight._m0[_1467].xyz));
    float _3533 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
    float _1626 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _3544 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _1627 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _1628 = dot(vec3(cbLight._m0[_1467].xyz), vec3(_1613 * _1619, _1614 * _1619, _1615 * _1619));
    float _3555 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
    float _1639 = (exp2(log2(1.0 - (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1645 = (0.5 / ((_1626 + 9.9999999392252902907785028219223e-09) + _1627)) * _1626;
    float _3566 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
    float _1647 = (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) * 0.31831014156341552734375;
    uint _1661 = _1467 + 9u;
    float _1667 = cbLight._m0[_1509].x + _319;
    float _1668 = cbLight._m0[_1509].y + _320;
    float _1669 = cbLight._m0[_1509].z + _321;
    float _1673 = inversesqrt(dot(vec3(_1667, _1668, _1669), vec3(_1667, _1668, _1669)));
    float _1677 = dot(vec3(_239, _240, _241), vec3(cbLight._m0[_1509].xyz));
    float _3577 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
    float _1680 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    float _1681 = dot(vec3(cbLight._m0[_1509].xyz), vec3(_1667 * _1673, _1668 * _1673, _1669 * _1673));
    float _3588 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
    float _1690 = (exp2(log2(1.0 - (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1694 = (0.5 / ((_1680 + 9.9999999392252902907785028219223e-09) + _1627)) * _1680;
    float _3599 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
    float _1696 = (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * 0.31831014156341552734375;
    float _1706 = (((_1690 * cbLight._m0[_1661].x) * _1696) * _1491) + ((((cbLight._m0[_1607].x * _1459) * _1639) * _1647) * _1505);
    float _1707 = (((_1690 * cbLight._m0[_1661].y) * _1696) * _1491) + ((((cbLight._m0[_1607].y * _1460) * _1639) * _1647) * _1505);
    float _1708 = (((_1690 * cbLight._m0[_1661].z) * _1696) * _1491) + ((((cbLight._m0[_1607].z * _1461) * _1639) * _1647) * _1505);
    float _1770;
    float _1772;
    float _1774;
    if (_1545)
    {
        _1770 = _1706;
        _1772 = _1707;
        _1774 = _1708;
    }
    else
    {
        uint _1776 = _1467 + 10u;
        uint _1782 = _1467 + 2u;
        float _1788 = cbLight._m0[_1782].x + _319;
        float _1789 = cbLight._m0[_1782].y + _320;
        float _1790 = cbLight._m0[_1782].z + _321;
        float _1794 = inversesqrt(dot(vec3(_1788, _1789, _1790), vec3(_1788, _1789, _1790)));
        float _1798 = dot(vec3(_239, _240, _241), vec3(cbLight._m0[_1782].xyz));
        float _3610 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1801 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1802 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_1788 * _1794, _1789 * _1794, _1790 * _1794));
        float _3621 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1811 = (exp2(log2(1.0 - (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1815 = (0.5 / ((_1801 + 9.9999999392252902907785028219223e-09) + _1627)) * _1801;
        float _3632 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1817 = (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * 0.31831014156341552734375;
        float _1818 = isnan(1.0) ? _1483 : (isnan(_1483) ? 1.0 : min(_1483, 1.0));
        _1770 = (((_1811 * cbLight._m0[_1776].x) * _1817) * _1818) + _1706;
        _1772 = (((_1811 * cbLight._m0[_1776].y) * _1817) * _1818) + _1707;
        _1774 = (((_1811 * cbLight._m0[_1776].z) * _1817) * _1818) + _1708;
    }
    float _1853;
    float _1855;
    float _1857;
    if (_1563)
    {
        _1853 = _1770;
        _1855 = _1772;
        _1857 = _1774;
    }
    else
    {
        uint _1864 = _1467 + 11u;
        uint _1870 = _1467 + 3u;
        float _1876 = cbLight._m0[_1870].x + _319;
        float _1877 = cbLight._m0[_1870].y + _320;
        float _1878 = cbLight._m0[_1870].z + _321;
        float _1882 = inversesqrt(dot(vec3(_1876, _1877, _1878), vec3(_1876, _1877, _1878)));
        float _1886 = dot(vec3(_239, _240, _241), vec3(cbLight._m0[_1870].xyz));
        float _3648 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1889 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1890 = dot(vec3(cbLight._m0[_1870].xyz), vec3(_1876 * _1882, _1877 * _1882, _1878 * _1882));
        float _3659 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        float _1899 = (exp2(log2(1.0 - (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1903 = (0.5 / ((_1889 + 9.9999999392252902907785028219223e-09) + _1627)) * _1889;
        float _3670 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
        float _1905 = (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * 0.31831014156341552734375;
        float _1906 = isnan(1.0) ? _1484 : (isnan(_1484) ? 1.0 : min(_1484, 1.0));
        _1853 = (((_1899 * cbLight._m0[_1864].x) * _1905) * _1906) + _1770;
        _1855 = (((_1899 * cbLight._m0[_1864].y) * _1905) * _1906) + _1772;
        _1857 = (((_1899 * cbLight._m0[_1864].z) * _1905) * _1906) + _1774;
    }
    float _2040;
    float _2042;
    float _2044;
    float _2046;
    float _2048;
    float _2050;
    if (_1465.y == 0u)
    {
        float _1981 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1982 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1981;
        float _1983 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1981;
        float _1984 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1981;
        uvec4 _1996 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1997 = _1996.x;
        uint _2008 = uint((float(_1996.y) * floor(float(uint(cbSceneParam._m0[85u].y * _341) / _1997))) + floor(float(uint(cbSceneParam._m0[85u].x * _340) / _1997)));
        float _2018 = (log2(_1984 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2019 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        uint _2022 = uint(isnan(14.0) ? _2019 : (isnan(_2019) ? 14.0 : min(_2019, 14.0)));
        uvec4 _2027 = texelFetch(g_lightClusterGridBuffer, int(((_2022 << 2u) + (_2008 << 6u)) >> 2u));
        uint _2028 = _2027.x;
        uint _2029 = _1996.z;
        float _2163;
        float _2165;
        float _2167;
        float _2169;
        float _2171;
        float _2173;
        if (((((1u << ((_2029 >> 4u) & 15u)) + 4294967295u) & _2028) == 0u) || ((_2029 & 240u) == 0u))
        {
            _2163 = 0.0;
            _2165 = 0.0;
            _2167 = 0.0;
            _2169 = 0.0;
            _2171 = 0.0;
            _2173 = 0.0;
        }
        else
        {
            float _2164;
            float _2166;
            float _2168;
            float _2170;
            float _2172;
            float _2174;
            float _2323 = 0.0;
            float _2324 = 0.0;
            float _2325 = 0.0;
            float _2326 = 0.0;
            float _2327 = 0.0;
            float _2328 = 0.0;
            uint _2329 = 0u;
            uint _2338;
            bool _2339;
            for (;;)
            {
                _2338 = texelFetch(g_lightClassification, int((((_2022 << 5u) + (_2008 << 9u)) + (_2329 << 2u)) >> 2u)).x;
                _2339 = _2338 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2339)
                {
                    frontier_phi_68_pred = _2325;
                    frontier_phi_68_pred_1 = _2328;
                    frontier_phi_68_pred_2 = _2327;
                    frontier_phi_68_pred_3 = _2326;
                    frontier_phi_68_pred_4 = _2324;
                    frontier_phi_68_pred_5 = _2323;
                }
                else
                {
                    float _2468;
                    float _2469;
                    float _2470;
                    float _2471;
                    float _2472;
                    float _2473;
                    uint _2474;
                    _2468 = _2323;
                    _2469 = _2324;
                    _2470 = _2325;
                    _2471 = _2326;
                    _2472 = _2327;
                    _2473 = _2328;
                    _2474 = _2338;
                    float _2395;
                    float _2396;
                    float _2397;
                    float _2398;
                    float _2399;
                    float _2400;
                    for (;;)
                    {
                        uint _2478 = uint(findLSB(_2474)) + (_2329 << 5u);
                        uint _2475 = (_2474 + 4294967295u) & _2474;
                        uint _2480 = _2478 * 48u;
                        vec4 _2494 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2480)).x, texelFetch(g_PointLightRenderingBuffer, int(_2480 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2480 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2480 + 3u)).x));
                        uint _2500 = (_2478 * 48u) + 4u;
                        vec4 _2513 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2500)).x, texelFetch(g_PointLightRenderingBuffer, int(_2500 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2500 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2500 + 3u)).x));
                        uint _2519 = (_2478 * 48u) + 8u;
                        vec3 _2530 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2519)).x, texelFetch(g_PointLightRenderingBuffer, int(_2519 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2519 + 2u)).x));
                        float _2534 = _2494.x - _1982;
                        float _2535 = _2494.y - _1983;
                        float _2536 = _2494.z - _1984;
                        float _2537 = dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536));
                        float _2540 = inversesqrt(_2537);
                        float _2549 = 1.0 - (_2537 * _2494.w);
                        float _3696 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
                        float _2550 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
                        float _2551 = sqrt(_2537) * _2513.w;
                        float _2554 = 1.39999997615814208984375 / (_2551 + 1.39999997615814208984375);
                        float _2555 = _2554 * _2554;
                        float _2558 = ((1.0 - _2555) * dot(vec3(_361, _364, _367), vec3(_2540 * _2534, _2540 * _2535, _2540 * _2536))) + _2555;
                        float _2561 = _2551 * _2551;
                        float _2565 = ((isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0))) * _2550) / ((_2561 * 0.699999988079071044921875) + 1.0);
                        float _2569 = (-0.0) - _1982;
                        float _2570 = (-0.0) - _1983;
                        float _2571 = (-0.0) - _1984;
                        float _2575 = inversesqrt(dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571)));
                        float _2579 = dot(vec3(_361, _364, _367), vec3(_2575 * _2569, _2575 * _2570, _2575 * _2571));
                        float _3712 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
                        float _3723 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
                        float _2583 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
                        float _2587 = (0.5 / (((isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) + 9.9999999392252902907785028219223e-09) + _2583)) * _2583;
                        float _3734 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
                        float _2596 = (((isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * 3.1415927410125732421875) / ((_2561 * 2.1991131305694580078125) + 3.141590118408203125)) * _2550;
                        _2398 = (_2565 * _2513.x) + _2471;
                        _2399 = (_2565 * _2513.y) + _2472;
                        _2400 = (_2565 * _2513.z) + _2473;
                        _2395 = (_2596 * _2530.x) + _2468;
                        _2396 = (_2596 * _2530.y) + _2469;
                        _2397 = (_2596 * _2530.z) + _2470;
                        if (_2475 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2468 = _2395;
                            _2469 = _2396;
                            _2470 = _2397;
                            _2471 = _2398;
                            _2472 = _2399;
                            _2473 = _2400;
                            _2474 = _2475;
                        }
                    }
                    frontier_phi_68_pred = _2397;
                    frontier_phi_68_pred_1 = _2400;
                    frontier_phi_68_pred_2 = _2399;
                    frontier_phi_68_pred_3 = _2398;
                    frontier_phi_68_pred_4 = _2396;
                    frontier_phi_68_pred_5 = _2395;
                }
                _2168 = frontier_phi_68_pred;
                _2174 = frontier_phi_68_pred_1;
                _2172 = frontier_phi_68_pred_2;
                _2170 = frontier_phi_68_pred_3;
                _2166 = frontier_phi_68_pred_4;
                _2164 = frontier_phi_68_pred_5;
                uint _2330 = _2329 + 1u;
                if (_2330 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2323 = _2164;
                    _2324 = _2166;
                    _2325 = _2168;
                    _2326 = _2170;
                    _2327 = _2172;
                    _2328 = _2174;
                    _2329 = _2330;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2163 = _2164;
            _2165 = _2166;
            _2167 = _2168;
            _2169 = _2170;
            _2171 = _2172;
            _2173 = _2174;
        }
        uvec4 _2177 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2178 = _2177.z;
        uint _2180 = (_2178 >> 8u) & 15u;
        float _2294;
        float _2296;
        float _2298;
        float _2300;
        float _2302;
        float _2304;
        if (((4294967295u << _2180) & _2028) == 0u)
        {
            _2294 = _2163;
            _2296 = _2165;
            _2298 = _2167;
            _2300 = _2169;
            _2302 = _2171;
            _2304 = _2173;
        }
        else
        {
            float _2319 = inversesqrt(dot(vec3(_1982, _1983, _1984), vec3(_1982, _1983, _1984)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2180 < ((_2178 >> 12u) & 15u))
            {
                float _2295;
                float _2297;
                float _2299;
                float _2301;
                float _2303;
                float _2305;
                float _2451 = _2163;
                float _2452 = _2165;
                float _2453 = _2167;
                float _2454 = _2169;
                float _2455 = _2171;
                float _2456 = _2173;
                uint _2457 = _2180;
                uint _2466;
                bool _2467;
                for (;;)
                {
                    _2466 = texelFetch(g_lightClassification, int((((_2022 << 5u) + (_2008 << 9u)) + (_2457 << 2u)) >> 2u)).x;
                    _2467 = _2466 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2467)
                    {
                        frontier_phi_79_pred = _2456;
                        frontier_phi_79_pred_1 = _2455;
                        frontier_phi_79_pred_2 = _2454;
                        frontier_phi_79_pred_3 = _2453;
                        frontier_phi_79_pred_4 = _2452;
                        frontier_phi_79_pred_5 = _2451;
                    }
                    else
                    {
                        float _2610;
                        float _2611;
                        float _2612;
                        float _2613;
                        float _2614;
                        float _2615;
                        float _2862;
                        float _2863;
                        float _2864;
                        float _2865;
                        float _2866;
                        float _2867;
                        float _2623 = _2451;
                        float _2624 = _2452;
                        float _2625 = _2453;
                        float _2626 = _2454;
                        float _2627 = _2455;
                        float _2628 = _2456;
                        uint _2629 = _2466;
                        uint _2630;
                        vec4 _2655;
                        float _2656;
                        vec4 _2671;
                        vec3 _2683;
                        vec4 _2699;
                        vec4 _2715;
                        float _2762;
                        bool _2763;
                        for (;;)
                        {
                            uint _2640 = ((_2457 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2629));
                            _2630 = (_2629 + 4294967295u) & _2629;
                            uint _2642 = _2640 * 40u;
                            _2655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2642 + 3u)).x));
                            _2656 = _2655.w;
                            uint _2658 = (_2640 * 40u) + 4u;
                            _2671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 3u)).x));
                            uint _2673 = (_2640 * 40u) + 8u;
                            _2683 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2673 + 2u)).x));
                            uint _2686 = (_2640 * 40u) + 16u;
                            _2699 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2686)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2686 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2686 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2686 + 3u)).x));
                            uint _2702 = (_2640 * 40u) + 20u;
                            _2715 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2702)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2702 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2702 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2702 + 3u)).x));
                            uint _2718 = (_2640 * 40u) + 24u;
                            vec4 _2731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 3u)).x));
                            uint _2737 = (_2640 * 40u) + 28u;
                            vec4 _2750 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2737)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 3u)).x));
                            _2762 = fma(_1984, _2750.z, fma(_1983, _2750.y, _2750.x * _1982)) + _2750.w;
                            _2763 = !((fma(_1984, _2731.z, fma(_1983, _2731.y, _2731.x * _1982)) + _2731.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2763)
                            {
                                float _2790 = _2655.x - _1982;
                                float _2791 = _2655.y - _1983;
                                float _2792 = _2655.z - _1984;
                                float _2793 = dot(vec3(_2790, _2791, _2792), vec3(_2790, _2791, _2792));
                                float _2796 = inversesqrt(_2793);
                                float _2797 = _2796 * _2790;
                                float _2798 = _2796 * _2791;
                                float _2799 = _2796 * _2792;
                                float _2803 = 1.0 - (_2793 / (_2656 * _2656));
                                float _3745 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
                                float _2804 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
                                float _2808 = sqrt(_2793) * _2671.w;
                                float _2810 = 1.39999997615814208984375 / (_2808 + 1.39999997615814208984375);
                                float _2811 = _2810 * _2810;
                                float _2812 = 1.0 - _2811;
                                float _2814 = (_2812 * dot(vec3(_2797, _2798, _2799), vec3(_361, _364, _367))) + _2811;
                                float _2817 = _2808 * _2808;
                                float _2821 = (fma(_1984, _2699.z, fma(_1983, _2699.y, _2699.x * _1982)) + _2699.w) / _2762;
                                float _2822 = (fma(_1984, _2715.z, fma(_1983, _2715.y, _2715.x * _1982)) + _2715.w) / _2762;
                                float _2826 = 1.0 - dot(vec2(_2821, _2822), vec2(_2821, _2822));
                                float _3761 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                                float _2827 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
                                float _2828 = _2827 * (((isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0))) * _2804) / ((_2817 * 0.699999988079071044921875) + 1.0));
                                float _2838 = dot(vec3(_361, _364, _367), vec3((-0.0) - (_1982 * _2319), (-0.0) - (_1983 * _2319), (-0.0) - (_1984 * _2319)));
                                float _3772 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
                                float _2846 = (_2812 * dot(vec3(_361, _364, _367), vec3(_2797, _2798, _2799))) + _2811;
                                float _3783 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
                                float _2847 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
                                float _2851 = (0.5 / (((isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) + 9.9999999392252902907785028219223e-09) + _2847)) * _2847;
                                float _3794 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                                float _2858 = (_2827 * _2804) * (((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * 3.1415927410125732421875) / ((_2817 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2828 * _2671.z;
                                frontier_phi_85_pred_1 = _2828 * _2671.y;
                                frontier_phi_85_pred_2 = _2828 * _2671.x;
                                frontier_phi_85_pred_3 = _2858 * _2683.z;
                                frontier_phi_85_pred_4 = _2858 * _2683.y;
                                frontier_phi_85_pred_5 = _2858 * _2683.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2867 = frontier_phi_85_pred;
                            _2866 = frontier_phi_85_pred_1;
                            _2865 = frontier_phi_85_pred_2;
                            _2864 = frontier_phi_85_pred_3;
                            _2863 = frontier_phi_85_pred_4;
                            _2862 = frontier_phi_85_pred_5;
                            _2613 = _2865 + _2626;
                            _2614 = _2866 + _2627;
                            _2615 = _2867 + _2628;
                            _2610 = _2862 + _2623;
                            _2611 = _2863 + _2624;
                            _2612 = _2864 + _2625;
                            if (_2630 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2623 = _2610;
                                _2624 = _2611;
                                _2625 = _2612;
                                _2626 = _2613;
                                _2627 = _2614;
                                _2628 = _2615;
                                _2629 = _2630;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2615;
                        frontier_phi_79_pred_1 = _2614;
                        frontier_phi_79_pred_2 = _2613;
                        frontier_phi_79_pred_3 = _2612;
                        frontier_phi_79_pred_4 = _2611;
                        frontier_phi_79_pred_5 = _2610;
                    }
                    _2305 = frontier_phi_79_pred;
                    _2303 = frontier_phi_79_pred_1;
                    _2301 = frontier_phi_79_pred_2;
                    _2299 = frontier_phi_79_pred_3;
                    _2297 = frontier_phi_79_pred_4;
                    _2295 = frontier_phi_79_pred_5;
                    uint _2458 = _2457 + 1u;
                    if (_2458 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2451 = _2295;
                        _2452 = _2297;
                        _2453 = _2299;
                        _2454 = _2301;
                        _2455 = _2303;
                        _2456 = _2305;
                        _2457 = _2458;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2301;
                frontier_phi_60_61_ladder_1 = _2305;
                frontier_phi_60_61_ladder_2 = _2303;
                frontier_phi_60_61_ladder_3 = _2299;
                frontier_phi_60_61_ladder_4 = _2297;
                frontier_phi_60_61_ladder_5 = _2295;
            }
            else
            {
                frontier_phi_60_61_ladder = _2169;
                frontier_phi_60_61_ladder_1 = _2173;
                frontier_phi_60_61_ladder_2 = _2171;
                frontier_phi_60_61_ladder_3 = _2167;
                frontier_phi_60_61_ladder_4 = _2165;
                frontier_phi_60_61_ladder_5 = _2163;
            }
            _2294 = frontier_phi_60_61_ladder_5;
            _2296 = frontier_phi_60_61_ladder_4;
            _2298 = frontier_phi_60_61_ladder_3;
            _2300 = frontier_phi_60_61_ladder;
            _2302 = frontier_phi_60_61_ladder_2;
            _2304 = frontier_phi_60_61_ladder_1;
        }
        float _2309 = isnan(1.0) ? _406 : (isnan(_406) ? 1.0 : min(_406, 1.0));
        _2040 = (_2309 * _2300) + _1601;
        _2042 = (_2309 * _2302) + _1603;
        _2044 = (_2309 * _2304) + _1605;
        _2046 = ((_2294 * 0.039999999105930328369140625) * _2309) + _1853;
        _2048 = ((_2296 * 0.039999999105930328369140625) * _2309) + _1855;
        _2050 = ((_2298 * 0.039999999105930328369140625) * _2309) + _1857;
    }
    else
    {
        _2040 = _1601;
        _2042 = _1603;
        _2044 = _1605;
        _2046 = _1853;
        _2048 = _1855;
        _2050 = _1857;
    }
    uint _2056 = _382 + uint(cbMatDynParam._m0[0u].w);
    float _2064 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _230.x) * cbInstanceData._m0[_2056].x;
    float _2067 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _230.y) * cbInstanceData._m0[_2056].y;
    float _2070 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _230.z) * cbInstanceData._m0[_2056].z;
    float _3810 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _3821 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _3832 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _2087 = (((isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_2040 + ((isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0))) * _406))) + ((_2046 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _1217)) * cbPerFrame._m0[3u].x)) + _2064;
    float _2089 = (_2067 + ((_2048 + ((isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))) * _1217)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_2042 + ((isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0))) * _406)));
    float _2091 = (_2070 + ((_2050 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _1217)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_2044 + ((isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0))) * _406)));
    float _2092 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2093 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2094 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2100 = cbMtdParam._m0[2u].x * _2064;
    float _2101 = cbMtdParam._m0[2u].y * _2067;
    float _2102 = cbMtdParam._m0[2u].z * _2070;
    float _3858 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2104 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    uint _2105 = _380 + 6u;
    float _2113 = _340 / cbSceneParam._m0[86u].x;
    float _2114 = _341 / cbSceneParam._m0[86u].y;
    vec4 _2128 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2113, _2114, (log2((isnan(cbSceneParam._m0[77u].w) ? _261 : (isnan(_261) ? cbSceneParam._m0[77u].w : min(_261, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2130 = _2128.x;
    float _2131 = _2128.y;
    float _2132 = _2128.z;
    float _2133 = _2128.w;
    float _2225;
    float _2227;
    float _2229;
    float _2231;
    if (_261 > cbSceneParam._m0[78u].w)
    {
        float _2188 = isnan(_261) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _261 : min(cbSceneParam._m0[80u].w, _261));
        float _2189 = _2188 / _261;
        float _2200 = _2189 * _312;
        float _2201 = _313 * _2189;
        float _2202 = (-0.0) - _2201;
        float _2203 = _2189 * _314;
        float _2205 = (cbSceneParam._m0[77u].w * _2202) / _2188;
        float _2206 = _2205 + cbSceneParam._m0[79u].w;
        float _2207 = cbSceneParam._m0[79u].w - _2201;
        float _2213 = sqrt(((_2200 * _2200) + (_2201 * _2201)) + (_2203 * _2203));
        float _2216 = (1.0 - (cbSceneParam._m0[77u].w / _2188)) * _2213;
        float _2221 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2223 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2408;
        if (abs((_2202 - _2205) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2408 = ((((_2206 > 0.0) ? exp2(_2221 * _2206) : (2.0 - exp2(_2223 * _2206))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2216;
        }
        else
        {
            float _2352 = 1.0 / cbSceneParam._m0[80u].x;
            float _2353 = isnan(_2207) ? _2206 : (isnan(_2206) ? _2207 : max(_2206, _2207));
            float _2354 = isnan(_2207) ? _2206 : (isnan(_2206) ? _2207 : min(_2206, _2207));
            float _2363 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : min(_2353, 0.0));
            float _2364 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : min(_2354, 0.0));
            _2408 = ((abs(_2213 / _2202) * cbSceneParam._m0[80u].y) * ((((_2363 - _2364) * 2.0) - ((exp2(_2221 * (isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0)))) - exp2(_2221 * (isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0))))) * _2352)) - ((exp2(_2223 * _2363) - exp2(_2223 * _2364)) * _2352))) + (_2216 * cbSceneParam._m0[80u].z);
        }
        vec4 _2410 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2113, _2114, 1.0), 0.0);
        float _2419 = exp2((_2408 * (-1.44269502162933349609375)) * (1.0 - _2410.w));
        float _2420 = log2(_2419);
        float _2436 = log2(_2133);
        _2225 = (exp2(_2436 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2420 * cbSceneParam._m0[78u].x)) * _2410.x) / cbSceneParam._m0[78u].x)) + _2130;
        _2227 = (exp2(_2436 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2420 * cbSceneParam._m0[78u].y)) * _2410.y) / cbSceneParam._m0[78u].y)) + _2131;
        _2229 = (exp2(_2436 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2420 * cbSceneParam._m0[78u].z)) * _2410.z) / cbSceneParam._m0[78u].z)) + _2132;
        _2231 = _2419 * _2133;
    }
    else
    {
        _2225 = _2130;
        _2227 = _2131;
        _2229 = _2132;
        _2231 = _2133;
    }
    bool _2446;
    vec4 _2241;
    vec4 _2264;
    float _2266;
    float _2270;
    float _2271;
    float _2272;
    float _2275;
    float _2278;
    float _2281;
    float _2282;
    bool _2293;
    for (;;)
    {
        _2241 = cbMatDynParam._m0[0u];
        float _2243 = roundEven(_2241.y);
        bool _2244 = _2243 == 3.0;
        float _2246 = log2(_2231);
        float _2250 = exp2(_2246 * cbSceneParam._m0[78u].x);
        float _2251 = exp2(_2246 * cbSceneParam._m0[78u].y);
        float _2252 = exp2(_2246 * cbSceneParam._m0[78u].z);
        float _2253 = _2250 * _2092;
        float _2254 = _2251 * _2093;
        float _2255 = _2252 * _2094;
        float _2262 = _328 + (-0.5);
        _2264 = cbMtdParam._m0[1u];
        _2266 = _2264.y * _2262;
        float _2269 = (_2243 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2270 = _2269 * (_2244 ? _2253 : (_2253 + (cbSceneParam._m0[72u].w * _2225)));
        _2271 = _2269 * (_2244 ? _2254 : (_2254 + (cbSceneParam._m0[72u].w * _2227)));
        _2272 = _2269 * (_2244 ? _2255 : (_2255 + (cbSceneParam._m0[72u].w * _2229)));
        _2275 = ((_2100 * _2104) * _2250) * _2269;
        _2278 = ((_2101 * _2104) * _2251) * _2269;
        _2281 = ((_2102 * _2104) * _2252) * _2269;
        _2282 = _2262 * 0.999000012874603271484375;
        _2293 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2293)
        {
            if ((cbInstanceData._m0[_380 + 7u].x + _2282) < 0.5)
            {
                _2446 = true;
                break;
            }
        }
        uint _2387 = _382 + uint(_2241.w);
        if ((cbInstanceData._m0[_2387].w < 1.0) && ((cbInstanceData._m0[_2387].w + _2282) < 0.5))
        {
            _2446 = true;
            break;
        }
        if ((_2266 + _205) < _2264.x)
        {
            _2446 = true;
            break;
        }
        _2446 = false;
        break;
    }
    float _2601;
    if (_2446)
    {
        discard_state = true;
        _2601 = 0.0;
    }
    else
    {
        _2601 = cbInstanceData._m0[_2105].w;
    }
    SV_Target.x = _2270;
    SV_Target.y = _2271;
    SV_Target.z = _2272;
    SV_Target.w = _2601;
    SV_Target_1.x = _2275;
    SV_Target_1.y = _2278;
    SV_Target_1.z = _2281;
    SV_Target_1.w = cbInstanceData._m0[_2105].w;
    discard_exit();
}


