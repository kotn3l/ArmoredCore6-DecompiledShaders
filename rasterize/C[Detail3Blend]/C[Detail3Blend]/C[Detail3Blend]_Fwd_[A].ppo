#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Detail3Blend_snp_0_Texture2D_7;
layout(set = 0, binding = 1) uniform texture2D C_Detail3Blend_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Detail3Blend_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Detail3Blend_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Detail3Blend_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D C_Detail3Blend_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D C_Detail3Blend_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D C_Detail3Blend_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1218;
float _3603;
float _3604;
float _3605;
float _3606;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232;
    float _233;
    float _234;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
    }
    else
    {
        _232 = _218;
        _233 = _219;
        _234 = _220;
    }
    vec4 _248 = texture(sampler2D(C_Detail3Blend_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _254 = _248.w;
    float _260 = exp2(log2(1.0 - _254) * 10.0);
    vec4 _273 = texture(sampler2D(C_Detail3Blend_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _298 = texture(sampler2D(C_Detail3Blend_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _309 = cbMtdParam._m0[9u].x * _298.x;
    float _310 = cbMtdParam._m0[9u].y * _298.y;
    float _311 = cbMtdParam._m0[9u].z * _298.z;
    float _318 = (((cbMtdParam._m0[10u].x * _273.x) - _309) * _260) + _309;
    float _319 = (((cbMtdParam._m0[10u].y * _273.y) - _310) * _260) + _310;
    float _320 = (((cbMtdParam._m0[10u].z * _273.z) - _311) * _260) + _311;
    float _323 = exp2(log2(_254) * 10.0);
    vec4 _335 = texture(sampler2D(C_Detail3Blend_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _369 = texture(sampler2D(C_Detail3Blend_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _374 = _369.w;
    float _377 = (((((cbMtdParam._m0[11u].x * _335.x) - _318) * _323) + _318) * 4.55000019073486328125) * _369.x;
    float _379 = (((((cbMtdParam._m0[11u].y * _335.y) - _319) * _323) + _319) * 4.55000019073486328125) * _369.y;
    float _381 = (((((cbMtdParam._m0[11u].z * _335.z) - _320) * _323) + _320) * 4.55000019073486328125) * _369.z;
    vec4 _398 = texture(sampler2D(C_Detail3Blend_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _417 = texture(sampler2D(C_Detail3Blend_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _419 = _417.x;
    float _420 = _417.y;
    float _423 = cbMtdParam._m0[12u].x + _417.z;
    float _426 = (((cbMtdParam._m0[12u].y + _398.z) - _423) * _260) + _423;
    vec4 _439 = texture(sampler2D(C_Detail3Blend_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _454 = (_248.z * 2.0) * ((((_439.z - _426) + cbMtdParam._m0[13u].x) * _323) + _426);
    float _465 = ((_398.x - _419) * _260) + _419;
    float _466 = ((_398.y - _420) * _260) + _420;
    float _475 = ((((_439.x - _465) * _323) + _465) * 2.0) + (-1.0);
    float _476 = ((((_439.y - _466) * _323) + _466) * 2.0) + (-1.0);
    float _477 = dot(vec2(_475, _476), vec2(_475, _476));
    float _3615 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _482 = sqrt(1.0 - (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))));
    float _485 = _475 + (cbMtdParam._m0[12u].z * ((_248.x * 2.0) + (-1.0)));
    float _486 = _476 + (cbMtdParam._m0[12u].z * ((_248.y * 2.0) + (-1.0)));
    float _489 = fma(_482, _232, fma(_486, _224 * TANGENT.x, (_210 * _202) * _485));
    float _492 = fma(_482, _233, fma(_486, _224 * TANGENT.y, (_210 * _203) * _485));
    float _495 = fma(_482, _234, fma(_486, _224 * TANGENT.z, (_210 * _204) * _485));
    float _499 = inversesqrt(dot(vec3(_489, _492, _495), vec3(_489, _492, _495)));
    float _500 = _499 * _489;
    float _501 = _499 * _492;
    float _502 = _499 * _495;
    float _3626 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _503 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _3637 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _504 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    float _3648 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _505 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _3659 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _506 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _3670 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _507 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _3681 = isnan(0.0) ? cbMtdParam._m0[12u].w : (isnan(cbMtdParam._m0[12u].w) ? 0.0 : max(cbMtdParam._m0[12u].w, 0.0));
    float _508 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _524 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _565 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _575 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _565);
    float _576 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _565);
    float _577 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _565);
    float _581 = inversesqrt(dot(vec3(_575, _576, _577), vec3(_575, _576, _577)));
    float _582 = _575 * _581;
    float _583 = _576 * _581;
    float _584 = _577 * _581;
    vec4 _589 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _591 = _589.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _897 = sqrt(((_575 * _575) + (_576 * _576)) + (_577 * _577));
        float _903 = (cbMatDynParam._m0[5u].x * _897) + cbMatDynParam._m0[5u].y;
        float _3692 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _908 = (cbMatDynParam._m0[5u].z * _897) + cbMatDynParam._m0[5u].w;
        float _3703 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) - _904)) + _904) < ((_591 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _602 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _603 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _605 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _607 = _605.w;
    float _625 = fma(_502, cbSceneParam._m0[5u].z, fma(_501, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _500));
    float _628 = fma(_502, cbSceneParam._m0[6u].z, fma(_501, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _500));
    float _631 = fma(_502, cbSceneParam._m0[7u].z, fma(_501, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _500));
    vec4 _633 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _635 = _633.x;
    float _647 = (((_633.y - _504) + (_633.w * _504)) * cbMtdParam._m0[3u].x) + _504;
    vec4 _648 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _664 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_635 * _635)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _648.z;
    float _673 = (((cbMatDynParam._m0[15u].x - _508) * cbMatDynParam._m0[15u].w) * _664) + _508;
    float _682 = ((_664 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _647)) + _647;
    uint _706 = uint(roundEven(NORMAL.w)) * 13u;
    uint _707 = _706 + 9u;
    uint _708 = _707 + uint(cbMatDynParam._m0[0u].w);
    float _714 = (cbMtdParam._m0[0u].x * _505) * cbInstanceData._m0[_708].x;
    float _715 = (cbMtdParam._m0[0u].y * _506) * cbInstanceData._m0[_708].y;
    float _716 = (cbMtdParam._m0[0u].z * _507) * cbInstanceData._m0[_708].z;
    float _3714 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _717 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _3725 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _718 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _3736 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _719 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    vec4 _720 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _725 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _736 = (((_725.x - _673) + (_725.w * _673)) * cbMtdParam._m0[3u].x) + _673;
    float _749 = (cbMtdParam._m0[3u].x * (((_717 * _607) - _717) + _720.x)) + _717;
    float _750 = (cbMtdParam._m0[3u].x * (((_718 * _607) - _718) + _720.y)) + _718;
    float _751 = (cbMtdParam._m0[3u].x * (((_719 * _607) - _719) + _720.z)) + _719;
    float _765 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_673 * (_505 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_673 * (_506 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_673 * (_507 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _769 = _765 * cbMatDynParam._m0[13u].w;
    float _779 = (_769 * (cbMatDynParam._m0[13u].x - _749)) + _749;
    float _780 = (_769 * (cbMatDynParam._m0[13u].y - _750)) + _750;
    float _781 = (_769 * (cbMatDynParam._m0[13u].z - _751)) + _751;
    float _789 = ((_765 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _736)) + _736;
    float _790 = 1.0 - _789;
    float _791 = _790 * _779;
    float _792 = _790 * _780;
    float _793 = _790 * _781;
    float _797 = (_779 + (-0.039999999105930328369140625)) * _789;
    float _798 = (_780 + (-0.039999999105930328369140625)) * _789;
    float _799 = (_781 + (-0.039999999105930328369140625)) * _789;
    float _800 = _797 + 0.039999999105930328369140625;
    float _801 = _798 + 0.039999999105930328369140625;
    float _802 = _799 + 0.039999999105930328369140625;
    vec4 _811 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _602, cbSceneParam._m0[86u].y * _603));
    float _814 = _811.x * TEXCOORD_4;
    float _815 = dot(vec3(_500, _501, _502), vec3(_582, _583, _584));
    float _818 = _815 * 2.0;
    float _822 = (_818 * _500) - _582;
    float _823 = (_818 * _501) - _583;
    float _824 = (_818 * _502) - _584;
    float _828 = abs(dot(vec3(_582, _583, _584), vec3(_500, _501, _502)));
    float _3747 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _830 = sqrt(_682);
    float _843 = exp2((_830 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_830 * 3.0));
    float _849 = (1.0 - _843) * ((_830 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _850 = _843 * _830;
    float _878 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _882 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _886 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1217;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _942 = fma(_886, cbModelParam._m0[26u].z, fma(_882, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _878));
        float _946 = fma(_886, cbModelParam._m0[27u].z, fma(_882, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _878));
        float _950 = fma(_886, cbModelParam._m0[28u].z, fma(_882, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _878));
        float _975 = _878 + _500;
        float _976 = _882 + _501;
        float _977 = _886 + _502;
        float _987 = fma(_977, cbModelParam._m0[26u].z, fma(_976, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _975)) - _942;
        float _988 = fma(_977, cbModelParam._m0[27u].z, fma(_976, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _975)) - _946;
        float _989 = fma(_977, cbModelParam._m0[28u].z, fma(_976, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _975)) - _950;
        float _993 = inversesqrt(dot(vec3(_987, _988, _989), vec3(_987, _988, _989)));
        float _1006 = ((_993 * _987) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_942 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_993 * _988) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_946 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1008 = ((_993 * _989) / cbModelParam._m0[34u].z) + ((((((_950 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        float _1045 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1011.x + (-0.5));
        float _1047 = _1045 * (_1011.y + (-0.5));
        float _1048 = _1045 * (_1011.z + (-0.5));
        float _1055 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1018.x + (-0.5));
        float _1057 = _1055 * (_1018.y + (-0.5));
        float _1058 = _1055 * (_1018.z + (-0.5));
        float _1065 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1025.x + (-0.5));
        float _1067 = _1065 * (_1025.y + (-0.5));
        float _1068 = _1065 * (_1025.z + (-0.5));
        float _1075 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1032.x + (-0.5));
        float _1077 = _1075 * (_1032.y + (-0.5));
        float _1078 = _1075 * (_1032.z + (-0.5));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = _1046 * 0.5;
        float _1083 = _1056 * 0.5;
        float _1084 = _1066 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1099 = (dot(vec3(_500, _501, _502), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3773 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1109 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3784 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _3795 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * (_1111 + 1.0))) + _1116) * _1079;
        float _1126 = _1047 * 0.5;
        float _1127 = _1057 * 0.5;
        float _1128 = _1067 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(_500, _501, _502), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _3806 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3817 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _3828 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * (_1153 + 1.0))) + _1158) * _1080;
        float _1168 = _1048 * 0.5;
        float _1169 = _1058 * 0.5;
        float _1170 = _1068 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_500, _501, _502), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3839 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3850 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3861 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_1195 + 1.0))) + _1200) * _1081;
        _1217 = _1048;
        _1219 = _1047;
        _1220 = _1046;
        _1221 = _1058;
        _1222 = _1057;
        _1223 = _1056;
        _1224 = _1068;
        _1225 = _1067;
        _1226 = _1066;
        _1227 = _1081;
        _1228 = _1080;
        _1229 = _1079;
        _1230 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
        _1231 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1232 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
    }
    else
    {
        _1217 = _1218;
        _1219 = _1218;
        _1220 = _1218;
        _1221 = _1218;
        _1222 = _1218;
        _1223 = _1218;
        _1224 = _1218;
        _1225 = _1218;
        _1226 = _1218;
        _1227 = _1218;
        _1228 = _1218;
        _1229 = _1218;
        _1230 = 0.0;
        _1231 = 0.0;
        _1232 = 0.0;
    }
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1261 = fma(_886, cbModelParam._m0[30u].z, fma(_882, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _878));
        float _1265 = fma(_886, cbModelParam._m0[31u].z, fma(_882, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _878));
        float _1269 = fma(_886, cbModelParam._m0[32u].z, fma(_882, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _878));
        float _1292 = _878 + _500;
        float _1293 = _882 + _501;
        float _1294 = _886 + _502;
        float _1304 = fma(_1294, cbModelParam._m0[30u].z, fma(_1293, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1292)) - _1261;
        float _1305 = fma(_1294, cbModelParam._m0[31u].z, fma(_1293, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1292)) - _1265;
        float _1306 = fma(_1294, cbModelParam._m0[32u].z, fma(_1293, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1292)) - _1269;
        float _1310 = inversesqrt(dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306)));
        float _1323 = ((_1310 * _1304) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1261 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1324 = ((_1310 * _1305) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1265 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1325 = ((_1310 * _1306) / cbModelParam._m0[35u].z) + ((((((_1269 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1323, _1324, _1325), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1323, _1324, _1325), 0.0);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1323, _1324, _1325), 0.0);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1323, _1324, _1325), 0.0);
        float _1360 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1327.x + (-0.5));
        float _1362 = _1360 * (_1327.y + (-0.5));
        float _1363 = _1360 * (_1327.z + (-0.5));
        float _1370 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1334.x + (-0.5));
        float _1372 = _1370 * (_1334.y + (-0.5));
        float _1373 = _1370 * (_1334.z + (-0.5));
        float _1380 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1341.x + (-0.5));
        float _1382 = _1380 * (_1341.y + (-0.5));
        float _1383 = _1380 * (_1341.z + (-0.5));
        float _1390 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1348.x + (-0.5));
        float _1392 = _1390 * (_1348.y + (-0.5));
        float _1393 = _1390 * (_1348.z + (-0.5));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = _1361 * 0.5;
        float _1398 = _1371 * 0.5;
        float _1399 = _1381 * 0.5;
        float _1400 = dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399));
        float _1405 = (_1400 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1400);
        float _1413 = (dot(vec3(_500, _501, _502), vec3(_1405 * _1397, _1405 * _1398, _1405 * _1399)) + 1.0) * 0.5;
        float _3902 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1422 = sqrt(((_1398 * _1398) + (_1397 * _1397)) + (_1399 * _1399)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _3913 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _3924 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_1424 + 1.0))) + _1429) * _1394;
        float _1439 = _1362 * 0.5;
        float _1440 = _1372 * 0.5;
        float _1441 = _1382 * 0.5;
        float _1442 = dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441));
        float _1447 = (_1442 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1442);
        float _1455 = (dot(vec3(_500, _501, _502), vec3(_1447 * _1439, _1447 * _1440, _1447 * _1441)) + 1.0) * 0.5;
        float _3935 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1464 = sqrt(((_1440 * _1440) + (_1439 * _1439)) + (_1441 * _1441)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _3946 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1466 = _1465 * 2.0;
        float _1470 = (1.0 - _1465) / (_1465 + 1.0);
        float _3957 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1480 = ((((1.0 - _1471) * (_1466 + 2.0)) * exp2(log2(isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_1466 + 1.0))) + _1471) * _1395;
        float _1481 = _1363 * 0.5;
        float _1482 = _1373 * 0.5;
        float _1483 = _1383 * 0.5;
        float _1484 = dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483));
        float _1489 = (_1484 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1484);
        float _1497 = (dot(vec3(_500, _501, _502), vec3(_1489 * _1481, _1489 * _1482, _1489 * _1483)) + 1.0) * 0.5;
        float _3968 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1506 = sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _3979 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1508 = _1507 * 2.0;
        float _1512 = (1.0 - _1507) / (_1507 + 1.0);
        float _3990 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1522 = ((((1.0 - _1513) * (_1508 + 2.0)) * exp2(log2(isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1508 + 1.0))) + _1513) * _1396;
        _1530 = _1363;
        _1531 = _1362;
        _1532 = _1361;
        _1533 = _1373;
        _1534 = _1372;
        _1535 = _1371;
        _1536 = _1383;
        _1537 = _1382;
        _1538 = _1381;
        _1539 = _1396;
        _1540 = _1395;
        _1541 = _1394;
        _1542 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
        _1543 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)));
        _1544 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)));
    }
    else
    {
        _1530 = _1218;
        _1531 = _1218;
        _1532 = _1218;
        _1533 = _1218;
        _1534 = _1218;
        _1535 = _1218;
        _1536 = _1218;
        _1537 = _1218;
        _1538 = _1218;
        _1539 = _1218;
        _1540 = _1218;
        _1541 = _1218;
        _1542 = 0.0;
        _1543 = 0.0;
        _1544 = 0.0;
    }
    float _1554 = (cbModelParam._m0[1u].x * (_1542 - _1230)) + _1230;
    float _1555 = (cbModelParam._m0[1u].x * (_1543 - _1231)) + _1231;
    float _1556 = (cbModelParam._m0[1u].x * (_1544 - _1232)) + _1232;
    float _1577 = fma(_1556, cbSceneParam._m0[89u].z, fma(_1555, cbSceneParam._m0[89u].y, _1554 * cbSceneParam._m0[89u].x));
    float _1580 = fma(_1556, cbSceneParam._m0[90u].z, fma(_1555, cbSceneParam._m0[90u].y, _1554 * cbSceneParam._m0[90u].x));
    float _1583 = fma(_1556, cbSceneParam._m0[91u].z, fma(_1555, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1554));
    float _1598 = _822 * 0.5;
    float _1599 = _823 * 0.5;
    float _1600 = _824 * 0.5;
    float _1601 = dot(vec4(_1598, _1599, _1600, 1.0), vec4(_1532, _1535, _1538, _1541));
    float _1604 = dot(vec4(_1598, _1599, _1600, 1.0), vec4(_1531, _1534, _1537, _1540));
    float _1607 = dot(vec4(_1598, _1599, _1600, 1.0), vec4(_1530, _1533, _1536, _1539));
    float _1638;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1614 = dot(vec4(_1598, _1599, _1600, 1.0), vec4(_1217, _1221, _1224, _1227));
        float _1618 = dot(vec4(_1598, _1599, _1600, 1.0), vec4(_1219, _1222, _1225, _1228));
        float _1622 = dot(vec4(_1598, _1599, _1600, 1.0), vec4(_1220, _1223, _1226, _1229));
        float _1629 = dot(vec4(cbModelParam._m0[39u]), vec4(_1598, _1599, _1600, 1.0));
        _1638 = dot(vec3(isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)), isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1629) ? 0.0 : (isnan(0.0) ? _1629 : max(0.0, _1629))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1638 = 1.0;
    }
    float _1649;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1640 = dot(vec4(cbModelParam._m0[40u]), vec4(_1598, _1599, _1600, 1.0));
        _1649 = dot(vec3(isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)), isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)), isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1640) ? 0.0 : (isnan(0.0) ? _1640 : max(0.0, _1640))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1649 = 1.0;
    }
    float _1653 = (_1649 * cbModelParam._m0[1u].x) + (_1638 * (1.0 - cbModelParam._m0[1u].x));
    float _1663 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _682);
    float _1664 = isnan(_1663) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1663 : min(cbModelParam._m0[25u].z, _1663));
    float _1744;
    float _1746;
    float _1748;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1711 = fma(_886, cbModelParam._m0[13u].z, fma(_882, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _878)) + cbModelParam._m0[13u].w;
        float _1715 = fma(_886, cbModelParam._m0[14u].z, fma(_882, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _878)) + cbModelParam._m0[14u].w;
        float _1719 = fma(_886, cbModelParam._m0[15u].z, fma(_882, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _878)) + cbModelParam._m0[15u].w;
        float _1722 = fma(_824, cbModelParam._m0[13u].z, fma(_823, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _822));
        float _1725 = fma(_824, cbModelParam._m0[14u].z, fma(_823, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _822));
        float _1728 = fma(_824, cbModelParam._m0[15u].z, fma(_823, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _822));
        float _1756;
        if (_1722 > 0.0)
        {
            _1756 = abs((1.0 - _1711) / _1722);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1711 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1756 = frontier_phi_19_17_ladder;
        }
        float _1962;
        if (_1725 > 0.0)
        {
            _1962 = abs((1.0 - _1715) / _1725);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1715 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1962 = frontier_phi_28_24_ladder;
        }
        float _2216;
        if (_1728 > 0.0)
        {
            _2216 = abs((1.0 - _1719) / _1728);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1719 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2216 = frontier_phi_40_35_ladder;
        }
        float _2218 = isnan(_1962) ? _1756 : (isnan(_1756) ? _1962 : min(_1756, _1962));
        float _2219 = isnan(_2216) ? _2218 : (isnan(_2218) ? _2216 : min(_2218, _2216));
        float _2223 = (_2219 * _1722) + _1711;
        float _2224 = (_2219 * _1725) + _1715;
        float _2225 = (_2219 * _1728) + _1719;
        float _2226 = _2219 * 9.9999997473787516355514526367188e-05;
        float _2228 = (-1.0) - _2226;
        float _2230 = _2226 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2225 > _2230) || ((_2225 < _2228) || ((_2224 > _2230) || ((_2224 < _2228) || ((_2223 < _2228) || (_2223 > _2230))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2353 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2225, cbModelParam._m0[9u].z, fma(_2224, cbModelParam._m0[9u].y, _2223 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2225, cbModelParam._m0[10u].z, fma(_2224, cbModelParam._m0[10u].y, _2223 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2225, cbModelParam._m0[11u].z, fma(_2224, cbModelParam._m0[11u].y, _2223 * cbModelParam._m0[11u].x))), _1664);
            frontier_phi_18_40_ladder = _2353.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2353.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2353.x * cbModelParam._m0[1u].y;
        }
        _1744 = frontier_phi_18_40_ladder_2;
        _1746 = frontier_phi_18_40_ladder_1;
        _1748 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1732 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_822, _823, _824), _1664);
        _1744 = _1732.x * cbModelParam._m0[1u].y;
        _1746 = _1732.y * cbModelParam._m0[1u].y;
        _1748 = _1732.z * cbModelParam._m0[1u].y;
    }
    float _1752 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _682);
    float _1753 = isnan(_1752) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1752 : min(cbModelParam._m0[25u].w, _1752));
    float _1846;
    float _1848;
    float _1850;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1810 = fma(_886, cbModelParam._m0[21u].z, fma(_882, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _878)) + cbModelParam._m0[21u].w;
        float _1814 = fma(_886, cbModelParam._m0[22u].z, fma(_882, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _878)) + cbModelParam._m0[22u].w;
        float _1818 = fma(_886, cbModelParam._m0[23u].z, fma(_882, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _878)) + cbModelParam._m0[23u].w;
        float _1821 = fma(_824, cbModelParam._m0[21u].z, fma(_823, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _822));
        float _1824 = fma(_824, cbModelParam._m0[22u].z, fma(_823, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _822));
        float _1827 = fma(_824, cbModelParam._m0[23u].z, fma(_823, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _822));
        float _1967;
        if (_1821 > 0.0)
        {
            _1967 = abs((1.0 - _1810) / _1821);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1810 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1967 = frontier_phi_30_26_ladder;
        }
        float _2243;
        if (_1824 > 0.0)
        {
            _2243 = abs((1.0 - _1814) / _1824);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1814 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2243 = frontier_phi_42_37_ladder;
        }
        float _2456;
        if (_1827 > 0.0)
        {
            _2456 = abs((1.0 - _1818) / _1827);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1818 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2456 = frontier_phi_51_48_ladder;
        }
        float _2458 = isnan(_2243) ? _1967 : (isnan(_1967) ? _2243 : min(_1967, _2243));
        float _2459 = isnan(_2456) ? _2458 : (isnan(_2458) ? _2456 : min(_2458, _2456));
        float _2463 = (_2459 * _1821) + _1810;
        float _2464 = (_2459 * _1824) + _1814;
        float _2465 = (_2459 * _1827) + _1818;
        float _2466 = _2459 * 9.9999997473787516355514526367188e-05;
        float _2467 = (-1.0) - _2466;
        float _2469 = _2466 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2465 > _2469) || ((_2465 < _2467) || ((_2464 > _2469) || ((_2464 < _2467) || ((_2463 < _2467) || (_2463 > _2469))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2665 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2465, cbModelParam._m0[17u].z, fma(_2464, cbModelParam._m0[17u].y, _2463 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2465, cbModelParam._m0[18u].z, fma(_2464, cbModelParam._m0[18u].y, _2463 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2465, cbModelParam._m0[19u].z, fma(_2464, cbModelParam._m0[19u].y, _2463 * cbModelParam._m0[19u].x))), _1753);
            frontier_phi_27_51_ladder = _2665.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2665.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2665.x * cbModelParam._m0[1u].z;
        }
        _1846 = frontier_phi_27_51_ladder_2;
        _1848 = frontier_phi_27_51_ladder_1;
        _1850 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1830 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_822, _823, _824), _1753);
        _1846 = _1830.x * cbModelParam._m0[1u].z;
        _1848 = _1830.y * cbModelParam._m0[1u].z;
        _1850 = _1830.z * cbModelParam._m0[1u].z;
    }
    float _1863 = (((_849 * _800) + _850) * _814) * ((cbModelParam._m0[1u].w * (_1846 - _1744)) + _1744);
    float _1865 = (((_849 * _801) + _850) * _814) * ((cbModelParam._m0[1u].w * (_1848 - _1746)) + _1746);
    float _1867 = (((_849 * _802) + _850) * _814) * ((cbModelParam._m0[1u].w * (_1850 - _1748)) + _1748);
    float _1870 = fma(_1867, cbSceneParam._m0[89u].z, fma(_1865, cbSceneParam._m0[89u].y, _1863 * cbSceneParam._m0[89u].x));
    float _1873 = fma(_1867, cbSceneParam._m0[90u].z, fma(_1865, cbSceneParam._m0[90u].y, _1863 * cbSceneParam._m0[90u].x));
    float _1876 = fma(_1867, cbSceneParam._m0[91u].z, fma(_1865, cbSceneParam._m0[91u].y, _1863 * cbSceneParam._m0[91u].x));
    uvec4 _1886 = floatBitsToUint(cbInstanceData._m0[_706 + 5u]);
    uint _1888 = _1886.x * 14u;
    uint _1889 = _1888 + 13u;
    float _1896 = _814 + (-1.0);
    float _1901 = (cbLight._m0[_1889].x * _1896) + 1.0;
    float _1902 = (cbLight._m0[_1889].y * _1896) + 1.0;
    float _1903 = (cbLight._m0[_1889].z * _1896) + 1.0;
    float _1904 = (cbLight._m0[_1889].w * _1896) + 1.0;
    uint _1905 = _1888 + 5u;
    float _1911 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
    uint _1915 = _1888 + 4u;
    float _1921 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
    uint _1925 = _1888 | 1u;
    float _1936 = dot(vec3(cbLight._m0[_1888].xyz), vec3(_500, _501, _502));
    float _1939 = dot(vec3(cbLight._m0[_1925].xyz), vec3(_500, _501, _502));
    float _4126 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _4137 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1944 = (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * 0.3183098733425140380859375;
    float _1946 = (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * 0.3183098733425140380859375;
    float _1953 = ((cbLight._m0[_1905].x * _1911) * _1946) + ((cbLight._m0[_1915].x * _1921) * _1944);
    float _1954 = ((_1911 * cbLight._m0[_1905].y) * _1946) + ((_1921 * cbLight._m0[_1915].y) * _1944);
    float _1955 = ((_1911 * cbLight._m0[_1905].z) * _1946) + ((_1921 * cbLight._m0[_1915].z) * _1944);
    uvec4 _1959 = floatBitsToUint(cbLight._m0[_1888 + 12u]);
    bool _1961 = _1959.x == 0u;
    float _1972;
    float _1974;
    float _1976;
    if (_1961)
    {
        _1972 = _1953;
        _1974 = _1954;
        _1976 = _1955;
    }
    else
    {
        uint _1980 = _1888 + 6u;
        float _1996 = (dot(vec3(cbLight._m0[_1888 + 2u].xyz), vec3(_500, _501, _502)) * 0.5) + 0.5;
        float _1997 = _1996 * _1996;
        float _4148 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _1998 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1999 = isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0));
        _1972 = (((cbLight._m0[_1980].x * 0.3183098733425140380859375) * _1998) * _1999) + _1953;
        _1974 = (((cbLight._m0[_1980].y * 0.3183098733425140380859375) * _1998) * _1999) + _1954;
        _1976 = (((cbLight._m0[_1980].z * 0.3183098733425140380859375) * _1998) * _1999) + _1955;
    }
    bool _1979 = _1959.y == 0u;
    float _2017;
    float _2019;
    float _2021;
    if (_1979)
    {
        _2017 = _1972;
        _2019 = _1974;
        _2021 = _1976;
    }
    else
    {
        uint _2187 = _1888 + 7u;
        float _2203 = (dot(vec3(cbLight._m0[_1888 + 3u].xyz), vec3(_500, _501, _502)) * 0.5) + 0.5;
        float _2204 = _2203 * _2203;
        float _4164 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2205 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _2206 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
        _2017 = (((cbLight._m0[_2187].x * 0.3183098733425140380859375) * _2205) * _2206) + _1972;
        _2019 = (((cbLight._m0[_2187].y * 0.3183098733425140380859375) * _2205) * _2206) + _1974;
        _2021 = (((cbLight._m0[_2187].z * 0.3183098733425140380859375) * _2205) * _2206) + _1976;
    }
    uint _2024 = _1888 + 8u;
    float _2037 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1888].w)) * _682) * 0.949999988079071044921875);
    float _2038 = _2037 * _2037;
    float _2039 = cbLight._m0[_1888].x + _582;
    float _2040 = cbLight._m0[_1888].y + _583;
    float _2041 = cbLight._m0[_1888].z + _584;
    float _2045 = inversesqrt(dot(vec3(_2039, _2040, _2041), vec3(_2039, _2040, _2041)));
    float _2046 = _2045 * _2039;
    float _2047 = _2045 * _2040;
    float _2048 = _2045 * _2041;
    float _2049 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_1888].xyz));
    float _4180 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2052 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _4191 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _2053 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _2054 = dot(vec3(_500, _501, _502), vec3(_2046, _2047, _2048));
    float _4202 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2057 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _2058 = dot(vec3(cbLight._m0[_1888].xyz), vec3(_2046, _2047, _2048));
    float _4213 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2062 = _2038 * _2038;
    float _2066 = ((_2057 * _2057) * (_2062 + (-1.0))) + 1.0;
    float _2074 = exp2(log2(1.0 - (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0)))) * 5.0);
    float _2075 = 0.959999978542327880859375 - _797;
    float _2077 = 0.959999978542327880859375 - _798;
    float _2078 = 0.959999978542327880859375 - _799;
    float _2085 = 1.0 - _2038;
    float _2096 = (0.5 / (((_2053 * ((_2052 * _2085) + _2038)) + 9.9999999392252902907785028219223e-09) + (((_2053 * _2085) + _2038) * _2052))) * _2052;
    float _4224 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2098 = (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_2062 / ((_2066 * _2066) * 3.141590118408203125));
    uint _2109 = _1888 + 9u;
    float _2120 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1925].w)) * _682) * 0.949999988079071044921875);
    float _2121 = _2120 * _2120;
    float _2122 = cbLight._m0[_1925].x + _582;
    float _2123 = cbLight._m0[_1925].y + _583;
    float _2124 = cbLight._m0[_1925].z + _584;
    float _2128 = inversesqrt(dot(vec3(_2122, _2123, _2124), vec3(_2122, _2123, _2124)));
    float _2129 = _2128 * _2122;
    float _2130 = _2128 * _2123;
    float _2131 = _2128 * _2124;
    float _2132 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_1925].xyz));
    float _4235 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2135 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _2136 = dot(vec3(_500, _501, _502), vec3(_2129, _2130, _2131));
    float _4246 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2139 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _2140 = dot(vec3(cbLight._m0[_1925].xyz), vec3(_2129, _2130, _2131));
    float _4257 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2144 = _2121 * _2121;
    float _2148 = ((_2139 * _2139) * (_2144 + (-1.0))) + 1.0;
    float _2155 = exp2(log2(1.0 - (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0)))) * 5.0);
    float _2162 = 1.0 - _2121;
    float _2172 = (0.5 / (((_2053 * ((_2135 * _2162) + _2121)) + 9.9999999392252902907785028219223e-09) + (((_2053 * _2162) + _2121) * _2135))) * _2135;
    float _4268 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2174 = (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_2144 / ((_2148 * _2148) * 3.141590118408203125));
    float _2184 = (((((_2155 * _2075) + _800) * cbLight._m0[_2109].x) * _2174) * _1911) + (((((_2074 * _2075) + _800) * cbLight._m0[_2024].x) * _2098) * _1921);
    float _2185 = (((((_2155 * _2077) + _801) * cbLight._m0[_2109].y) * _2174) * _1911) + (((((_2074 * _2077) + _801) * cbLight._m0[_2024].y) * _2098) * _1921);
    float _2186 = (((((_2155 * _2078) + _802) * cbLight._m0[_2109].z) * _2174) * _1911) + (((((_2074 * _2078) + _802) * cbLight._m0[_2024].z) * _2098) * _1921);
    float _2248;
    float _2250;
    float _2252;
    if (_1961)
    {
        _2248 = _2184;
        _2250 = _2185;
        _2252 = _2186;
    }
    else
    {
        uint _2254 = _1888 + 2u;
        uint _2258 = _1888 + 10u;
        float _2272 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2254].w)) * _682) * 0.949999988079071044921875);
        float _2273 = _2272 * _2272;
        float _2274 = cbLight._m0[_2254].x + _582;
        float _2275 = cbLight._m0[_2254].y + _583;
        float _2276 = cbLight._m0[_2254].z + _584;
        float _2280 = inversesqrt(dot(vec3(_2274, _2275, _2276), vec3(_2274, _2275, _2276)));
        float _2281 = _2280 * _2274;
        float _2282 = _2280 * _2275;
        float _2283 = _2280 * _2276;
        float _2284 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_2254].xyz));
        float _4279 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2287 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2288 = dot(vec3(_500, _501, _502), vec3(_2281, _2282, _2283));
        float _4290 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2291 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _2292 = dot(vec3(cbLight._m0[_2254].xyz), vec3(_2281, _2282, _2283));
        float _4301 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2296 = _2273 * _2273;
        float _2300 = ((_2291 * _2291) * (_2296 + (-1.0))) + 1.0;
        float _2307 = exp2(log2(1.0 - (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) * 5.0);
        float _2314 = 1.0 - _2273;
        float _2324 = (0.5 / (((_2053 * ((_2287 * _2314) + _2273)) + 9.9999999392252902907785028219223e-09) + (((_2053 * _2314) + _2273) * _2287))) * _2287;
        float _4312 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2326 = (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_2296 / ((_2300 * _2300) * 3.141590118408203125));
        float _2327 = isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0));
        _2248 = (((((_2307 * _2075) + _800) * cbLight._m0[_2258].x) * _2326) * _2327) + _2184;
        _2250 = (((((_2307 * _2077) + _801) * cbLight._m0[_2258].y) * _2326) * _2327) + _2185;
        _2252 = (((((_2307 * _2078) + _802) * cbLight._m0[_2258].z) * _2326) * _2327) + _2186;
    }
    float _2362;
    float _2364;
    float _2366;
    if (_1979)
    {
        _2362 = _2248;
        _2364 = _2250;
        _2366 = _2252;
    }
    else
    {
        uint _2373 = _1888 + 3u;
        uint _2377 = _1888 + 11u;
        float _2391 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2373].w)) * _682) * 0.949999988079071044921875);
        float _2392 = _2391 * _2391;
        float _2393 = cbLight._m0[_2373].x + _582;
        float _2394 = cbLight._m0[_2373].y + _583;
        float _2395 = cbLight._m0[_2373].z + _584;
        float _2399 = inversesqrt(dot(vec3(_2393, _2394, _2395), vec3(_2393, _2394, _2395)));
        float _2400 = _2399 * _2393;
        float _2401 = _2399 * _2394;
        float _2402 = _2399 * _2395;
        float _2403 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_2373].xyz));
        float _4328 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2406 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _2407 = dot(vec3(_500, _501, _502), vec3(_2400, _2401, _2402));
        float _4339 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2410 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _2411 = dot(vec3(cbLight._m0[_2373].xyz), vec3(_2400, _2401, _2402));
        float _4350 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2415 = _2392 * _2392;
        float _2419 = ((_2410 * _2410) * (_2415 + (-1.0))) + 1.0;
        float _2426 = exp2(log2(1.0 - (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0)))) * 5.0);
        float _2433 = 1.0 - _2392;
        float _2443 = (0.5 / (((_2053 * ((_2406 * _2433) + _2392)) + 9.9999999392252902907785028219223e-09) + (((_2053 * _2433) + _2392) * _2406))) * _2406;
        float _4361 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2445 = (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_2415 / ((_2419 * _2419) * 3.141590118408203125));
        float _2446 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
        _2362 = (((((_2426 * _2075) + _800) * cbLight._m0[_2377].x) * _2445) * _2446) + _2248;
        _2364 = (((((_2426 * _2077) + _801) * cbLight._m0[_2377].y) * _2445) * _2446) + _2250;
        _2366 = (((((_2426 * _2078) + _802) * cbLight._m0[_2377].z) * _2445) * _2446) + _2252;
    }
    float _2580;
    float _2582;
    float _2584;
    float _2586;
    float _2588;
    float _2590;
    if (_1886.y == 0u)
    {
        float _2521 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2522 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2521;
        float _2523 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2521;
        float _2524 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2521;
        uvec4 _2536 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2537 = _2536.x;
        uint _2548 = uint((float(_2536.y) * floor(float(uint(cbSceneParam._m0[85u].y * _603) / _2537))) + floor(float(uint(cbSceneParam._m0[85u].x * _602) / _2537)));
        float _2558 = (log2(_2524 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2559 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        uint _2562 = uint(isnan(14.0) ? _2559 : (isnan(_2559) ? 14.0 : min(_2559, 14.0)));
        uvec4 _2567 = texelFetch(g_lightClusterGridBuffer, int(((_2562 << 2u) + (_2548 << 6u)) >> 2u));
        uint _2568 = _2567.x;
        uint _2569 = _2536.z;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        float _2680;
        if (((((1u << ((_2569 >> 4u) & 15u)) + 4294967295u) & _2568) == 0u) || ((_2569 & 240u) == 0u))
        {
            _2670 = 0.0;
            _2672 = 0.0;
            _2674 = 0.0;
            _2676 = 0.0;
            _2678 = 0.0;
            _2680 = 0.0;
        }
        else
        {
            float _2671;
            float _2673;
            float _2675;
            float _2677;
            float _2679;
            float _2681;
            float _2822 = 0.0;
            float _2823 = 0.0;
            float _2824 = 0.0;
            float _2825 = 0.0;
            float _2826 = 0.0;
            float _2827 = 0.0;
            uint _2828 = 0u;
            uint _2837;
            bool _2838;
            for (;;)
            {
                _2837 = texelFetch(g_lightClassification, int((((_2562 << 5u) + (_2548 << 9u)) + (_2828 << 2u)) >> 2u)).x;
                _2838 = _2837 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2838)
                {
                    frontier_phi_68_pred = _2824;
                    frontier_phi_68_pred_1 = _2827;
                    frontier_phi_68_pred_2 = _2826;
                    frontier_phi_68_pred_3 = _2825;
                    frontier_phi_68_pred_4 = _2823;
                    frontier_phi_68_pred_5 = _2822;
                }
                else
                {
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    float _2972;
                    uint _2973;
                    _2967 = _2822;
                    _2968 = _2823;
                    _2969 = _2824;
                    _2970 = _2825;
                    _2971 = _2826;
                    _2972 = _2827;
                    _2973 = _2837;
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    for (;;)
                    {
                        uint _2977 = uint(findLSB(_2973)) + (_2828 << 5u);
                        uint _2974 = (_2973 + 4294967295u) & _2973;
                        uint _2979 = _2977 * 48u;
                        vec4 _2993 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2979)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 3u)).x));
                        uint _2999 = (_2977 * 48u) + 4u;
                        vec4 _3012 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2999)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 3u)).x));
                        uint _3018 = (_2977 * 48u) + 8u;
                        vec3 _3029 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3018)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 2u)).x));
                        float _3033 = _2993.x - _2522;
                        float _3034 = _2993.y - _2523;
                        float _3035 = _2993.z - _2524;
                        float _3036 = dot(vec3(_3033, _3034, _3035), vec3(_3033, _3034, _3035));
                        float _3039 = inversesqrt(_3036);
                        float _3040 = _3039 * _3033;
                        float _3041 = _3039 * _3034;
                        float _3042 = _3039 * _3035;
                        float _3043 = dot(vec3(_625, _628, _631), vec3(_3040, _3041, _3042));
                        float _3048 = 1.0 - (_3036 * _2993.w);
                        float _4387 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3049 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                        float _3050 = sqrt(_3036) * _3012.w;
                        float _3053 = 1.39999997615814208984375 / (_3050 + 1.39999997615814208984375);
                        float _3054 = _3053 * _3053;
                        float _3057 = ((1.0 - _3054) * _3043) + _3054;
                        float _3060 = _3050 * _3050;
                        float _3064 = ((isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0))) * _3049) / ((_3060 * 0.699999988079071044921875) + 1.0);
                        float _3068 = (-0.0) - _2522;
                        float _3069 = (-0.0) - _2523;
                        float _3070 = (-0.0) - _2524;
                        float _3074 = inversesqrt(dot(vec3(_3068, _3069, _3070), vec3(_3068, _3069, _3070)));
                        float _3075 = _3074 * _3068;
                        float _3076 = _3074 * _3069;
                        float _3077 = _3074 * _3070;
                        float _3085 = exp2(log2(1.0 / ((_3060 * 3.5) + 5.0)) * 0.25);
                        float _3086 = 1.0 - _830;
                        float _3093 = sqrt(1.0 - ((1.0 - (_3086 * _3086)) * (1.0 - (_3085 * _3085))));
                        float _3094 = _3093 * _3093;
                        float _3095 = _3094 * _3094;
                        float _3096 = _3075 + _3040;
                        float _3097 = _3076 + _3041;
                        float _3098 = _3077 + _3042;
                        float _3102 = inversesqrt(dot(vec3(_3096, _3097, _3098), vec3(_3096, _3097, _3098)));
                        float _3106 = dot(vec3(_625, _628, _631), vec3(_3075, _3076, _3077));
                        float _4403 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                        float _3109 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                        float _3110 = dot(vec3(_625, _628, _631), vec3(_3102 * _3096, _3102 * _3097, _3102 * _3098));
                        float _4414 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                        float _3113 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                        float _3117 = ((_3113 * _3113) * (_3095 + (-1.0))) + 1.0;
                        float _3118 = _3053 * _3094;
                        float _3119 = _3118 * _3118;
                        float _3122 = ((1.0 - _3119) * _3043) + _3119;
                        float _4425 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                        float _3123 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                        float _3124 = 1.0 - _3094;
                        float _3134 = (0.5 / (((_3123 * ((_3109 * _3124) + _3094)) + 9.9999999392252902907785028219223e-09) + (((_3123 * _3124) + _3094) * _3109))) * _3123;
                        float _4436 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                        float _3145 = (((_3095 * 3.1415927410125732421875) * (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) / ((_3117 * _3117) * ((_3060 * 2.1991131305694580078125) + 3.141590118408203125))) * _3049;
                        _2897 = (_3064 * _3012.x) + _2970;
                        _2898 = (_3064 * _3012.y) + _2971;
                        _2899 = (_3064 * _3012.z) + _2972;
                        _2894 = (_3145 * _3029.x) + _2967;
                        _2895 = (_3145 * _3029.y) + _2968;
                        _2896 = (_3145 * _3029.z) + _2969;
                        if (_2974 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2967 = _2894;
                            _2968 = _2895;
                            _2969 = _2896;
                            _2970 = _2897;
                            _2971 = _2898;
                            _2972 = _2899;
                            _2973 = _2974;
                        }
                    }
                    frontier_phi_68_pred = _2896;
                    frontier_phi_68_pred_1 = _2899;
                    frontier_phi_68_pred_2 = _2898;
                    frontier_phi_68_pred_3 = _2897;
                    frontier_phi_68_pred_4 = _2895;
                    frontier_phi_68_pred_5 = _2894;
                }
                _2675 = frontier_phi_68_pred;
                _2681 = frontier_phi_68_pred_1;
                _2679 = frontier_phi_68_pred_2;
                _2677 = frontier_phi_68_pred_3;
                _2673 = frontier_phi_68_pred_4;
                _2671 = frontier_phi_68_pred_5;
                uint _2829 = _2828 + 1u;
                if (_2829 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2822 = _2671;
                    _2823 = _2673;
                    _2824 = _2675;
                    _2825 = _2677;
                    _2826 = _2679;
                    _2827 = _2681;
                    _2828 = _2829;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2670 = _2671;
            _2672 = _2673;
            _2674 = _2675;
            _2676 = _2677;
            _2678 = _2679;
            _2680 = _2681;
        }
        uvec4 _2684 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2685 = _2684.z;
        uint _2687 = (_2685 >> 8u) & 15u;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        if (((4294967295u << _2687) & _2568) == 0u)
        {
            _2790 = _2670;
            _2792 = _2672;
            _2794 = _2674;
            _2796 = _2676;
            _2798 = _2678;
            _2800 = _2680;
        }
        else
        {
            float _2815 = inversesqrt(dot(vec3(_2522, _2523, _2524), vec3(_2522, _2523, _2524)));
            float _2816 = _2815 * _2522;
            float _2817 = _2815 * _2523;
            float _2818 = _2815 * _2524;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2687 < ((_2685 >> 12u) & 15u))
            {
                float _2791;
                float _2793;
                float _2795;
                float _2797;
                float _2799;
                float _2801;
                float _2950 = _2670;
                float _2951 = _2672;
                float _2952 = _2674;
                float _2953 = _2676;
                float _2954 = _2678;
                float _2955 = _2680;
                uint _2956 = _2687;
                uint _2965;
                bool _2966;
                for (;;)
                {
                    _2965 = texelFetch(g_lightClassification, int((((_2562 << 5u) + (_2548 << 9u)) + (_2956 << 2u)) >> 2u)).x;
                    _2966 = _2965 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2966)
                    {
                        frontier_phi_79_pred = _2955;
                        frontier_phi_79_pred_1 = _2954;
                        frontier_phi_79_pred_2 = _2953;
                        frontier_phi_79_pred_3 = _2952;
                        frontier_phi_79_pred_4 = _2951;
                        frontier_phi_79_pred_5 = _2950;
                    }
                    else
                    {
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3172 = _2950;
                        float _3173 = _2951;
                        float _3174 = _2952;
                        float _3175 = _2953;
                        float _3176 = _2954;
                        float _3177 = _2955;
                        uint _3178 = _2965;
                        uint _3179;
                        vec4 _3204;
                        float _3205;
                        vec4 _3220;
                        vec3 _3232;
                        vec4 _3247;
                        vec4 _3263;
                        float _3310;
                        bool _3311;
                        for (;;)
                        {
                            uint _3189 = ((_2956 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3178));
                            _3179 = (_3178 + 4294967295u) & _3178;
                            uint _3191 = _3189 * 40u;
                            _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            _3205 = _3204.w;
                            uint _3207 = (_3189 * 40u) + 4u;
                            _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            uint _3222 = (_3189 * 40u) + 8u;
                            _3232 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x));
                            uint _3234 = (_3189 * 40u) + 16u;
                            _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            uint _3250 = (_3189 * 40u) + 20u;
                            _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            uint _3266 = (_3189 * 40u) + 24u;
                            vec4 _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            uint _3285 = (_3189 * 40u) + 28u;
                            vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            _3310 = fma(_2524, _3298.z, fma(_2523, _3298.y, _3298.x * _2522)) + _3298.w;
                            _3311 = !((fma(_2524, _3279.z, fma(_2523, _3279.y, _3279.x * _2522)) + _3279.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3311)
                            {
                                float _3338 = _3204.x - _2522;
                                float _3339 = _3204.y - _2523;
                                float _3340 = _3204.z - _2524;
                                float _3341 = dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340));
                                float _3344 = inversesqrt(_3341);
                                float _3345 = _3344 * _3338;
                                float _3346 = _3344 * _3339;
                                float _3347 = _3344 * _3340;
                                float _3351 = 1.0 - (_3341 / (_3205 * _3205));
                                float _4447 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3352 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                                float _3356 = sqrt(_3341) * _3220.w;
                                float _3358 = 1.39999997615814208984375 / (_3356 + 1.39999997615814208984375);
                                float _3359 = _3358 * _3358;
                                float _3362 = ((1.0 - _3359) * dot(vec3(_3345, _3346, _3347), vec3(_625, _628, _631))) + _3359;
                                float _3365 = _3356 * _3356;
                                float _3369 = (fma(_2524, _3247.z, fma(_2523, _3247.y, _3247.x * _2522)) + _3247.w) / _3310;
                                float _3370 = (fma(_2524, _3263.z, fma(_2523, _3263.y, _3263.x * _2522)) + _3263.w) / _3310;
                                float _3374 = 1.0 - dot(vec2(_3369, _3370), vec2(_3369, _3370));
                                float _4463 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3375 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                                float _3376 = _3375 * (((isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0))) * _3352) / ((_3365 * 0.699999988079071044921875) + 1.0));
                                float _3388 = exp2(log2(1.0 / ((_3365 * 3.5) + 5.0)) * 0.25);
                                float _3389 = 1.0 - _830;
                                float _3396 = sqrt(1.0 - ((1.0 - (_3389 * _3389)) * (1.0 - (_3388 * _3388))));
                                float _3397 = _3396 * _3396;
                                float _3398 = _3397 * _3397;
                                float _3399 = _3345 - _2816;
                                float _3400 = _3346 - _2817;
                                float _3401 = _3347 - _2818;
                                float _3405 = inversesqrt(dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401)));
                                float _3409 = dot(vec3(_625, _628, _631), vec3((-0.0) - _2816, (-0.0) - _2817, (-0.0) - _2818));
                                float _4474 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3412 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                                float _3413 = dot(vec3(_625, _628, _631), vec3(_3405 * _3399, _3405 * _3400, _3405 * _3401));
                                float _4485 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                                float _3416 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                                float _3420 = ((_3416 * _3416) * (_3398 + (-1.0))) + 1.0;
                                float _3421 = _3358 * _3397;
                                float _3422 = _3421 * _3421;
                                float _3428 = ((1.0 - _3422) * dot(vec3(_625, _628, _631), vec3(_3345, _3346, _3347))) + _3422;
                                float _4496 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3429 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                                float _3430 = 1.0 - _3397;
                                float _3440 = (0.5 / (((_3429 * ((_3412 * _3430) + _3397)) + 9.9999999392252902907785028219223e-09) + (((_3429 * _3430) + _3397) * _3412))) * _3429;
                                float _4507 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3450 = (_3375 * _3352) * (((_3398 * 3.1415927410125732421875) * (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0)))) / ((_3420 * _3420) * ((_3365 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3376 * _3220.z;
                                frontier_phi_85_pred_1 = _3376 * _3220.y;
                                frontier_phi_85_pred_2 = _3376 * _3220.x;
                                frontier_phi_85_pred_3 = _3450 * _3232.z;
                                frontier_phi_85_pred_4 = _3450 * _3232.y;
                                frontier_phi_85_pred_5 = _3450 * _3232.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3459 = frontier_phi_85_pred;
                            _3458 = frontier_phi_85_pred_1;
                            _3457 = frontier_phi_85_pred_2;
                            _3456 = frontier_phi_85_pred_3;
                            _3455 = frontier_phi_85_pred_4;
                            _3454 = frontier_phi_85_pred_5;
                            _3162 = _3457 + _3175;
                            _3163 = _3458 + _3176;
                            _3164 = _3459 + _3177;
                            _3159 = _3454 + _3172;
                            _3160 = _3455 + _3173;
                            _3161 = _3456 + _3174;
                            if (_3179 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3164;
                                _3178 = _3179;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3164;
                        frontier_phi_79_pred_1 = _3163;
                        frontier_phi_79_pred_2 = _3162;
                        frontier_phi_79_pred_3 = _3161;
                        frontier_phi_79_pred_4 = _3160;
                        frontier_phi_79_pred_5 = _3159;
                    }
                    _2801 = frontier_phi_79_pred;
                    _2799 = frontier_phi_79_pred_1;
                    _2797 = frontier_phi_79_pred_2;
                    _2795 = frontier_phi_79_pred_3;
                    _2793 = frontier_phi_79_pred_4;
                    _2791 = frontier_phi_79_pred_5;
                    uint _2957 = _2956 + 1u;
                    if (_2957 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2950 = _2791;
                        _2951 = _2793;
                        _2952 = _2795;
                        _2953 = _2797;
                        _2954 = _2799;
                        _2955 = _2801;
                        _2956 = _2957;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2797;
                frontier_phi_60_61_ladder_1 = _2801;
                frontier_phi_60_61_ladder_2 = _2799;
                frontier_phi_60_61_ladder_3 = _2795;
                frontier_phi_60_61_ladder_4 = _2793;
                frontier_phi_60_61_ladder_5 = _2791;
            }
            else
            {
                frontier_phi_60_61_ladder = _2676;
                frontier_phi_60_61_ladder_1 = _2680;
                frontier_phi_60_61_ladder_2 = _2678;
                frontier_phi_60_61_ladder_3 = _2674;
                frontier_phi_60_61_ladder_4 = _2672;
                frontier_phi_60_61_ladder_5 = _2670;
            }
            _2790 = frontier_phi_60_61_ladder_5;
            _2792 = frontier_phi_60_61_ladder_4;
            _2794 = frontier_phi_60_61_ladder_3;
            _2796 = frontier_phi_60_61_ladder;
            _2798 = frontier_phi_60_61_ladder_2;
            _2800 = frontier_phi_60_61_ladder_1;
        }
        float _2805 = isnan(1.0) ? _814 : (isnan(_814) ? 1.0 : min(_814, 1.0));
        _2580 = (_2805 * _2796) + _2017;
        _2582 = (_2805 * _2798) + _2019;
        _2584 = (_2805 * _2800) + _2021;
        _2586 = ((_2790 * _800) * _2805) + _2362;
        _2588 = ((_2792 * _801) * _2805) + _2364;
        _2590 = ((_2794 * _802) * _2805) + _2366;
    }
    else
    {
        _2580 = _2017;
        _2582 = _2019;
        _2584 = _2021;
        _2586 = _2362;
        _2588 = _2364;
        _2590 = _2366;
    }
    float _4523 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _4534 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _4545 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _4556 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _2608 = ((isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2580 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _814))) + ((_2586 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1653)) * cbPerFrame._m0[3u].x);
    float _2609 = ((isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2582 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _814))) + ((_2588 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1653)) * cbPerFrame._m0[3u].x);
    float _2610 = ((isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_2584 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _814))) + ((_2590 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1653)) * cbPerFrame._m0[3u].x);
    float _2615 = cbInstanceData._m0[_706 + 6u].w * (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0)));
    float _2620 = _602 / cbSceneParam._m0[86u].x;
    float _2621 = _603 / cbSceneParam._m0[86u].y;
    vec4 _2635 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2620, _2621, (log2((isnan(cbSceneParam._m0[77u].w) ? _524 : (isnan(_524) ? cbSceneParam._m0[77u].w : min(_524, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2637 = _2635.x;
    float _2638 = _2635.y;
    float _2639 = _2635.z;
    float _2640 = _2635.w;
    float _2732;
    float _2734;
    float _2736;
    float _2738;
    if (_524 > cbSceneParam._m0[78u].w)
    {
        float _2695 = isnan(_524) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _524 : min(cbSceneParam._m0[80u].w, _524));
        float _2696 = _2695 / _524;
        float _2707 = _2696 * _575;
        float _2708 = _576 * _2696;
        float _2709 = (-0.0) - _2708;
        float _2710 = _2696 * _577;
        float _2712 = (cbSceneParam._m0[77u].w * _2709) / _2695;
        float _2713 = _2712 + cbSceneParam._m0[79u].w;
        float _2714 = cbSceneParam._m0[79u].w - _2708;
        float _2720 = sqrt(((_2707 * _2707) + (_2708 * _2708)) + (_2710 * _2710));
        float _2723 = (1.0 - (cbSceneParam._m0[77u].w / _2695)) * _2720;
        float _2728 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2730 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2907;
        if (abs((_2709 - _2712) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2907 = ((((_2713 > 0.0) ? exp2(_2728 * _2713) : (2.0 - exp2(_2730 * _2713))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2723;
        }
        else
        {
            float _2851 = 1.0 / cbSceneParam._m0[80u].x;
            float _2852 = isnan(_2714) ? _2713 : (isnan(_2713) ? _2714 : max(_2713, _2714));
            float _2853 = isnan(_2714) ? _2713 : (isnan(_2713) ? _2714 : min(_2713, _2714));
            float _2862 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : min(_2852, 0.0));
            float _2863 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : min(_2853, 0.0));
            _2907 = ((abs(_2720 / _2709) * cbSceneParam._m0[80u].y) * ((((_2862 - _2863) * 2.0) - ((exp2(_2728 * (isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0)))) - exp2(_2728 * (isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0))))) * _2851)) - ((exp2(_2730 * _2862) - exp2(_2730 * _2863)) * _2851))) + (_2723 * cbSceneParam._m0[80u].z);
        }
        vec4 _2909 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2620, _2621, 1.0), 0.0);
        float _2918 = exp2((_2907 * (-1.44269502162933349609375)) * (1.0 - _2909.w));
        float _2919 = log2(_2918);
        float _2935 = log2(_2640);
        _2732 = (exp2(_2935 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2919 * cbSceneParam._m0[78u].x)) * _2909.x) / cbSceneParam._m0[78u].x)) + _2637;
        _2734 = (exp2(_2935 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2919 * cbSceneParam._m0[78u].y)) * _2909.y) / cbSceneParam._m0[78u].y)) + _2638;
        _2736 = (exp2(_2935 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2919 * cbSceneParam._m0[78u].z)) * _2909.z) / cbSceneParam._m0[78u].z)) + _2639;
        _2738 = _2918 * _2640;
    }
    else
    {
        _2732 = _2637;
        _2734 = _2638;
        _2736 = _2639;
        _2738 = _2640;
    }
    bool _2945;
    vec4 _2748;
    vec4 _2770;
    float _2772;
    float _2776;
    float _2777;
    float _2778;
    float _2779;
    bool _2789;
    for (;;)
    {
        _2748 = cbMatDynParam._m0[0u];
        float _2750 = roundEven(_2748.y);
        bool _2751 = _2750 == 3.0;
        float _2752 = log2(_2738);
        float _2759 = exp2(_2752 * cbSceneParam._m0[78u].x) * _2608;
        float _2760 = exp2(_2752 * cbSceneParam._m0[78u].y) * _2609;
        float _2761 = exp2(_2752 * cbSceneParam._m0[78u].z) * _2610;
        float _2768 = _591 + (-0.5);
        _2770 = cbMtdParam._m0[1u];
        _2772 = _2770.y * _2768;
        float _2775 = (_2750 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2776 = _2775 * (_2751 ? _2759 : (_2759 + (cbSceneParam._m0[72u].w * _2732)));
        _2777 = _2775 * (_2751 ? _2760 : (_2760 + (cbSceneParam._m0[72u].w * _2734)));
        _2778 = _2775 * (_2751 ? _2761 : (_2761 + (cbSceneParam._m0[72u].w * _2736)));
        _2779 = _2768 * 0.999000012874603271484375;
        _2789 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2789)
        {
            if ((cbInstanceData._m0[_706 + 7u].x + _2779) < 0.5)
            {
                _2945 = true;
                break;
            }
        }
        uint _2886 = _707 + uint(_2748.w);
        if ((cbInstanceData._m0[_2886].w < 1.0) && ((cbInstanceData._m0[_2886].w + _2779) < 0.5))
        {
            _2945 = true;
            break;
        }
        if ((_2772 + _374) < _2770.x)
        {
            _2945 = true;
            break;
        }
        _2945 = false;
        break;
    }
    float _3150;
    if (_2945)
    {
        discard_state = true;
        _3150 = 0.0;
    }
    else
    {
        _3150 = _2615;
    }
    SV_Target.x = _2776;
    SV_Target.y = _2777;
    SV_Target.z = _2778;
    SV_Target.w = _3150;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2615;
    discard_exit();
}


