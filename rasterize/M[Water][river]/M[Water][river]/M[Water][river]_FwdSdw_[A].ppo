#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_river_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_river_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_river_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1065;
float _3969;
float _3970;
float _3971;
float _3972;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _210 = _209 * _201;
    float _211 = _209 * _202;
    float _212 = _209 * _203;
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231;
    float _232;
    float _233;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
    }
    else
    {
        _231 = _217;
        _232 = _218;
        _233 = _219;
    }
    float _249 = cbMtdParam._m0[10u].x * cbPerFrame._m0[22u].x;
    float _260 = (cbMtdParam._m0[12u].w * _249) + TEXCOORD;
    float _261 = (cbMtdParam._m0[13u].x * _249) + TEXCOORD_1;
    vec4 _274 = texture(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2((_260 * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (_261 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _281 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].x);
    float _287 = (_274.y * 0.5) + (-0.25);
    float _288 = (-0.0) - ((_274.x * 0.5) + (-0.25));
    float _289 = fract(_281);
    float _291 = fract(_281 + 0.5);
    float _303 = abs((_289 * 2.0) + (-1.0));
    vec4 _312 = texture(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_289 * _288) + _260) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_287 * _289) + _261) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _314 = _312.z;
    vec4 _340 = texture(sampler2D(M_Water_river_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[12u].y * _249) + TEXCOORD) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[12u].z * _249) + TEXCOORD_1) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _344 = _340.z;
    vec4 _361 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _363 = _361.x;
    bool _370 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _386 = ((_370 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _363)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _363))) - POSITION_1.w) * 0.833333313465118408203125;
    float _3981 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _395 = ((((texture(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_291 * _288) + _260) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_287 * _291) + _261) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w)).z - _314) * _303) + _314) * (1.0 - TEXCOORD_3.y)) * (((TEXCOORD_3.x + 1.0) + (exp2(log2(((0.502016007900238037109375 - _344) * TEXCOORD_3.y) + _344) * cbMtdParam._m0[10u].z) * cbMtdParam._m0[10u].w)) - (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))));
    float _396 = _395 + cbMtdParam._m0[9u].x;
    float _397 = _395 + cbMtdParam._m0[9u].y;
    float _398 = _395 + cbMtdParam._m0[9u].z;
    vec4 _420 = texture(sampler2D(M_Water_river_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[11u].w * _249) + TEXCOORD) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[12u].x * _249) + TEXCOORD_1) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _424 = _420.x * 2.0;
    float _425 = _420.y * 2.0;
    float _426 = _424 + (-1.0);
    float _427 = _425 + (-1.0);
    float _428 = dot(vec2(_426, _427), vec2(_426, _427));
    float _3992 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _433 = sqrt(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))));
    vec4 _444 = texture(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _260) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _261) + cbTextureTilingScale._m0[2u].w));
    float _451 = (_444.y * 0.5) + (-0.25);
    float _452 = (-0.0) - ((_444.x * 0.5) + (-0.25));
    vec4 _475 = texture(sampler2D(M_Water_river_snp_0_Texture2D_0, SS_BumpMap), vec2((((_289 * _452) + _260) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_451 * _289) + _261) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _477 = _475.x;
    float _478 = _475.y;
    vec4 _479 = texture(sampler2D(M_Water_river_snp_0_Texture2D_0, SS_BumpMap), vec2((((_291 * _452) + _260) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_451 * _291) + _261) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _489 = (((_479.x - _477) * _303) + _477) + _340.x;
    float _498 = (_424 + (-1.60000002384185791015625)) + ((_489 + ((1.00403201580047607421875 - _489) * TEXCOORD_3.y)) * 0.60000002384185791015625);
    float _499 = (((_479.y - _478) * _303) + _478) + _340.y;
    float _505 = (_425 + (-1.60000002384185791015625)) + ((_499 + ((1.00403201580047607421875 - _499) * TEXCOORD_3.y)) * 0.60000002384185791015625);
    float _508 = fma(_433, _231, fma(_505, _223 * TANGENT.x, _498 * _210));
    float _511 = fma(_433, _232, fma(_505, _223 * TANGENT.y, _498 * _211));
    float _514 = fma(_433, _233, fma(_505, _223 * TANGENT.z, _498 * _212));
    float _518 = inversesqrt(dot(vec3(_508, _511, _514), vec3(_508, _511, _514)));
    float _519 = _518 * _508;
    float _520 = _518 * _511;
    float _521 = _518 * _514;
    float _4003 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _4014 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _4025 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _529 = _370 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _580 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _570);
    float _581 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _570);
    float _582 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _570);
    float _586 = inversesqrt(dot(vec3(_580, _581, _582), vec3(_580, _581, _582)));
    float _587 = _580 * _586;
    float _588 = _581 * _586;
    float _589 = _582 * _586;
    vec4 _594 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _596 = _594.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _745 = sqrt(((_580 * _580) + (_581 * _581)) + (_582 * _582));
        float _751 = (cbMatDynParam._m0[5u].x * _745) + cbMatDynParam._m0[5u].y;
        float _4036 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _752 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _756 = (cbMatDynParam._m0[5u].z * _745) + cbMatDynParam._m0[5u].w;
        float _4047 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) - _752)) + _752) < ((_596 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _607 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _608 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _628 = fma(_521, cbSceneParam._m0[5u].z, fma(_520, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _519));
    float _631 = fma(_521, cbSceneParam._m0[6u].z, fma(_520, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _519));
    float _634 = fma(_521, cbSceneParam._m0[7u].z, fma(_520, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _519));
    uint _647 = uint(roundEven(NORMAL.w)) * 13u;
    uint _648 = _647 + 9u;
    uint _649 = _648 + uint(cbMatDynParam._m0[0u].w);
    float _655 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0)))) * cbInstanceData._m0[_649].x;
    float _656 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * cbInstanceData._m0[_649].y;
    float _657 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * cbInstanceData._m0[_649].z;
    float _4058 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _658 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _4069 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _659 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _4080 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _660 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    vec4 _669 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _607, cbSceneParam._m0[86u].y * _608));
    float _672 = _669.x * TEXCOORD_3.w;
    float _673 = dot(vec3(_519, _520, _521), vec3(_587, _588, _589));
    float _676 = _673 * 2.0;
    float _680 = (_676 * _519) - _587;
    float _681 = (_676 * _520) - _588;
    float _682 = (_676 * _521) - _589;
    float _686 = abs(dot(vec3(_587, _588, _589), vec3(_519, _520, _521)));
    float _4091 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _687 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _700 = exp2(log2(1.0 - (_687 * 0.999000012874603271484375)) * 5.0);
    float _726 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _730 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _734 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1064;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _790 = fma(_734, cbModelParam._m0[26u].z, fma(_730, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _726));
        float _794 = fma(_734, cbModelParam._m0[27u].z, fma(_730, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _726));
        float _798 = fma(_734, cbModelParam._m0[28u].z, fma(_730, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _726));
        float _822 = _726 + _519;
        float _823 = _730 + _520;
        float _824 = _734 + _521;
        float _834 = fma(_824, cbModelParam._m0[26u].z, fma(_823, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _822)) - _790;
        float _835 = fma(_824, cbModelParam._m0[27u].z, fma(_823, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _822)) - _794;
        float _836 = fma(_824, cbModelParam._m0[28u].z, fma(_823, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _822)) - _798;
        float _840 = inversesqrt(dot(vec3(_834, _835, _836), vec3(_834, _835, _836)));
        float _853 = ((_840 * _834) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_790 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _854 = ((_840 * _835) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_794 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _855 = ((_840 * _836) / cbModelParam._m0[34u].z) + ((((((_798 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        float _892 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_858.x + (-0.5));
        float _894 = _892 * (_858.y + (-0.5));
        float _895 = _892 * (_858.z + (-0.5));
        float _902 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_865.x + (-0.5));
        float _904 = _902 * (_865.y + (-0.5));
        float _905 = _902 * (_865.z + (-0.5));
        float _912 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_872.x + (-0.5));
        float _914 = _912 * (_872.y + (-0.5));
        float _915 = _912 * (_872.z + (-0.5));
        float _922 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_879.x + (-0.5));
        float _924 = _922 * (_879.y + (-0.5));
        float _925 = _922 * (_879.z + (-0.5));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = _893 * 0.5;
        float _930 = _903 * 0.5;
        float _931 = _913 * 0.5;
        float _932 = dot(vec3(_929, _930, _931), vec3(_929, _930, _931));
        float _937 = (_932 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_932);
        float _946 = (dot(vec3(_519, _520, _521), vec3(_937 * _929, _937 * _930, _937 * _931)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _956 = sqrt(((_930 * _930) + (_929 * _929)) + (_931 * _931)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _958 = _957 * 2.0;
        float _962 = (1.0 - _957) / (_957 + 1.0);
        float _4139 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _972 = ((((1.0 - _963) * (_958 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_958 + 1.0))) + _963) * _926;
        float _973 = _894 * 0.5;
        float _974 = _904 * 0.5;
        float _975 = _914 * 0.5;
        float _976 = dot(vec3(_973, _974, _975), vec3(_973, _974, _975));
        float _981 = (_976 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_976);
        float _989 = (dot(vec3(_519, _520, _521), vec3(_981 * _973, _981 * _974, _981 * _975)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _998 = sqrt(((_974 * _974) + (_973 * _973)) + (_975 * _975)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1000 = _999 * 2.0;
        float _1004 = (1.0 - _999) / (_999 + 1.0);
        float _4172 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1014 = ((((1.0 - _1005) * (_1000 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1000 + 1.0))) + _1005) * _927;
        float _1015 = _895 * 0.5;
        float _1016 = _905 * 0.5;
        float _1017 = _915 * 0.5;
        float _1018 = dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017));
        float _1023 = (_1018 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1018);
        float _1031 = (dot(vec3(_519, _520, _521), vec3(_1023 * _1015, _1023 * _1016, _1023 * _1017)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1040 = sqrt(((_1016 * _1016) + (_1015 * _1015)) + (_1017 * _1017)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1042 = _1041 * 2.0;
        float _1046 = (1.0 - _1041) / (_1041 + 1.0);
        float _4205 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1056 = ((((1.0 - _1047) * (_1042 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1042 + 1.0))) + _1047) * _928;
        _1064 = _895;
        _1066 = _894;
        _1067 = _893;
        _1068 = _905;
        _1069 = _904;
        _1070 = _903;
        _1071 = _915;
        _1072 = _914;
        _1073 = _913;
        _1074 = _928;
        _1075 = _927;
        _1076 = _926;
        _1077 = cbModelParam._m0[36u].z * (isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0)));
        _1078 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0)));
        _1079 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0)));
    }
    else
    {
        _1064 = _1065;
        _1066 = _1065;
        _1067 = _1065;
        _1068 = _1065;
        _1069 = _1065;
        _1070 = _1065;
        _1071 = _1065;
        _1072 = _1065;
        _1073 = _1065;
        _1074 = _1065;
        _1075 = _1065;
        _1076 = _1065;
        _1077 = 0.0;
        _1078 = 0.0;
        _1079 = 0.0;
    }
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1108 = fma(_734, cbModelParam._m0[30u].z, fma(_730, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _726));
        float _1112 = fma(_734, cbModelParam._m0[31u].z, fma(_730, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _726));
        float _1116 = fma(_734, cbModelParam._m0[32u].z, fma(_730, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _726));
        float _1139 = _726 + _519;
        float _1140 = _730 + _520;
        float _1141 = _734 + _521;
        float _1151 = fma(_1141, cbModelParam._m0[30u].z, fma(_1140, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1139)) - _1108;
        float _1152 = fma(_1141, cbModelParam._m0[31u].z, fma(_1140, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1139)) - _1112;
        float _1153 = fma(_1141, cbModelParam._m0[32u].z, fma(_1140, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1139)) - _1116;
        float _1157 = inversesqrt(dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153)));
        float _1170 = ((_1157 * _1151) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1108 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1171 = ((_1157 * _1152) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1112 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1157 * _1153) / cbModelParam._m0[35u].z) + ((((((_1116 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        float _1207 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1174.x + (-0.5));
        float _1209 = _1207 * (_1174.y + (-0.5));
        float _1210 = _1207 * (_1174.z + (-0.5));
        float _1217 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1181.x + (-0.5));
        float _1219 = _1217 * (_1181.y + (-0.5));
        float _1220 = _1217 * (_1181.z + (-0.5));
        float _1227 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1188.x + (-0.5));
        float _1229 = _1227 * (_1188.y + (-0.5));
        float _1230 = _1227 * (_1188.z + (-0.5));
        float _1237 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1195.x + (-0.5));
        float _1239 = _1237 * (_1195.y + (-0.5));
        float _1240 = _1237 * (_1195.z + (-0.5));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = _1208 * 0.5;
        float _1245 = _1218 * 0.5;
        float _1246 = _1228 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_519, _520, _521), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _4246 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _4257 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _4268 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_1271 + 1.0))) + _1276) * _1241;
        float _1286 = _1209 * 0.5;
        float _1287 = _1219 * 0.5;
        float _1288 = _1229 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_519, _520, _521), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _4301 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1313 + 1.0))) + _1318) * _1242;
        float _1328 = _1210 * 0.5;
        float _1329 = _1220 * 0.5;
        float _1330 = _1230 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_519, _520, _521), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _4312 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4323 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _4334 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_1355 + 1.0))) + _1360) * _1243;
        _1377 = _1210;
        _1378 = _1209;
        _1379 = _1208;
        _1380 = _1220;
        _1381 = _1219;
        _1382 = _1218;
        _1383 = _1230;
        _1384 = _1229;
        _1385 = _1228;
        _1386 = _1243;
        _1387 = _1242;
        _1388 = _1241;
        _1389 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1390 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1391 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
    }
    else
    {
        _1377 = _1065;
        _1378 = _1065;
        _1379 = _1065;
        _1380 = _1065;
        _1381 = _1065;
        _1382 = _1065;
        _1383 = _1065;
        _1384 = _1065;
        _1385 = _1065;
        _1386 = _1065;
        _1387 = _1065;
        _1388 = _1065;
        _1389 = 0.0;
        _1390 = 0.0;
        _1391 = 0.0;
    }
    float _1401 = (cbModelParam._m0[1u].x * (_1389 - _1077)) + _1077;
    float _1402 = (cbModelParam._m0[1u].x * (_1390 - _1078)) + _1078;
    float _1403 = (cbModelParam._m0[1u].x * (_1391 - _1079)) + _1079;
    float _1424 = fma(_1403, cbSceneParam._m0[89u].z, fma(_1402, cbSceneParam._m0[89u].y, _1401 * cbSceneParam._m0[89u].x));
    float _1427 = fma(_1403, cbSceneParam._m0[90u].z, fma(_1402, cbSceneParam._m0[90u].y, _1401 * cbSceneParam._m0[90u].x));
    float _1430 = fma(_1403, cbSceneParam._m0[91u].z, fma(_1402, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1401));
    float _1445 = _680 * 0.5;
    float _1446 = _681 * 0.5;
    float _1447 = _682 * 0.5;
    float _1448 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1379, _1382, _1385, _1388));
    float _1451 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1378, _1381, _1384, _1387));
    float _1454 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1377, _1380, _1383, _1386));
    float _1488;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1461 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1064, _1068, _1071, _1074));
        float _1465 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1066, _1069, _1072, _1075));
        float _1469 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1067, _1070, _1073, _1076));
        float _1476 = dot(vec4(cbModelParam._m0[39u]), vec4(_1445, _1446, _1447, 1.0));
        _1488 = dot(vec3(isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1476) ? 0.0 : (isnan(0.0) ? _1476 : max(0.0, _1476))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1488 = 1.0;
    }
    float _1499;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1490 = dot(vec4(cbModelParam._m0[40u]), vec4(_1445, _1446, _1447, 1.0));
        _1499 = dot(vec3(isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)), isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1490) ? 0.0 : (isnan(0.0) ? _1490 : max(0.0, _1490))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1499 = 1.0;
    }
    float _1503 = (_1499 * cbModelParam._m0[1u].x) + (_1488 * (1.0 - cbModelParam._m0[1u].x));
    float _1512 = isnan(0.0) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? 0.0 : min(cbModelParam._m0[25u].z, 0.0));
    float _1593;
    float _1595;
    float _1597;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1560 = fma(_734, cbModelParam._m0[13u].z, fma(_730, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _726)) + cbModelParam._m0[13u].w;
        float _1564 = fma(_734, cbModelParam._m0[14u].z, fma(_730, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _726)) + cbModelParam._m0[14u].w;
        float _1568 = fma(_734, cbModelParam._m0[15u].z, fma(_730, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _726)) + cbModelParam._m0[15u].w;
        float _1571 = fma(_682, cbModelParam._m0[13u].z, fma(_681, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _680));
        float _1574 = fma(_682, cbModelParam._m0[14u].z, fma(_681, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _680));
        float _1577 = fma(_682, cbModelParam._m0[15u].z, fma(_681, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _680));
        float _1603;
        if (_1571 > 0.0)
        {
            _1603 = abs((1.0 - _1560) / _1571);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1560 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1603 = frontier_phi_19_17_ladder;
        }
        float _1824;
        if (_1574 > 0.0)
        {
            _1824 = abs((1.0 - _1564) / _1574);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1564 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1824 = frontier_phi_28_24_ladder;
        }
        float _2120;
        if (_1577 > 0.0)
        {
            _2120 = abs((1.0 - _1568) / _1577);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1568 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2120 = frontier_phi_40_35_ladder;
        }
        float _2122 = isnan(_1824) ? _1603 : (isnan(_1603) ? _1824 : min(_1603, _1824));
        float _2123 = isnan(_2120) ? _2122 : (isnan(_2122) ? _2120 : min(_2122, _2120));
        float _2127 = (_2123 * _1571) + _1560;
        float _2128 = (_2123 * _1574) + _1564;
        float _2129 = (_2123 * _1577) + _1568;
        float _2130 = _2123 * 9.9999997473787516355514526367188e-05;
        float _2132 = (-1.0) - _2130;
        float _2134 = _2130 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2129 > _2134) || ((_2129 < _2132) || ((_2128 > _2134) || ((_2128 < _2132) || ((_2127 < _2132) || (_2127 > _2134))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2274 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2129, cbModelParam._m0[9u].z, fma(_2128, cbModelParam._m0[9u].y, _2127 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2129, cbModelParam._m0[10u].z, fma(_2128, cbModelParam._m0[10u].y, _2127 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2129, cbModelParam._m0[11u].z, fma(_2128, cbModelParam._m0[11u].y, _2127 * cbModelParam._m0[11u].x))), _1512);
            frontier_phi_18_40_ladder = _2274.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2274.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2274.x * cbModelParam._m0[1u].y;
        }
        _1593 = frontier_phi_18_40_ladder_2;
        _1595 = frontier_phi_18_40_ladder_1;
        _1597 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1581 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_680, _681, _682), _1512);
        _1593 = _1581.x * cbModelParam._m0[1u].y;
        _1595 = _1581.y * cbModelParam._m0[1u].y;
        _1597 = _1581.z * cbModelParam._m0[1u].y;
    }
    float _1600 = isnan(0.0) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? 0.0 : min(cbModelParam._m0[25u].w, 0.0));
    float _1692;
    float _1694;
    float _1696;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1656 = fma(_734, cbModelParam._m0[21u].z, fma(_730, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _726)) + cbModelParam._m0[21u].w;
        float _1660 = fma(_734, cbModelParam._m0[22u].z, fma(_730, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _726)) + cbModelParam._m0[22u].w;
        float _1664 = fma(_734, cbModelParam._m0[23u].z, fma(_730, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _726)) + cbModelParam._m0[23u].w;
        float _1667 = fma(_682, cbModelParam._m0[21u].z, fma(_681, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _680));
        float _1670 = fma(_682, cbModelParam._m0[22u].z, fma(_681, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _680));
        float _1673 = fma(_682, cbModelParam._m0[23u].z, fma(_681, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _680));
        float _1829;
        if (_1667 > 0.0)
        {
            _1829 = abs((1.0 - _1656) / _1667);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1656 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1829 = frontier_phi_30_26_ladder;
        }
        float _2147;
        if (_1670 > 0.0)
        {
            _2147 = abs((1.0 - _1660) / _1670);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1660 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2147 = frontier_phi_42_37_ladder;
        }
        float _2472;
        if (_1673 > 0.0)
        {
            _2472 = abs((1.0 - _1664) / _1673);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1664 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2472 = frontier_phi_52_49_ladder;
        }
        float _2474 = isnan(_2147) ? _1829 : (isnan(_1829) ? _2147 : min(_1829, _2147));
        float _2475 = isnan(_2472) ? _2474 : (isnan(_2474) ? _2472 : min(_2474, _2472));
        float _2479 = (_2475 * _1667) + _1656;
        float _2480 = (_2475 * _1670) + _1660;
        float _2481 = (_2475 * _1673) + _1664;
        float _2482 = _2475 * 9.9999997473787516355514526367188e-05;
        float _2483 = (-1.0) - _2482;
        float _2485 = _2482 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2481 > _2485) || ((_2481 < _2483) || ((_2480 > _2485) || ((_2480 < _2483) || ((_2479 < _2483) || (_2479 > _2485))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2598 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2481, cbModelParam._m0[17u].z, fma(_2480, cbModelParam._m0[17u].y, _2479 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2481, cbModelParam._m0[18u].z, fma(_2480, cbModelParam._m0[18u].y, _2479 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2481, cbModelParam._m0[19u].z, fma(_2480, cbModelParam._m0[19u].y, _2479 * cbModelParam._m0[19u].x))), _1600);
            frontier_phi_27_52_ladder = _2598.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2598.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2598.x * cbModelParam._m0[1u].z;
        }
        _1692 = frontier_phi_27_52_ladder_2;
        _1694 = frontier_phi_27_52_ladder_1;
        _1696 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1676 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_680, _681, _682), _1600);
        _1692 = _1676.x * cbModelParam._m0[1u].z;
        _1694 = _1676.y * cbModelParam._m0[1u].z;
        _1696 = _1676.z * cbModelParam._m0[1u].z;
    }
    float _1708 = (((1.0 - _700) * 0.039999999105930328369140625) + _700) * _672;
    float _1709 = _1708 * ((cbModelParam._m0[1u].w * (_1692 - _1593)) + _1593);
    float _1710 = _1708 * ((cbModelParam._m0[1u].w * (_1694 - _1595)) + _1595);
    float _1711 = _1708 * ((cbModelParam._m0[1u].w * (_1696 - _1597)) + _1597);
    float _1714 = fma(_1711, cbSceneParam._m0[89u].z, fma(_1710, cbSceneParam._m0[89u].y, _1709 * cbSceneParam._m0[89u].x));
    float _1717 = fma(_1711, cbSceneParam._m0[90u].z, fma(_1710, cbSceneParam._m0[90u].y, _1709 * cbSceneParam._m0[90u].x));
    float _1720 = fma(_1711, cbSceneParam._m0[91u].z, fma(_1710, cbSceneParam._m0[91u].y, _1709 * cbSceneParam._m0[91u].x));
    float _1731 = _607 / cbSceneParam._m0[86u].x;
    float _4460 = isnan(0.0) ? cbSceneParam._m0[88u].z : (isnan(cbSceneParam._m0[88u].z) ? 0.0 : max(cbSceneParam._m0[88u].z, 0.0));
    float _1737 = (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * 5.0;
    float _1741 = 0.99999988079071044921875 / (_529 + 10.0);
    float _1743 = _1741 * dot(vec3(_519, _520, _521), vec3(1.0, 0.0, 0.0));
    vec4 _1753 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1743 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1743 + _1731) * cbSceneParam._m0[86u].x, _608), _1737).w) + _1731) * cbSceneParam._m0[86u].x, _608), _1737);
    float _1769 = 1.0 - _1753.w;
    float _1803 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1807 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1811 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1815 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1816 = _1803 / _1815;
    float _1817 = _1807 / _1815;
    float _1818 = _1811 / _1815;
    float _1965;
    float _1966;
    float _1967;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1845 = ((uint(_1818 > cbSceneParam._m0[59u].y) + uint(_1818 > cbSceneParam._m0[59u].x)) + uint(_1818 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1846 = _1845 + 43u;
        uint _1854 = _1845 + 44u;
        uint _1862 = _1845 + 45u;
        uint _1870 = _1845 + 46u;
        float _1881 = fma(_1815, cbSceneParam._m0[_1846].w, fma(_1811, cbSceneParam._m0[_1846].z, fma(_1807, cbSceneParam._m0[_1846].y, _1803 * cbSceneParam._m0[_1846].x)));
        float _1885 = fma(_1815, cbSceneParam._m0[_1854].w, fma(_1811, cbSceneParam._m0[_1854].z, fma(_1807, cbSceneParam._m0[_1854].y, _1803 * cbSceneParam._m0[_1854].x)));
        float _1893 = fma(_1815, cbSceneParam._m0[_1870].w, fma(_1811, cbSceneParam._m0[_1870].z, fma(_1807, cbSceneParam._m0[_1870].y, _1803 * cbSceneParam._m0[_1870].x)));
        float _1898 = cbSceneParam._m0[33u].z * _1893;
        float _1900 = cbSceneParam._m0[33u].w * _1893;
        float _1903 = fma(_1815, cbSceneParam._m0[_1862].w, fma(_1811, cbSceneParam._m0[_1862].z, fma(_1807, cbSceneParam._m0[_1862].y, _1803 * cbSceneParam._m0[_1862].x))) / _1893;
        float _1951 = (cbSceneParam._m0[33u].x - sqrt(((_1817 * _1817) + (_1816 * _1816)) + (_1818 * _1818))) * cbSceneParam._m0[33u].y;
        float _4471 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1958 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1898 + _1881) / _1893, (_1900 + _1885) / _1893), _1903), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1900 + _1881) / _1893, (_1885 - _1898) / _1893), _1903), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1881 - _1898) / _1893, (_1885 - _1900) / _1893), _1903), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1881 - _1900) / _1893, (_1898 + _1885) / _1893), _1903), 0.0)).x), vec4(0.25)));
        _1965 = 1.0 - (_1958 * cbSceneParam._m0[34u].x);
        _1966 = 1.0 - (_1958 * cbSceneParam._m0[34u].y);
        _1967 = 1.0 - (_1958 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1965 = 1.0;
        _1966 = 1.0;
        _1967 = 1.0;
    }
    float _2031;
    float _2033;
    float _2035;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2019 = fma(_1815, cbSceneParam._m0[63u].w, fma(_1811, cbSceneParam._m0[63u].z, fma(_1807, cbSceneParam._m0[63u].y, _1803 * cbSceneParam._m0[63u].x)));
        float _2020 = fma(_1815, cbSceneParam._m0[60u].w, fma(_1811, cbSceneParam._m0[60u].z, fma(_1807, cbSceneParam._m0[60u].y, _1803 * cbSceneParam._m0[60u].x))) / _2019;
        float _2021 = fma(_1815, cbSceneParam._m0[61u].w, fma(_1811, cbSceneParam._m0[61u].z, fma(_1807, cbSceneParam._m0[61u].y, _1803 * cbSceneParam._m0[61u].x))) / _2019;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2020 >= cbSceneParam._m0[64u].x) && (_2021 >= cbSceneParam._m0[64u].y)) && (_2020 <= cbSceneParam._m0[64u].z)) && (_2021 <= cbSceneParam._m0[64u].w))
        {
            float _2160 = fma(_1815, cbSceneParam._m0[62u].w, fma(_1811, cbSceneParam._m0[62u].z, fma(_1807, cbSceneParam._m0[62u].y, _1803 * cbSceneParam._m0[62u].x))) / _2019;
            float _2164 = isnan(cbSceneParam._m0[41u].w) ? _2160 : (isnan(_2160) ? cbSceneParam._m0[41u].w : max(_2160, cbSceneParam._m0[41u].w));
            float _2207 = (cbSceneParam._m0[33u].x - sqrt(((_1817 * _1817) + (_1816 * _1816)) + (_1818 * _1818))) * cbSceneParam._m0[33u].y;
            float _4487 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
            float _2214 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2020, cbSceneParam._m0[33u].w + _2021), _2164), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2020, _2021 - cbSceneParam._m0[33u].z), _2164), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2020 - cbSceneParam._m0[33u].z, _2021 - cbSceneParam._m0[33u].w), _2164), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2020 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2021), _2164), 0.0)).x), vec4(0.25)));
            float _2218 = 1.0 - (_2214 * cbSceneParam._m0[34u].x);
            float _2219 = 1.0 - (_2214 * cbSceneParam._m0[34u].y);
            float _2220 = 1.0 - (_2214 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2219) ? _1966 : (isnan(_1966) ? _2219 : min(_1966, _2219));
            frontier_phi_39_38_ladder_1 = isnan(_2218) ? _1965 : (isnan(_1965) ? _2218 : min(_1965, _2218));
            frontier_phi_39_38_ladder_2 = isnan(_2220) ? _1967 : (isnan(_1967) ? _2220 : min(_1967, _2220));
        }
        else
        {
            frontier_phi_39_38_ladder = _1966;
            frontier_phi_39_38_ladder_1 = _1965;
            frontier_phi_39_38_ladder_2 = _1967;
        }
        _2031 = frontier_phi_39_38_ladder_1;
        _2033 = frontier_phi_39_38_ladder;
        _2035 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2031 = _1965;
        _2033 = _1966;
        _2035 = _1967;
    }
    uint _2037 = _647 + 5u;
    uvec4 _2040 = floatBitsToUint(cbInstanceData._m0[_2037]);
    uint _2042 = _2040.x * 14u;
    uint _2043 = _2042 + 13u;
    float _2050 = _672 + (-1.0);
    float _2055 = (cbLight._m0[_2043].x * _2050) + 1.0;
    float _2056 = (cbLight._m0[_2043].y * _2050) + 1.0;
    float _2057 = (cbLight._m0[_2043].z * _2050) + 1.0;
    float _2058 = (cbLight._m0[_2043].w * _2050) + 1.0;
    uint _2059 = _2042 + 5u;
    float _2065 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
    uint _2069 = _2042 + 4u;
    float _2079 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
    uint _2083 = _2042 | 1u;
    float _2094 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_519, _520, _521));
    float _2097 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_519, _520, _521));
    float _4523 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _4534 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2102 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * 0.3183098733425140380859375;
    float _2104 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * 0.3183098733425140380859375;
    float _2111 = ((cbLight._m0[_2059].x * _2065) * _2104) + (((cbLight._m0[_2069].x * _2031) * _2079) * _2102);
    float _2112 = ((_2065 * cbLight._m0[_2059].y) * _2104) + (((cbLight._m0[_2069].y * _2033) * _2079) * _2102);
    float _2113 = ((_2065 * cbLight._m0[_2059].z) * _2104) + (((cbLight._m0[_2069].z * _2035) * _2079) * _2102);
    uvec4 _2117 = floatBitsToUint(cbLight._m0[_2042 + 12u]);
    bool _2119 = _2117.x == 0u;
    float _2221;
    float _2223;
    float _2225;
    if (_2119)
    {
        _2221 = _2111;
        _2223 = _2112;
        _2225 = _2113;
    }
    else
    {
        uint _2229 = _2042 + 6u;
        float _2245 = (dot(vec3(cbLight._m0[_2042 + 2u].xyz), vec3(_519, _520, _521)) * 0.5) + 0.5;
        float _2246 = _2245 * _2245;
        float _4545 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2247 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2248 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2221 = (((cbLight._m0[_2229].x * 0.3183098733425140380859375) * _2247) * _2248) + _2111;
        _2223 = (((cbLight._m0[_2229].y * 0.3183098733425140380859375) * _2247) * _2248) + _2112;
        _2225 = (((cbLight._m0[_2229].z * 0.3183098733425140380859375) * _2247) * _2248) + _2113;
    }
    bool _2228 = _2117.y == 0u;
    float _2283;
    float _2285;
    float _2287;
    if (_2228)
    {
        _2283 = _2221;
        _2285 = _2223;
        _2287 = _2225;
    }
    else
    {
        uint _2443 = _2042 + 7u;
        float _2459 = (dot(vec3(cbLight._m0[_2042 + 3u].xyz), vec3(_519, _520, _521)) * 0.5) + 0.5;
        float _2460 = _2459 * _2459;
        float _4561 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2461 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2462 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2283 = (((cbLight._m0[_2443].x * 0.3183098733425140380859375) * _2461) * _2462) + _2221;
        _2285 = (((cbLight._m0[_2443].y * 0.3183098733425140380859375) * _2461) * _2462) + _2223;
        _2287 = (((cbLight._m0[_2443].z * 0.3183098733425140380859375) * _2461) * _2462) + _2225;
    }
    uint _2290 = _2042 + 8u;
    float _2302 = 1.0 - (sqrt(1.0 - (0.07500000298023223876953125 / cbLight._m0[_2042].w)) * 0.949999988079071044921875);
    float _2303 = _2302 * _2302;
    float _2304 = cbLight._m0[_2042].x + _587;
    float _2305 = cbLight._m0[_2042].y + _588;
    float _2306 = cbLight._m0[_2042].z + _589;
    float _2310 = inversesqrt(dot(vec3(_2304, _2305, _2306), vec3(_2304, _2305, _2306)));
    float _2311 = _2310 * _2304;
    float _2312 = _2310 * _2305;
    float _2313 = _2310 * _2306;
    float _2314 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_2042].xyz));
    float _4577 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2317 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _4588 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _2318 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2319 = dot(vec3(_519, _520, _521), vec3(_2311, _2312, _2313));
    float _4599 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2322 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _2323 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_2311, _2312, _2313));
    float _4610 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2327 = _2303 * _2303;
    float _2331 = ((_2322 * _2322) * (_2327 + (-1.0))) + 1.0;
    float _2342 = (exp2(log2(1.0 - (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2343 = 1.0 - _2303;
    float _2354 = (0.5 / (((_2318 * ((_2317 * _2343) + _2303)) + 9.9999999392252902907785028219223e-09) + (((_2318 * _2343) + _2303) * _2317))) * _2317;
    float _4621 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2356 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2327 / ((_2331 * _2331) * 3.141590118408203125));
    uint _2370 = _2042 + 9u;
    float _2380 = 1.0 - (sqrt(1.0 - (0.07500000298023223876953125 / cbLight._m0[_2083].w)) * 0.949999988079071044921875);
    float _2381 = _2380 * _2380;
    float _2382 = cbLight._m0[_2083].x + _587;
    float _2383 = cbLight._m0[_2083].y + _588;
    float _2384 = cbLight._m0[_2083].z + _589;
    float _2388 = inversesqrt(dot(vec3(_2382, _2383, _2384), vec3(_2382, _2383, _2384)));
    float _2389 = _2388 * _2382;
    float _2390 = _2388 * _2383;
    float _2391 = _2388 * _2384;
    float _2392 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_2083].xyz));
    float _4632 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2395 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
    float _2396 = dot(vec3(_519, _520, _521), vec3(_2389, _2390, _2391));
    float _4643 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2399 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
    float _2400 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_2389, _2390, _2391));
    float _4654 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2404 = _2381 * _2381;
    float _2408 = ((_2399 * _2399) * (_2404 + (-1.0))) + 1.0;
    float _2417 = (exp2(log2(1.0 - (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2418 = 1.0 - _2381;
    float _2428 = (0.5 / (((_2318 * ((_2395 * _2418) + _2381)) + 9.9999999392252902907785028219223e-09) + (((_2318 * _2418) + _2381) * _2395))) * _2395;
    float _4665 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2430 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2404 / ((_2408 * _2408) * 3.141590118408203125));
    float _2440 = (((_2417 * cbLight._m0[_2370].x) * _2430) * _2065) + ((((cbLight._m0[_2290].x * _2031) * _2342) * _2356) * _2079);
    float _2441 = (((_2417 * cbLight._m0[_2370].y) * _2430) * _2065) + ((((cbLight._m0[_2290].y * _2033) * _2342) * _2356) * _2079);
    float _2442 = (((_2417 * cbLight._m0[_2370].z) * _2430) * _2065) + ((((cbLight._m0[_2290].z * _2035) * _2342) * _2356) * _2079);
    float _2498;
    float _2500;
    float _2502;
    if (_2119)
    {
        _2498 = _2440;
        _2500 = _2441;
        _2502 = _2442;
    }
    else
    {
        uint _2504 = _2042 + 2u;
        uint _2508 = _2042 + 10u;
        float _2521 = 1.0 - (sqrt(1.0 - (0.07500000298023223876953125 / cbLight._m0[_2504].w)) * 0.949999988079071044921875);
        float _2522 = _2521 * _2521;
        float _2523 = cbLight._m0[_2504].x + _587;
        float _2524 = cbLight._m0[_2504].y + _588;
        float _2525 = cbLight._m0[_2504].z + _589;
        float _2529 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
        float _2530 = _2529 * _2523;
        float _2531 = _2529 * _2524;
        float _2532 = _2529 * _2525;
        float _2533 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_2504].xyz));
        float _4676 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2536 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
        float _2537 = dot(vec3(_519, _520, _521), vec3(_2530, _2531, _2532));
        float _4687 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2540 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2541 = dot(vec3(cbLight._m0[_2504].xyz), vec3(_2530, _2531, _2532));
        float _4698 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2545 = _2522 * _2522;
        float _2549 = ((_2540 * _2540) * (_2545 + (-1.0))) + 1.0;
        float _2558 = (exp2(log2(1.0 - (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2559 = 1.0 - _2522;
        float _2569 = (0.5 / (((_2318 * ((_2536 * _2559) + _2522)) + 9.9999999392252902907785028219223e-09) + (((_2318 * _2559) + _2522) * _2536))) * _2536;
        float _4709 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2571 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2545 / ((_2549 * _2549) * 3.141590118408203125));
        float _2572 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2498 = (((_2558 * cbLight._m0[_2508].x) * _2571) * _2572) + _2440;
        _2500 = (((_2558 * cbLight._m0[_2508].y) * _2571) * _2572) + _2441;
        _2502 = (((_2558 * cbLight._m0[_2508].z) * _2571) * _2572) + _2442;
    }
    float _2603;
    float _2605;
    float _2607;
    if (_2228)
    {
        _2603 = _2498;
        _2605 = _2500;
        _2607 = _2502;
    }
    else
    {
        uint _2614 = _2042 + 3u;
        uint _2618 = _2042 + 11u;
        float _2631 = 1.0 - (sqrt(1.0 - (0.07500000298023223876953125 / cbLight._m0[_2614].w)) * 0.949999988079071044921875);
        float _2632 = _2631 * _2631;
        float _2633 = cbLight._m0[_2614].x + _587;
        float _2634 = cbLight._m0[_2614].y + _588;
        float _2635 = cbLight._m0[_2614].z + _589;
        float _2639 = inversesqrt(dot(vec3(_2633, _2634, _2635), vec3(_2633, _2634, _2635)));
        float _2640 = _2639 * _2633;
        float _2641 = _2639 * _2634;
        float _2642 = _2639 * _2635;
        float _2643 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_2614].xyz));
        float _4725 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2646 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
        float _2647 = dot(vec3(_519, _520, _521), vec3(_2640, _2641, _2642));
        float _4736 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2650 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
        float _2651 = dot(vec3(cbLight._m0[_2614].xyz), vec3(_2640, _2641, _2642));
        float _4747 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2655 = _2632 * _2632;
        float _2659 = ((_2650 * _2650) * (_2655 + (-1.0))) + 1.0;
        float _2668 = (exp2(log2(1.0 - (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2669 = 1.0 - _2632;
        float _2679 = (0.5 / (((_2318 * ((_2646 * _2669) + _2632)) + 9.9999999392252902907785028219223e-09) + (((_2318 * _2669) + _2632) * _2646))) * _2646;
        float _4758 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2681 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2655 / ((_2659 * _2659) * 3.141590118408203125));
        float _2682 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2603 = (((_2668 * cbLight._m0[_2618].x) * _2681) * _2682) + _2498;
        _2605 = (((_2668 * cbLight._m0[_2618].y) * _2681) * _2682) + _2500;
        _2607 = (((_2668 * cbLight._m0[_2618].z) * _2681) * _2682) + _2502;
    }
    float _2747;
    float _2749;
    float _2751;
    float _2753;
    float _2755;
    float _2757;
    if (_2040.y == 0u)
    {
        uvec4 _2703 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2704 = _2703.x;
        uint _2715 = uint((float(_2703.y) * floor(float(uint(cbSceneParam._m0[85u].y * _608) / _2704))) + floor(float(uint(cbSceneParam._m0[85u].x * _607) / _2704)));
        float _2725 = (log2(_1818 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2726 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        uint _2729 = uint(isnan(14.0) ? _2726 : (isnan(_2726) ? 14.0 : min(_2726, 14.0)));
        uvec4 _2734 = texelFetch(g_lightClusterGridBuffer, int(((_2729 << 2u) + (_2715 << 6u)) >> 2u));
        uint _2735 = _2734.x;
        uint _2736 = _2703.z;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        if (((((1u << ((_2736 >> 4u) & 15u)) + 4294967295u) & _2735) == 0u) || ((_2736 & 240u) == 0u))
        {
            _3008 = 0.0;
            _3010 = 0.0;
            _3012 = 0.0;
            _3014 = 0.0;
            _3016 = 0.0;
            _3018 = 0.0;
        }
        else
        {
            float _3009;
            float _3011;
            float _3013;
            float _3015;
            float _3017;
            float _3019;
            float _3192 = 0.0;
            float _3193 = 0.0;
            float _3194 = 0.0;
            float _3195 = 0.0;
            float _3196 = 0.0;
            float _3197 = 0.0;
            uint _3198 = 0u;
            uint _3207;
            bool _3208;
            for (;;)
            {
                _3207 = texelFetch(g_lightClassification, int((((_2729 << 5u) + (_2715 << 9u)) + (_3198 << 2u)) >> 2u)).x;
                _3208 = _3207 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3208)
                {
                    frontier_phi_73_pred = _3197;
                    frontier_phi_73_pred_1 = _3196;
                    frontier_phi_73_pred_2 = _3195;
                    frontier_phi_73_pred_3 = _3194;
                    frontier_phi_73_pred_4 = _3193;
                    frontier_phi_73_pred_5 = _3192;
                }
                else
                {
                    float _3337;
                    float _3338;
                    float _3339;
                    float _3340;
                    float _3341;
                    float _3342;
                    uint _3343;
                    _3337 = _3192;
                    _3338 = _3193;
                    _3339 = _3194;
                    _3340 = _3195;
                    _3341 = _3196;
                    _3342 = _3197;
                    _3343 = _3207;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    float _3269;
                    for (;;)
                    {
                        uint _3347 = uint(findLSB(_3343)) + (_3198 << 5u);
                        uint _3344 = (_3343 + 4294967295u) & _3343;
                        uint _3349 = _3347 * 48u;
                        vec4 _3363 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3349)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 3u)).x));
                        uint _3369 = (_3347 * 48u) + 4u;
                        vec4 _3382 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3369)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 3u)).x));
                        uint _3388 = (_3347 * 48u) + 8u;
                        vec3 _3399 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3388)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 2u)).x));
                        float _3403 = _3363.x - _1816;
                        float _3404 = _3363.y - _1817;
                        float _3405 = _3363.z - _1818;
                        float _3406 = dot(vec3(_3403, _3404, _3405), vec3(_3403, _3404, _3405));
                        float _3409 = inversesqrt(_3406);
                        float _3410 = _3409 * _3403;
                        float _3411 = _3409 * _3404;
                        float _3412 = _3409 * _3405;
                        float _3413 = dot(vec3(_628, _631, _634), vec3(_3410, _3411, _3412));
                        float _3418 = 1.0 - (_3406 * _3363.w);
                        float _4784 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                        float _3419 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                        float _3420 = sqrt(_3406) * _3382.w;
                        float _3423 = 1.39999997615814208984375 / (_3420 + 1.39999997615814208984375);
                        float _3424 = _3423 * _3423;
                        float _3427 = ((1.0 - _3424) * _3413) + _3424;
                        float _3430 = _3420 * _3420;
                        float _3433 = ((isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0))) * _3419) / ((_3430 * 0.699999988079071044921875) + 1.0);
                        float _3437 = (-0.0) - _1816;
                        float _3438 = (-0.0) - _1817;
                        float _3439 = (-0.0) - _1818;
                        float _3443 = inversesqrt(dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439)));
                        float _3444 = _3443 * _3437;
                        float _3445 = _3443 * _3438;
                        float _3446 = _3443 * _3439;
                        float _3453 = exp2(log2(1.0 / ((_3430 * 3.5) + 5.0)) * 0.25);
                        float _3455 = sqrt(_3453 * _3453);
                        float _3456 = _3455 * _3455;
                        float _3457 = _3456 * _3456;
                        float _3458 = _3444 + _3410;
                        float _3459 = _3445 + _3411;
                        float _3460 = _3446 + _3412;
                        float _3464 = inversesqrt(dot(vec3(_3458, _3459, _3460), vec3(_3458, _3459, _3460)));
                        float _3468 = dot(vec3(_628, _631, _634), vec3(_3444, _3445, _3446));
                        float _4800 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                        float _3471 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                        float _3472 = dot(vec3(_628, _631, _634), vec3(_3464 * _3458, _3464 * _3459, _3464 * _3460));
                        float _4811 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                        float _3475 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                        float _3479 = ((_3475 * _3475) * (_3457 + (-1.0))) + 1.0;
                        float _3480 = _3423 * _3456;
                        float _3481 = _3480 * _3480;
                        float _3484 = ((1.0 - _3481) * _3413) + _3481;
                        float _4822 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                        float _3485 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                        float _3486 = 1.0 - _3456;
                        float _3496 = (0.5 / (((_3485 * ((_3471 * _3486) + _3456)) + 9.9999999392252902907785028219223e-09) + (((_3485 * _3486) + _3456) * _3471))) * _3485;
                        float _4833 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                        float _3507 = (((_3457 * 3.1415927410125732421875) * (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0)))) / ((_3479 * _3479) * ((_3430 * 2.1991131305694580078125) + 3.141590118408203125))) * _3419;
                        _3267 = (_3433 * _3382.x) + _3340;
                        _3268 = (_3433 * _3382.y) + _3341;
                        _3269 = (_3433 * _3382.z) + _3342;
                        _3264 = (_3507 * _3399.x) + _3337;
                        _3265 = (_3507 * _3399.y) + _3338;
                        _3266 = (_3507 * _3399.z) + _3339;
                        if (_3344 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3337 = _3264;
                            _3338 = _3265;
                            _3339 = _3266;
                            _3340 = _3267;
                            _3341 = _3268;
                            _3342 = _3269;
                            _3343 = _3344;
                        }
                    }
                    frontier_phi_73_pred = _3269;
                    frontier_phi_73_pred_1 = _3268;
                    frontier_phi_73_pred_2 = _3267;
                    frontier_phi_73_pred_3 = _3266;
                    frontier_phi_73_pred_4 = _3265;
                    frontier_phi_73_pred_5 = _3264;
                }
                _3019 = frontier_phi_73_pred;
                _3017 = frontier_phi_73_pred_1;
                _3015 = frontier_phi_73_pred_2;
                _3013 = frontier_phi_73_pred_3;
                _3011 = frontier_phi_73_pred_4;
                _3009 = frontier_phi_73_pred_5;
                uint _3199 = _3198 + 1u;
                if (_3199 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3192 = _3009;
                    _3193 = _3011;
                    _3194 = _3013;
                    _3195 = _3015;
                    _3196 = _3017;
                    _3197 = _3019;
                    _3198 = _3199;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3008 = _3009;
            _3010 = _3011;
            _3012 = _3013;
            _3014 = _3015;
            _3016 = _3017;
            _3018 = _3019;
        }
        uvec4 _3022 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3023 = _3022.z;
        uint _3025 = (_3023 >> 8u) & 15u;
        float _3160;
        float _3162;
        float _3164;
        float _3166;
        float _3168;
        float _3170;
        if (((4294967295u << _3025) & _2735) == 0u)
        {
            _3160 = _3008;
            _3162 = _3010;
            _3164 = _3012;
            _3166 = _3014;
            _3168 = _3016;
            _3170 = _3018;
        }
        else
        {
            float _3185 = inversesqrt(dot(vec3(_1816, _1817, _1818), vec3(_1816, _1817, _1818)));
            float _3186 = _3185 * _1816;
            float _3187 = _3185 * _1817;
            float _3188 = _3185 * _1818;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3025 < ((_3023 >> 12u) & 15u))
            {
                float _3161;
                float _3163;
                float _3165;
                float _3167;
                float _3169;
                float _3171;
                float _3320 = _3008;
                float _3321 = _3010;
                float _3322 = _3012;
                float _3323 = _3014;
                float _3324 = _3016;
                float _3325 = _3018;
                uint _3326 = _3025;
                uint _3335;
                bool _3336;
                for (;;)
                {
                    _3335 = texelFetch(g_lightClassification, int((((_2729 << 5u) + (_2715 << 9u)) + (_3326 << 2u)) >> 2u)).x;
                    _3336 = _3335 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3336)
                    {
                        frontier_phi_84_pred = _3324;
                        frontier_phi_84_pred_1 = _3323;
                        frontier_phi_84_pred_2 = _3322;
                        frontier_phi_84_pred_3 = _3321;
                        frontier_phi_84_pred_4 = _3320;
                        frontier_phi_84_pred_5 = _3325;
                    }
                    else
                    {
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3814;
                        float _3815;
                        float _3816;
                        float _3534 = _3320;
                        float _3535 = _3321;
                        float _3536 = _3322;
                        float _3537 = _3323;
                        float _3538 = _3324;
                        float _3539 = _3325;
                        uint _3540 = _3335;
                        uint _3541;
                        vec4 _3566;
                        float _3567;
                        vec4 _3582;
                        vec3 _3594;
                        vec4 _3610;
                        vec4 _3626;
                        float _3673;
                        bool _3674;
                        for (;;)
                        {
                            uint _3551 = ((_3326 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3540));
                            _3541 = (_3540 + 4294967295u) & _3540;
                            uint _3553 = _3551 * 40u;
                            _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            _3567 = _3566.w;
                            uint _3569 = (_3551 * 40u) + 4u;
                            _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            uint _3584 = (_3551 * 40u) + 8u;
                            _3594 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x));
                            uint _3597 = (_3551 * 40u) + 16u;
                            _3610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 3u)).x));
                            uint _3613 = (_3551 * 40u) + 20u;
                            _3626 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 3u)).x));
                            uint _3629 = (_3551 * 40u) + 24u;
                            vec4 _3642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 3u)).x));
                            uint _3648 = (_3551 * 40u) + 28u;
                            vec4 _3661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 3u)).x));
                            _3673 = fma(_1818, _3661.z, fma(_1817, _3661.y, _3661.x * _1816)) + _3661.w;
                            _3674 = !((fma(_1818, _3642.z, fma(_1817, _3642.y, _3642.x * _1816)) + _3642.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3674)
                            {
                                float _3701 = _3566.x - _1816;
                                float _3702 = _3566.y - _1817;
                                float _3703 = _3566.z - _1818;
                                float _3704 = dot(vec3(_3701, _3702, _3703), vec3(_3701, _3702, _3703));
                                float _3707 = inversesqrt(_3704);
                                float _3708 = _3707 * _3701;
                                float _3709 = _3707 * _3702;
                                float _3710 = _3707 * _3703;
                                float _3714 = 1.0 - (_3704 / (_3567 * _3567));
                                float _4844 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3715 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                                float _3719 = sqrt(_3704) * _3582.w;
                                float _3721 = 1.39999997615814208984375 / (_3719 + 1.39999997615814208984375);
                                float _3722 = _3721 * _3721;
                                float _3725 = ((1.0 - _3722) * dot(vec3(_3708, _3709, _3710), vec3(_628, _631, _634))) + _3722;
                                float _3728 = _3719 * _3719;
                                float _3732 = (fma(_1818, _3610.z, fma(_1817, _3610.y, _3610.x * _1816)) + _3610.w) / _3673;
                                float _3733 = (fma(_1818, _3626.z, fma(_1817, _3626.y, _3626.x * _1816)) + _3626.w) / _3673;
                                float _3737 = 1.0 - dot(vec2(_3732, _3733), vec2(_3732, _3733));
                                float _4860 = isnan(0.0) ? _3737 : (isnan(_3737) ? 0.0 : max(_3737, 0.0));
                                float _3738 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                                float _3739 = _3738 * (((isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0))) * _3715) / ((_3728 * 0.699999988079071044921875) + 1.0));
                                float _3751 = exp2(log2(1.0 / ((_3728 * 3.5) + 5.0)) * 0.25);
                                float _3753 = sqrt(_3751 * _3751);
                                float _3754 = _3753 * _3753;
                                float _3755 = _3754 * _3754;
                                float _3756 = _3708 - _3186;
                                float _3757 = _3709 - _3187;
                                float _3758 = _3710 - _3188;
                                float _3762 = inversesqrt(dot(vec3(_3756, _3757, _3758), vec3(_3756, _3757, _3758)));
                                float _3766 = dot(vec3(_628, _631, _634), vec3((-0.0) - _3186, (-0.0) - _3187, (-0.0) - _3188));
                                float _4871 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3769 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                                float _3770 = dot(vec3(_628, _631, _634), vec3(_3762 * _3756, _3762 * _3757, _3762 * _3758));
                                float _4882 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                                float _3773 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                                float _3777 = ((_3773 * _3773) * (_3755 + (-1.0))) + 1.0;
                                float _3778 = _3721 * _3754;
                                float _3779 = _3778 * _3778;
                                float _3785 = ((1.0 - _3779) * dot(vec3(_628, _631, _634), vec3(_3708, _3709, _3710))) + _3779;
                                float _4893 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                                float _3786 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                                float _3787 = 1.0 - _3754;
                                float _3797 = (0.5 / (((_3786 * ((_3769 * _3787) + _3754)) + 9.9999999392252902907785028219223e-09) + (((_3786 * _3787) + _3754) * _3769))) * _3786;
                                float _4904 = isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0));
                                float _3807 = (_3738 * _3715) * (((_3755 * 3.1415927410125732421875) * (isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0)))) / ((_3777 * _3777) * ((_3728 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3739 * _3582.y;
                                frontier_phi_90_pred_1 = _3739 * _3582.x;
                                frontier_phi_90_pred_2 = _3807 * _3594.z;
                                frontier_phi_90_pred_3 = _3807 * _3594.y;
                                frontier_phi_90_pred_4 = _3807 * _3594.x;
                                frontier_phi_90_pred_5 = _3739 * _3582.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3815 = frontier_phi_90_pred;
                            _3814 = frontier_phi_90_pred_1;
                            _3813 = frontier_phi_90_pred_2;
                            _3812 = frontier_phi_90_pred_3;
                            _3811 = frontier_phi_90_pred_4;
                            _3816 = frontier_phi_90_pred_5;
                            _3524 = _3814 + _3537;
                            _3525 = _3815 + _3538;
                            _3526 = _3816 + _3539;
                            _3521 = _3811 + _3534;
                            _3522 = _3812 + _3535;
                            _3523 = _3813 + _3536;
                            if (_3541 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3534 = _3521;
                                _3535 = _3522;
                                _3536 = _3523;
                                _3537 = _3524;
                                _3538 = _3525;
                                _3539 = _3526;
                                _3540 = _3541;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3525;
                        frontier_phi_84_pred_1 = _3524;
                        frontier_phi_84_pred_2 = _3523;
                        frontier_phi_84_pred_3 = _3522;
                        frontier_phi_84_pred_4 = _3521;
                        frontier_phi_84_pred_5 = _3526;
                    }
                    _3169 = frontier_phi_84_pred;
                    _3167 = frontier_phi_84_pred_1;
                    _3165 = frontier_phi_84_pred_2;
                    _3163 = frontier_phi_84_pred_3;
                    _3161 = frontier_phi_84_pred_4;
                    _3171 = frontier_phi_84_pred_5;
                    uint _3327 = _3326 + 1u;
                    if (_3327 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3320 = _3161;
                        _3321 = _3163;
                        _3322 = _3165;
                        _3323 = _3167;
                        _3324 = _3169;
                        _3325 = _3171;
                        _3326 = _3327;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3171;
                frontier_phi_65_66_ladder_1 = _3167;
                frontier_phi_65_66_ladder_2 = _3169;
                frontier_phi_65_66_ladder_3 = _3163;
                frontier_phi_65_66_ladder_4 = _3161;
                frontier_phi_65_66_ladder_5 = _3165;
            }
            else
            {
                frontier_phi_65_66_ladder = _3018;
                frontier_phi_65_66_ladder_1 = _3014;
                frontier_phi_65_66_ladder_2 = _3016;
                frontier_phi_65_66_ladder_3 = _3010;
                frontier_phi_65_66_ladder_4 = _3008;
                frontier_phi_65_66_ladder_5 = _3012;
            }
            _3160 = frontier_phi_65_66_ladder_4;
            _3162 = frontier_phi_65_66_ladder_3;
            _3164 = frontier_phi_65_66_ladder_5;
            _3166 = frontier_phi_65_66_ladder_1;
            _3168 = frontier_phi_65_66_ladder_2;
            _3170 = frontier_phi_65_66_ladder;
        }
        float _3175 = isnan(1.0) ? _672 : (isnan(_672) ? 1.0 : min(_672, 1.0));
        _2747 = (_3175 * _3166) + _2283;
        _2749 = (_3175 * _3168) + _2285;
        _2751 = (_3175 * _3170) + _2287;
        _2753 = ((_3160 * 0.039999999105930328369140625) * _3175) + _2603;
        _2755 = ((_3162 * 0.039999999105930328369140625) * _3175) + _2605;
        _2757 = ((_3164 * 0.039999999105930328369140625) * _3175) + _2607;
    }
    else
    {
        _2747 = _2283;
        _2749 = _2285;
        _2751 = _2287;
        _2753 = _2603;
        _2755 = _2605;
        _2757 = _2607;
    }
    float _2770 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2771 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2772 = cbSceneParam._m0[86u].x * (_1731 + (_1741 * dot(vec3(_519, _520, _521), vec3(_210, _211, _212))));
    float _2773 = isnan(_2770) ? _2772 : (isnan(_2772) ? _2770 : min(_2772, _2770));
    float _2774 = isnan(_2771) ? _608 : (isnan(_608) ? _2771 : min(_608, _2771));
    vec4 _2776 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2773, _2774), 0.0);
    float _2778 = _2776.x;
    bool _2798 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2778)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2778))) > _529;
    float _2799 = _2798 ? _2773 : _607;
    float _2800 = _2798 ? _2774 : _608;
    vec4 _2802 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2799, _2800));
    vec4 _2807 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2799, _2800));
    float _2809 = _2807.x;
    bool _2814 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _2823 = (-0.0) - cbSceneParam._m0[2u].z;
    float _2829 = (_2814 ? (_2823 / (cbSceneParam._m0[2u].x - _2809)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2809))) - _529;
    bool _2836 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2843 = (isnan(_2829) ? 0.0 : (isnan(0.0) ? _2829 : max(0.0, _2829))) * (-1.44269502162933349609375);
    float _4935 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _4946 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _4957 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    vec4 _2863 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2799, _2800), 0.0);
    float _2865 = _2863.x;
    float _2871 = (_2814 ? (_2823 / (cbSceneParam._m0[2u].x - _2865)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2865))) - _529;
    uint _2877 = floatBitsToUint(cbInstanceData._m0[_2037]).x * 14u;
    uint _2883 = _2877 + 4u;
    float _2892 = dot(vec3(cbLight._m0[_2877].xyz), vec3(_231, _232, _233));
    float _2900 = dot(vec3((-0.0) - _587, (-0.0) - _588, (-0.0) - _589), vec3((-0.0) - _231, (-0.0) - _232, (-0.0) - _233));
    float _2905 = ((isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0))) / (isnan(0.001000000047497451305389404296875) ? _2892 : (isnan(_2892) ? 0.001000000047497451305389404296875 : max(_2892, 0.001000000047497451305389404296875)))) + 1.0;
    float _2906 = _2905 * (isnan(_2871) ? 0.0 : (isnan(0.0) ? _2871 : max(0.0, _2871)));
    float _2955 = 0.959999978542327880859375 - (exp2(log2(1.0 - _687) * 5.0) * 0.959999978542327880859375);
    float _2956 = ((_2836 ? 0.0 : (((cbLight._m0[_2883].x * 0.0159154944121837615966796875) / ((_2905 * 0.699999988079071044921875) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2(_2906 * (-1.0098865032196044921875))))) + ((exp2(_2843 * (_2836 ? 0.0 : 0.699999988079071044921875)) * _2802.x) * cbSceneParam._m0[72u].w)) * _2955;
    float _2957 = ((_2836 ? 0.0 : (((cbLight._m0[_2883].y * 0.0159154944121837615966796875) / ((_2905 * 0.300000011920928955078125) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2(_2906 * (-0.43280851840972900390625))))) + ((exp2(_2843 * (_2836 ? 0.0 : 0.300000011920928955078125)) * _2802.y) * cbSceneParam._m0[72u].w)) * _2955;
    float _2958 = ((_2836 ? 0.0 : (((cbLight._m0[_2883].z * 0.0159154944121837615966796875) / ((_2905 * 0.2199999988079071044921875) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2(_2906 * (-0.3173929154872894287109375))))) + ((exp2(_2843 * (_2836 ? 0.0 : 0.2199999988079071044921875)) * _2802.z) * cbSceneParam._m0[72u].w)) * _2955;
    float _2966 = (_2956 + (((((_1708 * _1753.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _1503) * _1769)) + _2753) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0))) * (_2747 + ((isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))) * _672))) - _2956) * 0.5);
    float _2968 = (_2957 + (((((_1708 * _1753.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _1503) * _1769)) + _2755) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0))) * (_2749 + ((isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))) * _672))) - _2957) * 0.5);
    float _2970 = (_2958 + (((((_1708 * _1753.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _1503) * _1769)) + _2757) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0))) * (_2751 + ((isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))) * _672))) - _2958) * 0.5);
    uint _2971 = _647 + 6u;
    float _2979 = _607 / cbSceneParam._m0[86u].x;
    float _2980 = _608 / cbSceneParam._m0[86u].y;
    vec4 _2994 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2979, _2980, (log2((isnan(cbSceneParam._m0[77u].w) ? _529 : (isnan(_529) ? cbSceneParam._m0[77u].w : min(_529, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2996 = _2994.x;
    float _2997 = _2994.y;
    float _2998 = _2994.z;
    float _2999 = _2994.w;
    float _3069;
    float _3071;
    float _3073;
    float _3075;
    if (_529 > cbSceneParam._m0[78u].w)
    {
        float _3033 = isnan(_529) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _529 : min(cbSceneParam._m0[80u].w, _529));
        float _3034 = _3033 / _529;
        float _3045 = _3034 * _580;
        float _3046 = _581 * _3034;
        float _3047 = (-0.0) - _3046;
        float _3048 = _3034 * _582;
        float _3050 = (cbSceneParam._m0[77u].w * _3047) / _3033;
        float _3051 = _3050 + cbSceneParam._m0[79u].w;
        float _3052 = cbSceneParam._m0[79u].w - _3046;
        float _3058 = sqrt(((_3045 * _3045) + (_3046 * _3046)) + (_3048 * _3048));
        float _3061 = (1.0 - (cbSceneParam._m0[77u].w / _3033)) * _3058;
        float _3066 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3067 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3277;
        if (abs((_3047 - _3050) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3277 = ((((_3051 > 0.0) ? exp2(_3066 * _3051) : (2.0 - exp2(_3067 * _3051))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3061;
        }
        else
        {
            float _3221 = 1.0 / cbSceneParam._m0[80u].x;
            float _3222 = isnan(_3052) ? _3051 : (isnan(_3051) ? _3052 : max(_3051, _3052));
            float _3223 = isnan(_3052) ? _3051 : (isnan(_3051) ? _3052 : min(_3051, _3052));
            float _3232 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : min(_3222, 0.0));
            float _3233 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : min(_3223, 0.0));
            _3277 = ((abs(_3058 / _3047) * cbSceneParam._m0[80u].y) * ((((_3232 - _3233) * 2.0) - ((exp2(_3066 * (isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0)))) - exp2(_3066 * (isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0))))) * _3221)) - ((exp2(_3067 * _3232) - exp2(_3067 * _3233)) * _3221))) + (_3061 * cbSceneParam._m0[80u].z);
        }
        vec4 _3279 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2979, _2980, 1.0), 0.0);
        float _3288 = exp2((_3277 * (-1.44269502162933349609375)) * (1.0 - _3279.w));
        float _3289 = log2(_3288);
        float _3305 = log2(_2999);
        _3069 = (exp2(_3305 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3289 * cbSceneParam._m0[78u].x)) * _3279.x) / cbSceneParam._m0[78u].x)) + _2996;
        _3071 = (exp2(_3305 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3289 * cbSceneParam._m0[78u].y)) * _3279.y) / cbSceneParam._m0[78u].y)) + _2997;
        _3073 = (exp2(_3305 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3289 * cbSceneParam._m0[78u].z)) * _3279.z) / cbSceneParam._m0[78u].z)) + _2998;
        _3075 = _3288 * _2999;
    }
    else
    {
        _3069 = _2996;
        _3071 = _2997;
        _3073 = _2998;
        _3075 = _2999;
    }
    bool _3315;
    float _3131;
    vec4 _3134;
    float _3136;
    vec4 _3138;
    float _3146;
    float _3147;
    float _3148;
    float _3149;
    bool _3159;
    for (;;)
    {
        bool _3087 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _3089 = log2(_3075);
        float _3096 = exp2(_3089 * cbSceneParam._m0[78u].x) * _2966;
        float _3097 = exp2(_3089 * cbSceneParam._m0[78u].y) * _2968;
        float _3098 = exp2(_3089 * cbSceneParam._m0[78u].z) * _2970;
        vec4 _3106 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_607, _608));
        float _3108 = _3106.x;
        float _3129 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3108)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3108))) - _529) * 3.0;
        float _5023 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
        _3131 = (isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0))) * cbInstanceData._m0[_2971].w;
        float _3132 = _596 + (-0.5);
        _3134 = cbMtdParam._m0[1u];
        _3136 = _3134.y * _3132;
        _3138 = cbMatDynParam._m0[0u];
        float _3145 = (roundEven(_3138.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3146 = _3145 * (_3087 ? _3096 : (_3096 + (cbSceneParam._m0[72u].w * _3069)));
        _3147 = _3145 * (_3087 ? _3097 : (_3097 + (cbSceneParam._m0[72u].w * _3071)));
        _3148 = _3145 * (_3087 ? _3098 : (_3098 + (cbSceneParam._m0[72u].w * _3073)));
        _3149 = _3132 * 0.999000012874603271484375;
        _3159 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3159)
        {
            if ((cbInstanceData._m0[_647 + 7u].x + _3149) < 0.5)
            {
                _3315 = true;
                break;
            }
        }
        uint _3256 = _648 + uint(_3138.w);
        if ((cbInstanceData._m0[_3256].w < 1.0) && ((cbInstanceData._m0[_3256].w + _3149) < 0.5))
        {
            _3315 = true;
            break;
        }
        if ((_3136 + 1.0) < _3134.x)
        {
            _3315 = true;
            break;
        }
        _3315 = false;
        break;
    }
    float _3512;
    if (_3315)
    {
        discard_state = true;
        _3512 = 0.0;
    }
    else
    {
        _3512 = _3131;
    }
    SV_Target.x = _3146;
    SV_Target.y = _3147;
    SV_Target.z = _3148;
    SV_Target.w = _3512;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3131;
    discard_exit();
}


