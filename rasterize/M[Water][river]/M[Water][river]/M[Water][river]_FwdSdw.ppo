#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_river_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_river_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_river_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1020;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _206 = _205 * _197;
    float _207 = _205 * _198;
    float _208 = _205 * _199;
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = _212 * NORMAL.x;
    float _214 = _212 * NORMAL.y;
    float _215 = _212 * NORMAL.z;
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227;
    float _228;
    float _229;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
    }
    else
    {
        _227 = _213;
        _228 = _214;
        _229 = _215;
    }
    float _245 = cbMtdParam._m0[10u].x * cbPerFrame._m0[22u].x;
    float _256 = (cbMtdParam._m0[12u].w * _245) + TEXCOORD;
    float _257 = (cbMtdParam._m0[13u].x * _245) + TEXCOORD_1;
    vec4 _270 = texture(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2((_256 * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (_257 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _277 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].x);
    float _283 = (_270.y * 0.5) + (-0.25);
    float _284 = (-0.0) - ((_270.x * 0.5) + (-0.25));
    float _285 = fract(_277);
    float _287 = fract(_277 + 0.5);
    float _299 = abs((_285 * 2.0) + (-1.0));
    vec4 _308 = texture(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_285 * _284) + _256) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_283 * _285) + _257) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _310 = _308.z;
    vec4 _336 = texture(sampler2D(M_Water_river_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[12u].y * _245) + TEXCOORD) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[12u].z * _245) + TEXCOORD_1) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _340 = _336.z;
    vec4 _357 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _359 = _357.x;
    bool _366 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _382 = ((_366 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _359)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _359))) - POSITION_1.w) * 0.833333313465118408203125;
    float _3870 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _391 = ((((texture(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_287 * _284) + _256) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_283 * _287) + _257) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w)).z - _310) * _299) + _310) * (1.0 - TEXCOORD_3.y)) * (((TEXCOORD_3.x + 1.0) + (exp2(log2(((0.502016007900238037109375 - _340) * TEXCOORD_3.y) + _340) * cbMtdParam._m0[10u].z) * cbMtdParam._m0[10u].w)) - (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))));
    float _392 = _391 + cbMtdParam._m0[9u].x;
    float _393 = _391 + cbMtdParam._m0[9u].y;
    float _394 = _391 + cbMtdParam._m0[9u].z;
    vec4 _416 = texture(sampler2D(M_Water_river_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[11u].w * _245) + TEXCOORD) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[12u].x * _245) + TEXCOORD_1) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _420 = _416.x * 2.0;
    float _421 = _416.y * 2.0;
    float _422 = _420 + (-1.0);
    float _423 = _421 + (-1.0);
    float _424 = dot(vec2(_422, _423), vec2(_422, _423));
    float _3881 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _429 = sqrt(1.0 - (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))));
    vec4 _440 = texture(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _256) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _257) + cbTextureTilingScale._m0[2u].w));
    float _447 = (_440.y * 0.5) + (-0.25);
    float _448 = (-0.0) - ((_440.x * 0.5) + (-0.25));
    vec4 _471 = texture(sampler2D(M_Water_river_snp_0_Texture2D_0, SS_BumpMap), vec2((((_285 * _448) + _256) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_447 * _285) + _257) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _473 = _471.x;
    float _474 = _471.y;
    vec4 _475 = texture(sampler2D(M_Water_river_snp_0_Texture2D_0, SS_BumpMap), vec2((((_287 * _448) + _256) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_447 * _287) + _257) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _485 = (((_475.x - _473) * _299) + _473) + _336.x;
    float _494 = (_420 + (-1.60000002384185791015625)) + ((_485 + ((1.00403201580047607421875 - _485) * TEXCOORD_3.y)) * 0.60000002384185791015625);
    float _495 = (((_475.y - _474) * _299) + _474) + _336.y;
    float _501 = (_421 + (-1.60000002384185791015625)) + ((_495 + ((1.00403201580047607421875 - _495) * TEXCOORD_3.y)) * 0.60000002384185791015625);
    float _504 = fma(_429, _227, fma(_501, _219 * TANGENT.x, _494 * _206));
    float _507 = fma(_429, _228, fma(_501, _219 * TANGENT.y, _494 * _207));
    float _510 = fma(_429, _229, fma(_501, _219 * TANGENT.z, _494 * _208));
    float _514 = inversesqrt(dot(vec3(_504, _507, _510), vec3(_504, _507, _510)));
    float _515 = _514 * _504;
    float _516 = _514 * _507;
    float _517 = _514 * _510;
    float _3892 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _3903 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _3914 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _525 = _366 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _576 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _566);
    float _577 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _566);
    float _578 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _566);
    float _582 = inversesqrt(dot(vec3(_576, _577, _578), vec3(_576, _577, _578)));
    float _583 = _576 * _582;
    float _584 = _577 * _582;
    float _585 = _578 * _582;
    float _590 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _591 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _612 = fma(_517, cbSceneParam._m0[5u].z, fma(_516, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _515));
    float _615 = fma(_517, cbSceneParam._m0[6u].z, fma(_516, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _515));
    float _618 = fma(_517, cbSceneParam._m0[7u].z, fma(_516, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _515));
    uint _631 = uint(roundEven(NORMAL.w)) * 13u;
    uint _633 = (_631 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _639 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * cbInstanceData._m0[_633].x;
    float _640 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) * cbInstanceData._m0[_633].y;
    float _641 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * cbInstanceData._m0[_633].z;
    float _3925 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _642 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _3936 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _643 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _3947 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _644 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    vec4 _653 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _590, cbSceneParam._m0[86u].y * _591));
    float _656 = _653.x * TEXCOORD_3.w;
    float _657 = dot(vec3(_515, _516, _517), vec3(_583, _584, _585));
    float _660 = _657 * 2.0;
    float _664 = (_660 * _515) - _583;
    float _665 = (_660 * _516) - _584;
    float _666 = (_660 * _517) - _585;
    float _670 = abs(dot(vec3(_583, _584, _585), vec3(_515, _516, _517)));
    float _3958 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _671 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _684 = exp2(log2(1.0 - (_671 * 0.999000012874603271484375)) * 5.0);
    float _710 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _718 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1019;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _745 = fma(_718, cbModelParam._m0[26u].z, fma(_714, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _710));
        float _749 = fma(_718, cbModelParam._m0[27u].z, fma(_714, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _710));
        float _753 = fma(_718, cbModelParam._m0[28u].z, fma(_714, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _710));
        float _777 = _710 + _515;
        float _778 = _714 + _516;
        float _779 = _718 + _517;
        float _789 = fma(_779, cbModelParam._m0[26u].z, fma(_778, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _777)) - _745;
        float _790 = fma(_779, cbModelParam._m0[27u].z, fma(_778, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _777)) - _749;
        float _791 = fma(_779, cbModelParam._m0[28u].z, fma(_778, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _777)) - _753;
        float _795 = inversesqrt(dot(vec3(_789, _790, _791), vec3(_789, _790, _791)));
        float _808 = ((_795 * _789) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_745 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _809 = ((_795 * _790) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_749 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _810 = ((_795 * _791) / cbModelParam._m0[34u].z) + ((((((_753 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _813 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        vec4 _820 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        vec4 _827 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        float _847 = exp2((_813.w + (-0.5)) * 20.0) * 2.0;
        float _848 = _847 * (_813.x + (-0.5));
        float _849 = _847 * (_813.y + (-0.5));
        float _850 = _847 * (_813.z + (-0.5));
        float _857 = exp2((_820.w + (-0.5)) * 20.0) * 2.0;
        float _858 = _857 * (_820.x + (-0.5));
        float _859 = _857 * (_820.y + (-0.5));
        float _860 = _857 * (_820.z + (-0.5));
        float _867 = exp2((_827.w + (-0.5)) * 20.0) * 2.0;
        float _868 = _867 * (_827.x + (-0.5));
        float _869 = _867 * (_827.y + (-0.5));
        float _870 = _867 * (_827.z + (-0.5));
        float _877 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_834.x + (-0.5));
        float _879 = _877 * (_834.y + (-0.5));
        float _880 = _877 * (_834.z + (-0.5));
        float _881 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _882 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _883 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _884 = _848 * 0.5;
        float _885 = _858 * 0.5;
        float _886 = _868 * 0.5;
        float _887 = dot(vec3(_884, _885, _886), vec3(_884, _885, _886));
        float _892 = (_887 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_887);
        float _901 = (dot(vec3(_515, _516, _517), vec3(_892 * _884, _892 * _885, _892 * _886)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _911 = sqrt(((_885 * _885) + (_884 * _884)) + (_886 * _886)) / (_881 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _913 = _912 * 2.0;
        float _917 = (1.0 - _912) / (_912 + 1.0);
        float _4006 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _927 = ((((1.0 - _918) * (_913 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_913 + 1.0))) + _918) * _881;
        float _928 = _849 * 0.5;
        float _929 = _859 * 0.5;
        float _930 = _869 * 0.5;
        float _931 = dot(vec3(_928, _929, _930), vec3(_928, _929, _930));
        float _936 = (_931 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_931);
        float _944 = (dot(vec3(_515, _516, _517), vec3(_936 * _928, _936 * _929, _936 * _930)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _953 = sqrt(((_929 * _929) + (_928 * _928)) + (_930 * _930)) / (_882 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _955 = _954 * 2.0;
        float _959 = (1.0 - _954) / (_954 + 1.0);
        float _4039 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _969 = ((((1.0 - _960) * (_955 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_955 + 1.0))) + _960) * _882;
        float _970 = _850 * 0.5;
        float _971 = _860 * 0.5;
        float _972 = _870 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _986 = (dot(vec3(_515, _516, _517), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _4050 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _995 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_883 + 9.9999997473787516355514526367188e-06);
        float _4061 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _4072 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_997 + 1.0))) + _1002) * _883;
        _1019 = _850;
        _1021 = _849;
        _1022 = _848;
        _1023 = _860;
        _1024 = _859;
        _1025 = _858;
        _1026 = _870;
        _1027 = _869;
        _1028 = _868;
        _1029 = _883;
        _1030 = _882;
        _1031 = _881;
        _1032 = cbModelParam._m0[36u].z * (isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0)));
        _1033 = cbModelParam._m0[36u].z * (isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0)));
        _1034 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
    }
    else
    {
        _1019 = _1020;
        _1021 = _1020;
        _1022 = _1020;
        _1023 = _1020;
        _1024 = _1020;
        _1025 = _1020;
        _1026 = _1020;
        _1027 = _1020;
        _1028 = _1020;
        _1029 = _1020;
        _1030 = _1020;
        _1031 = _1020;
        _1032 = 0.0;
        _1033 = 0.0;
        _1034 = 0.0;
    }
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1060 = fma(_718, cbModelParam._m0[30u].z, fma(_714, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _710));
        float _1064 = fma(_718, cbModelParam._m0[31u].z, fma(_714, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _710));
        float _1068 = fma(_718, cbModelParam._m0[32u].z, fma(_714, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _710));
        float _1091 = _710 + _515;
        float _1092 = _714 + _516;
        float _1093 = _718 + _517;
        float _1103 = fma(_1093, cbModelParam._m0[30u].z, fma(_1092, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1091)) - _1060;
        float _1104 = fma(_1093, cbModelParam._m0[31u].z, fma(_1092, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1091)) - _1064;
        float _1105 = fma(_1093, cbModelParam._m0[32u].z, fma(_1092, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1091)) - _1068;
        float _1109 = inversesqrt(dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105)));
        float _1122 = ((_1109 * _1103) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1060 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1109 * _1104) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1064 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1109 * _1105) / cbModelParam._m0[35u].z) + ((((((_1068 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        float _1159 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1126.x + (-0.5));
        float _1161 = _1159 * (_1126.y + (-0.5));
        float _1162 = _1159 * (_1126.z + (-0.5));
        float _1169 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1133.x + (-0.5));
        float _1171 = _1169 * (_1133.y + (-0.5));
        float _1172 = _1169 * (_1133.z + (-0.5));
        float _1179 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1140.x + (-0.5));
        float _1181 = _1179 * (_1140.y + (-0.5));
        float _1182 = _1179 * (_1140.z + (-0.5));
        float _1189 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1147.x + (-0.5));
        float _1191 = _1189 * (_1147.y + (-0.5));
        float _1192 = _1189 * (_1147.z + (-0.5));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = _1160 * 0.5;
        float _1197 = _1170 * 0.5;
        float _1198 = _1180 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_515, _516, _517), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _4113 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _4124 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _4135 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_1223 + 1.0))) + _1228) * _1193;
        float _1238 = _1161 * 0.5;
        float _1239 = _1171 * 0.5;
        float _1240 = _1181 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_515, _516, _517), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _4168 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1265 + 1.0))) + _1270) * _1194;
        float _1280 = _1162 * 0.5;
        float _1281 = _1172 * 0.5;
        float _1282 = _1182 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_515, _516, _517), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _4179 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _4190 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _4201 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_1307 + 1.0))) + _1312) * _1195;
        _1329 = _1162;
        _1330 = _1161;
        _1331 = _1160;
        _1332 = _1172;
        _1333 = _1171;
        _1334 = _1170;
        _1335 = _1182;
        _1336 = _1181;
        _1337 = _1180;
        _1338 = _1195;
        _1339 = _1194;
        _1340 = _1193;
        _1341 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
        _1342 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
        _1343 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
    }
    else
    {
        _1329 = _1020;
        _1330 = _1020;
        _1331 = _1020;
        _1332 = _1020;
        _1333 = _1020;
        _1334 = _1020;
        _1335 = _1020;
        _1336 = _1020;
        _1337 = _1020;
        _1338 = _1020;
        _1339 = _1020;
        _1340 = _1020;
        _1341 = 0.0;
        _1342 = 0.0;
        _1343 = 0.0;
    }
    float _1353 = (cbModelParam._m0[1u].x * (_1341 - _1032)) + _1032;
    float _1354 = (cbModelParam._m0[1u].x * (_1342 - _1033)) + _1033;
    float _1355 = (cbModelParam._m0[1u].x * (_1343 - _1034)) + _1034;
    float _1376 = fma(_1355, cbSceneParam._m0[89u].z, fma(_1354, cbSceneParam._m0[89u].y, _1353 * cbSceneParam._m0[89u].x));
    float _1379 = fma(_1355, cbSceneParam._m0[90u].z, fma(_1354, cbSceneParam._m0[90u].y, _1353 * cbSceneParam._m0[90u].x));
    float _1382 = fma(_1355, cbSceneParam._m0[91u].z, fma(_1354, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1353));
    float _1397 = _664 * 0.5;
    float _1398 = _665 * 0.5;
    float _1399 = _666 * 0.5;
    float _1400 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1331, _1334, _1337, _1340));
    float _1403 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1330, _1333, _1336, _1339));
    float _1406 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1329, _1332, _1335, _1338));
    float _1440;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1413 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1019, _1023, _1026, _1029));
        float _1417 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1021, _1024, _1027, _1030));
        float _1421 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1022, _1025, _1028, _1031));
        float _1428 = dot(vec4(cbModelParam._m0[39u]), vec4(_1397, _1398, _1399, 1.0));
        _1440 = dot(vec3(isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)), isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)), isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1428) ? 0.0 : (isnan(0.0) ? _1428 : max(0.0, _1428))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1440 = 1.0;
    }
    float _1451;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1442 = dot(vec4(cbModelParam._m0[40u]), vec4(_1397, _1398, _1399, 1.0));
        _1451 = dot(vec3(isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)), isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1442) ? 0.0 : (isnan(0.0) ? _1442 : max(0.0, _1442))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1451 = 1.0;
    }
    float _1455 = (_1451 * cbModelParam._m0[1u].x) + (_1440 * (1.0 - cbModelParam._m0[1u].x));
    float _1464 = isnan(0.0) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? 0.0 : min(cbModelParam._m0[25u].z, 0.0));
    float _1545;
    float _1547;
    float _1549;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1512 = fma(_718, cbModelParam._m0[13u].z, fma(_714, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _710)) + cbModelParam._m0[13u].w;
        float _1516 = fma(_718, cbModelParam._m0[14u].z, fma(_714, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _710)) + cbModelParam._m0[14u].w;
        float _1520 = fma(_718, cbModelParam._m0[15u].z, fma(_714, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _710)) + cbModelParam._m0[15u].w;
        float _1523 = fma(_666, cbModelParam._m0[13u].z, fma(_665, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _664));
        float _1526 = fma(_666, cbModelParam._m0[14u].z, fma(_665, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _664));
        float _1529 = fma(_666, cbModelParam._m0[15u].z, fma(_665, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _664));
        float _1555;
        if (_1523 > 0.0)
        {
            _1555 = abs((1.0 - _1512) / _1523);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1512 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1555 = frontier_phi_16_14_ladder;
        }
        float _1776;
        if (_1526 > 0.0)
        {
            _1776 = abs((1.0 - _1516) / _1526);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1516 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1776 = frontier_phi_25_21_ladder;
        }
        float _2072;
        if (_1529 > 0.0)
        {
            _2072 = abs((1.0 - _1520) / _1529);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1520 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2072 = frontier_phi_37_32_ladder;
        }
        float _2074 = isnan(_1776) ? _1555 : (isnan(_1555) ? _1776 : min(_1555, _1776));
        float _2075 = isnan(_2072) ? _2074 : (isnan(_2074) ? _2072 : min(_2074, _2072));
        float _2079 = (_2075 * _1523) + _1512;
        float _2080 = (_2075 * _1526) + _1516;
        float _2081 = (_2075 * _1529) + _1520;
        float _2082 = _2075 * 9.9999997473787516355514526367188e-05;
        float _2084 = (-1.0) - _2082;
        float _2086 = _2082 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2081 > _2086) || ((_2081 < _2084) || ((_2080 > _2086) || ((_2080 < _2084) || ((_2079 < _2084) || (_2079 > _2086))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2226 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2081, cbModelParam._m0[9u].z, fma(_2080, cbModelParam._m0[9u].y, _2079 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2081, cbModelParam._m0[10u].z, fma(_2080, cbModelParam._m0[10u].y, _2079 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2081, cbModelParam._m0[11u].z, fma(_2080, cbModelParam._m0[11u].y, _2079 * cbModelParam._m0[11u].x))), _1464);
            frontier_phi_15_37_ladder = _2226.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2226.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2226.z * cbModelParam._m0[1u].y;
        }
        _1545 = frontier_phi_15_37_ladder_1;
        _1547 = frontier_phi_15_37_ladder;
        _1549 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1533 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_664, _665, _666), _1464);
        _1545 = _1533.x * cbModelParam._m0[1u].y;
        _1547 = _1533.y * cbModelParam._m0[1u].y;
        _1549 = _1533.z * cbModelParam._m0[1u].y;
    }
    float _1552 = isnan(0.0) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? 0.0 : min(cbModelParam._m0[25u].w, 0.0));
    float _1644;
    float _1646;
    float _1648;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1608 = fma(_718, cbModelParam._m0[21u].z, fma(_714, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _710)) + cbModelParam._m0[21u].w;
        float _1612 = fma(_718, cbModelParam._m0[22u].z, fma(_714, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _710)) + cbModelParam._m0[22u].w;
        float _1616 = fma(_718, cbModelParam._m0[23u].z, fma(_714, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _710)) + cbModelParam._m0[23u].w;
        float _1619 = fma(_666, cbModelParam._m0[21u].z, fma(_665, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _664));
        float _1622 = fma(_666, cbModelParam._m0[22u].z, fma(_665, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _664));
        float _1625 = fma(_666, cbModelParam._m0[23u].z, fma(_665, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _664));
        float _1781;
        if (_1619 > 0.0)
        {
            _1781 = abs((1.0 - _1608) / _1619);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1608 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1781 = frontier_phi_27_23_ladder;
        }
        float _2099;
        if (_1622 > 0.0)
        {
            _2099 = abs((1.0 - _1612) / _1622);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1612 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2099 = frontier_phi_39_34_ladder;
        }
        float _2424;
        if (_1625 > 0.0)
        {
            _2424 = abs((1.0 - _1616) / _1625);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1616 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2424 = frontier_phi_49_46_ladder;
        }
        float _2426 = isnan(_2099) ? _1781 : (isnan(_1781) ? _2099 : min(_1781, _2099));
        float _2427 = isnan(_2424) ? _2426 : (isnan(_2426) ? _2424 : min(_2426, _2424));
        float _2431 = (_2427 * _1619) + _1608;
        float _2432 = (_2427 * _1622) + _1612;
        float _2433 = (_2427 * _1625) + _1616;
        float _2434 = _2427 * 9.9999997473787516355514526367188e-05;
        float _2435 = (-1.0) - _2434;
        float _2437 = _2434 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2433 > _2437) || ((_2433 < _2435) || ((_2432 > _2437) || ((_2432 < _2435) || ((_2431 < _2435) || (_2431 > _2437))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2550 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2433, cbModelParam._m0[17u].z, fma(_2432, cbModelParam._m0[17u].y, _2431 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2433, cbModelParam._m0[18u].z, fma(_2432, cbModelParam._m0[18u].y, _2431 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2433, cbModelParam._m0[19u].z, fma(_2432, cbModelParam._m0[19u].y, _2431 * cbModelParam._m0[19u].x))), _1552);
            frontier_phi_24_49_ladder = _2550.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2550.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2550.x * cbModelParam._m0[1u].z;
        }
        _1644 = frontier_phi_24_49_ladder_2;
        _1646 = frontier_phi_24_49_ladder_1;
        _1648 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1628 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_664, _665, _666), _1552);
        _1644 = _1628.x * cbModelParam._m0[1u].z;
        _1646 = _1628.y * cbModelParam._m0[1u].z;
        _1648 = _1628.z * cbModelParam._m0[1u].z;
    }
    float _1660 = (((1.0 - _684) * 0.039999999105930328369140625) + _684) * _656;
    float _1661 = _1660 * ((cbModelParam._m0[1u].w * (_1644 - _1545)) + _1545);
    float _1662 = _1660 * ((cbModelParam._m0[1u].w * (_1646 - _1547)) + _1547);
    float _1663 = _1660 * ((cbModelParam._m0[1u].w * (_1648 - _1549)) + _1549);
    float _1666 = fma(_1663, cbSceneParam._m0[89u].z, fma(_1662, cbSceneParam._m0[89u].y, _1661 * cbSceneParam._m0[89u].x));
    float _1669 = fma(_1663, cbSceneParam._m0[90u].z, fma(_1662, cbSceneParam._m0[90u].y, _1661 * cbSceneParam._m0[90u].x));
    float _1672 = fma(_1663, cbSceneParam._m0[91u].z, fma(_1662, cbSceneParam._m0[91u].y, _1661 * cbSceneParam._m0[91u].x));
    float _1683 = _590 / cbSceneParam._m0[86u].x;
    float _4327 = isnan(0.0) ? cbSceneParam._m0[88u].z : (isnan(cbSceneParam._m0[88u].z) ? 0.0 : max(cbSceneParam._m0[88u].z, 0.0));
    float _1689 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * 5.0;
    float _1693 = 0.99999988079071044921875 / (_525 + 10.0);
    float _1695 = _1693 * dot(vec3(_515, _516, _517), vec3(1.0, 0.0, 0.0));
    vec4 _1705 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1695 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1695 + _1683) * cbSceneParam._m0[86u].x, _591), _1689).w) + _1683) * cbSceneParam._m0[86u].x, _591), _1689);
    float _1721 = 1.0 - _1705.w;
    float _1755 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1759 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1763 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1767 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1768 = _1755 / _1767;
    float _1769 = _1759 / _1767;
    float _1770 = _1763 / _1767;
    float _1917;
    float _1918;
    float _1919;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1797 = ((uint(_1770 > cbSceneParam._m0[59u].y) + uint(_1770 > cbSceneParam._m0[59u].x)) + uint(_1770 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1798 = _1797 + 43u;
        uint _1806 = _1797 + 44u;
        uint _1814 = _1797 + 45u;
        uint _1822 = _1797 + 46u;
        float _1833 = fma(_1767, cbSceneParam._m0[_1798].w, fma(_1763, cbSceneParam._m0[_1798].z, fma(_1759, cbSceneParam._m0[_1798].y, _1755 * cbSceneParam._m0[_1798].x)));
        float _1837 = fma(_1767, cbSceneParam._m0[_1806].w, fma(_1763, cbSceneParam._m0[_1806].z, fma(_1759, cbSceneParam._m0[_1806].y, _1755 * cbSceneParam._m0[_1806].x)));
        float _1845 = fma(_1767, cbSceneParam._m0[_1822].w, fma(_1763, cbSceneParam._m0[_1822].z, fma(_1759, cbSceneParam._m0[_1822].y, _1755 * cbSceneParam._m0[_1822].x)));
        float _1850 = cbSceneParam._m0[33u].z * _1845;
        float _1852 = cbSceneParam._m0[33u].w * _1845;
        float _1855 = fma(_1767, cbSceneParam._m0[_1814].w, fma(_1763, cbSceneParam._m0[_1814].z, fma(_1759, cbSceneParam._m0[_1814].y, _1755 * cbSceneParam._m0[_1814].x))) / _1845;
        float _1903 = (cbSceneParam._m0[33u].x - sqrt(((_1769 * _1769) + (_1768 * _1768)) + (_1770 * _1770))) * cbSceneParam._m0[33u].y;
        float _4338 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
        float _1910 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1850 + _1833) / _1845, (_1852 + _1837) / _1845), _1855), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1852 + _1833) / _1845, (_1837 - _1850) / _1845), _1855), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1833 - _1850) / _1845, (_1837 - _1852) / _1845), _1855), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1833 - _1852) / _1845, (_1850 + _1837) / _1845), _1855), 0.0)).x), vec4(0.25)));
        _1917 = 1.0 - (_1910 * cbSceneParam._m0[34u].x);
        _1918 = 1.0 - (_1910 * cbSceneParam._m0[34u].y);
        _1919 = 1.0 - (_1910 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1917 = 1.0;
        _1918 = 1.0;
        _1919 = 1.0;
    }
    float _1983;
    float _1985;
    float _1987;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1971 = fma(_1767, cbSceneParam._m0[63u].w, fma(_1763, cbSceneParam._m0[63u].z, fma(_1759, cbSceneParam._m0[63u].y, _1755 * cbSceneParam._m0[63u].x)));
        float _1972 = fma(_1767, cbSceneParam._m0[60u].w, fma(_1763, cbSceneParam._m0[60u].z, fma(_1759, cbSceneParam._m0[60u].y, _1755 * cbSceneParam._m0[60u].x))) / _1971;
        float _1973 = fma(_1767, cbSceneParam._m0[61u].w, fma(_1763, cbSceneParam._m0[61u].z, fma(_1759, cbSceneParam._m0[61u].y, _1755 * cbSceneParam._m0[61u].x))) / _1971;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1972 >= cbSceneParam._m0[64u].x) && (_1973 >= cbSceneParam._m0[64u].y)) && (_1972 <= cbSceneParam._m0[64u].z)) && (_1973 <= cbSceneParam._m0[64u].w))
        {
            float _2112 = fma(_1767, cbSceneParam._m0[62u].w, fma(_1763, cbSceneParam._m0[62u].z, fma(_1759, cbSceneParam._m0[62u].y, _1755 * cbSceneParam._m0[62u].x))) / _1971;
            float _2116 = isnan(cbSceneParam._m0[41u].w) ? _2112 : (isnan(_2112) ? cbSceneParam._m0[41u].w : max(_2112, cbSceneParam._m0[41u].w));
            float _2159 = (cbSceneParam._m0[33u].x - sqrt(((_1769 * _1769) + (_1768 * _1768)) + (_1770 * _1770))) * cbSceneParam._m0[33u].y;
            float _4354 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
            float _2166 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1972, cbSceneParam._m0[33u].w + _1973), _2116), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1972, _1973 - cbSceneParam._m0[33u].z), _2116), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1972 - cbSceneParam._m0[33u].z, _1973 - cbSceneParam._m0[33u].w), _2116), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1972 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1973), _2116), 0.0)).x), vec4(0.25)));
            float _2170 = 1.0 - (_2166 * cbSceneParam._m0[34u].x);
            float _2171 = 1.0 - (_2166 * cbSceneParam._m0[34u].y);
            float _2172 = 1.0 - (_2166 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2171) ? _1918 : (isnan(_1918) ? _2171 : min(_1918, _2171));
            frontier_phi_36_35_ladder_1 = isnan(_2172) ? _1919 : (isnan(_1919) ? _2172 : min(_1919, _2172));
            frontier_phi_36_35_ladder_2 = isnan(_2170) ? _1917 : (isnan(_1917) ? _2170 : min(_1917, _2170));
        }
        else
        {
            frontier_phi_36_35_ladder = _1918;
            frontier_phi_36_35_ladder_1 = _1919;
            frontier_phi_36_35_ladder_2 = _1917;
        }
        _1983 = frontier_phi_36_35_ladder_2;
        _1985 = frontier_phi_36_35_ladder;
        _1987 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1983 = _1917;
        _1985 = _1918;
        _1987 = _1919;
    }
    uint _1989 = _631 + 5u;
    uvec4 _1992 = floatBitsToUint(cbInstanceData._m0[_1989]);
    uint _1994 = _1992.x * 14u;
    uint _1995 = _1994 + 13u;
    float _2002 = _656 + (-1.0);
    float _2007 = (cbLight._m0[_1995].x * _2002) + 1.0;
    float _2008 = (cbLight._m0[_1995].y * _2002) + 1.0;
    float _2009 = (cbLight._m0[_1995].z * _2002) + 1.0;
    float _2010 = (cbLight._m0[_1995].w * _2002) + 1.0;
    uint _2011 = _1994 + 5u;
    float _2017 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
    uint _2021 = _1994 + 4u;
    float _2031 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
    uint _2035 = _1994 | 1u;
    float _2046 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_515, _516, _517));
    float _2049 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_515, _516, _517));
    float _4390 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _4401 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2054 = (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * 0.3183098733425140380859375;
    float _2056 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * 0.3183098733425140380859375;
    float _2063 = ((cbLight._m0[_2011].x * _2017) * _2056) + (((cbLight._m0[_2021].x * _1983) * _2031) * _2054);
    float _2064 = ((_2017 * cbLight._m0[_2011].y) * _2056) + (((cbLight._m0[_2021].y * _1985) * _2031) * _2054);
    float _2065 = ((_2017 * cbLight._m0[_2011].z) * _2056) + (((cbLight._m0[_2021].z * _1987) * _2031) * _2054);
    uvec4 _2069 = floatBitsToUint(cbLight._m0[_1994 + 12u]);
    bool _2071 = _2069.x == 0u;
    float _2173;
    float _2175;
    float _2177;
    if (_2071)
    {
        _2173 = _2063;
        _2175 = _2064;
        _2177 = _2065;
    }
    else
    {
        uint _2181 = _1994 + 6u;
        float _2197 = (dot(vec3(cbLight._m0[_1994 + 2u].xyz), vec3(_515, _516, _517)) * 0.5) + 0.5;
        float _2198 = _2197 * _2197;
        float _4412 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2199 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2200 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
        _2173 = (((cbLight._m0[_2181].x * 0.3183098733425140380859375) * _2199) * _2200) + _2063;
        _2175 = (((cbLight._m0[_2181].y * 0.3183098733425140380859375) * _2199) * _2200) + _2064;
        _2177 = (((cbLight._m0[_2181].z * 0.3183098733425140380859375) * _2199) * _2200) + _2065;
    }
    bool _2180 = _2069.y == 0u;
    float _2235;
    float _2237;
    float _2239;
    if (_2180)
    {
        _2235 = _2173;
        _2237 = _2175;
        _2239 = _2177;
    }
    else
    {
        uint _2395 = _1994 + 7u;
        float _2411 = (dot(vec3(cbLight._m0[_1994 + 3u].xyz), vec3(_515, _516, _517)) * 0.5) + 0.5;
        float _2412 = _2411 * _2411;
        float _4428 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2413 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2414 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
        _2235 = (((cbLight._m0[_2395].x * 0.3183098733425140380859375) * _2413) * _2414) + _2173;
        _2237 = (((cbLight._m0[_2395].y * 0.3183098733425140380859375) * _2413) * _2414) + _2175;
        _2239 = (((cbLight._m0[_2395].z * 0.3183098733425140380859375) * _2413) * _2414) + _2177;
    }
    uint _2242 = _1994 + 8u;
    float _2254 = 1.0 - (sqrt(1.0 - (0.07500000298023223876953125 / cbLight._m0[_1994].w)) * 0.949999988079071044921875);
    float _2255 = _2254 * _2254;
    float _2256 = cbLight._m0[_1994].x + _583;
    float _2257 = cbLight._m0[_1994].y + _584;
    float _2258 = cbLight._m0[_1994].z + _585;
    float _2262 = inversesqrt(dot(vec3(_2256, _2257, _2258), vec3(_2256, _2257, _2258)));
    float _2263 = _2262 * _2256;
    float _2264 = _2262 * _2257;
    float _2265 = _2262 * _2258;
    float _2266 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_1994].xyz));
    float _4444 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2269 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _4455 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _2270 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _2271 = dot(vec3(_515, _516, _517), vec3(_2263, _2264, _2265));
    float _4466 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2274 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2275 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_2263, _2264, _2265));
    float _4477 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2279 = _2255 * _2255;
    float _2283 = ((_2274 * _2274) * (_2279 + (-1.0))) + 1.0;
    float _2294 = (exp2(log2(1.0 - (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2295 = 1.0 - _2255;
    float _2306 = (0.5 / (((_2270 * ((_2269 * _2295) + _2255)) + 9.9999999392252902907785028219223e-09) + (((_2270 * _2295) + _2255) * _2269))) * _2269;
    float _4488 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2308 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2279 / ((_2283 * _2283) * 3.141590118408203125));
    uint _2322 = _1994 + 9u;
    float _2332 = 1.0 - (sqrt(1.0 - (0.07500000298023223876953125 / cbLight._m0[_2035].w)) * 0.949999988079071044921875);
    float _2333 = _2332 * _2332;
    float _2334 = cbLight._m0[_2035].x + _583;
    float _2335 = cbLight._m0[_2035].y + _584;
    float _2336 = cbLight._m0[_2035].z + _585;
    float _2340 = inversesqrt(dot(vec3(_2334, _2335, _2336), vec3(_2334, _2335, _2336)));
    float _2341 = _2340 * _2334;
    float _2342 = _2340 * _2335;
    float _2343 = _2340 * _2336;
    float _2344 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_2035].xyz));
    float _4499 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2347 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
    float _2348 = dot(vec3(_515, _516, _517), vec3(_2341, _2342, _2343));
    float _4510 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2351 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _2352 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_2341, _2342, _2343));
    float _4521 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2356 = _2333 * _2333;
    float _2360 = ((_2351 * _2351) * (_2356 + (-1.0))) + 1.0;
    float _2369 = (exp2(log2(1.0 - (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2370 = 1.0 - _2333;
    float _2380 = (0.5 / (((_2270 * ((_2347 * _2370) + _2333)) + 9.9999999392252902907785028219223e-09) + (((_2270 * _2370) + _2333) * _2347))) * _2347;
    float _4532 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2382 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2356 / ((_2360 * _2360) * 3.141590118408203125));
    float _2392 = (((_2369 * cbLight._m0[_2322].x) * _2382) * _2017) + ((((cbLight._m0[_2242].x * _1983) * _2294) * _2308) * _2031);
    float _2393 = (((_2369 * cbLight._m0[_2322].y) * _2382) * _2017) + ((((cbLight._m0[_2242].y * _1985) * _2294) * _2308) * _2031);
    float _2394 = (((_2369 * cbLight._m0[_2322].z) * _2382) * _2017) + ((((cbLight._m0[_2242].z * _1987) * _2294) * _2308) * _2031);
    float _2450;
    float _2452;
    float _2454;
    if (_2071)
    {
        _2450 = _2392;
        _2452 = _2393;
        _2454 = _2394;
    }
    else
    {
        uint _2456 = _1994 + 2u;
        uint _2460 = _1994 + 10u;
        float _2473 = 1.0 - (sqrt(1.0 - (0.07500000298023223876953125 / cbLight._m0[_2456].w)) * 0.949999988079071044921875);
        float _2474 = _2473 * _2473;
        float _2475 = cbLight._m0[_2456].x + _583;
        float _2476 = cbLight._m0[_2456].y + _584;
        float _2477 = cbLight._m0[_2456].z + _585;
        float _2481 = inversesqrt(dot(vec3(_2475, _2476, _2477), vec3(_2475, _2476, _2477)));
        float _2482 = _2481 * _2475;
        float _2483 = _2481 * _2476;
        float _2484 = _2481 * _2477;
        float _2485 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_2456].xyz));
        float _4543 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2488 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2489 = dot(vec3(_515, _516, _517), vec3(_2482, _2483, _2484));
        float _4554 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2492 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2493 = dot(vec3(cbLight._m0[_2456].xyz), vec3(_2482, _2483, _2484));
        float _4565 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2497 = _2474 * _2474;
        float _2501 = ((_2492 * _2492) * (_2497 + (-1.0))) + 1.0;
        float _2510 = (exp2(log2(1.0 - (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2511 = 1.0 - _2474;
        float _2521 = (0.5 / (((_2270 * ((_2488 * _2511) + _2474)) + 9.9999999392252902907785028219223e-09) + (((_2270 * _2511) + _2474) * _2488))) * _2488;
        float _4576 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2523 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2497 / ((_2501 * _2501) * 3.141590118408203125));
        float _2524 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
        _2450 = (((_2510 * cbLight._m0[_2460].x) * _2523) * _2524) + _2392;
        _2452 = (((_2510 * cbLight._m0[_2460].y) * _2523) * _2524) + _2393;
        _2454 = (((_2510 * cbLight._m0[_2460].z) * _2523) * _2524) + _2394;
    }
    float _2555;
    float _2557;
    float _2559;
    if (_2180)
    {
        _2555 = _2450;
        _2557 = _2452;
        _2559 = _2454;
    }
    else
    {
        uint _2566 = _1994 + 3u;
        uint _2570 = _1994 + 11u;
        float _2583 = 1.0 - (sqrt(1.0 - (0.07500000298023223876953125 / cbLight._m0[_2566].w)) * 0.949999988079071044921875);
        float _2584 = _2583 * _2583;
        float _2585 = cbLight._m0[_2566].x + _583;
        float _2586 = cbLight._m0[_2566].y + _584;
        float _2587 = cbLight._m0[_2566].z + _585;
        float _2591 = inversesqrt(dot(vec3(_2585, _2586, _2587), vec3(_2585, _2586, _2587)));
        float _2592 = _2591 * _2585;
        float _2593 = _2591 * _2586;
        float _2594 = _2591 * _2587;
        float _2595 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_2566].xyz));
        float _4592 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2598 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _2599 = dot(vec3(_515, _516, _517), vec3(_2592, _2593, _2594));
        float _4603 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2602 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2603 = dot(vec3(cbLight._m0[_2566].xyz), vec3(_2592, _2593, _2594));
        float _4614 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2607 = _2584 * _2584;
        float _2611 = ((_2602 * _2602) * (_2607 + (-1.0))) + 1.0;
        float _2620 = (exp2(log2(1.0 - (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2621 = 1.0 - _2584;
        float _2631 = (0.5 / (((_2270 * ((_2598 * _2621) + _2584)) + 9.9999999392252902907785028219223e-09) + (((_2270 * _2621) + _2584) * _2598))) * _2598;
        float _4625 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2633 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2607 / ((_2611 * _2611) * 3.141590118408203125));
        float _2634 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
        _2555 = (((_2620 * cbLight._m0[_2570].x) * _2633) * _2634) + _2450;
        _2557 = (((_2620 * cbLight._m0[_2570].y) * _2633) * _2634) + _2452;
        _2559 = (((_2620 * cbLight._m0[_2570].z) * _2633) * _2634) + _2454;
    }
    float _2699;
    float _2701;
    float _2703;
    float _2705;
    float _2707;
    float _2709;
    if (_1992.y == 0u)
    {
        uvec4 _2655 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2656 = _2655.x;
        uint _2667 = uint((float(_2655.y) * floor(float(uint(cbSceneParam._m0[85u].y * _591) / _2656))) + floor(float(uint(cbSceneParam._m0[85u].x * _590) / _2656)));
        float _2677 = (log2(_1770 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2678 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        uint _2681 = uint(isnan(14.0) ? _2678 : (isnan(_2678) ? 14.0 : min(_2678, 14.0)));
        uvec4 _2686 = texelFetch(g_lightClusterGridBuffer, int(((_2681 << 2u) + (_2667 << 6u)) >> 2u));
        uint _2687 = _2686.x;
        uint _2688 = _2655.z;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        if (((((1u << ((_2688 >> 4u) & 15u)) + 4294967295u) & _2687) == 0u) || ((_2688 & 240u) == 0u))
        {
            _2960 = 0.0;
            _2962 = 0.0;
            _2964 = 0.0;
            _2966 = 0.0;
            _2968 = 0.0;
            _2970 = 0.0;
        }
        else
        {
            float _2961;
            float _2963;
            float _2965;
            float _2967;
            float _2969;
            float _2971;
            float _3136 = 0.0;
            float _3137 = 0.0;
            float _3138 = 0.0;
            float _3139 = 0.0;
            float _3140 = 0.0;
            float _3141 = 0.0;
            uint _3142 = 0u;
            uint _3151;
            bool _3152;
            for (;;)
            {
                _3151 = texelFetch(g_lightClassification, int((((_2681 << 5u) + (_2667 << 9u)) + (_3142 << 2u)) >> 2u)).x;
                _3152 = _3151 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3152)
                {
                    frontier_phi_68_pred = _3141;
                    frontier_phi_68_pred_1 = _3140;
                    frontier_phi_68_pred_2 = _3139;
                    frontier_phi_68_pred_3 = _3137;
                    frontier_phi_68_pred_4 = _3136;
                    frontier_phi_68_pred_5 = _3138;
                }
                else
                {
                    float _3260;
                    float _3261;
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    uint _3266;
                    _3260 = _3136;
                    _3261 = _3137;
                    _3262 = _3138;
                    _3263 = _3139;
                    _3264 = _3140;
                    _3265 = _3141;
                    _3266 = _3151;
                    float _3192;
                    float _3193;
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    for (;;)
                    {
                        uint _3270 = uint(findLSB(_3266)) + (_3142 << 5u);
                        uint _3267 = (_3266 + 4294967295u) & _3266;
                        uint _3272 = _3270 * 48u;
                        vec4 _3286 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3272)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 3u)).x));
                        uint _3292 = (_3270 * 48u) + 4u;
                        vec4 _3305 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3292)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 3u)).x));
                        uint _3311 = (_3270 * 48u) + 8u;
                        vec3 _3322 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3311)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 2u)).x));
                        float _3326 = _3286.x - _1768;
                        float _3327 = _3286.y - _1769;
                        float _3328 = _3286.z - _1770;
                        float _3329 = dot(vec3(_3326, _3327, _3328), vec3(_3326, _3327, _3328));
                        float _3332 = inversesqrt(_3329);
                        float _3333 = _3332 * _3326;
                        float _3334 = _3332 * _3327;
                        float _3335 = _3332 * _3328;
                        float _3336 = dot(vec3(_612, _615, _618), vec3(_3333, _3334, _3335));
                        float _3341 = 1.0 - (_3329 * _3286.w);
                        float _4651 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                        float _3342 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                        float _3343 = sqrt(_3329) * _3305.w;
                        float _3346 = 1.39999997615814208984375 / (_3343 + 1.39999997615814208984375);
                        float _3347 = _3346 * _3346;
                        float _3350 = ((1.0 - _3347) * _3336) + _3347;
                        float _3353 = _3343 * _3343;
                        float _3356 = ((isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0))) * _3342) / ((_3353 * 0.699999988079071044921875) + 1.0);
                        float _3360 = (-0.0) - _1768;
                        float _3361 = (-0.0) - _1769;
                        float _3362 = (-0.0) - _1770;
                        float _3366 = inversesqrt(dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362)));
                        float _3367 = _3366 * _3360;
                        float _3368 = _3366 * _3361;
                        float _3369 = _3366 * _3362;
                        float _3376 = exp2(log2(1.0 / ((_3353 * 3.5) + 5.0)) * 0.25);
                        float _3378 = sqrt(_3376 * _3376);
                        float _3379 = _3378 * _3378;
                        float _3380 = _3379 * _3379;
                        float _3381 = _3367 + _3333;
                        float _3382 = _3368 + _3334;
                        float _3383 = _3369 + _3335;
                        float _3387 = inversesqrt(dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383)));
                        float _3391 = dot(vec3(_612, _615, _618), vec3(_3367, _3368, _3369));
                        float _4667 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3394 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                        float _3395 = dot(vec3(_612, _615, _618), vec3(_3387 * _3381, _3387 * _3382, _3387 * _3383));
                        float _4678 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3398 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                        float _3402 = ((_3398 * _3398) * (_3380 + (-1.0))) + 1.0;
                        float _3403 = _3346 * _3379;
                        float _3404 = _3403 * _3403;
                        float _3407 = ((1.0 - _3404) * _3336) + _3404;
                        float _4689 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3408 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                        float _3409 = 1.0 - _3379;
                        float _3419 = (0.5 / (((_3408 * ((_3394 * _3409) + _3379)) + 9.9999999392252902907785028219223e-09) + (((_3408 * _3409) + _3379) * _3394))) * _3408;
                        float _4700 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3430 = (((_3380 * 3.1415927410125732421875) * (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) / ((_3402 * _3402) * ((_3353 * 2.1991131305694580078125) + 3.141590118408203125))) * _3342;
                        _3195 = (_3356 * _3305.x) + _3263;
                        _3196 = (_3356 * _3305.y) + _3264;
                        _3197 = (_3356 * _3305.z) + _3265;
                        _3192 = (_3430 * _3322.x) + _3260;
                        _3193 = (_3430 * _3322.y) + _3261;
                        _3194 = (_3430 * _3322.z) + _3262;
                        if (_3267 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3260 = _3192;
                            _3261 = _3193;
                            _3262 = _3194;
                            _3263 = _3195;
                            _3264 = _3196;
                            _3265 = _3197;
                            _3266 = _3267;
                        }
                    }
                    frontier_phi_68_pred = _3197;
                    frontier_phi_68_pred_1 = _3196;
                    frontier_phi_68_pred_2 = _3195;
                    frontier_phi_68_pred_3 = _3193;
                    frontier_phi_68_pred_4 = _3192;
                    frontier_phi_68_pred_5 = _3194;
                }
                _2971 = frontier_phi_68_pred;
                _2969 = frontier_phi_68_pred_1;
                _2967 = frontier_phi_68_pred_2;
                _2963 = frontier_phi_68_pred_3;
                _2961 = frontier_phi_68_pred_4;
                _2965 = frontier_phi_68_pred_5;
                uint _3143 = _3142 + 1u;
                if (_3143 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3136 = _2961;
                    _3137 = _2963;
                    _3138 = _2965;
                    _3139 = _2967;
                    _3140 = _2969;
                    _3141 = _2971;
                    _3142 = _3143;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2960 = _2961;
            _2962 = _2963;
            _2964 = _2965;
            _2966 = _2967;
            _2968 = _2969;
            _2970 = _2971;
        }
        uvec4 _2974 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2975 = _2974.z;
        uint _2977 = (_2975 >> 8u) & 15u;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        if (((4294967295u << _2977) & _2687) == 0u)
        {
            _3104 = _2960;
            _3106 = _2962;
            _3108 = _2964;
            _3110 = _2966;
            _3112 = _2968;
            _3114 = _2970;
        }
        else
        {
            float _3129 = inversesqrt(dot(vec3(_1768, _1769, _1770), vec3(_1768, _1769, _1770)));
            float _3130 = _3129 * _1768;
            float _3131 = _3129 * _1769;
            float _3132 = _3129 * _1770;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2977 < ((_2975 >> 12u) & 15u))
            {
                float _3105;
                float _3107;
                float _3109;
                float _3111;
                float _3113;
                float _3115;
                float _3243 = _2960;
                float _3244 = _2962;
                float _3245 = _2964;
                float _3246 = _2966;
                float _3247 = _2968;
                float _3248 = _2970;
                uint _3249 = _2977;
                uint _3258;
                bool _3259;
                for (;;)
                {
                    _3258 = texelFetch(g_lightClassification, int((((_2681 << 5u) + (_2667 << 9u)) + (_3249 << 2u)) >> 2u)).x;
                    _3259 = _3258 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3259)
                    {
                        frontier_phi_74_pred = _3245;
                        frontier_phi_74_pred_1 = _3244;
                        frontier_phi_74_pred_2 = _3243;
                        frontier_phi_74_pred_3 = _3248;
                        frontier_phi_74_pred_4 = _3247;
                        frontier_phi_74_pred_5 = _3246;
                    }
                    else
                    {
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3725;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _3448 = _3243;
                        float _3449 = _3244;
                        float _3450 = _3245;
                        float _3451 = _3246;
                        float _3452 = _3247;
                        float _3453 = _3248;
                        uint _3454 = _3258;
                        uint _3455;
                        vec4 _3480;
                        float _3481;
                        vec4 _3496;
                        vec3 _3508;
                        vec4 _3524;
                        vec4 _3540;
                        float _3587;
                        bool _3588;
                        for (;;)
                        {
                            uint _3465 = ((_3249 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3454));
                            _3455 = (_3454 + 4294967295u) & _3454;
                            uint _3467 = _3465 * 40u;
                            _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            _3481 = _3480.w;
                            uint _3483 = (_3465 * 40u) + 4u;
                            _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            uint _3498 = (_3465 * 40u) + 8u;
                            _3508 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x));
                            uint _3511 = (_3465 * 40u) + 16u;
                            _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            uint _3527 = (_3465 * 40u) + 20u;
                            _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            uint _3543 = (_3465 * 40u) + 24u;
                            vec4 _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            uint _3562 = (_3465 * 40u) + 28u;
                            vec4 _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            _3587 = fma(_1770, _3575.z, fma(_1769, _3575.y, _3575.x * _1768)) + _3575.w;
                            _3588 = !((fma(_1770, _3556.z, fma(_1769, _3556.y, _3556.x * _1768)) + _3556.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3588)
                            {
                                float _3615 = _3480.x - _1768;
                                float _3616 = _3480.y - _1769;
                                float _3617 = _3480.z - _1770;
                                float _3618 = dot(vec3(_3615, _3616, _3617), vec3(_3615, _3616, _3617));
                                float _3621 = inversesqrt(_3618);
                                float _3622 = _3621 * _3615;
                                float _3623 = _3621 * _3616;
                                float _3624 = _3621 * _3617;
                                float _3628 = 1.0 - (_3618 / (_3481 * _3481));
                                float _4711 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3629 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3633 = sqrt(_3618) * _3496.w;
                                float _3635 = 1.39999997615814208984375 / (_3633 + 1.39999997615814208984375);
                                float _3636 = _3635 * _3635;
                                float _3639 = ((1.0 - _3636) * dot(vec3(_3622, _3623, _3624), vec3(_612, _615, _618))) + _3636;
                                float _3642 = _3633 * _3633;
                                float _3646 = (fma(_1770, _3524.z, fma(_1769, _3524.y, _3524.x * _1768)) + _3524.w) / _3587;
                                float _3647 = (fma(_1770, _3540.z, fma(_1769, _3540.y, _3540.x * _1768)) + _3540.w) / _3587;
                                float _3651 = 1.0 - dot(vec2(_3646, _3647), vec2(_3646, _3647));
                                float _4727 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                                float _3652 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                                float _3653 = _3652 * (((isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0))) * _3629) / ((_3642 * 0.699999988079071044921875) + 1.0));
                                float _3665 = exp2(log2(1.0 / ((_3642 * 3.5) + 5.0)) * 0.25);
                                float _3667 = sqrt(_3665 * _3665);
                                float _3668 = _3667 * _3667;
                                float _3669 = _3668 * _3668;
                                float _3670 = _3622 - _3130;
                                float _3671 = _3623 - _3131;
                                float _3672 = _3624 - _3132;
                                float _3676 = inversesqrt(dot(vec3(_3670, _3671, _3672), vec3(_3670, _3671, _3672)));
                                float _3680 = dot(vec3(_612, _615, _618), vec3((-0.0) - _3130, (-0.0) - _3131, (-0.0) - _3132));
                                float _4738 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3683 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3684 = dot(vec3(_612, _615, _618), vec3(_3676 * _3670, _3676 * _3671, _3676 * _3672));
                                float _4749 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3687 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                                float _3691 = ((_3687 * _3687) * (_3669 + (-1.0))) + 1.0;
                                float _3692 = _3635 * _3668;
                                float _3693 = _3692 * _3692;
                                float _3699 = ((1.0 - _3693) * dot(vec3(_612, _615, _618), vec3(_3622, _3623, _3624))) + _3693;
                                float _4760 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3700 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3701 = 1.0 - _3668;
                                float _3711 = (0.5 / (((_3700 * ((_3683 * _3701) + _3668)) + 9.9999999392252902907785028219223e-09) + (((_3700 * _3701) + _3668) * _3683))) * _3700;
                                float _4771 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3721 = (_3652 * _3629) * (((_3669 * 3.1415927410125732421875) * (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0)))) / ((_3691 * _3691) * ((_3642 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3721 * _3508.z;
                                frontier_phi_80_pred_1 = _3721 * _3508.y;
                                frontier_phi_80_pred_2 = _3721 * _3508.x;
                                frontier_phi_80_pred_3 = _3653 * _3496.z;
                                frontier_phi_80_pred_4 = _3653 * _3496.y;
                                frontier_phi_80_pred_5 = _3653 * _3496.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3727 = frontier_phi_80_pred;
                            _3726 = frontier_phi_80_pred_1;
                            _3725 = frontier_phi_80_pred_2;
                            _3730 = frontier_phi_80_pred_3;
                            _3729 = frontier_phi_80_pred_4;
                            _3728 = frontier_phi_80_pred_5;
                            _3438 = _3728 + _3451;
                            _3439 = _3729 + _3452;
                            _3440 = _3730 + _3453;
                            _3435 = _3725 + _3448;
                            _3436 = _3726 + _3449;
                            _3437 = _3727 + _3450;
                            if (_3455 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3438;
                                _3452 = _3439;
                                _3453 = _3440;
                                _3454 = _3455;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3437;
                        frontier_phi_74_pred_1 = _3436;
                        frontier_phi_74_pred_2 = _3435;
                        frontier_phi_74_pred_3 = _3440;
                        frontier_phi_74_pred_4 = _3439;
                        frontier_phi_74_pred_5 = _3438;
                    }
                    _3109 = frontier_phi_74_pred;
                    _3107 = frontier_phi_74_pred_1;
                    _3105 = frontier_phi_74_pred_2;
                    _3115 = frontier_phi_74_pred_3;
                    _3113 = frontier_phi_74_pred_4;
                    _3111 = frontier_phi_74_pred_5;
                    uint _3250 = _3249 + 1u;
                    if (_3250 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3243 = _3105;
                        _3244 = _3107;
                        _3245 = _3109;
                        _3246 = _3111;
                        _3247 = _3113;
                        _3248 = _3115;
                        _3249 = _3250;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3113;
                frontier_phi_62_63_ladder_1 = _3111;
                frontier_phi_62_63_ladder_2 = _3109;
                frontier_phi_62_63_ladder_3 = _3115;
                frontier_phi_62_63_ladder_4 = _3107;
                frontier_phi_62_63_ladder_5 = _3105;
            }
            else
            {
                frontier_phi_62_63_ladder = _2968;
                frontier_phi_62_63_ladder_1 = _2966;
                frontier_phi_62_63_ladder_2 = _2964;
                frontier_phi_62_63_ladder_3 = _2970;
                frontier_phi_62_63_ladder_4 = _2962;
                frontier_phi_62_63_ladder_5 = _2960;
            }
            _3104 = frontier_phi_62_63_ladder_5;
            _3106 = frontier_phi_62_63_ladder_4;
            _3108 = frontier_phi_62_63_ladder_2;
            _3110 = frontier_phi_62_63_ladder_1;
            _3112 = frontier_phi_62_63_ladder;
            _3114 = frontier_phi_62_63_ladder_3;
        }
        float _3119 = isnan(1.0) ? _656 : (isnan(_656) ? 1.0 : min(_656, 1.0));
        _2699 = (_3119 * _3110) + _2235;
        _2701 = (_3119 * _3112) + _2237;
        _2703 = (_3119 * _3114) + _2239;
        _2705 = ((_3104 * 0.039999999105930328369140625) * _3119) + _2555;
        _2707 = ((_3106 * 0.039999999105930328369140625) * _3119) + _2557;
        _2709 = ((_3108 * 0.039999999105930328369140625) * _3119) + _2559;
    }
    else
    {
        _2699 = _2235;
        _2701 = _2237;
        _2703 = _2239;
        _2705 = _2555;
        _2707 = _2557;
        _2709 = _2559;
    }
    float _2722 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2723 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2724 = cbSceneParam._m0[86u].x * (_1683 + (_1693 * dot(vec3(_515, _516, _517), vec3(_206, _207, _208))));
    float _2725 = isnan(_2722) ? _2724 : (isnan(_2724) ? _2722 : min(_2724, _2722));
    float _2726 = isnan(_2723) ? _591 : (isnan(_591) ? _2723 : min(_591, _2723));
    vec4 _2728 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2725, _2726), 0.0);
    float _2730 = _2728.x;
    bool _2750 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2730)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2730))) > _525;
    float _2751 = _2750 ? _2725 : _590;
    float _2752 = _2750 ? _2726 : _591;
    vec4 _2754 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2751, _2752));
    vec4 _2759 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2751, _2752));
    float _2761 = _2759.x;
    bool _2766 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _2775 = (-0.0) - cbSceneParam._m0[2u].z;
    float _2781 = (_2766 ? (_2775 / (cbSceneParam._m0[2u].x - _2761)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2761))) - _525;
    bool _2788 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2795 = (isnan(_2781) ? 0.0 : (isnan(0.0) ? _2781 : max(0.0, _2781))) * (-1.44269502162933349609375);
    float _4802 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4813 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _4824 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    vec4 _2815 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2751, _2752), 0.0);
    float _2817 = _2815.x;
    float _2823 = (_2766 ? (_2775 / (cbSceneParam._m0[2u].x - _2817)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2817))) - _525;
    uint _2829 = floatBitsToUint(cbInstanceData._m0[_1989]).x * 14u;
    uint _2835 = _2829 + 4u;
    float _2844 = dot(vec3(cbLight._m0[_2829].xyz), vec3(_227, _228, _229));
    float _2852 = dot(vec3((-0.0) - _583, (-0.0) - _584, (-0.0) - _585), vec3((-0.0) - _227, (-0.0) - _228, (-0.0) - _229));
    float _2857 = ((isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0))) / (isnan(0.001000000047497451305389404296875) ? _2844 : (isnan(_2844) ? 0.001000000047497451305389404296875 : max(_2844, 0.001000000047497451305389404296875)))) + 1.0;
    float _2858 = _2857 * (isnan(_2823) ? 0.0 : (isnan(0.0) ? _2823 : max(0.0, _2823)));
    float _2907 = 0.959999978542327880859375 - (exp2(log2(1.0 - _671) * 5.0) * 0.959999978542327880859375);
    float _2908 = ((_2788 ? 0.0 : (((cbLight._m0[_2835].x * 0.0159154944121837615966796875) / ((_2857 * 0.699999988079071044921875) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2(_2858 * (-1.0098865032196044921875))))) + ((exp2(_2795 * (_2788 ? 0.0 : 0.699999988079071044921875)) * _2754.x) * cbSceneParam._m0[72u].w)) * _2907;
    float _2909 = ((_2788 ? 0.0 : (((cbLight._m0[_2835].y * 0.0159154944121837615966796875) / ((_2857 * 0.300000011920928955078125) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2(_2858 * (-0.43280851840972900390625))))) + ((exp2(_2795 * (_2788 ? 0.0 : 0.300000011920928955078125)) * _2754.y) * cbSceneParam._m0[72u].w)) * _2907;
    float _2910 = ((_2788 ? 0.0 : (((cbLight._m0[_2835].z * 0.0159154944121837615966796875) / ((_2857 * 0.2199999988079071044921875) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2(_2858 * (-0.3173929154872894287109375))))) + ((exp2(_2795 * (_2788 ? 0.0 : 0.2199999988079071044921875)) * _2754.z) * cbSceneParam._m0[72u].w)) * _2907;
    float _2931 = _590 / cbSceneParam._m0[86u].x;
    float _2932 = _591 / cbSceneParam._m0[86u].y;
    vec4 _2946 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2931, _2932, (log2((isnan(cbSceneParam._m0[77u].w) ? _525 : (isnan(_525) ? cbSceneParam._m0[77u].w : min(_525, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2948 = _2946.x;
    float _2949 = _2946.y;
    float _2950 = _2946.z;
    float _2951 = _2946.w;
    float _3021;
    float _3023;
    float _3025;
    float _3027;
    if (_525 > cbSceneParam._m0[78u].w)
    {
        float _2985 = isnan(_525) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _525 : min(cbSceneParam._m0[80u].w, _525));
        float _2986 = _2985 / _525;
        float _2997 = _2986 * _576;
        float _2998 = _577 * _2986;
        float _2999 = (-0.0) - _2998;
        float _3000 = _2986 * _578;
        float _3002 = (cbSceneParam._m0[77u].w * _2999) / _2985;
        float _3003 = _3002 + cbSceneParam._m0[79u].w;
        float _3004 = cbSceneParam._m0[79u].w - _2998;
        float _3010 = sqrt(((_2997 * _2997) + (_2998 * _2998)) + (_3000 * _3000));
        float _3013 = (1.0 - (cbSceneParam._m0[77u].w / _2985)) * _3010;
        float _3018 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3019 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3205;
        if (abs((_2999 - _3002) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3205 = ((((_3003 > 0.0) ? exp2(_3018 * _3003) : (2.0 - exp2(_3019 * _3003))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3013;
        }
        else
        {
            float _3165 = 1.0 / cbSceneParam._m0[80u].x;
            float _3166 = isnan(_3004) ? _3003 : (isnan(_3003) ? _3004 : max(_3003, _3004));
            float _3167 = isnan(_3004) ? _3003 : (isnan(_3003) ? _3004 : min(_3003, _3004));
            float _3176 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : min(_3166, 0.0));
            float _3177 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : min(_3167, 0.0));
            _3205 = ((abs(_3010 / _2999) * cbSceneParam._m0[80u].y) * ((((_3176 - _3177) * 2.0) - ((exp2(_3018 * (isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0)))) - exp2(_3018 * (isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0))))) * _3165)) - ((exp2(_3019 * _3176) - exp2(_3019 * _3177)) * _3165))) + (_3013 * cbSceneParam._m0[80u].z);
        }
        vec4 _3207 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2931, _2932, 1.0), 0.0);
        float _3216 = exp2((_3205 * (-1.44269502162933349609375)) * (1.0 - _3207.w));
        float _3217 = log2(_3216);
        float _3233 = log2(_2951);
        _3021 = (exp2(_3233 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3217 * cbSceneParam._m0[78u].x)) * _3207.x) / cbSceneParam._m0[78u].x)) + _2948;
        _3023 = (exp2(_3233 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3217 * cbSceneParam._m0[78u].y)) * _3207.y) / cbSceneParam._m0[78u].y)) + _2949;
        _3025 = (exp2(_3233 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3217 * cbSceneParam._m0[78u].z)) * _3207.z) / cbSceneParam._m0[78u].z)) + _2950;
        _3027 = _3216 * _2951;
    }
    else
    {
        _3021 = _2948;
        _3023 = _2949;
        _3025 = _2950;
        _3027 = _2951;
    }
    bool _3039 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _3041 = log2(_3027);
    float _3048 = exp2(_3041 * cbSceneParam._m0[78u].x) * ((_2908 + (((((_1660 * _1705.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _1455) * _1721)) + _2705) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2699 + ((isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))) * _656))) - _2908) * 0.5));
    float _3049 = exp2(_3041 * cbSceneParam._m0[78u].y) * ((_2909 + (((((_1660 * _1705.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _1455) * _1721)) + _2707) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2701 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _656))) - _2909) * 0.5));
    float _3050 = exp2(_3041 * cbSceneParam._m0[78u].z) * ((_2910 + (((((_1660 * _1705.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _1455) * _1721)) + _2709) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * (_2703 + ((isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))) * _656))) - _2910) * 0.5));
    vec4 _3058 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_590, _591));
    float _3060 = _3058.x;
    float _3081 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3060)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3060))) - _525) * 3.0;
    float _4890 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
    float _3083 = (isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * cbInstanceData._m0[_631 + 6u].w;
    float _3092 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3092 * (_3039 ? _3048 : (_3048 + (cbSceneParam._m0[72u].w * _3021)));
    SV_Target.y = _3092 * (_3039 ? _3049 : (_3049 + (cbSceneParam._m0[72u].w * _3023)));
    SV_Target.z = _3092 * (_3039 ? _3050 : (_3050 + (cbSceneParam._m0[72u].w * _3025)));
    SV_Target.w = _3083;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3083;
}


