#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_river_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_river_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_river_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1016;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _202 = _201 * _193;
    float _203 = _201 * _194;
    float _204 = _201 * _195;
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = _208 * NORMAL.x;
    float _210 = _208 * NORMAL.y;
    float _211 = _208 * NORMAL.z;
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223;
    float _224;
    float _225;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
    }
    else
    {
        _223 = _209;
        _224 = _210;
        _225 = _211;
    }
    float _241 = cbMtdParam._m0[10u].x * cbPerFrame._m0[22u].x;
    float _252 = (cbMtdParam._m0[12u].w * _241) + TEXCOORD;
    float _253 = (cbMtdParam._m0[13u].x * _241) + TEXCOORD_1;
    vec4 _266 = texture(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2((_252 * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (_253 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _273 = (cbPerFrame._m0[22u].x * 2.0) * (cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].x);
    float _279 = (_266.y * 0.5) + (-0.25);
    float _280 = (-0.0) - ((_266.x * 0.5) + (-0.25));
    float _281 = fract(_273);
    float _283 = fract(_273 + 0.5);
    float _295 = abs((_281 * 2.0) + (-1.0));
    vec4 _304 = texture(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_281 * _280) + _252) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_279 * _281) + _253) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _306 = _304.z;
    vec4 _332 = texture(sampler2D(M_Water_river_snp_0_Texture2D_0, SS_BumpMap), vec2((((cbMtdParam._m0[12u].y * _241) + TEXCOORD) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[12u].z * _241) + TEXCOORD_1) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _336 = _332.z;
    vec4 _353 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _355 = _353.x;
    bool _362 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _378 = ((_362 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _355)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _355))) - POSITION_1.w) * 0.833333313465118408203125;
    float _3583 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _387 = ((((texture(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2((((_283 * _280) + _252) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_279 * _283) + _253) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w)).z - _306) * _295) + _306) * (1.0 - TEXCOORD_3.y)) * (((TEXCOORD_3.x + 1.0) + (exp2(log2(((0.502016007900238037109375 - _336) * TEXCOORD_3.y) + _336) * cbMtdParam._m0[10u].z) * cbMtdParam._m0[10u].w)) - (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))));
    float _388 = _387 + cbMtdParam._m0[9u].x;
    float _389 = _387 + cbMtdParam._m0[9u].y;
    float _390 = _387 + cbMtdParam._m0[9u].z;
    vec4 _412 = texture(sampler2D(M_Water_river_snp_0_Texture2D_1, SS_BumpMap), vec2((((cbMtdParam._m0[11u].w * _241) + TEXCOORD) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[12u].x * _241) + TEXCOORD_1) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _416 = _412.x * 2.0;
    float _417 = _412.y * 2.0;
    float _418 = _416 + (-1.0);
    float _419 = _417 + (-1.0);
    float _420 = dot(vec2(_418, _419), vec2(_418, _419));
    float _3594 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _425 = sqrt(1.0 - (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))));
    vec4 _436 = texture(sampler2D(M_Water_river_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _252) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _253) + cbTextureTilingScale._m0[2u].w));
    float _443 = (_436.y * 0.5) + (-0.25);
    float _444 = (-0.0) - ((_436.x * 0.5) + (-0.25));
    vec4 _467 = texture(sampler2D(M_Water_river_snp_0_Texture2D_0, SS_BumpMap), vec2((((_281 * _444) + _252) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_443 * _281) + _253) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _469 = _467.x;
    float _470 = _467.y;
    vec4 _471 = texture(sampler2D(M_Water_river_snp_0_Texture2D_0, SS_BumpMap), vec2((((_283 * _444) + _252) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_443 * _283) + _253) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _481 = (((_471.x - _469) * _295) + _469) + _332.x;
    float _490 = (_416 + (-1.60000002384185791015625)) + ((_481 + ((1.00403201580047607421875 - _481) * TEXCOORD_3.y)) * 0.60000002384185791015625);
    float _491 = (((_471.y - _470) * _295) + _470) + _332.y;
    float _497 = (_417 + (-1.60000002384185791015625)) + ((_491 + ((1.00403201580047607421875 - _491) * TEXCOORD_3.y)) * 0.60000002384185791015625);
    float _500 = fma(_425, _223, fma(_497, _215 * TANGENT.x, _490 * _202));
    float _503 = fma(_425, _224, fma(_497, _215 * TANGENT.y, _490 * _203));
    float _506 = fma(_425, _225, fma(_497, _215 * TANGENT.z, _490 * _204));
    float _510 = inversesqrt(dot(vec3(_500, _503, _506), vec3(_500, _503, _506)));
    float _511 = _510 * _500;
    float _512 = _510 * _503;
    float _513 = _510 * _506;
    float _3605 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _3616 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _3627 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _521 = _362 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _572 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _562);
    float _573 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _562);
    float _574 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _562);
    float _578 = inversesqrt(dot(vec3(_572, _573, _574), vec3(_572, _573, _574)));
    float _579 = _572 * _578;
    float _580 = _573 * _578;
    float _581 = _574 * _578;
    float _586 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _587 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _608 = fma(_513, cbSceneParam._m0[5u].z, fma(_512, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _511));
    float _611 = fma(_513, cbSceneParam._m0[6u].z, fma(_512, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _511));
    float _614 = fma(_513, cbSceneParam._m0[7u].z, fma(_512, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _511));
    uint _627 = uint(roundEven(NORMAL.w)) * 13u;
    uint _629 = (_627 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _635 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0)))) * cbInstanceData._m0[_629].x;
    float _636 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0)))) * cbInstanceData._m0[_629].y;
    float _637 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0)))) * cbInstanceData._m0[_629].z;
    float _3638 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _638 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    float _3649 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _639 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _3660 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _640 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    vec4 _649 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _586, cbSceneParam._m0[86u].y * _587));
    float _652 = _649.x * TEXCOORD_3.w;
    float _653 = dot(vec3(_511, _512, _513), vec3(_579, _580, _581));
    float _656 = _653 * 2.0;
    float _660 = (_656 * _511) - _579;
    float _661 = (_656 * _512) - _580;
    float _662 = (_656 * _513) - _581;
    float _666 = abs(dot(vec3(_579, _580, _581), vec3(_511, _512, _513)));
    float _3671 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _667 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _680 = exp2(log2(1.0 - (_667 * 0.999000012874603271484375)) * 5.0);
    float _706 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _710 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1015;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _741 = fma(_714, cbModelParam._m0[26u].z, fma(_710, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _706));
        float _745 = fma(_714, cbModelParam._m0[27u].z, fma(_710, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _706));
        float _749 = fma(_714, cbModelParam._m0[28u].z, fma(_710, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _706));
        float _773 = _706 + _511;
        float _774 = _710 + _512;
        float _775 = _714 + _513;
        float _785 = fma(_775, cbModelParam._m0[26u].z, fma(_774, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _773)) - _741;
        float _786 = fma(_775, cbModelParam._m0[27u].z, fma(_774, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _773)) - _745;
        float _787 = fma(_775, cbModelParam._m0[28u].z, fma(_774, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _773)) - _749;
        float _791 = inversesqrt(dot(vec3(_785, _786, _787), vec3(_785, _786, _787)));
        float _804 = ((_791 * _785) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_741 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _805 = ((_791 * _786) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_745 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _806 = ((_791 * _787) / cbModelParam._m0[34u].z) + ((((((_749 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        float _843 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _844 = _843 * (_809.x + (-0.5));
        float _845 = _843 * (_809.y + (-0.5));
        float _846 = _843 * (_809.z + (-0.5));
        float _853 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_816.x + (-0.5));
        float _855 = _853 * (_816.y + (-0.5));
        float _856 = _853 * (_816.z + (-0.5));
        float _863 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_823.x + (-0.5));
        float _865 = _863 * (_823.y + (-0.5));
        float _866 = _863 * (_823.z + (-0.5));
        float _873 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_830.x + (-0.5));
        float _875 = _873 * (_830.y + (-0.5));
        float _876 = _873 * (_830.z + (-0.5));
        float _877 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _878 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = _844 * 0.5;
        float _881 = _854 * 0.5;
        float _882 = _864 * 0.5;
        float _883 = dot(vec3(_880, _881, _882), vec3(_880, _881, _882));
        float _888 = (_883 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_883);
        float _897 = (dot(vec3(_511, _512, _513), vec3(_888 * _880, _888 * _881, _888 * _882)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _907 = sqrt(((_881 * _881) + (_880 * _880)) + (_882 * _882)) / (_877 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _909 = _908 * 2.0;
        float _913 = (1.0 - _908) / (_908 + 1.0);
        float _3719 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _923 = ((((1.0 - _914) * (_909 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_909 + 1.0))) + _914) * _877;
        float _924 = _845 * 0.5;
        float _925 = _855 * 0.5;
        float _926 = _865 * 0.5;
        float _927 = dot(vec3(_924, _925, _926), vec3(_924, _925, _926));
        float _932 = (_927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_927);
        float _940 = (dot(vec3(_511, _512, _513), vec3(_932 * _924, _932 * _925, _932 * _926)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _949 = sqrt(((_925 * _925) + (_924 * _924)) + (_926 * _926)) / (_878 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _951 = _950 * 2.0;
        float _955 = (1.0 - _950) / (_950 + 1.0);
        float _3752 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _965 = ((((1.0 - _956) * (_951 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_951 + 1.0))) + _956) * _878;
        float _966 = _846 * 0.5;
        float _967 = _856 * 0.5;
        float _968 = _866 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _982 = (dot(vec3(_511, _512, _513), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _991 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3785 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_993 + 1.0))) + _998) * _879;
        _1015 = _846;
        _1017 = _845;
        _1018 = _844;
        _1019 = _856;
        _1020 = _855;
        _1021 = _854;
        _1022 = _866;
        _1023 = _865;
        _1024 = _864;
        _1025 = _879;
        _1026 = _878;
        _1027 = _877;
        _1028 = cbModelParam._m0[36u].z * (isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)));
        _1029 = cbModelParam._m0[36u].z * (isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0)));
        _1030 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
    }
    else
    {
        _1015 = _1016;
        _1017 = _1016;
        _1018 = _1016;
        _1019 = _1016;
        _1020 = _1016;
        _1021 = _1016;
        _1022 = _1016;
        _1023 = _1016;
        _1024 = _1016;
        _1025 = _1016;
        _1026 = _1016;
        _1027 = _1016;
        _1028 = 0.0;
        _1029 = 0.0;
        _1030 = 0.0;
    }
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1056 = fma(_714, cbModelParam._m0[30u].z, fma(_710, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _706));
        float _1060 = fma(_714, cbModelParam._m0[31u].z, fma(_710, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _706));
        float _1064 = fma(_714, cbModelParam._m0[32u].z, fma(_710, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _706));
        float _1087 = _706 + _511;
        float _1088 = _710 + _512;
        float _1089 = _714 + _513;
        float _1099 = fma(_1089, cbModelParam._m0[30u].z, fma(_1088, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1087)) - _1056;
        float _1100 = fma(_1089, cbModelParam._m0[31u].z, fma(_1088, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1087)) - _1060;
        float _1101 = fma(_1089, cbModelParam._m0[32u].z, fma(_1088, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1087)) - _1064;
        float _1105 = inversesqrt(dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101)));
        float _1118 = ((_1105 * _1099) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1056 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1119 = ((_1105 * _1100) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1060 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1120 = ((_1105 * _1101) / cbModelParam._m0[35u].z) + ((((((_1064 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        float _1155 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1122.x + (-0.5));
        float _1157 = _1155 * (_1122.y + (-0.5));
        float _1158 = _1155 * (_1122.z + (-0.5));
        float _1165 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1129.x + (-0.5));
        float _1167 = _1165 * (_1129.y + (-0.5));
        float _1168 = _1165 * (_1129.z + (-0.5));
        float _1175 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1136.x + (-0.5));
        float _1177 = _1175 * (_1136.y + (-0.5));
        float _1178 = _1175 * (_1136.z + (-0.5));
        float _1185 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1143.x + (-0.5));
        float _1187 = _1185 * (_1143.y + (-0.5));
        float _1188 = _1185 * (_1143.z + (-0.5));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = _1156 * 0.5;
        float _1193 = _1166 * 0.5;
        float _1194 = _1176 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_511, _512, _513), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3848 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1219 + 1.0))) + _1224) * _1189;
        float _1234 = _1157 * 0.5;
        float _1235 = _1167 * 0.5;
        float _1236 = _1177 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_511, _512, _513), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _3881 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1261 + 1.0))) + _1266) * _1190;
        float _1276 = _1158 * 0.5;
        float _1277 = _1168 * 0.5;
        float _1278 = _1178 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_511, _512, _513), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _3892 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _3903 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _3914 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_1303 + 1.0))) + _1308) * _1191;
        _1325 = _1158;
        _1326 = _1157;
        _1327 = _1156;
        _1328 = _1168;
        _1329 = _1167;
        _1330 = _1166;
        _1331 = _1178;
        _1332 = _1177;
        _1333 = _1176;
        _1334 = _1191;
        _1335 = _1190;
        _1336 = _1189;
        _1337 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1338 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1339 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
    }
    else
    {
        _1325 = _1016;
        _1326 = _1016;
        _1327 = _1016;
        _1328 = _1016;
        _1329 = _1016;
        _1330 = _1016;
        _1331 = _1016;
        _1332 = _1016;
        _1333 = _1016;
        _1334 = _1016;
        _1335 = _1016;
        _1336 = _1016;
        _1337 = 0.0;
        _1338 = 0.0;
        _1339 = 0.0;
    }
    float _1349 = (cbModelParam._m0[1u].x * (_1337 - _1028)) + _1028;
    float _1350 = (cbModelParam._m0[1u].x * (_1338 - _1029)) + _1029;
    float _1351 = (cbModelParam._m0[1u].x * (_1339 - _1030)) + _1030;
    float _1372 = fma(_1351, cbSceneParam._m0[89u].z, fma(_1350, cbSceneParam._m0[89u].y, _1349 * cbSceneParam._m0[89u].x));
    float _1375 = fma(_1351, cbSceneParam._m0[90u].z, fma(_1350, cbSceneParam._m0[90u].y, _1349 * cbSceneParam._m0[90u].x));
    float _1378 = fma(_1351, cbSceneParam._m0[91u].z, fma(_1350, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1349));
    float _1393 = _660 * 0.5;
    float _1394 = _661 * 0.5;
    float _1395 = _662 * 0.5;
    float _1396 = dot(vec4(_1393, _1394, _1395, 1.0), vec4(_1327, _1330, _1333, _1336));
    float _1399 = dot(vec4(_1393, _1394, _1395, 1.0), vec4(_1326, _1329, _1332, _1335));
    float _1402 = dot(vec4(_1393, _1394, _1395, 1.0), vec4(_1325, _1328, _1331, _1334));
    float _1436;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1409 = dot(vec4(_1393, _1394, _1395, 1.0), vec4(_1015, _1019, _1022, _1025));
        float _1413 = dot(vec4(_1393, _1394, _1395, 1.0), vec4(_1017, _1020, _1023, _1026));
        float _1417 = dot(vec4(_1393, _1394, _1395, 1.0), vec4(_1018, _1021, _1024, _1027));
        float _1424 = dot(vec4(cbModelParam._m0[39u]), vec4(_1393, _1394, _1395, 1.0));
        _1436 = dot(vec3(isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)), isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)), isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1424) ? 0.0 : (isnan(0.0) ? _1424 : max(0.0, _1424))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1436 = 1.0;
    }
    float _1447;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1438 = dot(vec4(cbModelParam._m0[40u]), vec4(_1393, _1394, _1395, 1.0));
        _1447 = dot(vec3(isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)), isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)), isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1438) ? 0.0 : (isnan(0.0) ? _1438 : max(0.0, _1438))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1447 = 1.0;
    }
    float _1451 = (_1447 * cbModelParam._m0[1u].x) + (_1436 * (1.0 - cbModelParam._m0[1u].x));
    float _1460 = isnan(0.0) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? 0.0 : min(cbModelParam._m0[25u].z, 0.0));
    float _1541;
    float _1543;
    float _1545;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1508 = fma(_714, cbModelParam._m0[13u].z, fma(_710, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _706)) + cbModelParam._m0[13u].w;
        float _1512 = fma(_714, cbModelParam._m0[14u].z, fma(_710, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _706)) + cbModelParam._m0[14u].w;
        float _1516 = fma(_714, cbModelParam._m0[15u].z, fma(_710, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _706)) + cbModelParam._m0[15u].w;
        float _1519 = fma(_662, cbModelParam._m0[13u].z, fma(_661, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _660));
        float _1522 = fma(_662, cbModelParam._m0[14u].z, fma(_661, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _660));
        float _1525 = fma(_662, cbModelParam._m0[15u].z, fma(_661, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _660));
        float _1551;
        if (_1519 > 0.0)
        {
            _1551 = abs((1.0 - _1508) / _1519);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1508 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1551 = frontier_phi_16_14_ladder;
        }
        float _1804;
        if (_1522 > 0.0)
        {
            _1804 = abs((1.0 - _1512) / _1522);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1512 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1804 = frontier_phi_25_21_ladder;
        }
        float _2045;
        if (_1525 > 0.0)
        {
            _2045 = abs((1.0 - _1516) / _1525);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1516 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2045 = frontier_phi_37_32_ladder;
        }
        float _2047 = isnan(_1804) ? _1551 : (isnan(_1551) ? _1804 : min(_1551, _1804));
        float _2048 = isnan(_2045) ? _2047 : (isnan(_2047) ? _2045 : min(_2047, _2045));
        float _2052 = (_2048 * _1519) + _1508;
        float _2053 = (_2048 * _1522) + _1512;
        float _2054 = (_2048 * _1525) + _1516;
        float _2055 = _2048 * 9.9999997473787516355514526367188e-05;
        float _2057 = (-1.0) - _2055;
        float _2059 = _2055 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2054 > _2059) || ((_2054 < _2057) || ((_2053 > _2059) || ((_2053 < _2057) || ((_2052 < _2057) || (_2052 > _2059))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2177 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2054, cbModelParam._m0[9u].z, fma(_2053, cbModelParam._m0[9u].y, _2052 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2054, cbModelParam._m0[10u].z, fma(_2053, cbModelParam._m0[10u].y, _2052 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2054, cbModelParam._m0[11u].z, fma(_2053, cbModelParam._m0[11u].y, _2052 * cbModelParam._m0[11u].x))), _1460);
            frontier_phi_15_37_ladder = _2177.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2177.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2177.x * cbModelParam._m0[1u].y;
        }
        _1541 = frontier_phi_15_37_ladder_2;
        _1543 = frontier_phi_15_37_ladder_1;
        _1545 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1529 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_660, _661, _662), _1460);
        _1541 = _1529.x * cbModelParam._m0[1u].y;
        _1543 = _1529.y * cbModelParam._m0[1u].y;
        _1545 = _1529.z * cbModelParam._m0[1u].y;
    }
    float _1548 = isnan(0.0) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? 0.0 : min(cbModelParam._m0[25u].w, 0.0));
    float _1640;
    float _1642;
    float _1644;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1604 = fma(_714, cbModelParam._m0[21u].z, fma(_710, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _706)) + cbModelParam._m0[21u].w;
        float _1608 = fma(_714, cbModelParam._m0[22u].z, fma(_710, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _706)) + cbModelParam._m0[22u].w;
        float _1612 = fma(_714, cbModelParam._m0[23u].z, fma(_710, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _706)) + cbModelParam._m0[23u].w;
        float _1615 = fma(_662, cbModelParam._m0[21u].z, fma(_661, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _660));
        float _1618 = fma(_662, cbModelParam._m0[22u].z, fma(_661, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _660));
        float _1621 = fma(_662, cbModelParam._m0[23u].z, fma(_661, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _660));
        float _1809;
        if (_1615 > 0.0)
        {
            _1809 = abs((1.0 - _1604) / _1615);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1604 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1809 = frontier_phi_27_23_ladder;
        }
        float _2072;
        if (_1618 > 0.0)
        {
            _2072 = abs((1.0 - _1608) / _1618);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1608 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2072 = frontier_phi_39_34_ladder;
        }
        float _2275;
        if (_1621 > 0.0)
        {
            _2275 = abs((1.0 - _1612) / _1621);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1612 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2275 = frontier_phi_48_45_ladder;
        }
        float _2277 = isnan(_2072) ? _1809 : (isnan(_1809) ? _2072 : min(_1809, _2072));
        float _2278 = isnan(_2275) ? _2277 : (isnan(_2277) ? _2275 : min(_2277, _2275));
        float _2282 = (_2278 * _1615) + _1604;
        float _2283 = (_2278 * _1618) + _1608;
        float _2284 = (_2278 * _1621) + _1612;
        float _2285 = _2278 * 9.9999997473787516355514526367188e-05;
        float _2286 = (-1.0) - _2285;
        float _2288 = _2285 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2284 > _2288) || ((_2284 < _2286) || ((_2283 > _2288) || ((_2283 < _2286) || ((_2282 < _2286) || (_2282 > _2288))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2676 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2284, cbModelParam._m0[17u].z, fma(_2283, cbModelParam._m0[17u].y, _2282 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2284, cbModelParam._m0[18u].z, fma(_2283, cbModelParam._m0[18u].y, _2282 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2284, cbModelParam._m0[19u].z, fma(_2283, cbModelParam._m0[19u].y, _2282 * cbModelParam._m0[19u].x))), _1548);
            frontier_phi_24_48_ladder = _2676.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2676.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2676.x * cbModelParam._m0[1u].z;
        }
        _1640 = frontier_phi_24_48_ladder_2;
        _1642 = frontier_phi_24_48_ladder_1;
        _1644 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1624 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_660, _661, _662), _1548);
        _1640 = _1624.x * cbModelParam._m0[1u].z;
        _1642 = _1624.y * cbModelParam._m0[1u].z;
        _1644 = _1624.z * cbModelParam._m0[1u].z;
    }
    float _1656 = (((1.0 - _680) * 0.039999999105930328369140625) + _680) * _652;
    float _1657 = _1656 * ((cbModelParam._m0[1u].w * (_1640 - _1541)) + _1541);
    float _1658 = _1656 * ((cbModelParam._m0[1u].w * (_1642 - _1543)) + _1543);
    float _1659 = _1656 * ((cbModelParam._m0[1u].w * (_1644 - _1545)) + _1545);
    float _1662 = fma(_1659, cbSceneParam._m0[89u].z, fma(_1658, cbSceneParam._m0[89u].y, _1657 * cbSceneParam._m0[89u].x));
    float _1665 = fma(_1659, cbSceneParam._m0[90u].z, fma(_1658, cbSceneParam._m0[90u].y, _1657 * cbSceneParam._m0[90u].x));
    float _1668 = fma(_1659, cbSceneParam._m0[91u].z, fma(_1658, cbSceneParam._m0[91u].y, _1657 * cbSceneParam._m0[91u].x));
    float _1679 = _586 / cbSceneParam._m0[86u].x;
    float _4040 = isnan(0.0) ? cbSceneParam._m0[88u].z : (isnan(cbSceneParam._m0[88u].z) ? 0.0 : max(cbSceneParam._m0[88u].z, 0.0));
    float _1685 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * 5.0;
    float _1689 = 0.99999988079071044921875 / (_521 + 10.0);
    float _1691 = _1689 * dot(vec3(_511, _512, _513), vec3(1.0, 0.0, 0.0));
    vec4 _1701 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1691 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1691 + _1679) * cbSceneParam._m0[86u].x, _587), _1685).w) + _1679) * cbSceneParam._m0[86u].x, _587), _1685);
    float _1717 = 1.0 - _1701.w;
    uint _1724 = _627 + 5u;
    uvec4 _1727 = floatBitsToUint(cbInstanceData._m0[_1724]);
    uint _1729 = _1727.x * 14u;
    uint _1730 = _1729 + 13u;
    float _1737 = _652 + (-1.0);
    float _1742 = (cbLight._m0[_1730].x * _1737) + 1.0;
    float _1743 = (cbLight._m0[_1730].y * _1737) + 1.0;
    float _1744 = (cbLight._m0[_1730].z * _1737) + 1.0;
    float _1745 = (cbLight._m0[_1730].w * _1737) + 1.0;
    uint _1746 = _1729 + 5u;
    float _1752 = isnan(1.0) ? _1743 : (isnan(_1743) ? 1.0 : min(_1743, 1.0));
    uint _1756 = _1729 + 4u;
    float _1763 = isnan(1.0) ? _1742 : (isnan(_1742) ? 1.0 : min(_1742, 1.0));
    uint _1767 = _1729 | 1u;
    float _1778 = dot(vec3(cbLight._m0[_1729].xyz), vec3(_511, _512, _513));
    float _1781 = dot(vec3(cbLight._m0[_1767].xyz), vec3(_511, _512, _513));
    float _4061 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
    float _4072 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1786 = (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * 0.3183098733425140380859375;
    float _1788 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * 0.3183098733425140380859375;
    float _1795 = ((cbLight._m0[_1746].x * _1752) * _1788) + ((cbLight._m0[_1756].x * _1763) * _1786);
    float _1796 = ((_1752 * cbLight._m0[_1746].y) * _1788) + ((_1763 * cbLight._m0[_1756].y) * _1786);
    float _1797 = ((_1752 * cbLight._m0[_1746].z) * _1788) + ((_1763 * cbLight._m0[_1756].z) * _1786);
    uvec4 _1801 = floatBitsToUint(cbLight._m0[_1729 + 12u]);
    bool _1803 = _1801.x == 0u;
    float _1814;
    float _1816;
    float _1818;
    if (_1803)
    {
        _1814 = _1795;
        _1816 = _1796;
        _1818 = _1797;
    }
    else
    {
        uint _1822 = _1729 + 6u;
        float _1838 = (dot(vec3(cbLight._m0[_1729 + 2u].xyz), vec3(_511, _512, _513)) * 0.5) + 0.5;
        float _1839 = _1838 * _1838;
        float _4083 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
        float _1840 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1841 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
        _1814 = (((cbLight._m0[_1822].x * 0.3183098733425140380859375) * _1840) * _1841) + _1795;
        _1816 = (((cbLight._m0[_1822].y * 0.3183098733425140380859375) * _1840) * _1841) + _1796;
        _1818 = (((cbLight._m0[_1822].z * 0.3183098733425140380859375) * _1840) * _1841) + _1797;
    }
    bool _1821 = _1801.y == 0u;
    float _1859;
    float _1861;
    float _1863;
    if (_1821)
    {
        _1859 = _1814;
        _1861 = _1816;
        _1863 = _1818;
    }
    else
    {
        uint _2016 = _1729 + 7u;
        float _2032 = (dot(vec3(cbLight._m0[_1729 + 3u].xyz), vec3(_511, _512, _513)) * 0.5) + 0.5;
        float _2033 = _2032 * _2032;
        float _4099 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2034 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _2035 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
        _1859 = (((cbLight._m0[_2016].x * 0.3183098733425140380859375) * _2034) * _2035) + _1814;
        _1861 = (((cbLight._m0[_2016].y * 0.3183098733425140380859375) * _2034) * _2035) + _1816;
        _1863 = (((cbLight._m0[_2016].z * 0.3183098733425140380859375) * _2034) * _2035) + _1818;
    }
    uint _1866 = _1729 + 8u;
    float _1878 = 1.0 - (sqrt(1.0 - (0.07500000298023223876953125 / cbLight._m0[_1729].w)) * 0.949999988079071044921875);
    float _1879 = _1878 * _1878;
    float _1880 = cbLight._m0[_1729].x + _579;
    float _1881 = cbLight._m0[_1729].y + _580;
    float _1882 = cbLight._m0[_1729].z + _581;
    float _1886 = inversesqrt(dot(vec3(_1880, _1881, _1882), vec3(_1880, _1881, _1882)));
    float _1887 = _1886 * _1880;
    float _1888 = _1886 * _1881;
    float _1889 = _1886 * _1882;
    float _1890 = dot(vec3(_511, _512, _513), vec3(cbLight._m0[_1729].xyz));
    float _4115 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1893 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _4126 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _1894 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _1895 = dot(vec3(_511, _512, _513), vec3(_1887, _1888, _1889));
    float _4137 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1898 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _1899 = dot(vec3(cbLight._m0[_1729].xyz), vec3(_1887, _1888, _1889));
    float _4148 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1903 = _1879 * _1879;
    float _1907 = ((_1898 * _1898) * (_1903 + (-1.0))) + 1.0;
    float _1918 = (exp2(log2(1.0 - (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1919 = 1.0 - _1879;
    float _1930 = (0.5 / (((_1894 * ((_1893 * _1919) + _1879)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _1919) + _1879) * _1893))) * _1893;
    float _4159 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1932 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1903 / ((_1907 * _1907) * 3.141590118408203125));
    uint _1943 = _1729 + 9u;
    float _1953 = 1.0 - (sqrt(1.0 - (0.07500000298023223876953125 / cbLight._m0[_1767].w)) * 0.949999988079071044921875);
    float _1954 = _1953 * _1953;
    float _1955 = cbLight._m0[_1767].x + _579;
    float _1956 = cbLight._m0[_1767].y + _580;
    float _1957 = cbLight._m0[_1767].z + _581;
    float _1961 = inversesqrt(dot(vec3(_1955, _1956, _1957), vec3(_1955, _1956, _1957)));
    float _1962 = _1961 * _1955;
    float _1963 = _1961 * _1956;
    float _1964 = _1961 * _1957;
    float _1965 = dot(vec3(_511, _512, _513), vec3(cbLight._m0[_1767].xyz));
    float _4170 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1968 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _1969 = dot(vec3(_511, _512, _513), vec3(_1962, _1963, _1964));
    float _4181 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1972 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _1973 = dot(vec3(cbLight._m0[_1767].xyz), vec3(_1962, _1963, _1964));
    float _4192 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1977 = _1954 * _1954;
    float _1981 = ((_1972 * _1972) * (_1977 + (-1.0))) + 1.0;
    float _1990 = (exp2(log2(1.0 - (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1991 = 1.0 - _1954;
    float _2001 = (0.5 / (((_1894 * ((_1968 * _1991) + _1954)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _1991) + _1954) * _1968))) * _1968;
    float _4203 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2003 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1977 / ((_1981 * _1981) * 3.141590118408203125));
    float _2013 = (((_1990 * cbLight._m0[_1943].x) * _2003) * _1752) + (((_1918 * cbLight._m0[_1866].x) * _1932) * _1763);
    float _2014 = (((_1990 * cbLight._m0[_1943].y) * _2003) * _1752) + (((_1918 * cbLight._m0[_1866].y) * _1932) * _1763);
    float _2015 = (((_1990 * cbLight._m0[_1943].z) * _2003) * _1752) + (((_1918 * cbLight._m0[_1866].z) * _1932) * _1763);
    float _2077;
    float _2079;
    float _2081;
    if (_1803)
    {
        _2077 = _2013;
        _2079 = _2014;
        _2081 = _2015;
    }
    else
    {
        uint _2083 = _1729 + 2u;
        uint _2087 = _1729 + 10u;
        float _2100 = 1.0 - (sqrt(1.0 - (0.07500000298023223876953125 / cbLight._m0[_2083].w)) * 0.949999988079071044921875);
        float _2101 = _2100 * _2100;
        float _2102 = cbLight._m0[_2083].x + _579;
        float _2103 = cbLight._m0[_2083].y + _580;
        float _2104 = cbLight._m0[_2083].z + _581;
        float _2108 = inversesqrt(dot(vec3(_2102, _2103, _2104), vec3(_2102, _2103, _2104)));
        float _2109 = _2108 * _2102;
        float _2110 = _2108 * _2103;
        float _2111 = _2108 * _2104;
        float _2112 = dot(vec3(_511, _512, _513), vec3(cbLight._m0[_2083].xyz));
        float _4214 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2115 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2116 = dot(vec3(_511, _512, _513), vec3(_2109, _2110, _2111));
        float _4225 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2119 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2120 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_2109, _2110, _2111));
        float _4236 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2124 = _2101 * _2101;
        float _2128 = ((_2119 * _2119) * (_2124 + (-1.0))) + 1.0;
        float _2137 = (exp2(log2(1.0 - (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2138 = 1.0 - _2101;
        float _2148 = (0.5 / (((_1894 * ((_2115 * _2138) + _2101)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _2138) + _2101) * _2115))) * _2115;
        float _4247 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2150 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_2124 / ((_2128 * _2128) * 3.141590118408203125));
        float _2151 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
        _2077 = (((_2137 * cbLight._m0[_2087].x) * _2150) * _2151) + _2013;
        _2079 = (((_2137 * cbLight._m0[_2087].y) * _2150) * _2151) + _2014;
        _2081 = (((_2137 * cbLight._m0[_2087].z) * _2150) * _2151) + _2015;
    }
    float _2186;
    float _2188;
    float _2190;
    if (_1821)
    {
        _2186 = _2077;
        _2188 = _2079;
        _2190 = _2081;
    }
    else
    {
        uint _2197 = _1729 + 3u;
        uint _2201 = _1729 + 11u;
        float _2214 = 1.0 - (sqrt(1.0 - (0.07500000298023223876953125 / cbLight._m0[_2197].w)) * 0.949999988079071044921875);
        float _2215 = _2214 * _2214;
        float _2216 = cbLight._m0[_2197].x + _579;
        float _2217 = cbLight._m0[_2197].y + _580;
        float _2218 = cbLight._m0[_2197].z + _581;
        float _2222 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
        float _2223 = _2222 * _2216;
        float _2224 = _2222 * _2217;
        float _2225 = _2222 * _2218;
        float _2226 = dot(vec3(_511, _512, _513), vec3(cbLight._m0[_2197].xyz));
        float _4263 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2229 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2230 = dot(vec3(_511, _512, _513), vec3(_2223, _2224, _2225));
        float _4274 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2233 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2234 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_2223, _2224, _2225));
        float _4285 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2238 = _2215 * _2215;
        float _2242 = ((_2233 * _2233) * (_2238 + (-1.0))) + 1.0;
        float _2251 = (exp2(log2(1.0 - (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2252 = 1.0 - _2215;
        float _2262 = (0.5 / (((_1894 * ((_2229 * _2252) + _2215)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _2252) + _2215) * _2229))) * _2229;
        float _4296 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2264 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2238 / ((_2242 * _2242) * 3.141590118408203125));
        float _2265 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
        _2186 = (((_2251 * cbLight._m0[_2201].x) * _2264) * _2265) + _2077;
        _2188 = (((_2251 * cbLight._m0[_2201].y) * _2264) * _2265) + _2079;
        _2190 = (((_2251 * cbLight._m0[_2201].z) * _2264) * _2265) + _2081;
    }
    float _2399;
    float _2401;
    float _2403;
    float _2405;
    float _2407;
    float _2409;
    if (_1727.y == 0u)
    {
        float _2340 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2341 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2340;
        float _2342 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2340;
        float _2343 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2340;
        uvec4 _2355 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2356 = _2355.x;
        uint _2367 = uint((float(_2355.y) * floor(float(uint(cbSceneParam._m0[85u].y * _587) / _2356))) + floor(float(uint(cbSceneParam._m0[85u].x * _586) / _2356)));
        float _2377 = (log2(_2343 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2378 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        uint _2381 = uint(isnan(14.0) ? _2378 : (isnan(_2378) ? 14.0 : min(_2378, 14.0)));
        uvec4 _2386 = texelFetch(g_lightClusterGridBuffer, int(((_2381 << 2u) + (_2367 << 6u)) >> 2u));
        uint _2387 = _2386.x;
        uint _2388 = _2355.z;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        if (((((1u << ((_2388 >> 4u) & 15u)) + 4294967295u) & _2387) == 0u) || ((_2388 & 240u) == 0u))
        {
            _2681 = 0.0;
            _2683 = 0.0;
            _2685 = 0.0;
            _2687 = 0.0;
            _2689 = 0.0;
            _2691 = 0.0;
        }
        else
        {
            float _2682;
            float _2684;
            float _2686;
            float _2688;
            float _2690;
            float _2692;
            float _2857 = 0.0;
            float _2858 = 0.0;
            float _2859 = 0.0;
            float _2860 = 0.0;
            float _2861 = 0.0;
            float _2862 = 0.0;
            uint _2863 = 0u;
            uint _2872;
            bool _2873;
            for (;;)
            {
                _2872 = texelFetch(g_lightClassification, int((((_2381 << 5u) + (_2367 << 9u)) + (_2863 << 2u)) >> 2u)).x;
                _2873 = _2872 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2873)
                {
                    frontier_phi_63_pred = _2862;
                    frontier_phi_63_pred_1 = _2861;
                    frontier_phi_63_pred_2 = _2860;
                    frontier_phi_63_pred_3 = _2859;
                    frontier_phi_63_pred_4 = _2858;
                    frontier_phi_63_pred_5 = _2857;
                }
                else
                {
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    uint _2987;
                    _2981 = _2857;
                    _2982 = _2858;
                    _2983 = _2859;
                    _2984 = _2860;
                    _2985 = _2861;
                    _2986 = _2862;
                    _2987 = _2872;
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    for (;;)
                    {
                        uint _2991 = uint(findLSB(_2987)) + (_2863 << 5u);
                        uint _2988 = (_2987 + 4294967295u) & _2987;
                        uint _2993 = _2991 * 48u;
                        vec4 _3007 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2993)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 3u)).x));
                        uint _3013 = (_2991 * 48u) + 4u;
                        vec4 _3026 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3013)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 3u)).x));
                        uint _3032 = (_2991 * 48u) + 8u;
                        vec3 _3043 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3032)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 2u)).x));
                        float _3047 = _3007.x - _2341;
                        float _3048 = _3007.y - _2342;
                        float _3049 = _3007.z - _2343;
                        float _3050 = dot(vec3(_3047, _3048, _3049), vec3(_3047, _3048, _3049));
                        float _3053 = inversesqrt(_3050);
                        float _3054 = _3053 * _3047;
                        float _3055 = _3053 * _3048;
                        float _3056 = _3053 * _3049;
                        float _3057 = dot(vec3(_608, _611, _614), vec3(_3054, _3055, _3056));
                        float _3062 = 1.0 - (_3050 * _3007.w);
                        float _4322 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3063 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                        float _3064 = sqrt(_3050) * _3026.w;
                        float _3067 = 1.39999997615814208984375 / (_3064 + 1.39999997615814208984375);
                        float _3068 = _3067 * _3067;
                        float _3071 = ((1.0 - _3068) * _3057) + _3068;
                        float _3074 = _3064 * _3064;
                        float _3077 = ((isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0))) * _3063) / ((_3074 * 0.699999988079071044921875) + 1.0);
                        float _3081 = (-0.0) - _2341;
                        float _3082 = (-0.0) - _2342;
                        float _3083 = (-0.0) - _2343;
                        float _3087 = inversesqrt(dot(vec3(_3081, _3082, _3083), vec3(_3081, _3082, _3083)));
                        float _3088 = _3087 * _3081;
                        float _3089 = _3087 * _3082;
                        float _3090 = _3087 * _3083;
                        float _3098 = exp2(log2(1.0 / ((_3074 * 3.5) + 5.0)) * 0.25);
                        float _3100 = sqrt(_3098 * _3098);
                        float _3101 = _3100 * _3100;
                        float _3102 = _3101 * _3101;
                        float _3103 = _3088 + _3054;
                        float _3104 = _3089 + _3055;
                        float _3105 = _3090 + _3056;
                        float _3109 = inversesqrt(dot(vec3(_3103, _3104, _3105), vec3(_3103, _3104, _3105)));
                        float _3113 = dot(vec3(_608, _611, _614), vec3(_3088, _3089, _3090));
                        float _4338 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3116 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                        float _3117 = dot(vec3(_608, _611, _614), vec3(_3109 * _3103, _3109 * _3104, _3109 * _3105));
                        float _4349 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3120 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                        float _3124 = ((_3120 * _3120) * (_3102 + (-1.0))) + 1.0;
                        float _3125 = _3067 * _3101;
                        float _3126 = _3125 * _3125;
                        float _3129 = ((1.0 - _3126) * _3057) + _3126;
                        float _4360 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3130 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                        float _3131 = 1.0 - _3101;
                        float _3141 = (0.5 / (((_3130 * ((_3116 * _3131) + _3101)) + 9.9999999392252902907785028219223e-09) + (((_3130 * _3131) + _3101) * _3116))) * _3130;
                        float _4371 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                        float _3152 = (((_3102 * 3.1415927410125732421875) * (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) / ((_3124 * _3124) * ((_3074 * 2.1991131305694580078125) + 3.141590118408203125))) * _3063;
                        _2916 = (_3077 * _3026.x) + _2984;
                        _2917 = (_3077 * _3026.y) + _2985;
                        _2918 = (_3077 * _3026.z) + _2986;
                        _2913 = (_3152 * _3043.x) + _2981;
                        _2914 = (_3152 * _3043.y) + _2982;
                        _2915 = (_3152 * _3043.z) + _2983;
                        if (_2988 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2981 = _2913;
                            _2982 = _2914;
                            _2983 = _2915;
                            _2984 = _2916;
                            _2985 = _2917;
                            _2986 = _2918;
                            _2987 = _2988;
                        }
                    }
                    frontier_phi_63_pred = _2918;
                    frontier_phi_63_pred_1 = _2917;
                    frontier_phi_63_pred_2 = _2916;
                    frontier_phi_63_pred_3 = _2915;
                    frontier_phi_63_pred_4 = _2914;
                    frontier_phi_63_pred_5 = _2913;
                }
                _2692 = frontier_phi_63_pred;
                _2690 = frontier_phi_63_pred_1;
                _2688 = frontier_phi_63_pred_2;
                _2686 = frontier_phi_63_pred_3;
                _2684 = frontier_phi_63_pred_4;
                _2682 = frontier_phi_63_pred_5;
                uint _2864 = _2863 + 1u;
                if (_2864 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2857 = _2682;
                    _2858 = _2684;
                    _2859 = _2686;
                    _2860 = _2688;
                    _2861 = _2690;
                    _2862 = _2692;
                    _2863 = _2864;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2681 = _2682;
            _2683 = _2684;
            _2685 = _2686;
            _2687 = _2688;
            _2689 = _2690;
            _2691 = _2692;
        }
        uvec4 _2695 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2696 = _2695.z;
        uint _2698 = (_2696 >> 8u) & 15u;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        if (((4294967295u << _2698) & _2387) == 0u)
        {
            _2825 = _2681;
            _2827 = _2683;
            _2829 = _2685;
            _2831 = _2687;
            _2833 = _2689;
            _2835 = _2691;
        }
        else
        {
            float _2850 = inversesqrt(dot(vec3(_2341, _2342, _2343), vec3(_2341, _2342, _2343)));
            float _2851 = _2850 * _2341;
            float _2852 = _2850 * _2342;
            float _2853 = _2850 * _2343;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2698 < ((_2696 >> 12u) & 15u))
            {
                float _2826;
                float _2828;
                float _2830;
                float _2832;
                float _2834;
                float _2836;
                float _2964 = _2681;
                float _2965 = _2683;
                float _2966 = _2685;
                float _2967 = _2687;
                float _2968 = _2689;
                float _2969 = _2691;
                uint _2970 = _2698;
                uint _2979;
                bool _2980;
                for (;;)
                {
                    _2979 = texelFetch(g_lightClassification, int((((_2381 << 5u) + (_2367 << 9u)) + (_2970 << 2u)) >> 2u)).x;
                    _2980 = _2979 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2980)
                    {
                        frontier_phi_69_pred = _2969;
                        frontier_phi_69_pred_1 = _2968;
                        frontier_phi_69_pred_2 = _2967;
                        frontier_phi_69_pred_3 = _2966;
                        frontier_phi_69_pred_4 = _2965;
                        frontier_phi_69_pred_5 = _2964;
                    }
                    else
                    {
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3170 = _2964;
                        float _3171 = _2965;
                        float _3172 = _2966;
                        float _3173 = _2967;
                        float _3174 = _2968;
                        float _3175 = _2969;
                        uint _3176 = _2979;
                        uint _3177;
                        vec4 _3202;
                        float _3203;
                        vec4 _3218;
                        vec3 _3230;
                        vec4 _3246;
                        vec4 _3262;
                        float _3309;
                        bool _3310;
                        for (;;)
                        {
                            uint _3187 = ((_2970 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3176));
                            _3177 = (_3176 + 4294967295u) & _3176;
                            uint _3189 = _3187 * 40u;
                            _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            _3203 = _3202.w;
                            uint _3205 = (_3187 * 40u) + 4u;
                            _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            uint _3220 = (_3187 * 40u) + 8u;
                            _3230 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x));
                            uint _3233 = (_3187 * 40u) + 16u;
                            _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            uint _3249 = (_3187 * 40u) + 20u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            uint _3265 = (_3187 * 40u) + 24u;
                            vec4 _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3284 = (_3187 * 40u) + 28u;
                            vec4 _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            _3309 = fma(_2343, _3297.z, fma(_2342, _3297.y, _3297.x * _2341)) + _3297.w;
                            _3310 = !((fma(_2343, _3278.z, fma(_2342, _3278.y, _3278.x * _2341)) + _3278.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3310)
                            {
                                float _3337 = _3202.x - _2341;
                                float _3338 = _3202.y - _2342;
                                float _3339 = _3202.z - _2343;
                                float _3340 = dot(vec3(_3337, _3338, _3339), vec3(_3337, _3338, _3339));
                                float _3343 = inversesqrt(_3340);
                                float _3344 = _3343 * _3337;
                                float _3345 = _3343 * _3338;
                                float _3346 = _3343 * _3339;
                                float _3350 = 1.0 - (_3340 / (_3203 * _3203));
                                float _4382 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3351 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                                float _3355 = sqrt(_3340) * _3218.w;
                                float _3357 = 1.39999997615814208984375 / (_3355 + 1.39999997615814208984375);
                                float _3358 = _3357 * _3357;
                                float _3361 = ((1.0 - _3358) * dot(vec3(_3344, _3345, _3346), vec3(_608, _611, _614))) + _3358;
                                float _3364 = _3355 * _3355;
                                float _3368 = (fma(_2343, _3246.z, fma(_2342, _3246.y, _3246.x * _2341)) + _3246.w) / _3309;
                                float _3369 = (fma(_2343, _3262.z, fma(_2342, _3262.y, _3262.x * _2341)) + _3262.w) / _3309;
                                float _3373 = 1.0 - dot(vec2(_3368, _3369), vec2(_3368, _3369));
                                float _4398 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3374 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                                float _3375 = _3374 * (((isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0))) * _3351) / ((_3364 * 0.699999988079071044921875) + 1.0));
                                float _3387 = exp2(log2(1.0 / ((_3364 * 3.5) + 5.0)) * 0.25);
                                float _3389 = sqrt(_3387 * _3387);
                                float _3390 = _3389 * _3389;
                                float _3391 = _3390 * _3390;
                                float _3392 = _3344 - _2851;
                                float _3393 = _3345 - _2852;
                                float _3394 = _3346 - _2853;
                                float _3398 = inversesqrt(dot(vec3(_3392, _3393, _3394), vec3(_3392, _3393, _3394)));
                                float _3402 = dot(vec3(_608, _611, _614), vec3((-0.0) - _2851, (-0.0) - _2852, (-0.0) - _2853));
                                float _4409 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3405 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                                float _3406 = dot(vec3(_608, _611, _614), vec3(_3398 * _3392, _3398 * _3393, _3398 * _3394));
                                float _4420 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3409 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                                float _3413 = ((_3409 * _3409) * (_3391 + (-1.0))) + 1.0;
                                float _3414 = _3357 * _3390;
                                float _3415 = _3414 * _3414;
                                float _3421 = ((1.0 - _3415) * dot(vec3(_608, _611, _614), vec3(_3344, _3345, _3346))) + _3415;
                                float _4431 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3422 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                                float _3423 = 1.0 - _3390;
                                float _3433 = (0.5 / (((_3422 * ((_3405 * _3423) + _3390)) + 9.9999999392252902907785028219223e-09) + (((_3422 * _3423) + _3390) * _3405))) * _3422;
                                float _4442 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                                float _3443 = (_3374 * _3351) * (((_3391 * 3.1415927410125732421875) * (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) / ((_3413 * _3413) * ((_3364 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3375 * _3218.z;
                                frontier_phi_75_pred_1 = _3375 * _3218.y;
                                frontier_phi_75_pred_2 = _3375 * _3218.x;
                                frontier_phi_75_pred_3 = _3443 * _3230.z;
                                frontier_phi_75_pred_4 = _3443 * _3230.y;
                                frontier_phi_75_pred_5 = _3443 * _3230.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3452 = frontier_phi_75_pred;
                            _3451 = frontier_phi_75_pred_1;
                            _3450 = frontier_phi_75_pred_2;
                            _3449 = frontier_phi_75_pred_3;
                            _3448 = frontier_phi_75_pred_4;
                            _3447 = frontier_phi_75_pred_5;
                            _3160 = _3450 + _3173;
                            _3161 = _3451 + _3174;
                            _3162 = _3452 + _3175;
                            _3157 = _3447 + _3170;
                            _3158 = _3448 + _3171;
                            _3159 = _3449 + _3172;
                            if (_3177 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3177;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3162;
                        frontier_phi_69_pred_1 = _3161;
                        frontier_phi_69_pred_2 = _3160;
                        frontier_phi_69_pred_3 = _3159;
                        frontier_phi_69_pred_4 = _3158;
                        frontier_phi_69_pred_5 = _3157;
                    }
                    _2836 = frontier_phi_69_pred;
                    _2834 = frontier_phi_69_pred_1;
                    _2832 = frontier_phi_69_pred_2;
                    _2830 = frontier_phi_69_pred_3;
                    _2828 = frontier_phi_69_pred_4;
                    _2826 = frontier_phi_69_pred_5;
                    uint _2971 = _2970 + 1u;
                    if (_2971 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2964 = _2826;
                        _2965 = _2828;
                        _2966 = _2830;
                        _2967 = _2832;
                        _2968 = _2834;
                        _2969 = _2836;
                        _2970 = _2971;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2836;
                frontier_phi_57_58_ladder_1 = _2834;
                frontier_phi_57_58_ladder_2 = _2832;
                frontier_phi_57_58_ladder_3 = _2830;
                frontier_phi_57_58_ladder_4 = _2828;
                frontier_phi_57_58_ladder_5 = _2826;
            }
            else
            {
                frontier_phi_57_58_ladder = _2691;
                frontier_phi_57_58_ladder_1 = _2689;
                frontier_phi_57_58_ladder_2 = _2687;
                frontier_phi_57_58_ladder_3 = _2685;
                frontier_phi_57_58_ladder_4 = _2683;
                frontier_phi_57_58_ladder_5 = _2681;
            }
            _2825 = frontier_phi_57_58_ladder_5;
            _2827 = frontier_phi_57_58_ladder_4;
            _2829 = frontier_phi_57_58_ladder_3;
            _2831 = frontier_phi_57_58_ladder_2;
            _2833 = frontier_phi_57_58_ladder_1;
            _2835 = frontier_phi_57_58_ladder;
        }
        float _2840 = isnan(1.0) ? _652 : (isnan(_652) ? 1.0 : min(_652, 1.0));
        _2399 = (_2840 * _2831) + _1859;
        _2401 = (_2840 * _2833) + _1861;
        _2403 = (_2840 * _2835) + _1863;
        _2405 = ((_2825 * 0.039999999105930328369140625) * _2840) + _2186;
        _2407 = ((_2827 * 0.039999999105930328369140625) * _2840) + _2188;
        _2409 = ((_2829 * 0.039999999105930328369140625) * _2840) + _2190;
    }
    else
    {
        _2399 = _1859;
        _2401 = _1861;
        _2403 = _1863;
        _2405 = _2186;
        _2407 = _2188;
        _2409 = _2190;
    }
    float _2422 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2423 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2424 = cbSceneParam._m0[86u].x * (_1679 + (_1689 * dot(vec3(_511, _512, _513), vec3(_202, _203, _204))));
    float _2425 = isnan(_2422) ? _2424 : (isnan(_2424) ? _2422 : min(_2424, _2422));
    float _2426 = isnan(_2423) ? _587 : (isnan(_587) ? _2423 : min(_587, _2423));
    vec4 _2428 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2425, _2426), 0.0);
    float _2430 = _2428.x;
    bool _2450 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2430)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2430))) > _521;
    float _2451 = _2450 ? _2425 : _586;
    float _2452 = _2450 ? _2426 : _587;
    vec4 _2454 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2451, _2452));
    vec4 _2459 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2451, _2452));
    float _2461 = _2459.x;
    bool _2466 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _2475 = (-0.0) - cbSceneParam._m0[2u].z;
    float _2481 = (_2466 ? (_2475 / (cbSceneParam._m0[2u].x - _2461)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2461))) - _521;
    bool _2488 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2495 = (isnan(_2481) ? 0.0 : (isnan(0.0) ? _2481 : max(0.0, _2481))) * (-1.44269502162933349609375);
    float _4473 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4484 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4495 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    vec4 _2515 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2451, _2452), 0.0);
    float _2517 = _2515.x;
    float _2523 = (_2466 ? (_2475 / (cbSceneParam._m0[2u].x - _2517)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2517))) - _521;
    uint _2529 = floatBitsToUint(cbInstanceData._m0[_1724]).x * 14u;
    uint _2535 = _2529 + 4u;
    float _2544 = dot(vec3(cbLight._m0[_2529].xyz), vec3(_223, _224, _225));
    float _2552 = dot(vec3((-0.0) - _579, (-0.0) - _580, (-0.0) - _581), vec3((-0.0) - _223, (-0.0) - _224, (-0.0) - _225));
    float _2557 = ((isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0))) / (isnan(0.001000000047497451305389404296875) ? _2544 : (isnan(_2544) ? 0.001000000047497451305389404296875 : max(_2544, 0.001000000047497451305389404296875)))) + 1.0;
    float _2558 = _2557 * (isnan(_2523) ? 0.0 : (isnan(0.0) ? _2523 : max(0.0, _2523)));
    float _2607 = 0.959999978542327880859375 - (exp2(log2(1.0 - _667) * 5.0) * 0.959999978542327880859375);
    float _2608 = ((_2488 ? 0.0 : (((cbLight._m0[_2535].x * 0.0159154944121837615966796875) / ((_2557 * 0.699999988079071044921875) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2(_2558 * (-1.0098865032196044921875))))) + ((exp2(_2495 * (_2488 ? 0.0 : 0.699999988079071044921875)) * _2454.x) * cbSceneParam._m0[72u].w)) * _2607;
    float _2609 = ((_2488 ? 0.0 : (((cbLight._m0[_2535].y * 0.0159154944121837615966796875) / ((_2557 * 0.300000011920928955078125) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2(_2558 * (-0.43280851840972900390625))))) + ((exp2(_2495 * (_2488 ? 0.0 : 0.300000011920928955078125)) * _2454.y) * cbSceneParam._m0[72u].w)) * _2607;
    float _2610 = ((_2488 ? 0.0 : (((cbLight._m0[_2535].z * 0.0159154944121837615966796875) / ((_2557 * 0.2199999988079071044921875) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2(_2558 * (-0.3173929154872894287109375))))) + ((exp2(_2495 * (_2488 ? 0.0 : 0.2199999988079071044921875)) * _2454.z) * cbSceneParam._m0[72u].w)) * _2607;
    float _2631 = _586 / cbSceneParam._m0[86u].x;
    float _2632 = _587 / cbSceneParam._m0[86u].y;
    vec4 _2646 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2631, _2632, (log2((isnan(cbSceneParam._m0[77u].w) ? _521 : (isnan(_521) ? cbSceneParam._m0[77u].w : min(_521, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2648 = _2646.x;
    float _2649 = _2646.y;
    float _2650 = _2646.z;
    float _2651 = _2646.w;
    float _2742;
    float _2744;
    float _2746;
    float _2748;
    if (_521 > cbSceneParam._m0[78u].w)
    {
        float _2706 = isnan(_521) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _521 : min(cbSceneParam._m0[80u].w, _521));
        float _2707 = _2706 / _521;
        float _2718 = _2707 * _572;
        float _2719 = _573 * _2707;
        float _2720 = (-0.0) - _2719;
        float _2721 = _2707 * _574;
        float _2723 = (cbSceneParam._m0[77u].w * _2720) / _2706;
        float _2724 = _2723 + cbSceneParam._m0[79u].w;
        float _2725 = cbSceneParam._m0[79u].w - _2719;
        float _2731 = sqrt(((_2718 * _2718) + (_2719 * _2719)) + (_2721 * _2721));
        float _2734 = (1.0 - (cbSceneParam._m0[77u].w / _2706)) * _2731;
        float _2739 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2740 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2926;
        if (abs((_2720 - _2723) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2926 = ((((_2724 > 0.0) ? exp2(_2739 * _2724) : (2.0 - exp2(_2740 * _2724))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2734;
        }
        else
        {
            float _2886 = 1.0 / cbSceneParam._m0[80u].x;
            float _2887 = isnan(_2725) ? _2724 : (isnan(_2724) ? _2725 : max(_2724, _2725));
            float _2888 = isnan(_2725) ? _2724 : (isnan(_2724) ? _2725 : min(_2724, _2725));
            float _2897 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : min(_2887, 0.0));
            float _2898 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : min(_2888, 0.0));
            _2926 = ((abs(_2731 / _2720) * cbSceneParam._m0[80u].y) * ((((_2897 - _2898) * 2.0) - ((exp2(_2739 * (isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0)))) - exp2(_2739 * (isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0))))) * _2886)) - ((exp2(_2740 * _2897) - exp2(_2740 * _2898)) * _2886))) + (_2734 * cbSceneParam._m0[80u].z);
        }
        vec4 _2928 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2631, _2632, 1.0), 0.0);
        float _2937 = exp2((_2926 * (-1.44269502162933349609375)) * (1.0 - _2928.w));
        float _2938 = log2(_2937);
        float _2954 = log2(_2651);
        _2742 = (exp2(_2954 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2938 * cbSceneParam._m0[78u].x)) * _2928.x) / cbSceneParam._m0[78u].x)) + _2648;
        _2744 = (exp2(_2954 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2938 * cbSceneParam._m0[78u].y)) * _2928.y) / cbSceneParam._m0[78u].y)) + _2649;
        _2746 = (exp2(_2954 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2938 * cbSceneParam._m0[78u].z)) * _2928.z) / cbSceneParam._m0[78u].z)) + _2650;
        _2748 = _2937 * _2651;
    }
    else
    {
        _2742 = _2648;
        _2744 = _2649;
        _2746 = _2650;
        _2748 = _2651;
    }
    bool _2760 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2762 = log2(_2748);
    float _2769 = exp2(_2762 * cbSceneParam._m0[78u].x) * ((_2608 + (((((_1656 * _1701.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _1451) * _1717)) + _2405) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2399 + ((isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))) * _652))) - _2608) * 0.5));
    float _2770 = exp2(_2762 * cbSceneParam._m0[78u].y) * ((_2609 + (((((_1656 * _1701.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _1451) * _1717)) + _2407) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2401 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _652))) - _2609) * 0.5));
    float _2771 = exp2(_2762 * cbSceneParam._m0[78u].z) * ((_2610 + (((((_1656 * _1701.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _1451) * _1717)) + _2409) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2403 + ((isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))) * _652))) - _2610) * 0.5));
    vec4 _2779 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_586, _587));
    float _2781 = _2779.x;
    float _2802 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2781)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2781))) - _521) * 3.0;
    float _4561 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
    float _2804 = (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * cbInstanceData._m0[_627 + 6u].w;
    float _2813 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2813 * (_2760 ? _2769 : (_2769 + (cbSceneParam._m0[72u].w * _2742)));
    SV_Target.y = _2813 * (_2760 ? _2770 : (_2770 + (cbSceneParam._m0[72u].w * _2744)));
    SV_Target.z = _2813 * (_2760 ? _2771 : (_2771 + (cbSceneParam._m0[72u].w * _2746)));
    SV_Target.w = _2804;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2804;
}


